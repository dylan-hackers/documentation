<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "../../dtd/concept.dtd">
<concept id="concept-thread-dynamic-environment">
  <title>The Dynamic Environment</title>

  <conbody>
    <p>Dylan has an implicit notion of a <term>dynamic
    environment</term>, corresponding to language constructs with
    <term>dynamic extent</term>. For example, the
    <apiname>block</apiname> construct can introduce
    <i>cleanup-clauses</i>, and the <i>body</i> of the block is
    executed in a dynamic environment in which those cleanup-clauses
    are active. <term>Handlers</term> and <term>exit procedures
    </term> are other examples of language features related to the
    dynamic environment. </p>

    <p>The dynamic environment is defined to be thread-local. When a new
    thread is created, it starts with a fresh dynamic environment. It is
    an error to attempt to use a handler or a non-local exit function belonging
    to another thread. It is impossible to use an unwind-protect cleanup
    from another thread.</p>

    <p>Although the binding of condition handlers only affects the
    dynamic environment of the current thread, unhandled conditions
    are passed to the global generic function
    <apiname>default-handler</apiname> . This function might
    <term>call the debugger</term>. The threads facility does not
    define what calling the debugger means.</p>

    <p>Note that in Dylan, unlike in C and C++, <i>lexical</i>
    variables (that is local, or <codeph>let</codeph>-bound variables)
    have indefinite extent&#x2014;that is, have a lifetime independent
    of the function or block in which they were created&#x2014;and are
    not bound in the dynamic environment.  Because those variables are
    in general potentially global, you may need to explicitly
    synchronize accesses to them.</p>
  </conbody>
</concept>
