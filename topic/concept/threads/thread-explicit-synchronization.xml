<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "../../dtd/concept.dtd">
<concept id="concept-thread-explicit-synchronization">
  <title>Explicit synchronization</title>

  <conbody>
    <p>The Dylan threads facility provides low-level synchronization
    functions which control the ordering of operations with respect to
    other threads, and control when the side effects that have been
    performed within one thread become visible within other
    threads.</p>

    <p>At a higher level, the threads facility provides a variety of
    synchronization facilities, described below. These facilities
    include mutual-exclusion locks, semaphores and notifications. Each
    facility guarantees that when synchronization has been achieved,
    all the side effects of another thread are visible, at least up to
    the point where that other thread last released the
    synchronization facility. </p>

    <p>An appropriate synchronization must be used to guard side-effects
    on state if there is any possibility of those side-effects either being
    corrupted by another thread or corrupting another thread. For example,
    a function which assigns to two slots of an object may require the use
    of a lock to guarantee that other threads never observe the object in
    a partly updated state.</p>

    <p>It is up to library designers to document when synchronization is
    not performed internally, and when synchronization protocols must be
    used by clients. The implications for the Dylan library, and some other
    low-level libraries, are discussed FIXME in Section 4.3 on page 72.</p>
  </conbody>
</concept>
