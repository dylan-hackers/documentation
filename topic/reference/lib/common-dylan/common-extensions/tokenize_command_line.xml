<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE dylanFunction PUBLIC "-//Gwydion//DTD DITA Dylan API Function//EN" "../../../../dtd/dylanFunction.dtd" []>
<dylanFunction id="lib-common-dylan-common-extensions-tokenize_command_line">
  <apiName>tokenize-command-line</apiName>

  <shortdesc>Parses a command line into a command name and
  arguments.</shortdesc>

  <prolog>
    <author></author>
    <copyright>
      <copyryear year="2005"/>
      <copyrholder>Gwydion Dylan Maintainers</copyrholder>
    </copyright>
  </prolog>

  <dylanFunctionDetail>
    <dylanFunctionDef>
      <dylanFunctionParam>
	<apiItemName>line</apiItemName>
        <apiOperationClassifier href="../../dylan/dylan/Lbyte_stringG.xml">&lt;byte-string&gt;</apiOperationClassifier>
	<apiDefNote></apiDefNote>
      </dylanFunctionParam>
      <dylanFunctionReturn>
	<apiItemName>command</apiItemName>
        <apiOperationClassifier href="../../dylan/dylan/Lbyte_stringG.xml">&lt;byte-string&gt;</apiOperationClassifier>
	<apiDefNote></apiDefNote>
      </dylanFunctionReturn>
      <dylanFunctionRestReturn>
	<apiItemName>arguments</apiItemName>
        <apiOperationClassifier href="../../dylan/dylan/Lbyte_stringG.xml">&lt;byte-string&gt;</apiOperationClassifier>
	<apiDefNote></apiDefNote>
      </dylanFunctionRestReturn>
    </dylanFunctionDef>

    <apiDesc>
      <p>Parses the command specified in <parmname>line</parmname>
      into a command name and arguments. The rules used to tokenize
      the string are given in Microsoft’s C/C++ reference in the
      section “Parsing C Command-Line Arguments”.</p>

      <note>This function is not currently implemented for POSIX-like
      platforms.  The closest POSIX equivalent is perhaps the
      <apiname>wordexp</apiname> function, but
      <apiname>wordexp</apiname> can potentially introduce certain
      security risks.</note>
    </apiDesc>
  </dylanFunctionDetail>
</dylanFunction>
