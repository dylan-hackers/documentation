{\rtf1\ansi \deff7\deflang1033{\fonttbl{\f1\froman\fcharset2\fprq2 Symbol;}{\f5\fswiss\fcharset0\fprq2 Arial;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f11\fmodern\fcharset0\fprq1 Courier New;}
{\f49\fswiss\fcharset0\fprq2 Tahoma;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;
\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar \f7\fs20 \snext0 Normal;}{\s1\qr\keepn\widctlpar 
\b\shad\f5\fs32\lang2057 \sbasedon0\snext0 heading 1;}{\s2\li-900\ri-720\keepn\widctlpar \b\f7\fs20\lang2057 \sbasedon0\snext0 heading 2;}{\*\cs10 \additive Default Paragraph Font;}{\s15\widctlpar \cbpat9 \f49\fs20 \sbasedon0\snext15 Document Map;}{
\s16\widctlpar\tqc\tx4320\tqr\tx8640 \f7\fs20 \sbasedon0\snext16 footer;}{\*\cs17 \additive\sbasedon10 page number;}{\s18\widctlpar\tqc\tx4320\tqr\tx8640 \f7\fs20 \sbasedon0\snext18 header;}{\s19\li720\widctlpar \f5\fs32\lang2057 \sbasedon0\snext19 
Body Text 2;}{\s20\li-810\widctlpar \b\f7\fs20\lang2057 \sbasedon0\snext20 Body Text Indent 2;}{\*\cs21 \additive\b\f5\fs40\ulnone\lang2057\nosupersub \sbasedon10 Slide Title;}{\s22\widctlpar \f5\fs36\lang2057 \sbasedon0\snext22 Slide Body;}{
\s23\li90\widctlpar \b\f7\fs20\lang2057 \sbasedon0\snext23 Body Text Indent 3;}{\s24\widctlpar \b\f7\fs20\lang2057 \sbasedon0\snext24 Body Text;}{\s25\widctlpar \f7\fs20 \sbasedon0\snext25 footnote text;}{\*\cs26 \additive\super \sbasedon10 
footnote reference;}}{\info{\title C Types in Dylan}{\author Keith Playford}{\operator Hugh George Greene}{\creatim\yr1998\mo10\dy15\hr21\min41}{\revtim\yr1998\mo10\dy16\hr12\min8}{\version3}{\edmins1}{\nofpages1}{\nofwords698}{\nofchars3981}
{\*\company  }{\vern57431}}\margl547\margr806\margt446\margb360 \widowctrl\ftnbj\aendnotes\aftnstart0\hyphhotz0\aftnnar\hyphcaps0 \fet0\sectd \psz1\linex0\headery709\footery709\cols2\colsx709\linebetcol\endnhere {\footer \pard\plain 
\s16\qc\ri360\widctlpar\tqc\tx4320\tqr\tx8640 \f7\fs20 {\cs17\i\shad 
\par }{\i\lang2057 
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s20\widctlpar \b\f7\fs20\lang2057 {\f5 An Introduction to the Dylan C FFI
\par 
\par Practical 2: Using C Interfaces}{\b0\f5 
\par 
\par The goal of this practical is to import the win32 functionality necessary for an application to:
\par 
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}}\pard \s20\fi-360\li360\widctlpar\tx360{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'a8}}{\b0\f5 display an icon in the status area of the Windows taskbar
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}change that icon as the application\rquote s status changes
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}remove the icon before exiting
\par }\pard \s20\widctlpar {\b0\f5 
\par The single win32 function }{\f5 Shell_NotifyIcon}{\b0\f5  performs each of these operations under the direction of a data struct and a flag word. This is the ASCII version of the interface we need to import (taken from shellapi.h):
\par }\pard \s20\fi810\li-810\widctlpar {\b0\f11\fs16 
\par typedef struct _NOTIFYICONDATAA \{
\par }\pard \s20\li-810\widctlpar {\b0\f11\fs16         \tab         DWORD cbSize;
\par         \tab         HWND hWnd;
\par                  UINT uID;
\par                  UINT uFlags;
\par                  UINT uCallbackMessage;
\par                  HICON hIcon;
\par                  CHAR   szTip[64];
\par }\pard \s20\fi810\li-810\widctlpar {\b0\f11\fs16 \} NOTIFYICONDATAA, *PNOTIFYICONDATAA;
\par }\pard \s20\widctlpar {\b0\f11\fs16 typedef NOTIFYICONDATAA NOTIFYICONDATA;
\par typedef PNOTIFYICONDATAA PNOTIFYICONDATA;
\par 
\par #define NIM_ADD         0x00000000
\par #define NIM_MODIFY      0x00000001
\par #define NIM_DELETE      0x00000002
\par 
\par #define NIF_MESSAGE     0x00000001
\par #define NIF_ICON        0x00000002
\par #define NIF_TIP         0x00000004
\par 
\par WINSHELLAPI BOOL WINAPI Shell_NotifyIconA(DWORD dwMessage, PNOTIFYICONDATAA lpData);
\par 
\par #define Shell_NotifyIcon  Shell_NotifyIconA
\par }{\b0\f5 
\par Following the most common pattern for importing new functionality, two interface libraries will be defined:
\par 
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}}\pard \s20\fi-360\li360\widctlpar\tx360{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'a8}}{\b0\f5 A win32-specific library providing the raw interface called }{\f5 win32-taskbar}{\b0\f5 . 
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}A higher level library with a more Dylan-style interface called }{\f5 status-icons}{\b0\f5 . For the purposes of this practical, }{\f5 status-icons}{\b0\f5  will allow clients to indicate only \ldblquote OK\rdblquote 
, \ldblquote Warning\rdblquote , and \ldblquote Error\rdblquote  and have three suitable icon names hardwired in.
\par }\pard \s20\widctlpar {\b0\f5 
\par A }{\f5 win32-taskbar}{\b0\f5  project with the appropriate imports and exports defined has been generated for you. 
\par 
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}}\pard \s20\fi-360\li360\widctlpar\tx360{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'a8}}{\b0\f5 Open the }{\f5 win32-taskbar}{\b0\f5 
 project provided and ensure that it is in production mode (Project>Settings dialog). This is important because only a subset of FFI definitions compile correctly in interactive development mode.
\par {\pntext\pard\plain\f1\fs16 \'a8\tab}Open }{\f5 module.dylan}{\b0\f5  and look at the export list. All the names listed need to be defined. Note that they follow our standard win32 name translation conventions. }{\b0\f11\fs16 
\par {\pntext\pard\plain\f1\fs16 \'a8\tab}}{\b0\f5 Open }{\f5 win32-taskbar.dylan}{\b0\f5  and you\rquote ll see some \ldblquote TODO\rdblquote 
 comments that signpost the implementation of the interface. Begin the transcription of the interface with the constants, turning each }{\f5 #define}{\b0\f5  into a corresponding }{\f5 define constant}{\b0\f5 . Remember that Dylan\rquote 
s hex integer syntax begins }{\f5 #x}{\b0\f5 , not }{\f5 0x}{\b0\f5  like C\rquote s.}{\b0\f11\fs16 
\par {\pntext\pard\plain\f1\fs16 \'a8\tab}}{\b0\f5 Turn the struct definition into a }{\f5 define C-struct}{\b0\f5 . The slot type designators you need, }{\f5 <DWORD>}{\b0\f5 , }{\f5 <HWND>}{\b0\f5 , }{\f5 <CHAR>}{\b0\f5  and so on are defined in }{\f5 
win32-common}{\b0\f5  and are available for you to use here. Note that }{\f5 szTip}{\b0\f5  is an array slot, and so needs the }{\f5 array}{\b0\f5  modifier. Define the }{\f5 typedef}{\b0\f5  aliases using }{\f5 define constant}{\b0\f5 .}{\b0\f11\fs16 

\par {\pntext\pard\plain\f1\fs16 \'a8\tab}}{\b0\f5 Turn the function definition into a }{\f5 define C-function}{\b0\f5 . Call it }{\f5 Shell-NotifyIcon}{\b0\f5  with }{\f5 c-name:}{\b0\f5  }{\f5 \ldblquote Shell_NotifyIconA\rdblquote }{\b0\f5 
 to respect the intent of the alias in the C header. It\rquote s a WINAPI function, so it needs to be declared to be a }{\f5 __stdcall}{\b0\f5 .}{\b0\f11\fs16 
\par {\pntext\pard\plain\f1\fs16 \'a8\tab}}{\b0\f5 Add }{\f5 shell32.lib}{\b0\f5  from the VC++ install }{\f5 lib}{\b0\f5  directory to the project\rquote s list of files with Project>Insert File\'85 }{\b0\f11\fs16 
\par {\pntext\pard\plain\f1\fs16 \'a8\tab}}{\b0\f5 Now compile the project, attending to any warnings.}{\b0\f11\fs16 
\par }\pard \s20\widctlpar {\b0\f5 
\par The next step is to test this interface. The most convenient way to do that is to use an interactive mode library that uses }{\f5 win32-taskbar}{\b0\f5 . Temporarily, }{\f5 status-icons}{\b0\f5  will serve that role. Later, it will be compiled to a DLL.

\par 
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}}\pard \s20\fi-360\li360\widctlpar\tx360{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'a8}}{\b0\f5 Open the part-implemented }{\f5 status-icons}{\b0\f5 
 project provided. Ensure that the project is in interactive development mode, and set up to produce a .exe. Open an interactor on }{\f5 status-icons}{\b0\f5 . Open }{\f5 status-icons.dylan}{\b0\f5  and you will find more \ldblquote TODO\rdblquote 
 comments indicating what needs to be implemented in order to complete the project. Snippets of C code are included for which equivalent Dylan methods need to be written.
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}Make a heap-allocated }{\f5 NOTIFYICONDATA}{\b0\f5  struct to play with in the interactor (using }{\f5 make}{\b0\f5  on }{\f5 <PNOTIFYICONDATA>}{\b0\f5 ) and try initializing the stuct as indicated by the C code for }{
\f5 AddIcon}{\b0\f5 . Now call }{\f5 Shell-NotifyIcon}{\b0\f5  with the appropriate arguments to get an icon to appear in the taskbar. Still in the interactor, try constructing a call to remove the icon.
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}Now try to implement the four functions indicated. Instead of heap-allocating the struct in each case, use stack allocation instead (}{\f5 with-stack-structure}{\b0\f5 ). Note that in }{\f5 add-tag}{\b0\f5 
, the characters of the tip string need to be copied into the tip }{\f5 CHAR}{\b0\f5  array and nul (\lquote \\0\rquote  in Dylan) terminated. }{\f5 CHAR}{\b0\f5  is mapped, and Dylan characters may be put directly into the array with }{\f5 element-setter
}{\b0\f5  without converting to integers first. 
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}Now test the client interface using the interactor again.
\par }\pard \s20\widctlpar {\b0\f5 
\par Finally, change the settings of }{\f5 status-icons}{\b0\f5  to build a DLL, and comment out the code in }{\f5 start.dylan}{\b0\f5 , then do a clean rebuild. Open and run the }{\f5 status-buttons}{\b0\f5  client project provided to see }{\f5 status-icons}{
\b0\f5  in use.
\par }}