{\rtf1\ansi \deff7\deflang1033{\fonttbl{\f5\fswiss\fcharset0\fprq2 Arial;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f11\fmodern\fcharset0\fprq1 Courier New;}{\f49\fswiss\fcharset0\fprq2 Tahoma;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;
\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar \f7\fs20 \snext0 Normal;}{\s1\qr\keepn\widctlpar \b\shad\f5\fs32\lang2057 \sbasedon0\snext0 heading 1;}{
\s2\li-900\ri-720\keepn\widctlpar \b\f7\fs20\lang2057 \sbasedon0\snext0 heading 2;}{\s3\keepn\widctlpar \b\f5\fs20 \sbasedon0\snext0 heading 3;}{\*\cs10 \additive Default Paragraph Font;}{\s15\widctlpar \cbpat9 \f49\fs20 \sbasedon0\snext15 Document Map;}{
\s16\widctlpar\tqc\tx4320\tqr\tx8640 \f7\fs20 \sbasedon0\snext16 footer;}{\*\cs17 \additive\sbasedon10 page number;}{\s18\widctlpar\tqc\tx4320\tqr\tx8640 \f7\fs20 \sbasedon0\snext18 header;}{\s19\li720\widctlpar \f5\fs32\lang2057 \sbasedon0\snext19 
Body Text 2;}{\s20\li-810\widctlpar \b\f7\fs20\lang2057 \sbasedon0\snext20 Body Text Indent 2;}{\*\cs21 \additive\b\f5\fs40\ulnone\lang2057\nosupersub \sbasedon10 Slide Title;}{\s22\widctlpar \f5\fs36\lang2057 \sbasedon0\snext22 Slide Body;}{
\s23\li90\widctlpar \b\f7\fs20\lang2057 \sbasedon0\snext23 Body Text Indent 3;}{\s24\widctlpar \b\f7\fs20\lang2057 \sbasedon0\snext24 Body Text;}{\*\cs25 \additive\f11\fs18  Code;}}{\info{\title C Types in Dylan}{\author Keith Playford}
{\operator Hugh George Greene}{\creatim\yr1998\mo10\dy15\hr21\min42}{\revtim\yr1998\mo10\dy16\hr12\min6}{\version2}{\edmins1}{\nofpages1}{\nofwords504}{\nofchars2874}{\*\company  }{\vern57431}}\margl547\margr806\margt446\margb180 
\widowctrl\ftnbj\aendnotes\aftnstart0\hyphhotz0\aftnnar\hyphcaps0 \fet0\sectd \psz1\linex0\headery709\footery709\cols2\colsx709\linebetcol\endnhere {\footer \pard\plain \s16\qc\ri360\widctlpar\tqc\tx4320\tqr\tx8640 \f7\fs20 {\cs17\i\shad 
\par }{\i\lang2057 
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s20\widctlpar \b\f7\fs20\lang2057 {\f5 An Introduction to Dylan ODBC
\par 
\par Crib Sheet for the Practicals}{\b0\f5 
\par 
\par }{\f5 Getting Connected using the Macros}{\b0\f5 
\par 
\par // Instantiate a DBMS object:
\par }{\b0\f11\fs18 define constant $dbms = make(<odbc-dbms>);
\par }{\b0\f5 
\par // Establish a default DBMS:
\par }{\b0\f11\fs18 with-dbms ($dbms)
\par }{\b0\f5   // Instantiate a database object:
\par   }{\b0\f11\fs18 let db 
\par    = make(<database>, 
\par           datasource-name: \ldblquote Foo\rdblquote );
\par }{\b0\f5   // Instantiate a user object for login:
\par   }{\b0\f11\fs18 let user
\par     = make(<user>, 
\par            user-name: \ldblquote Me\rdblquote , 
\par            password: \ldblquote $%^&\rdblquote );}{\b0\f5 
\par   // Open a connection and establish it as the default:
\par   }{\b0\f11\fs18 with-database (db, user)}{\b0\f5 
\par     // Make queries over that default connection:
\par     }{\cs25\b0\f11\fs18 \'85 execute(\ldblquote select * from stuff\rdblquote ) \'85
\par }{\b0\f5   end with-database;
\par end with-dbms;
\par 
\par }{\f5 Getting Connected Manually}{\b0\f5 
\par 
\par }{\cs25\b0\f11\fs18 // Instantiate ODBC objects explicitly:
\par let db = make(<odbc-database>,
\par               datasource-name: \ldblquote Foo\rdblquote );
\par let user
\par   = make(<odbc-user>,
\par          user-name: \ldblquote Me\rdblquote ,
\par          password: \ldblquote $%^&\rdblquote );
\par // Establish a new connection (the dbms: is
\par // optional if a with-dbms is in force):
\par let connection 
\par   = connect(db, user, dbms: $dbms);
\par // Make it the default connection:
\par with-connection (connection)
\par   // Make queries over this connection
\par   \'85 execute(\ldblquote select * from stuff\rdblquote ) \'85
\par end with-connection;
\par // Close the connection:
\par disconnect(connection);
\par // Or: disconnect-all();
\par // Or: disconnect-all(dbms: $dbms);
\par 
\par }\pard\plain \s3\keepn\widctlpar \b\f5\fs20 Making Queries
\par \pard\plain \widctlpar \f7\fs20 {\f5 
\par }{\cs25\f11\fs18 // Longhand:
\par let query 
\par   = make(<sql-statement>,
\par          text: \ldblquote select foo from stuff\rdblquote );
\par execute(query);
\par // Shorthand, where the <sql-statement> object
\par // is constructed for you be execute:
\par execute(\ldblquote select a, b, c from stuff\rdblquote );
\par 
\par 
\par // Query options:
\par make(<sql-statement>,
\par      text: \ldblquote \'85\rdblquote ,
\par      coercion-policy:  $my-coercion-policy,
\par      output-indicator: $my-null-output-value,
\par      input-indicator:  $my-null-input-value);
\par 
\par // The canonical null input/output value:
\par $null-value
\par 
\par // Execute options:
\par execute(query-object,
\par         parameters: vector(arg1, arg2),
\par         result-set-policy: $my-result-policy,
\par         liaison: my-liaison-function);
\par // Extra string execute options passed on to
\par // the implicit make on <sql-statement>:
\par execute(query-string,
\par         coercion-policy: 
\par           $my-coercion-policy);}{\cs25\f5 
\par 
\par }\pard\plain \s3\keepn\widctlpar \b\f5\fs20 {\cs25 Result Sets}{\cs25\b0 
\par }\pard\plain \widctlpar \f7\fs20 
\par {\cs25\f5\fs18 // Default policy is forward only, returns
\par // instances of <forward-only-result-set>:
\par }{\cs25\f11\fs18 $default-result-set-policy
\par }{\cs25\f5\fs18 // Predefined scrollable policy, returns
\par // instances of <scrollable-result-set>:}{\cs25\f11\fs18 
\par $scrollable-result-set-policy
\par }{\cs25\f5\fs18 // Custom policy:
\par }{\cs25\f11\fs18 make(<row-set-policy>,
\par      scrollable?:   #t,
\par      scroll-window: $my-cache-size);
\par }{\cs25\f5 
\par }\pard\plain \s3\keepn\widctlpar \b\f5\fs20 {\cs25 Coercion Policies}{\cs25\b0 
\par }\pard\plain \widctlpar \f7\fs20 
\par {\f5 Low level column-value datatype conversion.
\par }
\par {\cs25\f11\fs18 // Default coercion converts each column value
\par // to the corresponding Dylan object:
\par $default-coercion
\par // No coercion leaves column values in raw
\par // form:
\par $no-coercion
\par // Custom conversion through vectors of 
\par // column-value converting functions:
\par vector(col-1-converter, col-2-converter) 
\par 
\par // Example custom column-value coercion
\par // function:
\par define method col-1-converter 
\par     (raw-value) => (converted-value)
\par   \'85
\par end method;
\par }
\par \pard\plain \s3\keepn\widctlpar \b\f5\fs20 Liaison Functions{\b0 
\par }\pard\plain \widctlpar \f7\fs20 
\par {\f5 Record-by-record conversion e.g. for converting result records to instances of custom classes.
\par 
\par }{\cs25\f11\fs18 // Default liaison function in the absence of
\par // a supplied coercion policy:
\par copy-sequence
\par // Default liaison function when a coercion 
\par // policy is supplied.
\par identity
\par 
\par // Example custom liason function:
\par define method my-liason-function
\par     (record :: <record>) => (my-object)
\par   // <record> is a subclass of <sequence>
\par   make(<my-object>,
\par        name: record[1],
\par        addres: record[3],
\par        \'85);
\par end method;}{\f5 
\par }}