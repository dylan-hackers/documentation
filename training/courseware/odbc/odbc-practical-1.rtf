{\rtf1\ansi \deff7\deflang1033{\fonttbl{\f1\froman\fcharset2\fprq2 Symbol;}{\f5\fswiss\fcharset0\fprq2 Arial;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f49\fswiss\fcharset0\fprq2 Tahoma;}}{\colortbl;\red0\green0\blue0;
\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;
\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar \f7\fs20 \snext0 Normal;}{\s1\qr\keepn\widctlpar \b\shad\f5\fs32\lang2057 \sbasedon0\snext0 heading 1;}{
\s2\li-900\ri-720\keepn\widctlpar \b\f7\fs20\lang2057 \sbasedon0\snext0 heading 2;}{\*\cs10 \additive Default Paragraph Font;}{\s15\widctlpar \cbpat9 \f49\fs20 \sbasedon0\snext15 Document Map;}{\s16\widctlpar\tqc\tx4320\tqr\tx8640 \f7\fs20 
\sbasedon0\snext16 footer;}{\*\cs17 \additive\sbasedon10 page number;}{\s18\widctlpar\tqc\tx4320\tqr\tx8640 \f7\fs20 \sbasedon0\snext18 header;}{\s19\li720\widctlpar \f5\fs32\lang2057 \sbasedon0\snext19 Body Text 2;}{\s20\li-810\widctlpar 
\b\f7\fs20\lang2057 \sbasedon0\snext20 Body Text Indent 2;}{\*\cs21 \additive\b\f5\fs40\ulnone\lang2057\nosupersub \sbasedon10 Slide Title;}{\s22\widctlpar \f5\fs36\lang2057 \sbasedon0\snext22 Slide Body;}{\s23\li90\widctlpar \b\f7\fs20\lang2057 
\sbasedon0\snext23 Body Text Indent 3;}{\s24\widctlpar \b\f7\fs20\lang2057 \sbasedon0\snext24 Body Text;}}{\info{\title C Types in Dylan}{\author Keith Playford}{\operator Hugh George Greene}{\creatim\yr1998\mo10\dy15\hr21\min42}
{\revtim\yr1998\mo10\dy16\hr11\min47}{\version2}{\edmins3}{\nofpages1}{\nofwords629}{\nofchars3587}{\*\company  }{\vern57431}}\margl547\margr806\margt446\margb547 \widowctrl\ftnbj\aendnotes\aftnstart0\hyphhotz0\aftnnar\hyphcaps0 \fet0\sectd 
\psz1\linex0\headery709\footery709\cols2\colsx709\linebetcol\endnhere {\footer \pard\plain \s16\qc\ri360\widctlpar\tqc\tx4320\tqr\tx8640 \f7\fs20 {\cs17\i\shad 
\par }{\i\lang2057 
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s20\widctlpar \b\f7\fs20\lang2057 {\f5 An Introduction to Dylan ODBC
\par 
\par Practical 1: The ODBC Playground}{\b0\f5 
\par 
\par The purpose of this practical is just to get familiar with Dylan\rquote s ODBC interface by experimenting in an interactor.
\par 
\par Use the environment to generate a development mode GUI application called }{\f5 odbc-playground}{\b0\f5  that uses the }{\f5 sql-odbc}{\b0\f5  library.
\par 
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}}\pard \s20\fi-360\li360\widctlpar\tx360{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'a8}}{\b0\f5 Don\rquote t ask the wizard to include template code.
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}Use the wizard\rquote s \ldblquote Typical\rdblquote  libraries selector.
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}We want standard IO and the high-level ODBC support only; no FFI, no win32, no OLE, no DUIM.
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}Once generated, ensure that the project is set to interactive development mode.
\par }\pard \s20\widctlpar {\b0\f5 
\par Open an interactor on the project. You will be prompted to build it. Once the interactor opens, you are in a position to experiment with }{\f5 sql-odbc}{\b0\f5 .
\par 
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}}\pard \s20\fi-360\li360\widctlpar\tx360{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'a8}}{\b0\f5 Make and bind an instance of }{\f5 <odbc-dbms>}{\b0\f5   to work with.
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}Using the macros }{\f5 with-dbms}{\b0\f5  and }{\f5 with-database}{\b0\f5 , and instantiating appropriate instances of }{\f5 <database>}{\b0\f5  and }{\f5 <user>}{\b0\f5 , construct and
 evaluate an expression to open a database connection to the }{\f5 \ldblquote Northwind\rdblquote }{\b0\f5  database. The user-name and password should both be }{\f5 \ldblquote \rdblquote }{\b0\f5 , the empty string. It\rquote 
s probably easiest to construct it ouside in, a bit at a time, using the interactor\rquote s history to yank back the last partial expression.
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}Once a connection is being established without errors, try adding a simple query to the body inside the }{\f5 with-database}{\b0\f5  macro. Use }{\f5 execute}{\b0\f5  to run: }{\f5 
select firstName, lastName from employees}{\b0\f5 
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}If you try to access the elements of the result set returned from the }{\f5 with-dbms}{\b0\f5  expression outside the }{\f5 with-dbms}{\b0\f5 
, an error will occur because elements of the result set are retrieved lazily and the connection was closed on return from }{\f5 with-database}{\b0\f5 . Force their retrieval by coercing the result set to a }{\f5 <list>}{\b0\f5  with }{\f5 as}{\b0\f5 
 before returning it.
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}This is convenient but note that it only works because the }{\f5 as}{\b0\f5  method for lists in Harlequin Dylan just happens to traverse the input sequence once from start to finish (don\rquote 
t rely on this in real code). Try coercing to }{\f5 <vector>}{\b0\f5  instead and note that you get corrupted results because }{\b0\i\f5 that}{\b0\f5  }{\f5 as}{\b0\f5 
 method does not follow the restricted iteration pattern supported by forward-only result sets.
\par }\pard \s20\widctlpar {\b0\f5 
\par It\rquote s slightly inconvenient to have to yank back the whole }{\f5 with-dbms}{\b0\f5 
 for each experiment, and costly because of the overhead of opening and closing the database each time. It would be easier to be able to interact within the context of an open connection.
\par 
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}}\pard \s20\fi-360\li360\widctlpar\tx360{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'a8}}{\b0\f5 Yank back the }{\f5 with-dbms}{\b0\f5  form and this time put a call to }{\f5 break}{\b0\f5  in t
he body of }{\f5 with-database}{\b0\f5 . When run, the expression will break back into the debugger with the dynamic extent of the open database connection still in place.
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}Still in this context, try executing a query by running a call to }{\f5 execute}{\b0\f5  without any surrounding code. Try: }{\f5 select * from}{\b0\f5  }{\f5 customers}{\b0\f5 
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}Now you can work directly with the result sets you get back because the database connection is still open.
\par }\pard \s20\widctlpar {\b0\f5 
\par It\rquote s now easier to experiment with the various possibilities, so stay within this dynamic context from now on. Continue to use }{\f5 as(<list>, execute(\'85))}{\b0\f5  as a convenient way of viewing the results in the interactor.
\par 
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}}\pard \s20\fi-360\li360\widctlpar\tx360{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'a8}}{\b0\f5 Make an }{\f5 <sql-statement>}{\b0\f5  object corresponding to }{\f5 select * from customers}{\b0\f5 
 by hand and call }{\f5 execute}{\b0\f5  on it, just to prove that the longhand form also works!
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}Either longhand or shorthand, try the query: }{\f5 select * from customers where country = \lquote UK\rquote }{\b0\f5 .
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}Try the same query again, but where }{\f5 \ldblquote UK\rdblquote }{\b0\f5  is provided as a parameter to }{\f5 execute}{\b0\f5  and a }{\f5 ?}{\b0\f5  appears at the appropriate place in the query text.
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}Try the same query again, but specifying the scrollable result set policy. This time use }{\f5 as(<vector>, \'85)}{\b0\f5 
 to get a printable sequence of results, noting that is works this time because the scrollable result set can be accessed repeatedly and in any order.
\par }\pard \s20\widctlpar {\b0\f5 
\par Still in the context of the open connection, experiment with how and when liaison functions are called.
\par 
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}}\pard \s20\fi-360\li360\widctlpar\tx360{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'a8}}{\b0\f5 Define a tracing liaison function that does the same thing as the default liason (i.e. }{\f5 copy-sequence
}{\b0\f5 ) but first calls }{\f5 format-out}{\b0\f5  to display the argument.
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}Execute one of the above queries but don\rquote t touch the result set. Now access one of the results with }{\f5 element}{\b0\f5 . You\rquote 
ll see that the liaison function is called lazily as particular results are accessed.
\par }\pard \s20\widctlpar {\b0\f5 
\par If there\rquote s time, just try stuff out in the interactor and see what happens. For example, try specifying the \ldblquote no coercion\rdblquote  policy and look at the raw representations you get back by browsing them in the interactor.
\par 
\par }}