{\rtf1\ansi \deff7\deflang1033{\fonttbl{\f1\froman\fcharset2\fprq2 Symbol;}{\f5\fswiss\fcharset0\fprq2 Arial;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f49\fswiss\fcharset0\fprq2 Tahoma;}}{\colortbl;\red0\green0\blue0;
\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;
\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar \f7\fs20 \snext0 Normal;}{\s1\qr\keepn\widctlpar \b\shad\f5\fs32\lang2057 \sbasedon0\snext0 heading 1;}{
\s2\li-900\ri-720\keepn\widctlpar \b\f7\fs20\lang2057 \sbasedon0\snext0 heading 2;}{\*\cs10 \additive Default Paragraph Font;}{\s15\widctlpar \cbpat9 \f49\fs20 \sbasedon0\snext15 Document Map;}{\s16\widctlpar\tqc\tx4320\tqr\tx8640 \f7\fs20 
\sbasedon0\snext16 footer;}{\*\cs17 \additive\sbasedon10 page number;}{\s18\widctlpar\tqc\tx4320\tqr\tx8640 \f7\fs20 \sbasedon0\snext18 header;}{\s19\li720\widctlpar \f5\fs32\lang2057 \sbasedon0\snext19 Body Text 2;}{\s20\li-810\widctlpar 
\b\f7\fs20\lang2057 \sbasedon0\snext20 Body Text Indent 2;}{\*\cs21 \additive\b\f5\fs40\ulnone\lang2057\nosupersub \sbasedon10 Slide Title;}{\s22\widctlpar \f5\fs36\lang2057 \sbasedon0\snext22 Slide Body;}{\s23\li90\widctlpar \b\f7\fs20\lang2057 
\sbasedon0\snext23 Body Text Indent 3;}{\s24\widctlpar \b\f7\fs20\lang2057 \sbasedon0\snext24 Body Text;}}{\info{\title C Types in Dylan}{\author Keith Playford}{\operator Hugh George Greene}{\creatim\yr1998\mo10\dy15\hr21\min43}
{\revtim\yr1998\mo10\dy16\hr11\min49}{\version3}{\edmins0}{\nofpages1}{\nofwords347}{\nofchars1981}{\*\company  }{\vern57431}}\margl547\margr806\margt446\margb547 \widowctrl\ftnbj\aendnotes\aftnstart0\hyphhotz0\aftnnar\hyphcaps0 \fet0\sectd 
\psz1\linex0\headery709\footery709\cols2\colsx709\linebetcol\endnhere {\footer \pard\plain \s16\qc\ri360\widctlpar\tqc\tx4320\tqr\tx8640 \f7\fs20 {\cs17\i\shad 
\par }{\i\lang2057 
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s20\widctlpar \b\f7\fs20\lang2057 {\f5 An Introduction to Dylan ODBC
\par 
\par Practical 2: The Select Viewer}{\b0\f5 
\par 
\par The goal of this practical is to complete a small DUIM application for displaying the results of SQL queries in a table by implementing the query engine using Dylan\rquote 
s SQL ODBC interface. The default policies for liaison and coercion are adequate for implementing this small example. The database name, user-name, password and all query strings are provided pre-formed by the UI.}{\f5 
\par }{\b0\f5 
\par Open the }{\f5 select-viewer}{\b0\f5  project provided.
\par 
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}}\pard \s20\fi-360\li360\widctlpar\tx360{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'a8}}{\b0\f5 Build and run }{\f5 odbc-back-end}{\b0\f5 
 just to see what the application does. Enter some text into the \ldblquote Select\rdblquote  box and press return (the text is ignored at this stage). You will see some dummy data displayed in the table.
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}Open }{\f5 odbc-back-end.dylan}{\b0\f5 . You\rquote ll find a number of \ldblquote TODO\rdblquote  comments and a stub implementation returning dummy data.
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}Three functions need to be implemented for real: }{\f5 open-database}{\b0\f5 , }{\f5 query-database}{\b0\f5 , and }{\f5 close-database}{\b0\f5 .
\par }\pard \s20\widctlpar {\b0\f5 
\par We\rquote ll implement two versions. The first version will essentially ignore the open and close protocols, and reopen the database for each query.
\par 
\par {\pntext\pard\plain\b\f1\fs20 \'a8\tab}}\pard \s20\fi-360\li360\widctlpar\tx360{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'a8}}{\b0\f5 Change }{\f5 open-database}{\b0\f5 
 to simply package up its arguments in a list or an object of some kind and return them. This package will get passed back in to }{\f5 query-database}{\b0\f5 .}{\f5 
\par {\pntext\pard\plain\b\f1\fs20 \'a8\tab}}{\b0\f5 Implement }{\f5 query-database}{\b0\f5  by unpacking the database, user-name, and password information, then using a }{\f5 with-database}{\b0\f5  within a }{\f5 with-dbms}{\b0\f5 
 to open a database connection before making the query. The default coercion and liaison policies 
are adequate here. Convert the result set to a built-in Dylan sequence before using it to generate the column headings (look at how the stub code does it) and returning the results to the caller.}{\f5 
\par {\pntext\pard\plain\b\f1\fs20 \'a8\tab}}{\b0\f5 Build and debug, trying some of the queries suggested in practical 1. Note that the }{\f5 select}{\b0\f5  itself is added by the UI so it doesn\rquote t need to be typed into the text box.}{\f5 
\par }\pard \s20\widctlpar {\b0\f5 
\par When that works, implement version two closer to the spirit of the protocol being implemented by opening a database connection in }{\f5 open-database}{\b0\f5 , using it to make the query in }{\f5 query-database}{\b0\f5 , and closing the connection in }{
\f5 close-database}{\b0\f5 .
\par 
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}}\pard \s20\fi-360\li360\widctlpar\tx360{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'a8}}{\b0\f5 Change }{\f5 open-database}{\b0\f5  to use a }{\f5 with-dbms}{\b0\f5  and a call to the }{\f5 connect}{
\b0\f5  function to open the database connection, and return the connection object.
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}Change }{\f5 query-database}{\b0\f5  to use }{\f5 with-connection}{\b0\f5  on the connection object passed and make the query within it.
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}Change }{\f5 close-database}{\b0\f5  to use }{\f5 disconnect}{\b0\f5  so close the database connection.
\par {\pntext\pard\plain\f1\fs20 \'a8\tab}Build and debug as above.
\par }}