; -*- outline -*-

* Intro to DUIM, Part 1


** [1h] Basic DUIM talk

o  What is DUIM?
  o  "Toolkit wrapper", sitting on top of Win32, like AWT "peer" approach
    o  Dylan equivalent of MFC; you pay overhead for flexibility,
       language-suitability and abstraction: e.g., event-loops are
       hidden and you mostly just work in terms of callbacks.
    o  aims for GCD (greatest common denominator), not LCD
    o  e.g., dynamic layout, tab controls on top of "basic Motif", ...
  o  Aims
    o  functionality: easy to use, compact, portable
    o  simple to learn yet extensible, due to layering and Dylan OO/syntax
  o  Benefits over raw Win32 (or other toolkit)
    o  Dylan-style OO: classes and protocols, not C enums and opaque handles
    o  appearance vs. behaviour: DUIM separates these cleanly
    o  [appr] dynamic layout: fairly complex GUIs are easy to make & change
    o  [behv] callbacks: map low-level events to behaviours easily

o  Basic DUIM classes
  o  frames[I/O], sheets[I/O], layouts[O], gadgets[I/O], events[I]
  o  standard classes of frames, dialogs and gadgets -- more detail later
  o  also: drawing-related, clipboards, pointers, carets, displays, ports,
     frame-managers

o  DUIM examples (source and output)
    o  Basic frame with a label
    o  Frame with a gadget (button)
    o  vertical/horizontal layout of label and text field; also "labelling"
    o  simple callback protocols (activate, value-changed)

(And maybe, if there's time ...)

o  Basic DUIM protocols (general descriptions, not each function)
  o  frames ???
  o  sheet geneaology, geometry
  o  layouts (compose space, allocate space)
  o  gadget label, activation, value, items, selection, enabled?
  o  events ???

o  Simple dialogs: notify, string(?), list, file, directory, font, colour
  o  modality and owners


** [2h] DUIM practical 1

o  Err, let's just work through "Building Applications Using DUIM"!
  o  [I didn't rehearse this and it turned out to be a bad idea, because the
     source code in the doc is in scraps and presented out-of-order, so it
     just ended up confusing people and having them cut'n'paste'n'guess a
     lot.  Better to take that doc and make it more sequential, and maybe
     give "crib [cheat] sheets" and suggested "scripts" like Keith Playford
     did.]


* Intro to DUIM, Part 2


** [1h] More basic DUIM

o  Recap

o  If not covered in the morning:
  o  Basic DUIM protocols
  o  Built-in dialogs

o  More detailed lists of layout, gadget and frame classes

(Advanced)

o  Commands
  o  command objects and just functions
  o  undo?
  o  Command tables: inheritance, inclusion, deriving menus

o  Win32 resource integration

o  Events
  o  <frame-event>s (created, (un-)mapped, (de-)iconfied,
     exit(-ed), destroyed)


** [2h] DUIM practical 2

o  More of "BAUD"?
  o  command tables (and how they're not perfect)
  o  [This was about as far as we got, as people were still confusedly
     working through "BAUD"!]

o  See how easy it can be to change gadget classes :-)
  o  Radio gadget to combo box?
  o  Modify task list to use table control (with column for state)
o  Add popup menu (with items for state)

o  Recode to use Win32 resources
  o  [Trainees could design one in VC++, or trainer could have one "prepared
     earlier"]

o  Designing your own frames & dialogs
  o  Extend the task-list example, or invent some DB interface (for later
     use in the OLE Automation or ODBC example?)
  o  Add some dialogs, maybe property sheets and maybe hand-rolled

