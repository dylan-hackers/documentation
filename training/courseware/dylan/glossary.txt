
abstract
   - of a class, indicating that no direct instances can be made.  Concrete subclasses 
     are intended to be defined.

binding
   - names within a module that reference definitions of constants, variables,
     methods, generics, macros.  These names can be imported/exported/renamed between
     modules and hence libraries.
CPL
   - class precedence list.  Each class has an ordering over its superclasses defined.
     This ordering is consistent with each classes direct superclass list (local
     precedence list).  It is used to disambiguate method dispatch in complex cases.

class
   - (1) A definition of a kind of instance, inheriting behaviour and slots from 
     superclasses.
   - (2) An instance of the class "<class>".

concrete
   - opposite of abstract

congruent
   - of parameter lists, matching.  A method of a generic has to match in the number
     of required arguments and presence or absence of #rest and #key arguments.

direct instance
   - an instance is a direct instance of class <foo> if its object-class is == to <foo>

free
   - opposite of primary, a class from which one can freely inherit.

general instance
   - an instance, x, is a general instance of class <foo> if "instance? (x, <foo>)" is
     "#t"   (its class is <foo> or inherits from <foo>)

generic function
   - an object that provides method dispatch.  <generic-function> inherits from 
     <function>, which means it can be called just like any other function or method.
     Generics contain a set of methods, and the signatures of the methods determine 
     the dispatch according to Dylan's multi-method dispatch rules.  See CPL.

instantiable
   - of a class - means that the class is valid as the first parameter to the generic 
     function "make".  It is possible for an abstract class to be instantiable, meaning
     that the method for "make" selects an appropriate concrete subclass.

library
   - A unit of namespace grouping, intended to compile down to a linkable library 
     providing self-contained functionality.  Contains modules and imports and exports.

module
   - A unit of namespace grouping, intended to group related bindings (definitions) for
     import and export.  Libraries consist of a number of modules, and may export them
     and import others from other libraries.
     Each Dylan source fragment (well, file) is "in" a particular module, and hence also
     owned by the library that owns that module.

open
   - opposite of sealed

parameter list
   - part of the signature of a method or function, listing the required arguments,
     any "#rest" and "#key" arguments, and (optionally) type information.
     All methods within a generic have to be "congruent" with the generic's
     parameter list. 

primary
   - of a class, a declaration that the class and its subclasses can only ever be
     inherited from in the primary (first) position in the local precedence list.

sealed
   - of a class, declare that no further subclassing (other than textually within the
     same library's source) may occur - allow optimization based on this knowledge

   - of a generic function, method or slot, declare the domain for that definition
     sealed (no other methods within that domain may be defined outside of the
     owning library's source

signature
   - the full specification of a method or function or generic's arguments and return
     value(s)

slot
   - In Java terms, an instance variable - storage associated with instances of a class,
     defined by the class definition.  In dylan a slot declaration for a slot "foo"
     implicitly defines methods on the generics "foo" and "foo-setter".  The actual
     mechanism for accessing raw slots is not visible to the programmer.

uninstantiable
   - opposite of instantiable.