* Bottles of beer

// Dylan version of 99 Bottles of Beer
// programmer: Jim Studt jim@federated.com
// See <URL:http://www.ionet.net/~timtroyr/funhouse/beer.html>

define method enumerate( count == 1 ) "1 bottle" end method enumerate;
define method enumerate( count == 0 ) "no more bottles" end method enumerate;
define method enumerate( count :: <integer> )
  format-to-string("%d bottles", count);
end method enumerate;

define method reference( count == 1) "it" end method reference;
define method reference( count :: <integer>) "one" end method reference;

define method main (argv0, #rest noise)
  for ( i from 99 to 1 by -1)
    format( *standard-output*, "%s of beer on the wall, %s of beer.\n",
           enumerate(i), enumerate(i));
    format( *standard-output*,
           "  Take %s down, pass it around, %s of beer on the wall.\n",
           reference(i), enumerate( i - 1));
  end for;
end method main;


* Exercise use of debugger:

o  no applicable methods because relevant method missing, not written yet

o  name-clashes, such as
     define method (foo :: <bar>, size :: <integer>)
       if (foo.size > 4)
         ...

o  dynamic type error - say passing <float> where <integer> required

o  ignored exceptions leading to confusion

o  inter-library binding name-clash  ("release" in threads and some other library?)

o  sealing violation?  how?

o  ambiguous methods
     define method foo (a :: <number>, b :: <number>) ... end;
     define method foo (a :: <number>, b :: <integer>) ... end;
     define method foo (a :: <integer>, b :: <number>) ... end;
     foo (3, 4) ;
