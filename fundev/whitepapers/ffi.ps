%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 13 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Courier FMFONTDEFINE
3 0 /Times-BoldItalic FMFONTDEFINE
4 0 /Courier-Oblique FMFONTDEFINE
5 0 /Times-Italic FMFONTDEFINE
6 1 /Symbol FMFONTDEFINE
7 0 /Courier-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Foreign Function Interface) 98.46 42.62 T
(August 31, 1995) 279.44 42.62 T
(1) 536 42.62 T
0 24 Q
(DylanW) 114 704 T
(orks Foreign Function Interface) 193.39 704 T
1 12 Q
(Roger Jarr) 212.79 662.9 T
(ett & Jonathan Bachrach) 269.55 662.9 T
1 16 Q
(1.  Intr) 72 619.12 T
(oduction) 119.26 619.12 T
0 12 Q
(The purpose of this paper is to describe the low-level Foreign Function Interface \050FFI\051. The pur-) 72 590.68 T
(pose of the FFI is to allow a Dylan component to call \050or be called by\051 a component written in) 72 576.68 T
(another language. W) 72 562.68 T
(e are particularly interested in interfacing with C and C++ on the W) 170.68 562.68 T
(indows) 495.67 562.68 T
-0.1 (95\252 operating system. This includes libraries written in any language that have a C or C++ inter-) 72 548.68 P
(face.) 72 534.68 T
1 16 Q
(2.  Basic Design Goals) 72 492.91 T
0 12 Q
(The basic design goals for the low-level FFI are:) 72 464.47 T
1 F
(\245) 85.5 443.37 T
0 F
(Provide interoperability with other components on equal terms, so that users can build) 99 443.37 T
(seamless, hybrid applications.) 99 429.37 T
1 F
(\245) 85.5 408.26 T
0 F
(Provide the substrate for the Creole header-mapping facilities.) 99 408.26 T
1 F
(\245) 85.5 387.16 T
0 F
(Provide a mapping between Dylan and C/C++ function parameters.) 99 387.16 T
1 F
(\245) 85.5 366.05 T
0 F
(Provide a mapping between Dylan and C/C++ function return values.) 99 366.05 T
1 F
(\245) 85.5 344.95 T
0 F
(Provide a mapping between Dylan and C/C++ constants and data.) 99 344.95 T
1 F
(\245) 85.5 323.84 T
0 F
(Interact with the GC in a safe \050and sane\051 fashion.) 99 323.84 T
1 16 Q
(3.  Issues Regarding Dylan and C/C++) 72 282.07 T
0 12 Q
(T) 72 253.63 T
(ranslate Dylan data types to C datatypes following the conventions required by the native com-) 78.91 253.63 T
(piler) 72 239.63 T
(. C passes parameters by value; however; that value may be a pointer to memory that could) 93.34 239.63 T
(be modi\336ed by the callee. Special care must taken when passing some C data types as ar) 72 225.63 T
(guments) 496.04 225.63 T
-0.19 (to functions. These data types are basically any non-integer) 72 211.63 P
-0.19 (-like quantity; this includes pointers if) 355.16 211.63 P
(the following holds:) 72 197.63 T
2 10 Q
(sizeof\050char *\051 != sizeof\050int\051) 108 177.86 T
0 12 Q
(C parameter types that require special care are:) 72 151.42 T
1 F
(\245) 85.5 130.32 T
2 F
(char) 99 130.32 T
0 F
( and) 127.8 130.32 T
2 F
(short) 151.13 130.32 T
0 F
( \050passed as a right or left justified) 187.13 130.32 T
2 F
(int) 350.44 130.32 T
0 F
(, depending on the architecture\051.) 372.04 130.32 T
1 F
(\245) 85.5 109.21 T
2 F
(double) 99 109.21 T
0 F
( \050in floating point register or on stack; also watch the alignment of doubles\051.) 142.2 109.21 T
1 F
(\245) 85.5 88.1 T
2 F
(float) 99 88.1 T
0 F
( \050normally promoted to be a double unless using ANSI-C with prototypes\051.) 135 88.1 T
1 F
(\245) 85.5 67 T
0 F
(Structures \050every architecture and compiler does this differently\051.) 99 67 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Foreign Function Interface) 98.46 42.62 T
(August 31, 1995) 279.44 42.62 T
(2) 536 42.62 T
0 12 Q
(There are also some function return types that require special care:) 72 712 T
1 F
(\245) 85.5 690.65 T
2 F
(char) 99 690.65 T
0 F
( and) 127.8 690.65 T
2 F
(short) 151.13 690.65 T
0 F
(.) 187.13 690.65 T
1 F
(\245) 85.5 669.3 T
2 F
(double) 99 669.3 T
0 F
( and) 142.2 669.3 T
2 F
(float) 165.53 669.3 T
0 F
(.) 201.53 669.3 T
1 F
(\245) 85.5 647.95 T
0 F
(Structures.) 99 647.95 T
1 14 Q
(3.1  ANSI-C versus K&R C) 72 613.27 T
0 12 Q
(The ANSI-C and K&R C are two dif) 72 585.25 T
(ferent dialects of C; the ANSI-C standard de\336nes many of) 248.76 585.25 T
(the areas of the language that were previously left as \322implementor de\336ned\323.) 72 571.25 T
-0.13 (One area of improvement of ANSI-C is the advent of function prototypes. The presence of ANSI-) 72 543.9 P
(C prototypes in code changes the way that parameters are passed to functions. W) 72 529.9 T
(ith function pro-) 460.1 529.9 T
(totypes one can determine the ordered set of ar) 72 515.9 T
(guments to a function as well as its return type.) 296.39 515.9 T
(ANSI-C also provides the) 72 488.55 T
2 F
(const) 199.32 488.55 T
0 F
( keyword which could assist in type mapping and or error) 235.32 488.55 T
(checking of the low-level FFI interface.) 72 474.55 T
(Therefore in the low-level FFI, we need to know the dialect of C we are calling.) 72 447.2 T
1 14 Q
(3.2  C versus C++) 72 412.52 T
0 12 Q
(Creole will handle the name mapping of the Dylan name to the C++ external name.) 72 384.5 T
1 F
(\245) 85.5 363.15 T
0 F
(Other C++ issues) 99 363.15 T
1 F
(<to be filled in>) 185.53 363.15 T
1 14 Q
(3.3  Err) 72 328.47 T
(or Checking) 118.02 328.47 T
0 12 Q
(W) 72 300.45 T
(e could provide two versions of the FFI., and debugging and a production version. The debug-) 82.37 300.45 T
(ging version would check for common errors including:) 72 286.45 T
1 F
(\245) 85.5 265.1 T
0 F
(Incorrect memory management.) 99 265.1 T
1 F
(\245) 85.5 243.75 T
0 F
(Checking that) 99 243.75 T
2 F
(const) 169 243.75 T
0 F
( types are constant.) 205 243.75 T
1 F
(\245) 85.5 222.4 T
0 F
(Checking that variables using a user specified expression.) 99 222.4 T
1 F
(\245) 85.5 201.05 T
0 F
(GC consistency checks before/after FFI.) 99 201.05 T
1 F
(\245) 85.5 179.7 T
0 F
(\322Unusual\323 flow control, such as) 99 179.7 T
2 F
(longjmp) 255.64 179.7 T
0 F
(\325s and signalling \050i.e., C++ exceptions\051.) 306.04 179.7 T
1 16 Q
(4.  Basic Strategy) 72 137.68 T
0 12 Q
(The basic strategy is to map \322alien\323 types into the Dylan type system such that dif) 72 109 T
(ferent types of) 465.41 109 T
(C pointers have distinguishable classes when imported into Dylan. \050Note that this is dif) 72 95 T
(ferent) 490.43 95 T
(from the strategy presently used in LispW) 72 81 T
(orks\051. One advantage of doing this is that per) 273.01 81 T
(-type con-) 489.07 81 T
(verter methods can be de\336ned to control the import/export mapping.) 72 67 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Foreign Function Interface) 98.46 42.62 T
(August 31, 1995) 279.44 42.62 T
(3) 536 42.62 T
0 12 Q
(There will also be conversion hooks allowing users to control how an alien value gets mapped to) 72 712 T
(a Dylan value, and vice versa.) 72 698 T
(The alien type system is based on a number of \322generic\323 types \050\322generic\323 in the sense that they) 72 671.67 T
(are not meant to be language speci\336c\051. These types include:) 72 657.67 T
1 F
(\245) 85.5 637.33 T
2 F
(<%alien-type> \050<type>\051) 99 637.33 T
1 F
(\245) 85.5 617 T
2 F
(<%alien-statically-typed-pointer> \050<%alien-type>\051) 99 617 T
1 F
(\245) 85.5 596.67 T
2 F
(<%alien-value-type> \050<%alien-type>\051) 99 596.67 T
1 F
(\245) 85.5 576.33 T
2 F
(<%alien-0-bit-value> \050<%alien-value-type>\051) 99 576.33 T
1 F
(\245) 85.5 556 T
2 F
(<%alien-8-bit-unsigned-value> \050<%alien-value-type>\051) 99 556 T
1 F
(\245) 85.5 535.67 T
2 F
(<%alien-8-bit-signed-value> \050<%alien-value-type>\051) 99 535.67 T
1 F
(\245) 85.5 515.33 T
2 F
(<%alien-16-bit-unsigned-value> \050<%alien-value-type>\051) 99 515.33 T
1 F
(\245) 85.5 495 T
2 F
(<%alien-16-bit-signed-value> \050<%alien-value-type>\051) 99 495 T
1 F
(\245) 85.5 474.67 T
2 F
(<%alien-32-bit-unsigned-value> \050<%alien-value-type>\051) 99 474.67 T
1 F
(\245) 85.5 454.33 T
2 F
(<%alien-32-bit-signed-value> \050<%alien-value-type>\051) 99 454.33 T
1 F
(\245) 85.5 434 T
2 F
(<%alien-64-bit-unsigned-value> \050<%alien-value-type>\051) 99 434 T
1 F
(\245) 85.5 413.67 T
2 F
(<%alien-64-bit-signed-value> \050<%alien-value-type>\051) 99 413.67 T
1 F
(\245) 85.5 393.33 T
2 F
(<%alien-ieee-single-float-value> \050<%alien-value-type>\051) 99 393.33 T
1 F
(\245) 85.5 373 T
2 F
(<%alien-ieee-double-float-value> \050<%alien-value-type>\051) 99 373 T
1 F
(\245) 85.5 352.67 T
2 F
(<%alien-ieee-extended-float-value> \050<%alien-value-type>\051) 99 352.67 T
1 F
(\245) 85.5 332.33 T
2 F
(<%alien-enumeration-value> \050<%alien-value-type>\051) 99 332.33 T
1 F
(\245) 85.5 312 T
2 F
(<%alien-aggregate-type> \050<%alien-value-type>\051) 99 312 T
1 F
(\245) 85.5 291.67 T
2 F
(<%alien-structure> \050<%alien-aggregate-type>\051) 99 291.67 T
1 F
(\245) 85.5 271.33 T
2 F
(<%alien-union> \050<%alien-aggregate-type>\051) 99 271.33 T
1 F
(\245) 85.5 251 T
2 F
(<%alien-array> \050<%alien-aggregate-type>\051) 99 251 T
1 F
(\245) 85.5 230.67 T
2 F
(<%alien-string> \050<%alien-array>\051) 99 230.67 T
0 F
(The DylanW) 72 204.33 T
(orks FFI library de\336nes several macros that are used to de\336ne alien functions and) 133.36 204.33 T
(values. They permit the speci\336cation of name and type mapping between Dylan and the Alien) 72 190.33 T
(language. They are language speci\336c, but for the C FFI they are:) 72 176.33 T
1 F
(\245) 85.5 156 T
-0.08 (define c-type) 99 156 P
0 F
-0.08 (, which is used to define a new C type in terms of an existing C type of one of) 164.57 156 P
(the primitive, generic types.) 99 142 T
1 F
(\245) 85.5 121.67 T
-0.2 (define c-variable) 99 121.67 P
0 F
-0.2 (, which imports a C variable by specifying its C type and what Dylan type) 184.45 121.67 P
(it should map to.) 99 107.67 T
1 F
(\245) 85.5 87.33 T
(define c-constant) 99 87.33 T
0 F
(, which imports a C constant by specifying its initial value.) 185.99 87.33 T
1 F
(\245) 85.5 67 T
(define c-struct) 99 67 T
0 F
(, which is used to define a new C structure data structure.) 172.64 67 T
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Foreign Function Interface) 98.46 42.62 T
(August 31, 1995) 279.44 42.62 T
(4) 536 42.62 T
1 12 Q
(\245) 85.5 712 T
(define c-union) 99 712 T
0 F
(, which is used to define a new C union data structure.) 172.01 712 T
1 F
(\245) 85.5 691.23 T
-0.23 (define c-function) 99 691.23 P
0 F
-0.23 (, which imports an alien function by defining its contract \050that is, its set of) 185.1 691.23 P
(input parameters and their types, and its output parameters and their types\051.) 99 677.23 T
1 F
(\245) 85.5 656.47 T
(export-as-c-function) 99 656.47 T
0 F
(, which makes a Dylan function callable from non-Dylan code.) 202.98 656.47 T
-0.24 (Creole will use these building blocks to create the Dylan types determined during header \336le pars-) 72 629.7 P
(ing.) 72 615.7 T
1 16 Q
(5.  C FFI Speci\336cation) 72 574.27 T
0 12 Q
-0.3 (This section describes the details of the C FFI.  W) 72 546.17 P
-0.3 (e \336rst show how to specify C types and describe) 308.36 546.17 P
(the syntax and mechanics of name and type mapping.  W) 72 532.17 T
(e then proceed to describe the various) 345.32 532.17 T
(FFI macros used to import and export variables and functions to and from Dylan.) 72 518.17 T
1 14 Q
(5.1  C T) 72 484.07 T
(ype Speci\336ers) 118.41 484.07 T
0 12 Q
(The DylanW) 72 456.63 T
(orks FFI library provides a type language for de\336ning new restricted types and for) 133.36 456.63 T
(creating anonymous combinations of the above types.  The purpose of this is to express C types) 72 442.63 T
-0.2 (that can not be readily expressed in Dylan and to allow the user to de\336ne types that can be inlined) 72 428.63 P
(into aggregate data structures.) 72 414.63 T
3 F
(c-type-specifier:) 108 368.43 T
(c-type-name) 144 341.57 T
2 F
(c-bit-field-of\050) 144 328.13 T
1 F
(INTEGER) 252 328.13 T
2 F
(\051) 307.34 328.13 T
(c-signed-bit-field-of\050) 144 315.37 T
1 F
(INTEGER) 302.4 315.37 T
2 F
(\051) 357.74 315.37 T
(c-enum\050) 144 302.6 T
1 F
(SYMBOL  ...) 194.4 302.6 T
2 F
(\051) 261.41 302.6 T
(c-pointer-to\050) 144 288.5 T
3 F
(c-type-specifier) 237.6 288.5 T
2 F
(\051) 312.9 288.5 T
(c-struct) 144 273.73 T
3 F
(dylan->c-slot-specifier ...) 208.8 273.73 T
2 F
( end) 331.62 273.73 T
(c-union) 144 258.97 T
3 F
(dylan->c-slot-specifier ...) 201.6 258.97 T
2 F
( end) 324.42 258.97 T
(c-array-of\050) 144 244.2 T
3 F
(c-type-specifier) 223.2 244.2 T
2 F
(,) 298.5 244.2 T
(#key dimensions = #\050#F\051,) 216 229.43 T
(     layout = #\323row-major\323\051) 216 214.67 T
(c-function \050) 144 199.9 T
3 F
(dylan->c-parameter-specifier ...) 230.4 199.9 T
2 F
(\051 =>) 386.54 199.9 T
3 F
(    c->dylan-parameter-specifier) 144 185.13 T
(c-type-name:) 108 155.6 T
1 F
(SYMBOL) 144 126.07 T
3 F
(dylan->c-slot-specifier:) 108 96.53 T
2 F
(slot SYMBOL ::) 144 67 T
3 F
(dylan->c-type-specifier) 252 67 T
2 F
(;) 365.47 67 T
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Foreign Function Interface) 98.46 42.62 T
(August 31, 1995) 279.44 42.62 T
(5) 536 42.62 T
0 12 Q
(The following C struct) 72 712 T
2 10 Q
(struct {) 108 692.41 T
(  char *name;) 108 679.49 T
(  long flags;) 108 666.57 T
(  union {) 108 653.65 T
(   long int_val;) 108 640.73 T
(   char *string_val;) 108 627.81 T
(  } val;) 108 614.89 T
(};) 108 601.96 T
0 12 Q
(can be de\336ned in Dylan as) 72 575.71 T
2 10 Q
(c-struct) 108 556.12 T
(  slot name :: <C/string>;) 108 543.2 T
(  slot flags :: <C/long>;) 108 530.28 T
(  slot val ::) 108 517.36 T
(    c-union) 108 504.44 T
(      slot int_val :: <C/int>;) 108 491.52 T
(      slot string_val :: <C/string>;) 108 478.6 T
(    end;) 108 465.68 T
(end;) 108 452.76 T
0 12 Q
(One important concept is the notion of type mapping between Dylan and C.  The user is allowed) 72 426.5 T
-0.5 (to specify how types are mapped at the point of specifying the type \050i.e.,) 72 412.5 P
3 F
-0.5 (dylan->c-type-specifier) 414.54 412.5 P
0 F
-0.5 (\051.) 528.01 412.5 P
(The user may specify a low-level mapping \050set of) 72 398.5 T
(f with) 309.73 398.5 T
2 F
(=>) 341.06 398.5 T
0 F
(,) 355.46 398.5 T
2 F
(<=) 361.46 398.5 T
0 F
(, or) 375.86 398.5 T
2 F
(<=>) 394.86 398.5 T
0 F
(\051\051 and optionally a high-) 416.46 398.5 T
(level mapping \050set of) 72 384.5 T
(f with) 173.44 384.5 T
2 F
(->) 204.77 384.5 T
0 F
(,) 219.17 384.5 T
2 F
(<-) 225.17 384.5 T
0 F
(, or) 239.57 384.5 T
2 F
(<->) 258.56 384.5 T
0 F
(\051.  Low-level mappings operate through  simple coer-) 280.16 384.5 T
(cions, while high-level mapping invoke the user de\336ned functions) 72 370.5 T
2 F
(export-as) 391.97 370.5 T
0 F
( and) 456.77 370.5 T
2 F
(import-) 480.1 370.5 T
(as) 72 356.5 T
0 F
( depending on the direction of the mapping.) 86.4 356.5 T
3 F
(much more explanation is needed here along with many more examples) 72 329.58 T
(dylan->c-type-specifier:) 108 308.66 T
(c-type-specifier) 144 280.15 T
(dylan-type-specifier) 144 265.9 T
2 F
( =>) 241.31 265.9 T
3 F
(c-type-specifier) 270.11 265.9 T
(dylan-type-specifier) 144 252.31 T
2 F
(->) 247.31 252.31 T
3 F
(dylan-type-specifier) 267.71 252.31 T
2 F
(=>) 371.02 252.31 T
3 F
(c-type-specifier) 391.42 252.31 T
(dylan-type-specifier) 144 239.39 T
2 F
(->) 247.31 239.39 T
2 10 Q
( \050) 261.71 239.39 T
3 12 Q
(dylan-type-specifier, mapper\051) 273.71 239.39 T
2 F
(=>) 424.34 239.39 T
3 F
(c-type-specifier) 444.74 239.39 T
(dylan-type-specifier:) 108 210.21 T
(expression) 144 180.37 T
(c->dylan-type-specifier:) 108 150.53 T
(c-type-specifier) 144 122.02 T
(c-type-specifier) 144 107.76 T
2 F
( =>) 219.3 107.76 T
3 F
(dylan-type-specifier) 248.1 107.76 T
(c-type-specifier) 144 94.18 T
2 F
(=>) 225.3 94.18 T
3 F
(dylan-type-specifier) 245.7 94.18 T
2 F
(->) 349.01 94.18 T
3 F
(dylan-type-specifier) 369.41 94.18 T
(c-type-specifier) 144 81.26 T
2 F
(=>) 225.3 81.26 T
3 F
(dylan-type-specifier) 245.7 81.26 T
2 F
(->) 349.01 81.26 T
2 10 Q
( \050) 363.41 81.26 T
3 12 Q
(dylan-type-specifier, mapper\051) 375.41 81.26 T
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Foreign Function Interface) 98.46 42.62 T
(August 31, 1995) 279.44 42.62 T
(6) 536 42.62 T
0 12 Q
(Parameter speci\336cations are treated specially because a parameter can not only be used to pass) 72 712 T
(information into a function but also to pass information out of a function when the ar) 72 698 T
(gument is) 479.41 698 T
(passed call-by-reference.) 72 684 T
3 F
(more explanation required and lots more examples) 72 655.97 T
(dylan->c-parameter-specifier:) 108 633.94 T
(dylan->c-type-specifier) 144 601.88 T
1 F
(SYMBOL) 144 587.18 T
2 F
(::) 202.01 587.18 T
3 F
(dylan->c-type-specifier) 222.41 587.18 T
(output-dylan->c-parameter-specifier) 144 571.82 T
1 F
(SYMBOL) 144 557.12 T
2 F
(::) 202.01 557.12 T
3 F
(output-dylan->c-parameter-specifier) 222.41 557.12 T
(input-output-dylan->c-parameter-specifier) 144 541.76 T
1 F
(SYMBOL) 144 527.06 T
2 F
(::) 202.01 527.06 T
3 F
(input-output-dylan->c-parameter-specifier) 222.41 527.06 T
(output-dylan->c-parameter-specifier:) 108 497.67 T
2 F
(<=) 144 466.94 T
3 F
(c-type-specifier) 164.4 466.94 T
(dylan-type-specifier) 144 451.58 T
2 F
( <=) 241.31 451.58 T
3 F
(dylan-type-specifier) 270.11 451.58 T
(dylan-type-specifier) 144 436.88 T
2 F
(<-) 247.31 436.88 T
3 F
(dylan-type-specifier) 267.71 436.88 T
2 F
(<=) 371.02 436.88 T
3 F
(c-type-specifier) 391.42 436.88 T
(dylan-type-specifier) 144 422.85 T
2 F
(<-) 247.31 422.85 T
2 10 Q
( \050) 261.71 422.85 T
3 12 Q
(dylan-type-specifier, mapper\051) 273.71 422.85 T
2 F
(<=) 424.34 422.85 T
3 F
(c-type-specifier) 444.74 422.85 T
(input-output-dylan->c-parameter-specifier:) 108 393.45 T
2 F
(<=>) 144 362.73 T
3 F
(c-type-specifier) 171.6 362.73 T
(dylan-type-specifier) 144 347.36 T
2 F
( <=>) 241.31 347.36 T
3 F
(dylan-type-specifier) 277.31 347.36 T
(dylan-type-specifier) 144 332.67 T
2 F
(<->) 247.31 332.67 T
3 F
(dylan-type-specifier) 274.91 332.67 T
2 F
(<=>) 378.22 332.67 T
3 F
(c-type-specifier) 405.82 332.67 T
(dylan-type-specifier) 144 318.64 T
2 F
(<->) 247.31 318.64 T
2 10 Q
(  \050) 144 304.61 T
3 12 Q
(dylan-type-specifier, input-mapper, output-mapper\051) 162 304.61 T
2 F
(<=>) 421.99 304.61 T
3 F
(     c-type-specifier) 144 289.24 T
1 14 Q
(5.2  De\336ning New C T) 72 253.88 T
(ypes) 202.41 253.88 T
0 12 Q
(It is possible to de\336ne type aliases for previously de\336ned C types as follows.) 72 225.18 T
2 F
(define c-type) 108 204.48 T
1 F
(SYMBOL) 207.6 204.48 T
2 F
(=) 265.61 204.48 T
3 F
(c-type-specifier) 280.01 204.48 T
0 F
(It is also possible to de\336ne new C types through subclassing.  Slots may also be de\336ned on these) 72 177.12 T
(types.) 72 163.12 T
2 F
(define c-type) 108 142.42 T
1 F
(SYMBOL) 207.6 142.42 T
2 F
(\050) 265.61 142.42 T
3 F
(type-specifier ...) 272.81 142.42 T
2 F
(\051) 350.78 142.42 T
3 F
(slot-descriptor ...) 365.18 142.42 T
2 F
( end;) 447.85 142.42 T
0 F
(W) 72 115.06 T
(e assume that the following is prede\336ned:) 82.37 115.06 T
2 10 Q
(define class <C/type> \050<%alien-type>\051 end;) 108 94.36 T
3 12 Q
(more explanation about how this is mixed in is in order) 72 67 T
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Foreign Function Interface) 98.46 42.62 T
(August 31, 1995) 279.44 42.62 T
(7) 536 42.62 T
0 12 Q
(The DylanW) 72 712 T
(orks FFI library de\336nes some C / platform speci\336c aliases such as C integers and) 133.36 712 T
(pointers, and so on. The following are a representative set.) 72 698 T
2 10 Q
(define c-type <C/statically-typed-pointer>) 108 678.67 T
(    \050<%alien-statically-typed-pointer>\051) 108 666.02 T
(end;) 108 653.36 T
(define c-type <C/short> \050<%alien-16-bit-signed-value>\051 end;) 108 640.7 T
(define c-type <C/int> \050<%alien-32-bit-signed-value>\051 end;) 108 628.04 T
(define c-type <C/long> \050<%alien-64-bit-signed-value>\051 end;) 108 615.39 T
(define c-type <C/single> \050<%alien-ieee-single-float-value>\051 end;) 108 602.73 T
(define c-type <C/double> \050<%alien-ieee-double-float-value>\051 end;) 108 590.07 T
(define c-type <C/extended> \050<%alien-ieee-extended-float-value>\051 end;) 108 577.41 T
(define c-type <C/string> \050<%alien-string-value>, <string>\051 end;) 108 564.76 T
(define c-type <C/void> \050<%alien-0-bit-value>\051 end;) 108 552.1 T
(define c-type <C/void*> = pointer-to\050<C/void>\051;) 108 539.44 T
0 12 Q
(Users may de\336ne their own types as well.) 72 513.45 T
2 10 Q
(define c-type <X/boolean> = <C/int>;) 108 494.12 T
(define c-type <X/xt-position> = <C/short>;) 108 481.46 T
(define c-type <X/xt-dimension> = <C/short>;) 108 468.81 T
(define c-type <X/arg*> = pointer-to\050<X/arg>\051;) 108 456.15 T
1 14 Q
(5.3  De\336ning C Structur) 72 422.83 T
(es) 215.25 422.83 T
0 12 Q
(The user may de\336ned named C structs as follows.) 72 395.5 T
2 F
(define c-struct) 108 376.18 T
1 F
(SYMBOL) 222 376.18 T
3 F
(dylan->c-slot-specifier ...) 277.01 376.18 T
2 F
( end) 399.83 376.18 T
0 F
(The following is a simple example.) 72 350.18 T
2 10 Q
(define c-struct <X/arg>) 108 330.86 T
(  slot arg->name :: <X/string>;) 108 318.2 T
(  slot arg->value :: <X/xt-arg-val>;) 108 305.54 T
(end;) 108 292.89 T
1 14 Q
(5.4  De\336ning C Unions) 72 259.56 T
0 12 Q
(The user may de\336ned named C unions as follows.) 72 232.24 T
2 F
(define c-union) 108 212.91 T
1 F
(SYMBOL) 214.8 212.91 T
3 F
(dylan->c-slot-specifier ...) 269.81 212.91 T
2 F
( end) 392.63 212.91 T
0 F
(The following is a simple example.) 72 186.92 T
2 10 Q
(define c-union <Float-Decoder>) 108 167.6 T
(  slot as-float :: <C/single>;) 108 154.94 T
(  slot as-bits  ::) 108 142.28 T
(    c-struct) 108 129.62 T
(      slot sign-bit :: c-bit-field-of\0501\051;) 108 116.97 T
(      slot exponent :: c-bit-field-of\0508\051;) 108 104.31 T
(      slot mantissa :: c-bit-field-of\05023\051;) 108 91.65 T
(    end;) 108 78.99 T
(end;) 108 66.33 T
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Foreign Function Interface) 98.46 42.62 T
(August 31, 1995) 279.44 42.62 T
(8) 536 42.62 T
1 14 Q
(5.5  De\336ning C V) 72 710.67 T
(ariables) 173 710.67 T
0 12 Q
(C variables may be imported by de\336ning them as follows.) 72 681.84 T
2 F
(define c-variable) 108 661.01 T
3 F
(dylan->c) 236.4 661.01 T
4 10 Q
(-) 279.9 661.01 T
3 12 Q
(name-specifier) 285.9 661.01 T
2 F
(::) 362.22 661.01 T
3 F
(c->dylan-type-specifier) 379.62 661.01 T
(dylan->c-name-specifier:) 108 629.35 T
1 F
(SYMBOL) 144 600.37 T
2 F
(=>) 202.01 600.37 T
1 F
(STRING) 222.41 600.37 T
0 F
-0.27 (The) 72 572.87 P
3 F
-0.27 (dylan->c-name-specifier) 93.39 572.87 P
0 F
-0.27 ( speci\336es the mapping from a Dylan name to a C name.  The follow-) 214.2 572.87 P
(ing is an example of its usage) 72 558.87 T
2 10 Q
(define c-variable number-of-processes => \322NumberOfProcesses\323 ::) 108 538.04 T
(  <C/int> => <integer>;) 108 523.88 T
0 12 Q
(The system automatically de\336nes a getter and setter for the C variable.) 72 496.39 T
2 10 Q
(number-of-processes\050\051) 108 475.56 T
(number-of-processes\050\051 := 57;) 108 461.4 T
1 14 Q
(5.6  De\336ning C Constants) 72 426.57 T
0 12 Q
(C constants may be imported by de\336ning them as follows.) 72 397.74 T
2 F
(define c-constant) 108 376.91 T
1 F
(SYMBOL) 236.4 376.91 T
2 F
(=) 291.41 376.91 T
3 F
( expression;) 298.61 376.91 T
0 F
(The following is an example of its usage.) 72 349.42 T
2 10 Q
(define c-constant $max-size-of-people = 55;) 108 328.59 T
1 14 Q
(5.7  De\336ning C Functions) 72 293.76 T
0 12 Q
(C functions can be imported into Dylan using the following) 72 264.94 T
2 F
(define c-function) 108 244.11 T
3 F
(dylan->c) 236.4 244.11 T
4 10 Q
(-) 279.9 244.11 T
3 12 Q
(name-specifier) 285.9 244.11 T
2 F
(\050) 144 228.61 T
3 F
(dylan->c-parameter-specifier) 151.2 228.61 T
1 F
( ...) 295.34 228.61 T
2 F
(\051) 307.34 228.61 T
(=>) 317.54 228.61 T
3 F
(c->dylan-type-specifier) 339.14 228.61 T
0 F
(The following is an example of a de\336nition of a C function.) 72 200.45 T
2 10 Q
(define c-function xt-initialize => \322XtInitialize\323) 108 179.62 T
(  \050program-name :: <byte-string> => <C/string>,) 108 165.46 T
(   app-name :: <byte-string> => <C/string>,) 108 151.3 T
(   resources :: <integer> => <C/int>,) 108 137.14 T
(   resource-count :: <integer> => <C/int>,) 108 122.98 T
(   argc :: <integer> <= <C/int>,) 108 108.82 T
(   argv :: <integer> => <C/int>\051 =>) 108 94.66 T
(  \050widget :: <X/widget>\051;) 108 80.49 T
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Foreign Function Interface) 98.46 42.62 T
(August 31, 1995) 279.44 42.62 T
(9) 536 42.62 T
1 14 Q
(5.8) 72 710.67 T
(De\336ning C Callbacks) 96.5 710.67 T
0 12 Q
(Dylan functions can be exported to C using the following.) 72 682.39 T
2 F
(export-as-c-function) 108 662.12 T
3 F
(c->dylan) 258 662.12 T
4 10 Q
(-) 301.5 662.12 T
3 12 Q
(name-specifier) 307.5 662.12 T
2 F
(\050) 144 647.18 T
3 F
(c->dylan-parameter-specifier ...) 151.2 647.18 T
2 F
(\051) 307.34 647.18 T
(=>) 317.54 647.18 T
3 F
(dylan->c-type-specifier) 339.14 647.18 T
(c->dylan-name-specifier:) 108 615.96 T
1 F
(STRING) 144 588.08 T
2 F
(=>) 196.01 588.08 T
1 F
(SYMBOL) 216.41 588.08 T
3 F
(c->dylan-parameter-specifier:) 108 557.54 T
(c->dylan-type-specifier) 144 526.32 T
1 F
(SYMBOL) 144 512.05 T
2 F
(::) 202.01 512.05 T
3 F
(c->dylan-type-specifier) 222.41 512.05 T
0 F
(The following is an example of its usage.) 72 485.11 T
2 10 Q
(export-as-c-function) 108 464.83 T
(    \322z_x_dylan_callback_dispatcher\323 => x-dylan-callback-dispatcher) 108 451.23 T
(  \050widget :: <X/widget>,) 108 437.62 T
(   client-data :: <C/int> => <integer>,) 108 424.01 T
(   call-data :: <X/callback-data>\051) 108 410.4 T
(  reference: alien-x-dylan-callback-dispatcher ???;) 108 396.8 T
1 14 Q
(5.9  Cr) 72 362.52 T
(eating C Instances) 112.57 362.52 T
3 12 Q
(this section needs to be revamped to reflect the new design) 72 334.25 T
0 F
(Alien instances are created using) 72 306.64 T
1 F
(make-alien) 232.96 306.64 T
0 F
( or) 289.62 306.64 T
1 F
(make-alien-array) 305.62 306.64 T
0 F
(.) 394.15 306.64 T
1 F
(make-alien) 72 273.04 T
5 F
(alien-type) 131.66 273.04 T
6 F
(\336) 182.65 273.04 T
5 F
(object) 197.5 273.04 T
0 F
([Function]) 489.34 273.04 T
-0.13 (Creates an instance whose type is) 90 245.43 P
5 F
-0.13 (alien-type) 253.21 245.43 P
0 F
-0.13 (, and returns an object whose type corresponds to) 301.19 245.43 P
(a pointer to that type. The pointer points to newly allocated memory) 90 231.43 T
(.) 416.52 231.43 T
1 F
(make-alien-array) 72 197.82 T
5 F
(alien-type) 164.32 197.82 T
0 F
( #key) 212.3 197.82 T
5 F
( size) 238.63 197.82 T
6 F
(\336) 262.63 197.82 T
5 F
(object) 277.48 197.82 T
0 F
([Function]) 489.34 197.82 T
-0.07 (Creates an array of size) 90 170.21 P
5 F
-0.07 (size) 205.26 170.21 P
0 F
-0.07 ( that contains elements of type) 223.26 170.21 P
5 F
-0.07 (alien-type) 372.14 170.21 P
0 F
-0.07 (, and returns a pointer to) 420.12 170.21 P
(enough space for those objects.) 90 156.21 T
1 F
(dylan-alien-address) 72 122.61 T
5 F
(alien-object) 175.68 122.61 T
6 F
(\336) 236 122.61 T
5 F
(integer) 250.85 122.61 T
0 F
([Function]) 489.34 122.61 T
-0.43 (Returns an integer identifying the address in memory of the alien object. This is intended to be) 90 95 P
(used for hashing aliens to preserve uniqueness, since this isn\325) 90 81 T
(t done automatically in the sys-) 384.41 81 T
(tem.) 90 67 T
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Foreign Function Interface) 98.46 42.62 T
(August 31, 1995) 279.44 42.62 T
(10) 532 42.62 T
1 12 Q
(do-cast-as) 72 712 T
5 F
( pointer alien-type) 123.32 712 T
6 F
(\336) 214.98 712 T
5 F
(object) 229.82 712 T
0 F
([Function]) 489.34 712 T
(Casts the alien pointer) 90 685.18 T
5 F
(pointer) 199.99 685.18 T
0 F
( to the speci\336ed alien type.) 234.66 685.18 T
-0.07 (Dylan\325) 72 658.36 P
-0.07 (s arithmetic and element functions will be overloaded to allow programmers to push point-) 104.66 658.36 P
(ers, and read and write their values. Here is an example of the use of pointer arithmetic from Xt:) 72 644.36 T
2 10 Q
(define variable $x-arg-array = make-alien-array\050<X/arg>, size: 50\051;) 108 624.87 T
(define method as-xt-args \050initlist :: <sequence>\051) 108 599.23 T
(  for \050i from 0,) 108 586.41 T
(       args = initlist then tail\050tail\050args\051\051,) 108 573.58 T
(       until: \050empty? args\051,) 108 560.76 T
(        finally: values\050$x-arg-array, i\051\051) 108 547.94 T
(    let arg = $x-arg-array + i;) 108 535.12 T
(    arg->name\050arg\051 := first\050args\051;) 108 522.3 T
(    arg->value\050arg\051 := second\050args\051;) 108 509.48 T
(  end;) 108 496.65 T
(end method;) 108 483.83 T
(define method xt-args \050#rest initargs\051) 108 458.19 T
(  as-xt-args\050initargs\051) 108 445.37 T
(end method;) 108 432.55 T
0 12 Q
(As in LispW) 72 406.39 T
(orks, the DylanW) 132.37 406.39 T
(orks FFI libraries require that the FFI de\336nitions be processed and) 216.4 406.39 T
(then that the required C libraries be loaded. The function that does this is) 72 392.39 T
1 F
(ensur) 424.96 392.39 T
(e-alien-modules) 453.41 392.39 T
0 F
(.) 534.07 392.39 T
1 F
(ensur) 72 359.57 T
(e-alien-modules) 100.45 359.57 T
0 F
( #rest) 181.12 359.57 T
5 F
( modules) 207.44 359.57 T
0 F
([Function]) 489.34 359.57 T
(Ensures that the requested libraries are loaded. For example,) 90 332.75 T
2 10 Q
(\050ensure-alien-modules \322Xm\323 \322Xt\323 \322X11\323\051) 108 313.26 T
1 16 Q
(6.  Open Issues) 72 272.44 T
0 12 Q
(Do we want to be able to subclass C++ classes in Dylan?) 72 244.29 T
(Do we want to be able to subclass Dylan classes in C++?) 72 217.47 T
(Do we want to allow Dylan generic functions to specialize on C++ classes?) 72 190.64 T
(Do we want to allow C++ generic functions to specialize on Dylan classes?) 72 163.82 T
(There is an issue around) 72 137 T
1 F
(export-as-alien-function) 191.64 137 T
0 F
(. SWM believes that, since one of our goals is) 314.96 137 T
(to be able to produce Dylan libraries that can be linked with arbitrary C programs, that it is not) 72 123 T
(really reasonable to expect that programmers will have to explicitly write) 72 109 T
1 F
(export-as-alien-func-) 426.94 109 T
-0.2 (tion) 72 95 P
0 F
-0.2 ( for every entry point in a library) 92 95 P
-0.2 (. At the very least, it would be nice if there was some kind of) 247.43 95 P
(semi-automated way of saying that everything in a library should be exported this way) 72 81 T
(. Maybe) 486.83 81 T
(even a modi\336er to) 72 67 T
1 F
(de\336ne method) 161.99 67 T
0 F
( or) 234.32 67 T
1 F
(de\336ne generic) 250.32 67 T
0 F
(.) 321.31 67 T
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Foreign Function Interface) 98.46 42.62 T
(August 31, 1995) 279.44 42.62 T
(1) 532.3 42.62 T
(1) 536 42.62 T
0 12 Q
(Are the new pre\336x Dylan names for the alien import facilities OK? Strictly speaking, they don\325) 72 712 T
(t) 529.04 712 T
(de\336ne anything, but \322de\336ne mumble\323 does seem nicer to us.) 72 698 T
1 F
(de\336ne alien-function) 72 671.53 T
0 F
( needs a \322language\323 ar) 177.01 671.53 T
(gument, right? How about a \322compiler\323 ar) 284.75 671.53 T
(gument?) 487.49 671.53 T
(Is) 72 645.07 T
1 F
(ensur) 83.66 645.07 T
(e-alien-modules) 112.12 645.07 T
0 F
( really needed? Couldn\325) 192.78 645.07 T
(t this be in the) 307.54 645.07 T
1 F
(de\336ne library) 378.54 645.07 T
0 F
( form or some-) 448.21 645.07 T
(thing? Or maybe we really want a) 72 631.07 T
1 F
(de\336ne alien-library) 237.62 631.07 T
0 F
( form?) 335.96 631.07 T
1 16 Q
(7.  Intr) 72 567.47 T
(oduction to Cr) 119.26 567.47 T
(eole) 218.53 567.47 T
0 12 Q
-0.2 (The purpose of this paper is to describe the functionality of DylanW) 72 539.67 P
-0.2 (orks Creole. Creole is a cross-) 396.39 539.67 P
-0.37 (language interface tool which will allow the user to interchange data with libraries that are written) 72 525.67 P
(in other languages. This document describes the high-level application programmer interface) 72 511.67 T
(\050API\051 to Creole. Another document, Foreign Function Interface, will describe the machine level) 72 497.67 T
-0.24 (work required to implement Creole. Readers should also be familiar with Moon\325) 72 483.67 P
-0.24 (s paper) 455.33 483.67 P
-0.24 (, \322MacDy-) 488.93 483.67 P
(lan Creole\323; it was the starting point for this white paper) 72 469.67 T
(.) 341.98 469.67 T
1 16 Q
(8.  Design Ideas and Issues) 72 428.53 T
1 12 Q
(\245) 85 404.73 T
0 F
(Use Apple\325s) 97.75 404.73 T
5 F
(Creole) 160.4 404.73 T
0 F
( proposal as a starting point.) 193.06 404.73 T
1 F
(\245) 85 384.27 T
0 F
(Evaluate new) 97.75 384.27 T
5 F
(Melange) 165.73 384.27 T
0 F
( proposal from CMU.) 207.71 384.27 T
1 F
(\245) 85 363.8 T
0 F
(Identify issues regarding interfacing with C++.) 97.75 363.8 T
1 F
(\245) 85 343.33 T
0 F
(Identify issues regarding calling Windows/NT libraries.) 97.75 343.33 T
1 F
(\245) 85 322.87 T
0 F
(Identify issues regarding architecture specific calling conventions.) 97.75 322.87 T
1 16 Q
(9.  Overall Functionality) 72 281.73 T
0 12 Q
(The goal of DylanW) 72 253.93 T
(orks Creole is to make it easy for users to build applications that are written) 170.02 253.93 T
-0.18 (in a combination of Dylan, C and C++. This may also include libraries that have a C or C++ inter-) 72 239.93 P
(face that were written in any language. Creole performs \336ve primary functions at the language) 72 225.93 T
-0.14 (level. These are interface importation, access paths, cross-language call, name mapping, and type) 72 211.93 P
(mapping.) 72 197.93 T
1 14 Q
(9.1  Interface Importation) 72 164.13 T
0 12 Q
-0.32 (Interface importation imports an interface de\336ned in a C or C++ header \336le into a Dylan program.) 72 137 P
(This enables a user program to call C or C++ functions from Dylan. This also allows the Dylan) 72 123 T
(program to access global data items declared in the C or C++ header \336les. Apple proposes a syn-) 72 109 T
(tax for the interface importation that is suf) 72 95 T
(\336cient to import Apple\325) 274.75 95 T
(s own C header \336les, but may) 387.76 95 T
(not be quite suf) 72 81 T
(\336cient for use with real C++ header \336les, or the less carefully maintained Unix) 146.11 81 T
(\050and possibly Microsoft\051 header \336les.) 72 67 T
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Foreign Function Interface) 98.46 42.62 T
(August 31, 1995) 279.44 42.62 T
(12) 532 42.62 T
1 12 Q
(< Include import interface syntax her) 72 712 T
(e>) 263.6 712 T
0 F
(Here is a simple example of using Creole:) 72 684.55 T
2 10 Q
(define interface) 144 664.43 T
(  #include \322fred.h\323) 144 650.98 T
(end interface;) 144 637.53 T
0 12 Q
(Options are available to override the Creole\325) 72 610.75 T
(s default behavior) 285.29 610.75 T
(. The options allow a programmer) 370.61 610.75 T
(to control the importation process in the following ways:) 72 596.75 T
1 F
(\245) 85 575.3 T
0 F
(Selectively imports part of the interface) 97.75 575.3 T
1 F
(\245) 85 553.85 T
0 F
(Explicitly control type mapping) 97.75 553.85 T
1 F
(\245) 85 532.4 T
0 F
-0.15 (Explicitly control name mapping to avoid name conflicts caused by the differences between) 97.75 532.4 P
(Dylan and C or C++. \050case sensitivity and scoping rules\051) 97.75 518.4 T
1 F
(\245) 85 496.95 T
0 F
(Control trade-offs between runtime memory consumption and dynamic functionality.) 97.75 496.95 T
1 F
(9.1.1  Open Issues with Importation) 72 463.5 T
0 F
(The following are issues and problems with the MacDylan Creole design:) 72 436.05 T
1 F
(\245) 85 414.6 T
0 F
(It is Mac-centric.) 97.75 414.6 T
1 F
(\245) 85 393.15 T
0 F
(It does not address calling C++ functions and accessing C++ data.) 97.75 393.15 T
1 F
(\245) 85 371.7 T
0 F
(It appears not to follow C standard rules for parsing #include files. The current document) 97.75 371.7 T
-0.33 (says, \322If a) 97.75 357.7 P
1 F
-0.33 (define interface) 148.07 357.7 P
0 F
-0.33 ( statement imports a header file a.h and a.h contains) 227.38 357.7 P
2 F
-0.8 (#include) 476 357.7 P
(\322b.h\323) 97.75 343.7 T
0 F
(, Creole does not import definitions in b.h.\323 \050p. 26, first paragraph\051.) 133.75 343.7 T
(It may the case that this statement means that the included \336les should be parsed, but not) 99 324.25 T
(imported. W) 99 310.25 T
(e need to \336nd out what the intention of this statement is. At the very least,) 158.7 310.25 T
-0.07 (included \336les need to be recognized and parsed in order for the top-level header \336le to have) 99 296.25 P
(the correct semantics.) 99 282.25 T
1 F
(\245) 85 260.8 T
0 F
(On most systems, there are predefined C or C++ macros like __STDC__ ; it is unclear) 97.75 260.8 T
(whether the user would be required to define system predefined macros in order to get the) 97.75 246.8 T
(include file to parse correctly.) 97.75 232.8 T
-0.08 (W) 99 213.35 P
-0.08 (e recommend that we match the native compiler\050s\051 CPP macros so the user does not need) 109.37 213.35 P
(to worry about this issue.) 99 199.35 T
1 F
(\245) 85 177.9 T
0 F
(Default -I paths. CPP normally has a set of default include paths that are searched to find) 97.75 177.9 T
(include files that are specified with the <> syntax. This ordered set normally includes) 97.75 163.9 T
2 F
-1.06 (/usr/include) 97.75 149.9 P
0 F
-0.44 ( and can include multiple entries \050especially for C++\051. For some compilers) 184.15 149.9 P
(there are environment variables that add to or modified the include path search rules.) 97.75 135.9 T
(W) 99 116.45 T
(e recommend that we add support for <> syntax and match the include path search rules) 109.37 116.45 T
(for supported C and C++ compilers.) 99 102.45 T
1 F
(\245) 85 81 T
0 F
(Feature suggestion: minimal addition if the user specifies a specific function \050or variable\051) 97.75 81 T
(from an include file bring in only the necessary parts of the include file. For example:) 97.75 67 T
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Foreign Function Interface) 98.46 42.62 T
(August 31, 1995) 279.44 42.62 T
(13) 532 42.62 T
2 10 Q
(define interface) 144 693.2 T
-1 (#include \322string.h\323, // I would use <string.h> but this is not part) 144 681.06 P
(of the language yet) 144 669.06 T
(import: {\322strncpy\323};) 144 656.92 T
(end interface;) 144 644.79 T
0 12 Q
(The prototype for) 99 627.32 T
2 F
(strncpy) 186.65 627.32 T
0 F
( is:) 237.05 627.32 T
2 10 Q
(extern char * strncpy\050char *s1, const char *s2,size_t n\051;) 144 614.52 T
0 12 Q
-0.37 (This would import the C function strcpy and the user de\336ned type size_t, which is de\336ned to) 99 597.05 P
-0.21 (to the type) 99 583.05 P
2 F
-0.5 (int) 152.04 583.05 P
0 F
-0.21 (, and discard the remaining contents of the \336le. This approach would also be) 173.64 583.05 P
-0.28 (useful for minimal or incremental recompilation systems. i.e. If the user added an additional) 99 569.05 P
-0.38 (prototype to a \336le it would not change the declaration of) 99 555.05 P
2 F
-0.9 (strcpy,) 367.82 555.05 P
0 F
-0.38 ( so the application would) 418.22 555.05 P
(not need to be recompiled.) 99 541.05 T
1 F
(\245) 85 520.91 T
0 F
(Dylan to C++ name mapping is much more difficult than Dylan to C name mapping. The) 97.75 520.91 T
(C++ naming scheme encodes the types of the parameters into the function name. Most) 97.75 506.91 T
(debuggers provide a set of functions \050called something like) 97.75 492.91 T
2 F
(mangle) 384.71 492.91 T
0 F
( and) 427.91 492.91 T
2 F
(demangle) 451.24 492.91 T
0 F
(\051 that) 508.84 492.91 T
(translate internal names to external names and vice-versa. C++ also has some very arcane) 97.75 478.91 T
(rules for data type promotion/mapping when there is not an exact match of function signa-) 97.75 464.91 T
(ture. For example:) 97.75 450.91 T
7 10 Q
(<insert examples here>) 144 438.11 T
0 12 Q
(If we are going to support more than one C++ compiler each compiler may \050probably will\051) 99 420.64 T
-0.16 (have its own name mangling scheme. So, we will need to provide a separate mangle/deman-) 99 406.64 P
(gle function for each compiler) 99 392.64 T
(.) 243.64 392.64 T
1 F
(\245) 85 372.5 T
0 F
-0.01 (A minor issue is that) 97.75 372.5 P
2 F
-0.04 (define) 200 372.5 P
0 F
-0.01 ( only allows the definition of C macros to integers. However,) 243.2 372.5 P
(it is possible in C to define a macro to a character string, for example,) 97.75 358.5 T
2 10 Q
(#define foo \322this is a string\323) 144 345.7 T
0 12 Q
(W) 99 328.23 T
(e have not seen this used in header \336les, but you never know what the user or library ven-) 109.37 328.23 T
(dor may do.) 99 314.23 T
(W) 99 296.09 T
(e suggest that this should be implemented if it is trivial, otherwise it should be docu-) 109.37 296.09 T
(mented as a limitation.) 99 282.09 T
1 14 Q
(9.2  Access Paths) 72 248.62 T
0 12 Q
(DylanW) 72 221.82 T
(orks Creole will support the following access paths:) 111.7 221.82 T
1 F
(\245) 85 201.68 T
0 F
(External module) 97.75 201.68 T
1 F
(\245) 85 181.55 T
0 F
(Libraries) 97.75 181.55 T
1 F
(\245) 85 161.41 T
0 F
(Inlined machine code, if it is possible) 97.75 161.41 T
1 F
(\245) 85 141.27 T
0 F
(Others as needed by the target OS) 97.75 141.27 T
1 F
(<need help from NT person here to add to list>) 264.04 141.27 T
1 14 Q
(9.3  Cr) 72 107.8 T
(oss-language Call) 112.57 107.8 T
0 12 Q
(Cross-language call allows Dylan routines to call routines in another language and vice-versa.) 72 81 T
-0.37 (Y) 72 67 P
-0.37 (ou can pass a pointer to a Dylan function as an ar) 79.46 67 P
-0.37 (gument to a C function. The C function can call) 311.42 67 P
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Foreign Function Interface) 98.46 42.62 T
(August 31, 1995) 279.44 42.62 T
(14) 532 42.62 T
0 12 Q
(back the Dylan function with an \322alien-method\323 or a macro de\336ned by the callback clause of) 72 712 T
1 F
(de\336ne interface) 72 698 T
0 F
(.) 150.98 698 T
1 14 Q
(9.4  Name Mapping) 72 664.67 T
0 12 Q
(Name mapping translates names of entities in another language into Dylan variable names in a) 72 638 T
(speci\336ed module.) 72 624 T
(Creole allows you to specify the exact mapping of each name, select one of the several available) 72 598 T
(sets of name translation rules using the) 72 584 T
1 F
(name-mapper:) 261.65 584 T
0 F
( option, or use the default set of name) 337.63 584 T
(translation rules.) 72 570 T
(MacDylan provides the following name mapping options:) 72 544 T
1 F
(\245) 85 524 T
0 F
(Blah blah blah) 97.75 524 T
1 F
(9.4.1  Open Issues with Name Mapping) 72 492 T
(\245) 85 472 T
0 F
(A proposed enhancement is to allow the user to provide a function that would do the name) 97.75 472 T
(mapping, such as for the following C prototype:) 97.75 458 T
2 10 Q
(prototype char * mapper\050const char* dylan_name, char *buffer_p\051;) 144 445.33 T
0 12 Q
(where) 99 428 T
2 F
(dylan_name) 131.32 428 T
0 F
( is a pointer to a C-string and) 203.32 428 T
2 F
(buffer_p) 345.97 428 T
0 F
( is a pointer to an area of) 403.57 428 T
(memory suf) 99 414 T
(\336cient to return the mapped function name. If the function fails to perform the) 156.44 414 T
-0.06 (mapping or an error occurs while \336lling the buf) 99 400 P
-0.06 (fer) 326.27 400 P
-0.06 (, a well-de\336ned error condition should be) 339.11 400 P
(de\336ned.) 99 386 T
1 14 Q
(9.5  T) 72 352.67 T
(ype Mapping) 104.8 352.67 T
0 12 Q
(T) 72 326 T
(ype mapping translates C and C++ types into Dylan types.) 78.49 326 T
(Low-level facilities provide direct use of machine pointers and the raw bits pointed to by the) 72 300 T
(machine pointers.) 72 286 T
1 F
(<This subject will be cover) 72 260 T
(ed by the FFI paper>) 208.62 260 T
FMENDPAGE
%%EndPage: "14" 14
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 14
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Courier
%%+ Times-BoldItalic
%%+ Courier-Oblique
%%+ Times-Italic
%%+ Symbol
%%+ Courier-Bold
%%EOF
