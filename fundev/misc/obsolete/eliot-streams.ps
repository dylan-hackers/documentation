%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 20 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Courier FMFONTDEFINE
3 0 /Times-Italic FMFONTDEFINE
4 0 /Courier-Oblique FMFONTDEFINE
5 0 /Helvetica-BoldOblique FMFONTDEFINE
6 0 /Helvetica FMFONTDEFINE
7 0 /Helvetica-Bold FMFONTDEFINE
8 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(1) 527.65 67.57 T
0 24 Q
(Dylan Streams Library Proposal) 142.67 728.95 T
1 12 Q
(Eliot Miranda & Scott McKay) 219.65 687.13 T
(Harlequin) 271.31 669.31 T
1 16 Q
(1.  Intr) 63.65 624.82 T
(oduction) 110.91 624.82 T
0 12 Q
(The Dylan Streams library described by this paper has several major goals:) 63.65 595.66 T
1 F
(\245) 77.15 573.83 T
0 F
(To provide a generic, easy-to-use interface for streaming over collections \050both producing) 90.65 573.83 T
-0.22 (and consuming\051. The same interface for consuming or producing is available irrespective of) 90.65 559.83 P
(the type of stream, or the types of the elements being streamed over.) 90.65 545.83 T
1 F
(\245) 77.15 524.01 T
0 F
(To provide an efficient system, especially for the common case of file I/O.) 90.65 524.01 T
1 F
(\245) 77.15 502.19 T
0 F
(To provide access to an underlying buffer management protocol.) 90.65 502.19 T
1 F
(\245) 77.15 480.36 T
0 F
(To provide an extensible framework. Other useful functionality that sits behind a stream) 90.65 480.36 T
(interface should be easy to integrate to this stream library.) 90.65 466.36 T
(The proposal presents the design of a streams library that meets these goals in the context of) 63.65 438.54 T
(Dylan\325) 63.65 424.54 T
(s internal collections and \050buf) 96.31 424.54 T
(fered\051 access to disk \336les. It does not address a number of) 238.74 424.54 T
(related issues, including:) 63.65 410.54 T
1 F
(\245) 77.15 388.72 T
0 F
(A standard object-printing package such as Smalltalk\325s) 90.65 388.72 T
2 F
(printOn) 358.27 388.72 T
1 F
(:) 408.67 388.72 T
0 F
( or Lisp\325s) 412.67 388.72 T
2 F
(print-) 461.66 388.72 T
(object) 90.65 374.72 T
0 F
(, or a formatted printing facility such as Lisp\325s) 133.85 374.72 T
2 F
(format) 359.82 374.72 T
0 F
(. It is expected that these) 403.02 374.72 T
(facilities will be provided by additional libraries.) 90.65 360.72 T
1 F
(\245) 77.15 338.89 T
0 F
(A comprehensive range of I/O facilities for using memory-mapped files, network connec-) 90.65 338.89 T
(tions, etc., although it is expected that such facilities can be easily added to the streams) 90.65 324.89 T
(library by virtue of its extensible framework.) 90.65 310.89 T
1 F
(\245) 77.15 289.07 T
0 F
(An interface to operating system functionality such as pathnames, system calls, etc.) 90.65 289.07 T
1 F
(\245) 77.15 267.25 T
0 F
(How the library might be factored into smaller units of functionality.) 90.65 267.25 T
1 16 Q
(2.  Concepts) 63.65 224.76 T
0 12 Q
(A) 63.65 195.6 T
3 F
(str) 75.31 195.6 T
(eam) 87.54 195.6 T
0 F
( provides sequential access to an aggregate of data, such as collections, external \336les,) 107.53 195.6 T
(sequences of random numbers, and so forth. A stream can be usefully considered to be an encap-) 63.65 181.6 T
(sulation of a collection and an iteration state. A readable stream produces elements; a writable) 63.65 167.6 T
(stream consumes elements; a read-write stream does both.) 63.65 153.6 T
3 F
(Read str) 63.65 125.78 T
(eams) 103.54 125.78 T
0 F
( return successive elements of collections via the function) 128.2 125.78 T
1 F
(r) 408.48 125.78 T
(ead) 413.59 125.78 T
0 F
(, hiding details of) 431.59 125.78 T
(indexing, buf) 63.65 111.78 T
(fering, and so on. For example, the expression) 127.43 111.78 T
2 10 Q
(let rs = read-stream-over\050"hello world"\051;) 99.65 91.29 T
4 F
(ex. 1) 477.65 91.29 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(2) 527.65 67.57 T
0 12 Q
(binds) 63.65 736.95 T
1 F
(rs) 92.65 736.95 T
0 F
( to a read stream over the string) 102.65 736.95 T
2 F
("hello world") 257.28 736.95 T
0 F
(. The \336rst invocation of) 350.88 736.95 T
1 F
(r) 466.87 736.95 T
(ead) 471.98 736.95 T
0 F
( returns) 489.98 736.95 T
-0.19 (the character h, the next e, and so on. Once a stream has been used to consume all the elements of) 63.65 722.95 P
(a collection \050via suf) 63.65 708.95 T
(\336cient invocations of) 158.41 708.95 T
1 F
(r) 262.74 708.95 T
(ead) 267.85 708.95 T
0 F
(, for example\051, the stream is said to be at its end.) 285.85 708.95 T
(This condition can be tested via the function) 63.65 694.95 T
1 F
(str) 279.62 694.95 T
(eam-at-end?) 293.4 694.95 T
0 F
(. So, the following code fragment) 357.38 694.95 T
(applies) 63.65 680.95 T
1 F
(function) 100.64 680.95 T
0 F
( to all elements of the collection:) 143.32 680.95 T
2 10 Q
(let stream = read-stream-over\050collection\051;) 99.65 662.01 T
4 F
(ex. 2) 477.65 662.01 T
2 F
(while \050~stream-at-end?\050stream\051\051) 99.65 650.01 T
(function\050read\050stream\051\051;) 117.65 638.01 T
0 12 Q
-0.11 (After all the elements of a stream have been read, any further invocations of) 63.65 612.41 P
1 F
-0.11 (r) 430.36 612.41 P
-0.11 (ead) 435.47 612.41 P
0 F
-0.11 ( signal an) 453.47 612.41 P
1 F
-0.11 (<end-) 502.14 612.41 P
(of-str) 63.65 598.41 T
(eam>) 91.42 598.41 T
0 F
( condition. An alternative end-of-stream behavior is to return a distinguished end-of-) 119.58 598.41 T
(stream element, which can be any object. The end-of-stream element can speci\336ed at stream cre-) 63.65 584.41 T
-0.27 (ation time or as a keyword ar) 63.65 570.41 P
-0.27 (gument to various read functions. For example, the following stream) 201.76 570.41 P
(will not signal an) 63.65 556.41 T
1 F
(<end-of-str) 149.65 556.41 T
(eam>) 206.93 556.41 T
0 F
( condition at end of stream, but will instead return) 235.09 556.41 T
1 F
(#f) 478.07 556.41 T
0 F
( for all) 488.06 556.41 T
(invocations of) 63.65 542.41 T
1 F
(r) 134.98 542.41 T
(ead) 140.09 542.41 T
0 F
( after the end of the stream.) 158.09 542.41 T
2 10 Q
(read-stream-over\050"hello world", on-end-of-stream: #f\051;) 99.65 523.47 T
4 F
(ex. 3) 477.65 523.47 T
3 12 Q
(W) 63.65 497.86 T
(rite str) 72.98 497.86 T
(eams) 104.88 497.86 T
0 F
( update mutable collections that are modi\336ed by invocations of the) 129.54 497.86 T
1 F
(write) 452.51 497.86 T
0 F
( function,) 479.16 497.86 T
(hiding details of indexing, growing the underlying collection, buf) 63.65 483.86 T
(fering, and so on. For example,) 377.41 483.86 T
(the following forms bind) 63.65 469.86 T
1 F
(ws) 186.31 469.86 T
0 F
( to a write stream over an empty string, and creates the string) 199.64 469.86 T
2 F
(\322I) 495.59 469.86 T
(see!\323) 63.65 455.86 T
0 F
(, using the function) 99.65 455.86 T
1 F
(str) 195.31 455.86 T
(eam-contents) 209.09 455.86 T
0 F
( to access all of the stream\325) 277.07 455.86 T
(s elements.) 407.04 455.86 T
2 10 Q
(let ws = write-stream-over\050make\050<string>\051\051;) 99.65 436.92 T
4 F
(ex. 4) 477.65 436.92 T
2 F
(write\050ws,\325I\325\051) 99.65 424.92 T
(;) 177.65 424.92 T
(write\050ws,\325 \325\051;) 99.65 412.92 T
(write-n\050ws,"See"\051;) 99.65 400.92 T
(write\050ws,\325!\325\051;) 99.65 388.92 T
(stream-contents\050ws\051;) 99.65 376.92 T
0 12 Q
-0.25 (The function) 63.65 351.32 P
1 F
-0.25 (write-n) 127.81 351.32 P
0 F
-0.25 ( is a useful shorthand; calling) 165.13 351.32 P
1 F
-0.25 (write-n) 307.64 351.32 P
0 F
-0.25 ( on a collection is equivalent to calling) 344.96 351.32 P
1 F
(write) 63.65 337.32 T
0 F
( on all the elements of the collection. However) 90.3 337.32 T
(,) 314.11 337.32 T
1 F
(write-n) 320.11 337.32 T
0 F
( will be implemented more ef) 357.43 337.32 T
(\336-) 498.86 337.32 T
(ciently in certain cases, notably for streams over disk \336les.) 63.65 323.32 T
(Streams over sequences \050both subclasses of) 63.65 297.04 T
1 F
(<sequence>) 275.6 297.04 T
0 F
( and external \336les\051 are positionable \050that) 335.28 297.04 T
(is, you can do \322random access\323 on them\051. For example, since the \336rst element of a positionable) 63.65 283.04 T
(stream is at position 0, the following forms) 63.65 269.04 T
2 10 Q
(let rs = read-stream-over\050"hello world"\051;) 99.65 250.1 T
4 F
(ex. 5) 477.65 250.1 T
2 F
(rs.position := 6;) 99.65 238.1 T
(read\050stream\051;) 99.65 226.1 T
0 12 Q
(return the character) 63.65 200.5 T
2 F
(\325w\325) 159.94 200.5 T
0 F
(. The following forms) 181.54 200.5 T
2 10 Q
(let ws = write-stream-over\050make\050<string>\051\051;) 99.65 181.56 T
4 F
(ex. 6) 477.65 181.56 T
2 F
(ws.position := 10;) 99.65 169.56 T
(write-n\050ws,"whoa!"\051;) 99.65 157.56 T
(stream-contents\050ws\051;) 99.65 145.56 T
0 12 Q
-0.33 (return the string) 63.65 119.95 P
2 10 Q
-0.67 ("          whoa!") 142.31 119.95 P
0 12 Q
-0.33 ( since unwritten-to portions are \336lled with the string\325) 237.66 119.95 P
-0.33 (s default) 488.32 119.95 P
(element,) 63.65 105.95 T
2 F
(\134space) 107.64 105.95 T
0 F
(. Access to the collections created by write streams is provided by the function) 150.84 105.95 T
1 F
-0.39 (str) 63.65 91.95 P
-0.39 (eam-contents) 77.42 91.95 P
0 F
-0.39 (, which returns a) 145.4 91.95 P
3 F
-0.39 (copy) 226.84 91.95 P
0 F
-0.39 ( of the underlying collection comprising the elements from) 249.49 91.95 P
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(3) 527.65 67.57 T
0 12 Q
(the start of the stream through to the latest element added via any of the write functions \050) 63.65 736.95 T
1 F
(write) 489.91 736.95 T
0 F
(,) 516.56 736.95 T
1 F
(write-n) 63.65 722.95 T
0 F
(, etc.\051.) 100.97 722.95 T
(Streams over sequences also allow streaming over subsequences of the elements of their underly-) 63.65 694.73 T
(ing collection. Read streams have a read limit beyond which it is not possible to read, and write) 63.65 680.73 T
(streams have a write limit beyond which it is not possible to write. Along with the ability to set) 63.65 666.73 T
-0.38 (the initial position of a stream, the read and write limits allow one to select a subsequence of some) 63.65 652.73 P
(collection to stream over) 63.65 638.73 T
(. For example, the following) 181.97 638.73 T
2 10 Q
(read-to-end\050read-stream-over) 99.65 617.84 T
4 F
(ex. 7) 477.65 617.84 T
2 F
(\050"hello there, world", start: 6, end: 11\051\051;) 207.65 605.84 T
0 12 Q
(evaluates to) 63.65 578.29 T
2 10 Q
("there") 123.64 578.29 T
0 12 Q
(. The limits specify the index one after the last accessible element in the) 165.64 578.29 T
-0.41 (stream. That is, the interval [) 63.65 564.29 P
3 F
-0.41 (start) 199.93 564.29 P
0 F
-0.41 (,) 221.94 564.29 P
3 F
-0.41 (end) 227.54 564.29 P
0 F
-0.41 (\051 includes the index) 244.86 564.29 P
3 F
-0.41 (start) 340.56 564.29 P
0 F
-0.41 ( but excludes the index) 362.57 564.29 P
3 F
-0.41 (end) 474.2 564.29 P
0 F
-0.41 (. This is) 491.52 564.29 P
-0.14 (consistent with standard Dylan functions over sequences, such as) 63.65 550.29 P
1 F
-0.14 (copy-sequence) 378.31 550.29 P
0 F
-0.14 (.) 452.3 550.29 P
1 F
-0.14 (r) 458.16 550.29 P
-0.14 (ead-to-end) 463.27 550.29 P
0 F
-0.14 ( is) 517.93 550.29 P
-0.12 (one of a number of convenient utility functions for accessing streams and returns all the elements) 63.65 536.29 P
(up to the end of the stream from its current position.) 63.65 522.29 T
1 14 Q
(2.1  Str) 63.65 486.73 T
(eams versus Gr) 106.56 486.73 T
(owing Collections and Object Identity) 198.85 486.73 T
0 12 Q
(Dylan does not provide general stretchiness of containers) 63.65 457.84 T
0 9.6 Q
(1) 338.59 462.64 T
0 12 Q
(, hence a write stream over a non-) 343.39 457.84 T
(stretchy sequence cannot grow the sequence. Instead, a copy of the sequence must be created,) 63.65 443.84 T
(potentially breaking desired shared references to the sequence. The initial empty string in exam-) 63.65 429.84 T
(ples 4 and 6 above has to replaced each time the stream needs to grow the string in order to) 63.65 415.84 T
(accommodate new elements. Streams can only reliably be used to modify existing collections if) 63.65 401.84 T
-0.01 (these collections are already stretchy) 63.65 387.84 P
-0.01 (, or if a write limit is used to prevent writing beyond the end) 239.45 387.84 P
(of a sequence \050hence obviating the need to grow\051. A stream over a stretchy vector) 63.65 373.84 T
3 F
(will) 458.87 373.84 T
0 F
( use the) 476.88 373.84 T
(unique stretchy vector throughout the stream's existence. For example, the following) 63.65 359.84 T
2 10 Q
(let sv = make\050<stretchy-vector>\051;) 117.65 338.95 T
4 F
(ex. 8a) 477.65 338.95 T
2 F
(let ws = write-stream-over\050sv\051;) 117.65 326.95 T
(write-n\050ws,#\0501, 2, 3, 4, 5, 6, 7, 8, 9\051\051;) 117.65 314.95 T
(write-n\050ws,"ABCDEF"\051;) 117.65 302.95 T
(sv;) 117.65 290.95 T
0 12 Q
-0.1 (returns stretchy vector of) 63.65 263.4 P
2 10 Q
-0.2 (\0501, 2, 3, 4, 5, 6, 7, 8, 9, \325A\325, \325B\325, \325C\325, \325D\325, \325E\325, \325F\325\051) 186.55 263.4 P
0 12 Q
-0.1 (,) 525.75 263.4 P
(whereas the following) 63.65 249.4 T
2 10 Q
(let v = make\050<vector>\051;) 117.65 228.51 T
4 F
(ex. 8b) 477.65 228.51 T
2 F
(let ws = write-stream-over\050v\051;) 117.65 216.51 T
(write-n\050ws,#\0501, 2, 3, 4, 5, 6, 7, 8, 9\051\051;) 117.65 204.51 T
(write-n\050ws,"ABCDEF"\051;) 117.65 192.51 T
(v;) 117.65 180.51 T
0 12 Q
(returns an empty vector) 63.65 152.95 T
(. This is because the write stream in example 8b needs at least a vector of) 176.63 152.95 T
(size 15 to accommodate the elements written to the stream. Since the stream cannot change) 63.65 138.95 T
1 F
(v) 504.9 138.95 T
0 F
(\325) 510.9 138.95 T
(s) 514.24 138.95 T
63.65 114.95 531.65 134.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 122.95 195.65 122.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(1.  Languages such as Smalltalk allow any container to grow by relying on) 63.65 108.29 T
1 F
(become:) 365 108.29 T
0 F
(, an unsafe primitive operation) 400.54 108.29 T
(that assigns object identities to objects.) 63.65 96.29 T
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(4) 527.65 67.57 T
0 12 Q
(size it must allocate a new vector each time it grows; the original empty value of the vector is) 63.65 736.95 T
(returned as the result of the example.) 63.65 722.95 T
(W) 63.65 696.95 T
(rite streams to internal collections grow their underlying collections in suf) 74.5 696.95 T
(\336ciently lar) 429.58 696.95 T
(ge incre-) 484.36 696.95 T
-0.36 (ments) 63.65 682.95 P
0 9.6 Q
-0.29 (2) 92.32 687.75 P
0 12 Q
-0.36 ( so as to reduce the frequency of expensive grow operations. Streams over disk \336les) 97.12 682.95 P
3 F
-0.36 (should) 497 682.95 P
0 F
-0.31 (grow their underlying \336les by only as much as is needed to store elements. In the case of these \336le) 63.65 668.95 P
(streams, excessive \336le size and excessive numbers of I/O operations are avoided by using buf) 63.65 654.95 T
(f-) 512.34 654.95 T
(ered I/O in the internals of the streams implementation.) 63.65 640.95 T
1 14 Q
(2.2  T) 63.65 607.62 T
(ypes of Objects that can be Str) 96.45 607.62 T
(eamed Over) 278.95 607.62 T
0 12 Q
(This stream proposal allows streams to be used for three major) 63.65 580.95 T
( categories of aggregate: collec-) 367.93 580.95 T
(tions, sequences, and disk \336les. Other systems, notably Smalltalk, use streams to access other) 63.65 566.95 T
(aggregates such as the results of computations \050e.g., sequences of random numbers\051. It is envi-) 63.65 552.95 T
(sioned that the Dylan Streams system may likewise be extended.) 63.65 538.95 T
(The class) 63.65 512.95 T
1 F
(<collection-r) 111.64 512.95 T
(ead-str) 176.24 512.95 T
(eam>) 212.02 512.95 T
0 F
( is used to created streams over arbitrary collections \050sub-) 240.18 512.95 T
(classes of) 63.65 498.95 T
1 F
(<collection>) 112.97 498.95 T
0 F
(\051. It uses the forward iteration protocol to implement the underlying enu-) 175.31 498.95 T
(meration over collections. Collections such as) 63.65 484.95 T
1 F
(<table>) 287.29 484.95 T
0 F
( can be streamed over via instances of) 326.3 484.95 T
1 F
(<collection-r) 63.65 470.95 T
(ead-str) 128.26 470.95 T
(eam>) 164.03 470.95 T
0 F
(.) 192.19 470.95 T
-0.11 (Sequences are accessed via positionable streams, allowing one to \322move around\323 in the sequence) 63.65 444.95 P
(by using functions like) 63.65 430.95 T
1 F
(position-setter) 176.32 430.95 T
0 F
( and) 249.64 430.95 T
1 F
(skip) 272.96 430.95 T
0 F
(. Sequences such as) 294.31 430.95 T
1 F
(<vector>) 391.96 430.95 T
0 F
( and) 437.62 430.95 T
1 F
(<string>) 460.94 430.95 T
0 F
( can) 504.62 430.95 T
(be accessed via the concrete subclasses of) 63.65 416.95 T
1 F
(<positionable-str) 267.91 416.95 T
(eam>) 354.54 416.95 T
0 F
( \050) 382.7 416.95 T
1 F
(<r) 389.7 416.95 T
(ead-str) 401.65 416.95 T
(eam>) 437.42 416.95 T
0 F
(,) 465.59 416.95 T
1 F
(<write-) 471.59 416.95 T
(str) 63.65 402.95 T
(eam>) 77.42 402.95 T
0 F
(, and) 105.59 402.95 T
1 F
(<r) 131.92 402.95 T
(ead-write-str) 143.87 402.95 T
(eam>) 210.29 402.95 T
0 F
(\051.) 238.45 402.95 T
(External I/O to and from disk \336les can be accomplished via instances of the subclasses of) 63.65 376.95 T
1 F
(<\336le-) 495.58 376.95 T
(str) 63.65 362.95 T
(eam>) 77.42 362.95 T
0 F
(. Streams that allow access to pipes, sockets, and terminals will be added at some later) 105.59 362.95 T
(date.) 63.65 348.95 T
63.65 102.95 531.65 122.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 110.95 195.65 110.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(2.  In the current implementation, collections are doubled in size \050max\0502 * collection.size, 2\051\051 on grow) 63.65 96.29 T
(.) 471.82 96.29 T
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(5) 527.65 67.57 T
1 16 Q
(3.  Str) 63.65 734.29 T
(eam Classes) 104.69 734.29 T
0 12 Q
(The abstract internal streams class heterarchy is as follows:) 63.65 706.95 T
(Except for the class) 63.65 511.95 T
1 F
(<str) 160.96 511.95 T
(eam>) 181.57 511.95 T
0 F
(, all of these are abstract instantiable classes that provide clients) 209.74 511.95 T
(with a convenient way to type the uses of streams) 63.65 497.95 T
0 9.6 Q
(3) 301.94 502.75 T
0 12 Q
(.) 306.74 497.95 T
(The concrete internal streams heterarchy) 63.65 471.95 T
(, where classes not in italics are concrete classes, is as) 258.13 471.95 T
(follows:) 63.65 457.95 T
(The concrete streams) 63.65 265.95 T
1 F
(<r) 168.61 265.95 T
(ead-str) 180.56 265.95 T
(eam>) 216.34 265.95 T
0 F
(,) 244.5 265.95 T
1 F
(<write-str) 250.5 265.95 T
(eam>) 301.76 265.95 T
0 F
(, and) 329.93 265.95 T
1 F
(<r) 356.26 265.95 T
(ead-write-str) 368.21 265.95 T
(eam>) 434.63 265.95 T
0 F
( provide posi-) 462.79 265.95 T
(tionable streams that are, respectively) 63.65 251.95 T
(, readable, writable, and read-writable for sequences and) 243.83 251.95 T
-0.16 (mutable sequences. The concrete class) 63.65 237.95 P
1 F
-0.16 (<collection-r) 250.79 237.95 P
-0.16 (ead-str) 315.39 237.95 P
-0.16 (eam>) 351.16 237.95 P
0 F
-0.16 ( provides a read stream for non-) 379.33 237.95 P
(sequence collections such as) 63.65 223.95 T
1 F
(<table>) 203.62 223.95 T
0 F
(.) 242.63 223.95 T
63.65 114.95 531.65 134.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 122.95 195.65 122.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(3.) 63.65 108.29 T
5 9 Q
(<read-writable-stream>) 76.15 108.29 T
6 10 Q
(,) 175.18 108.29 T
5 9 Q
(<readable-positionable-stream>) 180.46 108.29 T
0 10 Q
(,) 316.51 108.29 T
5 9 Q
(<writable-positionable-stream>) 321.51 108.29 T
0 10 Q
( and) 454.55 108.29 T
5 9 Q
(<read-writ-) 473.99 108.29 T
(able-positionable-stream>) 63.65 96.29 T
0 10 Q
( are place-holders and declare neither slots nor methods.) 175.43 96.29 T
63.65 87.95 531.65 744.95 C
80.03 533.95 515.27 702.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
296.03 684.95 296.03 666.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
296.03 684.95 436.66 661.95 2 L
N
296.03 684.95 167.66 660.95 2 L
N
161.03 648.95 300.66 615.95 2 L
N
440.03 648.95 300.66 615.95 2 L
N
440.03 648.95 440.03 585.95 2 L
N
161.03 648.95 161.03 585.95 2 L
N
296.03 648.95 161.03 585.95 2 L
N
296.03 648.95 440.03 585.95 2 L
N
296.03 595.95 296.03 554.95 2 L
N
295.65 553.95 422.03 567.95 2 L
N
5 10 Q
(<stream>) 276.66 690.31 T
(<positionable-stream>) 245.55 651.14 T
(<writable-stream>) 392.33 652.14 T
(<readable-stream>) 119.15 650.66 T
(<read-writable-stream>) 243.88 606.14 T
(<writable-positionable-stream>) 361.21 575.14 T
(<readable-positionable-stream>) 88.03 574.62 T
(<read-writable-positionable-stream>) 212.76 543.14 T
J
295.65 553.95 161.03 567.95 2 L
2 Z
N
63.65 87.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
63.65 87.95 531.65 744.95 C
80.03 287.95 515.27 453.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
161.03 435.95 161.03 399.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
296.03 363.95 431.03 381.95 2 L
N
161.03 381.95 296.03 363.95 2 L
N
161.03 435.95 297.66 419.95 2 L
N
296.03 309.95 431.03 327.95 2 L
N
161.03 327.95 296.03 309.95 2 L
N
296.03 354.95 296.03 309.95 2 L
N
431.03 336.95 431.03 381.95 2 L
N
7 10 Q
(<collection-read-stream>) 238.03 408.14 T
5 F
(<readable-stream>) 118.15 439.66 T
(<writable-positionable-stream>) 361.21 389.14 T
(<readable-positionable-stream>) 88.03 388.62 T
J
(<read-writable-positionable-stream>) 212.76 357.14 T
7 F
(<write-stream>) 401.32 328.46 T
(<read-stream>) 130.92 327.94 T
(<read-write-stream>) 252.87 296.46 T
J
161.03 338.95 161.03 381.95 2 L
N
63.65 87.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(6) 527.65 67.57 T
0 12 Q
(The heterarchy of \336le streams, where classes not in italics are concrete classes, is as follows:) 63.65 736.95 T
1 F
(<external-str) 63.65 550.75 T
(eam>) 130.25 550.75 T
0 F
( is the superclass of all streams that maintain some form of connection to the) 158.41 550.75 T
(\322outside world\323.) 63.65 536.75 T
1 F
(<buffer) 145.97 536.75 T
(ed-str) 184.58 536.75 T
(eam>) 214.36 536.75 T
0 F
( holds state pertaining to buf) 242.52 536.75 T
(fering \050the buf) 379.3 536.75 T
(fer) 448.39 536.75 T
(, its size, its) 461.23 536.75 T
-0 (\322\336ll pointer\323, and its type\051, and provides both an internal and an external buf) 63.65 522.75 P
-0 (fer management pro-) 431.02 522.75 P
(tocol.) 63.65 508.75 T
1 F
(<\336le-str) 93.65 508.75 T
(eam>) 133.6 508.75 T
0 F
( has a slot to hold a pathname and supports \336le system queries \050such as get-) 161.76 508.75 T
-0.04 (ting the \336le\325) 63.65 494.75 P
-0.04 (s size, etc.\051. The concrete classes) 121.58 494.75 P
1 F
-0.04 (<\336le-r) 282.29 494.75 P
-0.04 (ead-str) 313.57 494.75 P
-0.04 (eam>) 349.34 494.75 P
0 F
-0.04 (,) 377.51 494.75 P
1 F
-0.04 (<\336le-write-str) 383.47 494.75 P
-0.04 (eam>) 454.06 494.75 P
0 F
-0.04 ( and) 482.23 494.75 P
1 F
-0.04 (<\336le-) 505.48 494.75 P
(r) 63.65 480.75 T
(ead-write-str) 68.76 480.75 T
(eam>) 135.18 480.75 T
0 F
( provide ef) 163.34 480.75 T
(\336cient buf) 215.11 480.75 T
(fered I/O to \336les.) 263.89 480.75 T
-0.46 (This proposal does not address issues concerning the naming of \336les or invoking operating system) 63.65 453.55 P
-0.02 (facilities. W) 63.65 439.55 P
-0.02 (e intend that the streams proposal will be integrable with other proposals in this area.) 121.32 439.55 P
-0.16 (Presently we \336nesse the problem by positing a) 63.65 425.55 P
1 F
-0.16 (<pathname>) 288.32 425.55 P
0 F
-0.16 ( class, instances of which are used to) 353.33 425.55 P
(represent the names of host \336les. Making a stream over a) 63.65 411.55 T
1 F
(<pathname>) 340.26 411.55 T
0 F
( creates a stream over the) 405.28 411.55 T
(\336le named by the) 63.65 397.55 T
1 F
(<pathname>) 149.64 397.55 T
0 F
(, similar to making a stream over an internal stream.) 214.66 397.55 T
-0.3 (This proposal currently addresses \336les composed of ASCII or Unicode character or 8-bit integers,) 63.65 370.35 P
(but a protocol is provided \050via the) 63.65 356.35 T
1 F
(element-type:) 229.3 356.35 T
0 F
( keyword\051 to extend this.) 299.27 356.35 T
(T) 63.65 329.15 T
(o summarize, we propose the following stream classes. Only those slots that have exported) 70.14 329.15 T
(accessors or init keywords are included.) 63.65 315.15 T
2 10 Q
(define abstract class <stream> \050<object>\051 end class;) 99.65 295.29 T
(define abstract class <positionable-stream> \050<stream>\051) 99.65 271.29 T
(slot position :: <integer> = 0, init-keyword: start:;) 117.65 259.29 T
(end class;) 99.65 247.29 T
(define abstract class <readable-stream> \050<stream>\051) 99.65 223.29 T
(slot collection :: <collection>, required-init-keyword: over:;) 117.65 211.29 T
(slot end-of-stream-element, init-keyword: on-end-of-stream:;) 117.65 199.29 T
(end class;) 99.65 187.29 T
(define abstract class <writable-stream> \050<stream>\051) 99.65 163.29 T
(slot collection :: <collection>, required-init-keyword: over:;) 117.65 151.29 T
(end class;) 99.65 139.29 T
(define abstract class <readable-positionable-stream>) 99.65 115.29 T
(\050<readable-stream>, <positionable-stream>\051) 243.65 103.29 T
(end class;) 99.65 91.29 T
63.65 87.95 531.65 744.95 C
77.15 573.95 518.15 732.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10 Q
0 X
0 0 0 1 0 0 0 K
(<writable-positionable--stream>) 358 722.14 T
7 F
(<file-read-stream>) 113.15 622.14 T
(<file-write-stream>) 389.93 622.14 T
(<file-read-write-stream>) 239.85 582.14 T
5 F
(<readable-positionable-stream>) 84.95 722.14 T
J
346.99 728.95 346.99 728.95 2 L
J
346.99 728.95 346.99 728.95 2 L
0.5 H
2 Z
N
(<external-stream>) 253.98 722.14 T
J
(<read-writable-positionable-stream>) 208.75 632.14 T
295.35 622.95 295.35 594.95 2 L
N
154.65 615.95 295.35 592.95 2 L
N
435.65 616.95 295.35 592.95 2 L
N
347.15 696.95 436.66 631.95 2 L
0 Z
N
275.15 696.95 149.15 633.95 2 L
N
437.15 714.95 437.15 633.95 2 L
N
149.15 714.95 149.15 633.95 2 L
N
296.66 642.95 437.15 714.95 2 L
N
296.66 642.95 149.15 714.95 2 L
N
(<file-stream>) 238.93 698.14 T
270.66 708.95 302.65 719.95 2 L
N
(<buffered-stream>) 304.35 698.14 T
348.66 707.95 303.65 718.95 2 L
N
275.15 696.95 436.66 631.95 2 L
N
149.15 633.95 347.15 696.95 2 L
N
63.65 87.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(7) 527.65 67.57 T
2 10 Q
(define abstract class <writable-positionable-stream>) 99.65 726.29 T
(\050<writable-stream>, <positionable-stream>\051) 243.65 714.29 T
(end class;) 99.65 702.29 T
(define abstract class <read-writable-positionable-stream>) 99.65 678.29 T
(\050<read-writable-stream>, <positionable-stream>\051) 243.65 666.29 T
(end class;) 99.65 654.29 T
(define class <collection-read-stream> \050<readable-stream>\051 end class;) 99.65 630.29 T
(define class <read-stream> \050<readable-positionable-stream>\051) 99.65 606.29 T
(slot read-end :: <integer> = #f,) 117.65 594.29 T
(init-keyword: read-end:;) 315.65 594.29 T
(end class;) 99.65 582.29 T
(define class <write-stream> \050<writable-positionable-stream>\051) 99.65 558.29 T
(slot write-end :: <integer> = #f,) 117.65 546.29 T
(init-keyword: write-end:;) 321.65 546.29 T
(end class;) 99.65 534.29 T
(define class <read-write-stream>) 99.65 510.29 T
(\050<read-stream>, <write-stream>,) 189.65 498.29 T
(<read-writable-positionable-stream>\051) 207.65 486.29 T
(end class;) 99.65 474.29 T
1 14 Q
(3.1  Cr) 63.65 441.62 T
(eating Str) 104.22 441.62 T
(eams) 162.68 441.62 T
0 12 Q
(The following are the basic functions used to create streams.) 63.65 414.95 T
1 F
(make <read-stream>) 63.65 382.95 T
3 F
(over) 173.96 382.95 T
0 F
( #key) 195.29 382.95 T
3 F
( on-end-of-stream start end element-type buffer-size if-does-not-) 221.62 382.95 T
(exist) 63.65 368.95 T
8 F
(\336) 88.64 368.95 T
3 F
(readable-stream) 103.49 368.95 T
0 F
([Method]) 486.32 368.95 T
(Returns a new instance of a concrete subclass of) 81.65 342.95 T
1 F
(<r) 316.58 342.95 T
(eadable-str) 328.54 342.95 T
(eam>) 385.64 342.95 T
0 F
(.) 413.81 342.95 T
(If) 81.65 316.95 T
3 F
(over) 92.64 316.95 T
0 F
( is a subclass of) 113.96 316.95 T
1 F
(<collection>) 192.29 316.95 T
0 F
(, only the) 254.63 316.95 T
3 F
(on-end-of-str) 302.63 316.95 T
(eam) 365.51 316.95 T
0 F
( ar) 385.5 316.95 T
(gument may be supplied.) 397.61 316.95 T
(The stream will be an instance of) 81.65 302.95 T
1 F
(<collection-r) 243.95 302.95 T
(ead-str) 308.56 302.95 T
(eam>) 344.33 302.95 T
0 F
(.) 372.49 302.95 T
(If) 81.65 276.95 T
3 F
(over) 92.64 276.95 T
0 F
( is a subclass of) 113.96 276.95 T
1 F
(<sequence>) 192.29 276.95 T
0 F
(, the) 251.96 276.95 T
3 F
(start) 275.63 276.95 T
0 F
(and) 300.64 276.95 T
3 F
(end) 320.96 276.95 T
0 F
( ar) 338.29 276.95 T
(guments may also be supplied.) 350.4 276.95 T
3 F
(start) 501.06 276.95 T
0 F
-0.39 (and) 81.65 262.95 P
3 F
-0.39 (end) 101.59 262.95 P
0 F
-0.39 ( are integers that specify what subsequence of the sequence will be streamed over) 118.92 262.95 P
-0.39 (. The) 504.77 262.95 P
(default for) 81.65 248.95 T
3 F
(start) 134.96 248.95 T
0 F
( is 0; the default for) 156.97 248.95 T
3 F
(end) 254.29 248.95 T
0 F
( is the length of the sequence. The stream will be an) 271.62 248.95 T
(instance of) 81.65 234.95 T
1 F
(<r) 136.97 234.95 T
(ead-str) 148.92 234.95 T
(eam>) 184.69 234.95 T
0 F
(.) 212.86 234.95 T
-0.05 (If) 81.65 208.95 P
3 F
-0.05 (over) 92.58 208.95 P
0 F
-0.05 ( is a subclass of) 113.91 208.95 P
1 F
-0.05 (<pathname>) 191.96 208.95 P
0 F
-0.05 (, the) 256.98 208.95 P
3 F
-0.05 (start) 280.53 208.95 P
0 F
-0.05 (,) 302.54 208.95 P
3 F
-0.05 (end) 308.49 208.95 P
0 F
-0.05 (,) 325.81 208.95 P
3 F
-0.05 (element-type) 331.76 208.95 P
0 F
-0.05 (,) 393.07 208.95 P
3 F
-0.05 (buffer) 399.01 208.95 P
-0.05 (-size) 427.44 208.95 P
0 F
-0.05 (, and) 449.44 208.95 P
3 F
-0.05 ( if-does-not-) 472.71 208.95 P
-0.26 (exist) 81.65 194.95 P
0 F
-0.26 (ar) 106.38 194.95 P
-0.26 (guments may be supplied.) 115.49 194.95 P
3 F
-0.26 (start) 242.77 194.95 P
0 F
-0.26 ( and) 264.78 194.95 P
3 F
-0.26 (end) 287.58 194.95 P
0 F
-0.26 ( are integers that specify what part of the \336le to) 304.91 194.95 P
(create a stream over) 81.65 180.95 T
(. The default for) 177.28 180.95 T
3 F
(start) 258.25 180.95 T
0 F
( is 0; the default for) 280.26 180.95 T
3 F
(end) 377.58 180.95 T
0 F
( is the length of the \336le.) 394.91 180.95 T
3 F
( ele-) 508.57 180.95 T
(ment-type) 81.65 166.95 T
0 F
( is described below; it defaults to) 128.96 166.95 T
1 F
(#"character") 290.62 166.95 T
0 F
(.) 359.24 166.95 T
3 F
(buffer) 365.24 166.95 T
(-size) 393.67 166.95 T
0 F
( is an integer that speci-) 415.67 166.95 T
-0.02 (\336es the size of the buf) 81.65 152.95 P
-0.02 (fer to use for the \336le; it defaults to an implementation-dependent value.) 186.97 152.95 P
3 F
(if-does-not-exist) 81.65 138.95 T
0 F
( is described below; it defaults to) 159.64 138.95 T
1 F
(#"signal") 321.29 138.95 T
0 F
(. The stream will be an instance) 370.62 138.95 T
(of) 81.65 124.95 T
1 F
(<\336le-r) 94.64 124.95 T
(ead-str) 125.93 124.95 T
(eam>) 161.7 124.95 T
0 F
(.) 189.86 124.95 T
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(8) 527.65 67.57 T
0 12 Q
(The present proposal does not support read streams over any other classes of aggregate. It is) 81.65 736.95 T
(intended that streams can be extended to include other such classes.) 81.65 722.95 T
1 F
(make <write-stream>) 63.65 690.95 T
3 F
(over) 177.29 690.95 T
0 F
( #key) 198.61 690.95 T
3 F
( on-end-of-stream start end element-type buffer-size if-exists if-) 224.94 690.95 T
(does-not-exist) 63.65 676.95 T
8 F
(\336) 133.97 676.95 T
3 F
(writable-stream) 148.81 676.95 T
0 F
([Method]) 486.32 676.95 T
(Returns a new instance of a concrete subclass of) 81.65 650.95 T
1 F
(<writable-str) 316.58 650.95 T
(eam>) 383.86 650.95 T
0 F
(.) 412.02 650.95 T
(If) 81.65 624.95 T
3 F
(over) 92.64 624.95 T
0 F
( is a subclass of) 113.96 624.95 T
1 F
(<mutable-sequence>) 192.29 624.95 T
0 F
(, the) 297.96 624.95 T
3 F
(start) 321.62 624.95 T
0 F
( and) 343.63 624.95 T
3 F
(end) 366.96 624.95 T
0 F
( ar) 384.29 624.95 T
(guments may also be sup-) 396.4 624.95 T
-0.12 (plied. These specify what subsequence of the sequence will can be written into by the stream.) 81.65 610.95 P
(The default for) 81.65 596.95 T
3 F
(start) 156.62 596.95 T
0 F
( is 0; the default for) 178.63 596.95 T
3 F
(end) 275.95 596.95 T
0 F
( is the length of the sequence.) 293.28 596.95 T
(If) 81.65 570.95 T
3 F
(over) 92.64 570.95 T
0 F
( is a subclass of) 113.96 570.95 T
1 F
(<pathname>) 192.29 570.95 T
0 F
(, the) 257.3 570.95 T
3 F
(start) 280.97 570.95 T
0 F
(,) 302.98 570.95 T
3 F
(end) 308.98 570.95 T
0 F
(,) 326.3 570.95 T
3 F
(element-type) 332.3 570.95 T
0 F
(,) 393.61 570.95 T
3 F
(buffer) 399.61 570.95 T
(-size) 428.04 570.95 T
0 F
(,) 450.04 570.95 T
3 F
( if-exists) 453.04 570.95 T
0 F
(, and) 493.37 570.95 T
3 F
(if-) 519.7 570.95 T
-0.11 (does-not-exist) 81.65 556.95 P
0 F
-0.11 ( ar) 148.97 556.95 P
-0.11 (guments may be supplied.) 160.96 556.95 P
3 F
-0.11 (start) 288.84 556.95 P
0 F
-0.11 ( and) 310.84 556.95 P
3 F
-0.11 (end) 333.95 556.95 P
0 F
-0.11 ( are integers that specify what part of) 351.27 556.95 P
-0.31 (the \336le to create a stream over) 81.65 542.95 P
-0.31 (. The default for) 223.72 542.95 P
3 F
-0.31 (start) 303.44 542.95 P
0 F
-0.31 ( is 0; the default for) 325.45 542.95 P
3 F
-0.31 (end) 420.88 542.95 P
0 F
-0.31 ( is the length of the) 438.21 542.95 P
(\336le \050if it previously existed\051.) 81.65 528.95 T
3 F
(element-type) 221.64 528.95 T
0 F
( is described below; it defaults to) 282.95 528.95 T
1 F
(#"character") 444.6 528.95 T
0 F
(.) 513.23 528.95 T
3 F
(buffer) 81.65 514.95 T
(-size) 110.08 514.95 T
0 F
( is an integer that speci\336es the size of the buf) 132.07 514.95 T
(fer to use for the \336le; it defaults to an) 347.82 514.95 T
(implementation-dependent value.) 81.65 500.95 T
3 F
(if-exists) 245.29 500.95 T
0 F
( is described below; it defaults to) 282.62 500.95 T
1 F
(#"new-version") 444.28 500.95 T
0 F
(.) 525.59 500.95 T
3 F
(if-does-not-exist) 81.65 486.95 T
0 F
( is described below; it defaults to) 159.64 486.95 T
1 F
(#"cr) 321.29 486.95 T
(eate") 344.39 486.95 T
0 F
(. The stream will be an instance) 371.7 486.95 T
(of) 81.65 472.95 T
1 F
(<\336le-write-str) 94.64 472.95 T
(eam>) 165.24 472.95 T
0 F
(.) 193.4 472.95 T
(The present proposal does not support write streams over any other classes of aggregate. It is) 81.65 446.95 T
(intended that streams can be extended to include other such classes.) 81.65 432.95 T
1 F
(make <read-write-stream>) 63.65 400.95 T
3 F
(over) 204.61 400.95 T
0 F
( #key) 225.94 400.95 T
3 F
( on-end-of-stream start end element-type buffer-size if-) 252.26 400.95 T
(exists if-does-not-exist) 63.65 386.95 T
8 F
(\336) 174.3 386.95 T
3 F
(read-writable-stream) 189.14 386.95 T
0 F
([Method]) 486.32 386.95 T
(Returns a new instance of a concrete subclass of) 81.65 360.95 T
1 F
(<r) 316.58 360.95 T
(ead-writable-str) 328.54 360.95 T
(eam>) 410.96 360.95 T
0 F
(.) 439.13 360.95 T
(If) 81.65 334.95 T
3 F
(over) 92.64 334.95 T
0 F
( is a subclass of) 113.96 334.95 T
1 F
(<mutable-sequence>) 192.29 334.95 T
0 F
(, the) 297.96 334.95 T
3 F
(start) 321.62 334.95 T
0 F
( and) 343.63 334.95 T
3 F
(end) 366.96 334.95 T
0 F
( ar) 384.29 334.95 T
(guments may also be sup-) 396.4 334.95 T
-0.1 (plied. These specify what subsequence of the sequence will can be read from and written into) 81.65 320.95 P
(by the stream. The default for) 81.65 306.95 T
3 F
(start) 227.28 306.95 T
0 F
( is 0; the default for) 249.29 306.95 T
3 F
(end) 346.61 306.95 T
0 F
( is the length of the sequence.) 363.94 306.95 T
(If) 81.65 280.95 T
3 F
(over) 92.64 280.95 T
0 F
( is a subclass of) 113.96 280.95 T
1 F
(<pathname>) 192.29 280.95 T
0 F
(, the) 257.3 280.95 T
3 F
(start) 280.97 280.95 T
0 F
(,) 302.98 280.95 T
3 F
(end) 308.98 280.95 T
0 F
(,) 326.3 280.95 T
3 F
(element-type) 332.3 280.95 T
0 F
(,) 393.61 280.95 T
3 F
(buffer) 399.61 280.95 T
(-size) 428.04 280.95 T
0 F
(,) 450.04 280.95 T
3 F
( if-exists) 453.04 280.95 T
0 F
(, and) 493.37 280.95 T
3 F
(if-) 519.7 280.95 T
-0.11 (does-not-exist) 81.65 266.95 P
0 F
-0.11 ( ar) 148.97 266.95 P
-0.11 (guments may be supplied.) 160.96 266.95 P
3 F
-0.11 (start) 288.84 266.95 P
0 F
-0.11 ( and) 310.84 266.95 P
3 F
-0.11 (end) 333.95 266.95 P
0 F
-0.11 ( are integers that specify what part of) 351.27 266.95 P
-0.31 (the \336le to create a stream over) 81.65 252.95 P
-0.31 (. The default for) 223.72 252.95 P
3 F
-0.31 (start) 303.44 252.95 P
0 F
-0.31 ( is 0; the default for) 325.45 252.95 P
3 F
-0.31 (end) 420.88 252.95 P
0 F
-0.31 ( is the length of the) 438.21 252.95 P
(\336le \050if it previously existed\051.) 81.65 238.95 T
3 F
(element-type) 221.64 238.95 T
0 F
( is described below; it defaults to) 282.95 238.95 T
1 F
(#"character") 444.6 238.95 T
0 F
(.) 513.23 238.95 T
3 F
(buffer) 81.65 224.95 T
(-size) 110.08 224.95 T
0 F
( is an integer that speci\336es the size of the buf) 132.07 224.95 T
(fer to use for the \336le; it defaults to an) 347.82 224.95 T
(implementation-dependent value.) 81.65 210.95 T
3 F
(if-exists) 245.29 210.95 T
0 F
( is described below; it defaults to) 282.62 210.95 T
1 F
(#"new-version") 444.28 210.95 T
0 F
(.) 525.59 210.95 T
3 F
-0 (if-does-not-exist) 81.65 196.95 P
0 F
-0 ( is described below; its defaults to) 159.64 196.95 P
1 F
-0 (#"cr) 325.94 196.95 P
-0 (eate") 349.04 196.95 P
0 F
-0 (. The stream will be an instance) 376.36 196.95 P
(of) 81.65 182.95 T
1 F
(<\336le-r) 94.64 182.95 T
(ead-write-str) 125.93 182.95 T
(eam>) 192.35 182.95 T
0 F
(.) 220.51 182.95 T
-0.16 (The present proposal does not support read-write streams over any other classes of aggregate.) 81.65 156.95 P
(It is intended that streams can be extended to include other such classes.) 81.65 142.95 T
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(9) 527.65 67.57 T
1 12 Q
(3.1.1  Convenience Functions for Cr) 63.65 736.95 T
(eating Str) 247.75 736.95 T
(eams) 297.86 736.95 T
0 F
(The following functions are provided as a convenient shorthand way of creating streams.) 63.65 708.37 T
1 F
(read-stream-over) 63.65 673.79 T
3 F
(over) 155.94 673.79 T
0 F
(#rest) 180.26 673.79 T
3 F
(keys) 206.59 673.79 T
8 F
(\336) 230.24 673.79 T
3 F
(readable-stream) 245.09 673.79 T
0 F
([Function]) 480.98 673.79 T
-0.04 (This is equivalent to calling) 81.65 645.22 P
1 F
-0.04 (make) 217.79 645.22 P
0 F
-0.04 ( with a \336rst ar) 245.79 645.22 P
-0.04 (gument of) 312.08 645.22 P
1 F
-0.04 (<r) 363.99 645.22 P
-0.04 (ead-str) 375.95 645.22 P
-0.04 (eam>) 411.72 645.22 P
0 F
-0.04 (.) 439.88 645.22 P
3 F
-0.04 (over) 445.84 645.22 P
0 F
-0.04 ( and) 467.17 645.22 P
3 F
-0.04 (keys) 490.42 645.22 P
0 F
-0.04 ( are) 511.07 645.22 P
(passed to the call to) 81.65 631.22 T
1 F
(make) 179.3 631.22 T
0 F
(.) 207.3 631.22 T
1 F
(write-stream-over) 63.65 596.64 T
3 F
(over) 159.26 596.64 T
0 F
(#rest) 183.59 596.64 T
3 F
(keys) 209.92 596.64 T
8 F
(\336) 233.57 596.64 T
3 F
(writable-stream) 248.41 596.64 T
0 F
([Function]) 480.98 596.64 T
-0.26 (This is equivalent to calling) 81.65 568.06 P
1 F
-0.26 (make) 216.68 568.06 P
0 F
-0.26 ( with a \336rst ar) 244.68 568.06 P
-0.26 (gument of) 310.08 568.06 P
1 F
-0.26 (<write-str) 361.56 568.06 P
-0.26 (eam>) 412.83 568.06 P
0 F
-0.26 (.) 440.99 568.06 P
3 F
-0.26 (over) 446.73 568.06 P
0 F
-0.26 ( and) 468.05 568.06 P
3 F
-0.26 (keys) 490.86 568.06 P
0 F
-0.26 ( are) 511.52 568.06 P
(passed to the call to) 81.65 554.06 T
1 F
(make) 179.3 554.06 T
0 F
(.) 207.3 554.06 T
1 F
(read-write-stream-over) 63.65 519.48 T
3 F
(over) 186.59 519.48 T
0 F
(#rest) 210.91 519.48 T
3 F
(keys) 237.24 519.48 T
8 F
(\336) 260.89 519.48 T
3 F
(read-writable-stream) 275.74 519.48 T
0 F
([Function]) 480.98 519.48 T
(This is equivalent to calling) 81.65 490.9 T
1 F
(make) 217.98 490.9 T
0 F
( with a \336rst ar) 245.98 490.9 T
(gument of) 312.42 490.9 T
1 F
(<r) 364.42 490.9 T
(ead-write-str) 376.37 490.9 T
(eam>) 442.79 490.9 T
0 F
(.) 470.95 490.9 T
3 F
(over) 476.95 490.9 T
0 F
( and) 498.28 490.9 T
3 F
(keys) 81.65 476.9 T
0 F
( are passed to the call to) 102.3 476.9 T
1 F
(make) 220.61 476.9 T
0 F
(.) 248.6 476.9 T
1 F
(3.1.2  Options when Cr) 63.65 442.32 T
(eating File Str) 181.44 442.32 T
(eams) 253.88 442.32 T
0 F
-0.46 (The) 63.65 413.74 P
3 F
-0.46 (element-type) 84.85 413.74 P
0 F
-0.46 (ar) 148.7 413.74 P
-0.46 (gument controls how the underlying \336le is accessed. Ideally its value is a valid) 157.8 413.74 P
(Dylan type such as) 63.65 399.74 T
1 F
( \050limited <integer> min: 0 max: 255\051) 154.63 399.74 T
0 F
( or) 340.28 399.74 T
1 F
(<unicode-character>) 356.28 399.74 T
0 F
(. This) 463.27 399.74 T
(approach may make it possible to implement a potentially inef) 63.65 385.74 T
(\336cient but general set of \336le) 363.07 385.74 T
(streams. However) 63.65 371.74 T
(, the current language de\336nition does not include adequate support for this) 149.81 371.74 T
-0.14 (approach. Consequently we specify an interim mechanism using symbols. The set of valid values) 63.65 357.74 P
(for element-type must include at least) 63.65 343.74 T
1 F
(#"character") 247.62 343.74 T
0 F
(,) 316.25 343.74 T
1 F
(#"unicode-character") 322.25 343.74 T
0 F
(, and) 434.88 343.74 T
1 F
(#"byte") 461.21 343.74 T
0 F
(. It) 502.52 343.74 T
(defaults to) 63.65 329.74 T
1 F
(#"character") 116.98 329.74 T
0 F
(. The speci\336ed interpretations of the symbols are as follows:) 185.6 329.74 T
1 F
(\245) 77.15 307.16 T
(#"character") 90.65 307.16 T
0 F
( \321 file is accessed as 8-bit ASCII characters) 159.28 307.16 T
1 F
(\245) 77.15 284.58 T
(#"unicode-character") 90.65 284.58 T
0 F
( \321 file is accessed as 16-bit Unicode characters) 203.28 284.58 T
1 F
(\245) 77.15 262.01 T
(#"byte") 90.65 262.01 T
0 F
( \321 file is accessed as unsigned 8-bit integers) 131.96 262.01 T
1 F
(\245) 77.15 239.43 T
(#"signed-byte") 90.65 239.43 T
0 F
( \321 file is accessed as signed 2\325s complement 8-bit integers) 168.64 239.43 T
1 F
(\245) 77.15 216.85 T
(#"two-byte") 90.65 216.85 T
0 F
( \321 file is accessed as unsigned 16-bit integers) 154.62 216.85 T
1 F
(\245) 77.15 194.27 T
(#"signed-two-byte") 90.65 194.27 T
0 F
( \321 file is accessed as signed 2\325s complement 8-bit integers) 191.29 194.27 T
1 F
(\245) 77.15 171.69 T
(#"four-byte") 90.65 171.69 T
0 F
( \321 file is accessed as unsigned 32-bit integers) 157.96 171.69 T
1 F
(\245) 77.15 149.11 T
(#"signed-four-byte") 90.65 149.11 T
0 F
( \321 file is accessed as signed 2\325s complement 8-bit integers) 194.63 149.11 T
(The implementation may provide many more than these types.) 63.65 120.53 T
(The behavior controlled by the) 63.65 91.95 T
3 F
(if-exists) 214.62 91.95 T
0 F
( ar) 251.95 91.95 T
(gument is as follows:) 264.06 91.95 T
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(10) 523.65 67.57 T
1 12 Q
(\245) 77.15 736.95 T
(#"new-version") 90.65 736.95 T
0 F
( \321 if the underlying file system supports versions, then a new version of) 171.96 736.95 T
(the file will be created. This is the default. If the underlying file system does) 90.65 722.95 T
3 F
(not) 460.26 722.95 T
0 F
( support) 475.6 722.95 T
(versions, then it is up to the implementation to make the appropriate) 90.65 708.95 T
(policy decision, and) 420.96 708.95 T
(substitute one of the behaviors below;) 90.65 694.95 T
1 F
(#"replace") 275.96 694.95 T
0 F
( is a good choice for this.) 332.6 694.95 T
1 F
(\245) 77.15 674.95 T
(#"overwrite") 90.65 674.95 T
0 F
( \321 set the stream\325s position to 0 but preserve the current contents) 159.28 674.95 T
(of the file.) 477.56 674.95 T
1 F
(\245) 77.15 654.95 T
(#"replace") 90.65 654.95 T
0 F
(\321 delete or rename any existing file and create a new file.) 150.29 654.95 T
1 F
(\245) 77.15 634.95 T
(#"append") 90.65 634.95 T
0 F
( \321 if the file exists, set the stream\325s initial position to the end of the file so that) 147.98 634.95 T
(all new output occurs at the end of the file.) 90.65 620.95 T
1 F
(\245) 77.15 600.95 T
(#"truncate") 90.65 600.95 T
0 F
( \321 if the file exists, then truncate its size to 0, otherwise create) 153.29 600.95 T
(a new file.) 458.57 600.95 T
1 F
(\245) 77.15 580.95 T
(#"signal") 90.65 580.95 T
0 F
( \321 signal a) 139.98 580.95 T
1 F
(<file-exists-error>) 197.98 580.95 T
0 F
( condition if the file exists.) 290.95 580.95 T
(The behavior controlled by the) 63.65 554.95 T
3 F
(if-does-not-exist) 214.62 554.95 T
0 F
( ar) 292.61 554.95 T
(gument is as follows:) 304.72 554.95 T
1 F
(\245) 77.15 534.95 T
(#"signal") 90.65 534.95 T
7 10 Q
( \321) 139.98 534.95 T
0 12 Q
(if the file does not exist, signal a) 155.54 534.95 T
1 F
(<file-does-not-exist-error>) 314.53 534.95 T
0 F
( condition. This) 450.16 534.95 T
(is the default when creating a read-only stream.) 90.65 520.95 T
1 F
(\245) 77.15 500.95 T
-0.42 (#"create") 90.65 500.95 P
0 F
-0.42 ( \321 if the file does not exist, create a new zero-length file. This is the default when) 141.28 500.95 P
(create creating a writable stream.) 90.65 486.95 T
(Creating a \336le stream) 63.65 460.95 T
3 F
(always) 169.63 460.95 T
0 F
( involves an attempt to open the underlying \336le, so the aforemen-) 202.97 460.95 T
(tioned errors will occur during \336le stream instance initialization.) 63.65 446.95 T
-0.23 (If, while opening a \336le stream, an attempt is made to read a \336le for which the user has no read per-) 63.65 420.95 P
(mission, or to write a \336le for which the user has no write permission, then an) 63.65 406.95 T
1 F
(<invalid-\336le-per-) 434.94 406.95 T
(mission-err) 63.65 392.95 T
(or>) 122.09 392.95 T
0 F
( condition will be signalled.) 140.26 392.95 T
(File streams are intended only for accessing the contents of \336les, and are) 63.65 366.95 T
3 F
(not) 414.91 366.95 T
0 F
( intended to provide) 430.25 366.95 T
-0.41 (facilities for renaming, deleting, and moving \336les, parsing directory names, etc. This functionality) 63.65 352.95 P
(is handled by an appropriate Dylan Pathnames Library) 63.65 338.95 T
(.) 325.15 338.95 T
1 14 Q
(3.2  Extending the Instantiation Pr) 63.65 305.62 T
(otocol) 270.3 305.62 T
0 12 Q
(There is a distinction to be made between calling) 63.65 278.95 T
1 F
(make) 301.94 278.95 T
0 F
( on concrete internal stream classes and) 329.94 278.95 T
(make on abstract stream classes. Concrete internal stream classes use the default) 63.65 264.95 T
1 F
(make) 452.56 264.95 T
0 F
(. On the) 480.55 264.95 T
-0.52 (abstract classes) 63.65 250.95 P
1 F
-0.52 (<r) 139.25 250.95 P
-0.52 (eadable-str) 151.2 250.95 P
-0.52 (eam>,) 208.31 250.95 P
-0.52 (<writable-str) 241.95 250.95 P
-0.52 (eam>) 309.22 250.95 P
0 F
-0.52 (, and) 337.39 250.95 P
1 F
-0.52 (<r) 362.67 250.95 P
-0.52 (ead-writable-str) 374.62 250.95 P
-0.52 (eam>) 457.05 250.95 P
0 F
-0.52 (,) 485.21 250.95 P
1 F
-0.52 (make) 490.69 250.95 P
0 F
-0.52 ( is) 518.69 250.95 P
(de\336ned to examine the \050class of the\051 aggregate being streamed over and the other keyword ar) 63.65 236.95 T
(gu-) 510.31 236.95 T
(ments, and make an instance of one of the concrete stream subclasses.) 63.65 222.95 T
-0.36 (This could be implemented by a set of functions \050) 63.65 196.95 P
1 F
-0.36 (class-for) 298.68 196.95 P
-0.36 (-r) 341.55 196.95 P
-0.36 (ead-str) 350.66 196.95 P
-0.36 (eam) 386.43 196.95 P
0 F
-0.36 (,) 407.76 196.95 P
1 F
-0.36 (class-for) 413.39 196.95 P
-0.36 (-write-str) 456.27 196.95 P
-0.36 (eam) 504.69 196.95 P
0 F
-0.36 (,) 526.01 196.95 P
1 F
(class-for) 63.65 182.95 T
(-r) 106.52 182.95 T
(ead-write-str) 115.63 182.95 T
(eam) 182.05 182.95 T
0 F
(\051 that specialize on the class of the aggregate \050) 203.38 182.95 T
1 F
(<collection>) 424.98 182.95 T
0 F
(,) 487.32 182.95 T
1 F
-0.06 (<sequence>) 63.65 168.95 P
0 F
-0.06 (,) 123.32 168.95 P
1 F
-0.06 (<pathname>) 129.26 168.95 P
0 F
-0.06 (, etc.\051, and return the appropriate concrete stream class. However) 194.27 168.95 P
-0.06 (, this) 505.44 168.95 P
(level of detail is not currently part of this speci\336cation.) 63.65 154.95 T
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(1) 523.94 67.57 T
(1) 527.65 67.57 T
1 16 Q
(4.  The Str) 63.65 734.29 T
(eam Pr) 135.36 734.29 T
(otocols) 184.38 734.29 T
1 14 Q
(4.1  Readable Str) 63.65 699.02 T
(eam Pr) 166.06 699.02 T
(otocol) 208.95 699.02 T
0 12 Q
(The following are the basic functions for reading from streams. It is an error to call any of these) 63.65 671.75 T
(functions on a buf) 63.65 657.75 T
(fered stream while its input buf) 150.42 657.75 T
(fer is held.) 300.52 657.75 T
1 F
(read) 63.65 625.15 T
3 F
(stream::<readable-stream>) 89.98 625.15 T
0 F
(#key) 229.15 625.15 T
3 F
( on-end-of-stream) 252.48 625.15 T
8 F
( \336) 338.8 625.15 T
3 F
(element) 356.64 625.15 T
0 F
([Generic function]) 442.68 625.15 T
-0.43 (Returns the next element in the stream. If the stream is not at its end, the stream is advanced so) 81.65 598.55 P
(that a subsequent call to) 81.65 584.55 T
1 F
(r) 199.97 584.55 T
(ead) 205.08 584.55 T
0 F
( returns the next element.) 223.08 584.55 T
-0.31 (If the stream is already at its end when) 81.65 557.95 P
1 F
-0.31 (r) 267.16 557.95 P
-0.31 (ead) 272.27 557.95 P
0 F
-0.31 ( is called, the behavior of) 290.27 557.95 P
1 F
-0.31 (r) 412.73 557.95 P
-0.31 (ead) 417.84 557.95 P
0 F
-0.31 ( is as follows. If the) 435.84 557.95 P
3 F
(on-end-of-str) 81.65 543.95 T
(eam) 144.53 543.95 T
0 F
( ar) 164.52 543.95 T
(gument is supplied, then its value is returned. If there is no) 176.63 543.95 T
3 F
(on-end-of-) 461.27 543.95 T
-0.51 (str) 81.65 529.95 P
-0.51 (eam) 93.88 529.95 P
0 F
-0.51 ( ar) 113.87 529.95 P
-0.51 (gument but the stream has an) 125.47 529.95 P
-0.51 ( end-of-stream element, then the stream\325) 263.26 529.95 P
-0.51 (s end-of-stream) 454.68 529.95 P
(element is returned. Otherwise, an) 81.65 515.95 T
1 F
(<end-of-str) 249.28 515.95 T
(eam>) 306.55 515.95 T
0 F
( condition is signalled.) 334.72 515.95 T
(If the stream is not at its end,) 81.65 489.35 T
1 F
(r) 223.97 489.35 T
(ead) 229.08 489.35 T
0 F
( will block until input becomes available.) 247.08 489.35 T
1 F
(peek) 63.65 456.75 T
3 F
(stream::<readable-stream>) 90.65 456.75 T
0 F
(#key) 229.82 456.75 T
3 F
( on-end-of-stream) 253.15 456.75 T
8 F
( \336) 339.47 456.75 T
3 F
(element) 357.31 456.75 T
0 F
([Generic function]) 442.68 456.75 T
1 F
(peek) 81.65 430.15 T
0 F
( is identical to) 105.65 430.15 T
1 F
(r) 176.32 430.15 T
(ead) 181.43 430.15 T
0 F
(, except that the stream is not advanced.) 199.43 430.15 T
1 F
(read-n) 63.65 397.55 T
3 F
(stream::<readable-stream> n::<integer>) 100.64 397.55 T
0 F
(#key) 307.01 397.55 T
3 F
( on-end-of-stream) 330.34 397.55 T
8 F
( \336) 416.65 397.55 T
3 F
(sequence) 434.5 397.55 T
0 F
-3 ([Generic) 489.67 397.55 P
(function]) 63.65 383.55 T
1 F
(r) 81.65 356.95 T
(ead-n) 86.76 356.95 T
0 F
( returns a sequence of the next) 115.43 356.95 T
3 F
(n) 264.38 356.95 T
0 F
( elements from the stream. The type of resulting) 270.38 356.95 T
(sequence depends on the type of the stream\325) 81.65 342.95 T
(s underlying aggregate. If the underlying aggre-) 293.27 342.95 T
(gate is a mutable sequence, then the collection returned will be of the same type as the under-) 81.65 328.95 T
(lying aggregate. If not, a vector will be returned. The stream is advanced so that subsequent) 81.65 314.95 T
(reads start after the) 81.65 300.95 T
3 F
(n) 176.28 300.95 T
0 F
( elements.) 182.28 300.95 T
-0.38 (If the end of the stream is reached before all) 81.65 274.35 P
3 F
-0.38 (n) 292.48 274.35 P
0 F
-0.38 ( elements have been read, then the behavior is as) 298.48 274.35 P
(follows. If the) 81.65 260.35 T
3 F
(on-end-of-str) 152.3 260.35 T
(eam) 215.18 260.35 T
0 F
( ar) 235.18 260.35 T
(gument is supplied or the stream has an) 247.28 260.35 T
( end-of-stream ele-) 436.93 260.35 T
-0.28 (ment, then the longest possible shorter sequence will be returned. If no end-of-stream element) 81.65 246.35 P
-0.1 (is available, then an) 81.65 232.35 P
1 F
-0.1 (<incomplete-r) 179.57 232.35 P
-0.1 (ead-err) 251.51 232.35 P
-0.1 (or>) 289.27 232.35 P
0 F
-0.1 ( condition will be signalled, and supplied with) 307.44 232.35 P
(the incomplete collection and the number of elements read.) 81.65 218.35 T
(If the stream is not at its end,) 81.65 191.75 T
1 F
(r) 223.97 191.75 T
(ead-n) 229.08 191.75 T
0 F
( will block until input becomes available.) 257.75 191.75 T
(It is intended that buf) 81.65 165.15 T
(fered streams will provide a very ef) 184.09 165.15 T
(\336cient implementation of) 354.49 165.15 T
1 F
(r) 478.82 165.15 T
(ead-n) 483.94 165.15 T
0 F
(.) 512.6 165.15 T
1 F
(read-n-as) 63.65 132.55 T
3 F
(stream::<readable-stream> n::<integer> c::<class>) 115.31 132.55 T
0 F
(#key) 378.19 132.55 T
3 F
( on-end-of-stream) 401.52 132.55 T
8 F
( \336) 487.84 132.55 T
3 F
(sequence) 63.65 118.55 T
0 F
([Generic function]) 442.68 118.55 T
1 F
(r) 81.65 91.95 T
(ead-n-as) 86.76 91.95 T
0 F
( returns a sequence of the next) 130.09 91.95 T
3 F
(n) 279.05 91.95 T
0 F
( elements from the stream.) 285.05 91.95 T
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(12) 523.65 67.57 T
3 12 Q
(c) 81.65 736.95 T
0 F
( must be a collection class. If) 86.98 736.95 T
3 F
(c) 229.62 736.95 T
0 F
( is a subclass of) 234.95 736.95 T
1 F
(<sequence>,) 313.27 736.95 T
0 F
( then the elements of the collec-) 375.95 736.95 T
(tion returned will be ordered as for) 81.65 722.95 T
1 F
(r) 251.94 722.95 T
(ead-n) 257.05 722.95 T
0 F
(.) 285.72 722.95 T
(The end of stream behavior is as for) 81.65 694.64 T
1 F
(r) 257.6 694.64 T
(ead-n) 262.72 694.64 T
0 F
(.) 291.38 694.64 T
(If the stream is not at its end,) 81.65 666.33 T
1 F
(r) 223.97 666.33 T
(ead-n-as) 229.08 666.33 T
0 F
( will block until input becomes available.) 272.41 666.33 T
-0.12 (It is intended that buf) 81.65 638.02 P
-0.12 (fered streams will provide a very ef) 183.63 638.02 P
-0.12 (\336cient implementation of) 353.33 638.02 P
1 F
-0.12 (r) 477.32 638.02 P
-0.12 (ead-n-as) 482.43 638.02 P
0 F
-0.12 (,) 525.76 638.02 P
(particularly in the cases when c is a) 81.65 624.02 T
1 F
(<byte-string>) 254.94 624.02 T
0 F
( or) 324.61 624.02 T
1 F
(<byte-vector>) 340.61 624.02 T
0 F
(.) 412.26 624.02 T
1 F
-0.09 (read-n-into!) 63.65 589.7 P
3 F
-0.09 (stream::<readable-stream> n::<integer> seq::<mutable-sequence>) 128.55 589.7 P
0 F
-0.09 (#key) 464.49 589.7 P
3 F
-0.09 (start) 490.73 589.7 P
-0.09 (on-) 515.65 589.7 P
(end-of-stream) 63.65 575.7 T
8 F
(\336) 133.97 575.7 T
3 F
(n-read::<integer>) 148.81 575.7 T
0 F
([Generic function]) 442.68 575.7 T
1 F
(r) 81.65 547.39 T
(ead-n-into!) 86.76 547.39 T
0 F
( reads the next) 143.42 547.39 T
3 F
(n) 216.07 547.39 T
0 F
( elements from the stream and inserts them into the mutable) 222.07 547.39 T
(sequence) 81.65 533.39 T
3 F
(seq) 128.63 533.39 T
0 F
( starting at) 144.62 533.39 T
3 F
(start) 198.29 533.39 T
0 F
(. Returns the number of elements actually assigned to) 220.3 533.39 T
3 F
(seq) 480.26 533.39 T
0 F
(.) 496.26 533.39 T
(The end of stream behavior is as for) 81.65 505.08 T
1 F
(r) 257.6 505.08 T
(ead-n) 262.72 505.08 T
0 F
(.) 291.38 505.08 T
(If the stream is not at its end,) 81.65 476.77 T
1 F
(r) 223.97 476.77 T
(ead-n-into!) 229.08 476.77 T
0 F
( will block until input becomes available.) 285.74 476.77 T
(It is intended that buf) 81.65 448.45 T
(fered streams will provide a very ef) 184.09 448.45 T
(\336cient implementation of) 354.49 448.45 T
1 F
(r) 478.82 448.45 T
(ead-n-) 483.94 448.45 T
(into!) 81.65 434.45 T
0 F
(, particularly in the cases when the class of) 105.65 434.45 T
3 F
(seq) 314.27 434.45 T
0 F
( is) 330.26 434.45 T
1 F
(<byte-string>) 344.27 434.45 T
0 F
( or) 413.94 434.45 T
1 F
(<byte-vector>) 429.94 434.45 T
0 F
(.) 501.59 434.45 T
1 F
(discard-input) 63.65 400.14 T
3 F
(stream::<readable-stream>) 136 400.14 T
0 F
([Generic function]) 442.68 400.14 T
(Discards any input that might be pending in the stream.) 81.65 371.83 T
(This operation has an ef) 81.65 343.52 T
(fect only on buf) 196.74 343.52 T
(fered streams, but there is a default method on) 272.84 343.52 T
1 F
(<str) 81.65 329.52 T
(eam>) 102.26 329.52 T
0 F
( so that user programs can call this on any sort of stream. The default method does) 130.43 329.52 T
(nothing.) 81.65 315.52 T
1 F
(4.1.1  Convenience Functions for Reading fr) 63.65 281.2 T
(om Str) 288.76 281.2 T
(eams) 323.53 281.2 T
0 F
-0.12 (The following is a small set of convenient reading functions that search for particular elements in) 63.65 252.89 P
(a stream. These functions are implemented in terms of the more primitive functions described in) 63.65 238.89 T
(the previous section.) 63.65 224.89 T
1 F
(read-to) 63.65 190.58 T
3 F
(stream::<readable-stream> element) 103.97 190.58 T
0 F
(#key) 283.46 190.58 T
3 F
( on-end-of-stream test) 306.79 190.58 T
8 F
(\336) 415.78 190.58 T
3 F
(sequence) 430.62 190.58 T
0 F
([Function]) 480.98 190.58 T
(Returns a sequence of all the elements of the stream up to, but not including, the \336rst occur-) 81.65 162.27 T
(rence of) 81.65 148.27 T
3 F
(element) 123.62 148.27 T
0 F
(, starting from the stream\325) 160.94 148.27 T
(s current position. The occurrence test defaults to) 285.26 148.27 T
1 F
(\134=) 81.65 134.27 T
0 F
(. The \322boundary\323 element is consumed, that is, the stream is left positioned after) 91.82 134.27 T
3 F
(element) 480.77 134.27 T
0 F
(.) 518.09 134.27 T
(The type of the returned collection is as described for) 81.65 105.95 T
1 F
(r) 340.92 105.95 T
(ead-n) 346.03 105.95 T
0 F
(. The end-of-stream behavior is) 374.7 105.95 T
(as speci\336ed for) 81.65 91.95 T
1 F
(r) 157.3 91.95 T
(ead-n) 162.41 91.95 T
0 F
(.) 191.08 91.95 T
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(13) 523.65 67.57 T
1 12 Q
(read-through) 63.65 736.95 T
3 F
(stream::<readable-stream> element) 135.31 736.95 T
0 F
( #key) 311.81 736.95 T
3 F
( on-end-of-stream test) 338.14 736.95 T
8 F
(\336) 447.12 736.95 T
3 F
(sequence) 461.96 736.95 T
0 F
([Function]) 63.65 722.95 T
(Identical to) 81.65 696.89 T
1 F
(r) 138.97 696.89 T
(ead-to) 144.08 696.89 T
0 F
(, except that the \322boundary\323 element is included in the resulting collec-) 176.08 696.89 T
(tion. The stream is left positioned after) 81.65 682.89 T
3 F
(element) 270.96 682.89 T
0 F
(.) 308.28 682.89 T
1 F
(read-to-all) 63.65 650.82 T
3 F
(stream::<readable-stream> seq::<sequence>) 120.64 650.82 T
0 F
(#key) 346.98 650.82 T
3 F
( on-end-of-stream test) 370.31 650.82 T
8 F
(\336) 479.29 650.82 T
3 F
(sequence) 63.65 636.82 T
0 F
([Function]) 480.98 636.82 T
(Returns a sequence of all the elements up to, but not including, the \336rst occurrence of the) 81.65 610.75 T
(sequence of elements in) 81.65 596.75 T
3 F
(seq) 199.62 596.75 T
0 F
(, starting from the stream\325) 215.62 596.75 T
(s current position. The occurrence test) 339.94 596.75 T
(defaults to) 81.65 582.75 T
1 F
(\134=) 134.98 582.75 T
0 F
(. The stream is left positioned after the boundary sequence) 145.15 582.75 T
3 F
(seq) 428.76 582.75 T
0 F
(.) 444.76 582.75 T
(The type of the returned collection is as described for) 81.65 556.69 T
1 F
(r) 340.92 556.69 T
(ead-n) 346.03 556.69 T
0 F
(. The end-of-stream behavior is) 374.7 556.69 T
(as speci\336ed for) 81.65 542.69 T
1 F
(r) 157.3 542.69 T
(ead-n) 162.41 542.69 T
0 F
(.) 191.08 542.69 T
1 F
(read-through-all) 63.65 510.62 T
3 F
(stream::<readable-stream> seq::<sequence>) 151.98 510.62 T
0 F
(#key) 378.32 510.62 T
3 F
( on-end-of-stream test) 401.65 510.62 T
8 F
(\336) 510.64 510.62 T
3 F
(sequence) 63.65 496.62 T
0 F
([Function]) 480.98 496.62 T
(Identical to) 81.65 470.55 T
1 F
(r) 138.97 470.55 T
(ead-to-all) 144.08 470.55 T
0 F
(, except that the boundary sequence is included in the resulting collec-) 192.74 470.55 T
(tion, and the stream is left positioned after that sequence.) 81.65 456.55 T
1 F
(read-to-end) 63.65 424.49 T
3 F
(stream::<readable-stream>) 126.64 424.49 T
8 F
(\336) 265.81 424.49 T
3 F
(sequence) 280.66 424.49 T
0 F
([Function]) 480.98 424.49 T
(Returns a sequence of all the elements up to, and including, the last element of the stream,) 81.65 398.42 T
(starting from its current position.) 81.65 384.42 T
(The type of the result sequence is as described for) 81.65 358.35 T
1 F
(r) 324.25 358.35 T
(ead-n) 329.36 358.35 T
0 F
(. There is no special end-of-stream) 358.03 358.35 T
(behavior; if the stream is already at the end, an empty collection will be returned.) 81.65 344.35 T
1 F
(skip-to) 63.65 312.29 T
3 F
(stream::<readable-stream> element) 101.99 312.29 T
0 F
(#key) 281.48 312.29 T
3 F
( test) 304.81 312.29 T
8 F
(\336) 327.48 312.29 T
3 F
(found::<boolean>) 342.32 312.29 T
0 F
([Function]) 480.98 312.29 T
-0.02 (Positions the stream at the \336rst occurrence of element,) 81.65 286.22 P
-0.02 (starting from the stream\325) 344.77 286.22 P
-0.02 (s current posi-) 463.03 286.22 P
-0.34 (tion. The occurrence test defaults to) 81.65 272.22 P
-0.34 (\134=. The boundary element is consumed, that is, the stream) 254.6 272.22 P
(is left positioned after) 81.65 258.22 T
3 F
(element) 189.64 258.22 T
0 F
(.) 226.96 258.22 T
(Returns) 81.65 232.15 T
1 F
(#t) 121.98 232.15 T
0 F
( if the element was found, or) 131.98 232.15 T
1 F
(#f) 272.62 232.15 T
0 F
( if the end of the stream was encountered.) 282.61 232.15 T
(Note that there is no) 81.65 206.09 T
1 F
(skip-thr) 181.97 206.09 T
(ough) 223.09 206.09 T
0 F
( function since it would be identical to) 248.44 206.09 T
1 F
(skip-to) 435.76 206.09 T
0 F
( \050both con-) 471.1 206.09 T
(sume the element searched for\051.) 81.65 192.09 T
1 F
(skip-to-all) 63.65 160.02 T
3 F
(stream::<readable-stream> seq::<sequence>) 118.66 160.02 T
0 F
(#key) 345 160.02 T
3 F
( test) 368.33 160.02 T
8 F
(\336) 391 160.02 T
3 F
(found::<boolean>) 405.84 160.02 T
0 F
([Function]) 63.65 146.02 T
-0.08 (Positions the stream at the \336rst occurrence of the sequence) 81.65 119.95 P
3 F
-0.08 (seq) 364.76 119.95 P
0 F
-0.08 (,) 380.76 119.95 P
-0.08 (starting from the stream\325) 386.67 119.95 P
-0.08 (s cur-) 504.74 119.95 P
(rent position. The occurrence test defaults to) 81.65 105.95 T
(\134=. The stream is left positioned after the bound-) 298.27 105.95 T
(ary sequence) 81.65 91.95 T
3 F
(seq) 146.95 91.95 T
0 F
(.) 162.95 91.95 T
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(14) 523.65 67.57 T
0 12 Q
(Returns) 81.65 736.95 T
1 F
(#t) 121.98 736.95 T
0 F
( if the element was found, or) 131.98 736.95 T
1 F
(#f) 272.62 736.95 T
0 F
( if the end of the stream was encountered.) 282.61 736.95 T
-0.27 (Note that there is no) 81.65 710.27 P
1 F
-0.27 (skip-thr) 180.6 710.27 P
-0.27 (ough-all) 221.72 710.27 P
0 F
-0.27 ( function since it would be identical to) 263.73 710.27 P
1 F
-0.27 (skip-to-all) 448.86 710.27 P
0 F
-0.27 ( \050both) 500.86 710.27 P
(consume the sequence searched for\051.) 81.65 696.27 T
1 14 Q
(4.2  W) 63.65 662.24 T
(ritable Str) 101.9 662.24 T
(eam Pr) 163.47 662.24 T
(otocol) 206.36 662.24 T
0 12 Q
-0.24 (The following are the basic functions for writing to streams. It is an error to call any of these func-) 63.65 634.89 P
(tions on a buf) 63.65 620.89 T
(fered stream while its output buf) 129.1 620.89 T
(fer is held.) 285.19 620.89 T
1 F
(write) 63.65 588.2 T
3 F
(element stream::<writable-stream>) 93.3 588.2 T
8 F
( \336) 267.14 588.2 T
3 F
(object) 284.99 588.2 T
0 F
([Generic function]) 442.68 588.2 T
(Appends) 81.65 561.52 T
3 F
(element) 127.31 561.52 T
0 F
( to the end of the stream. If the stream is at its write limit, an) 164.63 561.52 T
1 F
(<end-of-) 457.93 561.52 T
(str) 81.65 547.52 T
(eam>) 95.42 547.52 T
0 F
( condition is signalled. A type error may also occur if) 123.59 547.52 T
3 F
(element) 382.88 547.52 T
0 F
( does not have an) 420.2 547.52 T
-0.22 (appropriate type for the elements of the stream's underlying aggregate. The return value is) 81.65 533.52 P
3 F
-0.22 (ele-) 513.66 533.52 P
(ment) 81.65 519.52 T
0 F
(.) 104.98 519.52 T
(If the stream is a positionable stream and the stream is not positioned at its end,) 81.65 492.83 T
1 F
(write) 465.95 492.83 T
0 F
( will) 492.6 492.83 T
(overwrite the element at the current position and then advance the stream position.) 81.65 478.83 T
1 F
(write-n) 63.65 446.14 T
3 F
(stream::<writable-stream> collection::<collection>) 103.97 446.14 T
8 F
(\336) 362.34 446.14 T
3 F
(collection) 377.18 446.14 T
0 F
([Generic function]) 442.68 446.14 T
(Appends each of the elements in collection to the stream in the order de\336ned by the forward) 81.65 419.45 T
(iteration protocol on collection. This is equivalent to the following:) 81.65 405.45 T
2 10 Q
(do\050method \050element\051 write\050stream, element\051 end, collection\051;) 99.65 386.1 T
(collection;) 99.65 374.1 T
0 12 Q
(except that if the stream reaches its write limit an) 81.65 348.08 T
1 F
(<incomplete-write-err) 320.94 348.08 T
(or>) 434.18 348.08 T
0 F
( condition will) 452.35 348.08 T
(be signalled, and supplied with the number of elements actually written. The return value is) 81.65 334.08 T
3 F
(collection) 81.65 320.08 T
0 F
(.) 128.98 320.08 T
(It is intended that buf) 81.65 293.39 T
(fered streams will provide a very ef) 184.09 293.39 T
(\336cient implementation of) 354.49 293.39 T
1 F
(write-n) 478.82 293.39 T
0 F
(,) 516.14 293.39 T
(particularly in the cases when the class of) 81.65 279.39 T
3 F
(collection) 284.27 279.39 T
0 F
( is) 331.6 279.39 T
1 F
(<byte-string>) 345.6 279.39 T
0 F
( or) 415.27 279.39 T
1 F
(<byte-vector>) 431.27 279.39 T
0 F
(.) 502.92 279.39 T
1 F
(force-output) 63.65 246.7 T
3 F
(stream::<writable-stream>) 130.63 246.7 T
0 F
( #key) 264.16 246.7 T
3 F
(wait?::<boolean>) 293.48 246.7 T
0 F
([Generic function]) 442.68 246.7 T
(W) 81.65 220.02 T
(rites any pending data to the output stream. If) 92.5 220.02 T
3 F
(wait?) 313.8 220.02 T
0 F
( is true, then the user program blocks) 340.48 220.02 T
(until all the data has been written to the underlying aggregate \050such as the \336le system\051.) 81.65 206.02 T
(This operation has an ef) 81.65 179.33 T
(fect only on buf) 196.74 179.33 T
(fered streams, but there is a default method on) 272.84 179.33 T
1 F
(<str) 81.65 165.33 T
(eam>) 102.26 165.33 T
0 F
( so that user programs can call this on any sort of stream. The default method does) 130.43 165.33 T
(nothing.) 81.65 151.33 T
1 F
(discard-output) 63.65 118.64 T
3 F
(stream::<writable-stream>) 142.66 118.64 T
0 F
([Generic function]) 442.68 118.64 T
(Discards any output that might be pending in the stream.) 81.65 91.95 T
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(15) 523.65 67.57 T
0 12 Q
(This operation has an ef) 81.65 736.95 T
(fect only on buf) 196.74 736.95 T
(fered streams, but there is a default method on) 272.84 736.95 T
1 F
(<str) 81.65 722.95 T
(eam>) 102.26 722.95 T
0 F
( so that user programs can call this on any sort of stream. The default method does) 130.43 722.95 T
(nothing.) 81.65 708.95 T
1 14 Q
(4.3  Line Oriented Input and Output) 63.65 673.39 T
0 12 Q
(This section presents several functions for doing line-oriented input and output that works inde-) 63.65 644.49 T
(pendently of the platform-speci\336c newline conventions.) 63.65 630.49 T
-0.32 (The newline sequence for internal character streams is a sequence comprising the single character) 63.65 602.26 P
2 F
-0.52 (\134n) 63.65 588.26 P
0 F
-0.22 ( \050line feed\051. For character \336le streams, the newline sequence is whatever sequence of character) 78.05 588.26 P
(the underlying platform uses to represent a newline. \050For example, on MSDOS platforms, the) 63.65 574.26 T
(sequence comprises the two characters) 63.65 560.26 T
2 F
(\134r) 252.59 560.26 T
(\134n) 269.99 560.26 T
0 F
( \321 carriage return followed by line feed.\051) 284.39 560.26 T
(These functions are implemented in terms of the more primitive read and write functions) 63.65 532.03 T
(described above.) 63.65 518.03 T
1 F
(read-line) 63.65 483.8 T
3 F
(stream::<readable-stream>) 112.64 483.8 T
0 F
(#key) 251.82 483.8 T
3 F
(on-end-of-stream) 278.15 483.8 T
8 F
(\336) 364.46 483.8 T
3 F
(string) 379.31 483.8 T
(newline?::<boolean>) 410.32 483.8 T
0 F
([Generic function]) 63.65 469.8 T
(Returns as a byte string all the input up to the next newline sequence. The result string does) 81.65 441.57 T
-0.35 (not contain the newline sequence. The second value is) 81.65 427.57 P
1 F
-0.35 (#t) 341.8 427.57 P
0 F
-0.35 ( if the read terminated with a newline) 351.8 427.57 P
(or) 81.65 413.57 T
1 F
(#f) 94.64 413.57 T
0 F
( if the read completed by getting to the end of the input stream.) 104.64 413.57 T
(If the end of the stream is detected immediately upon calling) 81.65 385.34 T
1 F
(r) 375.94 385.34 T
(ead-line) 381.05 385.34 T
0 F
( \050that is, the end of) 421.72 385.34 T
(stream appears to be at the end of an empty line\051, then the end of stream handling \050and the) 81.65 371.34 T
(interpretation of) 81.65 357.34 T
3 F
(on-end-of-str) 162.3 357.34 T
(eam) 225.18 357.34 T
0 F
(\051 is as for) 245.17 357.34 T
1 F
(r) 293.16 357.34 T
(ead) 298.27 357.34 T
0 F
(.) 316.27 357.34 T
1 F
(read-line-into!) 63.65 323.11 T
3 F
(stream::<readable-stream> string) 140.64 323.11 T
0 F
(#key) 310.82 323.11 T
3 F
(start on-end-of-stream) 337.15 323.11 T
8 F
(\336) 448.48 323.11 T
3 F
(string) 463.32 323.11 T
(newline?::<boolean>) 63.65 309.11 T
0 F
([Generic function]) 442.68 309.11 T
(Returns as a byte string all the input up to the next newline sequence. The result is inserted) 81.65 280.88 T
-0.22 (into the provided string starting at the position start, which is an integer that defaults to 0. The) 81.65 266.88 P
-0.08 (second value is) 81.65 252.88 P
1 F
-0.08 (#t) 157.72 252.88 P
0 F
-0.08 ( is the read terminated with a newline or) 167.71 252.88 P
1 F
-0.08 (#f) 363.26 252.88 P
0 F
-0.08 ( if the read completed by getting) 373.26 252.88 P
(to the end of the input stream.) 81.65 238.88 T
3 F
(on-end-of-str) 81.65 210.64 T
(eam) 144.53 210.64 T
0 F
( is as for) 164.52 210.64 T
1 F
(r) 208.51 210.64 T
(ead-line) 213.62 210.64 T
0 F
(.) 254.29 210.64 T
1 F
(write-line) 63.65 176.41 T
3 F
(stream::<writable-stream> string) 115.97 176.41 T
8 F
(\336) 283.5 176.41 T
3 F
(string) 298.34 176.41 T
0 F
([Generic function]) 442.68 176.41 T
(W) 81.65 148.18 T
(rites the byte string into the stream by calling write, and then writes a newline sequence. If) 92.5 148.18 T
(string is #f, this will just write a newline. The returned value is the string.) 81.65 134.18 T
-0.12 (Multi-threaded implementations should take care that the string and the newline sequence are) 81.65 105.95 P
(written contiguously) 81.65 91.95 T
(.) 179.87 91.95 T
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(16) 523.65 67.57 T
1 14 Q
(4.4  Str) 63.65 735.62 T
(eam T) 106.56 735.62 T
(esting Pr) 142.99 735.62 T
(otocol) 196 735.62 T
0 12 Q
(The following functions can be used to determine the size of a stream, its read and write limits,) 63.65 706.88 T
(and whether it is at its end.) 63.65 692.88 T
1 F
(stream-at-end?) 63.65 658.8 T
3 F
(stream::<readable-stream>) 144.62 658.8 T
8 F
( \336) 280.8 658.8 T
3 F
(boolean) 298.64 658.8 T
0 F
([Generic function]) 442.68 658.8 T
-0.1 (Returns) 81.65 630.72 P
1 F
-0.1 (#t) 121.88 630.72 P
0 F
-0.1 ( if the stream is at its end, otherwise returns) 131.87 630.72 P
1 F
-0.1 (#f) 343.14 630.72 P
0 F
-0.1 (. That is, it returns) 353.14 630.72 P
1 F
-0.1 (#t) 443.61 630.72 P
0 F
-0.1 ( only if a call to) 453.61 630.72 P
1 F
(r) 81.65 616.72 T
(ead) 86.76 616.72 T
0 F
( would return the end-of-stream element or signal the) 104.76 616.72 T
1 F
(<end-of-str) 363.71 616.72 T
(eam>) 420.98 616.72 T
0 F
( condition.) 449.15 616.72 T
1 F
(size) 63.65 582.64 T
3 F
(stream::<stream>) 85.31 582.64 T
8 F
( \336) 174.83 582.64 T
3 F
(limit::union\050<integer>,singleton\050#f\051\051) 192.67 582.64 T
0 F
([Generic function]) 442.68 582.64 T
(Returns the size of the stream\325) 81.65 554.57 T
(s underlying aggregate. For streams over collections and) 227.29 554.57 T
(sequences, this returns the length of the collection or sequence. For \336le streams, this returns) 81.65 540.57 T
(the current length of the \336le in units appropriate to the stream \050for example, 8-bit bytes for) 81.65 526.57 T
(standard \336le streams\051. If the underlying aggregate has no well de\336ned size \050for an in\336nite) 81.65 512.57 T
(stream, for example\051, then this will return) 81.65 498.57 T
1 F
(#f) 284.62 498.57 T
0 F
(.) 294.61 498.57 T
(It is an error to call) 81.65 470.49 T
1 F
(size) 176.29 470.49 T
0 F
( on a buf) 194.95 470.49 T
(fered stream while its buf) 237.06 470.49 T
(fers are held.) 359.48 470.49 T
1 F
(stream-limit) 63.65 436.41 T
3 F
(stream::<stream>) 129.96 436.41 T
8 F
( \336) 219.48 436.41 T
3 F
(limit::union\050<integer>,singleton\050#f\051\051) 237.32 436.41 T
0 F
([Generic function]) 442.68 436.41 T
(For readable streams that are subclasses of) 81.65 408.34 T
1 F
(<positionable-str) 289.26 408.34 T
(eam>) 375.89 408.34 T
0 F
(, this returns the position) 404.05 408.34 T
(of the last readable element plus one. For writable streams that are subclasses of) 81.65 394.34 T
1 F
(<position-) 469.24 394.34 T
(able-str) 81.65 380.34 T
(eam>) 120.76 380.34 T
0 F
(, this returns the write limit. For read-writable subclasses of) 148.92 380.34 T
1 F
(<positionable-) 438.22 380.34 T
(str) 81.65 366.34 T
(eam>) 95.42 366.34 T
0 F
(, this returns the maximum of those two values. In ef) 123.59 366.34 T
(fect, the returned value will be) 376.68 366.34 T
(the index one past the last valid position in the stream.) 81.65 352.34 T
(For other readable or writable stream classes where such a limit cannot be de\336ned \050such as a) 81.65 324.26 T
(stream over the prime numbers or a pipe stream doing input or output to some external pro-) 81.65 310.26 T
(cess\051, this returns) 81.65 296.26 T
1 F
(#f) 168.3 296.26 T
0 F
(.) 178.3 296.26 T
1 14 Q
(4.5  Positionable Str) 63.65 260.85 T
(eam Pr) 183.18 260.85 T
(otocol) 226.08 260.85 T
0 12 Q
(The following comprises the protocol for positionable streams.) 63.65 232.11 T
(A stream position can be thought of as a natural number that indicates how many elements into) 63.65 204.03 T
(the stream the stream\325) 63.65 190.03 T
(s \322cursor\323 is. However) 169.3 190.03 T
(, it is not always the case that a single integer is) 278.11 190.03 T
-0.26 (enough to represent the stream\325) 63.65 176.03 P
-0.26 (s position. Consider the case of a \322decompressing\323 \336le stream that) 213.24 176.03 P
(requires additional state to be able to get the next input character from the compressed \336le.) 63.65 162.03 T
(The streams library addresses this problem by introducing a) 63.65 133.95 T
1 F
(<str) 353.94 133.95 T
(eam-position>) 374.56 133.95 T
0 F
( class, which is) 447.4 133.95 T
(subclassed by various kinds of streams that need to maintain additional state. A stream may) 63.65 119.95 T
(always be ef) 63.65 105.95 T
(\336ciently positioned to a stream position previously returned by a call to) 123.41 105.95 T
1 F
(position) 468.72 105.95 T
0 F
( on) 509.4 105.95 T
-0.29 (the same stream. Furthermore, it is legal to set the position of a stream to an integer position; how-) 63.65 91.95 P
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(17) 523.65 67.57 T
0 12 Q
-0.4 (ever) 63.65 736.95 P
-0.4 (, for some types of streams, doing this might be arbitrarily slow) 83.82 736.95 P
-0.4 (, perhaps requiring reading the) 383.66 736.95 P
(entire contents of the stream up to that point.) 63.65 722.95 T
1 F
(<stream-position>) 63.65 690.5 T
0 F
([Class]) 497.65 690.5 T
-0.13 (This abstract class is used to represent a position within certain classes of streams for which a) 81.65 664.04 P
(natural number is not suf) 81.65 650.04 T
(\336cient to fully describe the position in the stream. \050For example, a) 201.42 650.04 T
(stream that supports encryption or compression will have some state associated with each) 81.65 636.04 T
(position in the stream, and a single integer is not suf) 81.65 622.04 T
(\336cient to store that state.\051) 331.75 622.04 T
(Note that this type must be disjoint from) 81.65 595.59 T
1 F
(<integer>) 278.99 595.59 T
0 F
(.) 328.66 595.59 T
1 F
(position) 63.65 563.13 T
3 F
(stream::<positionable-stream>) 107.33 563.13 T
8 F
(\336) 263.18 563.13 T
3 F
(position) 278.03 563.13 T
0 F
([Generic function]) 442.68 563.13 T
(Returns the current position of the stream in the enumeration of elements in the underlying) 81.65 536.68 T
(aggregate.) 81.65 522.68 T
(For streams over sequences, this is the index \050as de\336ned by the generic function) 81.65 496.23 T
1 F
(element) 467.92 496.23 T
0 F
(\051 of) 507.9 496.23 T
(the element that will be read or written by a subsequent call of) 81.65 482.23 T
1 F
(r) 383.93 482.23 T
(ead) 389.04 482.23 T
0 F
( or) 407.04 482.23 T
1 F
(write) 423.04 482.23 T
0 F
(. For some other) 449.69 482.23 T
-0.23 (streams \050such as \322binary\323 \336le streams\051, this will be an integer that indicates the position in the) 81.65 468.23 P
(stream. For still other streams \050such as character \336le streams and the hypothetical \322compress-) 81.65 454.23 T
-0.31 (ing\323 \336le stream\051, the returned position may be a more complex) 81.65 440.23 P
1 F
-0.31 (<str) 382.81 440.23 P
-0.31 (eam-position>) 403.42 440.23 P
0 F
-0.31 ( object that) 476.26 440.23 P
(represents the position in the stream and the state of the stream at that position.) 81.65 426.23 T
1 F
(position-setter) 63.65 393.77 T
3 F
(position stream::<positionable-stream>) 139.97 393.77 T
8 F
(\336) 337.5 393.77 T
3 F
(new-position) 352.34 393.77 T
0 F
([Generic function]) 442.68 393.77 T
-0.31 (Repositions the stream to the new position) 81.65 367.32 P
3 F
-0.31 (position) 286.47 367.32 P
0 F
-0.31 (. Streams are permitted to signal an error if) 325.15 367.32 P
3 F
(position) 81.65 353.32 T
0 F
( is not a valid stream position, where a valid stream position is an integer for some) 120.32 353.32 T
-0.21 (streams, or a) 81.65 339.32 P
1 F
-0.21 (<str) 144.99 339.32 P
-0.21 (eam-position>) 165.61 339.32 P
0 F
-0.21 ( for others. An error will be signalled if the position is before) 238.45 339.32 P
(the beginning of the stream or after the stream\325) 81.65 325.32 T
(s limit.) 306.94 325.32 T
3 F
(position) 81.65 298.86 T
0 F
( may also be) 120.32 298.86 T
1 F
(#\323start\323) 183.65 298.86 T
0 F
(, meaning that the stream should be positioned to its start, or) 225.64 298.86 T
1 F
-0.12 (#\323end\323) 81.65 284.86 P
0 F
-0.12 (, meaning that the stream should be positioned to its end. Note that some streams may) 118.32 284.86 P
(not support being positioned back to their start.) 81.65 270.86 T
(V) 81.65 244.41 T
(alid stream positions may also be further restricted, depending on the type of stream. For) 88.98 244.41 T
(example, a pipe stream implementation may not be able to back up its position. Streams are) 81.65 230.41 T
-0.29 (permitted to restrict the new position to values previously returned by a call to) 81.65 216.41 P
1 F
-0.29 (position) 456.18 216.41 P
0 F
-0.29 ( on the) 496.86 216.41 P
-0.13 (same stream; this will be the case for streams that need to capture additional state beyond just) 81.65 202.41 P
(the location in the aggregate.) 81.65 188.41 T
(Setting the position of a stream beyond the last element of an internal collection will have no) 81.65 161.95 T
(ef) 81.65 147.95 T
(fect until an element is written via one of the write functions. When extending a writable) 90.76 147.95 T
(stream\325) 81.65 133.95 T
(s underlying aggregate using) 116.98 133.95 T
1 F
(position-setter) 258.29 133.95 T
0 F
(, the unwritten portions of the aggregate) 331.13 133.95 T
(will be \336lled by that aggregate\325) 81.65 119.95 T
(s default element. Setting the position of a \336le stream beyond) 231.3 119.95 T
(the current end of the \336le will extend the size of the \336le) 81.65 105.95 T
0 9.6 Q
(4) 347.6 110.75 T
0 12 Q
(. When extending a writable \336le) 352.4 105.95 T
(stream\325) 81.65 91.95 T
(s underlying \336le using) 116.98 91.95 T
1 F
(position-setter) 226.98 91.95 T
0 F
(, the unwritten portions of the \336le will be \336lled) 299.82 91.95 T
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 18
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(18) 523.65 67.57 T
0 12 Q
-0.17 (by whatever elements are provided by the underlying \336le system \050for example, Unix \336les will) 81.65 736.95 P
(be \336lled with null characters\051.) 81.65 722.95 T
(It is an error to set the position of a buf) 81.65 696.95 T
(fered stream while its buf) 268.74 696.95 T
(fers are held.) 391.16 696.95 T
1 F
(as <position>) 63.65 664.95 T
3 F
( integer) 131.68 664.95 T
8 F
(\336) 171.67 664.95 T
3 F
(stream-position) 186.52 664.95 T
0 F
([Method]) 486.32 664.95 T
(Coerces an integer to a stream position \050an object that is a subclass of) 81.65 638.95 T
1 F
(<str) 418.26 638.95 T
(eam-position>) 438.88 638.95 T
0 F
(\051.) 511.72 638.95 T
(For streams that do not use integers as their stream positions, this might be arbitrarily slow) 81.65 624.95 T
(,) 516.18 624.95 T
(perhaps requiring reading the entire contents of the stream up to that point.) 81.65 610.95 T
1 F
(as <integer>) 63.65 578.95 T
3 F
( stream-position) 126.98 578.95 T
8 F
(\336) 208.32 578.95 T
3 F
(integer) 223.16 578.95 T
0 F
([Method]) 486.32 578.95 T
(Coerces a stream position object \050an object that is a subclass of) 81.65 552.95 T
1 F
(<str) 387.6 552.95 T
(eam-position>) 408.22 552.95 T
0 F
(\051 to an) 481.06 552.95 T
(integer) 81.65 538.95 T
(.) 114.31 538.95 T
1 F
(skip) 63.65 506.95 T
3 F
(stream::<positionable-stream> delta::<integer>) 88 506.95 T
0 F
( #key) 326.04 506.95 T
3 F
(from) 355.37 506.95 T
8 F
(\336) 381.04 506.95 T
3 F
(new-position::<stream-) 395.88 506.95 T
(position>) 63.65 492.95 T
0 F
([Generic function]) 442.68 492.95 T
(Moves the position of the stream to) 81.65 466.95 T
3 F
(delta) 254.64 466.95 T
0 F
(from) 281.64 466.95 T
3 F
( fr) 304.97 466.95 T
(om) 315.53 466.95 T
0 F
(.) 330.19 466.95 T
3 F
(fr) 336.19 466.95 T
(om) 343.75 466.95 T
0 F
(\325) 358.42 466.95 T
(s value is one of the symbols) 361.75 466.95 T
1 F
(#"her) 81.65 452.95 T
(e") 111.42 452.95 T
0 F
(,) 123.41 452.95 T
1 F
(#"start") 129.41 452.95 T
0 F
(, and) 172.72 452.95 T
1 F
(#"end") 199.04 452.95 T
0 F
(, with the default being) 237.04 452.95 T
1 F
(#"her) 351.02 452.95 T
(e") 380.8 452.95 T
0 F
(. Returns the new position.) 392.78 452.95 T
(The error behavior is the same as it is for) 81.65 438.95 T
1 F
(position-setter) 281.6 438.95 T
0 F
(.) 354.26 438.95 T
-0.35 (All streams will support the case where) 81.65 412.95 P
3 F
-0.35 (delta) 271.49 412.95 P
0 F
-0.35 ( is positive and) 295.49 412.95 P
3 F
-0.35 (fr) 369.42 412.95 P
-0.35 (om) 376.98 412.95 P
0 F
-0.35 ( is) 391.65 412.95 P
1 F
-0.35 (#"her) 404.95 412.95 P
-0.35 (e") 434.72 412.95 P
0 F
-0.35 ( \050that is, skipping) 446.71 412.95 P
(forward from the current position\051. Some streams may not support skipping backwards from) 81.65 398.95 T
(the current position. Some streams may not support skipping relative to their start and/or end.) 81.65 384.95 T
(It is an error to call) 81.65 358.95 T
1 F
(skip) 176.29 358.95 T
0 F
( on a buf) 197.64 358.95 T
(fered stream while its buf) 239.75 358.95 T
(fers are held.) 362.17 358.95 T
1 14 Q
(4.6  Str) 63.65 325.62 T
(eam Contents Accessing Pr) 106.56 325.62 T
(otocol) 268.44 325.62 T
1 12 Q
(stream-contents) 63.65 292.95 T
3 F
( stream::<stream>) 145.62 292.95 T
8 F
(\336) 241.14 292.95 T
3 F
(collection) 255.98 292.95 T
0 F
([Generic function]) 442.68 292.95 T
-0.38 (Returns a collection comprising the elements in the stream's underlying sequence from 0 up to) 81.65 266.95 P
(\050but not including\051 the current limit of the stream.) 81.65 252.95 T
(Note that this operation can be very expensive for \336le streams, as it may require reading the) 81.65 226.95 T
(entire contents of the \336le.) 81.65 212.95 T
63.65 126.95 531.65 146.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 134.95 195.65 134.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(4.  Provided the underlying system can allocate the disk space. This proposal ignores such problems, omitting facili-) 63.65 120.29 T
(ties such as being able to query the maximum size to which a \336le may grow) 63.65 108.29 T
(, or the amount of free disk space. Such) 366.02 108.29 T
(facilities, although necessary) 63.65 96.29 T
(, are fraught with portability problems.) 178.81 96.29 T
FMENDPAGE
%%EndPage: "18" 18
%%Page: "19" 19
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(19) 523.65 67.57 T
1 14 Q
(4.7  File Str) 63.65 735.62 T
(eams) 132.61 735.62 T
0 12 Q
(The following are operations that apply only to \336le streams. Note that this proposal does not) 63.65 707.41 T
(present a general \336le system interface. It is intended that such an interface will be provided by a) 63.65 693.41 T
(proposal for a Dylan Pathnames Library) 63.65 679.41 T
(.) 255.83 679.41 T
1 F
(close) 63.65 645.86 T
3 F
(stream::<file-stream>) 91.31 645.86 T
0 F
( #key) 200.16 645.86 T
3 F
(abort::<boolean> wait?::<boolean>) 229.49 645.86 T
0 F
([Generic function]) 442.68 645.86 T
(If) 81.65 618.32 T
3 F
(abort) 92.64 618.32 T
0 F
( is false, any unwritten data is written to the \336le by calling) 118.64 618.32 T
1 F
(for) 400.62 618.32 T
(ce-output) 415.73 618.32 T
0 F
(. Then the) 464.39 618.32 T
(connection to the underlying \336le system is closed, releasing any resources backing the con-) 81.65 604.32 T
-0.17 (nection. If) 81.65 590.32 P
3 F
-0.17 (abort) 133.62 590.32 P
0 F
-0.17 ( is true, then any errors caused by closing the \336le are ignored. Furthermore, if) 159.63 590.32 P
3 F
-0.29 (abort) 81.65 576.32 P
0 F
-0.29 ( is true, the \336le should be restored to its initial state wherever possible \050for example, on a) 107.65 576.32 P
(versioned \336le system, the previous version of the \336le should be restored as the latest version\051.) 81.65 562.32 T
(It is an error for a user program to call) 81.65 534.77 T
1 F
(close) 268.26 534.77 T
0 F
( on a buf) 292.92 534.77 T
(fered stream while its buf) 335.03 534.77 T
(fers are held.) 457.45 534.77 T
(Other types of streams, such as pipe streams, might implement methods for this.) 81.65 507.23 T
1 F
(reopen) 63.65 473.68 T
3 F
(stream::<file-stream>) 101.98 473.68 T
0 F
([Generic function]) 442.68 473.68 T
(Ensures that the \336le is \322open\323, that is, any required connection to the underlying \336le system) 81.65 446.13 T
-0.22 (has been established. An error will occur if it is not possible to establish the necessary connec-) 81.65 432.13 P
-0.06 (tion. If the reason for this failure is covered by a) 81.65 418.13 P
1 F
-0.06 (<\336le-does-not-exist-err) 315.57 418.13 P
-0.06 (or>) 432.16 418.13 P
0 F
-0.06 ( or <) 450.33 418.13 P
1 F
-0.06 (invalid-\336le-) 472.97 418.13 P
(permission-err) 81.65 404.13 T
(or>,) 157.42 404.13 T
0 F
( then instances of these conditions will be signalled rather than an ordi-) 178.58 404.13 T
(nary error) 81.65 390.13 T
(. \050Note that) 128.63 390.13 T
1 F
(r) 185.95 390.13 T
(eopen) 191.06 390.13 T
0 F
( should) 221.06 390.13 T
3 F
(not) 259.07 390.13 T
0 F
( implement the if-exists/if-does-not-exist functional-) 274.4 390.13 T
(ity) 81.65 376.13 T
(. This should have already been done when the \336le was originally opened. For example, a) 93.54 376.13 T
1 F
(<\336le-write-str) 81.65 362.13 T
(eam>) 152.24 362.13 T
0 F
( which has an) 180.41 362.13 T
1 F
(if-exists:) 249.06 362.13 T
0 F
( behavior of) 292.38 362.13 T
1 F
(#"truncate") 353.36 362.13 T
0 F
( should truncate the) 416 362.13 T
(underlying \336le when created, but) 81.65 348.13 T
3 F
(not) 242.95 348.13 T
0 F
( when reopened.\051) 258.29 348.13 T
(The) 81.65 320.59 T
1 F
(<str) 103.31 320.59 T
(eam>) 123.92 320.59 T
0 F
( class provides dummy implementations of these functions that do nothing, so) 152.09 320.59 T
(that clients expecting \336le streams can use other internal streams transparently) 81.65 306.59 T
(.) 452.14 306.59 T
1 F
(with-open-file) 63.65 273.04 T
3 F
(stream-var) 137.98 273.04 T
0 F
( = \050) 190.63 273.04 T
3 F
(path-or-string-expr) 207.4 273.04 T
1 F
(by) 303.72 273.04 T
3 F
(stream-creation-func) 319.39 273.04 T
0 F
(, #rest) 420.71 273.04 T
3 F
(keys) 453.04 273.04 T
0 F
(\051) 473.69 273.04 T
3 F
(body) 480.68 273.04 T
1 F
(end) 507.01 273.04 T
0 F
([Macro]) 63.65 259.04 T
-0.11 (The macro) 81.65 231.5 P
1 F
-0.11 (with-open-\336le) 136.07 231.5 P
0 F
-0.11 ( is provided as a safe mechanism for using \336le streams. It is used to) 206.74 231.5 P
(create the \336le-stream, evaluate some block of code using the stream, and then close the) 81.65 217.5 T
(stream.) 81.65 203.5 T
1 F
(with-open-\336le) 119.64 203.5 T
0 F
( ensures that the \336le will be closed on exiting the block, if it was not) 190.31 203.5 T
(already closed within the block.l) 81.65 189.5 T
3 F
(stream-var) 81.65 161.95 T
0 F
( is a variable name; it will be bound to the created stream.) 134.3 161.95 T
3 F
(path-or-string) 414.92 161.95 T
0 F
(should) 485.93 161.95 T
(evaluate to a valid ar) 81.65 147.95 T
(gument to) 181.4 147.95 T
1 F
(as\050<pathname>,) 232.74 147.95 T
3 F
(path-or-string-expr) 318.42 147.95 T
1 F
(\051) 411.74 147.95 T
0 F
(.) 415.74 147.95 T
3 F
(stream-creation-func) 424.74 147.95 T
0 F
(is one of) 81.65 133.95 T
1 F
(r) 125.98 133.95 T
(ead-str) 131.09 133.95 T
(eam-over) 166.86 133.95 T
0 F
(,) 214.36 133.95 T
1 F
(write-str) 220.36 133.95 T
(eam-over) 264.78 133.95 T
0 F
( or) 312.76 133.95 T
1 F
(r) 328.75 133.95 T
(ead-write-str) 333.86 133.95 T
(eam-over) 400.28 133.95 T
0 F
(. T) 447.6 133.95 T
(o create the) 460.09 133.95 T
(stream,) 81.65 119.95 T
3 F
(stream-creation-func) 119.64 119.95 T
0 F
( is applied to the expression as) 220.96 119.95 T
1 F
(as\050<pathname>,) 370.61 119.95 T
3 F
(path-or-string-) 456.29 119.95 T
-0.19 (expr) 81.65 105.95 P
1 F
-0.19 (\051) 102.97 105.95 P
0 F
-0.19 (, and supplied with the keyword ar) 106.97 105.95 P
-0.19 (guments in) 271.93 105.95 P
3 F
-0.19 (keys) 327.55 105.95 P
0 F
-0.19 (. The macro evaluates to the values of) 348.2 105.95 P
(the last expression in) 81.65 91.95 T
3 F
(body) 185.64 91.95 T
0 F
(.) 208.19 91.95 T
FMENDPAGE
%%EndPage: "19" 19
%%Page: "20" 20
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(20) 523.65 67.57 T
0 12 Q
(For example, the following expression yields the contents of \336le "foo" as a) 63.65 736.95 T
1 F
(<byte-vector>) 425.4 736.95 T
0 F
(:) 497.05 736.95 T
2 10 Q
(with-open-file fs = \050"foo" by read-stream-over, element-type: #"byte"\051) 99.65 718.29 T
(  read-to-end\050fs\051) 99.65 706.29 T
(end;) 99.65 694.29 T
0 12 Q
(and is roughly equivalent to:) 63.65 668.95 T
2 10 Q
(begin) 99.65 650.29 T
(let hidden-fs = #f;     // In case the user bashes fs variable) 117.65 638.29 T
(block) 117.65 626.29 T
(hidden-fs := read-stream-over\050as\050<pathname>, "foo"\051,) 135.65 614.29 T
(element-type: #"byte"\051;) 315.65 602.29 T
(let fs = hidden-fs;) 135.65 590.29 T
(read-to-end\050fs\051;) 135.65 578.29 T
(cleanup) 117.65 566.29 T
(if \050hidden-fs\051 close\050hidden-fs\051;) 135.65 554.29 T
(end block;) 117.65 542.29 T
(end;) 99.65 530.29 T
1 12 Q
(4.7.1  Closing Open File Str) 63.65 498.95 T
(eams) 204.44 498.95 T
0 F
-0.39 (Open \336le streams have a connection to the external system, and can claim valuable resources such) 63.65 472.95 P
(as \336le descriptors. They also have internal state, such as yet-to-be written buf) 63.65 458.95 T
(fers. It is usually) 434.03 458.95 T
(important to empty out these buf) 63.65 444.95 T
(fers and close \336le streams to reclaim such resources and ensure) 220.43 444.95 T
(that the external \336le is up-to-date with respect to the \336le stream. There are two problems to be) 63.65 430.95 T
(solved to bring this about. First, all open \336le streams need to be \337ushed \050and possibly closed) 63.65 416.95 T
0 9.6 Q
(5) 506.96 421.75 T
0 12 Q
(\051) 511.76 416.95 T
(before the program terminates. Second, an open \336le stream that is no longer referenced needs to) 63.65 402.95 T
(\336nalize itself by \337ushing and closing.) 63.65 388.95 T
-0.12 (T) 63.65 362.95 P
-0.12 (o ensure all open \336le streams are closed on program termination, the \336le stream implementation) 70.14 362.95 P
-0.17 (maintains an) 63.65 348.95 P
3 F
-0.17 (open file streams registry) 127.31 348.95 P
0 F
-0.17 (. File streams should add and remove themselves from this) 248.35 348.95 P
(registry when opening and closing, as appropriate. The implementation guarantees to invoke) 63.65 334.95 T
1 F
(close) 63.65 320.95 T
0 F
( on all \336le streams in the registry immediately before program termination. This cleanup) 88.31 320.95 T
(action can be invoked at other times via the) 63.65 306.95 T
1 F
(close-open-str) 275.28 306.95 T
(eams) 346.38 306.95 T
0 F
( method,) 372.37 306.95 T
1 F
(close-open-streams) 63.65 274.95 T
3 F
(class) 163.96 274.95 T
0 F
( ==) 187.96 274.95 T
3 F
(<external-stream>) 207.49 274.95 T
0 F
([Method]) 486.32 274.95 T
-0.13 (Invoke) 81.65 248.95 P
1 F
-0.13 (close) 117.84 248.95 P
0 F
-0.13 ( on all streams in the open stream registry) 142.5 248.95 P
-0.13 (, and remove all streams from the regis-) 341.29 248.95 P
(try) 81.65 234.95 T
(.) 94.2 234.95 T
(Implementations also guarantee that) 63.65 208.95 T
1 F
(close) 240.29 208.95 T
0 F
( is invoked on all open \336le streams before they are gar-) 264.95 208.95 T
(bage collected. In Dylan implementations that provide \336nalization in their memory management) 63.65 194.95 T
-0.07 (architecture, it is expected that this functionality can be easily implemented using the \336nalization) 63.65 180.95 P
-0.16 (mechanism. In this case the open streams registry should be in the form of a \322weak\323 set, so as not) 63.65 166.95 P
-0.22 (to prevent the normal garbage collection of streams. On Dylan platforms that do not provide \336nal-) 63.65 152.95 P
-0.3 (ization, the open streams registry should be periodically scavenged, for instance, when an attempt) 63.65 138.95 P
63.65 114.95 531.65 134.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 122.95 195.65 122.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(5.  On Unix, open \336le descriptors are closed on program termination, this may well not be the case with some envi-) 63.65 108.29 T
(ronments in which a stray Dylan program may \336nd itself.) 63.65 96.29 T
FMENDPAGE
%%EndPage: "20" 20
%%Page: "21" 21
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(21) 523.65 67.57 T
0 12 Q
(to obtain a \336le handle from the underlying operating system fails because it has run out of \336le) 63.65 736.95 T
(descriptors. Implementations that scavenge the open stream registry must not inadvertently close) 63.65 722.95 T
(any \336les that are in use.) 63.65 708.95 T
1 16 Q
(5.  Buffer) 63.65 666 T
(ed Str) 127.79 666 T
(eams) 168.83 666 T
0 12 Q
-0.05 (One major goal of any streams package that includes support for \336le I/O is ef) 63.65 636.38 P
-0.05 (\336cient buf) 433.37 636.38 P
-0.05 (fered I/O.) 482.1 636.38 P
(At the same time, the user should not be burdened with having to concern himself with buf) 63.65 622.38 T
(fering) 499.72 622.38 T
(for normal use of the streams package. The buf) 63.65 608.38 T
(fering should generally be handled transparently) 289.7 608.38 T
(,) 521.21 608.38 T
(but more sophisticated users should be able to access this functionality when appropriate.) 63.65 594.38 T
(A buf) 63.65 566.1 T
(fered stream maintains some sort of buf) 91.09 566.1 T
(fer) 281.51 566.1 T
(. All streams will use the sealed class) 294.17 566.1 T
1 F
(<buffer>) 475.81 566.1 T
0 F
-0.12 (for these buf) 63.65 552.1 P
-0.12 (fers. The size of these buf) 123.84 552.1 P
-0.12 (fers is explicitly unspeci\336ed, but it is expected that the will) 246.98 552.1 P
-0.26 (be chosen to be of a sensible size with respect to the underlying data source or data sink. The buf) 63.65 538.1 P
-0.26 (f-) 523.66 538.1 P
-0.08 (ering substrate also has protocol that tracks the start and end indices into the buf) 63.65 524.1 P
-0.08 (fer) 446.98 524.1 P
-0.08 (, and, transpar-) 459.82 524.1 P
(ently to the user) 63.65 510.1 T
(, manages \336lling and sending buf) 140.16 510.1 T
(fers. Also, in a multi-threaded environment, it) 299.27 510.1 T
(maintains some sort of lock so that the buf) 63.65 496.1 T
(fer cannot be simultaneously accessed by multiple) 267.42 496.1 T
(threads.) 63.65 482.1 T
(The following buf) 63.65 453.81 T
(fer protocols are expected to be used by buf) 150.76 453.81 T
(fered streams to implement the) 360.48 453.81 T
(appropriate stream protocols. Implements should strive to provide implementations for at least) 63.65 439.81 T
1 F
(r) 63.65 425.81 T
(ead-n) 68.76 425.81 T
0 F
(,) 97.43 425.81 T
1 F
(r) 103.43 425.81 T
(ead-n-as,) 108.54 425.81 T
(r) 157.87 425.81 T
(ead-n-into!) 162.98 425.81 T
0 F
(, and) 219.65 425.81 T
1 F
(write-n) 245.98 425.81 T
0 F
(, particularly in the case where they are reading or) 283.3 425.81 T
(writing objects of type) 63.65 411.81 T
1 F
(<byte-string>) 174.97 411.81 T
0 F
( or) 244.64 411.81 T
1 F
(<byte-vector>) 260.64 411.81 T
0 F
(.) 332.29 411.81 T
1 14 Q
(5.1  Buffer) 63.65 376.19 T
(ed Str) 126.77 376.19 T
(eam Pr) 162.68 376.19 T
(otocols) 205.58 376.19 T
0 12 Q
(This section describes the functions that user) 63.65 347.24 T
(-level programs can use to directly manipulate the) 278.71 347.24 T
(buf) 63.65 333.24 T
(fers of buf) 79.43 333.24 T
(fered streams. When users manipulate buf) 129.19 333.24 T
(fers, they are entirely responsible for) 330.92 333.24 T
-0.13 (tracking the buf) 63.65 319.24 P
-0.13 (fer) 139.16 319.24 P
-0.13 (\325) 152.93 319.24 P
-0.13 (s state and informing the stream of any changes to the buf) 156.26 319.24 P
-0.13 (fer) 432.28 319.24 P
-0.13 (\325) 446.05 319.24 P
-0.13 (s state. The over-) 449.38 319.24 P
-0.36 (all model for using a buf) 63.65 305.24 P
-0.36 (fer is to get the input or output buf) 179.96 305.24 P
-0.36 (fer and its bounds, consume or produce) 342.2 305.24 P
(data, and then release the buf) 63.65 291.24 T
(fer and its updated bounds back to the stream. There is no notion of) 203.39 291.24 T
(the user \336lling or emptying the buf) 63.65 277.24 T
(fer explicitly; the stream is responsible for this. This simple) 230.76 277.24 T
(model allows the stream implementation the leeway to be very ef) 63.65 263.24 T
(\336cient, since this may be done) 376.72 263.24 T
(with no extra data copying whatsoever) 63.65 249.24 T
(.) 248.62 249.24 T
0 9.6 Q
(6) 251.62 254.04 T
0 12 Q
(Note that, in a multi-threaded implementation of Dylan, getting an input or output buf) 63.65 220.95 T
(fer causes) 475.74 220.95 T
-0.41 (the requesting thread to hold that buf) 63.65 206.95 P
-0.41 (fer) 238.3 206.95 P
-0.41 (. When a buf) 250.96 206.95 P
-0.41 (fer is held by a thread, no other thread may do) 311.51 206.95 P
(anything on the same stream. Releasing the buf) 63.65 192.95 T
(fer allows other threads to access the stream. It is) 290.74 192.95 T
-0.26 (an error to perform any operations on a buf) 63.65 178.95 P
-0.26 (fer once the buf) 268.63 178.95 P
-0.26 (fer has been released. Furthermore, the) 343.27 178.95 P
(consequences are unde\336ned when a user program uses any high-level stream operations \050such as) 63.65 164.95 T
1 F
(r) 63.65 150.95 T
(ead) 68.76 150.95 T
0 F
( or) 86.76 150.95 T
1 F
(write) 102.76 150.95 T
0 F
(\051 on a stream while holding the buf) 129.41 150.95 T
(fer) 297.5 150.95 T
(.) 310.16 150.95 T
63.65 126.95 531.65 146.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 134.95 195.65 134.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
-0.32 (6.  In some operating systems, buf) 63.65 120.29 P
-0.32 (fers can be shared by the application and the operating system, so that, for example,) 198.75 120.29 P
-0.17 (device drivers can read and write data directly from and to buf) 63.65 108.29 P
-0.17 (fers shared between a user application and a peripheral) 311.28 108.29 P
(device.) 63.65 96.29 T
FMENDPAGE
%%EndPage: "21" 21
%%Page: "22" 22
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(22) 523.65 67.57 T
1 12 Q
(get-input-buffer) 63.65 736.95 T
3 F
(stream::<buffered-stream>) 149.3 736.95 T
0 F
(#key) 285.82 736.95 T
3 F
( wait?) 309.14 736.95 T
8 F
(\336) 341.82 736.95 T
3 F
(buffer start end end-of-stream?) 356.66 736.95 T
0 F
([Function]) 63.65 722.95 T
-0 (Gets an input buf) 81.65 693.95 P
-0 (fer for the stream. This may block for any number of reasons, such as block-) 164.42 693.95 P
-0.09 (ing on order to \336ll the buf) 81.65 679.95 P
-0.09 (fer or blocking if some thread is holding the input buf) 204.87 679.95 P
-0.09 (fer) 461.69 679.95 P
-0.09 (. If) 474.35 679.95 P
3 F
-0.09 (wait?) 491.15 679.95 P
0 F
-0.09 ( is) 517.83 679.95 P
(true \050the default\051, this will block if necessary in order to \336ll the buf) 81.65 665.95 T
(fer) 402.72 665.95 T
(. If) 415.38 665.95 T
3 F
(wait?) 432.37 665.95 T
0 F
( is false, the) 459.05 665.95 T
(buf) 81.65 651.95 T
(fer will be returned in its current state, regardless of whether there is any data in it; note) 97.43 651.95 T
(that) 81.65 637.95 T
1 F
(get-input-buffer) 102.65 637.95 T
0 F
( might return) 185.3 637.95 T
1 F
(#f) 250.97 637.95 T
0 F
( if it cannot get an input buf) 260.96 637.95 T
(fer in this case.) 394.4 637.95 T
(In the case when) 81.65 608.95 T
1 F
(get-input-buffer) 164.95 608.95 T
0 F
( does not return) 247.61 608.95 T
1 F
(#f) 325.6 608.95 T
0 F
(, it will returns four values, the buf) 335.59 608.95 T
(fer \050a) 502.36 608.95 T
1 F
(<buffer>) 81.65 594.95 T
0 F
(\051, the position within the buf) 127.32 594.95 T
(fer \050a) 263.77 594.95 T
1 F
(<buffer) 292.42 594.95 T
(-index>) 330.8 594.95 T
0 F
(\051 of the start of the data, and the) 369.65 594.95 T
-0.37 (limit within the buf) 81.65 580.95 P
-0.37 (fer \050a) 173.35 580.95 P
1 F
-0.37 (<buffer) 201.26 580.95 P
-0.37 (-index>) 239.65 580.95 P
0 F
-0.37 (\051 of the end of the data, and a boolean value that is) 278.49 580.95 P
1 F
-0.37 (#t) 519.02 580.95 P
0 F
(only if the stream is at its end. In this case, the buf) 81.65 566.95 T
(fer is guaranteed not to be empty; it will) 322.74 566.95 T
(have at least one element in it.) 81.65 552.95 T
1 F
(release-input-buffer) 63.65 517.95 T
3 F
( stream::<buffered-stream> new-start) 166.3 517.95 T
0 F
([Function]) 480.98 517.95 T
-0.03 (Informs the stream that the user is done with the buf) 81.65 488.95 P
-0.03 (fer) 331.77 488.95 P
-0.03 (, and has consumed all of the data into) 344.61 488.95 P
-0.09 (it up to) 81.65 474.95 P
3 F
-0.09 (new-start) 118.39 474.95 P
0 F
-0.09 (\050which is a) 166.63 474.95 P
1 F
-0.09 (<buffer) 222.02 474.95 P
-0.09 (-index>) 260.41 474.95 P
0 F
-0.09 (\051. This updates the stream to have the new state.) 299.25 474.95 P
-0.18 (If the user is not actually holding the buf) 81.65 460.95 P
-0.18 (fer \050via a previous call to) 275.3 460.95 P
1 F
-0.18 (get-input-buffer) 397.52 460.95 P
0 F
-0.18 (\051, this will) 480.18 460.95 P
(signal an error) 81.65 446.95 T
(.) 150.3 446.95 T
(If) 81.65 417.95 T
3 F
(new-start) 92.64 417.95 T
0 F
( matches the end index returned by) 137.98 417.95 T
1 F
(get-input-buffer) 308.94 417.95 T
0 F
(, the buf) 391.12 417.95 T
(fering substrate is) 430.56 417.95 T
(free to recycle the buf) 81.65 403.95 T
(fer) 186.72 403.95 T
(.) 199.38 403.95 T
1 F
(get-output-buffer) 63.65 368.95 T
3 F
(stream::<buffered-stream>) 155.96 368.95 T
0 F
(#key) 292.48 368.95 T
3 F
( wait?) 315.8 368.95 T
8 F
(\336) 348.48 368.95 T
3 F
(buffer start end) 363.32 368.95 T
0 F
([Function]) 480.98 368.95 T
(Gets an output buf) 81.65 339.95 T
(fer for the stream. This may block for any number of reasons, such as) 170.42 339.95 T
-0.39 (blocking if some thread is holding the input buf) 81.65 325.95 P
-0.39 (fer) 306.94 325.95 P
-0.39 (. If) 319.6 325.95 P
3 F
-0.39 (wait?) 335.8 325.95 P
0 F
-0.39 ( is true \050the default\051, this will block) 362.48 325.95 P
(if necessary to allocate a new buf) 81.65 311.95 T
(fer; if) 241.38 311.95 T
3 F
(wait?) 271.37 311.95 T
0 F
( is false,) 298.04 311.95 T
1 F
(get-output-buffer) 340.7 311.95 T
0 F
( might return) 430.02 311.95 T
1 F
(#f) 495.68 311.95 T
0 F
(,) 505.68 311.95 T
(meaning that it could not get an output buf) 81.65 297.95 T
(fer) 286.09 297.95 T
(.) 298.75 297.95 T
(In the case when) 81.65 268.95 T
1 F
(get-output-buffer) 164.95 268.95 T
0 F
( does not return) 254.27 268.95 T
1 F
(#f) 332.26 268.95 T
0 F
(, it returns three values, the buf) 342.25 268.95 T
(fer \050a) 491.34 268.95 T
1 F
(<buffer>) 81.65 254.95 T
0 F
(\051, the position within the buf) 127.32 254.95 T
(fer \050an) 263.77 254.95 T
1 F
(<buffer) 298.42 254.95 T
(-index>) 336.8 254.95 T
0 F
(\051 of the start of the data, and the) 375.65 254.95 T
-0.04 (limit within the buf) 81.65 240.95 P
-0.04 (fer \050an) 174.32 240.95 P
1 F
-0.04 (<buffer) 208.88 240.95 P
-0.04 (-index>) 247.27 240.95 P
0 F
-0.04 (\051 of the end of the data. In this case, the buf) 286.12 240.95 P
-0.04 (fer will) 493.74 240.95 P
(have room for the insertion of at least one element.) 81.65 226.95 T
1 F
(release-output-buffer) 63.65 191.95 T
3 F
( stream::<buffered-stream> new-start) 172.96 191.95 T
0 F
([Function]) 480.98 191.95 T
(Informs the stream that the user is done with the buf) 81.65 162.95 T
(fer) 332.06 162.95 T
(, and has been \336lled up to) 344.9 162.95 T
3 F
(new-start) 470.89 162.95 T
0 F
-0.18 (\050which is an) 81.65 148.95 P
1 F
-0.18 (<buffer) 142.78 148.95 P
-0.18 (-index>) 181.16 148.95 P
0 F
-0.18 (\051. This updates the stream to have the new state. If the user is not) 220.01 148.95 P
-0.03 (actually holding the buf) 81.65 134.95 P
-0.03 (fer \050via a previous call to) 195.67 134.95 P
1 F
-0.03 (get-output-buffer) 318.81 134.95 P
0 F
-0.03 (\051, this will signal an error) 408.12 134.95 P
-0.03 (.) 528.65 134.95 P
-0.35 (If) 81.65 105.95 P
3 F
-0.35 (new-start) 92.29 105.95 P
0 F
-0.35 ( matches the end index returned by) 137.62 105.95 P
1 F
-0.35 (get-output-buffer) 306.13 105.95 P
0 F
-0.35 (, the buf) 394.97 105.95 P
-0.35 (fering substrate will) 433.71 105.95 P
(write out the contents of the buf) 81.65 91.95 T
(fer) 234.74 91.95 T
(, and is then free to recycle the buf) 247.58 91.95 T
(fer) 413.65 91.95 T
(.) 426.31 91.95 T
FMENDPAGE
%%EndPage: "22" 22
%%Page: "23" 23
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(23) 523.65 67.57 T
1 14 Q
(5.2  Internal Buffering Pr) 63.65 735.62 T
(otocols) 216.22 735.62 T
0 12 Q
(Note that user) 63.65 705.15 T
(-level programs should not call any of the function speci\336ed in this section. These) 130.73 705.15 T
-0.05 (are intended to be specialized by programmers implementing streams. User programs should call) 63.65 691.15 P
(the functions speci\336ed in the previous section.) 63.65 677.15 T
1 F
(<byte>) 63.65 641.35 T
0 F
([Type]) 499 641.35 T
(This type represents limited integers in the range from 0 to 255.) 81.65 611.55 T
1 F
(<byte-vector>) 63.65 575.75 T
0 F
([Class]) 497.65 575.75 T
(This class is a sealed subclass of) 81.65 545.95 T
1 F
(<vector>) 240.62 545.95 T
0 F
( that contains elements of type) 286.28 545.95 T
1 F
(<byte>) 435.6 545.95 T
0 F
(.) 471.28 545.95 T
1 F
(<buffer>) 63.65 510.15 T
0 F
([Class]) 497.65 510.15 T
(This class is a sealed subclass of) 81.65 480.35 T
1 F
(<vector>) 240.62 480.35 T
0 F
( that contains elements of type) 286.28 480.35 T
1 F
(<byte>) 435.6 480.35 T
0 F
(. These are) 471.28 480.35 T
(the buf) 81.65 466.35 T
(fers used by all streams. This class is kept separate from) 115.09 466.35 T
1 F
(<byte-vector>) 387.71 466.35 T
0 F
( so that imple-) 459.36 466.35 T
(mentations may make use of internal system storage or use other internal features.) 81.65 452.35 T
1 F
(<buffer-index>) 63.65 416.55 T
0 F
([Type]) 499 416.55 T
(This type represents limited integers that are guaranteed to be \322unboxed\323 and \336xed precision.) 81.65 386.75 T
1 F
(buffer-subsequence) 63.65 350.95 T
3 F
(buffer result-class start end) 166.64 350.95 T
8 F
(\336) 301.98 350.95 T
3 F
(sequence) 316.82 350.95 T
0 F
([Generic function) 442.68 350.95 T
(]) 527.65 350.95 T
(Returns an instance of the class) 81.65 321.15 T
3 F
(r) 235.62 321.15 T
(esult-class) 239.84 321.15 T
0 F
(, which will be \336lled with the elements from the) 290.51 321.15 T
(buf) 81.65 307.15 T
(fer from) 97.43 307.15 T
3 F
(start) 140.08 307.15 T
0 F
( up to) 162.08 307.15 T
3 F
(end) 192.42 307.15 T
0 F
( \050which are both) 209.75 307.15 T
1 F
(<buffer) 291.06 307.15 T
(-index>) 329.45 307.15 T
0 F
(\325es\051. This should be implemented) 368.29 307.15 T
(as ef) 81.65 293.15 T
(\336ciently as possible, and there should be sealed methods when) 103.75 293.15 T
3 F
(r) 406.72 293.15 T
(esult-class) 410.94 293.15 T
0 F
( is) 461.6 293.15 T
1 F
(<byte-) 475.61 293.15 T
(string>) 81.65 279.15 T
0 F
(,) 118.49 279.15 T
1 F
(<byte-vector>) 124.49 279.15 T
0 F
(, and) 196.14 279.15 T
1 F
(<buffer>) 222.47 279.15 T
0 F
(.) 268.14 279.15 T
1 F
(copy-into-buffer!) 63.65 243.35 T
3 F
(buffer buffer-start sequence) 154.63 243.35 T
0 F
( #key) 287.95 243.35 T
3 F
(start end) 317.28 243.35 T
0 F
([Generic function]) 442.68 243.35 T
(Fills the destination sequence from) 81.65 213.55 T
3 F
(start) 252.64 213.55 T
0 F
( to) 274.64 213.55 T
3 F
(end) 289.98 213.55 T
0 F
( with the contents of the buf) 307.31 213.55 T
(fer) 441.74 213.55 T
3 F
(buffer) 458.06 213.55 T
0 F
( starting) 486.73 213.55 T
(from) 81.65 199.55 T
3 F
(buffer) 107.98 199.55 T
(-start) 136.4 199.55 T
0 F
(. This should be implemented as ef) 162.41 199.55 T
(\336ciently as possible, and there should be) 329.84 199.55 T
(sealed methods when) 81.65 185.55 T
3 F
(sequence) 187.3 185.55 T
0 F
(is of class) 234.28 185.55 T
1 F
(<byte-string>) 284.6 185.55 T
0 F
(,) 354.28 185.55 T
1 F
(<byte-vector>) 360.28 185.55 T
0 F
(, and) 431.93 185.55 T
1 F
(<buffer>) 458.26 185.55 T
0 F
(.) 503.93 185.55 T
1 F
(copy-from-buffer!) 63.65 149.75 T
3 F
(buffer buffer-start sequence) 159.95 149.75 T
0 F
( #key) 293.27 149.75 T
3 F
(start end) 322.6 149.75 T
0 F
([Generic function]) 442.68 149.75 T
(Fills the buf) 81.65 119.95 T
(fer) 139.44 119.95 T
3 F
(buffer) 155.76 119.95 T
0 F
( starting from) 184.43 119.95 T
3 F
(buffer) 252.76 119.95 T
(-start) 281.18 119.95 T
0 F
( from the contents of) 307.19 119.95 T
3 F
(sequence) 410.17 119.95 T
0 F
(from) 457.15 119.95 T
3 F
( start) 480.48 119.95 T
0 F
(to) 508.49 119.95 T
3 F
(end.) 81.65 105.95 T
0 F
( This should be implemented as ef) 101.98 105.95 T
(\336ciently as possible, and there should be sealed meth-) 266.41 105.95 T
(ods when) 81.65 91.95 T
3 F
(sequence) 130.31 91.95 T
0 F
(is of class) 177.29 91.95 T
1 F
(<byte-string>) 227.62 91.95 T
0 F
(,) 297.29 91.95 T
1 F
(<byte-vector>) 303.29 91.95 T
0 F
(, and) 374.94 91.95 T
1 F
(<buffer>) 401.27 91.95 T
0 F
(.) 446.94 91.95 T
FMENDPAGE
%%EndPage: "23" 23
%%Page: "24" 24
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(24) 523.65 67.57 T
1 12 Q
(stream-get-input-buffer) 63.65 736.95 T
3 F
(stream::<buffered-stream>) 188.62 736.95 T
0 F
(#key) 325.13 736.95 T
3 F
( wait?) 348.46 736.95 T
8 F
(\336) 381.13 736.95 T
3 F
(buffer start end end-of-) 395.98 736.95 T
(stream?) 63.65 722.95 T
0 F
([Generic function]) 442.68 722.95 T
-0.19 (Acquires an input buf) 81.65 696.72 P
-0.19 (fer from the underlying data source. The might be accomplished by allo-) 185.17 696.72 P
(cating a buf) 81.65 682.72 T
(fer and then \336lling it \050for a simple \336le stream implementation\051, or by taking an) 138.08 682.72 T
(already-\336lled buf) 81.65 668.72 T
(fer of) 164.41 668.72 T
(f a queue of buf) 190.51 668.72 T
(fers \050for example, for a network implementation\051.) 266.27 668.72 T
-0.39 (This may block for any number of reasons, such as blocking on order to \336ll the buf) 81.65 642.49 P
-0.39 (fer) 473.49 642.49 P
-0.39 (. If) 486.15 642.49 P
3 F
-0.39 (wait?) 502.36 642.49 P
0 F
(is true \050the default\051, this will block if necessary in order to \336ll the buf) 81.65 628.49 T
(fer) 413.72 628.49 T
(. If) 426.38 628.49 T
3 F
(wait?) 443.38 628.49 T
0 F
( is false, the) 470.05 628.49 T
(buf) 81.65 614.49 T
(fer will be returned in its current state, regardless of whether there is any data in it; note) 97.43 614.49 T
(that) 81.65 600.49 T
1 F
(str) 102.65 600.49 T
(eam-get-input-buffer) 116.42 600.49 T
0 F
( might return) 224.4 600.49 T
1 F
(#f) 290.06 600.49 T
0 F
( if it cannot get an input buf) 300.06 600.49 T
(fer in this case.) 433.5 600.49 T
(In the case when) 81.65 574.26 T
1 F
(str) 164.95 574.26 T
(eam-get-input-buffer) 178.73 574.26 T
0 F
( does not return) 286.7 574.26 T
1 F
(#f) 364.69 574.26 T
0 F
(, it will returns four values, the) 374.69 574.26 T
-0.4 (buf) 81.65 560.26 P
-0.4 (fer \050a) 97.43 560.26 P
1 F
-0.4 (<buffer>) 125.27 560.26 P
0 F
-0.4 (\051, the position within the buf) 170.94 560.26 P
-0.4 (fer \050an) 305.4 560.26 P
1 F
-0.4 (<buffer) 339.24 560.26 P
-0.4 (-index>) 377.63 560.26 P
0 F
-0.4 (\051 of the start of the data,) 416.47 560.26 P
-0.11 (and the limit within the buf) 81.65 546.26 P
-0.11 (fer \050an) 211.9 546.26 P
1 F
-0.11 (<buffer) 246.32 546.26 P
-0.11 (-index>) 284.71 546.26 P
0 F
-0.11 ( of the end of the data, and a boolean value) 323.56 546.26 P
-0.02 (that is) 81.65 532.26 P
1 F
-0.02 (#t) 113.62 532.26 P
0 F
-0.02 (only if the stream is at its end. In this case, the buf) 126.59 532.26 P
-0.02 (fer is guaranteed not to be empty;) 367.47 532.26 P
(it will have at least one element in it.) 81.65 518.26 T
1 F
(stream-deallocate-input-buffer) 63.65 486.03 T
3 F
( stream::<buffered-stream> buffer) 221.62 486.03 T
0 F
([Generic function]) 442.68 486.03 T
(Release the buf) 81.65 459.8 T
(fer back to the stream\325) 155.41 459.8 T
(s underlying data source.) 262.72 459.8 T
1 F
(stream-get-output-buffer) 63.65 427.57 T
3 F
(stream::<buffered-stream>) 195.28 427.57 T
0 F
(#key) 331.79 427.57 T
3 F
( wait?) 355.12 427.57 T
8 F
(\336) 387.79 427.57 T
3 F
(buffer start end) 402.64 427.57 T
0 F
-3 ([Generic) 489.67 427.57 P
(function]) 63.65 413.57 T
(Acquires an empty output buf) 81.65 387.34 T
(fer) 224.75 387.34 T
(on behalf of the underlying data sink. This might be accom-) 241.07 387.34 T
(plished by allocating a new buf) 81.65 373.34 T
(fer) 231.74 373.34 T
(, or taking one from a pool of output buf) 244.58 373.34 T
(fers.) 438.35 373.34 T
(This may block for any number of reasons, such as blocking on order to wait for a buf) 81.65 347.11 T
(fer in) 494.69 347.11 T
-0.15 (the pool of buf) 81.65 333.11 P
-0.15 (fers. If) 151.97 333.11 P
3 F
-0.15 (wait?) 186.64 333.11 P
0 F
-0.15 ( is true \050the default\051, this will block if necessary in order to get the) 213.32 333.11 P
-0.12 (buf) 81.65 319.11 P
-0.12 (fer) 97.43 319.11 P
-0.12 (. If) 110.09 319.11 P
3 F
-0.12 (wait?) 126.84 319.11 P
0 F
-0.12 ( is false, then) 153.51 319.11 P
1 F
-0.12 (str) 219.35 319.11 P
-0.12 (eam-get-output-buffer) 233.13 319.11 P
0 F
-0.12 ( might return) 347.76 319.11 P
1 F
-0.12 (#f) 413.06 319.11 P
0 F
-0.12 ( if it cannot get an out-) 423.06 319.11 P
(put buf) 81.65 305.11 T
(fer) 115.76 305.11 T
(.) 128.42 305.11 T
(In the case when) 81.65 278.88 T
1 F
(str) 164.95 278.88 T
(eam-get-output-buffer) 178.73 278.88 T
0 F
( does not return) 293.36 278.88 T
1 F
(#f) 371.35 278.88 T
0 F
(, it returns three values, the) 381.35 278.88 T
-0.4 (buf) 81.65 264.88 P
-0.4 (fer \050a) 97.43 264.88 P
1 F
-0.4 (<buffer>) 125.27 264.88 P
0 F
-0.4 (\051, the position within the buf) 170.94 264.88 P
-0.4 (fer \050an) 305.4 264.88 P
1 F
-0.4 (<buffer) 339.24 264.88 P
-0.4 (-index>) 377.63 264.88 P
0 F
-0.4 (\051 of the start of the data,) 416.47 264.88 P
(and the limit within the buf) 81.65 250.88 T
(fer \050an) 212.44 250.88 T
1 F
(<buffer) 247.08 250.88 T
(-index>) 285.47 250.88 T
0 F
(\051 of the end of the data. In this case, the) 324.31 250.88 T
(buf) 81.65 236.88 T
(fer will have room for the insertion of at least one element.) 97.43 236.88 T
1 F
(stream-deallocate-output-buffer) 63.65 204.64 T
3 F
( stream::<buffered-stream> buffer) 228.28 204.64 T
0 F
([Generic function]) 442.68 204.64 T
(Release the buf) 81.65 178.41 T
(fer back to the stream\325) 155.41 178.41 T
(s underlying data sink.) 262.72 178.41 T
1 F
(stream-send-output-buffer) 63.65 146.18 T
3 F
( stream::<buffered-stream> buffer end) 200.29 146.18 T
0 F
([Generic function]) 442.68 146.18 T
(Informs the underlying data sink that the contents of the buf) 81.65 119.95 T
(fer up through) 369.4 119.95 T
3 F
(end) 441.05 119.95 T
0 F
( can be sent to) 458.38 119.95 T
(the data sink. The buf) 81.65 105.95 T
(fer is then implicitly deallocated.) 185.75 105.95 T
1 F
(stream-send-output-buffer) 347.06 105.95 T
0 F
( is not) 483.71 105.95 T
(expected to wait for the output to complete.) 81.65 91.95 T
FMENDPAGE
%%EndPage: "24" 24
%%Page: "25" 25
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(25) 523.65 67.57 T
1 16 Q
(6.  Str) 63.65 734.29 T
(eam-Related Conditions) 104.69 734.29 T
0 12 Q
-0.22 (The class de\336nitions for the error conditions are as follows. There is no recovery protocol de\336ned) 63.65 706.89 P
(for any of these errors.) 63.65 692.89 T
1 F
(<end-of-stream-error>) 63.65 660.83 T
0 F
([Error]) 498.34 660.83 T
-0.21 (This error is signalled when one of the read functions reaches the end of the input stream. It is) 81.65 634.78 P
(a subclass of) 81.65 620.78 T
1 F
(<err) 145.97 620.78 T
(or>) 168.58 620.78 T
0 F
(. It takes one init keyword,) 186.74 620.78 T
1 F
(str) 318.06 620.78 T
(eam:) 331.84 620.78 T
0 F
(.) 357.16 620.78 T
1 F
(<incomplete-read-error>) 63.65 588.72 T
0 F
([Error]) 498.34 588.72 T
(This error is signalled when) 81.65 562.66 T
1 F
(r) 218.63 562.66 T
(ead-n) 223.74 562.66 T
0 F
( reaches the end of the input stream before it has read) 252.41 562.66 T
-0.3 (enough data. It is a subclass of) 81.65 548.66 P
1 F
-0.3 (<end-of-str) 229.54 548.66 P
-0.3 (eam-err) 286.82 548.66 P
-0.3 (or>) 327.91 548.66 P
0 F
-0.3 (. It takes two additional init keywords,) 346.07 548.66 P
1 F
(collection:) 81.65 534.66 T
0 F
( and) 134.3 534.66 T
1 F
(count:) 157.63 534.66 T
0 F
(.) 190.3 534.66 T
1 F
(<incomplete-write-error>) 63.65 502.6 T
0 F
([Error]) 498.34 502.6 T
-0.43 (This error is signalled when) 81.65 476.54 P
1 F
-0.43 (write-n) 216.49 476.54 P
0 F
-0.43 ( reaches the stream\325) 253.81 476.54 P
-0.43 (s limit before it has written all its data.) 347.5 476.54 P
(It is a subclass of) 81.65 462.54 T
1 F
(<end-of-str) 167.3 462.54 T
(eam-err) 224.58 462.54 T
(or>) 265.67 462.54 T
0 F
(. It takes one additional init keywords,) 283.84 462.54 T
1 F
(count:) 470.82 462.54 T
0 F
(.) 503.48 462.54 T
1 F
(<file-error>) 63.65 430.48 T
0 F
([Error]) 498.34 430.48 T
-0.17 (This is the base class for all \336le I/O-related errors. It is a subclass of) 81.65 404.42 P
1 F
-0.17 (<err) 408.39 404.42 P
-0.17 (or>) 430.99 404.42 P
0 F
-0.17 (. It takes one init) 449.16 404.42 P
(keyword,) 81.65 390.42 T
1 F
(pathname:) 129.64 390.42 T
0 F
(.) 184.97 390.42 T
1 F
(<file-exists-error>) 63.65 358.36 T
0 F
([Error]) 498.34 358.36 T
(This error is signalled when an output \336le stream creation function tries to create a \336le that) 81.65 332.31 T
(already exists. It is a subclass of) 81.65 318.31 T
1 F
(<\336le-err) 238.96 318.31 T
(or>) 280.9 318.31 T
0 F
(.) 299.06 318.31 T
1 F
(<file-does-not-exist-error>) 63.65 286.25 T
0 F
([Error]) 498.34 286.25 T
(This error is signalled when an input \336le stream creation function tries to read a \336le that does) 81.65 260.19 T
(not exist. It is a subclass of) 81.65 246.19 T
1 F
(<\336le-err) 214.31 246.19 T
(or>) 256.25 246.19 T
0 F
(.) 274.42 246.19 T
1 F
(<invalid-file-permissions-error>) 63.65 214.13 T
0 F
([Error]) 498.34 214.13 T
(This error is signalled when one of the \336le stream creation functions tries to access a \336le in a) 81.65 188.07 T
(manner for which the user does not have permission. It is a subclass of) 81.65 174.07 T
1 F
(<\336le-err) 423.92 174.07 T
(or>) 465.86 174.07 T
0 F
(.) 484.03 174.07 T
1 16 Q
(7.  W) 63.65 133.34 T
(rapper Str) 99.36 133.34 T
(eams) 171.5 133.34 T
0 12 Q
(One common programming problem is of conversions applied to streams, such as accessing the) 63.65 105.95 T
-0.09 (characters in an EBCDIC \336le as their ASCII equivalents or encrypting/decrypting the contents of) 63.65 91.95 P
FMENDPAGE
%%EndPage: "25" 25
%%Page: "26" 26
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(26) 523.65 67.57 T
0 12 Q
(a \336le. One way to handle such tasks is via) 63.65 736.95 T
3 F
(wrapper str) 267.29 736.95 T
(eams) 323.18 736.95 T
0 F
(. W) 347.84 736.95 T
(rapper streams hold on to some) 364.69 736.95 T
-0.19 (underlying stream, delegating to it most of the operations that implement streaming. The wrapper) 63.65 722.95 P
(stream then carries out appropriate processing in its own implementations of the streaming proto-) 63.65 708.95 T
(col. W) 63.65 694.95 T
(e propose a base class called) 94.68 694.95 T
1 F
(<wrapper) 234.64 694.95 T
(-str) 285.02 694.95 T
(eam>) 302.8 694.95 T
0 F
( upon which other wrapping streams can) 330.96 694.95 T
(be implemented.) 63.65 680.95 T
2 10 Q
(define class <wrapper-stream> \050<stream>\051) 99.65 662.29 T
(slot inner-stream :: <stream>, required-init-keyword: on:;) 117.65 650.29 T
(end class;) 99.65 638.29 T
0 12 Q
-0.05 (A subclass of) 63.65 612.95 P
1 F
-0.05 (<wrapper) 131.15 612.95 P
-0.05 (-str) 181.54 612.95 P
-0.05 (eam>) 199.32 612.95 P
0 F
-0.05 ( can \322pass on\323) 227.48 612.95 P
1 F
-0.05 (r) 299.26 612.95 P
-0.05 (ead) 304.37 612.95 P
0 F
-0.05 ( and) 322.37 612.95 P
1 F
-0.05 (write) 345.6 612.95 P
0 F
-0.05 ( by simply delegating these oper-) 372.25 612.95 P
(ations to the inner stream:) 63.65 598.95 T
2 10 Q
(define method read \050ws :: <read-write-wrapper-stream>\051;) 99.65 580.29 T
(read\050ws.inner-stream\051) 117.65 568.29 T
(end;) 99.65 556.29 T
(define method write \050ws :: <read-write-wrapper-stream>, element\051;) 99.65 532.29 T
(write\050ws.inner-stream,element\051) 117.65 520.29 T
(end;) 99.65 508.29 T
0 12 Q
(Assuming that) 63.65 482.95 T
1 F
(<r) 136.32 482.95 T
(ead-write-wrapper) 148.27 482.95 T
(-str) 244.46 482.95 T
(eam>) 262.24 482.95 T
0 F
( delegates all operations to its inner stream, the) 290.4 482.95 T
(following would suf) 63.65 468.95 T
(\336ce to implement a 16-bit Unicode character stream wrapping an 8-bit char-) 160.76 468.95 T
(acter stream.) 63.65 454.95 T
2 10 Q
(define class <unicode-stream> \050<wrapper-read-write-stream>\051 end;) 99.65 436.29 T
(define method read \050s :: <unicode-stream>\051) 99.65 412.29 T
8 F
(=>) 357.65 412.29 T
2 F
( <character>;) 368.63 412.29 T
(let first-char = read\050s.inner-stream\051;) 117.65 400.29 T
(let second-char = read\050s.inner-stream\051;) 117.65 388.29 T
(convert-ascii-pair-to-unicode\050first-char,second-char\051) 117.65 376.29 T
(end;) 99.65 364.29 T
(define method write \050s :: <unicode-stream>, c :: <character>\051) 99.65 340.29 T
8 F
(=>) 207.65 328.29 T
2 F
( <character>;) 218.63 328.29 T
(  let \050first-char, second-char\051 = convert-unicode-to-ascii-pair\050c\051;) 99.65 316.29 T
(  write\050s.inner-stream,first-char\051;) 99.65 304.29 T
(  write\050s.inner-stream,second-char\051;) 99.65 292.29 T
(  c) 99.65 280.29 T
(end;) 99.65 268.29 T
(define method position \050s :: <unicode-stream>\051) 99.65 244.29 T
8 F
(=>) 381.65 244.29 T
2 F
(<integer>;) 395.13 244.29 T
(  truncate/\050s.inner-stream.position,2\051) 99.65 232.29 T
(end;) 99.65 220.29 T
(define method position-setter \050p :: <integer>,s :: <unicode-stream>\051) 99.65 196.29 T
8 F
(=>) 207.65 184.29 T
2 F
( <integer>;) 218.63 184.29 T
(  s.inner-stream.position := p * 2) 99.65 172.29 T
(end;) 99.65 160.29 T
FMENDPAGE
%%EndPage: "26" 26
%%Page: "27" 27
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(27) 523.65 67.57 T
1 14 Q
(7.1  W) 63.65 735.62 T
(rapper Str) 101.9 735.62 T
(eams and Delegation) 165.02 735.62 T
0 12 Q
-0.24 (One problem with wrapper streams is the need for a wrapper stream to intercept methods invoked) 63.65 708.75 P
(by its inner stream. For example, consider two hypothetical streams,) 63.65 694.75 T
1 F
(<interactive-str) 394.61 694.75 T
(eam>) 473.87 694.75 T
0 F
( and) 502.03 694.75 T
1 F
(<dialog-str) 63.65 680.75 T
(eam>) 119.6 680.75 T
0 F
( \050which is a subclass of) 147.77 680.75 T
1 F
(<wrapper) 262.42 680.75 T
(-str) 312.8 680.75 T
(eam>) 330.58 680.75 T
0 F
(\051. Both of these classes have a) 358.74 680.75 T
(method called prompt.) 63.65 666.75 T
1 F
(<interactive-str) 174.97 666.75 T
(eam>) 254.23 666.75 T
0 F
( specializes) 282.4 666.75 T
1 F
(r) 340.38 666.75 T
(ead-n) 345.49 666.75 T
0 F
( thus:) 374.16 666.75 T
2 10 Q
(define method read-n \050s :: <interactive-stream>, n :: <integer>,) 99.65 647.89 T
(#key on-end-of-stream\051) 225.65 635.89 T
8 F
(=>) 363.65 635.89 T
2 F
(<collection>;) 377.13 635.89 T
(  prompt\050s\051;) 99.65 623.89 T
(  next-method\050\051) 99.65 611.89 T
(end;) 99.65 599.89 T
0 12 Q
(If a) 63.65 574.35 T
1 F
(<dialog-str) 82.97 574.35 T
(eam>) 138.92 574.35 T
0 F
(is used to wrap an) 169.87 574.35 T
1 F
(<interactive-str) 259.52 574.35 T
(eam>) 338.78 574.35 T
0 F
( then an invocation of) 366.94 574.35 T
1 F
(r) 474.6 574.35 T
(ead-n) 479.71 574.35 T
0 F
(on) 511.38 574.35 T
(the) 63.65 560.35 T
1 F
(<dialog-str) 81.31 560.35 T
(eam>) 137.27 560.35 T
0 F
( will call prompt on the inner) 165.43 560.35 T
1 F
(<interactive-str) 308.42 560.35 T
(eam>) 387.68 560.35 T
0 F
(, not on the) 415.85 560.35 T
1 F
(<dialog-) 472.85 560.35 T
-0.21 (str) 63.65 546.35 P
-0.21 (eam>) 77.42 546.35 P
0 F
-0.21 (, as desired. The problem is that the) 105.59 546.35 P
1 F
-0.21 (<dialog-str) 277.88 546.35 P
-0.21 (eam>) 333.84 546.35 P
0 F
-0.21 ( wants to delegate some tasks to its) 362 546.35 P
(inner stream, but handle some other tasks itself.) 63.65 532.35 T
(Some languages, notably Self, support such delegation in the language. Dylan, in keeping with) 63.65 506.15 T
(other generic-function-based languages, does not, but experience with streams packages in a) 63.65 492.15 T
(number of other generic-function-based languages has shown that it is) 63.65 478.15 T
3 F
(very) 403.58 478.15 T
0 F
( useful to provide del-) 424.24 478.15 T
(egation for wrapper streams. So we provide an explicit implementation of delegation in the) 63.65 464.15 T
(streams system.) 63.65 450.15 T
-0.08 (Delegation is implemented by the use of the) 63.65 423.95 P
1 F
-0.08 (outer) 277.69 423.95 P
-0.08 (-str) 304.57 423.95 P
-0.08 (eam) 322.35 423.95 P
0 F
-0.08 ( slot, which is de\336ned in the base class) 343.67 423.95 P
1 F
(<str) 63.65 409.95 T
(eam>) 84.26 409.95 T
0 F
(.) 112.43 409.95 T
2 10 Q
(define abstract class <stream> \050<object>\051) 99.65 391.09 T
(slot outer-stream :: <stream>, required-init-keyword: outer-stream:;) 117.65 379.09 T
(end class;) 99.65 367.09 T
1 12 Q
-0 (outer) 63.65 341.55 P
-0 (-str) 90.53 341.55 P
-0 (eam) 108.3 341.55 P
0 F
-0 ( is used instead of the stream itself whenever a stream invokes one of its other) 129.62 341.55 P
0 9.6 Q
-0 (7) 503.86 346.35 P
0 12 Q
-0 ( pro-) 508.66 341.55 P
-0.45 (tocol methods. For example, a correct implementation of the) 63.65 327.55 P
1 F
-0.45 (r) 353.24 327.55 P
-0.45 (ead-n) 358.36 327.55 P
0 F
-0.45 ( method in the example above) 387.02 327.55 P
(would be as follows:) 63.65 313.55 T
2 10 Q
(define method read-n \050stream :: <interactive-stream>, n :: <integer>) 99.65 294.68 T
(#key on-end-of-stream\051) 225.65 282.68 T
8 F
(=>) 189.65 270.68 T
2 F
( <collection>;) 200.63 270.68 T
(  prompt\050s.outer-stream\051;) 99.65 258.68 T
(  next-method\050\051) 99.65 246.68 T
(end method;) 99.65 234.68 T
0 12 Q
-0.04 (The) 63.65 209.15 P
1 F
-0.04 (initialize) 85.26 209.15 P
0 F
-0.04 ( method on) 129.27 209.15 P
1 F
-0.04 (<str) 186.14 209.15 P
-0.04 (eam>) 206.75 209.15 P
0 F
-0.04 ( is de\336ned to set the) 234.92 209.15 P
1 F
-0.04 (outer) 333.32 209.15 P
-0.04 (-str) 360.2 209.15 P
-0.04 (eam) 377.97 209.15 P
0 F
-0.04 ( slot to be the stream itself.) 399.29 209.15 P
-0.09 (The) 63.65 195.15 P
1 F
-0.09 (initialize) 85.22 195.15 P
0 F
-0.09 ( method on) 129.23 195.15 P
1 F
-0.09 (<wrapper) 185.97 195.15 P
-0.09 (-str) 236.36 195.15 P
-0.09 (eam>) 254.13 195.15 P
0 F
-0.09 ( is specialized to set the) 282.29 195.15 P
1 F
-0.09 (outer) 398.43 195.15 P
-0.09 (-str) 425.31 195.15 P
-0.09 (eam) 443.08 195.15 P
0 F
-0.09 ( slot to be the) 464.41 195.15 P
(\322parent\323 stream:) 63.65 181.15 T
2 10 Q
(define method initialize \050stream :: <wrapper-stream>,) 99.65 162.29 T
( #key on, #rest all-keys\051) 243.65 150.29 T
8 F
(=>) 399.65 150.29 T
2 F
( <stream>;) 410.63 150.29 T
(  an-inner-stream.outer-stream := stream;) 99.65 138.29 T
63.65 114.95 531.65 134.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 122.95 195.65 122.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(7.  A stream) 63.65 108.29 T
3 F
(must not) 115.03 108.29 T
0 F
( use inner) 149.2 108.29 T
(-stream if recursing since this would cause an in\336nite regress. No such recursion) 187.88 108.29 T
(occurs in the prototype streams implementation.) 63.65 96.29 T
FMENDPAGE
%%EndPage: "27" 27
%%Page: "28" 28
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(28) 523.65 67.57 T
2 10 Q
(  next-method\050\051) 99.65 738.29 T
(end;) 99.65 726.29 T
0 12 Q
(One disadvantage of this scheme is that it may prevent useful optimizations, such as inlining. If) 63.65 697.45 T
(this is an important performance issue in circumstances where wrapper streams are not needed) 63.65 683.45 T
-0.04 (then it is relatively simple to provide an implementation of the streams module that omits the del-) 63.65 669.45 P
(egation mechanism. An alternative is to provide the delegation mechanism as a mixin instead of) 63.65 655.45 T
(on the class) 63.65 641.45 T
1 F
(<str) 122.64 641.45 T
(eam>) 143.26 641.45 T
0 F
(, and delegating streams can be constructed explicitly) 171.42 641.45 T
(.) 427.26 641.45 T
1 16 Q
(8.  Acknowledgments) 63.65 597.29 T
0 12 Q
(W) 63.65 566.45 T
(e\325d like to thank the other people who have been instrumental in the production of this pro-) 74.02 566.45 T
(posal: Jonathan Bachrach, Dave Berry) 63.65 552.45 T
(, Bill Chiles, John Dunning, Chris Fry) 247.15 552.45 T
(, T) 429.4 552.45 T
(im McNerney) 442.31 552.45 T
(,) 508.51 552.45 T
(T) 63.65 538.45 T
(ony Mann, Keith Playford, and T) 70.14 538.45 T
(ucker W) 229.37 538.45 T
(ithington.) 269.87 538.45 T
1 16 Q
(9.  Open Issues) 63.65 494.29 T
0 12 Q
(Should a writable \336le stream whose element type is) 63.65 463.45 T
1 F
(<character>) 313.96 463.45 T
0 F
( \336ll with) 376.94 463.45 T
1 F
(<string>) 420.62 463.45 T
0 F
(\325) 464.3 463.45 T
(s default ele-) 467.64 463.45 T
(ment \050a space\051 when setting the stream\325) 63.65 449.45 T
(s position ahead past the current end of the \336le?) 253.61 449.45 T
1 F
(r) 63.65 419.95 T
(ead-n) 68.76 419.95 T
0 F
( is de\336ned to return a vector if the type of collection being streamed over is not mutable.) 97.43 419.95 T
(Should it return an instance of the collection\325) 63.65 405.95 T
(s) 279.96 405.95 T
1 F
(class-for) 287.63 405.95 T
(-copy) 330.5 405.95 T
0 F
( instead?) 358.5 405.95 T
(The Dylan language is not clear on the relation between the string classes and their underlying) 63.65 376.45 T
(character types. W) 63.65 362.45 T
(e think a proposal is pending from CMU that will clarify this situation.) 152.32 362.45 T
-0.21 (Read streams have a read limit, and write streams have a write limit, and access beyond these lim-) 63.65 332.95 P
(its is prevented by the implementation. Although a start position can be de\336ned \050via the) 63.65 318.95 T
1 F
(start:) 486.95 318.95 T
0 F
(keyword\051, repositioning a stream before the start is not prevented by the implementation. Should) 63.65 304.95 T
(this be disallowed, for example, via an explicit start slot in) 63.65 290.95 T
1 F
(<positionable-str) 347.29 290.95 T
(eam>) 433.92 290.95 T
0 F
(?) 462.08 290.95 T
(This proposal presents several condition classes, some of which relate to external errors, such as) 63.65 261.45 T
(attempting to open a non-existent \336le. Conceptually such conditions are subclasses of more gen-) 63.65 247.45 T
(eral conditions, such as) 63.65 233.45 T
1 F
(<operating- system-err) 178.63 233.45 T
(or>) 296.22 233.45 T
0 F
(. Should a richer condition heterarchy) 314.39 233.45 T
(,) 494.9 233.45 T
(encompassing the conditions in the streams proposal, be speci\336ed? \050Note that in modern Small-) 63.65 219.45 T
(talk-80 implementations and in Common Lisp, the equivalent condition hierarchy is much richer) 63.65 205.45 T
(than Dylan\325) 63.65 191.45 T
(s. For example, in Smalltalk, the division by zero condition is a subclass of a domain) 119.98 191.45 T
(error class, which is a subclass of the more general arithmetic error class.) 63.65 177.45 T
1 F
(r) 63.65 147.95 T
(eopen) 68.76 147.95 T
0 F
( can be used to ensure a \336le stream is open for reading and/or writing. In the Smalltalk) 98.76 147.95 T
(streams library) 63.65 133.95 T
(, any attempt to read and/or write to a \336le stream implicitly attempts to reopen the) 134.52 133.95 T
-0.12 (stream if it is closed. In this proposal, should reading and writing to a closed \336le raise a condition) 63.65 119.95 P
(or attempt to reopen? Note that checking has to be done in either case. For buf) 63.65 105.95 T
(fered streams,) 439.36 105.95 T
(should this checking be done on each write or only when a buf) 63.65 91.95 T
(fer) 364.04 91.95 T
(\325) 377.81 91.95 T
(s worth is read or written?) 381.14 91.95 T
FMENDPAGE
%%EndPage: "28" 28
%%Page: "29" 29
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 63.65 67.57 T
(November 8, 1994) 267.76 67.57 T
(29) 523.65 67.57 T
0 12 Q
(The default if-does-not-exist behavior for \336le streams is to signal an error for read-only streams,) 63.65 736.95 T
(and to create a new \336le for write and read-write streams. Is this appropriate? Should the default) 63.65 722.95 T
(behavior for read-write streams be to signal an error?) 63.65 708.95 T
1 F
(#"append") 63.65 682.95 T
0 F
( is currently de\336ned to provide Unix) 120.98 682.95 T
2 F
(open\0502\051) 298.63 682.95 T
0 F
( semantics, i.e., all subsequent writes) 349.03 682.95 T
(occur at the end of the \336le, always extending the \336le. This behavior is rare \050we know of no other) 63.65 668.95 T
-0.21 (operating systems that provide it\051 and broken in NFS \050it\325) 63.65 654.95 P
-0.21 (s an inherent problem in the V2 NFS pro-) 333.38 654.95 P
-0.02 (tocol\051. Should) 63.65 640.95 P
1 F
-0.02 (#"append") 134.62 640.95 P
0 F
-0.02 ( instead be de\336ned to simply position the \336le at the end after the \336le is) 191.95 640.95 P
(opened?) 63.65 626.95 T
-0 (Currently the buf) 63.65 600.95 P
-0 (fer management protocols specify that the consequences of one thread invoking) 146.08 600.95 P
(high-level stream functionality \050such as) 63.65 586.95 T
1 F
(r) 256.62 586.95 T
(ead) 261.73 586.95 T
0 F
(\051 while another thread holds a stream\325) 279.73 586.95 T
(s buf) 461.03 586.95 T
(fer are) 484.48 586.95 T
(unde\336ned. Should this be made thread-safe? \050That is, should the other thread be explicitly) 63.65 572.95 T
(excluded until the buf) 63.65 558.95 T
(fer is released?\051.) 168.42 558.95 T
(There is a general issue of choosing names. For instance, should the) 63.65 532.95 T
1 F
(str) 392.93 532.95 T
(eam-at-end?) 406.7 532.95 T
0 F
( function be) 470.69 532.95 T
(more concisely named) 63.65 518.95 T
1 F
(at-end?) 174.62 518.95 T
0 F
(, or does the shorter name not carry enough information? W) 213.29 518.95 T
(ill the) 500.41 518.95 T
(shorter names cause more name clashes in practice?) 63.65 504.95 T
FMENDPAGE
%%EndPage: "29" 29
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 29
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Courier
%%+ Times-Italic
%%+ Courier-Oblique
%%+ Helvetica-BoldOblique
%%+ Helvetica
%%+ Helvetica-Bold
%%+ Symbol
%%EOF
