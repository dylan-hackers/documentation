           COMMAND LINE OPTIONS FOR CONSOLE AND BATCH DEBUGGERS

                              Paul Howard
                         phoward@harlequin.co.uk
    Copyright: (c) 1997 Functional Objects, Inc. All Rights Reserved.
                       Version: February 18th 1998


Introduction
------------

This document describes the various command-line options that can be used
to modify the behaviour of the console-debug and batch-debug programs. All
of the options described here are acceptable by both debuggers, although
some are more appropriate to one or the other. Many of the options are
used to dictate the format of bug reports, and are therefore obviously
useful for batch-debug. Remember, however, that console-debug can also
produce bug reports (via the "br" command), and the command-line options
will also govern the format of reports produced by this route.

All options are defaulted, so it is possible to provide none at all.

If you provide options, you must ensure that the options all come _before_
the name of the target program (if supplied). Any command-line material
that _follows_ the name of the target program will be ignored, and passed
along to the target program itself. Apart from this, the ordering of the
command-line components is not important, except where otherwise stated below.

The options have been documented as being flagged with a hyphen (-), but
you can also indicate them with a forward slash character (/).


Options
-------

-spawn-console

  The target program will run in its own console window.
  Default for console-debug.


-share-console

  The program will share the debugger's own console window when it runs.
  Default for batch-debug.


-signalling-thread <detail-level>

  When generating a bug report, this option governs how detailed the report
  will be for the application thread which signalled the condition (or
  exception). Allowable options for <detail-level> are as follows:  

     ignore        - Ignore the thread completely. It will be mentioned in
                     the thread summary list, but no stack trace or register
                     information will be printed for it.

     summary       - Do not produce a stack trace for the thread, but show
                     its register set. In the case of a dylan thread, this
                     will also show the contents of the multiple-value
                     buffer.

     backtrace     - In addition to register and MV-buffer information,
                     produce an abridged stack trace for the thread. This
                     will print all types of stack frame, along with the
                     corresponding function names where applicable.

     verbose       - In addition to register and MV-buffer information,
                     produce a verbose stack trace, with the values of all
                     known local variables described

  The report for the signalling thread will always be generated first when
  more than one thread is present. The creation order of the threads can be
  determined by the thread summary list at the top of the bug report.

  Default for console-debug: verbose.
  Default for batch-debug: verbose.


-other-threads <detail-level>

  When generating bug reports, this option dictates how much detail will be
  provided by all threads that were present in the application at the time
  of the crash, except for the thread that signalled the condition.

  The allowable options for <detail-level> are precisely as for the
  -signalling-thread option.

  Default for console-debug: ignore.
  Default for batch-debug: verbose.


-noisy

  Causes a message to be displayed in the debugger's console window
  each time the application does one of the following:

     +  Creates or destroys a thread.
     +  Loads or unloads a shared library (DLL).

  (Note: the presence of this option can produce confusing output if you
  also supply the -share-console option).

  Default for console-debug.


-quiet

  The opposite of -noisy! Ensures that the debugger produces no messages
  in its console window under the circumstances described above.

  Default for batch-debug.


-messages <message-option>

  This option controls the echoing of messages communicated to the
  debugger from the application being debugged.

  Allowable options for <message-option> are as follows:

     none            - The default for batch-debug. Does not echo any of
                       the application's messages.

     application     - Echoes only those messages that are signalled to
                       the debugger by a system call (such as 
                       OutputDebugString on Win32). 

     debug           - Echoes only those messages that are signalled to the
                       debugger from the dylan function DEBUG-MESSAGE
                       (in the functional-extensions library).

     all             - The default for console-debug. Echoes all messages
                       from the application.


-interact

  When running console-debug, you are normally presented with the debugger's
  command prompt as soon as the target program has been fully mapped into
  memory, and loaded in its DLLs. This is a language-insensitive
  "initialization point" at which most debugger operations become legal.

  However, for dylan programs, one has to be aware that there is still a
  great deal of initialization work to do at this point, meaning that
  one or more of the following operations might either fail, produce
  unexpected behaviour, or even cause the debugger to crash!

    - Printing and describing defined objects (such as classes,
      constants, variables, generic functions).

    - Setting breakpoints on dylan methods or generic functions.

    - Using the "eval" command to call dylan functions.

    - Composing dylan objects in debugger commands, such as
      "print #['a', 'b', 'c', 'd', 'e', 'f', 'g']".

    - Using the "download" command to inject the contents of object files
      into the runtime.

  If you are debugging a dylan program, it's likely that you'll want access
  to these features straight away. If you supply the -interact option,
  the debugger will delay providing you with a command prompt until
  such time as it is safe to use the features listed. This will be a
  specially-arranged initialization point, characterized by the following
  state:

    - All statically-heaped data will be fully fixed up. This means that
      the debugger will not run into problems trying to interpret dylan
      objects.

    - The top-level forms will have been run for all providing libraries,
      but _not_ for the dylan executable itself. The main program will be
      poised to run as soon as you issue "continue".

  You'll have to wait slightly longer for the prompt, of course, but
  when it appears, all of the operations listed above should work
  reliably.

  Not default for either of batch-debug or console-debug. Highly recommended
  for console-debug.


-go

  For console-debug, you should use this option if you would like the
  debugee application to proceed straight away, without first stopping
  and giving you a command prompt. If you use this option, you will not
  get a debugger command prompt until you press the STOP button, or
  an error occurs in the application.
  
  (Note: Batch-debug will ignore this option. For console-debug, this
         option should not be used in conjunction with "-interact").


-limit-stack <maximum number of frames>

  Places a limit on the number of stack frames that will be displayed in 
  the trace for any thread in a bug report. 

  This limit does _not_ apply to stack traces produced with the "bt" and
  "bt v" commands.

  Default for batch-debug and console-debug: 1000 (ie. lots of frames).


-profile

  Switch on time profiling as soon as the target application starts up, and
  generate profiler results as soon as it terminates (whether normally
  or abnormally). This is really only useful in the context of batch-debug,
  since it's far better to use the profiling commands themselves in
  console-debug.

  Not default for either of batch-debug or console-debug.


-command <console debugger command within double quotes>

  Specifies a debugger command that is to be processed and executed in
  addition to generating the bug report. This allows bug reports to be
  customised with further information than is generated by default.

  The most obvious example is if you have a module variable holding an
  important data structure. You could ask for the contents of this
  variable to be appended to the bug report by:

   batch-debug -command "describe *var*:spam:spam" spam

  You can supply this option more than once on the command line. If you
  do, they will be executed in the supplied order, with each command
  echoed to the debugger's console window before the output from that 
  command is shown.  


-crossref-threshold <object size>

  In bug reports, it is often the case that the same object appears over
  and over again in various stack frames, having been passed as a
  parameter from one function to the next. When the object is very large,
  this generates a vast quantity of output, much of which is redundant.

  To prevent this, the debugger will occasionally cross-reference a
  local variable in a stack frame: instead of re-describing the object
  in place, it emits a short message telling you that the object is
  exactly the same as a local variable in another frame.

  By default, an object must have 50 slots or more (including repeated
  slots) before it will be considered large enough to be worth
  cross-referencing. The default can be overriden with this option.
  The number you supply should be a slot count.

  You should beware of making the count too small, since the amount of
  cross-references would be more confusing than useful. The underlying
  implementation would also become very slow after a while.

