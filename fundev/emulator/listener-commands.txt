LISTENER COMMANDS IN THE EMULATOR

The LispWorks listener commands for redoing input, showing history,
and navigating in the debugger are all avaiable to you in Dylan
listeners - use help: to get information on these. In addition, the
following are available:


LIBRARY LOADING

require: library-name ;

  Causes the named library to be loaded if it isn't already.

  Examples:

    63 ? require: dylan;

    64 ? require: literal-table;
    ; Loading text file zaphod-dylan/lib/literal-table/load.lisp
    ; Loading text file zaphod-dylan/lib/literal-table/defsys.lisp
    ;; Creating system dylan-literal-table
    [...]
    
    65 ? require: literal-table;

    66 ? 

reload: library-name ;

  Forces the named library to be loaded even if it has been already.

  Examples:

    65 ? require: literal-table;

    66 ? reload: literal-table;
    ; Loading text file zaphod-dylan/lib/literal-table/load.lisp
    ; Loading text file zaphod-dylan/lib/literal-table/defsys.lisp
    ;; Looking at system dylan-literal-table
    [...]

recompile: library-name ;

  Forces the named library to be recompiled even if it has been already.

  Examples:

    65 ? load: literal-table;

    66 ? recompile: literal-table;
    ; Compiling text file zaphod-dylan/lib/literal-table/load.lisp
    [...]

loaded: ;

  Displays a list of the libraries currently loaded into the emulator. 

  Examples:

    118 ? loaded:;
    Loaded libraries: alien, functional-dylan, stream, parser-run-time,
    transcendentals, functional-extensions, dylan, collectors,
    infix-reader, macro-expander, ratio, syntax-case, parser, mop and
    complex   

available: ;

  Scans the library registries and displays a list of libraries that
  are available for loading into the emulator.

  Examples:

    119 ? available:;
    Available libraries: collectors, infix-reader
    parser-run-time, macro-expander, doss, namespace, set, literal-table,
    equal-table, gap-list, c-compiler, step, union-collection,
    operating-system, c-back-end, front-end, functional-collection,
    doubly-linked-list, hll-back-end, streams, back-end, random, harp,
    back-end-support, functional-dylan, functional-extensions,
    harp-cg-back-end, pentium-harp, pentium-rtg, associations, idvm,
    timers, simple-grapher, doss-internals, doss-testing, translator-doss
    and pentium-harp-cg. 


FILE LOADING:

compile-file: file-name;

  Compiles and loads the specified file name.

  DYLANWORKS-USER 14 ? compile-file: "/u/andrewa/dylan/duim/examples/othello/module.dylan";
  ;;; Compiling file /u/andrewa/dylan/duim/examples/othello/module.dylan ...
  ;;; Safety = 3, Speed = 1, Space = 1, Float = 1, Interruptable = 0
  ;;; Compilation speed = 1, Debug = 3, Fixnum safety = 3, GC safety = 3
  ;;; Source level debugging is on 
  ;;; Source file recording is  on 
  ;;; Cross referencing is on
  ; (TOP-LEVEL-FORM 1)
  ; (TOP-LEVEL-FORM 2)
  ; Loading fasl file /u/ldisk/swm/dylan/duim/examples/othello/module.wfasl
  ;         into the DYLAN-USER module (derived from infix-dylan code)

load-file: file-name;

  Loads the specified file name, and compiles it if necessary.

  DYLANWORKS-USER 13 ? load-file: "/u/andrewa/dylan/duim/examples/othello/module.dylan";
  ; Loading text file /u/andrewa/dylan/duim/examples/othello/module.dylan
  ;         into the DYLAN-USER module (derived from infix-dylan code)


MODULE NAVIGATION

in: [module-name] ;

  If a module name is specified, the listener will switch context to
  the named module.  If the module name is not currently loaded, in:
  tries to require: a library with that name.  If no module name is
  specified, the current module context will be displayed.

  Examples:

    60 ? in:;
    Currently in the dylan module
    
    61 ? in: parser;
    Now in the parser module
    
    62 ? in:;
    Currently in the parser module

which: name ;

  Like the corresponding shell command, tells you the origin of the
  name you give it.

  Examples:

    8 ? which: <ratio>;
    The binding <ratio> resolves to <ratio> in the ratio module
    
    9 ? which: \+;
    The binding + resolves to + in the internal module
    
    10 ? which: gak;
    The binding gak resolves to gak in the dylanworks-user module


DEBUGGING

trace:      name [(type, ...)] ;
trace-here: name [(type, ...)] ;
break:      name [(type, ...)] ;
break-here: name [(type, ...)] ;

  Instigate tracing of a function or method. If just a name is given,
  the entire function is traced. If a parameter list of type names
  is specified, just the corresponding method is traced.

  The "-here" versions redirect trace output to the listener where
  the trace command was typed rather than have it appear on the
  output stream current at the call point. The "break" versions
  additionally cause a break into the debugger on entry.

  Known bugs: 

    Doesn't yet allow specification of singleton methods.

  Examples:

    11 ? define method wop (x :: <integer>) "integer!" end;
    
    12 ? define method wop (x :: <string>) "string!" end;
    
    13 ? wop(12);
    "integer!"
    
    14 ? wop("a");
    "string!"
    
    15 ? trace: wop(<string>);
    
    16 ? wop(12);
    "integer!"
    
    17 ? wop("a");
    0 (define-method dylan+dylan/dylanworks-user::wop (<string>)) > ("a")
    0 (define-method dylan+dylan/dylanworks-user::wop (<string>)) < ("string!")
    "string!"
    
    18 ? untrace: wop(<string>);
    
    19 ? wop("a");
    "string!"
    
    20 ? break: wop(<string>);
    
    21 ? wop(12);
    "integer!"
    
    22 ? wop("a");
    0 (define-method dylan+dylan/dylanworks-user::wop (<string>)) > ("a")
    
    Break on entry to (define-method dylan+dylan/dylanworks-user::wop (<string>)) with *traced-arglist* ("a").
      1 (continue) Return from break.
      2 Continue with trace removed.
      3 Continue traced with break removed.
      4 (abort) Return to level 0.
      5 return to top loop level 0.
      6 Destroy process.
    
    Type :c followed by a number to proceed or type :? for other options
    
    23 : 1 ? c: 2;
    0 (define-method dylan+dylan/dylanworks-user::wop (<string>)) < ("string!")
    "string!"
    
    24 ? wop("a");
    "string!"
    
    25 ? trace: wop;
    
    26 ? wop(12);
    0 dylan+dylan/dylanworks-user::wop > (12)
    0 dylan+dylan/dylanworks-user::wop < ("integer!")
    "integer!"
    
    27 ? wop("a");
    0 dylan+dylan/dylanworks-user::wop > ("a")
    0 dylan+dylan/dylanworks-user::wop < ("string!")
    "string!"
    
    28 ? trace: wop(<integer>);
    
    29 ? wop(12);
    0 dylan+dylan/dylanworks-user::wop > (12)
      1 (define-method dylan+dylan/dylanworks-user::wop (<integer>)) > (12)
      1 (define-method dylan+dylan/dylanworks-user::wop (<integer>)) < ("integer!")
    0 dylan+dylan/dylanworks-user::wop < ("integer!")
    "integer!"
    
    30 ? wop("a");
    0 dylan+dylan/dylanworks-user::wop > ("a")
    0 dylan+dylan/dylanworks-user::wop < ("string!")
    "string!"
    
    31 ? untrace:;
    
    32 ? wop(12);
    "integer!"
    
    33 ? wop("a");
    "string!"
    
untrace: [name [(type, ...)]] ;

  Disables tracing. If no function is specified, all active tracing
  in the system is removed. If a function or method is specified
  (see trace:) tracing is removed from that function or method only.

expand: expression ;

  Macroexpands the Dylan expression to one level if the operator
  names a macro and prints the (currently prefix) Dylan expansion. 

  Examples:

    69 ? expand: for (i from 1 to 10) print(i) end;
    (bind-methods
     ((finally (i) #f)
      (test-and-go (i i-limit i-increment)
       (if (and ((if (< i-increment 0) >= <=) i i-limit))
           (execute i i-limit i-increment) (finally i)))
      (execute (i i-limit i-increment)
       (if #f (finally i)
           (begin (begin (print i))
                  (test-and-go (+ i i-increment) i-limit i-increment)))))
     (bind nil (test-and-go 1 10 1)))

expand*: expression ;

  Just like expand except it continues to expand until the top level
  result is no longer a macro call.

translate: expression ;

  Prints the generated Lisp translation of the Dylan expression.

  Examples:

    67 ? translate: 1 + 3 * 4;
    (+ 1 (* 3 4))
    
    68 ? translate: define method wop (x :: <integer>) x + 1 end;
    (progn
      (dylan-ensure-generic wop (x) :module-name parser)
      (top-level-form (define-method dylan+dylan/parser::wop (<integer>))
                      (add-method (dylan-resolve wop :module-name parser)
                                  (dylan-method next-method (x)
                                                ((dylan-resolve <integer>
                                                                :module-name
                                                                parser))
                                                (progn)
                                                (declare
                                                 (system::source-level
                                                  #<eq Hash Table{0} 100B3324>))
                                                (declare
                                                 (lambda-name
                                                  (define-method
                                                   dylan+dylan/parser::wop
                                                   (<integer>))))
                                                (progn
                                                  (+ x 1)))))
      (values))

undefined: [module-name] ;

  Displays a list of names that have at some point in the past been 
  resolved to local bindings that have not been defined. This can be
  useful immediately after loading a library to get a list of any
  dangling references. 

  Examples:

    120 ? undefined:;
    Undefined in the collectors module: subclass, new-mark-wrapper,
    wrap, join-wrappers, syntax-error and *internal-context* 

    121 ? undefined: functional-extensions;
    Undefined in the functional-extensions module: syntax-error

undefine: name [(type, ...)] ;

  Undefines the variable "name" in the current module, or the method 
  on the generic function value of "name" if types are specified.

  Examples:

    73 ? define method foo (x) x + 1 end;

    74 ? undefine: foo;

    75 ? foo(12);

    Error: the function dylan+dylan/dylanworks-user::foo applied to 
    arguments (12) is undefined.
    [...]

    77 ? define method foo (x) x + 1 end;

    78 ? undefine: foo(<object>);

    79 ? foo(12);

    Error: No applicable methods for 
    #<standard-generic-function foo 100C3180> with args (12)
    [...]

describe: expression ;

  Calls cl:describe on the result of the expression.

  Examples:

    DYLANWORKS-USER 11 ? describe: #(1, 2, 3, 4);

    (1 2 3 4) is a LIST
    [0]   :  1
    [1]   :  2
    [2]   :  3
    [3]   :  4

inspect: expression ;

  Calls cl:inspect on the result of the expression. This behaves
  identically to a Lisp listener except that expressions are in Dylan
  syntax instead.

 Examples:

    DYLANWORKS-USER 12 ? define class <foo> (<object>)
			   slot foo-a = 10;
			   slot foo-b = #(1, 2, 3);
			 end class <foo>;

    DYLANWORKS-USER 13 ? inspect: make(<foo>);

    {instance of <foo>} is a <FOO>
    [FOO-B]   :  (1 2 3)
    [FOO-A]   :  10
    SYSTEM::INSPECT-EVAL 

    DYLANWORKS-USER 14 [inspect 1] ? foo-b;

    (1 2 3) is a LIST
    [0]   :  1
    [1]   :  2
    [2]   :  3
    SYSTEM::INSPECT-EVAL 

    DYLANWORKS-USER 15 [inspect 2] ? 2;

    3 is an INTEGER
    SYSTEM::INSPECT-EVAL 

    DYLANWORKS-USER 16 [inspect 3] ? 1:;

    DYLANWORKS-USER 17 ? 

browse: expression ;

  Launch the most specific available LispWorks browser on the given 
  object. The default is to launch the inspector tool if the
  environment is running, else to invoke cl:inspect.

  Examples:

    80 ? browse: <deque>;    // Class browser

    81 ? browse: make;       // Generic function browser

    82 ? browse: #(1, 2, 3); // Inspector

save: file-name ;

  Save the image into the specified file.

bye: ;

  Exit the image. An alternative to this is to use C-D to close the stream.
