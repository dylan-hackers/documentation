QUICKSTART GUIDE TO THE LW DYLAN EMULATOR

  This is a quickstart guide to help you up and at least walking with
  the LW Dylan emulator. There is more detailed documentation on
  modules, libraries, debugging, and listener commands which you will
  need to delve into at at some point.


OVERVIEW

  The LW Dylan emulator is our bootstrap route - a somewhat
  approximate processor of the Dylan language which allows us to work
  in Dylan while the native compiler and environment are still under
  development. 

  As such, enough to function but little more has been provided in the
  emulation as well as in the environment support. Many limitations
  are known and must be worked around. The environment provides
  listeners and some limited editor support but don't expect
  DylanWorks!

  If you have questions mail them to either the dylaners list or
  directly to me (keith). If you find a bug, mail a bug report to
  dylan-translator-bugs - the emulator provides the editor command
  "Emulator Bug" for this purpose.


LOADING

  Saved emulator images may be available for certain machines at your
  site - ask your local Dylan buildmeister for them:

    1cc:  Gary Palter (palter)
    2qc:  Simon Green (simong)
    hall: Keith Playford (keith)
  
  Failing that, the emulator can be loaded by loading the Lisp file:

    ~dylan/emulator/load.lisp

  into a 3.2 LW image, usually available as ~lclc/images/lw-3-2-1 at
  our sites. 

  If the Lisp file:

    ~dylan/emulator/main-resources 

  is loaded before the emulator and before starting the LW
  environment, a Dylan menu will appear on the podium bar providing 
  options for starting Dylan listeners. Selecting these options will
  result in the emulator being demand loaded if it hasn't been
  explicitly. 


LISTENERS

  Assuming the LW environment has been started (by calling
  (tools:start-lispworks) at a Lisp prompt), Dylan listeners can be
  created either via the Dylan podium menu options or by calling the
  Lisp functions:

    (dylan:infix-dylan-listen) ;; An infix listener
    (dylan:dylan-listen)       ;; A prefix listener

  On creation, listeners take the dylanworks-user module as their
  evaluation context. The full Dylan language is available here along
  with a few useful extensions including streams.

  Dylan listeners inherit the behaviour of ordinary Lisp listeners in
  terms of input editing and command line processing. Remember,
  though, that Dylan keyword syntax has a trailing colon rather
  than a leading colon as in Common Lisp. In an infix listener, all
  input expressions must be terminated by a semi-colon to be accepted
  and this is equally true of command line options. 

  An example transcript:

  > 1 ? define method double (i :: <integer>)
  >       i + i;
  >     end;
  > 
  > 2 ? double(2);
  > 4
  > 
  > 3 ? double("baa");
  > 
  > Error: No applicable methods for #<standard-generic-function
  > double 100A0B58> with args ("baa") 
  >   1 (continue) Call #<standard-generic-function double 100A0B58> again
  >   2 (abort) Return to level 0.
  >   3 return to top loop level 0.
  >   4 Destroy process.
  > 
  > Type :c followed by a number to proceed or type :? for other options
  > 
  > 4 : 1 ? define method double (s :: <string>)
  >           concatenate(s, s);
  >         end;
  > 
  > 5 : 1 ? c:;
  > "baabaa"
  > 
  > 6 ? map(double, #("baa", 2, 'c'));
  > 
  > Error: No applicable methods for #<standard-generic-function
  > double 100A0B58> with args (#\c) 
  >   1 (continue) Call #<standard-generic-function double 100A0B58> again
  >   2 (abort) Return to level 0.
  >   3 return to top loop level 0.
  >   4 Destroy process.
  > 
  > Type :c followed by a number to proceed or type :? for other options
  > 
  > 7 : 1 ? b:;
  > Call to cerror
  > Call to (method no-applicable-method (t))
  > Call to no-applicable-method
  > Call to map
  > Call to map
  > Call to eval
  > Call to dylan-eval
  > Call to tools::language-listener-top-level
  > Call to tools::make-language-listener
  > Call to clue:with-event-loop
  > Call to clue::with-event-loop-wrapper
  > Call to (subfunction 1 clue::process-run-window-function)
  > Call to funcall
  > Call to (subfunction 1 mp::initialize-process-stack)
  > 
  > 8 : 1 ? n: 3;
  > Call to map
  > 
  > 9 : 1 ? v:;
  > Call to map
  >    system::output-type-spec : list
  >    function                 : #<standard-generic-function double 100A0B58>
  >    system::first-sequence   : ("baa" 2 #\c)
  >    system::more-sequences   : nil
  > 
  > 10 : 1 ? error:;
  > No applicable methods for #<standard-generic-function double
  > 100A0B58> with args (#\c) 
  >   1 (continue) Call #<standard-generic-function double 100A0B58> again
  >   2 (abort) Return to level 0.
  >   3 return to top loop level 0.
  >   4 Destroy process.
  > 
  > Type :c followed by a number
  > nil
  > 
  > 11 : 1 ? c: 3;
  > 
  > 12 ? 

  Extra command line options are available in Dylan listeners that
  allow you to load libraries, navigate around modules and trace
  functions. See the listener commands documentation for a complete
  list. 

  As in LW, the echo area reports on malformed input expressions as
  it detects them. This is particularly useful in infix where
  unparsable forms due to typos are more common. The messages are of
  the form:

    Error while reading: unexpected <type> <token> after "<text> "

  For example:

    Error while reading: unexpected <literal> "27" after 
    "define method foo ( "

  If the <type> prints as a keyword, this indicates misuse of a
  reserved word. For example:

    Error while reading: unexpected :define "define" after 
    "define method foo ( " 

  Close listeners in the same way you would a Lisp listener - via the
  "Local" menu or the delete operatation of your window manager.


FILES

  Files with the file type .dylan are recognised as Dylan source
  files. All such files must have a header as specified in chapter 2
  of the Dylan Interim Reference Manual (DIRM). Source files are
  processed as infix-dylan unless explicitly declared as being in
  prefix syntax through the following header declaration: 

    Language: prefix-dylan

  When creating a new Dylan file in the editor, the editor command
  "Process File Options" should be run on the buffer after the header
  has been filled in in order for it to work out which mode
  (infix/prefix) to enter and which module context to assign to the
  buffer. This is analogous to forcing the editor to acknowledge a
  new "in-package" in a Lisp file. If files read from disk already
  contain header information, the appropriate mode and module context
  are determined and set up automatically. Where the Lisp modes
  display the buffer's package context in the modeline, the Dylan
  modes display the current module context.

  The file compilation and loading menu options work on Dylan (and
  Lisp) files from editors and Dylan listeners. Buffer compilation and
  evaluation works in Dylan mode, as does region compilation and
  evaluation. Definition and expression-level processing work on
  prefix files but in a very limited way only on infix.


LID FILES

  Library interface description files (lid's) can be used as simple
  system or makefile like devices. These look much like file headers
  and contain just a library name, a file list, and perhaps a
  description of the library it describes. For example:

    Library: foo
    File:    library
             foo-classes
             foo-functions

  Without a specified suffix, corresponding .dylan files are looked
  for to match the listed names. This can be overriden my adding an
  explicit suffix: 

    Library: foo
    File:    library
             hacks.lisp
             foo-classes
             foo-functions

  for example. 

  Load order is the order in which the names are listed. If a file
  needs recompiling because the source file has changed more recently
  than the binary (the only criterion the lid loader checks), all
  previous named files will be loaded before doing the compilation to
  ensure that any macro or module definitions have been seen.


SYSTEMS

  If you need to specify more complicated dependency systems, Lisp
  defsystems can be used for Dylan files using the file type
  specifier :dylan-file (dylan extension). For example:

    (defsystem dylan-tables (:default-type :dylan-file)
   
      :members ("table-module"
                "table-abstract"
                "default-table")

      :rules (...)

    )
