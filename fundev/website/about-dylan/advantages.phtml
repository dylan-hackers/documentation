<!doctype html public "-//W3C//DTD HTML 3.2//EN">
<!--#config errmsg="There has been an error.  Please notify webmaster@functionalobjects.com" -->
<?php $current_part = "resources";
   $current_sub = "advantages";
   $title = "Functional Objects, Inc.";
   $description = "Functional Objects -- software development tools combining ease of use with power and efficiency.";
   require "../config.php3";
?>

<?php include $top_inc ?>

<h2>Advantages of Dylan</h2>

<h3>Full Spectrum</h3>

<P>Dylan is the &quot;Write anything, do everything&quot; language:
from scripting and prototyping to robust application and component
development. Dylan can be customized to support targeted domains such
as games and business-to-business Internet solutions.  These
customizations can support non-programmers (e.g. scripting) while
allowing a gentle slope to complex programs of several hundred
thousand lines of code.  The transition from one to the other occurs
smoothly, without drastic breaks. No other mainstream languages
have this capability.</P>

<BLOCKQUOTE><UL>
  <LI>Dylan uses a high-level syntax. Dylan programs are easy to write,
  easy to read, and easy to maintain. Even those new to the language can
  quickly understand Dylan source code.<P></LI>

  <LI>Dylan is fully compiled. Dylan programs run as fast as programs
  written in other compiled languages, such as C and C++. Sealing
  declarations and type inference allow efficient compilation of code,
  even in the presence of objects. <P></LI>

  <LI>Dylan progresses smoothly from functional to object-oriented
  style.<P></LI>

  <LI>Dylan supports a philosophy of &quot;pay as you go,&quot; whereby
  the overhead of powerful features is incurred only upon use.<P></LI>
</UL></BLOCKQUOTE>

<h3>Simplicity and Consistency</h3>

<P>Dylan was designed to provide the smallest set of features that
meets its design goals. Dylan avoids special cases and artificial
constructs. Instead, it provides clean general mechanisms that can be
used for a variety of purposes and that encourage serendipity. This
approach makes the language easier to learn, and ultimately more
powerful.</P>

<BLOCKQUOTE><UL>
  <LI>Dylan is thoroughly object-oriented. Everything in Dylan is a
  first-class object, including classes, functions, methods, and
  numbers.<P></LI>

  <LI>Dylan has a regular and consistent expression-based syntax.<P></LI>
</UL></BLOCKQUOTE>

<h3>Power</h3>

<p>Dylan is a very high-level language providing many very powerful
features that maximize programmer's ability to develop software
quickly and naturally.</P>

<BLOCKQUOTE><UL>
  <LI>Dylan supports advanced object-oriented features like multiple
  inheritance and multimethods.  These features let you structure your
  programs to model the problem domain directly, rather than working
  around the limitations of your language.<P></LI>

  <LI>Exceptions are object-based. Handlers can resume or abort the code
  that signaled the exception.  The exception system is built on a
  documented substrate for non-local flow of control.<P></LI>

  <LI>Just as a function can accept multiple arguments when it is
  called, Dylan functions and other expressions can return multiple
  values. <P></LI>

  <LI>Dylan methods support optional <I>keyword arguments</I>, which may
  be provided in any combination and order, and <I>rest arguments</I>,
  which accept any number of additional values.<P></LI>

  <LI>Methods can be used to create <I>closures</I>, which remember the
  environment in which they were created. The closures can then be
  passed to other functions, stored in variables, etc., and they retain
  access to the original environment variables. This provides a
  lightweight way to bundle state with behavior.<P></LI>
</UL></BLOCKQUOTE>

<h3>Abstraction</h3>

<P>Beyond all else, Dylan was designed to help programmers create
efficient abstractions. An efficient abstraction is one that allows
programmers to think about their programs efficiently and that
simultaneously allows the compiler to generate efficient compiled
code. Dylan shows that you don't need to sacrifice clean code in the
name of performance. It is Dylan's ability to support efficient
abstractions that most distinguishes it from other languages. This
support makes Dylan programs substantially easier to write, maintain,
and extend, without sacrificing performance.</P>


<BLOCKQUOTE><UL>
  <LI>Dylan supports macros. The Dylan macro system lets you create
  customized embedded languages while ensuring the integrity of your
  software.<P></LI>

  <LI>Instance variables in Dylan are accessed purely through
  generic functions, so that they can be readily replaced or even
  overridden with methods.<P></LI>

  <LI>Dylan greatly simplifies the implementation of most Design Patterns,
  by providing first-class types, functions, multi-methods and macros.
  Some design patterns (for example Visitors, Command or Facade patterns)
  are directly modeled in the language, saving you the trouble and
  complication of coding them explicitly.<P></LI>

</UL></BLOCKQUOTE>

<h3>Modularity</h3>
<P>Dylan is well suited for component-based development.</P>

<BLOCKQUOTE><UL>
  <LI>Dylan programs are modular. The module system supports multiple
  interfaces with precise control over imports and exports, so clients
  are guaranteed to see only those objects which are appropriate. <P></LI>

  <LI>Behavior can be added to existing classes without subclassing or
  modifying the source code of those classes.  Access to the source code
  is not even required.  This is a direct result of the generic function
  object model.<P></LI>

  <LI>Dylan allows precise control over the ability to subclass classes
  and extend methods.  This improves security, efficiency, and
  readability of code.<P></LI>

  <LI>Dylan programs scale readily to very large applications.<P></LI>

  <LI>Dylan libraries map naturally onto native shared libraries.<P></LI>
</UL></BLOCKQUOTE>

<h3>Interactivity</h3>
<P>Dylan was designed with interaction in mind making it very natural
for scripting and incremental development.</P>

<BLOCKQUOTE><UL>
  <LI>Dylan has consistent syntax and has context-independent
  definitions, allowing individual statements and definitions to
  be conveniently presented to an interactor and compiled in an
  editor.<P></LI>

  <LI>Dylan programs may be dynamically-typed, allowing users to avoid types
  in interactive and/or prototyping situations.<P></LI>

  <LI>Dylan was designed to interact with a &quot;live&quot; delivered
  application across a tether, allowing the development environment
  to interact with and modify an application while it is running.<P></LI>
</UL></BLOCKQUOTE>


<?php include $bottom_inc ?>
