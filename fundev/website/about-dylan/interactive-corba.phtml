<!doctype html public "-//W3C//DTD HTML 3.2//EN">
<!--#config errmsg="There has been an error.  Please notify webmaster@functionalobjects.com" -->
<?php $current_part = "resources";
   $current_sub = "interactive-corba";
   $title = "Functional Objects, Inc.";
   $description = "Functional Objects -- software development tools combining ease of use with power and efficiency.";
   require "../config.php3";
?>

<?php include $top_inc ?>

<h1>Interacting with CORBA</h1>
<P>by Dr Jason Trenouth</P>
<h2>Introduction</h2>

<P>The Object Management Group's <a href="http://www.omg.org">Common Object Request Broker Architecture (CORBA)</a> is now a very popular and widely applied standard for building and organizing distributed software systems. Examples of companies using CORBA include:</P>
<ul>
<li><a href="http://www.iona.com/clientpart/clients/Boeing.html">Boeing's Commercial Airplane Group</a>
<li><a href="http://www.iona.com/clientpart/clients/HKT.html">Hong Kong Telecom</a>
<li><a href="http://www.iona.com/clientpart/clients/nike.html">Nike</a>
<li>...
<li><a href="http://www.corba.org/csshome.htm">and many more</a>
</ul>
<h2>Learning by Doing</h2>

<P>One result of this spreading adoption of CORBA and CORBA systems is the need for more programmers and technical staff to learn about the standard. For example, as of writing, there were over 3700 jobs or employment opportunities mentioning CORBA recently posted to
<a href="http://www.deja.com/[ST_rn=if]/topics_if.xp?search=topic&group=misc.jobs.offered&GRPP=925325112.1664614435&title=Related&query=misc.jobs.offered"> misc.jobs.offered</a>.</P>

<P>CORBA training courses are now being offered by a multitude of companies. Many CORBA books are now on sale from similarly large number of outlets, both physical and virtual, e.g. <A HREF="http://www.amazon.com/exec/obidos/external-search?tag=functionalobject&keyword=corba&mode=books">amazon.com</A>
 lists over 30. <a href="http://www.omg.org/corba/buyersguide/index.html">CORBA consultants</a> will parachute into your company to initiate employees into the hitherto esoteric world of object references, servants, and adapters.</P>

<P>However, what if you want to augment all this external input and do some self-driven study in your own time? What if you just want to experiment with CORBA yourself: explore it, test it, interact with it?</P>

<h2>Interactive Languages</h2>

<P>CORBA has mostly been associated with statically compiled languages, like C++ and Java. The IDL bindings of these languages describe how IDL interfaces and operations are translated into classes and methods. Programmers use the translated forms to connect components and build applications. Debugging takes it usual form. Programmers have to come to grips with differences between their language's object model and the CORBA object model as best they can.</P>

<P>An alternative is to use scripting languages (e.g. Perl, TCL, Python, etc) with IDL bindings. There are still relatively few CORBA-aware implementations of these and in any case the trade-off is the speed of interpreted code, little support for large scale programs, and either a rudimentary or nonexistent interactive development environment.</P>

<P>Enter interactive programming languages like Dylan, Common Lisp, and Smalltalk. When IDL bindings and native ORB implementations are combined with the natural linguistic power of these languages and their interactive development environments, they provide an ideal infrastructure in which to learn about CORBA and to rapidly build CORBA applications.</P>

<P>And CORBA itself is not the whole story. Once you have a service built upon CORBA technology you can go further and explore the application structures themselves and interact with legacy systems in ways that you could not before.</P>

<P>Interactive programming languages like Dylan, Common Lisp and Smalltalk provide the kind of immediate feedback that emancipates developers and frees them to roam over the application space without being constrained by having to build custom test beds or utilize restricted scripting languages.</P>

<h2>Example</h2>

<P>As an example let's take the usual banking application, the IDL for which is given in <a href="#appendixA">Appendix A</a>. Suppose also that you have an existing implementation of this bank service running. It doesn't matter which programming language the service is implemented in, or which ORB is exporting the interface, so long as you can interoperate with it using IIOP.</P>

<P>Using the Functional Developer project wizard, you can quickly create a project that acts as a dummy client to any IDL service. You just point the wizard at an IDL file and it will wrap a Dylan client project around it. This wizard-created project is basically an empty shell containing the IDL file.</P>

<P>You can then compile this new project and an IDL compiler, integrated into Functional Developer compiler, expands the IDL file into a subordinate project that implements all the stub machinery needed call the service.</P>

<P>You can do all the above in some of the emerging CORBA-aware IDE's for existing languages. However, the empty shell is just that: empty. You can't do anything with this project until you flesh it out with some code, compile it, test it, re-code it, etc. The usual batch compilation model. Even with an interpreted scripting language you may have to edit and rerun the script from the start.</P>

<P>What if you could just evaluate programming language expressions against the service in an interactive session?</P>

<h2>Interactive CORBA</h2>

<P>With Functional Developer you can interact with the possibly remote service in this manner by just opening a debugger or interactor on the empty client project.</P>

<P>In the annotated session transcript that follows, the user's expression comes first, after the &quot;?&quot; sign, and the return values are printed after the &quot;=&gt;&quot; symbol. For convenience, the interactor binds such results to automatically generated variables beginning with a &quot;$&quot; sign.</P>

<P>An administrative issue is that you must initialize the Dylan ORB in order to use it. How  do you do this? Well, exactly as you would do it in a full Dylan program. The standard CORBA pseudo operation <code>CORBA::orb_init</code> is mapped onto the Dylan function <code>corba/orb-init</code> and you can simply call it.</P>

<blockquote><code><pre>
? corba/orb-init(make(corba/&lt;arg-list&gt;), "Functional Developer ORB");
=&gt; $0 = {&lt;functional-dylan-orb&gt;}
   $1 = {&lt;stretchy-vector&gt;: size: 0}
</pre></code></blockquote>

<I><P>Aside: This is not being interpreted by the programming environment. Nor is it being byte-compiled to a virtual machine or anything else that amounts to less than the &quot;Full Monty&quot;. In Functional Developer, the statement has been compiled to native Intel x86 instructions, injected into the empty bank client shell, called into, and the return results have been captured for display and re-use in the interactor.  </P></I>

<P>An object representing the Dylan ORB is returned, and you will need to use this in later calls. Don't worry about the second result, that's just the empty argument list being returned.</P>

<P>Now, how should you get hold of a reference to an object in the server (in this case, a bank)? This is the first real issue. It is a bootstrapping issue and could be solved in various ways. For example, you could use a naming service, and this is the way to build scaleable CORBA applications.  However, for the purposes this quick tour you can take a more direct route. You can ask the service to provide an Interoperable Object Reference (IOR), in string form, when it is started. There is often a way to do this: e.g. via a special command line argument.</P>

<P>Okay, now suppose you have this stringified IOR. For it to be useful in our interactive session you will need to convert it into a real object reference. How can you do this? Well, it is just a trivial call to another standard CORBA operation <code>CORBA::ORB::string_to_object</code> that has been mapped into Dylan:</P>

<blockquote><code><pre>
? corba/orb/string-to-object($0, "paste a stringified ior here");
=&gt; $2 = {&lt;unspecific-object-reference&gt;}
</pre></code></blockquote>

<P>You might complain that you would not put hard-coded references (IORs) to services in your real client source. And you would be right. Customarily, the IOR would be read from some other place like the command line, a file, the Windows Registry, a CORBA Naming service, a CORBA Trader service, an email message, a HTML page, or wherever. For example, Functional Developer provides a utility function called <code>corba/orb/file-to-object</code> built on <code>corba/orb/string-to-object</code>  that reads the IOR from a file. However, in an interactive session things do not have to be so indirect and permanent. We can just call <code>corba/orb/string-to-object</code>directly and paste our string into the interactor at the right place.</P>

<P>Now, although this object reference knows that it identifies a bank at some level, the Dylan wrapper is unspecific. In order to pass this object to Dylan operations expecting a bank you must explicitly coerce it to look like one. (This may change in future so that <code>corba/orb/string-to-object</code> does automatic coercion when it is called in a program that has those IDL stubs linked into it.) How do you do this coercion? Well, the standard Dylan coercion function &quot;<code>as</code>&quot; is used, together with the desired type (mapped from <code>bankingdemo::bank</code>):</P>

<blockquote><code><pre>
? as(bankingdemo/&lt;bank&gt;, $2);
=&gt; $3 = {bankingdemo/&lt;bank-reference&gt;}
</pre></code></blockquote>

<P>So you now actually have a bank object in your hand. Well, strictly speaking the object is not in your hand it is in the interactor! But to be frank, it isn't really in the interactor either. The interactor is just modeling it and displaying a representation of it for you so that you can refer to it and inspect it. The real object is in the bank client shell that the environment, and hence the interactor, is tethered to. Well, even that's not completely true. The <I>real</I> object is in the server program that the bank client shell is connected to. The bank client only contains a proxy reference object that operations can be invoked on. In truth, with CORBA, we don't even know if a separate identifiable bank implementation object even exists in the server program. The server could be using several objects to implement the bank, or one object could be implementing the bank and something else. For all you know the bank could be a fourth program, e.g. a legacy COBOL application that is chatting to the CORBA server via file exchanges.</P>

<P>So perhaps it is easier if you think of the bank object as being in your hand after all!</P>

<P>But back to the session. Now you can actually interact with the banking system. Suppose you'd like to create a new account using the operation declared in the IDL: <code>bankingdemo::bank::newaccount</code>. How would you do this? Again, it is just a matter of calling the mapped Dylan function on our bank object:</P>

<blockquote><code><pre>
? bankingdemo/bank/openaccount($3, "Jo Blow");
=&gt; $4 = {bankingdemo/&lt;account-reference&gt;}
</pre></code></blockquote>

<P>This is exactly as you would write it in full Dylan program that was, say, implementing a GUI for the bank; apart from this use of a string literal for the account name and the terse automatic variable from the previous session result. </P>

<P>The result is an account object. You don't have to worry about what or where it really is (that way lies madness, as you've already seen). Together, the CORBA service and the Functional Developer environment are presenting you with a concrete abstraction (or is that an oxymoron!) of an account which you can directly manipulate. For example, you can use the programming environment inspect the contents of this object by right clicking on it and selecting &quot;Browse&quot;. It will show you exactly how little information there is in this proxy reference object. If you dig down enough you can find pieces of identity and remote location data, but you won't find the current account balance, for instance. So how would you get that information? </P>

<P>Well, to find the balance, or any attribute of a CORBA object you must call an IDL operation on it. That isn't strictly true since a single operation could return multiple pieces of data in a structure, which the client could access at leisure, but ultimately it is just a matter of definition. In this case we must call the Dylan function mapped from <code>bankingdemo::account::balance</code>:</P>

<blockquote><code><pre>
? bankingdemo/account/balance($4);
=&gt; $5 = 0
</pre></code></blockquote>

<P>Naturally, you've not done anything to this account, apart from create it, so it would be surprising if it contained anything other than zero currency units. Of course, banks often provide incentives or small gifts for opening accounts with them, but this elementary example doesn't attempt to model those shenanigans. If it helps to make the explanation seem more real or true to life, imagine that multiple arguments are returned, the second of which is a pen or device context with which a DUIM program could do some drawing!</P>

<P>But seriously, how would you deposit some money into the account? The answer is exactly as before, with a Dylan function mapped from the appropriate IDL operation:</P>

<blockquote><code><pre>
? bankingdemo/account/credit($4, 100);
=&gt; No Values
</pre></code></blockquote>

<P>And the perennially paranoid can recheck the account balance to make sure the bank has not made an error during the transaction:</P>

<blockquote><code><pre>
? bankingdemo/account/balance($4);
=&gt; $6 = 100
</pre></code></blockquote>

<P>But, you may ask, what happens if the operation signals an exception?  You can provoke this by trying to create another account with the same name.</P>

<blockquote><code><pre>
? bankingdemo/bank/opencheckingaccount($3, "Jo Blow", 100);
=&gt; // Waiting for return results
</pre></code></blockquote>

<P>The server now throws a CORBA exception whose Dylan type is <code>bankingdemo/bank/&lt;duplicate-account&gt;</code>. This is not handled by our client shell since there is no application code in it whatsoever, let alone something to take care of exceptions!</P>

<P>However, the Functional Developer debugger traps the exception and changes the debugger view so that you can see the stack backtrace as well as the interaction pane.</P>

<P>At this point you can choose to probe the error by expanding the stack frame representing the error call and double clicking on the condition object. This starts a browser in which you will be able to see the slots of the condition. In this case there are none, but you could use the &quot;Object&quot; menu to browse the class of this condition, and thence browse its superclasses, or whatever.</P>

<P>And just because you've encountered an error it does not mean that our experimentation is over or that you need to restart our client. Far from it.  You can simply abort this interaction via the debugger's &quot;Thread&quot; menu, switch the view back to see more of the interaction pane, and carry right on.</P>

<blockquote><code><pre>
? bankingdemo/bank/opencheckingaccount($3, "Jo Bloggs", 100);
=&gt; $7 = {bankingdemo/&lt;checkingaccount-reference&gt;}
? bankingdemo/account/debit($7, 50);
=&gt; No Values
? bankingdemo/account/balance($7);
$8 = -50
</pre></code></blockquote>

<P>Thus far you've been able to connect to a bank object, create a new account, and make a few operation calls. This is all very well, but a bit limited. Suppose that you wanted to prototype some of your application ideas, or test out some theories that require more than just a single function call? What would you do? You don't want to be forced back into an editor and batch-mode development. You'd like to be able to build up some application fragments in the session on the fly and see if they hold promise.</P>

<P>Fortunately, you can compile and run arbitrary Dylan code in the interactor so you could construct functions like the following, which returns the balance of a set of accounts.</P>

<blockquote><code><pre>
? define method accounts-total (accounts :: &lt;collection&gt;)
    let result = 0;
    for (acc in accounts)
      result := result + bankingdemo/account/balance(acc);
    end for;
    result;
  end method;
=&gt; No Values
</pre></code></blockquote>

<P>I assume you can see how that works by accumulating into the result variable? Actually, in Dylan, the above might be considered longhand. An alternative definition could have been:</P>

<blockquote><code><pre>
? define method accounts-total (accounts :: &lt;collection&gt;)
    reduce(\+, 0, map(bankingdemo/account/balance, accounts));
  end method;
</pre></code></blockquote>

<P>even though this computes an intermediate sequence of balances before summing them. Anyway, by entering one of the above definitions into the interactor, the definition is compiled to native Intel x86 code and added to the previously empty (and still running) bank client shell. You can now call this function just like any other you have already.</P>

<blockquote><code><pre>
? accounts-total(list($4, $7));
=&gt; $9 = 50;
</pre></code></blockquote>

<P>Suppose that your boss, or customer, really wants to have an application that computes the total balance given a set of account names. How could we build this on top of the IDL interface and the function we've just interactively created? It couldn't be simpler. First, observe that the IDL declares an operation <code>bankingdemo::bank::retrieveAccount</code> which, given a bank, converts an account name into an account object. The next step is to apply this to a list of account names:</P>

<blockquote><code><pre>
? define method retrieve-accounts
     (bank :: bankingdemo/&lt;bank&gt;, names :: &lt;collection&gt;)
    let accounts = #();
    for (nam in names)
      let acc = bankingdemo/bank/retrieveAccount(bank, nam);
      accounts := add!(accounts, acc);
    end for;
    accounts
  end method;
=&gt; No Values
</pre></code></blockquote>

<P>Can you see that this implementation for collecting the accounts mirrors the accumulator-style for the total balance? We can also write it in a more functional-style:</P>

<blockquote><code><pre>
? define method retrieve-accounts
     (bank :: bankingdemo/&lt;bank&gt;, names :: &lt;collection&gt;)
    map(curry(bankingdemo/bank/retrieveAccount, bank), names)
  end method;
=&gt; No Values
</pre></code></blockquote>

<P>A full explanation of the above method is beyond the scope of this short article. Instead the reader is referred to the <a href=<?php echo '"http://' . $_SERVER["SERVER__NAME"] . '/products/books.phtml#drm"'; ?>>Dylan Reference Manual</a>. (Hint: curry creates a specialized version of the <code>bankingdemo/bank/retrieveAccount</code> function with the bank already passed to it.). This component function can be tested straight away. No need to build it into a complete program:</P>

<blockquote><code><pre>
? retrieve-accounts($3, list(&quot;Jo Blow&quot;, &quot;Jo Bloggs&quot;));
=&gt; $10 = #({bankingdemo/&lt;account-reference&gt;},
           {bankingdemo/&lt;checkingaccount-reference&gt;})
</pre></code></blockquote>

<P>Now we can join the two pieces of our solution together and see if they work:</P>

<blockquote><code><pre>
? define method names-total
&#9;(bank :: bankingdemo/&lt;bank&gt;, names :: &lt;collection&gt;)
   accounts-total(retrieve-accounts(bank, names));
  end method;
=&gt; No Values
</pre></code></blockquote>

<P>And they do:</P>

<blockquote><code><pre>
? names-total($3, list(&quot;Jo Blow&quot;, &quot;Jo Bloggs&quot;));
=&gt; $11 = 50;
</pre></code></blockquote>

<P>But you had pretty good evidence that the final evaluation would work by being able to do bottom-up testing on the component parts of the implementation.</P>

<h2>From Interaction to Product</h2>

<P>As you can see, interactive languages like Dylan provide an ideal environment in which to learn about CORBA services. But this isn't all.</P>

<P>The understanding gained from interactive exploration can be transferred directly to application prototyping and even to product delivery. The exact same Dylan calls and definitions can be copied into source files and used to implement a real client with the sure knowledge that they have really been tested against the running server before you've even compiled the program!</P>

<P>So why not try out Dylan on your current CORBA service today?</P>

<a name="appendixA"><h2>Appendix A</h2></a>


<code><pre>

// Bank IDL

module BankingDemo {

interface account {

    readonly attribute string name;

    readonly attribute long balance;

    void credit (in unsigned long amount);

    exception refusal {string reason;}; 
    void debit (in long amount) 
       raises (refusal);
};

interface checkingAccount : account {
    readonly attribute long limit;
};

interface bank {

    readonly attribute string name;

    exception duplicateAccount{};

    account openAccount (in string name) 
       raises (duplicateAccount);

    checkingAccount openCheckingAccount(in string name, in long limit)
       raises (duplicateAccount);

    exception nonExistentAccount{};

    account retrieveAccount(in string name)
       raises (nonExistentAccount);   

    void closeAccount (in account account);
 };

};
</pre></code>

<?php include $bottom_inc ?>
