From haahr Thu Sep  7 15:00:42 1995
From: Paul Haahr <haahr>
Subject: assignment in the DFM
Date: Thu, 7 Sep 95 15:00:36 +0100

The problem:

We really want the DFM to be a ``single assignment'' form.  That is,
all temporaries should be defined and then never mutated.  We want
this because it makes many optimizations (common sub-expression
elimination, inlining, etc) significantly easier.  See the usual set
of SSA papers for details;  I can dig up references.

On the other hand, Dylan has assignment to locals, and we model locals
with temporaries.  Since the DFM doesn't have cycles (loops), we could
replace assignments *to variables which aren't closed over* with
new temporaries, in the same was as SSA code is usually generated.
But all the interesting cases in Dylan are when assigned variables are
closed over, especially because they're assigned to in loop bodies.

Instead, based on Keith's suggestion, I map our Dylan-esque DFM into
one that matches how ML, at the language level, with references
(mutable variables):  all temporaries which are assigned to are
replaced with temporaries referring to boxed values.

The current approach:

I introduced three primitives:

  make-box t => box		// create a box, containing t
  get-box-value box => t	// return the value inside the box
  set-box-value! box t => t	// set the value inside the box

There is a new compiler pass (eliminate-assignments) which traveres a
DFM graph and does the rewriting.

Here's an example of what happens:

  begin let a = 13; a := 42; a end; => // before
    [BIND]
    t0 := ^13
    t1 := ^42
    @a := t1
    return t0
  
  begin let a = 13; a := 42; a end; => // after
    [BIND]
    t0 := ^13
    t1 := [PRIMOP primitive-make-box(t0)]
    t2 := ^42
    [PRIMOP primitive-set-box-value!(t1, t2)]
    t3 := [PRIMOP primitive-get-box-value(t1)] // tail call
    return t3

The eliminate-assignments pass should happen before any of the
``interesting'' optimizations, and should never need to be done twice
on the same piece of code.

What remains to be done:

We probably want to turn these primitives into DFM computations before
trying to do any optimizations on them.

make-box currently allocates the boxed cell in the heap.  It should
really allocate the cell either a closure or stack frame, depending on
whether the box has dynamic extent.  If the temporary the box is bound
to (t1 in the example above) is only used as with get-box-value and
set-box-value!, then we know that the box has the same extent as that
temporary.  I'm don't think that all optimizations will preserve that
property, but it will probably be maintained most of the time.

When we have temporaries which aren't closed over, most of the time we
should be able to do SSA-like elimination of assignments, rewriting
them by introducing new temporaries.  For example, assignment inside a
conditional can produce something like this

  begin let a = 1; if (p?) a := 2 else end; a end; =>
    [BIND]
    t2 := ^1
    t8 := [PRIMOP primitive-make-box(t2)]
    t9 := ^p?
    if (t9) goto L1 else goto L2
    L1:
    t13 := ^2
    t11 := [PRIMOP primitive-set-box-value!(t8, t13)]
    L0:
    [MERGE t11 t14]
    t10 := [PRIMOP primitive-get-box-value(t8)] // tail call
    return t10
    L2:
    t14 := ^&#f
    goto L0
    
but that should be easy to turn into
    
    [BIND]
    t1 := ^p?
    if (t1) goto L1 else goto L2
    L1:
    t2 := ^2
    L0:
    t4 := [MERGE t2 t3]
    return t4
    L2:
    t3 := ^1
    goto L0

This sort of optimization, in the absence of cycles, is pretty easy.
It may be more work making it happen for loops built up from tail
calls, but still not as bad as SSA conversion in general.


