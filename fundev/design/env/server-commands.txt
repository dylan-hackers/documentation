Author:    Hugh Greene
Synopsis:  API description for environment "server commands".
Copyright: 1997 Functional Objects, Inc.  All rights reserved.

* Introduction

This document gives a (currently abbreviated) reference-style
description of the commands which the environment is to make available
through its server interface.  It is intended as a guide to
implementors of the commands and of the various server frontends and
command-parsers.

This document and the API it describes are "under construction".

** Not covered

This document doesn't cover UI or configuration issues.  Some of the
configuration options would (I think) ideally be settable from within
the editor, so perhaps it should address these.


* Reference

This section describes each command in the standard reference format.
It also includes a "Priority" section, ranging from 1 to 4.
Lower-numbered priority commands are scheduled to be implemented
sooner.

Some "Arguments" have been marked with a '?'.  This means that I think
the implementors of the commands may need this information, but I'm
not sure.  Please let me know if you need different arguments from
those suggested; similarly if you would prefere different return
values or behaviour.

** Common Arguments

Most (or all) of the commands described below take the following
arguments as their first three required arguments.  They are described
here to avoid repetition.  If there's any doubt about whether or how
they apply to a certain command, let me know.

  Arguments:

    _client-id_	:: <object>, which identifies which server interface
		(or other source) called the command function.  This
		is intended mostly for debugging purposes, so commands
		can ignore it.

    _file_	:: <string>, a complete file name, in an OS-specific
		format.

    _name_	:: <string>, a Dylan NAME.

    _co-ords_?	:: <???>, the line (and column?) position of the start
		(and end?) of the _name_ in the _file_.

It occurs to me that, if DylanWorks allows more than one project to be
open at once, we may need to specify a project name in addition to the
above.  Once project context is established, the interchange format
header in _file_ (or the compiler products database?) should be enough
to establish module and hence library context.  [BTW, does Dylan allow
a module to be in more than one library?  Do we allow more than one
library per project (or compilation-unit)?]

All _name_s are assumed to be part of module bindings (except perhaps
for DOCUMENTATION?).

It may also be necessary to add an argument which specifies how to
return values to the caller (e.g., by using an established callback,
by issuing separate editor commands, etc.).  For now, the return
values described below can be ignored, but it might be useful if
implementors could allow for returning the information in the future.


** Command Reference Entries

DESCRIBE					[Generic function]

  Priority:	1

  Summary:	Provides brief, context- and type-specific information
		for a NAME.

  Module:	ENVIRONMENT-COMMANDS

  Library:	ENVIRONMENT-MANAGER

  Signature:	DESCRIBE
		    _client-id_ _file_ _name_ _co-ords_?
		 => _description_

  Arguments:

    _client-id_, _file_, _name_ and _co-ords_
		See "Common Arguments" above.

  Values:

    _description_	:: <???>, a brief description of _name_.

  Exceptions:	None.

  Description:

  Provides the user with a brief description of the NAME, taking into
  account its library and module context.

  A proposal for the UI used to display the description is provided in
  "D-doc-editor!describer.txt".  This also describes in detail the
  form of the description for each <TYPE> of object and various
  configuration options.


COMPLETE					[Generic function]

  Priority:	2

  Summary:	Provides possbile completions of a partial name in a
		given module and library context.

  Module:	ENVIRONMENT-COMMANDS

  Library:	ENVIRONMENT-MANAGER

  Signature:	COMPLETE
		    _client-id_ _file_ _name_ _co-ords_
		 => _complete-names_

  Arguments:

    _client-id_, _file_, _name_ and _co-ords_
		See "Common Arguments" above.

  Values:

    _complete-names_	:: limited(<sequence>, of: <string>), a list
		of (possibly partial) NAMEs, which exist in the
		library and module of which _file_ contains a source
		record, and of which _name_ is an initial substring.

  Exceptions:	None.

  Description:

  Provides the user with a list of possible completions for _name_,
  taking library and module context into account.  Optionally [where
  to set the option?], this will either return all possible full
  completions or, if all of them have a unique initial substring
  longer than _name_, will return that substring, requiring a second
  invocation to provide all full completions.

  It is expected that initially DylanWorks will have to display
  completions itself, rather than within the editor.  Later, smarter
  editors may display then in-editor, hence the proposed return
  value.  It is still unclear in general how values will be returned
  to external editors.

  A proposal for the UI used to display the description is provided in
  "D-doc-editor!completer.txt".  This also describes various
  configuration options.


FIND-REFERENCES					[Generic function]

  Priority:	1 for find-definition, 2 for find-uses

  Summary:	Finds the definition or the uses of a NAME, or
		both[?].

  Module:	ENVIRONMENT-COMMANDS

  Library:	ENVIRONMENT-MANAGER

  Signature:	FIND-REFERENCES
		    _client-id_ _file_ _name_ _co-ords_ _ref-kind_
		 => No values

  Arguments:

    _client-id_, _file_, _name_ and _co-ords_
		See "Common Arguments" above.

    _ref-kind_	:: one-of(#"definitions", #"uses", #"both"), states
		whether do provide only the definition(s) of _name_,
		or its uses, or both.

  Values:	None.

  Exceptions:	None.

  Description:

  Provides the user with a list of references (definition(s), uses or
  both) to _name_.  A NAME may have more than one definition if it is
  the name of a function (since generic functions may have several
  methods; they may also have no explicit definition); several
  defintions may also be found if searching is configured to look
  outside the "use tree", for definitions which are not "really"
  visible from the location of _name_.

  I have sent out a separate email on all sorts of implications and
  complications of searching for names in a DylanWorks project -- it's
  available in HOPE as "D-doc-design-env!search-ideas.txt".  A
  suggested simple UI would be to list the location of all references
  found, and provide buttons for "Edit", "Browse" and "Close", plus
  the usual context menu.


COMPILE						[Generic function]

  Priority:	1 for whole files and arbitrary regions, 3 for single
		definitions.

  Summary:	Compile some amout of source code related to _file_.

  Module:	ENVIRONMENT-COMMANDS

  Library:	ENVIRONMENT-MANAGER

  Signature:	COMPILE
		    _client-id_ _file_ _name_ _co-ords_ _what_
		 => _output_

  Arguments:

    _client-id_, _file_, _name_ [unused?] and _co-ords_
		See "Common Arguments" above.

    _what_	:: one-of(#"region", #"file", #"project-changes",
		          #"project-all", #"project-target"),
		determines the compilation action required.

  Values:

    _output_	:: <string???>, contains a compilation log including,
		e.g., compiler warnings.

  Exceptions:	None.

  Description:

  Causes DylanWorks to compile some amount of source code related to
  _file_.  For all of these, some project context is particularly
  important.

    - #"region": compile the region of text within _file_ marked by
      _co-ords_.

    - #"file": compile the entire contents of _file_.  (Also available
      by using the "Build->Compile selection" Project Controller menu
      item on a source record object, I believe.)

    - #"project-changes": compile any changes in the project(s)
      currently open in DylanWorks, of which _file_ is a part.  This
      may, of course, not result in the compilation of _file_.
      [Should probably warn if there are no or several such projects.]
      (Also available via the "Build->Compile changes" Project
      Controller menu item.)

    - #"project-all": compile the entire project(s) currently open in
      DylanWorks, of which _file_ is a part, whether or not anything
      has changed since the last compilation.  [Should probably warn
      if there are no or several such projects.]  (Also available via
      the "Build->Compile all" Project Controller menu item.)

    - #"project-target": I think this means "compile changes and then
      link to executable (or whatever)", but I'm not sure.

  Perhaps the "compile changes vs. force compile" difference should be
  separated out into a separate argument.  "Compile changes" wouldn't
  make much sense for regions, but it could do for files and
  project-targets. 

  The DEEP specification also described a "compile definition"
  operation.  I suggest that this be performed simply by selecting a
  whole definition (automatically, for smart editors) and then using
  the #"region" option.  An alternative would be to add a
  #"definition" category and have DylanWorks use the _co-ords_ to work
  out which definition was referred to.

  Interactive compilation, e.g., within an Interactor, is not and will
  not be covered by this operation.


DOCUMENTATION					[Generic function]

  Priority:	2

  Summary:	Show online documentation for some NAME.

  Module:	ENVIRONMENT-COMMANDS

  Library:	ENVIRONMENT-MANAGER

  Signature:	DOCUMENTATION
		    _client-id_ _file_ _name_ _co-ords_ _doc-source_?
		 => No values.

  Arguments:

    _client-id_, _file_, _name_ [unused?] and _co-ords_
		See "Common Arguments" above.

    _doc-source_	:: <???>, specifies which documentation
		source(s) to consult.

  Values:	None.

  Exceptions:	None.

  Description:

  Causes DylanWorks to display on-line documentation related to some
  NAME.  We may have several sources of online documentation (DRM and
  our extensions at least), so we might want to allow the user
  to search only some subset.  This might be configurable only within
  DylanWorks or the Help Tool, whatever it is.

  QUESTION: Are we including documentation of DylanWorks itself in
  this search?

  We may later want to add a way to search for a more free-form string
  or "regular expression" and/or to just launch the online doc
  browser, if we think it's too much of a context-switch for the user
  to select a DylanWorks window instead of an editor to do that.


BROWSE						[Generic function]

  Priority:	1

  Summary:	Launch a DylanWorks Object Browser on a name.

  Module:	ENVIRONMENT-COMMANDS

  Library:	ENVIRONMENT-MANAGER

  Signature:	BROWSE
		    _client-id_ _file_ _name_ _co-ords_
		 => No values.

  Arguments:

    _client-id_, _file_, _name_ [unused?] and _co-ords_
		See "Common Arguments" above.

  Values:	None.

  Exceptions:	None.

  Description:

  Causes DylanWorks to "browse" _name_, opening a new Object Browser
  if needed.

  QUESTION: Should I be adding a separate "BROWSE-CLASS" command (or
  option to this command), since the environment's context menu
  currently has such an item? 

  QUESTION: Do we also want a "Properties..." command, to match the
  one on the context menu?


...						[Generic function]

  Priority:	

  Summary:	[This is a place-holder for adding new descriptions.]

  Module:	ENVIRONMENT-COMMANDS

  Library:	ENVIRONMENT-MANAGER

  Signature:	

  Arguments:



  Values:



  Exceptions:	

  Description:
