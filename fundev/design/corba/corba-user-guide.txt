* PREFACE

** PRODUCT

Functional Developer ORB (HD-ORB) 1.2 is an implementation of the Object Management
Group's (OMG) Common Object Request Broker Architecture
(CORBA). HD-ORB provides CORBA functionality to Dylan programmers,
combining standardized distributed system development with a
state-of-the-art dynamic object-functional language.

*** PARTS

The CORBA components that are included in HD 1.2 Enterprise Edition are:

    1. An IDL compiler

	This comes in two forms:

	(i) some DLLs linked into the Functional Developer development
	environment, and console Dylan compiler, to allow IDL files
	to be included in Dylan projects. This integrates CORBA into
	the Functional Developer project manager and build system.

	(ii) a standalone IDL compiler called:

		console-scepter.exe

	in the "Bin" directory of the installation.

    2. A ORB runtime library

	This is a single DLL called:

		d1orb.dll

	in the "Redistributable" directory of the installation.

    3. Some example CORBA projects including:

		hello-world
		chat
		bank

	in the "Examples" directory of the installation.

    4. A "CORBA User Guide". (This document)


** AUDIENCE

The HD-ORB User Guide is intended for use by application programmers
who wish to build CORBA applications using Dylan. The guide assumes
that the reader is familiar with both the Dylan programming language
and with building distributed applications using CORBA.

** STANDARDS COMPLIANCE

HD-ORB 1.2 conforms to the CORBA 2.0 specification with some elements
of CORBA 2.2 -- most notably the Portable Object Adaptor (POA). Work
is underway to complete CORBA 2.2 compliance. See
<URL:http://www.omg.org/corba/c2indx.htm>.

* CHAPTER 0: INTRODUCTION

** THE OBJECT MANAGEMENT GROUP AND CORBA

In the OMG's own words:

"The Common Object Request Broker Architecture (CORBA), is the Object
Management Group's answer to the need for interoperability among the
rapidly proliferating number of hardware and software products
available today. Simply stated, CORBA allows applications to
communicate with one another no matter where they are located or who
has designed them. CORBA 1.1 was introduced in 1991 by Object
Management Group (OMG) and defined the Interface Definition Language
(IDL) and the Application Programming Interfaces (API) that enable
client/server object interaction within a specific implementation of
an Object Request Broker (ORB). CORBA 2.0, adopted in December of
1994, defines true interoperability by specifying how ORBs from
different vendors can interoperate.

The (ORB) is the middleware that establishes the client-server
relationships between objects. Using an ORB, a client can
transparently invoke a method on a server object, which can be on the
same machine or across a network. The ORB intercepts the call and is
responsible for finding an object that can implement the request, pass
it the parameters, invoke its method, and return the results. The
client does not have to be aware of where the object is located, its
programming language, its operating system, or any other system
aspects that are not part of an object's interface. In so doing, the
ORB provides interoperability between applications on different
machines in heterogeneous distributed environments and seamlessly
interconnects multiple object systems.

In fielding typical client/server applications, developers use their
own design or a recognized standard to define the protocol to be used
between the devices. Protocol definition depends on the implementation
language, network transport and a dozen other factors. ORBs simplify
this process. With an ORB, the protocol is defined through the
application interfaces via a single implementation
language-independent specification, the IDL. And ORBs provide
flexibility. They let programmers choose the most appropriate
operating system, execution environment and even programming language
to use for each component of a system under construction. More
importantly, they allow the integration of existing components. In an
ORB-based solution, developers simply model the legacy component using
the same IDL they use for creating new objects, then write "wrapper"
code that translates between the standardized bus and the legacy
interfaces.

..."

** Functional Developer ORB

Functional Objects has a CORBA-compliant, native-IIOP, ORB written in Dylan.

The Functional Developer ORB will let you build and run distributed
applications in Dylan, straight out of the box. When combined with the
Dylan ODBC interface, that comes with Functional Developer Professional and
upwards, you are able to build 3-tier client-server applications
completely in Dylan.

However, the raison d'etre of CORBA is interoperability. Hence, the
choice of IIOP provides immediate interoperation with any other ORB
you may be using.  For example, given a Java ORB you could write GUI
clients in AWT that communicate to servers written in Dylan.
Conversely, given a C++ ORB you can build DUIM clients that talk to
C++ servers.

The advantages of building an ORB in Dylan (apart from proving that
Dylan could tackle another complex domain) were:

	ORB-vendor independence -- The Functional Developer ORB can be
	married to any existing ORB infrastructure, or introduced
	first without affecting later ORB procurement decisions.

	"Batteries included" -- No need to purchase a separate ORB to
	get a full system. The Functional Developer ORB provides "instant
	CORBA" to get distributed Dylan applications up and running
	without additional procurement or installation.

	Lower impedance mismatch -- No need to trampoline from Dylan
	to IIOP via another language binding or via a non-Dylan IIOP
	engine API.

	CORBA expertise -- A deeper understanding of CORBA inside
	Function Developer Which can be shared with our customers via technical
	support.

	CORBA customization -- Functional Objects likes to offer a high level
	of customization support and consultancy to both internal and
	external customers which it could not do with a third party
	product written in a more primitive language. This also means
	faster fixes for basic bugs.

	100% pure Dylan -- Providing users with enhanced debugging and
	interaction facilities available in a homogeneous
	implementation model.

** FEATURES

The following features are supported in Functional Developer 1.2 final,
Enterprise edition:

	CORBA 2.0 with parts of CORBA 2.2 (notably the POA)
	IIOP 1.0 (GIOP 1.0)
	Portable Object Adapter (POA)
	Dynamic Invocation Interface (DII)
	Dynamic Skeleton Interface (DSI)
	Dylan Language Binding

* CHAPTER 2: IDL TO DYLAN MAPPING

	<pull out Specification and Example sections
	from Jason's D-doc-design-corba!idl-dylan-binding.doc>

	<Or keep this as separate document?>

* CHAPTER 3: CREATING CORBA PROJECTS

A CORBA project is a project which requires the use of protocol, stubs
or skeletons code generated from IDL. The project can include
information about the IDL source so that the Functional Developer
Environment can automatically invoke its IDL compiler to generate the
required Dylan code.

Information about IDL source files and IDL compiler switches are
described in a Functional Developer Tool Specification file. These files
are not only used to describe IDL to a project. For example, they may
be used to describe COM Type Libraries to a project. For CORBA
projects, specification files can be generated by hand and inserted
into projects using the "Insert File ..." menu item in the project
window. More simply, the New Project wizard can be used to generate a
client and/or server project for a given IDL file, including the
necessary specification files.

Creating CORBA projects with the New Project Wizard
===================================================

1. Choose File > New... from the main window. 

2. Select Project and click OK. 

The New Project wizard appears. 

3. In the Project Type section, select "Interface to CORBA IDL file"
and click Next.

[Insert screenshot of CORBA page here.]

4. Choose a CORBA IDL file on which to base the project. The file
will be copied into the project directory which you choose on the next
page (or left there if it is already in that directory).
Alternatively, you can have the wizard generate a blank IDL file for
you.

5. Choose whether to generate a client or server project, or both.
These will be created in directories called "client" and "server",
within the project directory.

You can choose which of the libraries generated from the IDL file will
be used by the client and server projects. You can also change some
advanced settings, which translate to Command Line Arguments in the
project's Debug Settings as follows (see the section [ORB RUNTIME
SWITCHES, below] for details).

  Trace ORB operation			-ORBtrace

  Suppress co-location optimization	-ORBno-co-location

  Debug server errors			-ORBdebug

  Use alternative port number		-ORBport <number>

[Insert screenshot of Advanced ORB Settings dialog here.]

6. Click Next and continue with the wizard as normal.  Note that
project settings and library choices will apply to both generated
projects.  If you want the two projects to have different settings or
use different libraries, you must create one and then the other.

As with COM projects, the interface code will not be generated until
you build your client or server project.


Specification files for CORBA
=============================

The first line of a specification file must contain the "Origin:"
keyword. In the context of describing IDL source files to CORBA
projects, the value of this keyword must be "OMG-IDL". There is only
one other required keyword in this context and that is
"IDL-file:". The value of this keyword must be a pathname to the IDL
source file. The pathname is interpreted relative to the directory in
which the specification file is located. Each specification file may
include only one IDL source file. However, projects may have more than
one specification file.

Thus, an example of the minimal possible specification file for IDL is:

  Origin:     OMG-IDL
  IDL-file:   ..\bank\bank.idl

By default the IDL compiler will generate three projects, one for each
library that must be generated according to the Dylan IDL binding. All
three of these projects will become subprojects of the CORBA project.

The projects will be placed in subdirectories named protocol, stubs
and skeletons in the same directory that the IDL source file is
located. There are specification file options which allow some control
over where the subdirectories are located and what they should be
called.

The next sections describe keyword options that are specific to
writing a CORBA client or a CORBA server project.


CORBA server keywords
=====================

To indicate that the CORBA project contains a server implementation
for the IDL source file use the keyword "Skeletons:" with the value
"yes". This will ensure the IDL compiler generates the skeletons
library from the IDL source. The skeletons project will automatically
be added as subproject of the CORBA project.

  Skeletons:  yes


CORBA client keywords
=====================

To indicate that the CORBA project is a client of the service
described by the IDL source use the keyword "Stubs:" with the value
"yes". This will ensure the IDL compiler generates the stubs library
from the IDL source. The stubs project will automatically be added as
a subproject of the CORBA project.

  Stubs:      yes


Sometimes the CORBA client may need to use the skeletons generated
from the IDL source; for example, where the IDL defines a callback
interface which the client must implement. In this case the
"Skeletons:" keyword should also be included in the specification
file with the value "yes".

  Stubs:      yes
  Skeletons:  yes


Using only the protocol library
===============================

The protocol library is available separately for projects wishing to
make use of the Dylan framework generated from the IDL without
necessarily using an ORB for communication. For example, an
application team may wish to introduce the discipline of an IDL
description early on in the project lifecycle so that development work
on the clients and servers can proceed in parallel using dummy local
implementations of the other components.

A CORBA project may indicate it is interested only in the protocol
library by using the "Protocol:" keyword with the value "yes". The IDL
compiler will ensure the protocol library is generated, but will not
generate the stubs or skeletons libraries unless the "Stubs:" or
"Skeletons:" keywords are also present and have the value "yes". The
protocol library will automatically be added as a subproject of the
CORBA project.



* CHAPTER 4: COMPILING CORBA PROJECTS

In a CORBA project, the IDL compiler will be invoked automatically by
the Functional Developer Envionment or the console compiler when the CORBA
project is built. The IDL compiler will not regenerate the stubs,
skeletons or protocol libraries if they are up-to-date with respect to
the IDL source file. However, it will ensure that the libraries
required by the CORBA project have been generated.

If a specification file is changed, this will force the IDL compiler
to regenerate code from the IDL source even if the IDL source itself
has not changed. This is necessary becuase some options in the
specification file may cause the generated code to change e.g. the
"IDprefix:" keyword.

Specification files may include the "clean:" keyword which may take
the values "yes" or "no". This will force the IDL compiler to
regenerate code from the IDL every time the CORBA project is
built. This means that the generated libraries and the CORBA project
will be recompiled by the Dylan compiler. The default value for this
keyword is "no".


** IDL COMPILER SWITCHES

IDL compiler switches are controlled by keywords in the Functional
Developer Tool Specification files. As mentioned above, for CORBA IDL
source files the first line of the specification file should contain
the "Origin:" keyword with the value OMG-IDL.

  Origin:  OMG-IDL

There is only one other required keyword. This is the "IDL-file:"
keyword which indicates where the location of the IDL source
file. This should be a pathname relative to the directory in which
the specification file is located. Only one IDL source file may be
included in each specification file.

  IDL-file:  ..\bank\bank.idl

The rest of the keywords are optional:

  directory:  <directory>
    By default the IDL compiler puts the Dylan projects it generates
    into subdirectories in the same directory as the IDL source file.
    You can force it to put the subdirectories in another directory
    using this option.

  prefix:     <directory-prefix>
    The default names for the subdirectories are "protocol", "stubs"
    and "skeletons". You may specify a prefix for these names with
    this option. The prefix will be appended with a '-' character.
    This might be useful, for example, where you want to put the
    project subdirectories from more than one IDL file into a
    common directory.

  idprefix:   <prefix-string>
    Unfortunately, the IDL compiler does not yet support #pragma
    directives. This option is a substitute for the prefix pragma
    directive. It sets the prefix for generated repository IDs
    as if the first line of the IDL file were:
      #pragma prefix <prefix-string>

  include:    <directory>
    Adds <directory> to the search path list which the preprocessor
    uses to find files mentioned in #include directives.


The values of the following keywords all default to "no":

  case:       yes | no
    By default the IDL compiler ignores case when recognising keywords
    and identifiers, but when this option is set to "yes", the
    characters in identifiers and keywords must have exactly the same
    case as the identifer or keyword definition in order to be
    recognised.

  clean:      yes | no
    If "yes", forces the IDL compiler to regenerate code irrespective
    of whether or not it thinks any generated code that exists is
    up-to-date with respect to the IDL source file.

  protocol:   yes | no
    If "yes", this option will ensure the IDL compiler generates the
    protocol library from the IDL source. The protocol project will
    be added as a subproject of the CORBA project. This option
    should be used by projects that wish to use the Dylan framework
    generated from the IDL source but not the stubs or skeletons
    code.

  stubs:      yes | no
    If "yes" this option will ensure the IDL compiler generates the
    protocol and stubs libraries from the IDL source. The stubs
    project will be added as a subproject of the CORBA project. This
    option should be used by projects that wish to be a client of
    the service described by the IDL source.

  skeletons:  yes | no
    If "yes" this option will ensure the IDL compiler generates the
    protocol, stubs and skeletons library from the IDL source. The
    skeletons project will automatically be added as a subproject of
    the CORBA project. This option should be used by projects that
    contain a server implementation for the IDL source.



* CHAPTER 5: RUNNING AND DEBUGGING CORBA APPLICATIONS

** USING Functional Developer
		
	<xref debugging client/server applications>

** ORB THREADING MODEL

	<insert something here>

** ORB RUNTIME SWITCHES

The full set of command line arguments that the Dylan ORB currently
supports are listed below. When running the application under the
control of Functional Developer, these command-line options can be set via
the "Project/Settings..." dialog using "Command Line Arguments" field
on the "Debug" tab.

	-ORBtrace

		Turns on debug messages inside the ORB.  These are
		mainly internal debugging messages, but may help you
		to understand what is going on inside the ORB, or help
		you report problems to technical support.

	-ORBdebug

		Suppresses handling of application implementation
		errors in server code. That is, instead of them being
		translated into CORBA exceptions for transmission to
		the client, they are left unhandled in the server so
		that they can be debugged.

	-ORBport <number>

		Sets default socket port for listening. The default default
		port number registered with IANA for harlequinorb is 3672.

	-ORBid <name>

		Sets name of ORB.

	-ORBno-co-location

		Suppresses co-location optimization. ie forces the ORB
		to always use sockets and IIOP marshalling even when
		it might have detected an in-process server.

The next command line options are concerned with the initial services
offered by the ORB.

	-ORBname-service-file <filename>

		Sets filename containing IOR for name service. The
		string in the file is converted to an object reference
		and returned by
		CORBA/ORB/ResolveInitialServices("NameService"). This
		option persists from session to session via the
		Windows Registry.

	-ORBname-service <ior> (*)

		Sets IOR for name service (takes precedence over
		file-based alternative above). The string is converted
		to an object reference and returned by
		CORBA/ORB/ResolveInitialServices("NameService"). This
		option persists from session to session via the
		Windows Registry.

	-ORBinterface-repository-file <filename> (*)

		Sets filename containing IOR for interface
		repository. The string in the file is converted to an
		object reference and returned by
		CORBA/ORB/ResolveInitialServices("InterfaceRepository"). This
		option persists from session to session via the
		Windows Registry.

	-ORBinterface-repository <ior> (*)

		Sets IOR for interface repository (takes precedence
		over file-based alternative above). The string is
		converted to an object reference and returned by
		CORBA/ORB/ResolveInitialServices("InterfaceRepository"). This
		option persists from session to session via the
		Windows Registry.

	-ORBsettings

		Prints out a list of the configuration options to stdout.

