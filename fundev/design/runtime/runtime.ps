%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
%	FMquit  % Uncomment this line for traditional Frame failure behaviour
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 14 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /Helvetica FMFONTDEFINE
2 0 /Times-Bold FMFONTDEFINE
3 0 /Times-Roman FMFONTDEFINE
4 0 /Times-Italic FMFONTDEFINE
5 0 /Courier-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(1) 526.09 84.9 T
1 24 Q
(Har) 123.42 728.95 T
(lequin Dylan Runtime Design) 162.44 728.95 T
63.65 666.95 531.65 682.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
225.65 669.95 381.65 669.95 2 L
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(T) 192.69 687.62 T
(on) 200.12 687.62 T
(y Mann, Jonathan Bac) 216.95 687.62 T
(hrac) 364.62 687.62 T
(h) 394.05 687.62 T
63.65 619.95 531.65 635.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
225.65 622.95 381.65 622.95 2 L
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin, Ltd.) 248.64 640.62 T
63.65 572.95 531.65 588.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
225.65 575.95 381.65 575.95 2 L
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(4 December 1995) 240.45 593.62 T
0 15 Q
(1.) 63.65 532.95 T
(Contents) 90.65 532.95 T
2 12 Q
(1.) 74.45 509.95 T
(Contents) 90.65 509.95 T
(1) 148.64 509.95 T
(2.) 74.45 489.95 T
(W) 90.65 489.95 T
(ar) 101.87 489.95 T
(ning) 113.02 489.95 T
(2) 147.7 489.95 T
(3.) 74.45 469.95 T
(The Dylan Implementation Model) 90.65 469.95 T
(2) 276.98 469.95 T
3 11 Q
(3.1) 90.65 456.62 T
(Object Representation) 117.65 456.62 T
(2) 226.71 456.62 T
3 10 Q
(3.1.1) 117.65 444.29 T
(T) 144.65 444.29 T
(agging Scheme) 149.96 444.29 T
(3) 221.34 444.29 T
(3.1.2) 117.65 432.29 T
(Inte) 144.65 432.29 T
(gers and Characters) 160.05 432.29 T
(3) 248.91 432.29 T
(3.1.3) 117.65 420.29 T
(Box) 144.65 420.29 T
(ed Objects) 161.17 420.29 T
(3) 213.66 420.29 T
(3.1.4) 117.65 408.29 T
(V) 144.65 408.29 T
(ariably Sized Objects) 150.76 408.29 T
(4) 246.3 408.29 T
(3.1.5) 117.65 396.29 T
(Function Objects) 144.65 396.29 T
(5) 223.26 396.29 T
3 11 Q
(3.2) 90.65 383.62 T
(Calling Con) 117.65 383.62 T
(v) 170.69 383.62 T
(ention) 176.02 383.62 T
(5) 214.52 383.62 T
3 10 Q
(3.2.1) 117.65 371.29 T
(Some terminology) 144.65 371.29 T
(5) 228.82 371.29 T
(3.2.2) 117.65 359.29 T
(The re) 144.65 359.29 T
(gister model) 170.32 359.29 T
(5) 230.04 359.29 T
(3.2.3) 117.65 347.29 T
(The ar) 144.65 347.29 T
(gument passing con) 170.29 347.29 T
(v) 249.33 347.29 T
(entions) 254.18 347.29 T
(6) 293.07 347.29 T
(3.2.4) 117.65 335.29 T
(Calling Con) 144.65 335.29 T
(v) 192.87 335.29 T
(ention Goals) 197.72 335.29 T
(6) 258.55 335.29 T
(3.2.5) 117.65 323.29 T
(The External Entry Point Con) 144.65 323.29 T
(v) 263.69 323.29 T
(ention) 268.54 323.29 T
(7) 303.54 323.29 T
(3.2.6) 117.65 311.29 T
(Internal Entry Point Con) 144.65 311.29 T
(v) 242.86 311.29 T
(ention) 247.71 311.29 T
(7) 282.71 311.29 T
(3.2.7) 117.65 299.29 T
(The Method Entry Point Con) 144.65 299.29 T
(v) 260.92 299.29 T
(ention) 265.77 299.29 T
(8) 300.77 299.29 T
3 11 Q
(3.3) 90.65 286.62 T
(Special Features) 117.65 286.62 T
(8) 201.05 286.62 T
3 10 Q
(3.3.1) 117.65 274.29 T
(Introduction to bind-e) 144.65 274.29 T
(xit and unwind-protect) 232.27 274.29 T
(8) 333.37 274.29 T
(3.3.2) 117.65 262.29 T
(unwind-protect) 144.65 262.29 T
(9) 215.75 262.29 T
(3.3.3) 117.65 250.29 T
(bind-e) 144.65 250.29 T
(xit) 170.05 250.29 T
(10) 190.61 250.29 T
(3.3.4) 117.65 238.29 T
(Multiple V) 144.65 238.29 T
(alues) 187.71 238.29 T
(10) 218.26 238.29 T
3 11 Q
(3.4) 90.65 225.62 T
(Name Mangling) 117.65 225.62 T
(11) 200.45 225.62 T
2 12 Q
(4.) 74.45 205.95 T
(In-line Call Caches) 90.65 205.95 T
(12) 200.65 205.95 T
(5.) 74.45 185.95 T
(Static Booting) 90.65 185.95 T
(12) 174.98 185.95 T
(6.) 74.45 165.95 T
(FFI) 90.65 165.95 T
(12) 121.98 165.95 T
(7.) 74.45 145.95 T
(Allocation) 90.65 145.95 T
(12) 155.32 145.95 T
(8.) 74.45 125.95 T
(HARP instruction set) 90.65 125.95 T
(12) 212.64 125.95 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(2) 63.65 84.9 T
2 12 Q
(9.) 74.45 736.95 T
(Compiler Support f) 90.65 736.95 T
(or Thr) 191.02 736.95 T
(eads) 225.13 736.95 T
(13) 259.8 736.95 T
3 11 Q
(9.1) 90.65 723.62 T
(Dylan Portability Interf) 117.65 723.62 T
(ace) 220.81 723.62 T
(13) 246.46 723.62 T
3 10 Q
(9.1.1) 117.65 711.29 T
(Portability and Runtime Layers) 144.65 711.29 T
(13) 280.48 711.29 T
(9.1.2) 117.65 699.29 T
(Dylan T) 144.65 699.29 T
(ypes for Threads Portability) 176.9 699.29 T
(14) 298.83 699.29 T
3 11 Q
(9.2) 90.65 686.62 T
(Compiler Support for the Portability Interf) 117.65 686.62 T
(ace) 304.83 686.62 T
(15) 330.49 686.62 T
3 10 Q
(9.2.1) 117.65 674.29 T
(The Compiler Flo) 144.65 674.29 T
(w Graph) 216.07 674.29 T
(15) 260.78 674.29 T
(9.2.2) 117.65 662.29 T
(Compiler Support for Atomic and Fluid V) 144.65 662.29 T
(ariables) 312.43 662.29 T
(16) 353.53 662.29 T
(9.2.3) 117.65 650.29 T
(Compiler Support for Primiti) 144.65 650.29 T
(v) 260.8 650.29 T
(es) 265.65 650.29 T
(16) 283.98 650.29 T
3 11 Q
(9.3) 90.65 637.62 T
(Support for Dylan Language Features) 117.65 637.62 T
(17) 294.84 637.62 T
3 10 Q
(9.3.1) 117.65 625.29 T
(Interf) 144.65 625.29 T
(acing to F) 166.76 625.29 T
(oreign Code) 206.61 625.29 T
(17) 265.77 625.29 T
(9.3.2) 117.65 613.29 T
(Finalization) 144.65 613.29 T
(18) 202.43 613.29 T
2 12 Q
(10.) 74.45 593.95 T
(Runtime System Functions) 90.65 593.95 T
(18) 240.65 593.95 T
3 11 Q
(10.1) 90.65 580.62 T
(Primiti) 117.65 580.62 T
(v) 147.94 580.62 T
(e Functions for the threads library) 153.28 580.62 T
(18) 313.67 580.62 T
3 10 Q
(10.1.1) 117.65 568.29 T
(Threads) 144.65 568.29 T
(18) 186.86 568.29 T
(10.1.2) 117.65 556.29 T
(Simple Locks) 144.65 556.29 T
(21) 209.93 556.29 T
(10.1.3) 117.65 544.29 T
(Recursi) 144.65 544.29 T
(v) 174.95 544.29 T
(e Locks) 179.8 544.29 T
(23) 221.18 544.29 T
(10.1.4) 117.65 532.29 T
(Semaphores) 144.65 532.29 T
(25) 203.53 532.29 T
(10.1.5) 117.65 520.29 T
(Noti\336cations) 144.65 520.29 T
(27) 206.32 520.29 T
(10.1.6) 117.65 508.29 T
(T) 144.65 508.29 T
(imers) 150.41 508.29 T
(30) 182.63 508.29 T
(10.1.7) 117.65 496.29 T
(Thread V) 144.65 496.29 T
(ariables) 181.58 496.29 T
(30) 222.68 496.29 T
3 11 Q
(10.2) 90.65 483.62 T
(Simple Runtime Primiti) 117.65 483.62 T
(v) 222.51 483.62 T
(es) 227.85 483.62 T
(31) 248.01 483.62 T
(10.3) 90.65 470.62 T
(Entry Point Functions) 117.65 470.62 T
(34) 225.22 470.62 T
2 12 Q
(11.) 74.45 450.95 T
(Compiler Primiti) 90.65 450.95 T
(v) 178.85 450.95 T
(es) 184.73 450.95 T
(37) 206.72 450.95 T
3 11 Q
(11.1) 90.65 437.62 T
(General Primiti) 117.65 437.62 T
(v) 185.51 437.62 T
(es) 190.84 437.62 T
(37) 211.01 437.62 T
(11.2) 90.65 424.62 T
(Lo) 117.65 424.62 T
(w-Le) 129.59 424.62 T
(v) 152.53 424.62 T
(el Apply Primiti) 157.86 424.62 T
(v) 229.1 424.62 T
(es) 234.43 424.62 T
(38) 254.6 424.62 T
(11.3) 90.65 411.62 T
(Inte) 117.65 411.62 T
(ger Primiti) 134.59 411.62 T
(v) 181.68 411.62 T
(es) 187.01 411.62 T
(40) 207.18 411.62 T
(11.4) 90.65 398.62 T
(Float Primiti) 117.65 398.62 T
(v) 173.31 398.62 T
(es) 178.64 398.62 T
(43) 198.81 398.62 T
(11.5) 90.65 385.62 T
(Accessor Primiti) 117.65 385.62 T
(v) 191.01 385.62 T
(es) 196.34 385.62 T
(45) 216.51 385.62 T
0 15 Q
(2.) 63.65 323.95 T
(W) 90.65 323.95 T
(arning) 104.21 323.95 T
3 11 Q
0.28 0.01 (P) 63.65 301.62 B
0.28 0.01 (arts of this document were originally written for the GLUE project, and were aimed at a tar) 69.61 301.62 B
0.28 0.01 (get audience) 475.96 301.62 B
(which is not Dylan literate. There are v) 63.65 288.62 T
(estigial patronising references in some of these sections.) 235.78 288.62 T
0 15 Q
(3.) 63.65 246.95 T
(The Dylan Implementation Model) 90.65 246.95 T
0 12 Q
(3.1) 63.65 207.95 T
(Object Representation) 90.65 207.95 T
3 11 Q
0.28 0.16 (Harlequin\325) 63.65 186.62 B
0.28 0.16 (s implementation achie) 112.27 186.62 B
0.28 0.16 (v) 218.06 186.62 B
0.28 0.16 (es dynamic typing of Dylan objects by associating the type with an) 223.55 186.62 B
(object based on tagging.) 63.65 173.62 T
0.05 (In man) 63.65 148.62 P
0.05 (y circumstances, the Dylan compiler can statically determine the type of an object. This kno) 94.39 148.62 P
0.05 (wledge) 499.88 148.62 P
-0.24 (can be used to select an alternati) 63.65 135.62 P
-0.24 (v) 204.3 135.62 P
-0.24 (e representation which is more ef) 209.63 135.62 P
-0.24 (\336cient than the canonical representation.) 354.5 135.62 P
-0.16 (F) 63.65 122.62 P
-0.16 (or e) 69.6 122.62 P
-0.16 (xample, the canonical representation of a double \337oat object in Dylan is as a pointer to heap-allocated) 86.07 122.62 P
-0.02 (storage which contains the IEEE bit pattern of the double \337oat in addition to a reference to the Dylan class) 63.65 109.62 P
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(3) 526.09 84.9 T
3 11 Q
0.28 0.08 (object) 63.65 737.62 B
2 F
0.28 0.08 (<double-f) 94.12 737.62 B
0.28 0.08 (loat>) 139.62 737.62 B
3 F
0.28 0.08 (. The compiler may choose to represent the v) 164.01 737.62 B
0.28 0.08 (alue as a direct bit pattern, where) 367.72 737.62 B
0.28 0.08 (v) 517.6 737.62 B
0.28 0.08 (er) 523.02 737.62 B
(this does not violate the semantics of the program.) 63.65 724.62 T
0 10 Q
(3.1.1) 63.65 690.29 T
(T) 90.89 690.29 T
(a) 96.2 690.29 T
(g) 101.66 690.29 T
(ging Sc) 107.67 690.29 T
(heme) 143.69 690.29 T
3 11 Q
-0.05 (All Dylan v) 63.65 669.62 P
-0.05 (alues are represented as data of the same size, the size of a pointer) 115.22 669.62 P
-0.05 (. The bit pattern of these v) 404.81 669.62 P
-0.05 (al-) 520.04 669.62 P
0.28 0.01 (ues contains tag bits which indicate whether the v) 63.65 656.62 B
0.28 0.01 (alue is actually a pointer) 284.74 656.62 B
0.28 0.01 (, or whether it is a direct v) 393.16 656.62 B
0.28 0.01 (alue.) 510.54 656.62 B
-0.14 (Since there are three major groups \050inte) 63.65 643.62 P
-0.14 (gers, characters and e) 236.76 643.62 P
-0.14 (v) 330.73 643.62 P
-0.14 (erything else\051, the representation for all plat-) 336.07 643.62 P
(forms is to use tw) 63.65 630.62 T
(o bits.) 141.76 630.62 T
0 10 Q
(3.1.2) 63.65 458.29 T
(Integ) 90.89 458.29 T
(er) 114.88 458.29 T
(s and Character) 124.18 458.29 T
(s) 199.61 458.29 T
3 11 Q
0.28 0.08 (Inte) 63.65 437.62 B
0.28 0.08 (gers and characters are represented as direct v) 80.9 437.62 B
0.28 0.08 (alues, using the tag bits as the only indication of type.) 288.07 437.62 B
-0.19 (The tagging scheme uses the least signi\336cant tw) 63.65 424.62 P
-0.19 (o bits. W) 273.91 424.62 P
-0.19 (ith this scheme, a character or inte) 313.11 424.62 P
-0.19 (ger is con) 462.38 424.62 P
-0.19 (v) 504.32 424.62 P
-0.19 (erted) 509.66 424.62 P
0.28 0.11 (to its untagged representation by arithmetic right shifting by tw) 63.65 411.62 B
0.28 0.11 (o bits. Similarly the con) 351.34 411.62 B
0.28 0.11 (v) 460.11 411.62 B
0.28 0.11 (ersion from an) 465.55 411.62 B
(untagged to a tagged representation is to shift left and add in the tag bits.) 63.65 398.62 T
0.28 0.15 (Operations on these v) 63.65 373.62 B
0.28 0.15 (alues \050e.g., addition, or other arithmetic operations\051 are al) 162.9 373.62 B
0.28 0.15 (w) 426.89 373.62 B
0.28 0.15 (ays performed on the) 434.86 373.62 B
0.28 0.25 (untagged representation. This is sub-optimal, because it is possible to perform arithmetic operations) 63.65 360.62 B
0.03 (directly on the tagged v) 63.65 347.62 P
0.03 (alues. It is planned to impro) 167.36 347.62 P
0.03 (v) 290.15 347.62 P
0.03 (e this mechanism at a later date, along with a re) 295.49 347.62 P
0.03 (vision) 504.75 347.62 P
(of the tagging scheme.) 63.65 334.62 T
0 10 Q
(3.1.3) 63.65 300.29 T
(Bo) 90.89 300.29 T
(x) 103.92 300.29 T
(ed Objects) 109.38 300.29 T
3 11 Q
0.28 0.09 (Apart from inte) 63.65 279.62 B
0.28 0.09 (gers and characters, all Dylan objects are indirectly represented as) 133.82 279.62 B
4 F
0.28 0.09 (boxed) 436.33 279.62 B
3 F
0.28 0.09 ( v) 463.05 279.62 B
0.28 0.09 (alues \050that is,) 471.48 279.62 B
-0.03 (the) 63.65 266.62 P
-0.03 (y are pointers to heap allocated box) 76.93 266.62 P
-0.03 (es\051. The runtime system is responsible for ensuring that these box) 233 266.62 P
-0.03 (ed) 521.26 266.62 P
0.28 0.18 (v) 63.65 253.62 B
0.28 0.18 (alues are appropriately tagged, because the runtime system pro) 69.05 253.62 B
0.28 0.18 (vides the allocation service, and must) 358.66 253.62 B
(ensure appropriate alignment.) 63.65 240.62 T
0.11 (Box) 63.65 215.62 P
0.11 (ed objects are dynamically identi\336ed by their \336rst slot, which is an identi\336cation wrapper) 81.82 215.62 P
0.11 (. This identi-) 474.9 215.62 P
-0.03 (\336cation wrapper \050itself a box) 63.65 202.62 P
-0.03 (ed Dylan object\051 contains a pointer to the class of the object it is wrapping, as) 190.46 202.62 P
(well as some encoded information for the g) 63.65 189.62 T
(arbage collector about which slots should be traced.) 254.53 189.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 240.63 580.62 T
(able 1.) 246.48 580.62 T
(T) 281.3 580.62 T
(agging Scheme) 287.14 580.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(T) 236.15 555.62 T
(ag Bits) 242.47 555.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 290.15 555.62 T
(ype) 296.67 555.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(00) 236.15 535.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Heap Allocated) 290.15 535.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(01) 236.15 521.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Inte) 290.15 521.62 T
(gers) 307.09 521.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 236.15 507.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Characters) 290.15 507.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 236.15 493.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Unused) 290.15 493.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
284.15 573.95 284.15 488.95 2 L
V
0.25 H
0 Z
N
230.15 544.95 365.15 544.95 2 L
V
0.5 H
N
230.15 530.95 365.15 530.95 2 L
V
0.25 H
N
230.15 516.95 365.15 516.95 2 L
V
N
230.15 502.95 365.15 502.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(4) 63.65 84.9 T
3 11 Q
(Figure 1.) 242.58 532.62 T
(Box) 287.8 532.62 T
(ed Objects) 305.98 532.62 T
0.28 0.02 (Note that tw) 63.65 509.62 B
0.28 0.02 (o indirections are necessary to f) 118.71 509.62 B
0.28 0.02 (ind the class of an object. In practice, this is a rare operation,) 259.74 509.62 B
0.28 0.18 (because almost all dynamic class testing within Dylan is implicit, and the implementation can use the) 63.65 496.62 B
0.28 0.2 (wrapper for these implicit tests. Note that there is potentially a man) 63.65 483.62 B
0.28 0.2 (y-to-one correspondence between) 376.71 483.62 B
(wrapper objects and class objects.) 63.65 470.62 T
0.28 0.1 (The Dylan compiler b) 63.65 445.62 B
0.28 0.1 (uilds literal box) 163.2 445.62 B
0.28 0.1 (ed objects statically whene) 234.42 445.62 B
0.28 0.1 (v) 356.03 445.62 B
0.28 0.1 (er it can. In practice, this will include) 361.47 445.62 B
-0.04 (most function objects apart from closures, virtually all wrappers, and most class objects, as well as strings,) 63.65 432.62 P
(symbols, and literal v) 63.65 419.62 T
(ectors and lists.) 158.2 419.62 T
0 10 Q
(3.1.4) 63.65 385.29 T
(V) 90.89 385.29 T
(ariab) 96.96 385.29 T
(l) 120.76 385.29 T
(y Siz) 123.39 385.29 T
(ed Objects) 146.28 385.29 T
3 11 Q
-0.03 (V) 63.65 364.62 P
-0.03 (ariably sized objects, such as strings, v) 70.37 364.62 P
-0.03 (ectors and arrays, are box) 240.49 364.62 P
-0.03 (ed objects which contain a) 352.91 364.62 P
4 F
-0.03 (r) 472.2 364.62 P
-0.03 (epeated slot) 476.07 364.62 P
3 F
-0.03 (.) 528.9 364.62 P
0.28 0.1 (The repeated slot is implemented as a v) 63.65 351.62 B
0.28 0.1 (ariably sized data area preceded by a normal slot containing the) 242.93 351.62 B
0.28 0.02 (size of the v) 63.65 338.62 B
0.28 0.02 (ariably sized data represented as a tagged inte) 117.89 338.62 B
0.28 0.02 (ger) 321.8 338.62 B
0.28 0.02 (. The size slot is used at the Dylan language) 335.3 338.62 B
0.28 0.13 (le) 63.65 325.62 B
0.28 0.13 (v) 71.58 325.62 B
0.28 0.13 (el to determine the size of the array) 77.05 325.62 B
0.28 0.13 (. There is also a special encoding for it in the tracing data of the) 238.7 325.62 B
-0.26 (wrapper so that the memory manager kno) 63.65 312.62 P
-0.26 (ws ho) 245.13 312.62 P
-0.26 (w to trace the repeated data. F) 270.57 312.62 P
-0.26 (or e) 401.13 312.62 P
-0.26 (xample, an instance of the) 417.5 312.62 P
2 F
(<byte-string>) 63.65 299.62 T
("f) 130.26 299.62 T
(oo") 139.76 299.62 T
3 F
(is represented as in Figure) 162.86 299.62 T
(2 on page) 281.09 299.62 T
(4.) 326.61 299.62 T
(Figure 2.) 209.35 121.62 T
(An Instance of) 254.57 121.62 T
2 F
(<byte-string>) 322.08 121.62 T
0 0 0 1 0 0 0 K
63.65 557.95 531.65 733.95 C
0 0 0 1 0 0 0 K
J
108.65 690.99 189.65 690.99 189.65 582.99 108.65 582.99 4 Y
7 X
0 0 0 1 0 0 0 K
V
J
108.65 690.99 189.65 690.99 189.65 582.99 108.65 582.99 4 Y
J
108.65 687.24 108.65 690.99 112.4 690.99 3 L
0.5 H
2 Z
0 X
N
[7.206 6.245] 7.206 I
112.4 690.99 185.9 690.99 2 L
N
J
185.9 690.99 189.65 690.99 189.65 687.24 3 L
N
[7.213 6.251] 7.213 I
189.65 687.24 189.65 586.74 2 L
N
J
189.65 586.74 189.65 582.99 185.9 582.99 3 L
N
[7.206 6.245] 7.206 I
185.9 582.99 112.4 582.99 2 L
N
J
112.4 582.99 108.65 582.99 108.65 586.74 3 L
N
[7.213 6.251] 7.213 I
108.65 586.74 108.65 687.24 2 L
N
J
252.65 609.99 333.65 690.99 R
7 X
V
0 X
N
J
405.65 690.99 486.65 690.99 486.65 582.99 405.65 582.99 4 Y
7 X
V
J
405.65 690.99 486.65 690.99 486.65 582.99 405.65 582.99 4 Y
J
405.65 687.24 405.65 690.99 409.4 690.99 3 L
0 X
N
[7.206 6.245] 7.206 I
409.4 690.99 482.9 690.99 2 L
N
J
482.9 690.99 486.65 690.99 486.65 687.24 3 L
N
[7.213 6.251] 7.213 I
486.65 687.24 486.65 586.74 2 L
N
J
486.65 586.74 486.65 582.99 482.9 582.99 3 L
N
[7.206 6.245] 7.206 I
482.9 582.99 409.4 582.99 2 L
N
J
409.4 582.99 405.65 582.99 405.65 586.74 3 L
N
[7.213 6.251] 7.213 I
405.65 586.74 405.65 687.24 2 L
N
J
108.65 663.99 189.65 690.99 R
7 X
V
0 X
N
108.65 636.99 189.65 663.99 R
7 X
V
0 X
N
108.65 609.99 189.65 636.99 R
7 X
V
0 X
N
252.65 663.99 333.65 690.99 R
7 X
V
0 X
N
252.65 636.99 333.65 663.99 R
7 X
V
0 X
N
252.65 609.99 333.65 636.99 R
7 X
V
0 X
N
405.65 663.99 486.65 690.99 R
7 X
V
0 X
N
405.65 636.99 486.65 663.99 R
7 X
V
0 X
N
405.65 609.99 486.65 636.99 R
7 X
V
0 X
N
108.65 582.99 189.65 582.99 2 L
N
405.65 582.99 486.65 582.99 2 L
N
2 11 Q
(Dylan Object) 117.65 701.48 T
(Wrapper) 272.26 699.99 T
(Class) 434.59 700.21 T
1 10 Q
(Wr) 117.65 672.99 T
(apper slot) 130.32 672.99 T
(Data slot 1) 117.65 645.99 T
(Data slot 2) 117.65 618.99 T
241.36 672.99 241.36 675.97 251.74 672.99 241.36 670.02 4 Y
0 Z
N
241.36 672.99 241.36 675.97 251.74 672.99 241.36 670.02 4 Y
V
189.65 672.99 241.11 672.99 2 L
2 Z
N
(Wr) 261.65 672.99 T
(apper slot) 274.32 672.99 T
(Class) 261.65 645.99 T
(T) 261.65 618.99 T
(r) 266.56 618.99 T
(acing data) 269.79 618.99 T
394.36 672.99 394.36 675.97 404.74 672.99 394.36 670.02 4 Y
0 Z
N
394.36 672.99 394.36 675.97 404.74 672.99 394.36 670.02 4 Y
V
369.65 672.99 394.11 672.99 2 L
2 Z
N
333.65 654.99 369.65 654.99 2 L
N
369.65 654.99 369.65 672.99 2 L
N
(Wr) 414.65 672.99 T
(apper slot) 427.32 672.99 T
(Meta class) 414.65 645.99 T
(Class name) 414.65 618.99 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
63.65 146.95 531.65 270.95 C
0 0 0 1 0 0 0 K
J
212.15 240.45 383.15 240.45 383.15 159.45 212.15 159.45 4 Y
7 X
0 0 0 1 0 0 0 K
V
J
212.15 240.45 383.15 240.45 383.15 159.45 212.15 159.45 4 Y
J
212.15 236.7 212.15 240.45 215.9 240.45 3 L
0.5 H
2 Z
0 X
N
[7.64 6.621] 7.64 I
215.9 240.45 379.4 240.45 2 L
N
J
379.4 240.45 383.15 240.45 383.15 236.7 3 L
N
[7.206 6.245] 7.206 I
383.15 236.7 383.15 163.2 2 L
N
J
383.15 163.2 383.15 159.45 379.4 159.45 3 L
N
[7.64 6.621] 7.64 I
379.4 159.45 215.9 159.45 2 L
N
J
215.9 159.45 212.15 159.45 212.15 163.2 3 L
N
[7.206 6.245] 7.206 I
212.15 163.2 212.15 236.7 2 L
N
J
212.15 213.53 383.15 240.53 R
7 X
V
0 X
N
212.15 186.53 383.15 213.53 R
7 X
V
0 X
N
212.15 159.53 383.15 186.53 R
7 X
V
0 X
N
2 11 Q
("f) 221.15 251.02 T
(oo") 230.64 251.02 T
1 10 Q
(<b) 221.15 222.53 T
(yte-str) 232.35 222.53 T
(ing>-wr) 260.28 222.53 T
(apper) 293.24 222.53 T
(siz) 221.15 195.53 T
(e = 3) 233.22 195.53 T
(repeated data ="f) 221.15 168.53 T
(oo") 297.51 168.53 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(5) 526.09 84.9 T
(3.1.5) 63.65 738.29 T
(Function Objects) 90.89 738.29 T
3 11 Q
-0.1 (Dylan pro) 63.65 717.62 P
-0.1 (vides tw) 107.68 717.62 P
-0.1 (o b) 144.45 717.62 P
-0.1 (uilt-in classes of functions:) 157.88 717.62 P
2 F
-0.1 (<generic-function>) 279.1 717.62 P
3 F
-0.1 ( and) 368.63 717.62 P
2 F
-0.1 (<method>) 389.82 717.62 P
3 F
-0.1 (. These both obe) 437.8 717.62 P
-0.1 (y the) 510.05 717.62 P
0.28 0.23 (same general purpose calling con) 63.65 704.62 B
0.28 0.23 (v) 218.31 704.62 B
0.28 0.23 (ention, b) 223.88 704.62 B
0.28 0.23 (ut also support specialised calling con) 264.5 704.62 B
0.28 0.23 (v) 441.55 704.62 B
0.28 0.23 (entions \050described) 447.11 704.62 B
0.28 0.15 (belo) 63.65 691.62 B
0.28 0.15 (w\051 which the compiler may use depending on the detail of its kno) 82.93 691.62 B
0.28 0.15 (wledge about the function being) 384.19 691.62 B
0.28 0.05 (called, and the circumstances. Slots in the function object point to the code which implements each con-) 63.65 678.62 B
(v) 63.65 665.62 T
(ention.) 68.98 665.62 T
0.28 0.01 (All functions also ha) 63.65 640.62 B
0.28 0.01 (v) 155.85 640.62 B
0.28 0.01 (e a slot which encodes the number of required parameters the function accepts, and) 161.19 640.62 B
-0.26 (whether the function accepts optional or k) 63.65 627.62 P
-0.26 (e) 247.12 627.62 P
-0.26 (yw) 251.84 627.62 P
-0.26 (ord parameters. Another slot in each function object contains) 265.17 627.62 P
-0.19 (a v) 63.65 614.62 P
-0.19 (ector of the types which are acceptable for each required parameter) 76.42 614.62 P
-0.19 (. These slots are used for consistenc) 369.54 614.62 P
-0.19 (y) 526.15 614.62 P
(checking of the ar) 63.65 601.62 T
(guments.) 142.56 601.62 T
0.28 0.16 (Generic functions ha) 63.65 576.62 B
0.28 0.16 (v) 158.86 576.62 B
0.28 0.16 (e further slots which support the method dispatching process \321 including a slot) 164.35 576.62 B
0.28 0.04 (which contains a v) 63.65 563.62 B
0.28 0.04 (ector of all the methods belonging to the generic function, and a slot which contains a) 147.19 563.62 B
(cache of sorted applicable methods for combinations of ar) 63.65 550.62 T
(guments which ha) 318.84 550.62 T
(v) 398.66 550.62 T
(e been processed before.) 404 550.62 T
0.28 0.22 (Methods may be closures, in which case a slot in the method object contains the en) 63.65 525.62 B
0.28 0.22 (vironment for the) 450.62 525.62 B
0.28 0.05 (method, which is represented as a v) 63.65 512.62 B
0.28 0.05 (ector of closed-o) 223.68 512.62 B
0.28 0.05 (v) 298.88 512.62 B
0.28 0.05 (er v) 304.27 512.62 B
0.28 0.05 (ariables. If the v) 321.27 512.62 B
0.28 0.05 (ariable is kno) 394.25 512.62 B
0.28 0.05 (wn actually to be) 454.52 512.62 B
0.21 (constant, then the constant v) 63.65 499.62 P
0.21 (alue is stored directly in the v) 189.16 499.62 P
0.21 (ector) 320.39 499.62 P
0.21 (. Alternati) 341.78 499.62 P
0.21 (v) 386.31 499.62 P
0.21 (ely) 391.65 499.62 P
0.21 (, if there is an) 404.38 499.62 P
0.21 (y possibility of) 465.22 499.62 P
0.25 (an assignment to the v) 63.65 486.62 P
0.25 (ariable, then the v) 162.74 486.62 P
0.25 (alue is stored with an e) 242.01 486.62 P
0.25 (xtra indirection to a) 344.19 486.62 P
4 F
0.25 (value cell) 434.38 486.62 P
3 F
0.25 (, which may) 477.08 486.62 P
(be shared between man) 63.65 473.62 T
(y closures with related en) 166.42 473.62 T
(vironments.) 278.4 473.62 T
0 12 Q
(3.2) 63.65 435.95 T
(Calling Con) 90.65 435.95 T
(vention) 156.84 435.95 T
0 10 Q
(3.2.1) 63.65 401.29 T
(Some terminology) 90.89 401.29 T
3 11 Q
-0.07 (Ar) 63.65 380.62 P
-0.07 (guments passed to a function at the implementation le) 75.06 380.62 P
-0.07 (v) 311.29 380.62 P
-0.07 (el f) 316.62 380.62 P
-0.07 (all into 2 dif) 330.8 380.62 P
-0.07 (ferent groups.) 384.39 380.62 P
4 F
-0.07 (Langua) 448.09 380.62 P
-0.07 (g) 481.59 380.62 P
-0.07 (e par) 486.98 380.62 P
-0.07 (ame-) 509.66 380.62 P
-0.01 (ter) 63.65 367.62 P
-0.01 (s) 75.76 367.62 P
3 F
-0.01 ( correspond to the e) 80.04 367.62 P
-0.01 (xplicit ar) 166.57 367.62 P
-0.01 (guments in the source code.) 205.77 367.62 P
4 F
-0.01 (Implementation par) 330.96 367.62 P
-0.01 (ameter) 417.85 367.62 P
-0.01 (s) 448.29 367.62 P
3 F
-0.01 ( correspond to the) 452.57 367.62 P
(house-k) 63.65 354.62 T
(eeping information used by the implementation.) 98.36 354.62 T
0.21 (The o) 63.65 329.62 P
0.21 (v) 89.05 329.62 P
0.21 (erall calling con) 94.38 329.62 P
0.21 (v) 165.24 329.62 P
0.21 (ention consists of se) 170.57 329.62 P
0.21 (v) 259.85 329.62 P
0.21 (eral speci\336c con) 265.18 329.62 P
0.21 (v) 336.64 329.62 P
0.21 (entions with dif) 341.98 329.62 P
0.21 (ferent properties, described) 411.18 329.62 P
0.28 0 (belo) 63.65 316.62 B
0.28 0 (w) 82.32 316.62 B
0.28 0 (. Each con) 89.55 316.62 B
0.28 0 (v) 135.81 316.62 B
0.28 0 (ention is implemented by a separate) 141.14 316.62 B
4 F
0.28 0 (entry point) 303.57 316.62 B
3 F
0.28 0 (. There are partial orderings between the) 351.83 316.62 B
0.28 0.03 (entry points for these con) 63.65 303.62 B
0.28 0.03 (v) 176.94 303.62 B
0.28 0.03 (entions, depending on ho) 182.3 303.62 B
0.28 0.03 (w specif) 294.21 303.62 B
0.28 0.03 (ic each one is. The code which implements a) 331.09 303.62 B
0.28 0.06 (control f) 63.65 290.62 B
0.28 0.06 (lo) 101.43 290.62 B
0.28 0.06 (w from one entry point to the ne) 109.83 290.62 B
0.28 0.06 (xt may be obliged to rearrange parameters \050e.g. on the stack\051.) 255.55 290.62 B
(This process is called) 63.65 277.62 T
4 F
(stac) 160.8 277.62 T
(k \336xing) 178.3 277.62 T
0 10 Q
(3.2.2) 63.65 243.29 T
(The register model) 90.89 243.29 T
3 11 Q
0.28 0.07 (Three re) 63.65 218.62 B
0.28 0.07 (gisters are used within the calling con) 101.25 218.62 B
0.28 0.07 (v) 271.29 218.62 B
0.28 0.07 (ention to support the passing of) 276.69 218.62 B
4 F
0.28 0.07 (implementation par) 421.73 218.62 B
0.28 0.07 (ame-) 509.52 218.62 B
0.28 0 (ter) 63.65 205.62 B
0.28 0 (s) 75.77 205.62 B
3 F
0.28 0 (: Note that for the C back) 80.05 205.62 B
0.28 0 (end, global \050or thread-local\051 v) 193.46 205.62 B
0.28 0 (ariables might be used instead of real re) 326.02 205.62 B
0.28 0 (gisters) 502.91 205.62 B
(to pass these parameters.) 63.65 192.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(6) 63.65 84.9 T
(3.2.3) 63.65 604.29 T
(The ar) 90.89 604.29 T
(gument passing con) 120.75 604.29 T
(ventions) 217.59 604.29 T
3 11 Q
0.2 (F) 63.65 579.62 P
0.2 (or each of the con) 69.6 579.62 P
0.2 (v) 148.77 579.62 P
0.2 (entions, ar) 154.1 579.62 P
0.2 (guments are pushed onto the stack in re) 199.93 579.62 P
0.2 (v) 374.9 579.62 P
0.2 (erse order \050i.e. the rightmost ar) 380.24 579.62 P
0.2 (gu-) 516.98 579.62 P
0.2 (ment is pushed \336rst\051. The leftmost \050or leftmost fe) 63.65 566.62 P
0.2 (w\051 ar) 281.57 566.62 P
0.2 (guments are passed in re) 304.47 566.62 P
0.2 (gisters. This has a possible) 413.23 566.62 P
0.28 0.23 (disadv) 63.65 553.62 B
0.28 0.23 (antage from the opposite ordering in terms of the need for temporary v) 93.45 553.62 B
0.28 0.23 (ariables to hold interim) 423.27 553.62 B
(results for order) 63.65 540.62 T
(-of-e) 133.68 540.62 T
(v) 154.78 540.62 T
(aluation reasons. In practice, the disadv) 160.01 540.62 T
(antages will be small because:) 333.55 540.62 T
5 F
(\245) 99.65 521.62 T
3 F
(Man) 113.4 521.62 T
(y ar) 133.4 521.62 T
(guments to functions are e) 150 521.62 T
(xpected to be simple e) 265.93 521.62 T
(xpressions \050lik) 364.13 521.62 T
(e constants or v) 428.49 521.62 T
(ariable) 496.96 521.62 T
(references\051 - so order of e) 113.4 508.62 T
(v) 226.43 508.62 T
(aluation does not normally matter) 231.65 508.62 T
(.) 379.53 508.62 T
5 F
(\245) 99.65 492.62 T
3 F
(On a RISC implementation, we w) 113.4 492.62 T
(on\325) 262.39 492.62 T
(t w) 276.86 492.62 T
(ant to push each ar) 290.5 492.62 T
(gument an) 372.78 492.62 T
(yw) 418.75 492.62 T
(ay - instead it will be) 432.08 492.62 T
(more ef) 113.4 479.62 T
(\336cient to allocate enough stack space for the call, and store each ar) 147.03 479.62 T
(gument when it\325) 440.39 479.62 T
(s) 511.89 479.62 T
(a) 113.4 466.62 T
(v) 118.06 466.62 T
(ailable. This w) 123.29 466.62 T
(orks well with a conserv) 188.26 466.62 T
(ati) 295.52 466.62 T
(v) 306.24 466.62 T
(e GC - b) 311.58 466.62 T
(ut it might be poor with a total GC.) 348.93 466.62 T
(This calling con) 63.65 441.62 T
(v) 134.09 441.62 T
(ention has the follo) 139.43 441.62 T
(wing adv) 223.79 441.62 T
(antages:) 264.14 441.62 T
5 F
(\245) 99.65 422.62 T
3 F
-0.32 (required ar) 113.4 422.62 P
-0.32 (guments can al) 160.83 422.62 P
-0.32 (w) 226.06 422.62 P
-0.32 (ays be found at a kno) 233.89 422.62 P
-0.32 (wn of) 325.78 422.62 P
-0.32 (fset from a stack or frame pointer for an) 350.54 422.62 P
-0.32 (y) 523.72 422.62 P
(of the calling con) 113.4 409.62 T
(v) 189.64 409.62 T
(entions) 194.98 409.62 T
5 F
(\245) 99.65 393.62 T
3 F
(optional ar) 113.4 393.62 T
(guments appear in the same order in memory as the) 160.56 393.62 T
(y w) 387.38 393.62 T
(ould if v) 403.46 393.62 T
(ectored up as #rest) 440.57 393.62 T
(parameters) 113.4 380.62 T
5 F
(\245) 99.65 364.62 T
3 F
(Stack allocating the optional ar) 113.4 364.62 T
(guments as v) 250.07 364.62 T
(ectors is almost tri) 307.35 364.62 T
(vial.) 388.05 364.62 T
0.28 0.08 (F) 63.65 339.62 B
0.28 0.08 (or the nati) 69.68 339.62 B
0.28 0.08 (v) 115.43 339.62 B
0.28 0.08 (e code implementation, the callee is responsible for popping an) 120.85 339.62 B
0.28 0.08 (y ar) 406.17 339.62 B
0.28 0.08 (guments from the stack.) 423.36 339.62 B
0.28 0.06 (This is al) 63.65 326.62 B
0.28 0.06 (w) 105.06 326.62 B
0.28 0.06 (ays possible \050e) 112.95 326.62 B
0.28 0.06 (v) 178.94 326.62 B
0.28 0.06 (en with dynamically sized optional ar) 184.34 326.62 B
0.28 0.06 (gs\051, because the ar) 353.13 326.62 B
0.28 0.06 (gcount is a) 436.2 326.62 B
0.28 0.06 (v) 484.88 326.62 B
0.28 0.06 (ailable to) 490.17 326.62 B
-0.16 (say ho) 63.65 313.62 P
-0.16 (w man) 91.62 313.62 P
-0.16 (y ar) 120.93 313.62 P
-0.16 (guments were passed. This is not possible for the C back) 137.36 313.62 P
-0.16 (end - and this is the only substan-) 385.22 313.62 P
(tial dif) 63.65 300.62 T
(ference from the C ar) 92.4 300.62 T
(g passing con) 186.28 300.62 T
(v) 245.72 300.62 T
(ention.) 251.05 300.62 T
0 10 Q
(3.2.4) 63.65 266.29 T
(Calling Con) 90.89 266.29 T
(vention Goals) 146.05 266.29 T
0 9 Q
(1.) 99.65 245.62 T
4 11 Q
(Internal entry points) 113.4 245.62 T
3 F
( should be as ef) 203.84 245.62 T
(\336cient as possible. I.e. there should not be an) 272 245.62 T
(y constraints) 469.5 245.62 T
(on them because Dylan is a dynamic language.) 113.4 233.62 T
0 9 Q
(2.) 99.65 214.62 T
3 11 Q
(There must be a consistent con) 113.4 214.62 T
(v) 248.91 214.62 T
(ention for all functions at the) 254.24 214.62 T
4 F
(e) 384.4 214.62 T
(xternal entry point) 389.06 214.62 T
3 F
(, so that func-) 470.94 214.62 T
(tions can be called without the caller ha) 113.4 202.62 T
(ving an) 287.62 202.62 T
(y kno) 320.14 202.62 T
(wledge kno) 344.62 202.62 T
(wledge of what the) 395.36 202.62 T
(y are.) 479.2 202.62 T
0 9 Q
(3.) 99.65 183.62 T
3 11 Q
(The code which is e) 113.4 183.62 T
(x) 201.21 183.62 T
(ecuted at e) 206.55 183.62 T
(xternal entry points should be shared by all functions with sim-) 253.42 183.62 T
(ilar properties / lambda-lists.) 113.4 171.62 T
0 9 Q
(4.) 99.65 152.62 T
3 11 Q
-0.27 (The design should mak) 113.4 152.62 P
-0.27 (e the path from the e) 214.83 152.62 P
-0.27 (xternal entry point to the internal entry point as sim-) 304.03 152.62 P
(ple as is reasonably possible.) 113.4 140.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 280.06 712.62 T
(able 2.) 285.91 712.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Register) 175.15 687.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Use) 243.15 687.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(ar) 175.15 667.62 T
(g-count) 183.5 667.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(number of ar) 243.15 667.62 T
(gs passed) 299.77 667.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(function) 175.15 653.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the <function> object being called) 243.15 653.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mlist) 175.15 639.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the ne) 243.15 639.62 T
(xt-method list \050#f for direct-entry\051) 269.56 639.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
237.15 705.95 237.15 634.95 2 L
V
0.25 H
0 Z
N
169.15 676.95 426.15 676.95 2 L
V
0.5 H
N
169.15 662.95 426.15 662.95 2 L
V
0.25 H
N
169.15 648.95 426.15 648.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(7) 526.09 84.9 T
(3.2.5) 63.65 738.29 T
(The External Entr) 90.89 738.29 T
(y P) 173.79 738.29 T
(oint Con) 188.4 738.29 T
(vention) 228.55 738.29 T
3 11 Q
0.01 (All Dylan function objects support the) 63.65 713.62 P
4 F
0.01 (e) 235.42 713.62 P
0.01 (xternal) 240.09 713.62 P
3 F
0.01 ( con) 271.25 713.62 P
0.01 (v) 289.45 713.62 P
0.01 (ention. Each function object has an) 294.79 713.62 P
2 F
0.01 (XEP) 452.18 713.62 P
3 F
0.01 ( slot contain-) 474.18 713.62 P
0.16 (ing the code to support this con) 63.65 700.62 P
0.16 (v) 202.26 700.62 P
0.16 (ention. External entry points are used for all unoptimized, normal calls to) 207.59 700.62 P
0.28 0.05 (functions. This includes direct calls to methods and generic functions. Of course, whene) 63.65 687.62 B
0.28 0.05 (v) 458.47 687.62 B
0.28 0.05 (er the compiler) 463.85 687.62 B
(can use a more ef) 63.65 674.62 T
(\336cient entry point instead, then it will.) 140.34 674.62 T
(The re) 63.65 649.62 T
(gisters are used as follo) 91.89 649.62 T
(ws:) 194.87 649.62 T
-0 (If the function has a comple) 63.65 500.62 P
-0 (x lambda list \050with #rest or #k) 186.59 500.62 P
-0 (e) 319.08 500.62 P
-0 (y\051, then the e) 323.79 500.62 P
-0 (xternal entry code will be one of a) 381.06 500.62 P
0.02 (standard set of stack \336xing functions. This stack \336x) 63.65 487.62 P
0.02 (er will mak) 290.06 487.62 P
0.02 (e use of information in the function re) 340.1 487.62 P
0.02 (gister) 507.2 487.62 P
0.22 (to determine which k) 63.65 474.62 P
0.22 (e) 157.38 474.62 P
0.22 (ys to look for) 162.1 474.62 P
0.22 (, whether the ar) 221.29 474.62 P
0.22 (g-count is le) 290.18 474.62 P
0.22 (g) 344.84 474.62 P
0.22 (al, whether the ar) 350.29 474.62 P
0.22 (guments ha) 427.11 474.62 P
0.22 (v) 477.53 474.62 P
0.22 (e appropri-) 482.86 474.62 P
0.19 (ate types etc. The stack \336x) 63.65 461.62 P
0.19 (er will then tail jump to the internal entry point \050ag) 181.11 461.62 P
0.19 (ain, found from the function) 406.56 461.62 P
(object\051. This mechanism requires 2 transfers of control \050caller -> stack-\336x) 63.65 448.62 T
(er -> callee\051.) 388.92 448.62 T
(F) 63.65 423.62 T
(or e) 69.6 423.62 T
(xample, consider the follo) 86.23 423.62 T
(wing Dylan code:) 200.83 423.62 T
2 F
(de\336ne method func1 \050a, b, #r) 99.65 404.62 T
(est optionals, #k) 234.2 404.62 T
(ey k) 309.57 404.62 T
(ey1, k) 328.71 404.62 T
(ey2\051) 356.1 404.62 T
(end method;) 99.65 391.62 T
(func1\0501, 2, k) 99.65 365.62 T
(ey2: 99\051;) 157.6 365.62 T
3 F
(F) 63.65 340.62 T
(or the call to) 69.6 340.62 T
2 F
(func1) 127.65 340.62 T
3 F
(, abo) 153.93 340.62 T
(v) 175.14 340.62 T
(e, the parameters are described in the follo) 180.48 340.62 T
(wing table:) 367.15 340.62 T
0 10 Q
(3.2.6) 63.65 182.29 T
(Internal Entr) 90.89 182.29 T
(y P) 149.89 182.29 T
(oint Con) 164.5 182.29 T
(vention) 204.65 182.29 T
3 11 Q
0.21 (The IEP con) 63.65 161.62 P
0.21 (v) 118.63 161.62 P
0.21 (ention uses a \336x) 123.96 161.62 P
0.21 (ed number of language parameters, corresponding to each of the parameters) 195.63 161.62 P
0.28 0.02 (of the function \0505 in the case of) 63.65 148.62 B
2 F
0.28 0.02 (func1) 207.09 148.62 B
3 F
0.28 0.02 (, abo) 233.48 148.62 B
0.28 0.02 (v) 255.08 148.62 B
0.28 0.02 (e, corresponding to) 260.43 148.62 B
2 F
0.28 0.02 (a, b, optionals, k) 349.06 148.62 B
0.28 0.02 (ey1, k) 427.18 148.62 B
0.28 0.02 (ey2) 454.97 148.62 B
3 F
0.28 0.02 (\051. In addition,) 470.92 148.62 B
(there are tw) 63.65 135.62 T
(o implementation parameters:) 115.46 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 280.06 599.62 T
(able 3.) 285.91 599.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Register) 223.65 574.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Pur) 277.65 574.62 T
(pose) 295.26 574.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(ar) 223.65 554.62 T
(gcount) 232 554.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(number of ar) 277.65 554.62 T
(guments) 334.27 554.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(function) 223.65 540.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the function object) 277.65 540.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mlist) 223.65 526.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(not used) 277.65 526.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 194.6 290.62 T
(able 4.) 200.44 290.62 T
(XEP P) 235.27 290.62 T
(arameters for the Call to) 264.75 290.62 T
2 F
(func1) 374.42 290.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(XEP P) 195.65 265.62 T
(arameters) 227.01 265.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V) 298.65 265.62 T
(alues) 305.58 265.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(language parameters) 195.65 245.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(1) 298.65 245.62 T
3 F
(,) 304.15 245.62 T
2 F
(2) 309.65 245.62 T
3 F
(,) 315.15 245.62 T
2 F
(#"k) 320.65 245.62 T
(ey2") 338.26 245.62 T
3 F
(,) 360.25 245.62 T
2 F
(99) 365.75 245.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(ar) 195.65 231.62 T
(gcount) 205.02 231.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(4) 298.65 231.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(function) 195.65 217.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(generic function) 298.65 217.62 T
2 F
(func1) 373.18 217.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
271.65 592.95 271.65 521.95 2 L
V
0.25 H
0 Z
N
217.65 563.95 377.65 563.95 2 L
V
0.5 H
N
217.65 549.95 377.65 549.95 2 L
V
0.25 H
N
217.65 535.95 377.65 535.95 2 L
V
N
292.65 283.95 292.65 212.95 2 L
V
N
189.65 254.95 405.65 254.95 2 L
V
N
189.65 240.95 405.65 240.95 2 L
V
N
189.65 226.95 405.65 226.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(8) 63.65 84.9 T
5 11 Q
(\245) 99.65 737.62 T
4 F
(mlist) 113.4 737.62 T
3 F
(, a list of the ne) 134.79 737.62 T
(xt applicable methods to call if the function is a method called from a) 202.46 737.62 T
-0.04 (generic function \050this parameter is used to support calls to) 113.4 724.62 P
2 F
-0.04 (next-method) 370.87 724.62 P
3 F
-0.04 (\051. If the function is not) 430.14 724.62 P
(being called from a generic function, the v) 113.4 711.62 T
(alue is) 300.08 711.62 T
2 F
(#f) 331.24 711.62 T
3 F
( \050f) 340.41 711.62 T
(alse\051.) 350.37 711.62 T
5 F
(\245) 99.65 695.62 T
4 F
(function) 113.4 695.62 T
3 F
(, the Dylan function object being called \050as for the XEP\051.) 149.46 695.62 T
0.12 (The implementation parameters are not oblig) 63.65 670.62 P
0.12 (atory for all IEP code. It is only necessary to pass) 262.46 670.62 P
4 F
0.12 (mlist) 484.35 670.62 P
3 F
0.12 ( if the) 505.75 670.62 P
0.28 0.08 (function contains a call to) 63.65 657.62 B
2 F
0.28 0.08 (next-method) 183.57 657.62 B
3 F
0.28 0.08 (. It is only necessary to pass) 243.68 657.62 B
4 F
0.28 0.08 (function) 373.86 657.62 B
3 F
0.28 0.08 ( if the function is a closure) 410.53 657.62 B
0.28 0.07 (\050because the v) 63.65 644.62 B
0.28 0.07 (alue is used by the IEP code to locate the en) 127.87 644.62 B
0.28 0.07 (vironment of the closure\051. If the IEP is called) 327.18 644.62 B
0.28 0.01 (from the XEP code, both the implementation parameters will al) 63.65 631.62 B
0.28 0.01 (w) 346.05 631.62 B
0.28 0.01 (ays be set, e) 353.89 631.62 B
0.28 0.01 (v) 407.76 631.62 B
0.28 0.01 (en though the) 413.11 631.62 B
0.28 0.01 (y may not be) 473.55 631.62 B
(necessary) 63.65 618.62 T
(. F) 105.69 618.62 T
(or the same call to) 117.14 618.62 T
2 F
(func1) 200.54 618.62 T
3 F
(, abo) 226.82 618.62 T
(v) 248.04 618.62 T
(e, the parameters are described in T) 253.38 618.62 T
(able) 409.19 618.62 T
(3 on page) 430.27 618.62 T
(5.) 475.79 618.62 T
0.28 0.03 (Note that the language parameters no) 63.65 469.62 B
0.28 0.03 (w correspond to the formal parameters of the function, whereas, for) 229.7 469.62 B
(the XEP) 63.65 456.62 T
(, the) 99.4 456.62 T
(y corresponded to the supplied ar) 118.18 456.62 T
(guments.) 264.31 456.62 T
0.28 0 (The v) 63.65 431.62 B
0.28 0 (alue of) 89.01 431.62 B
4 F
0.28 0 (optionals) 122.56 431.62 B
3 F
0.28 0 ( in the set of language parameters is the Dylan v) 163.53 431.62 B
0.28 0 (ector) 378.2 431.62 B
2 F
0.28 0 (#[#"k) 403.22 431.62 B
0.28 0 (ey2", 99]) 430 431.62 B
3 F
0.28 0 ( which corre-) 472.44 431.62 B
0.28 0.13 (sponds to all the optional ar) 63.65 418.62 B
0.28 0.13 (guments. The language parameter corresponding to) 190.49 418.62 B
2 F
0.28 0.13 ( k) 424.15 418.62 B
0.28 0.13 (ey1) 433.44 418.62 B
3 F
0.28 0.13 ( is) 449.71 418.62 B
2 F
0.28 0.13 (#f) 463.61 418.62 B
3 F
0.28 0.13 (, because the) 473.04 418.62 B
0.28 0.28 (k) 63.65 405.62 B
0.28 0.28 (e) 69.32 405.62 B
0.28 0.28 (yw) 74.32 405.62 B
0.28 0.28 (ord) 88.22 405.62 B
2 F
0.28 0.28 (#"k) 107.05 405.62 B
0.28 0.28 (ey1") 125.51 405.62 B
3 F
0.28 0.28 ( w) 148.63 405.62 B
0.28 0.28 (as not supplied. Ho) 160.06 405.62 B
0.28 0.28 (we) 250.94 405.62 B
0.28 0.28 (v) 264.06 405.62 B
0.28 0.28 (er) 269.68 405.62 B
0.28 0.28 (, the language parameter corresponding to) 278.35 405.62 B
2 F
0.28 0.28 ( k) 476.48 405.62 B
0.28 0.28 (ey2) 486.07 405.62 B
3 F
0.28 0.28 ( is) 502.81 405.62 B
2 F
0.28 0.28 (99) 517.33 405.62 B
3 F
0.28 0.28 (,) 528.9 405.62 B
(because) 63.65 392.62 T
2 F
(#"k) 101.21 392.62 T
(ey2") 118.82 392.62 T
3 F
( w) 140.81 392.62 T
(as supplied with that v) 151.4 392.62 T
(alue.) 250.12 392.62 T
0 10 Q
(3.2.7) 63.65 358.29 T
(The Method Entr) 90.89 358.29 T
(y P) 169.88 358.29 T
(oint Con) 184.49 358.29 T
(vention) 224.64 358.29 T
3 11 Q
0.28 0.07 (All) 63.65 333.62 B
2 F
0.28 0.07 (<method>) 81.02 333.62 B
3 F
0.28 0.07 ( objects support the) 129.59 333.62 B
4 F
0.28 0.07 (method entry point) 220.83 333.62 B
3 F
0.28 0.07 (con) 308.9 333.62 B
0.28 0.07 (v) 324.56 333.62 B
0.28 0.07 (ention. Each method object has an) 329.97 333.62 B
2 F
0.28 0.07 (MEP) 487.77 333.62 B
3 F
0.28 0.07 ( slot) 512.43 333.62 B
0.09 (containing the code to support this con) 63.65 320.62 P
0.09 (v) 234.24 320.62 P
0.09 (ention. When a method is called by a generic function \050or via ne) 239.58 320.62 P
0.09 (xt) 523.09 320.62 P
0.11 (method\051, the caller uses a dedicated entry point \050a) 63.65 307.62 P
0.11 (v) 283.32 307.62 P
0.11 (ailable from the function object\051. If the method accepts) 288.54 307.62 P
0.28 0.08 (#k) 63.65 294.62 B
0.28 0.08 (e) 74.69 294.62 B
0.28 0.08 (y or #rest parameters, then the method is called with a \050possibly stack-allocated\051 v) 79.48 294.62 B
0.28 0.08 (ector representing) 450.97 294.62 B
(the optional ar) 63.65 281.62 T
(gs. This v) 127 281.62 T
(ector appears as a single e) 169.92 281.62 T
(xtra required ar) 284.3 281.62 T
(gument.) 351.9 281.62 T
0.28 0.04 (If the method accepts #k) 63.65 256.62 B
0.28 0.04 (e) 173.69 256.62 B
0.28 0.04 (y parameters, then the method entry point will process the supplied k) 178.45 256.62 B
0.28 0.04 (e) 487.66 256.62 B
0.28 0.04 (yw) 492.42 256.62 B
0.28 0.04 (ords -) 505.83 256.62 B
(stack \336xing them so that the) 63.65 243.62 T
(y appear as required ar) 187.23 243.62 T
(guments. It will then tail-call the internal entry point.) 287.21 243.62 T
(If the method does not accept #k) 63.65 218.62 T
(e) 207.12 218.62 T
(y) 211.84 218.62 T
(, then the method entry point is the same as the internal entry point.) 216.62 218.62 T
0 12 Q
(3.3) 63.65 180.95 T
(Special Features) 90.65 180.95 T
0 10 Q
(3.3.1) 63.65 146.29 T
(Intr) 90.89 146.29 T
(oduction to bind-e) 106.8 146.29 T
(xit and unwind-pr) 193.87 146.29 T
(otect) 277.01 146.29 T
3 11 Q
(The follo) 63.65 125.62 T
(wing sections describe the implementation for the nati) 104.01 125.62 T
(v) 342.34 125.62 T
(e code compiler) 347.68 125.62 T
(, only) 417.5 125.62 T
(.) 441.84 125.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 196.74 568.62 T
(able 5.) 202.58 568.62 T
(IEP P) 237.41 568.62 T
(arameters for the Call to) 262.61 568.62 T
2 F
(func1) 372.28 568.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(IEP P) 195.65 543.62 T
(arameters) 223.35 543.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V) 298.65 543.62 T
(alues) 305.58 543.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(language parameters) 195.65 523.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(1) 298.65 523.62 T
3 F
(,) 304.15 523.62 T
2 F
(2) 309.65 523.62 T
3 F
(,) 315.15 523.62 T
4 F
(optionals) 320.65 523.62 T
3 F
(,) 361.6 523.62 T
2 F
(#f) 367.1 523.62 T
3 F
(,) 376.26 523.62 T
2 F
(99) 381.76 523.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(mlist) 195.65 509.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(#f) 298.65 509.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(function) 195.65 495.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(generic function) 298.65 495.62 T
2 F
(func1) 373.18 495.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
292.65 561.95 292.65 490.95 2 L
V
0.25 H
0 Z
N
189.65 532.95 405.65 532.95 2 L
V
N
189.65 518.95 405.65 518.95 2 L
V
N
189.65 504.95 405.65 504.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(9) 526.09 84.9 T
3 11 Q
0.03 (Bind-e) 63.65 737.62 P
0.03 (xit and unwind-protect are represented on the stack as frames which contain information about ho) 93.43 737.62 P
0.03 (w) 523.71 737.62 P
0.28 0.11 (to in) 63.65 724.62 B
0.28 0.11 (v) 83.89 724.62 B
0.28 0.11 (ok) 89.29 724.62 B
0.28 0.11 (e the re) 100.39 724.62 B
0.28 0.11 (v) 133.92 724.62 B
0.28 0.11 (ele) 139.36 724.62 B
0.28 0.11 (v) 152.24 724.62 B
0.28 0.11 (ant continuation. Unwind-protect frames are also chained together) 157.57 724.62 B
0.28 0.11 (, and the current) 457.6 724.62 B
(en) 63.65 711.62 T
(vironment of e) 73.59 711.62 T
(xisting unwind-protects is a) 138.2 711.62 T
(v) 259.89 711.62 T
(ailable in) 265.11 711.62 T
2 F
(%curr) 308.5 711.62 T
(ent-unwind-pr) 340.07 711.62 T
(otect-frame) 408.32 711.62 T
3 F
(.) 462.67 711.62 T
0.28 0.17 (There are primiti) 63.65 686.62 B
0.28 0.17 (v) 141.28 686.62 B
0.28 0.17 (es to b) 146.78 686.62 B
0.28 0.17 (uild each type of frame, and also to remo) 176.99 686.62 B
0.28 0.17 (v) 366.36 686.62 B
0.28 0.17 (e unwind-protect frames \050bind-e) 371.86 686.62 B
0.28 0.17 (xit) 519.7 686.62 B
-0.26 (frames just ha) 63.65 673.62 P
-0.26 (v) 124.62 673.62 P
-0.26 (e to be popped - so that is done inline\051. The primiti) 129.96 673.62 P
-0.26 (v) 350.5 673.62 P
-0.26 (e which remo) 355.83 673.62 P
-0.26 (v) 415.02 673.62 P
-0.26 (es unwind-protect frames) 420.36 673.62 P
-0.05 (in the f) 63.65 660.62 P
-0.05 (all-through case is also responsible for in) 94.61 660.62 P
-0.05 (v) 274.75 660.62 P
-0.05 (oking the cleanup code \050which is called as a sub-function) 280.03 660.62 P
(in the same function frame as its parent\051.) 63.65 647.62 T
0.28 0 (There are also primiti) 63.65 622.62 B
0.28 0 (v) 159.28 622.62 B
0.28 0 (es to do non-local e) 164.62 622.62 B
0.28 0 (xits \050) 251.77 622.62 B
4 F
0.28 0 (NLX) 274.38 622.62 B
3 F
0.28 0 (\051. These are passed the address of the bind-e) 294.56 622.62 B
0.28 0 (xit frame) 491.33 622.62 B
0.28 0.26 (for the destination, and also the multiple v) 63.65 609.62 B
0.28 0.26 (alues to be returned. As part of the NLX, an) 262.7 609.62 B
0.28 0.26 (y interv) 470.01 609.62 B
0.28 0.26 (ening) 506.15 609.62 B
0.28 0.01 (unwind-protects are in) 63.65 596.62 B
0.28 0.01 (v) 162.87 596.62 B
0.28 0.01 (ok) 168.16 596.62 B
0.28 0.01 (ed and their frames are remo) 179.06 596.62 B
0.28 0.01 (v) 306.6 596.62 B
0.28 0.01 (ed. Multiple-v) 311.94 596.62 B
0.28 0.01 (alues are sa) 374.97 596.62 B
0.28 0.01 (v) 426.07 596.62 B
0.28 0.01 (ed around the unwind-) 431.41 596.62 B
(protects in the bind-e) 63.65 583.62 T
(xit frame of the destination.) 156.66 583.62 T
0 10 Q
(3.3.2) 63.65 549.29 T
(unwind-pr) 90.89 549.29 T
(otect) 139.02 549.29 T
3 11 Q
(An) 63.65 524.62 T
2 F
(unwind-pr) 79.84 524.62 T
(otect) 129.77 524.62 T
3 F
( frame \050) 152.36 524.62 T
4 F
(UPF) 187.18 524.62 T
3 F
(\051 looks as follo) 208.56 524.62 T
(ws:) 273.98 524.62 T
(The compiler compiles unwind-protect as follo) 63.65 375.62 T
(ws:) 270.21 375.62 T
2 F
(let frame = primiti) 99.65 356.62 T
(v) 186.76 356.62 T
(e-b) 192.15 356.62 T
(uild-unwind-pr) 206.59 356.62 T
(otect-frame\050tag1\051;) 278.53 356.62 T
(do-the-pr) 99.65 343.62 T
(otected-f) 144.05 343.62 T
(orms-setting-r) 184.7 343.62 T
(esults-as-f) 251.7 343.62 T
(or) 298.47 343.62 T
(-a-r) 308.45 343.62 T
(etur) 325.96 343.62 T
(n\050\051;) 345.34 343.62 T
(primiti) 99.65 330.62 T
(v) 132.54 330.62 T
(e-unwind-pr) 137.93 330.62 T
(otect-cleanup\050\051;) 196.4 330.62 T
(goto\050tag-\336nished\051;) 99.65 317.62 T
(tag1:) 99.65 304.62 T
(do-the-cleanup-f) 99.65 291.62 T
(orms\050\051;) 176.98 291.62 T
(end-cleanup\050\051; // inlined as a r) 99.65 278.62 T
(etur) 240.33 278.62 T
(n instruction) 259.71 278.62 T
(tag-\336nished:) 99.65 265.62 T
3 F
0.28 0.14 (If the protected body e) 63.65 240.62 B
0.28 0.14 (xits normally) 167.27 240.62 B
0.28 0.14 (, then) 226.96 240.62 B
2 F
0.28 0.14 (primiti) 255.64 240.62 B
0.28 0.14 (v) 289.48 240.62 B
0.28 0.14 (e-unwind-pr) 295.01 240.62 B
0.28 0.14 (otect-cleanup) 354.97 240.62 B
3 F
0.28 0.14 ( is called \050in the runtime) 419.65 240.62 B
0.28 0.03 (system\051. This causes the unwind-protect frame to be unlink) 63.65 227.62 B
0.28 0.03 (ed from the chain, and the cleanup code to be) 328.07 227.62 B
0.28 0.01 (in) 63.65 214.62 B
0.28 0.01 (v) 71.79 214.62 B
0.28 0.01 (ok) 77.09 214.62 B
0.28 0.01 (ed, as a subroutine call within the same function frame as the protected body) 88 214.62 B
0.28 0.01 (. The cleanup code f) 429.16 214.62 B
0.28 0.01 (in-) 519.41 214.62 B
0.28 0.03 (ishes by e) 63.65 201.62 B
0.28 0.03 (x) 107.7 201.62 B
0.28 0.03 (ecuting a return instruction. The runtime system ensures that an) 113.07 201.62 B
0.28 0.03 (y multiple v) 397.07 201.62 B
0.28 0.03 (alues are restored,) 450.86 201.62 B
(and returns control to the compiled code, which then e) 63.65 188.62 T
(x) 303 188.62 T
(ecutes the code follo) 308.33 188.62 T
(wing the unwind-protect.) 398.79 188.62 T
0.08 (If the cleanup code is in) 63.65 163.62 P
0.08 (v) 168.99 163.62 P
0.08 (ok) 174.27 163.62 P
0.08 (ed because of an NLX, then the runtime function \336nds the ultimate destination) 185.16 163.62 P
4 F
0.28 0.01 (bind e) 63.65 150.62 B
0.28 0.01 (xit fr) 90.98 150.62 B
0.28 0.01 (ame) 112.26 150.62 B
3 F
0.28 0.01 ( \050) 130.63 150.62 B
4 F
0.28 0.01 (BEF) 137.35 150.62 B
3 F
0.28 0.01 (\051 from the UPF) 157.55 150.62 B
0.28 0.01 (. The runtime function then passes this BEF to another runtime func-) 224.61 150.62 B
0.28 0.05 (tion \050as for) 63.65 137.62 B
2 F
0.28 0.05 (bind-exit\051) 116.14 137.62 B
3 F
0.28 0.05 ( to test whether there are an) 162.48 137.62 B
0.28 0.05 (y further interv) 286.99 137.62 B
0.28 0.05 (ening cleanups, or to transfer control to) 354.77 137.62 B
(the ultimate destination if not.) 63.65 124.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 280.06 474.62 T
(able 6.) 285.91 474.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Offset) 201.15 449.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V) 255.15 449.62 T
(alue) 262.08 449.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(8) 201.15 429.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(address of start of cleanup code) 255.15 429.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 201.15 415.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(frame pointer) 255.15 415.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0) 201.15 401.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pre) 255.15 401.62 T
(vious unwind-protect frame) 268.92 401.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
249.15 467.95 249.15 396.95 2 L
V
0.25 H
0 Z
N
195.15 438.95 400.15 438.95 2 L
V
0.5 H
N
195.15 424.95 400.15 424.95 2 L
V
0.25 H
N
195.15 410.95 400.15 410.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(10) 63.65 84.9 T
(3.3.3) 63.65 738.29 T
(bind-e) 90.89 738.29 T
(xit) 120.74 738.29 T
3 11 Q
(A) 63.65 713.62 T
2 F
(bind-exit) 74.34 713.62 T
3 F
( frame \050) 116.51 713.62 T
4 F
(BEF) 151.33 713.62 T
3 F
(\051 looks as follo) 171.49 713.62 T
(ws:) 236.91 713.62 T
(The compiler compiles bind-e) 63.65 536.62 T
(xit as follo) 195.77 536.62 T
(ws:) 242.55 536.62 T
2 F
(let frame = primiti) 99.65 517.62 T
(v) 186.76 517.62 T
(e-b) 192.15 517.62 T
(uild-bind-exit-frame\050tag1\051;) 206.59 517.62 T
(let closur) 99.65 504.62 T
(e = mak) 142.53 504.62 T
(e-bind-exit-closur) 179.85 504.62 T
(e\050frame\051;) 262.76 504.62 T
(do-the-bind-exit-body-setting-r) 99.65 491.62 T
(esults-as-f) 245.5 491.62 T
(or) 292.27 491.62 T
(-a-r) 302.25 491.62 T
(etur) 319.76 491.62 T
(n\050\051;) 339.14 491.62 T
(tag1:) 99.65 478.62 T
3 F
0.12 (During an NLX, multiple-v) 63.65 453.62 P
0.12 (alues will be sa) 184.71 453.62 P
0.12 (v) 252.35 453.62 P
0.12 (ed in the frame if an interv) 257.69 453.62 P
0.12 (ening unwind-protect is acti) 375.52 453.62 P
0.12 (v) 498.71 453.62 P
0.12 (e. The) 504.04 453.62 P
(frame itself contains space for 8 v) 63.65 440.62 T
(alues. If more v) 212.45 440.62 T
(alues are present, then the) 281.21 440.62 T
(y will be heap allocated.) 394.98 440.62 T
-0.04 (When an NLX occurs, the transfer of control is implemented by a call into the runtime system, passing the) 63.65 415.62 P
0.28 0.26 (pointer to the BEF as a parameter) 63.65 402.62 B
0.28 0.26 (. The runtime function f) 221.21 402.62 B
0.28 0.26 (irst checks whether there is an interv) 333.41 402.62 B
0.28 0.26 (ening) 506.16 402.62 B
0.28 0.33 (cleanup, by testing whether the tar) 63.65 389.62 B
0.28 0.33 (get dynamic en) 227.87 389.62 B
0.28 0.33 (vironment in the BEF matches the current global) 299.8 389.62 B
-0.27 (dynamic en) 63.65 376.62 P
-0.27 (vironment. If there is no interv) 113.96 376.62 P
-0.27 (ening cleanup, then control is transferred to the destination of the) 247.48 376.62 P
-0.08 (BEF) 63.65 363.62 P
-0.08 (. Alternati) 82.94 363.62 P
-0.08 (v) 127.19 363.62 P
-0.08 (ely) 132.53 363.62 P
-0.08 (, if there is an interv) 145.26 363.62 P
-0.08 (ening cleanup, then the ultimate destination \336eld of the current UPF) 233.3 363.62 P
0.18 (is set to the destination BEF) 63.65 350.62 P
0.18 (, and the cleanup code is in) 187.43 350.62 P
0.18 (v) 307.52 350.62 P
0.18 (ok) 312.8 350.62 P
0.18 (ed within a loop which repeatedly tests for fur-) 323.69 350.62 P
(ther interv) 63.65 337.62 T
(ening unwind-protect frames until no more are found.) 109 337.62 T
0 10 Q
(3.3.4) 63.65 303.29 T
(Multiple V) 90.89 303.29 T
(alues) 137.52 303.29 T
3 11 Q
-0.19 (The current implementation of multiple v) 63.65 282.62 P
-0.19 (alues supports Common Lisp semantics. It is about to be replaced) 244.82 282.62 P
(by a ne) 63.65 269.62 T
(w v) 95.14 269.62 T
(ersion which which support the ne) 111.17 269.62 T
(w Dylan semantics.) 262.12 269.62 T
0.28 0 (Harlequin\325) 63.65 244.62 B
0.28 0 (s current implementation uses a re) 110.72 244.62 B
0.28 0 (gister to return a single Dylan v) 262.63 244.62 B
0.28 0 (alue, as this is the only v) 403.4 244.62 B
0.28 0 (alue) 513.31 244.62 B
0.28 0.01 (that is used by almost all callers. In addition, each function returns a count of the number of v) 63.65 231.62 B
0.28 0.01 (alues being) 481.44 231.62 B
0.28 0.27 (returned. This count can be e) 63.65 218.62 B
0.28 0.27 (xamined by the caller) 200.3 218.62 B
0.28 0.27 (, if required, to determine ho) 301.31 218.62 B
0.28 0.27 (w man) 436.6 218.62 B
0.28 0.27 (y v) 467.68 218.62 B
0.28 0.27 (alues were) 482.24 218.62 B
-0.14 (returned. If a function is returning more than one v) 63.65 205.62 P
-0.14 (alue, the additional v) 285.73 205.62 P
-0.14 (alues are stored in a global \050thread-) 377.31 205.62 P
0.2 (local\051 area, where the caller may retrie) 63.65 192.62 P
0.2 (v) 234.07 192.62 P
0.2 (e then, if desired. On RISC architectures, the multiple v) 239.4 192.62 P
0.2 (alue count) 485.93 192.62 P
0 (is returned in a re) 63.65 179.62 P
0 (gister) 140.47 179.62 P
0 (. F) 164.31 179.62 P
0 (or the x86 architecture, the) 175.76 179.62 P
4 F
0 (dir) 296.75 179.62 P
0 (ection \337a) 309.18 179.62 P
0 (g) 349.7 179.62 P
3 F
0 ( re) 355.2 179.62 P
0 (gister is set / unset to specify whether) 366.34 179.62 P
0.28 0.14 (single / multiple v) 63.65 166.62 B
0.28 0.14 (alues are being returned, respecti) 146.72 166.62 B
0.28 0.14 (v) 297.58 166.62 B
0.28 0.14 (ely) 303.06 166.62 B
0.28 0.14 (. If multiple v) 316.23 166.62 B
0.28 0.14 (alues are being returned, then the) 379.46 166.62 B
(count of the v) 63.65 153.62 T
(alues is stored in a global \050thread-local\051 location.) 124.17 153.62 T
(Documentation for the ne) 63.65 128.62 T
(w v) 176.1 128.62 T
(ersion will be a) 192.13 128.62 T
(v) 259.43 128.62 T
(ailable shortly) 264.65 128.62 T
(. Until then, here\325) 326.57 128.62 T
(s an o) 403.87 128.62 T
(v) 429.36 128.62 T
(ervie) 434.7 128.62 T
(w:) 456.41 128.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 280.06 663.62 T
(able 7.) 285.91 663.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Offset) 141.65 638.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V) 195.65 638.62 T
(alue) 202.58 638.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(52) 141.65 618.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(continuation address) 195.65 618.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(48) 141.65 604.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(frame pointer) 195.65 604.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 141.65 590.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(current unwind-protect frame) 195.65 590.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 141.65 576.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(space for stack-allocated v) 195.65 576.62 T
(ector for up to 8 multiple v) 312.47 576.62 T
(alues) 430.74 576.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0) 141.65 562.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pointer to sa) 195.65 562.62 T
(v) 249.81 562.62 T
(ed multiple v) 255.15 562.62 T
(alues as a v) 312.93 562.62 T
(ector) 363.17 562.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
189.65 656.95 189.65 557.95 2 L
V
0.25 H
0 Z
N
135.65 627.95 459.65 627.95 2 L
V
0.5 H
N
135.65 613.95 459.65 613.95 2 L
V
0.25 H
N
135.65 599.95 459.65 599.95 2 L
V
N
135.65 585.95 459.65 585.95 2 L
V
N
135.65 571.95 459.65 571.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(11) 520.53 84.9 T
3 11 Q
0.12 (Functions which return a \336x) 63.65 737.62 P
0.12 (ed number of return v) 188 737.62 P
0.12 (alues just return those v) 284.12 737.62 P
0.12 (alues, without returning a count.) 388.8 737.62 P
0.28 0.06 (The f) 63.65 724.62 B
0.28 0.06 (irst fe) 87.12 724.62 B
0.28 0.06 (w v) 112.88 724.62 B
0.28 0.06 (alues will be returned in re) 129.24 724.62 B
0.28 0.06 (gisters \050an architecture-specif) 249.66 724.62 B
0.28 0.06 (ic number\051, and remaining v) 381.5 724.62 B
0.28 0.06 (alues) 508.81 724.62 B
-0.09 (will be returned in a thread-local o) 63.65 711.62 P
-0.09 (v) 215.08 711.62 P
-0.09 (erspill area. If a function al) 220.41 711.62 P
-0.09 (w) 338.99 711.62 P
-0.09 (ays returns zero v) 346.82 711.62 P
-0.09 (alues, then no code need) 424.17 711.62 P
(be e) 63.65 698.62 T
(x) 81.5 698.62 T
(ecuted to indicate this f) 86.84 698.62 T
(act.) 189.38 698.62 T
-0.22 (Functions which return a dynamically-sized number of v) 63.65 673.62 P
-0.22 (alues return their v) 311.44 673.62 P
-0.22 (alues as abo) 393.3 673.62 P
-0.22 (v) 445.84 673.62 P
-0.22 (e, b) 451.18 673.62 P
-0.22 (ut also return a) 466.62 673.62 P
0.28 0.03 (count of the number being returned in a re) 63.65 660.62 B
0.28 0.03 (gister) 252.53 660.62 B
0.28 0.03 (. If a function dynamically happens to return zero v) 276.52 660.62 B
0.28 0.03 (alues,) 506.16 660.62 B
-0.27 (then the return count will be set to zero, b) 63.65 647.62 P
-0.27 (ut the v) 244.26 647.62 P
-0.27 (alue) 276.44 647.62 P
2 F
-0.27 ( #f) 294.77 647.62 P
3 F
-0.27 ( will be returned as if it were a the \336rst return v) 306.4 647.62 P
-0.27 (alue.) 510.57 647.62 P
-0.1 (If the caller of a function can statically determine the number of return v) 63.65 622.62 P
-0.1 (alues \050i.e. at compile-time\051, then it) 380.63 622.62 P
-0.04 (need perform no checks. Ho) 63.65 609.62 P
-0.04 (we) 187.54 609.62 P
-0.04 (v) 200.09 609.62 P
-0.04 (er) 205.42 609.62 P
-0.04 (, if the caller has no kno) 213.53 609.62 P
-0.04 (wledge of the function being called, then it must) 319.02 609.62 P
0.11 (check the properties of the callee function object to determine whether the static or dynamic con) 63.65 596.62 P
0.11 (v) 488.61 596.62 P
0.11 (ention is) 493.95 596.62 P
0.28 0.15 (being used, and may then need to read either the dynamic return v) 63.65 583.62 B
0.28 0.15 (alue count, or the static count in the) 367.07 583.62 B
(properties of the function object.) 63.65 570.62 T
0.06 (This design has some interesting implications for tail-call optimization. A function can simply tail another) 63.65 545.62 P
(function only if both the follo) 63.65 532.62 T
(wing rules apply:) 193.84 532.62 T
0 9 Q
(1.) 99.65 513.62 T
3 11 Q
(The callee is kno) 113.4 513.62 T
(wn to return at least as man) 187.97 513.62 T
(y v) 308.78 513.62 T
(alues as the caller) 322.26 513.62 T
(, and the) 399.71 513.62 T
(y ha) 437.12 513.62 T
(v) 455.53 513.62 T
(e appropriate) 460.87 513.62 T
(types.) 113.4 501.62 T
0 9 Q
(2.) 99.65 482.62 T
3 11 Q
(If the caller returns a dynamically-sized number of v) 113.4 482.62 T
(alues, then the callee must too.) 344.67 482.62 T
0 12 Q
(3.4) 63.65 445.95 T
(Name Mangling) 90.65 445.95 T
3 11 Q
-0.21 (In Dylan, unlik) 63.65 424.62 P
-0.21 (e C, identi\336er names are case insensiti) 130.03 424.62 P
-0.21 (v) 296.83 424.62 P
-0.21 (e. Dylan also permits additional characters to appear) 302.17 424.62 P
-0.27 (in names. As a further complication, Dylan pro) 63.65 411.62 P
-0.27 (vides multiple namespaces, and the namespaces are control-) 269.01 411.62 P
(led within a tw) 63.65 398.62 T
(o-tier hierarch) 129.23 398.62 T
(y of modules and libraries.) 191.79 398.62 T
0.28 0 (In order to mak) 63.65 373.62 B
0.28 0 (e it possible to link Dylan code with tools designed to support more traditional languages,) 132.52 373.62 B
0.28 0.05 (the Dylan compiler transforms the names which appear in Dylan programs to C compatible names, via a) 63.65 360.62 B
(process called) 63.65 347.62 T
4 F
(mangling) 128.4 347.62 T
3 F
(.) 169.96 347.62 T
(The library) 63.65 322.62 T
(, module and identi\336er names are each processed, according to the follo) 112.11 322.62 T
(wing rules:) 427.41 322.62 T
0 9 Q
(1.) 99.65 303.62 T
3 11 Q
(All uppercase characters are con) 113.4 303.62 T
(v) 255.89 303.62 T
(erted to lo) 261.23 303.62 T
(wercase.) 305.56 303.62 T
0 9 Q
(2.) 99.65 284.62 T
3 11 Q
(An) 113.4 284.62 T
(y character which appears on the left-hand side of T) 126.68 284.62 T
(able) 354.59 284.62 T
(8 on page) 375.66 284.62 T
(11 is mapped to the ne) 421.18 284.62 T
(w) 520.2 284.62 T
(character sequence accordingly) 113.4 272.62 T
(.) 250.74 272.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 223.99 223.62 T
(able 8.) 229.83 223.62 T
(Mangler Mapping T) 264.65 223.62 T
(able) 352.98 223.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Old) 231.65 198.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(New) 261.65 198.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Comment) 300.65 198.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(-) 231.65 178.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(_) 261.65 178.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(dash) 300.65 178.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(!) 231.65 164.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(_E_) 261.65 164.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(e) 300.65 164.62 T
(xclamation) 305.37 164.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
($) 231.65 150.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(_D_) 261.65 150.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(dollar) 300.65 150.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(*) 231.65 136.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(_T_) 261.65 136.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(times) 300.65 136.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(/) 231.65 122.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(_S_) 261.65 122.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(slash) 300.65 122.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
255.65 216.95 255.65 117.95 2 L
V
0.25 H
0 Z
N
294.65 216.95 294.65 117.95 2 L
V
N
225.65 187.95 369.65 187.95 2 L
V
0.5 H
N
225.65 173.95 369.65 173.95 2 L
V
0.25 H
N
225.65 159.95 369.65 159.95 2 L
V
N
225.65 145.95 369.65 145.95 2 L
V
N
225.65 131.95 369.65 131.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(12) 63.65 84.9 T
3 11 Q
0.28 0.06 (Finally) 63.65 556.62 B
0.28 0.06 (, the fully mangled name is created by concatenating the processed library) 94.5 556.62 B
0.28 0.06 (, module, and identif) 427.19 556.62 B
0.28 0.06 (ier) 519.93 556.62 B
(names respecti) 63.65 543.62 T
(v) 128.44 543.62 T
(ely) 133.77 543.62 T
(, separated by) 146.5 543.62 T
2 F
(X) 210.04 543.62 T
3 F
(.) 217.98 543.62 T
0.28 0.16 (F) 63.65 518.62 B
0.28 0.16 (or e) 69.76 518.62 B
0.28 0.16 (xample, the Dylan identif) 87.3 518.62 B
0.28 0.16 (ier) 203.9 518.62 B
2 F
0.28 0.16 (add-new!) 219.16 518.62 B
3 F
0.28 0.16 ( in module) 264.43 518.62 B
2 F
0.28 0.16 (inter) 316.8 518.62 B
0.28 0.16 (nal) 340.03 518.62 B
3 F
0.28 0.16 ( of library) 355.18 518.62 B
2 F
0.28 0.16 (dylan) 404.64 518.62 B
3 F
0.28 0.16 ( w) 431.72 518.62 B
0.28 0.16 (ould be mangled as) 442.89 518.62 B
2 F
(dylanXinter) 63.65 505.62 T
(nalXadd_new_E_) 120.32 505.62 T
3 F
(.) 203.45 505.62 T
0 15 Q
(4.) 63.65 463.95 T
(In-line Call Cac) 90.65 463.95 T
(hes) 198.03 463.95 T
3 11 Q
(No documentation a) 63.65 441.62 T
(v) 152.64 441.62 T
(ailable here about this yet.) 157.86 441.62 T
0 15 Q
(5.) 63.65 399.95 T
(Static Booting) 90.65 399.95 T
3 11 Q
(No documentation a) 63.65 377.62 T
(v) 152.64 377.62 T
(ailable here about this yet.) 157.86 377.62 T
0 15 Q
(6.) 63.65 335.95 T
(FFI) 90.65 335.95 T
3 11 Q
(No documentation a) 63.65 313.62 T
(v) 152.64 313.62 T
(ailable here about this yet.) 157.86 313.62 T
0 15 Q
(7.) 63.65 271.95 T
(Allocation) 90.65 271.95 T
3 11 Q
(No documentation a) 63.65 249.62 T
(v) 152.64 249.62 T
(ailable here about this yet.) 157.86 249.62 T
0 15 Q
(8.) 63.65 207.95 T
(HARP instruction set) 90.65 207.95 T
3 11 Q
(No documentation a) 63.65 185.62 T
(v) 152.64 185.62 T
(ailable here about this yet.) 157.86 185.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(<) 231.65 692.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(_L_) 261.65 692.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(less) 300.65 692.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(>) 231.65 678.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(_G_) 261.65 678.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(greater) 300.65 678.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(?) 231.65 664.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(_Q_) 261.65 664.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(question mark) 300.65 664.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(+) 231.65 650.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(_PL_) 261.65 650.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(plus) 300.65 650.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(&) 231.65 636.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(_AP_) 261.65 636.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(ampersand) 300.65 636.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(^) 231.65 622.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(_CR_) 261.65 622.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(caret) 300.65 622.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(_) 231.65 608.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(_UB_) 261.65 608.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(underbar) 300.65 608.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(~) 231.65 594.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(_SG_) 261.65 594.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(squiggle) 300.65 594.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(_SP_) 261.65 580.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(space) 300.65 580.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 223.99 737.62 T
(able 8.) 229.83 737.62 T
(Mangler Mapping T) 264.65 737.62 T
(able) 352.98 737.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Old) 231.65 712.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(New) 261.65 712.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Comment) 300.65 712.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
255.65 730.95 255.65 575.95 2 L
V
0.25 H
0 Z
N
294.65 730.95 294.65 575.95 2 L
V
N
225.65 701.95 369.65 701.95 2 L
V
0.5 H
N
225.65 687.95 369.65 687.95 2 L
V
0.25 H
N
225.65 673.95 369.65 673.95 2 L
V
N
225.65 659.95 369.65 659.95 2 L
V
N
225.65 645.95 369.65 645.95 2 L
V
N
225.65 631.95 369.65 631.95 2 L
V
N
225.65 617.95 369.65 617.95 2 L
V
N
225.65 603.95 369.65 603.95 2 L
V
N
225.65 589.95 369.65 589.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(13) 520.53 84.9 T
0 15 Q
(9.) 63.65 734.95 T
(Compiler Suppor) 90.65 734.95 T
(t f) 212.63 734.95 T
(or Threads) 226.49 734.95 T
0 12 Q
(9.1) 63.65 695.95 T
(Dylan P) 90.65 695.95 T
(or) 134.18 695.95 T
(tability Interface) 146.42 695.95 T
3 11 Q
0.28 0.09 (The Simple Threads Library is designed for implementation using dif) 63.65 674.62 B
0.28 0.09 (ferent threads APIs from common) 377.6 674.62 B
0.28 0.17 (operating systems, including Solaris, W) 63.65 661.62 B
0.28 0.17 (in32 and MacOS. Harlequin\325) 246.18 661.62 B
0.28 0.17 (s implementation of the library is) 378.43 661.62 B
0.27 (designed to be directly portable onto these operating systems. This portability is achie) 63.65 648.62 P
0.27 (v) 444.54 648.62 P
0.27 (ed by using primi-) 449.87 648.62 P
0.28 0.13 (ti) 63.65 635.62 B
0.28 0.13 (v) 69.76 635.62 B
0.28 0.13 (e operations def) 75.23 635.62 B
0.28 0.13 (ined within our runtime system. Each primiti) 147.57 635.62 B
0.28 0.13 (v) 352.52 635.62 B
0.28 0.13 (e operation must be implemented spe-) 357.99 635.62 B
(cially for each operating system.) 63.65 622.62 T
-0.03 (The set of portable primiti) 63.65 597.62 P
-0.03 (v) 178.76 597.62 P
-0.03 (e operations is collecti) 184.09 597.62 P
-0.03 (v) 282.42 597.62 P
-0.03 (ely called the) 287.75 597.62 P
4 F
-0.03 (portability layer) 349.07 597.62 P
3 F
-0.03 (. The Dylan compiler has) 420.25 597.62 P
0.28 0.15 (special kno) 63.65 584.62 B
0.28 0.15 (wledge of the portability layer via primiti) 115.14 584.62 B
0.28 0.15 (v) 305.23 584.62 B
0.28 0.15 (e function def) 310.72 584.62 B
0.28 0.15 (initions and some specialized emit) 373.92 584.62 B
(methods for \337o) 63.65 571.62 T
(w-graph node types which are speci\336c to threads.) 130.59 571.62 T
0 10 Q
(9.1.1) 63.65 537.29 T
(P) 90.89 537.29 T
(or) 97.16 537.29 T
(tability and Runtime La) 107.36 537.29 T
(y) 217.18 537.29 T
(er) 222.64 537.29 T
(s) 231.94 537.29 T
3 11 Q
0.28 0 (The design assumes that each of the concrete classes of the Simple Threads Library \050) 63.65 516.62 B
2 F
0.28 0 (<thr) 441.8 516.62 B
0.28 0 (ead>) 462.55 516.62 B
3 F
0.28 0 (,) 485.34 516.62 B
2 F
0.28 0 (<simple-) 491.12 516.62 B
0.28 0.04 (lock>) 63.65 503.62 B
3 F
0.28 0.04 (,) 89.69 503.62 B
2 F
0.28 0.04 (<r) 95.56 503.62 B
0.28 0.04 (ecursi) 106.6 503.62 B
0.28 0.04 (v) 134.86 503.62 B
0.28 0.04 (e-lock>) 140.29 503.62 B
3 F
0.28 0.04 (,) 174.97 503.62 B
2 F
0.28 0.04 (<semaphor) 180.83 503.62 B
0.28 0.04 (e>) 233.74 503.62 B
3 F
0.28 0.04 ( and) 244.98 503.62 B
2 F
0.28 0.04 (<notif) 267.13 503.62 B
0.28 0.04 (ication>) 295.06 503.62 B
3 F
0.28 0.04 (\051 corresponds with an equi) 333.45 503.62 B
0.28 0.04 (v) 452.11 503.62 B
0.28 0.04 (alent lo) 457.38 503.62 B
0.28 0.04 (wer) 490.42 503.62 B
0.28 0.04 (-le) 506.82 503.62 B
0.28 0.04 (v) 518.28 503.62 B
0.28 0.04 (el) 523.66 503.62 B
0.28 0.06 (feature pro) 63.65 490.62 B
0.28 0.06 (vided directly by either the operating system or the runtime system. The Dylan objects which) 112.33 490.62 B
0.28 0.01 (are instances of these classes are implemented as) 63.65 477.62 B
4 F
0.28 0.01 (container) 284.26 477.62 B
0.28 0.01 (s) 326.37 477.62 B
3 F
0.28 0.01 ( for handles corresponding to lo) 330.65 477.62 B
0.28 0.01 (w-le) 472.17 477.62 B
0.28 0.01 (v) 491.47 477.62 B
0.28 0.01 (el \050non-) 496.81 477.62 B
0.28 0.05 (Dylan\051 objects. The Dylan objects contain normal Dylan slots too, and these are directly manipulated by) 63.65 464.62 B
0.07 (the Dylan library) 63.65 451.62 P
0.07 (. Ho) 138.22 451.62 P
0.07 (we) 156.95 451.62 P
0.07 (v) 169.5 451.62 P
0.07 (er) 174.84 451.62 P
0.07 (, the slots containing the lo) 182.95 451.62 P
0.07 (w-le) 301.56 451.62 P
0.07 (v) 320.84 451.62 P
0.07 (el handles may only be manipulated via primi-) 326.17 451.62 P
0.28 0.07 (ti) 63.65 438.62 B
0.28 0.07 (v) 69.62 438.62 B
0.28 0.07 (e function calls. F) 75.02 438.62 B
0.28 0.07 (or each of the classes, primiti) 155.78 438.62 B
0.28 0.07 (v) 287.87 438.62 B
0.28 0.07 (e functions are def) 293.27 438.62 B
0.28 0.07 (ined to both create and destro) 376.31 438.62 B
0.28 0.07 (y the) 509.41 438.62 B
0.08 (lo) 63.65 425.62 P
0.08 (w-le) 71.93 425.62 P
0.08 (v) 91.2 425.62 P
0.08 (el handles, as well as to perform the basic functions of the class, such as) 96.54 425.62 P
2 F
0.08 (wait-f) 417.64 425.62 P
0.08 (or) 444.85 425.62 P
3 F
0.08 ( and) 455.23 425.62 P
2 F
0.08 (r) 476.79 425.62 P
0.08 (elease) 481.47 425.62 P
3 F
0.08 (. The) 508.96 425.62 P
-0.12 (platform-speci\336c implementation of these primiti) 63.65 412.62 P
-0.12 (v) 279.82 412.62 P
-0.12 (e functions is free to choose an) 285.16 412.62 P
-0.12 (y representation for these) 420.51 412.62 P
(handles, pro) 63.65 399.62 T
(vided that it is the same shape as a Dylan slot \050which is equi) 117.25 399.62 T
(v) 381.87 399.62 T
(alent to C\325) 387.09 399.62 T
(s) 432.93 399.62 T
2 F
(v) 439.96 399.62 T
(oid *) 445.35 399.62 T
3 F
(\051.) 468.27 399.62 T
0.28 0.16 (As with all Dylan objects, the container objects def) 63.65 374.62 B
0.28 0.16 (ined by the threads library are subject to automatic) 298.5 374.62 B
0.05 (memory management, and possible relocation by the g) 63.65 361.62 P
0.05 (arbage collector) 304.65 361.62 P
0.05 (. The contents of the container slots) 374.65 361.62 P
-0.11 (will be copied during such a relocation \321 b) 63.65 348.62 P
-0.11 (ut the v) 255.64 348.62 P
-0.11 (alues the) 288.14 348.62 P
-0.11 (y contain will not be subject to g) 326.67 348.62 P
-0.11 (arbage collec-) 469.76 348.62 P
(tion or relocation themselv) 63.65 335.62 T
(es.) 181.72 335.62 T
0.28 0.14 (The portability layer pro) 63.65 310.62 B
0.28 0.14 (vides no direct support for the) 175.65 310.62 B
2 F
0.28 0.14 (f) 316.81 310.62 B
0.28 0.14 (luid-bind) 320.01 310.62 B
3 F
0.28 0.14 ( operation. The library implements a) 364.68 310.62 B
2 F
0.28 0.1 (f) 63.65 297.62 B
0.28 0.1 (luid-v) 66.81 297.62 B
0.28 0.1 (ariable) 94.81 297.62 B
3 F
0.28 0.1 ( as a thread-local v) 128.51 297.62 B
0.28 0.1 (ariable, and uses the high-le) 214.41 297.62 B
0.28 0.1 (v) 341.25 297.62 B
0.28 0.1 (el Dylan construct) 346.69 297.62 B
2 F
0.28 0.1 (unwind-pr) 432.82 297.62 B
0.28 0.1 (otect) 483.64 297.62 B
3 F
0.28 0.1 ( [also) 506.74 297.62 B
(called) 63.65 284.62 T
2 F
(cleanup) 92.67 284.62 T
3 F
( in Dylan\325) 129.34 284.62 T
(s in\336x syntax] to manage the creation and deletion of ne) 173.34 284.62 T
(w bindings.) 419.92 284.62 T
0.28 0.08 (The portability layer includes support for conditional update of atomic v) 63.65 259.62 B
0.28 0.08 (ariables, as well as assignment.) 390.51 259.62 B
0.28 0.04 (The implementation mechanism for these is not def) 63.65 246.62 B
0.28 0.04 (ined, b) 293.14 246.62 B
0.28 0.04 (ut it is hoped that man) 323.39 246.62 B
0.28 0.04 (y platforms will pro) 423.52 246.62 B
0.28 0.04 (vide) 512.6 246.62 B
0.28 0.04 (direct hardw) 63.65 233.62 B
0.28 0.04 (are support for this operation. Where hardw) 119.6 233.62 B
0.28 0.04 (are support is not a) 315.68 233.62 B
0.28 0.04 (v) 401.11 233.62 B
0.28 0.04 (ailable, the lo) 406.38 233.62 B
0.28 0.04 (w-le) 466.85 233.62 B
0.28 0.04 (v) 486.29 233.62 B
0.28 0.04 (el imple-) 491.67 233.62 B
-0.2 (mentation may choose to use a lock to protect conditional updates and assignments, as a f) 63.65 220.62 P
-0.2 (all back option. It) 454.64 220.62 P
(is assumed that atomic v) 63.65 207.62 T
(ariables may al) 171.54 207.62 T
(w) 238.02 207.62 T
(ays be read as normal v) 245.85 207.62 T
(ariables.) 349.13 207.62 T
0.06 (T) 63.65 182.62 P
0.06 (able) 69.49 182.62 P
0.06 (9 on page) 90.57 182.62 P
0.06 (14 sho) 136.2 182.62 P
0.06 (ws the e) 165.01 182.62 P
0.06 (xpected mapping between the concrete Dylan classes and lo) 201.01 182.62 P
0.06 (w-le) 465.14 182.62 P
0.06 (v) 484.41 182.62 P
0.06 (el operat-) 489.74 182.62 P
(ing system features, for three of the most popular general-purpose operating systems.) 63.65 169.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(14) 63.65 84.9 T
3 11 Q
(T) 179.62 737.62 T
(able 9.) 185.46 737.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Implementations of Dylan Thread Interf) 220.29 737.62 T
(aces) 396.75 737.62 T
0 10 Q
(9.1.2) 63.65 486.29 T
(Dylan T) 90.89 486.29 T
(ypes f) 126.41 486.29 T
(or Threads P) 155.11 486.29 T
(or) 215.84 486.29 T
(tability) 226.04 486.29 T
3 11 Q
0.28 0.1 (Three Dylan types merit discussion for their use with portability primiti) 63.65 465.62 B
0.28 0.1 (v) 389.12 465.62 B
0.28 0.1 (es:) 394.57 465.62 B
2 F
0.28 0.1 (<thr) 410.23 465.62 B
0.28 0.1 (ead>) 431.39 465.62 B
3 F
0.28 0.1 (,) 454.58 465.62 B
2 F
0.28 0.1 (<portable-con-) 460.57 465.62 B
0.28 0.13 (tainer>) 63.65 452.62 B
3 F
0.28 0.13 (, and) 98.91 452.62 B
2 F
0.28 0.13 (<optional-name>) 124.36 452.62 B
3 F
0.28 0.13 (. Objects that are instances of the) 206.64 452.62 B
2 F
0.28 0.13 (<thr) 361.61 452.62 B
0.28 0.13 (ead>) 382.86 452.62 B
3 F
0.28 0.13 ( and) 406.13 452.62 B
2 F
0.28 0.13 (<portable-container>) 428.7 452.62 B
3 F
-0.11 (classes ha) 63.65 439.62 P
-0.11 (v) 107 439.62 P
-0.11 (e slots which contain lo) 112.33 439.62 P
-0.11 (wer) 215.5 439.62 P
-0.11 (-le) 231.77 439.62 P
-0.11 (v) 243.1 439.62 P
-0.11 (el objects that are speci\336c to the Dylan runtime or operating sys-) 248.43 439.62 P
-0.17 (tem. The) 63.65 426.62 P
2 F
-0.17 (<optional-name>) 105.16 426.62 P
3 F
-0.17 ( type allo) 185.54 426.62 P
-0.17 (ws an object, such as a lock, to ha) 225.87 426.62 P
-0.17 (v) 373.38 426.62 P
-0.17 (e a name represented as a string or) 378.71 426.62 P
-0.17 (,) 528.9 426.62 P
(if no name is supplied, as the Boolean f) 63.65 413.62 T
(alse v) 237.38 413.62 T
(alue) 262.46 413.62 T
2 F
(#f) 283.54 413.62 T
3 F
(.) 292.7 413.62 T
2 F
(<thread>) 63.65 384.62 T
3 F
([Class]) 500.48 384.62 T
0.28 0.02 (A Dylan object of class) 99.65 362.62 B
2 F
0.28 0.02 (<thr) 207.55 362.62 B
0.28 0.02 (ead>) 228.37 362.62 B
3 F
0.28 0.02 ( contains tw) 251.23 362.62 B
0.28 0.02 (o OS handles. One of these represents the underly-) 305.09 362.62 B
0.28 0.03 (ing OS thread, and the other may be used by implementations to contain the current status of the) 99.65 349.62 B
(thread, as an aid to the implementation of the join state.) 99.65 336.62 T
2 F
(<portable-container>) 63.65 307.62 T
3 F
([Class]) 500.48 307.62 T
-0.02 (The) 99.65 285.62 P
2 F
-0.02 (<portable-container>) 119.48 285.62 P
3 F
-0.02 ( class is used by the implementation as a superclass for all the concrete) 220.01 285.62 P
0.28 0.05 (synchronization classes \050) 99.65 272.62 B
2 F
0.28 0.05 (<simple-lock>) 211.4 272.62 B
3 F
0.28 0.05 (,) 278.36 272.62 B
2 F
0.28 0.05 (<r) 284.23 272.62 B
0.28 0.05 (ecursi) 295.28 272.62 B
0.28 0.05 (v) 323.57 272.62 B
0.28 0.05 (e-lock>) 329.01 272.62 B
3 F
0.28 0.05 (,) 363.73 272.62 B
2 F
0.28 0.05 (<semaphor) 369.6 272.62 B
0.28 0.05 (e>) 422.56 272.62 B
3 F
0.28 0.05 (, and) 433.81 272.62 B
2 F
0.28 0.05 (<notif) 458.79 272.62 B
0.28 0.05 (ication>) 486.74 272.62 B
3 F
0.28 0.05 (\051.) 525.19 272.62 B
0.28 0.08 (Each) 99.65 259.62 B
2 F
0.28 0.08 (<portable-container>) 125.07 259.62 B
3 F
0.28 0.08 ( object contains an OS handle, which is a) 227.26 259.62 B
0.28 0.08 (v) 413.8 259.62 B
0.28 0.08 (ailable to the runtime for) 419.11 259.62 B
(storing an) 99.65 246.62 T
(y OS-speci\336c data. Subclasses may pro) 143.18 246.62 T
(vide additional slots.) 315.93 246.62 T
2 F
(<optional-name>) 63.65 217.62 T
3 F
([T) 502.6 217.62 T
(ype]) 512.1 217.62 T
0.28 0.12 (This is a union type which is used to represent names of synchronization objects. V) 99.65 195.62 B
0.28 0.12 (alues of the) 479.08 195.62 B
(type are either strings \050of class) 99.65 182.62 T
2 F
(<byte-string>) 237.12 182.62 T
3 F
(\051 or f) 300.98 182.62 T
(alse \050) 322.86 182.62 T
2 F
(#f\051) 346.38 182.62 T
3 F
(.) 359.2 182.62 T
-0.06 (V) 63.65 157.62 P
-0.06 (arious classes of Dylan objects are passed through the portability interf) 70.37 157.62 P
-0.06 (ace, and hence require description) 381.9 157.62 P
-0.03 (in terms of lo) 63.65 144.62 P
-0.03 (wer le) 122.25 144.62 P
-0.03 (v) 149.12 144.62 P
-0.03 (el languages. T) 154.45 144.62 P
-0.03 (able) 220.41 144.62 P
-0.03 (10 on page) 241.49 144.62 P
-0.03 (15 maps the layout of these Dylan objects onto their C) 292.44 144.62 P
(equi) 63.65 131.62 T
(v) 82.32 131.62 T
(alents, which are used by runtime-speci\336c implementations of the portability layer) 87.54 131.62 T
(.) 449.58 131.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Dylan Interface) 69.65 677.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Solaris) 186.65 689.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Implementation) 186.65 677.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 303.65 689.62 T
(in32) 314.45 689.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Implementation) 303.65 677.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Macintosh) 420.65 689.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Implementation) 420.65 677.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<thr) 69.65 657.62 T
(ead>) 90.38 657.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(thread) 186.65 657.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(thread) 303.65 657.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(thread) 420.65 657.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(<simple-lock>) 69.65 643.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(mute) 186.65 643.62 T
(x) 208.48 643.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(critical re) 303.65 643.62 T
(gion) 345.33 643.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(critical re) 420.65 643.62 T
(gion) 462.33 643.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(<r) 69.65 629.62 T
(ecursi) 80.6 629.62 T
(v) 108.6 629.62 T
(e-lock>) 113.99 629.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(mute) 186.65 629.62 T
(x) 208.48 629.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(critical re) 303.65 629.62 T
(gion) 345.33 629.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(critical re) 420.65 629.62 T
(gion) 462.33 629.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(<semaphor) 69.65 615.62 T
(e>) 122.16 615.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(semaphore) 186.65 615.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(semaphore) 303.65 615.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(b) 420.65 615.62 T
(uilt using critical) 425.93 615.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(re) 420.65 602.62 T
(gion as a primiti) 429.03 602.62 T
(v) 500.56 602.62 T
(e) 505.9 602.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(<noti\336cation>) 69.65 588.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(condition v) 186.65 588.62 T
(ariable) 236.18 588.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 303.65 588.62 T
(v) 308.26 588.62 T
(ent) 313.59 588.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(b) 420.65 588.62 T
(uilt using critical) 425.93 588.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(re) 420.65 575.62 T
(gion as a primiti) 429.03 575.62 T
(v) 500.56 575.62 T
(e) 505.9 575.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(\337uid-v) 69.65 561.62 T
(ariable) 100.11 561.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(thread-local v) 186.65 561.62 T
(ariable) 247.16 561.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(thread-local v) 303.65 561.62 T
(ariable) 364.16 561.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(thread-local v) 420.65 561.62 T
(ariable?) 481.16 561.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(conditional-update!) 69.65 547.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(mute) 186.65 547.62 T
(x) 208.48 547.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 303.65 547.62 T
(xchange instruction) 308.37 547.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050using a guard v) 303.65 534.62 T
(alue as) 374.55 534.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(a lock\051;) 303.65 521.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(store conditional) 420.65 547.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(instruction \050on Po) 420.65 534.62 T
(wer) 499.21 534.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PC\051) 420.65 521.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180.65 719.95 180.65 516.95 2 L
V
0.25 H
0 Z
N
297.65 719.95 297.65 516.95 2 L
V
N
414.65 719.95 414.65 516.95 2 L
V
N
63.65 666.95 531.65 666.95 2 L
V
0.5 H
N
63.65 652.95 531.65 652.95 2 L
V
0.25 H
N
63.65 638.95 531.65 638.95 2 L
V
N
63.65 624.95 531.65 624.95 2 L
V
N
63.65 597.95 531.65 597.95 2 L
V
N
63.65 570.95 531.65 570.95 2 L
V
N
63.65 556.95 531.65 556.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(15) 520.53 84.9 T
3 11 Q
0.28 0.03 (In general, all Dylan types can be thought of as equi) 63.65 737.62 B
0.28 0.03 (v) 297.31 737.62 B
0.28 0.03 (alent to the C type) 302.57 737.62 B
2 F
0.28 0.03 (Z) 388.02 737.62 B
3 F
0.28 0.03 (, which is in turn equi) 395.39 737.62 B
0.28 0.03 (v) 493.19 737.62 B
0.28 0.03 (alent to) 498.45 737.62 B
0.13 (the C type) 63.65 724.62 P
2 F
0.13 (v) 112.01 724.62 P
0.13 (oid*) 117.4 724.62 P
3 F
0.13 (. Of course, runtime-speci\336c implementations of the portability layer must ha) 137.58 724.62 P
0.13 (v) 479.02 724.62 P
0.13 (e access to) 484.35 724.62 P
-0.14 (rele) 63.65 711.62 P
-0.14 (v) 79.86 711.62 P
-0.14 (ant \336elds of the Dylan objects on which the) 85.09 711.62 P
-0.14 (y operate. The type de\336nitions in T) 275.03 711.62 P
-0.14 (able) 428.19 711.62 P
-0.14 (10 gi) 449.27 711.62 P
-0.14 (v) 471.16 711.62 P
-0.14 (e implemen-) 476.49 711.62 P
0.28 0.07 (tations access to f) 63.65 698.62 B
0.28 0.07 (ields needed for specif) 143.11 698.62 B
0.28 0.07 (ic types. These def) 244.24 698.62 B
0.28 0.07 (initions are not necessarily complete descrip-) 328.28 698.62 B
-0.03 (tions of the Dylan objects, ho) 63.65 685.62 P
-0.03 (we) 192.76 685.62 P
-0.03 (v) 205.31 685.62 P
-0.03 (er) 210.65 685.62 P
-0.03 (. The objects may contain additional \336elds that are not of interest to the) 218.59 685.62 P
(portability layer) 63.65 672.62 T
(, and subclasses may add additional \336elds of their o) 133.78 672.62 T
(wn.) 360.21 672.62 T
(T) 160.27 653.62 T
(able 10.) 166.12 653.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Correspondence Between Dylan T) 206.44 653.62 T
(ypes and C T) 357.38 653.62 T
(ypes) 414.86 653.62 T
0 12 Q
(9.2) 63.65 238.95 T
(Compiler Suppor) 90.65 238.95 T
(t f) 188.23 238.95 T
(or the P) 199.32 238.95 T
(or) 243.52 238.95 T
(tability Interface) 255.76 238.95 T
0 10 Q
(9.2.1) 63.65 204.29 T
(The Compiler Flo) 90.89 204.29 T
(w Graph) 172.42 204.29 T
3 11 Q
0.28 0.03 (The front end of the compiler parses Dylan source code and produces an intermediate representation, the) 63.65 183.62 B
0.25 (Implicit Continuation Representation \050ICR\051. The ICR is a directed ac) 63.65 170.62 P
0.25 (yclic graph \050D) 370 170.62 P
0.25 (A) 433.59 170.62 P
0.25 (G\051 of Dylan objects.) 441.09 170.62 P
0.22 (A) 63.65 157.62 P
4 F
0.22 (leaf) 74.56 157.62 P
3 F
0.22 ( in the ICR represents a basic computational object, such as a v) 91.06 157.62 P
0.22 (ariable \050of class) 371.11 157.62 P
2 F
0.22 (<v) 444.15 157.62 P
0.22 (ariable-leaf>) 455.82 157.62 P
3 F
0.22 (\051 or) 515.85 157.62 P
-0.04 (a function \050of class) 63.65 144.62 P
2 F
-0.04 (<function-leaf>) 150.24 144.62 P
3 F
-0.04 (\051. A) 222.66 144.62 P
4 F
-0.04 (node) 242.44 144.62 P
3 F
-0.04 ( in the ICR represents an operation such as assignment \050class) 263.82 144.62 P
2 F
(<assignment>) 63.65 131.62 T
3 F
(\051, conditional e) 128.75 131.62 T
(x) 194.88 131.62 T
(ecution \050class) 200.21 131.62 T
2 F
(<if>) 263.14 131.62 T
3 F
(\051, or a reference to a leaf \050class) 282.4 131.62 T
2 F
(<r) 420.75 131.62 T
(efer) 431.71 131.62 T
(ence>) 449.83 131.62 T
3 F
(\051.) 476.86 131.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Dylan T) 69.65 617.62 T
(ype) 107.04 617.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C T) 225.65 617.62 T
(ype) 242.86 617.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C T) 381.65 617.62 T
(ype De\336nition) 398.86 617.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<object>) 69.65 597.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Z) 225.65 597.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(typedef v) 381.65 597.62 T
(oid* Z;) 424.61 597.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<small-integer>) 69.65 583.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ZINT) 225.65 583.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(platf) 381.65 583.62 T
(orm speci\336c \050size of) 403.37 583.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(v) 381.65 570.62 T
(oid*\051) 387.04 570.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<function>) 69.65 556.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ZFN) 225.65 556.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(typedef Z\050*ZFN\051\050Z, int, \311\051;) 381.65 556.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<simple-object-v) 69.65 542.62 T
(ector>) 147.9 542.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SO) 225.65 542.62 T
(V*) 239.77 542.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(typedef struct _so) 381.65 542.62 T
(v {) 464.63 542.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Z class;) 392.65 529.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ZINT size;) 392.65 516.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Z data[ ];) 392.65 501.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(} SO) 381.65 486.62 T
(V) 402.86 486.62 T
(;) 409.79 486.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<byte-string>) 69.65 472.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B_STRING*) 225.65 472.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(typedef struct _bst {) 381.65 472.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Z class;) 392.65 459.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ZINT size;) 392.65 446.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(char data[ ];) 392.65 431.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(} B_STRING;) 381.65 416.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<optional-name>) 69.65 402.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(D_N) 225.65 402.62 T
(AME) 246.81 402.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(typedef v) 381.65 402.62 T
(oid* D_N) 424.61 402.62 T
(AME;) 468.7 402.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<portable-container>) 69.65 388.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(CONT) 225.65 388.62 T
(AINER*) 256.44 388.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(typedef struct _ctr {) 381.65 388.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Z class;) 392.65 375.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(v) 392.65 362.62 T
(oid* handle;) 398.04 362.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(} CONT) 381.65 347.62 T
(AINER;) 419.52 347.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<thr) 69.65 333.62 T
(ead>) 90.38 333.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(D_THREAD*) 225.65 333.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(typedef struct _dth {) 381.65 333.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Z class;) 392.65 320.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(v) 392.65 307.62 T
(oid* handle1;) 398.04 307.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(v) 392.65 292.62 T
(oid* handle2;) 398.04 292.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(} D_THREAD;) 381.65 277.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
219.65 635.95 219.65 272.95 2 L
V
0.25 H
0 Z
N
375.65 635.95 375.65 272.95 2 L
V
N
63.65 606.95 531.65 606.95 2 L
V
0.5 H
N
63.65 592.95 531.65 592.95 2 L
V
0.25 H
N
63.65 565.95 531.65 565.95 2 L
V
N
63.65 551.95 531.65 551.95 2 L
V
N
63.65 481.95 531.65 481.95 2 L
V
N
63.65 411.95 531.65 411.95 2 L
V
N
63.65 397.95 531.65 397.95 2 L
V
N
63.65 342.95 531.65 342.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(16) 63.65 84.9 T
3 11 Q
0.26 (In mapping Dylan code to the ICR, the compiler uses a set of) 63.65 737.62 P
4 F
0.26 (con) 338.99 737.62 P
0.26 (verter) 354.44 737.62 P
0.26 (s) 380.6 737.62 P
3 F
0.26 (, which perform syntactic pattern) 384.87 737.62 P
0.28 0.04 (matching ag) 63.65 724.62 B
0.28 0.04 (ainst fragments of Dylan code and generate the ICR corresponding to the matched code. F) 118.39 724.62 B
0.28 0.04 (or) 522.44 724.62 B
0.28 0.14 (e) 63.65 711.62 B
0.28 0.14 (xample, when the compiler encounters a top-le) 68.5 711.62 B
0.28 0.14 (v) 282.28 711.62 B
0.28 0.14 (el v) 287.75 711.62 B
0.28 0.14 (ariable def) 304.49 711.62 B
0.28 0.14 (inition \050introduced by the Dylan) 352.41 711.62 B
2 F
0.28 0.14 (def) 502.84 711.62 B
0.28 0.14 (ine) 517.31 711.62 B
0.16 (v) 63.65 698.62 P
0.16 (ariable) 69.04 698.62 P
3 F
0.16 ( construct\051, the con) 102.04 698.62 P
0.16 (v) 186.39 698.62 P
0.16 (erter for) 191.73 698.62 P
2 F
0.16 (de\336ne v) 230.53 698.62 P
0.16 (ariable) 266.94 698.62 P
3 F
0.16 ( creates a ne) 299.94 698.62 P
0.16 (w instance of) 354.2 698.62 P
2 F
0.16 (<global-v) 416.09 698.62 P
0.16 (ariable-leaf>) 460.14 698.62 P
3 F
0.16 ( in) 520.18 698.62 P
-0.06 (the ICR to represent this v) 63.65 685.62 P
-0.06 (ariable and to record data such as its name, initial v) 178.88 685.62 P
-0.06 (alue, and typing information.) 403.8 685.62 P
0.28 0.03 (The back end of the compiler tra) 63.65 660.62 B
0.28 0.03 (v) 209.46 660.62 B
0.28 0.03 (erses the f) 214.82 660.62 B
0.28 0.03 (lo) 259.64 660.62 B
0.28 0.03 (w graph and emits code in the tar) 267.98 660.62 B
0.28 0.03 (get language for compiler) 416.88 660.62 B
0.28 0.01 (output. Methods in the back end specialize on node and leaf classes to enable them to produce the appro-) 63.65 647.62 B
(priate output.) 63.65 634.62 T
0 10 Q
(9.2.2) 63.65 600.29 T
(Compiler Suppor) 90.89 600.29 T
(t f) 172.21 600.29 T
(or Atomic and Fluid V) 181.45 600.29 T
(ariab) 284.2 600.29 T
(les) 308 600.29 T
3 11 Q
0.28 0.16 (The portability layer pro) 63.65 579.62 B
0.28 0.16 (vides support for atomic v) 176.21 579.62 B
0.28 0.16 (ariable access and for Dylan f) 296.74 579.62 B
0.28 0.16 (luid v) 433.42 579.62 B
0.28 0.16 (ariables \050imple-) 459.76 579.62 B
0.28 0.13 (mented as thread-local v) 63.65 566.62 B
0.28 0.13 (ariables\051. Atomic v) 175.24 566.62 B
0.28 0.13 (ariables and thread v) 262.68 566.62 B
0.28 0.13 (ariables are directly represented in the) 357.36 566.62 B
0.28 0.05 (f) 63.65 553.62 B
0.28 0.05 (lo) 66.75 553.62 B
0.28 0.05 (w graph, where the) 75.14 553.62 B
0.28 0.05 (y are subject to dataf) 160.98 553.62 B
0.28 0.05 (lo) 254.19 553.62 B
0.28 0.05 (w analysis. The v) 262.57 553.62 B
0.28 0.05 (ariables themselv) 340.94 553.62 B
0.28 0.05 (es appear as lea) 418.56 553.62 B
0.28 0.05 (v) 488.66 553.62 B
0.28 0.05 (es in the) 494.04 553.62 B
(graph.) 63.65 540.62 T
0.05 (Because both atomic and \337uid v) 63.65 515.62 P
0.05 (ariables need special treatment when the) 205.07 515.62 P
0.05 (y are accessed, the back end must) 383.22 515.62 P
-0.04 (emit output that is dif) 63.65 502.62 P
-0.04 (ferent from that for accessing other kinds of v) 157.96 502.62 P
-0.04 (ariables. The compiler de\336nes tw) 359.02 502.62 P
-0.04 (o spe-) 505.11 502.62 P
0.28 0.09 (cialized classes of leaf for the ICR,) 63.65 489.62 B
2 F
0.28 0.09 (<atomic-global-v) 226.03 489.62 B
0.28 0.09 (ariable-leaf>) 306.97 489.62 B
3 F
0.28 0.09 ( \050corresponding to atomic v) 368.18 489.62 B
0.28 0.09 (ariables\051) 493.05 489.62 B
0.15 (and) 63.65 476.62 P
2 F
0.15 (<\337uid-global-v) 82.43 476.62 P
0.15 (ariable-leaf>) 151.55 476.62 P
3 F
0.15 ( \050corresponding to \337uid v) 211.59 476.62 P
0.15 (ariables\051. These are subclasses of) 323.74 476.62 P
2 F
0.15 (<global-v) 473.55 476.62 P
0.15 (ar-) 517.6 476.62 P
(iable-leaf>) 63.65 463.62 T
3 F
( and therefore inherit general characteristics of lea) 113.3 463.62 T
(v) 333.92 463.62 T
(es that represent v) 339.25 463.62 T
(ariables.) 418.71 463.62 T
0.28 0.05 (ICR lea) 63.65 438.62 B
0.28 0.05 (v) 97.96 438.62 B
0.28 0.05 (es representing both atomic and f) 103.35 438.62 B
0.28 0.05 (luid v) 252.09 438.62 B
0.28 0.05 (ariables are created by the con) 277.76 438.62 B
0.28 0.05 (v) 413.71 438.62 B
0.28 0.05 (erter for) 419.09 438.62 B
2 F
0.28 0.05 (def) 458.62 438.62 B
0.28 0.05 (ine v) 472.83 438.62 B
0.28 0.05 (ariable) 495.55 438.62 B
3 F
0.28 0.05 (.) 528.9 438.62 B
0.28 0.01 (When the compiler encounters a def) 63.65 425.62 B
0.28 0.01 (inition of an atomic v) 223.83 425.62 B
0.28 0.01 (ariable \050introduced by the) 319.55 425.62 B
2 F
0.28 0.01 (def) 436.94 425.62 B
0.28 0.01 (ine atomic-v) 451.02 425.62 B
0.28 0.01 (aria-) 509.02 425.62 B
0.28 0.03 (ble) 63.65 412.62 B
3 F
0.28 0.03 ( construct\051, the con) 77.79 412.62 B
0.28 0.03 (v) 163.07 412.62 B
0.28 0.03 (erter for) 168.43 412.62 B
2 F
0.28 0.03 (def) 207.74 412.62 B
0.28 0.03 (ine v) 221.89 412.62 B
0.28 0.03 (ariable) 244.51 412.62 B
3 F
0.28 0.03 ( creates an instance of) 277.71 412.62 B
2 F
0.28 0.03 (<atomic-global-v) 379.65 412.62 B
0.28 0.03 (ariable-leaf>) 459.6 412.62 B
3 F
0.28 0.03 (in) 523.06 412.62 B
-0.08 (the ICR. When the compiler encounters a de\336nition of a \337uid v) 63.65 399.62 P
-0.08 (ariable \050introduced by the) 340.57 399.62 P
2 F
-0.08 (de\336ne \337uid-v) 456.35 399.62 P
-0.08 (ar-) 517.6 399.62 P
(iable) 63.65 386.62 T
3 F
( construct\051, the con) 86.26 386.62 T
(v) 170.14 386.62 T
(erter creates an instance of) 175.47 386.62 T
2 F
(<\337uid-global-v) 295.51 386.62 T
(ariable-leaf>) 364.63 386.62 T
3 F
(.) 424.67 386.62 T
-0.03 (The operations of reading, writing, and conditionally updating atomic v) 63.65 361.62 P
-0.03 (ariables and of reading and writing) 378.12 361.62 P
0.14 (\337uid v) 63.65 348.62 P
0.14 (ariables are not represented by primiti) 91.93 348.62 P
0.14 (v) 259.44 348.62 P
0.14 (e functions. Instead, the) 264.78 348.62 P
0.14 (y are represented directly in the \337o) 369.81 348.62 P
0.14 (w) 523.71 348.62 P
0.28 0.06 (graph. The) 63.65 335.62 B
0.28 0.06 (y are implemented by specializing methods on the leaf classes that represent atomic and f) 112.04 335.62 B
0.28 0.06 (luid) 514.34 335.62 B
(v) 63.65 322.62 T
(ariables.) 68.87 322.62 T
0 10 Q
(9.2.3) 63.65 288.29 T
(Compiler Suppor) 90.89 288.29 T
(t f) 172.21 288.29 T
(or Primitives) 181.45 288.29 T
3 11 Q
0.13 (When the compiler constructs the \337o) 63.65 267.62 P
0.13 (w graph, it represents a function call as a node in the ICR. Just as the) 226.27 267.62 P
0.28 0.03 (compiler distinguishes atomic and f) 63.65 254.62 B
0.28 0.03 (luid v) 222.31 254.62 B
0.28 0.03 (ariables by means of specialized leaf classes, so it distinguishes) 247.86 254.62 B
(calls to primiti) 63.65 241.62 T
(v) 127.55 241.62 T
(e functions of the portability interf) 132.88 241.62 T
(ace by means of a specialized node class.) 284.62 241.62 T
0.04 (A function call is an operation on se) 63.65 216.62 P
0.04 (v) 222.8 216.62 P
0.04 (eral components: the function object, the ar) 228.14 216.62 P
0.04 (guments, and the destina-) 419.1 216.62 P
0.28 0.01 (tion for returned v) 63.65 203.62 B
0.28 0.01 (alues. When the compiler encounters a re) 144.82 203.62 B
0.28 0.01 (gular Dylan call, which typically appears as a) 328.66 203.62 B
(call to a generic function, it represents the call in the ICR as a node of class) 63.65 190.62 T
2 F
(<combination>) 397.86 190.62 T
3 F
(.) 469.08 190.62 T
0.13 (Ho) 63.65 165.62 P
0.13 (we) 76.82 165.62 P
0.13 (v) 89.37 165.62 P
0.13 (er) 94.7 165.62 P
0.13 (, the compiler contains a table of the primiti) 102.81 165.62 P
0.13 (v) 296.38 165.62 P
0.13 (e functions in the portability interf) 301.72 165.62 P
0.13 (ace. Before creat-) 453.51 165.62 P
-0.05 (ing an ICR node to represent a function call, the compiler looks up the function being called in the table of) 63.65 152.62 P
-0.01 (primiti) 63.65 139.62 P
-0.01 (v) 93.33 139.62 P
-0.01 (es. If the function appears in the table, the compiler creates an ICR node of class) 98.66 139.62 P
2 F
-0.01 (<primiti) 455.34 139.62 P
-0.01 (v) 494.5 139.62 P
-0.01 (e-com-) 499.89 139.62 P
(bination>) 63.65 126.62 T
3 F
(.) 109.04 126.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(17) 520.53 84.9 T
3 11 Q
0.25 (When the back end tra) 63.65 737.62 P
0.25 (v) 163.38 737.62 P
0.25 (erses the \337o) 168.71 737.62 P
0.25 (w graph, methods specialized on the node class) 221.48 737.62 P
2 F
0.25 (<primiti) 434.55 737.62 P
0.25 (v) 473.71 737.62 P
0.25 (e-combina-) 479.1 737.62 P
(tion>) 63.65 724.62 T
3 F
( emit calls to primiti) 88.25 724.62 T
(v) 177.21 724.62 T
(e functions.) 182.55 724.62 T
0 12 Q
(9.3) 63.65 686.95 T
(Suppor) 90.65 686.95 T
(t f) 132.89 686.95 T
(or Dylan Langua) 143.98 686.95 T
(g) 237.88 686.95 T
(e Features) 245.33 686.95 T
0 10 Q
(9.3.1) 63.65 652.29 T
(Interfacing to Foreign Code) 90.89 652.29 T
3 11 Q
0.28 0.09 (It is intended that threads created by the Dylan library may inter) 63.65 631.62 B
0.28 0.09 (-operate with code written in other lan-) 354.32 631.62 B
0.02 (guages with no special constraints. Dylan is interf) 63.65 618.62 P
0.02 (aced with other languages via a F) 283.02 618.62 P
0.02 (oreign Language Inter-) 430.2 618.62 P
-0.06 (f) 63.65 605.62 P
-0.06 (ace \050) 67.2 605.62 P
4 F
-0.06 (FLI) 88.21 605.62 P
3 F
-0.06 (\051, which acts as a barrier between Dylan con) 104.71 605.62 P
-0.06 (v) 298.97 605.62 P
-0.06 (entions and the) 304.3 605.62 P
4 F
-0.06 (neutr) 373.48 605.62 P
-0.06 (al) 396.53 605.62 P
3 F
-0.06 ( con) 405.09 605.62 P
-0.06 (v) 423.23 605.62 P
-0.06 (entions of the platform.) 428.56 605.62 P
(The FLI is responsible for:) 63.65 592.62 T
0 9 Q
(1.) 99.65 573.62 T
3 11 Q
(mapping between Dylan and foreign data types,) 113.4 573.62 T
0 9 Q
(2.) 99.65 554.62 T
3 11 Q
(con) 113.4 554.62 T
(v) 128.84 554.62 T
(erting between Dylan and foreign calling con) 134.18 554.62 T
(v) 332.92 554.62 T
(entions) 338.25 554.62 T
0 9 Q
(3.) 99.65 535.62 T
3 11 Q
(maintaining the Dylan dynamic en) 113.4 535.62 T
(vironment) 265.11 535.62 T
0 9 Q
(4.) 99.65 516.62 T
3 11 Q
(maintaining an) 113.4 516.62 T
(y support necessary for g) 178.93 516.62 T
(arbage collection \050such as ensuring that all Dylan v) 289.45 516.62 T
(al-) 514.64 516.62 T
(ues can be traced\051.) 113.4 504.62 T
0.28 0.01 (The f) 63.65 480.62 B
0.28 0.01 (irst and second of these require no signif) 86.91 480.62 B
0.28 0.01 (icant e) 267.54 480.62 B
0.28 0.01 (xtensions to support multiple threads, since these are) 296.77 480.62 B
0.28 0.06 (inherently computations which ha) 63.65 467.62 B
0.28 0.06 (v) 215.64 467.62 B
0.28 0.06 (e no ef) 221.04 467.62 B
0.28 0.06 (fect on an) 251.68 467.62 B
0.28 0.06 (y thread other than the one performing the computa-) 296.06 467.62 B
(tion.) 63.65 454.62 T
0.28 0.07 (There is a requirement that the dynamic en) 63.65 429.62 B
0.28 0.07 (vironment for each thread is stored in a thread-local v) 256.45 429.62 B
0.28 0.07 (ariable.) 498.49 429.62 B
0.04 (Since the en) 63.65 416.62 P
0.04 (vironment is stored in this w) 117.05 416.62 P
0.04 (ay) 242.72 416.62 P
0.04 (, its v) 252.39 416.62 P
0.04 (alue is preserv) 276.34 416.62 P
0.04 (ed across calls into foreign code, and it will) 339.79 416.62 P
-0.24 (still be v) 63.65 403.62 P
-0.24 (alid if the foreign code calls back into Dylan. The techniques described in [MG95] for maintaining) 100.79 403.62 P
0.2 (the dynamic en) 63.65 390.62 P
0.2 (vironment across foreign calls are therefore directly appropriate to a multi-threaded imple-) 130.82 390.62 P
(mentation too.) 63.65 377.62 T
0.28 0.03 (If an object is passed to foreign code with dynamic e) 63.65 352.62 B
0.28 0.03 (xtent, then it is suf) 300.23 352.62 B
0.28 0.03 (f) 383.36 352.62 B
0.28 0.03 (icient to ensure that the object is) 386.46 352.62 B
-0.2 (referenced from the current stack, which the g) 63.65 339.62 P
-0.2 (arbage collector will scan conserv) 265.03 339.62 P
-0.2 (ati) 413.64 339.62 P
-0.2 (v) 424.36 339.62 P
-0.2 (ely) 429.7 339.62 P
-0.2 (. In a multi-threaded) 442.42 339.62 P
0.2 (implementation, the g) 63.65 326.62 P
0.2 (arbage collector will scan all the stacks conserv) 160.24 326.62 P
0.2 (ati) 370.61 326.62 P
0.2 (v) 381.33 326.62 P
0.2 (ely) 386.67 326.62 P
0.2 (, so there is no requirement to) 399.39 326.62 P
(maintain a thread-global data structure.) 63.65 313.62 T
0.28 0.09 (If an object is passed with indef) 63.65 288.62 B
0.28 0.09 (inite e) 207.56 288.62 B
0.28 0.09 (xtent, then it must be recorded in a table. The table may be main-) 235.49 288.62 B
0.28 0.2 (tained by the runtime system, by means of suitable primiti) 63.65 275.62 B
0.28 0.2 (v) 333.33 275.62 B
0.28 0.2 (e functions to add and remo) 338.86 275.62 B
0.28 0.2 (v) 467.9 275.62 B
0.28 0.2 (e references.) 473.43 275.62 B
0.28 0.14 (There are potentially synchronization problems associated with multiple threads manipulating a global) 63.65 262.62 B
0.28 0.01 (data structure \321 b) 63.65 249.62 B
0.28 0.01 (ut the runtime system implementation is free to choose whether to ha) 146 249.62 B
0.28 0.01 (v) 453.5 249.62 B
0.28 0.01 (e separate tables) 458.85 249.62 B
0.28 0.06 (for each thread, or whether to ha) 63.65 236.62 B
0.28 0.06 (v) 210.38 236.62 B
0.28 0.06 (e a global table with an associated lock to guard accesses. Either tech-) 215.77 236.62 B
(nique is possible \321 b) 63.65 223.62 T
(ut Harlequin ha) 158.76 223.62 T
(v) 226.98 223.62 T
(e not yet implemented this feature.) 232.31 223.62 T
(One further consideration is the interaction of the Dylan threads library itself with foreign components:) 63.65 198.62 T
-0.16 (If foreign code is not designed for multiple threads \050for instance, because it uses global data structures, and) 63.65 173.62 P
-0.26 (doesn\325) 63.65 160.62 P
-0.26 (t synchronize updates\051, then the code may f) 92.78 160.62 P
-0.26 (ail if it is in) 282.05 160.62 P
-0.26 (v) 331.29 160.62 P
-0.26 (ok) 336.57 160.62 P
-0.26 (ed from multiple Dylan threads. Ho) 347.46 160.62 P
-0.26 (we) 502.9 160.62 P
-0.26 (v) 515.46 160.62 P
-0.26 (er) 520.79 160.62 P
-0.26 (,) 528.9 160.62 P
0.19 (this problem is not related to the Dylan implementation, since it w) 63.65 147.62 P
0.19 (ould f) 357.09 147.62 P
0.19 (ail if called from multiple threads) 383.14 147.62 P
(created by an) 63.65 134.62 T
(y means. The solution is to modify the foreign component to mak) 122.12 134.62 T
(e it thread safe.) 410.45 134.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 18
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(18) 63.65 84.9 T
3 11 Q
0.28 0.05 (If foreign code is designed for use with multiple threads, then it is v) 63.65 737.62 B
0.28 0.05 (alid for it to use the synchronization) 369.07 737.62 B
-0.16 (f) 63.65 724.62 P
-0.16 (acilities of the Dylan library \050by calling back into Dylan, to in) 67.2 724.62 P
-0.16 (v) 337.55 724.62 P
-0.16 (ok) 342.83 724.62 P
-0.16 (e the Simple Threads Library synchroni-) 353.72 724.62 P
0.28 0.08 (zation functions\051. Alternati) 63.65 711.62 B
0.28 0.08 (v) 185.02 711.62 B
0.28 0.08 (ely) 190.44 711.62 B
0.28 0.08 (, it may use its o) 203.41 711.62 B
0.28 0.08 (wn methods for synchronization, pro) 278.08 711.62 B
0.28 0.08 (vided that these are) 444.06 711.62 B
0.28 0.07 (not incompatible with the methods pro) 63.65 698.62 B
0.28 0.07 (vided by the operating system. This is v) 237.65 698.62 B
0.28 0.07 (alid whene) 417.5 698.62 B
0.28 0.07 (v) 466.16 698.62 B
0.28 0.07 (er it has been) 471.56 698.62 B
0.28 0.1 (possible to implement the runtime system support for threads directly in terms of operating system fea-) 63.65 685.62 B
0.28 0 (tures, and it is anticipated that this will al) 63.65 672.62 B
0.28 0 (w) 246.98 672.62 B
0.28 0 (ays be true if the operating system supports threads. T) 254.82 672.62 B
0.28 0 (ypically) 494.16 672.62 B
0.28 0 (,) 528.9 672.62 B
(foreign code is e) 63.65 659.62 T
(xpected to mak) 136.49 659.62 T
(e direct use of operating system threads f) 203.59 659.62 T
(acilities.) 384.02 659.62 T
-0.2 (Ho) 63.65 634.62 P
-0.2 (we) 76.82 634.62 P
-0.2 (v) 89.37 634.62 P
-0.2 (er) 94.7 634.62 P
-0.2 (, a problem may arise if a thread is created in foreign code, and the ne) 102.81 634.62 P
-0.2 (w thread then calls back into) 406.49 634.62 P
0.08 (Dylan. In this case, the Dylan thread library itself will not be able to \336nd an e) 63.65 621.62 P
0.08 (xisting) 405.11 621.62 P
2 F
0.08 (<thr) 437.89 621.62 P
0.08 (ead>) 458.62 621.62 P
3 F
0.08 ( object cor-) 481.39 621.62 P
0.22 (responding to the current thread, and the \337uid v) 63.65 608.62 P
0.22 (ariables for the current thread will not ha) 274.39 608.62 P
0.22 (v) 455.63 608.62 P
0.22 (e been correctly) 460.96 608.62 P
0.28 0.08 (initialized. W) 63.65 595.62 B
0.28 0.08 (orse still, the g) 124.06 595.62 B
0.28 0.08 (arbage collector may not ha) 190.98 595.62 B
0.28 0.08 (v) 316.23 595.62 B
0.28 0.08 (e enough information to locate the roots of the) 321.65 595.62 B
0.28 0 (thread. Harlequin ha) 63.65 582.62 B
0.28 0 (v) 154.1 582.62 B
0.28 0 (e not yet allo) 159.43 582.62 B
0.28 0 (wed for this in their implementation, b) 217.12 582.62 B
0.28 0 (ut the) 388.14 582.62 B
0.28 0 (y ha) 413 582.62 B
0.28 0 (v) 431.69 582.62 B
0.28 0 (e an anticipated solu-) 437.03 582.62 B
(tion.) 63.65 569.62 T
-0.12 (It is possible to detect that a thread has ne) 63.65 544.62 P
-0.12 (v) 245.87 544.62 P
-0.12 (er been e) 251.21 544.62 P
-0.12 (x) 290.49 544.62 P
-0.12 (ecuting on the Dylan side of the FLI before because it) 295.83 544.62 P
0.28 0.21 (will ha) 63.65 531.62 B
0.28 0.21 (v) 95.41 531.62 B
0.28 0.21 (e an uninitialized \050zero\051 v) 100.95 531.62 B
0.28 0.21 (alue for its thread-local dynamic en) 220.43 531.62 B
0.28 0.21 (vironment v) 384.96 531.62 B
0.28 0.21 (ariable. This can be) 440.72 531.62 B
0.17 (check) 63.65 518.62 P
0.17 (ed at a call-in in the stub function which implements the FLI. Once such a thread has been detected,) 89.19 518.62 P
0.19 (appropriate initialization steps can be tak) 63.65 505.62 P
0.19 (en. A function in the runtime system can be called to re) 245.06 505.62 P
0.19 (gister the) 490.82 505.62 P
0.25 (stack of the thread for root tracing; the dynamic en) 63.65 492.62 P
0.25 (vironment can be set to point to a suitable v) 288.75 492.62 P
0.25 (alue on the) 482.88 492.62 P
0.24 (stack; \336nally a ne) 63.65 479.62 P
0.24 (w Dylan) 141.38 479.62 P
2 F
0.24 (<thr) 182.18 479.62 P
0.24 (ead>) 202.92 479.62 P
3 F
0.24 ( object can be allocated and initialized with) 225.69 479.62 P
2 F
0.24 (primiti) 421.27 479.62 P
0.24 (v) 454.16 479.62 P
0.24 (e-initialize-cur-) 459.55 479.62 P
(r) 63.65 466.62 T
(ent-thr) 68.33 466.62 T
(ead) 101.12 466.62 T
3 F
( \050as for the \336rst thread\051.) 117.62 466.62 T
0 10 Q
(9.3.2) 63.65 432.29 T
(Finalization) 90.89 432.29 T
3 11 Q
-0.16 (As has been discussed, the Dylan synchronization objects are implemented as wrappers around lo) 63.65 411.62 P
-0.16 (wer) 490.77 411.62 P
-0.16 (-le) 507.04 411.62 P
-0.16 (v) 518.37 411.62 P
-0.16 (el) 523.71 411.62 P
-0.02 (operating system structures. The Dylan objects are subject to g) 63.65 398.62 P
-0.02 (arbage collection, and their memory will be) 339.6 398.62 P
0.14 (automatically freed by the g) 63.65 385.62 P
0.14 (arbage collector at an unde\336ned point in the program. But the lo) 187.58 385.62 P
0.14 (w-le) 471.16 385.62 P
0.14 (v) 490.43 385.62 P
0.14 (el struc-) 495.77 385.62 P
0.28 0.05 (tures are not Dylan objects and must be e) 63.65 372.62 B
0.28 0.05 (xplicitly freed when the Dylan container is collected \050primiti) 249.26 372.62 B
0.28 0.05 (v) 521.38 372.62 B
0.28 0.05 (e) 526.76 372.62 B
0.28 0.14 (functions are pro) 63.65 359.62 B
0.28 0.14 (vided for this purpose\051. Ho) 140.94 359.62 B
0.28 0.14 (we) 264.38 359.62 B
0.28 0.14 (v) 277.21 359.62 B
0.28 0.14 (er) 282.69 359.62 B
0.28 0.14 (, the core language of Dylan pro) 291.08 359.62 B
0.28 0.14 (vides no) 439.07 359.62 B
4 F
0.28 0.14 (f) 480.6 359.62 B
0.28 0.14 (inalization) 483.18 359.62 B
3 F
0.06 (mechanism to in) 63.65 346.62 P
0.06 (v) 136.04 346.62 P
0.06 (ok) 141.32 346.62 P
0.06 (e cleanup code when objects are reclaimed. Harlequin\325) 152.21 346.62 P
0.06 (s implementation of the Simple) 393.31 346.62 P
0.28 0.08 (Threads Library strictly requires this, b) 63.65 333.62 B
0.28 0.08 (ut it is not yet implemented. It is intended to pro) 240.19 333.62 B
0.28 0.08 (vide f) 458.98 333.62 B
0.28 0.08 (inalization) 484.45 333.62 B
(support for Dylan with a ne) 63.65 320.62 T
(w g) 184.66 320.62 T
(arbage collector which is currently under de) 200.8 320.62 T
(v) 394.19 320.62 T
(elopment.) 399.52 320.62 T
0 15 Q
(10.) 63.65 278.95 T
(Runtime System Functions) 90.65 278.95 T
0 12 Q
(10.1) 63.65 239.95 T
(Primitive Functions f) 90.65 239.95 T
(or the threads librar) 209.1 239.95 T
(y) 322.58 239.95 T
3 11 Q
(This section describes in detail the ar) 63.65 218.62 T
(guments, v) 226.59 218.62 T
(alues, and operations of the primiti) 274.6 218.62 T
(v) 427.69 218.62 T
(e functions.) 433.03 218.62 T
0 10 Q
(10.1.1) 63.65 184.29 T
(Threads) 96.45 184.29 T
2 11 Q
(primitive-make-thread) 63.65 155.62 T
3 F
([Primiti) 483.81 155.62 T
(v) 517.77 155.62 T
(e]) 523.1 155.62 T
4 F
(Signatur) 81.65 130.62 T
(e) 119.14 130.62 T
2 F
(\050thr) 99.65 111.62 T
(ead :: <thr) 117.78 111.62 T
(ead>, name :: <optional-name>, priority :: <small-integer>,) 167.84 111.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 18
%%Page: "19" 19
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(19) 520.53 84.9 T
2 11 Q
(function :: <function>\051 => \050\051) 121.25 737.62 T
4 F
(Ar) 81.65 712.62 T
(guments) 92.24 712.62 T
2 F
(thr) 99.65 690.62 T
(ead) 114.11 690.62 T
3 F
(A Dylan thread object.) 171.65 690.62 T
2 F
(name) 99.65 668.62 T
3 F
(The name of the thread \050as a) 171.65 668.62 T
2 F
(<byte-string>) 299.63 668.62 T
3 F
(\051 or) 363.5 668.62 T
2 F
(#f) 381.83 668.62 T
3 F
(.) 390.99 668.62 T
2 F
(priority) 99.65 646.62 T
3 F
(The priority at which the thread is to run.) 171.65 646.62 T
2 F
(function) 99.65 624.62 T
3 F
(The initial function to run after the thread is created.) 171.65 624.62 T
4 F
(Description) 81.65 599.62 T
3 F
0.28 0.01 (Creates a ne) 99.65 577.62 B
0.28 0.01 (w OS thread and destructi) 153.83 577.62 B
0.28 0.01 (v) 269.22 577.62 B
0.28 0.01 (ely modif) 274.57 577.62 B
0.28 0.01 (ies the container slots in the Dylan thread object) 316.82 577.62 B
0.05 (with the handles of the ne) 99.65 564.62 P
0.05 (w OS thread. The ne) 212.96 564.62 P
0.05 (w OS thread is started in a w) 303.61 564.62 P
0.05 (ay which calls the sup-) 430.64 564.62 P
(plied Dylan function.) 99.65 551.62 T
2 F
(primitive-destroy-thread) 63.65 522.62 T
3 F
([Primiti) 483.81 522.62 T
(v) 517.77 522.62 T
(e]) 523.1 522.62 T
4 F
(Signatur) 81.65 497.62 T
(e) 119.14 497.62 T
2 F
(\050thr) 99.65 478.62 T
(ead :: <thr) 117.78 478.62 T
(ead>\051 => \050\051) 167.84 478.62 T
4 F
(Ar) 81.65 453.62 T
(guments) 92.24 453.62 T
2 F
(thr) 99.65 431.62 T
(ead) 114.11 431.62 T
3 F
(A Dylan thread object.) 171.65 431.62 T
4 F
(Description) 81.65 406.62 T
3 F
(Frees an) 99.65 384.62 T
(y runtime-allocated memory associated with the thread.) 136.44 384.62 T
2 F
(primitive-initialize-current-thread) 63.65 355.62 T
3 F
([Primiti) 483.81 355.62 T
(v) 517.77 355.62 T
(e]) 523.1 355.62 T
4 F
(Signatur) 81.65 330.62 T
(e) 119.14 330.62 T
2 F
(\050thr) 99.65 311.62 T
(ead :: <thr) 117.78 311.62 T
(ead>\051 => \050\051) 167.84 311.62 T
4 F
(Ar) 81.65 286.62 T
(guments) 92.24 286.62 T
2 F
(thr) 99.65 264.62 T
(ead) 114.11 264.62 T
3 F
(A Dylan thread object.) 171.65 264.62 T
4 F
(Description) 81.65 239.62 T
3 F
0.28 0.07 (The container slots in the Dylan thread object are destructi) 99.65 217.62 B
0.28 0.07 (v) 363.76 217.62 B
0.28 0.07 (ely modif) 369.17 217.62 B
0.28 0.07 (ied with the handles of the) 411.97 217.62 B
-0.07 (current OS thread. This function will be used to initialize the \336rst thread, which will not ha) 99.65 204.62 P
-0.07 (v) 497.98 204.62 P
-0.07 (e been) 503.31 204.62 P
(started as the result of a call to) 99.65 191.62 T
2 F
(primiti) 236.51 191.62 T
(v) 269.4 191.62 T
(e-mak) 274.79 191.62 T
(e-thr) 304.01 191.62 T
(ead) 327.02 191.62 T
3 F
(.) 343.52 191.62 T
2 F
(primitive-thread-join-single) 63.65 162.62 T
3 F
([Primiti) 483.81 162.62 T
(v) 517.77 162.62 T
(e]) 523.1 162.62 T
4 F
(Signatur) 81.65 137.62 T
(e) 119.14 137.62 T
2 F
(\050thr) 99.65 118.62 T
(ead :: <thr) 117.78 118.62 T
(ead>\051 => \050err) 167.84 118.62 T
(or) 230.43 118.62 T
(-code :: <small-integer>\051) 240.4 118.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 19
%%Page: "20" 20
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(20) 63.65 84.9 T
4 11 Q
(Ar) 81.65 737.62 T
(guments) 92.24 737.62 T
2 F
(thr) 99.65 715.62 T
(ead) 114.11 715.62 T
3 F
(A Dylan thread object.) 171.65 715.62 T
4 F
(V) 81.65 690.62 T
(alues) 87.15 690.62 T
2 F
(err) 102.4 668.62 T
(or) 116.85 668.62 T
(-code) 126.83 668.62 T
3 F
(0 = ok, an) 171.65 668.62 T
(ything else is an error) 215.57 668.62 T
(, corresponding to a multiple join.) 310.45 668.62 T
4 F
(Description) 81.65 643.62 T
3 F
(The calling thread blocks \050if necessary\051 until the speci\336ed thread has terminated.) 99.65 621.62 T
2 F
(primitive-thread-join-multiple) 63.65 592.62 T
3 F
([Primiti) 483.81 592.62 T
(v) 517.77 592.62 T
(e]) 523.1 592.62 T
4 F
(Signatur) 81.65 567.62 T
(e) 119.14 567.62 T
2 F
(\050thr) 99.65 548.62 T
(ead-v) 117.78 548.62 T
(ector :: <simple-object-v) 143.33 548.62 T
(ector>\051 => \050r) 258.22 548.62 T
(esult\051) 318.36 548.62 T
4 F
(Ar) 81.65 523.62 T
(guments) 92.24 523.62 T
2 F
(thr) 99.65 501.62 T
(ead-v) 114.11 501.62 T
(ector) 139.67 501.62 T
3 F
(A) 171.65 501.62 T
2 F
(<simple-object-v) 182.34 501.62 T
(ector>) 260.59 501.62 T
3 F
( containing) 290.68 501.62 T
2 F
(<thr) 342.62 501.62 T
(ead>) 363.36 501.62 T
3 F
( objects) 386.13 501.62 T
4 F
(V) 81.65 476.62 T
(alues) 87.15 476.62 T
2 F
(r) 99.65 454.62 T
(esult) 104.33 454.62 T
3 F
0.28 0.15 (The) 171.65 454.62 B
2 F
0.28 0.15 (<thr) 192.37 454.62 B
0.28 0.15 (ead>) 213.7 454.62 B
3 F
0.28 0.15 ( that w) 237.06 454.62 B
0.28 0.15 (as joined, if the join w) 268.48 454.62 B
0.28 0.15 (as successful; otherwise, a) 371.68 454.62 B
2 F
0.28 0.15 (<small-) 495.77 454.62 B
(integer>) 171.65 441.62 T
3 F
( indicating the error) 210.91 441.62 T
(.) 297.37 441.62 T
4 F
(Description) 81.65 416.62 T
3 F
(The calling thread blocks \050if necessary\051 until one of the speci\336ed threads has terminated.) 99.65 394.62 T
2 F
(primitive-thread-yield) 63.65 365.62 T
3 F
([Primiti) 483.81 365.62 T
(v) 517.77 365.62 T
(e]) 523.1 365.62 T
4 F
(Signatur) 81.65 340.62 T
(e) 119.14 340.62 T
2 F
(\050\051 => \050\051) 99.65 321.62 T
4 F
(Description) 81.65 296.62 T
3 F
0.28 0.26 (F) 99.65 274.62 B
0.28 0.26 (or co-operati) 105.86 274.62 B
0.28 0.26 (v) 165.73 274.62 B
0.28 0.26 (ely scheduled threads implementations, the calling thread yields e) 171.32 274.62 B
0.28 0.26 (x) 479.76 274.62 B
0.28 0.26 (ecution in) 485.35 274.62 B
(f) 99.65 261.62 T
(a) 103.2 261.62 T
(v) 107.86 261.62 T
(our of another thread. This may do nothing in some implementations.) 113.14 261.62 T
2 F
(primitive-current-thread) 63.65 232.62 T
3 F
([Primiti) 483.81 232.62 T
(v) 517.77 232.62 T
(e]) 523.1 232.62 T
4 F
(Signatur) 81.65 207.62 T
(e) 119.14 207.62 T
2 F
(\050\051 => \050thr) 99.65 188.62 T
(ead-handle\051) 143.14 188.62 T
4 F
(V) 81.65 163.62 T
(alues) 87.15 163.62 T
2 F
(thr) 99.65 141.62 T
(ead-handle) 114.11 141.62 T
3 F
(A lo) 171.65 141.62 T
(w-le) 190.62 141.62 T
(v) 209.9 141.62 T
(el handle corresponding to the current thread) 215.23 141.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 20
%%Page: "21" 21
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(21) 520.53 84.9 T
4 11 Q
(Description) 81.65 737.62 T
3 F
0.18 (Returns the lo) 99.65 715.62 P
0.18 (w-le) 161.45 715.62 P
0.18 (v) 180.73 715.62 P
0.18 (el handle of the current thread, which is assumed to be in the handle container) 186.06 715.62 P
0.28 0.15 (slot of one of the) 99.65 702.62 B
2 F
0.28 0.15 (<thr) 181.25 702.62 B
0.28 0.15 (ead>) 202.61 702.62 B
3 F
0.28 0.15 ( objects kno) 225.99 702.62 B
0.28 0.15 (wn to the Dylan library) 281.29 702.62 B
0.28 0.15 (. This result is therefore NO) 387.88 702.62 B
0.28 0.15 (T a) 516.71 702.62 B
-0.01 (Dylan object. The mapping from this v) 99.65 689.62 P
-0.01 (alue back to the) 270.72 689.62 P
2 F
-0.01 (<thr) 342.78 689.62 P
-0.01 (ead>) 363.51 689.62 P
3 F
-0.01 ( object must be performed by the) 386.28 689.62 P
0.28 0.06 (Dylan threads library) 99.65 676.62 B
0.28 0.06 (, and not the primiti) 194.2 676.62 B
0.28 0.06 (v) 283.36 676.62 B
0.28 0.06 (e layer) 288.75 676.62 B
0.28 0.06 (, because the) 318.62 676.62 B
2 F
0.28 0.06 (<thr) 379.53 676.62 B
0.28 0.06 (ead>) 400.5 676.62 B
3 F
0.28 0.06 ( object is subject to g) 423.51 676.62 B
0.28 0.06 (ar-) 519.38 676.62 B
(bage collection, and may not be referenced from an) 99.65 663.62 T
(y lo) 325.83 663.62 T
(w-le) 342.36 663.62 T
(v) 361.64 663.62 T
(el data structures.) 366.97 663.62 T
0 10 Q
(10.1.2) 63.65 629.29 T
(Simple Loc) 96.45 629.29 T
(ks) 149.6 629.29 T
2 11 Q
(primitive-make-simple-lock) 63.65 600.62 T
3 F
([Primiti) 483.81 600.62 T
(v) 517.77 600.62 T
(e]) 523.1 600.62 T
4 F
(Signatur) 81.65 575.62 T
(e) 119.14 575.62 T
2 F
(\050lock :: <portable-container>, name :: <optional-name>\051 => \050\051) 99.65 556.62 T
4 F
(Ar) 81.65 531.62 T
(guments) 92.24 531.62 T
2 F
(lock) 99.65 509.62 T
3 F
(A Dylan) 171.65 509.62 T
2 F
(<simple-lock>) 211.97 509.62 T
3 F
( object.) 278.29 509.62 T
2 F
(name) 99.65 487.62 T
3 F
(The name of the lock \050as a) 171.65 487.62 T
2 F
(<byte-string>) 291.09 487.62 T
3 F
(\051 or) 354.95 487.62 T
2 F
(#f) 373.28 487.62 T
3 F
(.) 382.44 487.62 T
4 F
(Description) 81.65 462.62 T
3 F
0.27 (Creates a ne) 99.65 440.62 P
0.27 (w OS lock and destructi) 153.68 440.62 P
0.27 (v) 260.2 440.62 P
0.27 (ely modi\336es the container slot in the Dylan lock object with) 265.54 440.62 P
(the handle of the ne) 99.65 427.62 T
(w OS lock.) 186.13 427.62 T
2 F
(primitive-destroy-simple-lock) 63.65 398.62 T
3 F
([Primiti) 483.81 398.62 T
(v) 517.77 398.62 T
(e]) 523.1 398.62 T
4 F
(Signatur) 81.65 373.62 T
(e) 119.14 373.62 T
2 F
(\050lock :: <portable-container>\051 => \050\051) 99.65 354.62 T
4 F
(Ar) 81.65 329.62 T
(guments) 92.24 329.62 T
2 F
(lock) 99.65 307.62 T
3 F
(A Dylan) 171.65 307.62 T
2 F
(<simple-lock>) 211.97 307.62 T
3 F
( object.) 278.29 307.62 T
4 F
(Description) 81.65 282.62 T
3 F
(Frees an) 99.65 260.62 T
(y runtime-allocated memory associated with the lock.) 136.44 260.62 T
2 F
(primitive-wait-for-simple-lock) 63.65 231.62 T
3 F
([Primiti) 483.81 231.62 T
(v) 517.77 231.62 T
(e]) 523.1 231.62 T
4 F
(Signatur) 81.65 206.62 T
(e) 119.14 206.62 T
2 F
(\050lock :: <portable-container>\051 => \050err) 99.65 187.62 T
(or) 276.04 187.62 T
(-code :: <small-integer>\051) 286.02 187.62 T
4 F
(Ar) 81.65 162.62 T
(guments) 92.24 162.62 T
2 F
(lock) 99.65 140.62 T
3 F
(A Dylan) 171.65 140.62 T
2 F
(<simple-lock>) 211.97 140.62 T
3 F
( object.) 278.29 140.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 21
%%Page: "22" 22
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(22) 63.65 84.9 T
4 11 Q
(V) 81.65 737.62 T
(alues) 87.15 737.62 T
2 F
(err) 99.65 715.62 T
(or) 114.1 715.62 T
(-code) 124.08 715.62 T
3 F
(0 = ok) 171.65 715.62 T
4 F
(Description) 81.65 690.62 T
3 F
0.28 0.05 (The calling thread blocks until the specif) 99.65 668.62 B
0.28 0.05 (ied lock is a) 282.25 668.62 B
0.28 0.05 (v) 336.3 668.62 B
0.28 0.05 (ailable \050unlock) 341.58 668.62 B
0.28 0.05 (ed\051 and then locks it. When) 408.11 668.62 B
(the function returns, the lock is o) 99.65 655.62 T
(wned by the calling thread.) 244.5 655.62 T
2 F
(primitive-wait-for-simple-lock-timed) 63.65 626.62 T
3 F
([Primiti) 483.81 626.62 T
(v) 517.77 626.62 T
(e]) 523.1 626.62 T
4 F
(Signatur) 81.65 601.62 T
(e) 119.14 601.62 T
2 F
(\050lock :: <portable-container>, millisecs :: <small-integer>\051) 99.65 582.62 T
(=> \050err) 121.25 569.62 T
(or) 154.65 569.62 T
(-code :: <small-integer>\051) 164.63 569.62 T
4 F
(Ar) 81.65 544.62 T
(guments) 92.24 544.62 T
2 F
(lock) 99.65 522.62 T
3 F
(A Dylan) 171.65 522.62 T
2 F
(<simple-lock>) 211.97 522.62 T
3 F
( object.) 278.29 522.62 T
2 F
(millisecs) 99.65 500.62 T
3 F
(T) 171.65 500.62 T
(imeout period in milliseconds) 177.98 500.62 T
4 F
(V) 81.65 475.62 T
(alues) 87.15 475.62 T
2 F
(err) 99.65 453.62 T
(or) 114.1 453.62 T
(-code) 124.08 453.62 T
3 F
(0 = ok, 1 = timeout e) 171.65 453.62 T
(xpired) 263.64 453.62 T
4 F
(Description) 81.65 428.62 T
3 F
0.28 0.2 (The calling thread blocks until either the specif) 99.65 406.62 B
0.28 0.2 (ied lock is a) 318.39 406.62 B
0.28 0.2 (v) 374.51 406.62 B
0.28 0.2 (ailable \050unlock) 379.93 406.62 B
0.28 0.2 (ed\051 or the timeout) 448.84 406.62 B
0.28 0.07 (period e) 99.65 393.62 B
0.28 0.07 (xpires. If the lock becomes a) 136.03 393.62 B
0.28 0.07 (v) 265.58 393.62 B
0.28 0.07 (ailable, this function locks it. If the function returns 0, the) 270.88 393.62 B
(lock is o) 99.65 380.62 T
(wned by the calling thread, otherwise a timeout occurred.) 136.65 380.62 T
2 F
(primitive-release-simple-lock) 63.65 351.62 T
3 F
([Primiti) 483.81 351.62 T
(v) 517.77 351.62 T
(e]) 523.1 351.62 T
4 F
(Signatur) 81.65 326.62 T
(e) 119.14 326.62 T
2 F
(\050lock :: <portable-container>\051 => \050err) 99.65 307.62 T
(or) 276.04 307.62 T
(-code :: <small-integer>\051) 286.02 307.62 T
4 F
(Ar) 81.65 282.62 T
(guments) 92.24 282.62 T
2 F
(lock) 99.65 260.62 T
3 F
(A Dylan) 171.65 260.62 T
2 F
(<simple-lock>) 211.97 260.62 T
3 F
( object.) 278.29 260.62 T
4 F
(V) 81.65 235.62 T
(alues) 87.15 235.62 T
2 F
(err) 99.65 213.62 T
(or) 114.1 213.62 T
(-code) 124.08 213.62 T
3 F
(0 = ok, 2 = not lock) 171.65 213.62 T
(ed) 258.2 213.62 T
4 F
(Description) 81.65 188.62 T
3 F
0.28 0.15 (Unlocks the specif) 99.65 166.62 B
0.28 0.15 (ied lock. The lock must be o) 184.09 166.62 B
0.28 0.15 (wned by the calling thread, otherwise the result) 314.51 166.62 B
(indicates \322not lock) 99.65 153.62 T
(ed\323.) 182.03 153.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 22
%%Page: "23" 23
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(23) 520.53 84.9 T
2 11 Q
(primitive-owned-simple-lock) 63.65 737.62 T
3 F
([Primiti) 483.81 737.62 T
(v) 517.77 737.62 T
(e]) 523.1 737.62 T
4 F
(Signatur) 81.65 712.62 T
(e) 119.14 712.62 T
2 F
(\050lock :: <portable-container>\051 => \050o) 99.65 693.62 T
(wned :: <small-integer>\051) 266.98 693.62 T
4 F
(Ar) 81.65 668.62 T
(guments) 92.24 668.62 T
2 F
(lock) 99.65 646.62 T
3 F
(A Dylan) 171.65 646.62 T
2 F
(<simple-lock>) 211.97 646.62 T
3 F
(object.) 281.04 646.62 T
4 F
(V) 81.65 621.62 T
(alues) 87.15 621.62 T
2 F
(o) 99.65 599.62 T
(wned) 105.04 599.62 T
3 F
(0= not o) 171.65 599.62 T
(wned, 1 = o) 208.13 599.62 T
(wned) 259.89 599.62 T
4 F
(Description) 81.65 574.62 T
3 F
(Returns 1 if the speci\336ed lock is o) 99.65 552.62 T
(wned \050lock) 249.39 552.62 T
(ed\051 by the calling thread.) 298.46 552.62 T
0 10 Q
(10.1.3) 63.65 518.29 T
(Recur) 96.45 518.29 T
(sive Loc) 124.64 518.29 T
(ks) 164.46 518.29 T
2 11 Q
(primitive-make-recursive-lock) 63.65 489.62 T
3 F
([Primiti) 483.81 489.62 T
(v) 517.77 489.62 T
(e]) 523.1 489.62 T
4 F
(Signatur) 81.65 464.62 T
(e) 119.14 464.62 T
2 F
(\050lock :: <portable-container>, name :: <optional-name>\051 => \050\051) 99.65 445.62 T
4 F
(Ar) 81.65 420.62 T
(guments) 92.24 420.62 T
2 F
(lock) 99.65 398.62 T
3 F
(A Dylan) 171.65 398.62 T
2 F
(<r) 211.97 398.62 T
(ecursi) 222.93 398.62 T
(v) 250.93 398.62 T
(e-lock>) 256.32 398.62 T
3 F
( object.) 290.69 398.62 T
2 F
(name) 99.65 376.62 T
3 F
(The name of the lock \050as a) 171.65 376.62 T
2 F
(<byte-string>) 291.09 376.62 T
3 F
(\051 or) 354.95 376.62 T
2 F
(#f) 373.28 376.62 T
3 F
(.) 382.44 376.62 T
4 F
(Description) 81.65 351.62 T
3 F
0.27 (Creates a ne) 99.65 329.62 P
0.27 (w OS lock and destructi) 153.68 329.62 P
0.27 (v) 260.2 329.62 P
0.27 (ely modi\336es the container slot in the Dylan lock object with) 265.54 329.62 P
(the handle of the ne) 99.65 316.62 T
(w OS lock.) 186.13 316.62 T
2 F
(primitive-destroy-recursive-lock) 63.65 287.62 T
3 F
([Primiti) 483.81 287.62 T
(v) 517.77 287.62 T
(e]) 523.1 287.62 T
4 F
(Signatur) 81.65 262.62 T
(e) 119.14 262.62 T
2 F
(\050lock :: <portable-container>\051 => \050\051) 99.65 243.62 T
4 F
(Ar) 81.65 218.62 T
(guments) 92.24 218.62 T
2 F
(lock) 99.65 196.62 T
3 F
(A Dylan) 171.65 196.62 T
2 F
( <r) 209.22 196.62 T
(ecursi) 222.93 196.62 T
(v) 250.93 196.62 T
(e-lock>) 256.32 196.62 T
3 F
( object.) 290.69 196.62 T
4 F
(Description) 81.65 171.62 T
3 F
(Frees an) 99.65 149.62 T
(y runtime-allocated memory associated with the lock.) 136.44 149.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 23
%%Page: "24" 24
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(24) 63.65 84.9 T
2 11 Q
(primitive-wait-for-recursive-lock) 63.65 737.62 T
3 F
([Primiti) 483.81 737.62 T
(v) 517.77 737.62 T
(e]) 523.1 737.62 T
4 F
(Signatur) 81.65 712.62 T
(e) 119.14 712.62 T
2 F
(\050lock :: <portable-container>\051 => \050err) 99.65 693.62 T
(or) 276.04 693.62 T
(-code :: <small-integer>\051) 286.02 693.62 T
4 F
(Ar) 81.65 668.62 T
(guments) 92.24 668.62 T
2 F
(lock) 99.65 646.62 T
3 F
(A Dylan) 171.65 646.62 T
2 F
(<r) 211.97 646.62 T
(ecursi) 222.93 646.62 T
(v) 250.93 646.62 T
(e-lock>) 256.32 646.62 T
3 F
( object.) 290.69 646.62 T
4 F
(V) 81.65 621.62 T
(alues) 87.15 621.62 T
2 F
(err) 99.65 599.62 T
(or) 114.1 599.62 T
(-code) 124.08 599.62 T
3 F
(0 = ok) 171.65 599.62 T
4 F
(Description) 81.65 574.62 T
3 F
(The calling thread blocks until the speci\336ed lock is a) 99.65 552.62 T
(v) 331.32 552.62 T
(ailable \050unlock) 336.54 552.62 T
(ed or already lock) 402.11 552.62 T
(ed by) 481.12 552.62 T
0.28 0.05 (the calling thread\051. When the lock becomes a) 99.65 539.62 B
0.28 0.05 (v) 302.17 539.62 B
0.28 0.05 (ailable, this function claims o) 307.45 539.62 B
0.28 0.05 (wnership of the lock) 439.72 539.62 B
(and increments the lock count. When the function returns, the lock is o) 99.65 526.62 T
(wned by the calling thread.) 410.99 526.62 T
2 F
(primitive-wait-for-recursive-lock-timed) 63.65 497.62 T
3 F
([Primiti) 483.81 497.62 T
(v) 517.77 497.62 T
(e]) 523.1 497.62 T
4 F
(Signatur) 81.65 472.62 T
(e) 119.14 472.62 T
2 F
(\050lock :: <portable-container>, millisecs :: <small-integer>\051) 99.65 453.62 T
(=> \050err) 121.25 440.62 T
(or) 154.65 440.62 T
(-code :: <small-integer>\051) 164.63 440.62 T
4 F
(Ar) 81.65 415.62 T
(guments) 92.24 415.62 T
2 F
(lock) 99.65 393.62 T
3 F
(A Dylan) 171.65 393.62 T
2 F
(<r) 211.97 393.62 T
(ecursi) 222.93 393.62 T
(v) 250.93 393.62 T
(e-lock>) 256.32 393.62 T
3 F
( object.) 290.69 393.62 T
2 F
(millisecs) 99.65 371.62 T
3 F
(T) 171.65 371.62 T
(imeout period in milliseconds) 177.98 371.62 T
4 F
(V) 81.65 346.62 T
(alues) 87.15 346.62 T
2 F
(err) 99.65 324.62 T
(or) 114.1 324.62 T
(-code) 124.08 324.62 T
3 F
(0 = ok, 1 = timeout e) 171.65 324.62 T
(xpired) 263.64 324.62 T
4 F
(Description) 81.65 299.62 T
3 F
(The calling thread blocks until the speci\336ed lock is a) 99.65 277.62 T
(v) 331.32 277.62 T
(ailable \050unlock) 336.54 277.62 T
(ed or already lock) 402.11 277.62 T
(ed by) 481.12 277.62 T
-0.23 (the calling thread\051. If the lock becomes a) 99.65 264.62 P
-0.23 (v) 277.42 264.62 P
-0.23 (ailable, this function claims o) 282.65 264.62 P
-0.23 (wnership of the lock, incre-) 411.3 264.62 P
0.28 0.28 (ments an internal lock count, and returns 0. If a timeout occurs, the function lea) 99.65 251.62 B
0.28 0.28 (v) 475.68 251.62 B
0.28 0.28 (es the lock) 481.29 251.62 B
(unmodi\336ed and returns 1.) 99.65 238.62 T
2 F
(primitive-release-recursive-lock) 63.65 209.62 T
3 F
([Primiti) 483.81 209.62 T
(v) 517.77 209.62 T
(e]) 523.1 209.62 T
4 F
(Signatur) 81.65 184.62 T
(e) 119.14 184.62 T
2 F
(\050lock :: <portable-container>\051 => \050err) 99.65 165.62 T
(or) 276.04 165.62 T
(-code :: <small-integer>\051) 286.02 165.62 T
4 F
(Ar) 81.65 140.62 T
(guments) 92.24 140.62 T
2 F
(lock) 99.65 118.62 T
3 F
(A Dylan) 171.65 118.62 T
2 F
( <r) 209.22 118.62 T
(ecursi) 222.93 118.62 T
(v) 250.93 118.62 T
(e-lock>) 256.32 118.62 T
3 F
( object.) 290.69 118.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 24
%%Page: "25" 25
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(25) 520.53 84.9 T
4 11 Q
(V) 81.65 737.62 T
(alues) 87.15 737.62 T
2 F
(err) 99.65 715.62 T
(or) 114.1 715.62 T
(-code) 124.08 715.62 T
3 F
(0 = ok, 2 = not lock) 171.65 715.62 T
(ed) 258.2 715.62 T
4 F
(Description) 81.65 690.62 T
3 F
0.28 0.05 (Checks that the lock is o) 99.65 668.62 B
0.28 0.05 (wned by the calling thread, and returns 2 if not. If the lock is o) 209.74 668.62 B
0.28 0.05 (wned, its) 491.29 668.62 B
(internal count is decremented by 1. If the count is then zero, the lock is then released.) 99.65 655.62 T
2 F
(primitive-owned-recursive-lock) 63.65 626.62 T
3 F
([Primiti) 483.81 626.62 T
(v) 517.77 626.62 T
(e]) 523.1 626.62 T
4 F
(Signatur) 81.65 601.62 T
(e) 119.14 601.62 T
2 F
(\050lock :: <portable-container>\051 => \050o) 99.65 582.62 T
(wned :: <small-integer>\051) 266.98 582.62 T
4 F
(Ar) 81.65 557.62 T
(guments) 92.24 557.62 T
2 F
(lock) 99.65 535.62 T
3 F
(A Dylan) 171.65 535.62 T
2 F
(<r) 211.97 535.62 T
(ecursi) 222.93 535.62 T
(v) 250.93 535.62 T
(e-lock>) 256.32 535.62 T
3 F
( object.) 290.69 535.62 T
4 F
(V) 81.65 510.62 T
(alues) 87.15 510.62 T
2 F
(o) 99.65 488.62 T
(wned) 105.04 488.62 T
3 F
(0= not o) 171.65 488.62 T
(wned, 1 = o) 208.13 488.62 T
(wned) 259.89 488.62 T
4 F
(Description) 81.65 463.62 T
3 F
(Returns 1 if the speci\336ed lock is lock) 99.65 441.62 T
(ed and o) 263 441.62 T
(wned by the calling thread.) 299.99 441.62 T
0 10 Q
(10.1.4) 63.65 407.29 T
(Semaphores) 96.45 407.29 T
2 11 Q
(primitive-make-semaphore) 63.65 378.62 T
3 F
([Primiti) 483.81 378.62 T
(v) 517.77 378.62 T
(e]) 523.1 378.62 T
4 F
(Signatur) 81.65 353.62 T
(e) 119.14 353.62 T
2 F
(\050lock :: <portable-container>, name :: <optional-name>,) 99.65 334.62 T
(initial :: <small-integer>, max :: <small-integer>\051 => \050\051) 121.25 321.62 T
4 F
(Ar) 81.65 296.62 T
(guments) 92.24 296.62 T
2 F
(lock) 99.65 274.62 T
3 F
(A Dylan) 171.65 274.62 T
2 F
(<semaphor) 211.97 274.62 T
(e>) 264.49 274.62 T
3 F
( object.) 275.64 274.62 T
2 F
(name) 99.65 252.62 T
3 F
(The name of the lock \050as a) 171.65 252.62 T
2 F
(<byte-string>) 291.09 252.62 T
3 F
(\051 or) 354.95 252.62 T
2 F
(#f) 373.28 252.62 T
3 F
(.) 382.44 252.62 T
2 F
(initial) 99.65 230.62 T
3 F
(The initial v) 171.65 230.62 T
(alue for the semaphore count) 225.15 230.62 T
4 F
(Description) 81.65 205.62 T
3 F
0.28 0.07 (Creates a ne) 99.65 183.62 B
0.28 0.07 (w OS semaphore with the specif) 154.54 183.62 B
0.28 0.07 (ied initial count and destructi) 300.12 183.62 B
0.28 0.07 (v) 431.48 183.62 B
0.28 0.07 (ely modif) 436.89 183.62 B
0.28 0.07 (ies the con-) 479.67 183.62 B
(tainer slot in the Dylan lock object with the handle of the ne) 99.65 170.62 T
(w OS semaphore.) 363.34 170.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "25" 25
%%Page: "26" 26
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(26) 63.65 84.9 T
2 11 Q
(primitive-destroy-semaphore) 63.65 737.62 T
3 F
([Primiti) 483.81 737.62 T
(v) 517.77 737.62 T
(e]) 523.1 737.62 T
4 F
(Signatur) 81.65 712.62 T
(e) 119.14 712.62 T
2 F
(\050lock :: <portable-container>\051 => \050\051) 99.65 693.62 T
4 F
(Ar) 81.65 668.62 T
(guments) 92.24 668.62 T
2 F
(lock) 99.65 646.62 T
3 F
(A Dylan) 171.65 646.62 T
2 F
(<semaphor) 211.97 646.62 T
(e>) 264.49 646.62 T
3 F
( object.) 275.64 646.62 T
4 F
(Description) 81.65 621.62 T
3 F
(Frees an) 99.65 599.62 T
(y runtime-allocated memory associated with the semaphore.) 136.44 599.62 T
2 F
(primitive-wait-for-semaphore) 63.65 570.62 T
3 F
([Primiti) 483.81 570.62 T
(v) 517.77 570.62 T
(e]) 523.1 570.62 T
4 F
(Signatur) 81.65 545.62 T
(e) 119.14 545.62 T
2 F
(\050lock :: <portable-container>\051 => \050err) 99.65 526.62 T
(or) 276.04 526.62 T
(-code :: <small-integer>\051) 286.02 526.62 T
4 F
(Ar) 81.65 501.62 T
(guments) 92.24 501.62 T
2 F
(lock) 99.65 479.62 T
3 F
(A Dylan) 171.65 479.62 T
2 F
(<semaphor) 211.97 479.62 T
(e>) 264.49 479.62 T
3 F
( object.) 275.64 479.62 T
4 F
(V) 81.65 454.62 T
(alues) 87.15 454.62 T
2 F
(err) 99.65 432.62 T
(or) 114.1 432.62 T
(-code) 124.08 432.62 T
3 F
(0 = ok) 171.65 432.62 T
4 F
(Description) 81.65 407.62 T
3 F
0.09 (The calling thread blocks until the internal count of the speci\336ed semaphore becomes greater than) 99.65 385.62 P
(zero. It then decrements the semaphore count.) 99.65 372.62 T
2 F
(primitive-wait-for-semaphore-timed) 63.65 343.62 T
3 F
([Primiti) 483.81 343.62 T
(v) 517.77 343.62 T
(e]) 523.1 343.62 T
4 F
(Signatur) 81.65 318.62 T
(e) 119.14 318.62 T
2 F
(\050lock :: <portable-container>, millisecs :: <small-integer>\051) 99.65 299.62 T
(=> \050err) 121.25 286.62 T
(or) 154.65 286.62 T
(-code :: <small-integer>\051) 164.63 286.62 T
4 F
(Ar) 81.65 261.62 T
(guments) 92.24 261.62 T
2 F
(lock) 99.65 239.62 T
3 F
(A Dylan) 171.65 239.62 T
2 F
(<semaphor) 211.97 239.62 T
(e>) 264.49 239.62 T
3 F
( object.) 275.64 239.62 T
2 F
(millisecs) 99.65 217.62 T
3 F
(T) 171.65 217.62 T
(imeout period in milliseconds) 177.98 217.62 T
4 F
(V) 81.65 192.62 T
(alues) 87.15 192.62 T
2 F
(err) 99.65 170.62 T
(or) 114.1 170.62 T
(-code) 124.08 170.62 T
3 F
(0 = ok, 1 = timeout e) 171.65 170.62 T
(xpired) 263.64 170.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "26" 26
%%Page: "27" 27
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(27) 520.53 84.9 T
4 11 Q
(Description) 81.65 737.62 T
3 F
0.28 0.27 (The calling thread blocks until either the internal count of the specif) 99.65 715.62 B
0.28 0.27 (ied semaphore becomes) 420.55 715.62 B
0.28 0.12 (greater than zero or the timeout period e) 99.65 702.62 B
0.28 0.12 (xpires. In the former case, the function decrements the) 283.32 702.62 B
(semaphore count and returns 0. In the latter case, the function returns 1.) 99.65 689.62 T
2 F
(primitive-release-semaphore) 63.65 660.62 T
3 F
([Primiti) 483.81 660.62 T
(v) 517.77 660.62 T
(e]) 523.1 660.62 T
4 F
(Signatur) 81.65 635.62 T
(e) 119.14 635.62 T
2 F
(\050lock :: <portable-container>\051 => \050err) 99.65 616.62 T
(or) 276.04 616.62 T
(-code :: <small-integer>\051) 286.02 616.62 T
4 F
(Ar) 81.65 591.62 T
(guments) 92.24 591.62 T
2 F
(lock) 99.65 569.62 T
3 F
(A Dylan) 171.65 569.62 T
2 F
(<semaphor) 211.97 569.62 T
(e>) 264.49 569.62 T
3 F
( object.) 275.64 569.62 T
4 F
(V) 81.65 544.62 T
(alues) 87.15 544.62 T
2 F
(err) 99.65 522.62 T
(or) 114.1 522.62 T
(-code) 124.08 522.62 T
3 F
(0 = ok,) 171.65 522.62 T
(3 = count e) 205.35 522.62 T
(xceeded) 254.47 522.62 T
4 F
(Description) 81.65 497.62 T
3 F
0.17 (This function checks that internal count of the semaphore is not at its maximum limit, and returns) 99.65 475.62 P
(3 if the test f) 99.65 462.62 T
(ails. Otherwise the internal count is incremented.) 155.14 462.62 T
0 10 Q
(10.1.5) 63.65 428.29 T
(Noti\336cations) 96.45 428.29 T
2 11 Q
(primitive-make-notification) 63.65 399.62 T
3 F
([Primiti) 483.81 399.62 T
(v) 517.77 399.62 T
(e]) 523.1 399.62 T
4 F
(Signatur) 81.65 374.62 T
(e) 119.14 374.62 T
2 F
(\050noti\336cation :: <portable-container>, name :: <optional-name>\051 => \050\051) 99.65 355.62 T
4 F
(Ar) 81.65 330.62 T
(guments) 92.24 330.62 T
2 F
(noti\336cation) 99.65 308.62 T
3 F
(A Dylan <) 171.65 308.62 T
2 F
(noti\336cation>) 218.18 308.62 T
3 F
( object.) 277.62 308.62 T
2 F
(name) 99.65 286.62 T
3 F
(The name of the noti\336cation \050as a) 171.65 286.62 T
2 F
(<byte-string>) 322.26 286.62 T
3 F
(\051 or) 386.13 286.62 T
2 F
(#f) 404.45 286.62 T
3 F
(.) 413.61 286.62 T
4 F
(Description) 81.65 261.62 T
3 F
0.24 (Creates a ne) 99.65 239.62 P
0.24 (w OS noti\336cation \050condition v) 153.61 239.62 P
0.24 (ariable\051 and destructi) 288.13 239.62 P
0.24 (v) 381.2 239.62 P
0.24 (ely modi\336es the container slot in) 386.54 239.62 P
(the Dylan lock object with the handle of the ne) 99.65 226.62 T
(w OS noti\336cation.) 305.59 226.62 T
2 F
(primitive-destroy-notification) 63.65 197.62 T
3 F
([Primiti) 483.81 197.62 T
(v) 517.77 197.62 T
(e]) 523.1 197.62 T
4 F
(Signatur) 81.65 172.62 T
(e) 119.14 172.62 T
2 F
(\050noti\336cation :: <portable-container>\051 => \050\051) 99.65 153.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "27" 27
%%Page: "28" 28
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(28) 63.65 84.9 T
4 11 Q
(Ar) 81.65 737.62 T
(guments) 92.24 737.62 T
2 F
(noti\336cation) 99.65 715.62 T
3 F
(A Dylan) 171.65 715.62 T
2 F
(<noti\336cation>) 211.97 715.62 T
3 F
( object.) 277.69 715.62 T
4 F
(Description) 81.65 690.62 T
3 F
(Frees an) 99.65 668.62 T
(y runtime-allocated memory associated with the noti\336cation.) 136.44 668.62 T
2 F
(primitive-wait-for-notification) 63.65 639.62 T
3 F
([Primiti) 483.81 639.62 T
(v) 517.77 639.62 T
(e]) 523.1 639.62 T
4 F
(Signatur) 81.65 614.62 T
(e) 119.14 614.62 T
2 F
(\050noti\336cation :: <portable-container>, lock :: <portable-container>\051) 99.65 595.62 T
(=> \050err) 121.25 582.62 T
(or) 154.65 582.62 T
(-code :: <small-integer>\051) 164.63 582.62 T
4 F
(Ar) 81.65 557.62 T
(guments) 92.24 557.62 T
2 F
(noti\336cation) 99.65 535.62 T
3 F
(A Dylan) 171.65 535.62 T
2 F
(<noti\336cation>) 211.97 535.62 T
3 F
( object.) 277.69 535.62 T
2 F
(lock) 99.65 513.62 T
3 F
(A Dylan) 171.65 513.62 T
2 F
(<simple-lock>) 211.97 513.62 T
3 F
( object.) 278.29 513.62 T
4 F
(V) 81.65 488.62 T
(alues) 87.15 488.62 T
2 F
(err) 99.65 466.62 T
(or) 114.1 466.62 T
(-code) 124.08 466.62 T
3 F
(0 = ok, 2 = not lock) 171.65 466.62 T
(ed, 3 = other error) 258.2 466.62 T
4 F
(Description) 81.65 441.62 T
3 F
0.14 (The function checks that the speci\336ed lock is o) 99.65 419.62 P
0.14 (wned by the calling thread, and returns 2 if the test) 306.98 419.62 P
-0.15 (f) 99.65 406.62 P
-0.15 (ails. Otherwise, the calling thread atomically releases the lock and then blocks, w) 103.2 406.62 P
-0.15 (aiting to be noti-) 459.06 406.62 P
0.28 0.04 (f) 99.65 393.62 B
0.28 0.04 (ied of the condition represented by the specif) 102.74 393.62 B
0.28 0.04 (ied notif) 304.08 393.62 B
0.28 0.04 (ication. When the calling thread is notif) 341.07 393.62 B
0.28 0.04 (ied) 518.13 393.62 B
0.09 (of the condition, the function reclaims o) 99.65 380.62 P
0.09 (wnership of the lock, blocking if necessary) 276.23 380.62 P
0.09 (, before return-) 465.18 380.62 P
(ing 0.) 99.65 367.62 T
2 F
(primitive-wait-for-notification-timed) 63.65 338.62 T
3 F
([Primiti) 483.81 338.62 T
(v) 517.77 338.62 T
(e]) 523.1 338.62 T
4 F
(Signatur) 81.65 313.62 T
(e) 119.14 313.62 T
2 F
(\050noti\336cation :: <portable-container>, lock :: <portable-container>,) 99.65 294.62 T
(millisecs :: <small-integer>\051 => \050err) 121.25 281.62 T
(or) 287.86 281.62 T
(-code :: <small-integer>\051) 297.84 281.62 T
4 F
(Ar) 81.65 256.62 T
(guments) 92.24 256.62 T
2 F
(noti\336cation) 99.65 234.62 T
3 F
(A Dylan) 171.65 234.62 T
2 F
(<noti\336cation>) 211.97 234.62 T
3 F
( object.) 277.69 234.62 T
2 F
(lock) 99.65 212.62 T
3 F
(A Dylan) 171.65 212.62 T
2 F
(<simple-lock>) 211.97 212.62 T
3 F
( object.) 278.29 212.62 T
2 F
(millisecs) 99.65 190.62 T
3 F
(T) 171.65 190.62 T
(imeout period in milliseconds) 177.98 190.62 T
4 F
(V) 81.65 165.62 T
(alues) 87.15 165.62 T
2 F
(err) 99.65 143.62 T
(or) 114.1 143.62 T
(-code) 124.08 143.62 T
3 F
(0 = ok, 1 = timeout, 2 = not lock) 171.65 143.62 T
(ed, 3 = other error) 314.52 143.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "28" 28
%%Page: "29" 29
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(29) 520.53 84.9 T
4 11 Q
(Description) 81.65 737.62 T
3 F
0.14 (The function checks that the speci\336ed lock is o) 99.65 715.62 P
0.14 (wned by the calling thread, and returns 2 if the test) 306.98 715.62 P
-0.15 (f) 99.65 702.62 P
-0.15 (ails. Otherwise, the calling thread atomically releases the lock and then blocks, w) 103.2 702.62 P
-0.15 (aiting to be noti-) 459.06 702.62 P
0.28 0.03 (f) 99.65 689.62 B
0.28 0.03 (ied of the condition represented by the specif) 102.74 689.62 B
0.28 0.03 (ied notif) 303.73 689.62 B
0.28 0.03 (ication, or for the timeout period to e) 340.65 689.62 B
0.28 0.03 (xpire.) 506.14 689.62 B
-0.13 (The function then reclaims o) 99.65 676.62 P
-0.13 (wnership of the lock, blocking inde\336nitely if necessary) 225.32 676.62 P
-0.13 (, before return-) 465.64 676.62 P
(ing either 0 or 1 to indicate whether a timeout occurred.) 99.65 663.62 T
2 F
(primitive-release-notification) 63.65 634.62 T
3 F
([Primiti) 483.81 634.62 T
(v) 517.77 634.62 T
(e]) 523.1 634.62 T
4 F
(Signatur) 81.65 609.62 T
(e) 119.14 609.62 T
2 F
(\050noti\336cation :: <portable-container>, lock :: <portable-container>\051) 99.65 590.62 T
(=> \050err) 121.25 577.62 T
(or) 154.65 577.62 T
(-code :: <small-integer>\051) 164.63 577.62 T
4 F
(Ar) 81.65 552.62 T
(guments) 92.24 552.62 T
2 F
(noti\336cation) 99.65 530.62 T
3 F
(A Dylan) 171.65 530.62 T
2 F
(<noti\336cation>) 211.97 530.62 T
3 F
( object.) 277.69 530.62 T
2 F
(lock) 99.65 508.62 T
3 F
(A Dylan) 171.65 508.62 T
2 F
(<simple-lock>) 211.97 508.62 T
3 F
( object.) 278.29 508.62 T
4 F
(V) 81.65 483.62 T
(alues) 87.15 483.62 T
2 F
(err) 99.65 461.62 T
(or) 114.1 461.62 T
(-code) 124.08 461.62 T
3 F
(0 = ok, 2 = not lock) 171.65 461.62 T
(ed) 258.2 461.62 T
4 F
(Description) 81.65 436.62 T
3 F
0.23 (If the calling thread does not o) 99.65 414.62 P
0.23 (wn the speci\336ed lock, the function returns the error v) 235.19 414.62 P
0.23 (alue 2. Other-) 470.4 414.62 P
0.09 (wise, the function releases the speci\336ed noti\336cation, notifying another thread that is block) 99.65 401.62 P
0.09 (ed w) 495.93 401.62 P
0.09 (ait-) 516.98 401.62 P
0.28 0.31 (ing for the notif) 99.65 388.62 B
0.28 0.31 (ication to occur) 174.52 388.62 B
0.28 0.31 (. If more than one thread is w) 247.89 388.62 B
0.28 0.31 (aiting for the notif) 388.58 388.62 B
0.28 0.31 (ication, it is) 475.4 388.62 B
(unspeci\336ed which thread is noti\336ed. If no threads are w) 99.65 375.62 T
(aiting, then the release has no ef) 343.94 375.62 T
(fect.) 485.1 375.62 T
2 F
(primitive-release-all-notification) 63.65 346.62 T
3 F
([Primiti) 483.81 346.62 T
(v) 517.77 346.62 T
(e]) 523.1 346.62 T
4 F
(Signatur) 81.65 321.62 T
(e) 119.14 321.62 T
2 F
(\050noti\336cation :: <portable-container>, lock :: <portable-container>\051) 99.65 302.62 T
(=> \050err) 121.25 289.62 T
(or) 154.65 289.62 T
(-code :: <small-integer>\051) 164.63 289.62 T
4 F
(Ar) 81.65 264.62 T
(guments) 92.24 264.62 T
2 F
(noti\336cation) 99.65 242.62 T
3 F
(A Dylan) 171.65 242.62 T
2 F
(<noti\336cation>) 211.97 242.62 T
3 F
( object.) 277.69 242.62 T
2 F
(lock) 99.65 220.62 T
3 F
(A Dylan) 171.65 220.62 T
2 F
(<simple-lock>) 211.97 220.62 T
3 F
(object.) 281.04 220.62 T
4 F
(V) 81.65 195.62 T
(alues) 87.15 195.62 T
2 F
(err) 99.65 173.62 T
(or) 114.1 173.62 T
(-code) 124.08 173.62 T
3 F
(0 = ok, 2 = not lock) 171.65 173.62 T
(ed) 258.2 173.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "29" 29
%%Page: "30" 30
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(30) 63.65 84.9 T
4 11 Q
(Description) 81.65 737.62 T
3 F
0.23 (If the calling thread does not o) 99.65 715.62 P
0.23 (wn the speci\336ed lock, the function returns the error v) 235.19 715.62 P
0.23 (alue 2. Other-) 470.4 715.62 P
0.28 0.09 (wise, the function releases the specif) 99.65 702.62 B
0.28 0.09 (ied notif) 265.19 702.62 B
0.28 0.09 (ication, notifying all other threads that are block) 302.66 702.62 B
0.28 0.09 (ed) 521.17 702.62 B
(w) 99.65 689.62 T
(aiting for the noti\336cation to occur) 107.48 689.62 T
(. If no threads are w) 255.06 689.62 T
(aiting, then the release has no ef) 342.91 689.62 T
(fect.) 484.08 689.62 T
0 10 Q
(10.1.6) 63.65 655.29 T
(Timer) 96.45 655.29 T
(s) 123.53 655.29 T
2 11 Q
(primitive-sleep) 63.65 626.62 T
3 F
([Primiti) 483.81 626.62 T
(v) 517.77 626.62 T
(e]) 523.1 626.62 T
4 F
(Signatur) 81.65 601.62 T
(e) 119.14 601.62 T
2 F
(\050millisecs :: <small-integer>\051 => \050\051) 99.65 582.62 T
4 F
(Ar) 81.65 557.62 T
(guments) 92.24 557.62 T
2 F
(millisecs) 99.65 535.62 T
3 F
(T) 171.65 535.62 T
(ime interv) 177.98 535.62 T
(al in milliseconds) 222.62 535.62 T
4 F
(Description) 81.65 510.62 T
3 F
(This function causes the calling thread to block for the speci\336ed time interv) 99.65 488.62 T
(al.) 431.77 488.62 T
0 10 Q
(10.1.7) 63.65 454.29 T
(Thread V) 96.45 454.29 T
(ariab) 138.64 454.29 T
(les) 162.44 454.29 T
2 11 Q
(primitive-allocate-thread-variable) 63.65 425.62 T
3 F
([Primiti) 483.81 425.62 T
(v) 517.77 425.62 T
(e]) 523.1 425.62 T
4 F
(Signatur) 81.65 400.62 T
(e) 119.14 400.62 T
2 F
(\050initial-v) 99.65 381.62 T
(alue\051 => \050handle-on-v) 139.88 381.62 T
(ariable\051) 240.92 381.62 T
4 F
(Ar) 81.65 356.62 T
(guments) 92.24 356.62 T
2 F
(initial-v) 99.65 334.62 T
(alue) 136.21 334.62 T
3 F
(A Dylan object that is to be the initial v) 171.65 334.62 T
(alue of the \337uid v) 345.23 334.62 T
(ariable.) 422.56 334.62 T
4 F
(V) 81.65 309.62 T
(alues) 87.15 309.62 T
2 F
(handle-on-v) 99.65 287.62 T
(ariable) 155.77 287.62 T
3 F
-0.11 (An OS handle on the \337uid v) 171.65 274.62 P
-0.11 (ariable, to be stored as the immediate v) 294.14 274.62 P
-0.11 (alue of the v) 465.37 274.62 P
-0.11 (ar-) 519.44 274.62 P
0.09 (iable. V) 171.65 261.62 P
0.09 (ariable reading and assignment will indirect through this handle. The han-) 205.35 261.62 P
(dle is not a Dylan object.) 171.65 248.62 T
4 F
(Description) 81.65 223.62 T
3 F
0.28 0.02 (This function creates a ne) 99.65 201.62 B
0.28 0.02 (w thread-local v) 214.07 201.62 B
0.28 0.02 (ariable handle, and assigns the specif) 286.18 201.62 B
0.28 0.02 (ied initial v) 450.92 201.62 B
0.28 0.02 (alue to) 501.6 201.62 B
0.28 0.09 (the location indicated by the handle. The function must arrange to assign the initial v) 99.65 188.62 B
0.28 0.09 (alue to the) 484.34 188.62 B
-0.15 (thread-local location associated with all other e) 99.65 175.62 P
-0.15 (xisting threads, too. The function must also arrange) 306.31 175.62 P
0.28 0.04 (that whene) 99.65 162.62 B
0.28 0.04 (v) 148.01 162.62 B
0.28 0.04 (er a ne) 153.38 162.62 B
0.28 0.04 (w thread is subsequently created, it also has its thread-local location indicated) 183.25 162.62 B
(by the handle set to the initial v) 99.65 149.62 T
(alue.) 237.79 149.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "30" 30
%%Page: "31" 31
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(31) 520.53 84.9 T
0 12 Q
(10.2) 63.65 736.95 T
(Simple Runtime Primitives) 90.65 736.95 T
2 11 Q
(primitive_allocate) 63.65 707.62 T
3 F
([Function]) 485.21 707.62 T
4 F
(Signatur) 81.65 682.62 T
(e:) 119.14 682.62 T
2 F
(Z primiti) 99.65 663.62 T
(v) 142.62 663.62 T
(e_allocate\050int size\051) 148.01 663.62 T
4 F
(Implementation:) 81.65 638.62 T
3 F
-0.16 (This is the interf) 99.65 616.62 P
-0.16 (ace to the memory allocator which might be dependent on the g) 171.47 616.62 P
-0.16 (arbage collector) 449.8 616.62 P
-0.16 (. It) 519.59 616.62 P
-0.21 (tak) 99.65 603.62 P
-0.21 (es a size in bytes as a parameter) 112.98 603.62 P
-0.21 (, and returns some freshly allocated memory which the run-time) 251.27 603.62 P
(system kno) 99.65 590.62 T
(ws ho) 149.18 590.62 T
(w to memory-manage.) 174.88 590.62 T
2 F
(primitive_byte_allocate) 63.65 561.62 T
3 F
([Function]) 485.21 561.62 T
4 F
(Signatur) 81.65 536.62 T
(e:) 119.14 536.62 T
2 F
(Z primiti) 99.65 517.62 T
(v) 142.62 517.62 T
(e_byte_allocate\050int w) 148.01 517.62 T
(ord-size, int byte-size\051) 247.19 517.62 T
4 F
(Implementation:) 81.65 492.62 T
3 F
0.04 (This is b) 99.65 470.62 P
0.04 (uilt on the same mechanism as) 137.41 470.62 P
2 F
0.04 (primiti) 275.15 470.62 P
0.04 (v) 308.04 470.62 P
0.04 (e_allocate) 313.43 470.62 P
3 F
0.04 (, b) 359.86 470.62 P
0.04 (ut it is speci\336cally designed for allo-) 370.68 470.62 P
-0.17 (cating objects which ha) 99.65 457.62 P
-0.17 (v) 202.49 457.62 P
-0.17 (e Dylan slots, b) 207.83 457.62 P
-0.17 (ut also ha) 275.55 457.62 P
-0.17 (v) 317.17 457.62 P
-0.17 (e a repeated slot of byte-sized elements, such as) 322.5 457.62 P
0.28 0.04 (a byte string, or a byte v) 99.65 444.62 B
0.28 0.04 (ector) 208.66 444.62 B
0.28 0.04 (. It tak) 230.22 444.62 B
0.28 0.04 (es tw) 259.35 444.62 B
0.28 0.04 (o parameters, a size in \324w) 282.6 444.62 B
0.28 0.04 (ords\325 for the object slots \050e.g.,) 397.18 444.62 B
0.25 (one for \324class\325 and a second for \324size\325\051, follo) 99.65 431.62 P
0.25 (wed by the number of bytes for the v) 296.53 431.62 P
0.25 (ector) 460.86 431.62 P
0.25 (. The v) 482.25 431.62 P
0.25 (alue) 513.32 431.62 P
(returned from the primiti) 99.65 418.62 T
(v) 209.05 418.62 T
(e is the freshly allocated memory making up the string.) 214.39 418.62 T
2 F
(primitive_fill_E_) 63.65 389.62 T
3 F
([Function]) 485.21 389.62 T
4 F
(Signatur) 81.65 364.62 T
(e:) 119.14 364.62 T
2 F
(Z primiti) 99.65 345.62 T
(v) 142.62 345.62 T
(e_\336ll_E_ \050Z storage[], int size, Z v) 148.01 345.62 T
(alue\051) 306.17 345.62 T
4 F
(Implementation:) 81.65 320.62 T
3 F
0.24 (\050The odd name is a result of name mangling from) 99.65 298.62 P
2 F
0.24 (primiti) 323.2 298.62 P
0.24 (v) 356.09 298.62 P
0.24 (e-\336ll!) 361.48 298.62 P
3 F
0.24 (\051. This tak) 385.92 298.62 P
0.24 (es a Dylan object \050or a) 431.19 298.62 P
-0.08 (pointer to the middle of one\051, a size, and a v) 99.65 285.62 P
-0.08 (alue. It inserts the v) 292.25 285.62 P
-0.08 (alue into as man) 378.11 285.62 P
-0.08 (y slots as are spec-) 449.49 285.62 P
(i\336ed by) 99.65 272.62 T
4 F
(size) 135.71 272.62 T
3 F
(.) 152.21 272.62 T
2 F
(primitive_replace_E_) 63.65 243.62 T
3 F
([Function]) 485.21 243.62 T
4 F
(Signatur) 81.65 218.62 T
(e:) 119.14 218.62 T
2 F
(Z primiti) 99.65 199.62 T
(v) 142.62 199.62 T
(e_r) 148.01 199.62 T
(eplace_E_ \050Z dst[],  Z sr) 163.09 199.62 T
(c[],  int size\051) 275.93 199.62 T
4 F
(Implementation:) 81.65 174.62 T
3 F
-0.05 (\050See) 99.65 152.62 P
2 F
-0.05 (primiti) 121.9 152.62 P
-0.05 (v) 154.79 152.62 P
-0.05 (e_\336ll_E_) 160.18 152.62 P
3 F
-0.05 ( re. name\051. This copies from the source v) 201.13 152.62 P
-0.05 (ector into the destination v) 380.82 152.62 P
-0.05 (ector as) 497.79 152.62 P
(man) 99.65 139.62 T
(y v) 118.43 139.62 T
(alues as are speci\336ed in the) 131.9 139.62 T
4 F
(size) 254.7 139.62 T
3 F
( parameter) 271.2 139.62 T
(.) 317.33 139.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "31" 31
%%Page: "32" 32
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(32) 63.65 84.9 T
2 11 Q
(primitive_replace_vector_E_) 63.65 737.62 T
3 F
([Function]) 485.21 737.62 T
4 F
(Signatur) 81.65 712.62 T
(e:) 119.14 712.62 T
2 F
(Z primiti) 99.65 693.62 T
(v) 142.62 693.62 T
(e_r) 148.01 693.62 T
(eplace_v) 163.09 693.62 T
(ector_E_ \050SO) 203.3 693.62 T
(V* dest, SO) 265.99 693.62 T
(V* sour) 320.75 693.62 T
(ce\051) 357.52 693.62 T
4 F
(Implementation:) 81.65 668.62 T
3 F
0.26 (This is related to) 99.65 646.62 P
2 F
0.26 (primiti) 177.08 646.62 P
0.26 (v) 209.97 646.62 P
0.26 (e_r) 215.36 646.62 P
0.26 (eplace_E_) 230.43 646.62 P
3 F
0.26 (, e) 278.09 646.62 P
0.26 (xcept that the tw) 288.57 646.62 P
0.26 (o ar) 362.26 646.62 P
0.26 (guments are guaranteed to be sim-) 379.12 646.62 P
0.28 0.07 (ple object v) 99.65 633.62 B
0.28 0.07 (ectors, and the) 152.19 633.62 B
0.28 0.07 (y are self-sizing. It tak) 217.46 633.62 B
0.28 0.07 (es tw) 318.86 633.62 B
0.28 0.07 (o parameters, \324dest\325, and \324source\325, and the) 342.28 633.62 B
(data from \324source\325 is copied into \324dest\325. \324Dest\325 is returned.) 99.65 620.62 T
2 F
(primitive_allocate_vector) 63.65 591.62 T
3 F
([Function]) 485.21 591.62 T
4 F
(Signatur) 81.65 566.62 T
(e:) 119.14 566.62 T
2 F
(Z primiti) 99.65 547.62 T
(v) 142.62 547.62 T
(e_allocate_v) 148.01 547.62 T
(ector \050int size\051) 205.34 547.62 T
4 F
(Implementation:) 81.65 522.62 T
3 F
0.28 0.1 (This is related to) 99.65 500.62 B
2 F
0.28 0.1 (primiti) 179.02 500.62 B
0.28 0.1 (v) 212.61 500.62 B
0.28 0.1 (e_allocate) 218.1 500.62 B
3 F
0.28 0.1 (, e) 265.52 500.62 B
0.28 0.1 (xcept that it tak) 276.32 500.62 B
0.28 0.1 (es a \324size\325 ar) 346.86 500.62 B
0.28 0.1 (gument, which is the size of) 404.15 500.62 B
-0.14 (repeated slots in a simple object v) 99.65 487.62 P
-0.14 (ector \050SO) 247.75 487.62 P
-0.14 (V\051. An object which is big enough to hold the speci\336ed) 289.52 487.62 P
0.28 0.04 (indices is allocated, and appropriately initialised, so that the \324class\325 f) 99.65 474.62 B
0.28 0.04 (ield sho) 405.66 474.62 B
0.28 0.04 (ws that it is an SO) 440.47 474.62 B
0.28 0.04 (V) 522.34 474.62 B
0.28 0.04 (,) 528.9 474.62 B
(and the \324size\325 \336eld sho) 99.65 461.62 T
(ws ho) 198.97 461.62 T
(w big it is.) 224.66 461.62 T
2 F
(primitive_copy_vector) 63.65 432.62 T
3 F
([Function]) 485.21 432.62 T
4 F
(Signatur) 81.65 407.62 T
(e:) 119.14 407.62 T
2 F
(Z primiti) 99.65 388.62 T
(v) 142.62 388.62 T
(e_copy_v) 148.01 388.62 T
(ector\050Z v) 191.29 388.62 T
(ector\051) 234.24 388.62 T
4 F
(Implementation:) 81.65 363.62 T
3 F
0.15 (This tak) 99.65 341.62 P
0.15 (es a SO) 135.43 341.62 P
0.15 (V as a parameter) 168.78 341.62 P
0.15 (, and allocates a fresh SO) 243 341.62 P
0.15 (V of the same size. It copies all the data) 354.98 341.62 P
(that w) 99.65 328.62 T
(as supplied from the old one to the ne) 126.73 328.62 T
(w one, and returns the ne) 292.05 328.62 T
(w one.) 402.36 328.62 T
2 F
(primitive_initialize_vector_from_buffer) 63.65 299.62 T
3 F
([Function]) 485.21 299.62 T
4 F
(Signatur) 81.65 274.62 T
(e:) 119.14 274.62 T
2 F
(Z primiti) 99.65 255.62 T
(v) 142.62 255.62 T
(e_initialize_v) 148.01 255.62 T
(ector_fr) 209.63 255.62 T
(om_b) 247.29 255.62 T
(uffer \050SO) 273.35 255.62 T
(V * v) 317.1 255.62 T
(ector) 341.43 255.62 T
(,   int   size,   Z* b) 364.23 255.62 T
(uffer\051) 445.91 255.62 T
4 F
(Implementation:) 81.65 230.62 T
3 F
-0.02 (This primiti) 99.65 208.62 P
-0.02 (v) 151.62 208.62 P
-0.02 (e tak) 156.95 208.62 P
-0.02 (es a pre-e) 177.9 208.62 P
-0.02 (xisting v) 219.84 208.62 P
-0.02 (ector) 257.86 208.62 P
-0.02 (, and copies data into it from a b) 279.41 208.62 P
-0.02 (uf) 421.11 208.62 P
-0.02 (fer so as to initialise an) 430 208.62 P
0.18 (SO) 99.65 195.62 P
0.18 (V) 113.16 195.62 P
0.18 (. The primiti) 119.68 195.62 P
0.18 (v) 175.07 195.62 P
0.18 (e tak) 180.4 195.62 P
0.18 (es a SO) 201.55 195.62 P
0.18 (V to be updated, a \324size\325 parameter \050the speci\336ed size of the SO) 234.96 195.62 P
0.18 (V\051,) 517.29 195.62 P
0.28 0.1 (and a pointer to a b) 99.65 182.62 B
0.28 0.1 (uf) 187.43 182.62 B
0.28 0.1 (fer which will supply the necessary data. The class and size v) 196.52 182.62 B
0.28 0.1 (alues for the) 475.52 182.62 B
(ne) 99.65 169.62 T
(w SO) 109.76 169.62 T
(V are set, and the data written to the rest of the SO) 133.96 169.62 T
(V) 356.11 169.62 T
(. The SO) 362.64 169.62 T
(V is returned.) 401.5 169.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "32" 32
%%Page: "33" 33
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(33) 520.53 84.9 T
2 11 Q
(primitive_make_string) 63.65 737.62 T
3 F
([Function]) 485.21 737.62 T
4 F
(Signatur) 81.65 712.62 T
(e:) 119.14 712.62 T
2 F
(Z primiti) 99.65 693.62 T
(v) 142.62 693.62 T
(e_mak) 148.01 693.62 T
(e_string\050char *  string\051) 179.07 693.62 T
4 F
(Implementation:) 81.65 668.62 T
3 F
0.28 0 (This tak) 99.65 646.62 B
0.28 0 (es as a parameter a \324C\325 string with is zero-terminated, and returns a Dylan string with the) 135.59 646.62 B
(same data inside it.) 99.65 633.62 T
2 F
(primitive_continue_unwind) 63.65 604.62 T
3 F
([Function]) 485.21 604.62 T
4 F
(Signatur) 81.65 579.62 T
(e:) 119.14 579.62 T
2 F
(Z primiti) 99.65 560.62 T
(v) 142.62 560.62 T
(e_continue_unwind \050\051) 148.01 560.62 T
4 F
(Implementation:) 81.65 535.62 T
3 F
0.28 0.01 (This is used as the last thing to be done at the end of an unwind-protect cleanup. It is responsible) 99.65 513.62 B
(for determining wh) 99.65 500.62 T
(y the cleanup is being called, and thus taking appropriate action afterw) 184.52 500.62 T
(ards.) 495.41 500.62 T
(It handles 2 basic cases:) 99.65 478.62 T
5 F
(\245) 99.65 459.62 T
3 F
(a non-local e) 113.4 459.62 T
(xit) 170.05 459.62 T
5 F
(\245) 99.65 443.62 T
3 F
(a normal unwind-protect) 113.4 443.62 T
0.11 (In the \336rst case we wish to transfer control back to some other location, b) 99.65 421.62 P
0.11 (ut there is a cleanup that) 423.87 421.62 P
0.28 0.02 (needs to be done f) 99.65 408.62 B
0.28 0.02 (irst. In this case there will be an unwind-protect frame on the stack which con-) 180.57 408.62 B
0.14 (tains a mark) 99.65 395.62 P
0.14 (er to identify the tar) 153.6 395.62 P
0.14 (get of the non-local e) 241.35 395.62 P
0.14 (xit. Control can thus be transferred, possibly) 335.24 395.62 P
(in) 99.65 382.62 T
(v) 107.77 382.62 T
(oking another unwind-protect on the w) 113.05 382.62 T
(ay) 284.33 382.62 T
(.) 294 382.62 T
0.28 0.08 (Alternati) 99.65 360.62 B
0.28 0.08 (v) 139.19 360.62 B
0.28 0.08 (ely) 144.61 360.62 B
0.28 0.08 (, no transfer of control may be required, and unwind-protect can proceed normally) 157.57 360.62 B
0.28 0.08 (.) 528.9 360.62 B
0.28 0.03 (As a result of e) 99.65 347.62 B
0.28 0.03 (v) 167.54 347.62 B
0.28 0.03 (aluating our protected forms, the multiple v) 172.79 347.62 B
0.28 0.03 (alues of these forms are stored in the) 367.03 347.62 B
0.28 0.33 (unwind-protect frame. These v) 99.65 334.62 B
0.28 0.33 (alues are put back in the multiple v) 245.41 334.62 B
0.28 0.33 (alues area, and control is) 413.23 334.62 B
(returned.) 99.65 321.62 T
2 F
(primitive_nlx) 63.65 292.62 T
3 F
([Function]) 485.21 292.62 T
4 F
(Signatur) 81.65 267.62 T
(e:) 119.14 267.62 T
2 F
(Z primiti) 99.65 248.62 T
(v) 142.62 248.62 T
(e_nlx \050Bind_exit_frame*  tar) 148.01 248.62 T
(get, SO) 283.25 248.62 T
(V*  ar) 316.92 248.62 T
(guments\051) 346.14 248.62 T
4 F
(Implementation:) 81.65 223.62 T
3 F
0.03 (This tak) 99.65 201.62 P
0.03 (es tw) 135.31 201.62 P
0.03 (o parameters: a bind-e) 158.14 201.62 P
0.03 (xit frame which is put on the stack whene) 256.11 201.62 P
0.03 (v) 439.35 201.62 P
0.03 (er a bind-e) 444.68 201.62 P
0.03 (xit frame) 491.6 201.62 P
-0.05 (is bound, and an SO) 99.65 188.62 P
-0.05 (V of the multiple v) 187.82 188.62 P
-0.05 (alues that we wish to return to that bind-e) 271.08 188.62 P
-0.05 (xit point. W) 453.23 188.62 P
-0.05 (e then) 505.12 188.62 P
-0.24 (step to the bind-e) 99.65 175.62 P
-0.24 (xit frame tar) 174.85 175.62 P
-0.24 (get, while checking to see if there are an) 228.55 175.62 P
-0.24 (y interv) 403.97 175.62 P
-0.24 (ening unwind-protect) 437.48 175.62 P
0.28 0.02 (frames. If there are, we put the mark) 99.65 162.62 B
0.28 0.02 (er for our ultimate destination into the unwind-protect frame) 262.52 162.62 B
-0.13 (that has been detected on the stack between us and our destination. The multiple v) 99.65 149.62 P
-0.13 (alues we wish to) 459.01 149.62 P
0.2 (return are put into the unwind-protect frame. The rele) 99.65 136.62 P
0.2 (v) 336.49 136.62 P
0.2 (ant cleanup code is in) 341.72 136.62 P
0.2 (v) 437.39 136.62 P
0.2 (ok) 442.67 136.62 P
0.2 (ed, and at the end) 453.56 136.62 P
-0.2 (of this a primiti) 99.65 123.62 P
-0.2 (v) 166.93 123.62 P
-0.2 (e_continue_unwind should be called. This should detect that there is further to go,) 172.26 123.62 P
(and insert the multiple v) 99.65 110.62 T
(alues into an) 206.32 110.62 T
(y interv) 261.76 110.62 T
(ening frames.) 295.5 110.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "33" 33
%%Page: "34" 34
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(34) 63.65 84.9 T
2 11 Q
(primitive_inlined_nlx) 63.65 737.62 T
3 F
([Function]) 485.21 737.62 T
4 F
(Signatur) 81.65 712.62 T
(e:) 119.14 712.62 T
2 F
(Z primiti) 99.65 693.62 T
(v) 142.62 693.62 T
(e_inlined_nlx \050Bind_exit_frame*  tar) 148.01 693.62 T
(get, Z   \336rst_ar) 321.15 693.62 T
(gument\051) 391.01 693.62 T
4 F
(Implementation:) 81.65 668.62 T
3 F
0.28 0.13 (This is similar to) 99.65 646.62 B
2 F
0.28 0.13 (primiti) 180.21 646.62 B
0.28 0.13 (v) 214 646.62 B
0.28 0.13 (e_nlx) 219.52 646.62 B
3 F
0.28 0.13 (, e) 245.22 646.62 B
0.28 0.13 (xcept that it is used when the compiler has been able to g) 256.1 646.62 B
0.28 0.13 (ain) 517.95 646.62 B
0.11 (more information about the circumstances in which the non-local-e) 99.65 633.62 P
0.11 (xit call is happening. In partic-) 396.07 633.62 P
-0.22 (ular it is used when it is possible to in-line the call, so that the multiple v) 99.65 620.62 P
-0.22 (alues that are being passed) 415.21 620.62 P
0.28 0.04 (are kno) 99.65 607.62 B
0.28 0.04 (wn to be in the multiple v) 132.62 607.62 B
0.28 0.04 (alues area, rather than ha) 248.14 607.62 B
0.28 0.04 (ving been created as an SO) 359.75 607.62 B
0.28 0.04 (V) 481.1 607.62 B
0.28 0.04 (. An SO) 487.66 607.62 B
0.28 0.04 (V) 523.71 607.62 B
(has to be b) 99.65 594.62 T
(uilt up from these ar) 146.78 594.62 T
(guments.) 235.79 594.62 T
2 F
(primitive_make_box) 63.65 565.62 T
3 F
([Function]) 485.21 565.62 T
4 F
(Signatur) 81.65 540.62 T
(e:) 119.14 540.62 T
2 F
(Z* primiti) 99.65 521.62 T
(v) 148.12 521.62 T
(e_mak) 153.51 521.62 T
(e_box\050Z  object\051) 184.57 521.62 T
4 F
(Implementation:) 81.65 496.62 T
3 F
0.28 0.08 (A box is a v) 99.65 474.62 B
0.28 0.08 (alue-cell that is used for closed-o) 154.54 474.62 B
0.28 0.08 (v) 304.09 474.62 B
0.28 0.08 (er v) 309.5 474.62 B
0.28 0.08 (ariables which are subject to assignment. The) 326.6 474.62 B
-0.24 (function tak) 99.65 461.62 P
-0.24 (es a Dylan object, and returns a v) 152.16 461.62 P
-0.24 (alue-cell box which contains the object. The compiler) 296.85 461.62 P
(deals with the e) 99.65 448.62 T
(xtra le) 168.22 448.62 T
(v) 195.74 448.62 T
(el of indirection needed to get the v) 201.08 448.62 T
(alue out of the box.) 356.92 448.62 T
2 F
(primitive_make_environment) 63.65 419.62 T
3 F
([Function]) 485.21 419.62 T
4 F
(Signatur) 81.65 394.62 T
(e:) 119.14 394.62 T
2 F
(Z* primiti) 99.65 375.62 T
(v) 148.12 375.62 T
(e_mak) 153.51 375.62 T
(e_en) 184.57 375.62 T
(vir) 205.51 375.62 T
(onment\050int size, \311\051) 218.76 375.62 T
4 F
(Implementation:) 81.65 350.62 T
3 F
0.28 0.02 (This is the function which mak) 99.65 328.62 B
0.28 0.02 (es the v) 238.1 328.62 B
0.28 0.02 (ector which is used in a closure. The ar) 272.25 328.62 B
0.28 0.02 (guments to this are) 447.05 328.62 B
0 (either box) 99.65 315.62 P
0 (es, or normal Dylan objects. This tak) 143.79 315.62 P
0 (es an ar) 306.24 315.62 P
0 (gument of \324size\325 for the initial ar) 339.64 315.62 P
0 (guments to) 483.06 315.62 P
-0.02 (be closed o) 99.65 302.62 P
-0.02 (v) 148.93 302.62 P
-0.02 (er) 154.26 302.62 P
-0.02 (, plus the ar) 162.37 302.62 P
-0.02 (guments themselv) 213.43 302.62 P
-0.02 (es. \324Size\325 ar) 293 302.62 P
-0.02 (guments are b) 344.98 302.62 P
-0.02 (uilt up into an SO) 406.43 302.62 P
-0.02 (V which is) 484.03 302.62 P
(used as an en) 99.65 289.62 T
(vironment.) 157.55 289.62 T
0 12 Q
(10.3) 63.65 251.95 T
(Entr) 90.65 251.95 T
(y P) 114.77 251.95 T
(oint Functions) 132.3 251.95 T
2 11 Q
(xep_ 0  \311 xep_9) 63.65 222.62 T
3 F
([Function]) 485.21 222.62 T
4 F
(Signatur) 81.65 197.62 T
(e:) 119.14 197.62 T
2 F
(Z xep_0 \050FN* function, int ar) 99.65 178.62 T
(gument_count\051) 237.04 178.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "34" 34
%%Page: "35" 35
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(35) 520.53 84.9 T
4 11 Q
(Implementation:) 81.65 737.62 T
3 F
0.28 0.1 (These are the XEP entry-point handlers for those Dylan functions which do not accept optional) 99.65 715.62 B
-0.25 (parameters. Each Dylan function has an e) 99.65 702.62 P
-0.25 (xternal \050safe\051 entry point with full checking. After check-) 280.98 702.62 P
(ing, this calls the internal entry point, which is the most ef) 99.65 689.62 T
(\336cient a) 355.11 689.62 T
(v) 390.03 689.62 T
(ailable.) 395.25 689.62 T
0.28 0.11 (The compiler itself only e) 99.65 667.62 B
0.28 0.11 (v) 216.9 667.62 B
0.28 0.11 (er generates code for the internal entry point. An) 222.34 667.62 B
0.28 0.11 (y v) 443.85 667.62 B
0.28 0.11 (alue put into the) 457.92 667.62 B
-0.19 (e) 99.65 654.62 P
-0.19 (xternal entry point \336eld of an object is a shared v) 104.37 654.62 P
-0.19 (alue pro) 317.92 654.62 P
-0.19 (vided by the runtime system. If the func-) 353.31 654.62 P
0.22 (tion tak) 99.65 641.62 P
0.22 (es no parameters, the v) 133.07 641.62 P
0.22 (alue will be \324x) 234.81 641.62 P
0.22 (ep0\325; if it tak) 298.55 641.62 P
0.22 (es a single required parameter it will be) 356.25 641.62 P
0.28 0.14 (\324x) 99.65 628.62 B
0.28 0.14 (ep1\325, and so on. There are v) 108.93 628.62 B
0.28 0.14 (alues a) 237.05 628.62 B
0.28 0.14 (v) 268.34 628.62 B
0.28 0.14 (ailable for \324x) 273.7 628.62 B
0.28 0.14 (ep0\325 to \324x) 332.88 628.62 B
0.28 0.14 (ep9\325. F) 377.45 628.62 B
0.28 0.14 (or more than nine required) 409.71 628.62 B
(parameters, the ne) 99.65 615.62 T
(xt function \050belo) 179.82 615.62 T
(w\051 is used.) 252.87 615.62 T
2 F
(xep) 63.65 586.62 T
3 F
([Function]) 485.21 586.62 T
4 F
(Signatur) 81.65 561.62 T
(e:) 119.14 561.62 T
2 F
(xep \050FN* function, int ar) 99.65 542.62 T
(gument_count, \311\051) 215.95 542.62 T
4 F
(Implementation:) 81.65 517.62 T
3 F
0.28 0.06 (If the function tak) 99.65 495.62 B
0.28 0.06 (es more than nine required parameters, then the function will simply be called) 180.63 495.62 B
2 F
-0.16 (xep) 99.65 482.62 P
3 F
-0.16 (, the general function which will w) 116.15 482.62 P
-0.16 (ork in all such cases. The ar) 268.76 482.62 P
-0.16 (guments are passed as \324v) 390.11 482.62 P
-0.16 (arar) 498.56 482.62 P
-0.16 (gs\325.) 515.46 482.62 P
0.28 0.06 (This function will check the number of ar) 99.65 469.62 B
0.28 0.06 (guments, raising an error if it is wrong. It then sets the) 286.73 469.62 B
-0.05 (calling con) 99.65 456.62 P
-0.05 (v) 147.73 456.62 P
-0.05 (ention for calling the internal entry point. This basically means that the function re) 153.07 456.62 P
-0.05 (gis-) 515.15 456.62 P
(ter is appropriately set, and the implementation \324mlist\325 parameter is set to) 99.65 443.62 T
2 F
(#f) 425.03 443.62 T
3 F
(.) 434.19 443.62 T
2 F
(optional_xep) 63.65 414.62 T
3 F
([Function]) 485.21 414.62 T
4 F
(Signatur) 81.65 389.62 T
(e:) 119.14 389.62 T
2 F
(Z optional_xep \050FN* function, int ar) 99.65 370.62 T
(gument_count, \311\051) 270.05 370.62 T
4 F
(Implementation:) 81.65 345.62 T
3 F
0.28 0.06 (This function is used as the XEP code for an) 99.65 323.62 B
0.28 0.06 (y Dylan function which has optional parameters. In) 300.56 323.62 B
0.28 0.04 (this case, the e) 99.65 310.62 B
0.28 0.04 (xternal entry point con) 165.06 310.62 B
0.28 0.04 (v) 266.21 310.62 B
0.28 0.04 (entions do not require the caller to ha) 271.58 310.62 B
0.28 0.04 (v) 438.8 310.62 B
0.28 0.04 (e an) 444.18 310.62 B
0.28 0.04 (y kno) 462.45 310.62 B
0.28 0.04 (wledge of) 487.39 310.62 B
0.28 0.19 (where the optionals start. The XEP code is thus responsible for separating the code into those) 99.65 297.62 B
0.05 (which are required parameters, to be passed via the normal machine con) 99.65 284.62 P
0.05 (v) 417.41 284.62 P
0.05 (entions, and those which) 422.74 284.62 P
0.11 (are optionals. to be passed as a Dylan SO) 99.65 271.62 P
0.11 (V) 281.76 271.62 P
0.11 (. If the function object tak) 288.28 271.62 P
0.11 (es k) 402.98 271.62 P
0.11 (e) 420.39 271.62 P
0.11 (yw) 425.11 271.62 P
0.11 (ords, all the informa-) 438.44 271.62 P
0.28 0.18 (tion about which k) 99.65 258.62 B
0.28 0.18 (e) 185.74 258.62 B
0.28 0.18 (yw) 190.63 258.62 B
0.28 0.18 (ords are accepted is stored in the function itself. The v) 204.32 258.62 B
0.28 0.18 (ector of optional) 455.56 258.62 B
-0.09 (parameters is scanned by the XEP code to see if an) 99.65 245.62 P
-0.09 (y appropriate ones ha) 322.85 245.62 P
-0.09 (v) 416.76 245.62 P
-0.09 (e been supplied. If one is) 422.1 245.62 P
0.28 0.11 (found, then the associated v) 99.65 232.62 B
0.28 0.11 (alue is tak) 226.18 232.62 B
0.28 0.11 (en and used as an implicit parameter to the internal entry) 272.48 232.62 B
0.28 0.01 (point. If a v) 99.65 219.62 B
0.28 0.01 (alue is not supplied, then a suitable def) 151.72 219.62 B
0.28 0.01 (ault parameter which is stored inside the func-) 325.27 219.62 B
(tion object is passed instead.) 99.65 206.62 T
2 F
(gf_xep_0 \311 gf_xep_9) 63.65 177.62 T
3 F
([Function]) 485.21 177.62 T
4 F
(Signatur) 81.65 152.62 T
(e:) 119.14 152.62 T
2 F
(Z gf_xep_0\050FN* function, int ar) 99.65 133.62 T
(gument_count\051) 248.95 133.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "35" 35
%%Page: "36" 36
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(36) 63.65 84.9 T
4 11 Q
(Implementation:) 81.65 737.62 T
3 F
0.28 0.13 (These primiti) 99.65 715.62 B
0.28 0.13 (v) 160.25 715.62 B
0.28 0.13 (es are similar to) 165.71 715.62 B
2 F
0.28 0.13 (xep_0) 241.78 715.62 B
3 F
0.28 0.13 ( through) 269.91 715.62 B
2 F
0.28 0.13 (xep_9) 311.31 715.62 B
3 F
0.28 0.13 (, b) 339.44 715.62 B
0.28 0.13 (ut deal with the entry points for generic) 350.87 715.62 B
0.28 0.02 (functions. Generic functions do not require the \324mlist\325 parameter to be set, so a special optimised) 99.65 702.62 B
0.28 0.01 (entry point is pro) 99.65 689.62 B
0.28 0.01 (vided. These v) 176.05 689.62 B
0.28 0.01 (ersions are for 0 - 9 required parameters. These functions call the) 241.1 689.62 B
(internal entry point.) 99.65 676.62 T
2 F
(gf_xep) 63.65 647.62 T
3 F
([Function]) 485.21 647.62 T
4 F
(Signatur) 81.65 622.62 T
(e:) 119.14 622.62 T
2 F
(Z gf_xep \050FN* function, int ar) 99.65 603.62 T
(gument_count, \311\051) 240.7 603.62 T
4 F
(Implementation:) 81.65 578.62 T
3 F
-0.19 (This primiti) 99.65 556.62 P
-0.19 (v) 151.45 556.62 P
-0.19 (e is similar to) 156.78 556.62 P
2 F
-0.19 (xep) 218.36 556.62 P
3 F
-0.19 (, b) 234.86 556.62 P
-0.19 (ut deals with the entry points for generic functions. Generic func-) 245.45 556.62 P
0.24 (tions do not require the \324mlist\325 parameter to be set, so a special optimised entry point is pro) 99.65 543.62 P
0.24 (vided.) 504.45 543.62 P
0.07 (This is the general v) 99.65 530.62 P
0.07 (ersion for functions which do not tak) 188.98 530.62 P
0.07 (e optional ar) 351.84 530.62 P
0.07 (guments. This function calls) 406.77 530.62 P
(the internal entry point.) 99.65 517.62 T
2 F
(gf_optional_xep) 63.65 488.62 T
3 F
([Function]) 485.21 488.62 T
4 F
(Signatur) 81.65 463.62 T
(e:) 119.14 463.62 T
2 F
(Z gf_optional_xep \050FN* function, int ar) 99.65 444.62 T
(gument_count, \311\051) 284.71 444.62 T
4 F
(Implementation:) 81.65 419.62 T
3 F
0.22 (This is used for all generic functions which tak) 99.65 397.62 P
0.22 (e optional ar) 307.86 397.62 P
0.22 (guments. This function calls the inter-) 363.1 397.62 P
(nal entry point.) 99.65 384.62 T
2 F
(primitive_basic_iep_apply) 63.65 355.62 T
3 F
([Function]) 485.21 355.62 T
4 F
(Signatur) 81.65 330.62 T
(e:) 119.14 330.62 T
2 F
(Z primiti) 99.65 311.62 T
(v) 142.62 311.62 T
(e_basic_iep_apply \050FN*  f) 148.01 311.62 T
(, int  ar) 269.16 311.62 T
(gument_count, Z  a[]\051) 303.27 311.62 T
4 F
(Implementation:) 81.65 286.62 T
3 F
0.14 (This is used to call internal entry points. It tak) 99.65 264.62 P
0.14 (es three parameters: a Dylan function object \050where) 303.08 264.62 P
-0.24 (the iep is stored in a slot\051, an ar) 99.65 251.62 P
-0.24 (gument count of the number of ar) 235.32 251.62 P
-0.24 (guments that we are passing to the) 381.55 251.62 P
-0.25 (iep, and a v) 99.65 238.62 P
-0.25 (ector of all of these ar) 149.43 238.62 P
-0.25 (guments. This is a \324basic\325 IEP apply because is does no more than) 244.17 238.62 P
0.28 0.07 (check the ar) 99.65 225.62 B
0.28 0.07 (gument count, and call the IEP with the appropriate number of Dylan parameters. It) 154.02 225.62 B
0.04 (does not bother to set an) 99.65 212.62 P
0.04 (y implementation parameters. Implementation parameters which could be) 206.92 212.62 P
0.07 (set in by other primiti) 99.65 199.62 P
0.07 (v) 194.98 199.62 P
0.07 (es are \324function\325, and a \324mlist\325 \050the list of ne) 200.32 199.62 P
0.07 (xt-methods\051 . Not all IEPs care) 395.05 199.62 P
2.65 1.38 (about the \324function\325 or \324mlist\325 parameters, b) 99.65 186.62 B
2.65 1.38 (ut when the compiler calls) 370.58 186.62 B
0.28 0.04 (\324primiti) 99.65 173.62 B
0.28 0.04 (v) 133.31 173.62 B
0.28 0.04 (e_basic_iep_apply\325, it has to mak) 138.69 173.62 B
0.28 0.04 (e sure that an) 288.58 173.62 B
0.28 0.04 (y necessary \324function\325 or \324mlist\325 parame-) 348.16 173.62 B
(ters ha) 99.65 160.62 T
(v) 128.45 160.62 T
(e been set up.) 133.78 160.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "36" 36
%%Page: "37" 37
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(37) 520.53 84.9 T
2 11 Q
(primitive_iep_apply) 63.65 737.62 T
3 F
([Function]) 485.21 737.62 T
4 F
(Signatur) 81.65 712.62 T
(e:) 119.14 712.62 T
2 F
(Z primiti) 99.65 693.62 T
(v) 142.62 693.62 T
(e_iep_apply \050FN*  f) 148.01 693.62 T
(, int  ar) 239.82 693.62 T
(gument_count, Z  a[]\051) 273.93 693.62 T
4 F
(Implementation:) 81.65 668.62 T
3 F
0.07 (This is closely related to) 99.65 646.62 P
2 F
0.07 (primiti) 210.31 646.62 P
0.07 (v) 243.2 646.62 P
0.07 (e_basic_iep_apply) 248.59 646.62 P
3 F
0.07 (. It tak) 333.44 646.62 P
0.07 (es the same number of parameters, b) 361.89 646.62 P
0.07 (ut) 523.09 646.62 P
0.28 0.05 (it sets the e) 99.65 633.62 B
0.28 0.05 (xplicit, implementation-dependent function parameter which is usually set to the f) 150.18 633.62 B
0.28 0.05 (irst) 517.43 633.62 B
0.28 0.15 (ar) 99.65 620.62 B
0.28 0.15 (gument, and also sets the \324mlist\325 ar) 108.29 620.62 B
0.28 0.15 (gument to \324f) 268.78 620.62 B
0.28 0.15 (alse\325. This is the normal case when a method) 325.39 620.62 B
(object is being called directly) 99.65 607.62 T
(, rather than as part of a generic function.) 228.47 607.62 T
2 F
(primitive_xep_apply) 63.65 578.62 T
3 F
([Function]) 485.21 578.62 T
4 F
(Signatur) 81.65 553.62 T
(e:) 119.14 553.62 T
2 F
(Z primiti) 99.65 534.62 T
(v) 142.62 534.62 T
(e_xep_apply \050FN*  f) 148.01 534.62 T
(, int ar) 242.26 534.62 T
(gument_count, Z  a[]\051) 273.62 534.62 T
4 F
(Implementation:) 81.65 509.62 T
3 F
0.28 0.03 (This is a more usual usage of apply) 99.65 487.62 B
0.28 0.03 (, i.e., the standard Dylan calling con) 257.53 487.62 B
0.28 0.03 (v) 418.86 487.62 B
0.28 0.03 (ention being in) 424.23 487.62 B
0.28 0.03 (v) 490.84 487.62 B
0.28 0.03 (ok) 496.15 487.62 B
0.28 0.03 (ed by) 507.11 487.62 B
2 F
0.28 0.05 (apply) 99.65 474.62 B
3 F
0.28 0.05 (. It tak) 125.46 474.62 B
0.28 0.05 (es three parameters: the Dylan function to be called, the number of ar) 154.7 474.62 B
0.28 0.05 (guments being) 466.33 474.62 B
0.28 0.13 (passed, and a v) 99.65 461.62 B
0.28 0.13 (ector containing all those ar) 168.84 461.62 B
0.28 0.13 (guments. This primiti) 295.69 461.62 B
0.28 0.13 (v) 393.72 461.62 B
0.28 0.13 (e relates to the e) 399.18 461.62 B
0.28 0.13 (xternal entry) 473.92 461.62 B
0.01 (point for the function, and guarantees full type checking and ar) 99.65 448.62 P
0.01 (gument count checking. This prim-) 376.68 448.62 P
0.08 (iti) 99.65 435.62 P
0.08 (v) 108.55 435.62 P
0.08 (e does all that is necessary to conform with the x) 113.88 435.62 P
0.08 (ep calling con) 329.02 435.62 P
0.08 (v) 390.46 435.62 P
0.08 (ention of Dylan: i.e., it sets the) 395.79 435.62 P
(\324function\325 parameter) 99.65 422.62 T
(, it sets the ar) 189.93 422.62 T
(gument count, and then calls the XEP for the function.) 248.08 422.62 T
0 15 Q
(11.) 63.65 380.95 T
(Compiler Primitives) 90.65 380.95 T
0 12 Q
(11.1) 63.65 341.95 T
(General Primitives) 90.65 341.95 T
2 11 Q
(primitive-make-box) 63.65 312.62 T
3 F
([Primiti) 483.81 312.62 T
(v) 517.77 312.62 T
(e]) 523.1 312.62 T
4 F
(Signatur) 81.65 287.62 T
(e) 119.14 287.62 T
2 F
(\050object :: <object>\051 => <object>) 99.65 268.62 T
(primitive-allocate) 63.65 239.62 T
3 F
([Primiti) 483.81 239.62 T
(v) 517.77 239.62 T
(e]) 523.1 239.62 T
4 F
(Signatur) 81.65 214.62 T
(e) 119.14 214.62 T
2 F
(\050size :: <raw-small-integer>\051 => <object>\051) 99.65 195.62 T
(primitive-byte-allocate) 63.65 166.62 T
3 F
([Primiti) 483.81 166.62 T
(v) 517.77 166.62 T
(e]) 523.1 166.62 T
4 F
(Signatur) 81.65 141.62 T
(e) 119.14 141.62 T
2 F
(\050w) 99.65 122.62 T
(ord-size :: <raw-small-integer>, byte-size :: <raw-small-integer>\051 => <object>\051) 111.14 122.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "37" 37
%%Page: "38" 38
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(38) 63.65 84.9 T
2 11 Q
(primitive-make-environment) 63.65 737.62 T
3 F
([Primiti) 483.81 737.62 T
(v) 517.77 737.62 T
(e]) 523.1 737.62 T
4 F
(Signatur) 81.65 712.62 T
(e) 119.14 712.62 T
2 F
(\050size :: <raw-small-integer>\051 => <object>) 99.65 693.62 T
(primitive-copy-vector) 63.65 664.62 T
3 F
([Primiti) 483.81 664.62 T
(v) 517.77 664.62 T
(e]) 523.1 664.62 T
4 F
(Signatur) 81.65 639.62 T
(e) 119.14 639.62 T
2 F
(\050v) 99.65 620.62 T
(ector :: <object>\051 => <object>) 108.7 620.62 T
(primitive-make-string) 63.65 591.62 T
3 F
([Primiti) 483.81 591.62 T
(v) 517.77 591.62 T
(e]) 523.1 591.62 T
4 F
(Signatur) 81.65 566.62 T
(e) 119.14 566.62 T
2 F
(\050v) 99.65 547.62 T
(ector :: <raw-c-char*>\051 => <raw-c-char*>) 108.7 547.62 T
(primitive-function-code) 63.65 518.62 T
3 F
([Primiti) 483.81 518.62 T
(v) 517.77 518.62 T
(e]) 523.1 518.62 T
4 F
(Signatur) 81.65 493.62 T
(e) 119.14 493.62 T
2 F
(\050function :: <object>\051 => <object>) 99.65 474.62 T
(primitive-function-environment) 63.65 445.62 T
3 F
([Primiti) 483.81 445.62 T
(v) 517.77 445.62 T
(e]) 523.1 445.62 T
4 F
(Signatur) 81.65 420.62 T
(e) 119.14 420.62 T
2 F
(\050function :: <object>\051 => <object>) 99.65 401.62 T
0 12 Q
(11.2) 63.65 363.95 T
(Lo) 90.65 363.95 T
(w-Le) 105.13 363.95 T
(vel Appl) 132.29 363.95 T
(y Primitives) 178.79 363.95 T
2 11 Q
(primitive-xep-apply) 63.65 334.62 T
3 F
([Primiti) 483.81 334.62 T
(v) 517.77 334.62 T
(e]) 523.1 334.62 T
4 F
(Signatur) 81.65 309.62 T
(e) 119.14 309.62 T
2 F
(\050function :: <object>, b) 99.65 290.62 T
(uffer) 207.9 290.62 T
(-size :: <raw-small-integer>, b) 230.7 290.62 T
(uffer :: <object>\051 => :: <object>) 371.93 290.62 T
(primitive-iep-apply) 63.65 261.62 T
3 F
([Primiti) 483.81 261.62 T
(v) 517.77 261.62 T
(e]) 523.1 261.62 T
4 F
(Signatur) 81.65 236.62 T
(e) 119.14 236.62 T
2 F
(\050function :: <object>, b) 99.65 217.62 T
(uffer) 207.9 217.62 T
(-size :: <raw-small-integer>, b) 230.7 217.62 T
(uffer :: <object>\051 => <object>\051) 371.93 217.62 T
(primitive-true?) 63.65 188.62 T
3 F
([Primiti) 483.81 188.62 T
(v) 517.77 188.62 T
(e]) 523.1 188.62 T
4 F
(Signatur) 81.65 163.62 T
(e) 119.14 163.62 T
2 F
(\050v) 99.65 144.62 T
(alue :: <raw-small-integer>\051 => <object>) 108.7 144.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "38" 38
%%Page: "39" 39
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(39) 520.53 84.9 T
4 11 Q
(Description) 81.65 737.62 T
3 F
(This primiti) 99.65 715.62 T
(v) 151.63 715.62 T
(e returns Dylan true if) 156.97 715.62 T
4 F
(value) 256.86 715.62 T
3 F
( is non-zero, and f) 280.69 715.62 T
(alse if) 360.3 715.62 T
4 F
(value) 389.63 715.62 T
3 F
( is zero.) 413.46 715.62 T
2 F
(primitive-false?) 63.65 686.62 T
3 F
([Primiti) 483.81 686.62 T
(v) 517.77 686.62 T
(e]) 523.1 686.62 T
4 F
(Signatur) 81.65 661.62 T
(e) 119.14 661.62 T
2 F
(\050v) 99.65 642.62 T
(alue :: <raw-small-integer>\051 => <object>) 108.7 642.62 T
4 F
(Description) 81.65 617.62 T
3 F
(This is the complement of) 99.65 595.62 T
2 F
(primiti) 217.28 595.62 T
(v) 250.17 595.62 T
(e-true?) 255.56 595.62 T
3 F
(, returning) 289.16 595.62 T
2 F
(#t) 337.73 595.62 T
3 F
( if the v) 346.89 595.62 T
(alue is 0,) 380.53 595.62 T
2 F
(#f) 422.7 595.62 T
3 F
( otherwise.) 431.86 595.62 T
2 F
(primitive-equals?) 63.65 566.62 T
3 F
([Primiti) 483.81 566.62 T
(v) 517.77 566.62 T
(e]) 523.1 566.62 T
4 F
(Signatur) 81.65 541.62 T
(e) 119.14 541.62 T
2 F
(\050x :: <object>, y :: <object>\051 => <raw-c-int>) 99.65 522.62 T
(primitive-continue-unwind) 63.65 493.62 T
3 F
([Primiti) 483.81 493.62 T
(v) 517.77 493.62 T
(e]) 523.1 493.62 T
4 F
(Signatur) 81.65 468.62 T
(e) 119.14 468.62 T
2 F
(\050\051 => <object>) 99.65 449.62 T
(primitive-nlx) 63.65 420.62 T
3 F
([Primiti) 483.81 420.62 T
(v) 517.77 420.62 T
(e]) 523.1 420.62 T
4 F
(Signatur) 81.65 395.62 T
(e) 119.14 395.62 T
2 F
(\050bind-exit-frame :: <raw-c-v) 99.65 376.62 T
(oid*>, ar) 232.26 376.62 T
(gs :: <raw-c-v) 274.48 376.62 T
(oid*>\051 => <raw-c-v) 339.28 376.62 T
(oid>) 429.63 376.62 T
(primitive-inlined-nlx) 63.65 347.62 T
3 F
([Primiti) 483.81 347.62 T
(v) 517.77 347.62 T
(e]) 523.1 347.62 T
4 F
(Signatur) 81.65 322.62 T
(e) 119.14 322.62 T
2 F
(\050bind-exit-frame :: <raw-c-v) 99.65 303.62 T
(oid*>, \336rst-ar) 232.26 303.62 T
(gument :: <raw-c-v) 297.09 303.62 T
(oid*>\051 => <raw-c-v) 387.55 303.62 T
(oid>) 477.89 303.62 T
(rimitive-variable-lookup) 63.65 274.62 T
3 F
([Primiti) 483.81 274.62 T
(v) 517.77 274.62 T
(e]) 523.1 274.62 T
4 F
(Signatur) 81.65 249.62 T
(e) 119.14 249.62 T
2 F
(\050v) 99.65 230.62 T
(ariable-pointer :: <raw-c-v) 108.7 230.62 T
(oid*>\051 => <raw-c-v) 234.61 230.62 T
(oid*>) 324.95 230.62 T
(primitive-variable-lookup-setter) 63.65 201.62 T
3 F
([Primiti) 483.81 201.62 T
(v) 517.77 201.62 T
(e]) 523.1 201.62 T
4 F
(Signatur) 81.65 176.62 T
(e) 119.14 176.62 T
2 F
(\050v) 99.65 157.62 T
(alue :: <raw-c-v) 108.7 157.62 T
(oid*>, v) 183.28 157.62 T
(ariable-pointer :: <raw-c-v) 220.62 157.62 T
(oid*>\051 => <raw-c-v) 346.52 157.62 T
(oid*>) 436.86 157.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "39" 39
%%Page: "40" 40
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(40) 63.65 84.9 T
0 12 Q
(11.3) 63.65 736.95 T
(Integ) 90.65 736.95 T
(er Primitives) 119.44 736.95 T
2 11 Q
(primitive-int?) 63.65 707.62 T
3 F
([Primiti) 483.81 707.62 T
(v) 517.77 707.62 T
(e]) 523.1 707.62 T
4 F
(Signatur) 81.65 682.62 T
(e) 119.14 682.62 T
2 F
(\050x :: <object>\051 => <raw-small-integer>) 99.65 663.62 T
(primitive-address-equals?) 63.65 634.62 T
3 F
([Primiti) 483.81 634.62 T
(v) 517.77 634.62 T
(e]) 523.1 634.62 T
4 F
(Signatur) 81.65 609.62 T
(e) 119.14 609.62 T
2 F
(\050x :: <raw-addr) 99.65 590.62 T
(ess>, y :: <raw-addr) 172.31 590.62 T
(ess>\051 => <raw-addr) 266.53 590.62 T
(ess>) 358.62 590.62 T
(primitive-address-add) 63.65 561.62 T
3 F
([Primiti) 483.81 561.62 T
(v) 517.77 561.62 T
(e]) 523.1 561.62 T
4 F
(Signatur) 81.65 536.62 T
(e) 119.14 536.62 T
2 F
(\050x :: <raw-addr) 99.65 517.62 T
(ess>, y :: <raw-addr) 172.31 517.62 T
(ess>\051 => <raw-addr) 266.53 517.62 T
(ess>) 358.62 517.62 T
(primitive-address-subtract) 63.65 488.62 T
3 F
([Primiti) 483.81 488.62 T
(v) 517.77 488.62 T
(e]) 523.1 488.62 T
4 F
(Signatur) 81.65 463.62 T
(e) 119.14 463.62 T
2 F
(\050x :: <raw-addr) 99.65 444.62 T
(ess>, y :: <raw-addr) 172.31 444.62 T
(ess>\051 => <raw-addr) 266.53 444.62 T
(ess>) 358.62 444.62 T
(primitive-address-multiply) 63.65 415.62 T
3 F
([Primiti) 483.81 415.62 T
(v) 517.77 415.62 T
(e]) 523.1 415.62 T
4 F
(Signatur) 81.65 390.62 T
(e) 119.14 390.62 T
2 F
(\050x :: <raw-addr) 99.65 371.62 T
(ess>, y :: <raw-addr) 172.31 371.62 T
(ess>\051 => <raw-addr) 266.53 371.62 T
(ess>) 358.62 371.62 T
(primitive-address-left-shift) 63.65 342.62 T
3 F
([Primiti) 483.81 342.62 T
(v) 517.77 342.62 T
(e]) 523.1 342.62 T
4 F
(Signatur) 81.65 317.62 T
(e) 119.14 317.62 T
2 F
(\050x :: <raw-addr) 99.65 298.62 T
(ess>, y :: <raw-addr) 172.31 298.62 T
(ess>\051 => <raw-addr) 266.53 298.62 T
(ess>) 358.62 298.62 T
(primitive-address-right-shift) 63.65 269.62 T
3 F
([Primiti) 483.81 269.62 T
(v) 517.77 269.62 T
(e]) 523.1 269.62 T
4 F
(Signatur) 81.65 244.62 T
(e) 119.14 244.62 T
2 F
(\050x :: <raw-addr) 99.65 225.62 T
(ess>, y :: <raw-addr) 172.31 225.62 T
(ess>\051 => <raw-addr) 266.53 225.62 T
(ess>) 358.62 225.62 T
(primitive-address-not) 63.65 196.62 T
3 F
([Primiti) 483.81 196.62 T
(v) 517.77 196.62 T
(e]) 523.1 196.62 T
4 F
(Signatur) 81.65 171.62 T
(e) 119.14 171.62 T
2 F
(\050x :: <raw-addr) 99.65 152.62 T
(ess>\051 => <raw-addr) 172.31 152.62 T
(ess>) 264.41 152.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "40" 40
%%Page: "41" 41
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(41) 520.53 84.9 T
2 11 Q
(primitive-address-and) 63.65 737.62 T
3 F
([Primiti) 483.81 737.62 T
(v) 517.77 737.62 T
(e]) 523.1 737.62 T
4 F
(Signatur) 81.65 712.62 T
(e) 119.14 712.62 T
2 F
(\050x :: <raw-addr) 99.65 693.62 T
(ess>, y :: <raw-addr) 172.31 693.62 T
(ess>\051 => <raw-addr) 266.53 693.62 T
(ess>) 358.62 693.62 T
(primitive-address-or) 63.65 664.62 T
3 F
([Primiti) 483.81 664.62 T
(v) 517.77 664.62 T
(e]) 523.1 664.62 T
4 F
(Signatur) 81.65 639.62 T
(e) 119.14 639.62 T
2 F
(\050x :: <raw-addr) 99.65 620.62 T
(ess>, y :: <raw-addr) 172.31 620.62 T
(ess>\051 => <raw-addr) 266.53 620.62 T
(ess>) 358.62 620.62 T
(primitive-small-integer-equals?) 63.65 591.62 T
3 F
([Primiti) 483.81 591.62 T
(v) 517.77 591.62 T
(e]) 523.1 591.62 T
4 F
(Signatur) 81.65 566.62 T
(e) 119.14 566.62 T
2 F
(\050x :: <raw-small-integer>, y :: <raw-small-integer>\051 => <raw-small-integer>) 99.65 547.62 T
(primitive-small-integer-not-equals?) 63.65 518.62 T
3 F
([Primiti) 483.81 518.62 T
(v) 517.77 518.62 T
(e]) 523.1 518.62 T
4 F
(Signatur) 81.65 493.62 T
(e) 119.14 493.62 T
2 F
(\050x :: <raw-small-integer>, y :: <raw-small-integer>\051 => <raw-small-integer>) 99.65 474.62 T
(primitive-small-integer-less-than?) 63.65 445.62 T
3 F
([Primiti) 483.81 445.62 T
(v) 517.77 445.62 T
(e]) 523.1 445.62 T
4 F
(Signatur) 81.65 420.62 T
(e) 119.14 420.62 T
2 F
(\050x :: <raw-small-integer>, y :: <raw-small-integer>\051 => <raw-small-integer>) 99.65 401.62 T
(primitive-small-integer-greater-than?) 63.65 372.62 T
3 F
([Primiti) 483.81 372.62 T
(v) 517.77 372.62 T
(e]) 523.1 372.62 T
4 F
(Signatur) 81.65 347.62 T
(e) 119.14 347.62 T
2 F
(\050x :: <raw-small-integer>, y :: <raw-small-integer>\051 => <raw-small-integer>) 99.65 328.62 T
(primitive-small-integer-greater-than-or-equal?) 63.65 299.62 T
3 F
([Primiti) 483.81 299.62 T
(v) 517.77 299.62 T
(e]) 523.1 299.62 T
4 F
(Signatur) 81.65 274.62 T
(e) 119.14 274.62 T
2 F
(\050x :: <raw-small-integer>, y :: <raw-small-integer>\051 => <raw-small-integer>) 99.65 255.62 T
(primitive-small-integer-negate) 63.65 226.62 T
3 F
([Primiti) 483.81 226.62 T
(v) 517.77 226.62 T
(e]) 523.1 226.62 T
4 F
(Signatur) 81.65 201.62 T
(e) 119.14 201.62 T
2 F
(\050x :: <raw-small-integer>\051 => <raw-small-integer>) 99.65 182.62 T
(primitive-small-integer-add) 63.65 153.62 T
3 F
([Primiti) 483.81 153.62 T
(v) 517.77 153.62 T
(e]) 523.1 153.62 T
4 F
(Signatur) 81.65 128.62 T
(e) 119.14 128.62 T
2 F
(\050x :: <raw-small-integer>, y :: <raw-small-integer>\051 => <raw-small-integer>) 99.65 109.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "41" 41
%%Page: "42" 42
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(42) 63.65 84.9 T
2 11 Q
(primitive-small-integer-subtract) 63.65 737.62 T
3 F
([Primiti) 483.81 737.62 T
(v) 517.77 737.62 T
(e]) 523.1 737.62 T
4 F
(Signatur) 81.65 712.62 T
(e) 119.14 712.62 T
2 F
(\050x :: <raw-small-integer>, y :: <raw-small-integer>\051 => <raw-small-integer>) 99.65 693.62 T
(primitive-small-integer-multiply) 63.65 664.62 T
3 F
([Primiti) 483.81 664.62 T
(v) 517.77 664.62 T
(e]) 523.1 664.62 T
4 F
(Signatur) 81.65 639.62 T
(e) 119.14 639.62 T
2 F
(\050x :: <raw-small-integer>, y :: <raw-small-integer>\051 => <raw-small-integer>) 99.65 620.62 T
(primitive-small-integer-divide) 63.65 591.62 T
3 F
([Primiti) 483.81 591.62 T
(v) 517.77 591.62 T
(e]) 523.1 591.62 T
4 F
(Signatur) 81.65 566.62 T
(e) 119.14 566.62 T
2 F
(\050x :: <raw-small-integer>, y :: <raw-small-integer>\051 => <raw-small-integer>) 99.65 547.62 T
(primitive-small-integer-modulo) 63.65 518.62 T
3 F
([Primiti) 483.81 518.62 T
(v) 517.77 518.62 T
(e]) 523.1 518.62 T
4 F
(Signatur) 81.65 493.62 T
(e) 119.14 493.62 T
2 F
(\050x :: <raw-small-integer>, y :: <raw-small-integer>\051 => <raw-small-integer>) 99.65 474.62 T
(primitive-small-integer-left-shift) 63.65 445.62 T
3 F
([Primiti) 483.81 445.62 T
(v) 517.77 445.62 T
(e]) 523.1 445.62 T
4 F
(Signatur) 81.65 420.62 T
(e) 119.14 420.62 T
2 F
(\050x :: <raw-small-integer>, y :: <raw-small-integer>\051 => <raw-small-integer>) 99.65 401.62 T
(primitive-small-integer-right-shift) 63.65 372.62 T
3 F
([Primiti) 483.81 372.62 T
(v) 517.77 372.62 T
(e]) 523.1 372.62 T
4 F
(Signatur) 81.65 347.62 T
(e) 119.14 347.62 T
2 F
(\050x :: <raw-small-integer>, y :: <raw-small-integer>\051 => <raw-small-integer>) 99.65 328.62 T
(primitive-small-integer-not) 63.65 299.62 T
3 F
([Primiti) 483.81 299.62 T
(v) 517.77 299.62 T
(e]) 523.1 299.62 T
4 F
(Signatur) 81.65 274.62 T
(e) 119.14 274.62 T
2 F
(\050x :: <raw-small-integer>\051 => <raw-small-integer>) 99.65 255.62 T
(primitive-small-integer-and) 63.65 226.62 T
3 F
([Primiti) 483.81 226.62 T
(v) 517.77 226.62 T
(e]) 523.1 226.62 T
4 F
(Signatur) 81.65 201.62 T
(e) 119.14 201.62 T
2 F
(\050x :: <raw-small-integer>, y :: <raw-small-integer>\051 => <raw-small-integer>) 99.65 182.62 T
(primitive-small-integer-or) 63.65 153.62 T
3 F
([Primiti) 483.81 153.62 T
(v) 517.77 153.62 T
(e]) 523.1 153.62 T
4 F
(Signatur) 81.65 128.62 T
(e) 119.14 128.62 T
2 F
(\050x :: <raw-small-integer>, y :: <raw-small-integer>\051 => <raw-small-integer>) 99.65 109.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "42" 42
%%Page: "43" 43
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(43) 520.53 84.9 T
2 11 Q
(primitive-small-integer-xor) 63.65 737.62 T
3 F
([Primiti) 483.81 737.62 T
(v) 517.77 737.62 T
(e]) 523.1 737.62 T
4 F
(Signatur) 81.65 712.62 T
(e) 119.14 712.62 T
2 F
(\050x :: <raw-small-integer>, y :: <raw-small-integer>\051 => <raw-small-integer>) 99.65 693.62 T
3 F
0.28 0.14 (In addition to the small-inte) 63.65 668.62 B
0.28 0.14 (ger operators abo) 190.78 668.62 B
0.28 0.14 (v) 269.86 668.62 B
0.28 0.14 (e, there are also def) 275.33 668.62 B
0.28 0.14 (initions for three other inte) 364.53 668.62 B
0.28 0.14 (ger types,) 487.37 668.62 B
0.28 0.15 (def) 63.65 655.62 B
0.28 0.15 (ined in the same manner) 77.53 655.62 B
0.28 0.15 (. T) 188.94 655.62 B
0.28 0.15 (able) 201 655.62 B
0.28 0.15 (11 on page) 222.81 655.62 B
0.28 0.15 (43 summarises the relationship between these types and) 275.99 655.62 B
(Dylan primiti) 63.65 642.62 T
(v) 122.96 642.62 T
(es.) 128.29 642.62 T
0 12 Q
(11.4) 63.65 442.95 T
(Float Primitives) 90.65 442.95 T
2 11 Q
(primitive-decoded-bits-as-single-float) 63.65 413.62 T
3 F
([Primiti) 482.19 413.62 T
(v) 516.15 413.62 T
(e}) 521.48 413.62 T
4 F
(Signatur) 81.65 388.62 T
(e) 119.14 388.62 T
2 F
(\050sign :: <raw-small-integer>, exponent :: <raw-small-integer>,) 99.65 369.62 T
(signi\336cand :: <raw-small-integer>\051 => <raw-single-\337oat>\051) 99.65 356.62 T
(primitive-bits-as-single-float) 63.65 327.62 T
3 F
([Primiti) 483.81 327.62 T
(v) 517.77 327.62 T
(e]) 523.1 327.62 T
4 F
(Signatur) 81.65 302.62 T
(e) 119.14 302.62 T
2 F
(\050x :: <raw-small-integer>\051 => <raw-single-\337oat>) 99.65 283.62 T
4 F
(Description) 81.65 258.62 T
3 F
0.19 (Uses a custom emitter to map to a call to a function called) 99.65 236.62 P
2 F
0.19 (integer_to_single_\337oat) 360.28 236.62 P
3 F
0.19 ( in the runtime) 466.61 236.62 P
(system.) 99.65 223.62 T
2 F
(primitive-single-float-as-bits) 63.65 194.62 T
3 F
([Primiti) 483.81 194.62 T
(v) 517.77 194.62 T
(e]) 523.1 194.62 T
4 F
(Signatur) 81.65 169.62 T
(e) 119.14 169.62 T
2 F
(\050x :: <raw-single-\337oat>\051 => <raw-small-integer>) 99.65 150.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(T) 196.79 592.62 T
(able 11.) 202.63 592.62 T
(Inte) 242.96 592.62 T
(ger T) 259.9 592.62 T
(ypes and Dylan Primiti) 282.53 592.62 T
(v) 384.01 592.62 T
(es) 389.34 592.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(General V) 69.65 543.62 T
(ariety of Integer) 117.21 543.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Class of Primiti) 213.65 555.62 T
(v) 286.86 555.62 T
(e P) 292.25 555.62 T
(arameters and) 306.5 555.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Retur) 213.65 543.62 T
(n V) 240.97 543.62 T
(alues) 256.77 543.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V) 393.65 567.62 T
(alue of) 400.58 567.62 T
4 F
(type) 434.8 567.62 T
2 F
( in Primiti) 453.12 567.62 T
(v) 501.29 567.62 T
(e) 506.68 567.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Name primiti) 393.65 555.62 T
(v) 456.78 555.62 T
(e-) 462.17 555.62 T
4 F
(type) 470.71 555.62 T
2 F
(-) 489.04 555.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(oper) 393.65 543.62 T
(ator) 413.65 543.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(Small Inte) 69.65 523.62 T
(ger) 115.01 523.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(<raw-small-integer>) 213.65 523.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(small-integer) 393.65 523.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(Big Inte) 69.65 509.62 T
(ger) 105.23 509.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(<raw-big-integer>) 213.65 509.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(big-integer) 393.65 509.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(Machine Inte) 69.65 495.62 T
(ger) 127.83 495.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(<raw-machine-integer>) 213.65 495.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(machine-integer) 393.65 495.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(Unsigned Machine Inte) 69.65 481.62 T
(ger) 172.74 481.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(<raw-unsigned-machine-integer>) 213.65 481.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(unsigned-machine-integer) 393.65 481.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
207.65 585.95 207.65 476.95 2 L
V
0.25 H
0 Z
N
387.65 585.95 387.65 476.95 2 L
V
N
63.65 532.95 531.65 532.95 2 L
V
0.5 H
N
63.65 518.95 531.65 518.95 2 L
V
0.25 H
N
63.65 504.95 531.65 504.95 2 L
V
N
63.65 490.95 531.65 490.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "43" 43
%%Page: "44" 44
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(44) 63.65 84.9 T
4 11 Q
(Description) 81.65 737.62 T
3 F
0.19 (Uses a custom emitter to map to a call to a function called) 99.65 715.62 P
2 F
0.19 (single_\337oat_to_integer) 360.28 715.62 P
3 F
0.19 ( in the runtime) 466.61 715.62 P
(system.) 99.65 702.62 T
2 F
(primitive-single-float-equals?) 63.65 673.62 T
3 F
([Primiti) 483.81 673.62 T
(v) 517.77 673.62 T
(e]) 523.1 673.62 T
4 F
(Signatur) 81.65 648.62 T
(e) 119.14 648.62 T
2 F
(\050x :: <raw-single-\337oat>, y :: <raw-single-\337oat>\051 => <raw-c-int>) 99.65 629.62 T
(primitive-single-float-not-equals?) 63.65 600.62 T
3 F
([Primiti) 483.81 600.62 T
(v) 517.77 600.62 T
(e]) 523.1 600.62 T
4 F
(Signatur) 81.65 575.62 T
(e) 119.14 575.62 T
2 F
(\050x :: <raw-single-\337oat>, y :: <raw-single-\337oat>\051 => <raw-c-int>) 99.65 556.62 T
(primitive-single-float-less-than?) 63.65 527.62 T
3 F
([Primiti) 483.81 527.62 T
(v) 517.77 527.62 T
(e]) 523.1 527.62 T
4 F
(Signatur) 81.65 502.62 T
(e) 119.14 502.62 T
2 F
(\050x :: <raw-single-\337oat>, y :: <raw-single-\337oat>\051 => <raw-c-int>) 99.65 483.62 T
(primitive-single-float-less-than-or-equal?) 63.65 454.62 T
3 F
([Primiti) 483.81 454.62 T
(v) 517.77 454.62 T
(e]) 523.1 454.62 T
4 F
(Signatur) 81.65 429.62 T
(e) 119.14 429.62 T
2 F
(\050x :: <raw-single-\337oat>, y :: <raw-single-\337oat>\051 => <raw-c-int>) 99.65 410.62 T
(primitive-single-float-greater-than?) 63.65 381.62 T
3 F
([Primiti) 483.81 381.62 T
(v) 517.77 381.62 T
(e]) 523.1 381.62 T
4 F
(Signatur) 81.65 356.62 T
(e) 119.14 356.62 T
2 F
(\050x :: <raw-single-\337oat>, y :: <raw-single-\337oat>\051 => <raw-c-int>) 99.65 337.62 T
(primitive-single-float-greater-than-or-equal?) 63.65 308.62 T
3 F
([Primiti) 483.81 308.62 T
(v) 517.77 308.62 T
(e]) 523.1 308.62 T
4 F
(Signatur) 81.65 283.62 T
(e) 119.14 283.62 T
2 F
(\050x :: <raw-single-\337oat>, y :: <raw-single-\337oat>\051 => <raw-c-int>) 99.65 264.62 T
(primitive-single-float-negate) 63.65 235.62 T
3 F
([Primiti) 483.81 235.62 T
(v) 517.77 235.62 T
(e]) 523.1 235.62 T
4 F
(Signatur) 81.65 210.62 T
(e) 119.14 210.62 T
2 F
(\050x :: <raw-single-\337oat>\051 => <raw-single-\337oat>) 99.65 191.62 T
(primitive-single-float-add) 63.65 162.62 T
3 F
([Primiti) 483.81 162.62 T
(v) 517.77 162.62 T
(e]) 523.1 162.62 T
4 F
(Signatur) 81.65 137.62 T
(e) 119.14 137.62 T
2 F
(\050x :: <raw-single-\337oat>, y :: <raw-single-\337oat>\051 => <raw-single-\337oat>) 99.65 118.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "44" 44
%%Page: "45" 45
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(45) 520.53 84.9 T
2 11 Q
(primitive-single-float-subtract) 63.65 737.62 T
3 F
([Primiti) 483.81 737.62 T
(v) 517.77 737.62 T
(e]) 523.1 737.62 T
4 F
(Signatur) 81.65 712.62 T
(e) 119.14 712.62 T
2 F
(\050x :: <raw-single-\337oat>, y :: <raw-single-\337oat>\051 => <raw-single-\337oat>) 99.65 693.62 T
(primitive-single-float-multiply) 63.65 664.62 T
3 F
([Primiti) 483.81 664.62 T
(v) 517.77 664.62 T
(e]) 523.1 664.62 T
4 F
(Signatur) 81.65 639.62 T
(e) 119.14 639.62 T
2 F
(\050x :: <raw-single-\337oat>, y :: <raw-single-\337oat>\051 => <raw-single-\337oat>) 99.65 620.62 T
(primitive-single-float-divide) 63.65 591.62 T
3 F
([Primiti) 483.81 591.62 T
(v) 517.77 591.62 T
(e]) 523.1 591.62 T
4 F
(Signatur) 81.65 566.62 T
(e) 119.14 566.62 T
2 F
(\050x :: <raw-single-\337oat>, y :: <raw-single-\337oat>\051 => <raw-single-\337oat>) 99.65 547.62 T
(primitive-single-float-unary-divide) 63.65 518.62 T
3 F
([Primiti) 483.81 518.62 T
(v) 517.77 518.62 T
(e]) 523.1 518.62 T
4 F
(Signatur) 81.65 493.62 T
(e) 119.14 493.62 T
2 F
(\050x :: <raw-single-\337oat>>\051 => <raw-single-\337oat>) 99.65 474.62 T
0 12 Q
(11.5) 63.65 436.95 T
(Accessor Primitives) 90.65 436.95 T
2 11 Q
(primitive-element) 63.65 407.62 T
3 F
([Primiti) 483.81 407.62 T
(v) 517.77 407.62 T
(e]) 523.1 407.62 T
4 F
(Signatur) 81.65 382.62 T
(e) 119.14 382.62 T
2 F
(\050array :: <object>, index :: <raw-small-integer>\051 => <object>) 99.65 363.62 T
4 F
(Description) 81.65 338.62 T
3 F
0.28 0.05 (This is used for de-referencing slots in the middle of Dylan objects, and thus potentially in) 99.65 316.62 B
0.28 0.05 (v) 506.1 316.62 B
0.28 0.05 (ok) 511.43 316.62 B
0.28 0.05 (es) 522.43 316.62 B
0.12 (read-barrier code. It tak) 99.65 303.62 P
0.12 (es tw) 203.74 303.62 P
0.12 (o parameters: a Dylan object, and an inde) 226.67 303.62 P
0.12 (x which is the \324w) 410.03 303.62 P
0.12 (ord\325 inde) 486.17 303.62 P
0.12 (x) 526.15 303.62 P
(into the object. It returns the Dylan v) 99.65 290.62 T
(alue found in that corresponding slot.) 261.91 290.62 T
2 F
(primitive-element-setter) 63.65 261.62 T
3 F
([Primiti) 483.81 261.62 T
(v) 517.77 261.62 T
(e]) 523.1 261.62 T
4 F
(Signatur) 81.65 236.62 T
(e) 119.14 236.62 T
2 F
(\050new-v) 99.65 217.62 T
(alue :: <object>, array :: <object>, index :: <raw-small-integer>\051 => <object>) 131.31 217.62 T
4 F
(Description) 81.65 192.62 T
3 F
0.28 0.01 (This is the assignment operator corresponding to) 99.65 170.62 B
2 F
0.28 0.01 (primiti) 319.29 170.62 B
0.28 0.01 (v) 352.25 170.62 B
0.28 0.01 (e-element) 357.65 170.62 B
3 F
0.28 0.01 (, which is used to change the) 402.93 170.62 B
0.28 0.05 (v) 99.65 157.62 B
0.28 0.05 (alue of a Dylan slot. This tak) 104.92 157.62 B
0.28 0.05 (es an e) 235.41 157.62 B
0.28 0.05 (xtra initial parameter which is the ne) 266.09 157.62 B
0.28 0.05 (w v) 430.72 157.62 B
0.28 0.05 (alue to put into the) 447.07 157.62 B
(object. The ne) 99.65 144.62 T
(w v) 162 144.62 T
(alue is stored in the appropriate object at the gi) 177.91 144.62 T
(v) 383.86 144.62 T
(en inde) 389.19 144.62 T
(x.) 421.1 144.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "45" 45
%%Page: "46" 46
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(46) 63.65 84.9 T
2 11 Q
(primitive-byte-element) 63.65 737.62 T
3 F
([Primiti) 483.81 737.62 T
(v) 517.77 737.62 T
(e]) 523.1 737.62 T
4 F
(Signatur) 81.65 712.62 T
(e) 119.14 712.62 T
2 F
(\050array <object>, base-index :: <raw-small-integer>, byte-offset :: <raw-small-integer>\051) 99.65 693.62 T
(=> <raw-c-char>) 99.65 680.62 T
4 F
(Description) 81.65 655.62 T
3 F
0.02 (This is similar to) 99.65 633.62 P
2 F
0.02 (primiti) 176.74 633.62 P
0.02 (v) 209.63 633.62 P
0.02 (e-element) 215.02 633.62 P
3 F
0.02 (, b) 260.22 633.62 P
0.02 (ut deals with byte v) 271.02 633.62 P
0.02 (ectors. It tak) 357.11 633.62 P
0.02 (es a ne) 411.72 633.62 P
0.02 (w v) 441.42 633.62 P
0.02 (alue and a Dylan) 457.36 633.62 P
-0.07 (object, along with a base of) 99.65 620.62 P
-0.07 (fset and a byte of) 219.99 620.62 P
-0.07 (fset. The base of) 295.18 620.62 P
-0.07 (fset, e) 367.39 620.62 P
-0.07 (xpressed in w) 393.42 620.62 P
-0.07 (ords, and the byte) 453.65 620.62 P
(of) 99.65 607.62 T
(fset, e) 108.54 607.62 T
(xpressed in bytes, are added, and the byte found at that location is returned.) 134.64 607.62 T
2 F
(primitive-byte-element-setter) 63.65 578.62 T
3 F
([Primiti) 483.81 578.62 T
(v) 517.77 578.62 T
(e]) 523.1 578.62 T
4 F
(Signatur) 81.65 553.62 T
(e) 119.14 553.62 T
2 F
(\050new-v) 99.65 534.62 T
(alue :: <raw-c-char>\051 array :: <object>, base-index :: <raw-small-integer>,) 131.31 534.62 T
(byte-offset :: <raw-small-integer>\051 => <raw-c-char>) 99.65 521.62 T
4 F
(Description) 81.65 496.62 T
3 F
(This is the corresponding setter for) 99.65 477.62 T
2 F
(primiti) 256.07 477.62 T
(v) 288.96 477.62 T
(e-byte-element) 294.35 477.62 T
3 F
(.) 363.37 477.62 T
2 F
(primitive-fill!) 63.65 448.62 T
3 F
([Primiti) 483.81 448.62 T
(v) 517.77 448.62 T
(e]) 523.1 448.62 T
4 F
(Signatur) 81.65 423.62 T
(e) 119.14 423.62 T
2 F
(\050array :: <object>, size :: <raw-small-integer>, v) 99.65 404.62 T
(alue :: <object>\051 => <object>) 326.21 404.62 T
(primitive-replace!) 63.65 375.62 T
3 F
([Primiti) 483.81 375.62 T
(v) 517.77 375.62 T
(e]) 523.1 375.62 T
4 F
(Signatur) 81.65 350.62 T
(e) 119.14 350.62 T
2 F
(\050new-array :: <object>, array :: <object>, size :: <raw-small-integer>\051 => <object>) 99.65 331.62 T
(primitive-replace-bytes!) 63.65 302.62 T
3 F
([Primiti) 483.81 302.62 T
(v) 517.77 302.62 T
(e]) 523.1 302.62 T
4 F
(Signatur) 81.65 277.62 T
(e) 119.14 277.62 T
2 F
(\050dst :: <raw-c-v) 99.65 258.62 T
(oid*>, sr) 172.39 258.62 T
(c :: <raw-c-v) 213.3 258.62 T
(oid*>, size :: <raw-c-int>\051 => <raw-c-v) 273.21 258.62 T
(oid>) 454.89 258.62 T
3 F
0.28 0.16 (The follo) 63.65 233.62 B
0.28 0.16 (wing primiti) 105.75 233.62 B
0.28 0.16 (v) 162.41 233.62 B
0.28 0.16 (es, named) 167.9 233.62 B
2 F
0.28 0.16 (primiti) 216.82 233.62 B
0.28 0.16 (v) 250.85 233.62 B
0.28 0.16 (e-) 256.41 233.62 B
4 F
0.28 0.16 (type) 265.28 233.62 B
2 F
0.28 0.16 (-at) 284.26 233.62 B
3 F
0.28 0.16 ( and) 297.57 233.62 B
2 F
0.28 0.16 (primiti) 320.32 233.62 B
0.28 0.16 (v) 354.35 233.62 B
0.28 0.16 (e-) 359.9 233.62 B
4 F
0.28 0.16 (type) 368.78 233.62 B
2 F
0.28 0.16 (-at-setter) 387.75 233.62 B
3 F
0.28 0.16 ( load or store, respec-) 432.13 233.62 B
(ti) 63.65 220.62 T
(v) 69.49 220.62 T
(ely) 74.82 220.62 T
(, a v) 87.55 220.62 T
(alue of the designated) 105.91 220.62 T
4 F
(type) 204.89 220.62 T
3 F
( at the speci\336ed address.) 223.21 220.62 T
2 F
(primitive-untyped-at) 63.65 191.62 T
3 F
([Primiti) 483.81 191.62 T
(v) 517.77 191.62 T
(e]) 523.1 191.62 T
4 F
(Signatur) 81.65 166.62 T
(e) 119.14 166.62 T
2 F
(\050addr) 99.65 147.62 T
(ess :: <raw-pointer>\051 => <raw-untyped>) 125.73 147.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "46" 46
%%Page: "47" 47
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(47) 520.53 84.9 T
2 11 Q
(primitive-untyped-at-setter) 63.65 737.62 T
3 F
([Primiti) 483.81 737.62 T
(v) 517.77 737.62 T
(e]) 523.1 737.62 T
4 F
(Signatur) 81.65 712.62 T
(e) 119.14 712.62 T
2 F
(\050new-v) 99.65 693.62 T
(alue :: <raw-untyped>, addr) 131.31 693.62 T
(ess :: <raw-pointer>\051 => <raw-untyped>) 264.65 693.62 T
(primitive-pointer-at) 63.65 664.62 T
3 F
([Primiti) 483.81 664.62 T
(v) 517.77 664.62 T
(e]) 523.1 664.62 T
4 F
(Signatur) 81.65 639.62 T
(e) 119.14 639.62 T
2 F
(\050addr) 99.65 620.62 T
(ess :: <raw-pointer>\051 => <raw-pointer>) 125.73 620.62 T
(primitive-pointer-at-setter) 63.65 591.62 T
3 F
([Primiti) 483.81 591.62 T
(v) 517.77 591.62 T
(e]) 523.1 591.62 T
4 F
(Signatur) 81.65 566.62 T
(e) 119.14 566.62 T
2 F
(\050new-v) 99.65 547.62 T
(alue :: <raw-pointer>, addr) 131.31 547.62 T
(ess :: <raw-pointer>\051 => <raw-pointer>) 260.36 547.62 T
(primitive-byte-character-at) 63.65 518.62 T
3 F
([Primiti) 483.81 518.62 T
(v) 517.77 518.62 T
(e]) 523.1 518.62 T
4 F
(Signatur) 81.65 493.62 T
(e) 119.14 493.62 T
2 F
(\050addr) 99.65 474.62 T
(ess :: <raw-pointer>\051 => <raw-byte-character>) 125.73 474.62 T
(primitive-byte-character-at-setter) 63.65 445.62 T
3 F
([Primiti) 483.81 445.62 T
(v) 517.77 445.62 T
(e]) 523.1 445.62 T
4 F
(Signatur) 81.65 420.62 T
(e) 119.14 420.62 T
2 F
(\050new-v) 99.65 401.62 T
(alue :: <raw-byte-character>, addr) 131.31 401.62 T
(ess :: <raw-pointer>\051 => <raw-byte-character>) 295.16 401.62 T
(primitive-small-integer-at) 63.65 372.62 T
3 F
([Primiti) 483.81 372.62 T
(v) 517.77 372.62 T
(e]) 523.1 372.62 T
4 F
(Signatur) 81.65 347.62 T
(e) 119.14 347.62 T
2 F
(\050addr) 99.65 328.62 T
(ess :: <raw-pointer>\051 => <raw-small-integer>) 125.73 328.62 T
(primitive-small-integer-at-setter) 63.65 299.62 T
3 F
([Primiti) 483.81 299.62 T
(v) 517.77 299.62 T
(e]) 523.1 299.62 T
4 F
(Signatur) 81.65 274.62 T
(e) 119.14 274.62 T
2 F
(\050new-v) 99.65 255.62 T
(alue :: <raw-small-integer>, addr) 131.31 255.62 T
(ess :: <raw-pointer>\051 => <raw-small-integer>) 287.85 255.62 T
(primitive-big-integer-at) 63.65 226.62 T
3 F
([Primiti) 483.81 226.62 T
(v) 517.77 226.62 T
(e]) 523.1 226.62 T
4 F
(Signatur) 81.65 201.62 T
(e) 119.14 201.62 T
2 F
(\050addr) 99.65 182.62 T
(ess :: <raw-pointer>\051 => <raw-big-integer>) 125.73 182.62 T
(primitive-big-integer-at-setter) 63.65 153.62 T
3 F
([Primiti) 483.81 153.62 T
(v) 517.77 153.62 T
(e]) 523.1 153.62 T
4 F
(Signatur) 81.65 128.62 T
(e) 119.14 128.62 T
2 F
(\050new-v) 99.65 109.62 T
(alue :: <raw-big-integer>, addr) 131.31 109.62 T
(ess :: <raw-pointer>\051 => <raw-big-integer>) 277.46 109.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "47" 47
%%Page: "48" 48
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(48) 63.65 84.9 T
2 11 Q
(primitive-machine-integer-at) 63.65 737.62 T
3 F
([Primiti) 483.81 737.62 T
(v) 517.77 737.62 T
(e]) 523.1 737.62 T
4 F
(Signatur) 81.65 712.62 T
(e) 119.14 712.62 T
2 F
(\050addr) 99.65 693.62 T
(ess :: <raw-pointer>\051 => <raw-machine-integer>) 125.73 693.62 T
(primitive-machine-integer-at-setter) 63.65 664.62 T
3 F
([Primiti) 483.81 664.62 T
(v) 517.77 664.62 T
(e]) 523.1 664.62 T
4 F
(Signatur) 81.65 639.62 T
(e) 119.14 639.62 T
2 F
(\050new-v) 99.65 620.62 T
(alue :: <raw-machine-integer>, addr) 131.31 620.62 T
(ess :: <raw-pointer>\051 => <raw-machine-integer>) 302.51 620.62 T
(primitive-unsigned-machine-integer-at) 63.65 591.62 T
3 F
([Primiti) 483.81 591.62 T
(v) 517.77 591.62 T
(e]) 523.1 591.62 T
4 F
(Signatur) 81.65 566.62 T
(e) 119.14 566.62 T
2 F
(\050addr) 99.65 547.62 T
(ess :: <raw-pointer>\051 => <raw-unsigned-machine-integer>) 125.73 547.62 T
(primitive-unsigned-machine-integer-at-setter) 63.65 518.62 T
3 F
([Primiti) 483.81 518.62 T
(v) 517.77 518.62 T
(e]) 523.1 518.62 T
4 F
(Signatur) 81.65 493.62 T
(e) 119.14 493.62 T
2 F
(\050new-v) 99.65 474.62 T
(alue :: <raw-unsigned-machine-integer>, addr) 131.31 474.62 T
(ess :: <raw-pointer>\051) 348.36 474.62 T
(=> <raw-unsigned-machine-integer>) 99.65 461.62 T
(primitive-single-float-at) 63.65 432.62 T
3 F
([Primiti) 483.81 432.62 T
(v) 517.77 432.62 T
(e]) 523.1 432.62 T
4 F
(Signatur) 81.65 407.62 T
(e) 119.14 407.62 T
2 F
(\050addr) 99.65 388.62 T
(ess :: <raw-pointer>\051 => <raw-single-\337oat>) 125.73 388.62 T
(primitive-single-float-at-setter) 63.65 359.62 T
3 F
([Primiti) 483.81 359.62 T
(v) 517.77 359.62 T
(e]) 523.1 359.62 T
4 F
(Signatur) 81.65 334.62 T
(e) 119.14 334.62 T
2 F
(\050new-v) 99.65 315.62 T
(alue :: <raw-single-\337oat>, addr) 131.31 315.62 T
(ess :: <raw-pointer>\051 => <raw-single-\337oat>) 277.47 315.62 T
(primitive-double-float-at) 63.65 286.62 T
3 F
([Primiti) 483.81 286.62 T
(v) 517.77 286.62 T
(e]) 523.1 286.62 T
4 F
(Signatur) 81.65 261.62 T
(e) 119.14 261.62 T
2 F
(\050addr) 99.65 242.62 T
(ess :: <raw-pointer>\051 => <raw-double-\337oat>) 125.73 242.62 T
(primitive-double-float-at-setter) 63.65 213.62 T
3 F
([Primiti) 483.81 213.62 T
(v) 517.77 213.62 T
(e]) 523.1 213.62 T
4 F
(Signatur) 81.65 188.62 T
(e) 119.14 188.62 T
2 F
(\050new-v) 99.65 169.62 T
(alue :: <raw-double-\337oat>, addr) 131.31 169.62 T
(ess :: <raw-pointer>\051 => <raw-double-\337oat>) 282.37 169.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "48" 48
%%Page: "49" 49
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(49) 520.53 84.9 T
2 11 Q
(primitive-extended-float-at) 63.65 737.62 T
3 F
([Primiti) 483.81 737.62 T
(v) 517.77 737.62 T
(e]) 523.1 737.62 T
4 F
(Signatur) 81.65 712.62 T
(e) 119.14 712.62 T
2 F
(\050addr) 99.65 693.62 T
(ess :: <raw-pointer>\051 => <raw-extended-\337oat>) 125.73 693.62 T
(primitive-extended-float-at-setter) 63.65 664.62 T
3 F
([Primiti) 483.81 664.62 T
(v) 517.77 664.62 T
(e]) 523.1 664.62 T
4 F
(Signatur) 81.65 639.62 T
(e) 119.14 639.62 T
2 F
(\050new-v) 99.65 620.62 T
(alue :: <raw-extended-\337oat>, addr) 131.31 620.62 T
(ess :: <raw-pointer>\051 => <raw-extended-\337oat>) 292.74 620.62 T
(primitive-signed-8-bit-integer-at) 63.65 591.62 T
3 F
([Primiti) 483.81 591.62 T
(v) 517.77 591.62 T
(e]) 523.1 591.62 T
4 F
(Signatur) 81.65 566.62 T
(e) 119.14 566.62 T
2 F
(\050addr) 99.65 547.62 T
(ess :: <raw-pointer>\051 => <raw-signed-8-bit-integer>) 125.73 547.62 T
(primitive-signed-8-bit-integer-at-setter) 63.65 518.62 T
3 F
([Primiti) 483.81 518.62 T
(v) 517.77 518.62 T
(e]) 523.1 518.62 T
4 F
(Signatur) 81.65 493.62 T
(e) 119.14 493.62 T
2 F
(\050new-v) 99.65 474.62 T
(alue :: <raw-signed-8-bit-integer>, addr) 131.31 474.62 T
(ess :: <raw-pointer>\051) 318.4 474.62 T
(=> <raw-signed-8-bit-integer>) 99.65 461.62 T
(primitive-unsigned-8-bit-integer-at) 63.65 432.62 T
3 F
([Primiti) 483.81 432.62 T
(v) 517.77 432.62 T
(e]) 523.1 432.62 T
4 F
(Signatur) 81.65 407.62 T
(e) 119.14 407.62 T
2 F
(\050addr) 99.65 388.62 T
(ess :: <raw-pointer>\051 => <raw-unsigned-8-bit-integer>) 125.73 388.62 T
(primitive-unsigned-8-bit-integer-at-setter) 63.65 359.62 T
3 F
([Primiti) 483.81 359.62 T
(v) 517.77 359.62 T
(e]) 523.1 359.62 T
4 F
(Signatur) 81.65 334.62 T
(e) 119.14 334.62 T
2 F
(\050new-v) 99.65 315.62 T
(alue :: <raw-unsigned-8-bit-integer>, addr) 131.31 315.62 T
(ess :: <raw-pointer>\051) 330.64 315.62 T
(=> <raw-unsigned-8-bit-integer>) 99.65 302.62 T
(primitive-signed-16-bit-integer-at) 63.65 273.62 T
3 F
([Primiti) 483.81 273.62 T
(v) 517.77 273.62 T
(e]) 523.1 273.62 T
4 F
(Signatur) 81.65 248.62 T
(e) 119.14 248.62 T
2 F
(\050addr) 99.65 229.62 T
(ess :: <raw-pointer>\051 => <raw-signed-16-bit-integer>) 125.73 229.62 T
(primitive-signed-16-bit-integer-at-setter) 63.65 200.62 T
3 F
([Primiti) 483.81 200.62 T
(v) 517.77 200.62 T
(e]) 523.1 200.62 T
4 F
(Signatur) 81.65 175.62 T
(e) 119.14 175.62 T
2 F
(\050new-v) 99.65 156.62 T
(alue :: <raw-signed-16-bit-integer>, addr) 131.31 156.62 T
(ess :: <raw-pointer>\051) 323.9 156.62 T
(=> <raw-signed-16-bit-integer>) 99.65 143.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "49" 49
%%Page: "50" 50
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(50) 63.65 84.9 T
2 11 Q
(primitive-unsigned-16-bit-integer-at) 63.65 737.62 T
3 F
([Primiti) 483.81 737.62 T
(v) 517.77 737.62 T
(e]) 523.1 737.62 T
4 F
(Signatur) 81.65 712.62 T
(e) 119.14 712.62 T
2 F
(\050addr) 99.65 693.62 T
(ess :: <raw-pointer>\051 => <raw-unsigned-16-bit-integer>) 125.73 693.62 T
(primitive-unsigned-16-bit-integer-at-setter) 63.65 664.62 T
3 F
([Primiti) 483.81 664.62 T
(v) 517.77 664.62 T
(e]) 523.1 664.62 T
4 F
(Signatur) 81.65 639.62 T
(e) 119.14 639.62 T
2 F
(\050new-v) 99.65 620.62 T
(alue :: <raw-unsigned-16-bit-integer>, addr) 131.31 620.62 T
(ess :: <raw-pointer>\051) 336.14 620.62 T
(=> <raw-unsigned-16-bit-integer>) 99.65 607.62 T
(primitive-signed-32-bit-integer-at) 63.65 578.62 T
3 F
([Primiti) 483.81 578.62 T
(v) 517.77 578.62 T
(e]) 523.1 578.62 T
4 F
(Signatur) 81.65 553.62 T
(e) 119.14 553.62 T
2 F
(\050addr) 99.65 534.62 T
(ess :: <raw-pointer>\051 => <raw-signed-32-bit-integer>) 125.73 534.62 T
(primitive-signed-32-bit-integer-at-setter) 63.65 505.62 T
3 F
([Primiti) 483.81 505.62 T
(v) 517.77 505.62 T
(e]) 523.1 505.62 T
4 F
(Signatur) 81.65 480.62 T
(e) 119.14 480.62 T
2 F
(\050new-v) 99.65 461.62 T
(alue :: <raw-signed-32-bit-integer>, addr) 131.31 461.62 T
(ess :: <raw-pointer>\051) 323.9 461.62 T
(=> <raw-signed-32-bit-integer>) 99.65 448.62 T
(primitive-unsigned-32-bit-integer-at) 63.65 419.62 T
3 F
([Primiti) 483.81 419.62 T
(v) 517.77 419.62 T
(e]) 523.1 419.62 T
4 F
(Signatur) 81.65 394.62 T
(e) 119.14 394.62 T
2 F
(\050addr) 99.65 375.62 T
(ess :: <raw-pointer>\051 => <raw-unsigned-32-bit-integer>) 125.73 375.62 T
(primitive-unsigned-32-bit-integer-at-setter) 63.65 346.62 T
3 F
([Primiti) 483.81 346.62 T
(v) 517.77 346.62 T
(e]) 523.1 346.62 T
4 F
(Signatur) 81.65 321.62 T
(e) 119.14 321.62 T
2 F
(\050new-v) 99.65 302.62 T
(alue :: <raw-unsigned-32-bit-integer>, addr) 131.31 302.62 T
(ess :: <raw-pointer>\051) 336.14 302.62 T
(=> <raw-unsigned-32-bit-integer>) 99.65 289.62 T
(primitive-signed-64-bit-integer-at) 63.65 260.62 T
3 F
([Primiti) 483.81 260.62 T
(v) 517.77 260.62 T
(e]) 523.1 260.62 T
4 F
(Signatur) 81.65 235.62 T
(e) 119.14 235.62 T
2 F
(\050addr) 99.65 216.62 T
(ess :: <raw-pointer>\051 => <raw-signed-64-bit-integer>) 125.73 216.62 T
(primitive-signed-64-bit-integer-at-setter) 63.65 187.62 T
3 F
([Primiti) 483.81 187.62 T
(v) 517.77 187.62 T
(e]) 523.1 187.62 T
4 F
(Signatur) 81.65 162.62 T
(e) 119.14 162.62 T
2 F
(\050new-v) 99.65 143.62 T
(alue :: <raw-signed-64-bit-integer>, addr) 131.31 143.62 T
(ess :: <raw-pointer>\051) 323.9 143.62 T
(=> <raw-signed-64-bit-integer>) 99.65 130.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "50" 50
%%Page: "51" 51
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 143.99 765.95 T
(Runtime Documentation) 427.64 765.95 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(51) 520.53 84.9 T
2 11 Q
(primitive-unsigned-64-bit-integer-at) 63.65 737.62 T
3 F
([Primiti) 483.81 737.62 T
(v) 517.77 737.62 T
(e]) 523.1 737.62 T
4 F
(Signatur) 81.65 712.62 T
(e) 119.14 712.62 T
2 F
(\050addr) 99.65 693.62 T
(ess :: <raw-pointer>\051 => <raw-unsigned-64-bit-integer>) 125.73 693.62 T
(primitive-unsigned-64-bit-integer-at-setter) 63.65 664.62 T
3 F
([Primiti) 483.81 664.62 T
(v) 517.77 664.62 T
(e]) 523.1 664.62 T
4 F
(Signatur) 81.65 639.62 T
(e) 119.14 639.62 T
2 F
(\050new-v) 99.65 620.62 T
(alue :: <raw-unsigned-64-bit-integer>, addr) 131.31 620.62 T
(ess :: <raw-pointer>\051) 336.14 620.62 T
(=> <raw-unsigned-64-bit-integer>) 99.65 607.62 T
(primitive-ieee-single-float-at) 63.65 578.62 T
3 F
([Primiti) 483.81 578.62 T
(v) 517.77 578.62 T
(e]) 523.1 578.62 T
4 F
(Signatur) 81.65 553.62 T
(e) 119.14 553.62 T
2 F
(\050addr) 99.65 534.62 T
(ess :: <raw-pointer>\051 => <raw-ieee-single-\337oat>) 125.73 534.62 T
(primitive-ieee-single-float-at-setter) 63.65 505.62 T
3 F
([Primiti) 483.81 505.62 T
(v) 517.77 505.62 T
(e]) 523.1 505.62 T
4 F
(Signatur) 81.65 480.62 T
(e) 119.14 480.62 T
2 F
(\050new-v) 99.65 461.62 T
(alue :: <raw-ieee-single-\337oat>, addr) 131.31 461.62 T
(ess :: <raw-pointer>\051 => <raw-ieee-single-\337oat>) 298.85 461.62 T
(primitive-ieee-double-float-at) 63.65 432.62 T
3 F
([Primiti) 483.81 432.62 T
(v) 517.77 432.62 T
(e]) 523.1 432.62 T
4 F
(Signatur) 81.65 407.62 T
(e) 119.14 407.62 T
2 F
(\050addr) 99.65 388.62 T
(ess :: <raw-pointer>\051 => <raw-ieee-double-\337oat>) 125.73 388.62 T
(primitive-ieee-double-float-at-setter) 63.65 359.62 T
3 F
([Primiti) 483.81 359.62 T
(v) 517.77 359.62 T
(e]) 523.1 359.62 T
4 F
(Signatur) 81.65 334.62 T
(e) 119.14 334.62 T
2 F
(\050new-v) 99.65 315.62 T
(alue :: <raw-ieee-double-\337oat>, addr) 131.31 315.62 T
(ess :: <raw-pointer>\051) 303.74 315.62 T
(=> <raw-ieee-double-\337oat>) 99.65 302.62 T
(primitive-ieee-extended-float-at) 63.65 273.62 T
3 F
([Primiti) 483.81 273.62 T
(v) 517.77 273.62 T
(e]) 523.1 273.62 T
4 F
(Signatur) 81.65 248.62 T
(e) 119.14 248.62 T
2 F
(\050addr) 99.65 229.62 T
(ess :: <raw-pointer>\051 => <raw-ieee-extended-\337oat>) 125.73 229.62 T
(primitive-ieee-extended-float-at-setter) 63.65 200.62 T
3 F
([Primiti) 483.81 200.62 T
(v) 517.77 200.62 T
(e]) 523.1 200.62 T
4 F
(Signatur) 81.65 175.62 T
(e) 119.14 175.62 T
2 F
(\050new-v) 99.65 156.62 T
(alue :: <raw-ieee-extended-\337oat>, addr) 131.31 156.62 T
(ess :: <raw-pointer>\051) 314.11 156.62 T
(=> <raw-ieee-extended-\337oat>) 99.65 143.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "51" 51
%%Page: "52" 52
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan Pr) 63.65 765.95 T
(oject) 139.99 765.95 T
(Runtime Documentation) 436.9 765.95 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(52) 63.65 84.9 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "52" 52
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 52
%%DocumentFonts: Helvetica-Bold
%%+ Helvetica
%%+ Times-Bold
%%+ Times-Roman
%%+ Times-Italic
%%+ Courier-Bold
%%EOF
