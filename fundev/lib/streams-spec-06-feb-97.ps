%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.1
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%-
%- Frame ps_prolog 5.0, for use with Frame 5.0 products
%- This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
%- All rights reserved.  This ps_prolog file may be freely copied and 
%- distributed in conjunction with documents created using FrameMaker, 
%- FrameMaker/SGML FrameReader and FrameViewer as long as this 
%- copyright notice is preserved.
%-
%- FrameMaker users specify the proper paper size for each print job in the
%- "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
%- printer that the PS file is sent to does not support the requested paper
%- size, or if there is no paper tray of the proper size currently installed, 
%- then the job will not be printed.  The following flag, if set to true, will
%- cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            true def
%-
%- Frame products normally print colors as their true color on a color printer
%- or as shades of gray, based on luminance, on a black-and white printer. The
%- following flag, if set to true, forces all non-white colors to print as pure
%- black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%-
%- Frame products can either set their own line screens or use a printer's 
%- default settings. Three flags below control this separately for no 
%- separations, spot separations and process separations. If a flag
%- is true, then the default printer settings will not be changed. If it is
%- false, Frame products will use their own settings from a table based on
%- the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%-
%- For any given PostScript printer resolution, Frame products have two sets of 
%- screen angles and frequencies for printing process separations, which are 
%- recomended by Adobe. The following variable chooses the higher frequencies
%- when set to true or the lower frequencies when set to false. This is only
%- effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%-
%- The following is a set of predefined optimal frequencies and angles for various
%- common dpi settings. This is taken from "Advances in Color Separation Using
%- PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
%- and corrolated with information which is in various PPD (4.0) files.
%-
%- The "dpiranges" figure is the minimum dots per inch device resolution which
%- can support this setting. The "low" and "high" values are controlled by the
%- setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
%- the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
%- three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%-
%- PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
%- to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
%- (too badly) against the screen frequencies of any separations for that DPI.
% This is computed by taking dpi/9 as the ideal pixels per repetition, and then
% computing a tiling size in printer pixels for each of the four separations as 
% (dpi/screenFreq)*(cos(screenAngle)+sin(screenAngle)) Actually, this is the same 
% for Cyan and Magenta). Then, we take a "nice" LCM of the tile sizes close to
% the desired pattern tile where the beat factor is not more than 2 or 3.
%
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def

/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def

/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%-
%- PostScript Level 2 printers contain an "Accurate Screens" feature which can
%- improve process separation rendering at the expense of compute time. This 
%- flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%-
%- The following PostScript procedure defines the spot function that Frame
%- products will use for process separations. You may un-comment-out one of
%- the alternative functions below, or use your own.
%-
%- Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%-
%- Line function
%- /FMSpotFunction { pop } def
%-
%- Elipse function
%- /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%-		sqrt 1 exch sub } def
%-
%-

/FMversion (5.0) def % matches PS_VERSION in fmprintdriver

% PostScript Level 1 = true, 2 = false
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def

% Set up Color vs. Black-and-White
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
%		statusdict /processcolors known {
%			statusdict /processcolors get exec
%		} {1} ifelse
%		1 gt
		true
	} ifelse
def

/FrameDict 400 dict def % should check this value each time changes made

%
% For NeWS we add a fake errordict, so we can psh files
%
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if

%- The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put % save old rangecheck
errordict /rangecheck {FrameDict /bug true put} put % will flag bug found
FrameDict /bug false put % flag bug not found
mark % since we're not sure what will happen next
%- Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark % junk from readline and rangecheck
errordict /rangecheck FrameDict /tmprangecheck get put % restore rangecheck
FrameDict /bug get { % redefine readline if last one got a rangecheck
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop % get a char
			dup 10 eq {exit} if % exit if LF
			dup 13 eq {exit} if % exit if CR
			gstring exch gindex exch put % store it away
			/gindex gindex 1 add def % bump index
		} loop
		pop % eol character
		gstring 0 gindex getinterval true % simulate real readline
		} bind def
	} if

% outer-world defs

/FMshowpage /showpage load def
/FMquit /quit load def

/FMFAILURE { % enter with two error strings on the stack
	dup = flush % send a copy of the message to the console
	FMshowpage % msg on a page by itself, so it can't be, say, black on black
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage % we might be in the middle of some EPS, where "showpage"
	FMquit % and "quit" are redefined
	} def % only used once at most, so no bind

/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def % only used at startup, so no bind

/FMBADEPSF { % Call with bad operator name on stack (as a string)
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length % parmstr errstr errstr indx
	5 -1 roll % errstr errstr index parmstr
	putinterval % errstr
	FMFAILURE
	} def

% standard concatprocs routine
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def

% Put all local variables here in alphabetical order.
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall

% Start of PDF/Acrobat support

% Bind def
/FmBD {bind def} bind def

systemdict /pdfmark known {
	/fMAcrobat true def

	% FmPD is a conditional PDFMark
	/FmPD /pdfmark load def
	
	% FmPT is a show text operator which only show up when distiller is active
	/FmPT /show load def
	
	% FmPD2 and FmPA are Acrobat 2.0-specific
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		% FmPD2 is like FmPD but for Acrobat 2.0-specific PDF
		/FmPD2 /pdfmark load def
		
		% x y/name FmPA
		% 	is equivalent to
		% [/Dest/name/View[/FitH x y FmDC exch pop]/DEST FmPD
		% It is a shortcut for pagragraph Uinique ID designators whic occurr commonly.
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		% These are No-Ops for Distiller 1.0
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	% these are the No-Ops for regular PostScript
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse

% This convert a set of X Y coordinates from the current user space to the default
% PostScript coordinates needed by some pdfmark variants. We also convert to 
% integer because the distiller doesn't always like floats!
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD

% This converts four numbers into a bounding box making sure the first two are maller than the last two
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD

% End of PDF/Acrobat support

%
% Color separation code
%

% Constants.

/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def

/fMNegative false def % we are inverting the page

% Variables.

/FrameSepIs FMnone def % separation we are printing
% If FrameSepIs is FMcustom, this is the custom color
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def

/FrameCurColors [ 0 0 0 1 0 0 0 ] def % c m y k r g b

% Utility routines

/FrameColorEpsilon .001 def	% epsilon by which values can differ and sill be equal
/eqepsilon {		% v1 v2 eqeps bool
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def

% are the cmyk and cmykrgb arrays on the stack the same color?
/FrameCmpColorsCMYK { % [ c1 m1 y1 k1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
% are the rgb and cmykrgb arrays on the stack the same color?
/FrameCmpColorsRGB { % [ r1 g1 b1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def

% convert r g b to c m y k
/RGBtoCMYK { % r g b
	1 exch sub % r g y
	3 1 roll % y r g
	1 exch sub % y r m
	3 1 roll % m y r
	1 exch sub % m y c
	3 1 roll % c m y
	3 copy % c m y c m y
	2 copy % c m y c m y m y
	le { pop } { exch pop } ifelse % c m y c min(m,y)
	2 copy % c m y c min(m,y) c min(m,y)
	le { pop } { exch pop } ifelse % c m y min(c, min(m,y))
	dup dup dup % c m y k k k k
	6 1 roll % c k m y k k k
	4 1 roll % c k m k y k k
	7 1 roll % k c k m k y k
	sub % k c k m k y
	6 1 roll % y k c k m k
	sub % y k c k m
	5 1 roll % m y k c k
	sub % m y k c
	4 1 roll % c m y k 
} bind def
/CMYKtoRGB { % c m y k CMYKtoRGB r g b
	dup dup 4 -1 roll add 						  % c m k k y+k
	5 1 roll 3 -1 roll add 						  % y+k c k m+k
	4 1 roll add 								  % m+k y+k c+k
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  % r m+k y+k
	1 exch sub dup 0 lt {pop 0} if exch 	      % r b m+k
	1 exch sub dup 0 lt {pop 0} if exch	  		  % r g b
} bind def

% Public routines


% Happens at the top of each page that is a separation
/FrameSepInit {
	1.0 RealSetgray
} bind def
% Tell the separation code that this separation is for a custom color
/FrameSetSepColor { % c m y k r g b
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
% Tell the separation code that this separation is Cyan
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
% Tell the separation code that this separation is Magenta
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Yellow
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Black
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
% Tell the separation code we are not doing a separation
/FrameNoSep { %
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def

% Initialize the separation code with all the custom colors we are
% separating (not process colors)
/FrameSetSepColors { % list of arrays of [c m y k r g b] count 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  % array of arrays of colors we are separating
	exch def end
	} bind def

% is this color array in the array of custom color separations?
/FrameColorInSepListCMYK { % [ c m y k ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsCMYK % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { % [ r g b ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsRGB % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def

% Level 1 color operators saved and redefined
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 

% Setgray patch
/setgray { % num
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ % go to white unless the current sep color is black
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { % r g b
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] % r g b [ r g b ]
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor % safe since we will overwrite the color state
		currentrgbcolor  % r g b - Let PostsCript to the conversion.
		setrgbcolor % call our version
	} 
	ifelse
	end
} bind def
FrameDict begin

/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { % c m y k
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put

% Set up a prototype pattern for PostScript Level 2
fMLevel1 { 
	% set up screen functions for the patterns in PS level 1
	% each entry contains an angle, spot function, flipped spot function,
	% gray level and frequency multiplier.
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { % prototype level 2 pattern dictionary
	% define some PostScript procedures for known jaggy patterns.
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		% Always 1 for PS Level 2
		/PaintType 2 def		% Uncolored pattern
		/TilingType 3 def		% constant spacing and faster tiling
		/BBox [ 0 0 8 8 ] def 	% bounding box
		/XStep 8 def			% X offset
		/YStep 8 def			% Y offset
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse

%combineColor puts together the current gray value (which could also be
%a fraction of on bits for a fill pattern and the current color and calls
%the appropriate function
%
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { % separation case
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				% Level 1 patterns are either all there or not there at all
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def

/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
% freq and sangle are used for ps Level 1 pattern building.
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def

%
% screen index depending on dpi
%	- screenIndex smallint
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def

%
% These routines get the standard Adobe frequencies, angles, and spot functions
% depending on the DPI
%
% - getCyanScreen freq angle spotfunction
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getMagentaScreen freq angle spotFunction
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getYellowScreen freq angle spotFunction
% note that some of these use a "tripple dot" function at 1/3 the frequency
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def

%
% - getBlackScreen freq angle spotFunction
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def

%
% - getSpotScreen freq angle spotFunction
/getSpotScreen {
	getBlackScreen
} bind def

%
% - getCompositeScreen freq angle spotFunction
/getCompositeScreen {
	getBlackScreen
} bind def

% FmSetScreen sets the screen for either PostScript Level 1 or Level 2 and optionally
% sets the accuratescreens flag in the latter case
% freq angle spotfunction FMSetScreen -
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def

% This sets the default screen as was set at the beginning of the job
% - setDefaultScreen -
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def

% This sets the current screen depending on FrameSepIs
% - setCurrentScreen -
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def


end

% End of Color separation code
%
	
/FMDOCUMENT { % xscale yscale edown negative paperwidth paperheight manfeed numcopies numfonts
	array /FMfonts exch def % Why isn't this in FrameDict???
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def % invert page
	0 ne /edown exch def % flip page along y axis
	/yscale exch def
	/xscale exch def

	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def % some PS's leave junk on dict ...
		/FMoptop count def % ...or on operand stack...
		setpapername % This stuff may alter the transfer/screen/angle
		manualfeed {true} {papersize} ifelse % true->more work to do
		{manualpapersize} {false} ifelse % true->more work to do
		{desperatepapersize} {false} ifelse % true->failed completely
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for %...if tray not installed
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse % fMLevel1
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def

			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse

	end % FrameDict
} def % only used at startup, so no bind

/FMBEGINPAGE { % pagewidth pageheight landscape color-arrays count
	FrameDict begin % for the whole page...
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { % check for landscape
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
% paint the whole page in "white".  If the page is inverted, then
% this will actually paint our black background
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave % for CLIP
} def % only used infrequently, so no bind

/FMENDPAGE {
	grestore % for CLIP
	pagesave restore
	end % FrameDict
	showpage
	} def % only used infrequently, so no bind

/FMFONTDEFINE { % fontindex nonstd_encoding fontname -- 
	FrameDict begin
	findfont % fontindex nonstd_encoding font
	ReEncode % fontindex font'
	1 index exch % fontindex fontindex font'
	definefont % fontindex font"
	FMfonts 3 1 roll %  FMfonts fontindex font"
	put
	end % FrameDict
	} def % only used infrequently, so no bind

/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end % framedict
	} def % Only called once, so no bind

/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end % FrameDict
	} def % only used infrequently, so no bind

% Set things to a known, quiescent state, for when we switch to another writer
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray % Not FMsetgray; only called outside of our environment!
	} bind def

/FMBEGINEPSF { % <theta> llx lly urx ury fw fh fx fy
	end % FrameDict
	/FMEPSF save def % in userdict
	/showpage {} def % this def is in userdict
%- See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
%- "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def % FMBADEPSF knows this is the longest!
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
%	/initmatrix {(initmatrix) FMBADEPSF} def	% Aldus Freehand 4.0 epsf uses this harmlessly <Gus 4/26/95>
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall % neat trick
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale % then scale
	llx neg lly neg translate % then compensate for LL offset 
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count def % tricky! "/FMoptop" on stack
	} bind def

/FMENDEPSF {
	count -1 FMoptop {pop pop} for % clear EPS junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMEPSF restore
	FrameDict begin % for the whole page...
	} bind def

FrameDict begin % put most defs here

/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def

/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def

/pagedimen { % name width height
	paperheight sub abs 16 lt exch % 16pt is an arbitrary slop amount
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def

/setpapername { % Already set up: paperwidth paperheight and manualfeed
	/papersizedict 14 dict def % one for /papername, one for /unknown
	papersizedict begin
	/papername /unknown def % in case no match
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def

/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end % return true if more work to do
	} bind def

/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped % return true if more work to do
	} bind def

/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped % return true iff failed
		end
		} {true} ifelse % return true iff failed
	} bind def

/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def

%
% Font re-encoding to include diacritics
% 
/DiacriticEncoding [

/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron

] def

/ReEncode { % nonstd_encoding font -- reencodedfont
	dup % nonstd_encoding font font
	length % nonstd_encoding font dictlength
	dict begin % nonstd_encoding font % currentdict = newdict
	{% forall % forall is over font to be copied
	1 index /FID ne % skip FID
		{def} % defs go into newfontdict which is currentdict
		{pop pop} ifelse % copy all keys including /Encoding
	} forall % nonstd_encoding
	0 eq {/Encoding DiacriticEncoding def} if % --
	currentdict % push a copy of the copied font dict onto operand stack
	end % font' % before popping it off dictionary stack
	} bind def

FMPColor 
	% setup procs for color printing
	{

	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	% setup procs for B&W printing
	{
	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse

/K { % c m y k r g b SEPARATION
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
%
% graymode is true if we are just doing gray fills, this way do not keep calling
% setscreen. I don't know what the cost is on calling setscreen with defaults, but
% this is easy to keep track of, and we know for sure we aren't wasting cycles.
% if graymode is false and fMLevel1 is false, then we are using Level 2 patterns.
%
/graymode true def

% used by level 1 patterns
% defaultflip matrixentry fmGetFlit -> eith -1 or 1
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if

/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop % angle spot fspot gray mult
			freq 								% freq
			mul									% times multiplier
			5 2 roll							% angle spot fspot gray mult freq -> gray freq angle spot fspot
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		% landscape
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								% portrait     
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		% take regular or flipped spot function
			fMNegative { 
				{neg} fmConcatProcs 			% invert spot function
			} if
			bind
			% we need to bypass any screen filter and go directly to systemdict
			% to avoid problems with Kodak Precision calibration software
			% <Gus 9/13/93>
			systemdict /setscreen get exec		% leave graylevel on stack
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { % Level 2 version
		pop pop
		dup patCache exch known {
			patCache exch get
		} { % not in cache
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
%			9 orgfreq 
%				organgle sin abs organgle cos abs add div
%				dup 16 div round dup 0 le {pop 1} if  % Unix pattern size
%			    dup  9 div round dup 0 le {pop 1} if  % Mac larger (WYSIWYG) size
%					div div dup matrix scale % This gives Unix pattern size.
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def

/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def

/normalize {
	transform round exch round exch itransform
	} bind def

/dnormalize {
	dtransform round exch round exch idtransform
	} bind def

/lnormalize { % line widths are always odd so that arrow heads work
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def

/H { % THICK
	lnormalize setlinewidth
	} bind def

/Z {
	setlinecap
	} bind def
	
% This is used to fill or stroke white behind a Level 2 pattern
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def

/X { % TEXTURE
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} % Silly to pass parameters here
	{setGrayScaleMode}
	ifelse
	} bind def

/V { % FILL
	PFill gsave eofill grestore
	} bind def

/Vclip {
	clip
	} bind def

/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/N { % PEN
	PStroke
	} bind def

/Nclip {
	strokepath clip newpath
	} bind def

/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def

/L { % POLYLINE
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def

/Y { % POLYGON !!!
	L % POLYLINE
	closepath
	} bind def

/R { % RECT x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y % POLYGON
	} bind def

/rarc % Leaves all sorts of junk on the operand stack for caller to clear off
	{rad % arcto might fail if we're scaled way down
	 arcto
	} bind def

/RR { % ROUNDRECT x1 y1 x2 y2 r
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if % in case rarc failed for degenerate arcs
	cleartomark
	} bind def

/RRR { % ROUNDRECT ROTATED xs ys x1 y1 x2 y2 x3 y3 x4 y4 r
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto % eats xs ys
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def

/C { % CLIP
	grestore
	gsave
	R % RECT
	clip
	setCurrentScreen
} bind def

/CP { % CLIPPOLY p1x p1y p2x p2y ... n 
	grestore
	gsave
	Y % POLYGON
	clip
	setCurrentScreen
} bind def

/F { % FONT
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def

/Q { % POINTSIZE (& font)
	/FMpointsize exch def
	F % could be slightly optimized here
	} bind def

/T { % TEXT <string> <x> <y>
	moveto show
	} bind def

% Callers of RF (rotate/flip) must gsave (or save) first; (g)restore when done
/RF { % <flip> <theta>
	rotate
	0 ne {-1 1 scale} if
	} bind def

/TF { % TEXTFLIPROTATE <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	show
	grestore
	} bind def

/P { % PADTEXT <pad> <string> <x> <y>
	moveto
	0 32 3 2 roll widthshow
	} bind def

/PF { % PADTEXTFLIPROTATE <pad> <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def

/S { % SPREADTEXT <spread> <string> <x> <y>
	moveto
	0 exch ashow
	} bind def

/SF { % SPREADTEXTFLIPROTATE <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def

/B { % PADSPREADTEXT <pad> <spread> <string> <x> <y>
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def

/BF { % PADSPREADTEXTFLIPROTATE <pad> <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def

/G { % ARCFILL theta1 theta2 width height x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	PFill fill
	grestore
	} bind def

/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
    normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
    translate
    scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def

/Gclip { % ARCFILL theta1 theta2 width height x y swid
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	clip newpath
	restorematrix
	} bind def

/GG { % ARCFILL ROTATED theta1 theta2 width height angle x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	rotate % eats angle
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath
	PFill
	fill
	grestore
	} bind def

/GGclip { % ARCFILL ROTATED theta1 theta2 width height angle x y
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	clip newpath
	restorematrix
	} bind def

/GGstrk { % ARCFILL ROTATED swid theta1 theta2 width height angle x y
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/A { % ARCPEN theta1 theta2 width height x y
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
	normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
	translate 
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	strokepath clip newpath
	restorematrix
} bind def

/Astrk {
	Gstrk
} bind def

/AA { % ARCPEN ROTATED theta1 theta2 width height angle x y
	gsave
	savematrix
	newpath
	% theta1 theta2 width height angle x y
	3 index 2 div add exch 4 index 2 div sub exch 
	% theta1 theta2 width height angle x y
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate % eats x y
	rotate % eats angle
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	strokepath clip newpath
	restorematrix
} bind def

/AAstrk {
	GGstrk
} bind def

/BEGINPRINTCODE { % -x -y width height
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count 7 sub def % tricky! 7 params on stack, plus "/FMoptop"
	/FMsaveobject save def
	userdict begin % insulate user from FrameDict; not in /FMdicttop count
	/showpage {} def % this def is in userdict
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	3 index neg 3 index neg translate
	} bind def

/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for % clear user junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMsaveobject restore % this is now safe, unless user very malicious
	} bind def

/gn { % get a number in a funny encoding scheme
	0 % result on stack
	{	46 mul % shift old digits
		cf read pop % get next character
		32 sub % zero is the space character
		dup 46 lt {exit} if % quit if we're the last digit
		46 sub add % add in this digit and loop around for next
		} loop
	add % result on stack
	} bind def

/cfs { % create a string of length "sl" filled with "val"s
	/str sl string def % create string as "str"
	0 1 sl 1 sub {str exch val put} for % fill array
	str def % define real array name, too; name is on stack from caller
	} bind def

/ic [ % "case" stmt list of procedures that the image commands should call
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def

/ms { % make all the strings
	/sl exch def % remember length of currently existing strings
	/val 255 def % that's white
	/ws cfs % make "ws" a string filled with white
	/im cfs % and "im" is a complete image scanline
	/val 0 def % that's black
	/bs cfs % make "bs" a string filled with black
	/cs cfs % here's where we'll put complete command lines
	} bind def

400 ms % make strings that will be plenty long for most applications

/ip { % image procedure; reads and executes commands to make scanlines
	is % leave image string and...
	0 % ...image position on stack all through this procedure
	cf cs readline pop % get a string of commands
	{	ic exch get exec % execute next command
		add % all commands leave a length on the stack; update pos
		} forall % step through all commands
	pop % get rid of image position pointer
	% image string left on stack, so it's returned to image primitive
	} bind def
/rip { % this is similar to ip above, except for 24 bit images
	   % this takes an extra argument, the width of the image
	  % do red
	  bis ris copy pop % copy blue to red
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  ris gis copy pop % copy red to green
	  dup is exch % position of green is width bytes into is
	  % do green
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop % copy green to blue
	  dup add is exch % position of blue is 2*width bytes into is
	  % do blue
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def

/rip4 { % this is similar to ip above, except for 32 bit images
	   % this takes an extra argument, the width of the image
	  % do cyan
	  kis cis copy pop % copy black to cyan
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  cis mis copy pop % copy cyan to magenta
	  dup is exch % position of magenta is width bytes into is
	  % do magenta
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop % copy magenta to yellow
	  dup dup add is exch % position of yellow is 2*width bytes into is
	  % do yellow
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop % copy yellow to black
	  3 mul is exch % position of black is 3*width bytes into is
	  % do black
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def


/wh { % fill a number of bytes with "white"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	ws 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/bl { % fill a number of bytes with "black"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	bs 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/s1 1 string def

/fl { % fill a number of bytes with a specific hex value
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len % remember where we got to
	} bind def

/hx { % read hex bytes directly; on entry, stack has <str> <pos> <len>
	3 copy getinterval % stack has <str> <pos> <len> <substr>
	cf exch readhexstring pop pop % stack back to <str> <pos> <len>
	} bind def

/wbytes { % width depth -> wb      find width in bytes  given 1, 2, 8 or 24 or 32
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAPc
	} bind def
%
% Common routine for imaging compressed images
%
/COMMONBITMAPc { % iw, ih, width, height, theta, x y depth proc
		 % (x,y) is the lower left corner of the image
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc                % run the desired proc after save has occurred
	/is im 0 lb getinterval def % image substring
	ws 0 lb getinterval is copy pop % whiten it
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{ip} image % zap!
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def
/BEGINBITMAPBW { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAP
	} bind def
%
% Common routine for uncompressed images
%
/COMMONBITMAP { % iw, ih, width, height, theta, x y depth proc
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc              % run the desired proc after save has occurred
	/is width depth wbytes string def
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{cf is readhexstring pop} image
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def

%
% All this hairy color setup stuff gus wrote on the mac, I just copied and
% changed the variable names to be humanly readable.

/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def

fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
% The HP PaintJet XL300 ignores the gray transfer curve but still sets its
% default black generation and undercolor removal functions as if it is
% used. This causes black colors not to work. Bug#56844 <Gus 2/22/93>
% - We go back to the old (correct?) way of doing this since this code
% is now bypassed for PS Level 2 printers in favor of colorSetup2 which
% uses PS Level 2 indexed color, which is much cleaner. <Gus 3/3/93>
		/u kk currentundercolorremoval exec def
%-		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
% Here, we set up indexed color for imaging on PS Level 2 without mucking around
% with the transfer functions.

/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse

%
% Setup a transfer function to convert psuedo color values into grayscale
% values based on the color lookup tables.
%
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
%
% image a color image
%
/BITMAPCOLOR { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
%
% Compressed color image rendering
%
/BITMAPCOLORc { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
%
% image a color image to a b&width device
%
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { % c m y k width
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { % r g b width
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end % of FrameDict definitions

% OPI stuff
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def

% Dashed lines stuff
/I { setdash } bind def
/J { [] 0 setdash } bind def

%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 14 FMDOCUMENT
0 0 /Palatino-Italic FMFONTDEFINE
1 0 /Palatino-Bold FMFONTDEFINE
2 0 /Palatino-Roman FMFONTDEFINE
3 0 /Helvetica-Narrow-Bold FMFONTDEFINE
4 0 /Courier-Bold FMFONTDEFINE
5 0 /Palatino-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
99.65 105.95 486.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(06 Feb 1997) 99.65 124.95 T
1 F
(1) 482.15 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 537.95 495.65 672.95 R
7 X
V
2 30 Q
0 X
(1) 171.65 652.95 T
99.65 611.4 495.65 638.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 611.4 495.65 638.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 632.1 261.65 632.1 2 L
V
3 H
2 Z
0 X
N
99.65 623.1 261.65 623.1 2 L
7 X
V
1 H
0 X
N
27.65 96.95 567.65 744.95 C
2 30 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Str) 99.65 591.4 T
(eams Library) 225.08 591.4 T
99.65 150.95 486.65 456.95 R
7 X
V
2 11 Q
0 X
(Authors: Scott McKay) 99.65 449.62 T
(, Bill Chiles, Mar) 205.6 449.62 T
(c Fer) 286.26 449.62 T
(guson, and Eliot Miranda.) 309.43 449.62 T
(Editor: Andr) 99.65 429.62 T
(ew Shir) 161.56 429.62 T
(es.) 198.27 429.62 T
(Date: 06 Feb 1997.) 99.65 409.62 T
3 16 Q
(1.1  About this document) 99.65 374.29 T
3 13 Q
(1.1.1  Ac) 99.65 340.29 T
(kno) 142.72 340.29 T
(wledgments) 161.53 340.29 T
2 11 Q
(W) 99.65 320.62 T
(e\325d like to thank the other people who have been instr) 109.64 320.62 T
(umental in the pr) 371.5 320.62 T
(oduc-) 455.67 320.62 T
(tion of this pr) 99.65 306.62 T
(oposal: Jonathan Bachrach, Dave Berry) 165.37 306.62 T
(, John Dunning, Chris Fry) 353.03 306.62 T
(,) 477.44 306.62 T
(Paul Haahr) 99.65 292.62 T
(, W) 154.46 292.62 T
(illiam Lott, Rob Maclachlan, T) 170.36 292.62 T
(im McNerney) 316.23 292.62 T
(, T) 382.5 292.62 T
(ony Mann, Keith) 393.73 292.62 T
(Playfor) 99.65 278.62 T
(d, Robert Stockton, and T) 134.93 278.62 T
(ucker W) 257.52 278.62 T
(ithington.) 297.91 278.62 T
3 13 Q
(1.1.2  Discussing err) 99.65 245.29 T
(or conditions) 203.15 245.29 T
2 11 Q
(This document uses two special terms in discussions of err) 99.65 225.62 T
(or conditions.) 384.26 225.62 T
-0.2 (When we say that something) 99.65 205.62 P
0 F
-0.2 (is an err) 242.61 205.62 P
-0.2 (or) 278.68 205.62 P
2 F
-0.2 (, we mean that the r) 287.03 205.62 P
-0.2 (esult is unde\336ned. In) 382.31 205.62 P
(particular) 99.65 191.62 T
(, we do) 146.64 191.62 T
0 F
(not) 184.81 191.62 T
2 F
( mean that a Str) 199.47 191.62 T
(eams implementation must signal an err) 275.44 191.62 T
(or) 471.34 191.62 T
(condition; that is the implementor) 99.65 177.62 T
(\325s choice. So, for instance, the following text,) 266.13 177.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(2) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
(fr) 108.65 665.62 T
(om page 27, means only that the r) 116.46 665.62 T
(esult of using) 280.42 665.62 T
4 9.5 Q
(unread-element) 348.71 665.62 T
2 11 Q
( in the case) 428.51 665.62 T
(described is unde\336ned:) 108.65 651.62 T
(It is an err) 135.65 631.62 T
(or to apply) 184.72 631.62 T
4 9.5 Q
(unread-element) 240.95 631.62 T
2 11 Q
( to an element that is not the ele-) 320.75 631.62 T
(ment most r) 135.65 617.62 T
(ecently r) 194.23 617.62 T
(ead fr) 235.86 617.62 T
(om the str) 263.91 617.62 T
(eam.) 312.78 617.62 T
-0.05 (Only when we speci\336cally mention signaling do we mean that a Str) 108.65 597.62 P
-0.05 (eams imple-) 436.14 597.62 P
-0.07 (mentation must signal an err) 108.65 583.62 P
-0.07 (or condition. Note that we may not, in such a case,) 248.36 583.62 P
(say exactly which err) 108.65 569.62 T
(or condition must be signaled; if we do not say so, the) 211.23 569.62 T
(choice is again up to the implementor) 108.65 555.62 T
(. In this text fr) 290.97 555.62 T
(om the description of) 358.61 555.62 T
4 9.5 Q
-0.49 (stream-position-setter) 108.65 541.62 P
2 11 Q
-0.24 ( on page 25, for instance, we state that an implementa-) 234.05 541.62 P
(tion must signal an err) 108.65 527.62 T
(or) 218.19 527.62 T
(, but we do not say what err) 227.72 527.62 T
(or must be signaled:) 363.89 527.62 T
-0.12 (When) 135.65 507.62 P
0 F
-0.12 (position) 167.36 507.62 P
2 F
-0.12 ( is a) 202.8 507.62 P
4 9.5 Q
-0.24 (<stream-position>) 224.07 507.62 P
2 11 Q
-0.12 (, if it is invalid for some r) 320.97 507.62 P
-0.12 (eason, this) 441.93 507.62 P
(function signals an err) 135.65 493.62 T
(or) 244.09 493.62 T
(.) 253.62 493.62 T
-0.18 (By contrast, the following text fr) 108.65 473.62 P
-0.18 (om the description of) 264.23 473.62 P
4 9.5 Q
-0.37 (read-element) 370.05 473.62 P
2 11 Q
-0.18 ( on page 15) 438.45 473.62 P
(says exactly which err) 108.65 459.62 T
(or must be signaled:) 215.9 459.62 T
(If the end of the str) 135.65 439.62 T
(eam is encounter) 227.74 439.62 T
(ed and no value was supplied for) 310.18 439.62 T
0 F
(on-) 475.54 439.62 T
-0.51 (end-of-str) 135.65 425.62 P
-0.51 (eam) 178.83 425.62 P
2 F
-0.51 (,) 196.55 425.62 P
4 9.5 Q
-1.06 (read-element) 201.54 425.62 P
2 11 Q
-0.51 ( signals an) 269.94 425.62 P
4 9.5 Q
-1.06 (<end-of-stream-error>) 322.31 425.62 P
2 11 Q
-0.51 ( condition.) 442.01 425.62 P
3 16 Q
(1.2) 108.65 390.29 T
(Goals of the librar) 134.18 390.29 T
(y) 246.6 390.29 T
2 11 Q
(The Dylan Str) 108.65 369.62 T
(eams library aims to pr) 175.8 369.62 T
(ovide:) 288.17 369.62 T
(\245) 117.65 349.62 T
(A generic, easy-to-use interface for str) 135.65 349.62 T
(eaming over sequences and \336les.) 319.76 349.62 T
(The same high-level interface for consuming or pr) 135.65 335.62 T
(oducing is available) 378.66 335.62 T
(irr) 135.65 321.62 T
(espective of the type of str) 147.34 321.62 T
(eam, or the types of the elements being) 274.63 321.62 T
(str) 135.65 307.62 T
(eamed over) 148.04 307.62 T
(.) 204.29 307.62 T
(\245) 117.65 287.62 T
(Ef) 135.65 287.62 T
(\336ciency) 145.83 287.62 T
(, especially for the common case of \336le I/O.) 182.02 287.62 T
(\245) 117.65 267.62 T
(Access to an underlying buf) 135.65 267.62 T
(fer management pr) 271.65 267.62 T
(otocol.) 364.66 267.62 T
(\245) 117.65 247.62 T
(An extensible framework. Other ar) 135.65 247.62 T
(eas of functionality that r) 305 247.62 T
(equir) 426.71 247.62 T
(e a) 452.12 247.62 T
(str) 135.65 233.62 T
(eam interface should be easy to integrate with the library) 148.04 233.62 T
(.) 423.98 233.62 T
(The pr) 108.65 213.62 T
(oposal pr) 140.57 213.62 T
(esents the design of a Str) 186.07 213.62 T
(eams library that meets these goals) 305.98 213.62 T
(using Dylan\325s built-in sequences and a buf) 108.65 199.62 T
(fer) 315.11 199.62 T
(ed disk \336le interface.) 328.19 199.62 T
(The pr) 108.65 179.62 T
(oposal does not addr) 140.57 179.62 T
(ess a number of r) 242.55 179.62 T
(elated issues, including:) 325.91 179.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.3) 430.27 702.62 T
(Concepts) 451.64 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(3) 482.15 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
2 11 Q
0 X
(\245) 108.65 665.62 T
-0.24 (A standar) 126.65 665.62 P
-0.24 (d object-printing package such as Smalltalk\325s) 174.24 665.62 P
4 9.5 Q
-0.49 (printOn:) 394.23 665.62 P
2 11 Q
-0.24 ( or Lisp\325s) 439.83 665.62 P
4 9.5 Q
(print-object) 126.65 651.62 T
2 11 Q
(, or a formatted printing facility such as Lisp\325s) 195.05 651.62 T
4 9.5 Q
(format) 421.67 651.62 T
2 11 Q
(.) 455.87 651.62 T
(Additional libraries ar) 126.65 637.62 T
(e expected to pr) 234.7 637.62 T
(ovide these facilities.) 311.86 637.62 T
(\245) 108.65 617.62 T
(General object dumping and loading.) 126.65 617.62 T
(\245) 108.65 597.62 T
(A compr) 126.65 597.62 T
(ehensive range of I/O facilities for using memory-mapped \336les,) 169.32 597.62 T
(network connections, and so on. Such facilities should be easy to add to) 126.65 583.62 T
(the Str) 126.65 569.62 T
(eams library because of its extensible framework.) 158.16 569.62 T
(\245) 108.65 549.62 T
(An interface for naming \336les.) 126.65 549.62 T
(\245) 108.65 529.62 T
(An interface to operating system functionality) 126.65 529.62 T
(, such as \336le r) 349.28 529.62 T
(enaming or) 415.05 529.62 T
(deleting operations.) 126.65 515.62 T
3 16 Q
(1.3  Concepts) 99.65 480.29 T
2 11 Q
(A) 99.65 459.62 T
0 F
(str) 110.96 459.62 T
(eam) 122.98 459.62 T
2 F
( pr) 140.7 459.62 T
(ovides sequential access to an aggr) 154.21 459.62 T
(egate of data, such as a Dylan) 323.16 459.62 T
(sequence or a disk \336le. Str) 99.65 445.62 T
(eams grant this access accor) 225.88 445.62 T
(ding to a metaphor of) 361.12 445.62 T
0 F
(r) 99.65 431.62 T
(eading) 103.73 431.62 T
2 F
( and) 133.07 431.62 T
0 F
(writing) 157.19 431.62 T
2 F
(: elements can be r) 190.8 431.62 T
(ead fr) 280.21 431.62 T
(om str) 308.26 431.62 T
(eams or written to them.) 339.13 431.62 T
(Str) 99.65 411.62 T
(eams ar) 113.16 411.62 T
(e r) 150.7 411.62 T
(epr) 162.87 411.62 T
(esented as Dylan objects, and all ar) 178.89 411.62 T
(e general instances of the) 348.46 411.62 T
(class) 99.65 397.62 T
4 9.5 Q
(<stream>) 125.31 397.62 T
2 11 Q
(, which the Str) 170.91 397.62 T
(eams library de\336nes.) 240.74 397.62 T
-0.09 (W) 99.65 377.62 P
-0.09 (e say that a str) 109.64 377.62 P
-0.09 (eam is established) 178.78 377.62 P
0 F
-0.09 (over) 269.65 377.62 P
2 F
-0.09 ( the data aggr) 288.59 377.62 P
-0.09 (egate. Hence, a str) 355 377.62 P
-0.09 (eam pr) 443.08 377.62 P
-0.09 (o-) 476.98 377.62 P
(viding access to the string) 99.65 363.62 T
4 9.5 Q
("hello world") 228.28 363.62 T
2 11 Q
( is said to be a str) 302.38 363.62 T
(eam over the string) 385.67 363.62 T
4 9.5 Q
("hello world") 99.65 349.62 T
2 11 Q
(.) 173.75 349.62 T
(Str) 99.65 329.62 T
(eams permitting r) 113.16 329.62 T
(eading operations ar) 199.98 329.62 T
(e called) 299.92 329.62 T
0 F
(input) 339.47 329.62 T
2 F
( str) 363.92 329.62 T
(eams. Input str) 379.07 329.62 T
(eams) 451.8 329.62 T
(allow elements fr) 99.65 315.62 T
(om the underlying data aggr) 183.41 315.62 T
(egate to be consumed. Con-) 322.98 315.62 T
-0.39 (versely) 99.65 301.62 P
-0.39 (, str) 133.51 301.62 P
-0.39 (eams permitting writing operations ar) 151.01 301.62 P
-0.39 (e called) 334.88 301.62 P
0 F
-0.39 (output) 373.64 301.62 P
2 F
-0.39 ( str) 403.58 301.62 P
-0.39 (eams. Output) 418.34 301.62 P
-0.01 (str) 99.65 287.62 P
-0.01 (eams allow elements to be written to the underlying data aggr) 112.04 287.62 P
-0.01 (egate. Str) 414.02 287.62 P
-0.01 (eams) 458.76 287.62 P
(permitting both kinds of operations ar) 99.65 273.62 T
(e called) 285.52 273.62 T
0 F
(input-output) 325.06 273.62 T
2 F
( str) 383.12 273.62 T
(eams.) 398.27 273.62 T
(The library pr) 99.65 253.62 T
(ovides a set of functions for r) 167.11 253.62 T
(eading elements fr) 307.98 253.62 T
(om an input) 397.87 253.62 T
(str) 99.65 239.62 T
(eam. These functions hide the details of indexing, buf) 112.04 239.62 T
(fering, and so on. For) 371.64 239.62 T
(instance, the function) 99.65 225.62 T
4 9.5 Q
(read-element) 206.59 225.62 T
2 11 Q
( r) 274.99 225.62 T
(eads a single data element fr) 281.89 225.62 T
(om an input) 419.97 225.62 T
(str) 99.65 211.62 T
(eam.) 112.04 211.62 T
(The following expr) 99.65 191.62 T
(ession binds) 192.24 191.62 T
4 9.5 Q
(stream) 255.01 191.62 T
2 11 Q
( to an input str) 289.21 191.62 T
(eam over the string) 360.54 191.62 T
4 9.5 Q
("hello world") 99.65 177.62 T
2 11 Q
(:) 173.75 177.62 T
4 9 Q
(let stream = make\050<string-stream>, contents: "hello world"\051;) 126.65 156.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(4) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
(The \336rst invocation of) 108.65 665.62 T
4 9.5 Q
(read-element) 218.38 665.62 T
2 11 Q
( on) 286.78 665.62 T
4 9.5 Q
(stream) 304.69 665.62 T
2 11 Q
( r) 338.89 665.62 T
(eturns the character \325h\325, the) 345.79 665.62 T
(next invocation \325e\325, and so on. Once a str) 108.65 651.62 T
(eam has been used to consume all the) 304.67 651.62 T
(elements of the data, the str) 108.65 637.62 T
(eam is said to be at its end. This condition can be) 242.41 637.62 T
(tested with the function) 108.65 623.62 T
4 9.5 Q
(stream-at-end?) 227.14 623.62 T
2 11 Q
(. The following code fragment applies) 306.94 623.62 T
4 9.5 Q
(function) 108.65 609.62 T
2 11 Q
( to all elements of the sequence:) 154.25 609.62 T
4 9 Q
(let stream = make\050<sequence-stream>, contents: seq\051;) 135.65 588.95 T
(while \050~stream-at-end?\050stream\051\051) 135.65 577.95 T
(function\050read-element\050stream\051\051;) 146.45 566.95 T
(end;) 135.65 555.95 T
2 11 Q
(When all elements of a str) 108.65 535.62 T
(eam have been r) 234.31 535.62 T
(ead, further calls to) 313.6 535.62 T
4 9.5 Q
(read-element) 410.12 535.62 T
2 11 Q
(r) 108.65 521.62 T
(esult in the) 112.79 521.62 T
4 9.5 Q
(<end-of-stream-error>) 169.26 521.62 T
2 11 Q
( condition being signalled. An alternative) 288.96 521.62 T
-0.51 (end-of-str) 108.65 507.62 P
-0.51 (eam behavior is to have a distinguished end-of-str) 156.43 507.62 P
-0.51 (eam value r) 396.51 507.62 P
-0.51 (eturned.) 452.43 507.62 P
(Y) 108.65 493.62 T
(ou can supply such an end-of-str) 114.97 493.62 T
(eam value as a keywor) 274.25 493.62 T
(d ar) 385.05 493.62 T
(gument to the var-) 404.16 493.62 T
(ious r) 108.65 479.62 T
(ead functions; the value can be any object. Supplying an end-of-str) 136.05 479.62 T
(eam) 458.96 479.62 T
(value to a r) 108.65 465.62 T
(ead function is mor) 162.96 465.62 T
(e ef) 257.2 465.62 T
(\336cient than asking whether a str) 273.96 465.62 T
(eam is at its) 429.94 465.62 T
(end on every iteration of a loop.) 108.65 451.62 T
(The library also pr) 108.65 431.62 T
(ovides a set of functions for writing data elements to an out-) 198.23 431.62 T
(put str) 108.65 417.62 T
(eam. Like the functions that operate upon input str) 140.62 417.62 T
(eams, these functions) 388 417.62 T
(hide the details of indexing, gr) 108.65 403.62 T
(owing an underlying sequence, buf) 257.06 403.62 T
(fering for a) 428.75 403.62 T
(\336le, and so on. For instance, the function) 108.65 389.62 T
4 9.5 Q
(write-element) 308.13 389.62 T
2 11 Q
( writes a single data) 382.23 389.62 T
(element to an output str) 108.65 375.62 T
(eam.) 225.3 375.62 T
-0.09 (The following forms bind) 108.65 355.62 P
4 9.5 Q
-0.19 (stream) 235.46 355.62 P
2 11 Q
-0.09 ( to an output str) 269.66 355.62 P
-0.09 (eam over an empty string and) 347.24 355.62 P
-0.31 (cr) 108.65 341.62 P
-0.31 (eate the string \322I see!\323, using the function) 117.68 341.62 P
4 9.5 Q
-0.63 (stream-contents) 319.2 341.62 P
2 11 Q
-0.31 ( to access all of the) 404.7 341.62 P
(str) 108.65 327.62 T
(eam\325s elements.) 121.04 327.62 T
4 9 Q
(let stream = make\050<byte-string-stream>, direction: #"output"\051;) 135.65 306.95 T
(write-element\050stream, \325I\325\051;) 135.65 295.95 T
(write-element\050stream, \325 \325\051;) 135.65 284.95 T
(write\050stream, "see"\051;) 135.65 273.95 T
(write-element\050stream, \325!\325\051;) 135.65 262.95 T
(stream-contents\050stream\051;) 135.65 251.95 T
2 11 Q
-0.15 (Calling) 108.65 231.62 P
4 9.5 Q
-0.31 (write) 146.67 231.62 P
2 11 Q
-0.15 ( on a sequence has the same ef) 175.17 231.62 P
-0.15 (fect as calling) 321.55 231.62 P
4 9.5 Q
-0.31 (write-element) 389.43 231.62 P
2 11 Q
-0.15 ( on all) 463.53 231.62 P
(the elements of the sequence. However) 108.65 217.62 T
(, it is not r) 297.87 217.62 T
(equir) 346.41 217.62 T
(ed that) 371.82 217.62 T
4 9.5 Q
(write) 408.39 217.62 T
2 11 Q
( be imple-) 436.89 217.62 T
(mented dir) 108.65 203.62 T
(ectly in terms of) 162.43 203.62 T
4 9.5 Q
(write-element) 243.33 203.62 T
2 11 Q
(; it might be implemented mor) 317.43 203.62 T
(e ef) 465.91 203.62 T
(\336-) 482.66 203.62 T
(ciently) 108.65 189.62 T
(, especially for buf) 140.09 189.62 T
(fer) 229.2 189.62 T
(ed str) 242.28 189.62 T
(eams.) 269.41 189.62 T
(Some str) 108.65 169.62 T
(eams ar) 150.56 169.62 T
(e) 188.1 169.62 T
0 F
(positionable) 196.12 169.62 T
2 F
(; that is, they permit random access to their ele-) 248.88 169.62 T
(ments. Postionable str) 108.65 155.62 T
(eams allow you to set the position at which the str) 215.49 155.62 T
(eam) 458.82 155.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.3) 430.27 702.62 T
(Concepts) 451.64 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(5) 482.15 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
2 11 Q
0 X
(will be accessed by the next operation. The following example uses positioning) 99.65 665.62 T
(to r) 99.65 651.62 T
(eturn the character \324w\325 fr) 116.14 651.62 T
(om a str) 236.44 651.62 T
(eam over the string) 275.56 651.62 T
4 9.5 Q
("hello world") 372.45 651.62 T
2 11 Q
(:) 446.55 651.62 T
4 9 Q
(let stream = make\050<string-stream>, contents: "hello world"\051;) 126.65 630.95 T
(stream-position\050stream\051 := 6;) 126.65 619.95 T
(read-element\050stream\051;) 126.65 608.95 T
2 11 Q
(The following example r) 99.65 588.62 T
(eturns a string, but the contents of the \336rst ten charac-) 218.67 588.62 T
(ters ar) 99.65 574.62 T
(e unde\336ned:) 129.91 574.62 T
4 9 Q
(let stream = make\050<string-stream>, direction: #"output"\051;) 126.65 553.95 T
(adjust-stream-position\050stream, 10\051;) 126.65 542.95 T
(write\050stream, "whoa!"\051;) 126.65 531.95 T
(stream-contents\050stream\051;) 126.65 520.95 T
2 11 Q
(Y) 99.65 500.62 T
(ou can r) 105.97 500.62 T
(equest a sequence containing all of the elements of a positionable) 145.04 500.62 T
(str) 99.65 486.62 T
(eam by calling) 112.04 486.62 T
4 9.5 Q
(stream-contents) 185.48 486.62 T
2 11 Q
( on it. The sequence r) 270.98 486.62 T
(eturned never shar) 373.79 486.62 T
(es) 465.73 486.62 T
(str) 99.65 472.62 T
(uctur) 112.15 472.62 T
(e with any underlying sequence that might be used in futur) 138.04 472.62 T
(e by the) 427.14 472.62 T
(str) 99.65 458.62 T
(eam. For instance, the string r) 112.04 458.62 T
(eturned by calling) 255.87 458.62 T
4 9.5 Q
(stream-contents) 347.05 458.62 T
2 11 Q
( on an out-) 432.55 458.62 T
-0.23 (put) 99.65 444.62 P
4 9.5 Q
-0.48 (<string-stream>) 119 444.62 P
2 11 Q
-0.23 ( will not be the same string as that being used to r) 204.5 444.62 P
-0.23 (epr) 442.91 444.62 P
-0.23 (esent) 458.94 444.62 P
(the string str) 99.65 430.62 T
(eam.) 161.12 430.62 T
(When making an input) 99.65 410.62 T
4 9.5 Q
(<string-stream>) 215.1 410.62 T
2 11 Q
(, you can cause the str) 300.6 410.62 T
(eam to pr) 407.25 410.62 T
(oduce) 453.58 410.62 T
(elements fr) 99.65 396.62 T
(om any subsequence of the supplied string. For example:) 153.58 396.62 T
4 9 Q
(read-to-end\050make\050<string-stream>,) 126.65 375.95 T
(contents: "hello there, world",) 213.05 364.95 T
(start: 6,) 213.05 353.95 T
(end: 11\051\051;) 213.05 342.95 T
2 11 Q
(This example evaluates to) 99.65 322.62 T
4 9.5 Q
("there") 228.33 322.62 T
2 11 Q
(. The interval \050) 268.23 322.62 T
0 F
(start) 339.02 322.62 T
2 F
(,) 359.79 322.62 T
0 F
(end) 365.29 322.62 T
2 F
(\051 includes the index) 381.18 322.62 T
0 F
(start) 99.65 308.62 T
2 F
( but excludes the index) 120.42 308.62 T
0 F
(end) 235.31 308.62 T
2 F
(. This is consistent with standar) 251.21 308.62 T
(d Dylan func-) 404.13 308.62 T
(tions over sequences, such as) 99.65 294.62 T
4 9.5 Q
(copy-sequence) 243.8 294.62 T
2 11 Q
(. The) 317.9 294.62 T
4 9.5 Q
(read-to-end) 344.57 294.62 T
2 11 Q
( function is one) 407.27 294.62 T
-0.41 (of a number of convenient utility functions for operating on str) 99.65 280.62 P
-0.41 (eams and r) 400.81 280.62 P
-0.41 (eturns) 453.41 280.62 P
(all the elements up to the end of the str) 99.65 266.62 T
(eam fr) 288.74 266.62 T
(om the str) 319.78 266.62 T
(eam\325s curr) 368.65 266.62 T
(ent position.) 419.62 266.62 T
3 13 Q
(1.3.1  Streams, gr) 99.65 233.29 T
(o) 187.75 233.29 T
(wing sequences, and object identity) 194.12 233.29 T
2 11 Q
(When writing to output str) 99.65 213.62 T
(eams over sequences, Dylan may fr) 230.79 213.62 T
(om time to time) 402.36 213.62 T
(need to gr) 99.65 199.62 T
(ow the underlying sequence that it is using to r) 148.66 199.62 T
(epr) 377.29 199.62 T
(esent the str) 393.32 199.62 T
(eam) 451.66 199.62 T
(data.) 99.65 185.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(6) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
-0.31 (Consider the example of an output str) 108.65 665.62 P
-0.31 (eam instantiated over an empty string. As) 291.18 665.62 P
(soon as a write operation is performed on the str) 108.65 651.62 T
(eam, it is necessary to r) 344.51 651.62 T
(eplace) 457 651.62 T
(the string object used in the r) 108.65 637.62 T
(epr) 249.41 637.62 T
(esentation of the string str) 265.44 637.62 T
(eam. As well as) 391.96 637.62 T
-0 (incurring the cost of cr) 108.65 623.62 P
-0 (eating a new string, the r) 218.26 623.62 P
-0 (eplacement operation can af) 338.88 623.62 P
-0 (fect) 475.5 623.62 P
(the integrity of other r) 108.65 609.62 T
(efer) 216.15 609.62 T
(ences to the string within the pr) 234.5 609.62 T
(ogram.) 388.63 609.62 T
(T) 108.65 589.62 T
(o guarantee that alias r) 114.38 589.62 T
(efer) 225.29 589.62 T
(ences to a sequence used in an output) 243.64 589.62 T
4 9.5 Q
(<sequence-) 429.62 589.62 T
-0.77 (stream>) 108.65 575.62 P
2 11 Q
-0.37 ( will have access to any elements written to the sequence via the str) 148.55 575.62 P
-0.37 (eam,) 470.04 575.62 P
(supply a) 108.65 561.62 T
4 9.5 Q
(<stretchy-vector>) 153.48 561.62 T
2 11 Q
( to) 250.38 561.62 T
4 9.5 Q
(make) 265.48 561.62 T
2 11 Q
(. A str) 288.28 561.62 T
(eam over a str) 317.48 561.62 T
(etchy vector will use) 385.95 561.62 T
(the same str) 108.65 547.62 T
(etchy vector thr) 166.95 547.62 T
(oughout the str) 243.15 547.62 T
(eam\325s existence.) 317.68 547.62 T
(For example:) 108.65 527.62 T
4 9 Q
(let sv = make\050<stretchy-vector>\051;) 135.65 506.95 T
(let stream = make\050<sequence-stream>,) 135.65 487.95 T
(contents: sv,) 232.85 476.95 T
(direction: #"output"\051;) 232.85 465.95 T
(write\050stream,#\0501, 2, 3, 4, 5, 6, 7, 8, 9\051\051;) 135.65 446.95 T
(write\050stream,"ABCDEF"\051;) 135.65 427.95 T
(values\050sv, stream-contents\050stream\051\051;) 135.65 408.95 T
2 11 Q
(The example r) 108.65 388.62 T
(eturns two values. Each value is the same \050) 177.95 388.62 T
4 9.5 Q
(\134==) 386.1 388.62 T
2 11 Q
(\051 str) 403.2 388.62 T
(etchy vector:) 422.01 388.62 T
4 9 Q
(\0501, 2, 3, 4, 5, 6, 7, 8, 9, \325A\325, \325B\325, \325C\325, \325D\325, \325E\325, \325F\325\051) 135.65 367.95 T
2 11 Q
(If a str) 108.65 347.62 T
(etchy vector is not supplied, the r) 139.41 347.62 T
(esult is dif) 301.4 347.62 T
(fer) 351.51 347.62 T
(ent:) 364.58 347.62 T
4 9 Q
(let v = make\050<vector>, size: 5\051;) 135.65 326.95 T
(let stream = make\050<sequence-stream>,) 135.65 307.95 T
(contents: v,) 232.85 296.95 T
(direction: #"output"\051;) 232.85 285.95 T
(write\050stream,#\0501, 2, 3, 4, 5, 6, 7, 8, 9\051\051;) 135.65 266.95 T
(write\050stream,"ABCDEF"\051;) 135.65 247.95 T
(values\050v, stream-contents\050stream\051\051;) 135.65 228.95 T
2 11 Q
(This example r) 108.65 208.62 T
(eturns as its \336rst value the original vector) 180.54 208.62 T
(, whose contents ar) 381.1 208.62 T
(e) 474.06 208.62 T
(unde\336ned, but the second value is a new vector:) 108.65 194.62 T
4 9 Q
(\0501, 2, 3, 4, 5, 6, 7, 8, 9, \325A\325, \325B\325, \325C\325, \325D\325, \325E\325, \325F\325\051) 135.65 173.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.4) 409.95 702.62 T
(Stream classes) 431.32 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(7) 482.15 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
2 11 Q
0 X
-0.3 (This dif) 99.65 665.62 P
-0.3 (fer) 136.5 665.62 P
-0.3 (ence arises because the output str) 149.57 665.62 P
-0.3 (eam in the second example does not) 310.31 665.62 P
(use a str) 99.65 651.62 T
(etchy vector to hold the str) 139.61 651.62 T
(eam data. A vector of at least 15 elements is) 269.5 651.62 T
(necessary to accommodate the elements written to the str) 99.65 637.62 T
(eam, but the vector) 377.57 637.62 T
(supplied,) 99.65 623.62 T
4 9.5 Q
(v) 148.06 623.62 T
2 11 Q
(, can hold only 5. Since the str) 152.54 623.62 T
(eam cannot change) 296.81 623.62 T
4 9.5 Q
(v) 392.9 623.62 T
2 11 Q
(\325s size, it must) 398.6 623.62 T
(allocate a new vector each time it gr) 99.65 609.62 T
(ows.) 273.57 609.62 T
3 16 Q
(1.4  Stream c) 99.65 574.29 T
(lasses) 180.37 574.29 T
2 11 Q
(The exported str) 99.65 553.62 T
(eams class heterar) 179.44 553.62 T
(chy is as follows:) 267.52 553.62 T
99.65 377.96 486.65 385.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
2 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 214.26 389.62 T
(e 1  Str) 240.48 389.62 T
(eams library classes.) 273 389.62 T
(Except for the classes) 99.65 357.63 T
4 9.5 Q
(<stream>) 205.51 357.63 T
2 11 Q
(,) 251.11 357.63 T
4 9.5 Q
(<buffered-stream>) 256.61 357.63 T
2 11 Q
(, and) 353.51 357.63 T
4 9.5 Q
(<positionable-) 380.39 357.63 T
(stream>) 99.65 343.63 T
2 11 Q
(, these ar) 139.55 343.63 T
(e instantiable classes.) 182.63 343.63 T
3 12 Q
(<stream>) 99.65 308.96 T
0 11 Q
(Open abstract class) 400.5 309.63 T
2 F
(The super) 126.65 287.63 T
(class of all str) 175.14 287.63 T
(eam classes and a dir) 240.27 287.63 T
(ect subclass of) 342.79 287.63 T
4 9.5 Q
(<object>) 414.74 287.63 T
2 11 Q
(. It is) 460.34 287.63 T
(not instantiable.) 126.65 273.63 T
3 12 Q
(<positionab) 99.65 238.96 T
(le-stream>) 155.06 238.96 T
0 11 Q
(Open abstract class) 400.5 239.63 T
2 F
(A subclass of) 126.65 217.63 T
4 9.5 Q
(<stream>) 193.42 217.63 T
2 11 Q
( supporting the Positionable Str) 239.02 217.63 T
(eam Pr) 392.72 217.63 T
(otocol. It is) 426.74 217.63 T
(not instantiable.) 126.65 203.63 T
99.65 405.95 468.65 529.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
0 0 0 1 0 0 0 K
(<stream>) 225.65 521.95 T
(<buffered-stream>) 108.65 494.95 T
(<positionable-stream>) 297.65 494.95 T
(<file-stream>) 108.65 467.95 T
(<sequence-stream>) 297.65 467.95 T
(<string-stream>) 297.65 440.95 T
(<unicode-string-stream>) 342.65 415.12 T
(<byte-string-stream>) 207.65 415.12 T
252.65 518.95 342.65 500.95 2 L
0.25 H
2 Z
N
153.65 500.95 234.65 518.95 2 L
N
342.65 491.95 342.65 473.95 2 L
N
342.65 464.95 342.65 446.95 2 L
N
342.65 437.95 279.65 421.95 2 L
N
342.65 437.95 387.65 421.95 2 L
N
153.65 491.95 153.65 473.95 2 L
N
342.65 493.95 153.65 473.95 2 L
N
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(8) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
3 12 Q
0 X
(<b) 108.65 664.95 T
(uff) 120.23 664.95 T
(ered-stream>) 132.71 664.95 T
0 11 Q
(Open abstract class) 409.5 665.62 T
2 F
-0.01 (A subclass of) 135.65 643.62 P
4 9.5 Q
-0.01 (<stream>) 202.4 643.62 P
2 11 Q
-0.01 ( supporting the Str) 248 643.62 P
-0.01 (eam Extension Pr) 339.17 643.62 P
-0.01 (otocol and the) 423.85 643.62 P
(Buf) 135.65 629.62 T
(fer Access Pr) 152.47 629.62 T
(otocol. It is not instantiable.) 214.96 629.62 T
(Str) 135.65 609.62 T
(eams of this class support the) 149.16 609.62 T
4 9.5 Q
(buffer-size:) 294.95 609.62 T
2 11 Q
( init-keywor) 363.35 609.62 T
(d, which can) 422.98 609.62 T
(be used to suggest the size of the str) 135.65 595.62 T
(eam\325s buf) 310.14 595.62 T
(fer) 357.28 595.62 T
(. However) 369.74 595.62 T
(, the instanti-) 419.86 595.62 T
(ated str) 135.65 581.62 T
(eam might not use this value: it is taken pur) 171.87 581.62 T
(ely as a suggested) 385.02 581.62 T
(value. For example, a str) 135.65 567.62 T
(eam that uses a speci\336c device\325s har) 254.57 567.62 T
(dwar) 428.85 567.62 T
(e buf) 454.39 567.62 T
(fer) 478.6 567.62 T
(might use a \336xed buf) 135.65 553.62 T
(fer size r) 238.23 553.62 T
(egar) 279.79 553.62 T
(dless of the value passed with the) 300.82 553.62 T
4 9.5 Q
(buffer-size:) 135.65 539.62 T
2 11 Q
( init-keywor) 204.05 539.62 T
(d.) 263.68 539.62 T
3 12 Q
(<\336le-stream>) 108.65 504.95 T
0 11 Q
(Open abstract class) 409.5 505.62 T
2 F
(The class of str) 135.65 483.62 T
(eams over disk \336les. It is a subclass of) 207.29 483.62 T
4 9.5 Q
(<positionable-) 392.88 483.62 T
(stream>) 135.65 469.62 T
2 11 Q
( and) 175.55 469.62 T
4 9.5 Q
(<buffered-stream>) 199.67 469.62 T
2 11 Q
(.) 296.57 469.62 T
(When you instantiate this class, an implementation-dependent, indir) 135.65 449.62 T
(ect) 469.04 449.62 T
(instance of it is cr) 135.65 435.62 T
(eated. The \336le being str) 219.91 435.62 T
(eamed over is opened immedi-) 333.01 435.62 T
(ately upon cr) 135.65 421.62 T
(eating the str) 199.5 421.62 T
(eam.) 262.73 421.62 T
(The class supports several init-keywor) 135.65 401.62 T
(ds:) 322.44 401.62 T
4 9.5 Q
(locator:) 339.32 401.62 T
2 11 Q
(,) 384.92 401.62 T
4 9.5 Q
(direction:) 390.42 401.62 T
2 11 Q
(,) 447.42 401.62 T
4 9.5 Q
(if-) 452.92 401.62 T
(exists:) 135.65 387.62 T
2 11 Q
(, and) 175.55 387.62 T
4 9.5 Q
(if-does-not-exist:) 202.42 387.62 T
2 11 Q
(.) 305.02 387.62 T
3 12 Q
(<sequence-stream>) 108.65 352.95 T
0 11 Q
(Open instantiable class) 392.57 353.62 T
2 F
(The class of str) 135.65 331.62 T
(eams over sequences. It is a subclass of) 207.29 331.62 T
4 9.5 Q
(<positionable-) 398.86 331.62 T
(stream>) 135.65 317.62 T
2 11 Q
(.) 175.55 317.62 T
(The) 135.65 297.62 T
4 9.5 Q
(<sequence-stream>) 156.81 297.62 T
2 11 Q
( class can be used for str) 253.71 297.62 T
(eaming over all) 370.96 297.62 T
(sequences, but ther) 135.65 283.62 T
(e ar) 228.82 283.62 T
(e also subclasses) 246.48 283.62 T
4 9.5 Q
(<string-stream>) 329.6 283.62 T
2 11 Q
(,) 415.1 283.62 T
4 9.5 Q
(<byte-string-) 420.6 283.62 T
(stream>) 135.65 269.62 T
2 11 Q
(, and) 175.55 269.62 T
4 9.5 Q
(<unicode-string-stream>) 202.42 269.62 T
2 11 Q
(, which ar) 333.52 269.62 T
(e specialized for) 381.48 269.62 T
(str) 135.65 255.62 T
(eaming over strings.) 148.04 255.62 T
-0.33 (The class supports several init-keywor) 135.65 235.62 P
-0.33 (ds:) 321.1 235.62 P
4 9.5 Q
-0.69 (contents:) 337.65 235.62 P
2 11 Q
-0.33 (,) 388.95 235.62 P
4 9.5 Q
-0.69 (direction:) 394.12 235.62 P
2 11 Q
-0.33 (,) 451.12 235.62 P
4 9.5 Q
-0.69 (start:) 456.28 235.62 P
2 11 Q
-0.33 (,) 490.48 235.62 P
(and) 135.65 221.62 T
4 9.5 Q
(end:) 157.02 221.62 T
2 11 Q
(.) 179.82 221.62 T
3 12 Q
(<string-stream>) 108.65 186.95 T
0 11 Q
(Open instantiable class) 392.57 187.62 T
2 F
(The class of str) 135.65 165.62 T
(eams over strings. It is a subclass of) 207.29 165.62 T
4 9.5 Q
(<sequence-stream>) 382.62 165.62 T
2 11 Q
(.) 479.52 165.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.4) 409.95 702.62 T
(Stream classes) 431.32 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(9) 482.15 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
2 11 Q
0 X
(The class supports the same init-keywor) 126.65 665.62 T
(ds as) 322.13 665.62 T
4 9.5 Q
(<sequence-stream>) 349.18 665.62 T
2 11 Q
(.) 446.08 665.62 T
3 12 Q
(<b) 99.65 630.95 T
(yte-string-stream>) 111.23 630.95 T
0 11 Q
(Open instantiable class) 383.57 631.62 T
2 F
-0.14 (The class of str) 126.65 609.62 P
-0.14 (eams over byte strings. It is a subclass of) 197.88 609.62 P
4 9.5 Q
-0.28 (<string-stream>) 395.78 609.62 P
2 11 Q
-0.14 (.) 481.28 609.62 P
(The class supports the same init-keywor) 126.65 589.62 T
(ds as) 322.13 589.62 T
4 9.5 Q
(<sequence-stream>) 349.18 589.62 T
2 11 Q
(.) 446.08 589.62 T
3 12 Q
(<unicode-string-stream>) 99.65 554.95 T
0 11 Q
(Open instantiable class) 383.57 555.62 T
2 F
(The class of str) 126.65 533.62 T
(eams over Unicode strings. It is a subclass of) 198.29 533.62 T
4 9.5 Q
(<string-) 417.41 533.62 T
(stream>) 126.65 519.62 T
2 11 Q
(.) 166.55 519.62 T
(The class supports the same init-keywor) 126.65 499.62 T
(ds as) 322.13 499.62 T
4 9.5 Q
(<sequence-stream>) 349.18 499.62 T
2 11 Q
(.) 446.08 499.62 T
3 13 Q
(1.4.1  Creating streams) 99.65 466.29 T
2 11 Q
(The following functions ar) 99.65 446.62 T
(e used to cr) 228.37 446.62 T
(eate str) 283.8 446.62 T
(eams.) 318.57 446.62 T
3 13 Q
(1.4.1.1  File streams) 99.65 413.29 T
2 11 Q
(File str) 99.65 393.62 T
(eams ar) 132.58 393.62 T
(e intended only for accessing the contents of \336les. They ar) 170.12 393.62 T
(e not) 450.23 393.62 T
(intended to pr) 99.65 379.62 T
(ovide a general \336le handling facility of r) 169.07 379.62 T
(enaming, deleting, mov-) 363.57 379.62 T
(ing, parsing dir) 99.65 365.62 T
(ectory names and so on.) 174.52 365.62 T
3 12 Q
(make) 99.65 330.95 T
5 F
(\336le-str) 127.55 330.95 T
(eam-class) 163.32 330.95 T
0 11 Q
(G.f method) 437.76 331.62 T
4 9 Q
(make) 126.65 310.95 T
5 F
(\336le-str) 153.65 310.95 T
(eam-class) 180.48 310.95 T
4 F
( #key) 220.46 310.95 T
5 F
(locator) 256.25 310.95 T
(dir) 290.65 310.95 T
(ection) 301.99 310.95 T
(if-exists) 331.89 310.95 T
(if-does-not-exist) 369.77 310.95 T
(buf) 256.25 299.95 T
(fer-size) 268.75 299.95 T
(element-type) 303.63 299.95 T
(encoding) 361.03 299.95 T
4 F
(=>) 126.65 288.95 T
5 F
(\336le-str) 142.85 288.95 T
(eam-instance) 169.68 288.95 T
2 11 Q
(Cr) 126.65 268.62 T
(eates and opens a str) 138.59 268.62 T
(eam over a \336le.) 239.35 268.62 T
(Returns a new instance of a concr) 126.65 248.62 T
(ete subclass of) 289.14 248.62 T
4 9.5 Q
(<file-stream>) 361.48 248.62 T
2 11 Q
( that) 435.58 248.62 T
-0.25 (str) 126.65 234.62 P
-0.25 (eams over the contents of the \336le r) 139.04 234.62 P
-0.25 (efer) 303.75 234.62 P
-0.25 (enced by) 322.1 234.62 P
0 F
-0.25 (locator) 367.83 234.62 P
2 F
-0.25 (. T) 397.15 234.62 P
-0.25 (o determine the) 408.12 234.62 P
-0.08 (concr) 126.65 220.62 P
-0.08 (ete subclass to be instantiated, this method calls the generic function) 152.97 220.62 P
4 9.5 Q
(type-for-file-stream) 126.65 206.62 T
2 11 Q
( \050see page 10.\051) 240.65 206.62 T
(The) 126.65 186.62 T
0 F
(\336le-str) 147.81 186.62 T
(eam-class) 176.64 186.62 T
2 F
( ar) 219 186.62 T
(gument is the class) 231.4 186.62 T
4 9.5 Q
(<file-stream>) 326.15 186.62 T
2 11 Q
(.) 400.26 186.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(10) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
(The) 135.65 665.62 T
0 F
(locator) 156.81 665.62 T
2 F
( init-keywor) 186.94 665.62 T
(d should be a string naming a \336le. If the Locators) 246.57 665.62 T
-0.13 (library is in use,) 135.65 651.62 P
0 F
-0.13 (locator) 215.7 651.62 P
2 F
-0.13 ( should be an instance of) 245.83 651.62 P
4 9.5 Q
-0.27 (<locator>) 368.01 651.62 P
2 11 Q
-0.13 ( or a string that) 419.31 651.62 P
(can be coer) 135.65 637.62 T
(ced to one.) 189.59 637.62 T
(The) 135.65 617.62 T
0 F
(dir) 156.81 617.62 T
(ection) 169.45 617.62 T
2 F
( init-keywor) 195.93 617.62 T
(d speci\336es the dir) 255.56 617.62 T
(ection of the str) 341.07 617.62 T
(eam.) 415.99 617.62 T
-0.25 (The) 135.65 597.62 P
0 F
-0.25 (if-exists) 156.57 597.62 P
2 F
-0.25 ( and) 191.4 597.62 P
0 F
-0.25 (if-does-not-exist) 215.03 597.62 P
2 F
-0.25 ( init-keywor) 286.52 597.62 P
-0.25 (ds specify actions to take if the) 345.9 597.62 P
-0.09 (\336le named by) 135.65 583.62 P
0 F
-0.09 (locator) 204.55 583.62 P
2 F
-0.09 ( does or does not alr) 234.68 583.62 P
-0.09 (eady exist when the str) 332.48 583.62 P
-0.09 (eam is cr) 444.02 583.62 P
-0.09 (e-) 486.72 583.62 P
-0.45 (ated. These init-keywor) 135.65 569.62 P
-0.45 (ds ar) 249.31 569.62 P
-0.45 (e discussed in mor) 272.64 569.62 P
-0.45 (e detail in Section 1.4.1.2 on) 361.7 569.62 P
(page 10.) 135.65 555.62 T
(The) 135.65 535.62 T
0 F
(buffer-size) 156.81 535.62 T
2 F
( init-keywor) 202.86 535.62 T
(d is explained in) 262.49 535.62 T
4 9.5 Q
(<buffered-stream>) 345.53 535.62 T
2 11 Q
(,  page 8.) 442.43 535.62 T
(The) 135.65 515.62 T
0 F
(element-type) 156.81 515.62 T
2 F
( init-keywor) 213.65 515.62 T
(d speci\336es the type of the elements in the \336le) 273.28 515.62 T
-0.39 (named by) 135.65 501.62 P
0 F
-0.39 (locator) 186.18 501.62 P
2 F
-0.39 (. This allows \336le elements to be r) 215.49 501.62 P
-0.39 (epr) 371.12 501.62 P
-0.39 (esented abstractly; for) 387.15 501.62 P
-0.41 (instance, contiguous elements could be tr) 135.65 487.62 P
-0.41 (eated as a single database r) 334.02 487.62 P
-0.41 (ecor) 463.54 487.62 P
-0.41 (d.) 483.84 487.62 P
(This init-keywor) 135.65 473.62 T
(d defaults to something useful, potentially based on the) 216.29 473.62 T
(pr) 135.65 459.62 T
(operties of the \336le;) 146.41 459.62 T
4 9.5 Q
(<byte-character>) 239.16 459.62 T
2 11 Q
( and) 330.36 459.62 T
4 9.5 Q
(<unicode-character>) 354.48 459.62 T
2 11 Q
( ar) 462.78 459.62 T
(e) 475.18 459.62 T
(likely choices. See Section 1.4.1.2 on page 10.) 135.65 445.62 T
3 12 Q
(type-f) 108.65 410.95 T
(or) 135.25 410.95 T
(-\336le-stream) 144.91 410.95 T
0 11 Q
(Open generic function) 396.22 411.62 T
4 9 Q
-0.2 (type-for-file-stream) 135.65 390.95 P
5 F
-0.09 (locator) 248.84 390.95 P
-0.09 (element-type) 283.05 390.95 P
4 F
-0.2 ( #rest) 335.04 390.95 P
5 F
-0.09 (all-keys) 372.43 390.95 P
4 F
-0.2 ( =>) 404.93 390.95 P
5 F
-0.09 (\336le-str) 426.12 390.95 P
-0.09 (eam-type) 452.95 390.95 P
2 11 Q
(Returns the kind of \336le-str) 135.65 370.62 T
(eam class to instantiate for a given \336le. The) 263.45 370.62 T
(method for) 135.65 356.62 T
4 9.5 Q
(make) 192.86 356.62 T
2 11 Q
( on) 215.66 356.62 T
4 9.5 Q
(<file-stream>) 233.57 356.62 T
2 11 Q
( calls this function to determine the) 307.67 356.62 T
(class of which it should cr) 135.65 342.62 T
(eate an instance.) 261.49 342.62 T
3 13 Q
(1.4.1.2  Options when creating \336le streams) 108.65 309.29 T
2 11 Q
(When cr) 108.65 289.62 T
(eating \336le str) 149.5 289.62 T
(eams, you can can supply the following init-keywor) 212.6 289.62 T
(ds to) 465.02 289.62 T
4 9.5 Q
(make) 108.65 275.62 T
2 11 Q
( in addition to the usual dir) 131.45 275.62 T
(ection:) 264.44 275.62 T
0 F
(if-exists) 135.65 255.62 T
2 F
(An action to take if the \336le alr) 216.65 255.62 T
(eady exists.) 360.59 255.62 T
0 F
(if-does-not-exist) 135.65 235.62 T
2 F
(An action to take if the \336le does not alr) 216.65 235.62 T
(eady exist.) 404.75 235.62 T
0 F
(element-type) 135.65 215.62 T
2 F
(How the elements of the underlying \336le ar) 216.65 215.62 T
(e accessed.) 422.96 215.62 T
(The) 108.65 195.62 T
0 F
(if-exists) 129.81 195.62 T
2 F
( init-keywor) 164.65 195.62 T
(d allows you to specify an action to take if the \336le) 224.28 195.62 T
(named by) 108.65 181.62 T
0 F
(locator) 159.95 181.62 T
2 F
( alr) 190.08 181.62 T
(eady exists. The options ar) 205.68 181.62 T
(e:) 334.63 181.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.4) 409.95 702.62 T
(Stream classes) 431.32 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(1) 477.98 131.95 T
(1) 482.15 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
4 9.5 Q
0 X
(#f) 126.65 665.62 T
2 11 Q
-0.12 (No action. This is the default when the str) 207.65 665.62 P
-0.12 (eam\325s dir) 409.77 665.62 P
-0.12 (ection) 454.67 665.62 P
(is) 207.65 651.62 T
4 9.5 Q
(#"input") 218.26 651.62 T
2 11 Q
( or) 263.86 651.62 T
4 9.5 Q
(#"input-output") 279.71 651.62 T
2 11 Q
(.) 365.21 651.62 T
4 9.5 Q
(#"new-version") 126.65 628.62 T
2 11 Q
(If the underlying \336le system supports \336le versioning, a) 207.65 611.12 T
-0.25 (new version of the \336le is cr) 207.65 597.12 P
-0.25 (eated. This is the default when) 336.57 597.12 P
(the str) 207.65 583.12 T
(eam\325s dir) 238.05 583.12 T
(ection is) 283.08 583.12 T
4 9.5 Q
(#"output") 325.79 583.12 T
2 11 Q
(.) 377.09 583.12 T
(If the \336le system does not support \336le versioning, the) 207.65 565.12 T
(implementation should substitute one of the other) 207.65 551.12 T
0 F
(if-) 454.3 551.12 T
(exists) 207.65 537.12 T
2 F
( behaviors; the) 232.71 537.12 T
4 9.5 Q
(#"replace") 306.65 537.12 T
2 11 Q
( behavior is a good) 363.65 537.12 T
(choice.) 207.65 523.12 T
4 9.5 Q
(#"overwrite") 126.65 503.12 T
2 11 Q
(Set the str) 207.65 503.12 T
(eam\325s position to the beginning of the \336le, but) 255.43 503.12 T
(pr) 207.65 489.12 T
(eserve the curr) 218.41 489.12 T
(ent contents of the \336le. This is useful) 290.2 489.12 T
(when the dir) 207.65 475.12 T
(ection is) 269.72 475.12 T
4 9.5 Q
(#"input-output") 312.43 475.12 T
2 11 Q
( and you want to) 397.93 475.12 T
(overwrite an existing \336le.) 207.65 461.12 T
4 9.5 Q
(#"replace") 126.65 441.12 T
2 11 Q
(Delete or r) 207.65 441.12 T
(ename the existing \336le and cr) 258.75 441.12 T
(eate a new \336le.) 400.81 441.12 T
4 9.5 Q
(#"append") 126.65 421.12 T
2 11 Q
(Set the str) 207.65 421.12 T
(eam\325s initial position to the end of the existing) 255.43 421.12 T
(\336le so that all new output occurs at the end of the \336le.) 207.65 407.12 T
4 9.5 Q
(#"truncate") 126.65 387.12 T
2 11 Q
(If the \336le exists, it is tr) 207.65 387.12 T
(uncated, setting the size of the \336le) 314.2 387.12 T
(to 0. If the \336le does not exist, cr) 207.65 373.12 T
(eate a new \336le.) 358.07 373.12 T
4 9.5 Q
(#"signal") 126.65 353.12 T
2 11 Q
(Signal a) 207.65 353.12 T
4 9.5 Q
(<file-exists-error>) 248.84 353.12 T
2 11 Q
( condition.) 357.14 353.12 T
(The) 99.65 333.12 T
0 F
(if-does-not-exist) 120.81 333.12 T
2 F
( init-keywor) 192.3 333.12 T
(d allows you to specify an action to take if the) 251.93 333.12 T
(\336le named by) 99.65 319.12 T
0 F
(locator) 168.83 319.12 T
2 F
( does not exist. The options ar) 198.96 319.12 T
(e:) 343.79 319.12 T
4 9.5 Q
(#f) 126.65 299.12 T
2 11 Q
(No action.) 207.65 299.12 T
4 9.5 Q
(#"signal") 126.65 279.12 T
2 11 Q
(Signal a) 207.65 279.12 T
4 9.5 Q
(<file-does-not-exist-error>) 248.84 279.12 T
2 11 Q
( condition. This) 402.74 279.12 T
(is the default when the str) 207.65 265.12 T
(eam\325s dir) 333.99 265.12 T
(ection is) 379.02 265.12 T
4 9.5 Q
(#"input") 421.73 265.12 T
2 11 Q
(.) 467.33 265.12 T
4 9.5 Q
(#"create") 126.65 245.12 T
2 11 Q
-0.35 (Cr) 207.65 245.12 P
-0.35 (eate a new zer) 219.59 245.12 P
-0.35 (o-length \336le. This is the default when the) 287.69 245.12 P
(str) 207.65 231.12 T
(eam\325s dir) 220.04 231.12 T
(ection is) 265.07 231.12 T
4 9.5 Q
(#"output") 307.78 231.12 T
2 11 Q
( or) 359.08 231.12 T
4 9.5 Q
(#"input-output") 374.93 231.12 T
2 11 Q
(.) 460.43 231.12 T
-0.41 (Because cr) 99.65 211.12 P
-0.41 (eating a \336le str) 149.96 211.12 P
-0.41 (eam) 220.08 211.12 P
0 F
-0.41 (always) 242.9 211.12 P
2 F
-0.41 ( involves an attempt to open the underlying) 273.45 211.12 P
(\336le, the afor) 99.65 197.12 T
(ementioned err) 157.6 197.12 T
(or conditions will occur during \336le str) 231.95 197.12 T
(eam instance) 416.34 197.12 T
(initialization.) 99.65 183.12 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(12) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
(If an implementation checks \336le permissions when cr) 108.65 665.62 T
(eating and opening \336le) 367.19 665.62 T
(str) 108.65 651.62 T
(eams, and it detects an attempt to r) 121.04 651.62 T
(ead a \336le for which the user has no r) 291.07 651.62 T
(ead) 467.3 651.62 T
-0.32 (permission, or to write a \336le for which the user has no write permission, then an) 108.65 637.62 P
4 9.5 Q
(<invalid-file-permissions-error>) 108.65 623.62 T
2 11 Q
( condition is signalled at the time the \336le) 291.05 623.62 T
(str) 108.65 609.62 T
(eam is cr) 121.04 609.62 T
(eated.) 163.92 609.62 T
(The) 108.65 589.62 T
0 F
(element-type) 129.81 589.62 T
2 F
( init-keywor) 186.65 589.62 T
(d contr) 246.28 589.62 T
(ols how the elements of the underlying \336le) 280.78 589.62 T
(ar) 108.65 575.62 T
(e accessed.) 118.29 575.62 T
1 F
(Implementation Note:) 108.65 555.62 T
2 F
( Ideally) 219.86 555.62 T
(,) 255.1 555.62 T
0 F
(element-type) 260.6 555.62 T
2 F
( could be any valid Dylan type such) 317.44 555.62 T
(as) 108.65 541.62 T
4 9.5 Q
(limited\050<integer>, min: 0, max: 255\051) 121.56 541.62 T
2 11 Q
( or) 326.76 541.62 T
4 9.5 Q
(<unicode-character>) 342.61 541.62 T
2 11 Q
(. This) 450.91 541.62 T
(appr) 108.65 527.62 T
(oach may make it possible to implement a potentially inef) 131.52 527.62 T
(\336cient but gen-) 412.55 527.62 T
(eral set of \336le str) 108.65 513.62 T
(eams. Unfortunately the curr) 188.67 513.62 T
(ent language de\336nition does not) 329.35 513.62 T
(include adequate support for this appr) 108.65 499.62 T
(oach, so we specify instead an interim) 296.54 499.62 T
(minimum set of thr) 108.65 485.62 T
(ee element types. The element types ar) 202.8 485.62 T
(e for the time being) 390.56 485.62 T
(exported fr) 108.65 471.62 T
(om the) 162.69 471.62 T
4 9.5 Q
(streams) 199.17 471.62 T
2 11 Q
( module of the Str) 239.07 471.62 T
(eams library) 326.04 471.62 T
(.) 385.51 471.62 T
(The thr) 108.65 451.62 T
(ee possible element types ar) 143.95 451.62 T
(e:) 279.79 451.62 T
4 9.5 Q
(<byte-character>) 135.65 425.62 T
2 11 Q
(The \336le is accessed as a sequence of 8-bit characters.) 216.65 407.62 T
4 9.5 Q
(<unicode-character>) 135.65 381.62 T
2 11 Q
(The \336le is accessed as a sequence of 16-bit Unicode char-) 216.65 363.62 T
(acters.) 216.65 349.62 T
4 9.5 Q
(<byte>) 135.65 329.62 T
2 11 Q
(The \336le is accessed as a sequence of unsigned 8-bit inte-) 216.65 329.62 T
(gers.) 216.65 315.62 T
1 F
(Portability Note:) 135.65 295.62 T
2 F
( Portable code can count on the existence of these thr) 219.36 295.62 T
(ee) 475.55 295.62 T
(element types, but implementations ar) 135.65 281.62 T
(e fr) 322.63 281.62 T
(ee to pr) 338.45 281.62 T
(ovide mor) 374.84 281.62 T
(e.) 424.87 281.62 T
3 13 Q
(1.4.1.3  Sequence streams) 108.65 248.29 T
2 11 Q
(Ther) 108.65 228.62 T
(e ar) 131.21 228.62 T
(e) 148.88 228.62 T
4 9.5 Q
(make) 156.89 228.62 T
2 11 Q
( methods on) 179.69 228.62 T
4 9.5 Q
(<sequence-stream>) 242.71 228.62 T
2 11 Q
(,) 339.61 228.62 T
4 9.5 Q
(<string-stream>) 345.11 228.62 T
2 11 Q
(,) 430.61 228.62 T
4 9.5 Q
(<byte-) 436.11 228.62 T
(string-stream>) 108.65 214.62 T
2 11 Q
( and) 188.45 214.62 T
4 9.5 Q
(<unicode-string-stream>) 212.57 214.62 T
2 11 Q
(. The) 343.67 214.62 T
4 9.5 Q
(make) 370.33 214.62 T
2 11 Q
( methods on) 393.14 214.62 T
4 9.5 Q
(<sequence-stream>) 108.65 200.62 T
2 11 Q
( and) 205.55 200.62 T
4 9.5 Q
(<string-stream>) 229.67 200.62 T
2 11 Q
( might not cr) 315.17 200.62 T
(eate dir) 377.46 200.62 T
(ect instances of) 413.91 200.62 T
(those classes, but instead an instance of a subclass determined by) 108.65 186.62 T
4 9.5 Q
(type-for-) 428.03 186.62 T
(sequence-stream) 108.65 172.62 T
2 11 Q
(.) 194.15 172.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.4) 409.95 702.62 T
(Stream classes) 431.32 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(13) 477.65 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
3 12 Q
0 X
(make) 99.65 664.95 T
5 F
(sequence-str) 127.55 664.95 T
(eam-class) 193.09 664.95 T
0 11 Q
(G.f. method) 435.01 665.62 T
4 9 Q
(make) 126.65 644.95 T
5 F
(sequence-str) 153.65 644.95 T
(eam-class) 202.81 644.95 T
4 F
( #key) 242.79 644.95 T
5 F
(contents) 275.19 644.95 T
(dir) 314.6 644.95 T
(ection) 325.93 644.95 T
(start) 355.83 644.95 T
(end) 380.74 644.95 T
4 F
(=>) 126.65 633.95 T
5 F
(sequence-str) 142.85 633.95 T
(eam-instance) 192.01 633.95 T
2 11 Q
(Cr) 126.65 613.62 T
(eates and opens a str) 138.59 613.62 T
(eam over a sequence.) 239.35 613.62 T
(This method r) 126.65 593.62 T
(eturns a general instance of) 195 593.62 T
4 9.5 Q
(<sequence-stream>) 330.83 593.62 T
2 11 Q
(. T) 427.73 593.62 T
(o deter-) 438.96 593.62 T
-0.22 (mine the concr) 126.65 579.62 P
-0.22 (ete subclass to be instantiated, this method calls the generic) 197.87 579.62 P
(function) 126.65 565.62 T
4 9.5 Q
(type-for-sequence-stream) 170.18 565.62 T
2 11 Q
( \050see page 13\051.) 306.98 565.62 T
(The) 126.65 545.62 T
0 F
(sequence-str) 147.81 545.62 T
(eam-class) 202.42 545.62 T
2 F
( ar) 244.78 545.62 T
(gument is the class) 257.17 545.62 T
4 9.5 Q
(<sequence-stream>) 351.93 545.62 T
2 11 Q
(.) 448.83 545.62 T
(The) 126.65 525.62 T
0 F
(contents) 147.81 525.62 T
2 F
( init-keywor) 185.29 525.62 T
(d is a general instance of) 244.92 525.62 T
4 9.5 Q
(<sequence>) 367.18 525.62 T
2 11 Q
( which is) 424.18 525.62 T
-0.26 (used as the input for input str) 126.65 511.62 P
-0.26 (eams, and as the initial storage for an output) 269.56 511.62 P
(str) 126.65 497.62 T
(eam. If) 139.04 497.62 T
0 F
(contents) 175.15 497.62 T
2 F
( is a str) 212.62 497.62 T
(etchy vector) 246.64 497.62 T
(, then it is the only storage used by) 305.13 497.62 T
(the str) 126.65 483.62 T
(eam.) 157.05 483.62 T
(The) 126.65 463.62 T
0 F
(dir) 147.81 463.62 T
(ection) 160.45 463.62 T
2 F
( init-keywor) 186.93 463.62 T
(d speci\336es the dir) 246.56 463.62 T
(ection of the str) 332.07 463.62 T
(eam. It must be) 406.99 463.62 T
(one of) 126.65 449.62 T
4 9.5 Q
(#"input") 159.49 449.62 T
2 11 Q
(,) 205.09 449.62 T
4 9.5 Q
(#"output") 210.59 449.62 T
2 11 Q
(, or) 261.89 449.62 T
4 9.5 Q
(#"input-output") 280.49 449.62 T
2 11 Q
(; the default is) 365.99 449.62 T
4 9.5 Q
(#"input") 437.44 449.62 T
2 11 Q
(.) 483.04 449.62 T
(The) 126.65 429.62 T
0 F
(start) 147.81 429.62 T
2 F
( and) 168.58 429.62 T
0 F
(end) 192.7 429.62 T
2 F
( init-keywor) 208.6 429.62 T
(ds ar) 268.23 429.62 T
(e only valid when) 292.01 429.62 T
0 F
(dir) 382.09 429.62 T
(ection) 394.73 429.62 T
2 F
( is) 421.21 429.62 T
4 9.5 Q
(#"input") 434.57 429.62 T
2 11 Q
(.) 480.17 429.62 T
(They specify the portion of the sequence to cr) 126.65 415.62 T
(eate the str) 347.1 415.62 T
(eam over:) 399.88 415.62 T
0 F
(start) 450.44 415.62 T
2 F
( is) 471.21 415.62 T
(inclusive and) 126.65 401.62 T
0 F
(end) 194.44 401.62 T
2 F
( is exclusive. The default is to str) 210.34 401.62 T
(eam over the entir) 368.05 401.62 T
(e) 456.48 401.62 T
(sequence:) 126.65 387.62 T
0 F
(start) 176.7 387.62 T
2 F
( is by default 0, and) 197.47 387.62 T
0 F
(end) 295.48 387.62 T
2 F
( is) 311.37 387.62 T
0 F
(contents) 324.74 387.62 T
4 9.5 Q
(.size) 362.21 387.62 T
2 11 Q
(.) 390.71 387.62 T
3 12 Q
(type-f) 99.65 352.95 T
(or) 126.25 352.95 T
(-sequence-stream) 135.91 352.95 T
0 11 Q
(Open generic function) 387.22 353.62 T
4 9 Q
(type-for-sequence-stream) 126.65 332.95 T
5 F
(sequence) 261.65 332.95 T
4 F
( =>) 296.47 332.95 T
5 F
(sequence-str) 318.07 332.95 T
(eam-type) 367.23 332.95 T
2 11 Q
(Returns the sequence-str) 126.65 312.62 T
(eam class to instantiate over a given sequence) 246.26 312.62 T
(object. The method for) 126.65 298.62 T
4 9.5 Q
(make) 238.93 298.62 T
2 11 Q
( on) 261.73 298.62 T
4 9.5 Q
(<sequence-stream>) 279.63 298.62 T
2 11 Q
( calls this function to) 376.53 298.62 T
(determine the concr) 126.65 284.62 T
(ete subclass of) 223.5 284.62 T
4 9.5 Q
(<sequence-stream>) 295.84 284.62 T
2 11 Q
( that it should) 392.74 284.62 T
(instantiate.) 126.65 270.62 T
(Ther) 126.65 250.62 T
(e ar) 149.21 250.62 T
(e) 166.88 250.62 T
4 9.5 Q
(type-for-sequence-stream) 174.89 250.62 T
2 11 Q
( methods for each of the string) 311.69 250.62 T
(object classes. These methods r) 126.65 236.62 T
(eturn a str) 276.5 236.62 T
(eam class object that the particu-) 326.13 236.62 T
(lar Str) 126.65 222.62 T
(eams implementation considers appr) 155.95 222.62 T
(opriate.) 336.03 222.62 T
3 12 Q
(make) 99.65 187.95 T
5 F
(string-str) 127.55 187.95 T
(eam-class) 178 187.95 T
0 11 Q
(G.f. method) 435.01 188.62 T
4 9 Q
(make) 126.65 167.95 T
5 F
(string-str) 153.65 167.95 T
(eam-class) 191.48 167.95 T
4 F
( #key) 231.47 167.95 T
5 F
(contents) 263.87 167.95 T
(dir) 303.27 167.95 T
(ection) 314.61 167.95 T
(start) 344.51 167.95 T
(end) 369.41 167.95 T
4 F
(=>) 126.65 156.95 T
5 F
(string-str) 142.85 156.95 T
(eam-instance) 180.68 156.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(14) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
(Cr) 135.65 665.62 T
(eates and opens a str) 147.59 665.62 T
(eam over a string.) 248.35 665.62 T
-0.15 (This method r) 135.65 645.62 P
-0.15 (eturns an instance of) 203.7 645.62 P
4 9.5 Q
-0.31 (<string-stream>) 306.49 645.62 P
2 11 Q
-0.15 (. If supplied,) 391.99 645.62 P
0 F
-0.15 (contents) 455.57 645.62 P
2 F
(must be an instance of) 135.65 631.62 T
4 9.5 Q
(<string>) 246.82 631.62 T
2 11 Q
(. The) 292.42 631.62 T
0 F
(string-str) 319.09 631.62 T
(eam-class) 361.67 631.62 T
2 F
( ar) 404.03 631.62 T
(gument is the) 416.43 631.62 T
(class) 135.65 617.62 T
4 9.5 Q
(<string-stream>) 161.31 617.62 T
2 11 Q
(. The) 246.81 617.62 T
0 F
(dir) 273.48 617.62 T
(ection) 286.11 617.62 T
2 F
(,) 312.59 617.62 T
0 F
(start) 318.09 617.62 T
2 F
(, and) 338.86 617.62 T
0 F
(end) 365.73 617.62 T
2 F
( init-keywor) 381.63 617.62 T
(ds ar) 441.26 617.62 T
(e as) 465.04 617.62 T
(for) 135.65 603.62 T
4 9.5 Q
(make) 152.41 603.62 T
2 11 Q
( on) 175.21 603.62 T
4 9.5 Q
(<sequence-stream>) 193.12 603.62 T
2 11 Q
(.) 290.02 603.62 T
3 12 Q
(make) 108.65 568.95 T
5 F
(byte-string-str) 136.55 568.95 T
(eam-class) 214.78 568.95 T
0 11 Q
(G.f. method) 444.01 569.62 T
4 9 Q
(make) 135.65 548.95 T
5 F
(byte-string-str) 162.65 548.95 T
(eam-class) 221.32 548.95 T
4 F
( #key) 261.31 548.95 T
5 F
(contents) 293.71 548.95 T
(dir) 333.11 548.95 T
(ection) 344.45 548.95 T
(start) 374.35 548.95 T
(end) 399.25 548.95 T
4 F
(=>) 135.65 537.95 T
5 F
(byte-string-str) 151.85 537.95 T
(eam-instance) 210.52 537.95 T
2 11 Q
(Cr) 135.65 517.62 T
(eates and opens a str) 147.59 517.62 T
(eam over a byte string.) 248.35 517.62 T
(This method r) 135.65 497.62 T
(eturns a new instance of) 204 497.62 T
4 9.5 Q
(<byte-string-stream>) 324.57 497.62 T
2 11 Q
(. If sup-) 438.57 497.62 T
(plied,) 135.65 483.62 T
0 F
(contents) 166.15 483.62 T
2 F
( must be an instance of) 203.63 483.62 T
4 9.5 Q
(<byte-string>) 317.55 483.62 T
2 11 Q
(.) 391.65 483.62 T
(The) 135.65 463.62 T
0 F
(byte-string-str) 156.81 463.62 T
(eam-class) 221.59 463.62 T
2 F
( ar) 263.95 463.62 T
(gument is the class) 276.35 463.62 T
4 9.5 Q
(<byte-string-stream>) 371.1 463.62 T
2 11 Q
(.) 485.1 463.62 T
(The) 135.65 449.62 T
0 F
(dir) 156.81 449.62 T
(ection) 169.45 449.62 T
2 F
(,) 195.93 449.62 T
0 F
(start) 201.43 449.62 T
2 F
(, and) 222.2 449.62 T
0 F
(end) 249.07 449.62 T
2 F
( init-keywor) 264.96 449.62 T
(ds ar) 324.6 449.62 T
(e as for) 348.38 449.62 T
4 9.5 Q
(make) 386.07 449.62 T
2 11 Q
( on) 408.87 449.62 T
4 9.5 Q
(<sequence-) 426.78 449.62 T
(stream>) 135.65 435.62 T
2 11 Q
(.) 175.55 435.62 T
3 12 Q
(make) 108.65 400.95 T
5 F
(unicode-string-str) 136.55 400.95 T
(eam-class) 233 400.95 T
0 11 Q
(G.f. method) 444.01 401.62 T
4 9 Q
(make) 135.65 380.95 T
5 F
(unicode-string-str) 162.65 380.95 T
(eam-class) 234.99 380.95 T
4 F
( #key) 274.98 380.95 T
5 F
(contents) 307.38 380.95 T
(dir) 346.78 380.95 T
(ection) 358.12 380.95 T
(start) 388.02 380.95 T
(end) 412.92 380.95 T
4 F
(=>) 135.65 369.95 T
5 F
(unicode-string-str) 151.85 369.95 T
(eam-instance) 224.19 369.95 T
2 11 Q
(Cr) 135.65 349.62 T
(eates and opens a str) 147.59 349.62 T
(eam over a Unicode string.) 248.35 349.62 T
(This method r) 135.65 329.62 T
(eturns a new instance of) 204 329.62 T
4 9.5 Q
(<unicode-string-stream>) 324.57 329.62 T
2 11 Q
(. If sup-) 455.67 329.62 T
(plied,) 135.65 315.62 T
0 F
(contents) 166.15 315.62 T
2 F
( must be an instance of) 203.63 315.62 T
4 9.5 Q
(<unicode-string>) 317.55 315.62 T
2 11 Q
(.) 408.76 315.62 T
(The) 135.65 295.62 T
0 F
(unicode-string-str) 156.81 295.62 T
(eam-class) 237.49 295.62 T
2 F
( ar) 279.85 295.62 T
(gument is the class) 292.24 295.62 T
4 9.5 Q
(<unicode-string-) 387 295.62 T
(stream>) 135.65 281.62 T
2 11 Q
(. The) 175.55 281.62 T
0 F
(dir) 202.21 281.62 T
(ection) 214.85 281.62 T
2 F
(,) 241.33 281.62 T
0 F
(start) 246.83 281.62 T
2 F
(, and) 267.6 281.62 T
0 F
(end) 294.47 281.62 T
2 F
( init-keywor) 310.36 281.62 T
(ds ar) 369.99 281.62 T
(e as for) 393.78 281.62 T
4 9.5 Q
(make) 431.47 281.62 T
2 11 Q
( on) 454.27 281.62 T
4 9.5 Q
(<sequence-stream>) 135.65 267.62 T
2 11 Q
(.) 232.55 267.62 T
3 13 Q
(1.4.2  Closing streams) 108.65 234.29 T
2 11 Q
(When cr) 108.65 214.62 T
(eating new str) 149.5 214.62 T
(eam classes it may be necessary to add a method to the) 218.32 214.62 T
4 9.5 Q
(close) 108.65 200.62 T
2 11 Q
( function, even though it is not part of the Str) 137.15 200.62 T
(eam Extension Pr) 355.6 200.62 T
(otocol.) 440.3 200.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.5) 333.32 702.62 T
(Reading and writing from streams) 354.69 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(15) 477.65 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
3 12 Q
0 X
(c) 99.65 664.95 T
(lose) 104.94 664.95 T
0 11 Q
(Open generic function) 387.22 665.62 T
4 9 Q
(close) 126.65 644.95 T
5 F
(str) 159.05 644.95 T
(eam) 169.88 644.95 T
4 F
( #key #all-keys => \050\051) 186.38 644.95 T
2 11 Q
(Closes) 126.65 624.62 T
0 F
(str) 161 624.62 T
(eam) 173.02 624.62 T
2 F
(, an instance of) 190.74 624.62 T
4 9.5 Q
(<stream>) 265.97 624.62 T
2 11 Q
(.) 311.57 624.62 T
3 16 Q
(1.5  Reading and writing fr) 99.65 589.29 T
(om streams) 263.46 589.29 T
2 11 Q
-0.36 (It is an err) 99.65 568.62 P
-0.36 (or to call any of these functions on a buf) 147.65 568.62 P
-0.36 (fer) 338.32 568.62 P
-0.36 (ed str) 351.4 568.62 P
-0.36 (eam while its buf) 378.18 568.62 P
-0.36 (fer is) 460.72 568.62 P
(held.) 99.65 554.62 T
3 13 Q
(1.5.1  Reading fr) 99.65 521.29 T
(om streams) 181.81 521.29 T
2 11 Q
(The following ar) 99.65 501.62 T
(e the basic functions for r) 180.18 501.62 T
(eading fr) 302.39 501.62 T
(om str) 346.16 501.62 T
(eams. T) 377.02 501.62 T
(o implement a) 413.4 501.62 T
(new input str) 99.65 487.62 T
(eam that is not a) 164.82 487.62 T
4 9.5 Q
(<buffered-stream>) 247.49 487.62 T
2 11 Q
(, you must pr) 344.39 487.62 T
(ovide methods) 409.5 487.62 T
(for) 99.65 473.62 T
4 9.5 Q
(read-element) 116.41 473.62 T
2 11 Q
(,) 184.81 473.62 T
4 9.5 Q
(stream-input-available?) 190.31 473.62 T
2 11 Q
(,) 321.41 473.62 T
4 9.5 Q
(peek) 326.91 473.62 T
2 11 Q
(,) 349.71 473.62 T
4 9.5 Q
(read) 355.21 473.62 T
2 11 Q
(,) 378.01 473.62 T
4 9.5 Q
(read-into!) 383.51 473.62 T
2 11 Q
(, and) 440.51 473.62 T
4 9.5 Q
(discard-input) 99.65 459.62 T
2 11 Q
(. If you implement a new str) 173.75 459.62 T
(eam that is a) 310.83 459.62 T
4 9.5 Q
(<positionable-) 374.75 459.62 T
(stream>) 99.65 445.62 T
2 11 Q
(, you might need to supply a new method for) 139.55 445.62 T
4 9.5 Q
(unread-element) 362.72 445.62 T
2 11 Q
(.) 442.52 445.62 T
3 12 Q
(read-element) 99.65 410.95 T
0 11 Q
(Open generic function) 387.22 411.62 T
4 9 Q
(read-element) 126.65 390.95 T
5 F
(input-str) 196.85 390.95 T
(eam) 232.7 390.95 T
4 F
( #key) 249.19 390.95 T
5 F
(on-end-of-str) 281.59 390.95 T
(eam) 334.94 390.95 T
4 F
( =>) 351.44 390.95 T
5 F
(element-or-eof) 373.04 390.95 T
2 11 Q
(Returns the next element in the str) 126.65 372.62 T
(eam. If the str) 293.55 372.62 T
(eam is not at its end, the) 360.06 372.62 T
(str) 126.65 358.62 T
(eam is advanced so that the next call to) 139.04 358.62 T
4 9.5 Q
(read-element) 331.67 358.62 T
2 11 Q
( r) 400.07 358.62 T
(eturns the next) 406.96 358.62 T
(element along in) 126.65 344.62 T
0 F
(input-str) 210.43 344.62 T
(eam) 250.57 344.62 T
2 F
(.) 268.3 344.62 T
-0.06 (The) 126.65 324.62 P
0 F
-0.06 (on-end-of-str) 147.76 324.62 P
-0.06 (eam) 205.6 324.62 P
2 F
-0.06 ( keywor) 223.33 324.62 P
-0.06 (d allows you to specify a value to be r) 262.85 324.62 P
-0.06 (eturned) 445.73 324.62 P
(if the str) 126.65 310.62 T
(eam is at its end. If the str) 166.67 310.62 T
(eam is at its end and no value was sup-) 290.97 310.62 T
(plied for) 126.65 296.62 T
0 F
(on-end-of-str) 171.16 296.62 T
(eam) 229.01 296.62 T
2 F
(,) 246.74 296.62 T
4 9.5 Q
(read-element) 252.24 296.62 T
2 11 Q
( signals an) 320.64 296.62 T
4 9.5 Q
(<end-of-stream-) 374.54 296.62 T
(error>) 126.65 282.62 T
2 11 Q
( condition.) 160.85 282.62 T
(If no input is available and the str) 126.65 262.62 T
(eam is not at its end,) 289.92 262.62 T
4 9.5 Q
(read-element) 392.44 262.62 T
2 11 Q
(blocks until input becomes available.) 126.65 248.62 T
(See also) 126.65 228.62 T
4 9.5 Q
(unread-element) 167.83 228.62 T
2 11 Q
(,  page 27.) 247.63 228.62 T
3 12 Q
(peek) 99.65 193.95 T
0 11 Q
(Open generic function) 387.22 194.62 T
4 9 Q
(peek) 126.65 173.95 T
5 F
(input-str) 153.65 173.95 T
(eam) 189.49 173.95 T
4 F
( #key) 205.99 173.95 T
5 F
(on-end-of-str) 238.39 173.95 T
(eam) 291.74 173.95 T
4 F
( =>) 308.24 173.95 T
5 F
(element-or-eof) 329.84 173.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(16) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
(Behaves as) 135.65 665.62 T
4 9.5 Q
(read-element) 191.35 665.62 T
2 11 Q
( does, but the str) 259.75 665.62 T
(eam position is not advanced.) 340.12 665.62 T
3 12 Q
(read) 108.65 630.95 T
0 11 Q
(Open generic function) 396.22 631.62 T
4 9 Q
(read) 135.65 610.95 T
5 F
(input-str) 162.65 610.95 T
(eam) 198.49 610.95 T
(n) 220.39 610.95 T
4 F
( #key) 225.4 610.95 T
5 F
(on-end-of-str) 257.8 610.95 T
(eam) 311.15 610.95 T
4 F
( =>) 327.64 610.95 T
5 F
(sequence-or-eof) 349.24 610.95 T
2 11 Q
(Returns a sequence of the next) 135.65 590.62 T
0 F
(n) 286.3 590.62 T
2 F
( elements fr) 292.42 590.62 T
(om) 349.1 590.62 T
0 F
(input-str) 367.57 590.62 T
(eam) 407.71 590.62 T
2 F
(.) 425.43 590.62 T
(The type of the sequence r) 135.65 570.62 T
(eturned depends on the type of the str) 263.02 570.62 T
(eam\325s) 448.72 570.62 T
-0.44 (underlying aggr) 135.65 556.62 P
-0.44 (egate. For instances of) 214.24 556.62 P
4 9.5 Q
-0.91 (<sequence-stream>) 322.68 556.62 P
2 11 Q
-0.44 (, the type of the) 419.58 556.62 P
(r) 135.65 542.62 T
(esult is given by) 139.79 542.62 T
4 9.5 Q
(type-for-copy) 221.41 542.62 T
2 11 Q
( of the underlying aggr) 295.52 542.62 T
(egate. For) 407.73 542.62 T
-0.48 (instances of) 135.65 528.62 P
4 9.5 Q
-0.99 (<file-stream>) 194.43 528.62 P
2 11 Q
-0.48 (, the r) 268.53 528.62 P
-0.48 (esult is a vector that can contain elements) 295.23 528.62 P
(of the type r) 135.65 514.62 T
(eturned by calling) 194.55 514.62 T
4 9.5 Q
(stream-element-type) 285.73 514.62 T
2 11 Q
( on the str) 394.03 514.62 T
(eam.) 442.34 514.62 T
(The str) 135.65 494.62 T
(eam position is advanced so that subsequent r) 169.21 494.62 T
(eads start after the) 392.95 494.62 T
0 F
(n) 485.4 494.62 T
2 F
(elements.) 135.65 480.62 T
-0.42 (If the end of the str) 135.65 460.62 P
-0.42 (eam is r) 225.63 460.62 P
-0.42 (eached befor) 262.77 460.62 P
-0.42 (e all) 324.32 460.62 P
0 F
-0.42 (n) 346.14 460.62 P
2 F
-0.42 ( elements have been r) 352.26 460.62 P
-0.42 (ead, the) 455.5 460.62 P
(behavior is as follows.) 135.65 446.62 T
(If the) 135.65 426.62 T
0 F
(on-end-of-str) 163.77 426.62 T
(eam) 221.62 426.62 T
2 F
( ar) 239.35 426.62 T
(gument is supplied, it is r) 251.74 426.62 T
(eturned as the value of) 375.54 426.62 T
4 9.5 Q
(read) 135.65 412.62 T
2 11 Q
(.) 158.45 412.62 T
(If the) 135.65 392.62 T
0 F
(on-end-of-str) 163.77 392.62 T
(eam) 221.62 392.62 T
2 F
( ar) 239.35 392.62 T
(gument was not supplied, and at least one ele-) 251.74 392.62 T
-0.07 (ment was r) 135.65 378.62 P
-0.07 (ead fr) 189.46 378.62 P
-0.07 (om the str) 217.44 378.62 P
-0.07 (eam, then an) 266.17 378.62 P
4 9.5 Q
-0.15 (<incomplete-read-error>) 330.99 378.62 P
2 11 Q
-0.07 ( condi-) 462.09 378.62 P
-0.46 (tion is signalled. When signalling this condition,) 135.65 364.62 P
4 9.5 Q
-0.96 (read) 369.84 364.62 P
2 11 Q
-0.46 ( supplies two values:) 392.64 364.62 P
(a sequence of the elements that wer) 135.65 350.62 T
(e r) 308.16 350.62 T
(ead successfully) 320.33 350.62 T
(, and) 397.82 350.62 T
0 F
(n) 424.7 350.62 T
2 F
(.) 430.81 350.62 T
(If the) 135.65 330.62 T
0 F
(on-end-of-str) 163.77 330.62 T
(eam) 221.62 330.62 T
2 F
( ar) 239.35 330.62 T
(gument was not supplied, and no elements wer) 251.74 330.62 T
(e) 482.7 330.62 T
(r) 135.65 316.62 T
(ead fr) 139.79 316.62 T
(om the str) 167.85 316.62 T
(eam, an) 216.72 316.62 T
4 9.5 Q
(<end-of-stream-error>) 257.35 316.62 T
2 11 Q
( condition is signalled.) 377.05 316.62 T
(If the str) 135.65 296.62 T
(eam is not at its end,) 176.17 296.62 T
4 9.5 Q
(read) 278.69 296.62 T
2 11 Q
( blocks until input becomes available.) 301.49 296.62 T
1 F
(Implementation Note:) 135.65 276.62 T
2 F
( Buf) 246.86 276.62 T
(fer) 266.43 276.62 T
(ed str) 279.51 276.62 T
(eams ar) 306.64 276.62 T
(e intended to pr) 344.19 276.62 T
(ovide a very) 421.63 276.62 T
(ef) 135.65 262.62 T
(\336cient implementation of) 144.38 262.62 T
4 9.5 Q
(read) 269.96 262.62 T
2 11 Q
(, particularly when the r) 292.76 262.62 T
(esult is an) 410.28 262.62 T
(instance of) 135.65 248.62 T
4 9.5 Q
(<byte-string>) 190.73 248.62 T
2 11 Q
(,) 264.83 248.62 T
4 9.5 Q
(<unicode-string>) 270.33 248.62 T
2 11 Q
(, or) 361.52 248.62 T
4 9.5 Q
(<byte-vector>) 380.13 248.62 T
2 11 Q
(.) 454.23 248.62 T
3 12 Q
(read-into!) 108.65 213.95 T
0 11 Q
(Open generic function) 396.22 214.62 T
4 9 Q
-0.73 (read-into!) 135.65 193.95 P
5 F
-0.3 (input-str) 194.32 193.95 P
-0.3 (eam) 230.17 193.95 P
-0.3 (n) 251.34 193.95 P
-0.3 (sequence) 261.02 193.95 P
4 F
-0.73 ( #key) 295.84 193.95 P
5 F
-0.3 (start) 326.79 193.95 P
-0.3 (on-end-of-str) 350.96 193.95 P
-0.3 (eam) 404.32 193.95 P
4 F
-0.73 ( =>) 420.81 193.95 P
5 F
-0.3 (count-or-eof) 440.96 193.95 P
2 11 Q
-0.15 (Reads the next) 135.65 173.62 P
0 F
-0.15 (n) 209.13 173.62 P
2 F
-0.15 ( elements fr) 215.25 173.62 P
-0.15 (om) 271.62 173.62 P
0 F
-0.15 (input-str) 289.94 173.62 P
-0.15 (eam) 330.08 173.62 P
2 F
-0.15 (, and inserts them into a muta-) 347.8 173.62 P
-0.17 (ble sequence starting at the position) 135.65 159.62 P
0 F
-0.17 (start) 311.65 159.62 P
2 F
-0.17 (. Returns the number of elements) 332.42 159.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.5) 333.32 702.62 T
(Reading and writing from streams) 354.69 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(17) 477.65 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
2 11 Q
0 X
(actually inserted into) 126.65 665.62 T
0 F
(sequence) 232.17 665.62 T
2 F
( unless the end of the str) 271.09 665.62 T
(eam is r) 389.39 665.62 T
(eached, in) 427.39 665.62 T
(which case the) 126.65 651.62 T
0 F
(on-end-of-str) 200.54 651.62 T
(eam) 258.38 651.62 T
2 F
( behavior is as for) 276.11 651.62 T
4 9.5 Q
(read) 364.92 651.62 T
2 11 Q
(.) 387.72 651.62 T
(If the sum of) 126.65 631.62 T
0 F
(start) 190.95 631.62 T
2 F
( and) 211.72 631.62 T
0 F
(n) 235.85 631.62 T
2 F
( is gr) 241.96 631.62 T
(eater than the size of) 265.59 631.62 T
0 F
(sequence) 368.76 631.62 T
2 F
(,) 407.68 631.62 T
4 9.5 Q
(read-into!) 413.18 631.62 T
2 11 Q
(r) 126.65 617.62 T
(eads only enough elements to \336ll sequence up to the end. If) 130.79 617.62 T
0 F
(sequence) 421.68 617.62 T
2 F
( is a) 460.6 617.62 T
(str) 126.65 603.62 T
(etchy vector) 139.04 603.62 T
(, no attempt is made to gr) 197.54 603.62 T
(ow it.) 321.98 603.62 T
-0.26 (If the str) 126.65 583.62 P
-0.26 (eam is not at its end,) 166.65 583.62 P
4 9.5 Q
-0.54 (read-into!) 267.62 583.62 P
2 11 Q
-0.26 ( blocks until input becomes avail-) 324.62 583.62 P
(able.) 126.65 569.62 T
1 F
(Implementation Note:) 126.65 549.62 T
2 F
( Buf) 237.86 549.62 T
(fer) 257.43 549.62 T
(ed str) 270.51 549.62 T
(eams ar) 297.64 549.62 T
(e intended to pr) 335.19 549.62 T
(ovide a very) 412.63 549.62 T
(ef) 126.65 535.62 T
(\336cient implementation of) 135.38 535.62 T
4 9.5 Q
(read) 260.96 535.62 T
2 11 Q
(, particularly when the r) 283.76 535.62 T
(esult is an) 401.28 535.62 T
(instance of) 126.65 521.62 T
4 9.5 Q
(<byte-string>) 181.73 521.62 T
2 11 Q
(,) 255.82 521.62 T
4 9.5 Q
(<unicode-string>) 261.33 521.62 T
2 11 Q
(, or) 352.52 521.62 T
4 9.5 Q
(<byte-vector>) 371.13 521.62 T
2 11 Q
(.) 445.23 521.62 T
3 12 Q
(discar) 99.65 486.95 T
(d-input) 128.46 486.95 T
0 11 Q
(Open generic function) 387.22 487.62 T
4 9 Q
(discard-input) 126.65 466.95 T
5 F
(input-str) 202.25 466.95 T
(eam) 238.1 466.95 T
4 F
( => \050\051) 254.59 466.95 T
2 11 Q
(Discar) 126.65 446.62 T
(ds any pending input fr) 157.56 446.62 T
(om) 272.93 446.62 T
0 F
(input-str) 291.39 446.62 T
(eam) 331.53 446.62 T
2 F
(, both buf) 349.26 446.62 T
(fer) 395.76 446.62 T
(ed input and, if) 408.84 446.62 T
(possible, any input that might be at the str) 126.65 432.62 T
(eam\325s sour) 331.73 432.62 T
(ce.) 384.14 432.62 T
(This operation is principally useful for \322interactive\323 str) 126.65 412.62 T
(eams, such as TTY) 393.9 412.62 T
-0.48 (str) 126.65 398.62 P
-0.48 (eams, to discar) 139.04 398.62 P
-0.48 (d unwanted input after an err) 210.2 398.62 P
-0.48 (or condition arises. Ther) 352.43 398.62 P
-0.48 (e is) 468.97 398.62 P
-0.4 (a default method on) 126.65 384.62 P
4 9.5 Q
-0.84 (<stream>) 226.21 384.62 P
2 11 Q
-0.4 ( so that applications can call this function on) 271.81 384.62 P
(any kind of str) 126.65 370.62 T
(eam. The default method does nothing.) 197.42 370.62 T
3 12 Q
(stream-input-a) 99.65 335.95 T
(v) 167.86 335.95 T
(ailab) 173.15 335.95 T
(le?) 195.49 335.95 T
0 11 Q
(Open generic function) 387.22 336.62 T
4 9 Q
(stream-input-available?) 126.65 315.95 T
5 F
(input-str) 256.25 315.95 T
(eam) 292.1 315.95 T
4 F
( =>) 308.59 315.95 T
5 F
(available?) 330.19 315.95 T
2 11 Q
(Returns) 126.65 295.62 T
4 9.5 Q
(#t) 167.65 295.62 T
2 11 Q
( if) 179.04 295.62 T
0 F
(input-str) 191.41 295.62 T
(eam) 231.55 295.62 T
2 F
( would not block on) 249.27 295.62 T
4 9.5 Q
(read-element) 349.45 295.62 T
2 11 Q
(, otherwise it) 417.85 295.62 T
(r) 126.65 281.62 T
(eturns) 130.79 281.62 T
4 9.5 Q
(#f) 164.44 281.62 T
2 11 Q
(.) 175.84 281.62 T
(This function dif) 126.65 261.62 T
(fers fr) 207.32 261.62 T
(om) 235.82 261.62 T
4 9.5 Q
(stream-at-end?) 254.29 261.62 T
2 11 Q
(. When) 334.09 261.62 T
4 9.5 Q
(stream-input-) 371.42 261.62 T
-0.73 (available?) 126.65 247.62 P
2 11 Q
-0.35 ( r) 183.65 247.62 P
-0.35 (eturns) 190.19 247.62 P
4 9.5 Q
-0.73 (#t) 223.49 247.62 P
2 11 Q
-0.35 (,) 234.89 247.62 P
4 9.5 Q
-0.73 (read-element) 240.04 247.62 P
2 11 Q
-0.35 ( will not block, but it may detect that) 308.44 247.62 P
(it is at the end of the str) 126.65 233.62 T
(eam\325s sour) 240.61 233.62 T
(ce, and consequently inspect the) 293.01 233.62 T
4 9.5 Q
(on-) 452.75 233.62 T
(end-of-stream) 126.65 219.62 T
2 11 Q
( ar) 200.75 219.62 T
(gument to determine how to handle the end of str) 213.15 219.62 T
(eam.) 455.36 219.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 18
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(18) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
3 13 Q
0 X
(1.5.2  Con) 108.65 664.29 T
(venience functions f) 158.59 664.29 T
(or reading fr) 261.48 664.29 T
(om streams) 324.07 664.29 T
2 11 Q
(The following is a small set of convenient r) 108.65 644.62 T
(eading functions that sear) 316.65 644.62 T
(ch for par-) 442.2 644.62 T
-0.18 (ticular elements in a str) 108.65 630.62 P
-0.18 (eam. These functions behave as though they wer) 221.14 630.62 P
-0.18 (e imple-) 456.15 630.62 P
(mented in terms of the mor) 108.65 616.62 T
(e primitive functions described in Section 1.5.1.) 241.33 616.62 T
3 12 Q
(read-to) 108.65 581.95 T
0 11 Q
(Function) 455.1 582.62 T
4 9 Q
(read-to) 135.65 561.95 T
5 F
(input-str) 178.85 561.95 T
(eam) 214.7 561.95 T
(element) 236.59 561.95 T
4 F
( #key) 267.58 561.95 T
5 F
(on-end-of-str) 299.98 561.95 T
(eam) 353.33 561.95 T
(test) 375.23 561.95 T
4 F
( =>) 390.22 561.95 T
5 F
(sequence-or-eof) 411.82 561.95 T
(found?) 135.65 550.95 T
2 11 Q
(Returns a new sequence containing the elements of) 135.65 530.62 T
0 F
(input-str) 386.79 530.62 T
(eam) 426.93 530.62 T
2 F
( fr) 444.65 530.62 T
(om the) 455.21 530.62 T
-0.05 (str) 135.65 516.62 P
-0.05 (eam\325s curr) 148.04 516.62 P
-0.05 (ent position to the \336rst occurr) 198.96 516.62 P
-0.05 (ence of) 342.39 516.62 P
0 F
-0.05 (element) 379.29 516.62 P
2 F
-0.05 (. The r) 413.52 516.62 P
-0.05 (esult does) 444.23 516.62 P
(not contain) 135.65 502.62 T
0 F
(element) 193.12 502.62 T
2 F
(.) 227.35 502.62 T
(The second r) 135.65 482.62 T
(eturn value is) 197.65 482.62 T
4 9.5 Q
(#t) 266.82 482.62 T
2 11 Q
( if the r) 278.22 482.62 T
(ead terminated with) 312.74 482.62 T
0 F
(element) 414.44 482.62 T
2 F
(, or) 448.67 482.62 T
4 9.5 Q
(#f) 467.27 482.62 T
2 11 Q
( if) 478.67 482.62 T
(the r) 135.65 468.62 T
(ead terminated by r) 157.8 468.62 T
(eaching the end of the str) 253.48 468.62 T
(eam\325s sour) 375.98 468.62 T
(ce. The) 428.38 468.62 T
(\322boundary\323 element is consumed, that is, the str) 135.65 454.62 T
(eam is left positioned) 370.66 454.62 T
(after) 135.65 440.62 T
0 F
(element) 160.76 440.62 T
2 F
(.) 194.99 440.62 T
-0.3 (The) 135.65 420.62 P
4 9.5 Q
-0.63 (read-to) 156.51 420.62 P
2 11 Q
-0.3 ( function determines whether the element occurr) 196.41 420.62 P
-0.3 (ed by calling) 431.61 420.62 P
(the test function) 135.65 406.62 T
0 F
(test) 217.04 406.62 T
2 F
(, which defaults to) 232.92 406.62 T
4 9.5 Q
(\134==) 325.56 406.62 T
2 11 Q
(. The test function must accept) 342.66 406.62 T
(two ar) 135.65 392.62 T
(guments. The or) 166.81 392.62 T
(der of the ar) 246.01 392.62 T
(guments is the element r) 305.17 392.62 T
(etrieved fr) 424.53 392.62 T
(om) 474.96 392.62 T
(the str) 135.65 378.62 T
(eam \336rst and) 166.05 378.62 T
0 F
(element) 232.66 378.62 T
2 F
( second.) 266.89 378.62 T
(The type of the sequence r) 135.65 358.62 T
(eturned is the same that r) 263.02 358.62 T
(eturned by) 386.48 358.62 T
4 9.5 Q
(read) 442.4 358.62 T
2 11 Q
(. The) 465.2 358.62 T
(end-of-str) 135.65 344.62 T
(eam behavior is the same as that of) 183.43 344.62 T
4 9.5 Q
(read-line) 356.11 344.62 T
2 11 Q
(.) 407.41 344.62 T
3 12 Q
(read-thr) 108.65 309.95 T
(ough) 145.64 309.95 T
0 11 Q
(Function) 455.1 310.62 T
4 9 Q
(read-through) 135.65 289.95 T
5 F
(input-str) 205.85 289.95 T
(eam) 241.7 289.95 T
(element) 263.59 289.95 T
4 F
( #key) 294.58 289.95 T
5 F
(on-end-of-str) 326.98 289.95 T
(eam) 380.33 289.95 T
(test) 402.23 289.95 T
4 F
(=>) 135.65 278.95 T
5 F
(sequence-or-eof) 151.85 278.95 T
(found?) 219.57 278.95 T
2 11 Q
-0.12 (This function is the same as) 135.65 258.62 P
4 9.5 Q
-0.26 (read-to) 271.63 258.62 P
2 11 Q
-0.12 (, except that) 311.53 258.62 P
0 F
-0.12 (element) 372.52 258.62 P
2 F
-0.12 ( is included in the) 406.76 258.62 P
(r) 135.65 244.62 T
(esulting sequence.) 139.79 244.62 T
(If the) 135.65 224.62 T
0 F
(element) 163.77 224.62 T
2 F
( is not found, the r) 198.01 224.62 T
(esult does not contain it. The str) 287.2 224.62 T
(eam is left) 442.03 224.62 T
(positioned after) 135.65 210.62 T
0 F
(element) 215.18 210.62 T
2 F
(.) 249.41 210.62 T
3 12 Q
(read-to-end) 108.65 175.95 T
0 11 Q
(Function) 455.1 176.62 T
4 9 Q
(read-to-end) 135.65 155.95 T
5 F
(input-str) 200.45 155.95 T
(eam) 236.29 155.95 T
4 F
( =>) 252.79 155.95 T
5 F
(sequence) 274.39 155.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 18
%%Page: "19" 19
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.5) 333.32 702.62 T
(Reading and writing from streams) 354.69 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(19) 477.65 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
2 11 Q
0 X
(Returns a sequence of all the elements up to, and including, the last ele-) 126.65 665.62 T
(ment of) 126.65 651.62 T
0 F
(input-str) 166.79 651.62 T
(eam) 206.93 651.62 T
2 F
(, starting fr) 224.65 651.62 T
(om the str) 278.11 651.62 T
(eam\325s curr) 326.98 651.62 T
(ent position.) 377.94 651.62 T
-0.29 (The type of the r) 126.65 631.62 P
-0.29 (esult sequence is as described for) 205.54 631.62 P
4 9.5 Q
-0.61 (read) 367.38 631.62 P
2 11 Q
-0.29 (. Ther) 390.18 631.62 P
-0.29 (e is no special) 417.95 631.62 P
-0.19 (end-of-str) 126.65 617.62 P
-0.19 (eam behavior; if the str) 174.43 617.62 P
-0.19 (eam is alr) 285.42 617.62 P
-0.19 (eady at its end, an empty collec-) 331.73 617.62 P
(tion is r) 126.65 603.62 T
(eturned.) 163.35 603.62 T
3 12 Q
(skip-thr) 99.65 568.95 T
(ough) 135.55 568.95 T
0 11 Q
(Function) 446.1 569.62 T
4 9 Q
(skip-through) 126.65 548.95 T
5 F
(input-str) 196.85 548.95 T
(eam) 232.7 548.95 T
(element) 254.59 548.95 T
4 F
( #key) 285.58 548.95 T
5 F
(test) 317.98 548.95 T
4 F
(=>) 335.22 548.95 T
5 F
(found?) 351.42 548.95 T
2 11 Q
-0.45 (Positions) 126.65 528.62 P
0 F
-0.45 (input-str) 173.32 528.62 P
-0.45 (eam) 213.46 528.62 P
2 F
-0.45 ( after the \336rst occurr) 231.18 528.62 P
-0.45 (ence of) 328.17 528.62 P
0 F
-0.45 (element) 364.27 528.62 P
2 F
-0.45 (,) 398.5 528.62 P
-0.45 (starting fr) 403.55 528.62 P
-0.45 (om the) 451.07 528.62 P
-0.19 (str) 126.65 514.62 P
-0.19 (eam\325s curr) 139.04 514.62 P
-0.19 (ent position. Returns) 189.82 514.62 P
4 9.5 Q
-0.39 (#t) 293.43 514.62 P
2 11 Q
-0.19 ( if the element was found, or) 304.83 514.62 P
4 9.5 Q
-0.39 (#f) 445.45 514.62 P
2 11 Q
-0.19 ( if the) 456.85 514.62 P
-0.25 (end of the str) 126.65 500.62 P
-0.25 (eam was encounter) 189.85 500.62 P
-0.25 (ed. When) 283.27 500.62 P
4 9.5 Q
-0.52 (skip-through) 332.07 500.62 P
2 11 Q
-0.25 ( does not \336nd the) 400.47 500.62 P
0 F
(element) 126.65 486.62 T
2 F
(, it leaves) 160.88 486.62 T
0 F
(input-str) 208.79 486.62 T
(eam) 248.92 486.62 T
2 F
( positioned at the end.) 266.64 486.62 T
(The) 126.65 466.62 T
4 9.5 Q
(skip-through) 147.81 466.62 T
2 11 Q
( function determines whether the element occurr) 216.21 466.62 T
(ed by) 453.24 466.62 T
(calling the test function) 126.65 452.62 T
0 F
(test) 243.29 452.62 T
2 F
(, which defaults to) 259.18 452.62 T
4 9.5 Q
(\134==) 351.82 452.62 T
2 11 Q
(. The test function must) 368.92 452.62 T
-0.42 (accept two ar) 126.65 438.62 P
-0.42 (guments. The or) 190.46 438.62 P
-0.42 (der of the ar) 268.83 438.62 P
-0.42 (guments is the element r) 326.74 438.62 P
-0.42 (etrieved) 444.44 438.62 P
(fr) 126.65 424.62 T
(om the str) 134.46 424.62 T
(eam \336rst and element second.) 183.33 424.62 T
3 13 Q
(1.5.3  Writing to streams) 99.65 391.29 T
2 11 Q
(The following ar) 99.65 371.62 T
(e the basic functions for writing to str) 180.18 371.62 T
(eams.) 361.76 371.62 T
(T) 99.65 351.62 T
(o implement a new output str) 105.38 351.62 T
(eam that is not a) 249.9 351.62 T
4 9.5 Q
(<buffered-stream>) 332.56 351.62 T
2 11 Q
(, you must) 429.46 351.62 T
(pr) 99.65 337.62 T
(ovide methods for) 110.41 337.62 T
4 9.5 Q
(write-element) 202.44 337.62 T
2 11 Q
(,) 276.54 337.62 T
4 9.5 Q
(write) 282.04 337.62 T
2 11 Q
(,) 310.54 337.62 T
4 9.5 Q
(force-output) 316.04 337.62 T
2 11 Q
(, and) 384.44 337.62 T
4 9.5 Q
(discard-out-) 411.32 337.62 T
(put) 99.65 323.62 T
2 11 Q
(.) 116.75 323.62 T
3 12 Q
(write-element) 99.65 288.95 T
0 11 Q
(Open generic function) 387.22 289.62 T
4 9 Q
(write-element) 126.65 268.95 T
5 F
(output-str) 202.25 268.95 T
(eam) 243.6 268.95 T
(element) 265.5 268.95 T
4 F
( => \050\051) 296.49 268.95 T
2 11 Q
(W) 126.65 248.62 T
(rites) 136.83 248.62 T
0 F
(element) 160.65 248.62 T
2 F
( to) 194.88 248.62 T
0 F
(output-str) 209.97 248.62 T
(eam) 255.6 248.62 T
2 F
( at the str) 273.32 248.62 T
(eam\325s curr) 318.31 248.62 T
(ent position. It is an) 369.27 248.62 T
(err) 126.65 234.62 T
(or if the type of) 140.41 234.62 T
0 F
(element) 217.88 234.62 T
2 F
( is inappr) 252.11 234.62 T
(opriate for the strr) 297.95 234.62 T
(eam\325s underlying) 386.73 234.62 T
(aggr) 126.65 220.62 T
(egate.) 148.53 220.62 T
(If the str) 126.65 200.62 T
(eam is positionable, and it is not positioned at its end,) 167.17 200.62 T
4 9.5 Q
(write-element) 126.65 186.62 T
2 11 Q
( overwrites the element at the curr) 200.75 186.62 T
(ent position and then) 367.64 186.62 T
(advance the str) 126.65 172.62 T
(eam position.) 200.29 172.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 19
%%Page: "20" 20
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(20) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
3 12 Q
0 X
(write) 108.65 664.95 T
0 11 Q
(Open generic function) 396.22 665.62 T
4 9 Q
(write) 135.65 644.95 T
5 F
(output-str) 168.05 644.95 T
(eam) 209.4 644.95 T
(sequence) 231.3 644.95 T
4 F
( #key) 266.12 644.95 T
5 F
(start) 298.52 644.95 T
(end) 323.42 644.95 T
4 F
( => \050\051) 337.43 644.95 T
2 11 Q
(W) 135.65 624.62 T
(rites the elements of) 145.83 624.62 T
0 F
(sequence) 246.2 624.62 T
2 F
( to) 285.12 624.62 T
0 F
(output-str) 300.21 624.62 T
(eam) 345.84 624.62 T
2 F
(, starting at the str) 363.56 624.62 T
(eam\325s) 451.45 624.62 T
(curr) 135.65 610.62 T
(ent position.) 155.66 610.62 T
(The elements in) 135.65 590.62 T
0 F
(sequence) 215.29 590.62 T
2 F
( ar) 254.21 590.62 T
(e accessed in the or) 266.6 590.62 T
(der de\336ned by the forwar) 359.74 590.62 T
(d) 484.4 590.62 T
(iteration pr) 135.65 576.62 T
(otocol on) 190.25 576.62 T
4 9.5 Q
(<sequence>) 237.85 576.62 T
2 11 Q
(. This is ef) 294.85 576.62 T
(fectively the same as the fol-) 343.46 576.62 T
(lowing:) 135.65 562.62 T
4 9 Q
(do \050method \050elt\051 write-element\050stream, elt\051 end, sequence\051;) 146.45 541.95 T
(sequence;) 146.45 530.95 T
2 11 Q
(If supplied,) 135.65 510.62 T
0 F
(start) 194.18 510.62 T
2 F
( and) 214.95 510.62 T
0 F
(end) 239.07 510.62 T
2 F
( delimit the portion of) 254.96 510.62 T
0 F
(sequence) 364.69 510.62 T
2 F
( to write to the) 403.61 510.62 T
(str) 135.65 496.62 T
(eam. The value of) 148.04 496.62 T
0 F
(start) 237.18 496.62 T
2 F
( is inclusive and that of) 257.95 496.62 T
0 F
(end) 373.35 496.62 T
2 F
( is exclusive. They) 389.24 496.62 T
(default to 0 and) 135.65 482.62 T
4 9.5 Q
(sequence.size) 214.94 482.62 T
2 11 Q
(, r) 289.04 482.62 T
(espectively) 298.68 482.62 T
(.) 351.75 482.62 T
-0.07 (If the str) 135.65 462.62 P
-0.07 (eam is positionable, and it is not positioned at its end,) 176.03 462.62 P
4 9.5 Q
-0.14 (write) 438.97 462.62 P
2 11 Q
-0.07 ( over-) 467.47 462.62 P
-0.34 (writes elements in the str) 135.65 448.62 P
-0.34 (eam and then advance the str) 256.18 448.62 P
-0.34 (eam\325s position to be) 397.16 448.62 P
(beyond the last element written.) 135.65 434.62 T
1 F
(Implementation Note:) 135.65 414.62 T
2 F
( Buf) 246.86 414.62 T
(fer) 266.43 414.62 T
(ed str) 279.51 414.62 T
(eams ar) 306.64 414.62 T
(e intended to pr) 344.19 414.62 T
(ovide a very) 421.63 414.62 T
(ef) 135.65 400.62 T
(\336cient implementation of) 144.38 400.62 T
4 9.5 Q
(write) 269.96 400.62 T
2 11 Q
(, particularly when) 298.46 400.62 T
0 F
(sequence) 393.83 400.62 T
2 F
( is an) 432.75 400.62 T
(instance of) 135.65 386.62 T
4 9.5 Q
(<byte-string>) 190.73 386.62 T
2 11 Q
(,) 264.83 386.62 T
4 9.5 Q
(<unicode-string>) 270.33 386.62 T
2 11 Q
(,) 361.52 386.62 T
4 9.5 Q
(<byte-vector>) 367.02 386.62 T
2 11 Q
(, or) 441.12 386.62 T
4 9.5 Q
-0.78 (<buffer>) 135.65 372.62 P
2 11 Q
-0.38 (, and the str) 181.25 372.62 P
-0.38 (eam\325s element type is the same as the element type of) 237.4 372.62 P
0 F
(sequence) 135.65 358.62 T
2 F
(.) 174.57 358.62 T
3 12 Q
(f) 108.65 323.95 T
(or) 111.74 323.95 T
(ce-output) 121.4 323.95 T
0 11 Q
(Open generic function) 396.22 324.62 T
4 9 Q
(force-output) 135.65 303.95 T
5 F
(output-str) 205.85 303.95 T
(eam) 247.2 303.95 T
4 F
( => \050\051) 263.7 303.95 T
2 11 Q
(For) 135.65 283.62 T
(ces any pending output fr) 151.92 283.62 T
(om) 277.34 283.62 T
0 F
(output-str) 295.81 283.62 T
(eam) 341.44 283.62 T
2 F
(\325s buf) 359.16 283.62 T
(fers to its destination.) 385.81 283.62 T
-0.08 (When cr) 135.65 263.62 P
-0.08 (eating new str) 176.42 263.62 P
-0.08 (eam classes it may be necessary to add a method to) 245.07 263.62 P
(the) 135.65 249.62 T
4 9.5 Q
(force-output) 153.65 249.62 T
2 11 Q
( function, even though it is not part of the Str) 222.05 249.62 T
(eam Exten-) 440.5 249.62 T
(sion Pr) 135.65 235.62 T
(otocol.) 169.46 235.62 T
3 12 Q
(sync) 108.65 200.95 T
(hr) 130.99 200.95 T
(oniz) 140.65 200.95 T
(e-output) 160.43 200.95 T
0 11 Q
(Open generic function) 396.22 201.62 T
4 9 Q
(synchronize-output) 135.65 180.95 T
5 F
(output-str) 238.25 180.95 T
(eam) 279.6 180.95 T
4 F
( => \050\051) 296.1 180.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 20
%%Page: "21" 21
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.5) 333.32 702.62 T
(Reading and writing from streams) 354.69 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(21) 477.65 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
2 11 Q
0 X
(For) 126.65 665.62 T
(ces any pending output fr) 142.92 665.62 T
(om) 268.34 665.62 T
0 F
(output-str) 286.81 665.62 T
(eam) 332.44 665.62 T
2 F
(\325s buf) 350.16 665.62 T
(fers to its destination.) 376.81 665.62 T
-0.05 (Befor) 126.65 651.62 P
-0.05 (e r) 152.45 651.62 P
-0.05 (eturning to its caller) 164.57 651.62 P
-0.05 (,) 261.25 651.62 P
4 9.5 Q
-0.11 (synchronize-output) 266.69 651.62 P
2 11 Q
-0.05 ( also attempts to ensur) 369.29 651.62 P
-0.05 (e) 478.68 651.62 P
(that the output r) 126.65 637.62 T
(eaches the str) 206.43 637.62 T
(eam\325s destination befor) 271.57 637.62 T
(e, ther) 384.98 637.62 T
(eby synchr) 415.16 637.62 T
(o-) 467.99 637.62 T
(nizing the output destination with the application state.) 126.65 623.62 T
-0.08 (When cr) 126.65 603.62 P
-0.08 (eating new str) 167.42 603.62 P
-0.08 (eam classes it may be necessary to add a method to) 236.07 603.62 P
-0.19 (the) 126.65 589.62 P
4 9.5 Q
-0.4 (synchronize-output) 144.46 589.62 P
2 11 Q
-0.19 ( function, even though it is not part of the Str) 247.06 589.62 P
-0.19 (eam) 463.61 589.62 P
(Extension Pr) 126.65 575.62 T
(otocol.) 188.12 575.62 T
3 12 Q
(discar) 99.65 540.95 T
(d-output) 128.46 540.95 T
0 11 Q
(Open generic function) 387.22 541.62 T
4 9 Q
(discard-output) 126.65 520.95 T
5 F
(output-str) 207.65 520.95 T
(eam) 249 520.95 T
4 F
( => \050\051) 265.5 520.95 T
2 11 Q
(Attempts to abort any pending output for) 126.65 500.62 T
0 F
(output-str) 332.39 500.62 T
(eam) 378.02 500.62 T
2 F
(.) 395.74 500.62 T
-0.21 (A default method on) 126.65 480.62 P
4 9.5 Q
-0.44 (<stream>) 230.03 480.62 P
2 11 Q
-0.21 ( is de\336ned, so that applications can call this) 275.63 480.62 P
(function on any sort of str) 126.65 466.62 T
(eam. The default method does nothing.) 252.27 466.62 T
3 13 Q
(1.5.4  Reading and writing b) 99.65 433.29 T
(y lines) 240.45 433.29 T
2 11 Q
(The following functions facilitate line-based input and output operations.) 99.65 413.62 T
(The newline sequence for string str) 99.65 393.62 T
(eams is a sequence comprising the single) 270.01 393.62 T
(newline character) 99.65 379.62 T
4 9.5 Q
(\134n) 188.78 379.62 T
2 11 Q
(. For character \336le str) 200.18 379.62 T
(eams, the newline sequence is what-) 302.64 379.62 T
(ever sequence of characters the underlying platform uses to r) 99.65 365.62 T
(epr) 396.35 365.62 T
(esent a new-) 412.38 365.62 T
(line. For example, on MSDOS platforms, the sequence might comprise two) 99.65 351.62 T
(characters: a carriage r) 99.65 337.62 T
(eturn followed by a linefeed.) 208.83 337.62 T
1 F
-0.34 (Implementation Note:) 99.65 317.62 P
2 F
-0.34 ( The functions described in this section ar) 210.52 317.62 P
-0.34 (e potentially an) 409.55 317.62 P
(interim solution to one aspect of the mor) 99.65 303.62 T
(e general pr) 296.89 303.62 T
(oblem of encoding and) 354.52 303.62 T
(data translation. At some point, these functions may be moved into, or sub-) 99.65 289.62 T
-0.23 (sumed by) 99.65 275.62 P
-0.23 (, another higher level library that deals with the encoding pr) 146.14 275.62 P
-0.23 (oblems in) 437.07 275.62 P
(a better way) 99.65 261.62 T
(. Note that no other functions in the Str) 158.35 261.62 T
(eams library do anything to) 348.01 261.62 T
(manage the encoding of newlines; calling) 99.65 247.62 T
4 9.5 Q
(write-element) 303.41 247.62 T
2 11 Q
( on the character) 377.51 247.62 T
4 9.5 Q
(\134n) 460.89 247.62 T
2 11 Q
(does not cause the) 99.65 233.62 T
4 9.5 Q
(\134n) 191.51 233.62 T
2 11 Q
( character to be written as the native newline sequence,) 202.91 233.62 T
(except by coincidence.) 99.65 219.62 T
3 12 Q
(read-line) 99.65 184.95 T
0 11 Q
(Open generic function) 387.22 185.62 T
4 9 Q
(read-line) 126.65 164.95 T
5 F
(input-str) 180.65 164.95 T
(eam) 216.49 164.95 T
4 F
( #key) 232.99 164.95 T
5 F
(on-end-of-str) 265.39 164.95 T
(eam) 318.74 164.95 T
4 F
( =>) 335.24 164.95 T
5 F
(string-or-eof) 356.84 164.95 T
(newline?) 413.24 164.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 21
%%Page: "22" 22
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(22) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
-0.23 (Returns a new string containing all the input in) 135.65 665.62 P
0 F
-0.23 (input-str) 366.15 665.62 P
-0.23 (eam) 406.29 665.62 P
2 F
-0.23 ( up to the next) 424.01 665.62 P
(newline sequence.) 135.65 651.62 T
(The r) 135.65 631.62 T
(esulting string does not contain the newline sequence. The second) 160.96 631.62 T
-0.13 (value r) 135.65 617.62 P
-0.13 (eturned is) 169.23 617.62 P
4 9.5 Q
-0.27 (#t) 220.56 617.62 P
2 11 Q
-0.13 ( if the r) 231.96 617.62 P
-0.13 (ead terminated with a newline or) 266.08 617.62 P
4 9.5 Q
-0.27 (#f) 430.01 617.62 P
2 11 Q
-0.13 ( if the r) 441.41 617.62 P
-0.13 (ead) 475.54 617.62 P
(terminated because it came to the end of the str) 135.65 603.62 T
(eam.) 365.01 603.62 T
-0.14 (The type of the r) 135.65 583.62 P
-0.14 (esult string is chosen so that the string can contain charac-) 215.15 583.62 P
(ters of) 135.65 569.62 T
0 F
(input-str) 168.68 569.62 T
(eam) 208.82 569.62 T
2 F
(\325s element type. For example, if the element type is) 226.54 569.62 T
4 9.5 Q
(<byte-character>) 135.65 555.62 T
2 11 Q
(, the string will be a) 226.85 555.62 T
4 9.5 Q
(<byte-string>) 325.3 555.62 T
2 11 Q
(.) 399.4 555.62 T
(If) 135.65 535.62 T
0 F
(input-str) 145.77 535.62 T
(eam) 185.91 535.62 T
2 F
( is at its end immediately upon calling) 203.63 535.62 T
4 9.5 Q
(read-line) 392.07 535.62 T
2 11 Q
( \050that is,) 443.37 535.62 T
(the end of str) 135.65 521.62 T
(eam appears to be at the end of an empty line\051, then the end-) 199.61 521.62 T
(of-str) 135.65 507.62 T
(eam behavior and the interpr) 161.38 507.62 T
(etation of) 303.32 507.62 T
0 F
(on-end-of-str) 352.04 507.62 T
(eam) 409.89 507.62 T
2 F
( is as for) 427.61 507.62 T
4 9.5 Q
(read-element) 135.65 493.62 T
2 11 Q
(.) 204.05 493.62 T
3 12 Q
(read-line-into!) 108.65 458.95 T
0 11 Q
(Open generic function) 396.22 459.62 T
4 9 Q
(read-line-into!) 135.65 438.95 T
5 F
(input-str) 222.05 438.95 T
(eam) 257.89 438.95 T
(string) 279.79 438.95 T
4 F
( #key) 303.29 438.95 T
5 F
(start) 335.69 438.95 T
(on-end-of-str) 360.59 438.95 T
(eam) 413.95 438.95 T
(gr) 435.84 438.95 T
(ow?) 443.68 438.95 T
4 F
( =>) 460.18 438.95 T
5 F
(string-or-eof) 135.65 427.95 T
(newline?) 192.05 427.95 T
2 11 Q
(Fills) 135.65 407.62 T
0 F
(string) 158.78 407.62 T
2 F
( with all the input fr) 185.68 407.62 T
(om) 283.19 407.62 T
0 F
(input-str) 301.66 407.62 T
(eam) 341.8 407.62 T
2 F
( up to the next newline) 359.52 407.62 T
(sequence. The) 135.65 393.62 T
0 F
(string) 206.86 393.62 T
2 F
( must be a general instance of) 233.76 393.62 T
4 9.5 Q
(<string>) 380.13 393.62 T
2 11 Q
( that can hold) 425.73 393.62 T
(elements of the str) 135.65 379.62 T
(eam\325s element type.) 224.59 379.62 T
(The input is written into) 135.65 359.62 T
0 F
(string) 256.87 359.62 T
2 F
( starting at the position) 283.76 359.62 T
0 F
(start) 398.93 359.62 T
2 F
(, which is an) 419.7 359.62 T
(integer defaulting to 0.) 135.65 345.62 T
(The second r) 135.65 325.62 T
(eturn value is) 197.65 325.62 T
4 9.5 Q
(#t) 266.82 325.62 T
2 11 Q
( if the r) 278.22 325.62 T
(ead terminated with a newline, or) 312.74 325.62 T
4 9.5 Q
(#f) 480.2 325.62 T
2 11 Q
(if the r) 135.65 311.62 T
(ead completed by getting to the end of the input str) 167.42 311.62 T
(eam.) 417.14 311.62 T
(If) 135.65 291.62 T
0 F
(gr) 145.77 291.62 T
(ow?) 155.35 291.62 T
2 F
( is) 173.68 291.62 T
4 9.5 Q
(#t) 187.04 291.62 T
2 11 Q
(, and) 198.44 291.62 T
0 F
(string) 225.31 291.62 T
2 F
(is not lar) 254.96 291.62 T
(ge enough to hold all of the input, this) 297.17 291.62 T
(function takes one of the two following actions.) 135.65 277.62 T
(If) 135.65 257.62 T
0 F
(string) 145.77 257.62 T
2 F
( is str) 172.66 257.62 T
(etchy) 198.43 257.62 T
(,) 223.46 257.62 T
4 9.5 Q
(read-line-into!) 228.96 257.62 T
2 11 Q
( gr) 314.46 257.62 T
(ows it enough to hold the input.) 327.47 257.62 T
(If) 135.65 237.62 T
0 F
(string) 145.77 237.62 T
2 F
( is not str) 172.66 237.62 T
(etchy) 217.17 237.62 T
(,) 242.21 237.62 T
4 9.5 Q
(read-line-into!) 247.71 237.62 T
2 11 Q
( cr) 333.2 237.62 T
(eates a new string which it) 344.99 237.62 T
(writes to and r) 135.65 223.62 T
(eturns instr) 206.5 223.62 T
(ead. The r) 262.15 223.62 T
(esulting string holds all the original) 310.45 223.62 T
(elements of) 135.65 209.62 T
0 F
(string) 194.19 209.62 T
2 F
(, except wher) 221.09 209.62 T
(e r) 285.62 209.62 T
(ead-line-into! overwrites them with) 297.79 209.62 T
(input fr) 135.65 195.62 T
(om) 172.64 195.62 T
0 F
(input-str) 191.11 195.62 T
(eam) 231.25 195.62 T
2 F
(.) 248.97 195.62 T
(In a manner consistent with the intended semantics of) 135.65 175.62 T
0 F
(gr) 401.05 175.62 T
(ow?) 410.63 175.62 T
2 F
(, when) 428.95 175.62 T
0 F
(gr) 464.45 175.62 T
(ow?) 474.03 175.62 T
2 F
(is tr) 135.65 161.62 T
(ue and) 154.11 161.62 T
0 F
(start) 190.13 161.62 T
2 F
(is gr) 213.65 161.62 T
(eater than or equal to) 234.53 161.62 T
0 F
(string) 340.84 161.62 T
4 9.5 Q
(.size) 367.74 161.62 T
2 11 Q
(,) 396.24 161.62 T
4 9.5 Q
(read-line-into!) 401.74 161.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 22
%%Page: "23" 23
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.5) 333.32 702.62 T
(Reading and writing from streams) 354.69 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(23) 477.65 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
2 11 Q
0 X
(gr) 126.65 665.62 T
(ows) 136.91 665.62 T
0 F
(string) 159.51 665.62 T
2 F
( to accomodate the) 186.4 665.62 T
0 F
(start) 280.32 665.62 T
2 F
( index and the new input.) 301.09 665.62 T
-0.32 (If) 126.65 645.62 P
0 F
-0.32 (gr) 136.45 645.62 P
-0.32 (ow?) 146.03 645.62 P
2 F
-0.32 ( is) 164.36 645.62 P
4 9.5 Q
-0.66 (#f) 177.08 645.62 P
2 11 Q
-0.32 (\050the default\051 and) 193.52 645.62 P
0 F
-0.32 (string) 276.59 645.62 P
2 F
-0.32 ( is not lar) 303.49 645.62 P
-0.32 (ge enough to hold the input,) 347.49 645.62 P
(the function signals an err) 126.65 631.62 T
(or) 253.09 631.62 T
(.) 262.63 631.62 T
(The end-of-str) 126.65 611.62 T
(eam behavior and the interpr) 195.6 611.62 T
(etation of) 337.54 611.62 T
0 F
(on-end-of-str) 386.26 611.62 T
(eam) 444.11 611.62 T
2 F
( is) 461.83 611.62 T
(the same as that of) 126.65 597.62 T
4 9.5 Q
(read-line) 219.71 597.62 T
2 11 Q
(.) 271.01 597.62 T
3 12 Q
(write-line) 99.65 562.95 T
0 11 Q
(Open generic function) 387.22 563.62 T
4 9 Q
(write-line) 126.65 542.95 T
5 F
(output-str) 186.05 542.95 T
(eam) 227.4 542.95 T
(string) 249.3 542.95 T
4 F
( #key) 272.8 542.95 T
5 F
(start) 305.2 542.95 T
(end) 330.1 542.95 T
4 F
( => \050\051) 344.11 542.95 T
2 11 Q
(W) 126.65 522.62 T
(rites) 136.83 522.62 T
0 F
(string) 160.65 522.62 T
2 F
( followed by a newline sequence to) 187.54 522.62 T
0 F
(output-str) 360.79 522.62 T
(eam) 406.42 522.62 T
2 F
(.) 424.14 522.62 T
(The default method behaves as though it calls) 126.65 502.62 T
4 9.5 Q
(write) 352.28 502.62 T
2 11 Q
( on) 380.78 502.62 T
0 F
(string) 398.69 502.62 T
2 F
( and then) 425.58 502.62 T
(calls) 126.65 488.62 T
4 9.5 Q
(new-line) 150.85 488.62 T
2 11 Q
(, with) 196.45 488.62 T
0 F
(output-str) 227.06 488.62 T
(eam) 272.69 488.62 T
2 F
( locked acr) 290.41 488.62 T
(oss both calls.) 342.64 488.62 T
(If supplied,) 126.65 468.62 T
0 F
(start) 185.18 468.62 T
2 F
( and) 205.95 468.62 T
0 F
(end) 230.07 468.62 T
2 F
( delimit the portion of) 245.96 468.62 T
0 F
(string) 355.69 468.62 T
2 F
( to write to the) 382.58 468.62 T
(str) 126.65 454.62 T
(eam. They default to 0 and) 139.04 454.62 T
0 F
(string) 271.6 454.62 T
4 9.5 Q
(.size) 298.49 454.62 T
2 11 Q
( r) 326.99 454.62 T
(espectively) 333.89 454.62 T
(.) 386.95 454.62 T
3 12 Q
(ne) 99.65 419.95 T
(w-line) 111 419.95 T
0 11 Q
(Open generic function) 387.22 420.62 T
4 9 Q
(new-line) 126.65 399.95 T
5 F
(output-str) 175.25 399.95 T
(eam) 216.6 399.95 T
4 F
( => \050\051) 233.1 399.95 T
2 11 Q
(W) 126.65 379.62 T
(rites a newline sequence to) 136.83 379.62 T
0 F
(output-str) 270.21 379.62 T
(eam) 315.84 379.62 T
2 F
(.) 333.56 379.62 T
(A method for) 126.65 359.62 T
4 9.5 Q
(new-line) 195.17 359.62 T
2 11 Q
( is de\336ned on) 240.77 359.62 T
4 9.5 Q
(<string-stream>) 309.08 359.62 T
2 11 Q
( that writes the) 394.58 359.62 T
(character) 126.65 345.62 T
4 9.5 Q
(\134n) 174.11 345.62 T
2 11 Q
( to the string str) 185.51 345.62 T
(eam.) 262.07 345.62 T
3 13 Q
(1.5.5  Quer) 99.65 312.29 T
(ying streams) 154.27 312.29 T
2 11 Q
(The following functions can be used to determine various pr) 99.65 292.62 T
(operties of a) 393.34 292.62 T
(str) 99.65 278.62 T
(eam.) 112.04 278.62 T
(T) 99.65 258.62 T
(o implement a new str) 105.38 258.62 T
(eam you must pr) 214.09 258.62 T
(ovide methods for) 296.93 258.62 T
4 9.5 Q
(stream-open?) 388.97 258.62 T
2 11 Q
(,) 457.37 258.62 T
4 9.5 Q
(stream-at-end?) 99.65 244.62 T
2 11 Q
(, and) 179.45 244.62 T
4 9.5 Q
(stream-element-type) 206.32 244.62 T
2 11 Q
(.) 314.62 244.62 T
3 12 Q
(stream-open?) 99.65 209.95 T
0 11 Q
(Open generic function) 387.22 210.62 T
4 9 Q
(stream-open?) 126.65 189.95 T
5 F
(str) 196.85 189.95 T
(eam) 207.68 189.95 T
4 F
( =>) 224.18 189.95 T
5 F
(open?) 245.78 189.95 T
2 11 Q
(Returns) 126.65 169.62 T
4 9.5 Q
(#t) 167.65 169.62 T
2 11 Q
( if) 179.04 169.62 T
0 F
(str) 191.41 169.62 T
(eam) 203.43 169.62 T
2 F
( is open and) 221.15 169.62 T
4 9.5 Q
(#f) 282.93 169.62 T
2 11 Q
( if it is not.) 294.33 169.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 23
%%Page: "24" 24
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(24) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
3 12 Q
0 X
(stream-element-type) 108.65 664.95 T
0 11 Q
(Open generic function) 396.22 665.62 T
4 9 Q
(stream-element-type) 135.65 644.95 T
5 F
(str) 243.65 644.95 T
(eam) 254.48 644.95 T
4 F
( =>) 270.98 644.95 T
5 F
(element-type) 292.58 644.95 T
2 11 Q
(Returns the element type of) 135.65 624.62 T
0 F
(str) 272.86 624.62 T
(eam) 284.89 624.62 T
2 F
( as a Dylan) 302.61 624.62 T
4 9.5 Q
(<type>) 359 624.62 T
2 11 Q
(.) 393.2 624.62 T
3 12 Q
(stream-at-end?) 108.65 589.95 T
0 11 Q
(Open generic function) 396.22 590.62 T
4 9 Q
(stream-at-end?) 135.65 569.95 T
5 F
(str) 216.65 569.95 T
(eam) 227.48 569.95 T
4 F
( =>) 243.98 569.95 T
5 F
(boolean) 265.58 569.95 T
2 11 Q
-0.21 (Returns) 135.65 549.62 P
4 9.5 Q
-0.43 (#t) 176.44 549.62 P
2 11 Q
-0.21 ( if the str) 187.84 549.62 P
-0.21 (eam is at its end and) 229.98 549.62 P
4 9.5 Q
-0.43 (#f) 331.13 549.62 P
2 11 Q
-0.21 ( if it is not. For input str) 342.53 549.62 P
-0.21 (eams, it) 455.88 549.62 P
(r) 135.65 535.62 T
(eturns) 139.79 535.62 T
4 9.5 Q
(#t) 173.44 535.62 T
2 11 Q
( if a call to) 184.84 535.62 T
4 9.5 Q
(read-element) 237.34 535.62 T
2 11 Q
( with no supplied keywor) 305.74 535.62 T
(d ar) 431.25 535.62 T
(guments) 450.36 535.62 T
(would signal an) 135.65 521.62 T
4 9.5 Q
(<end-of-stream-error>) 216.62 521.62 T
2 11 Q
(.) 336.32 521.62 T
(This function dif) 135.65 501.62 T
(fers fr) 216.32 501.62 T
(om) 244.82 501.62 T
4 9.5 Q
(stream-input-available?) 263.29 501.62 T
2 11 Q
(. See the description) 394.39 501.62 T
(of that function on page 17.) 135.65 487.62 T
(For output-only str) 135.65 467.62 T
(eams, this function always r) 228.46 467.62 T
(eturns) 364.28 467.62 T
4 9.5 Q
(#f) 397.93 467.62 T
2 11 Q
(.) 409.33 467.62 T
3 13 Q
(1.5.6  P) 108.65 434.29 T
(ositionab) 144.98 434.29 T
(le stream pr) 192.28 434.29 T
(otocol) 252.52 434.29 T
2 11 Q
(The following comprises the pr) 108.65 414.62 T
(otocol for positionable str) 260.4 414.62 T
(eams.) 384.48 414.62 T
(T) 108.65 394.62 T
(o implement a new positionable str) 114.38 394.62 T
(eam you must pr) 285.57 394.62 T
(ovide methods for) 368.41 394.62 T
4 9.5 Q
(stream-position) 108.65 380.62 T
2 11 Q
(,) 194.15 380.62 T
4 9.5 Q
(stream-position-setter) 199.65 380.62 T
2 11 Q
(,) 324.23 380.62 T
4 9.5 Q
(adjust-stream-position) 329.73 380.62 T
2 11 Q
(,) 455.13 380.62 T
4 9.5 Q
(stream-size) 108.65 366.62 T
2 11 Q
(,) 171.35 366.62 T
4 9.5 Q
(stream-contents) 176.85 366.62 T
2 11 Q
(, and) 262.35 366.62 T
4 9.5 Q
(unread-element) 289.22 366.62 T
2 11 Q
(.) 369.02 366.62 T
(A str) 108.65 346.62 T
(eam position can be thought of as a natural number that indicates how) 132.35 346.62 T
(many elements into the str) 108.65 332.62 T
(eam the str) 237.6 332.62 T
(eam\325s curr) 291.24 332.62 T
(ent location is. However) 342.2 332.62 T
(, it is) 459.72 332.62 T
(not always the case that a single integer contains enough information to r) 108.65 318.62 T
(eposi-) 464.22 318.62 T
-0.22 (tion a str) 108.65 304.62 P
-0.22 (eam. Consider the case of an \322uncompr) 150.79 304.62 P
-0.22 (essing\323 \336le str) 340.63 304.62 P
-0.22 (eam that r) 409.02 304.62 P
-0.22 (equir) 457.78 304.62 P
-0.22 (es) 483.19 304.62 P
(additional state beyond simply the \336le position to be able to get the next input) 108.65 290.62 T
(character fr) 108.65 276.62 T
(om the compr) 163.92 276.62 T
(essed \336le.) 231.76 276.62 T
(The Str) 108.65 256.62 T
(eams library addr) 143.32 256.62 T
(esses this pr) 229.85 256.62 T
(oblem by intr) 288.49 256.62 T
(oducing the class) 353.79 256.62 T
4 9.5 Q
(<stream-) 440.18 256.62 T
(position>) 108.65 242.62 T
2 11 Q
(, which is subclassed by various kinds of str) 159.95 242.62 T
(eam implementations) 372.84 242.62 T
(that need to maintain additional state. A str) 108.65 228.62 T
(eam can be r) 320.08 228.62 T
(epositioned as ef) 381.1 228.62 T
(\336-) 462.43 228.62 T
(ciently as possible when) 108.65 214.62 T
4 9.5 Q
(stream-position-setter) 229.42 214.62 T
2 11 Q
( is given a value pr) 354.82 214.62 T
(eviously) 446.71 214.62 T
(r) 108.65 200.62 T
(eturned by) 112.79 200.62 T
4 9.5 Q
(stream-position) 168.72 200.62 T
2 11 Q
( on that str) 254.22 200.62 T
(eam.) 306.35 200.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 24
%%Page: "25" 25
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.5) 333.32 702.62 T
(Reading and writing from streams) 354.69 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(25) 477.65 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
2 11 Q
0 X
-0.19 (It is also legal to set the position of a str) 99.65 665.62 P
-0.19 (eam to an integer position. However) 288.72 665.62 P
-0.19 (, for) 464.75 665.62 P
-0.02 (some types of str) 99.65 651.62 P
-0.02 (eams, to do so might be slow) 181.8 651.62 P
-0.02 (, per) 321.48 651.62 P
-0.02 (haps r) 342.99 651.62 P
-0.02 (equiring the entir) 373.04 651.62 P
-0.02 (e con-) 457.69 651.62 P
(tents of the str) 99.65 637.62 T
(eam up to that point to be r) 168.73 637.62 T
(ead.) 301.27 637.62 T
3 12 Q
(<stream-position>) 99.65 602.95 T
0 11 Q
(Abstract class) 424.64 603.62 T
2 F
(A dir) 126.65 581.62 T
(ect subclass of) 152.02 581.62 T
4 9.5 Q
(<object>) 223.98 581.62 T
2 11 Q
(. It is used to r) 269.58 581.62 T
(epr) 338.26 581.62 T
(esent positions within) 354.29 581.62 T
(str) 126.65 567.62 T
(eams of a certain kind: those for which a natural number is not suf) 139.04 567.62 T
(\336-) 461.22 567.62 T
(cient to fully describe the position in the str) 126.65 553.62 T
(eam. For example, a str) 337.02 553.62 T
(eam) 449.61 553.62 T
-0.02 (that supports compr) 126.65 539.62 P
-0.02 (ession will have some state associated with each posi-) 225.65 539.62 P
(tion in the str) 126.65 525.62 T
(eam that a single integer is not suf) 191.35 525.62 T
(\336cient to r) 357.32 525.62 T
(epr) 406.55 525.62 T
(esent.) 422.58 525.62 T
(The) 126.65 505.62 T
4 9.5 Q
(<stream-position>) 147.81 505.62 T
2 11 Q
( class is disjoint fr) 244.71 505.62 T
(om the class) 330.65 505.62 T
4 9.5 Q
(<integer>) 392.79 505.62 T
2 11 Q
(.) 444.09 505.62 T
3 12 Q
(stream-position) 99.65 470.95 T
0 11 Q
(Open generic function) 387.22 471.62 T
4 9 Q
(stream-position) 126.65 450.95 T
5 F
(positionable-str) 213.05 450.95 T
(eam) 277.72 450.95 T
4 F
( =>) 294.22 450.95 T
5 F
(position) 315.82 450.95 T
2 11 Q
(Returns the curr) 126.65 430.62 T
(ent position of) 205.66 430.62 T
0 F
(positionable-str) 278.51 430.62 T
(eam) 346.96 430.62 T
2 F
( for r) 364.68 430.62 T
(eading or writing.) 388.34 430.62 T
(The value r) 126.65 410.62 T
(eturned can be either an instance of) 181.53 410.62 T
4 9.5 Q
(<stream-position>) 356.69 410.62 T
2 11 Q
( or an) 453.59 410.62 T
-0.21 (integer) 126.65 396.62 P
-0.21 (. When the value is an integer) 160.02 396.62 P
-0.21 (, it is an of) 302.31 396.62 P
-0.21 (fset fr) 351.26 396.62 P
-0.21 (om position zer) 378.79 396.62 P
-0.21 (o, and) 454.18 396.62 P
-0.22 (is in terms of the str) 126.65 382.62 P
-0.22 (eam\325s element type. For instance, in a Unicode str) 221.69 382.62 P
-0.22 (eam,) 460.88 382.62 P
(a position of 4 means that 4 Unicode characters have been r) 126.65 368.62 T
(ead.) 414.34 368.62 T
3 12 Q
(stream-position-setter) 99.65 333.95 T
0 11 Q
(Open generic function) 387.22 334.62 T
4 9 Q
(stream-position-setter) 126.65 313.95 T
5 F
(position) 250.85 313.95 T
(positionable-str) 289.76 313.95 T
(eam) 354.43 313.95 T
4 F
( =>) 370.93 313.95 T
5 F
(new-position) 392.53 313.95 T
2 11 Q
(Changes the str) 126.65 293.62 T
(eam\325s position for r) 201.95 293.62 T
(eading or writing to) 296.25 293.62 T
0 F
(position) 396.42 293.62 T
2 F
(.) 431.86 293.62 T
(The position can be either an integer or a) 126.65 273.62 T
4 9.5 Q
(<stream-position>) 327.64 273.62 T
2 11 Q
(.) 424.54 273.62 T
(When it is an integer) 126.65 253.62 T
(, if it is less than zer) 226.65 253.62 T
(o or gr) 322.02 253.62 T
(eater than) 354.14 253.62 T
0 F
(positionable-) 405.5 253.62 T
(str) 126.65 239.62 T
(eam) 138.67 239.62 T
4 9.5 Q
(.stream-size) 156.39 239.62 T
2 11 Q
( this function signals an err) 224.79 239.62 T
(or) 356.58 239.62 T
(.) 366.12 239.62 T
-0.12 (When) 126.65 219.62 P
0 F
-0.12 (position) 158.36 219.62 P
2 F
-0.12 ( is a) 193.8 219.62 P
4 9.5 Q
-0.24 (<stream-position>) 215.07 219.62 P
2 11 Q
-0.12 (, if it is invalid for some r) 311.97 219.62 P
-0.12 (eason, this) 432.93 219.62 P
(function signals an err) 126.65 205.62 T
(or) 235.09 205.62 T
(. Str) 244.62 205.62 T
(eams ar) 263.63 205.62 T
(e permitted to r) 301.17 205.62 T
(estrict the) 376.73 205.62 T
0 F
(position) 427.02 205.62 T
2 F
( to) 462.47 205.62 T
(being a member of the set of values pr) 126.65 191.62 T
(eviously r) 311.96 191.62 T
(eturned by calls to) 360.17 191.62 T
4 9.5 Q
(stream-position) 126.65 177.62 T
2 11 Q
( on the same str) 212.15 177.62 T
(eam.) 288.36 177.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "25" 25
%%Page: "26" 26
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(26) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
(The) 135.65 665.62 T
0 F
(position) 156.81 665.62 T
2 F
( may also be) 192.25 665.62 T
4 9.5 Q
(#"start") 255.31 665.62 T
2 11 Q
(,) 300.91 665.62 T
(meaning that the stream should be) 306.41 665.62 T
(positioned at its start,) 135.65 651.62 T
(or) 243.28 651.62 T
4 9.5 Q
(#"end") 256.38 651.62 T
2 11 Q
(, m) 290.58 651.62 T
(eaning that the stream should be posi-) 305.8 651.62 T
(tioned at its end.) 135.65 637.62 T
3 12 Q
(adjust-stream-position) 108.65 602.95 T
0 11 Q
(Open generic function) 396.22 603.62 T
4 9 Q
-0.43 (adjust-stream-position) 135.65 582.95 P
5 F
-0.18 (positionable-str) 259.42 582.95 P
-0.18 (eam) 324.09 582.95 P
-0.18 (delta) 345.56 582.95 P
4 F
-0.43 ( #key) 366.06 582.95 P
5 F
-0.18 (fr) 397.6 582.95 P
-0.18 (om) 403.93 582.95 P
4 F
-0.43 ( =>) 416.43 582.95 P
5 F
-0.18 (new-position) 437.17 582.95 P
2 11 Q
(Moves the position of) 135.65 562.62 T
0 F
(positionable-str) 243.81 562.62 T
(eam) 312.25 562.62 T
2 F
( to be of) 329.97 562.62 T
(fset) 368.64 562.62 T
0 F
(delta) 388.57 562.62 T
2 F
( elements fr) 409.95 562.62 T
(om) 466.64 562.62 T
(the position indicated by) 135.65 548.62 T
0 F
(fr) 259.27 548.62 T
(om) 266.4 548.62 T
2 F
(. The new position is r) 279.85 548.62 T
(eturned.) 387.3 548.62 T
(The value of) 135.65 528.62 T
0 F
(fr) 198.8 528.62 T
(om) 205.94 528.62 T
2 F
( can be one of the symbols) 219.38 528.62 T
4 9.5 Q
(#"current") 349.82 528.62 T
2 11 Q
(,) 406.82 528.62 T
4 9.5 Q
(#"start") 412.32 528.62 T
2 11 Q
(, and) 457.92 528.62 T
4 9.5 Q
(#"end") 135.65 514.62 T
2 11 Q
(. The default value is) 169.85 514.62 T
4 9.5 Q
(#"current") 274.02 514.62 T
2 11 Q
(. When) 331.02 514.62 T
0 F
(fr) 368.34 514.62 T
(om) 375.48 514.62 T
2 F
( is) 388.92 514.62 T
4 9.5 Q
(#"start") 402.29 514.62 T
2 11 Q
(, the) 447.89 514.62 T
(str) 135.65 500.62 T
(eam is positioned r) 148.04 500.62 T
(elative to the beginning of the str) 240.46 500.62 T
(eam. When) 400.56 500.62 T
0 F
(fr) 458.37 500.62 T
(om) 465.51 500.62 T
2 F
( is) 478.95 500.62 T
4 9.5 Q
(#"end") 135.65 486.62 T
2 11 Q
(, the str) 169.85 486.62 T
(eam is positioned r) 205.75 486.62 T
(elative to its end.) 298.16 486.62 T
(Using) 135.65 466.62 T
4 9.5 Q
(adjust-stream-position) 167.34 466.62 T
2 11 Q
( to set the position of a str) 292.74 466.62 T
(eam to be) 417.6 466.62 T
(beyond its curr) 135.65 452.62 T
(ent last element causes the underlying aggr) 209.21 452.62 T
(egate to be) 419.78 452.62 T
(gr) 135.65 438.62 T
(own to a new size. When extending the underlying aggr) 145.91 438.62 T
(egate for a) 418.82 438.62 T
(str) 135.65 424.62 T
(eam, it is unde\336ned what the unwritten elements of the aggr) 148.04 424.62 T
(egate will) 442.2 424.62 T
(contain.) 135.65 410.62 T
3 12 Q
(as) 108.65 375.95 T
0 11 Q
(G.f. method) 444.01 376.62 T
4 9 Q
(as) 135.65 355.95 T
5 F
(integer-class) 151.85 355.95 T
(str) 208.23 355.95 T
(eam-position) 219.07 355.95 T
4 F
( =>) 272.57 355.95 T
5 F
(integer) 294.17 355.95 T
2 11 Q
(Coer) 135.65 335.62 T
(ces a) 158.87 335.62 T
4 9.5 Q
(<stream-position>) 184.69 335.62 T
2 11 Q
( to an integer) 281.59 335.62 T
(. The) 344.7 335.62 T
0 F
(integer-class) 371.37 335.62 T
2 F
( ar) 427.18 335.62 T
(gument is) 439.58 335.62 T
(the class) 135.65 321.62 T
4 9.5 Q
(<integer>) 179.32 321.62 T
2 11 Q
(.) 230.62 321.62 T
3 12 Q
(stream-siz) 108.65 286.95 T
(e) 157.42 286.95 T
0 11 Q
(Open generic function) 396.22 287.62 T
4 9 Q
(stream-size) 135.65 266.95 T
5 F
(positionable-str) 200.45 266.95 T
(eam) 265.12 266.95 T
4 F
( =>) 281.62 266.95 T
5 F
(size) 303.22 266.95 T
2 11 Q
(Returns the number of elements in) 135.65 246.62 T
0 F
(positionable-str) 306.74 246.62 T
(eam) 375.18 246.62 T
2 F
(.) 392.9 246.62 T
(For input str) 135.65 226.62 T
(eams, this number is the number of elements that wer) 196.45 226.62 T
(e avail-) 457.66 226.62 T
(able when the str) 135.65 212.62 T
(eam was cr) 218.85 212.62 T
(eated. It is unaf) 273.2 212.62 T
(fected by any r) 347.71 212.62 T
(ead operations) 419.71 212.62 T
(that might have been performed on the str) 135.65 198.62 T
(eam.) 341.4 198.62 T
(For output and input-output str) 135.65 178.62 T
(eams, this number is the number of ele-) 290.34 178.62 T
-0.17 (ments that wer) 135.65 164.62 P
-0.17 (e available when the str) 208.11 164.62 P
-0.17 (eam was cr) 322.29 164.62 P
-0.17 (eated \050just as with input) 376.3 164.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "26" 26
%%Page: "27" 27
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.5) 333.32 702.62 T
(Reading and writing from streams) 354.69 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(27) 477.65 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
2 11 Q
0 X
(str) 126.65 665.62 T
(eams\051, added to the number of elements written past the end of the) 139.04 665.62 T
(str) 126.65 651.62 T
(eam \050r) 139.04 651.62 T
(egar) 170.09 651.62 T
(dless of any r) 191.12 651.62 T
(epositioning operations\051.) 255.72 651.62 T
(It is assumed that ther) 126.65 631.62 T
(e is no mor) 234.45 631.62 T
(e than one str) 288.11 631.62 T
(eam open on the same) 353.59 631.62 T
(sour) 126.65 617.62 T
(ce or destination at a time; that ther) 148.1 617.62 T
(e ar) 319.97 617.62 T
(e no shar) 337.64 617.62 T
(ed r) 381.53 617.62 T
(efer) 400.42 617.62 T
(ences to \336les) 418.76 617.62 T
(by other pr) 126.65 603.62 T
(ocesses; that ther) 180.71 603.62 T
(e ar) 262.86 603.62 T
(e no alias r) 280.53 603.62 T
(efer) 332.67 603.62 T
(ences to underlying) 351.02 603.62 T
-0.21 (sequences, or any other such situations. In such situations, the behavior of) 126.65 589.62 P
4 9.5 Q
(stream-size) 126.65 575.62 T
2 11 Q
( is unde\336ned.) 189.35 575.62 T
3 12 Q
(stream-contents) 99.65 540.95 T
0 11 Q
(Open generic function) 387.22 541.62 T
4 9 Q
(stream-contents) 126.65 520.95 T
5 F
(positionable-str) 213.05 520.95 T
(eam) 277.72 520.95 T
4 F
( #key) 294.22 520.95 T
5 F
(clear-contents?) 326.62 520.95 T
4 F
( =>) 387.61 520.95 T
5 F
(sequence) 409.21 520.95 T
2 11 Q
(Returns a sequence that contains all of) 126.65 500.62 T
0 F
(positionable-str) 315.48 500.62 T
(eam) 383.93 500.62 T
2 F
(\325s elements fr) 401.65 500.62 T
(om) 466.05 500.62 T
(its start to its end, r) 126.65 486.62 T
(egar) 219.86 486.62 T
(dless of its curr) 240.89 486.62 T
(ent position. The type of the) 314.79 486.62 T
(r) 126.65 472.62 T
(eturned sequence is as for) 130.79 472.62 T
4 9.5 Q
(read) 259.36 472.62 T
2 11 Q
(. See page 16.) 282.16 472.62 T
1 F
(Note:) 126.65 452.62 T
2 F
( For str) 153.84 452.62 T
(eams whose dir) 188.2 452.62 T
(ection is) 264.43 452.62 T
4 9.5 Q
(#"input") 307.15 452.62 T
2 11 Q
(,) 352.75 452.62 T
4 9.5 Q
(stream-contents) 358.25 452.62 T
2 11 Q
( signals) 443.75 452.62 T
(an err) 126.65 438.62 T
(or) 155.06 438.62 T
(. Use) 164.6 438.62 T
4 9.5 Q
(read-to-end) 191.34 438.62 T
2 11 Q
( instead on such str) 254.04 438.62 T
(eams. See page 18.) 347.77 438.62 T
-0.08 (If) 126.65 418.62 P
0 F
-0.08 (clear-contents?) 136.68 418.62 P
2 F
-0.08 ( is) 204.3 418.62 P
4 9.5 Q
-0.17 (#t) 217.5 418.62 P
2 11 Q
-0.08 ( \050the default\051, this function sets the size of the str) 228.9 418.62 P
-0.08 (eam) 463.5 418.62 P
-0.15 (to zer) 126.65 404.62 P
-0.15 (o, and the position to the str) 153.76 404.62 P
-0.15 (eam\325s start. Thus the next call to) 288.91 404.62 P
4 9.5 Q
-0.31 (stream-) 446.75 404.62 P
(contents) 126.65 390.62 T
2 11 Q
( will r) 172.25 390.62 T
(eturn only the elements written after the pr) 200.67 390.62 T
(evious call to) 410.45 390.62 T
4 9.5 Q
(stream-contents) 126.65 376.62 T
2 11 Q
(.) 212.15 376.62 T
3 12 Q
(unread-element) 99.65 341.95 T
0 11 Q
(Open generic function) 387.22 342.62 T
4 9 Q
(unread-element) 126.65 321.95 T
5 F
(positionable-str) 207.65 321.95 T
(eam) 272.32 321.95 T
(element) 294.22 321.95 T
4 F
( =>) 325.21 321.95 T
5 F
(element) 346.81 321.95 T
2 11 Q
(\322Unr) 126.65 301.62 T
(eads\323 the last element fr) 151.26 301.62 T
(om) 268.64 301.62 T
0 F
(positionable-str) 287.11 301.62 T
(eam) 355.55 301.62 T
2 F
(. That is, it r) 373.27 301.62 T
(eturns) 430.8 301.62 T
0 F
(ele-) 464.45 301.62 T
-0.41 (ment) 126.65 287.62 P
2 F
-0.41 ( to the str) 149.26 287.62 P
-0.41 (eam so that the next call to) 193.54 287.62 P
4 9.5 Q
-0.84 (read-element) 322.73 287.62 P
2 11 Q
-0.41 ( will r) 391.13 287.62 P
-0.41 (eturn) 418.74 287.62 P
0 F
-0.41 (element) 447.32 287.62 P
2 F
-0.41 (.) 481.55 287.62 P
(The str) 126.65 273.62 T
(eam must be a) 160.21 273.62 T
4 9.5 Q
(<positionable-stream>) 233.14 273.62 T
2 11 Q
(.) 352.84 273.62 T
(It is an err) 126.65 253.62 T
(or \050) 175.72 253.62 T
1 F
(i) 192.48 253.62 T
2 F
(\051 to apply) 196.15 253.62 T
4 9.5 Q
(unread-element) 245.69 253.62 T
2 11 Q
( to an element that is not the ele-) 325.49 253.62 T
-0.32 (ment most r) 126.65 239.62 P
-0.32 (ecently r) 184.6 239.62 P
-0.32 (ead fr) 225.91 239.62 P
-0.32 (om the str) 253.64 239.62 P
-0.32 (eam; \050) 301.88 239.62 P
1 F
-0.32 (ii) 331.2 239.62 P
2 F
-0.32 (\051 to call) 338.53 239.62 P
4 9.5 Q
-0.66 (unread-element) 375.87 239.62 P
2 11 Q
-0.32 ( twice) 455.67 239.62 P
(in succession; \050) 126.65 225.62 T
1 F
(iii) 199.43 225.62 T
2 F
(\051 to unr) 210.42 225.62 T
(ead an element if the str) 246.36 225.62 T
(eam is at its initial posi-) 362.73 225.62 T
(tionl; and \050) 126.65 211.62 T
1 F
(iv) 179.58 211.62 T
2 F
(\051 to unr) 189.36 211.62 T
(ead an element after explicitly setting the str) 225.3 211.62 T
(eam\325s) 440.43 211.62 T
(position.) 126.65 197.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "27" 27
%%Page: "28" 28
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(28) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
3 13 Q
0 X
(1.5.7  Using \336le streams) 108.65 664.29 T
2 11 Q
(The following ar) 108.65 644.62 T
(e operations that pertain to \336le str) 189.18 644.62 T
(eams.) 353.64 644.62 T
3 12 Q
(c) 108.65 609.95 T
(lose) 113.94 609.95 T
0 11 Q
(G.f. method) 444.01 610.62 T
4 9 Q
(close) 135.65 589.95 T
5 F
(\336le-str) 168.05 589.95 T
(eam) 194.88 589.95 T
4 F
( #key) 211.37 589.95 T
5 F
(abort) 243.77 589.95 T
(wait?) 271.02 589.95 T
2 11 Q
(Closes a \336le str) 135.65 569.62 T
(eam. This method fr) 208.52 569.62 T
(ees whatever it can of any underlying) 306.52 569.62 T
(system r) 135.65 555.62 T
(esour) 176.56 555.62 T
(ces held on behalf of the str) 203.28 555.62 T
(eam.) 336.04 555.62 T
(If) 135.65 535.62 T
0 F
(abort) 145.77 535.62 T
2 F
( is false \050the default\051, any pending data is for) 168.57 535.62 T
(ced out and synchr) 385.12 535.62 T
(o-) 477.7 535.62 T
(nized with the \336le\325s destination. If) 135.65 521.62 T
0 F
(abort) 304.37 521.62 T
2 F
( is tr) 327.17 521.62 T
(ue, then any err) 348.38 521.62 T
(ors caused by) 424.72 521.62 T
(closing the \336le ar) 135.65 507.62 T
(e ignor) 218.4 507.62 T
(ed. Furthermor) 252.29 507.62 T
(e, if) 326.34 507.62 T
0 F
(abort) 346.73 507.62 T
2 F
( is tr) 369.53 507.62 T
(ue, the \336le should be) 390.74 507.62 T
(r) 135.65 493.62 T
(estor) 139.79 493.62 T
(ed to its initial state if possible \050for example, on a versioned \336le sys-) 163.47 493.62 T
(tem, the pr) 135.65 479.62 T
(evious version of the \336le should be r) 188.48 479.62 T
(estor) 365 479.62 T
(ed as the latest ver-) 388.67 479.62 T
(sion\051.) 135.65 465.62 T
3 12 Q
(with-open-\336le) 108.65 430.95 T
0 11 Q
(Macr) 466.94 431.62 T
(o) 490.76 431.62 T
4 9 Q
(with-open-file \050) 135.65 410.95 T
5 F
(str) 222.05 410.95 T
(eam-var) 232.88 410.95 T
4 F
( =) 266.39 410.95 T
5 F
(locator) 282.59 410.95 T
4 F
(, #rest) 311.6 410.95 T
5 F
(keys) 354.8 410.95 T
4 F
(\051) 372.8 410.95 T
5 F
(body) 383.6 410.95 T
4 F
( end) 403.44 410.95 T
2 11 Q
(Pr) 135.65 390.62 T
(ovides a safe mechanism for working with \336le str) 146.44 390.62 T
(eams. The macr) 386.12 390.62 T
(o cr) 462.17 390.62 T
(e-) 479.96 390.62 T
-0.18 (ates a \336le str) 135.65 376.62 P
-0.18 (eam and binds it to) 195.4 376.62 P
0 F
-0.18 (str) 290.81 376.62 P
-0.18 (eam-var) 302.84 376.62 P
2 F
-0.18 (, evaluates a) 338.07 376.62 P
0 F
-0.18 (body) 399.87 376.62 P
2 F
-0.18 ( of code within) 420.85 376.62 P
(the context of this binding, and then closes the str) 135.65 362.62 T
(eam. The macr) 376.09 362.62 T
(o calls) 447.48 362.62 T
4 9.5 Q
(close) 135.65 348.62 T
2 11 Q
( upon exiting) 164.15 348.62 T
0 F
(body) 231.5 348.62 T
2 F
(.) 251.26 348.62 T
(The) 135.65 328.62 T
0 F
(locator) 156.81 328.62 T
2 F
(ar) 189.69 328.62 T
(gument should evaluate to a valid ar) 199.34 328.62 T
(gument to) 377.93 328.62 T
4 9 Q
(as\050<locator>,) 135.65 307.95 T
5 F
(locator) 211.25 307.95 T
4 F
(\051) 240.26 307.95 T
2 11 Q
(The values of the last expr) 135.65 287.62 T
(ession in) 262.87 287.62 T
0 F
(body) 308.18 287.62 T
2 F
( ar) 329.16 287.62 T
(e r) 341.56 287.62 T
(eturned.) 353.72 287.62 T
(The) 135.65 267.62 T
0 F
(keys) 156.81 267.62 T
2 F
( ar) 175.75 267.62 T
(e passed to the) 188.15 267.62 T
4 9.5 Q
(make) 262.7 267.62 T
2 11 Q
( method on) 285.5 267.62 T
4 9.5 Q
(<file-stream>.) 343.85 267.62 T
2 11 Q
-0.04 (For example, the following expr) 135.65 247.62 P
-0.04 (ession yields the contents of \336le) 290.86 247.62 P
4 9.5 Q
-0.09 (foo.text) 447.34 247.62 P
2 11 Q
(as a) 135.65 233.62 T
4 9.5 Q
(<byte-vector>) 156.81 233.62 T
2 11 Q
(:) 230.91 233.62 T
4 9 Q
(with-open-file \050fs = \050"foo.text", element-type: <byte>\051\051) 135.65 212.95 T
(read-to-end\050fs\051) 146.45 201.95 T
(end;) 135.65 190.95 T
2 11 Q
(It is r) 135.65 170.62 T
(oughly equivalent to:) 160.45 170.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "28" 28
%%Page: "29" 29
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.6) 403.09 702.62 T
(Locking streams) 424.46 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(29) 477.65 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
4 F
0 X
(begin) 126.65 666.95 T
(let hidden-fs = #f;     // In case the user bashes fs variable) 137.45 655.95 T
(block \050\051) 137.45 644.95 T
(hidden-fs := make\050<file-stream>,) 148.25 633.95 T
(locator: "foo.text", element-type: <byte>\051;) 234.65 622.95 T
(let fs = hidden-fs;) 148.25 611.95 T
(read-to-end\050fs\051;) 148.25 600.95 T
(cleanup) 137.45 589.95 T
(if \050hidden-fs\051 close\050hidden-fs\051 end;) 148.25 578.95 T
(end block;) 137.45 567.95 T
(end;) 126.65 556.95 T
3 16 Q
(1.6  Loc) 99.65 523.29 T
(king streams) 148.27 523.29 T
2 11 Q
(Str) 99.65 502.62 T
(eam locks have multilocking semantics. That is, a single thr) 113.16 502.62 T
(ead can lock a) 400.87 502.62 T
(str) 99.65 488.62 T
(eam mor) 112.04 488.62 T
(e than once, but the thr) 155.14 488.62 T
(ead must unlock the str) 267.06 488.62 T
(eam for each time it) 381.04 488.62 T
(locked the str) 99.65 474.62 T
(eam. Furthermor) 165 474.62 T
(e, thr) 247.54 474.62 T
(eads waiting for a str) 272.45 474.62 T
(eam lock ar) 374.69 474.62 T
(e expected) 430.53 474.62 T
(to do so by blocking, not by \322spinning\323.) 99.65 460.62 T
(This allows a high-level printing r) 99.65 440.62 T
(outine to lock a str) 264.6 440.62 T
(eam acr) 354.4 440.62 T
(oss several calls to) 392.16 440.62 T
(output functions, ensuring all the output is contiguous at the str) 99.65 426.62 T
(eam\325s destina-) 410.38 426.62 T
(tion. For example, the) 99.65 412.62 T
4 9.5 Q
(write-line) 208.31 412.62 T
2 11 Q
( function locks its str) 265.31 412.62 T
(eam ar) 365.8 412.62 T
(gument and then) 398.68 412.62 T
(calls the) 99.65 398.62 T
4 9.5 Q
(write) 141.85 398.62 T
2 11 Q
( and) 170.35 398.62 T
4 9.5 Q
(new-line) 194.48 398.62 T
2 11 Q
( functions. The) 240.08 398.62 T
4 9.5 Q
(write) 314.93 398.62 T
2 11 Q
( function locks its str) 343.43 398.62 T
(eam) 443.93 398.62 T
(ar) 99.65 384.62 T
(gument by calling) 109.29 384.62 T
4 9.5 Q
(get-output-buffer) 199.97 384.62 T
2 11 Q
(, but because of the multilocking) 296.05 384.62 T
-0.57 (semantics, the call to) 99.65 370.62 P
4 9.5 Q
-1.18 (write) 200.63 370.62 P
2 11 Q
-0.57 ( within) 229.13 370.62 P
4 9.5 Q
-1.18 (write-line) 265.45 370.62 P
2 11 Q
-0.57 ( does not block waiting for a lock.) 322.45 370.62 P
(The same thing happens with) 99.65 356.62 T
4 9.5 Q
(new-line) 246.49 356.62 T
2 11 Q
(. Befor) 292.09 356.62 T
(e r) 323.39 356.62 T
(eturning,) 335.56 356.62 T
4 9.5 Q
(write-line) 383.01 356.62 T
2 11 Q
( unlocks) 440.01 356.62 T
-0.01 (the str) 99.65 342.62 P
-0.01 (eam so that other r) 130.04 342.62 P
-0.01 (outines may call output functions on the str) 220.99 342.62 P
-0.01 (eam or get) 432.62 342.62 P
(the str) 99.65 328.62 T
(eam\325s buf) 130.05 328.62 T
(fer for dir) 177.19 328.62 T
(ect manipulation.) 224.05 328.62 T
-0.35 (The Locking Pr) 99.65 308.62 P
-0.35 (otocol isolates access to a str) 173.11 308.62 P
-0.35 (eam so that only one thr) 308.26 308.62 P
-0.35 (ead may use) 424.05 308.62 P
(the str) 99.65 294.62 T
(eam at any time. In a single-thr) 130.05 294.62 T
(eaded Dylan implementation, these func-) 280.92 294.62 T
(tions do nothing.) 99.65 280.62 T
(The Buf) 99.65 260.62 T
(fer Access Pr) 137.63 260.62 T
(otocol functions that get a buf) 200.12 260.62 T
(fer \336rst lock the str) 344.73 260.62 T
(eam, and) 436.12 260.62 T
(those functions that r) 99.65 246.62 T
(elease the buf) 202.49 246.62 T
(fer unlock the str) 268.6 246.62 T
(eam. Thus, getting a buf) 351.02 246.62 T
(fer) 468.4 246.62 T
(both isolates access to the str) 99.65 232.62 T
(eam for a single thr) 238.68 232.62 T
(ead and ensur) 332.66 232.62 T
(es that the single) 401.39 232.62 T
-0.04 (thr) 99.65 218.62 P
-0.04 (ead does not try to get the str) 113.78 218.62 P
-0.04 (eam\325s buf) 255.17 218.62 P
-0.04 (fer multiple times while alr) 302.27 218.62 P
-0.04 (eady hold-) 434.34 218.62 P
(ing the buf) 99.65 204.62 T
(fer) 152.3 204.62 T
(.) 164.77 204.62 T
(The Buf) 99.65 184.62 T
(fer Access Pr) 137.63 184.62 T
(otocol isolates access to a buf) 200.12 184.62 T
(fer within a single thr) 340.79 184.62 T
(ead to) 445.52 184.62 T
(pr) 99.65 170.62 T
(event r) 110.41 170.62 T
(eentrancy pr) 144.04 170.62 T
(oblems and pr) 205.32 170.62 T
(ogramming mistakes. Essentially) 275.14 170.62 T
(, the light-) 434.52 170.62 T
-0.31 (weight buf) 99.65 156.62 P
-0.31 (fer locking ensur) 152.02 156.62 P
-0.31 (es that applications do not call output functions that) 233.22 156.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "29" 29
%%Page: "30" 30
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(30) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
(dir) 108.65 665.62 T
(ectly manipulate a str) 122.72 665.62 T
(eam\325s buf) 227.54 665.62 T
(fer fr) 274.67 665.62 T
(om within r) 298.51 665.62 T
(outines that ar) 355.84 665.62 T
(e alr) 425.82 665.62 T
(eady) 446.69 665.62 T
(dir) 108.65 651.62 T
(ectly manipulating the str) 122.72 651.62 T
(eam\325s buf) 247.74 651.62 T
(fer) 294.88 651.62 T
(. This situation must be forbidden) 307.34 651.62 T
(because the inner call to get the buf) 108.65 637.62 T
(fer cannot r) 279.86 637.62 T
(eliably r) 335.57 637.62 T
(eturn the state of the) 375.04 637.62 T
(str) 108.65 623.62 T
(eam\325s buf) 121.04 623.62 T
(fer while the application alr) 168.18 623.62 T
(eady holds the buf) 302.51 623.62 T
(fer) 392.8 623.62 T
(.) 405.26 623.62 T
3 12 Q
(stream-loc) 108.65 588.95 T
(ked?) 158.23 588.95 T
0 11 Q
(Function) 455.1 589.62 T
4 9 Q
(stream-locked?) 135.65 568.95 T
5 F
(str) 216.65 568.95 T
(eam) 227.48 568.95 T
4 F
( =>) 243.98 568.95 T
5 F
(boolean) 265.58 568.95 T
2 11 Q
(Returns) 135.65 548.62 T
4 9.5 Q
(#t) 176.65 548.62 T
2 11 Q
( if) 188.04 548.62 T
0 F
(str) 200.41 548.62 T
(eam) 212.43 548.62 T
2 F
( is locked and) 230.15 548.62 T
4 9.5 Q
(#f) 299.84 548.62 T
2 11 Q
( if it is not.) 311.24 548.62 T
3 12 Q
(loc) 108.65 513.95 T
(k-stream) 122.69 513.95 T
0 11 Q
(Function) 455.1 514.62 T
4 9 Q
(lock-stream) 135.65 493.95 T
5 F
(str) 200.45 493.95 T
(eam) 211.28 493.95 T
4 F
( => \050\051) 227.78 493.95 T
2 11 Q
(Locks) 135.65 473.62 T
0 F
(str) 166.79 473.62 T
(eam) 178.81 473.62 T
2 F
(.) 196.53 473.62 T
(If) 135.65 453.62 T
0 F
(str) 145.77 453.62 T
(eam) 157.79 453.62 T
2 F
( is alr) 175.51 453.62 T
(eady locked by another thr) 201.73 453.62 T
(ead, this function waits until it) 332.37 453.62 T
(gets the lock.) 135.65 439.62 T
(In a single-thr) 135.65 419.62 T
(eaded Dylan implementation, this function does nothing.) 203.41 419.62 T
3 12 Q
(unloc) 108.65 384.95 T
(k-stream) 134.71 384.95 T
0 11 Q
(Function) 455.1 385.62 T
4 9 Q
(unlock-stream) 135.65 364.95 T
5 F
(str) 211.25 364.95 T
(eam) 222.08 364.95 T
4 F
( => \050\051) 238.58 364.95 T
2 11 Q
(Releases) 135.65 344.62 T
0 F
(str) 179.58 344.62 T
(eam) 191.6 344.62 T
2 F
(\325s lock.) 209.33 344.62 T
(In a multi-thr) 135.65 324.62 T
(eaded Dylan implementation, str) 200.89 324.62 T
(eam locks can be taken) 361.16 324.62 T
(mor) 135.65 310.62 T
(e than once by a thr) 155.51 310.62 T
(ead, so they must be unlocked for each time they) 250.82 310.62 T
-0.21 (ar) 135.65 296.62 P
-0.21 (e locked. This function signals an err) 145.29 296.62 P
-0.21 (or if it is invoked in or) 321.96 296.62 P
-0.21 (der to r) 428.77 296.62 P
-0.21 (elease) 463.93 296.62 P
(a str) 135.65 282.62 T
(eam\325s lock and the curr) 156.29 282.62 T
(ent thr) 269.6 282.62 T
(ead does not actually hold that lock.) 301.74 282.62 T
(In a single-thr) 135.65 262.62 T
(eaded Dylan implementation, this function does nothing.) 203.41 262.62 T
3 12 Q
(with-stream-loc) 108.65 227.95 T
(ked) 181.19 227.95 T
0 11 Q
(Macr) 466.94 228.62 T
(o) 490.76 228.62 T
4 9 Q
(with-stream-locked \050) 135.65 207.95 T
5 F
(str) 243.65 207.95 T
(eam) 254.48 207.95 T
4 F
(\051) 270.98 207.95 T
5 F
(body) 281.78 207.95 T
4 F
( end) 301.63 207.95 T
2 11 Q
(Evalutes) 135.65 187.62 T
0 F
(body) 180.19 187.62 T
2 F
( in a context in which) 201.16 187.62 T
0 F
(str) 307.84 187.62 T
(eam) 319.86 187.62 T
2 F
( is locked.) 337.59 187.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "30" 30
%%Page: "31" 31
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.7) 376.41 702.62 T
(Using buffered streams) 397.79 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(31) 477.65 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
2 11 Q
0 X
(Upon exiting the body) 126.65 665.62 T
(, the code r) 234.89 665.62 T
(esulting fr) 288.17 665.62 T
(om the macr) 337.8 665.62 T
(o unlocks the) 398.52 665.62 T
(str) 126.65 651.62 T
(eam once, as a) 139.04 651.62 T
4 9.5 Q
(block) 211.5 651.62 T
2 11 Q
( cleanup.) 240 651.62 T
3 16 Q
(1.7  Using b) 99.65 616.29 T
(uff) 173.06 616.29 T
(ered streams) 189.7 616.29 T
2 11 Q
(A goal of the str) 99.65 595.62 T
(eams library is to pr) 177.35 595.62 T
(ovide ef) 274.5 595.62 T
(\336cient support for general use of) 313.4 595.62 T
-0.28 (buf) 99.65 581.62 P
-0.28 (fer) 115.83 581.62 P
-0.28 (ed I/O. At the same time, pr) 128.91 581.62 P
-0.28 (ogrammers using the library should not need) 265.33 581.62 P
-0.31 (to be concerned with buf) 99.65 567.62 P
-0.31 (fering in most cases. For most uses of buf) 219.08 567.62 P
-0.31 (fer) 416.41 567.62 P
-0.31 (ed str) 429.49 567.62 P
-0.31 (eams,) 456.31 567.62 P
(the buf) 99.65 553.62 T
(fering is transpar) 133.84 553.62 T
(ent, but pr) 216.95 553.62 T
(ograms r) 267.52 553.62 T
(equiring mor) 310.76 553.62 T
(e contr) 374.7 553.62 T
(ol can access) 407.75 553.62 T
(buf) 99.65 539.62 T
(fering functionality when appr) 115.83 539.62 T
(opriate. This section describes the available) 265.57 539.62 T
(buf) 99.65 525.62 T
(fering functionality) 115.83 525.62 T
(.) 208.74 525.62 T
3 13 Q
(1.7.1  Over) 99.65 492.29 T
(vie) 153.69 492.29 T
(w) 168.37 492.29 T
2 11 Q
(A buf) 99.65 472.62 T
(fer) 127.14 472.62 T
(ed str) 140.22 472.62 T
(eam maintains some sort of buf) 167.35 472.62 T
(fer) 319.86 472.62 T
(. All buf) 332.32 472.62 T
(fer) 371.71 472.62 T
(ed str) 384.79 472.62 T
(eams use the) 411.93 472.62 T
-0.17 (sealed class) 99.65 458.62 P
4 9.5 Q
-0.36 (<buffer>) 158.34 458.62 P
2 11 Q
-0.17 ( for their buf) 203.94 458.62 P
-0.17 (fers. Y) 264.66 458.62 P
-0.17 (ou can suggest a buf) 294.26 458.62 P
-0.17 (fer size when cr) 392.71 458.62 P
-0.17 (eat-) 468.63 458.62 P
(ing buf) 99.65 444.62 T
(fer) 134.3 444.62 T
(ed str) 147.38 444.62 T
(eams, but normally you do not need to do so. Str) 174.51 444.62 T
(eams imple-) 411.08 444.62 T
(mentations should choose buf) 99.65 430.62 T
(fer sizes that ar) 245.27 430.62 T
(e appr) 318.81 430.62 T
(opriate for the str) 349.7 430.62 T
(eam\325s) 434.14 430.62 T
(sour) 99.65 416.62 T
(ce or destination.) 121.1 416.62 T
(Instances of the class) 99.65 396.62 T
4 9.5 Q
(<buffer>) 203.57 396.62 T
2 11 Q
( also contain some state information. This state) 249.16 396.62 T
(information includes an index wher) 99.65 382.62 T
(e r) 273.81 382.62 T
(eading or writing should begin, and an) 285.98 382.62 T
(index that is the end of input to be r) 99.65 368.62 T
(ead, or the end of space available for writ-) 273.45 368.62 T
(ing.) 99.65 354.62 T
(Buf) 99.65 334.62 T
(fer) 116.47 334.62 T
(ed str) 129.55 334.62 T
(eams also maintain a) 156.68 334.62 T
0 F
(held) 261.2 334.62 T
2 F
( state, indicating whether the application) 279.54 334.62 T
(has taken the buf) 99.65 320.62 T
(fer for a str) 182.77 320.62 T
(eam and has not r) 236.21 320.62 T
(eleased it yet. When a thr) 323.02 320.62 T
(ead) 445.88 320.62 T
-0.25 (alr) 99.65 306.62 P
-0.25 (eady holds the buf) 112.5 306.62 P
-0.25 (fer for a str) 202.03 306.62 P
-0.25 (eam, it is an err) 254.72 306.62 P
-0.25 (or to get the buf) 328.27 306.62 P
-0.25 (fer again \050or any) 404.62 306.62 P
-0.15 (other buf) 99.65 292.62 P
-0.15 (fer for the same str) 144.04 292.62 P
-0.15 (eam\051; this pr) 234.53 292.62 P
-0.15 (operty holds for the one thr) 295.24 292.62 P
-0.15 (ead of a sin-) 428.26 292.62 P
(gle-thr) 99.65 278.62 T
(eaded Dylan implementation as well as for multi-thr) 132.03 278.62 T
(eaded implementa-) 387.47 278.62 T
(tions.) 99.65 264.62 T
3 13 Q
(1.7.2  Buff) 99.65 231.29 T
(er access pr) 150.5 231.29 T
(otocol) 212.54 231.29 T
2 11 Q
(This section describes the functions that users of buf) 99.65 211.62 T
(fer) 352.97 211.62 T
(ed str) 366.05 211.62 T
(eams invoke to) 393.18 211.62 T
(manipulate str) 99.65 197.62 T
(eam buf) 170.41 197.62 T
(fers dir) 209.82 197.62 T
(ectly) 244.58 197.62 T
(. These functions use corr) 266.42 197.62 T
(esponding func-) 389.9 197.62 T
(tions fr) 99.65 183.62 T
(om the Str) 134.07 183.62 T
(eam Extension Pr) 184.05 183.62 T
(otocol to do their work. For example,) 268.75 183.62 T
4 9.5 Q
(get-) 451.66 183.62 T
(input-buffer) 99.65 169.62 T
2 11 Q
( calls) 168.05 169.62 T
4 9.5 Q
(do-get-input-buffer) 195 169.62 T
2 11 Q
(. All Str) 302.48 169.62 T
(eam Extension Pr) 339.2 169.62 T
(otocol func-) 423.9 169.62 T
(tions ar) 99.65 155.62 T
(e named with a) 135.9 155.62 T
4 9.5 Q
(do-) 213.64 155.62 T
2 11 Q
( pr) 230.74 155.62 T
(e\336x on the corr) 244.25 155.62 T
(esponding Buf) 317.15 155.62 T
(fer Access Pr) 388.11 155.62 T
(otocol) 450.6 155.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "31" 31
%%Page: "32" 32
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(32) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
(function. Users should never call the Str) 108.65 665.62 T
(eam Extension Pr) 302.85 665.62 T
(otocol dir) 387.55 665.62 T
(ectly) 434.06 665.62 T
(.) 455.9 665.62 T
(Thr) 108.65 645.62 T
(eaded Dylan implementations should place system-dependent mutual) 125.94 645.62 T
(exclusion calls in the Buf) 108.65 631.62 T
(fer Access Pr) 228.71 631.62 T
(otocol functions. All str) 291.2 631.62 T
(eams implementa-) 404.69 631.62 T
-0.2 (tions ar) 108.65 617.62 P
-0.2 (e encouraged to check the buf) 144.71 617.62 P
-0.2 (fer) 288.47 617.62 P
-0.2 (-held state in the Buf) 301.55 617.62 P
-0.2 (fer Access Pr) 401.31 617.62 P
-0.2 (otocol) 463.4 617.62 P
(functions, and these functions should signal an err) 108.65 603.62 T
(or if the buf) 353.72 603.62 T
(fer is alr) 410.62 603.62 T
(eady) 450.11 603.62 T
(held. The separation of the Buf) 108.65 589.62 T
(fer Access Pr) 257.98 589.62 T
(otocol and the Str) 320.48 589.62 T
(eam Extension) 405.8 589.62 T
(Pr) 108.65 575.62 T
(otocol allows users to mor) 119.44 575.62 T
(e portably extend the buf) 246.91 575.62 T
(fer) 368.98 575.62 T
(ed str) 382.06 575.62 T
(eam pr) 409.2 575.62 T
(otocol to) 443.19 575.62 T
(new str) 108.65 561.62 T
(eam types. Pr) 144.64 561.62 T
(ogrammers avoid the following design and maintenance) 210.41 561.62 T
(hassles:) 108.65 547.62 T
(\245) 117.65 527.62 T
(Deciding whether to write for a thr) 135.65 527.62 T
(eaded or non-thr) 305.72 527.62 T
(eaded Dylan imple-) 387.66 527.62 T
(mentation.) 135.65 513.62 T
(\245) 117.65 493.62 T
(Rewriting mutual exclusion code for each Dylan implementation.) 135.65 493.62 T
(\245) 117.65 473.62 T
-0.06 (Having to duplicate mutual exclusion code wher) 135.65 473.62 P
-0.06 (ever the application uses) 372.62 473.62 P
(str) 135.65 459.62 T
(eam buf) 148.04 459.62 T
(fers dir) 187.46 459.62 T
(ectly) 222.22 459.62 T
(.) 244.05 459.62 T
(Pr) 108.65 439.62 T
(ograms that manipulate buf) 119.44 439.62 T
(fers ar) 254.9 439.62 T
(e entir) 285.24 439.62 T
(ely r) 315.87 439.62 T
(esponsible for tracking the) 337.35 439.62 T
-0.1 (buf) 108.65 425.62 P
-0.1 (fer) 124.83 425.62 P
-0.1 (\325s state and informing the str) 138.92 425.62 P
-0.1 (eam of any changes to the buf) 277.81 425.62 P
-0.1 (fer) 422.12 425.62 P
-0.1 (\325s state. The) 436.22 425.62 P
(technique for using a buf) 108.65 411.62 T
(fer is to get the input or output buf) 230.16 411.62 T
(fer and its bounds,) 399.15 411.62 T
-0.01 (consume or pr) 108.65 397.62 P
-0.01 (oduce data, update the buf) 178.8 397.62 P
-0.01 (fer) 309.07 397.62 P
-0.01 (\325s state, and then r) 323.17 397.62 P
-0.01 (elease the buf) 411.62 397.62 P
-0.01 (fer) 477.7 397.62 P
-0.01 (.) 490.16 397.62 P
(The new bounds ar) 108.65 383.62 T
(e indicated by calling) 202.31 383.62 T
4 9.5 Q
(buffer-next-setter) 308.77 383.62 T
2 11 Q
( and) 411.37 383.62 T
4 9.5 Q
(buffer-) 435.49 383.62 T
(end-setter) 108.65 369.62 T
2 11 Q
(. Using buf) 164.83 369.62 T
(fers dir) 218.21 369.62 T
(ectly inter) 252.97 369.62 T
(operates with using higher) 301.38 369.62 T
(-level func-) 431.79 369.62 T
(tions such as) 108.65 355.62 T
4 9.5 Q
(read-element) 173.5 355.62 T
2 11 Q
(,) 241.9 355.62 T
4 9.5 Q
(read) 247.4 355.62 T
2 11 Q
(,) 270.2 355.62 T
4 9.5 Q
(write-element) 275.7 355.62 T
2 11 Q
(,) 349.8 355.62 T
4 9.5 Q
(write) 355.3 355.62 T
2 11 Q
(, and so on. This is) 383.8 355.62 T
(because higher) 108.65 341.62 T
(-level str) 181.24 341.62 T
(eam operations ar) 223.2 341.62 T
(e implemented in terms of the Buf) 310.42 341.62 T
(fer) 476.07 341.62 T
(Access Pr) 108.65 327.62 T
(otocol for instances of) 155.11 327.62 T
4 9.5 Q
(<buffered-stream>) 264.06 327.62 T
2 11 Q
(.) 360.96 327.62 T
3 13 Q
(1.7.2.1  Useful types when using b) 108.65 294.29 T
(uff) 281.46 294.29 T
(er) 294.98 294.29 T
(s) 304.91 294.29 T
3 12 Q
(<b) 108.65 259.95 T
(yte>) 120.23 259.95 T
0 11 Q
(T) 474.66 260.62 T
(ype) 480.37 260.62 T
2 F
(A type r) 135.65 238.62 T
(epr) 175.43 238.62 T
(esenting limited integers in the range 0 to 255 inclusive.) 191.46 238.62 T
3 12 Q
(<b) 108.65 203.95 T
(yte-c) 120.23 203.95 T
(haracter>) 143.11 203.95 T
0 11 Q
(T) 474.66 204.62 T
(ype) 480.37 204.62 T
2 F
(A type r) 135.65 182.62 T
(epr) 175.43 182.62 T
(esenting 8-bit characters that instances of) 191.46 182.62 T
4 9.5 Q
(<byte-string>) 393.6 182.62 T
2 11 Q
( can) 467.7 182.62 T
(contain.) 135.65 168.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "32" 32
%%Page: "33" 33
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.7) 376.41 702.62 T
(Using buffered streams) 397.79 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(33) 477.65 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
3 12 Q
0 X
(<unicode-c) 99.65 664.95 T
(haracter>) 151.79 664.95 T
0 11 Q
(T) 465.66 665.62 T
(ype) 471.37 665.62 T
2 F
(A type r) 126.65 643.62 T
(epr) 166.43 643.62 T
(esenting Unicode characters that instances of) 182.46 643.62 T
4 9.5 Q
(<unicode-) 403.61 643.62 T
(string>) 126.65 629.62 T
2 11 Q
( can contain.) 166.55 629.62 T
3 12 Q
(<b) 99.65 594.95 T
(yte-vector>) 111.23 594.95 T
0 11 Q
(T) 465.66 595.62 T
(ype) 471.37 595.62 T
2 F
(A subtype of) 126.65 573.62 T
4 9.5 Q
(<vector>) 192.09 573.62 T
2 11 Q
( whose element-type is) 237.69 573.62 T
4 9.5 Q
(<byte>) 352.02 573.62 T
2 11 Q
(.) 386.22 573.62 T
3 12 Q
(<b) 99.65 538.95 T
(uff) 111.23 538.95 T
(er>) 123.71 538.95 T
0 11 Q
(Sealed instantiable class) 379.9 539.62 T
2 F
(A subclass of) 126.65 517.62 T
4 9.5 Q
(<vector>) 193.42 517.62 T
2 11 Q
( whose) 239.02 517.62 T
4 9.5 Q
(element-type) 276.03 517.62 T
2 11 Q
( is) 344.43 517.62 T
4 9.5 Q
(<byte>) 357.8 517.62 T
2 11 Q
(.) 392 517.62 T
(Instances of) 126.65 497.62 T
4 9.5 Q
(<buffer>) 186.9 497.62 T
2 11 Q
( contain a data vector and two indices: the inclusive) 232.49 497.62 T
(start and the exclusive end of valid data in the buf) 126.65 483.62 T
(fer) 369.97 483.62 T
(. The accessors for) 382.43 483.62 T
-0.17 (these indexes ar) 126.65 469.62 P
-0.17 (e called) 203.85 469.62 P
4 9.5 Q
-0.35 (buffer-next) 243.05 469.62 P
2 11 Q
-0.17 ( and) 305.75 469.62 P
4 9.5 Q
-0.35 (buffer-end) 329.54 469.62 P
2 11 Q
-0.17 (. This class supports) 386.54 469.62 P
(thr) 126.65 455.62 T
(ee init-keywor) 140.78 455.62 T
(ds:) 210.95 455.62 T
4 9.5 Q
(size:) 227.84 455.62 T
2 11 Q
(,) 256.34 455.62 T
4 9.5 Q
(next:) 261.84 455.62 T
2 11 Q
( \050defaults to zer) 290.34 455.62 T
(o\051, and) 365.99 455.62 T
4 9.5 Q
(end:) 402.54 455.62 T
2 11 Q
( \050defaults to) 425.34 455.62 T
(zer) 126.65 441.62 T
(o\051.) 141.56 441.62 T
-0.41 (Note that) 126.65 421.62 P
4 9.5 Q
-0.86 (size:) 174.4 421.62 P
2 11 Q
-0.41 ( is not taken as a suggestion of the size the user would like,) 202.9 421.62 P
(as with the value passed with) 126.65 407.62 T
4 9.5 Q
(buffer-size:) 273.54 407.62 T
2 11 Q
( to) 341.94 407.62 T
4 9.5 Q
(make) 357.03 407.62 T
2 11 Q
( on) 379.83 407.62 T
4 9.5 Q
(<buffered-) 397.74 407.62 T
(stream>) 126.65 393.62 T
2 11 Q
(; if you supply a value with the) 166.55 393.62 T
4 9.5 Q
(size:) 320.69 393.62 T
2 11 Q
( init-keywor) 349.19 393.62 T
(d, that size is) 408.82 393.62 T
(allocated, or) 126.65 379.62 T
(, if that is not possible, an err) 185.55 379.62 T
(or is signalled, as with making) 325.46 379.62 T
(any vector) 126.65 365.62 T
(.) 176.91 365.62 T
3 12 Q
(<b) 99.65 330.95 T
(uff) 111.23 330.95 T
(er) 123.71 330.95 T
(-inde) 132.83 330.95 T
(x>) 156.2 330.95 T
0 11 Q
(T) 465.66 331.62 T
(ype) 471.37 331.62 T
2 F
(A subtype of) 126.65 309.62 T
4 9.5 Q
(<integer>) 192.09 309.62 T
2 11 Q
(.) 243.39 309.62 T
(All buf) 126.65 289.62 T
(fer) 160.54 289.62 T
(-index r) 173.62 289.62 T
(eturn values and parameters ar) 211.45 289.62 T
(e of this type. See also) 363.24 289.62 T
(Harlequin and CMU\325s pr) 126.65 275.62 T
(oposal for) 248.63 275.62 T
4 9.5 Q
(<integer>) 300.13 275.62 T
2 11 Q
(.) 351.43 275.62 T
3 13 Q
(1.7.2.2  Using b) 99.65 242.29 T
(uff) 177.08 242.29 T
(er) 190.6 242.29 T
(s f) 200.53 242.29 T
(or input) 212.77 242.29 T
3 12 Q
(g) 99.65 207.95 T
(et-input-b) 105.76 207.95 T
(uff) 150.94 207.95 T
(er) 163.42 207.95 T
0 11 Q
(Function) 446.1 208.62 T
4 9 Q
(get-input-buffer) 126.65 187.95 T
5 F
(buf) 218.45 187.95 T
(fer) 230.95 187.95 T
(ed-str) 241.28 187.95 T
(eam) 264.62 187.95 T
4 F
(, #key) 281.11 187.95 T
5 F
(wait?) 318.92 187.95 T
4 F
(,) 341.91 187.95 T
5 F
(bytes) 352.71 187.95 T
4 F
( =>) 374.04 187.95 T
5 F
(buf) 395.64 187.95 T
(fer-or-false) 408.14 187.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "33" 33
%%Page: "34" 34
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(34) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
(Calls) 135.65 665.62 T
4 9.5 Q
(do-get-input-buffer) 162.76 665.62 T
2 11 Q
( to r) 271.06 665.62 T
(eturn a buf) 290.3 665.62 T
(fer for the str) 343.72 665.62 T
(eam. Y) 406.91 665.62 T
(ou should) 439.22 665.62 T
(never call) 135.65 651.62 T
4 9.5 Q
(do-get-input-buffer) 185.43 651.62 T
2 11 Q
( dir) 293.73 651.62 T
(ectly) 310.55 651.62 T
(.) 332.39 651.62 T
(The str) 135.65 631.62 T
(eam extension function signals an err) 169.21 631.62 T
(or if) 350.1 631.62 T
0 F
(buffer) 372.82 631.62 T
(ed-str) 398.5 631.62 T
(eam) 423.97 631.62 T
2 F
( is an out-) 441.69 631.62 T
(put-only str) 135.65 617.62 T
(eam, or if it cannot r) 193.01 617.62 T
(eturn a buf) 290.92 617.62 T
(fer for any r) 344.34 617.62 T
(eason.) 402.05 617.62 T
-0.01 (The) 135.65 597.62 P
0 F
-0.01 (wait?) 156.8 597.62 P
2 F
-0.01 ( keywor) 181.84 597.62 P
-0.01 (d is a) 221.41 597.62 P
4 9.5 Q
-0.03 (<boolean>) 249.7 597.62 P
2 11 Q
-0.01 ( and defaults to) 301 597.62 P
4 9.5 Q
-0.03 (#t) 379.39 597.62 P
2 11 Q
-0.01 (. It indicates whether) 390.79 597.62 P
4 9.5 Q
(get-input-buffer) 135.65 583.62 T
2 11 Q
( should ensur) 226.85 583.62 T
(e that ther) 293.09 583.62 T
(e is valid data in the input) 342.34 583.62 T
(buf) 135.65 569.62 T
(fer) 151.83 569.62 T
(, and block for input if necessary) 164.29 569.62 T
(.) 321.66 569.62 T
-0.11 (When) 135.65 549.62 P
0 F
-0.11 (wait?) 167.36 549.62 P
2 F
-0.11 ( is) 192.41 549.62 P
4 9.5 Q
-0.23 (#f) 205.55 549.62 P
2 11 Q
-0.11 (, this function r) 216.95 549.62 P
-0.11 (eturns the str) 290.4 549.62 P
-0.11 (eam\325s curr) 354.23 549.62 P
-0.11 (ent buf) 405.08 549.62 P
-0.11 (fer in what-) 439.16 549.62 P
(ever state it is in.) 135.65 535.62 T
(When) 135.65 515.62 T
0 F
(wait?) 167.47 515.62 T
2 F
( is) 192.52 515.62 T
4 9.5 Q
(#t) 205.88 515.62 T
2 11 Q
(,) 217.28 515.62 T
4 9.5 Q
(do-get-input-buffer) 222.78 515.62 T
2 11 Q
( waits until ther) 331.08 515.62 T
(e is some valid) 407.89 515.62 T
(data in the buf) 135.65 501.62 T
(fer) 206.25 501.62 T
(. If) 218.71 501.62 T
4 9.5 Q
(do-get-input-buffer) 234.33 501.62 T
2 11 Q
( needs to wait for valid data,) 342.63 501.62 T
-0.1 (and it encounters the end of the str) 135.65 487.62 P
-0.1 (eam befor) 304.05 487.62 P
-0.1 (e any valid data arrives, then) 352.36 487.62 P
4 9.5 Q
(do-get-input-buffer) 135.65 473.62 T
2 11 Q
( r) 243.95 473.62 T
(eturns) 250.85 473.62 T
4 9.5 Q
(#f) 284.49 473.62 T
2 11 Q
(.) 295.89 473.62 T
(When) 135.65 453.62 T
0 F
(bytes) 167.47 453.62 T
2 F
( is supplied,) 190.29 453.62 T
0 F
(wait?) 252.06 453.62 T
2 F
( has no ef) 277.11 453.62 T
(fect. The) 323.07 453.62 T
0 F
(bytes) 367.13 453.62 T
2 F
( keywor) 389.95 453.62 T
(d is an) 429.52 453.62 T
4 9.5 Q
(<integer>) 135.65 439.62 T
2 11 Q
( or) 186.95 439.62 T
4 9.5 Q
(#f) 202.8 439.62 T
2 11 Q
(, and is the minimum number of bytes that must be) 214.2 439.62 T
(pr) 135.65 425.62 T
(esent in the buf) 146.41 425.62 T
(fer when it is r) 220.89 425.62 T
(eturned. If) 291.21 425.62 T
4 9.5 Q
(do-get-input-buffer) 345.05 425.62 T
2 11 Q
( cannot) 453.36 425.62 T
(r) 135.65 411.62 T
(eturn a buf) 139.79 411.62 T
(fer with the speci\336ed minimum number of bytes, it signals an) 193.21 411.62 T
4 9.5 Q
(<incomplete-read-error>) 135.65 397.62 T
2 11 Q
(.) 266.75 397.62 T
(V) 135.65 377.62 T
(alues supplied for) 142.58 377.62 T
0 F
(bytes) 233.02 377.62 T
2 F
( should be small r) 255.83 377.62 T
(elative to a buf) 342.24 377.62 T
(fer) 414 377.62 T
(\325s size. If you) 428.09 377.62 T
(need to r) 135.65 363.62 T
(ead lar) 178.55 363.62 T
(ge numbers of bytes at once, specify a lar) 211.64 363.62 T
(ge buf) 410.67 363.62 T
(fer size) 440.99 363.62 T
(when making the str) 135.65 349.62 T
(eam and do not specify any values for the) 235.85 349.62 T
0 F
(bytes) 441.6 349.62 T
2 F
( key-) 464.42 349.62 T
(wor) 135.65 335.62 T
(d parameter) 154.98 335.62 T
(. When) 213.77 335.62 T
0 F
(bytes) 251.09 335.62 T
2 F
( is not) 273.91 335.62 T
4 9.5 Q
(#f) 306.02 335.62 T
2 11 Q
(,) 317.42 335.62 T
4 9.5 Q
(get-input-buffer) 322.92 335.62 T
2 11 Q
( may block for) 414.12 335.62 T
(input if necessary) 135.65 321.62 T
(.) 220.34 321.62 T
(If an application thr) 135.65 301.62 T
(ead calls) 232.01 301.62 T
4 9.5 Q
(get-input-buffer) 276.45 301.62 T
2 11 Q
(, and another thr) 366.83 301.62 T
(ead) 448.1 301.62 T
(alr) 135.65 287.62 T
(eady holds any buf) 148.5 287.62 T
(fer the str) 241.54 287.62 T
(eam owns, then this function might block.) 287.98 287.62 T
(Multi-thr) 135.65 273.62 T
(eaded implementations should eventually r) 180.47 273.62 T
(eturn. In multi-) 392.44 273.62 T
(thr) 135.65 259.62 T
(eaded implementations this function calls lock-str) 149.78 259.62 T
(eam befor) 391.68 259.62 T
(e calling) 440.08 259.62 T
(do-get-input-buf) 135.65 245.62 T
(fer) 216.95 245.62 T
(, and it does not r) 229.41 245.62 T
(elease the lock.) 314.12 245.62 T
-0.01 (If an application\325s thr) 135.65 225.62 P
-0.01 (ead calls this function, and that same thr) 239.71 225.62 P
-0.01 (ead alr) 436.22 225.62 P
-0.01 (eady) 469.3 225.62 P
(holds the buf) 135.65 211.62 T
(fer) 199.58 211.62 T
(, this situation is a r) 212.04 211.62 T
(e-entrancy pr) 306.69 211.62 T
(ogrammer err) 371.63 211.62 T
(or) 439.15 211.62 T
(. The) 448.69 211.62 T
(str) 135.65 197.62 T
(eam cannot r) 148.04 197.62 T
(eturn the buf) 210.95 197.62 T
(fer and guarantee that its state is up to date) 274.13 197.62 T
(with input consumption that occurr) 135.65 183.62 T
(ed between the \336rst call to this func-) 309.52 183.62 T
(tion and the curr) 135.65 169.62 T
(ent call. Implementations should detect and signal this) 216.98 169.62 T
(err) 135.65 155.62 T
(or) 149.41 155.62 T
(.) 158.95 155.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "34" 34
%%Page: "35" 35
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.7) 376.41 702.62 T
(Using buffered streams) 397.79 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(35) 477.65 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
3 12 Q
0 X
(release-input-b) 99.65 664.95 T
(uff) 170 664.95 T
(er) 182.48 664.95 T
0 11 Q
(Function) 446.1 665.62 T
4 9 Q
(release-input-buffer) 126.65 644.95 T
5 F
(buf) 240.05 644.95 T
(fer) 252.55 644.95 T
(ed-str) 262.88 644.95 T
(eam) 286.22 644.95 T
4 F
( => \050\051) 302.71 644.95 T
2 11 Q
(Call this function to announce that you have \336nished using the str) 126.65 624.62 T
(eam\325s) 447.52 624.62 T
-0.44 (curr) 126.65 610.62 P
-0.44 (ent buf) 146.66 610.62 P
-0.44 (fer) 180.4 610.62 P
-0.44 (. Ther) 192.87 610.62 P
-0.44 (e may still be valid input in the buf) 220.49 610.62 P
-0.44 (fer even though you) 387.08 610.62 P
(have \336nished with it.) 126.65 596.62 T
(This function calls) 126.65 576.62 T
4 9.5 Q
(do-release-input-buffer) 218.13 576.62 T
2 11 Q
( so that the str) 349.23 576.62 T
(eam can per-) 417.63 576.62 T
(form any r) 126.65 562.62 T
(ecor) 178.04 562.62 T
(d-keeping or management tasks it has. Y) 198.35 562.62 T
(ou should never) 394.99 562.62 T
(call) 126.65 548.62 T
4 9.5 Q
(do-release-input-buffer) 146.18 548.62 T
2 11 Q
( dir) 277.28 548.62 T
(ectly) 294.1 548.62 T
(.) 315.94 548.62 T
-0.22 (After consuming input fr) 126.65 528.62 P
-0.22 (om the buf) 247.94 528.62 P
-0.22 (fer) 300.16 528.62 P
-0.22 (, you must update the buf) 312.63 528.62 P
-0.22 (fer) 437.16 528.62 P
-0.22 (\325s state) 451.25 528.62 P
(by assigning to) 126.65 514.62 T
4 9.5 Q
(buffer-next) 202.96 514.62 T
2 11 Q
( befor) 265.65 514.62 T
(e r) 293.57 514.62 T
(eleasing the buf) 305.74 514.62 T
(fer) 382.3 514.62 T
(. When a user of) 394.76 514.62 T
(the Buf) 126.65 500.62 T
(fer Access Pr) 161.47 500.62 T
(otocol sets) 223.96 500.62 T
4 9.5 Q
(buffer-end) 277.34 500.62 T
2 11 Q
(, the r) 334.34 500.62 T
(esults ar) 361.99 500.62 T
(e unde\336ned.) 402.4 500.62 T
(If the calling application does not hold the buf) 126.65 480.62 T
(fer) 350.9 480.62 T
(, this function signals an) 363.37 480.62 T
(err) 126.65 466.62 T
(or) 140.41 466.62 T
(.) 149.95 466.62 T
(In multi-thr) 126.65 446.62 T
(eaded implementations,) 183.64 446.62 T
4 9.5 Q
(release-input-buffer) 303.69 446.62 T
2 11 Q
( r) 417.69 446.62 T
(eleases the) 424.59 446.62 T
(lock obtained in) 126.65 432.62 T
4 9.5 Q
(get-input-buffer) 207.48 432.62 T
2 11 Q
(.) 297.86 432.62 T
3 12 Q
(with-input-b) 99.65 397.95 T
(uff) 155.76 397.95 T
(er) 168.24 397.95 T
0 11 Q
(Macr) 457.94 398.62 T
(o) 481.76 398.62 T
4 9 Q
(with-input-buffer \050) 126.65 377.95 T
5 F
(buf) 229.25 377.95 T
(fer-var) 241.75 377.95 T
4 F
( =) 269.25 377.95 T
5 F
(exp) 285.45 377.95 T
4 F
(, #key) 298.95 377.95 T
5 F
(wait?) 336.75 377.95 T
4 F
(,) 359.75 377.95 T
5 F
(bytes) 370.55 377.95 T
4 F
(\051) 391.88 377.95 T
5 F
(body) 402.68 377.95 T
4 F
( end;) 422.52 377.95 T
2 11 Q
(Calls) 126.65 357.62 T
4 9.5 Q
(get-input-buffer) 153.76 357.62 T
2 11 Q
( on) 244.96 357.62 T
0 F
(exp) 262.87 357.62 T
2 F
(,) 278.15 357.62 T
0 F
(wait?) 283.65 357.62 T
2 F
(, and) 308.7 357.62 T
0 F
(bytes) 335.57 357.62 T
2 F
(, binding) 358.38 357.62 T
0 F
(buffer-var) 404.76 357.62 T
2 F
( to the) 448.97 357.62 T
(r) 126.65 343.62 T
(esult, then executes) 130.79 343.62 T
0 F
(body) 228.06 343.62 T
2 F
( within the scope of the buf) 249.03 343.62 T
(fer binding.) 381.3 343.62 T
(After the) 126.65 323.62 T
0 F
(body) 172.83 323.62 T
2 F
( has executed,) 193.8 323.62 T
4 9.5 Q
(with-input-buffer) 264.68 323.62 T
2 11 Q
( calls) 361.58 323.62 T
4 9.5 Q
(release-input-) 388.53 323.62 T
(buffer) 126.65 309.62 T
2 11 Q
( and r) 160.85 309.62 T
(eturns any values r) 189.12 309.62 T
(eturned by) 281.91 309.62 T
0 F
(body) 337.84 309.62 T
2 F
(.) 357.59 309.62 T
3 12 Q
(ne) 99.65 274.95 T
(xt-input-b) 111 274.95 T
(uff) 156.18 274.95 T
(er) 168.66 274.95 T
0 11 Q
(Function) 446.1 275.62 T
4 9 Q
(next-input-buffer) 126.65 254.95 T
5 F
(buf) 223.85 254.95 T
(fer) 236.35 254.95 T
(ed-str) 246.68 254.95 T
(eam) 270.02 254.95 T
4 F
( #key) 286.52 254.95 T
5 F
(wait?) 318.92 254.95 T
4 F
(,) 341.91 254.95 T
5 F
(bytes) 352.71 254.95 T
4 F
( =>) 374.04 254.95 T
5 F
(buf) 395.64 254.95 T
(fer-or-false) 408.14 254.95 T
2 11 Q
-0.17 (Call this function to get mor) 126.65 234.62 P
-0.17 (e input when you ar) 262.32 234.62 P
-0.17 (e alr) 360 234.62 P
-0.17 (eady holding) 380.7 234.62 P
0 F
-0.17 (buffer) 447.52 234.62 P
-0.17 (ed-) 473.21 234.62 P
(str) 126.65 220.62 T
(eam) 138.67 220.62 T
2 F
(\325s buf) 156.39 220.62 T
(fer) 183.04 220.62 T
(. If the application does not hold the str) 195.51 220.62 T
(eam\325s buf) 386.23 220.62 T
(fer) 433.36 220.62 T
(, this) 445.82 220.62 T
(function signals an err) 126.65 206.62 T
(or) 235.09 206.62 T
(.) 244.62 206.62 T
(This function calls) 126.65 186.62 T
4 9.5 Q
(do-next-input-buffer) 218.13 186.62 T
2 11 Q
( to get mor) 332.14 186.62 T
(e input. Y) 384.81 186.62 T
(ou should) 431.09 186.62 T
(never call) 126.65 172.62 T
4 9.5 Q
(do-next-input-buffer) 176.43 172.62 T
2 11 Q
( dir) 290.43 172.62 T
(ectly) 307.25 172.62 T
(.) 329.09 172.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "35" 35
%%Page: "36" 36
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(36) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
(Y) 135.65 665.62 T
(ou must update the buf) 141.97 665.62 T
(fer) 255.97 665.62 T
(\325s state by assigning to) 270.06 665.62 T
4 9.5 Q
(buffer-next) 382.19 665.62 T
2 11 Q
( befor) 444.89 665.62 T
(e) 472.81 665.62 T
(getting the next buf) 135.65 651.62 T
(fer; otherwise, it might seem that the curr) 230.54 651.62 T
(ent buf) 431.55 651.62 T
(fer) 465.74 651.62 T
(still has valid input in it. When) 135.65 637.62 T
4 9.5 Q
(buffer-next) 288.8 637.62 T
2 11 Q
( =) 351.5 637.62 T
4 9.5 Q
(buffer-end) 363.67 637.62 T
2 11 Q
( ther) 420.67 637.62 T
(e is no) 442.82 637.62 T
(valid input r) 135.65 623.62 T
(emaining in the curr) 196.57 623.62 T
(ent buf) 295.49 623.62 T
(fer) 329.68 623.62 T
(.) 342.14 623.62 T
(If a user of the Buf) 135.65 603.62 T
(fer Access Pr) 224.92 603.62 T
(otocol sets) 287.42 603.62 T
4 9.5 Q
(buffer-end) 340.79 603.62 T
2 11 Q
( while holding the) 397.79 603.62 T
(str) 135.65 589.62 T
(eam\325s buf) 148.04 589.62 T
(fer) 195.18 589.62 T
(, the r) 207.64 589.62 T
(esults ar) 235.3 589.62 T
(e unde\336ned.) 275.71 589.62 T
(The str) 135.65 569.62 T
(eam extension function may r) 169.21 569.62 T
(eturn a new) 313.42 569.62 T
4 9.5 Q
(<buffer>) 374.25 569.62 T
2 11 Q
( object or the) 419.85 569.62 T
-0.01 (curr) 135.65 555.62 P
-0.01 (ent one with) 155.66 555.62 P
4 9.5 Q
-0.02 (buffer-next) 219.17 555.62 P
2 11 Q
-0.01 ( and) 281.87 555.62 P
4 9.5 Q
-0.02 (buffer-end) 305.97 555.62 P
2 11 Q
-0.01 ( updated to r) 362.97 555.62 P
-0.01 (e\337ect the loca-) 425.96 555.62 P
(tion of the new input data. Y) 135.65 541.62 T
(ou should not make any assumptions about) 273.93 541.62 T
(which option a str) 135.65 527.62 T
(eam\325s implementation uses.) 223.67 527.62 T
(The) 135.65 507.62 T
4 9.5 Q
(do-next-input-buffer) 156.81 507.62 T
2 11 Q
( function signals an err) 270.81 507.62 T
(or when the curr) 382 507.62 T
(ent) 463.11 507.62 T
(buf) 135.65 493.62 T
(fer is not held for input.) 151.83 493.62 T
(The) 135.65 473.62 T
0 F
(wait?) 156.81 473.62 T
2 F
( and) 181.86 473.62 T
0 F
(bytes) 205.98 473.62 T
2 F
( ar) 228.8 473.62 T
(guments ar) 241.19 473.62 T
(e the same as for) 295.97 473.62 T
4 9.5 Q
(get-input-buffer) 379.57 473.62 T
2 11 Q
(.) 469.96 473.62 T
3 12 Q
(input-a) 108.65 438.95 T
(v) 141.31 438.95 T
(ailab) 146.6 438.95 T
(le-at-sour) 168.95 438.95 T
(ce?) 213.6 438.95 T
0 11 Q
(Function) 455.1 439.62 T
4 9 Q
(input-available-at-source?) 135.65 418.95 T
5 F
(buf) 281.45 418.95 T
(fer) 293.95 418.95 T
(ed-str) 304.28 418.95 T
(eam) 327.62 418.95 T
4 F
( =>) 344.11 418.95 T
5 F
(available?) 365.71 418.95 T
2 11 Q
(Returns) 135.65 398.62 T
4 9.5 Q
(#t) 176.65 398.62 T
2 11 Q
( when) 188.04 398.62 T
0 F
(buffer) 220.79 398.62 T
(ed-str) 246.48 398.62 T
(eam) 271.94 398.62 T
2 F
(\325s sour) 289.66 398.62 T
(ce has any available input or when) 321.58 398.62 T
(the str) 135.65 384.62 T
(eam is at the end of its sour) 166.05 384.62 T
(ce. If this function r) 298.95 384.62 T
(eturns) 393 384.62 T
4 9.5 Q
(#t) 426.65 384.62 T
2 11 Q
(, the next) 438.05 384.62 T
(call to) 135.65 370.62 T
4 9.5 Q
(next-input-buffer) 167.53 370.62 T
2 11 Q
( will not block.) 264.43 370.62 T
(This function calls) 135.65 350.62 T
4 9.5 Q
(do-input-available-at-source?) 227.13 350.62 T
2 11 Q
( to get mor) 392.43 350.62 T
(e input.) 445.11 350.62 T
(Y) 135.65 336.62 T
(ou should never call) 141.97 336.62 T
4 9.5 Q
(do-input-available-at-source?) 243.52 336.62 T
2 11 Q
( dir) 408.83 336.62 T
(ectly) 425.64 336.62 T
(.) 447.48 336.62 T
(Call this function while you ar) 135.65 316.62 T
(e holding a str) 283.38 316.62 T
(eam\325s buf) 352.84 316.62 T
(fer) 399.98 316.62 T
(. If the applica-) 412.44 316.62 T
(tion does not hold the str) 135.65 302.62 T
(eam\325s buf) 257.23 302.62 T
(fer) 304.37 302.62 T
(, this function signals an err) 316.83 302.62 T
(or) 451.37 302.62 T
(.) 460.91 302.62 T
(The str) 135.65 282.62 T
(eam extension function signals an err) 169.21 282.62 T
(or when the curr) 350.1 282.62 T
(ent buf) 431.22 282.62 T
(fer is) 465.41 282.62 T
(not held for input.) 135.65 268.62 T
3 13 Q
(1.7.2.3  Using b) 108.65 235.29 T
(uff) 186.08 235.29 T
(er) 199.6 235.29 T
(s f) 209.53 235.29 T
(or output) 221.77 235.29 T
3 12 Q
(g) 108.65 200.95 T
(et-output-b) 114.76 200.95 T
(uff) 166.49 200.95 T
(er) 178.97 200.95 T
0 11 Q
(Function) 455.1 201.62 T
4 9 Q
(get-output-buffer) 135.65 180.95 T
5 F
(buf) 232.85 180.95 T
(fer) 245.35 180.95 T
(ed-str) 255.68 180.95 T
(eam) 279.02 180.95 T
4 F
(, #key) 295.52 180.95 T
5 F
(bytes) 333.32 180.95 T
4 F
( =>) 354.64 180.95 T
5 F
(buf) 376.24 180.95 T
(fer) 388.75 180.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "36" 36
%%Page: "37" 37
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.7) 376.41 702.62 T
(Using buffered streams) 397.79 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(37) 477.65 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
2 11 Q
0 X
(Calls) 126.65 665.62 T
4 9.5 Q
(do-get-output-buffer) 153.76 665.62 T
2 11 Q
( to r) 267.76 665.62 T
(eturn a buf) 287 665.62 T
(fer for) 340.42 665.62 T
0 F
(buffer) 373.21 665.62 T
(ed-str) 398.89 665.62 T
(eam) 424.36 665.62 T
2 F
(. Y) 442.08 665.62 T
(ou) 453.9 665.62 T
(should never call) 126.65 651.62 T
4 9.5 Q
(do-get-output-buffer) 212.81 651.62 T
2 11 Q
( dir) 326.81 651.62 T
(ectly) 343.63 651.62 T
(.) 365.46 651.62 T
(The str) 126.65 631.62 T
(eam extension function signals an err) 160.21 631.62 T
(or if the str) 341.1 631.62 T
(eam is an input) 394.22 631.62 T
(only str) 126.65 617.62 T
(eam, or if it cannot r) 163.52 617.62 T
(eturn a buf) 261.43 617.62 T
(fer for any r) 314.85 617.62 T
(eason. The r) 372.55 617.62 T
(esulting) 431.2 617.62 T
(buf) 126.65 603.62 T
(fer is never completely full of pending output.) 142.83 603.62 T
(The) 126.65 583.62 T
0 F
(bytes) 147.81 583.62 T
2 F
( keywor) 170.63 583.62 T
(d is an) 210.2 583.62 T
4 9.5 Q
(<integer>) 244.94 583.62 T
2 11 Q
(, and is the minimum number of bytes) 296.24 583.62 T
(that must be available for writing in the buf) 126.65 569.62 T
(fer when it is r) 338.42 569.62 T
(eturned. It) 408.74 569.62 T
(defaults to 1. If) 126.65 555.62 T
4 9.5 Q
(do-get-output-buffer) 202.1 555.62 T
2 11 Q
( cannot r) 316.1 555.62 T
(eturn a buf) 358.52 555.62 T
(fer with the) 411.94 555.62 T
(speci\336ed minimum number of bytes, it signals an err) 126.65 541.62 T
(or) 383.28 541.62 T
(.) 392.82 541.62 T
(V) 126.65 521.62 T
(alues supplied for) 133.58 521.62 T
0 F
(bytes) 224.02 521.62 T
2 F
( should be small r) 246.83 521.62 T
(elative to a buf) 333.24 521.62 T
(fer) 405 521.62 T
(\325s size. If you) 419.09 521.62 T
(need to write lar) 126.65 507.62 T
(ge numbers of bytes at once, specify a lar) 206.57 507.62 T
(ge buf) 405.61 507.62 T
(fer size) 435.92 507.62 T
(when making the str) 126.65 493.62 T
(eam and do not specify any values for the) 226.85 493.62 T
0 F
(bytes) 432.6 493.62 T
2 F
( key-) 455.42 493.62 T
(wor) 126.65 479.62 T
(d parameter) 145.98 479.62 T
(.) 204.77 479.62 T
(If an application\325s thr) 126.65 459.62 T
(ead calls) 230.73 459.62 T
4 9.5 Q
(get-output-buffer) 275.17 459.62 T
2 11 Q
( and another thr) 372.07 459.62 T
(ead) 450.59 459.62 T
(alr) 126.65 445.62 T
(eady holds any buf) 139.5 445.62 T
(fer for the str) 232.54 445.62 T
(eam, the function might block. Multi-) 295.74 445.62 T
(thr) 126.65 431.62 T
(eaded implementations should eventually r) 140.78 431.62 T
(eturn. In multi-thr) 352.75 431.62 T
(eaded) 441.48 431.62 T
(implementations this function calls) 126.65 417.62 T
4 9.5 Q
(lock-stream) 300.05 417.62 T
2 11 Q
( befor) 362.75 417.62 T
(e calling) 390.67 417.62 T
4 9.5 Q
(do-get-) 433.94 417.62 T
(input-buffer) 126.65 403.62 T
2 11 Q
(, and it does not r) 194.23 403.62 T
(elease the lock.) 278.95 403.62 T
-0.01 (If an application\325s thr) 126.65 383.62 P
-0.01 (ead calls this function, and that same thr) 230.71 383.62 P
-0.01 (ead alr) 427.22 383.62 P
-0.01 (eady) 460.3 383.62 P
(holds the buf) 126.65 369.62 T
(fer) 190.58 369.62 T
(, this situation is a r) 203.04 369.62 T
(e-entrancy pr) 297.69 369.62 T
(ogrammer err) 362.63 369.62 T
(or) 430.15 369.62 T
(. The) 439.69 369.62 T
(str) 126.65 355.62 T
(eam cannot r) 139.04 355.62 T
(eturn the buf) 201.95 355.62 T
(fer and guarantee that its state is up to date) 265.13 355.62 T
(with output written between the \336rst call to this function and the curr) 126.65 341.62 T
(ent) 465.08 341.62 T
(call. Implementations should detect and signal this err) 126.65 327.62 T
(or) 390.53 327.62 T
(.) 400.06 327.62 T
3 12 Q
(release-output-b) 99.65 292.95 T
(uff) 176.56 292.95 T
(er) 189.04 292.95 T
0 11 Q
(Function) 446.1 293.62 T
4 9 Q
(release-output-buffer) 126.65 272.95 T
5 F
(buf) 245.45 272.95 T
(fer) 257.95 272.95 T
(ed-str) 268.28 272.95 T
(eam) 291.62 272.95 T
4 F
( => \050\051) 308.11 272.95 T
2 11 Q
(Call this function to announce that you have \336nished using the str) 126.65 252.62 T
(eam\325s) 447.52 252.62 T
(curr) 126.65 238.62 T
(ent buf) 146.66 238.62 T
(fer) 180.85 238.62 T
(. When you have written output to the buf) 193.31 238.62 T
(fer) 398.92 238.62 T
(, you must) 411.38 238.62 T
-0.06 (update the buf) 126.65 224.62 P
-0.06 (fer) 197.79 224.62 P
-0.06 (\325s state by assigning to) 211.88 224.62 P
4 9.5 Q
-0.12 (buffer-next) 323.72 224.62 P
2 11 Q
-0.06 ( befor) 386.42 224.62 P
-0.06 (e r) 414.28 224.62 P
-0.06 (eleasing the) 426.39 224.62 P
(buf) 126.65 210.62 T
(fer) 142.83 210.62 T
(. When a user of the Buf) 155.29 210.62 T
(fer Access Pr) 271.77 210.62 T
(otocol sets) 334.26 210.62 T
4 9.5 Q
(buffer-end) 387.63 210.62 T
2 11 Q
(, the) 444.63 210.62 T
(r) 126.65 196.62 T
(esults ar) 130.79 196.62 T
(e unde\336ned.) 171.21 196.62 T
(If the application does not hold the buf) 126.65 176.62 T
(fer) 315.65 176.62 T
(, this function signals an err) 328.11 176.62 T
(or) 462.65 176.62 T
(.) 472.19 176.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "37" 37
%%Page: "38" 38
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(38) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
(This function calls) 135.65 665.62 T
4 9.5 Q
(do-release-output-buffer) 227.13 665.62 T
2 11 Q
( so that the str) 363.93 665.62 T
(eam can per-) 432.33 665.62 T
(form any r) 135.65 651.62 T
(ecor) 187.04 651.62 T
(d-keeping or management tasks it has. Y) 207.35 651.62 T
(ou should never) 403.99 651.62 T
(call) 135.65 637.62 T
4 9.5 Q
(do-release-output-buffer) 155.18 637.62 T
2 11 Q
( dir) 291.98 637.62 T
(ectly) 308.8 637.62 T
(.) 330.64 637.62 T
(In multi-thr) 135.65 617.62 T
(eaded implementations,) 192.64 617.62 T
4 9.5 Q
(release-output-buffer) 312.69 617.62 T
2 11 Q
( r) 432.39 617.62 T
(eleases the) 439.29 617.62 T
(lock obtained in) 135.65 603.62 T
4 9.5 Q
(get-output-buffer) 216.48 603.62 T
2 11 Q
(.) 312.56 603.62 T
3 12 Q
(with-output-b) 108.65 568.95 T
(uff) 171.31 568.95 T
(er) 183.79 568.95 T
0 11 Q
(Macr) 466.94 569.62 T
(o) 490.76 569.62 T
4 9 Q
(with-output-buffer \050) 135.65 548.95 T
5 F
(buf) 243.65 548.95 T
(fer-var) 256.15 548.95 T
4 F
( =) 283.65 548.95 T
5 F
(exp) 299.85 548.95 T
4 F
(, #key) 313.35 548.95 T
5 F
(bytes) 351.15 548.95 T
4 F
(\051) 372.48 548.95 T
5 F
(body) 383.28 548.95 T
4 F
( end;) 403.13 548.95 T
2 11 Q
-0.08 (Calls) 135.65 528.62 P
4 9.5 Q
-0.16 (get-output-buffer) 162.69 528.62 P
2 11 Q
-0.08 ( on) 259.59 528.62 P
0 F
-0.08 (exp) 277.35 528.62 P
2 F
-0.08 ( and) 292.62 528.62 P
0 F
-0.08 (bytes) 316.6 528.62 P
2 F
-0.08 (, binding) 339.41 528.62 P
0 F
-0.08 (buffer-var) 385.64 528.62 P
2 F
-0.08 ( to the r) 429.85 528.62 P
-0.08 (esult,) 466.87 528.62 P
(then executes) 135.65 514.62 T
0 F
(body) 204.06 514.62 T
2 F
( within the scope of the buf) 225.03 514.62 T
(fer binding.) 357.3 514.62 T
(After the) 135.65 494.62 T
0 F
(body) 181.83 494.62 T
2 F
( has executed,) 202.8 494.62 T
4 9.5 Q
(with-output-buffer) 273.68 494.62 T
2 11 Q
( calls) 376.28 494.62 T
4 9.5 Q
(release-output-) 403.23 494.62 T
(buffer) 135.65 480.62 T
2 11 Q
( and r) 169.85 480.62 T
(eturns any values r) 198.12 480.62 T
(eturned by) 290.91 480.62 T
0 F
(body) 346.84 480.62 T
2 F
(.) 366.59 480.62 T
3 12 Q
(ne) 108.65 445.95 T
(xt-output-b) 120 445.95 T
(uff) 171.73 445.95 T
(er) 184.21 445.95 T
0 11 Q
(Macr) 466.94 446.62 T
(o) 490.76 446.62 T
4 9 Q
(next-output-buffer) 135.65 425.95 T
5 F
(buf) 238.25 425.95 T
(fer) 250.75 425.95 T
(ed-str) 261.08 425.95 T
(eam) 284.42 425.95 T
4 F
( #key) 300.92 425.95 T
5 F
(bytes) 333.32 425.95 T
4 F
( =>) 354.64 425.95 T
5 F
(buf) 376.24 425.95 T
(fer) 388.75 425.95 T
2 11 Q
(Call this function to get the next buf) 135.65 405.62 T
(fer for writing output when you ar) 310.16 405.62 T
(e) 478.68 405.62 T
(alr) 135.65 391.62 T
(eady holding a str) 148.5 391.62 T
(eam\325s buf) 236.3 391.62 T
(fer) 283.43 391.62 T
(. If the application does not hold the) 295.9 391.62 T
(str) 135.65 377.62 T
(eam\325s buf) 148.04 377.62 T
(fer) 195.18 377.62 T
(, this function signals an err) 207.64 377.62 T
(or) 342.18 377.62 T
(.) 351.72 377.62 T
(This function calls) 135.65 357.62 T
4 9.5 Q
(do-next-output-buffer) 227.13 357.62 T
2 11 Q
( to get the next output buf) 346.83 357.62 T
(fer) 473.32 357.62 T
(.) 485.79 357.62 T
(Y) 135.65 343.62 T
(ou should never call) 141.97 343.62 T
4 9.5 Q
(do-next-output-buffer) 243.52 343.62 T
2 11 Q
( dir) 363.23 343.62 T
(ectly) 380.04 343.62 T
(.) 401.88 343.62 T
(Y) 135.65 323.62 T
(ou must update the buf) 141.97 323.62 T
(fer) 255.97 323.62 T
(\325s state by assigning to) 270.06 323.62 T
4 9.5 Q
(buffer-next) 382.19 323.62 T
2 11 Q
( befor) 444.89 323.62 T
(e) 472.81 323.62 T
(getting the next buf) 135.65 309.62 T
(fer; otherwise, it might seem that the curr) 230.54 309.62 T
(ent buf) 431.55 309.62 T
(fer is) 465.74 309.62 T
-0.18 (empty \050or does not contain the output you just stor) 135.65 295.62 P
-0.18 (ed in it\051. When) 381.62 295.62 P
4 9.5 Q
-0.38 (buffer-) 455.75 295.62 P
(next) 135.65 281.62 T
2 11 Q
( =) 158.45 281.62 T
4 9.5 Q
(buffer-end) 170.61 281.62 T
2 11 Q
( ther) 227.61 281.62 T
(e is no pending output in the curr) 249.77 281.62 T
(ent buf) 413.21 281.62 T
(fer) 447.39 281.62 T
(.) 459.86 281.62 T
(When a user of the Buf) 135.65 261.62 T
(fer Access Pr) 246.63 261.62 T
(otocol sets) 309.12 261.62 T
4 9.5 Q
(buffer-end) 362.49 261.62 T
2 11 Q
(, the r) 419.49 261.62 T
(esults ar) 447.14 261.62 T
(e) 487.56 261.62 T
(unde\336ned.) 135.65 247.62 T
(The str) 135.65 227.62 T
(eam extension function may r) 169.21 227.62 T
(eturn a new) 313.42 227.62 T
4 9.5 Q
(<buffer>) 374.25 227.62 T
2 11 Q
( object or the) 419.85 227.62 T
(curr) 135.65 213.62 T
(ent one with) 155.66 213.62 T
4 9.5 Q
(buffer-next) 219.2 213.62 T
2 11 Q
( updated to indicate the next available ele-) 281.9 213.62 T
(ment to be written for output. Y) 135.65 199.62 T
(ou should not make any assumptions) 289.77 199.62 T
(about which option a str) 135.65 185.62 T
(eam\325s implementation uses.) 254.23 185.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "38" 38
%%Page: "39" 39
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.7) 376.41 702.62 T
(Using buffered streams) 397.79 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(39) 477.65 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
2 11 Q
0 X
(The) 126.65 665.62 T
4 9.5 Q
(do-next-output-buffer) 147.81 665.62 T
2 11 Q
( function signals an err) 267.51 665.62 T
(or when the curr) 378.7 665.62 T
(ent) 459.81 665.62 T
(buf) 126.65 651.62 T
(fer is not held for output.) 142.83 651.62 T
(The) 126.65 631.62 T
4 9.5 Q
(do-next-output-buffer) 147.81 631.62 T
2 11 Q
( function may for) 267.51 631.62 T
(ce output to a str) 351.68 631.62 T
(eam\325s des-) 433.38 631.62 T
(tination, but it is not r) 126.65 617.62 T
(equir) 232.13 617.62 T
(ed to do so. It might empty the curr) 257.54 617.62 T
(ent buf) 430.14 617.62 T
(fer) 464.33 617.62 T
-0.16 (into secondary buf) 126.65 603.62 P
-0.16 (fers or get a new buf) 217.11 603.62 P
-0.16 (fer fr) 315.84 603.62 P
-0.16 (om a queue, while not for) 339.52 603.62 P
-0.16 (cing) 463.46 603.62 P
(any output.) 126.65 589.62 T
(The) 126.65 569.62 T
0 F
(bytes) 147.81 569.62 T
2 F
( ar) 170.63 569.62 T
(gument is the same as for) 183.02 569.62 T
4 9.5 Q
(get-output-buffer) 309.69 569.62 T
2 11 Q
(, but) 405.77 569.62 T
4 9.5 Q
(do-next-) 430.33 569.62 T
(output-buffer) 126.65 555.62 T
2 11 Q
( signals any err) 200.75 555.62 T
(or associated with this parameter) 274.52 555.62 T
(.) 435.41 555.62 T
3 13 Q
(1.7.3  Cop) 99.65 522.29 T
(ying to and fr) 149.87 522.29 T
(om b) 217.19 522.29 T
(uff) 242.47 522.29 T
(er) 255.99 522.29 T
(s) 265.92 522.29 T
2 11 Q
(All generic sequence operations work on buf) 99.65 502.62 T
(fers. The Str) 316.96 502.62 T
(eams library pr) 375.08 502.62 T
(ovides) 449.27 502.62 T
(some additional functions to compensate for lacking functionality in Dylan\325s) 99.65 488.62 T
(sequence operations. Ther) 99.65 474.62 T
(e ar) 226.6 474.62 T
(e also a few functions for updating a buf) 244.26 474.62 T
(fer) 440.42 474.62 T
(\325s) 454.51 474.62 T
(state.) 99.65 460.62 T
3 12 Q
(b) 99.65 425.95 T
(uff) 105.48 425.95 T
(er) 117.96 425.95 T
(-ne) 127.08 425.95 T
(xt) 141.71 425.95 T
0 11 Q
(Function) 446.1 426.62 T
4 9 Q
(buffer-next) 126.65 405.95 T
5 F
(buf) 191.45 405.95 T
(fer) 203.95 405.95 T
4 F
( =>) 214.44 405.95 T
5 F
(buf) 236.04 405.95 T
(fer-index) 248.54 405.95 T
2 11 Q
(For buf) 126.65 385.62 T
(fers held for input, this function r) 162.05 385.62 T
(eturns the location of the next) 324.05 385.62 T
-0.16 (valid byte of input to be r) 126.65 371.62 P
-0.16 (ead. When the location equals) 249.29 371.62 P
4 9.5 Q
-0.32 (buffer-end) 397.04 371.62 P
2 11 Q
-0.16 (, ther) 454.04 371.62 P
-0.16 (e) 478.79 371.62 P
(is no mor) 126.65 357.62 T
(e valid input data in the buf) 172.29 357.62 T
(fer) 307.67 357.62 T
(.) 320.14 357.62 T
(For buf) 126.65 337.62 T
(fers held for output, this function r) 162.05 337.62 T
(eturns the location of the next) 330.68 337.62 T
-0.37 (fr) 126.65 323.62 P
-0.37 (ee byte that should be written in the buf) 134.46 323.62 P
-0.37 (fer) 325.79 323.62 P
-0.37 (, and when the location equals) 338.25 323.62 P
4 9.5 Q
(buffer-end) 126.65 309.62 T
2 11 Q
(, the buf) 183.65 309.62 T
(fer is full of pending output.) 223.34 309.62 T
3 12 Q
(b) 99.65 274.95 T
(uff) 105.48 274.95 T
(er) 117.96 274.95 T
(-ne) 127.08 274.95 T
(xt-setter) 141.71 274.95 T
0 11 Q
(Function) 446.1 275.62 T
4 9 Q
(buffer-next-setter) 126.65 254.95 T
5 F
(new-value buf) 229.25 254.95 T
(fer) 286 254.95 T
4 F
( =>) 296.5 254.95 T
5 F
(new-value) 318.1 254.95 T
2 11 Q
(Sets) 126.65 234.62 T
0 F
(buffer) 148.69 234.62 T
2 F
(\325s next index.) 175.39 234.62 T
3 12 Q
(b) 99.65 199.95 T
(uff) 105.48 199.95 T
(er) 117.96 199.95 T
(-end) 127.08 199.95 T
0 11 Q
(Function) 446.1 200.62 T
4 9 Q
(buffer-end) 126.65 179.95 T
5 F
(buf) 186.05 179.95 T
(fer) 198.55 179.95 T
4 F
( =>) 209.04 179.95 T
5 F
(buf) 230.64 179.95 T
(fer-index) 243.14 179.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "39" 39
%%Page: "40" 40
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(40) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
(For buf) 135.65 665.62 T
(fers held for input, this function r) 171.05 665.62 T
(eturns the index of the exclusive) 333.05 665.62 T
(end of data to be r) 135.65 651.62 T
(ead. For buf) 223.86 651.62 T
(fers held for output, this function r) 282.24 651.62 T
(eturns) 450.88 651.62 T
(the size of the buf) 135.65 637.62 T
(fer) 221.65 637.62 T
(.) 234.11 637.62 T
(See also) 135.65 617.62 T
4 9.5 Q
(buffer-end-setter) 176.83 617.62 T
2 11 Q
(, below) 272.92 617.62 T
(.) 307.14 617.62 T
3 12 Q
(b) 108.65 582.95 T
(uff) 114.48 582.95 T
(er) 126.96 582.95 T
(-end-setter) 136.08 582.95 T
0 11 Q
(Function) 455.1 583.62 T
4 9 Q
(buffer-end-setter) 135.65 562.95 T
5 F
(new-value) 232.85 562.95 T
(buf) 280.25 562.95 T
(fer) 292.75 562.95 T
4 F
( =>) 303.25 562.95 T
5 F
(new-value) 324.85 562.95 T
2 11 Q
(Sets) 135.65 542.62 T
0 F
(buffer) 157.69 542.62 T
2 F
(\325s end index.) 184.39 542.62 T
1 F
(Note:) 135.65 522.62 T
2 F
( Users of the Buf) 162.84 522.62 T
(fer Access Pr) 243.09 522.62 T
(otocol functions should not set this) 305.58 522.62 T
-0.43 (accessor because the r) 135.65 508.62 P
-0.43 (esults ar) 240.52 508.62 P
-0.43 (e unde\336ned; however) 280.5 508.62 P
-0.43 (, str) 385.09 508.62 P
-0.43 (eam implementors) 402.55 508.62 P
(may need to set this accessor inside Str) 135.65 494.62 T
(eam Extension Pr) 324.03 494.62 T
(otocol methods,) 408.73 494.62 T
(which execute while users ar) 135.65 480.62 T
(e holding a str) 275.77 480.62 T
(eam buf) 345.23 480.62 T
(fer) 384.64 480.62 T
(.) 397.11 480.62 T
3 12 Q
(b) 108.65 445.95 T
(uff) 114.48 445.95 T
(er) 126.96 445.95 T
(-subsequence) 136.08 445.95 T
0 11 Q
(Open generic function) 396.22 446.62 T
4 9 Q
(buffer-subsequence) 135.65 425.95 T
5 F
(buf) 238.25 425.95 T
(fer) 250.75 425.95 T
(r) 266.64 425.95 T
(esult-class) 269.98 425.95 T
(start) 318.37 425.95 T
(end) 343.27 425.95 T
4 F
( =>) 357.27 425.95 T
5 F
(sequence) 378.87 425.95 T
2 11 Q
(Returns an instance of the class) 135.65 405.62 T
0 F
(r) 290.04 405.62 T
(esult-class) 294.12 405.62 T
2 F
(, \336lled with the elements fr) 340.16 405.62 T
(om) 470.51 405.62 T
(the buf) 135.65 391.62 T
(fer fr) 169.84 391.62 T
(om the index) 193.67 391.62 T
0 F
(start) 260.17 391.62 T
2 F
( to the index) 280.94 391.62 T
0 F
(end) 344.05 391.62 T
2 F
(.) 359.95 391.62 T
(The) 135.65 371.62 T
0 F
(start) 156.81 371.62 T
2 F
( and) 177.58 371.62 T
0 F
(end) 201.7 371.62 T
2 F
( ar) 217.6 371.62 T
(guments ar) 229.99 371.62 T
(e both instances of) 284.77 371.62 T
4 9.5 Q
(<buffer-index>) 377.36 371.62 T
2 11 Q
(.) 457.16 371.62 T
1 F
-0.35 (Implementation Note:) 135.65 351.62 P
2 F
-0.35 ( This function should be implemented as ef) 246.51 351.62 P
-0.35 (\336ciently) 453.93 351.62 P
(as possible. Ther) 135.65 337.62 T
(e should be sealed methods for when) 216.32 337.62 T
0 F
(r) 400.07 337.62 T
(esult-class) 404.15 337.62 T
2 F
( is an) 450.18 337.62 T
(instance of) 135.65 323.62 T
4 9.5 Q
(<byte-string>) 190.73 323.62 T
2 11 Q
(,) 264.83 323.62 T
4 9.5 Q
(<byte-vector>) 270.33 323.62 T
2 11 Q
(, and) 344.42 323.62 T
4 9.5 Q
(<buffer>) 371.3 323.62 T
2 11 Q
(.) 416.9 323.62 T
3 12 Q
(cop) 108.65 288.95 T
(y-into-b) 126.01 288.95 T
(uff) 161.9 288.95 T
(er!) 174.38 288.95 T
0 11 Q
(Open generic function) 396.22 289.62 T
4 9 Q
(copy-into-buffer!) 135.65 268.95 T
5 F
(buf) 232.85 268.95 T
(fer) 245.35 268.95 T
(buf) 261.24 268.95 T
(fer-start) 273.74 268.95 T
(sequence) 312.64 268.95 T
4 F
( #key) 347.46 268.95 T
5 F
(start) 379.86 268.95 T
(end) 404.77 268.95 T
4 F
( => \050\051) 418.77 268.95 T
2 11 Q
-0.24 (Copies the portion of) 135.65 248.62 P
0 F
-0.24 (sequence) 240.32 248.62 P
2 F
-0.24 ( given by the indices) 279.24 248.62 P
0 F
-0.24 (start) 380.8 248.62 P
2 F
-0.24 ( and) 401.56 248.62 P
0 F
-0.24 (end) 425.21 248.62 P
2 F
-0.24 ( into) 441.1 248.62 P
0 F
-0.24 (buffer) 465.32 248.62 P
2 F
-0.24 (.) 490.39 248.62 P
(The buf) 135.65 228.62 T
(fer is \336lled starting at) 172.99 228.62 T
0 F
(buffer-start) 279.42 228.62 T
2 F
(.) 329.73 228.62 T
(The) 135.65 208.62 T
0 F
(start) 156.81 208.62 T
2 F
( index defaults to 0, while) 177.58 208.62 T
0 F
(end) 305.67 208.62 T
2 F
( defaults to) 321.57 208.62 T
0 F
(sequence) 378.65 208.62 T
4 9.5 Q
(.size) 417.57 208.62 T
2 11 Q
(.) 446.07 208.62 T
(If) 135.65 188.62 T
0 F
(buffer) 145.77 188.62 T
2 F
( is too small to hold the data, an err) 171.65 188.62 T
(or is signalled.) 343.04 188.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "40" 40
%%Page: "41" 41
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.7) 376.41 702.62 T
(Using buffered streams) 397.79 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(41) 477.65 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
1 11 Q
0 X
-0.35 (Implementation Note:) 126.65 665.62 P
2 F
-0.35 ( This function should be implemented as ef) 237.51 665.62 P
-0.35 (\336ciently) 444.93 665.62 P
(as possible. Ther) 126.65 651.62 T
(e should be sealed methods for when) 207.32 651.62 T
0 F
(sequence) 391.07 651.62 T
2 F
(is an) 432.73 651.62 T
(instance of) 126.65 637.62 T
4 9.5 Q
(<byte-string>) 181.73 637.62 T
2 11 Q
(,) 255.82 637.62 T
4 9.5 Q
(<byte-vector>) 261.33 637.62 T
2 11 Q
(, or) 335.42 637.62 T
4 9.5 Q
(<buffer>) 354.03 637.62 T
2 11 Q
(.) 399.63 637.62 T
3 12 Q
(cop) 99.65 602.95 T
(y-fr) 117.01 602.95 T
(om-b) 132.68 602.95 T
(uff) 156.55 602.95 T
(er!) 169.03 602.95 T
0 11 Q
(Open generic function) 387.22 603.62 T
4 9 Q
(copy-from-buffer!) 126.65 582.95 T
5 F
(buf) 223.85 582.95 T
(fer) 236.35 582.95 T
(buf) 252.24 582.95 T
(fer-start) 264.74 582.95 T
(sequence) 303.64 582.95 T
4 F
( #key) 338.46 582.95 T
5 F
(start) 370.86 582.95 T
(end) 395.77 582.95 T
4 F
( => \050\051) 409.77 582.95 T
2 11 Q
(Copies a portion of) 126.65 562.62 T
0 F
(buffer) 222.52 562.62 T
2 F
( starting at) 248.41 562.62 T
0 F
(buffer-start) 303.14 562.62 T
2 F
( into) 353.46 562.62 T
0 F
(sequence) 378.15 562.62 T
2 F
(. The number) 417.07 562.62 T
(of elements copied is determined by) 126.65 548.62 T
0 F
(start) 305.44 548.62 T
2 F
( and) 326.21 548.62 T
0 F
(end) 350.33 548.62 T
2 F
(, which ar) 366.23 548.62 T
(e indices into) 414.19 548.62 T
0 F
(sequence) 126.65 534.62 T
2 F
(. The sequence is \336lled starting at) 165.57 534.62 T
0 F
(start) 329.93 534.62 T
2 F
(, which defaults to 0, and) 350.7 534.62 T
(ending at) 126.65 520.62 T
0 F
(end) 175.35 520.62 T
2 F
(, which defaults to) 191.24 520.62 T
0 F
(sequence) 283.88 520.62 T
4 9.5 Q
(.size) 322.8 520.62 T
2 11 Q
(.) 351.3 520.62 T
(If) 356.8 520.62 T
0 F
(sequence) 366.92 520.62 T
2 F
( is too small to) 405.84 520.62 T
(hold the data, an err) 126.65 506.62 T
(or is signalled.) 224.96 506.62 T
1 F
-0.35 (Implementation Note:) 126.65 486.62 P
2 F
-0.35 ( This function should be implemented as ef) 237.51 486.62 P
-0.35 (\336ciently) 444.93 486.62 P
(as possible. Ther) 126.65 472.62 T
(e should be sealed methods for when) 207.32 472.62 T
0 F
(sequence) 391.07 472.62 T
2 F
(is an) 432.73 472.62 T
(instance of) 126.65 458.62 T
4 9.5 Q
(<byte-string>) 181.73 458.62 T
2 11 Q
(,) 255.82 458.62 T
4 9.5 Q
(<byte-vector>) 261.33 458.62 T
2 11 Q
(, or) 335.42 458.62 T
4 9.5 Q
(<buffer>) 354.03 458.62 T
2 11 Q
(.) 399.63 458.62 T
3 13 Q
(1.7.4  Stream e) 99.65 425.29 T
(xtension pr) 174.18 425.29 T
(otocol) 231.44 425.29 T
2 11 Q
-0.13 (These ar) 99.65 405.62 P
-0.13 (e the generic functions to which implementors of str) 140.26 405.62 P
-0.13 (eams add methods) 392.35 405.62 P
(when extending the str) 99.65 391.62 T
(eam pr) 211.44 391.62 T
(otocol to new subclasses of) 245.43 391.62 T
4 9.5 Q
(<buffered-stream>) 379.2 391.62 T
2 11 Q
(.) 476.1 391.62 T
(Although the) 99.65 377.62 T
4 9.5 Q
(close) 167.31 377.62 T
2 11 Q
( function is not described her) 195.81 377.62 T
(e, you might need to add a) 337.17 377.62 T
(method to it when implementing a new str) 99.65 363.62 T
(eam. See) 307.65 363.62 T
4 9.5 Q
(close) 352.69 363.62 T
2 11 Q
(,  page 15.) 381.19 363.62 T
3 13 Q
(1.7.4.1  Creating ne) 99.65 330.29 T
(w input or input-output streams) 196.68 330.29 T
3 12 Q
(do-g) 99.65 295.95 T
(et-input-b) 121.06 295.95 T
(uff) 166.24 295.95 T
(er) 178.72 295.95 T
0 11 Q
(Open generic function) 387.22 296.62 T
4 9 Q
(do-get-input-buffer) 126.65 275.95 T
5 F
(buf) 234.65 275.95 T
(fer) 247.15 275.95 T
(ed-str) 257.48 275.95 T
(eam) 280.82 275.95 T
4 F
( #key) 297.32 275.95 T
5 F
(wait?) 329.71 275.95 T
(bytes) 358.11 275.95 T
4 F
( => buffer-or-f) 379.44 275.95 T
2 11 Q
(The methods of this generic function implement) 126.65 255.62 T
4 9.5 Q
(get-input-buffer) 363.42 255.62 T
2 11 Q
( for) 454.62 255.62 T
(new str) 126.65 241.62 T
(eams. These methods can assume that the str) 162.64 241.62 T
(eam is locked, so no) 380.45 241.62 T
-0.15 (other thr) 126.65 227.62 P
-0.15 (ead can access it. Methods must signal an err) 168.99 227.62 P
-0.15 (or if the str) 385.9 227.62 P
-0.15 (eam is an) 438.59 227.62 P
-0.09 (output-only str) 126.65 213.62 P
-0.09 (eam, or if they cannot r) 200.15 213.62 P
-0.09 (eturn a buf) 312.19 213.62 P
-0.09 (fer for any r) 365.42 213.62 P
-0.09 (eason. If this) 422.86 213.62 P
(function\325s methods cannot r) 126.65 199.62 T
(eturn a buf) 262.68 199.62 T
(fer with the speci\336ed minimum) 316.1 199.62 T
(number of bytes, they signal an) 126.65 185.62 T
4 9.5 Q
(<incomplete-read-error>) 282.09 185.62 T
2 11 Q
(.) 413.19 185.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "41" 41
%%Page: "42" 42
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(42) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
3 12 Q
0 X
(do-release-input-b) 108.65 664.95 T
(uff) 194.3 664.95 T
(er) 206.78 664.95 T
0 11 Q
(Open generic function) 396.22 665.62 T
4 9 Q
(do-release-input-buffer) 135.65 644.95 T
5 F
(buf) 265.25 644.95 T
(fer) 277.75 644.95 T
(ed-str) 288.08 644.95 T
(eam) 311.42 644.95 T
4 F
( => \050\051) 327.92 644.95 T
2 11 Q
(The methods of this generic function implement) 135.65 624.62 T
4 9.5 Q
(release-input-buffer) 372.42 624.62 T
2 11 Q
(for new str) 135.65 610.62 T
(eams. These methods can assume that the str) 188.4 610.62 T
(eam is locked, so) 406.21 610.62 T
(no other thr) 135.65 596.62 T
(ead can access it.) 193.3 596.62 T
3 12 Q
(do-ne) 108.65 561.95 T
(xt-input-b) 135.3 561.95 T
(uff) 180.48 561.95 T
(er) 192.96 561.95 T
0 11 Q
(Open generic function) 396.22 562.62 T
4 9 Q
(do-next-input-buffer) 135.65 541.95 T
5 F
(buf) 249.05 541.95 T
(fer) 261.55 541.95 T
(ed-str) 271.88 541.95 T
(eam) 295.22 541.95 T
4 F
( #key) 311.71 541.95 T
5 F
(wait?) 344.11 541.95 T
4 F
(,) 367.11 541.95 T
5 F
(bytes) 377.91 541.95 T
4 F
( =>) 399.24 541.95 T
5 F
(buf) 420.84 541.95 T
(fer-or-false) 433.34 541.95 T
2 11 Q
(The methods of this generic function implement) 135.65 521.62 T
4 9.5 Q
(next-input-buffer) 372.42 521.62 T
2 11 Q
( for) 469.32 521.62 T
(new str) 135.65 507.62 T
(eams. These methods can assume that the str) 171.64 507.62 T
(eam is locked, so no) 389.45 507.62 T
(other thr) 135.65 493.62 T
(ead can access it. Methods must signal an err) 178.14 493.62 T
(or if the curr) 396.22 493.62 T
(ent) 456.95 493.62 T
(buf) 135.65 479.62 T
(fer is not held for input, or they for any r) 151.83 479.62 T
(eason cannot r) 349.16 479.62 T
(eturn a buf) 419.43 479.62 T
(fer) 472.84 479.62 T
(,) 485.3 479.62 T
(or a buf) 135.65 465.62 T
(fer with the minimum number of bytes speci\336ed by) 173.18 465.62 T
0 F
(bytes) 426.71 465.62 T
2 F
( \050an) 449.52 465.62 T
4 9.5 Q
(<incomplete-read-error>) 135.65 451.62 T
2 11 Q
(\051.) 266.75 451.62 T
3 12 Q
(do-input-a) 108.65 416.95 T
(v) 156.61 416.95 T
(ailab) 161.9 416.95 T
(le-at-sour) 184.25 416.95 T
(ce?) 228.9 416.95 T
0 11 Q
(Open generic function) 396.22 417.62 T
4 9 Q
(do-input-available-at-source?) 135.65 396.95 T
5 F
(buf) 297.65 396.95 T
(fer) 310.15 396.95 T
(ed-str) 320.48 396.95 T
(eam) 343.82 396.95 T
4 F
( =>) 360.32 396.95 T
5 F
(available?) 381.92 396.95 T
2 11 Q
(The methods of this generic function implement) 135.65 376.62 T
4 9.5 Q
(input-available-at-) 372.42 376.62 T
(source?) 135.65 362.62 T
2 11 Q
( for new str) 175.55 362.62 T
(eams. These methods can assume that the str) 231.05 362.62 T
(eam is) 448.86 362.62 T
(locked, so no other thr) 135.65 348.62 T
(ead can access it. Methods must signal an err) 244.42 348.62 T
(or) 462.49 348.62 T
(when the curr) 135.65 334.62 T
(ent buf) 203.66 334.62 T
(fer is not held for input.) 237.85 334.62 T
3 13 Q
(1.7.4.2  Creating ne) 108.65 301.29 T
(w output or input-output streams) 205.68 301.29 T
3 12 Q
(do-g) 108.65 266.95 T
(et-output-b) 130.06 266.95 T
(uff) 181.79 266.95 T
(er) 194.27 266.95 T
0 11 Q
(Open generic function) 396.22 267.62 T
4 9 Q
(do-get-output-buffer) 135.65 246.95 T
5 F
(buf) 249.05 246.95 T
(fer) 261.55 246.95 T
(ed-str) 271.88 246.95 T
(eam) 295.22 246.95 T
4 F
( #key) 311.71 246.95 T
5 F
(bytes) 344.11 246.95 T
4 F
( =>) 365.45 246.95 T
5 F
(buf) 387.05 246.95 T
(fer) 399.55 246.95 T
2 11 Q
(The methods of this generic function implement) 135.65 226.62 T
4 9.5 Q
(get-output-buffer) 372.42 226.62 T
2 11 Q
( for) 469.32 226.62 T
(new str) 135.65 212.62 T
(eams. These methods can assume that the str) 171.64 212.62 T
(eam is locked, so no) 389.45 212.62 T
-0.15 (other thr) 135.65 198.62 P
-0.15 (ead can access it. Methods must signal an err) 177.99 198.62 P
-0.15 (or if the str) 394.9 198.62 P
-0.15 (eam is an) 447.59 198.62 P
(input only str) 135.65 184.62 T
(eam, or if they cannot r) 201.7 184.62 T
(eturn a buf) 314.2 184.62 T
(fer for any r) 367.62 184.62 T
(eason.) 425.32 184.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "42" 42
%%Page: "43" 43
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.8) 423.05 702.62 T
(Conditions) 444.42 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(43) 477.65 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
2 11 Q
0 X
-0.26 (The r) 126.65 665.62 P
-0.26 (esulting) 151.7 665.62 P
0 F
-0.26 (buffer) 193.26 665.62 P
2 F
-0.26 ( is never completely full of pending output. If this func-) 219.15 665.62 P
-0.04 (tion\325s methods cannot r) 126.65 651.62 P
-0.04 (eturn a buf) 241 651.62 P
-0.04 (fer with the minimum number of bytes) 294.34 651.62 P
(speci\336ed by) 126.65 637.62 T
0 F
(bytes) 187.62 637.62 T
2 F
(, they must signal an err) 210.43 637.62 T
(or) 327.65 637.62 T
(.) 337.19 637.62 T
3 12 Q
(do-release-output-b) 99.65 602.95 T
(uff) 191.86 602.95 T
(er) 204.34 602.95 T
0 11 Q
(Open generic function) 387.22 603.62 T
4 9 Q
(do-release-output-buffer) 126.65 582.95 T
5 F
(buf) 261.65 582.95 T
(fer) 274.15 582.95 T
(ed-str) 284.48 582.95 T
(eam) 307.82 582.95 T
4 F
( => \050\051) 324.32 582.95 T
2 11 Q
(The methods of this generic function implement) 126.65 562.62 T
4 9.5 Q
(release-output-buffer) 363.42 562.62 T
2 11 Q
(for new str) 126.65 548.62 T
(eams. These methods can assume that the str) 179.4 548.62 T
(eam is locked, so) 397.21 548.62 T
(no other thr) 126.65 534.62 T
(ead can access it.) 184.3 534.62 T
3 12 Q
(do-ne) 99.65 499.95 T
(xt-output-b) 126.3 499.95 T
(uff) 178.03 499.95 T
(er) 190.51 499.95 T
0 11 Q
(Open generic function) 387.22 500.62 T
4 9 Q
(do-next-output-buffer) 126.65 479.95 T
5 F
(buf) 245.45 479.95 T
(fer) 257.95 479.95 T
(ed-str) 268.28 479.95 T
(eam) 291.62 479.95 T
4 F
( #key) 308.11 479.95 T
5 F
(bytes) 340.52 479.95 T
4 F
( =>) 361.85 479.95 T
5 F
(buf) 383.45 479.95 T
(fer) 395.95 479.95 T
2 11 Q
(The methods of this generic function implement) 126.65 459.62 T
4 9.5 Q
(next-output-buffer) 363.42 459.62 T
2 11 Q
( for) 466.02 459.62 T
(new str) 126.65 445.62 T
(eams. These methods must signal an err) 162.64 445.62 T
(or when they cannot) 357.09 445.62 T
(r) 126.65 431.62 T
(eturn a buf) 130.79 431.62 T
(fer for any r) 184.21 431.62 T
(eason, or the curr) 241.92 431.62 T
(ent buf) 326.38 431.62 T
(fer is not held for output.) 360.56 431.62 T
(If this function\325s methods cannot r) 126.65 417.62 T
(eturn a buf) 293.41 417.62 T
(fer with the minimum num-) 346.82 417.62 T
(ber of bytes speci\336ed by) 126.65 403.62 T
0 F
(bytes) 246.96 403.62 T
2 F
(, they must signal an err) 269.77 403.62 T
(or) 386.98 403.62 T
(.) 396.52 403.62 T
-0.34 (Methods may for) 126.65 383.62 P
-0.34 (ce output to) 209.67 383.62 P
0 F
-0.34 (buffer) 269.71 383.62 P
-0.34 (ed-str) 295.39 383.62 P
-0.34 (eam) 320.86 383.62 P
2 F
-0.34 (\325s destination, but they ar) 338.58 383.62 P
-0.34 (e not) 460.56 383.62 P
(r) 126.65 369.62 T
(equir) 130.79 369.62 T
(ed to do so. They might empty the curr) 156.21 369.62 T
(ent buf) 346.04 369.62 T
(fer into secondary) 380.23 369.62 T
(buf) 126.65 355.62 T
(fers or get a new buf) 142.83 355.62 T
(fer fr) 242.37 355.62 T
(om a queue, while not for) 266.2 355.62 T
(cing any output.) 390.95 355.62 T
3 16 Q
(1.8  Conditions) 99.65 320.29 T
2 11 Q
-0.25 (The class de\336nitions for the err) 99.65 299.62 P
-0.25 (or conditions ar) 248.62 299.62 P
-0.25 (e as follows. Ther) 324.69 299.62 P
-0.25 (e is no r) 408.85 299.62 P
-0.25 (ecovery) 446.04 299.62 P
(pr) 99.65 285.62 T
(otocol de\336ned for any of these err) 110.41 285.62 T
(ors. Every condition described in this sec-) 274.28 285.62 T
(tion that takes an init-keywor) 99.65 271.62 T
(d has a slot accessor for the value supplied, and) 242.84 271.62 T
-0.27 (the name of the accessor function is the name of the condition class \050without the) 99.65 257.62 P
(angle brackets\051 to which a hyphen and the name of the init-keywor) 99.65 243.62 T
(d is) 425.42 243.62 T
(appended.) 99.65 229.62 T
3 12 Q
(<end-of-stream-err) 99.65 194.95 T
(or>) 187.22 194.95 T
0 11 Q
(Err) 462.4 195.62 T
(or) 477.48 195.62 T
2 F
(Signalled when one of the r) 126.65 173.62 T
(ead functions r) 259.78 173.62 T
(eaches the end of an input) 332.36 173.62 T
(str) 126.65 159.62 T
(eam. It is a subclass of) 139.04 159.62 T
4 9.5 Q
(<error>) 249.4 159.62 T
2 11 Q
(. It takes one init-keywor) 289.3 159.62 T
(d,) 410.03 159.62 T
4 9.5 Q
(stream:) 422.25 159.62 T
2 11 Q
(.) 462.15 159.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "43" 43
%%Page: "44" 44
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(44) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
3 12 Q
0 X
(<incomplete-read-err) 108.65 664.95 T
(or>) 206.63 664.95 T
0 11 Q
(Err) 471.4 665.62 T
(or) 486.48 665.62 T
2 F
(Signalled when input functions ar) 135.65 643.62 T
(e r) 300.8 643.62 T
(eading a r) 312.97 643.62 T
(equir) 361.32 643.62 T
(ed number of ele-) 386.73 643.62 T
(ments but they r) 135.65 629.62 T
(ead the end of the str) 215.35 629.62 T
(eam befor) 317.57 629.62 T
(e completing the r) 365.97 629.62 T
(equir) 453.88 629.62 T
(ed) 479.29 629.62 T
(r) 135.65 615.62 T
(ead. It is a subclass of) 139.79 615.62 T
4 9.5 Q
(<end-of-stream-error>) 247.15 615.62 T
2 11 Q
(. It takes two additional) 366.86 615.62 T
(init-keywor) 135.65 601.62 T
(ds,) 192.53 601.62 T
4 9.5 Q
(sequence:) 209.41 601.62 T
2 11 Q
( and) 260.71 601.62 T
4 9.5 Q
(count:) 284.84 601.62 T
2 11 Q
(. The sequence is whatever input) 319.04 601.62 T
-0.4 (was r) 135.65 587.62 P
-0.4 (ead befor) 161.49 587.62 P
-0.4 (e r) 206.5 587.62 P
-0.4 (eaching the end of the str) 218.27 587.62 P
-0.4 (eam. The count is the number of) 338.78 587.62 P
(elements that wer) 135.65 573.62 T
(e r) 222.18 573.62 T
(equested to be r) 234.35 573.62 T
(ead.) 311.26 573.62 T
3 12 Q
(<\336le-err) 108.65 538.95 T
(or>) 144.84 538.95 T
0 11 Q
(Err) 471.4 539.62 T
(or) 486.48 539.62 T
2 F
-0.3 (The base class for all err) 135.65 517.62 P
-0.3 (ors r) 250.44 517.62 P
-0.3 (elated to \336le I/O. It is a subclass of) 272.05 517.62 P
4 9.5 Q
-0.61 (<error>) 440.8 517.62 P
2 11 Q
-0.3 (. It) 480.7 517.62 P
(takes one init keywor) 135.65 503.62 T
(d,) 239.93 503.62 T
4 9.5 Q
(locator:) 252.15 503.62 T
2 11 Q
(.) 297.75 503.62 T
3 12 Q
(<\336le-e) 108.65 468.95 T
(xists-err) 137.23 468.95 T
(or>) 175.88 468.95 T
0 11 Q
(Err) 471.4 469.62 T
(or) 486.48 469.62 T
2 F
-0.08 (Signalled when an output \336le str) 135.65 447.62 P
-0.08 (eam cr) 294.11 447.62 P
-0.08 (eation function tries to cr) 326.29 447.62 P
-0.08 (eate a \336le) 447.39 447.62 P
(that alr) 135.65 433.62 T
(eady exists. It is a subclass of) 170.32 433.62 T
4 9.5 Q
(<file-error>) 313.61 433.62 T
2 11 Q
(.) 382.01 433.62 T
3 12 Q
(<\336le-does-not-e) 108.65 398.95 T
(xist-err) 182.05 398.95 T
(or>) 215.23 398.95 T
0 11 Q
(Err) 471.4 399.62 T
(or) 486.48 399.62 T
2 F
(Signalled when an input \336le str) 135.65 377.62 T
(eam cr) 287.89 377.62 T
(eation function tries to r) 320.15 377.62 T
(ead a \336le) 436.7 377.62 T
(that does not exist. It is a subclass of) 135.65 363.62 T
4 9.5 Q
(<file-error>) 313.89 363.62 T
2 11 Q
(.) 382.29 363.62 T
3 12 Q
(<in) 108.65 328.95 T
(v) 122.76 328.95 T
(alid-\336le-permissions-err) 128.05 328.95 T
(or>) 239.98 328.95 T
0 11 Q
(Err) 471.4 329.62 T
(or) 486.48 329.62 T
2 F
(Signalled when one of the \336le str) 135.65 307.62 T
(eam cr) 294.91 307.62 T
(eation functions tries to access a) 327.17 307.62 T
(\336le in a manner for which the user does not have permission. It is a sub-) 135.65 293.62 T
(class of) 135.65 279.62 T
4 9.5 Q
(<file-error>) 173.73 279.62 T
2 11 Q
(.) 242.13 279.62 T
3 16 Q
(1.9  Wrapper streams) 108.65 244.29 T
2 11 Q
-0.41 (Sometimes str) 108.65 223.62 P
-0.41 (eam data r) 176.58 223.62 P
-0.41 (equir) 227.19 223.62 P
-0.41 (es conversion befor) 252.6 223.62 P
-0.41 (e an application can use it: you) 345.77 223.62 P
(might have a str) 108.65 209.62 T
(eam over a \336le of EBCDIC characters which you would pr) 187.2 209.62 T
(efer) 469.26 209.62 T
(to handle as their ASCII equivalents, or you might need to encrypt or decrypt) 108.65 195.62 T
(\336le data.) 108.65 181.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "44" 44
%%Page: "45" 45
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.9) 399.57 702.62 T
(Wrapper streams) 420.95 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(45) 477.65 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
0 11 Q
0 X
(W) 99.65 665.62 T
(rapper) 109.81 665.62 T
2 F
( str) 138.53 665.62 T
(eams pr) 153.68 665.62 T
(ovide a mechanism for working with str) 192.33 665.62 T
(eams which r) 387.63 665.62 T
(equir) 452.48 665.62 T
(e) 477.89 665.62 T
-0 (such conversion. W) 99.65 651.62 P
-0 (rapper str) 194.05 651.62 P
-0 (eams hold on to an underlying str) 241.88 651.62 P
-0 (eam, delegating) 406.54 651.62 P
(to it most of the operations that implement str) 99.65 637.62 T
(eaming. The wrapper str) 322.95 637.62 T
(eam car-) 442.82 637.62 T
(ries out appr) 99.65 623.62 T
(opriate pr) 161.72 623.62 T
(ocessing in its own implementations of the str) 209.75 623.62 T
(eaming) 432.49 623.62 T
(pr) 99.65 609.62 T
(otocol.) 110.41 609.62 T
-0.26 (The Dylan Str) 99.65 589.62 P
-0.26 (eams Library includes a base class called) 166.28 589.62 P
4 9.5 Q
-0.55 (<wrapper-stream>) 364.82 589.62 P
2 11 Q
-0.26 ( upon) 456.02 589.62 P
(which other wrapping str) 99.65 575.62 T
(eams can be implemented.) 223.93 575.62 T
4 9 Q
(define class <wrapper-stream> \050<stream>\051) 126.65 554.95 T
(slot inner-stream :: <stream>,) 137.45 543.95 T
(required-init-keyword: inner-stream:;) 169.85 532.95 T
(end class;) 126.65 521.95 T
2 11 Q
-0.11 (A subclass of) 99.65 501.62 P
4 9.5 Q
-0.22 (<wrapper-stream>) 166.09 501.62 P
2 11 Q
-0.11 ( can \322pass on\323 functions such as) 257.29 501.62 P
4 9.5 Q
-0.22 (read-element) 415.61 501.62 P
2 11 Q
(and) 99.65 487.62 T
4 9.5 Q
(write-element) 121.02 487.62 T
2 11 Q
( by simply delegating these operations to the inner str) 195.12 487.62 T
(eam:) 456.6 487.62 T
4 9 Q
(define method read-element \050ws :: <io-wrapper-stream>\051;) 126.65 466.95 T
(read-element\050ws.inner-stream\051) 137.45 455.95 T
(end method;) 126.65 444.95 T
(define method write-element \050ws :: <io-wrapper-stream>, element\051;) 126.65 425.95 T
(write-element\050ws.inner-stream,element\051) 137.45 414.95 T
(end method;) 126.65 403.95 T
2 11 Q
(Assuming that) 99.65 383.62 T
4 9.5 Q
(<io-wrapper-stream>) 174.17 383.62 T
2 11 Q
( delegates all other operations to its inner) 282.47 383.62 T
(str) 99.65 369.62 T
(eam, the following would suf) 112.04 369.62 T
(\336ce to implement a 16-bit Unicode character) 255 369.62 T
(str) 99.65 355.62 T
(eam wrapping an 8-bit character str) 112.04 355.62 T
(eam.) 285.28 355.62 T
4 9 Q
(define class <unicode-stream> \050<io-wrapper-stream>\051 end class;) 126.65 334.95 T
(define method read-element \050s :: <unicode-stream>\051) 126.65 315.95 T
(=> ch :: <unicode-character>;) 137.45 304.95 T
(with-stream-locked \050s\051) 137.45 293.95 T
(let first-char = read-element\050s.inner-stream\051;) 148.25 282.95 T
(let second-char = read-element\050s.inner-stream\051) 148.25 271.95 T
(end;) 137.45 260.95 T
(convert-byte-pair-to-unicode\050first-char, second-char\051) 137.45 249.95 T
(end method;) 126.65 238.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "45" 45
%%Page: "46" 46
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(46) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
4 F
0 X
(define method write-element) 135.65 666.95 T
(\050s :: <unicode-stream>,) 281.45 666.95 T
(c :: <character>\051;) 286.85 655.95 T
(let \050first-char, second-char\051 = convert-unicode-to-byte-pair\050c\051;) 146.45 644.95 T
(with-stream-locked \050s\051) 146.45 633.95 T
(write-element\050s.inner-stream, first-char\051;) 157.25 622.95 T
(write-element\050s.inner-stream, second-char\051) 157.25 611.95 T
(end;) 146.45 600.95 T
(c) 146.45 589.95 T
(end method;) 135.65 578.95 T
(define method stream-position \050s :: <unicode-stream>\051) 135.65 559.95 T
(=>  p :: <integer>;) 146.45 548.95 T
(truncate/\050stream-position\050s.inner-stream\051, 2\051) 146.45 537.95 T
(end method;) 135.65 526.95 T
(define method stream-position-setter) 135.65 507.95 T
(\050p :: <integer>,) 330.05 507.95 T
(s :: <unicode-stream>\051;) 330.05 496.95 T
(stream-position\050s.inner-stream\051 := p * 2) 146.45 485.95 T
(end method;) 135.65 474.95 T
3 13 Q
(1.9.1  Wrapper streams and delegation) 108.65 443.29 T
2 11 Q
(One pr) 108.65 423.62 T
(oblem with wrapper str) 142.47 423.62 T
(eams is the need for a wrapper str) 257.61 423.62 T
(eam to inter-) 422.55 423.62 T
(cept methods invoked by its inner str) 108.65 409.62 T
(eam. For example, consider two hypothet-) 289.45 409.62 T
-0.25 (ical str) 108.65 395.62 P
-0.25 (eams,) 140.33 395.62 P
4 9.5 Q
-0.52 (<interactive-stream>) 170.73 395.62 P
2 11 Q
-0.25 ( and) 284.73 395.62 P
4 9.5 Q
-0.52 (<dialog-stream>) 308.36 395.62 P
2 11 Q
-0.25 (, the latter a subclass) 393.86 395.62 P
(of) 108.65 381.62 T
4 9.5 Q
(<wrapper-stream>) 121.07 381.62 T
2 11 Q
(. Both of these classes have a method called) 212.27 381.62 T
4 9.5 Q
(prompt) 425.55 381.62 T
2 11 Q
(. The) 459.75 381.62 T
4 9.5 Q
(<interactive-stream>) 108.65 367.62 T
2 11 Q
( class specializes) 222.65 367.62 T
4 9.5 Q
(read) 305.77 367.62 T
2 11 Q
( thus:) 328.58 367.62 T
4 9 Q
(define method read \050) 135.65 346.95 T
(s :: <interactive-stream>,) 243.65 346.95 T
(n :: <integer>,) 243.65 335.95 T
(#key on-end-of-stream\051;) 243.65 324.95 T
(prompt\050s\051;) 146.45 313.95 T
(next-method\050\051) 146.45 302.95 T
(end method;) 135.65 291.95 T
2 11 Q
(If a) 108.65 271.62 T
4 9.5 Q
(<dialog-stream>) 127.02 271.62 T
2 11 Q
(is used to wrap an) 215.3 271.62 T
4 9.5 Q
(<interactive-stream>) 307.32 271.62 T
2 11 Q
( then an invo-) 421.32 271.62 T
(cation of) 108.65 257.62 T
4 9.5 Q
(read) 153.4 257.62 T
2 11 Q
(on the) 181.9 257.62 T
4 9.5 Q
(<dialog-stream>) 215.06 257.62 T
2 11 Q
( will call) 300.56 257.62 T
4 9.5 Q
(prompt) 344.37 257.62 T
2 11 Q
( on the inner) 378.57 257.62 T
4 9.5 Q
(<interactive-stream>) 108.65 243.62 T
2 11 Q
(, not on the) 222.65 243.62 T
4 9.5 Q
(<dialog-stream>) 280.06 243.62 T
2 11 Q
(, as desir) 365.56 243.62 T
(ed. The pr) 407.97 243.62 T
(oblem) 457.39 243.62 T
(is that the) 108.65 229.62 T
4 9.5 Q
(<dialog-stream>) 159.09 229.62 T
2 11 Q
( wants to delegate some tasks to its inner str) 244.59 229.62 T
(eam,) 458.43 229.62 T
(but handle some other tasks itself.) 108.65 215.62 T
(Some languages, notably Self, support such delegation in the language. Dylan,) 108.65 195.62 T
(in keeping with other generic-function-based languages, does not, but experi-) 108.65 181.62 T
(ence with str) 108.65 167.62 T
(eams packages in a number of other generic-function-based lan-) 170.73 167.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "46" 46
%%Page: "47" 47
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.9) 399.57 702.62 T
(Wrapper streams) 420.95 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(47) 477.65 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
2 11 Q
0 X
(guages has shown that it is) 99.65 665.62 T
0 F
(very) 233.39 665.62 T
2 F
( useful to pr) 252.94 665.62 T
(ovide delegation for wrapper) 311.61 665.62 T
(str) 99.65 651.62 T
(eams. So we pr) 112.04 651.62 T
(ovide an explicit implementation of delegation in the str) 185.17 651.62 T
(eams) 457.97 651.62 T
(system.) 99.65 637.62 T
(Delegation is implemented by the use of the) 99.65 617.62 T
4 9.5 Q
(outer-stream) 316.48 617.62 T
2 11 Q
( slot, which is) 384.88 617.62 T
(de\336ned in the base class) 99.65 603.62 T
4 9.5 Q
(<stream>) 219.72 603.62 T
2 11 Q
(:) 265.32 603.62 T
4 9 Q
(define abstract class <stream> \050<object>\051) 126.65 582.95 T
(slot outer-stream :: <stream>, init-keyword: outer-stream:;) 137.45 571.95 T
(end class;) 126.65 560.95 T
4 9.5 Q
(outer-stream) 99.65 540.62 T
2 11 Q
( is used instead of the str) 168.05 540.62 T
(eam itself whenever a str) 288.37 540.62 T
(eam invokes) 409.67 540.62 T
(one of its other pr) 99.65 526.62 T
(otocol methods.) 185.81 526.62 T
1 F
(Note:) 99.65 506.62 T
2 F
( A str) 126.84 506.62 T
(eam must not use) 153.29 506.62 T
4 9.5 Q
(inner-stream) 241.93 506.62 T
2 11 Q
( if performing r) 310.33 506.62 T
(ecursion, since this) 385.27 506.62 T
(would cause an in\336nite r) 99.65 492.62 T
(egr) 220.1 492.62 T
(ess.) 235.63 492.62 T
-0.34 (A corr) 99.65 472.62 P
-0.34 (ect implementation of the) 130 472.62 P
4 9.5 Q
-0.69 (read) 255.99 472.62 P
2 11 Q
-0.34 ( method in the example above would be as) 278.79 472.62 P
(follows:) 99.65 458.62 T
4 9 Q
(define method read \050) 126.65 437.95 T
(stream :: <interactive-stream>,) 234.65 437.95 T
(n :: <integer>) 234.65 426.95 T
(#key on-end-of-stream\051) 234.65 415.95 T
(prompt\050s.outer-stream\051;) 137.45 404.95 T
(next-method\050\051) 137.45 393.95 T
(end method;) 126.65 382.95 T
2 11 Q
(The) 99.65 362.62 T
4 9.5 Q
(initialize) 120.81 362.62 T
2 11 Q
( method on) 177.81 362.62 T
4 9.5 Q
(<stream>) 236.17 362.62 T
2 11 Q
( is de\336ned to set the) 281.77 362.62 T
4 9.5 Q
(outer-stream) 381.54 362.62 T
2 11 Q
( slot to) 449.94 362.62 T
(be the str) 99.65 348.62 T
(eam itself. The) 144.15 348.62 T
4 9.5 Q
(initialize) 217.63 348.62 T
2 11 Q
( method on) 274.63 348.62 T
4 9.5 Q
(<wrapper-stream>) 332.99 348.62 T
2 11 Q
( is special-) 424.19 348.62 T
(ized to set the) 99.65 334.62 T
4 9.5 Q
(outer-stream) 169.71 334.62 T
2 11 Q
( slot to be the \322par) 238.11 334.62 T
(ent\323 str) 327.27 334.62 T
(eam:) 363.18 334.62 T
4 9 Q
(define method initialize \050stream :: <wrapper-stream>,) 126.65 313.95 T
( #key on, #rest all-keys\051;) 213.05 302.95 T
(an-inner-stream.outer-stream := stream;) 137.45 291.95 T
(next-method\050\051) 137.45 280.95 T
(end method;) 126.65 269.95 T
1 11 Q
(Implementation Note:) 99.65 251.62 T
2 F
( One disadvantage of this scheme is that it may pr) 210.86 251.62 T
(event) 453.61 251.62 T
(useful optimizations, such as inlining. If this is an important performance issue) 99.65 237.62 T
(in cir) 99.65 223.62 T
(cumstances wher) 124.23 223.62 T
(e wrapper str) 208.17 223.62 T
(eams ar) 273.2 223.62 T
(e not necessary) 310.74 223.62 T
(, then it is r) 383.39 223.62 T
(elatively) 437.6 223.62 T
(simple to pr) 99.65 209.62 T
(ovide an implementation of the) 158.16 209.62 T
4 9.5 Q
(streams) 313.81 209.62 T
2 11 Q
( module that omits the del-) 353.71 209.62 T
(egation mechanism.) 99.65 195.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "47" 47
%%Page: "48" 48
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(48) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
3 16 Q
0 X
(1.10  Wrapper stream pr) 108.65 662.29 T
(otocol) 257.9 662.29 T
3 12 Q
(<wrapper) 108.65 626.95 T
(-stream>) 152.5 626.95 T
0 11 Q
(Open instantiable class) 392.57 627.62 T
2 F
(The class that implements the basic wrapper) 135.65 605.62 T
(-str) 351.42 605.62 T
(eam functionality) 367.48 605.62 T
(.) 451.88 605.62 T
(It takes a r) 135.65 585.62 T
(equir) 185.97 585.62 T
(ed init-keywor) 211.38 585.62 T
(d) 283 585.62 T
4 9.5 Q
(inner-stream:) 292.48 585.62 T
2 11 Q
(, which is used to specify) 366.58 585.62 T
(the wrapped str) 135.65 571.62 T
(eam.) 213.03 571.62 T
(The) 135.65 551.62 T
4 9.5 Q
(<wrapper-stream>) 156.81 551.62 T
2 11 Q
( class implements default methods for all of the) 248.01 551.62 T
(str) 135.65 537.62 T
(eam pr) 148.04 537.62 T
(otocol functions described in this document. Each default) 182.04 537.62 T
(method on) 135.65 523.62 T
4 9.5 Q
(<wrapper-stream>) 191.25 523.62 T
2 11 Q
( simply \322trampolines\323 to its inner str) 282.45 523.62 T
(eam.) 461.02 523.62 T
3 12 Q
(inner) 108.65 488.95 T
(-stream) 132.53 488.95 T
0 11 Q
(Open generic function) 396.22 489.62 T
4 9 Q
(inner-stream) 135.65 468.95 T
5 F
(wrapper-str) 205.85 468.95 T
(eam) 253.69 468.95 T
4 F
( =>) 270.19 468.95 T
5 F
(wrapped-str) 291.79 468.95 T
(eam) 341.14 468.95 T
2 11 Q
(Returns the str) 135.65 448.62 T
(eam wrapped by) 207.05 448.62 T
0 F
(wrapper-str) 292.21 448.62 T
(eam) 344.56 448.62 T
2 F
(.) 362.28 448.62 T
3 12 Q
(inner) 108.65 413.95 T
(-stream-setter) 132.53 413.95 T
0 11 Q
(Open generic function) 396.22 414.62 T
4 9 Q
(inner-stream-setter) 135.65 393.95 T
5 F
(str) 243.65 393.95 T
(eam) 254.48 393.95 T
(wrapper-str) 276.38 393.95 T
(eam) 324.23 393.95 T
4 F
( =>) 340.72 393.95 T
5 F
(str) 362.32 393.95 T
(eam) 373.16 393.95 T
2 11 Q
(W) 135.65 373.62 T
(raps) 145.83 373.62 T
0 F
(str) 169.7 373.62 T
(eam) 181.73 373.62 T
2 F
( with) 199.45 373.62 T
0 F
(wrapper-str) 227.31 373.62 T
(eam) 279.66 373.62 T
2 F
(. It does so by setting the) 297.38 373.62 T
4 9.5 Q
(inner-stream) 420.28 373.62 T
2 11 Q
(slot of) 135.65 359.62 T
0 F
(wrapper-str) 168.27 359.62 T
(eam) 220.62 359.62 T
2 F
( to) 238.34 359.62 T
0 F
(str) 253.44 359.62 T
(eam) 265.46 359.62 T
2 F
(, and the) 283.18 359.62 T
4 9.5 Q
(outer-stream) 328.06 359.62 T
2 11 Q
( slot of) 396.46 359.62 T
0 F
(str) 431.84 359.62 T
(eam) 443.86 359.62 T
2 F
( to) 461.58 359.62 T
0 F
(wrapper-str) 135.65 345.62 T
(eam) 188 345.62 T
2 F
(.) 205.72 345.62 T
1 F
(Note:) 135.65 325.62 T
2 F
( Applications should not set) 162.84 325.62 T
4 9.5 Q
(inner-stream) 302.15 325.62 T
2 11 Q
( and) 370.55 325.62 T
4 9.5 Q
(outer-stream) 394.68 325.62 T
2 11 Q
( slots) 463.08 325.62 T
(dir) 135.65 311.62 T
(ectly) 149.72 311.62 T
(. The) 171.55 311.62 T
4 9.5 Q
(inner-stream-setter) 198.22 311.62 T
2 11 Q
( function is for use only when imple-) 306.52 311.62 T
(menting str) 135.65 297.62 T
(eam classes.) 191.48 297.62 T
3 12 Q
(outer) 108.65 262.95 T
(-stream) 133.07 262.95 T
0 11 Q
(Open generic function) 396.22 263.62 T
4 9 Q
(outer-stream) 135.65 242.95 T
5 F
(str) 205.85 242.95 T
(eam) 216.68 242.95 T
4 F
( =>) 233.18 242.95 T
5 F
(wrapping-str) 254.78 242.95 T
(eam) 307.63 242.95 T
2 11 Q
(Returns the str) 135.65 222.62 T
(eam that is wrapping) 207.05 222.62 T
0 F
(str) 313.43 222.62 T
(eam) 325.45 222.62 T
2 F
(.) 343.17 222.62 T
3 12 Q
(outer) 108.65 187.95 T
(-stream-setter) 133.07 187.95 T
0 11 Q
(Open generic function) 396.22 188.62 T
4 9 Q
(outer-stream-setter) 135.65 167.95 T
5 F
(wrapper-str) 243.65 167.95 T
(eam) 291.49 167.95 T
(str) 313.39 167.95 T
(eam) 324.23 167.95 T
4 F
( =>) 340.72 167.95 T
5 F
(wrapper-str) 362.32 167.95 T
(eam) 410.17 167.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "48" 48
%%Page: "49" 49
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 486.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.10) 365.37 702.62 T
(Wrapper stream protocol) 391.5 702.62 T
99.65 113.12 486.65 148.95 R
7 X
V
0 9 Q
0 X
(06 Feb 1997) 99.65 131.95 T
1 F
(49) 477.65 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 486.65 672.95 R
7 X
V
2 11 Q
0 X
(Sets the) 126.65 665.62 T
4 9.5 Q
(outer-stream) 166.7 665.62 T
2 11 Q
( slot of) 235.1 665.62 T
0 F
(str) 270.48 665.62 T
(eam) 282.5 665.62 T
2 F
( to) 300.22 665.62 T
0 F
(wrapper-str) 315.31 665.62 T
(eam) 367.66 665.62 T
2 F
(.) 385.38 665.62 T
1 F
(Note:) 126.65 645.62 T
2 F
( Applications should not set) 153.84 645.62 T
4 9.5 Q
(inner-stream) 293.15 645.62 T
2 11 Q
( and) 361.55 645.62 T
4 9.5 Q
(outer-stream) 385.68 645.62 T
2 11 Q
( slots) 454.08 645.62 T
(dir) 126.65 631.62 T
(ectly) 140.72 631.62 T
(. The) 162.55 631.62 T
4 9.5 Q
(inner-stream-setter) 189.22 631.62 T
2 11 Q
( function is for use only when imple-) 297.52 631.62 T
(menting str) 126.65 617.62 T
(eam classes.) 182.48 617.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "49" 49
%%Page: "50" 50
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Streams Library) 108.65 702.62 T
108.65 112.95 495.65 148.95 R
7 X
V
1 9 Q
0 X
(50) 108.65 131.95 T
0 F
(06 Feb 1997) 451.48 131.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.65 150.95 495.65 672.95 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "50" 50
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 50
%%DocumentFonts: Palatino-Italic
%%+ Palatino-Bold
%%+ Palatino-Roman
%%+ Helvetica-Narrow-Bold
%%+ Courier-Bold
%%+ Palatino-BoldItalic
%%EOF
