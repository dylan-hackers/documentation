
Asynchronous Output
--------------------------

 function write-file (locator, byte-vectors, 
		      #key if-exists, if-does-not-exist) => ()

  Writes an entire file to disk.  On NT platforms this function uses
  overlapped (asynchronous) writes using the win32 function
  WriteFile.  On Windows 95 it sends write requests to another thread,
  which performs the writes synchronously.

  Before writing, write-file calls write-file-error-check(current-thread()).

   parameters:

     locator

       Either a <locator> or a string which can be coerced into a
       <locator> which identifies the file to be written.

     byte-vectors 

       A <sequence> of <byte-vector>s containing the contents of
       entire file in order.

    if-exists:

       One of #f, #"overwrite", #"truncate", #"replace" or #"signal".
       These options have the same meanings as for make <file-stream>.
       Default is #"truncate".

    if-does-not-exist:

       One of #f, #"create" or #"signal".  These options have the same
       meanings as for make <file-stream>.  Default is #"create".

 function wait-for-write-completion (#key thread = #f) => ()
  
  Wait for all write initiated by thread to complete (if thread = #f,
  waits for all writes to complete).  Once writes have completed,
  calls write-file-error-check(thread: thread).

  You should be sure to call this function sometime after calling
  write-file and before the main thread exits in order to ensure that
  no writes get dropped.

 function write-file-error-check (#key thread = #f) => ()

  Check to see if any errors have occurred in asynchronous file
  writes initiated by the thread specified (all threads if thread: is
  #f).  If errors have occurred then write-file-error-check waits for
  all writes associated with the specified thread (or all threads) to
  complete, and throws an instance of <write-file-errors> containing
  information about the write errors.  Only one error per file is
  reported, under the rationale that the user only really cares that
  the file was not successfully written.

 class <write-file-error> (<error>)

  An exception which represents an error in a write requested by
  write-file.

    method write-file-error-locator (err :: <write-file-error>) => (locator)

      The locator to the file for which writing failed.

    method write-file-error-thread (err :: <write-file-error>) 
    				=> (thread :: <thread>)

      The thread which initiated the failing write.

    method condition-to-string (err :: <write-file-error>) => (r :: <string>)

      Textually describe a write error.

 class <write-file-errors> (<error>)

  An exception which represents a collection of <write-file-error>s.

    method write-file-errors-errors (err :: <write-file-errors>) 
    				 => (errors :: <list>)

      The list of write errors.

    method condition-to-string (err :: <write-file-errors>) => (r :: <string>)

      Textually describe the write errors.

Memory Mapped Io
----------------

 <mapped-memory>  (<vector>)
 [sealed primary abstract non-instantiable class]

   The superclass of memory mapped objects.

 <memory-mapped-file>  (<mapped-memory>)
 [sealed primary concrete instantiable class]

   Make of <memory-mapped-file> returns a <memory-mapped-file> object,
   which is a descriptor (handle) for a file which has been mapped
   into virtual memory.  The contents of the file can be accessed with
   element, element-setter, and other methods.  Changes to the file on
   disk will not appear until either the vector or file is closed or
   the vector is flushed.

   Keywords

     locator: (required) 

       Either a <locator> or a string which can be coerced into a
       <locator> which identifies the file which should be mapped.

     direction: 

       One of #"input" or #"input-output".  Defaults to #"input".
       [Only #"input" is required for the compiler so far, so an easy
       goal reduction is to only intimate #"input" for the immediate
       future.  Although I would bet that we will find uses for
       #"input-output" in short order.]

     size:

       The symbol #"all" or a positive (greater than zero) <integer>.
       If the file exists, size: defaults to #"all", the size of the
       disk file being opened.  If you are creating a file using make
       <memory-mapped-file> you must specify a (non zero) size (size:
       is required). If the size specified is greater than the size of
       the existing file, the file is grown when the mapped pages are
       written back to disk.  If the expanding? keyword is passed #t,
       then the size is merely a recommended initial value - the file
       will expand as needed.  If the size specified is less than the
       size of file on disk, only the specified portion of the file is
       mapped (the file size is left unchanged).
    
    expanding?:
      
       #f or #t - default to #f.  If true, the file will expand as
       necessary to accommodate writes.  Note that the file on disk
       will almost always be larger than neccessary.  If you wish to
       shrink the file on close, pass the desired size to the
       final-size argument of close-mapped-memory.

    if-exists:

       One of #f, #"overwrite", #"truncate", #"replace" or #"signal".
       These options have the same meanings as for make <file-stream>.
       Default for #"input" is #f (do nothing special).  Default for
       #"input-output" is #"overwrite".

    if-does-not-exist:

       One of #f, #"create" or #"signal".  These options have the same
       meanings as for make <file-stream>.  Default for #"input" is
       #"signal".  Default for #"input-output" is #"create".

 close-mapped-memory(mapped-memory :: <mapped-memory>, #key final-size) => ()
   [sealed generic function]

   Close a <memory-mapped-file>.

 close-mapped-memory(mapped-memory :: <memory-mapped-file>,
		     #key final-size = #f) => ()
   [gf method]

   Closing a <memory-mapped-file> closes the file.  For
   #"input-output" files, any changes are written back to disk.  If
   the final-size is other than #f, the file is resized to final-size.
   This is useful for expanding output files, since they almost always
   end up larger than necessary.

 flush-memory-mapped(mapped-memory :: <memory-mapped-file>)
	 => ()
  [sealed generic function]

    Forces any changes in the mapped vector out to disk.

 element(mapped-vector :: <memory-mapped-file>, key :: <integer>,
          #key default)
     => (result :: <byte>)
  [gf method]

  element-setter(value :: <byte>, vector :: <memory-mapped-file>,
                 key :: <integer>) => (result :: <byte>)
  [gf method]

  [Would it be useful to have other kinds of element and
   element-setters, say ones for <integer>, <machine-word>,
   <byte-character>?  This might be done using the *-at and
   *-at-setter low level FFI functions.  Do we need copy-bytes
   methods?  Or their equivalents using element and element-setter?
   I.e. is the compiler using copy-bytes to construct <byte-vector>s
   (or is the use of copy-bytes limited to the streams library)?  If
   we need copy-bytes methods, to and from what kinds of collections,
   <byte-vector>s?  <byte-string>s?  <vector>s?]

  Also methods for forward-iteration-protocol, size, and maybe
  backward-iteration-protocol.

  Implication note.  This will require both a Win32 and a
  non-Windows (emulator) implementation where the Win32 implementation
  uses native memory mapped io and the emulator version uses creates
  a single byte vector using file streams.
