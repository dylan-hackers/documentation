%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            true  def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
%	FMquit  % Uncomment this line for traditional Frame failure behaviour
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 13 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Times-Bold FMFONTDEFINE
3 0 /Courier-Bold FMFONTDEFINE
4 0 /Times-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 9 Q
(A) 63.65 84.9 T
(ugust 14, 1996 12:56 pm) 69.88 84.9 T
0 10 Q
(1) 526.09 84.9 T
1 26 Q
-0.18 (Dylan Threads Library) 180.4 727.62 S
2 12 Q
(T) 268.03 679.45 T
(ony Mann) 274.93 679.45 T
(Harlequin Ltd.) 258.97 654.45 T
0 15 Q
(1.) 63.65 612.45 T
(Intr) 90.65 612.45 T
(oduction) 114.51 612.45 T
1 11 Q
(This is a design for a threads library for Dylan. The goals of this library) 63.65 586.12 T
(, in order of importance, are:) 377.91 586.12 T
3 F
(\245) 99.65 567.12 T
1 F
(Maps easily and ef) 113.4 567.12 T
(\336ciently onto OS pro) 195.91 567.12 T
(vided threads f) 288.33 567.12 T
(acilities for common OSs) 353.6 567.12 T
3 F
(\245) 99.65 551.12 T
1 F
(Permits all common thread models, including co-operati) 113.4 551.12 T
(v) 360.91 551.12 T
(e, pre-empti) 366.25 551.12 T
(v) 419.12 551.12 T
(e and concurrent) 424.46 551.12 T
3 F
(\245) 99.65 535.12 T
1 F
(Mak) 113.4 535.12 T
(es use of the language features of Dylan) 133.45 535.12 T
3 F
(\245) 99.65 519.12 T
1 F
(Pro) 113.4 519.12 T
(vides enough functionality to implement more adv) 128.51 519.12 T
(anced features portably in terms of the) 350.67 519.12 T
(basic features pro) 113.4 506.12 T
(vided here.) 190.82 506.12 T
(The library is called) 63.65 481.12 T
2 F
(thr) 154.68 481.12 T
(eads) 169.15 481.12 T
1 F
(. All documented bindings are e) 189.93 481.12 T
(xported from module) 330.3 481.12 T
2 F
(thr) 426.54 481.12 T
(eads) 441 481.12 T
1 F
(.) 461.78 481.12 T
0 15 Q
(2.) 63.65 439.45 T
(Ac) 90.65 439.45 T
(kno) 109.52 439.45 T
(wledg) 135.96 439.45 T
(ements) 178.62 439.45 T
1 12 Q
(The follo) 63.65 412.45 T
(wing people ha) 107.68 412.45 T
(v) 180.76 412.45 T
(e been instrumental in the production of this document: Bill Chiles,) 186.58 412.45 T
-0.46 (Simon Green, P) 63.65 398.45 P
-0.46 (aul Haahr) 138.88 398.45 P
-0.46 (, Rob Maclachlan, Scott McKay) 184.93 398.45 P
-0.46 (, Rod Mo) 336.96 398.45 P
-0.46 (yse, K) 381.6 398.45 P
-0.46 (eith Playford and T) 411.5 398.45 P
-0.46 (uck) 502.57 398.45 P
-0.46 (er) 519.78 398.45 P
(W) 63.65 384.45 T
(ithington.) 74.5 384.45 T
0 15 Q
(3.) 63.65 342.45 T
(Multi-thread Semantics) 90.65 342.45 T
1 11 Q
0.14 (The Threads library pro) 63.65 316.12 P
0.14 (vides multiple threads of control within a single space of objects and module v) 168.68 316.12 P
0.14 (ari-) 516.38 316.12 P
-0.25 (ables. Each thread runs in its o) 63.65 303.12 P
-0.25 (wn independent stack. The mechanism by which the threads are scheduled is) 196.57 303.12 P
0.05 (not speci\336ed, and it is not possible to determine ho) 63.65 290.12 P
0.05 (w the e) 287.46 290.12 P
0.05 (x) 319.16 290.12 P
0.05 (ecution of instructions by dif) 324.5 290.12 P
0.05 (ferent threads will) 451.52 290.12 P
0.1 (be interlea) 63.65 277.12 P
0.1 (v) 109.65 277.12 P
0.1 (ed. No mechanism is pro) 114.98 277.12 P
0.1 (vided to call a function on a thread other than the current thread. Nei-) 224.89 277.12 P
(ther is there a mechanism to signal an e) 63.65 264.12 T
(xception on a thread other than the current thread.) 237.01 264.12 T
0 12 Q
(3.1) 63.65 226.45 T
(Atomicity) 90.65 226.45 T
1 11 Q
-0.02 (It is currently undecided whether the threads library should guarantee that assignments to normal slots and) 63.65 201.12 P
-0.19 (v) 63.65 188.12 P
-0.19 (ariables are atomic. Implementations are encouraged \050b) 68.87 188.12 P
-0.19 (ut not mandated\051 to pro) 311.61 188.12 P
-0.19 (vide this atomicity guaran-) 413.97 188.12 P
0.28 0.01 (tee. Ho) 63.65 175.12 B
0.28 0.01 (we) 95.51 175.12 B
0.28 0.01 (v) 108.09 175.12 B
0.28 0.01 (er) 113.44 175.12 B
0.28 0.01 (, all implementations are mandated to pro) 121.57 175.12 B
0.28 0.01 (vide the guarantee for assignments to slots or v) 306.63 175.12 B
0.28 0.01 (ari-) 516.35 175.12 B
0.28 0.18 (ables which are def) 63.65 162.12 B
0.28 0.18 (ined to be) 152.55 162.12 B
2 F
0.28 0.18 (atomic) 201.52 162.12 B
1 F
0.28 0.18 (. There may be future discussions which will decide whether the) 234.38 162.12 B
(guarantee should be mandated for all slots and v) 63.65 149.12 T
(ariables.) 276 149.12 T
0.28 0.06 (F) 63.65 124.12 B
0.28 0.06 (or an implementation which does not pro) 69.66 124.12 B
0.28 0.06 (vide an atomicity guarantee, the results of accessing a normal) 254.55 124.12 B
(slot or v) 63.65 111.12 T
(ariable are unde\336ned if:) 99.43 111.12 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(2) 63.65 84.9 T
0 9 Q
(A) 421.88 84.9 T
(ugust 14, 1996 12:56 pm) 428.1 84.9 T
3 11 Q
(\245) 99.65 737.62 T
1 F
(The read could proceed in parallel with some write of the same location.) 113.4 737.62 T
3 F
(\245) 99.65 721.62 T
1 F
(T) 113.4 721.62 T
(w) 119.24 721.62 T
(o writes of the same location could ha) 127.07 721.62 T
(v) 293.96 721.62 T
(e proceeded in parallel since the last non-parallel) 299.3 721.62 T
(write.) 113.4 708.62 T
-0.01 (T) 63.65 683.62 P
-0.01 (w) 69.49 683.62 P
-0.01 (o memory references) 77.32 683.62 P
4 F
-0.01 (can pr) 172.89 683.62 P
-0.01 (oceed in par) 200.79 683.62 P
-0.01 (allel) 255.6 683.62 P
1 F
-0.01 (if the) 277.89 683.62 P
-0.01 (y are not e) 300.63 683.62 P
-0.01 (xplicitly sequentialized, either by being in) 346.55 683.62 P
(a single thread, or by e) 63.65 670.62 T
(xplicit inter) 163.68 670.62 T
(-thread synchronization.) 214.49 670.62 T
(It is an error for a program to generate an unde\336ned v) 63.65 645.62 T
(alue in this w) 299.5 645.62 T
(ay) 358.36 645.62 T
(.) 368.03 645.62 T
0.28 0.04 (Currently) 63.65 620.62 B
0.28 0.04 (, code which is intended to be portable amongst all implementations of the library may not rely) 105.44 620.62 B
0.22 (upon the atomicity guarantee for normal slots and v) 63.65 607.62 P
0.22 (ariables. Programmers should guard ag) 292.41 607.62 P
0.22 (ainst the possi-) 465.21 607.62 P
-0.19 (bility of unde\336ned v) 63.65 594.62 P
-0.19 (alues by either using) 152.32 594.62 P
2 F
-0.19 (atomic) 245.04 594.62 P
1 F
-0.19 ( slots / v) 276.8 594.62 P
-0.19 (ariables, or by using e) 312.93 594.62 P
-0.19 (xplicit inter) 408.83 594.62 P
-0.19 (-thread synchro-) 459.45 594.62 P
(nization.) 63.65 581.62 T
0 12 Q
(3.2) 63.65 543.95 T
(Or) 90.65 543.95 T
(dering) 104.41 543.95 T
1 11 Q
-0.17 (The ordering of visibility of side-ef) 63.65 518.62 P
-0.17 (fects performed in other threads is unde\336ned, unless e) 218.04 518.62 P
-0.17 (xplicit synchroni-) 453.9 518.62 P
-0.23 (zation is used. Implementations of the library may guarantee that the visibility of side-ef) 63.65 505.62 P
-0.23 (fects performed by) 449.02 505.62 P
-0.05 (another thread is ordered according to the control \337o) 63.65 492.62 P
-0.05 (w of the other thread \050) 294.55 492.62 P
4 F
-0.05 (str) 392.36 492.62 P
-0.05 (ong or) 403.48 492.62 P
-0.05 (dering) 432.05 492.62 P
1 F
-0.05 (\051, b) 460.77 492.62 P
-0.05 (ut multi-pro-) 475.17 492.62 P
-0.27 (cessor implementations may not be strongly ordered. Portable code should not assume strong ordering, and) 63.65 479.62 P
0.28 0.03 (should use e) 63.65 466.62 B
0.28 0.03 (xplicit synchronization where order of side ef) 118.83 466.62 B
0.28 0.03 (fects is important. There is currently no library) 322.17 466.62 B
(introspection f) 63.65 453.62 T
(acility to determine if the implementation is strongly or weakly ordered.) 127.39 453.62 T
0.03 (Because of the possibility of weak ordering, the compiler is free to assume that the ef) 63.65 428.62 P
0.03 (fects of other threads) 439 428.62 P
0.28 0.02 (may be ignored between e) 63.65 415.62 B
0.28 0.02 (xplicit synchronization points - and may perform an) 180.52 415.62 B
0.28 0.02 (y optimizations which pre-) 412.11 415.62 B
0 (serv) 63.65 402.62 P
0 (e the semantics of a single-thread model re) 81.81 402.62 P
0 (g) 270.15 402.62 P
0 (ardless of their ef) 275.6 402.62 P
0 (fects on other threads \050e.g. common sub-) 352 402.62 P
(e) 63.65 389.62 T
(xpression elimination, or changing the order of e) 68.37 389.62 T
(v) 282.56 389.62 T
(aluation\051.) 287.78 389.62 T
0 12 Q
(3.3) 63.65 351.95 T
(Explicit Sync) 90.65 351.95 T
(hr) 165.23 351.95 T
(onization) 176.99 351.95 T
1 11 Q
0.28 0.25 (The threads library pro) 63.65 326.62 B
0.28 0.25 (vides a v) 171.24 326.62 B
0.28 0.25 (ariety of synchronization f) 212.9 326.62 B
0.28 0.25 (acilities, described belo) 336.85 326.62 B
0.28 0.25 (w) 447.02 326.62 B
0.28 0.25 (. These f) 454.5 326.62 B
0.28 0.25 (acilities) 495.4 326.62 B
-0.06 (include mutual-e) 63.65 313.62 P
-0.06 (xclusion locks, semaphores and noti\336cations. Each f) 137.66 313.62 P
-0.06 (acility guarantees that when synchro-) 367.54 313.62 P
0.28 0.01 (nization has been achie) 63.65 300.62 B
0.28 0.01 (v) 166.8 300.62 B
0.28 0.01 (ed, all the side ef) 172.15 300.62 B
0.28 0.01 (fects of another thread are visible, at least up to the point where) 248.04 300.62 B
(that other thread last released the synchronization f) 63.65 287.62 T
(acility) 288.07 287.62 T
(.) 314.86 287.62 T
0.28 0.11 (An appropriate synchronization must be used to guard side-ef) 63.65 262.62 B
0.28 0.11 (fects on state if there is an) 343.71 262.62 B
0.28 0.11 (y possibility of) 463.37 262.62 B
0.28 0.1 (those side-ef) 63.65 249.62 B
0.28 0.1 (fects either being corrupted by another thread or corrupting another thread. F) 120.92 249.62 B
0.28 0.1 (or e) 470.44 249.62 B
0.28 0.1 (xample, a) 487.76 249.62 B
0.28 0.22 (function which assigns to tw) 63.65 236.62 B
0.28 0.22 (o slots of an object may require the use of a lock to guarantee that other) 196.63 236.62 B
(threads ne) 63.65 223.62 T
(v) 108.28 223.62 T
(er observ) 113.61 223.62 T
(e the object in a partly updated state.) 154.07 223.62 T
0.28 0.02 (It\325) 63.65 198.62 B
0.28 0.02 (s up to library designers to document when synchronization is not performed internally) 73.49 198.62 B
0.28 0.02 (, and when syn-) 460.91 198.62 B
0.28 0.13 (chronization protocols must be used by clients. The implications for the Dylan library \050and some other) 63.65 185.62 B
(lo) 63.65 172.62 T
(w-le) 71.93 172.62 T
(v) 91.2 172.62 T
(el libraries\051 are discussed belo) 96.54 172.62 T
(w) 229.45 172.62 T
(.) 236.68 172.62 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 9 Q
(A) 63.65 84.9 T
(ugust 14, 1996 12:56 pm) 69.88 84.9 T
0 10 Q
(3) 526.09 84.9 T
0 12 Q
(3.4) 63.65 736.95 T
(Dynamic en) 90.65 736.95 T
(vir) 157.52 736.95 T
(onment) 171.96 736.95 T
1 11 Q
0.28 0.31 (Dylan has an implicit notion of a dynamic en) 63.65 711.62 B
0.28 0.31 (vironment, corresponding to language constructs with) 277.52 711.62 B
4 F
-0.13 (dynamic e) 63.65 698.62 P
-0.13 (xtent) 108.2 698.62 P
1 F
-0.13 (. F) 129.59 698.62 P
-0.13 (or e) 140.91 698.62 P
-0.13 (xample, the) 157.41 698.62 P
2 F
-0.13 (block) 211.23 698.62 P
1 F
-0.13 ( construct can introduce) 236.91 698.62 P
4 F
-0.13 (cleanup-clauses) 344.54 698.62 P
1 F
-0.13 (, and the) 415.41 698.62 P
4 F
-0.13 (body) 455.35 698.62 P
1 F
-0.13 ( of the block) 476.73 698.62 P
0.22 (is e) 63.65 685.62 P
0.22 (x) 78.67 685.62 P
0.22 (ecuted in a dynamic en) 84.01 685.62 P
0.22 (vironment in which those cleanup-clauses are acti) 185.85 685.62 P
0.22 (v) 406.22 685.62 P
0.22 (e.) 411.55 685.62 P
4 F
0.22 (Handler) 422.15 685.62 P
0.22 (s) 458.71 685.62 P
1 F
0.22 ( and) 462.98 685.62 P
4 F
0.22 (e) 484.8 685.62 P
0.22 (xit pr) 489.47 685.62 P
0.22 (oce-) 512.72 685.62 P
(dur) 63.65 672.62 T
(es) 78.52 672.62 T
1 F
(are other e) 90.43 672.62 T
(xamples of language features related to the dynamic en) 136.69 672.62 T
(vironment.) 378.8 672.62 T
0 (The dynamic en) 63.65 647.62 P
0 (vironment is de\336ned to be thread-local. When a ne) 134.09 647.62 P
0 (w thread is created, it starts with a fresh) 356.56 647.62 P
0.28 0.08 (dynamic en) 63.65 634.62 B
0.28 0.08 (vironment. It is an error to attempt to use a handler or a non-local e) 115.28 634.62 B
0.28 0.08 (xit function belonging to) 419.86 634.62 B
(another thread. It is impossible to use an unwind-protect cleanup from another thread.) 63.65 621.62 T
0.28 0.1 (Although the binding of condition handlers only af) 63.65 596.62 B
0.28 0.1 (fects the dynamic en) 294.19 596.62 B
0.28 0.1 (vironment of the current thread,) 387.27 596.62 B
0.28 0.03 (unhandled conditions are passed to the global generic function) 63.65 583.62 B
2 F
0.28 0.03 (default-handler) 345.66 583.62 B
1 F
0.28 0.03 (. Potentially this function) 418.83 583.62 B
(might) 63.65 570.62 T
4 F
(call the deb) 92.07 570.62 T
(ug) 143.18 570.62 T
(g) 154.07 570.62 T
(er) 159.46 570.62 T
1 F
(. The threads library does not de\336ne what this term might mean.) 168.02 570.62 T
0.11 (Note that in Dylan, unlik) 63.65 545.62 P
0.11 (e in C and C++,) 173.66 545.62 P
4 F
0.11 (le) 247.11 545.62 P
0.11 (xical) 254.84 545.62 P
1 F
0.11 ( v) 276.22 545.62 P
0.11 (ariables \050i.e. local, or LET bound v) 284.3 545.62 P
0.11 (ariables\051 ha) 438.95 545.62 P
0.11 (v) 489.85 545.62 P
0.11 (e inde\336-) 495.18 545.62 P
-0.13 (nite e) 63.65 532.62 P
-0.13 (xtent, and are not bound in the dynamic en) 87.49 532.62 P
-0.13 (vironment. In general, the v) 273.9 532.62 P
-0.13 (ariables are potentially global -) 395.3 532.62 P
0.28 0.1 (and programmers may need to e) 63.65 519.62 B
0.28 0.1 (xplicitly synchronize accesses to them accordingly) 209.08 519.62 B
0.28 0.1 (. The introduction of) 437.86 519.62 B
0.04 (threads to Dylan does not af) 63.65 506.62 P
0.04 (fect the ef) 187.32 506.62 P
0.04 (\336cienc) 231.11 506.62 P
0.04 (y of le) 260.27 506.62 P
0.04 (xical v) 288.3 506.62 P
0.04 (ariables which do not require e) 317.7 506.62 P
0.04 (xplicit synchroni-) 453.69 506.62 P
(zation.) 63.65 493.62 T
0 12 Q
(3.5) 63.65 455.95 T
(Thread-Local V) 90.65 455.95 T
(ariab) 176.62 455.95 T
(les) 205.18 455.95 T
1 11 Q
0.09 (The threads library pro) 63.65 430.62 P
0.09 (vides a ne) 164.85 430.62 P
0.09 (w type of v) 208.74 430.62 P
0.09 (ariables,) 258.52 430.62 P
4 F
0.09 (thr) 298.32 430.62 P
0.09 (ead) 310.75 430.62 P
1 F
0.09 (v) 329.47 430.62 P
0.09 (ariables. These are similar to normal module) 334.69 430.62 P
0.26 (v) 63.65 417.62 P
0.26 (ariables in the sense that the) 68.87 417.62 P
0.26 (y are visible according to the same scoping rules, and ha) 193.76 417.62 P
0.26 (v) 444.57 417.62 P
0.26 (e the same seman-) 449.9 417.62 P
0.23 (tics in a single-threaded program. Ho) 63.65 404.62 P
0.23 (we) 228.25 404.62 P
0.23 (v) 240.8 404.62 P
0.23 (er) 246.13 404.62 P
0.23 (, in contrast to a normal v) 254.24 404.62 P
0.23 (ariable, assignments to a) 368.06 404.62 P
4 F
0.23 (thr) 479.86 404.62 P
0.23 (ead) 492.29 404.62 P
1 F
0.23 ( v) 508.18 404.62 P
0.23 (ari-) 516.38 404.62 P
(able in one thread will not be visible when e) 63.65 391.62 T
(v) 257.98 391.62 T
(aluating the v) 263.21 391.62 T
(ariable in another thread.) 322.82 391.62 T
0.18 (Whene) 63.65 366.62 P
0.18 (v) 94.53 366.62 P
0.18 (er a thread is created, the v) 99.86 366.62 P
0.18 (alue of each thread v) 218.85 366.62 P
0.18 (ariable is initialized to a thread-independent v) 310.91 366.62 P
0.18 (alue) 513.32 366.62 P
(resulting from a once-only e) 63.65 353.62 T
(v) 188.01 353.62 T
(aluation of the initialization e) 193.24 353.62 T
(xpression of the thread v) 322.62 353.62 T
(ariable de\336nition.) 431.1 353.62 T
0 12 Q
(3.6) 63.65 315.95 T
(Dynamic Binding) 90.65 315.95 T
1 11 Q
-0.03 (The threads library e) 63.65 290.62 P
-0.03 (xports a macro for) 154.73 290.62 P
4 F
-0.03 (dynamic binding) 238.32 290.62 P
1 F
-0.03 (. A) 311.93 290.62 P
4 F
-0.03 (binding) 328.07 290.62 P
1 F
-0.03 ( is a mapping between a v) 361.68 290.62 P
-0.03 (ariable and a) 475.5 290.62 P
4 F
-0.11 (value-cell) 63.65 277.62 P
1 F
-0.11 ( which holds the v) 107.02 277.62 P
-0.11 (ariable\325) 186.96 277.62 P
-0.11 (s v) 219.95 277.62 P
-0.11 (alue. A) 232.1 277.62 P
4 F
-0.11 (dynamic) 266.39 277.62 P
1 F
-0.11 (binding is a binding which has dynamic e) 306.3 277.62 P
-0.11 (xtent, and) 488.37 277.62 P
0.28 0.12 (shado) 63.65 264.62 B
0.28 0.12 (ws an) 89.63 264.62 B
0.28 0.12 (y outermost bindings. Dynamic bindings can be considered to be a property of the dynamic) 115.69 264.62 B
(en) 63.65 251.62 T
(vironment.) 73.59 251.62 T
4 F
-0.06 (Thr) 63.65 226.62 P
-0.06 (ead) 79.14 226.62 P
1 F
-0.06 ( v) 95.02 226.62 P
-0.06 (ariables may ha) 102.93 226.62 P
-0.06 (v) 171.63 226.62 P
-0.06 (e ne) 176.97 226.62 P
-0.06 (w dynamic bindings created for them with the macro) 194.65 226.62 P
2 F
-0.06 (dynamic-bind) 429.65 226.62 P
1 F
-0.06 (. Thread) 495.06 226.62 P
0.28 0.06 (v) 63.65 213.62 B
0.28 0.06 (ariables inherently ha) 68.93 213.62 B
0.28 0.06 (v) 165.32 213.62 B
0.28 0.06 (e thread-local bindings, so it is possible to dynamically re-bind a thread v) 170.71 213.62 B
0.28 0.06 (ariable) 501.35 213.62 B
-0.25 (using the Dylan construct) 63.65 200.62 P
2 F
-0.25 (block) 178.13 200.62 P
1 F
-0.25 ( /) 203.8 200.62 P
2 F
-0.25 (cleanup) 211.85 200.62 P
1 F
-0.25 (. The) 248.53 200.62 P
2 F
-0.25 (dynamic-bind) 273.38 200.62 P
1 F
-0.25 ( macro may possibly be implemented in this) 338.78 200.62 P
(w) 63.65 187.62 T
(ay) 71.48 187.62 T
(.) 81.15 187.62 T
-0.26 (The thread-local nature of dynamically bindable v) 63.65 162.62 P
-0.26 (ariables may not be optimal for all problem domains. F) 282.38 162.62 P
-0.26 (or) 522.48 162.62 P
-0.23 (instance a shared, global, outermost binding may be desirable, or alternati) 63.65 149.62 P
-0.23 (v) 385.84 149.62 P
-0.23 (ely) 391.17 149.62 P
-0.23 (, a thread may w) 403.9 149.62 P
-0.23 (ant to inherit) 475.88 149.62 P
0.28 0.06 (current bindings from the parent thread at creation time, gi) 63.65 136.62 B
0.28 0.06 (ving a \322fork\323 type model of state inheritance.) 327.61 136.62 B
0.28 0.19 (These alternati) 63.65 123.62 B
0.28 0.19 (v) 131.54 123.62 B
0.28 0.19 (es are not implemented in this library) 137.06 123.62 B
0.28 0.19 (, b) 309.53 123.62 B
0.28 0.19 (ut the) 321.15 123.62 B
0.28 0.19 (y might be an interesting area for future) 347.14 123.62 B
(research.) 63.65 110.62 T
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(4) 63.65 84.9 T
0 9 Q
(A) 421.88 84.9 T
(ugust 14, 1996 12:56 pm) 428.1 84.9 T
0 15 Q
(4.) 63.65 734.95 T
(Threads-Related Class Hierar) 90.65 734.95 T
(c) 299.58 734.95 T
(h) 307.77 734.95 T
(y) 316.64 734.95 T
63.65 105.95 531.65 744.95 C
63.65 134.95 531.65 704.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 218.95 522.65 677.95 18 RR
7 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
81.65 245.95 504.65 515.95 18 RR
N
99.65 263.95 243.65 362.95 18 RR
7 X
V
0 X
N
333.65 542.95 198.65 308.95 2 L
N
135.65 308.95 297.65 614.95 2 L
N
1 12 Q
(SEALED) 107.65 345.76 T
2 10 Q
(<noti\336cation>) 165.91 293.25 T
(<thr) 114.1 293.05 T
(ead>) 132.95 293.05 T
252.65 263.95 486.65 362.95 18 RR
7 X
V
0 X
N
(<synchr) 299.09 554.25 T
(onization>) 333.5 554.25 T
(<lock>) 351.65 491.25 T
(<semaphor) 414.65 293.25 T
(e>) 462.39 293.25 T
(<simple-lock>) 261.65 293.05 T
333.65 569.95 297.65 614.95 2 L
N
360.65 506.95 333.65 542.95 2 L
N
297.65 308.95 342.65 407.95 2 L
N
369.65 308.95 342.65 407.95 2 L
N
1 12 Q
(PRIMAR) 423.65 347.56 T
(Y) 468.88 347.56 T
(ABSTRA) 81.97 552.77 T
(CT) 128.83 552.77 T
189.65 650.95 396.65 677.95 R
N
4 11 Q
(THREAD) 207.65 660.91 T
(RELA) 255.31 660.91 T
(TED) 281.18 660.91 T
( CLASSES) 307.46 660.91 T
2 10 Q
(<object>) 278.15 626.25 T
1 12 Q
(INST) 99.65 491.56 T
(ANTIABLE) 125.2 491.56 T
2 10 Q
(<r) 333.65 293.25 T
(ecursi) 343.61 293.25 T
(v) 369.06 293.25 T
(e-lock>) 373.96 293.25 T
432.65 308.95 369.65 479.95 2 L
N
(<exclusi) 306.65 419.25 T
(v) 341.14 419.25 T
(e-lock>) 346.04 419.25 T
369.65 479.95 351.65 434.95 2 L
N
63.65 105.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 9 Q
(A) 63.65 84.9 T
(ugust 14, 1996 12:56 pm) 69.88 84.9 T
0 10 Q
(5) 526.09 84.9 T
0 15 Q
(5.) 63.65 734.95 T
(Librar) 90.65 734.95 T
(y Ref) 133.31 734.95 T
(erence) 169.83 734.95 T
0 12 Q
(5.1) 63.65 695.95 T
(<thread>) 90.65 695.95 T
2 11 Q
(<thread>) 63.65 664.62 T
1 F
([Instantiable Sealed Class]) 414.33 664.62 T
4 F
(Super) 81.65 639.62 T
(classes) 106.9 639.62 T
2 F
(<object>) 99.65 617.62 T
4 F
(Requir) 81.65 592.62 T
(ed-init-k) 111.18 592.62 T
(e) 148.34 592.62 T
(ywor) 152.9 592.62 T
(ds) 174.49 592.62 T
2 F
(function:) 99.65 570.62 T
1 F
-0.13 (A) 171.65 570.62 P
2 F
-0.13 (<function>) 182.21 570.62 P
1 F
-0.13 ( which will be called with no ar) 233.86 570.62 P
-0.13 (guments in the empty dynamic en) 371.74 570.62 P
-0.13 (vi-) 519.43 570.62 P
-0.14 (ronment of the ne) 171.65 557.62 P
-0.14 (w thread. This function will be runnable immediately) 248.86 557.62 P
-0.14 (. If desired,) 481.83 557.62 P
0.28 0.02 (the ne) 171.65 544.62 B
0.28 0.02 (w thread may be suspended \050almost\051 immediately on creation by arranging) 198.33 544.62 B
(for it to synchronize on an una) 171.65 531.62 T
(v) 305.85 531.62 T
(ailable resource on entry to the function.) 311.07 531.62 T
4 F
(Init-k) 81.65 506.62 T
(e) 105.36 506.62 T
(ywor) 109.92 506.62 T
(ds) 131.51 506.62 T
2 F
(priority:) 99.65 484.62 T
1 F
0.28 0.14 (The scheduling priority of the thread, which is a signed inte) 171.65 484.62 B
0.28 0.14 (ger) 445.21 484.62 B
0.28 0.14 (. The higher the) 459.07 484.62 B
0.28 0 (v) 171.65 471.62 B
0.28 0 (alue, the greater the priority) 176.87 471.62 B
0.28 0 (.) 299.79 471.62 B
2 F
0.28 0 ( 0) 302.54 471.62 B
1 F
0.28 0 ( is the def) 311.07 471.62 B
0.28 0 (ault v) 354.87 471.62 B
0.28 0 (alue, and is the v) 379.62 471.62 B
0.28 0 (alue of) 454.71 471.62 B
2 F
0.28 0 ($normal-) 488.26 471.62 B
0.28 0.03 (priority) 171.65 458.62 B
1 F
0.28 0.03 (, one of se) 207.8 458.62 B
0.28 0.03 (v) 253.84 458.62 B
0.28 0.03 (eral constants which correspond to useful priority le) 259.2 458.62 B
0.28 0.03 (v) 491.01 458.62 B
0.28 0.03 (els. The) 496.37 458.62 B
(library currently of) 171.65 445.62 T
(fers no w) 255.07 445.62 T
(ay to change the priority of a thread dynamically) 295.89 445.62 T
(.) 509.63 445.62 T
2 F
(name:) 99.65 423.62 T
1 F
-0.09 (If supplied, this should be a) 171.65 423.62 P
2 F
-0.09 (<string>) 295.48 423.62 P
1 F
-0.09 (, which names the thread object for purposes) 335.52 423.62 P
0.28 0.05 (which might include deb) 171.65 410.62 B
0.28 0.05 (ugging, or supporting inter) 282.59 410.62 B
0.28 0.05 (-process communication in a) 402.61 410.62 B
(future v) 171.65 397.62 T
(ersion of the library) 206 397.62 T
(.) 292.35 397.62 T
4 F
(Description) 81.65 372.62 T
1 F
-0.14 (The class representing a thread of control. Note that there is currently no ability to introspect or set) 99.65 350.62 P
-0.14 (the running state or priority of a thread. These abilities are considered to be related to de) 99.65 337.62 P
-0.14 (v) 485.37 337.62 P
-0.14 (elopment) 490.71 337.62 P
0.1 (en) 99.65 324.62 P
0.1 (vironments, deb) 109.59 324.62 P
0.1 (uggers or schedulers and were deliberately omitted. There is also no w) 180.36 324.62 P
0.1 (ay to ter-) 491.73 324.62 P
0.04 (minate a thread, mainly because I don\325) 99.65 311.62 P
0.04 (t think it\325) 270.47 311.62 P
0.04 (s a safe thing to do an) 310.91 311.62 P
0.04 (yw) 406.93 311.62 P
0.04 (ay without the consent of) 420.27 311.62 P
0.28 0.03 (the thread - and I don\325) 99.65 298.62 B
0.28 0.03 (t kno) 199.57 298.62 B
0.28 0.03 (w ho) 222.02 298.62 B
0.28 0.03 (w to implement it so that cleanups happen. There is currently no) 243.83 298.62 B
0.28 0.08 (w) 99.65 285.62 B
0.28 0.08 (ay to signal a condition on another thread. If there w) 107.56 285.62 B
0.28 0.08 (as, it might pro) 344.98 285.62 B
0.28 0.08 (v) 413.48 285.62 B
0.28 0.08 (e a safe w) 418.89 285.62 B
0.28 0.08 (ay to terminate) 464.04 285.62 B
(threads, so we might lik) 99.65 272.62 T
(e to consider this for the future.) 204.95 272.62 T
4 F
(Oper) 81.65 247.62 T
(ations) 104.09 247.62 T
1 F
(The class) 99.65 225.62 T
2 F
(<thr) 143.64 225.62 T
(ead>) 164.37 225.62 T
1 F
( pro) 187.14 225.62 T
(vides the follo) 204.39 225.62 T
(wing operations:) 267.06 225.62 T
2 F
(thr) 99.65 203.62 T
(ead-name) 114.11 203.62 T
1 F
(Returns the name of a thread, or) 171.65 203.62 T
2 F
(#f) 315.84 203.62 T
1 F
( if no name w) 325 203.62 T
(as supplied.) 385.38 203.62 T
2 F
(join-thr) 99.65 181.62 T
(ead) 136.11 181.62 T
1 F
0.22 (Blocks until one of the speci\336ed threads has terminated, and returns the v) 171.65 181.62 P
0.22 (alues of) 496.91 181.62 P
(its function.) 171.65 168.62 T
4 F
(Associated Constants) 81.65 143.62 T
1 F
-0.05 (The follo) 99.65 121.62 P
-0.05 (wing constants \050in order of increasing v) 139.96 121.62 P
-0.05 (alue\051 may be useful as priority v) 314.16 121.62 P
-0.05 (alues for threads:) 455.98 121.62 P
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(6) 63.65 84.9 T
0 9 Q
(A) 421.88 84.9 T
(ugust 14, 1996 12:56 pm) 428.1 84.9 T
2 11 Q
($lo) 99.65 737.62 T
(w-priority) 113.6 737.62 T
($backgr) 99.65 715.62 T
(ound-priority) 137.95 715.62 T
($normal-priority) 99.65 693.62 T
($interacti) 99.65 671.62 T
(v) 144.75 671.62 T
(e-priority) 150.14 671.62 T
($high-priority) 99.65 649.62 T
(thread-name) 63.65 620.62 T
1 F
([Function]) 485.21 620.62 T
4 F
(Signatur) 81.65 595.62 T
(e) 119.14 595.62 T
2 F
(\050thr) 99.65 576.62 T
(ead :: <thr) 117.78 576.62 T
(ead>\051 => \050name :: false-or\050<string>\051\051) 167.84 576.62 T
4 F
(Description) 81.65 551.62 T
1 F
(Returns the name of the thread as a) 99.65 529.62 T
2 F
(<string>) 257.28 529.62 T
1 F
(, or) 297.32 529.62 T
(, if the thread is unnamed, returns) 311.54 529.62 T
2 F
(#f) 462.15 529.62 T
1 F
(.) 471.32 529.62 T
2 F
(join-thread) 63.65 500.62 T
1 F
([Function]) 485.21 500.62 T
4 F
(Signatur) 81.65 475.62 T
(e) 119.14 475.62 T
2 F
(\050thr) 99.65 456.62 T
(ead1 :: <thr) 117.78 456.62 T
(ead>, #r) 173.34 456.62 T
(est mor) 211.79 456.62 T
(e-thr) 246.72 456.62 T
(eads\051 => \050thr) 269.73 456.62 T
(ead, #r) 330.34 456.62 T
(est r) 362.53 456.62 T
(esults\051) 382.79 456.62 T
4 F
(Ar) 81.65 431.62 T
(guments) 92.24 431.62 T
2 F
(thr) 99.65 409.62 T
(ead1) 114.11 409.62 T
1 F
(A thread object to w) 171.65 409.62 T
(ait for) 261.35 409.62 T
(.) 287.32 409.62 T
2 F
(mor) 99.65 387.62 T
(e-thr) 119 387.62 T
(eads) 142.01 387.62 T
1 F
(More thread objects to w) 171.65 387.62 T
(ait for) 281.52 387.62 T
(.) 307.49 387.62 T
4 F
(V) 81.65 362.62 T
(alues) 87.15 362.62 T
2 F
(thr) 99.65 340.62 T
(ead) 114.11 340.62 T
1 F
(The thread that e) 171.65 340.62 T
(xited) 245.71 340.62 T
2 F
(r) 99.65 318.62 T
(esults) 104.33 318.62 T
1 F
(The v) 171.65 318.62 T
(alues returned from the thread that w) 196.73 318.62 T
(as joined) 359.13 318.62 T
4 F
(Description) 81.65 293.62 T
1 F
0.28 0.04 (Returns one of the supplied threads which has f) 99.65 271.62 B
0.28 0.04 (inished \050because its function has returned\051, along) 312.07 271.62 B
0.28 0.12 (with an) 99.65 258.62 B
0.28 0.12 (y v) 133.27 258.62 B
0.28 0.12 (alues returned by the thread.) 147.37 258.62 B
2 F
0.28 0.12 (join-thr) 279.94 258.62 B
0.28 0.12 (ead) 317.34 258.62 B
1 F
0.28 0.12 ( will block if necessary) 334.19 258.62 B
0.28 0.12 (, while w) 439.42 258.62 B
0.28 0.12 (aiting for a) 481.54 258.62 B
-0.18 (thread to \336nish. It is an error to pass a thread to) 99.65 245.62 P
2 F
-0.18 ( join-thr) 305.41 245.62 P
-0.18 (ead) 344.44 245.62 P
1 F
-0.18 ( if it has already been joined in a pre) 360.94 245.62 P
-0.18 (vi-) 519.43 245.62 P
-0.21 (ous call to) 99.65 232.62 P
2 F
-0.21 (join-thr) 146.99 232.62 P
-0.21 (ead) 183.46 232.62 P
1 F
-0.21 (. It is an error to pass a thread to) 199.96 232.62 P
2 F
-0.21 (join-thr) 342.36 232.62 P
-0.21 (ead) 378.83 232.62 P
1 F
-0.21 ( if that thread is also being pro-) 395.33 232.62 P
(cessed by another simultaneous call to) 99.65 219.62 T
2 F
(join-thr) 271.35 219.62 T
(ead) 307.81 219.62 T
1 F
( from another thread.) 324.31 219.62 T
4 F
(Exceptions) 81.65 194.62 T
2 F
(join-thr) 99.65 172.62 T
(ead) 136.11 172.62 T
1 F
( may signal the follo) 152.61 172.62 T
(wing condition:) 242.78 172.62 T
2 F
(<duplicate-join-err) 99.65 150.62 T
(or>) 189.43 150.62 T
1 F
0.28 0.01 (A condition of this class \050a subclass of) 171.65 137.62 B
2 F
0.28 0.01 (<err) 346.71 137.62 B
0.28 0.01 (or>) 367.48 137.62 B
1 F
0.28 0.01 (\051 may be signalled when a thread) 384.18 137.62 B
0.28 0.13 (is passed to) 171.65 124.62 B
2 F
0.28 0.13 (join-thr) 227.64 124.62 B
0.28 0.13 (ead) 265.15 124.62 B
1 F
0.28 0.13 (, if that thread has been pre) 282.05 124.62 B
0.28 0.13 (viously joined by an earlier) 406.65 124.62 B
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 9 Q
(A) 63.65 84.9 T
(ugust 14, 1996 12:56 pm) 69.88 84.9 T
0 10 Q
(7) 526.09 84.9 T
1 11 Q
0.28 0.2 (call to) 171.65 737.62 B
2 F
0.28 0.2 (join-thr) 203.77 737.62 B
0.28 0.2 (ead) 241.87 737.62 B
1 F
0.28 0.2 (, or if that thread is currently acti) 258.99 737.62 B
0.28 0.2 (v) 413 737.62 B
0.28 0.2 (e in another call to) 418.54 737.62 B
2 F
0.28 0.2 (join-) 508.83 737.62 B
(thr) 171.65 724.62 T
(ead) 186.11 724.62 T
1 F
(.) 202.61 724.62 T
2 F
(thread-yield) 63.65 695.62 T
1 F
([Function]) 485.21 695.62 T
4 F
(Signatur) 81.65 670.62 T
(e) 119.14 670.62 T
2 F
(\050\051 => \050\051) 99.65 651.62 T
4 F
(Description) 81.65 626.62 T
1 F
0.28 0.2 (Causes the current thread to yield control to the thread scheduler) 99.65 604.62 B
0.28 0.2 (. This may ha) 398.96 604.62 B
0.28 0.2 (v) 462.02 604.62 B
0.28 0.2 (e the ef) 467.55 604.62 B
0.28 0.2 (fect of) 501.78 604.62 B
-0.16 (allo) 99.65 591.62 P
-0.16 (wing other threads to run - and may be essential to a) 115.87 591.62 P
-0.16 (v) 343.98 591.62 P
-0.16 (oid deadlock in a co-operati) 349.27 591.62 P
-0.16 (v) 471.17 591.62 P
-0.16 (e scheduling) 476.51 591.62 P
(en) 99.65 578.62 T
(vironment.) 109.59 578.62 T
2 F
(current-thread) 63.65 549.62 T
1 F
([Function]) 485.21 549.62 T
4 F
(Signatur) 81.65 524.62 T
(e) 119.14 524.62 T
2 F
(\050\051 => \050thr) 99.65 505.62 T
(ead :: <thr) 143.14 505.62 T
(ead>\051) 193.2 505.62 T
4 F
(Description) 81.65 480.62 T
1 F
(Returns the current thread.) 99.65 458.62 T
0 12 Q
(5.2) 63.65 420.95 T
(<sync) 90.65 420.95 T
(hr) 124.88 420.95 T
(onization>) 136.64 420.95 T
2 11 Q
(<synchronization>) 63.65 389.62 T
1 F
([Abstract Open Class]) 433.89 389.62 T
4 F
(Super) 81.65 364.62 T
(classes) 106.9 364.62 T
2 F
(<object>) 99.65 342.62 T
4 F
(Init-k) 81.65 317.62 T
(e) 105.36 317.62 T
(ywor) 109.92 317.62 T
(ds) 131.51 317.62 T
2 F
(name:) 99.65 295.62 T
1 F
-0.17 (If supplied, this should be a) 171.65 295.62 P
2 F
-0.17 (<string>) 294.98 295.62 P
1 F
-0.17 (, which names the synchronization object for) 335.02 295.62 P
0.28 0.06 (purposes which might include deb) 171.65 282.62 B
0.28 0.06 (ugging, or supporting inter) 325.51 282.62 B
0.28 0.06 (-process communi-) 445.79 282.62 B
(cation in a future v) 171.65 269.62 T
(ersion of the library) 254.58 269.62 T
(.) 340.93 269.62 T
4 F
(Oper) 81.65 244.62 T
(ations) 104.09 244.62 T
1 F
(The class) 99.65 222.62 T
2 F
(<synchr) 143.64 222.62 T
(onization>) 181.49 222.62 T
1 F
( provides the following operations:) 231.15 222.62 T
2 F
(wait-f) 99.65 200.62 T
(or) 126.86 200.62 T
1 F
(Block until synchronization can be achie) 171.65 200.62 T
(v) 350.71 200.62 T
(ed.) 356.04 200.62 T
2 F
(r) 99.65 178.62 T
(elease) 104.33 178.62 T
1 F
(Release the object to mak) 171.65 178.62 T
(e it a) 284.57 178.62 T
(v) 305.74 178.62 T
(ailable for synchronization.) 310.96 178.62 T
2 F
(synchr) 99.65 156.62 T
(onization-name) 131.23 156.62 T
1 F
(Returns the name of the synchronization object.) 171.65 143.62 T
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(8) 63.65 84.9 T
0 9 Q
(A) 421.88 84.9 T
(ugust 14, 1996 12:56 pm) 428.1 84.9 T
4 11 Q
(Description) 81.65 737.62 T
1 F
0.05 (The class of objects which are used for inter) 99.65 715.62 P
0.05 (-thread synchronization. There is currently no e) 294.13 715.62 P
0.05 (xplicit) 503.53 715.62 P
0.28 0.1 (mechanism in the library to block on a number of synchronization objects simultaneously) 99.65 702.62 B
0.28 0.1 (, until) 505.1 702.62 B
0.28 0.07 (synchronization can be achie) 99.65 689.62 B
0.28 0.07 (v) 229.42 689.62 B
0.28 0.07 (ed with one of them. This mechanism may be achie) 234.82 689.62 B
0.28 0.07 (v) 466.86 689.62 B
0.28 0.07 (ed instead by) 472.26 689.62 B
0.28 0.14 (creating a ne) 99.65 676.62 B
0.28 0.14 (w thread to w) 157.98 676.62 B
0.28 0.14 (ait for each synchronization object, and arranging for each thread to) 220.74 676.62 B
(release a noti\336cation once synchronization has been achie) 99.65 663.62 T
(v) 353.84 663.62 T
(ed.) 359.17 663.62 T
2 F
(wait-for) 63.65 634.62 T
1 F
([Open Generic Function]) 421.07 634.62 T
4 F
(Signatur) 81.65 609.62 T
(e) 119.14 609.62 T
2 F
(\050object :: <synchr) 99.65 590.62 T
(onization>, #k) 182.7 590.62 T
(ey timeout = #f\051 => \050success :: <boolean>\051) 249.37 590.62 T
4 F
(Ar) 81.65 565.62 T
(guments) 92.24 565.62 T
2 F
(object) 99.65 543.62 T
1 F
(Synchronization object to w) 171.65 543.62 T
(ait for) 295.28 543.62 T
(.) 321.25 543.62 T
2 F
(timeout) 99.65 521.62 T
1 F
0.28 0.31 (T) 171.65 521.62 B
0.28 0.31 (ime-out interv) 178.29 521.62 B
0.28 0.31 (al. If the v) 245.22 521.62 B
0.28 0.31 (alue is) 294.67 521.62 B
2 F
0.28 0.31 (#f) 328.83 521.62 B
1 F
0.28 0.31 (\050the def) 341.94 521.62 B
0.28 0.31 (ault\051, the time-out interv) 378.46 521.62 B
0.28 0.31 (al ne) 494.54 521.62 B
0.28 0.31 (v) 517.15 521.62 B
0.28 0.31 (er) 522.79 521.62 B
0.28 0.2 (elapses. Otherwise the v) 171.65 508.62 B
0.28 0.2 (alue should be a) 283.94 508.62 B
2 F
0.28 0.2 (<r) 362.39 508.62 B
0.28 0.2 (eal>) 373.75 508.62 B
1 F
0.28 0.2 (, corresponding to the desired) 394.27 508.62 B
(interv) 171.65 495.62 T
(al in seconds.) 197.04 495.62 T
4 F
(V) 81.65 470.62 T
(alues) 87.15 470.62 T
2 F
(success) 99.65 448.62 T
(#t) 171.65 448.62 T
1 F
( if synchronization w) 180.81 448.62 T
(as achie) 273.88 448.62 T
(v) 308.73 448.62 T
(ed, or) 314.07 448.62 T
2 F
(#f) 341.86 448.62 T
1 F
(to indicate that a time-out occurred.) 353.77 448.62 T
4 F
(Description) 81.65 423.62 T
1 F
0.28 0.06 (This is the basic blocking primiti) 99.65 401.62 B
0.28 0.06 (v) 248.02 401.62 B
0.28 0.06 (e of the threads library) 253.42 401.62 B
0.28 0.06 (. The function blocks until the object is) 354.89 401.62 B
0.28 0.01 (a) 99.65 388.62 B
0.28 0.01 (v) 104.32 388.62 B
0.28 0.01 (ailable and synchronization can be achie) 109.55 388.62 B
0.28 0.01 (v) 288.99 388.62 B
0.28 0.01 (ed, or the time-out interv) 294.33 388.62 B
0.28 0.01 (al has e) 405 388.62 B
0.28 0.01 (xpired. A non-block-) 438.42 388.62 B
-0.27 (ing synchronization may be attempted by specifying a timeout of 0. Indi) 99.65 375.62 P
-0.27 (vidual methods may adjust) 414.2 375.62 P
0.14 (the state of the synchronization object on synchronization. The function returns) 99.65 362.62 P
2 F
0.14 (#t) 453.16 362.62 P
1 F
0.14 ( if synchroniza-) 462.33 362.62 P
(tion is achie) 99.65 349.62 T
(v) 152.54 349.62 T
(ed before the interv) 157.87 349.62 T
(al elapses - otherwise it returns) 243.43 349.62 T
2 F
(#f) 382.73 349.62 T
(.) 391.73 349.62 T
(release) 63.65 320.62 T
1 F
([Open Generic Function]) 421.07 320.62 T
4 F
(Signatur) 81.65 295.62 T
(e) 119.14 295.62 T
2 F
(\050object :: <synchr) 99.65 276.62 T
(onization>, #k) 182.7 276.62 T
(ey\051 => \050\051) 249.37 276.62 T
4 F
(Ar) 81.65 251.62 T
(guments) 92.24 251.62 T
2 F
(object) 99.65 229.62 T
1 F
(Synchronization object to release.) 171.65 229.62 T
4 F
(V) 81.65 204.62 T
(alues) 87.15 204.62 T
1 F
(None) 99.65 182.62 T
4 F
(Description) 81.65 157.62 T
1 F
-0.21 (Releases the supplied synchronization object, potentially making it a) 99.65 135.62 P
-0.21 (v) 399.89 135.62 P
-0.21 (ailable to other threads. Indi-) 405.11 135.62 P
-0.02 (vidual methods describe what this means for each class of synchronization. This function does not) 99.65 122.62 P
(block for an) 99.65 109.62 T
(y of the subclasses of) 152.63 109.62 T
2 F
(<synchr) 249.48 109.62 T
(onization>) 287.33 109.62 T
1 F
( pro) 336.99 109.62 T
(vided by the library) 354.24 109.62 T
(.) 439.99 109.62 T
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 9 Q
(A) 63.65 84.9 T
(ugust 14, 1996 12:56 pm) 69.88 84.9 T
0 10 Q
(9) 526.09 84.9 T
4 11 Q
(Exceptions) 81.65 737.62 T
1 F
(Indi) 99.65 715.62 T
(vidual methods may pro) 117.09 715.62 T
(vide their o) 223.56 715.62 T
(wn policies.) 273.39 715.62 T
2 F
(synchronization-name) 63.65 686.62 T
1 F
([Open Generic Function]) 421.07 686.62 T
4 F
(Signatur) 81.65 661.62 T
(e) 119.14 661.62 T
2 F
(\050object :: <synchr) 99.65 642.62 T
(onization>\051 => \050name :: false-or\050<string>\051\051) 182.7 642.62 T
4 F
(Description) 81.65 617.62 T
1 F
0.28 0.09 (Returns the name of the synchronization object, if it w) 99.65 595.62 B
0.28 0.09 (as specif) 346.56 595.62 B
0.28 0.09 (ied with the) 385.24 595.62 B
2 F
0.28 0.09 (name:) 441.94 595.62 B
1 F
0.28 0.09 ( initialization) 471.73 595.62 B
(k) 99.65 582.62 T
(e) 105.04 582.62 T
(yw) 109.76 582.62 T
(ord. Otherwise) 123.09 582.62 T
2 F
(#f) 191.21 582.62 T
1 F
( is returned.) 200.38 582.62 T
0 12 Q
(5.3) 63.65 544.95 T
(<loc) 90.65 544.95 T
(k>) 114.76 544.95 T
2 11 Q
(<lock>) 63.65 513.62 T
1 F
([Abstract Instantiable Class]) 406.39 513.62 T
4 F
(Super) 81.65 488.62 T
(classes) 106.9 488.62 T
2 F
(<synchr) 99.65 466.62 T
(onization>) 137.5 466.62 T
4 F
(Description) 81.65 441.62 T
1 F
0.28 0.11 (Locks are synchronization objects which change state on synchronization \050using) 99.65 419.62 B
2 F
0.28 0.11 (wait-f) 467.3 419.62 B
0.28 0.11 (or) 495.17 419.62 B
1 F
0.28 0.11 (\051, and) 505.78 419.62 B
-0.07 (re) 99.65 406.62 P
-0.07 (v) 107.92 406.62 P
-0.07 (ert state on) 113.25 406.62 P
2 F
-0.07 (r) 164.06 406.62 P
-0.07 (elease) 168.75 406.62 P
1 F
-0.07 (. It is normally necessary for programs to ensure that locks are released, oth-) 196.24 406.62 P
-0.25 (erwise there is the possibility of deadlock. Locks may be used to restrict the access of other threads) 99.65 393.62 P
0.28 0.18 (to shared resources between the synchronization and the release. It is common for a protected) 99.65 380.62 B
0.28 0.09 (operation to be performed by a body of code which is e) 99.65 367.62 B
0.28 0.09 (v) 350.47 367.62 B
0.28 0.09 (aluated in a single thread between syn-) 355.78 367.62 B
0.28 0.09 (chronization and release. A macro) 99.65 354.62 B
2 F
0.28 0.09 (with-lock) 257.29 354.62 B
1 F
0.28 0.09 (is pro) 305.17 354.62 B
0.28 0.09 (vided for this purpose. When a thread uses a) 330.55 354.62 B
(lock for mutual-e) 99.65 341.62 T
(xclusion in this w) 175.86 341.62 T
(ay) 253.67 341.62 T
(, the thread is said to o) 263.34 341.62 T
(wn the lock.) 362.36 341.62 T
2 F
(<lock>) 99.65 319.62 T
1 F
( has no direct instances; calling mak) 131.75 319.62 T
(e on) 291.11 319.62 T
2 F
(<lock>) 312.5 319.62 T
1 F
(returns an instance of) 347.35 319.62 T
2 F
(<simple-lock>) 444.49 319.62 T
1 F
(.) 510.81 319.62 T
4 F
(Oper) 81.65 294.62 T
(ations) 104.09 294.62 T
1 F
(The class) 99.65 272.62 T
2 F
(<lock>) 143.64 272.62 T
1 F
( provides the following operations:) 175.74 272.62 T
2 F
(with-lock) 99.65 250.62 T
1 F
(Ex) 171.65 250.62 T
(ecute a body of code between) 183.7 250.62 T
2 F
(wait-f) 316.88 250.62 T
(or) 344.1 250.62 T
1 F
( and) 354.48 250.62 T
2 F
(r) 375.86 250.62 T
(elease) 380.55 250.62 T
1 F
( operations.) 408.04 250.62 T
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(10) 63.65 84.9 T
0 9 Q
(A) 421.88 84.9 T
(ugust 14, 1996 12:56 pm) 428.1 84.9 T
2 11 Q
(with-lock) 63.65 737.62 T
1 F
([Macro]) 495.61 737.62 T
4 F
(Syntax) 81.65 712.62 T
2 F
(with-lock \050lock :: <lock>, #k) 99.65 693.62 T
(ey) 231.55 693.62 T
4 F
(k) 244.68 693.62 T
(e) 249.46 693.62 T
(ys) 254.01 693.62 T
2 F
(\051) 263.17 693.62 T
4 F
(body) 114.05 680.62 T
2 F
([failur) 99.65 667.62 T
(e) 129.39 667.62 T
4 F
(failur) 137.03 667.62 T
(e-e) 161.07 667.62 T
(xpr) 174.28 667.62 T
2 F
(]) 188.95 667.62 T
(end) 99.65 654.62 T
4 F
(Exceptions) 81.65 629.62 T
2 F
(with-lock) 99.65 607.62 T
1 F
( may signal a condition of the follo) 143.65 607.62 T
(wing class \050a subclass of) 297.67 607.62 T
2 F
(<serious-condition>) 409.18 607.62 T
1 F
(\051:) 502.39 607.62 T
2 F
(<timeout-expir) 99.65 585.62 T
(ed>) 169.87 585.62 T
1 F
0.28 0.03 (This is signalled when) 171.65 572.62 B
2 F
0.28 0.03 (with-lock) 274.86 572.62 B
1 F
0.28 0.03 ( did not succeed in claiming the lock within the) 319.12 572.62 B
(timeout period.) 171.65 559.62 T
4 F
(Description) 81.65 534.62 T
1 F
-0.16 (Ex) 99.65 512.62 P
-0.16 (ecute the body with the lock held. If a) 111.7 512.62 P
2 F
-0.16 (failur) 279.5 512.62 P
-0.16 (e) 305.58 512.62 P
1 F
-0.16 ( clause is supplied, then it will be e) 310.46 512.62 P
-0.16 (v) 463.2 512.62 P
-0.16 (aluated and its) 468.42 512.62 P
0.28 0.08 (v) 99.65 499.62 B
0.28 0.08 (alues returned from) 104.95 499.62 B
2 F
0.28 0.08 (with-lock) 196.21 499.62 B
1 F
0.28 0.08 ( if the lock cannot be claimed \050because a timeout occurred\051. The) 240.9 499.62 B
0.28 0.07 (def) 99.65 486.62 B
0.28 0.07 (ault, if no) 113.79 486.62 B
2 F
0.28 0.07 (failur) 160.64 486.62 B
0.28 0.07 (e) 187.13 486.62 B
1 F
0.28 0.07 ( clause is supplied, is to signal an e) 192.08 486.62 B
0.28 0.07 (xception of class) 350.98 486.62 B
2 F
0.28 0.07 (<timeout-expir) 429.7 486.62 B
0.28 0.07 (ed>) 500.87 486.62 B
1 F
0.28 0.07 (. If) 518.34 486.62 B
0.28 0.01 (there is no f) 99.65 473.62 B
0.28 0.01 (ailure,) 152.75 473.62 B
2 F
0.28 0.01 (with-lock) 183.67 473.62 B
1 F
0.28 0.01 ( returns the results of e) 227.77 473.62 B
0.28 0.01 (v) 329.67 473.62 B
0.28 0.01 (aluating the body) 334.91 473.62 B
0.28 0.01 (. As an e) 411.32 473.62 B
0.28 0.01 (xample, if no) 450.58 473.62 B
2 F
0.28 0.01 (fail-) 512.67 473.62 B
(ur) 99.65 460.62 T
(e) 110.45 460.62 T
1 F
( clause is supplied, the macro e) 115.33 460.62 T
(xpands into code equi) 252.34 460.62 T
(v) 348.3 460.62 T
(alent to the follo) 353.53 460.62 T
(wing:) 425.67 460.62 T
2 F
(if \050) 99.65 441.62 T
(wait-f) 114.05 441.62 T
(or\050lock,) 141.26 441.62 T
4 F
(k) 180.37 441.62 T
(e) 185.14 441.62 T
(ys ...) 189.7 441.62 T
2 F
(\051\051) 209.86 441.62 T
(block \050\051) 114.05 428.62 T
4 F
(body ...) 128.45 415.62 T
2 F
(cleanup) 114.05 402.62 T
(r) 128.45 389.62 T
(elease\050lock\051) 133.13 389.62 T
(end block) 114.05 376.62 T
(else) 99.65 363.62 T
(signal\050mak) 114.05 350.62 T
(e\050<timeout-expir) 165.89 350.62 T
(ed>, synchr) 244.66 350.62 T
(onization: lock\051) 299.01 350.62 T
(end if) 99.65 337.62 T
(<semaphore>) 63.65 306.62 T
1 F
([Instantiable Primary Class]) 408.22 306.62 T
4 F
(Super) 81.65 281.62 T
(classes) 106.9 281.62 T
2 F
(<lock>) 99.65 259.62 T
4 F
(Description) 81.65 234.62 T
2 F
0.28 0.14 (<semaphor) 99.65 212.62 B
0.28 0.14 (e>) 153.44 212.62 B
1 F
0.28 0.14 ( is a class representing a traditional counting semaphore. An instance of) 164.88 212.62 B
2 F
0.28 0.14 (<sema-) 497.32 212.62 B
0.28 0 (phor) 99.65 199.62 B
0.28 0 (e>) 122.08 199.62 B
1 F
0.28 0 ( contains a counter in its internal state. Calling) 133.24 199.62 B
2 F
0.28 0 (r) 343.08 199.62 B
0.28 0 (elease) 347.77 199.62 B
1 F
0.28 0 ( on a semaphore will increment the) 375.28 199.62 B
-0.22 (internal count. Calling) 99.65 186.62 P
2 F
-0.22 (wait-f) 200.41 186.62 P
-0.22 (or) 227.63 186.62 P
1 F
-0.22 ( on a semaphore will decrement the internal count, unless it is zero,) 238.01 186.62 P
0.28 0.07 (in which case the thread will block until another thread releases the semaphore. Semaphores are) 99.65 173.62 B
0.28 0.15 (less ef) 99.65 160.62 B
0.28 0.15 (f) 128.5 160.62 B
0.28 0.15 (icient than e) 131.71 160.62 B
0.28 0.15 (xclusi) 187.81 160.62 B
0.28 0.15 (v) 214.72 160.62 B
0.28 0.15 (e locks, b) 220.2 160.62 B
0.28 0.15 (ut the) 263.89 160.62 B
0.28 0.15 (y ha) 289.65 160.62 B
0.28 0.15 (v) 308.94 160.62 B
0.28 0.15 (e asynchronous properties which may be useful) 314.43 160.62 B
0.28 0.18 (\050e.g. for managing queues, or pools of shared resources\051. Semaphores may be released by an) 99.65 147.62 B
0.28 0.18 (y) 526.15 147.62 B
0.28 0.13 (thread, so there is no b) 99.65 134.62 B
0.28 0.13 (uilt-in concept of a thread o) 203.57 134.62 B
0.28 0.13 (wning a semaphore. It is not necessary for a) 330.39 134.62 B
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 9 Q
(A) 63.65 84.9 T
(ugust 14, 1996 12:56 pm) 69.88 84.9 T
0 10 Q
(11) 520.53 84.9 T
1 11 Q
0.28 0.07 (thread to release a semaphore after w) 99.65 737.62 B
0.28 0.07 (aiting for it - although semaphores may be used as locks if) 267.54 737.62 B
(the) 99.65 724.62 T
(y do.) 112.93 724.62 T
4 F
(Init-k) 81.65 699.62 T
(e) 105.36 699.62 T
(ywor) 109.92 699.62 T
(ds) 131.51 699.62 T
2 F
(initial-count:) 99.65 677.62 T
1 F
0.28 0.21 (This should be a non-ne) 171.65 677.62 B
0.28 0.21 (g) 283.15 677.62 B
0.28 0.21 (ati) 288.81 677.62 B
0.28 0.21 (v) 300.17 677.62 B
0.28 0.21 (e inte) 305.72 677.62 B
0.28 0.21 (ger) 331.23 677.62 B
0.28 0.21 (, corresponding to the initial state of the) 345.47 677.62 B
(internal counter) 171.65 664.62 T
(. The def) 240.39 664.62 T
(ault v) 279.68 664.62 T
(alue is 0.) 304.15 664.62 T
2 F
(maximum-count:) 99.65 642.62 T
1 F
0.28 0.09 (This should be a non-ne) 171.65 629.62 B
0.28 0.09 (g) 280.36 629.62 B
0.28 0.09 (ati) 285.89 629.62 B
0.28 0.09 (v) 296.88 629.62 B
0.28 0.09 (e inte) 302.31 629.62 B
0.28 0.09 (ger corresponding to the maximum permitted) 327.09 629.62 B
0.28 0.09 (v) 171.65 616.62 B
0.28 0.09 (alue of the internal counter) 176.96 616.62 B
0.28 0.09 (. The def) 298.34 616.62 B
0.28 0.09 (ault v) 338.95 616.62 B
0.28 0.09 (alue is the lar) 364.2 616.62 B
0.28 0.09 (gest v) 425.06 616.62 B
0.28 0.09 (alue supported by) 451.54 616.62 B
0.28 0.07 (the implementation, which is the v) 171.65 603.62 B
0.28 0.07 (alue of the constant) 327.44 603.62 B
2 F
0.28 0.07 ($semaphor) 418.69 603.62 B
0.28 0.07 (e-maximum-) 471.11 603.62 B
(count-limit) 171.65 590.62 T
1 F
(. This constant will not be smaller that) 223.59 590.62 T
2 F
(10000) 395 590.62 T
1 F
(.) 422.5 590.62 T
2 F
(wait-for) 63.65 561.62 T
1 F
([Sealed Method]) 458.02 561.62 T
4 F
(Signatur) 81.65 536.62 T
(e) 119.14 536.62 T
2 F
(\050object :: <semaphor) 99.65 517.62 T
(e>, #k) 197.36 517.62 T
(ey timeout = #f\051 => \050success :: <boolean>\051) 225.52 517.62 T
(release) 63.65 488.62 T
1 F
([Sealed Method]) 458.02 488.62 T
4 F
(Signatur) 81.65 463.62 T
(e) 119.14 463.62 T
2 F
(\050object :: <semaphor) 99.65 444.62 T
(e>, #k) 197.36 444.62 T
(ey\051 => \050\051) 225.52 444.62 T
4 F
(Exceptions) 81.65 419.62 T
2 F
(Release) 99.65 397.62 T
1 F
( may signal a condition of the follo) 135.08 397.62 T
(wing class \050which is a subclass of) 289.1 397.62 T
2 F
(<err) 440.33 397.62 T
(or>) 461.05 397.62 T
1 F
(\051.) 477.71 397.62 T
2 F
(<count-exceeded-err) 99.65 375.62 T
(or>) 196.13 375.62 T
1 F
0.21 (This may signalled when an attempt is made to release a) 171.65 362.62 P
2 F
0.21 (<semaphor) 424.79 362.62 P
0.21 (e>) 477.3 362.62 P
1 F
0.21 ( when the) 488.46 362.62 P
(internal counter is already at its maximum count.) 171.65 349.62 T
2 F
(<exclusive-lock>) 63.65 318.62 T
1 F
([Abstract Instantiable Class]) 406.39 318.62 T
4 F
(Super) 81.65 293.62 T
(classes) 106.9 293.62 T
2 F
(<lock>) 99.65 271.62 T
4 F
(Description) 81.65 246.62 T
2 F
0.07 (<exclusi) 99.65 224.62 P
0.07 (v) 137.59 224.62 P
0.07 (e-lock>) 142.98 224.62 P
1 F
0.07 ( is the class of locks for which threads cannot change the state of the lock unless) 177.35 224.62 P
0.04 (the) 99.65 211.62 P
0.04 (y o) 112.93 211.62 P
0.04 (wn it. An instance of) 126.44 211.62 P
2 F
0.04 (<exclusi) 221.37 211.62 P
0.04 (v) 259.3 211.62 P
0.04 (e-lock>) 264.69 211.62 P
1 F
0.04 ( may only be lock) 299.07 211.62 P
0.04 (ed by one thread at a time \050by call-) 377.96 211.62 P
0.28 0.06 (ing) 99.65 198.62 B
2 F
0.28 0.06 (wait-f) 116.97 198.62 B
0.28 0.06 (or) 144.54 198.62 B
1 F
0.28 0.06 ( on the lock\051. Once lock) 155.04 198.62 B
0.28 0.06 (ed, an) 263.42 198.62 B
0.28 0.06 (y attempt by an) 290.15 198.62 B
0.28 0.06 (y other thread to w) 359.83 198.62 B
0.28 0.06 (ait for the lock will) 445.04 198.62 B
0.28 0.05 (cause that thread to block. It is an error for a thread to release an) 99.65 185.62 B
2 F
0.28 0.05 (<exclusi) 393.26 185.62 B
0.28 0.05 (v) 431.6 185.62 B
0.28 0.05 (e-lock>) 437.04 185.62 B
1 F
0.28 0.05 ( if it does not) 471.77 185.62 B
0.28 0.12 (o) 99.65 172.62 B
0.28 0.12 (wn the lock. The notion of o) 105 172.62 B
0.28 0.12 (wnership is directly supported by the class, and a thread may test) 234.74 172.62 B
(whether an) 99.65 159.62 T
2 F
(<exclusi) 150.96 159.62 T
(v) 188.9 159.62 T
(e-lock>) 194.29 159.62 T
1 F
( is currently o) 228.67 159.62 T
(wned.) 289.19 159.62 T
2 F
-0.11 (<exclusi) 99.65 137.62 P
-0.11 (v) 137.59 137.62 P
-0.11 (e-lock>) 142.98 137.62 P
1 F
-0.11 ( has no direct instances; calling mak) 177.35 137.62 P
-0.11 (e on) 336.07 137.62 P
2 F
-0.11 (<exclusi) 357.24 137.62 P
-0.11 (v) 395.18 137.62 P
-0.11 (e-lock>) 400.57 137.62 P
1 F
-0.11 (returns an instance of) 437.58 137.62 P
2 F
(<simple-lock>) 99.65 124.62 T
1 F
(.) 165.97 124.62 T
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(12) 63.65 84.9 T
0 9 Q
(A) 421.88 84.9 T
(ugust 14, 1996 12:56 pm) 428.1 84.9 T
4 11 Q
(Init-k) 81.65 737.62 T
(e) 105.36 737.62 T
(ywor) 109.92 737.62 T
(ds) 131.51 737.62 T
(Oper) 81.65 712.62 T
(ations) 104.09 712.62 T
1 F
(The class) 99.65 690.62 T
2 F
(<exclusi) 143.64 690.62 T
(v) 181.58 690.62 T
(e-lock>) 186.97 690.62 T
1 F
(provides the following operations:) 224.09 690.62 T
2 F
(o) 99.65 668.62 T
(wned?) 105.04 668.62 T
1 F
(T) 171.65 668.62 T
(ests to see if the lock is o) 177.6 668.62 T
(wned by the current thread.) 287.62 668.62 T
2 F
(release) 63.65 639.62 T
1 F
([GF Method]) 473.29 639.62 T
4 F
(Signatur) 81.65 614.62 T
(e) 119.14 614.62 T
2 F
(\050object :: <exclusi) 99.65 595.62 T
(v) 182.79 595.62 T
(e-lock>, #k) 188.18 595.62 T
(ey\051 => \050\051) 239.56 595.62 T
4 F
(Exceptions) 81.65 570.62 T
1 F
(Release may signal a condition of the follo) 99.65 548.62 T
(wing class \050which is a subclass of) 287.88 548.62 T
2 F
(<err) 439.11 548.62 T
(or>) 459.83 548.62 T
1 F
(\051.) 476.49 548.62 T
2 F
(<not-o) 99.65 526.62 T
(wned-err) 130.25 526.62 T
(or>) 173.43 526.62 T
1 F
0.28 0.13 (This may be signalled when an attempt is made to release an) 171.65 513.62 B
2 F
0.28 0.13 (<exclusi) 452.04 513.62 B
0.28 0.13 (v) 490.99 513.62 B
0.28 0.13 (e-lock>) 496.51 513.62 B
1 F
(when the lock is not o) 171.65 500.62 T
(wned by the current thread.) 268.23 500.62 T
2 F
(owned?) 63.65 471.62 T
1 F
([Generic Function]) 447.64 471.62 T
4 F
(Signatur) 81.65 446.62 T
(e) 119.14 446.62 T
2 F
(\050object :: <exclusi) 99.65 427.62 T
(v) 182.79 427.62 T
(e-lock>\051 => \050o) 188.18 427.62 T
(wned? :: <boolean>\051) 253.31 427.62 T
4 F
(Description) 81.65 402.62 T
1 F
(A predicate to test whether the e) 99.65 380.62 T
(xclusi) 241.83 380.62 T
(v) 267.84 380.62 T
(e lock is lock) 273.17 380.62 T
(ed by the current thread.) 331.42 380.62 T
2 F
(<recursive-lock>) 63.65 349.62 T
1 F
([Instantiable Primary Class]) 408.22 349.62 T
4 F
(Super) 81.65 324.62 T
(classes) 106.9 324.62 T
2 F
(<exclusi) 99.65 302.62 T
(v) 137.59 302.62 T
(e-lock>) 142.98 302.62 T
4 F
(Description) 81.65 277.62 T
1 F
0.28 0.24 (A thread may lock a) 99.65 255.62 B
2 F
0.28 0.24 (<r) 197.69 255.62 B
0.28 0.24 (ecursi) 209.12 255.62 B
0.28 0.24 (v) 238.52 255.62 B
0.28 0.24 (e-lock>) 244.15 255.62 B
1 F
0.28 0.24 ( multiple times, recursi) 280.18 255.62 B
0.28 0.24 (v) 387.83 255.62 B
0.28 0.24 (ely) 393.4 255.62 B
0.28 0.24 (, b) 406.83 255.62 B
0.28 0.24 (ut the lock must later be) 418.6 255.62 B
(released the same number of times. The lock will be freed on the last of these releases.) 99.65 242.62 T
2 F
(wait-for) 63.65 213.62 T
1 F
([Sealed Method]) 458.02 213.62 T
4 F
(Signatur) 81.65 188.62 T
(e) 119.14 188.62 T
2 F
(\050object :: <r) 99.65 166.62 T
(ecursi) 155.8 166.62 T
(v) 183.8 166.62 T
(e-lock>, #k) 189.19 166.62 T
(ey timeout = #f\051 => \050success :: <boolean>\051) 240.57 166.62 T
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 9 Q
(A) 63.65 84.9 T
(ugust 14, 1996 12:56 pm) 69.88 84.9 T
0 10 Q
(13) 520.53 84.9 T
2 11 Q
(release) 63.65 737.62 T
1 F
([Sealed Method]) 458.02 737.62 T
4 F
(Signatur) 81.65 712.62 T
(e) 119.14 712.62 T
2 F
(\050object :: <r) 99.65 690.62 T
(ecursi) 155.8 690.62 T
(v) 183.8 690.62 T
(e-lock>, #k) 189.19 690.62 T
(ey\051 => \050\051) 240.57 690.62 T
(owned?) 63.65 642.62 T
1 F
([Sealed Method]) 458.02 642.62 T
4 F
(Signatur) 81.65 617.62 T
(e) 119.14 617.62 T
2 F
(\050object :: <r) 99.65 595.62 T
(ecursi) 155.8 595.62 T
(v) 183.8 595.62 T
(e-lock>\051 => \050o) 189.19 595.62 T
(wned? :: <boolean>\051) 254.32 595.62 T
(<simple-lock>) 63.65 564.62 T
1 F
([Instantiable Primary Class]) 408.22 564.62 T
4 F
(Super) 81.65 539.62 T
(classes) 106.9 539.62 T
2 F
(<exclusi) 99.65 517.62 T
(v) 137.59 517.62 T
(e-lock>) 142.98 517.62 T
4 F
(Description) 81.65 492.62 T
2 F
0.06 (<simple-lock>) 99.65 470.62 P
1 F
0.06 ( is the class representing the most simple and ef) 165.97 470.62 P
0.06 (\336cient mutual e) 376.12 470.62 P
0.06 (xclusion synchroni-) 444.51 470.62 P
0.28 0.18 (zation primiti) 99.65 457.62 B
0.28 0.18 (v) 161.75 457.62 B
0.28 0.18 (e. It is an error to recursi) 167.27 457.62 B
0.28 0.18 (v) 282.12 457.62 B
0.28 0.18 (ely lock a) 287.64 457.62 B
2 F
0.28 0.18 (<simple-lock>) 335.96 457.62 B
1 F
0.28 0.18 (. An attempt to do so might) 404.62 457.62 B
(result in an error being signalled, or deadlock occurring.) 99.65 444.62 T
2 F
(wait-for) 63.65 415.62 T
1 F
([Sealed Method]) 458.02 415.62 T
4 F
(Signatur) 81.65 390.62 T
(e) 119.14 390.62 T
2 F
(\050object :: <simple-lock>, #k) 99.65 371.62 T
(ey timeout = #f\051 => \050success :: <boolean>\051) 228.17 371.62 T
(release) 63.65 342.62 T
1 F
([Sealed Method]) 458.02 342.62 T
4 F
(Signatur) 81.65 317.62 T
(e) 119.14 317.62 T
2 F
(\050object :: <simple-lock>, #k) 99.65 298.62 T
(ey\051 => \050\051) 228.17 298.62 T
(owned?) 63.65 269.62 T
1 F
([Sealed Method]) 458.02 269.62 T
4 F
(Signatur) 81.65 244.62 T
(e) 119.14 244.62 T
2 F
(\050object :: <simple-lock>\051 => \050o) 99.65 225.62 T
(wned? :: <boolean>\051) 241.92 225.62 T
0 12 Q
(5.4) 63.65 187.95 T
(<noti\336cation>) 90.65 187.95 T
2 11 Q
(<notification>) 63.65 156.62 T
1 F
([Instantiable Sealed Class]) 414.33 156.62 T
4 F
(Super) 81.65 131.62 T
(classes) 106.9 131.62 T
2 F
(<synchr) 99.65 109.62 T
(onization>) 137.5 109.62 T
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(14) 63.65 84.9 T
0 9 Q
(A) 421.88 84.9 T
(ugust 14, 1996 12:56 pm) 428.1 84.9 T
4 11 Q
(Description) 81.65 737.62 T
1 F
0.28 0.02 (Instances of) 99.65 715.62 B
2 F
0.28 0.02 (<notif) 156.06 715.62 B
0.28 0.02 (ication>) 183.85 715.62 B
1 F
0.28 0.02 ( are synchronization objects which may be used to notify threads of a) 222.06 715.62 B
0.12 (change of state else) 99.65 702.62 P
0.12 (where in the program. Noti\336cations are used in association with locks, and are) 185.57 702.62 P
0.28 0.08 (sometimes called) 99.65 689.62 B
4 F
0.28 0.08 (condition variables) 180.43 689.62 B
1 F
0.28 0.08 (. The) 267.53 689.62 B
0.28 0.08 (y may be used to support the sharing of data between) 290.66 689.62 B
0.28 0.17 (threads using) 99.65 676.62 B
4 F
0.28 0.17 (monitor) 163.74 676.62 B
0.28 0.17 (s) 199.68 676.62 B
1 F
0.28 0.17 (. Each) 204.13 676.62 B
2 F
0.28 0.17 (<notif) 236.14 676.62 B
0.28 0.17 (ication>) 264.85 676.62 B
1 F
0.28 0.17 ( is permanently associated with a) 304.28 676.62 B
2 F
0.28 0.17 (<simple-lock>) 460.32 676.62 B
1 F
0.28 0.17 (,) 528.9 676.62 B
0.06 (although the same lock may be associated with man) 99.65 663.62 P
0.06 (y noti\336cations.) 328.49 663.62 P
0.06 (Threads w) 396.75 663.62 P
0.06 (ait for the change of) 442.83 663.62 P
0.12 (state to be noti\336ed by calling) 99.65 650.62 P
2 F
0.12 (wait-f) 230.56 650.62 P
0.12 (or) 257.78 650.62 P
1 F
0.12 (. Threads notify other threads of the change of state by call-) 267.56 650.62 P
(ing) 99.65 637.62 T
2 F
(r) 116.46 637.62 T
(elease) 121.14 637.62 T
1 F
(.) 148.63 637.62 T
4 F
(Requir) 81.65 612.62 T
(ed-init-k) 111.18 612.62 T
(e) 148.34 612.62 T
(ywor) 152.9 612.62 T
(ds) 174.49 612.62 T
2 F
(lock:) 99.65 590.62 T
1 F
0.28 0.05 (This must be an instance of) 171.65 590.62 B
2 F
0.28 0.05 (<simple-lock>) 298.21 590.62 B
1 F
0.28 0.05 (. The lock is then associated with the) 365.22 590.62 B
-0.11 (noti\336cation, and it is only possible to w) 171.65 577.62 P
-0.11 (ait for or release the noti\336cation if the lock) 344.34 577.62 P
(is o) 171.65 564.62 T
(wned.) 186.96 564.62 T
4 F
(Oper) 81.65 539.62 T
(ations) 104.09 539.62 T
1 F
(The class) 99.65 517.62 T
2 F
(<noti\336cation>) 143.64 517.62 T
1 F
(provides the following operations:) 212.1 517.62 T
2 F
(associated-lock) 99.65 495.62 T
1 F
(Returns the lock associated with the noti\336cation object.) 171.65 482.62 T
2 F
(wait-f) 99.65 460.62 T
(or) 126.86 460.62 T
1 F
0.28 0.34 (W) 171.65 460.62 B
0.28 0.34 (ait for the notif) 181.49 460.62 B
0.28 0.34 (ication of the change in state. The associated lock must be) 253.71 460.62 B
(o) 171.65 447.62 T
(wned, and is atomically released before synchronization, and reclaimed after) 176.87 447.62 T
(.) 513.81 447.62 T
2 F
(r) 99.65 425.62 T
(elease) 104.33 425.62 T
1 F
0.28 0.19 (Notify the change of state to a single w) 171.65 425.62 B
0.28 0.19 (aiting thread. This has no ef) 353.49 425.62 B
0.28 0.19 (fect on the) 482.8 425.62 B
(associated lock, which must be o) 171.65 412.62 T
(wned.) 316.19 412.62 T
2 F
(r) 99.65 390.62 T
(elease-all) 104.33 390.62 T
1 F
0.28 0 (Notify the change of state to all w) 171.65 390.62 B
0.28 0 (aiting threads. This has no ef) 322.87 390.62 B
0.28 0 (fect on the associ-) 451.08 390.62 B
(ated lock, which must be o) 171.65 377.62 T
(wned.) 289.3 377.62 T
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 9 Q
(A) 63.65 84.9 T
(ugust 14, 1996 12:56 pm) 69.88 84.9 T
0 10 Q
(15) 520.53 84.9 T
4 11 Q
(Example) 81.65 737.62 T
2 F
(///) 99.65 705.62 T
1 F
(This e) 111.57 705.62 T
(xample sho) 138.6 705.62 T
(ws ho) 188.74 705.62 T
(w to use a noti\336cation and an associated lock to) 214.43 705.62 T
2 F
(///) 99.65 692.62 T
1 F
(implement a queue) 111.57 692.62 T
2 F
(.) 195.28 692.62 T
(//) 99.65 666.62 T
1 F
(*queue* is the actual queue object \050a <deque>\051. Queue access is performed by) 108.51 666.62 T
2 F
(//) 99.65 653.62 T
1 F
(interlocking pushes and pops on the <deque>. *queue* can be a constant,) 108.51 653.62 T
2 F
(//) 99.65 640.62 T
1 F
(since it is the <deque> which is mutated and not the v) 108.51 640.62 T
(alue of *queue*.) 345.21 640.62 T
2 F
(de\336ne constant *queue* = mak) 99.65 627.62 T
(e\050<deque>\051;) 244.54 627.62 T
(//) 99.65 601.62 T
1 F
(*lock* is used to isolate access to the queue) 108.51 601.62 T
2 F
(de\336ne constant *lock* = mak) 99.65 588.62 T
(e\050<lock>\051;) 235.98 588.62 T
(//) 99.65 562.62 T
1 F
(*something-queued* is a noti\336cation which is used to notify other threads) 108.51 562.62 T
2 F
(//) 99.65 549.62 T
1 F
(that an object is being put onto an empty queue.) 108.51 549.62 T
2 F
(de\336ne constant *something-queued* = mak) 99.65 536.62 T
(e\050<noti\336cation>, lock: *lock*\051;) 302.6 536.62 T
(//) 99.65 510.62 T
1 F
(put-on-queue pushes an object onto the queue. If the queue w) 108.51 510.62 T
(as initially empty) 378.76 510.62 T
(,) 454.44 510.62 T
2 F
(//) 99.65 497.62 T
1 F
(then all threads which are w) 108.51 497.62 T
(aiting for the queue to \336ll are noti\336ed that there is) 232.12 497.62 T
2 F
(//) 99.65 484.62 T
1 F
(a ne) 108.51 484.62 T
(w entry) 126.26 484.62 T
2 F
(de\336ne method put-on-queue \050object\051 => \050\051) 99.65 471.62 T
(with-lock \050*lock*\051) 114.05 458.62 T
(if \050*queue*.empty?\051) 128.45 445.62 T
(r) 142.85 432.62 T
(elease-all\050*something-queued*\051) 147.53 432.62 T
(end;) 128.45 419.62 T
(push\050*queue*, object\051) 128.45 406.62 T
(end with-lock) 114.05 393.62 T
(end method;) 99.65 380.62 T
(//) 99.65 354.62 T
1 F
(get-from-queue returns an object from the queue. If no object is immediately a) 108.51 354.62 T
(v) 453.8 354.62 T
(ailable,) 459.03 354.62 T
2 F
(//) 99.65 341.62 T
1 F
(then it blocks until it recei) 108.51 341.62 T
(v) 223.43 341.62 T
(es a noti\336cation that the queue is no longer empty) 228.77 341.62 T
(. After) 447.12 341.62 T
2 F
(//) 99.65 328.62 T
1 F
(recei) 108.51 328.62 T
(ving the noti\336cation it tests ag) 129.61 328.62 T
(ain to see if an object is present, in case it w) 262.48 328.62 T
(as popped) 456.06 328.62 T
2 F
(//) 99.65 315.62 T
1 F
(by another thread.) 108.51 315.62 T
2 F
(de\336ne method get-fr) 99.65 302.62 T
(om-queue \050\051 => \050object\051) 194.76 302.62 T
(with-lock \050*lock*\051) 114.05 289.62 T
(while \050*queue*.empty?\051) 128.45 276.62 T
(wait-f) 142.85 263.62 T
(or\050*something-queued*\051) 170.06 263.62 T
(end;) 128.45 250.62 T
(pop\050*queue*\051) 128.45 237.62 T
(end with-lock) 114.05 224.62 T
(end method;) 99.65 211.62 T
(associated-lock) 63.65 169.62 T
1 F
([Function]) 485.21 169.62 T
4 F
(Signatur) 81.65 144.62 T
(e) 119.14 144.62 T
2 F
(\050noti\336cation :: <noti\336cation>\051 => \050lock :: <simple-lock>\051) 99.65 125.62 T
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(16) 63.65 84.9 T
0 9 Q
(A) 421.88 84.9 T
(ugust 14, 1996 12:56 pm) 428.1 84.9 T
4 11 Q
(Ar) 81.65 737.62 T
(guments) 92.24 737.62 T
2 F
(noti\336cation) 99.65 715.62 T
1 F
(A noti\336cation object.) 171.65 715.62 T
4 F
(V) 81.65 690.62 T
(alues) 87.15 690.62 T
2 F
(lock) 99.65 668.62 T
1 F
(The lock associated with the noti\336cation.) 171.65 668.62 T
2 F
(wait-for) 63.65 639.62 T
1 F
([Sealed Method]) 458.02 639.62 T
4 F
(Signatur) 81.65 614.62 T
(e) 119.14 614.62 T
2 F
(\050noti\336cation :: <noti\336cation>, #k) 99.65 595.62 T
(ey timeout = #f\051 => \050success :: <boolean>\051) 252.03 595.62 T
4 F
(Description) 81.65 570.62 T
1 F
0.15 (W) 99.65 548.62 P
0.15 (ait for the change of state indicated by the noti\336cation. The associated lock must be o) 109.15 548.62 P
0.15 (wned, and) 486.29 548.62 P
0.28 0.06 (is atomically released before the w) 99.65 535.62 B
0.28 0.06 (ait, and atomically claimed ag) 256.22 535.62 B
0.28 0.06 (ain after the w) 391.49 535.62 B
0.28 0.06 (ait. Note that the) 456.4 535.62 B
0.28 0.21 (state should be tested ag) 99.65 522.62 B
0.28 0.21 (ain once) 212.92 522.62 B
2 F
0.28 0.21 (wait-f) 255.08 522.62 B
0.28 0.21 (or) 283.57 522.62 B
1 F
0.28 0.21 ( has returned, because there may ha) 294.38 522.62 B
0.28 0.21 (v) 459.91 522.62 B
0.28 0.21 (e been a delay) 465.46 522.62 B
0.28 0.04 (between the) 99.65 509.62 B
2 F
0.28 0.04 (r) 156.28 509.62 B
0.28 0.04 (elease) 161 509.62 B
1 F
0.28 0.04 ( of the notif) 188.74 509.62 B
0.28 0.04 (ication and the claiming of the lock, and the state may ha) 241.11 509.62 B
0.28 0.04 (v) 497.39 509.62 B
0.28 0.04 (e been) 502.77 509.62 B
0.01 (changed during that time. If a timeout is supplied, then this will be used for w) 99.65 496.62 P
0.01 (aiting for the release) 441.52 496.62 P
0.28 0.05 (of the notif) 99.65 483.62 B
0.28 0.05 (ication only) 149.09 483.62 B
0.28 0.05 (.) 201.52 483.62 B
2 F
0.28 0.05 (W) 207.4 483.62 B
0.28 0.05 (ait-f) 217.73 483.62 B
0.28 0.05 (or) 237.26 483.62 B
1 F
0.28 0.05 ( will al) 247.75 483.62 B
0.28 0.05 (w) 279.16 483.62 B
0.28 0.05 (ays w) 287.04 483.62 B
0.28 0.05 (ait for the lock with no timeout, and it is guaran-) 312.82 483.62 B
-0.2 (teed that the lock will be o) 99.65 470.62 P
-0.2 (wned on return.) 214.91 470.62 P
2 F
-0.2 (W) 286.42 470.62 P
-0.2 (ait-f) 296.7 470.62 P
-0.2 (or) 315.97 470.62 P
1 F
-0.2 ( will return) 326.36 470.62 P
2 F
-0.2 (#f) 377.4 470.62 P
1 F
-0.2 ( if the noti\336cation w) 386.57 470.62 P
-0.2 (ait times out.) 474.89 470.62 P
4 F
(Exceptions) 81.65 445.62 T
2 F
(W) 99.65 423.62 T
(ait-f) 109.93 423.62 T
(or) 129.21 423.62 T
1 F
( may signal a condition of the follo) 139.59 423.62 T
(wing class \050which is a subclass of) 293.61 423.62 T
2 F
(<err) 444.84 423.62 T
(or>) 465.56 423.62 T
1 F
(\051.) 482.22 423.62 T
2 F
(<not-o) 99.65 401.62 T
(wned-err) 130.25 401.62 T
(or>) 173.43 401.62 T
1 F
-0.05 (This may be signalled when an attempt is made to w) 171.65 388.62 P
-0.05 (ait for a noti\336cation when the) 402.04 388.62 P
(associated lock is not o) 171.65 375.62 T
(wned by the current thread.) 273.42 375.62 T
2 F
(release) 63.65 346.62 T
1 F
([Sealed Method]) 458.02 346.62 T
4 F
(Signatur) 81.65 321.62 T
(e) 119.14 321.62 T
2 F
(\050noti\336cation :: <noti\336cation>, #k) 99.65 302.62 T
(ey\051 => \050\051) 252.03 302.62 T
4 F
(Ar) 81.65 277.62 T
(guments) 92.24 277.62 T
2 F
(noti\336cation) 99.65 255.62 T
1 F
(Noti\336cation to be released.) 171.65 255.62 T
4 F
(Description) 81.65 230.62 T
1 F
0.28 0.03 (Releases the notif) 99.65 208.62 B
0.28 0.03 (ication, announcing the change of state to one of the threads which are block) 178.32 208.62 B
0.28 0.03 (ed) 521.23 208.62 B
0.04 (and w) 99.65 195.62 P
0.04 (aiting for it. The choice of which thread recei) 126.15 195.62 P
0.04 (v) 325.64 195.62 P
0.04 (es the noti\336cation is unde\336ned. The recei) 330.98 195.62 P
0.04 (ving) 512.09 195.62 P
0.19 (thread may not be unblock) 99.65 182.62 P
0.19 (ed immediately) 217.6 182.62 P
0.19 (, because it must \336rst claim o) 285.21 182.62 P
0.19 (wnership of the associated) 414.69 182.62 P
(lock.) 99.65 169.62 T
4 F
(Exceptions) 81.65 144.62 T
2 F
(Release) 99.65 122.62 T
1 F
(may signal a condition of the follo) 137.83 122.62 T
(wing class \050which is a subclass of) 289.1 122.62 T
2 F
(<err) 440.33 122.62 T
(or>) 461.05 122.62 T
1 F
(\051.) 477.71 122.62 T
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 9 Q
(A) 63.65 84.9 T
(ugust 14, 1996 12:56 pm) 69.88 84.9 T
0 10 Q
(17) 520.53 84.9 T
2 11 Q
(<not-o) 99.65 737.62 T
(wned-err) 130.25 737.62 T
(or>) 173.43 737.62 T
1 F
0.23 (This may be signalled when an attempt is made to release a noti\336cation when the) 171.65 724.62 P
(associated lock is not o) 171.65 711.62 T
(wned by the current thread.) 273.42 711.62 T
2 F
(release-all) 63.65 660.62 T
1 F
([Function]) 485.21 660.62 T
4 F
(Signatur) 81.65 635.62 T
(e) 119.14 635.62 T
2 F
(\050noti\336cation :: <noti\336cation>, #k) 99.65 616.62 T
(ey\051 => \050\051) 252.03 616.62 T
4 F
(Ar) 81.65 591.62 T
(guments) 92.24 591.62 T
2 F
(noti\336cation) 99.65 569.62 T
1 F
(Noti\336cation to be released.) 171.65 569.62 T
4 F
(Description) 81.65 544.62 T
1 F
-0.27 (Releases the noti\336cation, announcing the change of state to all threads which are block) 99.65 522.62 P
-0.27 (ed and w) 477.92 522.62 P
-0.27 (ait-) 516.98 522.62 P
(ing for it. Those threads will then necessarily ha) 99.65 509.62 T
(v) 311.14 509.62 T
(e to compete for the associated lock.) 316.48 509.62 T
4 F
(Exceptions) 81.65 484.62 T
2 F
(Release-all) 99.65 462.62 T
1 F
( may signal a condition of the follo) 150.36 462.62 T
(wing class \050which is a subclass of) 304.38 462.62 T
2 F
(<err) 455.61 462.62 T
(or>) 476.33 462.62 T
1 F
(\051.) 492.99 462.62 T
2 F
(<not-o) 99.65 440.62 T
(wned-err) 130.25 440.62 T
(or>) 173.43 440.62 T
1 F
0.23 (This may be signalled when an attempt is made to release a noti\336cation when the) 171.65 427.62 P
(associated lock is not o) 171.65 414.62 T
(wned by the current thread.) 273.42 414.62 T
0 12 Q
(5.5) 63.65 354.95 T
(Timer) 90.65 354.95 T
(s) 123.14 354.95 T
2 11 Q
(sleep) 63.65 325.62 T
1 F
([Function]) 485.21 325.62 T
4 F
(Signatur) 81.65 300.62 T
(e) 119.14 300.62 T
2 F
(\050inter) 99.65 281.62 T
(v) 125.81 281.62 T
(al :: <r) 131.2 281.62 T
(eal>\051 => \050\051) 163.54 281.62 T
4 F
(Ar) 81.65 256.62 T
(guments) 92.24 256.62 T
2 F
(inter) 99.65 234.62 T
(v) 122.14 234.62 T
(al) 127.53 234.62 T
1 F
(Sleep time in seconds.) 171.65 234.62 T
4 F
(Description) 81.65 209.62 T
2 F
(sleep) 99.65 187.62 T
1 F
( causes the current-thread to block for the speci\336ed number of seconds.) 122.87 187.62 T
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 18
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(18) 63.65 84.9 T
0 9 Q
(A) 421.88 84.9 T
(ugust 14, 1996 12:56 pm) 428.1 84.9 T
0 12 Q
(5.6) 63.65 736.95 T
(Atomic V) 90.65 736.95 T
(ariab) 141.94 736.95 T
(les) 170.5 736.95 T
2 11 Q
(atomic) 63.65 707.62 T
1 F
([V) 400.73 707.62 T
(ariable de\336nition adjecti) 411.11 707.62 T
(v) 517.77 707.62 T
(e]) 523.1 707.62 T
4 F
(Syntax) 81.65 682.62 T
2 F
(de\336ne atomic v) 99.65 663.62 T
(ariable) 170.42 663.62 T
4 F
(bindings) 206.17 663.62 T
2 F
( =) 244.07 663.62 T
4 F
(init) 255.84 663.62 T
2 F
(;) 270.51 663.62 T
4 F
(Description) 81.65 638.62 T
2 F
-0.1 (de\336ne atomic v) 99.65 616.62 P
-0.1 (ariable) 170.21 616.62 P
1 F
-0.1 ( de\336nes) 203.21 616.62 P
4 F
-0.1 (atomic) 239.67 616.62 P
1 F
-0.1 ( module v) 269.61 616.62 P
-0.1 (ariables in the current module in a similar manner) 313.13 616.62 P
0.28 0.05 (to) 99.65 603.62 B
2 F
0.28 0.05 (def) 111.37 603.62 B
0.28 0.05 (ine v) 125.56 603.62 B
0.28 0.05 (ariable) 148.26 603.62 B
1 F
0.28 0.05 (. An) 181.57 603.62 B
4 F
0.28 0.05 (atomic) 204.04 603.62 B
1 F
0.28 0.05 ( v) 234.25 603.62 B
0.28 0.05 (ariable has the same semantics as a normal module v) 242.59 603.62 B
0.28 0.05 (ariable, and) 479.56 603.62 B
0.21 (additionally pro) 99.65 590.62 P
0.21 (vides the guarantee that assignments to the v) 169.66 590.62 P
0.21 (ariable will be atomic with respect to) 367.27 590.62 P
0.28 0.17 (other threads. I.e. after an assignment, b) 99.65 577.62 B
0.28 0.17 (ut before e) 284.19 577.62 B
0.28 0.17 (xplicit synchronization, another thread will) 333.49 577.62 B
0.28 0.1 (either see the old v) 99.65 564.62 B
0.28 0.1 (alue or the ne) 185.61 564.62 B
0.28 0.1 (w v) 247.16 564.62 B
0.28 0.1 (alue of the v) 263.66 564.62 B
0.28 0.1 (ariable. There is no possibility of an undef) 320.22 564.62 B
0.28 0.1 (ined) 512.4 564.62 B
(half-w) 99.65 551.62 T
(ay state.) 128.25 551.62 T
-0.15 (F) 99.65 529.62 P
-0.15 (or those implementations of the threads library which do not guarantee atomicity for assignments) 105.6 529.62 P
0.28 0.06 (to normal module v) 99.65 516.62 B
0.28 0.06 (ariables, atomic v) 187.76 516.62 B
0.28 0.06 (ariables are lik) 267.02 516.62 B
0.28 0.06 (ely to be less ef) 333.19 516.62 B
0.28 0.06 (f) 403.47 516.62 B
0.28 0.06 (icient that normal v) 406.59 516.62 B
0.28 0.06 (ariables.) 494.2 516.62 B
0.28 0.03 (F) 99.65 503.62 B
0.28 0.03 (or threads library implementations which pro) 105.63 503.62 B
0.28 0.03 (vide the atomicity guarantee, atomic v) 307.18 503.62 B
0.28 0.03 (ariables and) 478.17 503.62 B
(normal v) 99.65 490.62 T
(ariables are completely equi) 138.79 490.62 T
(v) 262.23 490.62 T
(alent, and there is no loss of ef) 267.45 490.62 T
(\336cienc) 401.6 490.62 T
(y for atomic v) 430.76 490.62 T
(ariables.) 492.5 490.62 T
4 F
(Example) 81.65 465.62 T
1 F
0.25 (The follo) 99.65 443.62 P
0.25 (wing e) 140.26 443.62 P
0.25 (xample de\336nes an atomic v) 169.98 443.62 P
0.25 (ariable. This might be used in a situation where multi-) 291.08 443.62 P
0.28 0.04 (ple threads are w) 99.65 430.62 B
0.28 0.04 (orking in parallel to f) 175.95 430.62 B
0.28 0.04 (ind a solution to a problem. Each thread may test the v) 270.96 430.62 B
0.28 0.04 (ari-) 516.29 430.62 B
-0.23 (able, without locking, to see whether a solution has already been found. If a thread \336nds a solution,) 99.65 417.62 P
(it may assign to the v) 99.65 404.62 T
(ariable, ag) 193.18 404.62 T
(ain without locking, to indicate its success.) 238.94 404.62 T
2 F
(de\336ne atomic v) 99.65 385.62 T
(ariable *f) 170.42 385.62 T
(ound-solution* = #f;) 215.06 385.62 T
0 12 Q
(5.7) 63.65 347.95 T
(Atomic Slots) 90.65 347.95 T
2 11 Q
(atomic) 63.65 318.62 T
1 F
([Slot de\336nition adjecti) 419.65 318.62 T
(v) 517.77 318.62 T
(e]) 523.1 318.62 T
4 F
(Syntax) 81.65 293.62 T
2 F
(atomic) 99.65 271.62 T
1 F
( may be used as an adjecti) 131.42 271.62 T
(v) 246 271.62 T
(e in an) 251.34 271.62 T
(y slot speci\336cation in a) 280.5 271.62 T
2 F
(de\336ne class) 384.69 271.62 T
1 F
(.) 437.56 271.62 T
4 F
(Description) 81.65 246.62 T
1 F
0.28 0.07 (A slot which is def) 99.65 224.62 B
0.28 0.07 (ined to be) 184.59 224.62 B
2 F
0.28 0.07 ( atomic) 229.23 224.62 B
1 F
0.28 0.07 (additionally pro) 267.62 224.62 B
0.28 0.07 (vides the guarantee that assignments to the) 338.83 224.62 B
0.28 0.03 (slot will be atomic with respect to other threads. I.e. after an assignment, b) 99.65 211.62 B
0.28 0.03 (ut before e) 433.44 211.62 B
0.28 0.03 (xplicit syn-) 481.23 211.62 B
0.28 0.03 (chronization, another thread will either see the old v) 99.65 198.62 B
0.28 0.03 (alue or the ne) 332.43 198.62 B
0.28 0.03 (w v) 392.92 198.62 B
0.28 0.03 (alue of the slot. There is no) 409.19 198.62 B
(possibility of an unde\336ned half-w) 99.65 185.62 T
(ay state.) 248.03 185.62 T
-0.15 (F) 99.65 163.62 P
-0.15 (or those implementations of the threads library which do not guarantee atomicity for assignments) 105.6 163.62 P
0.28 0.15 (to normal slots, atomic slots are lik) 99.65 150.62 B
0.28 0.15 (ely to be less ef) 260.9 150.62 B
0.28 0.15 (f) 332.63 150.62 B
0.28 0.15 (icient that normal slots. F) 335.84 150.62 B
0.28 0.15 (or threads library) 452.86 150.62 B
0.28 0.09 (implementations which pro) 99.65 137.62 B
0.28 0.09 (vide the atomicity guarantee, atomic slots and normal slots are com-) 222.66 137.62 B
(pletely equi) 99.65 124.62 T
(v) 151.01 124.62 T
(alent, and there is no loss of ef) 156.23 124.62 T
(\336cienc) 290.38 124.62 T
(y for atomic slots.) 319.54 124.62 T
FMENDPAGE
%%EndPage: "18" 18
%%Page: "19" 19
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 9 Q
(A) 63.65 84.9 T
(ugust 14, 1996 12:56 pm) 69.88 84.9 T
0 10 Q
(19) 520.53 84.9 T
4 11 Q
(Example) 81.65 737.62 T
1 F
0.01 (The follo) 99.65 715.62 P
0.01 (wing e) 140.01 715.62 P
0.01 (xample de\336nes a class with a single atomic slot which might be used in a situation) 169.49 715.62 P
0.28 0.2 (where thread) 99.65 702.62 B
4 F
0.28 0.2 (A) 162.71 702.62 B
1 F
0.28 0.2 (is w) 172.86 702.62 B
0.28 0.2 (orking on a substantial task in parallel with thread) 191.87 702.62 B
4 F
0.28 0.2 (B) 427.86 702.62 B
1 F
0.28 0.2 ( which is continually) 434.78 702.62 B
-0.27 (updating a status bar indicator) 99.65 689.62 P
-0.27 (. Thread) 230.54 689.62 P
4 F
-0.27 (A) 269.39 689.62 P
1 F
-0.27 ( may update the v) 276.12 689.62 P
-0.27 (alue of the slot, and thread) 352.95 689.62 P
4 F
-0.27 (B) 470.76 689.62 P
1 F
-0.27 ( may read it,) 477.48 689.62 P
(without an) 99.65 676.62 T
(y e) 146.23 676.62 T
(xplicit synchronization between the tw) 159.2 676.62 T
(o threads.) 329.57 676.62 T
2 F
(de\336ne class <status> \050<object>\051) 99.65 657.62 T
(atomic slot per) 121.25 644.62 T
(cent-complete :: <integer> = 0;) 190.7 644.62 T
(end class) 99.65 631.62 T
0 12 Q
(5.8) 63.65 593.95 T
(Thread V) 90.65 593.95 T
(ariab) 141.28 593.95 T
(les) 169.84 593.95 T
2 11 Q
(thread) 63.65 564.62 T
1 F
([V) 400.73 564.62 T
(ariable de\336nition adjecti) 411.11 564.62 T
(v) 517.77 564.62 T
(e]) 523.1 564.62 T
4 F
(Syntax) 81.65 539.62 T
2 F
(de\336ne thr) 99.65 520.62 T
(ead v) 144.98 520.62 T
(ariable) 169.62 520.62 T
4 F
(bindings) 205.37 520.62 T
2 F
( =) 243.26 520.62 T
4 F
(init) 255.03 520.62 T
2 F
(;) 269.71 520.62 T
4 F
(Description) 81.65 495.62 T
2 F
0.28 0.09 (def) 99.65 473.62 B
0.28 0.09 (ine thr) 113.99 473.62 B
0.28 0.09 (ead v) 146.2 473.62 B
0.28 0.09 (ariable) 171.58 473.62 B
1 F
0.28 0.09 ( def) 205.24 473.62 B
0.28 0.09 (ines module v) 222.09 473.62 B
0.28 0.09 (ariables in the current module which ha) 285.31 473.62 B
0.28 0.09 (v) 464.55 473.62 B
0.28 0.09 (e thread-local) 469.98 473.62 B
0.28 0.05 (bindings. The initialization e) 99.65 460.62 B
0.28 0.05 (xpression is e) 228.21 460.62 B
0.28 0.05 (v) 289.02 460.62 B
0.28 0.05 (aluated once, and is used to pro) 294.29 460.62 B
0.28 0.05 (vide the initial v) 435.66 460.62 B
0.28 0.05 (alues) 508.86 460.62 B
0.28 0.06 (for the v) 99.65 447.62 B
0.28 0.06 (ariables in each thread. The v) 137.76 447.62 B
0.28 0.06 (alue of a thread v) 270.26 447.62 B
0.28 0.06 (ariable binding may be changed with the) 348.58 447.62 B
(normal assignment operator) 99.65 434.62 T
2 F
(:=) 225.21 434.62 T
1 F
(. This assignment is not visible in other threads.) 235.15 434.62 T
0.28 0.05 (Since the bindings of thread v) 99.65 412.62 B
0.28 0.05 (ariables are in) 233.8 412.62 B
0.28 0.05 (visible to other threads, it is meaningless to consider) 296.3 412.62 B
0.18 (whether a thread v) 99.65 399.62 P
0.18 (ariable may be assigned to atomically) 181.45 399.62 P
0.18 (. A v) 347.51 399.62 P
0.18 (ariable which is de\336ned with both of) 369.28 399.62 P
0.25 (the adjecti) 99.65 386.62 P
0.25 (v) 145.15 386.62 P
0.25 (es) 150.48 386.62 P
2 F
0.25 (thr) 162.65 386.62 P
0.25 (ead) 177.11 386.62 P
1 F
0.25 ( and) 193.61 386.62 P
2 F
0.25 (atomic) 215.51 386.62 P
1 F
0.25 ( is e) 247.27 386.62 P
0.25 (xactly equi) 265.34 386.62 P
0.25 (v) 313.9 386.62 P
0.25 (alent to a v) 319.12 386.62 P
0.25 (ariable which is de\336ned with just the) 368.19 386.62 P
2 F
(thr) 99.65 373.62 T
(ead) 114.11 373.62 T
1 F
( adjecti) 130.61 373.62 T
(v) 162.41 373.62 T
(e.) 167.75 373.62 T
4 F
(Example) 81.65 348.62 T
2 F
(de\336ne thr) 99.65 329.62 T
(ead v) 144.98 329.62 T
(ariable *standard-output*) 169.62 329.62 T
(= mak) 114.05 316.62 T
(e\050<standard-output-str) 143.74 316.62 T
(eam>\051;) 251.86 316.62 T
0 12 Q
(5.9) 63.65 278.95 T
(Dynamic Binding) 90.65 278.95 T
2 11 Q
(dynamic-bind) 63.65 249.62 T
1 F
([Macro]) 495.61 249.62 T
4 F
(Syntax) 81.65 224.62 T
2 F
(dynamic-bind \050) 99.65 205.62 T
4 F
(place1) 171.47 205.62 T
2 F
( =) 200.79 205.62 T
4 F
(init1) 212.56 205.62 T
2 F
(,) 232.74 205.62 T
4 F
(place2) 238.24 205.62 T
2 F
( =) 267.56 205.62 T
4 F
(init2) 279.33 205.62 T
2 F
(, ...\051) 299.51 205.62 T
4 F
(body) 319.67 205.62 T
2 F
( end;) 341.05 205.62 T
4 F
(Description) 81.65 180.62 T
1 F
0.03 (The body is e) 99.65 158.62 P
0.03 (v) 159.02 158.62 P
0.03 (aluated in an en) 164.25 158.62 P
0.03 (vironment in which the speci\336ed) 233.23 158.62 P
4 F
0.03 (places) 380.31 158.62 P
1 F
0.03 ( are rebound in the dynamic) 408.41 158.62 P
0.28 0.19 (en) 99.65 145.62 B
0.28 0.19 (vironment, and initialized to the results of e) 109.96 145.62 B
0.28 0.19 (v) 312.02 145.62 B
0.28 0.19 (aluating the initialization e) 317.43 145.62 B
0.28 0.19 (xpressions. In other) 441.11 145.62 B
0.15 (w) 99.65 132.62 P
0.15 (ords, the places are initialized to ne) 107.48 132.62 P
0.15 (w v) 263.6 132.62 P
0.15 (alues on entry to the body b) 279.67 132.62 P
0.15 (ut restored to their old v) 402.55 132.62 P
0.15 (alues) 509.04 132.62 P
FMENDPAGE
%%EndPage: "19" 19
%%Page: "20" 20
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(20) 63.65 84.9 T
0 9 Q
(A) 421.88 84.9 T
(ugust 14, 1996 12:56 pm) 428.1 84.9 T
1 11 Q
0.28 0.05 (once the body has f) 99.65 737.62 B
0.28 0.05 (inished e) 186.66 737.62 B
0.28 0.05 (x) 226.64 737.62 B
0.28 0.05 (ecuting \050whether because it f) 232.03 737.62 B
0.28 0.05 (inishes normally) 361.09 737.62 B
0.28 0.05 (, or because of a non-) 434.5 737.62 B
(local transfer of control\051. T) 99.65 724.62 T
(ypically) 218.21 724.62 T
(, each place will be a thread v) 252.93 724.62 T
(ariable.) 383.39 724.62 T
(If the) 99.65 702.62 T
4 F
(place) 125.92 702.62 T
1 F
( is a) 149.74 702.62 T
4 F
(name) 170.21 702.62 T
1 F
(, it must be the name of a) 194.04 702.62 T
2 F
(thr) 308 702.62 T
(ead v) 322.46 702.62 T
(ariable) 347.1 702.62 T
1 F
( in the module scope.) 380.1 702.62 T
4 F
(Example) 81.65 677.62 T
1 F
(The follo) 99.65 655.62 T
(wing e) 140.01 655.62 T
(xample sho) 169.48 655.62 T
(ws the dynamic binding of a single v) 219.61 655.62 T
(ariable.) 381.58 655.62 T
2 F
(dynamic-bind \050*standard-output* = new-v) 99.65 636.62 T
(al\050\051\051) 299.24 636.62 T
(top-le) 114.05 623.62 T
(v) 140.77 623.62 T
(el-loop \050\051) 146.16 623.62 T
(end;) 99.65 610.62 T
1 F
(This e) 99.65 588.62 T
(xpands into code equi) 126.68 588.62 T
(v) 222.64 588.62 T
(alent to the follo) 227.86 588.62 T
(wing:) 300 588.62 T
2 F
(begin) 99.65 569.62 T
(let old-v) 114.05 556.62 T
(alue = *standard-output*;) 152.13 556.62 T
(block \050\051) 114.05 543.62 T
(*standard-output* := new-v) 128.45 530.62 T
(al\050\051;) 259.89 530.62 T
(top-le) 128.45 517.62 T
(v) 155.17 517.62 T
(el-loop\050\051) 160.56 517.62 T
(cleanup) 114.05 504.62 T
(*standard-output* := old-v) 128.45 491.62 T
(alue) 255.62 491.62 T
(end) 114.05 478.62 T
(end) 99.65 465.62 T
0 10 Q
(5.9.1) 63.65 431.29 T
(Extended f) 90.65 431.29 T
(orm of d) 141.57 431.29 T
(ynamic-bind) 181.42 431.29 T
1 11 Q
0.19 (Some implementations of the threads library may pro) 63.65 415.62 P
0.19 (vide an e) 299.78 415.62 P
0.19 (xtended form of) 339.71 415.62 P
2 F
0.19 (dynamic-bind) 413.91 415.62 P
1 F
0.19 ( for binding) 479.32 415.62 P
-0.26 (places other than v) 63.65 402.62 P
-0.26 (ariables. The implementation of this e) 145.39 402.62 P
-0.26 (xtended form requires the use of non-standard fea-) 310.76 402.62 P
0.28 0.12 (tures in the Dylan macro system, and hence cannot be written as a portable macro. These non-standard) 63.65 389.62 B
0.28 0.07 (e) 63.65 376.62 B
0.28 0.07 (xtensions are subject to discussion amongst the Dylan language designers, and may e) 68.44 376.62 B
0.28 0.07 (v) 452.52 376.62 B
0.28 0.07 (entually become) 457.93 376.62 B
0.28 0.03 (standard features. Until such time as standardization occurs, implementations are not mandated to imple-) 63.65 363.62 B
(ment the e) 63.65 350.62 T
(xtended form of) 109.31 350.62 T
2 F
(dynamic-bind) 182.93 350.62 T
1 F
(, and portable code should not depend upon this feature.) 248.34 350.62 T
4 F
(Syntax) 81.65 325.62 T
1 F
(\050as for the simple form\051) 113.72 325.62 T
2 F
(dynamic-bind \050) 99.65 306.62 T
4 F
(place1) 171.47 306.62 T
2 F
( =) 200.79 306.62 T
4 F
(init1) 212.56 306.62 T
2 F
(,) 232.74 306.62 T
4 F
(place2) 238.24 306.62 T
2 F
( =) 267.56 306.62 T
4 F
(init2) 279.33 306.62 T
2 F
(, ...\051) 299.51 306.62 T
4 F
(body) 319.67 306.62 T
2 F
( end;) 341.05 306.62 T
4 F
(Description) 81.65 281.62 T
1 F
-0.04 (If) 99.65 259.62 P
4 F
-0.04 (place) 109.68 259.62 P
1 F
-0.04 ( is not a name, then it may ha) 133.51 259.62 P
-0.04 (v) 262.18 259.62 P
-0.04 (e the syntax of a call to a function. This permits an) 267.52 259.62 P
4 F
-0.04 (e) 492.77 259.62 P
-0.04 (xtended) 497.44 259.62 P
0.28 0.29 (form) 99.65 246.62 B
1 F
0.28 0.29 ( for) 121.6 246.62 B
2 F
0.28 0.29 (dynamic-bind) 141.95 246.62 B
1 F
0.28 0.29 (, by analogy with the e) 210.88 246.62 B
0.28 0.29 (xtended form for) 319.07 246.62 B
2 F
0.28 0.29 (:=) 402.18 246.62 B
1 F
0.28 0.29 (. In this case, if the place) 412.7 246.62 B
0.28 0.1 (appears syntactically as) 99.65 233.62 B
2 F
0.28 0.1 (name\050ar) 209.48 233.62 B
0.28 0.1 (g1, ...ar) 249.74 233.62 B
0.28 0.1 (gn\051) 285.9 233.62 B
1 F
0.28 0.1 (, then the macro e) 301.47 233.62 B
0.28 0.1 (xpands into a call to the function) 382.63 233.62 B
2 F
0.28 0.15 (name-dynamic-binder\050) 99.65 220.62 B
4 F
0.28 0.15 (init) 210.88 220.62 B
2 F
0.28 0.15 (,) 226.17 220.62 B
4 F
0.28 0.15 (body-method) 232.25 220.62 B
2 F
0.28 0.15 (, ar) 291.37 220.62 B
0.28 0.15 (g1, ... ar) 308.04 220.62 B
0.28 0.15 (gn\051) 347.9 220.62 B
1 F
0.28 0.15 ( where) 363.64 220.62 B
4 F
0.28 0.15 (init) 397.64 220.62 B
1 F
0.28 0.15 ( is the initial v) 412.92 220.62 B
0.28 0.15 (alue for the) 479.31 220.62 B
-0 (binding, and) 99.65 207.62 P
4 F
-0 (body-method) 157.4 207.62 P
1 F
-0 ( is function with no parameters whose body is the) 214.83 207.62 P
4 F
-0 (body of) 436.02 207.62 P
1 F
-0 (the) 471.46 207.62 P
2 F
-0 (dynamic-) 487.65 207.62 P
(bind) 99.65 194.62 T
1 F
(. The e) 121.05 194.62 T
(xtended form also permits the other \322) 151.13 194.62 T
2 F
(.) 315.49 194.62 T
1 F
(\323 and \322) 317.47 194.62 T
2 F
([]) 348.62 194.62 T
1 F
(\323syntax) 355.95 194.62 T
(es for function calls.) 389.39 194.62 T
0.23 (There are no features in the current v) 99.65 172.62 P
0.23 (ersion of the threads library which mak) 263.88 172.62 P
0.23 (e use of the e) 438.04 172.62 P
0.23 (xtended) 496.82 172.62 P
(form of) 99.65 159.62 T
2 F
(dynamic-bind) 135.7 159.62 T
1 F
(.) 201.1 159.62 T
FMENDPAGE
%%EndPage: "20" 20
%%Page: "21" 21
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 9 Q
(A) 63.65 84.9 T
(ugust 14, 1996 12:56 pm) 69.88 84.9 T
0 10 Q
(21) 520.53 84.9 T
4 11 Q
(Example) 81.65 712.62 T
1 F
(The follo) 99.65 690.62 T
(wing e) 140.01 690.62 T
(xample sho) 169.48 690.62 T
(ws the e) 219.61 690.62 T
(xtended form of) 255.5 690.62 T
2 F
(dynamic-bind) 329.12 690.62 T
1 F
(.) 394.52 690.62 T
2 F
(dynamic-bind \050object.a-slot = new-slot-v) 99.65 671.62 T
(al\050\051\051) 288.52 671.62 T
(inner) 114.05 658.62 T
(-body\050object\051) 138.7 658.62 T
(end;) 99.65 645.62 T
1 F
(This e) 99.65 623.62 T
(xpands into code equi) 126.68 623.62 T
(v) 222.64 623.62 T
(alent to the follo) 227.86 623.62 T
(wing:) 300 623.62 T
2 F
(a-slot-dynamic-binder\050) 99.65 604.62 T
(new-slot-v) 207.81 604.62 T
(al\050\051,) 255.97 604.62 T
(method \050\051 inner) 186.05 591.62 T
(-body\050object\051 end,) 258.97 591.62 T
(object\051) 186.05 578.62 T
0 15 Q
(6.) 63.65 536.95 T
(Thread Saf) 90.65 536.95 T
(ety in Client Libraries) 168.02 536.95 T
0 12 Q
(6.1) 63.65 497.95 T
(General Requirements) 90.65 497.95 T
1 11 Q
0.01 (Library designers are responsible for documenting which features of the library of) 63.65 472.62 P
0.01 (fer b) 424.92 472.62 P
0.01 (uilt-in synchroniza-) 445.17 472.62 P
0.28 0.05 (tion and which do not. There is no def) 63.65 459.62 B
0.28 0.05 (initi) 234.92 459.62 B
0.28 0.05 (v) 252.64 459.62 B
0.28 0.05 (e rule to guide designers on ho) 258.02 459.62 B
0.28 0.05 (w to do this, b) 396.03 459.62 B
0.28 0.05 (ut the follo) 460.32 459.62 B
0.28 0.05 (wing) 509.49 459.62 B
(guidelines may be useful.) 63.65 446.62 T
0.28 0.12 (If a client of the library for) 63.65 421.62 B
0.28 0.12 (gets to use a synchronization feature when one is necessary) 186.45 421.62 B
0.28 0.12 (, then the library) 456.16 421.62 B
0.28 0.02 (designer should ensure that the ef) 63.65 408.62 B
0.28 0.02 (fect of the lack of synchronization is limited to a small unit \050probably a) 213.13 408.62 B
0.28 0.11 (single object\051. In cases where the designer cannot guarantee that the ef) 63.65 395.62 B
0.28 0.11 (fect will be limited, the designer) 384.4 395.62 B
0.14 (should either de\336ne that the library will implement the synchronization internally) 63.65 382.62 P
0.14 (, or will pro) 422.38 382.62 P
0.14 (vide a macro) 474.56 382.62 P
(for clients to use instead.) 63.65 369.62 T
0.09 (Library implementors must ensure that the library pro) 63.65 344.62 P
0.09 (vides implicit synchronization for an) 300.89 344.62 P
0.09 (y hidden global) 463.02 344.62 P
0.28 0.11 (state which is maintained by the library) 63.65 331.62 B
0.28 0.11 (. Library designers may choose whether the library should of) 242.39 331.62 B
0.28 0.11 (fer) 519.22 331.62 B
0.07 (implicit synchronization of the state of objects managed by the library) 63.65 318.62 P
0.07 (. The interf) 372.19 318.62 P
0.07 (ace is more con) 421.4 318.62 P
0.07 (v) 489.89 318.62 P
0.07 (enient if) 495.23 318.62 P
0.28 0.02 (the synchronization is implicit, b) 63.65 305.62 B
0.28 0.02 (ut it may be more ef) 209.7 305.62 B
0.28 0.02 (f) 300.08 305.62 B
0.28 0.02 (icient to rely on e) 303.15 305.62 B
0.28 0.02 (xplicit synchronization by the cli-) 381.44 305.62 B
(ent. Library designers should al) 63.65 292.62 T
(w) 202.54 292.62 T
(ays document the choice the) 210.38 292.62 T
(y mak) 334.85 292.62 T
(e.) 361.93 292.62 T
0 12 Q
(6.2) 63.65 254.95 T
(Dylan Librar) 90.65 254.95 T
(y) 160.79 254.95 T
1 11 Q
-0.14 (The de\336nition of the Dylan library is not changed with the addition of the threads library) 63.65 229.62 P
-0.14 (. The implementa-) 450.97 229.62 P
0.28 0.04 (tion will ensure that all hidden global state \050such as the symbol table and an) 63.65 216.62 B
0.28 0.04 (y generic function caches\051 is) 403.55 216.62 B
0.28 0.16 (implicitly synchronized. Those functions in the Dylan library which are def) 63.65 203.62 B
0.28 0.16 (ined to modify the state of) 410.2 203.62 B
-0.19 (objects are not de\336ned to pro) 63.65 190.62 P
-0.19 (vide implicit synchronization. Ho) 190.52 190.62 P
-0.19 (we) 337.55 190.62 P
-0.19 (v) 350.1 190.62 P
-0.19 (er) 355.43 190.62 P
-0.19 (, implementations are e) 363.54 190.62 P
-0.19 (xpected to pro-) 465.44 190.62 P
0.28 0.02 (vide enough implicit synchronization to ensure that the ef) 63.65 177.62 B
0.28 0.02 (fects of an omission of e) 320.28 177.62 B
0.28 0.02 (xplicit synchronization) 429.81 177.62 B
(are suf) 63.65 164.62 T
(\336ciently limited that language inte) 93 164.62 T
(grity and runtime safety are not violated.) 243.77 164.62 T
0.05 (It is currently undecided whether the threads library should guarantee that an) 63.65 139.62 P
0.05 (y of the standard Dylan func-) 402.19 139.62 P
-0.26 (tions are atomic. Implementations are encouraged \050b) 63.65 126.62 P
-0.26 (ut not mandated\051 to pro) 293.14 126.62 P
-0.26 (vide an atomicity guarantee for) 395.21 126.62 P
(\324element\325 and \324element-setter\325 for all of the b) 63.65 113.62 T
(uilt-in Dylan collection classes.) 262.29 113.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 21
%%Page: "22" 22
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Threads Librar) 447.1 766.62 T
(y) 527.2 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(22) 63.65 84.9 T
0 9 Q
(A) 421.88 84.9 T
(ugust 14, 1996 12:56 pm) 428.1 84.9 T
1 11 Q
0.28 0.04 (Currently) 63.65 737.62 B
0.28 0.04 (, code which is intended to be portable amongst all implementations of the library may not rely) 105.44 737.62 B
0.2 (upon the atomicity guarantee for \324element\325 and \324element-setter\325. Programmers should guard ag) 63.65 724.62 P
0.2 (ainst une) 483.04 724.62 P
0.2 (x-) 522.48 724.62 P
(pected beha) 63.65 711.62 T
(viour by using e) 115.66 711.62 T
(xplicit inter) 186.68 711.62 T
(-thread synchronization.) 237.49 711.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 22
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 22
%%DocumentFonts: Helvetica-Bold
%%+ Times-Roman
%%+ Times-Bold
%%+ Courier-Bold
%%+ Times-Italic
%%EOF
