			     Bit Vectors
			     ===========

The following are exported form the bit-vector module in the bit-vector
library.


<bit>                                                               [Type]

 Description
  A subtype of <integer>, this is the type of elements of <bit-vector>.
  Objects of this type may have the value 0 or 1.


<bit-vector>                             [open primary instantiable class]

 Superclasses: <vector>

 Init-keywords:
  size:              Specifies the number of bits in the bit-vector. The
                     default is 0.

  fill:              A <bit> which specifies the initial value of all
                     the elements in the vector. The default is 0.

 Description
  A compact representation of a vector of bits. The elements of the vector
  have the type <bit> and may be the values 0 and 1. The elements are
  indexed from 0 up to ('size' - 1).


make                                                           [GF Method]

 Signature
    (class == <bit-vector>, #key size :: <integer> = 0, fill :: <bit> = 0)
 => (vector :: <bit-vector>)

 Description
   Returns an instance of a sealed subclass of <bit-vector>. This allows
   <bit-vector> to remain open so it may be subclassed by other
   libraries. Note that all of the other methods defined on <bit-vector>
   are sealed.


bit-vector-and                                                  [Function]

 Signature:
    (v1 :: <bit-vector>, v2 :: <bit-vector>, #key pad1 :: <bit> = 0,
                                                  pad2 :: <bit> = 0)
 => (result :: <bit-vector>, result-pad :: <bit>)

 Description:
  Returns a new vector which is the bitwise and of the two argument
  vectors. Each vector has an associated pad value. If the vectors are of
  different lengths, the shorter is considered extended with its pad
  value. The size of the result vector may be extended or shortened
  provided the bits added or dropped are the same as the result-pad value.
  The size of the result will be no smaller than the minimum of the
  argument sizes, and no greater than the maximum of the argument sizes.
  The result-pad value is calculated by taking the logical and of the two
  input pad values.


bit-vector-and!                                                 [Function]

 Signature:
    (v1 :: <bit-vector>, v2 :: <bit-vector>, #key pad1 :: <bit> = 0,
                                                  pad2 :: <bit> = 0)
 => (result :: <bit-vector>, pad :: <bit>)

 Description:
  Returns a vector which is the bitwise and of the two argument vectors.
  'v1' may or may not be modified by this operation. Each vector has an
  associated pad value. If the vectors are of different lengths, the
  shorter is considered extended with its pad value. The size of the
  result vector may be extended or shortened provided the bits added or
  dropped are the same as the result-pad value. The size of the result
  will be no smaller than the minimum of the argument sizes, and no
  greater than the maximum of the argument sizes. The result-pad value is
  calculated by taking the logical and of the two input pad values.


bit-vector-andc2                                                [Function]

 Signature
    (v1 :: <bit-vector>, v2 :: <bit-vector>, #key pad1 :: <bit> = 0,
                                                  pad2 :: <bit> = 0)
 => (result :: <bit-vector>, pad :: <bit>)

 Description
  Returns a new vector which is the result of taking the bitwise and of
  'v1' and the bitwise not of 'v2'. Each vector has an associated pad
  value. If the vectors are of different lengths, the shorter is
  considered extended with its pad value. The size of the result vector
  may be extended or shortened provided the bits added or dropped are the
  same as the result-pad value. The size of the result will be no smaller
  than the minimum of the argument sizes, and no greater than the maximum
  of the argument sizes. The result-pad value is calculated by taking the
  logical and of 'pad1' with the complement of 'pad2'.


bit-vector-andc2!                                               [Function]

 Signature
    (v1 :; <bit-vector>, v2 :: <bit-vector>, #key pad-value :: <bit> = 0)
 => (result :: <bit-vector>)

 Description
  Returns a vector which is the result of taking the bitwise and of 'v1'
  and the bitwise not of 'v2'. 'v1' may or may not be modified by this
  operation. Each vector has an associated pad value. If the vectors are
  of different lengths, the shorter is considered extended with its pad
  value. The size of the result vector may be extended or shortened
  provided the bits added or dropped are the same as the result-pad value.
  The size of the result will be no smaller than the minimum of the
  argument sizes, and no greater than the maximum of the argument sizes.
  The result-pad value is calculated by taking the logical and of 'pad1'
   with the complement of 'pad2'.


bit-vector-or                                                   [Function]

 Signature
    (v1 :: <bit-vector>, v2 :: <bit-vector>, #key pad-value :: <bit> = 0)
 => (result :: <bit-vector>)

 Description
  Returns a new vector which is the bitwise or of the two argument
  vectors. Each vector has an associated pad
  value. If the vectors are of different lengths, the shorter is
  considered extended with its pad value. The size of the result vector
  may be extended or shortened provided the bits added or dropped are the
  same as the result-pad value. The size of the result will be no smaller
  than the minimum of the argument sizes, and no greater than the maximum
  of the argument sizes. The result-pad value is calculated by taking the
  logical or of the two input pad values.


bit-vector-or!                                                  [Function]

 Signature
    (v1 :: <bit-vector>, v2 :: <bit-vector>, #key pad-value :: <bit> = 0)
 => (result :: <bit-vector>)

 Description
  Returns a vector which is the bitwise or of the two argument vectors.
  'v1' may or may not be modified by this operation. Each vector has an
  associated pad value. If the vectors are of different lengths, the
  shorter is considered extended with its pad value. The size of the
  result vector may be extended or shortened provided the bits added or
  dropped are the same as the result-pad value. The size of the result
  will be no smaller than the minimum of the argument sizes and no greater
  than the maximum of the argument sizes. The result-pad value is
  calculated by taking the logical or of the two input pad values.


bit-vector-xor                                                  [Function]

 Signature
    (v1 :: <bit-vector>, v2 :: <bit-vector>, #key pad-value :: <bit> = 0)
 => (result :: <bit-vector>)

 Description
  Returns a new vector which is the bitwise exclusive or of the two
  argument vectors. Each vector has an associated pad
  value. If the vectors are of different lengths, the shorter is
  considered extended with its pad value. The size of the result will be
  no smaller than the minimum of the argument sizes, and no greater than
  the maximum of the argument sizes. The size of the result vector may be
  extended or shortened provided the bits added or dropped are the same as
  the result-pad value. The result-pad value is calculated by taking the
  logical xor of the two input pad values.


bit-vector-xor!                                                 [Function]

 Signature
    (v1 :: <bit-vector>, v2 :: <bit-vector>, #key pad-value :: <bit> = 0)
 => (result :: <bit-vector>)

 Description
  Returns a vector which is the bitwise exclusive or of the two argument
  vectors. 'v1' may or may not be modified by this operaion.
  Each vector has an associated pad
  value. If the vectors are of different lengths, the shorter is
  considered extended with its pad value. The size of the result vector
  may be extended or shortened provided the bits added or dropped are the
  same as the result-pad value. The size of the result will be no smaller
  than the minimum of the argument sizes, and no greater than the maximum
  of the argument sizes. The result-pad value is calculated by taking the
  logical xor of the two input pad values.


bit-vector-not                                                  [Function]

 Signature
  (vector :: <bit-vector>) => (result :: <bit-vector>)

 Description
  Returns a new vector which is the bitwise not of its argument.


bit-vector-not!                                                 [Function]

 Signature
  (vector :: <bit-vector>) => (result :: <bit-vector>)

 Description
  Modifies 'vector' so that it becomes the bitwise not of its original
  contents. 'result' == 'vector'.


element                                                 [Sealed GF Method]

 Signature
    (vector :: <bit-vector>, index :: <integer>, #key default)
 => (value :: <object>)

 Description
  Returns the value of the bit at the specified index. If 'index' is out
  of range and a 'default' argument was supplied its value is returned.
  If no 'default' argument was supplied an error is signalled.


element-setter                                          [Sealed GF Method]

 Signature
    (new-value :: <bit>, vector :: <bit-vector>, index :: <integer>)
 => (new-value :: <bit>)

 Description
  Set the value of the bit at the specified index. 'new-value' may be 0 or
  1. If 'index' is out of range, an error is signalled.


size                                                    [Sealed GF Method]

 Signature
  (vector :: <bit-vector>) => (vector-size :: <integer>)

 Description
  Returns the number of bits in the bit-vector.


bit-count                                                       [Function]

 Signature
    (vector :: <bit-vector>, #key bit-value :: <bit> = 1)
 => (count :: <integer>)

 Description
  Returns the number of bits in 'vector' which are equal to 'bit-value'.
  This may be a relatively slow operation.


fill!                                                   [Sealed GF Method]

 Signature
    (vector :: <bit-vector>, value :: <bit>, #key start, end)
 => (vector :: <bit-vector>)

 Description
  Modifies 'vector' so that element(vector, key) returns 'value' for
  every 'key'.

  The 'start' and 'end' keywords may be specified to indicate that
  only a part of the vector should be filled. 'start' is considered
  an inclusive bound and defaults to 0; 'end' is an exclusive bound
  and defaults to the size of the vector.


copy-sequence                                           [Sealed GF Method]

 Signature
  (source :: <bit-vector>, #key start, end) => (new-bv :: <bit-vector>)

 Description
  Creates a freshly allocated bit-vector containing the elements of
  'source' between start and end.
