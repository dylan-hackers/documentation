%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.1
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%-
%- Frame ps_prolog 5.0, for use with Frame 5.0 products
%- This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
%- All rights reserved.  This ps_prolog file may be freely copied and 
%- distributed in conjunction with documents created using FrameMaker, 
%- FrameMaker/SGML FrameReader and FrameViewer as long as this 
%- copyright notice is preserved.
%-
%- FrameMaker users specify the proper paper size for each print job in the
%- "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
%- printer that the PS file is sent to does not support the requested paper
%- size, or if there is no paper tray of the proper size currently installed, 
%- then the job will not be printed.  The following flag, if set to true, will
%- cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            true def
%-
%- Frame products normally print colors as their true color on a color printer
%- or as shades of gray, based on luminance, on a black-and white printer. The
%- following flag, if set to true, forces all non-white colors to print as pure
%- black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%-
%- Frame products can either set their own line screens or use a printer's 
%- default settings. Three flags below control this separately for no 
%- separations, spot separations and process separations. If a flag
%- is true, then the default printer settings will not be changed. If it is
%- false, Frame products will use their own settings from a table based on
%- the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%-
%- For any given PostScript printer resolution, Frame products have two sets of 
%- screen angles and frequencies for printing process separations, which are 
%- recomended by Adobe. The following variable chooses the higher frequencies
%- when set to true or the lower frequencies when set to false. This is only
%- effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%-
%- The following is a set of predefined optimal frequencies and angles for various
%- common dpi settings. This is taken from "Advances in Color Separation Using
%- PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
%- and corrolated with information which is in various PPD (4.0) files.
%-
%- The "dpiranges" figure is the minimum dots per inch device resolution which
%- can support this setting. The "low" and "high" values are controlled by the
%- setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
%- the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
%- three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%-
%- PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
%- to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
%- (too badly) against the screen frequencies of any separations for that DPI.
% This is computed by taking dpi/9 as the ideal pixels per repetition, and then
% computing a tiling size in printer pixels for each of the four separations as 
% (dpi/screenFreq)*(cos(screenAngle)+sin(screenAngle)) Actually, this is the same 
% for Cyan and Magenta). Then, we take a "nice" LCM of the tile sizes close to
% the desired pattern tile where the beat factor is not more than 2 or 3.
%
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def

/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def

/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%-
%- PostScript Level 2 printers contain an "Accurate Screens" feature which can
%- improve process separation rendering at the expense of compute time. This 
%- flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%-
%- The following PostScript procedure defines the spot function that Frame
%- products will use for process separations. You may un-comment-out one of
%- the alternative functions below, or use your own.
%-
%- Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%-
%- Line function
%- /FMSpotFunction { pop } def
%-
%- Elipse function
%- /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%-		sqrt 1 exch sub } def
%-
%-

/FMversion (5.0) def % matches PS_VERSION in fmprintdriver

% PostScript Level 1 = true, 2 = false
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def

% Set up Color vs. Black-and-White
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
%		statusdict /processcolors known {
%			statusdict /processcolors get exec
%		} {1} ifelse
%		1 gt
		true
	} ifelse
def

/FrameDict 400 dict def % should check this value each time changes made

%
% For NeWS we add a fake errordict, so we can psh files
%
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if

%- The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put % save old rangecheck
errordict /rangecheck {FrameDict /bug true put} put % will flag bug found
FrameDict /bug false put % flag bug not found
mark % since we're not sure what will happen next
%- Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark % junk from readline and rangecheck
errordict /rangecheck FrameDict /tmprangecheck get put % restore rangecheck
FrameDict /bug get { % redefine readline if last one got a rangecheck
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop % get a char
			dup 10 eq {exit} if % exit if LF
			dup 13 eq {exit} if % exit if CR
			gstring exch gindex exch put % store it away
			/gindex gindex 1 add def % bump index
		} loop
		pop % eol character
		gstring 0 gindex getinterval true % simulate real readline
		} bind def
	} if

% outer-world defs

/FMshowpage /showpage load def
/FMquit /quit load def

/FMFAILURE { % enter with two error strings on the stack
	dup = flush % send a copy of the message to the console
	FMshowpage % msg on a page by itself, so it can't be, say, black on black
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage % we might be in the middle of some EPS, where "showpage"
	FMquit % and "quit" are redefined
	} def % only used once at most, so no bind

/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def % only used at startup, so no bind

/FMBADEPSF { % Call with bad operator name on stack (as a string)
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length % parmstr errstr errstr indx
	5 -1 roll % errstr errstr index parmstr
	putinterval % errstr
	FMFAILURE
	} def

% standard concatprocs routine
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def

% Put all local variables here in alphabetical order.
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall

% Start of PDF/Acrobat support

% Bind def
/FmBD {bind def} bind def

systemdict /pdfmark known {
	/fMAcrobat true def

	% FmPD is a conditional PDFMark
	/FmPD /pdfmark load def
	
	% FmPT is a show text operator which only show up when distiller is active
	/FmPT /show load def
	
	% FmPD2 and FmPA are Acrobat 2.0-specific
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		% FmPD2 is like FmPD but for Acrobat 2.0-specific PDF
		/FmPD2 /pdfmark load def
		
		% x y/name FmPA
		% 	is equivalent to
		% [/Dest/name/View[/FitH x y FmDC exch pop]/DEST FmPD
		% It is a shortcut for pagragraph Uinique ID designators whic occurr commonly.
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		% These are No-Ops for Distiller 1.0
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	% these are the No-Ops for regular PostScript
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse

% This convert a set of X Y coordinates from the current user space to the default
% PostScript coordinates needed by some pdfmark variants. We also convert to 
% integer because the distiller doesn't always like floats!
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD

% This converts four numbers into a bounding box making sure the first two are maller than the last two
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD

% End of PDF/Acrobat support

%
% Color separation code
%

% Constants.

/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def

/fMNegative false def % we are inverting the page

% Variables.

/FrameSepIs FMnone def % separation we are printing
% If FrameSepIs is FMcustom, this is the custom color
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def

/FrameCurColors [ 0 0 0 1 0 0 0 ] def % c m y k r g b

% Utility routines

/FrameColorEpsilon .001 def	% epsilon by which values can differ and sill be equal
/eqepsilon {		% v1 v2 eqeps bool
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def

% are the cmyk and cmykrgb arrays on the stack the same color?
/FrameCmpColorsCMYK { % [ c1 m1 y1 k1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
% are the rgb and cmykrgb arrays on the stack the same color?
/FrameCmpColorsRGB { % [ r1 g1 b1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def

% convert r g b to c m y k
/RGBtoCMYK { % r g b
	1 exch sub % r g y
	3 1 roll % y r g
	1 exch sub % y r m
	3 1 roll % m y r
	1 exch sub % m y c
	3 1 roll % c m y
	3 copy % c m y c m y
	2 copy % c m y c m y m y
	le { pop } { exch pop } ifelse % c m y c min(m,y)
	2 copy % c m y c min(m,y) c min(m,y)
	le { pop } { exch pop } ifelse % c m y min(c, min(m,y))
	dup dup dup % c m y k k k k
	6 1 roll % c k m y k k k
	4 1 roll % c k m k y k k
	7 1 roll % k c k m k y k
	sub % k c k m k y
	6 1 roll % y k c k m k
	sub % y k c k m
	5 1 roll % m y k c k
	sub % m y k c
	4 1 roll % c m y k 
} bind def
/CMYKtoRGB { % c m y k CMYKtoRGB r g b
	dup dup 4 -1 roll add 						  % c m k k y+k
	5 1 roll 3 -1 roll add 						  % y+k c k m+k
	4 1 roll add 								  % m+k y+k c+k
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  % r m+k y+k
	1 exch sub dup 0 lt {pop 0} if exch 	      % r b m+k
	1 exch sub dup 0 lt {pop 0} if exch	  		  % r g b
} bind def

% Public routines


% Happens at the top of each page that is a separation
/FrameSepInit {
	1.0 RealSetgray
} bind def
% Tell the separation code that this separation is for a custom color
/FrameSetSepColor { % c m y k r g b
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
% Tell the separation code that this separation is Cyan
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
% Tell the separation code that this separation is Magenta
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Yellow
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Black
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
% Tell the separation code we are not doing a separation
/FrameNoSep { %
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def

% Initialize the separation code with all the custom colors we are
% separating (not process colors)
/FrameSetSepColors { % list of arrays of [c m y k r g b] count 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  % array of arrays of colors we are separating
	exch def end
	} bind def

% is this color array in the array of custom color separations?
/FrameColorInSepListCMYK { % [ c m y k ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsCMYK % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { % [ r g b ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsRGB % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def

% Level 1 color operators saved and redefined
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 

% Setgray patch
/setgray { % num
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ % go to white unless the current sep color is black
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { % r g b
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] % r g b [ r g b ]
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor % safe since we will overwrite the color state
		currentrgbcolor  % r g b - Let PostsCript to the conversion.
		setrgbcolor % call our version
	} 
	ifelse
	end
} bind def
FrameDict begin

/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { % c m y k
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put

% Set up a prototype pattern for PostScript Level 2
fMLevel1 { 
	% set up screen functions for the patterns in PS level 1
	% each entry contains an angle, spot function, flipped spot function,
	% gray level and frequency multiplier.
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { % prototype level 2 pattern dictionary
	% define some PostScript procedures for known jaggy patterns.
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		% Always 1 for PS Level 2
		/PaintType 2 def		% Uncolored pattern
		/TilingType 3 def		% constant spacing and faster tiling
		/BBox [ 0 0 8 8 ] def 	% bounding box
		/XStep 8 def			% X offset
		/YStep 8 def			% Y offset
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse

%combineColor puts together the current gray value (which could also be
%a fraction of on bits for a fill pattern and the current color and calls
%the appropriate function
%
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { % separation case
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				% Level 1 patterns are either all there or not there at all
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def

/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
% freq and sangle are used for ps Level 1 pattern building.
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def

%
% screen index depending on dpi
%	- screenIndex smallint
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def

%
% These routines get the standard Adobe frequencies, angles, and spot functions
% depending on the DPI
%
% - getCyanScreen freq angle spotfunction
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getMagentaScreen freq angle spotFunction
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getYellowScreen freq angle spotFunction
% note that some of these use a "tripple dot" function at 1/3 the frequency
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def

%
% - getBlackScreen freq angle spotFunction
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def

%
% - getSpotScreen freq angle spotFunction
/getSpotScreen {
	getBlackScreen
} bind def

%
% - getCompositeScreen freq angle spotFunction
/getCompositeScreen {
	getBlackScreen
} bind def

% FmSetScreen sets the screen for either PostScript Level 1 or Level 2 and optionally
% sets the accuratescreens flag in the latter case
% freq angle spotfunction FMSetScreen -
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def

% This sets the default screen as was set at the beginning of the job
% - setDefaultScreen -
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def

% This sets the current screen depending on FrameSepIs
% - setCurrentScreen -
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def


end

% End of Color separation code
%
	
/FMDOCUMENT { % xscale yscale edown negative paperwidth paperheight manfeed numcopies numfonts
	array /FMfonts exch def % Why isn't this in FrameDict???
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def % invert page
	0 ne /edown exch def % flip page along y axis
	/yscale exch def
	/xscale exch def

	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def % some PS's leave junk on dict ...
		/FMoptop count def % ...or on operand stack...
		setpapername % This stuff may alter the transfer/screen/angle
		manualfeed {true} {papersize} ifelse % true->more work to do
		{manualpapersize} {false} ifelse % true->more work to do
		{desperatepapersize} {false} ifelse % true->failed completely
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for %...if tray not installed
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse % fMLevel1
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def

			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse

	end % FrameDict
} def % only used at startup, so no bind

/FMBEGINPAGE { % pagewidth pageheight landscape color-arrays count
	FrameDict begin % for the whole page...
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { % check for landscape
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
% paint the whole page in "white".  If the page is inverted, then
% this will actually paint our black background
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave % for CLIP
} def % only used infrequently, so no bind

/FMENDPAGE {
	grestore % for CLIP
	pagesave restore
	end % FrameDict
	showpage
	} def % only used infrequently, so no bind

/FMFONTDEFINE { % fontindex nonstd_encoding fontname -- 
	FrameDict begin
	findfont % fontindex nonstd_encoding font
	ReEncode % fontindex font'
	1 index exch % fontindex fontindex font'
	definefont % fontindex font"
	FMfonts 3 1 roll %  FMfonts fontindex font"
	put
	end % FrameDict
	} def % only used infrequently, so no bind

/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end % framedict
	} def % Only called once, so no bind

/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end % FrameDict
	} def % only used infrequently, so no bind

% Set things to a known, quiescent state, for when we switch to another writer
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray % Not FMsetgray; only called outside of our environment!
	} bind def

/FMBEGINEPSF { % <theta> llx lly urx ury fw fh fx fy
	end % FrameDict
	/FMEPSF save def % in userdict
	/showpage {} def % this def is in userdict
%- See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
%- "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def % FMBADEPSF knows this is the longest!
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
%	/initmatrix {(initmatrix) FMBADEPSF} def	% Aldus Freehand 4.0 epsf uses this harmlessly <Gus 4/26/95>
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall % neat trick
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale % then scale
	llx neg lly neg translate % then compensate for LL offset 
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count def % tricky! "/FMoptop" on stack
	} bind def

/FMENDEPSF {
	count -1 FMoptop {pop pop} for % clear EPS junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMEPSF restore
	FrameDict begin % for the whole page...
	} bind def

FrameDict begin % put most defs here

/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def

/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def

/pagedimen { % name width height
	paperheight sub abs 16 lt exch % 16pt is an arbitrary slop amount
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def

/setpapername { % Already set up: paperwidth paperheight and manualfeed
	/papersizedict 14 dict def % one for /papername, one for /unknown
	papersizedict begin
	/papername /unknown def % in case no match
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def

/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end % return true if more work to do
	} bind def

/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped % return true if more work to do
	} bind def

/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped % return true iff failed
		end
		} {true} ifelse % return true iff failed
	} bind def

/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def

%
% Font re-encoding to include diacritics
% 
/DiacriticEncoding [

/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron

] def

/ReEncode { % nonstd_encoding font -- reencodedfont
	dup % nonstd_encoding font font
	length % nonstd_encoding font dictlength
	dict begin % nonstd_encoding font % currentdict = newdict
	{% forall % forall is over font to be copied
	1 index /FID ne % skip FID
		{def} % defs go into newfontdict which is currentdict
		{pop pop} ifelse % copy all keys including /Encoding
	} forall % nonstd_encoding
	0 eq {/Encoding DiacriticEncoding def} if % --
	currentdict % push a copy of the copied font dict onto operand stack
	end % font' % before popping it off dictionary stack
	} bind def

FMPColor 
	% setup procs for color printing
	{

	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	% setup procs for B&W printing
	{
	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse

/K { % c m y k r g b SEPARATION
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
%
% graymode is true if we are just doing gray fills, this way do not keep calling
% setscreen. I don't know what the cost is on calling setscreen with defaults, but
% this is easy to keep track of, and we know for sure we aren't wasting cycles.
% if graymode is false and fMLevel1 is false, then we are using Level 2 patterns.
%
/graymode true def

% used by level 1 patterns
% defaultflip matrixentry fmGetFlit -> eith -1 or 1
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if

/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop % angle spot fspot gray mult
			freq 								% freq
			mul									% times multiplier
			5 2 roll							% angle spot fspot gray mult freq -> gray freq angle spot fspot
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		% landscape
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								% portrait     
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		% take regular or flipped spot function
			fMNegative { 
				{neg} fmConcatProcs 			% invert spot function
			} if
			bind
			% we need to bypass any screen filter and go directly to systemdict
			% to avoid problems with Kodak Precision calibration software
			% <Gus 9/13/93>
			systemdict /setscreen get exec		% leave graylevel on stack
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { % Level 2 version
		pop pop
		dup patCache exch known {
			patCache exch get
		} { % not in cache
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
%			9 orgfreq 
%				organgle sin abs organgle cos abs add div
%				dup 16 div round dup 0 le {pop 1} if  % Unix pattern size
%			    dup  9 div round dup 0 le {pop 1} if  % Mac larger (WYSIWYG) size
%					div div dup matrix scale % This gives Unix pattern size.
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def

/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def

/normalize {
	transform round exch round exch itransform
	} bind def

/dnormalize {
	dtransform round exch round exch idtransform
	} bind def

/lnormalize { % line widths are always odd so that arrow heads work
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def

/H { % THICK
	lnormalize setlinewidth
	} bind def

/Z {
	setlinecap
	} bind def
	
% This is used to fill or stroke white behind a Level 2 pattern
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def

/X { % TEXTURE
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} % Silly to pass parameters here
	{setGrayScaleMode}
	ifelse
	} bind def

/V { % FILL
	PFill gsave eofill grestore
	} bind def

/Vclip {
	clip
	} bind def

/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/N { % PEN
	PStroke
	} bind def

/Nclip {
	strokepath clip newpath
	} bind def

/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def

/L { % POLYLINE
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def

/Y { % POLYGON !!!
	L % POLYLINE
	closepath
	} bind def

/R { % RECT x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y % POLYGON
	} bind def

/rarc % Leaves all sorts of junk on the operand stack for caller to clear off
	{rad % arcto might fail if we're scaled way down
	 arcto
	} bind def

/RR { % ROUNDRECT x1 y1 x2 y2 r
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if % in case rarc failed for degenerate arcs
	cleartomark
	} bind def

/RRR { % ROUNDRECT ROTATED xs ys x1 y1 x2 y2 x3 y3 x4 y4 r
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto % eats xs ys
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def

/C { % CLIP
	grestore
	gsave
	R % RECT
	clip
	setCurrentScreen
} bind def

/CP { % CLIPPOLY p1x p1y p2x p2y ... n 
	grestore
	gsave
	Y % POLYGON
	clip
	setCurrentScreen
} bind def

/F { % FONT
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def

/Q { % POINTSIZE (& font)
	/FMpointsize exch def
	F % could be slightly optimized here
	} bind def

/T { % TEXT <string> <x> <y>
	moveto show
	} bind def

% Callers of RF (rotate/flip) must gsave (or save) first; (g)restore when done
/RF { % <flip> <theta>
	rotate
	0 ne {-1 1 scale} if
	} bind def

/TF { % TEXTFLIPROTATE <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	show
	grestore
	} bind def

/P { % PADTEXT <pad> <string> <x> <y>
	moveto
	0 32 3 2 roll widthshow
	} bind def

/PF { % PADTEXTFLIPROTATE <pad> <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def

/S { % SPREADTEXT <spread> <string> <x> <y>
	moveto
	0 exch ashow
	} bind def

/SF { % SPREADTEXTFLIPROTATE <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def

/B { % PADSPREADTEXT <pad> <spread> <string> <x> <y>
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def

/BF { % PADSPREADTEXTFLIPROTATE <pad> <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def

/G { % ARCFILL theta1 theta2 width height x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	PFill fill
	grestore
	} bind def

/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
    normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
    translate
    scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def

/Gclip { % ARCFILL theta1 theta2 width height x y swid
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	clip newpath
	restorematrix
	} bind def

/GG { % ARCFILL ROTATED theta1 theta2 width height angle x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	rotate % eats angle
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath
	PFill
	fill
	grestore
	} bind def

/GGclip { % ARCFILL ROTATED theta1 theta2 width height angle x y
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	clip newpath
	restorematrix
	} bind def

/GGstrk { % ARCFILL ROTATED swid theta1 theta2 width height angle x y
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/A { % ARCPEN theta1 theta2 width height x y
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
	normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
	translate 
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	strokepath clip newpath
	restorematrix
} bind def

/Astrk {
	Gstrk
} bind def

/AA { % ARCPEN ROTATED theta1 theta2 width height angle x y
	gsave
	savematrix
	newpath
	% theta1 theta2 width height angle x y
	3 index 2 div add exch 4 index 2 div sub exch 
	% theta1 theta2 width height angle x y
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate % eats x y
	rotate % eats angle
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	strokepath clip newpath
	restorematrix
} bind def

/AAstrk {
	GGstrk
} bind def

/BEGINPRINTCODE { % -x -y width height
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count 7 sub def % tricky! 7 params on stack, plus "/FMoptop"
	/FMsaveobject save def
	userdict begin % insulate user from FrameDict; not in /FMdicttop count
	/showpage {} def % this def is in userdict
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	3 index neg 3 index neg translate
	} bind def

/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for % clear user junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMsaveobject restore % this is now safe, unless user very malicious
	} bind def

/gn { % get a number in a funny encoding scheme
	0 % result on stack
	{	46 mul % shift old digits
		cf read pop % get next character
		32 sub % zero is the space character
		dup 46 lt {exit} if % quit if we're the last digit
		46 sub add % add in this digit and loop around for next
		} loop
	add % result on stack
	} bind def

/cfs { % create a string of length "sl" filled with "val"s
	/str sl string def % create string as "str"
	0 1 sl 1 sub {str exch val put} for % fill array
	str def % define real array name, too; name is on stack from caller
	} bind def

/ic [ % "case" stmt list of procedures that the image commands should call
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def

/ms { % make all the strings
	/sl exch def % remember length of currently existing strings
	/val 255 def % that's white
	/ws cfs % make "ws" a string filled with white
	/im cfs % and "im" is a complete image scanline
	/val 0 def % that's black
	/bs cfs % make "bs" a string filled with black
	/cs cfs % here's where we'll put complete command lines
	} bind def

400 ms % make strings that will be plenty long for most applications

/ip { % image procedure; reads and executes commands to make scanlines
	is % leave image string and...
	0 % ...image position on stack all through this procedure
	cf cs readline pop % get a string of commands
	{	ic exch get exec % execute next command
		add % all commands leave a length on the stack; update pos
		} forall % step through all commands
	pop % get rid of image position pointer
	% image string left on stack, so it's returned to image primitive
	} bind def
/rip { % this is similar to ip above, except for 24 bit images
	   % this takes an extra argument, the width of the image
	  % do red
	  bis ris copy pop % copy blue to red
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  ris gis copy pop % copy red to green
	  dup is exch % position of green is width bytes into is
	  % do green
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop % copy green to blue
	  dup add is exch % position of blue is 2*width bytes into is
	  % do blue
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def

/rip4 { % this is similar to ip above, except for 32 bit images
	   % this takes an extra argument, the width of the image
	  % do cyan
	  kis cis copy pop % copy black to cyan
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  cis mis copy pop % copy cyan to magenta
	  dup is exch % position of magenta is width bytes into is
	  % do magenta
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop % copy magenta to yellow
	  dup dup add is exch % position of yellow is 2*width bytes into is
	  % do yellow
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop % copy yellow to black
	  3 mul is exch % position of black is 3*width bytes into is
	  % do black
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def


/wh { % fill a number of bytes with "white"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	ws 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/bl { % fill a number of bytes with "black"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	bs 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/s1 1 string def

/fl { % fill a number of bytes with a specific hex value
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len % remember where we got to
	} bind def

/hx { % read hex bytes directly; on entry, stack has <str> <pos> <len>
	3 copy getinterval % stack has <str> <pos> <len> <substr>
	cf exch readhexstring pop pop % stack back to <str> <pos> <len>
	} bind def

/wbytes { % width depth -> wb      find width in bytes  given 1, 2, 8 or 24 or 32
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAPc
	} bind def
%
% Common routine for imaging compressed images
%
/COMMONBITMAPc { % iw, ih, width, height, theta, x y depth proc
		 % (x,y) is the lower left corner of the image
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc                % run the desired proc after save has occurred
	/is im 0 lb getinterval def % image substring
	ws 0 lb getinterval is copy pop % whiten it
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{ip} image % zap!
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def
/BEGINBITMAPBW { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAP
	} bind def
%
% Common routine for uncompressed images
%
/COMMONBITMAP { % iw, ih, width, height, theta, x y depth proc
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc              % run the desired proc after save has occurred
	/is width depth wbytes string def
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{cf is readhexstring pop} image
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def

%
% All this hairy color setup stuff gus wrote on the mac, I just copied and
% changed the variable names to be humanly readable.

/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def

fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
% The HP PaintJet XL300 ignores the gray transfer curve but still sets its
% default black generation and undercolor removal functions as if it is
% used. This causes black colors not to work. Bug#56844 <Gus 2/22/93>
% - We go back to the old (correct?) way of doing this since this code
% is now bypassed for PS Level 2 printers in favor of colorSetup2 which
% uses PS Level 2 indexed color, which is much cleaner. <Gus 3/3/93>
		/u kk currentundercolorremoval exec def
%-		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
% Here, we set up indexed color for imaging on PS Level 2 without mucking around
% with the transfer functions.

/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse

%
% Setup a transfer function to convert psuedo color values into grayscale
% values based on the color lookup tables.
%
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
%
% image a color image
%
/BITMAPCOLOR { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
%
% Compressed color image rendering
%
/BITMAPCOLORc { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
%
% image a color image to a b&width device
%
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { % c m y k width
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { % r g b width
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end % of FrameDict definitions

% OPI stuff
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def

% Dashed lines stuff
/I { setdash } bind def
/J { [] 0 setdash } bind def

%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 22 FMDOCUMENT
0 0 /Palatino-Roman FMFONTDEFINE
1 0 /Palatino-Bold FMFONTDEFINE
2 0 /Helvetica-Narrow-Bold FMFONTDEFINE
3 0 /Palatino-Italic FMFONTDEFINE
4 0 /Courier-Bold FMFONTDEFINE
5 0 /Helvetica FMFONTDEFINE
6 0 /Helvetica-Narrow FMFONTDEFINE
7 0 /Palatino-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
99.65 105.95 531.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(1) 527.15 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 537.95 495.65 672.95 R
7 X
V
0 30 Q
0 X
(1) 171.65 652.95 T
99.65 611.4 495.65 638.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 611.4 495.65 638.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 632.1 261.65 632.1 2 L
V
3 H
2 Z
0 X
N
99.65 623.1 261.65 623.1 2 L
7 X
V
1 H
0 X
N
27.65 96.95 567.65 744.95 C
0 0 0 0 1 1 1 K
0 2 Q
7 X
(1) 99.65 591.4 T
0 0 0 1 0 0 0 K
0 30 Q
0 X
0 0 0 1 0 0 0 K
(Pr) 100.65 591.4 T
(oposal for a Dylan) 130.08 591.4 T
0 20 Q
(\252) 374.13 601.4 T
0 30 Q
(Thr) 99.65 553.4 T
(eads Library) 146.81 553.4 T
99.65 150.95 477.65 456.95 R
7 X
V
0 11 Q
0 X
(Date: 1) 99.65 449.62 T
(1 June 1997.) 132.91 449.62 T
(Author: T) 99.65 429.62 T
(ony Mann) 146.41 429.62 T
(Copyright \050C\051 1997 The Harlequin Gr) 99.65 409.62 T
(oup Limited. All Rights Reserved.) 281.52 409.62 T
(Dylan is a trademark of Apple Computer) 99.65 389.62 T
(, Inc.) 299.41 389.62 T
2 16 Q
(1.1  About this document) 99.65 354.29 T
2 13 Q
(1.1.1  Ac) 99.65 320.29 T
(kno) 142.72 320.29 T
(wledg) 161.53 320.29 T
(ements) 191.84 320.29 T
0 11 Q
(The following people have been instr) 99.65 300.62 T
(umental in the pr) 280.27 300.62 T
(oduction of this docu-) 364.44 300.62 T
(ment: Kim Barr) 99.65 286.62 T
(ett, Bill Chiles, Simon Gr) 174.48 286.62 T
(een, Paul Haahr) 293.92 286.62 T
(, Rob Maclachlan,) 371.17 286.62 T
(Scott McKay) 99.65 272.62 T
(, Rod Moyse, Keith Playfor) 159.91 272.62 T
(d, Andr) 290.66 272.62 T
(ew Shir) 328.71 272.62 T
(es, and T) 365.43 272.62 T
(ucker W) 407.99 272.62 T
(ith-) 448.38 272.62 T
(ington.) 99.65 258.62 T
2 13 Q
(1.1.2  Goals) 99.65 225.29 T
0 11 Q
(This is a design for a Thr) 99.65 205.62 T
(eads library for Dylan. The goals of this library) 219.7 205.62 T
(, in) 446.14 205.62 T
(decr) 99.65 191.62 T
(easing or) 120.67 191.62 T
(der of importance, ar) 164.72 191.62 T
(e:) 266.89 191.62 T
(\245) 108.65 171.62 T
(T) 126.65 171.62 T
(o map easily and ef) 132.38 171.62 T
(\336ciently onto the thr) 226.52 171.62 T
(eads facilities pr) 325.47 171.62 T
(ovided by all) 404.26 171.62 T
(common operating systems) 126.65 157.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(2) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
0 11 Q
0 X
(\245) 126.65 665.62 T
(T) 144.65 665.62 T
(o permit all common thr) 150.38 665.62 T
(ead models, including co-operative, pr) 268.87 665.62 T
(e-emp-) 456.51 665.62 T
(tive and concurr) 144.65 651.62 T
(ent) 224.34 651.62 T
(\245) 126.65 631.62 T
(T) 144.65 631.62 T
(o make use of the language featur) 150.38 631.62 T
(es of Dylan) 314.51 631.62 T
(\245) 126.65 611.62 T
(T) 144.65 611.62 T
(o pr) 150.38 611.62 T
(ovide a basis upon which mor) 169.89 611.62 T
(e advanced thr) 316.25 611.62 T
(eads featur) 388.36 611.62 T
(es can be) 442.07 611.62 T
(built portably) 144.65 597.62 T
(The Dylan Thr) 117.65 577.62 T
(eads library is called) 188.59 577.62 T
4 9.5 Q
(threads) 291.17 577.62 T
0 11 Q
(. All documented bindings ar) 331.07 577.62 T
(e) 473.42 577.62 T
(exported fr) 117.65 563.62 T
(om the module) 171.69 563.62 T
4 9.5 Q
(threads) 248.46 563.62 T
0 11 Q
(.) 288.36 563.62 T
2 16 Q
(1.2  Multi-thread semantics) 117.65 528.29 T
0 11 Q
-0.28 (The Thr) 117.65 507.62 P
-0.28 (eads library pr) 155.83 507.62 P
-0.28 (ovides multiple thr) 226.47 507.62 P
-0.28 (eads of contr) 319.04 507.62 P
-0.28 (ol within a single space) 380.83 507.62 P
(of objects and module variables. Each thr) 117.65 493.62 T
(ead r) 317.42 493.62 T
(uns in its own independent) 341.92 493.62 T
(stack. The mechanism by which the thr) 117.65 479.62 T
(eads ar) 307.46 479.62 T
(e scheduled is not speci\336ed,) 342.02 479.62 T
(and it is not possible to determine how the execution of instr) 117.65 465.62 T
(uctions by dif) 411.78 465.62 T
(fer-) 478.24 465.62 T
(ent thr) 117.65 451.62 T
(eads will be interleaved. No mechanism is pr) 149.79 451.62 T
(ovided to call a function) 368.57 451.62 T
(on an existing thr) 117.65 437.62 T
(ead other than the curr) 202.46 437.62 T
(ent thr) 313.71 437.62 T
(ead. Neither is ther) 345.85 437.62 T
(e a mecha-) 438.83 437.62 T
(nism to signal an exception on a thr) 117.65 423.62 T
(ead other than the curr) 290.4 423.62 T
(ent thr) 401.66 423.62 T
(ead.) 433.8 423.62 T
2 13 Q
(1.2.1  Atomicity) 117.65 390.29 T
0 11 Q
(In general, the Thr) 117.65 370.62 T
(eads library guarantees that assignments to slots and vari-) 207.41 370.62 T
(ables ar) 117.65 356.62 T
(e atomic. That is, after an assignment, but befor) 154.76 356.62 T
(e synchr) 384.52 356.62 T
(onization,) 425.15 356.62 T
(another thr) 117.65 342.62 T
(ead will see either the old value or the new value of the location.) 172.04 342.62 T
(Ther) 117.65 328.62 T
(e is no possibility of seeing a half-way state.) 140.21 328.62 T
(In some cir) 117.65 308.62 T
(cumstances, when a slot or a variable is specialized to be of a par-) 171.14 308.62 T
-0.41 (ticularly constrained type, the Thr) 117.65 294.62 P
-0.41 (eads library does not guarantee atomicity of) 281.55 294.62 P
(assignments. Such a type may include a subtype of) 117.65 280.62 T
4 9.5 Q
(<double-float>) 367.88 280.62 T
0 11 Q
( or a sub-) 447.68 280.62 T
(type of) 117.65 266.62 T
4 9.5 Q
(<extended-float>) 154.4 266.62 T
0 11 Q
(. It may not include any other type that is either) 245.6 266.62 T
-0.09 (de\336ned in the curr) 117.65 252.62 P
-0.09 (ent specifcation of the Dylan language, or that could be cr) 207.55 252.62 P
-0.09 (e-) 486.72 252.62 P
(ated fr) 117.65 238.62 T
(om standar) 149.28 238.62 T
(d facilities pr) 204.27 238.62 T
(ovided by the curr) 267.62 238.62 T
(ent speci\336cation of the lan-) 357.47 238.62 T
(guage. This r) 117.65 224.62 T
(estriction of the atomicity guarantee is intended to permit) 180.69 224.62 T
(implementations to r) 117.65 210.62 T
(epr) 219.21 210.62 T
(esent the values of such slots or variables in a form) 235.24 210.62 T
(which uses mor) 117.65 196.62 T
(e space than a normal Dylan value, for optimal ef) 194.31 196.62 T
(\336ciency) 433.68 196.62 T
(.) 469.87 196.62 T
(For those cases wher) 117.65 176.62 T
(e the implementation does not pr) 218.26 176.62 T
(ovide the atomicity) 379.61 176.62 T
(guarantee, the r) 117.65 162.62 T
(esults of accessing a normal variable ar) 193.92 162.62 T
(e unde\336ned if:) 383.32 162.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.2) 420.12 702.62 T
(Multi-thread semantics) 441.49 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(3) 527.15 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
0 11 Q
0 X
(\245) 108.65 665.62 T
(The r) 126.65 665.62 T
(ead could pr) 151.96 665.62 T
(oceed in parallel with some write of the same location) 213.15 665.62 T
(\245) 108.65 645.62 T
(T) 126.65 645.62 T
(wo writes of the same location could have pr) 132.4 645.62 T
(oceeded in parallel since) 350.27 645.62 T
(the last non-parallel write) 126.65 631.62 T
(T) 99.65 611.62 T
(wo memory r) 105.4 611.62 T
(efer) 171.39 611.62 T
(ences) 189.74 611.62 T
3 F
(pr) 218.98 611.62 T
(oceed in parallel) 228.56 611.62 T
0 F
( if they ar) 299.65 611.62 T
(e not explicitly sequential-) 345.78 611.62 T
-0.26 (ized, either by being in a single thr) 99.65 597.62 P
-0.26 (ead, or by explicit inter) 265.98 597.62 P
-0.26 (-thr) 376.98 597.62 P
-0.26 (ead synchr) 394.78 597.62 P
-0.26 (oniza-) 447.38 597.62 P
(tion.) 99.65 583.62 T
(Pr) 99.65 563.62 T
(ogrammers should guar) 110.44 563.62 T
(d against the possibility of unde\336ned values by) 227.63 563.62 T
(using explicit inter) 99.65 549.62 T
(-thr) 190.4 549.62 T
(ead synchr) 208.2 549.62 T
(onization.) 261.05 549.62 T
2 13 Q
(1.2.2  Or) 99.65 516.29 T
(dering) 141.53 516.29 T
0 11 Q
(The or) 99.65 496.62 T
(dering of visibility of side ef) 130.96 496.62 T
(fects performed in other thr) 267.36 496.62 T
(eads is unde-) 401.72 496.62 T
(\336ned, unless explicit synchr) 99.65 482.62 T
(onization is used. Implementations of the library) 234.77 482.62 T
(may guarantee that the visibility of side-ef) 99.65 468.62 T
(fects performed by another thr) 305.02 468.62 T
(ead) 453.87 468.62 T
(is or) 99.65 454.62 T
(der) 120.42 454.62 T
(ed accor) 136.55 454.62 T
(ding to the contr) 176.71 454.62 T
(ol \337ow of the other thr) 257.28 454.62 T
(ead \050) 366.77 454.62 T
3 F
(str) 390.67 454.62 T
(ong ordering) 402.7 454.62 T
0 F
(\051,) 459.84 454.62 T
-0.03 (but multi-pr) 99.65 440.62 P
-0.03 (ocessor implementations might not be str) 159.43 440.62 P
-0.03 (ongly or) 359.97 440.62 P
-0.03 (der) 400.69 440.62 P
-0.03 (ed. Portable) 416.83 440.62 P
-0.17 (code should not assume str) 99.65 426.62 P
-0.17 (ong or) 231.33 426.62 P
-0.17 (dering, and should use explicit synchr) 262.59 426.62 P
-0.17 (oniza-) 447.38 426.62 P
(tion wher) 99.65 412.62 T
(e the or) 146.59 412.62 T
(der of side ef) 182.76 412.62 T
(fects is important. Ther) 245.61 412.62 T
(e is curr) 358.05 412.62 T
(ently no library) 396.69 412.62 T
-0.23 (intr) 99.65 398.62 P
-0.23 (ospection facility to determine if the implementation is str) 116.98 398.62 P
-0.23 (ongly or weakly) 396.52 398.62 P
(or) 99.65 384.62 T
(der) 109.8 384.62 T
(ed.) 125.94 384.62 T
-0.38 (Because of the possibility of weak or) 99.65 364.62 P
-0.38 (dering, the compiler is fr) 274.12 364.62 P
-0.38 (ee to assume that) 392.54 364.62 P
(the ef) 99.65 350.62 T
(fects of other thr) 126.39 350.62 T
(eads may be ignor) 206.12 350.62 T
(ed between explicit synchr) 295.07 350.62 T
(onization) 424.61 350.62 T
-0.4 (points, and it may perform any optimizations which pr) 99.65 336.62 P
-0.4 (eserve the semantics of) 364.4 336.62 P
(a single-thr) 99.65 322.62 T
(ead model r) 154.55 322.62 T
(egar) 212.6 322.62 T
(dless of their ef) 233.63 322.62 T
(fects on other thr) 307.6 322.62 T
(eads \321 for exam-) 390.07 322.62 T
(ple, common sub-expr) 99.65 308.62 T
(ession elimination, or changing the or) 208.45 308.62 T
(der of evaluation.) 391.62 308.62 T
2 13 Q
(1.2.3  Explicit sync) 99.65 275.29 T
(hr) 194.38 275.29 T
(onization) 204.84 275.29 T
0 11 Q
(The Thr) 99.65 255.62 T
(eads library pr) 138.1 255.62 T
(ovides low-level synchr) 209.31 255.62 T
(onization functions which con-) 324.7 255.62 T
-0.35 (tr) 99.65 241.62 P
-0.35 (ol the or) 107.38 241.62 P
-0.35 (dering of operations with r) 146.8 241.62 P
-0.35 (espect to other thr) 276.22 241.62 P
-0.35 (eads, and contr) 363.04 241.62 P
-0.35 (ol when) 436.39 241.62 P
(the side ef) 99.65 227.62 T
(fects that have been performed within one thr) 148.99 227.62 T
(ead become visible) 371.51 227.62 T
(within other thr) 99.65 213.62 T
(eads.) 176.86 213.62 T
(At a higher level, the Thr) 99.65 193.62 T
(eads library pr) 221.23 193.62 T
(ovides a variety of synchr) 292.43 193.62 T
(onization) 417.53 193.62 T
(facilities, described below) 99.65 179.62 T
(. These facilities include mutual-exclusion locks,) 224.15 179.62 T
(semaphor) 99.65 165.62 T
(es and noti\336cations. Each facility guarantees that when synchr) 147.96 165.62 T
(oni-) 450.44 165.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(4) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
0 11 Q
0 X
(zation has been achieved, all the side ef) 117.65 665.62 T
(fects of another thr) 308.64 665.62 T
(ead ar) 400.27 665.62 T
(e visible, at) 430.16 665.62 T
-0.09 (least up to the point wher) 117.65 651.62 P
-0.09 (e that other thr) 242.08 651.62 P
-0.09 (ead last r) 314.17 651.62 P
-0.09 (eleased the synchr) 358.08 651.62 P
-0.09 (onization) 447.18 651.62 P
(facility) 117.65 637.62 T
(.) 149.78 637.62 T
(An appr) 117.65 617.62 T
(opriate synchr) 158.23 617.62 T
(onization must be used to guar) 228.11 617.62 T
(d side-ef) 378.89 617.62 T
(fects on state if) 420.61 617.62 T
(ther) 117.65 603.62 T
(e is any possibility of those side-ef) 137.05 603.62 T
(fects either being corr) 303.09 603.62 T
(upted by another) 408.04 603.62 T
-0.21 (thr) 117.65 589.62 P
-0.21 (ead or corr) 131.78 589.62 P
-0.21 (upting another thr) 184.2 589.62 P
-0.21 (ead. For example, a function which assigns to) 273.48 589.62 P
(two slots of an object may r) 117.65 575.62 T
(equir) 250.48 575.62 T
(e the use of a lock to guarantee that other) 275.89 575.62 T
(thr) 117.65 561.62 T
(eads never observe the object in a partly updated state.) 131.78 561.62 T
(It is up to library designers to document when synchr) 117.65 541.62 T
(onization is not per-) 378.5 541.62 T
(formed internally) 117.65 527.62 T
(, and when synchr) 202.12 527.62 T
(onization pr) 291.6 527.62 T
(otocols must be used by cli-) 350.91 527.62 T
(ents. The implications for the Dylan library) 117.65 513.62 T
(, and some other low-level) 325.98 513.62 T
(libraries, ar) 117.65 499.62 T
(e discussed in Section 1.3 on page 6.) 172.6 499.62 T
2 13 Q
(1.2.4  Conditional update) 117.65 466.29 T
0 11 Q
(In addition to the synchr) 117.65 446.62 T
(onization primitives, the library pr) 237.56 446.62 T
(ovides a condi-) 405.92 446.62 T
-0.11 (tional update mechanism which is not synchr) 117.65 432.62 P
-0.11 (onized, but which tests whether) 338.01 432.62 P
(the value in a variable or slot has changed and atomically updates it if not.) 117.65 418.62 T
(By using conditional updates, a thr) 117.65 398.62 T
(ead can con\336rm \050or deny\051 that ther) 287.73 398.62 T
(e has) 457.17 398.62 T
(been no interfer) 117.65 384.62 T
(ence fr) 194.46 384.62 T
(om other thr) 226.85 384.62 T
(eads, without any need for a blocking) 287.81 384.62 T
(operation. This is mor) 117.65 370.62 T
(e ef) 224.32 370.62 T
(\336cient for those cir) 241.07 370.62 T
(cumstances wher) 331.49 370.62 T
(e interfer) 415.43 370.62 T
(ence is) 459.33 370.62 T
(not disastr) 117.65 356.62 T
(ous and it is possible to r) 168.88 356.62 T
(ecompute the update.) 289.39 356.62 T
(For example, a function which incr) 117.65 336.62 T
(ements the value of a variable might use a) 286.83 336.62 T
(conditional update to stor) 117.65 322.62 T
(e the new value into place, in or) 243.32 322.62 T
(der to guarantee a) 397.93 322.62 T
(numeric sequence for the variable. In this example, the function might loop) 117.65 308.62 T
(until the conditional update has succeeded.) 117.65 294.62 T
-0.19 (It is possible to achieve synchr) 117.65 274.62 P
-0.19 (onization by looping until a conditional update) 264.24 274.62 P
(is successful, and then synchr) 117.65 260.62 T
(onizing side ef) 261.32 260.62 T
(fects. This is not r) 332.24 260.62 T
(ecommended,) 417.07 260.62 T
(because the busy-waiting state during the loop may disallow other thr) 117.65 246.62 T
(eads) 458.89 246.62 T
(fr) 117.65 232.62 T
(om r) 125.46 232.62 T
(unning. Normally) 148.18 232.62 T
(, conditional update should be used only when it is) 234.84 232.62 T
(expected to succeed. If it is likely that the conditional update might fail multi-) 117.65 218.62 T
(ple times ar) 117.65 204.62 T
(ound the loop, then either the number of times ar) 174.31 204.62 T
(ound the loop) 413.83 204.62 T
(should be limited, or a blocking function fr) 117.65 190.62 T
(om the Thr) 325.97 190.62 T
(eads library should be) 379.73 190.62 T
(used within the loop.) 117.65 176.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.2) 420.12 702.62 T
(Multi-thread semantics) 441.49 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(5) 527.15 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
2 13 Q
0 X
(1.2.5  The d) 99.65 664.29 T
(ynamic en) 157.58 664.29 T
(vir) 209.3 664.29 T
(onment) 222.15 664.29 T
0 11 Q
(Dylan has an implicit notion of a) 99.65 644.62 T
3 F
(dynamic envir) 261.47 644.62 T
(onment) 325.35 644.62 T
0 F
(, corr) 358.96 644.62 T
(esponding to lan-) 383.84 644.62 T
(guage constr) 99.65 630.62 T
(ucts with) 161.83 630.62 T
3 F
(dynamic extent) 209.46 630.62 T
0 F
(. For example, the) 277.8 630.62 T
4 9.5 Q
(block) 367.27 630.62 T
0 11 Q
( constr) 395.77 630.62 T
(uct can) 428.32 630.62 T
(intr) 99.65 616.62 T
(oduce) 116.98 616.62 T
3 F
(cleanup-clauses) 149.25 616.62 T
0 F
(, and the) 218.71 616.62 T
3 F
(body) 263.59 616.62 T
0 F
( of the block is executed in a dynamic) 284.57 616.62 T
(envir) 99.65 602.62 T
(onment in which those cleanup-clauses ar) 124.88 602.62 T
(e active.) 328.23 602.62 T
3 F
(Handlers) 370.4 602.62 T
0 F
( and) 411.36 602.62 T
3 F
(exit pr) 435.48 602.62 T
(o-) 464.31 602.62 T
(cedur) 99.65 588.62 T
(es) 124.1 588.62 T
0 F
(ar) 135.41 588.62 T
(e other examples of language featur) 145.06 588.62 T
(es r) 318.79 588.62 T
(elated to the dynamic envi-) 335.62 588.62 T
(r) 99.65 574.62 T
(onment.) 103.79 574.62 T
-0.22 (The dynamic envir) 99.65 554.62 P
-0.22 (onment is de\336ned to be thr) 190.89 554.62 P
-0.22 (ead-local. When a new thr) 320.88 554.62 P
-0.22 (ead is) 447.24 554.62 P
-0.17 (cr) 99.65 540.62 P
-0.17 (eated, it starts with a fr) 108.68 540.62 P
-0.17 (esh dynamic envir) 219.46 540.62 P
-0.17 (onment. It is an err) 308.71 540.62 P
-0.17 (or to attempt to) 399.96 540.62 P
(use a handler or a non-local exit function belonging to another thr) 99.65 526.62 T
(ead. It is) 419.46 526.62 T
(impossible to use an unwind-pr) 99.65 512.62 T
(otect cleanup fr) 254.27 512.62 T
(om another thr) 329.42 512.62 T
(ead.) 402.28 512.62 T
-0.02 (Although the binding of condition handlers only af) 99.65 492.62 P
-0.02 (fects the dynamic envir) 348.3 492.62 P
-0.02 (on-) 461.58 492.62 P
(ment of the curr) 99.65 478.62 T
(ent thr) 177.8 478.62 T
(ead, unhandled conditions ar) 209.95 478.62 T
(e passed to the global) 352.41 478.62 T
(generic function) 99.65 464.62 T
4 9.5 Q
(default-handler) 181.41 464.62 T
0 11 Q
(. This function might) 266.1 464.62 T
3 F
(call the debugger) 370.65 464.62 T
0 F
(. The) 444.8 464.62 T
(Thr) 99.65 450.62 T
(eads library does not de\336ne what calling the debugger means.) 116.94 450.62 T
(Note that in Dylan, unlike in C and C++,) 99.65 430.62 T
3 F
(lexical) 300.29 430.62 T
0 F
( variables \050that is local, or) 328.6 430.62 T
4 9.5 Q
(let) 455.58 430.62 T
0 11 Q
(-) 472.67 430.62 T
(bound variables\051 have inde\336nite extent, and ar) 99.65 416.62 T
(e not bound in the dynamic) 326.53 416.62 T
(envir) 99.65 402.62 T
(onment. In general, those variables ar) 124.88 402.62 T
(e potentially global; accor) 307.27 402.62 T
(dingly) 431.75 402.62 T
(,) 462.29 402.62 T
(pr) 99.65 388.62 T
(ogrammers may need to explicitly synchr) 110.41 388.62 T
(onize accesses to them.) 311.97 388.62 T
2 13 Q
(1.2.6  Thread v) 99.65 355.29 T
(ariab) 173.53 355.29 T
(les) 198.92 355.29 T
0 11 Q
(The Thr) 99.65 335.62 T
(eads library pr) 138.1 335.62 T
(ovides a new type of variable: a) 209.31 335.62 T
3 F
(thr) 365.79 335.62 T
(ead) 379.04 335.62 T
0 F
( variable, also) 393.7 335.62 T
-0.18 (known as a) 99.65 321.62 P
3 F
-0.18 (thr) 157.13 321.62 P
-0.18 (ead-local) 170.37 321.62 P
0 F
-0.18 ( variable. These variables ar) 209.06 321.62 P
-0.18 (e similar to normal module) 343.39 321.62 P
-0.18 (variables in the sense that they ar) 99.65 307.62 P
-0.18 (e visible accor) 260.25 307.62 P
-0.18 (ding to the same scoping r) 327.9 307.62 P
-0.18 (ules) 455.31 307.62 P
(and have the same semantics in a single-thr) 99.65 293.62 T
(eaded pr) 310.95 293.62 T
(ogram. However) 353.93 293.62 T
(, in con-) 435.73 293.62 T
(trast to a normal variable, assignments to a thr) 99.65 279.62 T
(ead variable in one thr) 325.06 279.62 T
(ead ar) 434.28 279.62 T
(e) 464.17 279.62 T
(not visible when evaluating the variable in another thr) 99.65 265.62 T
(ead.) 364.17 265.62 T
-0.35 (Whenever a thr) 99.65 245.62 P
-0.35 (ead is cr) 174.24 245.62 P
-0.35 (eated, the value of each thr) 213.42 245.62 P
-0.35 (ead variable is initialized to) 342.43 245.62 P
(a thr) 99.65 231.62 T
(ead-independent value r) 122.03 231.62 T
(esulting fr) 241.5 231.62 T
(om a once-only evaluation of the ini-) 291.14 231.62 T
(tialization expr) 99.65 217.62 T
(ession of the thr) 172.99 217.62 T
(ead variable de\336nition.) 250.5 217.62 T
(See page 41 for details of the) 99.65 197.62 T
4 9.5 Q
(thread) 240.79 197.62 T
0 11 Q
( adjective to) 274.99 197.62 T
4 9.5 Q
(define variable) 336.05 197.62 T
0 11 Q
(.) 421.55 197.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(6) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
2 13 Q
0 X
(1.2.7  Dynamic binding) 117.65 664.29 T
0 11 Q
(The Thr) 117.65 644.62 T
(eads library exports a macr) 156.1 644.62 T
(o for dynamic binding. A) 287.95 644.62 T
3 F
(binding) 413.69 644.62 T
0 F
( is a map-) 448.13 644.62 T
(ping between a variable and a) 117.65 630.62 T
3 F
( value-cell) 263.72 630.62 T
0 F
( which holds the variable\325s value. A) 308.84 630.62 T
3 F
(dynamic) 117.65 616.62 T
0 F
(binding is a binding which has dynamic extent, and shadows any) 158.49 616.62 T
(outermost bindings. Dynamic bindings can be consider) 117.65 602.62 T
(ed to be a pr) 386.05 602.62 T
(operty of) 446.24 602.62 T
(the dynamic envir) 117.65 588.62 T
(onment.) 206.18 588.62 T
(Thr) 117.65 568.62 T
(ead variables can have new dynamic bindings cr) 134.94 568.62 T
(eated for them with the) 371.03 568.62 T
(macr) 117.65 554.62 T
(o) 141.89 554.62 T
4 9.5 Q
(dynamic-bind) 150.65 554.62 T
0 11 Q
(,  page 42. Thr) 219.05 554.62 T
(ead variables inher) 287.34 554.62 T
(ently have thr) 379.73 554.62 T
(ead-local) 447.32 554.62 T
(bindings, so it is possible to r) 117.65 540.62 T
(e-bind a thr) 258.45 540.62 T
(ead variable dynamically using the) 314.92 540.62 T
(Dylan constr) 117.65 526.62 T
(uct) 179.93 526.62 T
4 9.5 Q
(block) 197.78 526.62 T
0 11 Q
( \311) 226.28 526.62 T
4 9.5 Q
(cleanup) 242.78 526.62 T
0 11 Q
(. The) 282.68 526.62 T
4 9.5 Q
(dynamic-bind) 309.35 526.62 T
0 11 Q
( macr) 377.75 526.62 T
(o can be imple-) 404.74 526.62 T
(mented in this way) 117.65 512.62 T
(.) 209.88 512.62 T
-0.31 (The thr) 117.65 492.62 P
-0.31 (ead-local natur) 152.63 492.62 P
-0.31 (e of dynamically bindable variables may not be optimal) 225.29 492.62 P
(for all pr) 117.65 478.62 T
(oblem domains. For instance a shar) 159.82 478.62 T
(ed, global, outermost binding) 331.39 478.62 T
(may be desirable, or alternatively) 117.65 464.62 T
(, a thr) 278.85 464.62 T
(ead may want to inherit curr) 306.74 464.62 T
(ent bind-) 445.98 464.62 T
(ings fr) 117.65 450.62 T
(om the par) 148.59 450.62 T
(ent thr) 201.32 450.62 T
(ead at cr) 233.47 450.62 T
(eation time, giving a \322fork\323-type model of) 274.57 450.62 T
(state inheritance. These alternatives ar) 117.65 436.62 T
(e not pursued in this library) 303.2 436.62 T
(, but they) 438.11 436.62 T
(might be an inter) 117.65 422.62 T
(esting ar) 200.77 422.62 T
(ea for futur) 242.41 422.62 T
(e r) 297.36 422.62 T
(esear) 309.52 422.62 T
(ch.) 334.37 422.62 T
2 16 Q
(1.3  Thread saf) 117.65 387.29 T
(ety in c) 209.42 387.29 T
(lient libraries) 254.4 387.29 T
0 11 Q
(If an application uses multiple thr) 117.65 366.62 T
(eads, then ther) 282.15 366.62 T
(e may be thr) 353.62 366.62 T
(ead safety) 413.95 366.62 T
(r) 117.65 352.62 T
(equir) 121.79 352.62 T
(ements for any library that can be called simultaneously by multiple) 147.21 352.62 T
(thr) 117.65 338.62 T
(eads, even if the called library does not use the Thr) 131.78 338.62 T
(eads library dir) 378.8 338.62 T
(ectly) 453.31 338.62 T
(.) 475.15 338.62 T
-0.17 (This section is about thr) 117.65 318.62 P
-0.17 (ead safety in any library that is designed to be used in) 232.81 318.62 P
(a multi-thr) 117.65 304.62 T
(eaded application.) 170.03 304.62 T
2 13 Q
(1.3.1  General requirements) 117.65 271.29 T
0 11 Q
(A library\325s designer is r) 117.65 251.62 T
(esponsible for documenting which featur) 231.72 251.62 T
(es of the) 431.9 251.62 T
(library of) 117.65 237.62 T
(fer built-in synchr) 162.66 237.62 T
(onization and which do not. While ther) 250.02 237.62 T
(e is no) 440.96 237.62 T
(de\336nitive r) 117.65 223.62 T
(ule that can assist designers in this documentation, the following) 171.17 223.62 T
(guidelines may be useful.) 117.65 209.62 T
(If a client of the library for) 117.65 189.62 T
(gets to use a synchr) 245.09 189.62 T
(onization featur) 340 189.62 T
(e when one is) 417.35 189.62 T
(necessary) 117.65 175.62 T
(, the library designer should ensur) 163.54 175.62 T
(e that the ef) 330.82 175.62 T
(fect of the lack of syn-) 387.4 175.62 T
(chr) 117.65 161.62 T
(onization is limited to a small unit \321 pr) 133.08 161.62 T
(obably a single object. In cases) 326.59 161.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.3) 391.16 702.62 T
(Thread safety in client libraries) 412.54 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(7) 527.15 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
0 11 Q
0 X
-0.23 (wher) 99.65 665.62 P
-0.23 (e the designer cannot guarantee that the ef) 124.64 665.62 P
-0.23 (fect will be limited, the library) 329.28 665.62 P
(should either implement the synchr) 99.65 651.62 T
(onization internally) 273.18 651.62 T
(, or pr) 367.74 651.62 T
(ovide a macr) 397.1 651.62 T
(o) 459.76 651.62 T
(for clients to use instead.) 99.65 637.62 T
(Library implementors must ensur) 99.65 617.62 T
(e that the library pr) 263.9 617.62 T
(ovides implicit synchr) 358.05 617.62 T
(o-) 465.84 617.62 T
(nization for any hidden global state which is maintained by the library) 99.65 603.62 T
(.) 441.61 603.62 T
(Library designers may choose whether the library should of) 99.65 589.62 T
(fer implicit syn-) 390.76 589.62 T
(chr) 99.65 575.62 T
(onization of the state of objects managed by the library) 115.08 575.62 T
(. The interface is) 380.15 575.62 T
-0.38 (mor) 99.65 561.62 P
-0.38 (e convenient if the synchr) 119.51 561.62 P
-0.38 (onization is implicit, but it may be mor) 242.64 561.62 P
-0.38 (e ef) 428.9 561.62 P
-0.38 (\336cient) 445.28 561.62 P
(to r) 99.65 547.62 T
(ely on explicit synchr) 116.14 547.62 T
(onization by the client. Library designers should) 219.62 547.62 T
(always document the choice they make.) 99.65 533.62 T
2 13 Q
(1.3.2  Dylan librar) 99.65 500.29 T
(y) 188.05 500.29 T
0 11 Q
(The de\336nition of the Dylan library is not changed with the addition of the) 99.65 480.62 T
-0.34 (Thr) 99.65 466.62 P
-0.34 (eads library) 116.94 466.62 P
-0.34 (. The implementation ensur) 173.07 466.62 P
-0.34 (es that all hidden global state \050such) 306.23 466.62 P
(as the symbol table and any generic function caches\051 is implicitly synchr) 99.65 452.62 T
(o-) 450.31 452.62 T
(nized. Those functions in the Dylan library which ar) 99.65 438.62 T
(e de\336ned to modify the) 353.11 438.62 T
(state of objects ar) 99.65 424.62 T
(e not de\336ned to pr) 182.88 424.62 T
(ovide implicit synchr) 272.54 424.62 T
(onization. However) 375.66 424.62 T
(,) 471.58 424.62 T
(implementations ar) 99.65 410.62 T
(e expected to ensur) 194.37 410.62 T
(e that synchr) 287.88 410.62 T
(onization bugs in Dylan) 350.34 410.62 T
(pr) 99.65 396.62 T
(ograms will not cause obscur) 110.41 396.62 T
(e err) 251.89 396.62 T
(ors that cannot be explained in terms of) 273.67 396.62 T
(the semantics of Dylan language constr) 99.65 382.62 T
(ucts.) 290.48 382.62 T
(The library guarantees that) 99.65 362.62 T
4 9.5 Q
(element) 234.21 362.62 T
0 11 Q
( and) 274.11 362.62 T
4 9.5 Q
(element-setter) 298.23 362.62 T
0 11 Q
( will be atomic for) 378.03 362.62 T
4 9.5 Q
(<table>) 99.65 348.62 T
0 11 Q
(. It also guarantees that) 139.55 348.62 T
4 9.5 Q
(element) 255.07 348.62 T
0 11 Q
( and) 294.97 348.62 T
4 9.5 Q
(element-setter) 319.09 348.62 T
0 11 Q
( will be atomic) 398.89 348.62 T
-0.01 (for all of Dylan\325s non-str) 99.65 334.62 P
-0.01 (etchy built-in collection classes, except for subclasses) 218.5 334.62 P
(of) 99.65 320.62 T
4 9.5 Q
(<string>) 112.07 320.62 T
0 11 Q
(, and limited collections wher) 157.67 320.62 T
(e the elements ar) 301.23 320.62 T
(e constrained to be) 383.02 320.62 T
(either:) 99.65 306.62 T
(\245) 108.65 286.62 T
(of a type for which slots and variables do not guarantee atomicity \050see) 126.65 286.62 T
(Section 1.2.1 on page 2\051) 126.65 272.62 T
(\245) 108.65 252.62 T
(of a subtype of) 126.65 252.62 T
4 9.5 Q
(<character>) 201.45 252.62 T
0 11 Q
(\245) 108.65 232.62 T
(of a pr) 126.65 232.62 T
(oper subtype of) 158.07 232.62 T
4 9.5 Q
(<integer>) 237.19 232.62 T
0 11 Q
(.) 288.49 232.62 T
(This design is intended to permit implementations to use ef) 99.65 212.62 T
(\336cient r) 388.75 212.62 T
(epr) 425.64 212.62 T
(esenta-) 441.67 212.62 T
(tions for element values, which use either mor) 99.65 198.62 T
(e or less space than a normal) 324.28 198.62 T
(Dylan value. It is unde\336ned whether any of the other standar) 99.65 184.62 T
(d Dylan func-) 397.2 184.62 T
(tions ar) 99.65 170.62 T
(e atomic. Wher) 135.9 170.62 T
(e atomicity is not guaranteed, clients should guar) 209.13 170.62 T
(d) 448.62 170.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(8) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
0 11 Q
0 X
(against unexpected behavior by using explicit synchr) 117.65 665.62 T
(onization, as appr) 375.92 665.62 T
(opri-) 463 665.62 T
(ate.) 117.65 651.62 T
2 16 Q
(1.4  The Threads c) 117.65 616.29 T
(lass hierar) 231.9 616.29 T
(c) 297.31 616.29 T
(h) 304.5 616.29 T
(y) 312.27 616.29 T
117.65 229.96 495.65 237.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
0 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 222.08 241.62 T
(e 1.1  Thr) 248.29 241.62 T
(eads class hierar) 292.85 241.62 T
(chy) 372.29 241.62 T
(.) 388.47 241.62 T
117.65 257.95 495.65 591.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
0 0 0 1 0 0 0 K
(<object>) 285.48 574.95 T
(<synchronization) 343.65 529.95 T
(<lock>) 405.65 448.95 T
4 9.5 Q
(<thread>) 133.48 312.12 T
4 9 Q
(<simple-lock>) 266.65 312.12 T
(<semaphore>) 429.31 312.12 T
(<recursive-lock>) 339.31 312.12 T
(<exclusive-lock>) 324.65 385.95 T
(<notification>) 181.48 312.12 T
306.65 571.95 378.65 535.95 2 L
0.25 H
2 Z
N
387.65 526.95 423.65 454.95 2 L
N
414.65 445.95 369.65 391.95 2 L
N
419.48 445.95 441.65 319.95 2 L
N
360.65 382.95 387.65 319.95 2 L
N
360.65 382.95 306.65 319.95 2 L
N
297.65 571.95 162.65 319.95 2 L
N
387.65 526.95 216.65 319.95 2 L
N
J
119.98 490.95 492.48 490.95 492.48 267.95 119.98 267.95 4 Y
J
119.98 486.95 119.98 490.95 123.98 490.95 3 L
0 Z
N
[7.881 5.911] 7.881 I
123.98 490.95 488.48 490.95 2 L
N
J
488.48 490.95 492.48 490.95 492.48 486.95 3 L
N
[7.963 5.972] 7.963 I
492.48 486.95 492.48 271.96 2 L
N
J
492.48 271.96 492.48 267.95 488.48 267.95 3 L
N
[7.881 5.911] 7.881 I
488.48 267.95 123.99 267.95 2 L
N
J
123.99 267.95 119.98 267.95 119.98 271.95 3 L
N
[7.963 5.972] 7.963 I
119.98 271.95 119.98 486.95 2 L
N
J
126.65 346.95 258.9 346.95 258.9 285.95 126.65 285.95 4 Y
J
126.65 342.95 126.65 346.95 130.65 346.95 3 L
N
[8.424 6.318] 8.424 I
130.65 346.95 254.9 346.95 2 L
N
J
254.9 346.95 258.9 346.95 258.9 342.95 3 L
N
[8.833 6.625] 8.833 I
258.9 342.95 258.9 289.95 2 L
N
J
258.9 289.95 258.9 285.95 254.9 285.95 3 L
N
[8.424 6.318] 8.424 I
254.9 285.95 130.65 285.95 2 L
N
J
130.65 285.95 126.65 285.95 126.65 289.95 3 L
N
[8.833 6.625] 8.833 I
126.65 289.95 126.65 342.95 2 L
N
J
264.73 346.95 489.15 346.95 489.15 285.95 264.73 285.95 4 Y
J
264.73 342.95 264.73 346.95 268.73 346.95 3 L
N
[8.015 6.012] 8.015 I
268.73 346.95 485.14 346.95 2 L
N
J
485.14 346.95 489.15 346.95 489.15 342.95 3 L
N
[8.833 6.625] 8.833 I
489.15 342.95 489.15 289.95 2 L
N
J
489.15 289.95 489.15 285.95 485.15 285.95 3 L
N
[8.015 6.012] 8.015 I
485.15 285.95 268.73 285.95 2 L
N
J
268.73 285.95 264.73 285.95 264.73 289.95 3 L
N
[8.833 6.625] 8.833 I
264.73 289.95 264.73 342.95 2 L
N
5 F
(Instantiab) 126.65 475.95 T
(le) 165.49 475.95 T
J
(Pr) 453.82 336.12 T
(imar) 462.95 336.12 T
(y) 480.71 336.12 T
J
(Sealed) 131.48 334.45 T
J
(Abstr) 120.15 502.95 T
(act) 141.06 502.95 T
J
J
4 F
(<read-write-lock>) 296.48 297.95 T
360.65 384.95 333.65 303.95 2 L
2 Z
N
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.5) 457.59 702.62 T
(Basic features) 478.96 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(9) 527.15 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
2 16 Q
0 X
(1.5  Basic f) 99.65 662.29 T
(eatures) 168.1 662.29 T
2 13 Q
(1.5.1  Lo) 99.65 628.29 T
(w-le) 142.17 628.29 T
(vel sync) 162.76 628.29 T
(hr) 204.75 628.29 T
(onization) 215.22 628.29 T
2 14 Q
(sequence-point) 99.65 580.62 T
3 13 Q
(Function) 429.73 581.29 T
6 12 Q
(Summar) 108.65 555.95 T
(y) 146.12 555.95 T
0 11 Q
(T) 180.65 555.95 T
(ells the compiler that it must consider the possibility of visi-) 186.38 555.95 T
(ble side ef) 180.65 541.95 T
(fects fr) 229.29 541.95 T
(om other thr) 261.92 541.95 T
(eads at the point of the call.) 322.88 541.95 T
6 12 Q
(Libr) 108.65 514.29 T
(ar) 124.97 514.29 T
(y) 134.02 514.29 T
4 9 Q
(threads) 180.65 514.29 T
6 12 Q
(Module) 108.65 487.29 T
4 9 Q
(threads-extensions) 180.65 487.29 T
6 12 Q
(Signature) 108.65 460.29 T
4 9 Q
(sequence-point \050\051 => \050\051) 180.65 460.29 T
6 12 Q
(Arguments) 108.65 433.29 T
0 11 Q
(None.) 180.65 433.29 T
6 12 Q
(V) 108.65 405.29 T
(alues) 114.54 405.29 T
0 11 Q
(None.) 180.65 405.29 T
6 12 Q
(Descr) 108.65 377.29 T
(iption) 134.48 377.29 T
0 11 Q
(T) 180.65 377.29 T
(ells the compiler that it must consider the possibility of visi-) 186.38 377.29 T
(ble side ef) 180.65 363.29 T
(fects fr) 229.29 363.29 T
(om other thr) 261.92 363.29 T
(eads at the point of the call.) 322.88 363.29 T
(Normally) 180.65 343.29 T
(, the compiler is not obliged to consider this possi-) 226.65 343.29 T
(bility) 180.65 329.29 T
(, and is fr) 204.82 329.29 T
(ee to r) 250.11 329.29 T
(earrange pr) 279.89 329.29 T
(ogram or) 336.14 329.29 T
(der pr) 380.73 329.29 T
(ovided that) 410.57 329.29 T
(the r) 180.65 315.29 T
(eor) 202.8 315.29 T
(dering cannot be detected within a thr) 218.22 315.29 T
(ead.) 403.82 315.29 T
(Calling this function ef) 180.65 295.29 T
(fectively pr) 291.68 295.29 T
(ohibits the compiler fr) 346.59 295.29 T
(om) 454.28 295.29 T
(r) 180.65 281.29 T
(earranging the or) 184.79 281.29 T
(der of r) 268.9 281.29 T
(eads or writes fr) 304.55 281.29 T
(om or to global) 383.36 281.29 T
-0.33 (data, r) 180.65 267.29 P
-0.33 (elative to the call. This function may disallow compiler) 211.27 267.29 P
(optimizations, leading to less ef) 180.65 253.29 T
(\336cient code \321 even for) 334.11 253.29 T
(str) 180.65 239.29 T
(ongly or) 193.04 239.29 T
(der) 233.79 239.29 T
(ed machines.) 249.93 239.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(10) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
2 14 Q
0 X
(sync) 117.65 663.62 T
(hr) 143.72 663.62 T
(oniz) 154.99 663.62 T
(e-side-eff) 178.06 663.62 T
(ects) 228.99 663.62 T
3 13 Q
(Function) 447.73 664.29 T
6 12 Q
(Summar) 126.65 638.95 T
(y) 164.12 638.95 T
0 11 Q
(As) 198.65 638.95 T
4 9.5 Q
(sequence-point) 214.62 638.95 T
0 11 Q
(, with the addition that all side ef) 294.42 638.95 T
(fects) 454.94 638.95 T
-0.14 (that have been performed within the calling thr) 198.65 624.95 P
-0.14 (ead ar) 428.21 624.95 P
-0.14 (e made) 457.95 624.95 P
(visible within all other thr) 198.65 610.95 T
(eads.) 325.09 610.95 T
6 12 Q
(Libr) 126.65 583.29 T
(ar) 142.97 583.29 T
(y) 152.02 583.29 T
4 9 Q
(threads) 198.65 583.29 T
6 12 Q
(Module) 126.65 556.29 T
4 9 Q
(threads-extensions) 198.65 556.29 T
6 12 Q
(Signature) 126.65 529.29 T
4 9 Q
(synchronize-side-effects \050\051 => \050\051) 198.65 529.29 T
6 12 Q
(Arguments) 126.65 502.29 T
0 11 Q
(None.) 198.65 502.29 T
6 12 Q
(V) 126.65 474.29 T
(alues) 132.54 474.29 T
0 11 Q
(None.) 198.65 474.29 T
6 12 Q
(Descr) 126.65 446.29 T
(iption) 152.48 446.29 T
0 11 Q
(A call to this function implies all the constraints to the com-) 198.65 446.29 T
(piler of a call to) 198.65 432.29 T
4 9.5 Q
(sequence-point) 276.57 432.29 T
0 11 Q
(. In addition it ensur) 356.37 432.29 T
(es that) 455.47 432.29 T
(all side ef) 198.65 418.29 T
(fects that have been performed within the calling) 244.64 418.29 T
(thr) 198.65 404.29 T
(ead ar) 212.78 404.29 T
(e made visible within all other thr) 242.67 404.29 T
(eads. Hence, no) 407.09 404.29 T
(side ef) 198.65 390.29 T
(fect performed after the call can be visible to other) 229.99 390.29 T
(thr) 198.65 376.29 T
(eads befor) 212.78 376.29 T
(e side ef) 262.86 376.29 T
(fects performed befor) 302.21 376.29 T
(e the call. On a) 406.89 376.29 T
-0.57 (str) 198.65 362.29 P
-0.57 (ongly or) 211.04 362.29 P
-0.57 (der) 251.21 362.29 P
-0.57 (ed machine, this function might legitimately be) 267.35 362.29 P
(performed as a null operation.) 198.65 348.29 T
(Some of the standar) 198.65 328.29 T
(d synchr) 295.11 328.29 T
(onization functions in the) 337.19 328.29 T
(Thr) 198.65 314.29 T
(eads library also ensur) 215.94 314.29 T
(e the visibility of side ef) 325.62 314.29 T
(fects and) 440.82 314.29 T
(act as sequence points, as if by a call to this function. This is) 198.65 300.29 T
(de\336ned to happen as follows:) 198.65 286.29 T
(\245) 198.65 266.29 T
(Immediately befor) 216.65 266.29 T
(e a thr) 306.56 266.29 T
(ead exits and becomes available) 336.97 266.29 T
(for joining with) 216.65 252.29 T
4 9.5 Q
(join-thread) 295.18 252.29 T
0 11 Q
(\245) 198.65 232.29 T
(Befor) 216.65 232.29 T
(e) 242.45 232.29 T
4 9.5 Q
(thread-yield) 250.47 232.29 T
0 11 Q
( yields contr) 318.87 232.29 T
(ol) 378.57 232.29 T
(\245) 198.65 212.29 T
(After) 216.65 212.29 T
4 9.5 Q
(wait-for) 244.82 212.29 T
0 11 Q
( achieves synchr) 290.42 212.29 T
(onization \050for all meth-) 369.94 212.29 T
(ods pr) 216.65 198.29 T
(ovided by the Thr) 247.55 198.29 T
(eads library\051) 334.68 198.29 T
(\245) 198.65 178.29 T
(Upon entry to) 216.65 178.29 T
4 9.5 Q
(release) 287.79 178.29 T
0 11 Q
( \050for all methods pr) 327.68 178.29 T
(ovided by the) 421.38 178.29 T
(Thr) 216.65 164.29 T
(eads library\051) 233.94 164.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.5) 457.59 702.62 T
(Basic features) 478.96 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(1) 522.98 124.95 T
(1) 527.15 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
0 11 Q
0 X
(\245) 180.65 665.62 T
(Upon entry to) 198.65 665.62 T
4 9.5 Q
(release-all) 269.79 665.62 T
6 12 Q
(Example) 108.65 637.95 T
0 11 Q
-0.02 (This example uses low-level synchr) 180.65 637.95 P
-0.02 (onization to implement a) 352.86 637.95 P
-0.14 (class for performing lazy evaluation in a thr) 180.65 623.95 P
-0.14 (ead-safe manner) 392.61 623.95 P
-0.14 (,) 472.29 623.95 P
(without the need for locks.) 180.65 609.95 T
(The class guarantees that the value will not be computed) 180.65 589.95 T
(until it is needed, although it does not guarantee that it will) 180.65 575.95 T
-0.16 (not be computed mor) 180.65 561.95 P
-0.16 (e than once concurr) 285.04 561.95 P
-0.16 (ently) 379.82 561.95 P
-0.16 (. This might be) 403.17 561.95 P
(useful for memoization purposes.) 180.65 547.95 T
(The class uses 3 slots: one for a function which may be used) 180.65 527.95 T
(to compute the value, one for a boolean indicating whether) 180.65 513.95 T
(the value is alr) 180.65 499.95 T
(eady known, and one for the value itself, if) 251.69 499.95 T
(known.) 180.65 485.95 T
(It is essential that no instance can ever be observed in a state) 180.65 465.95 T
(wher) 180.65 451.95 T
(e the boolean indicates a known value befor) 205.64 451.95 T
(e the value) 418.9 451.95 T
(is pr) 180.65 437.95 T
(esent. The low-level synchr) 202.02 437.95 T
(onization functions ensur) 334.44 437.95 T
(e) 458.3 437.95 T
(this cannot happen.) 180.65 423.95 T
4 9 Q
(define class <lazy-value> \050<object>\051) 180.65 403.29 T
(slot thunk :: <function>,) 191.45 392.29 T
(required-init-keyword: thunk:;) 218.45 381.29 T
(slot internal-guard :: <boolean> = #t;) 191.45 370.29 T
(slot computed-value;) 191.45 359.29 T
(end class;) 180.65 348.29 T
(define method lazy-value \050lv :: <lazy-value>\051) 180.65 329.29 T
(=> \050value\051) 202.25 318.29 T
(if \050lv.internal-guard\051) 191.45 307.29 T
(// Don\325t yet have a value -- so compute it now;) 213.05 288.29 T
(let value = lv.thunk\050\051;) 213.05 277.29 T
(// Store the value in place) 213.05 258.29 T
(lv.computed-value := value;) 213.05 247.29 T
(// Before droppping the guard, synchronize side) 213.05 228.29 T
(// effects to ensure there is no possibility that) 213.05 217.29 T
(// other threads might see the lowered guard) 213.05 206.29 T
(// before seeing the value) 213.05 195.29 T
(synchronize-side-effects\050\051;) 213.05 176.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(12) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
4 F
0 X
(// Now we can drop the guard to permit other) 231.05 666.95 T
(// threads to use this value) 231.05 655.95 T
(lv.internal-guard := #f;) 231.05 636.95 T
(// Finally, return the computed value) 231.05 617.95 T
(value) 231.05 598.95 T
(else  // The value has already been computed and) 209.45 579.95 T
(// stored, so use it) 241.85 568.95 T
(// First, need a sequence-point to force the) 220.25 549.95 T
(// compiler not to move the read of the) 220.25 538.95 T
(// computed-value so that it is performed BEFORE) 220.25 527.95 T
(// the read of the guard.) 220.25 516.95 T
(sequence-point\050\051;) 220.25 497.95 T
(lv.computed-value;) 220.25 478.95 T
(end if;) 209.45 467.95 T
(end method;) 198.65 448.95 T
2 13 Q
(1.5.2  Operations on threads) 117.65 417.29 T
2 14 Q
(<thread>) 117.65 369.62 T
3 13 Q
(Sealed instantiable class) 369.5 370.29 T
6 12 Q
(Summar) 126.65 344.95 T
(y) 164.12 344.95 T
0 11 Q
(The class of thr) 198.65 344.95 T
(eads.) 272.03 344.95 T
6 12 Q
(Libr) 126.65 316.95 T
(ar) 142.97 316.95 T
(y) 152.02 316.95 T
4 9 Q
(threads) 198.65 316.95 T
6 12 Q
(Module) 126.65 289.95 T
4 9 Q
(threads) 198.65 289.95 T
6 12 Q
(Superclasses) 126.65 262.95 T
4 9 Q
(<object>) 198.65 262.95 T
6 12 Q
(Init-k) 126.65 235.95 T
(e) 147.79 235.95 T
(yw) 153.08 235.95 T
(ords) 165.02 235.95 T
3 11 Q
(function) 198.65 235.95 T
0 F
(An instance of) 279.65 235.95 T
4 9.5 Q
(<function>) 352.43 235.95 T
0 11 Q
(. Requir) 409.43 235.95 T
(ed.) 447.69 235.95 T
3 F
(priority) 198.65 215.95 T
0 F
(A signed integer) 279.65 215.95 T
(.) 359.45 215.95 T
3 F
(name) 198.65 195.95 T
0 F
(An instance of) 279.65 195.95 T
4 9.5 Q
(<string>) 352.43 195.95 T
0 11 Q
(.) 398.04 195.95 T
6 12 Q
(Descr) 126.65 168.29 T
(iption) 152.48 168.29 T
0 11 Q
(The class r) 198.65 168.29 T
(epr) 249.62 168.29 T
(esenting a thr) 265.65 168.29 T
(ead of contr) 331.69 168.29 T
(ol executing) 389.38 168.29 T
3 F
(function) 451.12 168.29 T
0 F
(.) 488.61 168.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.5) 457.59 702.62 T
(Basic features) 478.96 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(13) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
0 11 Q
0 X
(The) 180.65 665.62 T
3 F
(function) 201.81 665.62 T
0 F
( is called with no ar) 239.3 665.62 T
(guments in the empty) 334.11 665.62 T
(dynamic envir) 180.65 651.62 T
(onment of the new thr) 251.17 651.62 T
(ead. The thr) 359.45 651.62 T
(ead termi-) 417.74 651.62 T
(nates when the function r) 180.65 637.62 T
(eturns.) 304.5 637.62 T
(The function is executable immediately) 180.65 617.62 T
(. Y) 370.34 617.62 T
(ou can suspend a) 382.17 617.62 T
(new thr) 180.65 603.62 T
(ead \050almost\051 immediately on cr) 218.38 603.62 T
(eation by arranging) 369.79 603.62 T
(for it to synchr) 180.65 589.62 T
(onize on an unavailable r) 251.91 589.62 T
(esour) 374.45 589.62 T
(ce upon entry) 401.17 589.62 T
(to the function.) 180.65 575.62 T
-0.12 (The optional) 180.65 555.62 P
3 F
-0.12 (priority) 244.84 555.62 P
0 F
-0.12 ( keywor) 279.06 555.62 P
-0.12 (d pr) 318.52 555.62 P
-0.12 (ovides a scheduling priority) 338.64 555.62 P
(for the thr) 180.65 541.62 T
(ead. The higher the value, the gr) 229.55 541.62 T
(eater the priority) 386.79 541.62 T
(.) 467.7 541.62 T
(The default value is zer) 180.65 527.62 T
(o, which is also the value of the con-) 294.23 527.62 T
(stant) 180.65 513.62 T
4 9.5 Q
($normal-priority) 207.14 513.62 T
0 11 Q
(, one of several constants that corr) 297.11 513.62 T
(e-) 462.32 513.62 T
(spond to useful priority levels. The library of) 180.65 499.62 T
(fers no way to) 398.61 499.62 T
(change the priority of a thr) 180.65 485.62 T
(ead dynamically) 310.94 485.62 T
(.) 390.52 485.62 T
(The following constants, listed in or) 180.65 465.62 T
(der of incr) 354.62 465.62 T
(easing value,) 404.76 465.62 T
(may be useful as values for the optional) 180.65 451.62 T
3 F
(priority) 376.82 451.62 T
0 F
( keywor) 411.04 451.62 T
(d.) 450.62 451.62 T
4 9 Q
($low-priority) 191.45 430.95 T
($background-priority) 191.45 419.95 T
($normal-priority) 191.45 408.95 T
($interactive-priority) 191.45 397.95 T
($high-priority) 191.45 386.95 T
0 11 Q
(The) 180.65 366.62 T
3 F
(name) 201.81 366.62 T
0 F
( keywor) 225.65 366.62 T
(d is a string that is used as the function\325s) 265.23 366.62 T
(name for convenience purposes, such as debugging.) 180.65 352.62 T
6 12 Q
(Oper) 108.65 324.95 T
(ations) 130.44 324.95 T
0 11 Q
(The class) 180.65 324.95 T
4 9.5 Q
(<thread>) 227.48 324.95 T
0 11 Q
( pr) 273.08 324.95 T
(ovides the following operations:) 286.58 324.95 T
4 9.5 Q
(thread-name) 180.65 304.95 T
0 11 Q
(Returns the name of a thr) 261.65 304.95 T
(ead, or) 385.09 304.95 T
4 9.5 Q
(#f) 421.18 304.95 T
0 11 Q
( if no) 432.58 304.95 T
(name was supplied.) 261.65 290.95 T
4 9.5 Q
(join-thread) 180.65 270.95 T
0 11 Q
(Blocks until one of the speci\336ed thr) 261.65 270.95 T
(eads has) 432.77 270.95 T
(terminated, and r) 261.65 256.95 T
(eturns the values of its) 346.26 256.95 T
(function.) 261.65 242.95 T
2 14 Q
(thread-name) 99.65 194.95 T
3 13 Q
(Function) 429.73 195.62 T
6 12 Q
(Summar) 108.65 170.29 T
(y) 146.12 170.29 T
0 11 Q
(Returns the name of a thr) 180.65 170.29 T
(ead.) 304.09 170.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(14) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
6 12 Q
0 X
(Libr) 126.65 664.95 T
(ar) 142.97 664.95 T
(y) 152.02 664.95 T
4 9 Q
(threads) 198.65 664.95 T
6 12 Q
(Module) 126.65 637.95 T
4 9 Q
(threads) 198.65 637.95 T
6 12 Q
(Signature) 126.65 610.95 T
4 9 Q
(thread-name) 198.65 610.95 T
7 F
(thr) 263.45 610.95 T
(ead) 275.29 610.95 T
4 F
( =>) 289.3 610.95 T
7 F
(name-or-false) 310.9 610.95 T
6 12 Q
(Arguments) 126.65 583.95 T
3 11 Q
(thr) 198.65 583.95 T
(ead) 211.89 583.95 T
0 F
(An instance of) 279.65 583.95 T
4 9.5 Q
(<thread>) 352.43 583.95 T
0 11 Q
(.) 398.04 583.95 T
6 12 Q
(V) 126.65 555.95 T
(alues) 132.54 555.95 T
3 11 Q
(name-or-false) 198.65 555.95 T
0 F
(An instance of) 279.65 555.95 T
4 9.5 Q
(type-union\050<string>,) 352.43 555.95 T
(singleton\050#f\051\051) 279.65 541.95 T
0 11 Q
(.) 359.45 541.95 T
6 12 Q
(Descr) 126.65 514.29 T
(iption) 152.48 514.29 T
0 11 Q
-0.06 (Returns the name of) 198.65 514.29 P
3 F
-0.06 (thr) 299.47 514.29 P
-0.06 (ead) 312.71 514.29 P
0 F
-0.06 ( as a string. If) 327.38 514.29 P
3 F
-0.06 (thr) 394.93 514.29 P
-0.06 (ead) 408.18 514.29 P
0 F
-0.06 ( does not have) 422.84 514.29 P
(a name, this function r) 198.65 500.29 T
(eturns) 307.56 500.29 T
4 9.5 Q
(#f) 341.21 500.29 T
0 11 Q
(.) 352.61 500.29 T
2 14 Q
(join-thread) 117.65 452.29 T
3 13 Q
(Function) 447.73 452.95 T
6 12 Q
(Summar) 126.65 427.62 T
(y) 164.12 427.62 T
0 11 Q
(W) 198.65 427.62 T
(aits for another) 208.64 427.62 T
(, existing, thr) 281.8 427.62 T
(ead to terminate, and then) 345.05 427.62 T
(r) 198.65 413.62 T
(eturns the values of its function.) 202.79 413.62 T
6 12 Q
(Libr) 126.65 385.95 T
(ar) 142.97 385.95 T
(y) 152.02 385.95 T
4 9 Q
(threads) 198.65 385.95 T
6 12 Q
(Module) 126.65 358.95 T
4 9 Q
(threads) 198.65 358.95 T
6 12 Q
(Signature) 126.65 331.95 T
4 9 Q
-0.91 (join-thread) 198.65 331.95 P
7 F
-0.38 (thr) 262.54 331.95 P
-0.38 (ead) 274.38 331.95 P
4 F
-0.91 ( #rest) 288.39 331.95 P
7 F
-0.38 (thr) 324.37 331.95 P
-0.38 (eads) 336.21 331.95 P
4 F
-0.91 ( =>) 354.21 331.95 P
7 F
-0.38 (thr) 373.99 331.95 P
-0.38 (ead-joined) 385.84 331.95 P
4 F
-0.91 ( #rest) 428.35 331.95 P
7 F
-0.38 (r) 464.33 331.95 P
-0.38 (esults) 467.67 331.95 P
6 12 Q
(Arguments) 126.65 304.95 T
3 11 Q
(thr) 198.65 304.95 T
(ead) 211.89 304.95 T
0 F
(An instance of) 279.65 304.95 T
4 9.5 Q
(<thread>) 352.43 304.95 T
0 11 Q
(. A thr) 398.04 304.95 T
(ead to join.) 428.98 304.95 T
3 F
(thr) 198.65 284.95 T
(eads) 211.89 284.95 T
0 F
(Instances of) 279.65 284.95 T
4 9.5 Q
(<thread>) 339.89 284.95 T
0 11 Q
(. Mor) 385.49 284.95 T
(e thr) 411.55 284.95 T
(eads to join.) 433.71 284.95 T
6 12 Q
(V) 126.65 257.29 T
(alues) 132.54 257.29 T
3 11 Q
(thr) 198.65 257.29 T
(ead-joined) 211.89 257.29 T
0 F
(An instance of) 279.65 257.29 T
4 9.5 Q
(<thread>) 352.43 257.29 T
0 11 Q
(. The thr) 398.04 257.29 T
(ead that) 438.83 257.29 T
(was joined.) 279.65 243.29 T
3 F
(r) 198.65 223.29 T
(esults) 202.73 223.29 T
0 F
-0.15 (Zer) 279.65 223.29 P
-0.15 (o or mor) 296.4 223.29 P
-0.15 (e instances of) 337.82 223.29 P
4 9.5 Q
-0.32 (<object>) 405.11 223.29 P
0 11 Q
-0.15 (. The val-) 450.71 223.29 P
(ues r) 279.65 209.29 T
(eturned fr) 303.11 209.29 T
(om the thr) 351.9 209.29 T
(ead that was) 402.51 209.29 T
(joined.) 279.65 195.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.5) 457.59 702.62 T
(Basic features) 478.96 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(15) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
6 12 Q
0 X
(Exceptions) 108.65 664.95 T
0 11 Q
-0.31 (An implementation of) 180.65 664.95 P
4 9.5 Q
-0.65 (join-thread) 290.24 664.95 P
0 11 Q
-0.31 ( is permitted to signal the) 352.94 664.95 P
(following condition:) 180.65 650.95 T
4 9.5 Q
(<duplicate-join-error>) 180.65 624.95 T
0 11 Q
(A condition of this class \050a subclass of) 261.65 606.95 T
4 9.5 Q
(<error>) 261.65 592.95 T
0 11 Q
(\051 may be signalled when a thr) 301.55 592.95 T
(ead is) 445.55 592.95 T
(passed to) 261.65 578.95 T
4 9.5 Q
(join-thread) 310.17 578.95 T
0 11 Q
(, if that thr) 372.87 578.95 T
(ead has) 423.94 578.95 T
(alr) 261.65 564.95 T
(eady been joined by an earlier call to) 274.5 564.95 T
4 9.5 Q
(join-thread) 261.65 550.95 T
0 11 Q
(, or if that thr) 324.35 550.95 T
(ead is curr) 388.52 550.95 T
(ently) 439.39 550.95 T
(active in another call to) 261.65 536.95 T
4 9.5 Q
(join-thread) 377.54 536.95 T
0 11 Q
(.) 440.24 536.95 T
6 12 Q
(Descr) 108.65 509.29 T
(iption) 134.48 509.29 T
0 11 Q
-0.37 (W) 180.65 509.29 P
-0.37 (aits for another) 190.64 509.29 P
-0.37 (, existing, thr) 263.06 509.29 P
-0.37 (ead to terminate, by blocking if) 325.58 509.29 P
(necessary) 180.65 495.29 T
(, and then r) 226.54 495.29 T
(eturns the values of its function. The) 281.97 495.29 T
-0.25 (function r) 180.65 481.29 P
-0.25 (eturns the thr) 228.07 481.29 P
-0.25 (ead object that was joined, along with) 293.35 481.29 P
(any values its function r) 180.65 467.29 T
(eturns.) 297.52 467.29 T
-0.35 (If mor) 180.65 447.29 P
-0.35 (e than one thr) 210.29 447.29 P
-0.35 (ead is passed to) 276.47 447.29 P
4 9.5 Q
-0.72 (join-thread) 354.46 447.29 P
0 11 Q
-0.35 (, the curr) 417.16 447.29 P
-0.35 (ent) 459.99 447.29 P
(thr) 180.65 433.29 T
(ead blocks until the \336rst of those thr) 194.78 433.29 T
(eads terminates. The) 369.74 433.29 T
(values r) 180.65 419.29 T
(eturned ar) 219.03 419.29 T
(e those of the \336rst thr) 269.65 419.29 T
(ead to terminate.) 372.91 419.29 T
-0.28 (If one or mor) 180.65 399.29 P
-0.28 (e of the multiple thr) 243.34 399.29 P
-0.28 (eads has alr) 338.98 399.29 P
-0.28 (eady terminated) 395.5 399.29 P
-0.15 (at the time of the call, then one of those terminated thr) 180.65 385.29 P
-0.15 (eads is) 442.44 385.29 P
-0.5 (joined. When mor) 180.65 371.29 P
-0.5 (e than one thr) 267.02 371.29 P
-0.5 (ead has alr) 332.74 371.29 P
-0.5 (eady terminated, it) 384.15 371.29 P
(is unde\336ned which of those thr) 180.65 357.29 T
(eads the implementation will) 332.13 357.29 T
(join.) 180.65 343.29 T
(It is an err) 180.65 323.29 T
(or to pass a thr) 229.72 323.29 T
(ead to) 301.74 323.29 T
4 9.5 Q
(join-thread) 334.32 323.29 T
0 11 Q
( if it has alr) 397.02 323.29 T
(eady) 451.08 323.29 T
-0.18 (been joined in a pr) 180.65 309.29 P
-0.18 (evious call to) 269.97 309.29 P
4 9.5 Q
-0.38 (join-thread) 336.04 309.29 P
0 11 Q
-0.18 (. It is an err) 398.73 309.29 P
-0.18 (or to) 452.57 309.29 P
(pass a thr) 180.65 295.29 T
(ead to) 227.22 295.29 T
4 9.5 Q
(join-thread) 259.8 295.29 T
0 11 Q
( if that thr) 322.5 295.29 T
(ead is also being pr) 370.83 295.29 T
(o-) 464.38 295.29 T
(cessed by another simultaneous call to) 180.65 281.29 T
4 9.5 Q
(join-thread) 370.18 281.29 T
0 11 Q
( fr) 432.88 281.29 T
(om) 443.44 281.29 T
(another thr) 180.65 267.29 T
(ead.) 235.04 267.29 T
2 14 Q
(thread-yield) 99.65 219.29 T
3 13 Q
(Function) 429.73 219.95 T
6 12 Q
(Summar) 108.65 194.62 T
(y) 146.12 194.62 T
0 11 Q
(For) 180.65 194.62 T
(ce the curr) 196.92 194.62 T
(ent thr) 247.84 194.62 T
(ead to yield contr) 279.98 194.62 T
(ol to the part of the) 364.84 194.62 T
(implementation r) 180.65 180.62 T
(esponsible for scheduling thr) 265.2 180.62 T
(eads.) 406.47 180.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(16) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
6 12 Q
0 X
(Signature) 126.65 664.95 T
4 9 Q
(thread-yield \050\051 => \050\051) 198.65 664.95 T
6 12 Q
(Libr) 126.65 637.95 T
(ar) 142.97 637.95 T
(y) 152.02 637.95 T
4 9 Q
(threads) 198.65 637.95 T
6 12 Q
(Module) 126.65 610.95 T
4 9 Q
(threads) 198.65 610.95 T
6 12 Q
(Descr) 126.65 583.95 T
(iption) 152.48 583.95 T
0 11 Q
(For) 198.65 583.95 T
(ces the curr) 214.92 583.95 T
(ent thr) 270.5 583.95 T
(ead to yield contr) 302.64 583.95 T
(ol to the part of the) 387.51 583.95 T
-0.41 (implementation r) 198.65 569.95 P
-0.41 (esponsible for scheduling thr) 282.79 569.95 P
-0.41 (eads. Doing so) 422.82 569.95 P
(may have the ef) 198.65 555.95 T
(fect of allowing other thr) 275.6 555.95 T
(eads to r) 396.22 555.95 T
(un, and) 437.72 555.95 T
-0.1 (may be essential to avoid deadlock in a co-operative schedul-) 198.65 541.95 P
(ing envir) 198.65 527.95 T
(onment.) 242.35 527.95 T
2 14 Q
(current-thread) 117.65 479.95 T
3 13 Q
(Function) 447.73 480.62 T
6 12 Q
(Summar) 126.65 455.29 T
(y) 164.12 455.29 T
0 11 Q
(Returns the curr) 198.65 455.29 T
(ent thr) 277.66 455.29 T
(ead.) 309.8 455.29 T
6 12 Q
(Libr) 126.65 427.29 T
(ar) 142.97 427.29 T
(y) 152.02 427.29 T
4 9 Q
(threads) 198.65 427.29 T
6 12 Q
(Module) 126.65 400.29 T
4 9 Q
(threads) 198.65 400.29 T
6 12 Q
(Signature) 126.65 373.29 T
4 9 Q
(current-thread \050\051 =>) 198.65 373.29 T
7 F
(thr) 312.05 373.29 T
(ead) 323.89 373.29 T
6 12 Q
(Arguments) 126.65 346.29 T
0 11 Q
(None.) 198.65 346.29 T
6 12 Q
(V) 126.65 318.29 T
(alues) 132.54 318.29 T
3 11 Q
(thr) 198.65 318.29 T
(ead) 211.89 318.29 T
0 F
(An instance of) 279.65 318.29 T
4 9.5 Q
(<thread>) 352.43 318.29 T
0 11 Q
(.) 398.04 318.29 T
6 12 Q
(Descr) 126.65 290.29 T
(iption) 152.48 290.29 T
0 11 Q
(Returns the curr) 198.65 290.29 T
(ent thr) 277.66 290.29 T
(ead.) 309.8 290.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(17) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
2 16 Q
0 X
(1.6  Sync) 99.65 662.29 T
(hr) 156.43 662.29 T
(onization pr) 169.31 662.29 T
(otocol) 243.42 662.29 T
2 13 Q
(1.6.1  Basic f) 99.65 628.29 T
(eatures) 164.15 628.29 T
2 14 Q
(<sync) 99.65 580.62 T
(hr) 132.42 580.62 T
(onization>) 143.69 580.62 T
3 13 Q
(Open abstract class) 375.83 581.29 T
6 12 Q
(Summar) 108.65 555.95 T
(y) 146.12 555.95 T
0 11 Q
(The class of objects that ar) 180.65 555.95 T
(e used for inter) 307.18 555.95 T
(-thr) 380.61 555.95 T
(ead synchr) 398.4 555.95 T
(oni-) 451.26 555.95 T
(zation.) 180.65 541.95 T
6 12 Q
(Libr) 108.65 514.29 T
(ar) 124.97 514.29 T
(y) 134.02 514.29 T
4 9 Q
(threads) 180.65 514.29 T
6 12 Q
(Module) 108.65 487.29 T
4 9 Q
(threads) 180.65 487.29 T
6 12 Q
(Superclasses) 108.65 460.29 T
4 9 Q
(<object>) 180.65 460.29 T
6 12 Q
(Init-k) 108.65 433.29 T
(e) 129.79 433.29 T
(yw) 135.08 433.29 T
(ords) 147.02 433.29 T
4 9.5 Q
(name:) 180.65 433.29 T
0 11 Q
(An instance of) 261.65 433.29 T
4 9.5 Q
(<string>) 334.43 433.29 T
0 11 Q
(.) 380.04 433.29 T
6 12 Q
(Descr) 108.65 405.29 T
(iption) 134.48 405.29 T
0 11 Q
(The class of objects that ar) 180.65 405.29 T
(e used for inter) 307.18 405.29 T
(-thr) 380.61 405.29 T
(ead synchr) 398.4 405.29 T
(oni-) 451.26 405.29 T
(zation.) 180.65 391.29 T
(Ther) 180.65 371.29 T
(e is no explicit mechanism in the library to block on a) 203.21 371.29 T
(number of synchr) 180.65 357.29 T
(onization objects simultaneously) 266.88 357.29 T
(, until syn-) 424.82 357.29 T
(chr) 180.65 343.29 T
(onization can be achieved with one of them. This mecha-) 196.08 343.29 T
(nism can be implemented by cr) 180.65 329.29 T
(eating a new thr) 332.7 329.29 T
(ead to wait) 411.51 329.29 T
(for each synchr) 180.65 315.29 T
(onization object, and arranging for each) 254.83 315.29 T
-0.42 (thr) 180.65 301.29 P
-0.42 (ead to r) 194.78 301.29 P
-0.42 (elease a noti\336cation once synchr) 230.67 301.29 P
-0.42 (onization has been) 385.27 301.29 P
(achieved.) 180.65 287.29 T
(The) 180.65 267.29 T
3 F
(name) 201.81 267.29 T
0 F
( keywor) 225.65 267.29 T
(d is a string that is used as the synchr) 265.23 267.29 T
(oniza-) 446.64 267.29 T
(tion object\325s name for convenience purposes, such as debug-) 180.65 253.29 T
(ging.) 180.65 239.29 T
6 12 Q
(Oper) 108.65 211.62 T
(ations) 130.44 211.62 T
0 11 Q
(The class) 180.65 211.62 T
4 9.5 Q
(<synchronization>) 227.48 211.62 T
0 11 Q
( provides the following opera-) 324.38 211.62 T
(tions:) 180.65 197.62 T
4 9.5 Q
(wait-for) 180.65 177.62 T
0 11 Q
-0.09 (Block until synchr) 261.65 177.62 P
-0.09 (onization can be achieved.) 349.53 177.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 18
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(18) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
4 9.5 Q
0 X
(release) 198.65 665.62 T
0 11 Q
(Release the object to make it available for) 279.65 665.62 T
(synchr) 279.65 651.62 T
(onization.) 312.26 651.62 T
4 9.5 Q
(synchronization-name) 198.65 625.62 T
0 11 Q
(Returns the name of the synchr) 279.65 607.62 T
(onization) 431.33 607.62 T
(object.) 279.65 593.62 T
2 14 Q
(wait-f) 117.65 545.62 T
(or) 147.41 545.62 T
3 13 Q
(Open generic function) 378.14 546.29 T
6 12 Q
(Summar) 126.65 520.95 T
(y) 164.12 520.95 T
0 11 Q
(Blocks until a synchr) 198.65 520.95 T
(onization object is available.) 299.63 520.95 T
6 12 Q
(Libr) 126.65 492.95 T
(ar) 142.97 492.95 T
(y) 152.02 492.95 T
4 9 Q
(threads) 198.65 492.95 T
6 12 Q
(Module) 126.65 465.95 T
4 9 Q
(threads) 198.65 465.95 T
6 12 Q
(Signature) 126.65 438.95 T
4 9 Q
(wait-for) 198.65 438.95 T
7 F
(object) 247.25 438.95 T
4 F
( #key) 271.58 438.95 T
7 F
(timeout) 303.98 438.95 T
4 F
( =>) 335.48 438.95 T
7 F
(success) 357.08 438.95 T
6 12 Q
(Arguments) 126.65 411.95 T
3 11 Q
(object) 198.65 411.95 T
0 F
(An instance of) 279.65 411.95 T
4 9.5 Q
(<synchronization>) 352.43 411.95 T
0 11 Q
(.) 449.33 411.95 T
3 F
(timeout) 198.65 391.95 T
0 F
(T) 279.65 391.95 T
(ime-out interval. If the value is) 285.79 391.95 T
4 9.5 Q
(#f) 438.14 391.95 T
0 11 Q
(\050the) 455.24 391.95 T
-0.26 (default\051, the time-out interval never elapses.) 279.65 377.95 P
(Otherwise the value should be a) 279.65 363.95 T
4 9.5 Q
(<real>) 439.26 363.95 T
0 11 Q
(,) 473.46 363.95 T
(corr) 279.65 349.95 T
(esponding to the desir) 299.03 349.95 T
(ed interval in sec-) 407.52 349.95 T
(onds.) 279.65 335.95 T
6 12 Q
(V) 126.65 308.29 T
(alues) 132.54 308.29 T
3 11 Q
(success) 198.65 308.29 T
0 F
(An instance of) 279.65 308.29 T
4 9.5 Q
(<boolean>) 352.43 308.29 T
0 11 Q
(.) 403.73 308.29 T
6 12 Q
(Descr) 126.65 280.29 T
(iption) 152.48 280.29 T
0 11 Q
(Blocks until a synchr) 198.65 280.29 T
(onization object is available.) 299.63 280.29 T
(This function is the basic blocking primitive of the Thr) 198.65 260.29 T
(eads) 462.21 260.29 T
(library) 198.65 246.29 T
(. It blocks until) 230.22 246.29 T
3 F
(object) 305.24 246.29 T
0 F
( is available and synchr) 330.69 246.29 T
(onization) 444.46 246.29 T
(can be achieved, or the) 198.65 232.29 T
3 F
(timeout) 312.36 232.29 T
0 F
( interval has expir) 346.58 232.29 T
(ed. A non-) 434.02 232.29 T
(blocking synchr) 198.65 218.29 T
(onization may be attempted by specifying a) 276.02 218.29 T
3 F
(timeout) 198.65 204.29 T
0 F
( of zer) 232.87 204.29 T
(o. Individual methods may adjust the state of) 262.95 204.29 T
(the synchr) 198.65 190.29 T
(onization object on synchr) 249.27 190.29 T
(onization. The function) 376.75 190.29 T
(r) 198.65 176.29 T
(eturns) 202.79 176.29 T
4 9.5 Q
(#t) 236.44 176.29 T
0 11 Q
( if synchr) 247.84 176.29 T
(onization is achieved befor) 292.82 176.29 T
(e the timeout) 423.37 176.29 T
(interval elapses; otherwise it r) 198.65 162.29 T
(eturns) 344.14 162.29 T
4 9.5 Q
(#f.) 377.79 162.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 18
%%Page: "19" 19
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(19) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
2 14 Q
0 X
(release) 99.65 663.62 T
3 13 Q
(Open generic function) 360.14 664.29 T
6 12 Q
(Summar) 108.65 638.95 T
(y) 146.12 638.95 T
0 11 Q
(Releases a synchr) 180.65 638.95 T
(onization object.) 265.45 638.95 T
6 12 Q
(Libr) 108.65 610.95 T
(ar) 124.97 610.95 T
(y) 134.02 610.95 T
4 9 Q
(threads) 180.65 610.95 T
6 12 Q
(Module) 108.65 583.95 T
4 9 Q
(threads) 180.65 583.95 T
6 12 Q
(Signature) 108.65 556.95 T
4 9 Q
(release) 180.65 556.95 T
7 F
(object) 223.85 556.95 T
4 F
( #key => \050\051) 248.18 556.95 T
6 12 Q
(Arguments) 108.65 529.95 T
3 11 Q
(object) 180.65 529.95 T
0 F
(An instance of) 261.65 529.95 T
4 9.5 Q
(<synchronization>) 334.43 529.95 T
0 11 Q
(.) 431.33 529.95 T
6 12 Q
(V) 108.65 501.95 T
(alues) 114.54 501.95 T
0 11 Q
(None.) 180.65 501.95 T
6 12 Q
(Descr) 108.65 473.95 T
(iption) 134.48 473.95 T
0 11 Q
(Releases the supplied synchr) 180.65 473.95 T
(onization object,) 320.86 473.95 T
3 F
(object) 403.32 473.95 T
0 F
(, poten-) 428.77 473.95 T
(tially making it available to other thr) 180.65 459.95 T
(eads. Individual meth-) 358.79 459.95 T
(ods describe what this means for each class of) 180.65 445.95 T
(synchr) 180.65 431.95 T
(onization. This function does not block for any of the) 213.26 431.95 T
(subclasses of) 180.65 417.95 T
4 9.5 Q
(<synchronization>) 246.04 417.95 T
0 11 Q
( pr) 342.94 417.95 T
(ovided by the library) 356.45 417.95 T
(.) 457.86 417.95 T
2 14 Q
(sync) 99.65 369.95 T
(hr) 125.72 369.95 T
(onization-name) 136.99 369.95 T
3 13 Q
(Open generic function) 360.14 370.62 T
6 12 Q
(Summar) 108.65 345.29 T
(y) 146.12 345.29 T
0 11 Q
(Returns the name of a synchr) 180.65 345.29 T
(onization object.) 322.57 345.29 T
6 12 Q
(Libr) 108.65 317.29 T
(ar) 124.97 317.29 T
(y) 134.02 317.29 T
4 9 Q
(threads) 180.65 317.29 T
6 12 Q
(Module) 108.65 290.29 T
4 9 Q
(threads) 180.65 290.29 T
6 12 Q
(Signature) 108.65 263.29 T
4 9 Q
(synchronization-name) 180.65 263.29 T
7 F
(object) 294.05 263.29 T
4 F
( =>) 318.38 263.29 T
7 F
(name-or-false) 339.98 263.29 T
6 12 Q
(Arguments) 108.65 236.29 T
3 11 Q
(object) 180.65 236.29 T
0 F
(An instance of) 261.65 236.29 T
4 9.5 Q
(<synchronization>) 334.43 236.29 T
0 11 Q
(.) 431.33 236.29 T
6 12 Q
(V) 108.65 208.29 T
(alues) 114.54 208.29 T
3 11 Q
(name-or-false) 180.65 208.29 T
0 F
(An instance of) 261.65 208.29 T
4 9.5 Q
(type-union\050<string>,) 334.43 208.29 T
(singleton\050#f\051\051) 261.65 194.29 T
0 11 Q
(.) 341.45 194.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 19
%%Page: "20" 20
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(20) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
6 12 Q
0 X
(Descr) 126.65 664.95 T
(iption) 152.48 664.95 T
0 11 Q
(Returns the name of the synchr) 198.65 664.95 T
(onization object,) 350.33 664.95 T
3 F
(object) 432.78 664.95 T
0 F
(, if it) 458.24 664.95 T
(was cr) 198.65 650.95 T
(eated with the) 229.77 650.95 T
3 F
(name) 301.98 650.95 T
0 F
( init-keywor) 325.82 650.95 T
(d. Otherwise) 385.45 650.95 T
4 9.5 Q
(#f) 450.98 650.95 T
0 11 Q
( is) 462.38 650.95 T
(r) 198.65 636.95 T
(eturned.) 202.79 636.95 T
2 13 Q
(1.6.2  Loc) 117.65 603.62 T
(ks) 166.05 603.62 T
2 14 Q
(<loc) 117.65 555.95 T
(k>) 140.73 555.95 T
3 13 Q
(Open abstract instantiable class) 328.95 556.62 T
6 12 Q
(Summar) 126.65 531.29 T
(y) 164.12 531.29 T
0 11 Q
(The class of locks.) 198.65 531.29 T
6 12 Q
(Libr) 126.65 503.29 T
(ar) 142.97 503.29 T
(y) 152.02 503.29 T
4 9 Q
(threads) 198.65 503.29 T
6 12 Q
(Module) 126.65 476.29 T
4 9 Q
(threads) 198.65 476.29 T
6 12 Q
(Superclasses) 126.65 449.29 T
4 9.5 Q
(<synchronization>) 198.65 449.29 T
6 12 Q
(Descr) 126.65 422.29 T
(iption) 152.48 422.29 T
0 11 Q
(Locks ar) 198.65 422.29 T
(e synchr) 239.44 422.29 T
(onization objects which change state when) 280.07 422.29 T
(they ar) 198.65 408.29 T
(e) 232.42 408.29 T
3 F
(claimed) 240.44 408.29 T
0 F
( \050using) 274.25 408.29 T
4 9.5 Q
(wait-for) 310.43 408.29 T
0 11 Q
(\051, and r) 356.03 408.29 T
(evert state when) 390.71 408.29 T
3 F
(r) 198.65 394.29 T
(eleased) 202.73 394.29 T
0 F
( \050using) 233.29 394.29 T
4 9.5 Q
(release) 269.47 394.29 T
0 11 Q
(\051.) 309.37 394.29 T
-0.18 (It is normally necessary for pr) 198.65 374.29 P
-0.18 (ograms to ensur) 343.04 374.29 P
-0.18 (e that locks ar) 421.23 374.29 P
-0.18 (e) 487.81 374.29 P
(r) 198.65 360.29 T
(eleased, otherwise ther) 202.79 360.29 T
(e is the possibility of) 314.26 360.29 T
3 F
(deadlock) 416.6 360.29 T
0 F
(. Locks) 454.07 360.29 T
(may be used to r) 198.65 346.29 T
(estrict the access of other thr) 279.36 346.29 T
(eads to shar) 417.17 346.29 T
(ed) 475.13 346.29 T
(r) 198.65 332.29 T
(esour) 202.79 332.29 T
(ces between the synchr) 229.51 332.29 T
(onization and the r) 341.51 332.29 T
(elease. It is) 433.59 332.29 T
-0.36 (common for a pr) 198.65 318.29 P
-0.36 (otected operation to be performed by a body) 278.8 318.29 P
(of code which is evaluated in a single thr) 198.65 304.29 T
(ead between syn-) 397.11 304.29 T
-0.35 (chr) 198.65 290.29 P
-0.35 (onization and r) 214.08 290.29 P
-0.35 (elease. A macr) 287.46 290.29 P
-0.35 (o) 356.99 290.29 P
4 9.5 Q
-0.72 (with-lock) 365.39 290.29 P
0 11 Q
-0.35 (is pr) 421.67 290.29 P
-0.35 (ovided for) 442.7 290.29 P
(this purpose. When a thr) 198.65 276.29 T
(ead uses a lock for) 319.1 276.29 T
3 F
(mutual-exclusion) 411.29 276.29 T
0 F
(in this way) 198.65 262.29 T
(, the thr) 251.17 262.29 T
(ead is said to) 288.82 262.29 T
3 F
(own the lock) 354.85 262.29 T
0 F
(.) 410.04 262.29 T
4 9.5 Q
(<lock>) 198.65 242.29 T
0 11 Q
( has no dir) 232.85 242.29 T
(ect instances; calling) 284.14 242.29 T
4 9.5 Q
(make) 385.96 242.29 T
0 11 Q
( on) 408.76 242.29 T
4 9.5 Q
(<lock>) 426.67 242.29 T
0 11 Q
(r) 198.65 228.29 T
(eturns an instance of) 202.79 228.29 T
4 9.5 Q
(<simple-lock>) 306.17 228.29 T
0 11 Q
(.) 380.27 228.29 T
6 12 Q
(Oper) 126.65 200.62 T
(ations) 148.44 200.62 T
0 11 Q
(The class) 198.65 200.62 T
4 9.5 Q
(<lock>) 245.48 200.62 T
0 11 Q
( provides the following operations:) 279.67 200.62 T
4 9.5 Q
(with-lock) 198.65 180.62 T
0 11 Q
(Execute a body of code between) 279.65 180.62 T
4 9.5 Q
(wait-for) 438.21 180.62 T
0 11 Q
(and) 279.65 166.62 T
4 9.5 Q
(release) 301.02 166.62 T
0 11 Q
( operations.) 340.92 166.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 20
%%Page: "21" 21
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(21) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
2 14 Q
0 X
(with-loc) 99.65 663.62 T
(k) 142.81 663.62 T
3 13 Q
(Statement macr) 389.18 664.29 T
(o) 471.88 664.29 T
6 12 Q
(Summar) 108.65 638.95 T
(y) 146.12 638.95 T
0 11 Q
(Holds a lock while executing a body of code.) 180.65 638.95 T
6 12 Q
(Libr) 108.65 610.95 T
(ar) 124.97 610.95 T
(y) 134.02 610.95 T
4 9 Q
(threads) 180.65 610.95 T
6 12 Q
(Module) 108.65 583.95 T
4 9 Q
(threads) 180.65 583.95 T
6 12 Q
(Macro call) 108.65 556.95 T
4 9 Q
(with-lock \050) 180.65 556.95 T
7 F
(lock) 240.05 556.95 T
4 F
(, #key) 257.05 556.95 T
7 F
(keys) 294.85 556.95 T
4 F
(\051) 312.85 556.95 T
7 F
(body) 191.45 545.95 T
4 F
([failure) 180.65 534.95 T
7 F
(failur) 229.25 534.95 T
(e-expr) 251.59 534.95 T
4 F
(]) 276.08 534.95 T
(end) 180.65 523.95 T
6 12 Q
(Arguments) 108.65 497.95 T
3 11 Q
(lock) 180.65 497.95 T
0 F
(An instance of) 261.65 497.95 T
4 9.5 Q
(<lock>) 334.43 497.95 T
0 11 Q
(.) 368.64 497.95 T
3 F
(keys) 180.65 477.95 T
0 F
(Zer) 261.65 477.95 T
(o or mor) 278.4 477.95 T
(e of the keywor) 320.12 477.95 T
(ds pr) 395.4 477.95 T
(ovided by) 420.29 477.95 T
4 9.5 Q
(wait-for) 261.65 463.95 T
0 11 Q
(,  page 18) 306.43 463.95 T
(.) 351.93 463.95 T
3 F
(body) 180.65 443.95 T
0 F
(A body of Dylan code.) 261.65 443.95 T
6 12 Q
(V) 108.65 416.29 T
(alues) 114.54 416.29 T
3 11 Q
(values) 180.65 416.29 T
0 F
(Zer) 261.65 416.29 T
(o or mor) 278.4 416.29 T
(e instances of) 320.12 416.29 T
4 9.5 Q
(<object>) 387.88 416.29 T
0 11 Q
(.) 433.48 416.29 T
6 12 Q
(Exceptions) 108.65 388.29 T
4 9.5 Q
(with-lock) 180.65 388.29 T
0 11 Q
( may signal a condition of the following class \050a) 231.95 388.29 T
(subclass of) 180.65 374.29 T
4 9.5 Q
(<serious-condition>) 236.11 374.29 T
0 11 Q
(\051:) 344.41 374.29 T
4 9.5 Q
(<timeout-expired>) 180.65 348.29 T
0 11 Q
(This is signalled when) 261.65 330.29 T
4 9.5 Q
(with-lock) 373.05 330.29 T
0 11 Q
( did not) 424.35 330.29 T
-0.22 (succeed in claiming the lock within the time-) 261.65 316.29 P
(out period.) 261.65 302.29 T
6 12 Q
(Descr) 108.65 274.62 T
(iption) 134.48 274.62 T
0 11 Q
(Execute the) 180.65 274.62 T
3 F
(body) 239.44 274.62 T
0 F
( with) 260.42 274.62 T
3 F
(lock) 288.28 274.62 T
0 F
( held. If a) 305.59 274.62 T
4 9.5 Q
(failure) 353.8 274.62 T
0 11 Q
( clause is sup-) 393.7 274.62 T
(plied, then it will be evaluated and its values r) 180.65 260.62 T
(eturned fr) 405.32 260.62 T
(om) 454.11 260.62 T
4 9.5 Q
(with-lock) 180.65 246.62 T
0 11 Q
( if the lock cannot be claimed \050because a timeout) 231.95 246.62 T
(occurr) 180.65 232.62 T
(ed\051. The default, if no) 211.55 232.62 T
4 9.5 Q
(failure) 318.71 232.62 T
0 11 Q
( clause is supplied, is to) 358.61 232.62 T
-0.29 (signal an exception of class) 180.65 218.62 P
4 9.5 Q
-0.61 (<timeout-expired>) 313.4 218.62 P
0 11 Q
-0.29 (. If ther) 410.3 218.62 P
-0.29 (e is no) 444.74 218.62 P
(failur) 180.65 204.62 T
(e,) 206.99 204.62 T
4 9.5 Q
(with-lock) 217.76 204.62 T
0 11 Q
( r) 269.06 204.62 T
(eturns the r) 275.96 204.62 T
(esults of evaluating the body) 331.76 204.62 T
(.) 471.03 204.62 T
6 12 Q
(Example) 108.65 176.95 T
0 11 Q
-0.46 (If no) 180.65 176.95 P
4 9.5 Q
-0.95 (failure) 205.01 176.95 P
0 11 Q
-0.46 ( clause is supplied, the macr) 244.91 176.95 P
-0.46 (o expands into code) 379.55 176.95 P
(equivalent to the following:) 180.65 162.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 21
%%Page: "22" 22
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(22) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
4 F
0 X
(let the-lock =) 198.65 666.95 T
7 F
(lock) 279.65 666.95 T
4 F
(;) 296.65 666.95 T
(if \050wait-for\050the-lock,) 198.65 647.95 T
7 F
(keys) 322.85 647.95 T
3 F
( ...) 340.85 647.95 T
4 F
(\051\051) 349.85 647.95 T
(block \050\051) 209.45 636.95 T
7 F
(body) 220.25 625.95 T
4 F
( ...) 240.09 625.95 T
(cleanup) 209.45 614.95 T
(release\050the-lock\051) 220.25 603.95 T
(end block) 209.45 592.95 T
(else) 198.65 581.95 T
(signal\050make\050<timeout-expired>,) 209.45 570.95 T
(synchronization: the-lock\051) 274.25 559.95 T
(end if) 198.65 548.95 T
2 13 Q
(1.6.3  Semaphores) 117.65 517.29 T
2 14 Q
(<semaphore>) 117.65 469.62 T
3 13 Q
(Open instantiable primary class) 327.96 470.29 T
6 12 Q
(Summar) 126.65 444.95 T
(y) 164.12 444.95 T
0 11 Q
(The class of traditional counting semaphor) 198.65 444.95 T
(es.) 406.18 444.95 T
6 12 Q
(Libr) 126.65 416.95 T
(ar) 142.97 416.95 T
(y) 152.02 416.95 T
4 9 Q
(threads) 198.65 416.95 T
6 12 Q
(Module) 126.65 389.95 T
4 9 Q
(threads) 198.65 389.95 T
6 12 Q
(Superclasses) 126.65 362.95 T
4 9 Q
(<lock>) 198.65 362.95 T
6 12 Q
(Descr) 126.65 335.95 T
(iption) 152.48 335.95 T
0 11 Q
(The) 198.65 335.95 T
4 9.5 Q
(<semaphore>) 219.81 335.95 T
0 11 Q
( class is a class r) 282.51 335.95 T
(epr) 359.6 335.95 T
(esenting a traditional) 375.63 335.95 T
(counting semaphor) 198.65 321.95 T
(e. An instance of) 292.94 321.95 T
4 9.5 Q
(<semaphore>) 376.5 321.95 T
0 11 Q
( contains a) 439.2 321.95 T
(counter in its internal state. Calling) 198.65 307.95 T
4 9.5 Q
(release) 372.01 307.95 T
0 11 Q
( on a semaphor) 411.91 307.95 T
(e) 486.38 307.95 T
(incr) 198.65 293.95 T
(ements the internal count. Calling) 217.28 293.95 T
4 9.5 Q
(wait-for) 384.78 293.95 T
0 11 Q
( on a sema-) 430.38 293.95 T
(phor) 198.65 279.95 T
(e decr) 221.81 279.95 T
(ements the internal count, unless it is zer) 250.85 279.95 T
(o, in) 448.83 279.95 T
-0.41 (which case the thr) 198.65 265.95 P
-0.41 (ead blocks until another thr) 285.44 265.95 P
-0.41 (ead r) 417.9 265.95 P
-0.41 (eleases the) 441.88 265.95 P
(semaphor) 198.65 251.95 T
(e.) 246.96 251.95 T
(Semaphor) 198.65 231.95 T
(es ar) 248.07 231.95 T
(e less ef) 270.4 231.95 T
(\336cient than exclusive locks, but they) 307.7 231.95 T
(have asynchr) 198.65 217.95 T
(onous pr) 262.9 217.95 T
(operties which may be useful \050for) 306.12 217.95 T
(example for managing queues or pools of shar) 198.65 203.95 T
(ed r) 423.95 203.95 T
(esour) 442.84 203.95 T
(ces\051.) 469.56 203.95 T
(Semaphor) 198.65 189.95 T
(es may be r) 248.07 189.95 T
(eleased by any thr) 303.08 189.95 T
(ead, so ther) 391.58 189.95 T
(e is no) 447.39 189.95 T
(built-in concept of a thr) 198.65 175.95 T
(ead owning a semaphor) 312.56 175.95 T
(e. It is not) 429.42 175.95 T
(necessary for a thr) 198.65 161.95 T
(ead to r) 287.66 161.95 T
(elease a semaphor) 324.39 161.95 T
(e after waiting) 412.87 161.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 22
%%Page: "23" 23
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(23) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
0 11 Q
0 X
(for it \321 although semaphor) 180.65 665.62 T
(es may be used as locks if they) 315.61 665.62 T
(do.) 180.65 651.62 T
6 12 Q
(Init-k) 108.65 623.95 T
(e) 129.79 623.95 T
(yw) 135.08 623.95 T
(ords) 147.02 623.95 T
3 11 Q
(initial-count) 180.65 623.95 T
0 F
(A non-negative integer) 261.65 623.95 T
(, corr) 373.11 623.95 T
(esponding to) 397.99 623.95 T
(the initial state of the internal counter) 261.65 609.95 T
(. The) 443.45 609.95 T
(default value is 0.) 261.65 595.95 T
3 F
(maximum-count) 180.65 575.95 T
0 F
-0.48 (A non-negative integer corr) 261.65 575.95 P
-0.48 (esponding to the) 394.61 575.95 P
(maximum permitted value of the internal) 261.65 561.95 T
(counter) 261.65 547.95 T
(. The default value is the lar) 297.96 547.95 T
(gest) 432.98 547.95 T
(value supported by the implementation,) 261.65 533.95 T
(which is the value of the constant) 261.65 519.95 T
4 9.5 Q
($semaphore-maximum-count-limit) 261.65 505.95 T
0 11 Q
(. This) 432.65 505.95 T
(constant will not be smaller than 10000.) 261.65 491.95 T
2 14 Q
(wait-f) 99.65 443.95 T
(or) 129.41 443.95 T
3 13 Q
(Sealed method) 402.9 444.62 T
6 12 Q
(Summar) 108.65 419.29 T
(y) 146.12 419.29 T
0 11 Q
(Claims a semaphor) 180.65 419.29 T
(e object.) 274.04 419.29 T
6 12 Q
(Libr) 108.65 391.29 T
(ar) 124.97 391.29 T
(y) 134.02 391.29 T
4 9 Q
(threads) 180.65 391.29 T
6 12 Q
(Module) 108.65 364.29 T
4 9 Q
(threads) 180.65 364.29 T
6 12 Q
(Signature) 108.65 337.29 T
4 9 Q
(wait-for) 180.65 337.29 T
7 F
(object) 229.25 337.29 T
4 F
( #key) 253.57 337.29 T
7 F
(timeout) 285.98 337.29 T
4 F
( =>) 317.48 337.29 T
7 F
(success) 339.08 337.29 T
6 12 Q
(Arguments) 108.65 310.29 T
3 11 Q
(object) 180.65 310.29 T
0 F
-0.41 (An instance of) 261.65 310.29 P
4 9.5 Q
-0.86 (<semaphore>) 333.19 310.29 P
0 11 Q
-0.41 (. The semaphor) 395.89 310.29 P
-0.41 (e) 470.04 310.29 P
(object to wait for) 261.65 296.29 T
(.) 342.55 296.29 T
3 F
(timeout) 180.65 276.29 T
0 F
(T) 261.65 276.29 T
(ime-out interval. If the value is) 267.79 276.29 T
4 9.5 Q
(#f) 420.14 276.29 T
0 11 Q
(\050the) 437.24 276.29 T
-0.26 (default\051, the time-out interval never elapses.) 261.65 262.29 P
(Otherwise the value should be a) 261.65 248.29 T
4 9.5 Q
(<real>) 421.26 248.29 T
0 11 Q
(,) 455.46 248.29 T
(corr) 261.65 234.29 T
(esponding to the desir) 281.03 234.29 T
(ed interval in sec-) 389.52 234.29 T
(onds.) 261.65 220.29 T
6 12 Q
(V) 108.65 192.62 T
(alues) 114.54 192.62 T
3 11 Q
(success) 180.65 192.62 T
0 F
(An instance of) 261.65 192.62 T
4 9.5 Q
(<boolean>) 334.43 192.62 T
0 11 Q
(.) 385.73 192.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 23
%%Page: "24" 24
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(24) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
6 12 Q
0 X
(Descr) 126.65 664.95 T
(iption) 152.48 664.95 T
0 11 Q
(Decr) 198.65 664.95 T
(ements the internal count of the semaphor) 221.46 664.95 T
(e object,) 426.78 664.95 T
(blocking if the count is zer) 198.65 650.95 T
(o.) 326.82 650.95 T
6 12 Q
(See also) 126.65 623.29 T
4 9.5 Q
(wait-for) 198.65 623.29 T
0 11 Q
(,  page 18.) 243.43 623.29 T
2 14 Q
(release) 117.65 574.95 T
3 13 Q
(Sealed method) 420.9 575.62 T
6 12 Q
(Summar) 126.65 550.29 T
(y) 164.12 550.29 T
0 11 Q
(Releases a semaphor) 198.65 550.29 T
(e object.) 299.14 550.29 T
6 12 Q
(Libr) 126.65 522.29 T
(ar) 142.97 522.29 T
(y) 152.02 522.29 T
4 9 Q
(threads) 198.65 522.29 T
6 12 Q
(Module) 126.65 495.29 T
4 9 Q
(threads) 198.65 495.29 T
6 12 Q
(Signature) 126.65 468.29 T
4 9 Q
(release) 198.65 468.29 T
7 F
(object) 241.85 468.29 T
4 F
( #key => \050\051) 266.17 468.29 T
6 12 Q
(Arguments) 126.65 441.29 T
3 11 Q
(object) 198.65 441.29 T
0 F
(An instance of) 279.65 441.29 T
4 9.5 Q
(<semaphore>) 352.43 441.29 T
0 11 Q
(.) 415.14 441.29 T
6 12 Q
(V) 126.65 413.29 T
(alues) 132.54 413.29 T
0 11 Q
(None.) 198.65 413.29 T
6 12 Q
(Exceptions) 126.65 385.29 T
0 11 Q
(An implementation of this) 198.65 385.29 T
4 9.5 Q
(release) 329.79 385.29 T
0 11 Q
( method is permitted to) 369.69 385.29 T
(signal a condition of the following class, which is a subclass) 198.65 371.29 T
(of) 198.65 357.29 T
4 9.5 Q
(<error>) 211.07 357.29 T
0 11 Q
(:) 250.97 357.29 T
4 9.5 Q
(<count-exceeded-error>) 198.65 334.29 T
0 11 Q
(This may be signalled when an attempt is) 279.65 316.79 T
(made to r) 279.65 302.79 T
(elease a) 326.09 302.79 T
4 9.5 Q
(<semaphore>) 366.26 302.79 T
0 11 Q
( when the) 428.96 302.79 T
(internal counter is alr) 279.65 288.79 T
(eady at its maximum) 383.64 288.79 T
(count.) 279.65 274.79 T
6 12 Q
(Descr) 126.65 247.12 T
(iption) 152.48 247.12 T
0 11 Q
(Releases a semaphor) 198.65 247.12 T
(e object, by incr) 299.14 247.12 T
(ementing its internal) 374.65 247.12 T
(count.) 198.65 233.12 T
6 12 Q
(See also) 126.65 205.45 T
4 9.5 Q
(release) 198.65 205.45 T
0 11 Q
(,  page 19.) 238.55 205.45 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 24
%%Page: "25" 25
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(25) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
2 13 Q
0 X
(1.6.4  Exc) 99.65 664.29 T
(lusive loc) 148.06 664.29 T
(ks) 196.46 664.29 T
2 14 Q
(<e) 99.65 616.62 T
(xc) 112.58 616.62 T
(lusive-loc) 125.14 616.62 T
(k>) 177.89 616.62 T
3 13 Q
(Open abstract instantiable class) 310.95 617.29 T
6 12 Q
(Summar) 108.65 591.95 T
(y) 146.12 591.95 T
0 11 Q
(The class of locks which pr) 180.65 591.95 T
(ohibit unlocking by thr) 311.09 591.95 T
(eads that) 423.11 591.95 T
(do not own the lock.) 180.65 577.95 T
6 12 Q
(Libr) 108.65 550.29 T
(ar) 124.97 550.29 T
(y) 134.02 550.29 T
4 9 Q
(threads) 180.65 550.29 T
6 12 Q
(Module) 108.65 523.29 T
4 9 Q
(threads) 180.65 523.29 T
6 12 Q
(Superclasses) 108.65 496.29 T
4 9 Q
(<lock>) 180.65 496.29 T
6 12 Q
(Descr) 108.65 469.29 T
(iption) 134.48 469.29 T
0 11 Q
(The class of locks which pr) 180.65 469.29 T
(ohibit unlocking by thr) 311.09 469.29 T
(eads that) 423.11 469.29 T
(do not own the lock.) 180.65 455.29 T
(The notion of ownership is dir) 180.65 435.29 T
(ectly supported by the class,) 328.09 435.29 T
(and a thr) 180.65 421.29 T
(ead can test whether an) 224.41 421.29 T
4 9.5 Q
(<exclusive-lock>) 341.89 421.29 T
0 11 Q
( is cur-) 433.09 421.29 T
(r) 180.65 407.29 T
(ently owned. An instance of) 184.79 407.29 T
4 9.5 Q
(<exclusive-lock>) 323.98 407.29 T
0 11 Q
( can only be) 415.18 407.29 T
(owned by one thr) 180.65 393.29 T
(ead at a time, by calling) 266.48 393.29 T
4 9.5 Q
(wait-for) 384.28 393.29 T
0 11 Q
( on the) 429.88 393.29 T
(lock.) 180.65 379.29 T
-0.1 (Once owned, any attempt by any other thr) 180.65 359.29 P
-0.1 (ead to wait for the) 386.57 359.29 P
(lock will cause that thr) 180.65 345.29 T
(ead to block. It is an err) 290.79 345.29 T
(or for a thr) 404.23 345.29 T
(ead) 456.48 345.29 T
(to r) 180.65 331.29 T
(elease an) 197.14 331.29 T
4 9.5 Q
(<exclusive-lock>) 243.71 331.29 T
0 11 Q
( if another thr) 334.91 331.29 T
(ead owns it.) 401.67 331.29 T
4 9.5 Q
(<exclusive-lock>) 180.65 311.29 T
0 11 Q
( has no dir) 271.85 311.29 T
(ect instances; calling) 323.14 311.29 T
4 9.5 Q
(make) 424.96 311.29 T
0 11 Q
( on) 447.76 311.29 T
4 9.5 Q
(<exclusive-lock>) 180.65 297.29 T
0 11 Q
(r) 277.55 297.29 T
(eturns an instance of) 281.7 297.29 T
4 9.5 Q
(<simple-lock>) 385.07 297.29 T
0 11 Q
(.) 459.17 297.29 T
6 12 Q
(Oper) 108.65 269.62 T
(ations) 130.44 269.62 T
0 11 Q
(The class) 180.65 269.62 T
4 9.5 Q
(<exclusive-lock>) 227.48 269.62 T
0 11 Q
(provides the following opera-) 324.38 269.62 T
(tions:) 180.65 255.62 T
4 9.5 Q
(owned?) 180.65 235.62 T
0 11 Q
(T) 261.65 235.62 T
(ests to see if the lock has been claimed by) 267.38 235.62 T
(the curr) 261.65 221.62 T
(ent thr) 299.66 221.62 T
(ead.) 331.81 221.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "25" 25
%%Page: "26" 26
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(26) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
2 14 Q
0 X
(release) 117.65 663.62 T
3 13 Q
(Pr) 452.33 664.29 T
(otocol) 465.1 664.29 T
6 12 Q
(Summar) 126.65 638.95 T
(y) 164.12 638.95 T
0 11 Q
(Releases an exclusive lock.) 198.65 638.95 T
6 12 Q
(Libr) 126.65 610.95 T
(ar) 142.97 610.95 T
(y) 152.02 610.95 T
4 9 Q
(threads) 198.65 610.95 T
6 12 Q
(Module) 126.65 583.95 T
4 9 Q
(threads) 198.65 583.95 T
6 12 Q
(Signature) 126.65 556.95 T
4 9 Q
(release) 198.65 556.95 T
7 F
(object) 241.85 556.95 T
4 F
( #key => \050\051) 266.17 556.95 T
6 12 Q
(Arguments) 126.65 529.95 T
3 11 Q
(object) 198.65 529.95 T
0 F
(An instance of) 279.65 529.95 T
4 9.5 Q
(<exclusive-lock>) 352.43 529.95 T
0 11 Q
(.) 443.64 529.95 T
6 12 Q
(V) 126.65 501.95 T
(alues) 132.54 501.95 T
0 11 Q
(None.) 198.65 501.95 T
6 12 Q
(Exceptions) 126.65 473.95 T
0 11 Q
(Implementations of) 198.65 473.95 T
4 9.5 Q
(release) 296.65 473.95 T
0 11 Q
( methods for subclasses of) 336.55 473.95 T
4 9.5 Q
(<exclusive-lock>) 198.65 459.95 T
0 11 Q
( ar) 289.85 459.95 T
(e permitted to signal a condition of the) 302.24 459.95 T
(following class, which is a subclass of) 198.65 445.95 T
4 9.5 Q
(<error>) 383.92 445.95 T
0 11 Q
(:) 423.82 445.95 T
4 9.5 Q
(<not-owned-error>) 198.65 422.95 T
0 11 Q
(This may be signalled when an attempt is) 279.65 405.45 T
-0.16 (made to r) 279.65 391.45 P
-0.16 (elease an) 325.77 391.45 P
4 9.5 Q
-0.33 (<exclusive-lock>) 372.02 391.45 P
0 11 Q
-0.16 ( when) 463.22 391.45 P
(the lock is not owned by the curr) 279.65 377.45 T
(ent thr) 439.26 377.45 T
(ead.) 471.4 377.45 T
6 12 Q
(Descr) 126.65 349.79 T
(iption) 152.48 349.79 T
0 11 Q
(Releases a lock that is owned by the calling thr) 198.65 349.79 T
(ead. It is an) 424.9 349.79 T
(err) 198.65 335.79 T
(or if the lock is not owned.) 212.41 335.79 T
(The Thr) 198.65 315.79 T
(eads library does not pr) 237.1 315.79 T
(ovide a method on) 352.46 315.79 T
4 9.5 Q
(release) 446.48 315.79 T
0 11 Q
(for) 198.65 301.79 T
4 9.5 Q
(<exclusive-lock>) 215.41 301.79 T
0 11 Q
(, which is an open abstract class. Each) 306.61 301.79 T
-0.19 (concr) 198.65 287.79 P
-0.19 (ete subclass will have an applicable method which may) 224.97 287.79 P
(signal err) 198.65 273.79 T
(ors accor) 244.24 273.79 T
(ding to the pr) 287.43 273.79 T
(otocol described above.) 353.73 273.79 T
2 14 Q
(o) 117.65 225.79 T
(wned?) 124.51 225.79 T
3 13 Q
(Open generic function) 378.14 226.45 T
6 12 Q
(Summar) 126.65 201.12 T
(y) 164.12 201.12 T
0 11 Q
(T) 198.65 201.12 T
(ests whether an exclusive lock has been claimed by the cur-) 204.38 201.12 T
(r) 198.65 187.12 T
(ent thr) 202.79 187.12 T
(ead.) 234.94 187.12 T
6 12 Q
(Libr) 126.65 159.45 T
(ar) 142.97 159.45 T
(y) 152.02 159.45 T
4 9 Q
(threads) 198.65 159.45 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "26" 26
%%Page: "27" 27
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(27) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
6 12 Q
0 X
(Module) 108.65 664.95 T
4 9 Q
(threads) 180.65 664.95 T
6 12 Q
(Signature) 108.65 637.95 T
4 9 Q
(owned?) 180.65 637.95 T
7 F
(object) 218.45 637.95 T
4 F
( =>) 242.77 637.95 T
7 F
(owned?) 264.38 637.95 T
6 12 Q
(Arguments) 108.65 610.95 T
3 11 Q
(object) 180.65 610.95 T
0 F
(An instance of) 261.65 610.95 T
4 9.5 Q
(<exclusive-lock>) 334.43 610.95 T
0 11 Q
(.) 425.64 610.95 T
6 12 Q
(V) 108.65 582.95 T
(alues) 114.54 582.95 T
3 11 Q
(owned?) 180.65 582.95 T
0 F
(An instance of) 261.65 582.95 T
4 9.5 Q
(<boolean>) 334.43 582.95 T
0 11 Q
(.) 385.73 582.95 T
6 12 Q
(Descr) 108.65 554.95 T
(iption) 134.48 554.95 T
0 11 Q
-0.04 (T) 180.65 554.95 P
-0.04 (ests whether the exclusive lock has been claimed by the cur-) 186.38 554.95 P
(r) 180.65 540.95 T
(ent thr) 184.79 540.95 T
(ead.) 216.94 540.95 T
2 13 Q
(1.6.5  Recur) 99.65 507.62 T
(sive loc) 159.36 507.62 T
(ks) 198.28 507.62 T
2 14 Q
(<recur) 99.65 459.95 T
(sive-loc) 134.91 459.95 T
(k>) 177.46 459.95 T
3 13 Q
(Open instantiable primary class) 309.96 460.62 T
6 12 Q
(Summar) 108.65 435.29 T
(y) 146.12 435.29 T
0 11 Q
(The class of locks that can be locked r) 180.65 435.29 T
(ecursively) 362.07 435.29 T
(.) 410.65 435.29 T
6 12 Q
(Libr) 108.65 407.29 T
(ar) 124.97 407.29 T
(y) 134.02 407.29 T
4 9 Q
(threads) 180.65 407.29 T
6 12 Q
(Module) 108.65 380.29 T
4 9 Q
(threads) 180.65 380.29 T
6 12 Q
(Superclasses) 108.65 353.29 T
4 9.5 Q
(<exclusive-lock>) 180.65 353.29 T
6 12 Q
(Descr) 108.65 326.29 T
(iption) 134.48 326.29 T
0 11 Q
(A thr) 180.65 326.29 T
(ead can lock a) 206.09 326.29 T
4 9.5 Q
(<recursive-lock>) 277.07 326.29 T
0 11 Q
( multiple times, r) 368.27 326.29 T
(ecur-) 451.27 326.29 T
-0.36 (sively) 180.65 312.29 P
-0.36 (, but the lock must later be r) 208.09 312.29 P
-0.36 (eleased the same number of) 341.31 312.29 P
(times. The lock will be fr) 180.65 298.29 T
(eed on the last of these r) 300.14 298.29 T
(eleases.) 417.52 298.29 T
2 14 Q
(wait-f) 99.65 250.29 T
(or) 129.41 250.29 T
3 13 Q
(Sealed method) 402.9 250.95 T
6 12 Q
(Summar) 108.65 225.62 T
(y) 146.12 225.62 T
0 11 Q
(Claims a r) 180.65 225.62 T
(ecursive lock.) 229.87 225.62 T
6 12 Q
(Libr) 108.65 197.62 T
(ar) 124.97 197.62 T
(y) 134.02 197.62 T
4 9 Q
(threads) 180.65 197.62 T
6 12 Q
(Module) 108.65 170.62 T
4 9 Q
(threads) 180.65 170.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "27" 27
%%Page: "28" 28
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(28) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
6 12 Q
0 X
(Signature) 126.65 664.95 T
4 9 Q
(wait-for) 198.65 664.95 T
7 F
(object) 247.25 664.95 T
4 F
( #key) 271.58 664.95 T
7 F
(timeout) 303.98 664.95 T
4 F
( =>) 335.48 664.95 T
7 F
(success) 357.08 664.95 T
6 12 Q
(Arguments) 126.65 637.95 T
3 11 Q
(object) 198.65 637.95 T
0 F
(An instance of) 279.65 637.95 T
4 9.5 Q
(<recursive-lock>) 352.43 637.95 T
0 11 Q
(.) 443.64 637.95 T
3 F
(timeout) 198.65 617.95 T
0 F
(T) 279.65 617.95 T
(ime-out interval. If the value is) 285.79 617.95 T
4 9.5 Q
(#f) 438.14 617.95 T
0 11 Q
(\050the) 455.24 617.95 T
-0.26 (default\051, the time-out interval never elapses.) 279.65 603.95 P
(Otherwise the value should be a) 279.65 589.95 T
4 9.5 Q
(<real>) 439.26 589.95 T
0 11 Q
(,) 473.46 589.95 T
(corr) 279.65 575.95 T
(esponding to the desir) 299.03 575.95 T
(ed interval in sec-) 407.52 575.95 T
(onds.) 279.65 561.95 T
6 12 Q
(V) 126.65 534.29 T
(alues) 132.54 534.29 T
3 11 Q
(success) 198.65 534.29 T
0 F
(An instance of) 279.65 534.29 T
4 9.5 Q
(<boolean>) 352.43 534.29 T
0 11 Q
(.) 403.73 534.29 T
6 12 Q
(Descr) 126.65 506.29 T
(iption) 152.48 506.29 T
0 11 Q
(Claims a r) 198.65 506.29 T
(ecursive lock, blocking if it is owned by another) 247.87 506.29 T
(thr) 198.65 492.29 T
(ead.) 212.78 492.29 T
6 12 Q
(See also) 126.65 464.62 T
4 9.5 Q
(wait-for) 198.65 464.62 T
0 11 Q
(,  page 18.) 243.43 464.62 T
2 14 Q
(release) 117.65 416.29 T
3 13 Q
(Sealed method) 420.9 416.95 T
6 12 Q
(Summar) 126.65 391.62 T
(y) 164.12 391.62 T
0 11 Q
(Releases a r) 198.65 391.62 T
(ecursive lock.) 254.98 391.62 T
6 12 Q
(Libr) 126.65 363.62 T
(ar) 142.97 363.62 T
(y) 152.02 363.62 T
4 9 Q
(threads) 198.65 363.62 T
6 12 Q
(Module) 126.65 336.62 T
4 9 Q
(threads) 198.65 336.62 T
6 12 Q
(Signature) 126.65 309.62 T
4 9 Q
(release) 198.65 309.62 T
7 F
(object) 241.85 309.62 T
4 F
( #key => \050\051) 266.17 309.62 T
6 12 Q
(Arguments) 126.65 282.62 T
3 11 Q
(object) 198.65 282.62 T
0 F
(An instance of) 279.65 282.62 T
4 9.5 Q
(<recursive-lock>) 352.43 282.62 T
0 11 Q
(.) 443.64 282.62 T
6 12 Q
(V) 126.65 254.62 T
(alues) 132.54 254.62 T
0 11 Q
(None.) 198.65 254.62 T
6 12 Q
(Descr) 126.65 226.62 T
(iption) 152.48 226.62 T
0 11 Q
-0.32 (Releases a r) 198.65 226.62 P
-0.32 (ecursive lock, and makes it available if it has been) 254.34 226.62 P
(r) 198.65 212.62 T
(eleased as many times as it was claimed with) 202.79 212.62 T
4 9.5 Q
(wait-for) 424.91 212.62 T
0 11 Q
(.) 470.51 212.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "28" 28
%%Page: "29" 29
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(29) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
2 14 Q
0 X
(o) 99.65 663.62 T
(wned?) 106.51 663.62 T
3 13 Q
(Sealed method) 402.9 664.29 T
6 12 Q
(Summar) 108.65 638.95 T
(y) 146.12 638.95 T
0 11 Q
(T) 180.65 638.95 T
(ests whether a r) 186.38 638.95 T
(ecursive lock has been claimed by the cur-) 262.91 638.95 T
(r) 180.65 624.95 T
(ent thr) 184.79 624.95 T
(ead.) 216.94 624.95 T
6 12 Q
(Libr) 108.65 597.29 T
(ar) 124.97 597.29 T
(y) 134.02 597.29 T
4 9 Q
(threads) 180.65 597.29 T
6 12 Q
(Module) 108.65 570.29 T
4 9 Q
(threads) 180.65 570.29 T
6 12 Q
(Signature) 108.65 543.29 T
4 9 Q
(owned?) 180.65 543.29 T
7 F
(object) 218.45 543.29 T
4 F
( =>) 242.77 543.29 T
7 F
(owned?) 264.38 543.29 T
6 12 Q
(Arguments) 108.65 516.29 T
3 11 Q
(object) 180.65 516.29 T
0 F
(An instance of) 261.65 516.29 T
4 9.5 Q
(<recursive-lock>) 334.43 516.29 T
0 11 Q
(.) 425.64 516.29 T
6 12 Q
(V) 108.65 488.29 T
(alues) 114.54 488.29 T
3 11 Q
(owned?) 180.65 488.29 T
0 F
(An instance of) 261.65 488.29 T
4 9.5 Q
(<boolean>) 334.43 488.29 T
0 11 Q
(.) 385.73 488.29 T
6 12 Q
(Descr) 108.65 460.29 T
(iption) 134.48 460.29 T
0 11 Q
(T) 180.65 460.29 T
(ests whether a r) 186.38 460.29 T
(ecursive lock has been claimed by the cur-) 262.91 460.29 T
(r) 180.65 446.29 T
(ent thr) 184.79 446.29 T
(ead.) 216.94 446.29 T
2 13 Q
(1.6.6  Simple loc) 99.65 412.95 T
(ks) 182.42 412.95 T
2 14 Q
(<simple-loc) 99.65 365.29 T
(k>) 162.93 365.29 T
3 13 Q
(Open instantiable primary class) 309.96 365.95 T
6 12 Q
(Summar) 108.65 340.62 T
(y) 146.12 340.62 T
0 11 Q
(A simple and ef) 180.65 340.62 T
(\336cient lock.) 257.47 340.62 T
6 12 Q
(Libr) 108.65 312.62 T
(ar) 124.97 312.62 T
(y) 134.02 312.62 T
4 9 Q
(threads) 180.65 312.62 T
6 12 Q
(Module) 108.65 285.62 T
4 9 Q
(threads) 180.65 285.62 T
6 12 Q
(Superclasses) 108.65 258.62 T
4 9.5 Q
(<exclusive-lock>) 180.65 258.62 T
6 12 Q
(Descr) 108.65 231.62 T
(iption) 134.48 231.62 T
0 11 Q
-0 (The) 180.65 231.62 P
4 9.5 Q
-0 (<simple-lock>) 201.81 231.62 P
0 11 Q
-0 ( class r) 275.91 231.62 P
-0 (epr) 308.47 231.62 P
-0 (esents the most simple and ef) 324.49 231.62 P
-0 (\336-) 467.33 231.62 P
(cient mutual exclusion synchr) 180.65 217.62 T
(onization primitive. It is an) 326.06 217.62 T
(err) 180.65 203.62 T
(or to lock a) 194.41 203.62 T
4 9.5 Q
(<simple-lock>) 251.06 203.62 T
0 11 Q
( r) 325.16 203.62 T
(ecursively . An attempt to do) 332.06 203.62 T
-0.26 (so might r) 180.65 189.62 P
-0.26 (esult in an err) 229.47 189.62 P
-0.26 (or being signalled, or deadlock occur-) 295.56 189.62 P
(ring.) 180.65 175.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "29" 29
%%Page: "30" 30
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(30) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
2 14 Q
0 X
(wait-f) 117.65 663.62 T
(or) 147.41 663.62 T
3 13 Q
(Sealed method) 420.9 664.29 T
6 12 Q
(Summar) 126.65 638.95 T
(y) 164.12 638.95 T
0 11 Q
(Claims a simple lock.) 198.65 638.95 T
6 12 Q
(Libr) 126.65 610.95 T
(ar) 142.97 610.95 T
(y) 152.02 610.95 T
4 9 Q
(threads) 198.65 610.95 T
6 12 Q
(Module) 126.65 583.95 T
4 9 Q
(threads) 198.65 583.95 T
6 12 Q
(Signature) 126.65 556.95 T
4 9 Q
(wait-for) 198.65 556.95 T
7 F
(object) 247.25 556.95 T
4 F
( #key) 271.58 556.95 T
7 F
(timeout) 303.98 556.95 T
4 F
( =>) 335.48 556.95 T
7 F
(success) 357.08 556.95 T
6 12 Q
(Arguments) 126.65 529.95 T
3 11 Q
(object) 198.65 529.95 T
0 F
(An instance of) 279.65 529.95 T
4 9.5 Q
(<simple-lock>) 352.43 529.95 T
0 11 Q
(.) 426.54 529.95 T
3 F
(timeout) 198.65 509.95 T
0 F
(T) 279.65 509.95 T
(ime-out interval. If the value is) 285.79 509.95 T
4 9.5 Q
(#f) 438.14 509.95 T
0 11 Q
(\050the) 455.24 509.95 T
-0.26 (default\051, the time-out interval never elapses.) 279.65 495.95 P
(Otherwise the value should be a) 279.65 481.95 T
4 9.5 Q
(<real>) 439.26 481.95 T
0 11 Q
(,) 473.46 481.95 T
(corr) 279.65 467.95 T
(esponding to the desir) 299.03 467.95 T
(ed interval in sec-) 407.52 467.95 T
(onds.) 279.65 453.95 T
6 12 Q
(V) 126.65 426.29 T
(alues) 132.54 426.29 T
3 11 Q
(success) 198.65 426.29 T
0 F
(An instance of) 279.65 426.29 T
4 9.5 Q
(<boolean>) 352.43 426.29 T
0 11 Q
(.) 403.73 426.29 T
6 12 Q
(Descr) 126.65 398.29 T
(iption) 152.48 398.29 T
0 11 Q
(Claims a simple lock, blocking if it is owned by another) 198.65 398.29 T
(thr) 198.65 384.29 T
(ead.) 212.78 384.29 T
6 12 Q
(See also) 126.65 356.62 T
4 9.5 Q
(wait-for) 198.65 356.62 T
0 11 Q
(,  page 18.) 243.43 356.62 T
2 14 Q
(release) 117.65 308.29 T
3 13 Q
(Sealed method) 420.9 308.95 T
6 12 Q
(Summar) 126.65 283.62 T
(y) 164.12 283.62 T
0 11 Q
(Releases a simple lock.) 198.65 283.62 T
6 12 Q
(Libr) 126.65 255.62 T
(ar) 142.97 255.62 T
(y) 152.02 255.62 T
4 9 Q
(threads) 198.65 255.62 T
6 12 Q
(Module) 126.65 228.62 T
4 9 Q
(threads) 198.65 228.62 T
6 12 Q
(Signature) 126.65 201.62 T
4 9 Q
(release) 198.65 201.62 T
7 F
(object) 241.85 201.62 T
4 F
( #key => \050\051) 266.17 201.62 T
6 12 Q
(Arguments) 126.65 174.62 T
3 11 Q
(object) 198.65 174.62 T
0 F
(An instance of) 279.65 174.62 T
4 9.5 Q
(<simple-lock>) 352.43 174.62 T
0 11 Q
(.) 426.54 174.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "30" 30
%%Page: "31" 31
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(31) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
6 12 Q
0 X
(V) 108.65 664.95 T
(alues) 114.54 664.95 T
0 11 Q
(None.) 180.65 664.95 T
6 12 Q
(Descr) 108.65 636.95 T
(iption) 134.48 636.95 T
0 11 Q
(Releases a simple lock.) 180.65 636.95 T
6 12 Q
(See also) 108.65 608.95 T
4 9.5 Q
(release) 180.65 608.95 T
0 11 Q
(,  page 19.) 220.55 608.95 T
2 14 Q
(o) 99.65 560.62 T
(wned?) 106.51 560.62 T
3 13 Q
(Sealed method) 402.9 561.29 T
6 12 Q
(Summar) 108.65 535.95 T
(y) 146.12 535.95 T
0 11 Q
(T) 180.65 535.95 T
(ests whether a simple lock has been claimed by the curr) 186.38 535.95 T
(ent) 456.42 535.95 T
(thr) 180.65 521.95 T
(ead.) 194.78 521.95 T
6 12 Q
(Libr) 108.65 494.29 T
(ar) 124.97 494.29 T
(y) 134.02 494.29 T
4 9 Q
(threads) 180.65 494.29 T
6 12 Q
(Module) 108.65 467.29 T
4 9 Q
(threads) 180.65 467.29 T
6 12 Q
(Signature) 108.65 440.29 T
4 9 Q
(owned?) 180.65 440.29 T
7 F
(object) 218.45 440.29 T
4 F
( =>) 242.77 440.29 T
7 F
(owned?) 264.38 440.29 T
6 12 Q
(Arguments) 108.65 413.29 T
3 11 Q
(object) 180.65 413.29 T
0 F
(An instance of) 261.65 413.29 T
4 9.5 Q
(<simple-lock>) 334.43 413.29 T
0 11 Q
(.) 408.54 413.29 T
6 12 Q
(V) 108.65 385.29 T
(alues) 114.54 385.29 T
3 11 Q
(owned?) 180.65 385.29 T
0 F
(An instance of) 261.65 385.29 T
4 9.5 Q
(<boolean>) 334.43 385.29 T
0 11 Q
(.) 385.73 385.29 T
6 12 Q
(Descr) 108.65 357.29 T
(iption) 134.48 357.29 T
0 11 Q
(T) 180.65 357.29 T
(ests whether a simple lock has been claimed by the curr) 186.38 357.29 T
(ent) 456.42 357.29 T
(thr) 180.65 343.29 T
(ead.) 194.78 343.29 T
2 13 Q
(1.6.7  Multiple reader / single writer loc) 99.65 309.95 T
(ks) 294.99 309.95 T
2 14 Q
(<read-write-loc) 99.65 262.29 T
(k>) 181.42 262.29 T
3 13 Q
(Open instantiable primary class) 309.96 262.95 T
6 12 Q
(Summar) 108.65 237.62 T
(y) 146.12 237.62 T
0 11 Q
-0.35 (The class of locks that can have multiple r) 180.65 237.62 P
-0.35 (eaders but only one) 380.56 237.62 P
(writer) 180.65 223.62 T
(.) 209.75 223.62 T
6 12 Q
(Libr) 108.65 195.95 T
(ar) 124.97 195.95 T
(y) 134.02 195.95 T
4 9 Q
(threads) 180.65 195.95 T
6 12 Q
(Module) 108.65 168.95 T
4 9 Q
(threads) 180.65 168.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "31" 31
%%Page: "32" 32
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(32) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
6 12 Q
0 X
(Superclasses) 126.65 664.95 T
4 9.5 Q
(<exclusive-lock>) 198.65 664.95 T
6 12 Q
(Descr) 126.65 637.95 T
(iption) 152.48 637.95 T
0 11 Q
-0.35 (The class of locks that can have multiple r) 198.65 637.95 P
-0.35 (eaders but only one) 398.56 637.95 P
(writer) 198.65 623.95 T
(.) 227.75 623.95 T
(The) 198.65 603.95 T
4 9.5 Q
(<read-write-lock>) 219.81 603.95 T
0 11 Q
( class can be locked in either of two) 316.71 603.95 T
(modes,) 198.65 589.95 T
3 F
(r) 236.52 589.95 T
(ead) 240.6 589.95 T
0 F
( and) 255.26 589.95 T
3 F
(write) 279.39 589.95 T
0 F
(. A write lock is exclusive, and implies) 302.61 589.95 T
-0.33 (ownership of the lock. However) 198.65 575.95 P
-0.33 (, a r) 352.91 575.95 P
-0.33 (ead lock is non-exclusive,) 370.16 575.95 P
(and an instance can be locked multiple times in r) 198.65 561.95 T
(ead mode,) 435.76 561.95 T
(whether by multiple thr) 198.65 547.95 T
(eads, r) 315.09 547.95 T
(ecursively by a single thr) 346.89 547.95 T
(ead,) 468.38 547.95 T
(or a combination of both.) 198.65 533.95 T
(A) 198.65 513.95 T
4 9.5 Q
(<read-write-lock>) 209.96 513.95 T
0 11 Q
( can only be locked in write mode if) 306.86 513.95 T
(the lock is fr) 198.65 499.95 T
(ee, and the operation will block if necessary) 258.04 499.95 T
(. It) 469.2 499.95 T
(can only be fr) 198.65 485.95 T
(eed by the thr) 264.57 485.95 T
(ead that owns it.) 331.67 485.95 T
(A) 198.65 465.95 T
4 9.5 Q
(<read-write-lock>) 209.96 465.95 T
0 11 Q
( can be locked in r) 306.86 465.95 T
(ead mode pr) 394.69 465.95 T
(ovided) 456.15 465.95 T
(that it is not owned with a write lock. The operation will) 198.65 451.95 T
(block while the lock is owned. Each time it is locked in r) 198.65 437.95 T
(ead) 470.71 437.95 T
(mode, an internal counter is incr) 198.65 423.95 T
(emented. This counter is) 356.29 423.95 T
(decr) 198.65 409.95 T
(emented each time a r) 219.67 409.95 T
(ead-mode lock is r) 326.37 409.95 T
(eleased. The) 415.7 409.95 T
(lock is fr) 198.65 395.95 T
(eed when the counter becomes zer) 240.03 395.95 T
(o.) 407.47 395.95 T
(The) 198.65 375.95 T
4 9.5 Q
(<read-write-lock>) 219.81 375.95 T
0 11 Q
( class is less ef) 316.71 375.95 T
(\336cient than the other) 385.02 375.95 T
(lock classes de\336ned in the Thr) 198.65 361.95 T
(eads library) 344.64 361.95 T
(. However) 401.11 361.95 T
(, it pr) 451.23 361.95 T
(o-) 477.02 361.95 T
(vides an ef) 198.65 347.95 T
(\336cient and convenient means to pr) 250.85 347.95 T
(otect data that) 418.76 347.95 T
(is fr) 198.65 333.95 T
(equently r) 217.07 333.95 T
(ead and may occasionally be written by multi-) 266.61 333.95 T
(ple concurr) 198.65 319.95 T
(ent thr) 253.78 319.95 T
(eads.) 285.92 319.95 T
2 14 Q
(wait-f) 117.65 271.95 T
(or) 147.41 271.95 T
3 13 Q
(Sealed method) 420.9 272.62 T
6 12 Q
(Summar) 126.65 247.29 T
(y) 164.12 247.29 T
0 11 Q
(Claims a r) 198.65 247.29 T
(ead-write lock.) 247.87 247.29 T
6 12 Q
(Libr) 126.65 219.29 T
(ar) 142.97 219.29 T
(y) 152.02 219.29 T
4 9 Q
(threads) 198.65 219.29 T
6 12 Q
(Module) 126.65 192.29 T
4 9 Q
(threads) 198.65 192.29 T
6 12 Q
(Signature) 126.65 165.29 T
4 9 Q
(wait-for) 198.65 165.29 T
7 F
(object) 247.25 165.29 T
4 F
( #key) 271.58 165.29 T
7 F
(timeout) 303.98 165.29 T
(mode) 340.88 165.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "32" 32
%%Page: "33" 33
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(33) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
6 12 Q
0 X
(Arguments) 108.65 664.95 T
3 11 Q
(object) 180.65 664.95 T
0 F
(An instance of) 261.65 664.95 T
4 9.5 Q
(<read-write-lock>) 334.43 664.95 T
0 11 Q
(.) 431.33 664.95 T
3 F
(timeout) 180.65 644.95 T
0 F
(T) 261.65 644.95 T
(ime-out interval. If the value is) 267.79 644.95 T
4 9.5 Q
(#f) 420.14 644.95 T
0 11 Q
(\050the) 437.24 644.95 T
-0.26 (default\051, the time-out interval never elapses.) 261.65 630.95 P
(Otherwise the value should be a) 261.65 616.95 T
4 9.5 Q
(<real>) 421.26 616.95 T
0 11 Q
(,) 455.46 616.95 T
(corr) 261.65 602.95 T
(esponding to the desir) 281.03 602.95 T
(ed interval in sec-) 389.52 602.95 T
(onds.) 261.65 588.95 T
3 F
(mode) 180.65 568.95 T
0 F
(The mode of the lock to wait for) 261.65 568.95 T
(. V) 416.41 568.95 T
(alid val-) 428.84 568.95 T
(ues ar) 261.65 554.95 T
(e) 290.61 554.95 T
4 9.5 Q
(#"read") 298.63 554.95 T
0 11 Q
( \050the default\051 and) 338.53 554.95 T
4 9.5 Q
(#"write") 425.31 554.95 T
0 11 Q
(,) 470.91 554.95 T
-0.26 (which wait for locks in r) 261.65 540.95 P
-0.26 (ead mode and write) 378.28 540.95 P
(mode r) 261.65 526.95 T
(espectively) 296.25 526.95 T
(.) 349.32 526.95 T
6 12 Q
(V) 108.65 499.29 T
(alues) 114.54 499.29 T
3 11 Q
(success) 180.65 499.29 T
0 F
(An instance of) 261.65 499.29 T
4 9.5 Q
(<boolean>) 334.43 499.29 T
0 11 Q
(.) 385.73 499.29 T
6 12 Q
(Descr) 108.65 471.29 T
(iption) 134.48 471.29 T
0 11 Q
-0.01 (Claims a r) 180.65 471.29 P
-0.01 (ead-write lock, blocking if necessary) 229.85 471.29 P
-0.01 (. The behavior) 405.25 471.29 P
(depends on the value of) 180.65 457.29 T
3 F
(mode) 300.21 457.29 T
0 F
(:) 323.43 457.29 T
4 9.5 Q
(#"read") 180.65 437.29 T
0 11 Q
(If ther) 261.65 437.29 T
(e is a write lock, blocks until the lock) 291.17 437.29 T
(becomes fr) 261.65 423.29 T
(ee. Then claims the lock by incr) 314.1 423.29 T
(e-) 466.16 423.29 T
(menting its internal r) 261.65 409.29 T
(ead-lock counter) 364.09 409.29 T
(.) 444.51 409.29 T
4 9.5 Q
(#"write") 180.65 389.29 T
0 11 Q
(First waits until the lock becomes fr) 261.65 389.29 T
(ee, by) 434.37 389.29 T
(blocking if necessary) 261.65 375.29 T
(. Then claims exclusive) 361.91 375.29 T
(ownership of the lock in write mode.) 261.65 361.29 T
-0.04 (If the claim is successful, this method r) 180.65 341.29 P
-0.04 (eturns tr) 368.21 341.29 P
-0.04 (ue; otherwise) 409.66 341.29 P
(it r) 180.65 327.29 T
(eturns false.) 194.33 327.29 T
2 14 Q
(release) 99.65 279.29 T
3 13 Q
(Sealed method) 402.9 279.95 T
6 12 Q
(Summar) 108.65 254.62 T
(y) 146.12 254.62 T
0 11 Q
(Releases a r) 180.65 254.62 T
(ead-write-lock.) 236.98 254.62 T
6 12 Q
(Libr) 108.65 226.62 T
(ar) 124.97 226.62 T
(y) 134.02 226.62 T
4 9 Q
(threads) 180.65 226.62 T
6 12 Q
(Module) 108.65 199.62 T
4 9 Q
(threads) 180.65 199.62 T
6 12 Q
(Signature) 108.65 172.62 T
4 9 Q
(release object #key => \050\051) 180.65 172.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "33" 33
%%Page: "34" 34
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(34) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
6 12 Q
0 X
(Arguments) 126.65 664.95 T
3 11 Q
(object) 198.65 664.95 T
0 F
(An instance of) 279.65 664.95 T
4 9.5 Q
(<read-write-lock>) 352.43 664.95 T
0 11 Q
(.) 449.33 664.95 T
6 12 Q
(V) 126.65 636.95 T
(alues) 132.54 636.95 T
0 11 Q
(None.) 198.65 636.95 T
6 12 Q
(Descr) 126.65 608.95 T
(iption) 152.48 608.95 T
0 11 Q
(Releases a r) 198.65 608.95 T
(ead-write lock.) 254.98 608.95 T
(If the lock is owned by the calling thr) 198.65 588.95 T
(ead, it is fr) 379.02 588.95 T
(eed. If the) 429.97 588.95 T
-0.11 (lock is locked in r) 198.65 574.95 P
-0.11 (ead mode, the count of the number of locks) 283.24 574.95 P
(held is decr) 198.65 560.95 T
(emented; the lock is fr) 254.63 560.95 T
(eed if the count becomes) 361.74 560.95 T
(zer) 198.65 546.95 T
(o. Otherwise it is an err) 213.56 546.95 T
(or to r) 326.94 546.95 T
(elease the lock, and an) 356.53 546.95 T
(implementation is permitted to signal a) 198.65 532.95 T
4 9.5 Q
(<not-owned-error>) 393.15 532.95 T
0 11 Q
(condition.) 198.65 518.95 T
2 14 Q
(o) 117.65 470.95 T
(wned?) 124.51 470.95 T
3 13 Q
(Sealed method) 420.9 471.62 T
6 12 Q
(Summar) 126.65 446.29 T
(y) 164.12 446.29 T
0 11 Q
(T) 198.65 446.29 T
(ests whether a r) 204.38 446.29 T
(ead-write lock is owned \321 that is, has been) 280.91 446.29 T
(locked in write mode \321 by the curr) 198.65 432.29 T
(ent thr) 371.45 432.29 T
(ead.) 403.59 432.29 T
6 12 Q
(Libr) 126.65 404.62 T
(ar) 142.97 404.62 T
(y) 152.02 404.62 T
4 9 Q
(threads) 198.65 404.62 T
6 12 Q
(Module) 126.65 377.62 T
4 9 Q
(threads) 198.65 377.62 T
6 12 Q
(Signature) 126.65 350.62 T
4 9 Q
(owned?) 198.65 350.62 T
7 F
(object) 236.45 350.62 T
4 F
( =>) 260.77 350.62 T
7 F
(owned?) 282.38 350.62 T
6 12 Q
(Arguments) 126.65 323.62 T
3 11 Q
(object) 198.65 323.62 T
0 F
(An instance of) 279.65 323.62 T
4 9.5 Q
(<read-write-lock>) 352.43 323.62 T
0 11 Q
(.) 449.33 323.62 T
6 12 Q
(V) 126.65 295.62 T
(alues) 132.54 295.62 T
3 11 Q
(owned?) 198.65 295.62 T
0 F
(An instance of) 279.65 295.62 T
4 9.5 Q
(<boolean>) 352.43 295.62 T
0 11 Q
(.) 403.73 295.62 T
6 12 Q
(Descr) 126.65 267.62 T
(iption) 152.48 267.62 T
0 11 Q
(T) 198.65 267.62 T
(ests whether a r) 204.38 267.62 T
(ead-write lock is owned \321 that is, has been) 280.91 267.62 T
(locked in write mode \321 by the curr) 198.65 253.62 T
(ent thr) 371.45 253.62 T
(ead.) 403.59 253.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "34" 34
%%Page: "35" 35
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(35) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
2 13 Q
0 X
(1.6.8  Noti\336cations) 99.65 664.29 T
2 14 Q
(<noti\336cation>) 99.65 616.62 T
3 13 Q
(Sealed instantiable class) 351.5 617.29 T
6 12 Q
(Summar) 108.65 591.95 T
(y) 146.12 591.95 T
0 11 Q
(The class of objects that can be used to notify thr) 180.65 591.95 T
(eads of a) 415.41 591.95 T
(change of state elsewher) 180.65 577.95 T
(e in the pr) 299.14 577.95 T
(ogram.) 348.28 577.95 T
6 12 Q
(Libr) 108.65 550.29 T
(ar) 124.97 550.29 T
(y) 134.02 550.29 T
4 9 Q
(threads) 180.65 550.29 T
6 12 Q
(Module) 108.65 523.29 T
4 9 Q
(threads) 180.65 523.29 T
6 12 Q
(Superclasses) 108.65 496.29 T
4 9 Q
(<synchronization>) 180.65 496.29 T
6 12 Q
(Init-k) 108.65 469.29 T
(e) 129.79 469.29 T
(yw) 135.08 469.29 T
(ords) 147.02 469.29 T
4 9.5 Q
(lock:) 180.65 469.29 T
0 11 Q
(An instance of) 261.65 469.29 T
4 9.5 Q
(<simple-lock>) 334.43 469.29 T
0 11 Q
(. Requir) 408.54 469.29 T
(ed.) 446.79 469.29 T
6 12 Q
(Descr) 108.65 441.29 T
(iption) 134.48 441.29 T
0 11 Q
(The class of objects that can be used to notify thr) 180.65 441.29 T
(eads of a) 415.41 441.29 T
(change of state elsewher) 180.65 427.29 T
(e in the pr) 299.14 427.29 T
(ogram. Noti\336cations ar) 348.28 427.29 T
(e) 460.69 427.29 T
(used in association with locks, and ar) 180.65 413.29 T
(e sometimes called) 361.91 413.29 T
3 F
(condition variables) 180.65 399.29 T
0 F
(. They may be used to support the sharing) 264.47 399.29 T
(of data between thr) 180.65 385.29 T
(eads using) 275.06 385.29 T
3 F
(monitors) 329.73 385.29 T
0 F
(. Each) 369.45 385.29 T
4 9.5 Q
(<notification>) 180.65 371.29 T
0 11 Q
( is permanently associated with a) 260.45 371.29 T
4 9.5 Q
(<simple-) 425.08 371.29 T
(lock>) 180.65 357.29 T
0 11 Q
(, although the same lock may be associated with many) 209.15 357.29 T
(noti\336cations.) 180.65 343.29 T
(The r) 180.65 323.29 T
(equir) 205.96 323.29 T
(ed) 231.37 323.29 T
3 F
(lock) 246.11 323.29 T
0 F
( is associated with the noti\336cation, and it is) 263.41 323.29 T
-0.32 (only possible to wait for) 180.65 309.29 P
-0.32 (, or r) 296.04 309.29 P
-0.32 (elease, the noti\336cation if the lock) 318.14 309.29 P
(is owned.) 180.65 295.29 T
(Thr) 180.65 275.29 T
(eads wait for the change of state to be noti\336ed by calling) 197.94 275.29 T
4 9.5 Q
-0.19 (wait-for) 180.65 261.29 P
0 11 Q
-0.09 (. Thr) 226.25 261.29 P
-0.09 (eads notify other thr) 248.95 261.29 P
-0.09 (eads of the change of state) 347.79 261.29 P
(by calling) 180.65 247.29 T
4 9.5 Q
(release) 230.85 247.29 T
0 11 Q
(.) 270.75 247.29 T
6 12 Q
(Oper) 108.65 219.62 T
(ations) 130.44 219.62 T
0 11 Q
(The class) 180.65 219.62 T
4 9.5 Q
(<notification>) 227.48 219.62 T
0 11 Q
(provides the following opera-) 312.98 219.62 T
(tions:) 180.65 205.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "35" 35
%%Page: "36" 36
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(36) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
4 9.5 Q
0 X
(associated-lock) 198.65 665.62 T
0 11 Q
(Returns the lock associated with the noti\336-) 279.65 647.62 T
(cation object.) 279.65 633.62 T
4 9.5 Q
(wait-for) 198.65 613.62 T
0 11 Q
(W) 279.65 613.62 T
(ait for the noti\336cation of the change in) 289.64 613.62 T
(state. The associated lock must be owned,) 279.65 599.62 T
(and is atomically r) 279.65 585.62 T
(eleased befor) 369.44 585.62 T
(e synchr) 433.25 585.62 T
(oni-) 473.89 585.62 T
(zation, and r) 279.65 571.62 T
(eclaimed after) 340.86 571.62 T
(.) 408.92 571.62 T
4 9.5 Q
(release) 198.65 551.62 T
0 11 Q
-0.41 (Notify the change of state to a single waiting) 279.65 551.62 P
(thr) 279.65 537.62 T
(ead. This has no ef) 293.78 537.62 T
(fect on the associated) 383.74 537.62 T
(lock, which must be owned.) 279.65 523.62 T
4 9.5 Q
(release-all) 198.65 503.62 T
0 11 Q
(Notify the change of state to all waiting) 279.65 503.62 T
(thr) 279.65 489.62 T
(eads. This has no ef) 293.78 489.62 T
(fect on the associated) 388.4 489.62 T
(lock, which must be owned.) 279.65 475.62 T
6 12 Q
(Example) 126.65 447.95 T
0 11 Q
(This example shows how to use a noti\336cation and an associ-) 198.65 447.95 T
(ated lock to implement a queue. The variable) 198.65 433.95 T
4 9.5 Q
(*queue*) 420.43 433.95 T
0 11 Q
( is the) 460.33 433.95 T
(actual queue object \050a) 198.65 419.95 T
4 9.5 Q
(<deque>) 306.48 419.95 T
0 11 Q
(\051. Queue access is performed) 346.38 419.95 T
(by interlocking pushes and pops on the) 198.65 405.95 T
4 9.5 Q
(<deque>) 393.25 405.95 T
0 11 Q
(. The) 433.15 405.95 T
4 9.5 Q
(*queue*) 198.65 391.95 T
0 11 Q
( variable can be a constant, since it is the) 238.55 391.95 T
4 9.5 Q
(<deque>) 437.11 391.95 T
0 11 Q
(which is mutated and not the value of) 198.65 377.95 T
4 9.5 Q
(*queue*) 385.95 377.95 T
0 11 Q
(.) 425.85 377.95 T
4 9 Q
(define constant *queue* = make\050<deque>\051;) 198.65 357.29 T
0 11 Q
(The variable) 198.65 336.95 T
4 9.5 Q
(*lock*) 261.88 336.95 T
0 11 Q
( is used to isolate access to the queue) 296.08 336.95 T
4 9 Q
(define constant *lock* = make\050<lock>\051;) 198.65 316.29 T
0 11 Q
(The variable) 198.65 295.95 T
4 9.5 Q
(*something-queued*) 261.88 295.95 T
0 11 Q
( is a noti\336cation which is) 364.48 295.95 T
(used to notify other thr) 198.65 281.95 T
(eads that an object is being put onto) 311.24 281.95 T
(an empty queue.) 198.65 267.95 T
4 9 Q
(define constant *something-queued* =) 198.65 247.29 T
(make\050<notification>, lock: *lock*\051;) 209.45 236.29 T
0 11 Q
(The function) 198.65 215.95 T
4 9.5 Q
(put-on-queue) 263.34 215.95 T
0 11 Q
( pushes an object onto the queue.) 331.74 215.95 T
(If the queue was initially empty) 198.65 201.95 T
(, then all thr) 352.01 201.95 T
(eads which ar) 410.71 201.95 T
(e) 478.07 201.95 T
(waiting for the queue to \336ll ar) 198.65 187.95 T
(e noti\336ed that ther) 343.86 187.95 T
(e is a new) 433.7 187.95 T
(entry) 198.65 173.95 T
(.) 223.15 173.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "36" 36
%%Page: "37" 37
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(37) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
4 F
0 X
(define method put-on-queue \050object\051 => \050\051) 180.65 666.95 T
(with-lock \050*lock*\051) 191.45 655.95 T
(if \050*queue*.empty?\051) 202.25 644.95 T
(release-all\050*something-queued*\051) 213.05 633.95 T
(end;) 202.25 622.95 T
(push\050*queue*, object\051) 202.25 611.95 T
(end with-lock) 191.45 600.95 T
(end method;) 180.65 589.95 T
0 11 Q
(The) 180.65 569.62 T
4 9.5 Q
(get-from-queue) 201.81 569.62 T
0 11 Q
( function r) 281.61 569.62 T
(eturns an object fr) 332.04 569.62 T
(om the) 419.3 569.62 T
(queue. If no object is immediately available, then it blocks) 180.65 555.62 T
(until it r) 180.65 541.62 T
(eceives a noti\336cation that the queue is no longer) 220.1 541.62 T
(empty) 180.65 527.62 T
(. After r) 210.72 527.62 T
(eceiving the noti\336cation it tests again to see if) 248.54 527.62 T
(an object is pr) 180.65 513.62 T
(esent, in case it was popped by another thr) 247.82 513.62 T
(ead.) 455.48 513.62 T
4 9 Q
(define method get-from-queue \050\051 => \050object\051) 180.65 492.95 T
(with-lock \050*lock*\051) 191.45 481.95 T
(while \050*queue*.empty?\051) 202.25 470.95 T
(wait-for\050*something-queued*\051) 213.05 459.95 T
(end;) 202.25 448.95 T
(pop\050*queue*\051) 202.25 437.95 T
(end with-lock) 191.45 426.95 T
(end method;) 180.65 415.95 T
2 14 Q
(associated-loc) 99.65 369.62 T
(k) 179.2 369.62 T
3 13 Q
(Function) 429.73 370.29 T
6 12 Q
(Summar) 108.65 344.95 T
(y) 146.12 344.95 T
0 11 Q
(Returns the lock associated with the noti\336cation object sup-) 180.65 344.95 T
(plied.) 180.65 330.95 T
6 12 Q
(Signature) 108.65 303.29 T
4 9 Q
(associated-lock) 180.65 303.29 T
7 F
(noti\336cation) 267.05 303.29 T
4 F
( =>) 314.56 303.29 T
7 F
(lock) 336.16 303.29 T
6 12 Q
(Libr) 108.65 276.29 T
(ar) 124.97 276.29 T
(y) 134.02 276.29 T
4 9 Q
(threads) 180.65 276.29 T
6 12 Q
(Module) 108.65 249.29 T
4 9 Q
(threads) 180.65 249.29 T
6 12 Q
(Arguments) 108.65 222.29 T
3 11 Q
(noti\336cation) 180.65 222.29 T
0 F
(An instance of) 261.65 222.29 T
4 9.5 Q
(<notification>) 334.43 222.29 T
0 11 Q
(.) 414.23 222.29 T
6 12 Q
(V) 108.65 194.29 T
(alues) 114.54 194.29 T
3 11 Q
(lock) 180.65 194.29 T
0 F
(An instance of) 261.65 194.29 T
4 9.5 Q
(<simple-lock>) 334.43 194.29 T
0 11 Q
(.) 408.54 194.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "37" 37
%%Page: "38" 38
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(38) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
6 12 Q
0 X
(Descr) 126.65 664.95 T
(iption) 152.48 664.95 T
0 11 Q
(Returns the lock associated with the noti\336cation object) 198.65 664.95 T
3 F
(noti\336cation) 198.65 650.95 T
0 F
(.) 249.26 650.95 T
2 14 Q
(wait-f) 117.65 602.95 T
(or) 147.41 602.95 T
3 13 Q
(Sealed method) 420.9 603.62 T
6 12 Q
(Summar) 126.65 578.29 T
(y) 164.12 578.29 T
0 11 Q
(W) 198.65 578.29 T
(ait for another thr) 208.64 578.29 T
(ead to r) 294.83 578.29 T
(elease a noti\336cation.) 331.56 578.29 T
6 12 Q
(Libr) 126.65 550.29 T
(ar) 142.97 550.29 T
(y) 152.02 550.29 T
4 9 Q
(threads) 198.65 550.29 T
6 12 Q
(Module) 126.65 523.29 T
4 9 Q
(threads) 198.65 523.29 T
6 12 Q
(Signature) 126.65 496.29 T
4 9 Q
(wait-for) 198.65 496.29 T
7 F
(noti\336cation) 247.25 496.29 T
4 F
( #key) 294.76 496.29 T
7 F
(timeout) 327.16 496.29 T
4 F
( =>) 358.66 496.29 T
7 F
(success) 380.26 496.29 T
6 12 Q
(Arguments) 126.65 469.29 T
3 11 Q
(noti\336cation) 198.65 469.29 T
0 F
(An instance of) 279.65 469.29 T
4 9.5 Q
(<notification>) 352.43 469.29 T
0 11 Q
(,  page 35.) 432.23 469.29 T
3 F
(timeout) 198.65 449.29 T
0 F
(T) 279.65 449.29 T
(ime-out interval. If the value is) 285.79 449.29 T
4 9.5 Q
(#f) 438.14 449.29 T
0 11 Q
(\050the) 455.24 449.29 T
-0.26 (default\051, the time-out interval never elapses.) 279.65 435.29 P
(Otherwise the value should be a) 279.65 421.29 T
4 9.5 Q
(<real>) 439.26 421.29 T
0 11 Q
(,) 473.46 421.29 T
(corr) 279.65 407.29 T
(esponding to the desir) 299.03 407.29 T
(ed interval in sec-) 407.52 407.29 T
(onds.) 279.65 393.29 T
6 12 Q
(V) 126.65 365.62 T
(alues) 132.54 365.62 T
3 11 Q
(success) 198.65 365.62 T
0 F
(An instance of) 279.65 365.62 T
4 9.5 Q
(<boolean>) 352.43 365.62 T
0 11 Q
(.) 403.73 365.62 T
6 12 Q
(Descr) 126.65 337.62 T
(iption) 152.48 337.62 T
0 11 Q
-0.07 (W) 198.65 337.62 P
-0.07 (ait for another thr) 208.64 337.62 P
-0.07 (ead to r) 294.62 337.62 P
-0.07 (elease) 331.2 337.62 P
3 F
-0.07 (noti\336cation) 363.05 337.62 P
0 F
-0.07 (. The lock associ-) 413.66 337.62 P
(ated with the noti\336cation must be owned. Atomically) 198.65 323.62 T
(, the) 457.04 323.62 T
(lock is r) 198.65 309.62 T
(eleased and the curr) 236.37 309.62 T
(ent thr) 334.4 309.62 T
(ead starts blocking, wait-) 366.54 309.62 T
(ing for another thr) 198.65 295.62 T
(ead to r) 288.28 295.62 T
(elease the noti\336cation. The curr) 325.01 295.62 T
(ent) 477.04 295.62 T
(thr) 198.65 281.62 T
(ead r) 212.78 281.62 T
(eclaims the lock once it has r) 237.17 281.62 T
(eceived the noti\336cation.) 375.63 281.62 T
(Note that the state should be tested again once) 198.65 261.62 T
4 9.5 Q
(wait-for) 427.69 261.62 T
0 11 Q
( has) 473.29 261.62 T
(r) 198.65 247.62 T
(eturned, because ther) 202.79 247.62 T
(e may have been a delay between the) 306.98 247.62 T
4 9.5 Q
(release) 198.65 233.62 T
0 11 Q
(,  page 39 of the noti\336cation and the claiming of the) 238.55 233.62 T
(lock, and the state may have been changed during that time.) 198.65 219.62 T
(If a timeout is supplied, then this is used for waiting for the) 198.65 205.62 T
-0.4 (r) 198.65 191.62 P
-0.4 (elease of the noti\336cation only) 202.79 191.62 P
-0.4 (. The) 342.21 191.62 P
4 9.5 Q
-0.83 (wait-for) 368.07 191.62 P
0 11 Q
-0.4 ( function always) 413.67 191.62 P
(waits for the lock with no timeout, and it is guaranteed that) 198.65 177.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "38" 38
%%Page: "39" 39
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(39) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
0 11 Q
0 X
(the lock will be owned on r) 180.65 665.62 T
(eturn. The) 312.87 665.62 T
4 9.5 Q
(wait-for) 365.77 665.62 T
0 11 Q
( function) 411.37 665.62 T
(r) 180.65 651.62 T
(eturns) 184.79 651.62 T
4 9.5 Q
(#f) 218.44 651.62 T
0 11 Q
( if the noti\336cation wait times out.) 229.84 651.62 T
6 12 Q
(Exceptions) 108.65 623.95 T
0 11 Q
(Implementations of this) 180.65 623.95 T
4 9.5 Q
(wait-for) 299.25 623.95 T
0 11 Q
( method ar) 344.85 623.95 T
(e permitted to) 397.69 623.95 T
(signal a condition of the following class, which is a subclass) 180.65 609.95 T
(of) 180.65 595.95 T
4 9.5 Q
(<error>) 193.07 595.95 T
0 11 Q
(:) 232.97 595.95 T
4 9.5 Q
(<not-owned-error>) 180.65 572.95 T
0 11 Q
(Implementations can signal this err) 261.65 555.45 T
(or if the) 432.96 555.45 T
(application attempts to wait for a noti\336ca-) 261.65 541.45 T
(tion when the associated lock is not owned) 261.65 527.45 T
(by the curr) 261.65 513.45 T
(ent thr) 314.61 513.45 T
(ead.) 346.76 513.45 T
2 14 Q
(release) 99.65 465.45 T
3 13 Q
(Sealed method) 402.9 466.12 T
6 12 Q
(Summar) 108.65 440.79 T
(y) 146.12 440.79 T
0 11 Q
(Releases a noti\336cation to one of the thr) 180.65 440.79 T
(eads that ar) 368.34 440.79 T
(e blocked) 424.72 440.79 T
(and waiting for it.) 180.65 426.79 T
6 12 Q
(Libr) 108.65 399.12 T
(ar) 124.97 399.12 T
(y) 134.02 399.12 T
4 9 Q
(threads) 180.65 399.12 T
6 12 Q
(Module) 108.65 372.12 T
4 9 Q
(threads) 180.65 372.12 T
6 12 Q
(Signature) 108.65 345.12 T
4 9 Q
(release) 180.65 345.12 T
7 F
(noti\336cation) 223.85 345.12 T
4 F
( #key => \050\051) 271.36 345.12 T
6 12 Q
(Arguments) 108.65 318.12 T
3 11 Q
(noti\336cation) 180.65 318.12 T
0 F
(An instance of) 261.65 318.12 T
4 9.5 Q
(<notification>) 334.43 318.12 T
0 11 Q
(.) 414.23 318.12 T
6 12 Q
(V) 108.65 290.12 T
(alues) 114.54 290.12 T
0 11 Q
(None.) 180.65 290.12 T
6 12 Q
(Exceptions) 108.65 262.12 T
0 11 Q
(Implementations of this) 180.65 262.12 T
4 9.5 Q
(release) 299.25 262.12 T
0 11 Q
(method ar) 344.85 262.12 T
(e permitted to) 394.94 262.12 T
(signal a condition of the following class, which is a subclass) 180.65 248.12 T
(of) 180.65 234.12 T
4 9.5 Q
(<error>) 193.07 234.12 T
0 11 Q
(:) 232.97 234.12 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "39" 39
%%Page: "40" 40
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(40) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
4 9.5 Q
0 X
(<not-owned-error>) 198.65 666.62 T
0 11 Q
(Implementations can signal this err) 279.65 649.12 T
(or if the) 450.96 649.12 T
-0.26 (application attempts to r) 279.65 635.12 P
-0.26 (elease a noti\336cation) 398.08 635.12 P
(when the associated lock is not owned by) 279.65 621.12 T
(the curr) 279.65 607.12 T
(ent thr) 317.66 607.12 T
(ead.) 349.81 607.12 T
6 12 Q
(Descr) 126.65 579.45 T
(iption) 152.48 579.45 T
0 11 Q
-0.2 (Releases) 198.65 579.45 P
3 F
-0.2 (noti\336cation) 242.38 579.45 P
0 F
-0.2 (, announcing the change of state to one of) 292.99 579.45 P
(the thr) 198.65 565.45 T
(eads which ar) 230.79 565.45 T
(e blocked and waiting for it. The choice) 298.15 565.45 T
(of which thr) 198.65 551.45 T
(ead r) 258.02 551.45 T
(eceives the noti\336cation is unde\336ned. The) 282.4 551.45 T
-0.33 (r) 198.65 537.45 P
-0.33 (eceiving thr) 202.79 537.45 P
-0.33 (ead may not be unblocked immediately) 259.91 537.45 P
-0.33 (, because) 449.76 537.45 P
(it must \336rst claim ownership of the noti\336cation\325s associated) 198.65 523.45 T
(lock.) 198.65 509.45 T
2 14 Q
(release-all) 117.65 461.45 T
3 13 Q
(Function) 447.73 462.12 T
6 12 Q
(Summar) 126.65 436.79 T
(y) 164.12 436.79 T
0 11 Q
(Release a noti\336cation to all the thr) 198.65 436.79 T
(eads that ar) 363.48 436.79 T
(e blocked and) 419.86 436.79 T
(waiting for it.) 198.65 422.79 T
6 12 Q
(Signature) 126.65 395.12 T
4 9 Q
(release-all) 198.65 395.12 T
7 F
(noti\336cation) 263.45 395.12 T
4 F
( => \050\051) 310.96 395.12 T
6 12 Q
(Libr) 126.65 368.12 T
(ar) 142.97 368.12 T
(y) 152.02 368.12 T
4 9 Q
(threads) 198.65 368.12 T
6 12 Q
(Module) 126.65 341.12 T
4 9 Q
(threads) 198.65 341.12 T
6 12 Q
(Arguments) 126.65 314.12 T
3 11 Q
(noti\336cation) 198.65 314.12 T
0 F
(An instance of) 279.65 314.12 T
4 9.5 Q
(<notification>) 352.43 314.12 T
0 11 Q
(.) 432.23 314.12 T
6 12 Q
(Exceptions) 126.65 286.12 T
0 11 Q
(Implementations of the) 198.65 286.12 T
4 9.5 Q
(release-all) 314.65 286.12 T
0 11 Q
( function ar) 377.35 286.12 T
(e permitted) 433.28 286.12 T
(to signal a condition of the following class, which is a sub-) 198.65 272.12 T
(class of) 198.65 258.12 T
4 9.5 Q
(<error>) 236.73 258.12 T
0 11 Q
(:) 276.63 258.12 T
4 9.5 Q
(<not-owned-error>) 198.65 235.12 T
0 11 Q
(This may be signalled when an attempt is) 279.65 217.62 T
-0.19 (made to r) 279.65 203.62 P
-0.19 (elease a noti\336cation when the asso-) 325.72 203.62 P
(ciated lock is not owned by the curr) 279.65 189.62 T
(ent) 453.16 189.62 T
(thr) 279.65 175.62 T
(ead.) 293.78 175.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "40" 40
%%Page: "41" 41
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.7) 483.35 702.62 T
(Timers) 504.73 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(41) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
6 12 Q
0 X
(Descr) 108.65 664.95 T
(iption) 134.48 664.95 T
0 11 Q
(Releases) 180.65 664.95 T
3 F
(noti\336cation) 224.58 664.95 T
0 F
(, announcing the change of state to all) 275.19 664.95 T
(thr) 180.65 650.95 T
(eads which ar) 194.78 650.95 T
(e blocked and waiting for it. Those thr) 262.15 650.95 T
(eads) 447.52 650.95 T
(will then necessarily have to compete for the lock associated) 180.65 636.95 T
(with the noti\336cation.) 180.65 622.95 T
2 16 Q
(1.7  Timer) 99.65 587.62 T
(s) 160.74 587.62 T
2 14 Q
(sleep) 99.65 538.95 T
3 13 Q
(Function) 429.73 539.62 T
6 12 Q
(Summar) 108.65 514.29 T
(y) 146.12 514.29 T
0 11 Q
(Blocks the curr) 180.65 514.29 T
(ent thr) 253.01 514.29 T
(ead for a speci\336ed number of seconds.) 285.15 514.29 T
6 12 Q
(Libr) 108.65 486.29 T
(ar) 124.97 486.29 T
(y) 134.02 486.29 T
4 9 Q
(threads) 180.65 486.29 T
6 12 Q
(Module) 108.65 459.29 T
4 9 Q
(threads) 180.65 459.29 T
6 12 Q
(Signature) 108.65 432.29 T
4 9 Q
(sleep) 180.65 432.29 T
7 F
(interval) 213.05 432.29 T
4 F
( => \050\051) 245.05 432.29 T
6 12 Q
(Arguments) 108.65 405.29 T
3 11 Q
(interval) 180.65 405.29 T
0 F
(An instance of) 261.65 405.29 T
4 9.5 Q
(<real>) 334.43 405.29 T
0 11 Q
(.) 368.64 405.29 T
6 12 Q
(V) 108.65 377.29 T
(alues) 114.54 377.29 T
0 11 Q
(None.) 180.65 377.29 T
6 12 Q
(Descr) 108.65 349.29 T
(iption) 134.48 349.29 T
0 11 Q
-0.35 (Blocks the curr) 180.65 349.29 P
-0.35 (ent thr) 252.3 349.29 P
-0.35 (ead for the number of seconds speci\336ed) 284.1 349.29 P
(in) 180.65 335.29 T
3 F
(interval) 193 335.29 T
0 F
(.) 227.84 335.29 T
2 16 Q
(1.8  Thread v) 99.65 299.95 T
(ariab) 179.63 299.95 T
(les) 210.88 299.95 T
2 14 Q
(thread) 99.65 251.29 T
3 13 Q
(V) 331.88 251.95 T
(ariable de\336nition adjective) 340.3 251.95 T
6 12 Q
(Summar) 108.65 226.62 T
(y) 146.12 226.62 T
0 11 Q
(An adjective to) 180.65 226.62 T
4 9.5 Q
(define variable) 256.67 226.62 T
0 11 Q
( for de\336ning thr) 342.17 226.62 T
(ead vari-) 419.33 226.62 T
(ables.) 180.65 212.62 T
6 12 Q
(Libr) 108.65 184.95 T
(ar) 124.97 184.95 T
(y) 134.02 184.95 T
4 9 Q
(threads) 180.65 184.95 T
6 12 Q
(Module) 108.65 157.95 T
4 9 Q
(threads) 180.65 157.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "41" 41
%%Page: "42" 42
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(42) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
6 12 Q
0 X
(Syntax) 126.65 664.95 T
4 9 Q
(define thread variable) 198.65 664.95 T
7 F
(bindings) 322.85 664.95 T
4 F
( =) 357.18 664.95 T
7 F
(init) 373.38 664.95 T
4 F
(;) 387.88 664.95 T
6 12 Q
(Descr) 126.65 637.95 T
(iption) 152.48 637.95 T
0 11 Q
(An adjective to) 198.65 637.95 T
4 9.5 Q
(define variable) 274.67 637.95 T
0 11 Q
(. The constr) 360.17 637.95 T
(uct) 416.63 637.95 T
4 9.5 Q
(define) 434.48 637.95 T
(thread variable) 198.65 623.95 T
0 11 Q
( de\336nes module variables in the curr) 284.15 623.95 T
(ent) 462.02 623.95 T
(module which have thr) 198.65 609.95 T
(ead-local bindings. The initialization) 312.02 609.95 T
(expr) 198.65 595.95 T
(ession is evaluated once, and is used to pr) 220.35 595.95 T
(ovide the ini-) 423.75 595.95 T
(tial values for the variables in each thr) 198.65 581.95 T
(ead. The value of a) 383.91 581.95 T
(thr) 198.65 567.95 T
(ead variable binding may be changed with the normal) 212.78 567.95 T
(assignment operator) 198.65 553.95 T
4 9.5 Q
(:=) 301.33 553.95 T
0 11 Q
(. This assignment is not visible in) 312.73 553.95 T
(other thr) 198.65 539.95 T
(eads.) 241.14 539.95 T
6 12 Q
(Example) 126.65 512.29 T
4 9 Q
(define thread variable *standard-output*) 198.65 512.29 T
(= make\050<standard-output-stream>\051;) 209.45 501.29 T
2 16 Q
(1.9  Dynamic binding) 117.65 467.62 T
2 14 Q
(d) 117.65 418.95 T
(ynamic-bind) 124.51 418.95 T
3 13 Q
(Statement macr) 407.18 419.62 T
(o) 489.88 419.62 T
6 12 Q
(Summar) 126.65 394.29 T
(y) 164.12 394.29 T
0 11 Q
(Executes a body of code in a context in which variables ar) 198.65 394.29 T
(e) 478.38 394.29 T
(dynamically r) 198.65 380.29 T
(ebound.) 266.1 380.29 T
6 12 Q
(Libr) 126.65 352.62 T
(ar) 142.97 352.62 T
(y) 152.02 352.62 T
4 9 Q
(threads) 198.65 352.62 T
6 12 Q
(Module) 126.65 325.62 T
4 9 Q
(threads) 198.65 325.62 T
6 12 Q
(Macro call) 126.65 298.62 T
4 9 Q
(dynamic-bind \050) 198.65 298.62 T
7 F
(place1) 274.25 298.62 T
4 F
( =) 299.74 298.62 T
7 F
(init1) 315.95 298.62 T
4 F
(,) 334.94 298.62 T
7 F
(place2) 345.74 298.62 T
4 F
( =) 371.24 298.62 T
7 F
(init2) 387.44 298.62 T
4 F
(, ...\051) 406.44 298.62 T
7 F
(body) 444.24 298.62 T
4 F
( end;) 464.08 298.62 T
6 12 Q
(Descr) 126.65 271.62 T
(iption) 152.48 271.62 T
0 11 Q
(Executes) 198.65 271.62 T
3 F
(body) 244.1 271.62 T
0 F
( with the speci\336ed) 265.08 271.62 T
3 F
(places) 356.97 271.62 T
0 F
( r) 383.45 271.62 T
(ebound in the) 390.35 271.62 T
(dynamic envir) 198.65 257.62 T
(onment, each place being initialized to the) 269.17 257.62 T
(r) 198.65 243.62 T
(esults of evaluating the initialization expr) 202.79 243.62 T
(essions. In other) 404.5 243.62 T
-0.3 (wor) 198.65 229.62 P
-0.3 (ds, the places ar) 217.98 229.62 P
-0.3 (e initialized to new values on entry to the) 294.48 229.62 P
(body but r) 198.65 215.62 T
(estor) 249.52 215.62 T
(ed to their old values once the body has \336n-) 273.2 215.62 T
(ished executing, whether because it \336nishes normally) 198.65 201.62 T
(, or) 457.25 201.62 T
-0.4 (because of a non-local transfer of contr) 198.65 187.62 P
-0.4 (ol. T) 383.94 187.62 P
-0.4 (ypically) 403.99 187.62 P
-0.4 (, each) 441.6 187.62 P
3 F
-0.4 (place) 471.1 187.62 P
0 F
(is a thr) 198.65 173.62 T
(ead variable.) 231.65 173.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "42" 42
%%Page: "43" 43
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.9) 442.61 702.62 T
(Dynamic binding) 463.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(43) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
0 11 Q
0 X
-0 (If the) 180.65 665.62 P
3 F
-0 (place) 208.77 665.62 P
0 F
-0 ( is a) 230.97 665.62 P
3 F
-0 (name) 252.58 665.62 P
0 F
-0 (, it must be the name of a thr) 276.42 665.62 P
-0 (ead variable) 415.35 665.62 P
(in the module scope.) 180.65 651.62 T
6 12 Q
(Example) 108.65 623.95 T
0 11 Q
(The following example shows the dynamic binding of a sin-) 180.65 623.95 T
(gle variable.) 180.65 609.95 T
4 9 Q
(dynamic-bind \050*standard-output* = new-val\050\051\051) 180.65 589.29 T
(top-level-loop \050\051) 191.45 578.29 T
(end;) 180.65 567.29 T
0 11 Q
(This expands into code equivalent to the following:) 180.65 546.95 T
4 9 Q
(begin) 180.65 526.29 T
(let old-value = *standard-output*;) 191.45 515.29 T
(block \050\051) 191.45 504.29 T
(*standard-output* := new-val\050\051;) 202.25 493.29 T
(top-level-loop\050\051) 202.25 482.29 T
(cleanup) 191.45 471.29 T
(*standard-output* := old-value) 202.25 460.29 T
(end) 191.45 449.29 T
(end) 180.65 438.29 T
2 13 Q
(1.9.1  An e) 99.65 406.62 T
(xtended f) 152.25 406.62 T
(orm of d) 199.44 406.62 T
(ynamic-bind) 241.93 406.62 T
0 11 Q
(Some implementations of the Thr) 99.65 386.95 T
(eads library may pr) 261.95 386.95 T
(ovide an extended form) 357.23 386.95 T
-0.01 (of) 99.65 372.95 P
4 9.5 Q
-0.03 (dynamic-bind) 112.05 372.95 P
0 11 Q
-0.01 ( for binding places other than variables. The implementation) 180.45 372.95 P
(of this extended form r) 99.65 358.95 T
(equir) 210.96 358.95 T
(es the use of non-standar) 236.37 358.95 T
(d featur) 357.79 358.95 T
(es in the Dylan) 396.05 358.95 T
(macr) 99.65 344.95 T
(o system, and hence cannot be written as a portable macr) 123.89 344.95 T
(o. These non-) 401.21 344.95 T
(standar) 99.65 330.95 T
(d extensions ar) 136.17 330.95 T
(e subject to discussion amongst the Dylan language) 209.18 330.95 T
(designers, and may eventually become standar) 99.65 316.95 T
(d featur) 327.89 316.95 T
(es. Until such time as) 366.16 316.95 T
(standar) 99.65 302.95 T
(dization occurs, implementations ar) 136.17 302.95 T
(e not mandated to implement the) 310.67 302.95 T
(extended form of) 99.65 288.95 T
4 9.5 Q
(dynamic-bind) 186.21 288.95 T
0 11 Q
(, and portable code should not depend upon) 254.61 288.95 T
(this featur) 99.65 274.95 T
(e.) 149.05 274.95 T
(The extended form is described below) 99.65 254.95 T
(.) 284.2 254.95 T
2 14 Q
(d) 99.65 206.95 T
(ynamic-bind) 106.51 206.95 T
3 13 Q
(Statement macr) 389.18 207.62 T
(o) 471.88 207.62 T
6 12 Q
(Summar) 108.65 182.29 T
(y) 146.12 182.29 T
0 11 Q
(Executes a body of code in a context in which variables or) 180.65 182.29 T
(other places ar) 180.65 168.29 T
(e dynamically r) 251.53 168.29 T
(ebound.) 327 168.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "43" 43
%%Page: "44" 44
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(44) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
6 12 Q
0 X
(Libr) 126.65 664.95 T
(ar) 142.97 664.95 T
(y) 152.02 664.95 T
4 9 Q
(threads) 198.65 664.95 T
6 12 Q
(Module) 126.65 637.95 T
4 9 Q
(threads) 198.65 637.95 T
6 12 Q
(Syntax) 126.65 610.95 T
4 9 Q
(dynamic-bind \050) 198.65 610.95 T
7 F
(place1) 274.25 610.95 T
4 F
( =) 299.74 610.95 T
7 F
(init1) 315.95 610.95 T
4 F
(,) 334.94 610.95 T
7 F
(place2) 345.74 610.95 T
4 F
( =) 371.24 610.95 T
7 F
(init2) 387.44 610.95 T
4 F
(, ...\051 body end;) 406.44 610.95 T
0 11 Q
(\050This is the same as the simple form.\051) 198.65 590.62 T
6 12 Q
(Descr) 126.65 562.95 T
(iption) 152.48 562.95 T
0 11 Q
-0.34 (If) 198.65 562.95 P
3 F
-0.34 (place) 208.43 562.95 P
0 F
-0.34 ( is not a name, then it may have the syntax of a call to a) 230.63 562.95 P
(function. This permits an extended form for) 198.65 548.95 T
4 9.5 Q
(dynamic-bind) 414.38 548.95 T
0 11 Q
(,) 482.78 548.95 T
(by analogy with the extended form for) 198.65 534.95 T
4 9.5 Q
(:=) 389.21 534.95 T
0 11 Q
(. In this case, if the) 400.61 534.95 T
(place appears syntactically as) 198.65 520.95 T
4 9.5 Q
(name\050) 344.62 520.95 T
3 11 Q
(ar) 373.12 520.95 T
(g1) 382.08 520.95 T
4 9.5 Q
(,) 393.08 520.95 T
0 11 Q
( ...) 398.78 520.95 T
3 F
(ar) 412.53 520.95 T
(gn) 421.5 520.95 T
4 9.5 Q
(\051) 433.11 520.95 T
0 11 Q
(, then the) 438.81 520.95 T
(macr) 198.65 506.95 T
(o expands into a call to the function) 222.89 506.95 T
4 9 Q
(name-dynamic-binder\050) 209.45 486.29 T
7 F
(init) 317.45 486.29 T
4 F
(,) 331.95 486.29 T
7 F
(body-method) 342.75 486.29 T
4 F
(,) 396.1 486.29 T
7 F
(ar) 406.9 486.29 T
(g1) 415.24 486.29 T
4 F
(, ...) 424.24 486.29 T
7 F
(ar) 456.64 486.29 T
(gn) 464.98 486.29 T
4 F
(\051) 474.49 486.29 T
0 11 Q
-0.31 (wher) 198.65 465.95 P
-0.31 (e) 223.64 465.95 P
3 F
-0.31 (init) 231.35 465.95 P
0 F
-0.31 ( is the initial value for the binding, and) 247.24 465.95 P
3 F
-0.31 (body-method) 436.19 465.95 P
0 F
(is function with no parameters whose body is the) 198.65 451.95 T
3 F
(body of) 441.18 451.95 T
0 F
(the) 475.6 451.95 T
4 9.5 Q
-0.06 (dynamic-bind) 198.65 437.95 P
0 11 Q
-0.03 (. The extended form also permits the other \322) 267.05 437.95 P
4 9.5 Q
-0.06 (.) 481.73 437.95 P
0 11 Q
-0.03 (\323) 487.43 437.95 P
(and \322) 198.65 423.95 T
4 9.5 Q
([]) 225.52 423.95 T
0 11 Q
(\323syntaxes for function calls.) 236.92 423.95 T
(Ther) 198.65 403.95 T
(e ar) 221.21 403.95 T
(e no featur) 238.88 403.95 T
(es in the curr) 290.85 403.95 T
(ent version of the Thr) 353.9 403.95 T
(eads) 458.48 403.95 T
(library which make use of the extended form of) 198.65 389.95 T
4 9.5 Q
(dynamic-) 432.65 389.95 T
(bind) 198.65 375.95 T
0 11 Q
(.) 221.45 375.95 T
6 12 Q
(Example) 126.65 348.29 T
0 11 Q
-0.21 (The following example shows the extended form of) 198.65 348.29 P
4 9.5 Q
-0.44 (dynamic-) 450.05 348.29 P
(bind) 198.65 334.29 T
0 11 Q
(.) 221.45 334.29 T
4 9 Q
(dynamic-bind \050object.a-slot = new-slot-val\050\051\051) 198.65 313.62 T
(inner-body\050object\051) 209.45 302.62 T
(end;) 198.65 291.62 T
0 11 Q
(This expands into code equivalent to the following:) 198.65 271.29 T
4 9 Q
(a-slot-dynamic-binder\050new-slot-val\050\051,) 198.65 250.62 T
(method \050\051 inner-body\050object\051 end,) 263.45 239.62 T
(object\051) 263.45 228.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "44" 44
%%Page: "45" 45
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.10) 443.17 702.62 T
(Locked variables) 469.29 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(45) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
2 16 Q
0 X
(1.10  Loc) 99.65 662.29 T
(ked v) 155.57 662.29 T
(ariab) 188.88 662.29 T
(les) 220.13 662.29 T
2 14 Q
(loc) 99.65 613.62 T
(ked) 116.03 613.62 T
3 13 Q
(V) 331.88 614.29 T
(ariable de\336nition adjective) 340.3 614.29 T
6 12 Q
(Summar) 108.65 588.95 T
(y) 146.12 588.95 T
0 11 Q
(De\336nes a locked variable.) 180.65 588.95 T
6 12 Q
(Libr) 108.65 560.95 T
(ar) 124.97 560.95 T
(y) 134.02 560.95 T
4 9 Q
(threads) 180.65 560.95 T
6 12 Q
(Module) 108.65 533.95 T
4 9 Q
(threads) 180.65 533.95 T
6 12 Q
(Syntax) 108.65 506.95 T
4 9 Q
(define locked variable) 180.65 506.95 T
7 F
(bindings) 304.85 506.95 T
4 F
( =) 339.18 506.95 T
7 F
(init) 355.38 506.95 T
4 F
(;) 369.88 506.95 T
6 12 Q
(Descr) 108.65 479.95 T
(iption) 134.48 479.95 T
0 11 Q
(An adjective to) 180.65 479.95 T
4 9.5 Q
(define variable) 256.67 479.95 T
0 11 Q
(. The constr) 342.17 479.95 T
(uct) 398.63 479.95 T
4 9.5 Q
(define) 416.48 479.95 T
(locked variable) 180.65 465.95 T
0 11 Q
( de\336nes module variables in the curr) 266.15 465.95 T
(ent) 444.02 465.95 T
(module that can be tested and updated with) 180.65 451.95 T
4 9.5 Q
(conditional-) 398.52 451.95 T
(update!) 180.65 437.95 T
0 11 Q
(,) 220.55 437.95 T
4 9.5 Q
(atomic-increment!) 226.05 437.95 T
0 11 Q
(, or) 322.95 437.95 T
4 9.5 Q
(atomic-decrement!) 341.55 437.95 T
0 11 Q
(.) 438.45 437.95 T
(Other thr) 180.65 417.95 T
(eads ar) 225.78 417.95 T
(e pr) 260.33 417.95 T
(evented fr) 279.11 417.95 T
(om modifying the locked vari-) 328.4 417.95 T
(able during the conditional update operation by means of a) 180.65 403.95 T
(low-level locking mechanism, which is expected to be) 180.65 389.95 T
(extr) 180.65 375.95 T
(emely ef) 199.33 375.95 T
(\336cient.) 240.38 375.95 T
6 12 Q
(Oper) 108.65 348.29 T
(ations) 130.44 348.29 T
4 9.5 Q
(conditional-update!) 180.65 348.29 T
0 11 Q
(Atomically compar) 261.65 330.29 T
(e and conditionally) 355.23 330.29 T
(assign to the variable.) 261.65 316.29 T
4 9.5 Q
(atomic-increment!) 180.65 290.29 T
0 11 Q
(Atomically incr) 261.65 272.29 T
(ement the variable.) 337 272.29 T
4 9.5 Q
(atomic-decrement!) 180.65 246.29 T
0 11 Q
(Atomically decr) 261.65 228.29 T
(ement the variable.) 339.39 228.29 T
6 12 Q
(Example) 108.65 200.62 T
4 9 Q
(define locked variable *number-detected* = 0;) 180.65 200.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "45" 45
%%Page: "46" 46
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(46) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
2 13 Q
0 X
(1.10.1  Loc) 117.65 664.29 T
(ked slots) 171.98 664.29 T
0 11 Q
(Only those Thr) 117.65 644.62 T
(eads library implementations that pr) 190.73 644.62 T
(ovide the extended form) 368.83 644.62 T
(of) 117.65 630.62 T
4 9.5 Q
(conditional-update!) 130.07 630.62 T
0 11 Q
( need pr) 238.37 630.62 T
(ovide locked slots.) 278.29 630.62 T
2 14 Q
(loc) 117.65 582.62 T
(ked) 134.03 582.62 T
3 13 Q
(Slot de\336nition adjective) 372.27 583.29 T
6 12 Q
(Summar) 126.65 557.95 T
(y) 164.12 557.95 T
0 11 Q
(An adjective to) 198.65 557.95 T
4 9.5 Q
(slot) 274.67 557.95 T
0 11 Q
( for de\336ning) 297.47 557.95 T
3 F
(locked slots) 360.5 557.95 T
0 F
( in classes.) 410.49 557.95 T
6 12 Q
(Libr) 126.65 529.95 T
(ar) 142.97 529.95 T
(y) 152.02 529.95 T
4 9 Q
(threads) 198.65 529.95 T
6 12 Q
(Module) 126.65 502.95 T
4 9 Q
(threads) 198.65 502.95 T
6 12 Q
(Syntax) 126.65 475.95 T
0 11 Q
-0.36 (The) 198.65 475.95 P
4 9.5 Q
-0.74 (locked) 219.45 475.95 P
0 11 Q
-0.36 ( adjective can be used in any slot speci\336cation in a) 253.65 475.95 P
4 9.5 Q
(define class) 198.65 461.95 T
0 11 Q
(.) 267.05 461.95 T
6 12 Q
(Descr) 126.65 434.29 T
(iption) 152.48 434.29 T
0 11 Q
(An adjective to) 198.65 434.29 T
4 9.5 Q
(slot) 274.67 434.29 T
0 11 Q
( for de\336ning) 297.47 434.29 T
3 F
(locked slots) 360.5 434.29 T
0 F
( in classes. It can) 410.49 434.29 T
-0.28 (only be used for slots with) 198.65 420.29 P
4 9.5 Q
-0.59 (instance) 328.31 420.29 P
0 11 Q
-0.28 ( allocation. The adjective) 373.91 420.29 P
(causes a) 198.65 406.29 T
3 F
(conditional-updater) 241.26 406.29 T
0 F
( method, suitable for use with) 328.84 406.29 T
4 9.5 Q
(conditional-update!) 198.65 392.29 T
0 11 Q
(, to be cr) 306.95 392.29 T
(eated for the slot.) 347.92 392.29 T
(Conditional-updater methods have thr) 198.65 372.29 T
(ee r) 387.13 372.29 T
(equir) 404.57 372.29 T
(ed parame-) 429.98 372.29 T
(ters:) 198.65 358.29 T
3 F
(new-value) 222.01 358.29 T
0 F
(,) 267.85 358.29 T
3 F
(old-value) 273.35 358.29 T
0 F
(, and) 314.29 358.29 T
3 F
(object) 341.16 358.29 T
0 F
(. The \336rst and second) 366.62 358.29 T
(parameters ar) 198.65 344.29 T
(e specialized by the type of the slot, and the) 265.85 344.29 T
(thir) 198.65 330.29 T
(d is specialized by the class containing the slot speci\336ca-) 215.98 330.29 T
(tion. The methods have a r) 198.65 316.29 T
(equir) 328.15 316.29 T
(ed value declaration of type) 353.56 316.29 T
4 9.5 Q
(<boolean>) 198.65 302.29 T
0 11 Q
(.) 249.95 302.29 T
(A conditional-updater atomically compar) 198.65 282.29 T
(es the slot contents) 400.66 282.29 T
-0.09 (for) 198.65 268.29 P
3 F
-0.09 (object) 215.32 268.29 P
0 F
-0.09 ( with) 240.78 268.29 P
3 F
-0.09 (old-value) 268.46 268.29 P
0 F
-0.09 (, and conditionally updates the slot. If) 309.4 268.29 P
(the comparison fails, the method r) 198.65 254.29 T
(eturns) 365.07 254.29 T
4 9.5 Q
(#f) 398.72 254.29 T
0 11 Q
(. Otherwise, the) 410.12 254.29 T
(slot contents ar) 198.65 240.29 T
(e r) 272.05 240.29 T
(eplaced with) 284.22 240.29 T
3 F
(new-value) 349.54 240.29 T
0 F
(, and the method) 395.37 240.29 T
(r) 198.65 226.29 T
(eturns) 202.79 226.29 T
4 9.5 Q
(#t) 236.44 226.29 T
0 11 Q
(.) 247.84 226.29 T
-0.14 (The adjectives) 198.65 206.29 P
4 9.5 Q
-0.28 (locked) 270.17 206.29 P
0 11 Q
-0.14 ( and) 304.37 206.29 P
4 9.5 Q
-0.28 (constant) 328.22 206.29 P
0 11 Q
-0.14 ( may be used together in) 373.82 206.29 P
(a slot speci\336cation. In this case, ther) 198.65 192.29 T
(e will be a conditional-) 372.15 192.29 T
-0.02 (updater method for the slot, but no setter method. The value) 198.65 178.29 P
(of such a slot is ther) 198.65 164.29 T
(efor) 294.88 164.29 T
(e not guaranteed to be constant.) 313.96 164.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "46" 46
%%Page: "47" 47
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.11) 431.9 702.62 T
(Conditional update) 458.02 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(47) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
6 12 Q
0 X
(K) 108.65 664.95 T
(e) 114.83 664.95 T
(yw) 120.12 664.95 T
(ords) 132.06 664.95 T
0 11 Q
-0.01 (The following additional keywor) 180.65 664.95 P
-0.01 (ds ar) 341.12 664.95 P
-0.01 (e permitted for) 364.9 664.95 P
4 9.5 Q
-0.02 (locked) 440.71 664.95 P
0 11 Q
(slots:) 180.65 650.95 T
4 9.5 Q
(conditional-updater:) 180.65 624.95 T
0 11 Q
-0.11 (The name of a module variable to which the) 261.65 606.95 P
(conditional-updater method should be) 261.65 592.95 T
(added, or) 261.65 578.95 T
4 9.5 Q
(#f) 311.18 578.95 T
0 11 Q
( if no conditional-updater) 322.58 578.95 T
-0.58 (method should be de\336ned \050in which case the) 261.65 564.95 P
(use of the) 261.65 550.95 T
4 9.5 Q
(locked) 311.39 550.95 T
0 11 Q
( adjective was unneces-) 345.59 550.95 T
(sary\051. If it is not supplied, it defaults to) 261.65 536.95 T
3 F
(getter-name) 261.65 522.95 T
4 9.5 Q
(-conditional-updater) 314.81 522.95 T
0 11 Q
(. For) 428 522.95 T
(example, for the locked slot) 261.65 508.95 T
4 9.5 Q
(coordinate) 398.31 508.95 T
0 11 Q
( the) 455.31 508.95 T
(method is added to) 261.65 494.95 T
4 9.5 Q
(coordinate-conditional-updater) 261.65 480.95 T
0 11 Q
(.) 431.83 480.95 T
6 12 Q
(Example) 108.65 453.29 T
0 11 Q
(The following example de\336nes a class with a single slot suit-) 180.65 453.29 T
(able for conditional updating:) 180.65 439.29 T
4 9 Q
(define class <locked-value> \050<object>\051) 180.65 418.62 T
(locked slot counter :: <integer> = 0;) 191.45 407.62 T
(end class) 180.65 396.62 T
0 11 Q
(This class de\336nition cr) 180.65 376.29 T
(eates a conditional-updater method) 289.3 376.29 T
(with the following signatur) 180.65 362.29 T
(e:) 313.74 362.29 T
4 9 Q
(define method counter-conditional-updater) 180.65 341.62 T
(\050new-value :: <integer>,) 191.45 330.62 T
(old-value :: <integer>,) 196.85 319.62 T
(object :: <locked-value>\051 => \050success? :: <boolean>\051) 196.85 308.62 T
(end method) 180.65 297.62 T
2 16 Q
(1.11  Conditional update) 99.65 263.95 T
2 14 Q
(conditional-update!) 99.65 215.29 T
3 13 Q
(Statement macr) 389.18 215.95 T
(o) 471.88 215.95 T
6 12 Q
(Summar) 108.65 190.62 T
(y) 146.12 190.62 T
0 11 Q
(Performs an atomic test-and-set operation.) 180.65 190.62 T
6 12 Q
(Libr) 108.65 162.62 T
(ar) 124.97 162.62 T
(y) 134.02 162.62 T
4 9 Q
(threads) 180.65 162.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "47" 47
%%Page: "48" 48
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(48) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
6 12 Q
0 X
(Module) 126.65 664.95 T
4 9 Q
(threads) 198.65 664.95 T
6 12 Q
(Macro call) 126.65 637.95 T
4 9 Q
(conditional-update!\050) 198.65 637.95 T
7 F
(local-name) 306.65 637.95 T
4 F
( =) 351.65 637.95 T
7 F
(place) 367.85 637.95 T
4 F
(\051) 388.85 637.95 T
7 F
(body) 209.45 626.95 T
4 F
([success) 209.45 615.95 T
7 F
(success-expr) 258.05 615.95 T
4 F
(]) 307.53 615.95 T
([failure) 209.45 604.95 T
7 F
(failur) 258.05 604.95 T
(e-expr) 280.39 604.95 T
4 F
(]) 304.88 604.95 T
(end) 198.65 593.95 T
6 12 Q
(Arguments) 126.65 567.95 T
3 11 Q
(local-name) 198.65 567.95 T
0 F
(A Dylan variable-name) 279.65 567.95 T
3 8.8 Q
(bnf) 393.3 565.2 T
0 11 Q
(.) 404.71 567.95 T
3 F
(place) 198.65 547.95 T
0 F
(A Dylan variable-name) 279.65 547.95 T
0 8.8 Q
(bnf) 393.3 545.2 T
0 11 Q
(,) 406.22 547.95 T
-0.63 (If the implementation pr) 279.65 529.95 P
-0.63 (ovides the extended) 397.05 529.95 P
-0.55 (form of) 279.65 515.95 P
4 9.5 Q
-1.14 (conditional-update!) 317.44 515.95 P
0 11 Q
-0.55 (,) 425.74 515.95 P
3 F
-0.55 (place) 430.69 515.95 P
0 F
-0.55 ( can also) 452.89 515.95 P
(be a function call.) 279.65 501.95 T
3 F
(body) 198.65 481.95 T
0 F
(A Dylan body) 279.65 481.95 T
3 8.8 Q
(bnf) 348.36 479.2 T
0 11 Q
(.) 359.78 481.95 T
6 12 Q
(V) 126.65 454.29 T
(alues) 132.54 454.29 T
0 11 Q
(See Description.) 198.65 454.29 T
6 12 Q
(Descr) 126.65 426.29 T
(iption) 152.48 426.29 T
0 11 Q
(Performs an atomic test-and-set operation. Wher) 198.65 426.29 T
(e appr) 434.91 426.29 T
(opri-) 465.79 426.29 T
(ate, it should be implemented using dedicated pr) 198.65 412.29 T
(ocessor) 437.37 412.29 T
-0.48 (instr) 198.65 398.29 P
-0.48 (uctions, and is expected to be extr) 220.76 398.29 P
-0.48 (emely ef) 381.89 398.29 P
-0.48 (\336cient on most) 422.47 398.29 P
(platforms.) 198.65 384.29 T
(The value of the) 198.65 364.29 T
3 F
(place) 279.81 364.29 T
0 F
( is evaluated once to determine the ini-) 302 364.29 T
(tial value, which is then bound to the) 198.65 350.29 T
3 F
(local-name) 381.98 350.29 T
0 F
( as a lexical) 429.85 350.29 T
(variable. The) 198.65 336.29 T
3 F
(body) 264.63 336.29 T
0 F
( is then evaluated to determine the new) 285.6 336.29 T
(value for the place. The place is then conditionally updated) 198.65 322.29 T
-0.2 (\321 which means that the following steps ar) 198.65 308.29 P
-0.2 (e performed atom-) 404.86 308.29 P
(ically:) 198.65 294.29 T
1 F
(1.) 198.65 274.29 T
0 F
-0.24 (The place is evaluated again, and a test is made to see if it) 216.65 274.29 P
(has been updated since the initial evaluation. This may) 216.65 260.29 T
(involve a comparison with the old value using) 216.65 246.29 T
4 9.5 Q
(\134==) 445.37 246.29 T
0 11 Q
( ,) 462.47 246.29 T
(though implementations might use a mor) 216.65 232.29 T
(e dir) 418.82 232.29 T
(ect test for) 440.9 232.29 T
(ther) 216.65 218.29 T
(e having been an assignment to the place. It is unde-) 236.05 218.29 T
(\336ned whether the test will succeed or fail in the case) 216.65 204.29 T
(wher) 216.65 190.29 T
(e the place was updated with a value that is identi-) 241.64 190.29 T
(cal to the old value when compar) 216.65 176.29 T
(ed using) 378.44 176.29 T
4 9.5 Q
(\134==) 422.94 176.29 T
0 11 Q
(.) 440.04 176.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "48" 48
%%Page: "49" 49
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.11) 431.9 702.62 T
(Conditional update) 458.02 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(49) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
1 11 Q
0 X
(2.) 180.65 665.62 T
0 F
-0.41 (If the value was found not to have been updated since the) 198.65 665.62 P
(initial evaluation, the new value is stor) 198.65 651.62 T
(ed by assignment.) 386.89 651.62 T
(Otherwise the conditional update fails.) 198.65 637.62 T
(If the update was successful, then) 180.65 617.62 T
4 9.5 Q
(conditional-update!) 347 617.62 T
0 11 Q
(r) 180.65 603.62 T
(eturns the r) 184.79 603.62 T
(esult of the) 240.6 603.62 T
4 9.5 Q
(success) 297.13 603.62 T
0 11 Q
( expr) 337.03 603.62 T
(ession, or r) 361.48 603.62 T
(eturns the) 414.43 603.62 T
(new value of the place if no) 180.65 589.62 T
4 9.5 Q
(success) 317.22 589.62 T
0 11 Q
( clause was supplied.) 357.12 589.62 T
(If the update failed, then) 180.65 569.62 T
4 9.5 Q
(conditional-update!) 303.31 569.62 T
0 11 Q
( signals a) 411.61 569.62 T
(condition, unless a) 180.65 555.62 T
4 9.5 Q
(failure) 274.39 555.62 T
0 11 Q
( clause was given, in which case) 314.29 555.62 T
(the value is r) 180.65 541.62 T
(eturned.) 242.99 541.62 T
(If the) 180.65 521.62 T
3 F
(place) 208.77 521.62 T
0 F
( is a) 230.97 521.62 T
3 F
(name) 252.59 521.62 T
0 F
(, it must be the name of a) 276.42 521.62 T
4 9.5 Q
(locked vari-) 401.22 521.62 T
(able) 180.65 507.62 T
0 11 Q
(in the curr) 209.15 507.62 T
(ent module scope. See Section 1.10 on page) 259.52 507.62 T
(45.) 180.65 493.62 T
6 12 Q
(Exceptions) 108.65 465.95 T
4 9.5 Q
(conditional-update!) 180.65 465.95 T
0 11 Q
( may signal a condition of the follow-) 288.95 465.95 T
(ing class \050which is a subclass of) 180.65 451.95 T
4 9.5 Q
(<error>) 335.58 451.95 T
0 11 Q
(\051, unless a) 375.48 451.95 T
4 9.5 Q
(failure) 426.48 451.95 T
0 11 Q
(clause is supplied.) 180.65 437.95 T
4 9 Q
(<conditional-update-error>) 180.65 417.29 T
6 12 Q
(Example) 108.65 391.29 T
0 11 Q
(The following example does an atomic incr) 180.65 391.29 T
(ement of) 389.86 391.29 T
4 9.5 Q
(*number-detected*) 180.65 377.29 T
0 11 Q
(.) 277.55 377.29 T
4 9 Q
(until \050conditional-update!) 180.65 356.62 T
(\050current-val = *number-detected*\051) 223.85 345.62 T
(current-val + 1) 234.65 334.62 T
(failure #f) 223.85 323.62 T
(end conditional-update!\051) 218.45 312.62 T
(end until) 180.65 301.62 T
2 14 Q
(atomic-increment!) 99.65 255.29 T
3 13 Q
(Function macr) 394.71 255.95 T
(o) 471.88 255.95 T
6 12 Q
(Summar) 108.65 230.62 T
(y) 146.12 230.62 T
0 11 Q
(Atomically incr) 180.65 230.62 T
(ements a place containing a numeric value.) 256 230.62 T
6 12 Q
(Libr) 108.65 202.62 T
(ar) 124.97 202.62 T
(y) 134.02 202.62 T
4 9 Q
(threads) 180.65 202.62 T
6 12 Q
(Module) 108.65 175.62 T
4 9 Q
(threads) 180.65 175.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "49" 49
%%Page: "50" 50
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(50) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
6 12 Q
0 X
(Syntax) 126.65 664.95 T
4 9 Q
(atomic-increment!\050) 198.65 664.95 T
7 F
(place) 295.85 664.95 T
4 F
(\051;) 316.85 664.95 T
(atomic-increment!\050) 198.65 645.95 T
7 F
(place) 295.85 645.95 T
4 F
(,) 316.85 645.95 T
7 F
(by) 327.64 645.95 T
4 F
(\051;) 337.48 645.95 T
6 12 Q
(Arguments) 126.65 619.95 T
3 11 Q
(place) 198.65 619.95 T
0 F
(A Dylan variable-name) 279.65 619.95 T
0 8.8 Q
(bnf) 393.3 617.2 T
0 11 Q
(.) 406.22 619.95 T
-0.63 (If the implementation pr) 279.65 601.95 P
-0.63 (ovides the extended) 397.05 601.95 P
-0.55 (form of) 279.65 587.95 P
4 9.5 Q
-1.14 (conditional-update!) 317.44 587.95 P
0 11 Q
-0.55 (,) 425.74 587.95 P
3 F
-0.55 (place) 430.69 587.95 P
0 F
-0.55 ( can also) 452.89 587.95 P
(be a function call.) 279.65 573.95 T
3 F
(by) 198.65 553.95 T
0 F
(An instance of) 279.65 553.95 T
4 9.5 Q
(<object>) 352.43 553.95 T
0 11 Q
(. Default value: 1.) 398.04 553.95 T
6 12 Q
(V) 126.65 526.29 T
(alues) 132.54 526.29 T
3 11 Q
(new-value) 198.65 526.29 T
0 F
(An instance of) 279.65 526.29 T
4 9.5 Q
(<object>) 352.43 526.29 T
0 11 Q
(.) 398.04 526.29 T
6 12 Q
(Descr) 126.65 498.29 T
(iption) 152.48 498.29 T
0 11 Q
(Atomically incr) 198.65 498.29 T
(ements a place containing a numeric value.) 274 498.29 T
-0.18 (The value of the) 198.65 478.29 P
3 F
-0.18 (place) 279.09 478.29 P
0 F
-0.18 ( is evaluated one or mor) 301.29 478.29 P
-0.18 (e times to deter-) 417.79 478.29 P
(mine the initial value. A new value is computed fr) 198.65 464.29 T
(om this) 442.42 464.29 T
-0.27 (value and) 198.65 450.29 P
3 F
-0.27 (by) 249.04 450.29 P
0 F
-0.27 (, by applying) 258.41 450.29 P
4 9.5 Q
-0.57 (+) 324.55 450.29 P
0 11 Q
-0.27 ( fr) 330.25 450.29 P
-0.27 (om the Dylan module. The new) 340.53 450.29 P
(value is atomically stor) 198.65 436.29 T
(ed back into) 310.89 436.29 T
3 F
(place) 372.91 436.29 T
0 F
(.) 395.11 436.29 T
(The macr) 198.65 416.29 T
(o r) 244.06 416.29 T
(eturns the new value of) 256.96 416.29 T
3 F
(place) 374.2 416.29 T
0 F
(.) 396.39 416.29 T
(The) 198.65 396.29 T
3 F
(place) 219.81 396.29 T
0 F
( must be a suitable place for) 242.01 396.29 T
4 9.5 Q
(conditional-update!) 380.32 396.29 T
0 11 Q
(.) 488.62 396.29 T
-0.15 (Implementations of) 198.65 376.29 P
4 9.5 Q
-0.3 (atomic-increment!) 296.35 376.29 P
0 11 Q
-0.15 ( ar) 393.25 376.29 P
-0.15 (e permitted to use) 405.51 376.29 P
4 9.5 Q
(conditional-update!) 198.65 362.29 T
0 11 Q
( \050as in the described example\051, and) 306.95 362.29 T
(hence can involve a loop and can cause) 198.65 348.29 T
3 F
(place) 391.85 348.29 T
0 F
( to be evaluated) 414.05 348.29 T
(mor) 198.65 334.29 T
(e than once. However) 218.51 334.29 T
(, an atomic incr) 323.85 334.29 T
(ement of a locked) 398.28 334.29 T
(variable might be implemented by a mor) 198.65 320.29 T
(e ef) 397.35 320.29 T
(\336cient non-loop-) 414.11 320.29 T
(ing mechanism on some platforms.) 198.65 306.29 T
6 12 Q
(Example) 126.65 278.62 T
0 11 Q
(The following example atomically incr) 198.65 278.62 T
(ements) 385.81 278.62 T
4 9.5 Q
(*number-) 423.47 278.62 T
(detected*) 198.65 264.62 T
0 11 Q
( by 2, and r) 249.95 264.62 T
(eturns the incr) 304.17 264.62 T
(emented value.) 374.46 264.62 T
4 9 Q
(atomic-increment!\050*number-detected*, 2\051;) 198.65 243.95 T
2 14 Q
(atomic-decrement!) 117.65 197.62 T
3 13 Q
(Function macr) 412.71 198.29 T
(o) 489.88 198.29 T
6 12 Q
(Summar) 126.65 172.95 T
(y) 164.12 172.95 T
0 11 Q
(Atomically decr) 198.65 172.95 T
(ements a place containing a numeric value.) 276.39 172.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "50" 50
%%Page: "51" 51
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(1.11) 431.9 702.62 T
(Conditional update) 458.02 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 99.65 124.95 T
1 F
(51) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
6 12 Q
0 X
(Libr) 108.65 664.95 T
(ar) 124.97 664.95 T
(y) 134.02 664.95 T
4 9 Q
(threads) 180.65 664.95 T
6 12 Q
(Module) 108.65 637.95 T
4 9 Q
(threads) 180.65 637.95 T
6 12 Q
(Syntax) 108.65 610.95 T
4 9 Q
(atomic-decrement!\050) 180.65 610.95 T
3 F
(place) 277.85 610.95 T
4 F
(\051) 296.01 610.95 T
(atomic-decrement!\050) 180.65 591.95 T
3 F
(place, by) 277.85 591.95 T
4 F
(\051) 309.18 591.95 T
6 12 Q
(Arguments) 108.65 565.95 T
3 11 Q
(place) 180.65 565.95 T
0 F
(A Dylan variable-name) 261.65 565.95 T
0 8.8 Q
(bnf) 375.3 563.2 T
0 11 Q
(.) 388.22 565.95 T
-0.63 (If the implementation pr) 261.65 547.95 P
-0.63 (ovides the extended) 379.05 547.95 P
-0.55 (form of) 261.65 533.95 P
4 9.5 Q
-1.14 (conditional-update!) 299.44 533.95 P
0 11 Q
-0.55 (,) 407.74 533.95 P
3 F
-0.55 (place) 412.69 533.95 P
0 F
-0.55 ( can also) 434.89 533.95 P
(be a function call.) 261.65 519.95 T
3 F
(by) 180.65 499.95 T
0 F
(An instance of) 261.65 499.95 T
4 9.5 Q
(<object>) 334.43 499.95 T
0 11 Q
(. Default value: 1.) 380.04 499.95 T
6 12 Q
(V) 108.65 472.29 T
(alues) 114.54 472.29 T
3 11 Q
(new-value) 180.65 472.29 T
0 F
(An instance of) 261.65 472.29 T
4 9.5 Q
(<object>) 334.43 472.29 T
0 11 Q
(.) 380.04 472.29 T
6 12 Q
(Descr) 108.65 444.29 T
(iption) 134.48 444.29 T
0 11 Q
-0.35 (Atomically decr) 180.65 444.29 P
-0.35 (ements a place containing a numeric value. It) 258.04 444.29 P
(has the same semantics as) 180.65 430.29 T
4 9.5 Q
(atomic-increment!) 309.41 430.29 T
0 11 Q
( with the) 406.31 430.29 T
(exception that the) 180.65 416.29 T
3 F
(place) 270.13 416.29 T
0 F
( is decr) 292.33 416.29 T
(emented.) 326.72 416.29 T
2 13 Q
(1.11.1  An e) 99.65 382.95 T
(xtended f) 158.17 382.95 T
(orm of conditional-update!) 205.36 382.95 T
0 11 Q
(Some implementations of the Thr) 99.65 363.29 T
(eads library may pr) 261.95 363.29 T
(ovide an extended form) 357.23 363.29 T
-0.38 (of) 99.65 349.29 P
4 9.5 Q
-0.79 (conditional-update!) 111.69 349.29 P
0 11 Q
-0.38 ( for updating places other than locked variables. This) 219.99 349.29 P
-0.25 (is most likely to be useful for updating locked slots \050see Section 1.10.1 on page) 99.65 335.29 P
(46\051. The implementation of this extended form r) 99.65 321.29 T
(equir) 332.69 321.29 T
(es the use of non-stan-) 358.1 321.29 T
(dar) 99.65 307.29 T
(d featur) 116.02 307.29 T
(es in the Dylan macr) 154.29 307.29 T
(o system, and hence cannot be written as a) 254.05 307.29 T
(portable macr) 99.65 293.29 T
(o. These non-standar) 167.24 293.29 T
(d extensions ar) 268.84 293.29 T
(e subject to discussion) 341.85 293.29 T
-0.07 (amongst the Dylan language designers, and may eventually become featur) 99.65 279.29 P
-0.07 (es.) 462.28 279.29 P
-0.24 (Until such time as standar) 99.65 265.29 P
-0.24 (dization occurs, implementations ar) 225.67 265.29 P
-0.24 (e not mandated) 399.45 265.29 P
(to implement the extended form of) 99.65 251.29 T
4 9.5 Q
(conditional-update!) 272.27 251.29 T
0 11 Q
(, and portable code) 380.57 251.29 T
(should not depend upon the featur) 99.65 237.29 T
(e.) 269.72 237.29 T
2 14 Q
(conditional-update!) 99.65 189.29 T
3 13 Q
(Statement macr) 389.18 189.95 T
(o) 471.88 189.95 T
6 12 Q
(Summar) 108.65 164.62 T
(y) 146.12 164.62 T
0 11 Q
(Performs an atomic test-and-set operation.) 180.65 164.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "51" 51
%%Page: "52" 52
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
3 9.5 Q
0 X
(Proposal for a Dylan\252 Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(52) 63.65 124.95 T
0 F
(Copyright \050C\051 1997. The Harlequin Group Limited. All Rights Reserved.) 208.99 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
6 12 Q
0 X
(Libr) 126.65 664.95 T
(ar) 142.97 664.95 T
(y) 152.02 664.95 T
4 9 Q
(threads) 198.65 664.95 T
6 12 Q
(Module) 126.65 637.95 T
4 9 Q
(threads) 198.65 637.95 T
6 12 Q
(Macro call) 126.65 610.95 T
4 9 Q
(conditional-update!\050) 198.65 610.95 T
7 F
(local-name) 306.65 610.95 T
4 F
( =) 351.65 610.95 T
7 F
(place) 367.85 610.95 T
4 F
(\051) 388.85 610.95 T
7 F
(body) 209.45 599.95 T
4 F
([success) 209.45 588.95 T
7 F
(success-expr) 258.05 588.95 T
4 F
(]) 307.53 588.95 T
([failure) 209.45 577.95 T
7 F
(failur) 258.05 577.95 T
(e-expr) 280.39 577.95 T
4 F
(]) 304.88 577.95 T
(end) 198.65 566.95 T
6 12 Q
(Arguments) 126.65 540.95 T
3 11 Q
(local-name) 198.65 540.95 T
0 F
(A Dylan variable-name) 279.65 540.95 T
3 8.8 Q
(bnf) 393.3 538.2 T
0 11 Q
(.) 404.71 540.95 T
3 F
(place) 198.65 520.95 T
0 F
(A Dylan variable-name) 279.65 520.95 T
0 8.8 Q
(bnf) 393.3 518.2 T
0 11 Q
( or a function call.) 406.22 520.95 T
3 F
(body) 198.65 500.95 T
0 F
(A Dylan body) 279.65 500.95 T
3 8.8 Q
(bnf) 348.36 498.2 T
0 11 Q
(.) 359.78 500.95 T
6 12 Q
(V) 126.65 473.29 T
(alues) 132.54 473.29 T
0 11 Q
(See Description.) 198.65 473.29 T
6 12 Q
(Descr) 126.65 445.29 T
(iption) 152.48 445.29 T
0 11 Q
(This extended form of) 198.65 445.29 T
4 9.5 Q
(conditional-update!) 308.97 445.29 T
0 11 Q
( additionally) 417.27 445.29 T
(accepts a) 198.65 431.29 T
3 F
(place) 245.05 431.29 T
0 F
( that has the syntax of a call to a function. This) 267.24 431.29 T
-0.31 (extended form for) 198.65 417.29 P
4 9.5 Q
-0.65 (conditional-update!) 288.61 417.29 P
0 11 Q
-0.31 ( is analogous to that) 396.91 417.29 P
(for) 198.65 403.29 T
4 9.5 Q
(:=) 215.41 403.29 T
0 11 Q
(. In this case, if the) 226.81 403.29 T
3 F
(place) 319.21 403.29 T
0 F
( appears syntactically as) 341.41 403.29 T
7 9 Q
(name) 198.65 382.62 T
4 F
(\050) 220.15 382.62 T
7 F
(ar) 225.55 382.62 T
(g) 233.89 382.62 T
4 7.2 Q
(1) 238.39 380.37 T
4 9 Q
(, \311) 242.71 382.62 T
7 F
(ar) 264.31 382.62 T
(g) 272.65 382.62 T
4 7.2 Q
(n) 277.15 380.37 T
4 9 Q
(\051) 281.48 382.62 T
0 11 Q
(The macr) 198.65 362.29 T
(o expands into this call:) 244.06 362.29 T
7 9 Q
(name) 198.65 341.62 T
4 F
(-conditional-updater\050) 220.15 341.62 T
7 F
(new-value) 333.55 341.62 T
4 F
(,) 375.55 341.62 T
7 F
(local-name) 386.35 341.62 T
4 F
(,) 431.35 341.62 T
7 F
(ar) 442.15 341.62 T
(g) 450.49 341.62 T
4 7.2 Q
(1) 454.99 339.37 T
4 9 Q
(, \311) 459.32 341.62 T
7 F
(ar) 198.65 330.62 T
(g) 206.99 330.62 T
4 7.2 Q
(n) 211.49 328.37 T
4 9 Q
(\051) 215.81 330.62 T
0 11 Q
(If the r) 198.65 312.29 T
(esult of this function call is) 230.92 312.29 T
4 9.5 Q
(#f) 363.73 312.29 T
0 11 Q
(, the conditional update) 375.12 312.29 T
(is deemed to have failed.) 198.65 298.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "52" 52
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 52
%%DocumentFonts: Palatino-Roman
%%+ Palatino-Bold
%%+ Helvetica-Narrow-Bold
%%+ Palatino-Italic
%%+ Courier-Bold
%%+ Helvetica
%%+ Helvetica-Narrow
%%+ Palatino-BoldItalic
%%EOF
