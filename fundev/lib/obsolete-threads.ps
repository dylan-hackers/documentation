%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 9 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 1 /Symbol FMFONTDEFINE
3 0 /Times-Italic FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Threads Library Proposal) 72 42.62 T
(March 16, 1995) 280.56 42.62 T
(1) 536 42.62 T
0 24 Q
(Dylan Threads Library Proposal) 151.03 704 T
1 12 Q
(Scott McKay) 272.51 662.5 T
(Harlequin) 279.66 645 T
1 16 Q
(1.  Intr) 72 600.83 T
(oduction) 119.26 600.83 T
0 12 Q
-0.29 (The purpose of the Dylan threads library is to provide Dylan applications with multiple threads of) 72 572 P
(control in a single address space, support for locking and synchronization facilities, and support) 72 558 T
(for \322\337uid\323 bindings of settable \322locations\323. The threads must also cooperate properly with) 72 544 T
(Dylan\325) 72 530 T
(s memory management and GC modules. This proposal is based in part on the Apple) 104.66 530 T
(thread proposal.) 72 516 T
1 16 Q
(2.  Thr) 72 473.83 T
(eads) 118.38 473.83 T
0 12 Q
(Dylan threads are intended to provide multiple thread of control in a single address space. Each) 72 445 T
-0.2 (thread runs in its own dynamic environment, with its own control stack. Conditions cannot be sig-) 72 431 P
(nalled across threads. Every thread has its own default condition handler) 72 417 T
(, but the exact behavior) 419.78 417 T
(of this handler is explicitly unspeci\336ed.) 72 403 T
(It is highly desirable to implement Dylan threads by using OS-supplied threads or calling into a) 72 375.5 T
(native threads library) 72 361.5 T
(, so that hybrid applications using threads work properly) 173.2 361.5 T
(. However) 443.39 361.5 T
(, if the) 492.89 361.5 T
(native threads implementation does not provide the necessary level of functionality\050especially) 72 347.5 T
(with respect to) 72 333.5 T
1 F
(without-preemption) 145.66 333.5 T
0 F
(\051, then we may be forced to implement some of it ourselves) 248.32 333.5 T
(\050although this likely to be done by implement a \322thicker veneer\323 over the native threads\051.) 72 319.5 T
1 F
(multithreading?) 72 286 T
2 F
(\336) 158.34 286 T
3 F
(boolean) 173.18 286 T
0 F
([Function]) 489.34 286 T
(Returns) 90 258.5 T
1 F
(#t) 130.33 258.5 T
0 F
( if multithreading is enabled, otherwise returns) 140.33 258.5 T
1 F
( #f) 364.63 258.5 T
0 F
(.) 377.63 258.5 T
1 F
(<thread>) 72 225 T
0 F
([Class]) 506 225 T
(The class representing a thread, a subclass of) 90 197.5 T
1 F
(<object>.) 308.94 197.5 T
(make <thread>) 72 164 T
3 F
(function) 153.67 164 T
0 F
( #key) 193.01 164 T
3 F
(name priority stack-size) 222.34 164 T
2 F
(\336) 340.66 164 T
3 F
(thread) 355.5 164 T
0 F
([Method]) 494.68 164 T
(Creates a new thread of control that has its own \322fresh\323 dyanmic environment. The returned) 90 136.5 T
(object may be a subclass of) 90 122.5 T
1 F
(<thr) 224.64 122.5 T
(ead>) 247.26 122.5 T
0 F
(.) 272.1 122.5 T
(The new thread will call the function) 90 95 T
3 F
(function) 270.3 95 T
0 F
( when it starts. The new thread is created in a) 309.64 95 T
(\322ready to run\323 state, and so may start executing immediately) 90 81 T
(.) 379.84 81 T
3 F
(function) 385.84 81 T
0 F
( is a function that takes) 425.17 81 T
(no ar) 90 67 T
(guments. When) 114.11 67 T
3 F
(function) 192.43 67 T
0 F
( returns, the) 231.77 67 T
3 F
(thr) 291.76 67 T
(ead) 305.32 67 T
0 F
( will be terminated. It is an error for the new) 322.64 67 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Threads Library Proposal) 72 42.62 T
(March 16, 1995) 280.56 42.62 T
(2) 536 42.62 T
0 12 Q
(thread to use anything in the dynamic environment of the thread that created it \050such as han-) 90 712 T
(dlers, exit procedures,) 90 698 T
3 F
(etc) 198.97 698 T
0 F
(.\051.) 212.96 698 T
-0.3 (If) 90 671.81 P
3 F
-0.3 (name) 100.69 671.81 P
0 F
-0.3 ( is supplied, it must be a string that will be used as the name of the thread. If) 126.68 671.81 P
3 F
-0.3 (priority) 489.92 671.81 P
0 F
-0.3 ( is) 526.6 671.81 P
(supplied, it is a signed integer that will be used as the thread\325) 90 657.81 T
(s initial priority) 382.31 657.81 T
(.) 456.2 657.81 T
(If) 90 631.62 T
3 F
(stack-size) 100.99 631.62 T
0 F
( is supplied, it is an integer to be used as the initial size for the thread\325) 147.65 631.62 T
(s stack. It) 482.62 631.62 T
(defaults to a \322reasonable size\323.) 90 617.62 T
-0.14 (Note that there is no notion of a hierarchy of threads. So for example, destroying a thread that) 90 591.44 P
(created another thread does not cause that \322child\323 thread to be destroyed.) 90 577.44 T
1 F
(current-thread) 72 545.25 T
2 F
(\336) 151.64 545.25 T
3 F
(thread) 166.49 545.25 T
0 F
([Function]) 489.34 545.25 T
(Returns the object representing the current thread.) 90 519.06 T
1 F
(all-threads) 72 486.88 T
2 F
(\336) 130.33 486.88 T
3 F
(collection-of-threads) 145.18 486.88 T
0 F
([Function]) 489.34 486.88 T
(Returns a collection of all of the current threads.) 90 460.69 T
1 F
(thread-name) 72 428.5 T
3 F
(thread) 140.99 428.5 T
2 F
( \336) 172.32 428.5 T
3 F
(string) 190.16 428.5 T
0 F
([Generic function]) 451.03 428.5 T
(Returns the name of the thread. The returned value is either a string or) 90 402.31 T
1 F
(#f) 430.26 402.31 T
0 F
(.) 440.26 402.31 T
1 F
(thread-priority) 72 370.12 T
3 F
( thread) 149.99 370.12 T
2 F
(\336) 187.32 370.12 T
3 F
(integer) 202.16 370.12 T
0 F
([Generic function]) 451.03 370.12 T
-0.08 (Returns the priority of the thread, which is a signed integer) 90 343.94 P
-0.08 (. Positive priorities are higher than) 371.5 343.94 P
(negative ones; 0 is the \322usual\323 priority) 90 329.94 T
(. It is the intention that this integer be mapped into) 273.86 329.94 T
-0.43 (whatever priority scheme is used by the native threads library) 90 315.94 P
-0.43 (. This representation of a priority) 380.95 315.94 P
(is chosen for its simplicity) 90 301.94 T
(.) 215.89 301.94 T
1 F
(thr) 90 275.75 T
(ead-priority) 105.78 275.75 T
0 F
( can also be set via) 167.77 275.75 T
1 F
(thr) 261.08 275.75 T
(ead-priority-setter) 276.86 275.75 T
0 F
(.) 370.84 275.75 T
(As a convenience, priorities can be set to one of the following keyword values: #") 90 249.56 T
1 F
(low",) 483.16 249.56 T
-0.25 (#"backgr) 90 235.56 P
-0.25 (ound") 138.44 235.56 P
0 F
-0.25 (,) 171.12 235.56 P
1 F
-0.25 (#"normal") 176.87 235.56 P
0 F
-0.25 (,) 233.52 235.56 P
1 F
-0.25 (#"interactive") 239.28 235.56 P
0 F
-0.25 (, and) 313.25 235.56 P
1 F
-0.25 (#"high") 339.08 235.56 P
0 F
-0.25 (. These values will be mapped in) 381.08 235.56 P
(an implementation-dependent way to a process priority) 90 221.56 T
(.) 353.84 221.56 T
1 F
(thread-state) 72 189.38 T
3 F
(thread) 136.98 189.38 T
2 F
(\336) 174 189.38 T
3 F
(symbol) 188.84 189.38 T
0 F
([Generic function]) 451.03 189.38 T
(Returns the current state of the thread, which is one of the following symbols:) 90 163.19 T
1 F
(#"running",) 466.96 163.19 T
(#"r) 90 149.19 T
(eady") 107.77 149.19 T
0 F
( \050meaning ready to run, but not currently running\051) 138.43 149.19 T
1 F
(, #"blocked") 378.06 149.19 T
0 F
( \050meaning that the) 443.39 149.19 T
(thread is blocked and waiting for another thread to wake it\051,) 90 135.19 T
1 F
(#"disabled") 380.6 135.19 T
0 F
( \050meaning that the) 442.61 135.19 T
(thread will never be considered runnable\051,) 90 121.19 T
1 F
(#"dying") 298.61 121.19 T
0 F
( \050meaning that the thread is in the pro-) 346.61 121.19 T
(cess of being destroyed\051, or) 90 107.19 T
1 F
(#"destr) 225.3 107.19 T
(oyed") 263.74 107.19 T
0 F
( \050meaning that the thread is destroyed\051.) 294.4 107.19 T
(Note that the state of a thread can change at any time, and programs should not in general) 90 81 T
(count on the value returned by) 90 67 T
1 F
(thr) 239.3 67 T
(ead-state) 255.08 67 T
0 F
(.) 301.07 67 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Threads Library Proposal) 72 42.62 T
(March 16, 1995) 280.56 42.62 T
(3) 536 42.62 T
1 12 Q
(destroy-thread) 72 712 T
3 F
(thread) 150.98 712 T
0 F
( #key) 182.32 712 T
3 F
( abort?) 208.64 712 T
0 F
([Generic function]) 451.03 712 T
(Destroys the thread) 90 685.15 T
3 F
(thr) 186.31 685.15 T
(ead) 199.87 685.15 T
0 F
(, and sets its state to) 217.2 685.15 T
1 F
(#"destr) 316.2 685.15 T
(oyed") 354.64 685.15 T
0 F
(. All pending cleanups are run) 385.3 685.15 T
(before the thread is destroyed, unless) 90 671.15 T
3 F
(abort?) 270.96 671.15 T
0 F
( is true. While the cleanups are being run, the) 302.96 671.15 T
(state of the thread will be) 90 657.15 T
1 F
(#"dying") 214.64 657.15 T
0 F
(; after the cleanups have been run, the state will be) 262.64 657.15 T
1 F
(#"destr) 90 643.15 T
(oyed") 128.44 643.15 T
0 F
(.) 159.1 643.15 T
1 F
(thread-block) 72 610.31 T
0 F
( #key) 138 610.31 T
3 F
( reason timeout) 164.33 610.31 T
0 F
([Function]) 489.34 610.31 T
(Causes the current thread to block until it is awakened by having another thread call) 90 583.46 T
1 F
(thr) 496.26 583.46 T
(ead-) 512.04 583.46 T
-0.24 (wakeup) 90 569.46 P
0 F
-0.24 (on it. If) 132.76 569.46 P
3 F
-0.24 (r) 170.7 569.46 P
-0.24 (eason) 174.92 569.46 P
0 F
-0.24 ( is supplied, it must be a string which is the \322reason\323 why the thread is) 202.92 569.46 P
(waiting. If) 90 555.46 T
3 F
(timeout) 142.99 555.46 T
0 F
( is supplied and is not) 178.99 555.46 T
1 F
(#f) 286.33 555.46 T
0 F
(, it is an unsigned integer representing the number) 296.33 555.46 T
(of milliseconds to wait before the thread becomes runnable again, even if no other process) 90 541.46 T
(wakes up the thread.) 90 527.46 T
1 F
(thread-wakeup) 72 494.61 T
3 F
(thread) 153 494.61 T
0 F
([Generic function]) 451.03 494.61 T
(W) 90 467.77 T
(akes up the blocked thread) 100.37 467.77 T
3 F
(thr) 231.34 467.77 T
(ead) 244.9 467.77 T
0 F
(. It is an error to call this function on a destroyed thread.) 262.22 467.77 T
1 F
(thread-yield) 72 434.92 T
0 F
([Function]) 489.34 434.92 T
-0 (Causes the current thread to yield control to the thread scheduler) 90 408.08 P
-0 (. This has the ef) 399.26 408.08 P
-0 (fect of allow-) 475.36 408.08 P
(ing other threads to run. If there are no other threads that wish to run, the current thread will) 90 394.08 T
(keep running.) 90 380.08 T
1 F
(thread-wait) 72 347.23 T
3 F
(predicate) 134.99 347.23 T
0 F
(#key) 183.31 347.23 T
3 F
(reason) 209.64 347.23 T
(timeout) 245.3 347.23 T
0 F
([Function]) 489.34 347.23 T
-0.09 (Causes the current thread to wait until the function) 90 320.39 P
3 F
-0.09 (pr) 335.53 320.39 P
-0.09 (edicate) 345.75 320.39 P
0 F
-0.09 ( returns a true value.) 380.41 320.39 P
3 F
-0.09 (pr) 481.29 320.39 P
-0.09 (edicate) 491.51 320.39 P
0 F
-0.09 ( is) 526.17 320.39 P
(a function taking no ar) 90 306.39 T
(guments; it is run in the dynamic environment of the call to) 198.43 306.39 T
1 F
(thr) 486.42 306.39 T
(ead-) 502.2 306.39 T
(wait) 90 292.39 T
0 F
(. If) 112 292.39 T
3 F
(pr) 128.99 292.39 T
(edicate) 139.21 292.39 T
0 F
( returns abnormally) 173.87 292.39 T
(, the thread will stop waiting.) 267.07 292.39 T
(If) 90 265.54 T
3 F
(r) 100.99 265.54 T
(eason) 105.22 265.54 T
0 F
( is supplied, it must be a string which is the \322reason\323 why the thread is waiting. If) 133.21 265.54 T
3 F
-0.1 (timeout) 90 251.54 P
0 F
-0.1 ( is supplied and is not) 126 251.54 P
1 F
-0.1 (#f) 232.73 251.54 P
0 F
-0.1 (, it is an unsigned integer representing the number of millisec-) 242.72 251.54 P
-0.19 (onds to wait before the thread stops waiting; it can be used to cause the thread to start running) 90 237.54 P
(again even when the predicate still returns) 90 223.54 T
1 F
(#f) 295.62 223.54 T
0 F
(.) 305.62 223.54 T
(Most native thread libraries do not support) 90 196.69 T
1 F
(thr) 297.65 196.69 T
(ead-wait) 313.43 196.69 T
0 F
(. In this case,) 357.42 196.69 T
1 F
(thr) 423.41 196.69 T
(ead-wait) 439.19 196.69 T
0 F
( can be) 483.18 196.69 T
(implemented by having a timer process periodically poll a queue of the wait predicates.) 90 182.69 T
1 F
(thr) 90 168.69 T
(ead-wait) 105.78 168.69 T
0 F
( enters its predicate onto the queue, and then calls) 149.77 168.69 T
1 F
(thr) 391.39 168.69 T
(ead-block) 407.17 168.69 T
0 F
(. The timer pro-) 457.18 168.69 T
(cess can then call) 90 154.69 T
1 F
(thr) 176.64 154.69 T
(ead-wakeup) 192.42 154.69 T
0 F
( when the predicate returns true. The timer should poll the) 254.42 154.69 T
(process at \322reasonable\323 intervals, on the order of 1/60\325) 90 140.69 T
(th of a second.) 352.04 140.69 T
1 F
(without-preemption) 72 107.85 T
3 F
(body) 177.66 107.85 T
1 F
(end) 203.99 107.85 T
0 F
(;) 222.66 107.85 T
([Macro]) 500.69 107.85 T
(Evaluates) 90 81 T
3 F
(body) 139.66 81 T
0 F
( in a context in which it is guaranteed that no other threads will run. Returns) 162.98 81 T
(the values of) 90 67 T
3 F
(body) 154.32 67 T
0 F
( as its value.) 177.65 67 T
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Threads Library Proposal) 72 42.62 T
(March 16, 1995) 280.56 42.62 T
(4) 536 42.62 T
0 12 Q
-0.15 (Note that this is not the same as what some operating systems call a) 90 712 P
3 F
-0.15 (critical r) 415.88 712 P
-0.15 (egion) 457.62 712 P
0 F
-0.15 ( of code. A) 484.28 712 P
(critical region is, in ef) 90 698 T
(fect, a lock on the execution of a piece of code, whereas this form is) 195.43 698 T
(intended to exclude all other threads from running at all.) 90 684 T
(Note that this can be an expensive operation \050for example, it may require explicitly suspend-) 90 657.53 T
(ing all other threads\051, so its use should be considered carefully) 90 643.53 T
(. It is intended that this macro) 388.84 643.53 T
(be wrapped around only small amounts of critical code.) 90 629.53 T
1 F
(interrupt-thread) 72 597.07 T
3 F
(thread) 160.32 597.07 T
(function) 194.65 597.07 T
0 F
([Generic function]) 451.03 597.07 T
(Interrupts the thread) 90 570.6 T
3 F
(thr) 190.31 570.6 T
(ead) 203.87 570.6 T
0 F
( and causes it to call) 221.2 570.6 T
3 F
(function) 321.18 570.6 T
0 F
(, which is a function taking no ar) 360.52 570.6 T
(gu-) 518.28 570.6 T
(ments. It is an error to call this function on a destroyed thread.) 90 556.6 T
1 F
(restart-thread) 72 524.13 T
3 F
(thread) 147.64 524.13 T
0 F
([Generic function]) 451.03 524.13 T
(Unwinds the thread to its initial state, and then reinvokes its original top-level function. It is) 90 497.67 T
(an error to call this function on a destroyed thread.) 90 483.67 T
1 F
(disable-thread) 72 451.2 T
3 F
(thread) 149 451.2 T
0 F
([Generic function]) 451.03 451.2 T
(Disables the thread from becoming runnable until is enabled again. The state of a thread that) 90 424.73 T
(has been disabled is) 90 410.73 T
1 F
(#"disabled") 188.65 410.73 T
0 F
(. It is an error to call this function on a destroyed thread.) 250.66 410.73 T
1 F
(enable-thread) 72 378.27 T
3 F
(thread) 146.33 378.27 T
0 F
([Generic function]) 451.03 378.27 T
-0.21 (Enables a disabled thread, allowing it to become runnable again. The state of a thread that has) 90 351.8 P
-0.33 (been enabled is initially) 90 337.8 P
1 F
-0.33 (#"runnable") 206 337.8 P
0 F
-0.33 (, although this may quickly change to another state. It is) 272 337.8 P
(an error to call this function on a destroyed thread.) 90 323.8 T
1 16 Q
(3.  Locks) 72 282.67 T
0 12 Q
(Locks are a high-level, blocking synchronization mechanism. It is the intention that Dylan locks) 72 254.87 T
(be implemented using a blocking type on semaphore provided by the native threads library) 72 240.87 T
(. Note) 507.49 240.87 T
(that no explicit lock and unlock functions are provided on locks; it is intended that they only be) 72 226.87 T
(used through the macro interface. Access to more primitive mutexes and semaphores is provided) 72 212.87 T
(separately) 72 198.87 T
(, and described below) 119.87 198.87 T
(.) 223.73 198.87 T
1 F
(<lock>) 72 166.4 T
0 F
([Class]) 506 166.4 T
(The class representing a lock, a subclass of) 90 139.93 T
1 F
(<object>.) 299.62 139.93 T
(make <lock>) 72 107.47 T
0 F
( #key) 138.01 107.47 T
3 F
(name recursive) 167.34 107.47 T
2 F
( \336) 240.98 107.47 T
3 F
(lock) 258.83 107.47 T
0 F
([Method]) 494.68 107.47 T
-0.16 (Creates a lock whose name is) 90 81 P
3 F
-0.16 (name) 233.67 81 P
0 F
-0.16 ( \050which is a string\051. The returned object may be a subclass) 259.66 81 P
(of) 90 67 T
1 F
(<lock>) 103 67 T
0 F
(.) 138.01 67 T
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Threads Library Proposal) 72 42.62 T
(March 16, 1995) 280.56 42.62 T
(5) 536 42.62 T
0 12 Q
-0.17 (If) 90 712 P
3 F
-0.17 (r) 100.82 712 P
-0.17 (ecursive) 105.05 712 P
0 F
-0.17 ( is true, this creates a lock that can be locked multiple times simultaneously by the) 145.03 712 P
(same thread. Otherwise, the lock can be locked just once at a time.) 90 698 T
1 F
(with-lock-held) 72 663.28 T
0 F
( \050) 146 663.28 T
3 F
(lock) 153 663.28 T
0 F
(\051) 172.99 663.28 T
3 F
(body) 179.99 663.28 T
1 F
(end) 206.32 663.28 T
0 F
(;) 224.99 663.28 T
([Macro]) 500.69 663.28 T
(T) 90 634.56 T
(akes the lock) 96.49 634.56 T
3 F
(lock) 162.14 634.56 T
0 F
(, and then evaluates) 182.14 634.56 T
3 F
(body) 279.78 634.56 T
0 F
( with the lock held. If the lock is held by another) 303.11 634.56 T
-0.35 (thread,) 90 620.56 P
1 F
-0.35 (with-lock-held) 125.64 620.56 P
0 F
-0.35 ( waits until the lock is free. This release the lock upon exiting, and then) 199.64 620.56 P
(returns the values of) 90 606.56 T
3 F
(body) 190.64 606.56 T
0 F
( as its value.) 213.97 606.56 T
1 14 Q
(3.1  Mutexes) 72 570.5 T
0 12 Q
-0.23 (A mutex is a primitive, non-blocking synchronization mechanism. Dylan mutexes are intended to) 72 541.11 P
(interface directly to a mutual exclusion mechanism provided by the thread library) 72 527.11 T
(.) 462.82 527.11 T
1 F
(<mutex>) 72 492.39 T
0 F
([Class]) 506 492.39 T
(The class representing a mutex, a subclass of) 90 463.67 T
1 F
(<object>.) 308.95 463.67 T
(make <mutex>) 72 428.95 T
0 F
( #key) 148.67 428.95 T
3 F
(name) 178 428.95 T
2 F
( \336) 203.99 428.95 T
3 F
(mutex) 221.83 428.95 T
0 F
([Method]) 494.68 428.95 T
(Creates a mutex whose name is) 90 400.22 T
3 F
(name) 243.97 400.22 T
0 F
( \050which is a string\051.) 269.96 400.22 T
1 F
(acquire) 72 365.5 T
3 F
(mutex) 113.66 365.5 T
2 F
( \336) 142.32 365.5 T
3 F
(boolean) 160.16 365.5 T
0 F
([Generic function]) 451.03 365.5 T
(Attempts to acquire the mutex, returning) 90 336.78 T
1 F
(#t) 288.31 336.78 T
0 F
( if it succeeded and) 298.31 336.78 T
1 F
(#f) 393.95 336.78 T
0 F
( if it failed.) 403.94 336.78 T
1 F
(release) 72 302.06 T
3 F
(mutex) 110.32 302.06 T
2 F
( \336) 138.97 302.06 T
3 F
(boolean) 156.82 302.06 T
0 F
([Generic function]) 451.03 302.06 T
(Release the mutex, returning) 90 273.33 T
1 F
(#t) 230.98 273.33 T
0 F
( if it was previously locked or) 240.97 273.33 T
1 F
(#f) 387.29 273.33 T
0 F
( if it was not locked.) 397.28 273.33 T
1 14 Q
(3.2  Semaphor) 72 237.28 T
(es) 157.69 237.28 T
0 12 Q
(A semaphore is a primitive, blocking synchronization mechanism. Dylan semaphores are) 72 207.89 T
(intended to interface directly to a mutual exclusion mechanism provided by the thread library) 72 193.89 T
(.) 519.48 193.89 T
1 F
(<semaphore>) 72 159.17 T
0 F
([Class]) 506 159.17 T
(The class representing a semaphore, a subclass of) 90 130.45 T
1 F
(<object>.) 330.94 130.45 T
(make <semaphore>) 72 95.72 T
0 F
( #key) 172.67 95.72 T
3 F
(name) 202 95.72 T
2 F
( \336) 227.99 95.72 T
3 F
(mutex) 245.83 95.72 T
0 F
([Method]) 494.68 95.72 T
(Creates a semaphore whose name is) 90 67 T
3 F
(name) 265.96 67 T
0 F
( \050which is a string\051.) 291.95 67 T
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Threads Library Proposal) 72 42.62 T
(March 16, 1995) 280.56 42.62 T
(6) 536 42.62 T
1 12 Q
(acquire) 72 712 T
3 F
(semaphore) 113.66 712 T
2 F
( \336) 166.32 712 T
3 F
(boolean) 184.16 712 T
0 F
([Generic function]) 451.03 712 T
-0.02 (Attempts to acquire the semaphore. If the semaphore is free, this immediately returns) 90 682.72 P
1 F
-0.02 (#t) 502.03 682.72 P
0 F
-0.02 (. Oth-) 512.02 682.72 P
(erwise, the thread waits until the semaphore becomes free, and then acquires it and returns) 90 668.72 T
1 F
(#t) 526.9 668.72 T
0 F
(.) 536.89 668.72 T
1 F
(release) 72 633.44 T
3 F
(semaphore) 110.32 633.44 T
2 F
( \336) 162.97 633.44 T
3 F
(boolean) 180.82 633.44 T
0 F
([Generic function]) 451.03 633.44 T
-0.37 (Releases then semaphore and returns) 90 604.17 P
1 F
-0.37 (#t) 268.45 604.17 P
0 F
-0.37 (. If any other threads are queued up for the semaphore,) 278.45 604.17 P
(the \336rst such thread is removed from the queue and made runnable.) 90 590.17 T
1 14 Q
(3.3  Monitors) 72 553.56 T
1 12 Q
(<monitor>) 72 517.61 T
0 F
([Class]) 506 517.61 T
(The class representing a monitor) 90 488.33 T
(, a subclass of) 246.16 488.33 T
1 F
(<object>.) 316.48 488.33 T
(Blah blah blah...) 72 459.06 T
1 16 Q
(4.  Atomic Modi\336cation) 72 415.11 T
1 12 Q
(atomic-inc!) 72 378.5 T
3 F
(place) 132.98 378.5 T
0 F
([Macro]) 500.69 378.5 T
(Increments the value of) 90 349.22 T
3 F
(place) 205.97 349.22 T
0 F
( in a single, atomic operation.) 231.96 349.22 T
1 F
(atomic-dec!) 72 313.95 T
3 F
(place) 134.98 313.95 T
0 F
([Macro]) 500.69 313.95 T
(Decrements the value of) 90 284.67 T
3 F
(place) 209.96 284.67 T
0 F
( in a single, atomic operation.) 235.96 284.67 T
1 F
(atomic-exchange) 72 249.39 T
3 F
( place1 place2) 157.98 249.39 T
0 F
([Macro]) 500.69 249.39 T
(Exchanges the values in the two places) 90 220.11 T
3 F
(place1) 280.3 220.11 T
0 F
( and) 312.29 220.11 T
3 F
(place2) 335.62 220.11 T
0 F
( in a single, atomic operation.) 367.61 220.11 T
1 16 Q
(5.  T) 72 176.17 T
(imers) 102.38 176.17 T
1 12 Q
(sleep) 72 139.56 T
3 F
( n :: <float>) 97.33 139.56 T
0 F
([Function]) 489.34 139.56 T
(Causes the current thread to stop executing and become dormant for) 90 110.28 T
3 F
(n) 420.26 110.28 T
0 F
( seconds. After) 426.26 110.28 T
3 F
(n) 501.58 110.28 T
0 F
( sec-) 507.58 110.28 T
(onds have expired, the thread will resume execution.) 90 96.28 T
1 F
(Blah blah blah...) 72 67 T
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Threads Library Proposal) 72 42.62 T
(March 16, 1995) 280.56 42.62 T
(7) 536 42.62 T
1 16 Q
(6.  Events) 72 709.33 T
1 12 Q
(<event>) 72 675.83 T
0 F
([Class]) 506 675.83 T
(The class representing an event, a subclass of) 90 649.67 T
1 F
(<object>.) 310.94 649.67 T
(Blah blah blah...) 72 623.5 T
1 16 Q
(7.  Message Queues) 72 582.67 T
0 12 Q
(Message queues are a objects that provide for inter) 72 555.17 T
(-thread communication; they support they) 315.7 555.17 T
-0.02 (same operations as) 72 541.17 P
1 F
-0.02 (<deque>) 165.59 541.17 P
0 F
-0.02 (\325) 209.95 541.17 P
-0.02 (s. Any thread may post a message \050any Dylan object\051 onto any mes-) 213.28 541.17 P
(sage queue, and any thread may read from \050and block on\051 any message queue. Multiple threads) 72 527.17 T
(can block on the same message queue.) 72 513.17 T
1 F
(make <message-queue>) 72 481 T
2 F
( \336) 193.33 481 T
3 F
(message-queue) 211.18 481 T
0 F
([Method]) 494.68 481 T
(Creates a message queue.) 90 454.83 T
1 F
(push) 72 422.67 T
3 F
(message-queue object) 99.68 422.67 T
2 F
( \336) 205.32 422.67 T
3 F
(message-queue) 223.16 422.67 T
0 F
([Generic function]) 451.03 422.67 T
(Adds the object to the front of the message queue.) 72 396.5 T
1 F
(push-last) 72 364.33 T
3 F
(message-queue object) 121.68 364.33 T
2 F
( \336) 227.32 364.33 T
3 F
(message-queue) 245.16 364.33 T
0 F
([Generic function]) 451.03 364.33 T
(Adds the object to the end of the message queue.) 90 338.17 T
1 F
(pop) 72 306 T
3 F
(message-queue) 94.34 306 T
2 F
( \336) 167.65 306 T
3 F
(object) 185.5 306 T
0 F
([Generic function]) 451.03 306 T
(Removes the \336rst element from the message queue and returns it. If the message queue is) 90 279.83 T
(empty) 90 265.83 T
(, this will block until an object is inserted into the message queue.) 119.22 265.83 T
1 F
(pop-last) 72 233.67 T
3 F
(message-queue) 116.34 233.67 T
2 F
( \336) 189.65 233.67 T
3 F
(object) 207.49 233.67 T
0 F
([Generic function]) 451.03 233.67 T
(Removes the last element from the message queue and returns it. If the message queue is) 90 207.5 T
(empty) 90 193.5 T
(, this will block until an object is inserted into the message queue.) 119.22 193.5 T
1 F
(wait) 72 161.33 T
3 F
(message-queue) 97 161.33 T
0 F
(#key) 173.3 161.33 T
3 F
(timeout default) 199.63 161.33 T
2 F
(\336) 274.97 161.33 T
3 F
(object) 289.81 161.33 T
0 F
([Generic function]) 451.03 161.33 T
(If the message queue is empty) 90 135.17 T
(, the current thread blocks until a message arrives. If) 234.19 135.17 T
3 F
(timeout) 488.8 135.17 T
0 F
( is) 524.8 135.17 T
(supplied and is not) 90 121.17 T
1 F
(#f) 183.34 121.17 T
0 F
(, it is an unsigned integer representing the number of milliseconds to) 193.33 121.17 T
(wait for a message to arrive.) 90 107.17 T
-0.14 (If) 90 81 P
1 F
-0.14 (wait) 100.85 81 P
0 F
-0.14 ( returns before the timer expires, it returns the \336rst message in the message queue with-) 122.85 81 P
(out removing it from the queue. Otherwise, it returns the value of) 90 67 T
3 F
(default) 406.62 67 T
0 F
(.) 439.96 67 T
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Threads Library Proposal) 72 42.62 T
(March 16, 1995) 280.56 42.62 T
(8) 536 42.62 T
1 12 Q
(size) 72 712 T
3 F
(message-queue) 93.66 712 T
2 F
( \336) 166.97 712 T
3 F
(integer) 184.81 712 T
0 F
([Generic function]) 451.03 712 T
(Returns the number of messages in the message queue.) 90 686 T
1 F
(empty?) 72 654 T
3 F
( message-queue) 109.99 654 T
2 F
( \336) 186.3 654 T
3 F
(boolean) 204.14 654 T
0 F
([Generic function]) 451.03 654 T
(Returns) 90 628 T
1 F
(#t) 130.33 628 T
0 F
( if the message queue is empty) 140.33 628 T
(, otherwise returns) 286.86 628 T
1 F
(#f) 378.84 628 T
0 F
(.) 388.84 628 T
1 16 Q
(8.  Fluid Binding) 72 587.33 T
0 12 Q
(Fluid binding provides a means to assign a value to a settable place \050module variables and slots) 72 560 T
-0.44 (with setters\051 within a particular dynamic scope. Since threads are de\336ned to have distinct dynamic) 72 546 P
(scopes from one another) 72 532 T
(, \337uid binding provides a means of having per) 189.16 532 T
(-thread values for settable) 409.9 532 T
-0.33 (places. This proposal is not intended to specify exactly how this is implemented, just that a \337uidly) 72 518 P
(bound place must have the correct behavior with respect to multiple threads.) 72 504 T
(Only places that have been declared \337uid can be \337uidly bound. Module variables and slots are) 72 478 T
-0.08 (declared to be \337uid using the following two extensions to) 72 464 P
1 F
-0.08 (de\336ne variable) 349.82 464 P
0 F
-0.08 ( and the slot de\336nitions) 425.41 464 P
(in) 72 450 T
1 F
(de\336ne class) 84.34 450 T
0 F
(.) 142.01 450 T
(There is no \322dereference\323 operator to get the value of a \337uidly-bound place. Simply calling the) 72 424 T
(usual getter \050or referring to the module variable\051 will return the \337uidly-bound value.) 72 410 T
1 F
(define fluid variable) 72 378 T
3 F
(bindings) 178.34 378 T
1 F
(=) 222.68 378 T
3 F
(init) 232.52 378 T
0 F
([Definition]) 482.68 378 T
(Just like de\336ne variable, except that the resulting variable can be bound with) 90 352 T
1 F
(\337uid-bind) 460.61 352 T
0 F
(.) 511.31 352 T
1 F
(fluid slot) 72 320 T
3 F
( getter-name [ :: type] options) 117.01 320 T
0 F
([Slot definer]) 475.68 320 T
(De\336nes a slot just like an ordinary instance slot, except that the resulting slot can be bound) 90 294 T
(with) 90 280 T
1 F
(\337uid-bind) 114.34 280 T
0 F
(.) 165.04 280 T
1 F
(\337uid-bind) 72 248 T
3 F
(place) 125.7 248 T
0 F
( =) 151.69 248 T
3 F
(value) 164.46 248 T
0 F
(;) 190.45 248 T
([Syntax]) 498.67 248 T
(Arranges for the settable place named by) 90 222 T
3 F
(place) 289.61 222 T
0 F
( to have the value) 315.6 222 T
3 F
(value) 403.25 222 T
0 F
(, but only in the) 429.24 222 T
-0.2 (dynamic extent of the subsequent forms of its enclosing body) 90 208 P
-0.2 (. \050In particular) 382.38 208 P
-0.2 (, the invocation of) 450.48 208 P
1 F
(\337uid-bind) 90 194 T
0 F
( in one thread does not af) 140.7 194 T
(fect the value of the bound place in other threads.\051) 261.79 194 T
-0.16 (The bindings are in ef) 90 168 P
-0.16 (fect from the point of the) 194.45 168 P
1 F
-0.16 (\337uid-bind) 316.78 168 P
0 F
-0.16 ( until the end of the smallest enclos-) 367.48 168 P
(ing implicit body containing the) 90 154 T
1 F
(\337uid-bind) 247.01 154 T
0 F
(. \050That is, it obeys the same scoping rules as) 297.71 154 T
1 F
(let) 512.35 154 T
0 F
(,) 525.01 154 T
(but unlike) 90 140 T
1 F
(let) 141.34 140 T
0 F
(, it does not create any new variables.\051) 154 140 T
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Threads Library Proposal) 72 42.62 T
(March 16, 1995) 280.56 42.62 T
(9) 536 42.62 T
1 16 Q
(9.  Acknowledgments) 72 709.33 T
0 12 Q
(W) 72 682 T
(e\325d like to thank the other people who have been instrumental in the production of this pro-) 82.37 682 T
(posal: T) 72 668 T
(ony Mann, Keith Playford, T) 110.16 668 T
(ucker W) 249.06 668 T
(ithington, and the folks who wrote Apple\325) 289.56 668 T
(s threads) 490.55 668 T
(proposal.) 72 654 T
1 16 Q
(10.  Open Issues) 72 613.33 T
0 12 Q
(What classes and generic functions are sealed, etc?) 72 586 T
(What dynamic context does) 72 560 T
3 F
(function) 208.64 560 T
0 F
( run in for) 247.98 560 T
1 F
(interrupt-thr) 299.3 560 T
(ead) 366.41 560 T
0 F
(?) 384.41 560 T
(Do we want to specify hooks for per) 72 534 T
(-thread initialization/destruction functions?) 246.72 534 T
(Is it OK to call) 72 508 T
1 F
(interrupt-thr) 146.33 508 T
(ead) 213.43 508 T
0 F
( on a disabled thread? How about) 231.43 508 T
1 F
(r) 395.06 508 T
(estart-thr) 400.18 508 T
(ead) 449.27 508 T
0 F
(?) 467.27 508 T
(Should we explicitly specify deep or shallow bindings?) 72 482 T
(This proposal uses \322mutex\323 to mean a primitive, non-blocking lock, and \322semaphore\323 to mean a) 72 456 T
-0 (primitive, blocking lock. Apple uses this terminology) 72 442 P
-0 (, too. W) 327.87 442 P
-0 (indows/NT uses \322mutex\323 to mean a) 366.04 442 P
(lock across processes \050not just threads!\051 and \322semaphore\323 to mean a lock across processes that) 72 428 T
(doesn\325) 72 414 T
(t care what thread \050or threads\051 actually owns the lock. What do we do?) 103.78 414 T
-0.46 (Do we want to provide coroutining primitives? I bet most common thread libraries don\325) 72 388 P
-0.46 (t, so it will) 487.48 388 P
(be hard to simultaneously provide this and use the native thread library) 72 374 T
(. Do we want to try to) 412.18 374 T
(specify) 72 360 T
4 F
(call/cc) 109.66 360 T
0 F
(?) 160.06 360 T
FMENDPAGE
%%EndPage: "9" 9
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 9
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Symbol
%%+ Times-Italic
%%+ Courier
%%EOF
