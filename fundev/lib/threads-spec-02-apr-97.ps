%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.1
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%-
%- Frame ps_prolog 5.0, for use with Frame 5.0 products
%- This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
%- All rights reserved.  This ps_prolog file may be freely copied and 
%- distributed in conjunction with documents created using FrameMaker, 
%- FrameMaker/SGML FrameReader and FrameViewer as long as this 
%- copyright notice is preserved.
%-
%- FrameMaker users specify the proper paper size for each print job in the
%- "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
%- printer that the PS file is sent to does not support the requested paper
%- size, or if there is no paper tray of the proper size currently installed, 
%- then the job will not be printed.  The following flag, if set to true, will
%- cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            true def
%-
%- Frame products normally print colors as their true color on a color printer
%- or as shades of gray, based on luminance, on a black-and white printer. The
%- following flag, if set to true, forces all non-white colors to print as pure
%- black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%-
%- Frame products can either set their own line screens or use a printer's 
%- default settings. Three flags below control this separately for no 
%- separations, spot separations and process separations. If a flag
%- is true, then the default printer settings will not be changed. If it is
%- false, Frame products will use their own settings from a table based on
%- the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%-
%- For any given PostScript printer resolution, Frame products have two sets of 
%- screen angles and frequencies for printing process separations, which are 
%- recomended by Adobe. The following variable chooses the higher frequencies
%- when set to true or the lower frequencies when set to false. This is only
%- effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%-
%- The following is a set of predefined optimal frequencies and angles for various
%- common dpi settings. This is taken from "Advances in Color Separation Using
%- PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
%- and corrolated with information which is in various PPD (4.0) files.
%-
%- The "dpiranges" figure is the minimum dots per inch device resolution which
%- can support this setting. The "low" and "high" values are controlled by the
%- setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
%- the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
%- three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%-
%- PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
%- to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
%- (too badly) against the screen frequencies of any separations for that DPI.
% This is computed by taking dpi/9 as the ideal pixels per repetition, and then
% computing a tiling size in printer pixels for each of the four separations as 
% (dpi/screenFreq)*(cos(screenAngle)+sin(screenAngle)) Actually, this is the same 
% for Cyan and Magenta). Then, we take a "nice" LCM of the tile sizes close to
% the desired pattern tile where the beat factor is not more than 2 or 3.
%
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def

/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def

/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%-
%- PostScript Level 2 printers contain an "Accurate Screens" feature which can
%- improve process separation rendering at the expense of compute time. This 
%- flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%-
%- The following PostScript procedure defines the spot function that Frame
%- products will use for process separations. You may un-comment-out one of
%- the alternative functions below, or use your own.
%-
%- Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%-
%- Line function
%- /FMSpotFunction { pop } def
%-
%- Elipse function
%- /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%-		sqrt 1 exch sub } def
%-
%-

/FMversion (5.0) def % matches PS_VERSION in fmprintdriver

% PostScript Level 1 = true, 2 = false
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def

% Set up Color vs. Black-and-White
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
%		statusdict /processcolors known {
%			statusdict /processcolors get exec
%		} {1} ifelse
%		1 gt
		true
	} ifelse
def

/FrameDict 400 dict def % should check this value each time changes made

%
% For NeWS we add a fake errordict, so we can psh files
%
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if

%- The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put % save old rangecheck
errordict /rangecheck {FrameDict /bug true put} put % will flag bug found
FrameDict /bug false put % flag bug not found
mark % since we're not sure what will happen next
%- Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark % junk from readline and rangecheck
errordict /rangecheck FrameDict /tmprangecheck get put % restore rangecheck
FrameDict /bug get { % redefine readline if last one got a rangecheck
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop % get a char
			dup 10 eq {exit} if % exit if LF
			dup 13 eq {exit} if % exit if CR
			gstring exch gindex exch put % store it away
			/gindex gindex 1 add def % bump index
		} loop
		pop % eol character
		gstring 0 gindex getinterval true % simulate real readline
		} bind def
	} if

% outer-world defs

/FMshowpage /showpage load def
/FMquit /quit load def

/FMFAILURE { % enter with two error strings on the stack
	dup = flush % send a copy of the message to the console
	FMshowpage % msg on a page by itself, so it can't be, say, black on black
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage % we might be in the middle of some EPS, where "showpage"
	FMquit % and "quit" are redefined
	} def % only used once at most, so no bind

/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def % only used at startup, so no bind

/FMBADEPSF { % Call with bad operator name on stack (as a string)
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length % parmstr errstr errstr indx
	5 -1 roll % errstr errstr index parmstr
	putinterval % errstr
	FMFAILURE
	} def

% standard concatprocs routine
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def

% Put all local variables here in alphabetical order.
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall

% Start of PDF/Acrobat support

% Bind def
/FmBD {bind def} bind def

systemdict /pdfmark known {
	/fMAcrobat true def

	% FmPD is a conditional PDFMark
	/FmPD /pdfmark load def
	
	% FmPT is a show text operator which only show up when distiller is active
	/FmPT /show load def
	
	% FmPD2 and FmPA are Acrobat 2.0-specific
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		% FmPD2 is like FmPD but for Acrobat 2.0-specific PDF
		/FmPD2 /pdfmark load def
		
		% x y/name FmPA
		% 	is equivalent to
		% [/Dest/name/View[/FitH x y FmDC exch pop]/DEST FmPD
		% It is a shortcut for pagragraph Uinique ID designators whic occurr commonly.
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		% These are No-Ops for Distiller 1.0
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	% these are the No-Ops for regular PostScript
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse

% This convert a set of X Y coordinates from the current user space to the default
% PostScript coordinates needed by some pdfmark variants. We also convert to 
% integer because the distiller doesn't always like floats!
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD

% This converts four numbers into a bounding box making sure the first two are maller than the last two
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD

% End of PDF/Acrobat support

%
% Color separation code
%

% Constants.

/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def

/fMNegative false def % we are inverting the page

% Variables.

/FrameSepIs FMnone def % separation we are printing
% If FrameSepIs is FMcustom, this is the custom color
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def

/FrameCurColors [ 0 0 0 1 0 0 0 ] def % c m y k r g b

% Utility routines

/FrameColorEpsilon .001 def	% epsilon by which values can differ and sill be equal
/eqepsilon {		% v1 v2 eqeps bool
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def

% are the cmyk and cmykrgb arrays on the stack the same color?
/FrameCmpColorsCMYK { % [ c1 m1 y1 k1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
% are the rgb and cmykrgb arrays on the stack the same color?
/FrameCmpColorsRGB { % [ r1 g1 b1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def

% convert r g b to c m y k
/RGBtoCMYK { % r g b
	1 exch sub % r g y
	3 1 roll % y r g
	1 exch sub % y r m
	3 1 roll % m y r
	1 exch sub % m y c
	3 1 roll % c m y
	3 copy % c m y c m y
	2 copy % c m y c m y m y
	le { pop } { exch pop } ifelse % c m y c min(m,y)
	2 copy % c m y c min(m,y) c min(m,y)
	le { pop } { exch pop } ifelse % c m y min(c, min(m,y))
	dup dup dup % c m y k k k k
	6 1 roll % c k m y k k k
	4 1 roll % c k m k y k k
	7 1 roll % k c k m k y k
	sub % k c k m k y
	6 1 roll % y k c k m k
	sub % y k c k m
	5 1 roll % m y k c k
	sub % m y k c
	4 1 roll % c m y k 
} bind def
/CMYKtoRGB { % c m y k CMYKtoRGB r g b
	dup dup 4 -1 roll add 						  % c m k k y+k
	5 1 roll 3 -1 roll add 						  % y+k c k m+k
	4 1 roll add 								  % m+k y+k c+k
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  % r m+k y+k
	1 exch sub dup 0 lt {pop 0} if exch 	      % r b m+k
	1 exch sub dup 0 lt {pop 0} if exch	  		  % r g b
} bind def

% Public routines


% Happens at the top of each page that is a separation
/FrameSepInit {
	1.0 RealSetgray
} bind def
% Tell the separation code that this separation is for a custom color
/FrameSetSepColor { % c m y k r g b
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
% Tell the separation code that this separation is Cyan
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
% Tell the separation code that this separation is Magenta
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Yellow
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Black
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
% Tell the separation code we are not doing a separation
/FrameNoSep { %
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def

% Initialize the separation code with all the custom colors we are
% separating (not process colors)
/FrameSetSepColors { % list of arrays of [c m y k r g b] count 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  % array of arrays of colors we are separating
	exch def end
	} bind def

% is this color array in the array of custom color separations?
/FrameColorInSepListCMYK { % [ c m y k ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsCMYK % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { % [ r g b ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsRGB % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def

% Level 1 color operators saved and redefined
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 

% Setgray patch
/setgray { % num
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ % go to white unless the current sep color is black
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { % r g b
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] % r g b [ r g b ]
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor % safe since we will overwrite the color state
		currentrgbcolor  % r g b - Let PostsCript to the conversion.
		setrgbcolor % call our version
	} 
	ifelse
	end
} bind def
FrameDict begin

/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { % c m y k
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put

% Set up a prototype pattern for PostScript Level 2
fMLevel1 { 
	% set up screen functions for the patterns in PS level 1
	% each entry contains an angle, spot function, flipped spot function,
	% gray level and frequency multiplier.
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { % prototype level 2 pattern dictionary
	% define some PostScript procedures for known jaggy patterns.
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		% Always 1 for PS Level 2
		/PaintType 2 def		% Uncolored pattern
		/TilingType 3 def		% constant spacing and faster tiling
		/BBox [ 0 0 8 8 ] def 	% bounding box
		/XStep 8 def			% X offset
		/YStep 8 def			% Y offset
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse

%combineColor puts together the current gray value (which could also be
%a fraction of on bits for a fill pattern and the current color and calls
%the appropriate function
%
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { % separation case
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				% Level 1 patterns are either all there or not there at all
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def

/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
% freq and sangle are used for ps Level 1 pattern building.
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def

%
% screen index depending on dpi
%	- screenIndex smallint
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def

%
% These routines get the standard Adobe frequencies, angles, and spot functions
% depending on the DPI
%
% - getCyanScreen freq angle spotfunction
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getMagentaScreen freq angle spotFunction
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getYellowScreen freq angle spotFunction
% note that some of these use a "tripple dot" function at 1/3 the frequency
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def

%
% - getBlackScreen freq angle spotFunction
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def

%
% - getSpotScreen freq angle spotFunction
/getSpotScreen {
	getBlackScreen
} bind def

%
% - getCompositeScreen freq angle spotFunction
/getCompositeScreen {
	getBlackScreen
} bind def

% FmSetScreen sets the screen for either PostScript Level 1 or Level 2 and optionally
% sets the accuratescreens flag in the latter case
% freq angle spotfunction FMSetScreen -
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def

% This sets the default screen as was set at the beginning of the job
% - setDefaultScreen -
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def

% This sets the current screen depending on FrameSepIs
% - setCurrentScreen -
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def


end

% End of Color separation code
%
	
/FMDOCUMENT { % xscale yscale edown negative paperwidth paperheight manfeed numcopies numfonts
	array /FMfonts exch def % Why isn't this in FrameDict???
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def % invert page
	0 ne /edown exch def % flip page along y axis
	/yscale exch def
	/xscale exch def

	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def % some PS's leave junk on dict ...
		/FMoptop count def % ...or on operand stack...
		setpapername % This stuff may alter the transfer/screen/angle
		manualfeed {true} {papersize} ifelse % true->more work to do
		{manualpapersize} {false} ifelse % true->more work to do
		{desperatepapersize} {false} ifelse % true->failed completely
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for %...if tray not installed
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse % fMLevel1
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def

			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse

	end % FrameDict
} def % only used at startup, so no bind

/FMBEGINPAGE { % pagewidth pageheight landscape color-arrays count
	FrameDict begin % for the whole page...
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { % check for landscape
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
% paint the whole page in "white".  If the page is inverted, then
% this will actually paint our black background
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave % for CLIP
} def % only used infrequently, so no bind

/FMENDPAGE {
	grestore % for CLIP
	pagesave restore
	end % FrameDict
	showpage
	} def % only used infrequently, so no bind

/FMFONTDEFINE { % fontindex nonstd_encoding fontname -- 
	FrameDict begin
	findfont % fontindex nonstd_encoding font
	ReEncode % fontindex font'
	1 index exch % fontindex fontindex font'
	definefont % fontindex font"
	FMfonts 3 1 roll %  FMfonts fontindex font"
	put
	end % FrameDict
	} def % only used infrequently, so no bind

/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end % framedict
	} def % Only called once, so no bind

/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end % FrameDict
	} def % only used infrequently, so no bind

% Set things to a known, quiescent state, for when we switch to another writer
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray % Not FMsetgray; only called outside of our environment!
	} bind def

/FMBEGINEPSF { % <theta> llx lly urx ury fw fh fx fy
	end % FrameDict
	/FMEPSF save def % in userdict
	/showpage {} def % this def is in userdict
%- See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
%- "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def % FMBADEPSF knows this is the longest!
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
%	/initmatrix {(initmatrix) FMBADEPSF} def	% Aldus Freehand 4.0 epsf uses this harmlessly <Gus 4/26/95>
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall % neat trick
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale % then scale
	llx neg lly neg translate % then compensate for LL offset 
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count def % tricky! "/FMoptop" on stack
	} bind def

/FMENDEPSF {
	count -1 FMoptop {pop pop} for % clear EPS junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMEPSF restore
	FrameDict begin % for the whole page...
	} bind def

FrameDict begin % put most defs here

/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def

/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def

/pagedimen { % name width height
	paperheight sub abs 16 lt exch % 16pt is an arbitrary slop amount
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def

/setpapername { % Already set up: paperwidth paperheight and manualfeed
	/papersizedict 14 dict def % one for /papername, one for /unknown
	papersizedict begin
	/papername /unknown def % in case no match
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def

/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end % return true if more work to do
	} bind def

/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped % return true if more work to do
	} bind def

/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped % return true iff failed
		end
		} {true} ifelse % return true iff failed
	} bind def

/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def

%
% Font re-encoding to include diacritics
% 
/DiacriticEncoding [

/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron

] def

/ReEncode { % nonstd_encoding font -- reencodedfont
	dup % nonstd_encoding font font
	length % nonstd_encoding font dictlength
	dict begin % nonstd_encoding font % currentdict = newdict
	{% forall % forall is over font to be copied
	1 index /FID ne % skip FID
		{def} % defs go into newfontdict which is currentdict
		{pop pop} ifelse % copy all keys including /Encoding
	} forall % nonstd_encoding
	0 eq {/Encoding DiacriticEncoding def} if % --
	currentdict % push a copy of the copied font dict onto operand stack
	end % font' % before popping it off dictionary stack
	} bind def

FMPColor 
	% setup procs for color printing
	{

	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	% setup procs for B&W printing
	{
	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse

/K { % c m y k r g b SEPARATION
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
%
% graymode is true if we are just doing gray fills, this way do not keep calling
% setscreen. I don't know what the cost is on calling setscreen with defaults, but
% this is easy to keep track of, and we know for sure we aren't wasting cycles.
% if graymode is false and fMLevel1 is false, then we are using Level 2 patterns.
%
/graymode true def

% used by level 1 patterns
% defaultflip matrixentry fmGetFlit -> eith -1 or 1
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if

/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop % angle spot fspot gray mult
			freq 								% freq
			mul									% times multiplier
			5 2 roll							% angle spot fspot gray mult freq -> gray freq angle spot fspot
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		% landscape
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								% portrait     
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		% take regular or flipped spot function
			fMNegative { 
				{neg} fmConcatProcs 			% invert spot function
			} if
			bind
			% we need to bypass any screen filter and go directly to systemdict
			% to avoid problems with Kodak Precision calibration software
			% <Gus 9/13/93>
			systemdict /setscreen get exec		% leave graylevel on stack
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { % Level 2 version
		pop pop
		dup patCache exch known {
			patCache exch get
		} { % not in cache
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
%			9 orgfreq 
%				organgle sin abs organgle cos abs add div
%				dup 16 div round dup 0 le {pop 1} if  % Unix pattern size
%			    dup  9 div round dup 0 le {pop 1} if  % Mac larger (WYSIWYG) size
%					div div dup matrix scale % This gives Unix pattern size.
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def

/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def

/normalize {
	transform round exch round exch itransform
	} bind def

/dnormalize {
	dtransform round exch round exch idtransform
	} bind def

/lnormalize { % line widths are always odd so that arrow heads work
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def

/H { % THICK
	lnormalize setlinewidth
	} bind def

/Z {
	setlinecap
	} bind def
	
% This is used to fill or stroke white behind a Level 2 pattern
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def

/X { % TEXTURE
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} % Silly to pass parameters here
	{setGrayScaleMode}
	ifelse
	} bind def

/V { % FILL
	PFill gsave eofill grestore
	} bind def

/Vclip {
	clip
	} bind def

/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/N { % PEN
	PStroke
	} bind def

/Nclip {
	strokepath clip newpath
	} bind def

/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def

/L { % POLYLINE
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def

/Y { % POLYGON !!!
	L % POLYLINE
	closepath
	} bind def

/R { % RECT x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y % POLYGON
	} bind def

/rarc % Leaves all sorts of junk on the operand stack for caller to clear off
	{rad % arcto might fail if we're scaled way down
	 arcto
	} bind def

/RR { % ROUNDRECT x1 y1 x2 y2 r
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if % in case rarc failed for degenerate arcs
	cleartomark
	} bind def

/RRR { % ROUNDRECT ROTATED xs ys x1 y1 x2 y2 x3 y3 x4 y4 r
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto % eats xs ys
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def

/C { % CLIP
	grestore
	gsave
	R % RECT
	clip
	setCurrentScreen
} bind def

/CP { % CLIPPOLY p1x p1y p2x p2y ... n 
	grestore
	gsave
	Y % POLYGON
	clip
	setCurrentScreen
} bind def

/F { % FONT
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def

/Q { % POINTSIZE (& font)
	/FMpointsize exch def
	F % could be slightly optimized here
	} bind def

/T { % TEXT <string> <x> <y>
	moveto show
	} bind def

% Callers of RF (rotate/flip) must gsave (or save) first; (g)restore when done
/RF { % <flip> <theta>
	rotate
	0 ne {-1 1 scale} if
	} bind def

/TF { % TEXTFLIPROTATE <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	show
	grestore
	} bind def

/P { % PADTEXT <pad> <string> <x> <y>
	moveto
	0 32 3 2 roll widthshow
	} bind def

/PF { % PADTEXTFLIPROTATE <pad> <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def

/S { % SPREADTEXT <spread> <string> <x> <y>
	moveto
	0 exch ashow
	} bind def

/SF { % SPREADTEXTFLIPROTATE <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def

/B { % PADSPREADTEXT <pad> <spread> <string> <x> <y>
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def

/BF { % PADSPREADTEXTFLIPROTATE <pad> <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def

/G { % ARCFILL theta1 theta2 width height x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	PFill fill
	grestore
	} bind def

/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
    normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
    translate
    scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def

/Gclip { % ARCFILL theta1 theta2 width height x y swid
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	clip newpath
	restorematrix
	} bind def

/GG { % ARCFILL ROTATED theta1 theta2 width height angle x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	rotate % eats angle
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath
	PFill
	fill
	grestore
	} bind def

/GGclip { % ARCFILL ROTATED theta1 theta2 width height angle x y
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	clip newpath
	restorematrix
	} bind def

/GGstrk { % ARCFILL ROTATED swid theta1 theta2 width height angle x y
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/A { % ARCPEN theta1 theta2 width height x y
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
	normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
	translate 
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	strokepath clip newpath
	restorematrix
} bind def

/Astrk {
	Gstrk
} bind def

/AA { % ARCPEN ROTATED theta1 theta2 width height angle x y
	gsave
	savematrix
	newpath
	% theta1 theta2 width height angle x y
	3 index 2 div add exch 4 index 2 div sub exch 
	% theta1 theta2 width height angle x y
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate % eats x y
	rotate % eats angle
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	strokepath clip newpath
	restorematrix
} bind def

/AAstrk {
	GGstrk
} bind def

/BEGINPRINTCODE { % -x -y width height
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count 7 sub def % tricky! 7 params on stack, plus "/FMoptop"
	/FMsaveobject save def
	userdict begin % insulate user from FrameDict; not in /FMdicttop count
	/showpage {} def % this def is in userdict
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	3 index neg 3 index neg translate
	} bind def

/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for % clear user junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMsaveobject restore % this is now safe, unless user very malicious
	} bind def

/gn { % get a number in a funny encoding scheme
	0 % result on stack
	{	46 mul % shift old digits
		cf read pop % get next character
		32 sub % zero is the space character
		dup 46 lt {exit} if % quit if we're the last digit
		46 sub add % add in this digit and loop around for next
		} loop
	add % result on stack
	} bind def

/cfs { % create a string of length "sl" filled with "val"s
	/str sl string def % create string as "str"
	0 1 sl 1 sub {str exch val put} for % fill array
	str def % define real array name, too; name is on stack from caller
	} bind def

/ic [ % "case" stmt list of procedures that the image commands should call
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def

/ms { % make all the strings
	/sl exch def % remember length of currently existing strings
	/val 255 def % that's white
	/ws cfs % make "ws" a string filled with white
	/im cfs % and "im" is a complete image scanline
	/val 0 def % that's black
	/bs cfs % make "bs" a string filled with black
	/cs cfs % here's where we'll put complete command lines
	} bind def

400 ms % make strings that will be plenty long for most applications

/ip { % image procedure; reads and executes commands to make scanlines
	is % leave image string and...
	0 % ...image position on stack all through this procedure
	cf cs readline pop % get a string of commands
	{	ic exch get exec % execute next command
		add % all commands leave a length on the stack; update pos
		} forall % step through all commands
	pop % get rid of image position pointer
	% image string left on stack, so it's returned to image primitive
	} bind def
/rip { % this is similar to ip above, except for 24 bit images
	   % this takes an extra argument, the width of the image
	  % do red
	  bis ris copy pop % copy blue to red
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  ris gis copy pop % copy red to green
	  dup is exch % position of green is width bytes into is
	  % do green
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop % copy green to blue
	  dup add is exch % position of blue is 2*width bytes into is
	  % do blue
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def

/rip4 { % this is similar to ip above, except for 32 bit images
	   % this takes an extra argument, the width of the image
	  % do cyan
	  kis cis copy pop % copy black to cyan
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  cis mis copy pop % copy cyan to magenta
	  dup is exch % position of magenta is width bytes into is
	  % do magenta
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop % copy magenta to yellow
	  dup dup add is exch % position of yellow is 2*width bytes into is
	  % do yellow
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop % copy yellow to black
	  3 mul is exch % position of black is 3*width bytes into is
	  % do black
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def


/wh { % fill a number of bytes with "white"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	ws 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/bl { % fill a number of bytes with "black"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	bs 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/s1 1 string def

/fl { % fill a number of bytes with a specific hex value
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len % remember where we got to
	} bind def

/hx { % read hex bytes directly; on entry, stack has <str> <pos> <len>
	3 copy getinterval % stack has <str> <pos> <len> <substr>
	cf exch readhexstring pop pop % stack back to <str> <pos> <len>
	} bind def

/wbytes { % width depth -> wb      find width in bytes  given 1, 2, 8 or 24 or 32
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAPc
	} bind def
%
% Common routine for imaging compressed images
%
/COMMONBITMAPc { % iw, ih, width, height, theta, x y depth proc
		 % (x,y) is the lower left corner of the image
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc                % run the desired proc after save has occurred
	/is im 0 lb getinterval def % image substring
	ws 0 lb getinterval is copy pop % whiten it
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{ip} image % zap!
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def
/BEGINBITMAPBW { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAP
	} bind def
%
% Common routine for uncompressed images
%
/COMMONBITMAP { % iw, ih, width, height, theta, x y depth proc
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc              % run the desired proc after save has occurred
	/is width depth wbytes string def
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{cf is readhexstring pop} image
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def

%
% All this hairy color setup stuff gus wrote on the mac, I just copied and
% changed the variable names to be humanly readable.

/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def

fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
% The HP PaintJet XL300 ignores the gray transfer curve but still sets its
% default black generation and undercolor removal functions as if it is
% used. This causes black colors not to work. Bug#56844 <Gus 2/22/93>
% - We go back to the old (correct?) way of doing this since this code
% is now bypassed for PS Level 2 printers in favor of colorSetup2 which
% uses PS Level 2 indexed color, which is much cleaner. <Gus 3/3/93>
		/u kk currentundercolorremoval exec def
%-		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
% Here, we set up indexed color for imaging on PS Level 2 without mucking around
% with the transfer functions.

/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse

%
% Setup a transfer function to convert psuedo color values into grayscale
% values based on the color lookup tables.
%
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
%
% image a color image
%
/BITMAPCOLOR { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
%
% Compressed color image rendering
%
/BITMAPCOLORc { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
%
% image a color image to a b&width device
%
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { % c m y k width
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { % r g b width
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end % of FrameDict definitions

% OPI stuff
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def

% Dashed lines stuff
/I { setdash } bind def
/J { [] 0 setdash } bind def

%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 16 FMDOCUMENT
0 0 /Palatino-Italic FMFONTDEFINE
1 0 /Palatino-Bold FMFONTDEFINE
2 0 /Palatino-Roman FMFONTDEFINE
3 0 /Helvetica-Narrow-Bold FMFONTDEFINE
4 0 /Courier-Bold FMFONTDEFINE
5 0 /Helvetica-Narrow FMFONTDEFINE
6 0 /Helvetica FMFONTDEFINE
7 0 /Palatino-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
99.65 105.95 531.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(DRAFT) 99.65 124.95 T
1 F
(1) 527.15 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 537.95 495.65 672.95 R
7 X
V
2 30 Q
0 X
(1) 171.65 652.95 T
99.65 611.4 495.65 638.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 611.4 495.65 638.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 632.1 261.65 632.1 2 L
V
3 H
2 Z
0 X
N
99.65 623.1 261.65 623.1 2 L
7 X
V
1 H
0 X
N
27.65 96.95 567.65 744.95 C
0 0 0 0 1 1 1 K
2 2 Q
7 X
-0.01 (1) 99.65 591.4 P
0 0 0 1 0 0 0 K
2 30 Q
0 X
0 0 0 1 0 0 0 K
-0.21 (Pr) 100.65 591.4 P
-0.21 (oposal for a Dylan Thr) 130.08 591.4 P
-0.21 (eads) 427.94 591.4 P
(Library) 99.65 553.4 T
99.65 150.95 477.65 456.95 R
7 X
V
2 11 Q
0 X
(Author: T) 99.65 449.62 T
(ony Mann) 146.41 449.62 T
3 16 Q
(1.1  About this document) 99.65 414.29 T
3 13 Q
(1.1.1  Ac) 99.65 380.29 T
(kno) 142.72 380.29 T
(wledg) 161.53 380.29 T
(ements) 191.84 380.29 T
2 11 Q
(The following people have been instr) 99.65 360.62 T
(umental in the pr) 280.27 360.62 T
(oduction of this docu-) 364.44 360.62 T
(ment: Bill Chiles, Simon Gr) 99.65 346.62 T
(een, Paul Haahr) 231.62 346.62 T
(, Rob Maclachlan, Scott McKay) 308.87 346.62 T
(,) 458.19 346.62 T
(Rod Moyse, Keith Playfor) 99.65 332.62 T
(d and T) 224.9 332.62 T
(ucker W) 261.5 332.62 T
(ithington.) 301.89 332.62 T
3 13 Q
(1.1.2  Goals) 99.65 299.29 T
2 11 Q
(This is a design for a Thr) 99.65 279.62 T
(eads library for Dylan. The goals of this library) 219.7 279.62 T
(, in) 446.14 279.62 T
(or) 99.65 265.62 T
(der of importance, ar) 109.8 265.62 T
(e:) 211.97 265.62 T
(\245) 108.65 245.62 T
(T) 126.65 245.62 T
(o map easily and ef) 132.38 245.62 T
(\336ciently onto the thr) 226.52 245.62 T
(eads facilities pr) 325.47 245.62 T
(ovided by all) 404.26 245.62 T
(common operating systems) 126.65 231.62 T
(\245) 108.65 211.62 T
(T) 126.65 211.62 T
(o permit all common thr) 132.38 211.62 T
(ead models, including co-operative, pr) 250.87 211.62 T
(e-emp-) 438.51 211.62 T
(tive and concurr) 126.65 197.62 T
(ent) 206.34 197.62 T
(\245) 108.65 177.62 T
(T) 126.65 177.62 T
(o make use of the language featur) 132.38 177.62 T
(es of Dylan) 296.51 177.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Proposal for a Dylan Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(2) 63.65 124.95 T
0 F
(DRAFT) 465.64 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
(\245) 126.65 665.62 T
(T) 144.65 665.62 T
(o pr) 150.38 665.62 T
(ovide enough functionality to implement mor) 169.89 665.62 T
(e advanced featur) 392.69 665.62 T
(es) 479.47 665.62 T
(portably in terms of the basic featur) 144.65 651.62 T
(es pr) 317.83 651.62 T
(ovided her) 341.27 651.62 T
(e.) 393.97 651.62 T
(The Dylan Thr) 117.65 631.62 T
(eads library is called) 188.59 631.62 T
4 9.5 Q
(threads) 291.17 631.62 T
2 11 Q
(. All documented bindings ar) 331.07 631.62 T
(e) 473.42 631.62 T
(exported fr) 117.65 617.62 T
(om the module) 171.69 617.62 T
4 9.5 Q
(threads) 248.46 617.62 T
2 11 Q
(.) 288.36 617.62 T
3 16 Q
(1.2  Multi-thread semantics) 117.65 582.29 T
2 11 Q
-0.28 (The Thr) 117.65 561.62 P
-0.28 (eads library pr) 155.83 561.62 P
-0.28 (ovides multiple thr) 226.47 561.62 P
-0.28 (eads of contr) 319.04 561.62 P
-0.28 (ol within a single space) 380.83 561.62 P
(of objects and module variables. Each thr) 117.65 547.62 T
(ead r) 317.42 547.62 T
(uns in its own independent) 341.92 547.62 T
(stack. The mechanism by which the thr) 117.65 533.62 T
(eads ar) 307.46 533.62 T
(e scheduled is not speci\336ed,) 342.02 533.62 T
(and it is not possible to determine how the execution of instr) 117.65 519.62 T
(uctions by dif) 411.78 519.62 T
(fer-) 478.24 519.62 T
(ent thr) 117.65 505.62 T
(eads will be interleaved. No mechanism is pr) 149.79 505.62 T
(ovided to call a function) 368.57 505.62 T
-0.05 (on a thr) 117.65 491.62 P
-0.05 (ead other than the curr) 155.1 491.62 P
-0.05 (ent thr) 266.16 491.62 P
-0.05 (ead. Neither is ther) 298.26 491.62 P
-0.05 (e a mechanism to sig-) 391.08 491.62 P
(nal an exception on a thr) 117.65 477.62 T
(ead other than the curr) 237.35 477.62 T
(ent thr) 348.6 477.62 T
(ead.) 380.75 477.62 T
3 13 Q
(1.2.1  Atomicity) 117.65 444.29 T
2 11 Q
(It is undecided whether the Thr) 117.65 424.62 T
(eads library should guarantee that assign-) 271.37 424.62 T
(ments to normal slots and variables ar) 117.65 410.62 T
(e atomic. Implementations ar) 302.91 410.62 T
(e encour-) 444.55 410.62 T
(aged, but not mandated, to pr) 117.65 396.62 T
(ovide this atomicity guarantee. However) 262.56 396.62 T
(, all) 460.61 396.62 T
(implementations ar) 117.65 382.62 T
(e mandated to pr) 212.37 382.62 T
(ovide the guarantee for assignments to) 295.65 382.62 T
(slots or variables which ar) 117.65 368.62 T
(e de\336ned to be) 244.81 368.62 T
4 9.5 Q
(atomic) 319.06 368.62 T
2 11 Q
( \050pp. 33\32034\051. Futur) 353.26 368.62 T
(e discus-) 442.17 368.62 T
-0.11 (sions may decide whether the guarantee should be mandated for all slots and) 117.65 354.62 P
(variables.) 117.65 340.62 T
(For an implementation which does not pr) 117.65 320.62 T
(ovide an atomicity guarantee, the) 319.65 320.62 T
(r) 117.65 306.62 T
(esults of accessing a normal slot or variable ar) 121.79 306.62 T
(e unde\336ned if:) 344.5 306.62 T
(\245) 126.65 286.62 T
-0 (The r) 144.65 286.62 P
-0 (ead could pr) 169.96 286.62 P
-0 (oceed in parallel with some write of the same location) 231.15 286.62 P
(\245) 126.65 266.62 T
(T) 144.65 266.62 T
(wo writes of the same location could have pr) 150.4 266.62 T
(oceeded in parallel since) 368.27 266.62 T
(the last non-parallel write) 144.65 252.62 T
(T) 117.65 232.62 T
(wo memory r) 123.4 232.62 T
(efer) 189.39 232.62 T
(ences) 207.74 232.62 T
0 F
(can pr) 236.98 232.62 T
(oceed in parallel) 264.78 232.62 T
2 F
(if they ar) 338.63 232.62 T
(e not explicitly sequen-) 382.01 232.62 T
(tialized, either by being in a single thr) 117.65 218.62 T
(ead, or by explicit inter) 301.26 218.62 T
(-thr) 413.28 218.62 T
(ead synchr) 431.08 218.62 T
(o-) 483.94 218.62 T
(nization. It is an err) 117.65 204.62 T
(or for a pr) 212.02 204.62 T
(ogram to generate an unde\336ned value in this) 260.89 204.62 T
(way) 117.65 190.62 T
(.) 137.22 190.62 T
-0.31 (Curr) 117.65 170.62 P
-0.31 (ently) 140.57 170.62 P
-0.31 (, code which is intended to be portable amongst all implementations) 163.93 170.62 P
(of the library may not r) 117.65 156.62 T
(ely upon the atomicity guarantee for normal slots and) 230.59 156.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.2) 420.12 702.62 T
(Multi-thread semantics) 441.49 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(DRAFT) 99.65 124.95 T
1 F
(3) 527.15 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
2 11 Q
0 X
-0.2 (variables. Pr) 99.65 665.62 P
-0.2 (ogrammers should guar) 159.72 665.62 P
-0.2 (d against the possibility of unde\336ned val-) 276.52 665.62 P
-0.14 (ues by either using) 99.65 651.62 P
4 9.5 Q
-0.3 (atomic) 193.92 651.62 P
2 11 Q
-0.14 ( slots and variables \050pp. 33\32034\051, or by using explicit) 228.12 651.62 P
(inter) 99.65 637.62 T
(-thr) 122.25 637.62 T
(ead synchr) 140.05 637.62 T
(onization.) 192.91 637.62 T
3 13 Q
(1.2.2  Or) 99.65 604.29 T
(dering) 141.53 604.29 T
2 11 Q
(The or) 99.65 584.62 T
(dering of visibility of side ef) 130.96 584.62 T
(fects performed in other thr) 267.36 584.62 T
(eads is unde-) 401.72 584.62 T
(\336ned, unless explicit synchr) 99.65 570.62 T
(onization is used. Implementations of the library) 234.77 570.62 T
(may guarantee that the visibility of side-ef) 99.65 556.62 T
(fects performed by another thr) 305.02 556.62 T
(ead) 453.87 556.62 T
(is or) 99.65 542.62 T
(der) 120.42 542.62 T
(ed accor) 136.55 542.62 T
(ding to the contr) 176.71 542.62 T
(ol \337ow of the other thr) 257.28 542.62 T
(ead \050) 366.77 542.62 T
0 F
(str) 390.67 542.62 T
(ong ordering) 402.7 542.62 T
2 F
(\051,) 459.84 542.62 T
-0.03 (but multi-pr) 99.65 528.62 P
-0.03 (ocessor implementations might not be str) 159.43 528.62 P
-0.03 (ongly or) 359.97 528.62 P
-0.03 (der) 400.69 528.62 P
-0.03 (ed. Portable) 416.83 528.62 P
-0.17 (code should not assume str) 99.65 514.62 P
-0.17 (ong or) 231.33 514.62 P
-0.17 (dering, and should use explicit synchr) 262.59 514.62 P
-0.17 (oniza-) 447.38 514.62 P
(tion wher) 99.65 500.62 T
(e the or) 146.59 500.62 T
(der of side ef) 182.76 500.62 T
(fects is important. Ther) 245.61 500.62 T
(e is curr) 358.05 500.62 T
(ently no library) 396.69 500.62 T
-0.23 (intr) 99.65 486.62 P
-0.23 (ospection facility to determine if the implementation is str) 116.98 486.62 P
-0.23 (ongly or weakly) 396.52 486.62 P
(or) 99.65 472.62 T
(der) 109.8 472.62 T
(ed.) 125.94 472.62 T
-0.38 (Because of the possibility of weak or) 99.65 452.62 P
-0.38 (dering, the compiler is fr) 274.12 452.62 P
-0.38 (ee to assume that) 392.54 452.62 P
(the ef) 99.65 438.62 T
(fects of other thr) 126.39 438.62 T
(eads may be ignor) 206.12 438.62 T
(ed between explicit synchr) 295.07 438.62 T
(onization) 424.61 438.62 T
-0.4 (points, and it may perform any optimizations which pr) 99.65 424.62 P
-0.4 (eserve the semantics of) 364.4 424.62 P
(a single-thr) 99.65 410.62 T
(ead model r) 154.55 410.62 T
(egar) 212.6 410.62 T
(dless of their ef) 233.63 410.62 T
(fects on other thr) 307.6 410.62 T
(eads \321 for exam-) 390.07 410.62 T
(ple, common sub-expr) 99.65 396.62 T
(ession elimination, or changing the or) 208.45 396.62 T
(der of evaluation.) 391.62 396.62 T
3 13 Q
(1.2.3  Explicit sync) 99.65 363.29 T
(hr) 194.38 363.29 T
(onization) 204.84 363.29 T
2 11 Q
-0.11 (The Thr) 99.65 343.62 P
-0.11 (eads library pr) 138 343.62 P
-0.11 (ovides a variety of synchr) 208.98 343.62 P
-0.11 (onization facilities, described) 333.64 343.62 P
(below) 99.65 329.62 T
(. These facilities include mutual-exclusion locks, semaphor) 128.37 329.62 T
(es and noti\336-) 413.45 329.62 T
(cations. Each facility guarantees that when synchr) 99.65 315.62 T
(onization has been) 342.22 315.62 T
(achieved, all the side ef) 99.65 301.62 T
(fects of another thr) 212.61 301.62 T
(ead ar) 304.24 301.62 T
(e visible, at least up to the) 334.12 301.62 T
(point wher) 99.65 287.62 T
(e that other thr) 153.2 287.62 T
(ead last r) 225.53 287.62 T
(eleased the synchr) 269.62 287.62 T
(onization facility) 358.89 287.62 T
(.) 439.57 287.62 T
(An appr) 99.65 267.62 T
(opriate synchr) 140.23 267.62 T
(onization must be used to guar) 210.11 267.62 T
(d side-ef) 360.89 267.62 T
(fects on state if) 402.61 267.62 T
(ther) 99.65 253.62 T
(e is any possibility of those side-ef) 119.05 253.62 T
(fects either being corr) 285.09 253.62 T
(upted by another) 390.04 253.62 T
-0.21 (thr) 99.65 239.62 P
-0.21 (ead or corr) 113.78 239.62 P
-0.21 (upting another thr) 166.2 239.62 P
-0.21 (ead. For example, a function which assigns to) 255.48 239.62 P
(two slots of an object may r) 99.65 225.62 T
(equir) 232.48 225.62 T
(e the use of a lock to guarantee that other) 257.89 225.62 T
(thr) 99.65 211.62 T
(eads never observe the object in a partly updated state.) 113.78 211.62 T
(It is up to library designers to document when synchr) 99.65 191.62 T
(onization is not per-) 360.5 191.62 T
(formed internally) 99.65 177.62 T
(, and when synchr) 184.12 177.62 T
(onization pr) 273.6 177.62 T
(otocols must be used by cli-) 332.91 177.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Proposal for a Dylan Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(4) 63.65 124.95 T
0 F
(DRAFT) 465.64 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
(ents. The implications for the Dylan library) 117.65 665.62 T
(, and some other low-level) 325.98 665.62 T
(libraries, ar) 117.65 651.62 T
(e discussed in Section 1.3 on page 5.) 172.6 651.62 T
3 13 Q
(1.2.4  The d) 117.65 618.29 T
(ynamic en) 175.58 618.29 T
(vir) 227.3 618.29 T
(onment) 240.15 618.29 T
2 11 Q
(Dylan has an implicit notion of a) 117.65 598.62 T
0 F
(dynamic envir) 279.47 598.62 T
(onment) 343.35 598.62 T
2 F
(, corr) 376.96 598.62 T
(esponding to lan-) 401.84 598.62 T
(guage constr) 117.65 584.62 T
(ucts with) 179.83 584.62 T
0 F
(dynamic extent) 227.46 584.62 T
2 F
(. For example, the) 295.8 584.62 T
4 9.5 Q
(block) 385.27 584.62 T
2 11 Q
( constr) 413.77 584.62 T
(uct can) 446.32 584.62 T
(intr) 117.65 570.62 T
(oduce) 134.98 570.62 T
0 F
(cleanup-clauses) 167.25 570.62 T
2 F
(, and the) 236.71 570.62 T
0 F
(body) 281.59 570.62 T
2 F
( of the block is executed in a dynamic) 302.57 570.62 T
(envir) 117.65 556.62 T
(onment in which those cleanup-clauses ar) 142.88 556.62 T
(e active.) 346.23 556.62 T
0 F
(Handlers) 388.4 556.62 T
2 F
( and) 429.36 556.62 T
0 F
(exit pr) 453.48 556.62 T
(o-) 482.31 556.62 T
(cedur) 117.65 542.62 T
(es) 142.1 542.62 T
2 F
(ar) 153.41 542.62 T
(e other examples of language featur) 163.06 542.62 T
(es r) 336.79 542.62 T
(elated to the dynamic envi-) 353.62 542.62 T
(r) 117.65 528.62 T
(onment.) 121.79 528.62 T
-0.22 (The dynamic envir) 117.65 508.62 P
-0.22 (onment is de\336ned to be thr) 208.89 508.62 P
-0.22 (ead-local. When a new thr) 338.88 508.62 P
-0.22 (ead is) 465.24 508.62 P
-0.17 (cr) 117.65 494.62 P
-0.17 (eated, it starts with a fr) 126.68 494.62 P
-0.17 (esh dynamic envir) 237.46 494.62 P
-0.17 (onment. It is an err) 326.71 494.62 P
-0.17 (or to attempt to) 417.96 494.62 P
(use a handler or a non-local exit function belonging to another thr) 117.65 480.62 T
(ead. It is) 437.46 480.62 T
(impossible to use an unwind-pr) 117.65 466.62 T
(otect cleanup fr) 272.27 466.62 T
(om another thr) 347.42 466.62 T
(ead.) 420.28 466.62 T
-0.02 (Although the binding of condition handlers only af) 117.65 446.62 P
-0.02 (fects the dynamic envir) 366.3 446.62 P
-0.02 (on-) 479.58 446.62 P
(ment of the curr) 117.65 432.62 T
(ent thr) 195.8 432.62 T
(ead, unhandled conditions ar) 227.95 432.62 T
(e passed to the global) 370.41 432.62 T
(generic function) 117.65 418.62 T
4 9.5 Q
(default-handler) 199.41 418.62 T
2 11 Q
(. This function might) 284.1 418.62 T
0 F
(call the debugger) 388.65 418.62 T
2 F
(. The) 462.8 418.62 T
(Thr) 117.65 404.62 T
(eads library does not de\336ne what calling the debugger means.) 134.94 404.62 T
(Note that in Dylan, unlike in C and C++,) 117.65 384.62 T
0 F
(lexical) 318.29 384.62 T
2 F
( variables \050that is local, or) 346.6 384.62 T
4 9.5 Q
(let) 473.58 384.62 T
2 11 Q
(-) 490.67 384.62 T
(bound variables\051 have inde\336nite extent, and ar) 117.65 370.62 T
(e not bound in the dynamic) 344.53 370.62 T
(envir) 117.65 356.62 T
(onment. In general, those variables ar) 142.88 356.62 T
(e potentially global; accor) 325.27 356.62 T
(dingly) 449.75 356.62 T
(,) 480.29 356.62 T
(pr) 117.65 342.62 T
(ogrammers may need to explicitly synchr) 128.41 342.62 T
(onize accesses to them.) 329.97 342.62 T
3 13 Q
(1.2.5  Thread v) 117.65 309.29 T
(ariab) 191.53 309.29 T
(les) 216.92 309.29 T
2 11 Q
(The Thr) 117.65 289.62 T
(eads library pr) 156.1 289.62 T
(ovides a new type of variable: a) 227.31 289.62 T
0 F
(thr) 383.79 289.62 T
(ead) 397.04 289.62 T
2 F
( variable, also) 411.7 289.62 T
-0.18 (known as a) 117.65 275.62 P
0 F
-0.18 (thr) 175.13 275.62 P
-0.18 (ead-local) 188.37 275.62 P
2 F
-0.18 ( variable. These variables ar) 227.06 275.62 P
-0.18 (e similar to normal module) 361.39 275.62 P
-0.18 (variables in the sense that they ar) 117.65 261.62 P
-0.18 (e visible accor) 278.25 261.62 P
-0.18 (ding to the same scoping r) 345.9 261.62 P
-0.18 (ules) 473.31 261.62 P
(and have the same semantics in a single-thr) 117.65 247.62 T
(eaded pr) 328.95 247.62 T
(ogram. However) 371.93 247.62 T
(, in con-) 453.73 247.62 T
(trast to a normal variable, assignments to a thr) 117.65 233.62 T
(ead variable in one thr) 343.06 233.62 T
(ead ar) 452.28 233.62 T
(e) 482.17 233.62 T
(not visible when evaluating the variable in another thr) 117.65 219.62 T
(ead.) 382.17 219.62 T
-0.35 (Whenever a thr) 117.65 199.62 P
-0.35 (ead is cr) 192.24 199.62 P
-0.35 (eated, the value of each thr) 231.42 199.62 P
-0.35 (ead variable is initialized to) 360.43 199.62 P
(a thr) 117.65 185.62 T
(ead-independent value r) 140.03 185.62 T
(esulting fr) 259.5 185.62 T
(om a once-only evaluation of the ini-) 309.14 185.62 T
(tialization expr) 117.65 171.62 T
(ession of the thr) 190.99 171.62 T
(ead variable de\336nition.) 268.5 171.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.3) 391.16 702.62 T
(Thread safety in client libraries) 412.54 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(DRAFT) 99.65 124.95 T
1 F
(5) 527.15 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
2 11 Q
0 X
(See page 35 for details of the) 99.65 665.62 T
4 9.5 Q
(thread) 240.79 665.62 T
2 11 Q
( adjective to) 274.99 665.62 T
4 9.5 Q
(define variable) 336.05 665.62 T
2 11 Q
(.) 421.55 665.62 T
3 13 Q
(1.2.6  Dynamic binding) 99.65 632.29 T
2 11 Q
(The Thr) 99.65 612.62 T
(eads library exports a macr) 138.1 612.62 T
(o for dynamic binding. A) 269.95 612.62 T
0 F
(binding) 395.69 612.62 T
2 F
( is a map-) 430.13 612.62 T
(ping between a variable and a) 99.65 598.62 T
0 F
( value-cell) 245.72 598.62 T
2 F
( which holds the variable\325s value. A) 290.84 598.62 T
0 F
(dynamic) 99.65 584.62 T
2 F
(binding is a binding which has dynamic extent, and shadows any) 140.49 584.62 T
(outermost bindings. Dynamic bindings can be consider) 99.65 570.62 T
(ed to be a pr) 368.05 570.62 T
(operty of) 428.24 570.62 T
(the dynamic envir) 99.65 556.62 T
(onment.) 188.18 556.62 T
(Thr) 99.65 536.62 T
(ead variables can have new dynamic bindings cr) 116.94 536.62 T
(eated for them with the) 353.03 536.62 T
(macr) 99.65 522.62 T
(o) 123.89 522.62 T
4 9.5 Q
(dynamic-bind) 132.65 522.62 T
2 11 Q
(,  page 36. Thr) 201.05 522.62 T
(ead variables inher) 269.34 522.62 T
(ently have thr) 361.73 522.62 T
(ead-local) 429.32 522.62 T
(bindings, so it is possible to r) 99.65 508.62 T
(e-bind a thr) 240.45 508.62 T
(ead variable dynamically using the) 296.92 508.62 T
(Dylan constr) 99.65 494.62 T
(uct) 161.93 494.62 T
4 9.5 Q
(block) 179.78 494.62 T
2 11 Q
( \311) 208.28 494.62 T
4 9.5 Q
(cleanup) 224.78 494.62 T
2 11 Q
(. The) 264.68 494.62 T
4 9.5 Q
(dynamic-bind) 291.35 494.62 T
2 11 Q
( macr) 359.75 494.62 T
(o can be imple-) 386.74 494.62 T
(mented in this way) 99.65 480.62 T
(.) 191.88 480.62 T
-0.31 (The thr) 99.65 460.62 P
-0.31 (ead-local natur) 134.63 460.62 P
-0.31 (e of dynamically bindable variables may not be optimal) 207.29 460.62 P
(for all pr) 99.65 446.62 T
(oblem domains. For instance a shar) 141.82 446.62 T
(ed, global, outermost binding) 313.39 446.62 T
(may be desirable, or alternatively) 99.65 432.62 T
(, a thr) 260.85 432.62 T
(ead may want to inherit curr) 288.74 432.62 T
(ent bind-) 427.98 432.62 T
(ings fr) 99.65 418.62 T
(om the par) 130.59 418.62 T
(ent thr) 183.32 418.62 T
(ead at cr) 215.47 418.62 T
(eation time, giving a \322fork\323-type model of) 256.57 418.62 T
(state inheritance. These alternatives ar) 99.65 404.62 T
(e not pursued in this library) 285.2 404.62 T
(, but they) 420.11 404.62 T
(might be an inter) 99.65 390.62 T
(esting ar) 182.77 390.62 T
(ea for futur) 224.41 390.62 T
(e r) 279.36 390.62 T
(esear) 291.52 390.62 T
(ch.) 316.37 390.62 T
3 16 Q
(1.3  Thread saf) 99.65 355.29 T
(ety in c) 191.42 355.29 T
(lient libraries) 236.4 355.29 T
2 11 Q
(This section is about thr) 99.65 334.62 T
(ead safety in libraries that use the Thr) 215.48 334.62 T
(eads library) 398.62 334.62 T
(.) 455.09 334.62 T
3 13 Q
(1.3.1  General requirements) 99.65 301.29 T
2 11 Q
(A library\325s designer is r) 99.65 281.62 T
(esponsible for documenting which featur) 213.72 281.62 T
(es of the) 413.9 281.62 T
(library of) 99.65 267.62 T
(fer built-in synchr) 144.66 267.62 T
(onization and which do not. While ther) 232.02 267.62 T
(e is no) 422.96 267.62 T
(de\336nitive r) 99.65 253.62 T
(ule that can assist designers in this documentation, the following) 153.17 253.62 T
(guidelines may be useful.) 99.65 239.62 T
(If a client of the library for) 99.65 219.62 T
(gets to use a synchr) 227.09 219.62 T
(onization featur) 322 219.62 T
(e when one is) 399.35 219.62 T
(necessary) 99.65 205.62 T
(, the library designer should ensur) 145.54 205.62 T
(e that the ef) 312.82 205.62 T
(fect of the lack of syn-) 369.4 205.62 T
(chr) 99.65 191.62 T
(onization is limited to a small unit \321 pr) 115.08 191.62 T
(obably a single object. In cases) 308.59 191.62 T
-0.23 (wher) 99.65 177.62 P
-0.23 (e the designer cannot guarantee that the ef) 124.64 177.62 P
-0.23 (fect will be limited, the library) 329.28 177.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Proposal for a Dylan Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(6) 63.65 124.95 T
0 F
(DRAFT) 465.64 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
(should either implement the synchr) 117.65 665.62 T
(onization internally) 291.18 665.62 T
(, or pr) 385.74 665.62 T
(ovide a macr) 415.1 665.62 T
(o) 477.76 665.62 T
(for clients to use instead.) 117.65 651.62 T
(Library implementors must ensur) 117.65 631.62 T
(e that the library pr) 281.9 631.62 T
(ovides implicit synchr) 376.05 631.62 T
(o-) 483.84 631.62 T
(nization for any hidden global state which is maintained by the library) 117.65 617.62 T
(.) 459.61 617.62 T
(Library designers may choose whether the library should of) 117.65 603.62 T
(fer implicit syn-) 408.76 603.62 T
(chr) 117.65 589.62 T
(onization of the state of objects managed by the library) 133.08 589.62 T
(. The interface is) 398.15 589.62 T
-0.38 (mor) 117.65 575.62 P
-0.38 (e convenient if the synchr) 137.51 575.62 P
-0.38 (onization is implicit, but it may be mor) 260.64 575.62 P
-0.38 (e ef) 446.9 575.62 P
-0.38 (\336cient) 463.28 575.62 P
(to r) 117.65 561.62 T
(ely on explicit synchr) 134.14 561.62 T
(onization by the client. Library designers should) 237.62 561.62 T
(always document the choice they make.) 117.65 547.62 T
3 13 Q
(1.3.2  Dylan librar) 117.65 514.29 T
(y) 206.05 514.29 T
2 11 Q
(The de\336nition of the Dylan library is not changed with the addition of the) 117.65 494.62 T
-0.34 (Thr) 117.65 480.62 P
-0.34 (eads library) 134.94 480.62 P
-0.34 (. The implementation ensur) 191.07 480.62 P
-0.34 (es that all hidden global state \050such) 324.23 480.62 P
(as the symbol table and any generic function caches\051 is implicitly synchr) 117.65 466.62 T
(o-) 468.31 466.62 T
(nized. Those functions in the Dylan library which ar) 117.65 452.62 T
(e de\336ned to modify the) 371.11 452.62 T
(state of objects ar) 117.65 438.62 T
(e not de\336ned to pr) 200.88 438.62 T
(ovide implicit synchr) 290.54 438.62 T
(onization. However) 393.66 438.62 T
(,) 489.58 438.62 T
(implementations ar) 117.65 424.62 T
(e expected to ensur) 212.37 424.62 T
(e that synchr) 305.88 424.62 T
(onization bugs in Dylan) 368.34 424.62 T
(pr) 117.65 410.62 T
(ograms will not cause obscur) 128.41 410.62 T
(e err) 269.89 410.62 T
(ors that cannot be explained in terms of) 291.67 410.62 T
(the semantics of Dylan language constr) 117.65 396.62 T
(ucts.) 308.48 396.62 T
(It is curr) 117.65 376.62 T
(ently undecided whether the Thr) 158.32 376.62 T
(eads library should guarantee that) 318.71 376.62 T
(any of the standar) 117.65 362.62 T
(d Dylan functions ar) 205.36 362.62 T
(e atomic. Implementations ar) 305.15 362.62 T
(e encour-) 446.79 362.62 T
(aged, but not mandated, to pr) 117.65 348.62 T
(ovide an atomicity guarantee for) 262.56 348.62 T
4 9.5 Q
(element) 424.05 348.62 T
2 11 Q
( and) 463.95 348.62 T
4 9.5 Q
(element-setter) 117.65 334.62 T
2 11 Q
( for all of Dylan\325s non-str) 197.45 334.62 T
(etchy built-in collection classes and) 319.11 334.62 T
(for) 117.65 320.62 T
4 9.5 Q
(<table>) 134.41 320.62 T
2 11 Q
(.) 174.31 320.62 T
(Curr) 117.65 300.62 T
(ently) 140.57 300.62 T
(, code which is intended to be portable among all implementations) 163.93 300.62 T
(of the library may not r) 117.65 286.62 T
(ely upon the atomicity guarantee for) 230.59 286.62 T
4 9.5 Q
(element) 411.01 286.62 T
2 11 Q
( and) 450.91 286.62 T
4 9.5 Q
(element-setter) 117.65 272.62 T
2 11 Q
(. Clients should guar) 196.63 272.62 T
(d against unexpected behavior by using) 297.78 272.62 T
(explicit inter) 117.65 258.62 T
(-thr) 178.63 258.62 T
(ead synchr) 196.43 258.62 T
(onization.) 249.29 258.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.4) 404.11 702.62 T
(The Threads class hierarchy) 425.49 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(DRAFT) 99.65 124.95 T
1 F
(7) 527.15 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
3 16 Q
0 X
(1.4  The Threads c) 99.65 662.29 T
(lass hierar) 213.9 662.29 T
(c) 279.31 662.29 T
(h) 286.5 662.29 T
(y) 294.27 662.29 T
99.65 294.96 477.65 302.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
2 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 204.08 306.62 T
(e 1.1  Thr) 230.29 306.62 T
(eads class hierar) 274.85 306.62 T
(chy) 354.29 306.62 T
(.) 370.47 306.62 T
3 16 Q
(1.5  Basic f) 99.65 265.29 T
(eatures) 168.1 265.29 T
3 14 Q
(<thread>) 99.65 216.63 T
0 13 Q
(Sealed instantiable class) 351.5 217.29 T
5 12 Q
(Summar) 108.65 191.96 T
(y) 146.12 191.96 T
2 11 Q
(The class of thr) 180.65 191.96 T
(eads.) 254.03 191.96 T
5 12 Q
(Libr) 108.65 163.96 T
(ar) 124.97 163.96 T
(y) 134.02 163.96 T
4 9 Q
(threads) 180.65 163.96 T
99.65 322.95 477.65 637.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
0 0 0 1 0 0 0 K
(<object>) 267.48 620.95 T
(<synchronization) 325.65 575.95 T
(<lock>) 387.65 494.95 T
(<thread>) 115.48 358.12 T
(<simple-lock>) 248.65 358.12 T
(<semaphore>) 411.31 358.12 T
(<recursive-lock>) 321.31 358.12 T
(<exclusive-lock>) 306.65 431.95 T
(<notification>) 163.48 358.12 T
288.65 617.95 360.65 581.95 2 L
0.25 H
2 Z
N
369.65 572.95 405.65 500.95 2 L
N
396.65 491.95 351.65 437.95 2 L
N
401.48 491.95 423.65 365.95 2 L
N
342.65 428.95 369.65 365.95 2 L
N
342.65 428.95 288.65 365.95 2 L
N
279.65 617.95 144.65 365.95 2 L
N
369.65 572.95 198.65 365.95 2 L
N
J
101.98 536.95 474.48 536.95 474.48 329.95 101.98 329.95 4 Y
J
101.98 532.95 101.98 536.95 105.98 536.95 3 L
0 Z
N
[7.881 5.911] 7.881 I
105.98 536.95 470.48 536.95 2 L
N
J
470.48 536.95 474.48 536.95 474.48 532.95 3 L
N
[7.881 5.911] 7.881 I
474.48 532.95 474.48 333.96 2 L
N
J
474.48 333.96 474.48 329.95 470.48 329.95 3 L
N
[7.881 5.911] 7.881 I
470.48 329.95 105.99 329.95 2 L
N
J
105.99 329.95 101.98 329.95 101.98 333.95 3 L
N
[7.881 5.911] 7.881 I
101.98 333.95 101.98 532.95 2 L
N
J
108.65 392.95 240.9 392.95 240.9 347.95 108.65 347.95 4 Y
J
108.65 388.95 108.65 392.95 112.65 392.95 3 L
N
[8.424 6.318] 8.424 I
112.65 392.95 236.9 392.95 2 L
N
J
236.9 392.95 240.9 392.95 240.9 388.95 3 L
N
[8.706 6.529] 8.706 I
240.9 388.95 240.9 351.95 2 L
N
J
240.9 351.95 240.9 347.95 236.9 347.95 3 L
N
[8.424 6.318] 8.424 I
236.9 347.95 112.65 347.95 2 L
N
J
112.65 347.95 108.65 347.95 108.65 351.95 3 L
N
[8.706 6.529] 8.706 I
108.65 351.95 108.65 388.95 2 L
N
J
246.73 392.95 471.15 392.95 471.15 347.95 246.73 347.95 4 Y
J
246.73 388.95 246.73 392.95 250.73 392.95 3 L
N
[8.015 6.012] 8.015 I
250.73 392.95 467.14 392.95 2 L
N
J
467.14 392.95 471.15 392.95 471.15 388.95 3 L
N
[8.706 6.529] 8.706 I
471.15 388.95 471.15 351.95 2 L
N
J
471.15 351.95 471.15 347.95 467.15 347.95 3 L
N
[8.015 6.012] 8.015 I
467.15 347.95 250.73 347.95 2 L
N
J
250.73 347.95 246.73 347.95 246.73 351.95 3 L
N
[8.706 6.529] 8.706 I
246.73 351.95 246.73 388.95 2 L
N
6 F
(Instantiab) 108.65 521.95 T
(le) 147.49 521.95 T
J
(Pr) 435.82 382.12 T
(imar) 444.95 382.12 T
(y) 462.71 382.12 T
J
(Sealed) 113.48 380.45 T
J
(Abstr) 102.15 548.95 T
(act) 123.06 548.95 T
J
J
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Proposal for a Dylan Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(8) 63.65 124.95 T
0 F
(DRAFT) 465.64 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
5 12 Q
0 X
(Module) 126.65 664.95 T
4 9 Q
(threads) 198.65 664.95 T
5 12 Q
(Superclasses) 126.65 637.95 T
4 9 Q
(<object>) 198.65 637.95 T
5 12 Q
(Init-k) 126.65 610.95 T
(e) 147.79 610.95 T
(yw) 153.08 610.95 T
(ords) 165.02 610.95 T
0 11 Q
(function) 198.65 610.95 T
2 F
(Requir) 279.65 610.95 T
(ed. An instance of) 312.41 610.95 T
4 9.5 Q
(<function>) 402.68 610.95 T
2 11 Q
(.) 459.68 610.95 T
0 F
(priority) 198.65 590.95 T
2 F
(A signed integer) 279.65 590.95 T
(.) 359.45 590.95 T
0 F
(name) 198.65 570.95 T
2 F
(An instance of) 279.65 570.95 T
4 9.5 Q
(<string>) 352.43 570.95 T
2 11 Q
(.) 398.04 570.95 T
5 12 Q
(Descr) 126.65 543.29 T
(iption) 152.48 543.29 T
2 11 Q
(The class r) 198.65 543.29 T
(epr) 249.62 543.29 T
(esenting a thr) 265.65 543.29 T
(ead of contr) 331.69 543.29 T
(ol executing) 389.38 543.29 T
0 F
(function) 451.12 543.29 T
2 F
(.) 488.61 543.29 T
(The) 198.65 523.29 T
0 F
(function) 219.81 523.29 T
2 F
( is called with no ar) 257.3 523.29 T
(guments in the empty) 352.11 523.29 T
(dynamic envir) 198.65 509.29 T
(onment of the new thr) 269.17 509.29 T
(ead. The thr) 377.45 509.29 T
(ead termi-) 435.74 509.29 T
(nates when the function r) 198.65 495.29 T
(eturns.) 322.5 495.29 T
(The function is executable immediately) 198.65 475.29 T
(. Y) 388.34 475.29 T
(ou can suspend a) 400.17 475.29 T
(new thr) 198.65 461.29 T
(ead \050almost\051 immediately on cr) 236.38 461.29 T
(eation by arranging) 387.79 461.29 T
(for it to synchr) 198.65 447.29 T
(onize on an unavailable r) 269.91 447.29 T
(esour) 392.45 447.29 T
(ce upon entry) 419.17 447.29 T
(to the function.) 198.65 433.29 T
-0.12 (The optional) 198.65 413.29 P
0 F
-0.12 (priority) 262.84 413.29 P
2 F
-0.12 ( keywor) 297.06 413.29 P
-0.12 (d pr) 336.52 413.29 P
-0.12 (ovides a scheduling priority) 356.64 413.29 P
(for the thr) 198.65 399.29 T
(ead. The higher the value, the gr) 247.55 399.29 T
(eater the priority) 404.79 399.29 T
(.) 485.7 399.29 T
(The default value is zer) 198.65 385.29 T
(o, which is also the value of the con-) 312.23 385.29 T
(stant) 198.65 371.29 T
4 9.5 Q
($normal-priority) 225.14 371.29 T
2 11 Q
(, one of several constants that corr) 315.11 371.29 T
(e-) 480.32 371.29 T
(spond to useful priority levels. The library of) 198.65 357.29 T
(fers no way to) 416.61 357.29 T
(change the priority of a thr) 198.65 343.29 T
(ead dynamically) 328.94 343.29 T
(.) 408.52 343.29 T
(The following constants, listed in or) 198.65 323.29 T
(der of incr) 372.62 323.29 T
(easing value,) 422.76 323.29 T
(may be useful as values for the optional) 198.65 309.29 T
0 F
(priority) 394.82 309.29 T
2 F
( keywor) 429.04 309.29 T
(d.) 468.62 309.29 T
4 9 Q
($low-priority) 209.45 288.62 T
($background-priority) 209.45 277.62 T
($normal-priority) 209.45 266.62 T
($interactive-priority) 209.45 255.62 T
($high-priority) 209.45 244.62 T
2 11 Q
(The) 198.65 224.29 T
0 F
(name) 219.81 224.29 T
2 F
( keywor) 243.65 224.29 T
(d is a string that is used as the function\325s) 283.23 224.29 T
(name for convenience purposes, such as debugging.) 198.65 210.29 T
5 12 Q
(Oper) 126.65 182.62 T
(ations) 148.44 182.62 T
2 11 Q
(The class) 198.65 182.62 T
4 9.5 Q
(<thread>) 245.48 182.62 T
2 11 Q
( pr) 291.08 182.62 T
(ovides the following operations:) 304.58 182.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.5) 457.59 702.62 T
(Basic features) 478.96 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(DRAFT) 99.65 124.95 T
1 F
(9) 527.15 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
4 9.5 Q
0 X
(thread-name) 180.65 665.62 T
2 11 Q
(Returns the name of a thr) 261.65 665.62 T
(ead, or) 385.09 665.62 T
4 9.5 Q
(#f) 421.18 665.62 T
2 11 Q
( if no) 432.58 665.62 T
(name was supplied.) 261.65 651.62 T
4 9.5 Q
(join-thread) 180.65 631.62 T
2 11 Q
(Blocks until one of the speci\336ed thr) 261.65 631.62 T
(eads has) 432.77 631.62 T
(terminated, and r) 261.65 617.62 T
(eturns the values of its) 346.26 617.62 T
(function.) 261.65 603.62 T
3 14 Q
(thread-name) 99.65 555.62 T
0 13 Q
(Function) 429.73 556.29 T
5 12 Q
(Summar) 108.65 530.95 T
(y) 146.12 530.95 T
2 11 Q
(Returns the name of a thr) 180.65 530.95 T
(ead.) 304.09 530.95 T
5 12 Q
(Libr) 108.65 502.95 T
(ar) 124.97 502.95 T
(y) 134.02 502.95 T
4 9 Q
(threads) 180.65 502.95 T
5 12 Q
(Module) 108.65 475.95 T
4 9 Q
(threads) 180.65 475.95 T
5 12 Q
(Signature) 108.65 448.95 T
4 9 Q
(thread-name) 180.65 448.95 T
7 F
(thr) 245.45 448.95 T
(ead) 257.29 448.95 T
4 F
( =>) 271.3 448.95 T
7 F
(name-or-false) 292.9 448.95 T
5 12 Q
(Arguments) 108.65 421.95 T
0 11 Q
(thr) 180.65 421.95 T
(ead) 193.89 421.95 T
2 F
(An instance of) 261.65 421.95 T
4 9.5 Q
(<thread>) 334.43 421.95 T
2 11 Q
(.) 380.04 421.95 T
5 12 Q
(V) 108.65 393.95 T
(alues) 114.54 393.95 T
0 11 Q
(name-or-false) 180.65 393.95 T
2 F
(An instance of) 261.65 393.95 T
4 9.5 Q
(false-or\050<string>\051) 334.43 393.95 T
2 11 Q
(.) 437.04 393.95 T
5 12 Q
(Descr) 108.65 365.95 T
(iption) 134.48 365.95 T
2 11 Q
-0.06 (Returns the name of) 180.65 365.95 P
0 F
-0.06 (thr) 281.47 365.95 P
-0.06 (ead) 294.71 365.95 P
2 F
-0.06 ( as a string. If) 309.38 365.95 P
0 F
-0.06 (thr) 376.93 365.95 P
-0.06 (ead) 390.18 365.95 P
2 F
-0.06 ( does not have) 404.84 365.95 P
(a name, this function r) 180.65 351.95 T
(eturns) 289.56 351.95 T
4 9.5 Q
(#f) 323.21 351.95 T
2 11 Q
(.) 334.61 351.95 T
3 14 Q
(join-thread) 99.65 303.95 T
0 13 Q
(Function) 429.73 304.62 T
5 12 Q
(Summar) 108.65 279.29 T
(y) 146.12 279.29 T
2 11 Q
(W) 180.65 279.29 T
(aits for another) 190.64 279.29 T
(, existing, thr) 263.8 279.29 T
(ead to terminate, and then) 327.05 279.29 T
(r) 180.65 265.29 T
(eturns the values of its function.) 184.79 265.29 T
5 12 Q
(Libr) 108.65 237.62 T
(ar) 124.97 237.62 T
(y) 134.02 237.62 T
4 9 Q
(threads) 180.65 237.62 T
5 12 Q
(Module) 108.65 210.62 T
4 9 Q
(threads) 180.65 210.62 T
5 12 Q
(Signature) 108.65 183.62 T
4 9 Q
-0.91 (join-thread) 180.65 183.62 P
7 F
-0.38 (thr) 244.54 183.62 P
-0.38 (ead) 256.38 183.62 P
4 F
-0.91 ( #rest) 270.39 183.62 P
7 F
-0.38 (thr) 306.37 183.62 P
-0.38 (eads) 318.21 183.62 P
4 F
-0.91 ( =>) 336.21 183.62 P
7 F
-0.38 (thr) 355.99 183.62 P
-0.38 (ead-joined) 367.84 183.62 P
4 F
-0.91 ( #rest) 410.35 183.62 P
7 F
-0.38 (r) 446.33 183.62 P
-0.38 (esults) 449.67 183.62 P
5 12 Q
(Arguments) 108.65 156.62 T
0 11 Q
(thr) 180.65 156.62 T
(ead) 193.89 156.62 T
2 F
(An instance of) 261.65 156.62 T
4 9.5 Q
(<thread>) 334.43 156.62 T
2 11 Q
(. A thr) 380.04 156.62 T
(ead to join.) 410.98 156.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Proposal for a Dylan Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(10) 63.65 124.95 T
0 F
(DRAFT) 465.64 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
0 11 Q
0 X
(thr) 198.65 665.62 T
(eads) 211.89 665.62 T
2 F
(Instances of) 279.65 665.62 T
4 9.5 Q
(<thread>) 339.89 665.62 T
2 11 Q
(. Mor) 385.49 665.62 T
(e thr) 411.55 665.62 T
(eads to join.) 433.71 665.62 T
5 12 Q
(V) 126.65 637.95 T
(alues) 132.54 637.95 T
0 11 Q
(thr) 198.65 637.95 T
(ead-joined) 211.89 637.95 T
2 F
(An instance of) 279.65 637.95 T
4 9.5 Q
(<thread>) 352.43 637.95 T
2 11 Q
(. The thr) 398.04 637.95 T
(ead that) 438.83 637.95 T
(was joined.) 279.65 623.95 T
0 F
(r) 198.65 603.95 T
(esults) 202.73 603.95 T
2 F
-0.15 (Zer) 279.65 603.95 P
-0.15 (o or mor) 296.4 603.95 P
-0.15 (e instances of) 337.82 603.95 P
4 9.5 Q
-0.32 (<object>) 405.11 603.95 P
2 11 Q
-0.15 (. The val-) 450.71 603.95 P
(ues r) 279.65 589.95 T
(eturned fr) 303.11 589.95 T
(om the thr) 351.9 589.95 T
(ead that was) 402.51 589.95 T
(joined.) 279.65 575.95 T
5 12 Q
(Exceptions) 126.65 548.29 T
2 11 Q
-0.31 (An implementation of) 198.65 548.29 P
4 9.5 Q
-0.65 (join-thread) 308.24 548.29 P
2 11 Q
-0.31 ( is permitted to signal the) 370.94 548.29 P
(following condition:) 198.65 534.29 T
4 9.5 Q
(<duplicate-join-error>) 198.65 508.29 T
2 11 Q
(A condition of this class \050a subclass of) 279.65 490.29 T
4 9.5 Q
(<error>) 279.65 476.29 T
2 11 Q
(\051 may be signalled when a thr) 319.55 476.29 T
(ead is) 463.55 476.29 T
(passed to) 279.65 462.29 T
4 9.5 Q
(join-thread) 328.17 462.29 T
2 11 Q
(, if that thr) 390.87 462.29 T
(ead has) 441.94 462.29 T
(alr) 279.65 448.29 T
(eady been joined by an earlier call to) 292.5 448.29 T
4 9.5 Q
(join-thread) 279.65 434.29 T
2 11 Q
(, or if that thr) 342.35 434.29 T
(ead is curr) 406.52 434.29 T
(ently) 457.39 434.29 T
(active in another call to) 279.65 420.29 T
4 9.5 Q
(join-thread) 395.54 420.29 T
2 11 Q
(.) 458.24 420.29 T
5 12 Q
(Descr) 126.65 392.62 T
(iption) 152.48 392.62 T
2 11 Q
-0.37 (W) 198.65 392.62 P
-0.37 (aits for another) 208.64 392.62 P
-0.37 (, existing, thr) 281.06 392.62 P
-0.37 (ead to terminate, by blocking if) 343.58 392.62 P
(necessary) 198.65 378.62 T
(, and then r) 244.54 378.62 T
(eturns the values of its function. The) 299.97 378.62 T
-0.25 (function r) 198.65 364.62 P
-0.25 (eturns the thr) 246.07 364.62 P
-0.25 (ead object that was joined, along with) 311.35 364.62 P
(any values its function r) 198.65 350.62 T
(eturns.) 315.52 350.62 T
-0.35 (If mor) 198.65 330.62 P
-0.35 (e than one thr) 228.29 330.62 P
-0.35 (ead is passed to) 294.47 330.62 P
4 9.5 Q
-0.72 (join-thread) 372.46 330.62 P
2 11 Q
-0.35 (, the curr) 435.16 330.62 P
-0.35 (ent) 477.99 330.62 P
(thr) 198.65 316.62 T
(ead blocks until the \336rst of those thr) 212.78 316.62 T
(eads terminates. The) 387.74 316.62 T
(values r) 198.65 302.62 T
(eturned ar) 237.03 302.62 T
(e those of the \336rst thr) 287.65 302.62 T
(ead to terminate.) 390.91 302.62 T
-0.28 (If one or mor) 198.65 282.62 P
-0.28 (e of the multiple thr) 261.34 282.62 P
-0.28 (eads has alr) 356.98 282.62 P
-0.28 (eady terminated) 413.5 282.62 P
-0.15 (at the time of the call, then one of those terminated thr) 198.65 268.62 P
-0.15 (eads is) 460.44 268.62 P
-0.5 (joined. When mor) 198.65 254.62 P
-0.5 (e than one thr) 285.02 254.62 P
-0.5 (ead has alr) 350.74 254.62 P
-0.5 (eady terminated, it) 402.15 254.62 P
(is unde\336ned which of those thr) 198.65 240.62 T
(eads the implementation will) 350.13 240.62 T
(join.) 198.65 226.62 T
(It is an err) 198.65 206.62 T
(or to pass a thr) 247.72 206.62 T
(ead to) 319.74 206.62 T
4 9.5 Q
(join-thread) 352.32 206.62 T
2 11 Q
( if it has alr) 415.02 206.62 T
(eady) 469.08 206.62 T
-0.18 (been joined in a pr) 198.65 192.62 P
-0.18 (evious call to) 287.97 192.62 P
4 9.5 Q
-0.38 (join-thread) 354.04 192.62 P
2 11 Q
-0.18 (. It is an err) 416.73 192.62 P
-0.18 (or to) 470.57 192.62 P
(pass a thr) 198.65 178.62 T
(ead to) 245.22 178.62 T
4 9.5 Q
(join-thread) 277.8 178.62 T
2 11 Q
( if that thr) 340.5 178.62 T
(ead is also being pr) 388.83 178.62 T
(o-) 482.38 178.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.5) 457.59 702.62 T
(Basic features) 478.96 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(DRAFT) 99.65 124.95 T
1 F
(1) 522.98 124.95 T
(1) 527.15 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
2 11 Q
0 X
(cessed by another simultaneous call to) 180.65 665.62 T
4 9.5 Q
(join-thread) 370.18 665.62 T
2 11 Q
( fr) 432.88 665.62 T
(om) 443.44 665.62 T
(another thr) 180.65 651.62 T
(ead.) 235.04 651.62 T
3 14 Q
(thread-yield) 99.65 603.62 T
0 13 Q
(Function) 429.73 604.29 T
5 12 Q
(Summar) 108.65 578.95 T
(y) 146.12 578.95 T
2 11 Q
(For) 180.65 578.95 T
(ce the curr) 196.92 578.95 T
(ent thr) 247.84 578.95 T
(ead to yield contr) 279.98 578.95 T
(ol to the part of the) 364.84 578.95 T
(implementation r) 180.65 564.95 T
(esponsible for scheduling thr) 265.2 564.95 T
(eads.) 406.47 564.95 T
5 12 Q
(Signature) 108.65 537.29 T
4 9 Q
(thread-yield \050\051 => \050\051) 180.65 537.29 T
5 12 Q
(Libr) 108.65 510.29 T
(ar) 124.97 510.29 T
(y) 134.02 510.29 T
4 9 Q
(threads) 180.65 510.29 T
5 12 Q
(Module) 108.65 483.29 T
4 9 Q
(threads) 180.65 483.29 T
5 12 Q
(Descr) 108.65 456.29 T
(iption) 134.48 456.29 T
2 11 Q
(For) 180.65 456.29 T
(ces the curr) 196.92 456.29 T
(ent thr) 252.5 456.29 T
(ead to yield contr) 284.64 456.29 T
(ol to the part of the) 369.51 456.29 T
-0.41 (implementation r) 180.65 442.29 P
-0.41 (esponsible for scheduling thr) 264.79 442.29 P
-0.41 (eads. Doing so) 404.82 442.29 P
(may have the ef) 180.65 428.29 T
(fect of allowing other thr) 257.6 428.29 T
(eads to r) 378.22 428.29 T
(un, and) 419.72 428.29 T
-0.1 (may be essential to avoid deadlock in a co-operative schedul-) 180.65 414.29 P
(ing envir) 180.65 400.29 T
(onment.) 224.35 400.29 T
3 14 Q
(current-thread) 99.65 352.29 T
0 13 Q
(Function) 429.73 352.95 T
5 12 Q
(Summar) 108.65 327.62 T
(y) 146.12 327.62 T
2 11 Q
(Returns the curr) 180.65 327.62 T
(ent thr) 259.66 327.62 T
(ead.) 291.8 327.62 T
5 12 Q
(Libr) 108.65 299.62 T
(ar) 124.97 299.62 T
(y) 134.02 299.62 T
4 9 Q
(threads) 180.65 299.62 T
5 12 Q
(Module) 108.65 272.62 T
4 9 Q
(threads) 180.65 272.62 T
5 12 Q
(Signature) 108.65 245.62 T
4 9 Q
(current-thread \050\051 =>) 180.65 245.62 T
7 F
(thr) 294.05 245.62 T
(ead) 305.89 245.62 T
5 12 Q
(Arguments) 108.65 218.62 T
2 11 Q
(None.) 180.65 218.62 T
5 12 Q
(V) 108.65 190.62 T
(alues) 114.54 190.62 T
0 11 Q
(thr) 180.65 190.62 T
(ead) 193.89 190.62 T
2 F
(An instance of) 261.65 190.62 T
4 9.5 Q
(<thread>) 334.43 190.62 T
2 11 Q
(.) 380.04 190.62 T
5 12 Q
(Descr) 108.65 162.62 T
(iption) 134.48 162.62 T
2 11 Q
(Returns the curr) 180.65 162.62 T
(ent thr) 259.66 162.62 T
(ead.) 291.8 162.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Proposal for a Dylan Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(12) 63.65 124.95 T
0 F
(DRAFT) 465.64 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
3 16 Q
0 X
(1.6  Sync) 117.65 662.29 T
(hr) 174.43 662.29 T
(onization pr) 187.31 662.29 T
(otocol) 261.42 662.29 T
3 13 Q
(1.6.1  Basic f) 117.65 628.29 T
(eatures) 182.15 628.29 T
3 14 Q
(<sync) 117.65 580.62 T
(hr) 150.42 580.62 T
(onization>) 161.69 580.62 T
0 13 Q
(Open abstract class) 393.83 581.29 T
5 12 Q
(Summar) 126.65 555.95 T
(y) 164.12 555.95 T
2 11 Q
(The class of objects that ar) 198.65 555.95 T
(e used for inter) 325.18 555.95 T
(-thr) 398.61 555.95 T
(ead synchr) 416.4 555.95 T
(oni-) 469.26 555.95 T
(zation.) 198.65 541.95 T
5 12 Q
(Libr) 126.65 514.29 T
(ar) 142.97 514.29 T
(y) 152.02 514.29 T
4 9 Q
(threads) 198.65 514.29 T
5 12 Q
(Module) 126.65 487.29 T
4 9 Q
(threads) 198.65 487.29 T
5 12 Q
(Superclasses) 126.65 460.29 T
4 9 Q
(<object>) 198.65 460.29 T
5 12 Q
(Init-k) 126.65 433.29 T
(e) 147.79 433.29 T
(yw) 153.08 433.29 T
(ords) 165.02 433.29 T
0 11 Q
(name) 198.65 433.29 T
2 F
(An instance of) 279.65 433.29 T
4 9.5 Q
(<string>) 352.43 433.29 T
2 11 Q
(.) 398.04 433.29 T
5 12 Q
(Descr) 126.65 405.29 T
(iption) 152.48 405.29 T
2 11 Q
(The class of objects that ar) 198.65 405.29 T
(e used for inter) 325.18 405.29 T
(-thr) 398.61 405.29 T
(ead synchr) 416.4 405.29 T
(oni-) 469.26 405.29 T
(zation.) 198.65 391.29 T
(Ther) 198.65 371.29 T
(e is no explicit mechanism in the library to block on a) 221.21 371.29 T
(number of synchr) 198.65 357.29 T
(onization objects simultaneously) 284.88 357.29 T
(, until syn-) 442.82 357.29 T
(chr) 198.65 343.29 T
(onization can be achieved with one of them. This mecha-) 214.08 343.29 T
(nism can be implemented by cr) 198.65 329.29 T
(eating a new thr) 350.7 329.29 T
(ead to wait) 429.51 329.29 T
(for each synchr) 198.65 315.29 T
(onization object, and arranging for each) 272.83 315.29 T
-0.42 (thr) 198.65 301.29 P
-0.42 (ead to r) 212.78 301.29 P
-0.42 (elease a noti\336cation once synchr) 248.67 301.29 P
-0.42 (onization has been) 403.27 301.29 P
(achieved.) 198.65 287.29 T
(The) 198.65 267.29 T
0 F
(name) 219.81 267.29 T
2 F
( keywor) 243.65 267.29 T
(d is a string that is used as the synchr) 283.23 267.29 T
(oniza-) 464.64 267.29 T
(tion object\325s name for convenience purposes, such as debug-) 198.65 253.29 T
(ging.) 198.65 239.29 T
5 12 Q
(Oper) 126.65 211.62 T
(ations) 148.44 211.62 T
2 11 Q
(The class) 198.65 211.62 T
4 9.5 Q
(<synchronization>) 245.48 211.62 T
2 11 Q
( provides the following opera-) 342.38 211.62 T
(tions:) 198.65 197.62 T
4 9.5 Q
(wait-for) 198.65 177.62 T
2 11 Q
-0.09 (Block until synchr) 279.65 177.62 P
-0.09 (onization can be achieved.) 367.53 177.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(DRAFT) 99.65 124.95 T
1 F
(13) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
4 9.5 Q
0 X
(release) 180.65 665.62 T
2 11 Q
(Release the object to make it available for) 261.65 665.62 T
(synchr) 261.65 651.62 T
(onization.) 294.26 651.62 T
4 9.5 Q
(synchronization-name) 180.65 628.62 T
2 11 Q
(Returns the name of the synchr) 261.65 611.12 T
(onization) 413.33 611.12 T
(object.) 261.65 597.12 T
3 14 Q
(wait-f) 99.65 549.12 T
(or) 129.41 549.12 T
0 13 Q
(Open generic function) 360.14 549.79 T
5 12 Q
(Summar) 108.65 524.45 T
(y) 146.12 524.45 T
2 11 Q
(Blocks until a synchr) 180.65 524.45 T
(onization object is available.) 281.63 524.45 T
5 12 Q
(Libr) 108.65 496.45 T
(ar) 124.97 496.45 T
(y) 134.02 496.45 T
4 9 Q
(threads) 180.65 496.45 T
5 12 Q
(Module) 108.65 469.45 T
4 9 Q
(threads) 180.65 469.45 T
5 12 Q
(Signature) 108.65 442.45 T
4 9 Q
(wait-for) 180.65 442.45 T
7 F
(object) 229.25 442.45 T
4 F
( #key) 253.57 442.45 T
7 F
(timeout) 285.98 442.45 T
4 F
( =>) 317.48 442.45 T
7 F
(success) 339.08 442.45 T
5 12 Q
(Arguments) 108.65 415.45 T
0 11 Q
(object) 180.65 415.45 T
2 F
(An instance of) 261.65 415.45 T
4 9.5 Q
(<synchronization>) 334.43 415.45 T
2 11 Q
(.) 431.33 415.45 T
0 F
(timeout) 180.65 395.45 T
2 F
(T) 261.65 395.45 T
(ime-out interval. If the value is) 267.79 395.45 T
4 9.5 Q
(#f) 420.14 395.45 T
2 11 Q
(\050the) 437.24 395.45 T
-0.26 (default\051, the time-out interval never elapses.) 261.65 381.45 P
(Otherwise the value should be a) 261.65 367.45 T
4 9.5 Q
(<real>) 421.26 367.45 T
2 11 Q
(,) 455.46 367.45 T
(corr) 261.65 353.45 T
(esponding to the desir) 281.03 353.45 T
(ed interval in sec-) 389.52 353.45 T
(onds.) 261.65 339.45 T
5 12 Q
(V) 108.65 311.79 T
(alues) 114.54 311.79 T
0 11 Q
(success) 180.65 311.79 T
2 F
-0.04 (An instance of) 261.65 311.79 P
4 9.5 Q
-0.08 (<boolean>) 334.32 311.79 P
2 11 Q
-0.04 (.) 385.62 311.79 P
4 9.5 Q
-0.08 (#t) 391.08 311.79 P
2 11 Q
-0.04 ( if synchr) 402.48 311.79 P
-0.04 (oniza-) 447.38 311.79 P
(tion was achieved, or) 261.65 297.79 T
4 9.5 Q
(#f) 367.74 297.79 T
2 11 Q
(to indicate that a) 384.84 297.79 T
(time-out occurr) 261.65 283.79 T
(ed.) 336.95 283.79 T
5 12 Q
(Descr) 108.65 256.12 T
(iption) 134.48 256.12 T
2 11 Q
(Blocks until a synchr) 180.65 256.12 T
(onization object is available.) 281.63 256.12 T
(This function is the basic blocking primitive of the Thr) 180.65 236.12 T
(eads) 444.21 236.12 T
(library) 180.65 222.12 T
(. It blocks until) 212.22 222.12 T
0 F
(object) 287.24 222.12 T
2 F
( is available and synchr) 312.69 222.12 T
(onization) 426.46 222.12 T
(can be achieved, or the) 180.65 208.12 T
0 F
(timeout) 294.36 208.12 T
2 F
( interval has expir) 328.58 208.12 T
(ed. A non-) 416.02 208.12 T
(blocking synchr) 180.65 194.12 T
(onization may be attempted by specifying a) 258.02 194.12 T
0 F
(timeout) 180.65 180.12 T
2 F
( of zer) 214.87 180.12 T
(o. Individual methods may adjust the state of) 244.95 180.12 T
(the synchr) 180.65 166.12 T
(onization object on synchr) 231.27 166.12 T
(onization. The function) 358.75 166.12 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Proposal for a Dylan Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(14) 63.65 124.95 T
0 F
(DRAFT) 465.64 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
(r) 198.65 665.62 T
(eturns) 202.79 665.62 T
4 9.5 Q
(#t) 236.44 665.62 T
2 11 Q
( if synchr) 247.84 665.62 T
(onization is achieved befor) 292.82 665.62 T
(e the timeout) 423.37 665.62 T
(interval elapses; otherwise it r) 198.65 651.62 T
(eturns) 344.14 651.62 T
4 9.5 Q
(#f.) 377.79 651.62 T
3 14 Q
(release) 117.65 603.62 T
0 13 Q
(Open generic function) 378.14 604.29 T
5 12 Q
(Summar) 126.65 578.95 T
(y) 164.12 578.95 T
2 11 Q
(Releases a synchr) 198.65 578.95 T
(onization object.) 283.45 578.95 T
5 12 Q
(Libr) 126.65 550.95 T
(ar) 142.97 550.95 T
(y) 152.02 550.95 T
4 9 Q
(threads) 198.65 550.95 T
5 12 Q
(Module) 126.65 523.95 T
4 9 Q
(threads) 198.65 523.95 T
5 12 Q
(Signature) 126.65 496.95 T
4 9 Q
(release) 198.65 496.95 T
7 F
(object) 241.85 496.95 T
4 F
( => \050\051) 266.17 496.95 T
5 12 Q
(Arguments) 126.65 469.95 T
0 11 Q
(object) 198.65 469.95 T
2 F
(An instance of) 279.65 469.95 T
4 9.5 Q
(<synchronization>) 352.43 469.95 T
2 11 Q
(.) 449.33 469.95 T
5 12 Q
(V) 126.65 441.95 T
(alues) 132.54 441.95 T
2 11 Q
(None.) 198.65 441.95 T
5 12 Q
(Descr) 126.65 413.95 T
(iption) 152.48 413.95 T
2 11 Q
(Releases the supplied synchr) 198.65 413.95 T
(onization object,) 338.86 413.95 T
0 F
(object) 421.32 413.95 T
2 F
(, poten-) 446.77 413.95 T
(tially making it available to other thr) 198.65 399.95 T
(eads. Individual meth-) 376.79 399.95 T
(ods describe what this means for each class of) 198.65 385.95 T
(synchr) 198.65 371.95 T
(onization. This function does not block for any of the) 231.26 371.95 T
(subclasses of) 198.65 357.95 T
4 9.5 Q
(<synchronization>) 264.04 357.95 T
2 11 Q
( pr) 360.94 357.95 T
(ovided by the library) 374.45 357.95 T
(.) 475.86 357.95 T
3 14 Q
(sync) 117.65 309.95 T
(hr) 143.72 309.95 T
(onization-name) 154.99 309.95 T
0 13 Q
(Open generic function) 378.14 310.62 T
5 12 Q
(Summar) 126.65 285.29 T
(y) 164.12 285.29 T
2 11 Q
(Returns the name of a synchr) 198.65 285.29 T
(onization object.) 340.57 285.29 T
5 12 Q
(Libr) 126.65 257.29 T
(ar) 142.97 257.29 T
(y) 152.02 257.29 T
4 9 Q
(threads) 198.65 257.29 T
5 12 Q
(Module) 126.65 230.29 T
4 9 Q
(threads) 198.65 230.29 T
5 12 Q
(Signature) 126.65 203.29 T
4 9 Q
(synchronization-name) 198.65 203.29 T
7 F
(object) 312.05 203.29 T
4 F
( =>) 336.38 203.29 T
7 F
(name-or-false) 357.98 203.29 T
5 12 Q
(Arguments) 126.65 176.29 T
0 11 Q
(object) 198.65 176.29 T
2 F
(An instance of) 279.65 176.29 T
4 9.5 Q
(<synchronization>) 352.43 176.29 T
2 11 Q
(.) 449.33 176.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(DRAFT) 99.65 124.95 T
1 F
(15) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
5 12 Q
0 X
(V) 108.65 664.95 T
(alues) 114.54 664.95 T
0 11 Q
(name-or-false) 180.65 664.95 T
2 F
(An instance of) 261.65 664.95 T
4 9.5 Q
(false-or\050<string>\051) 334.43 664.95 T
2 11 Q
(.) 437.04 664.95 T
5 12 Q
(Descr) 108.65 636.95 T
(iption) 134.48 636.95 T
2 11 Q
(Returns the name of the synchr) 180.65 636.95 T
(onization object,) 332.33 636.95 T
0 F
(object) 414.78 636.95 T
2 F
(, if it) 440.24 636.95 T
(was cr) 180.65 622.95 T
(eated with the) 211.77 622.95 T
0 F
(name) 283.98 622.95 T
2 F
( init-keywor) 307.82 622.95 T
(d. Otherwise) 367.45 622.95 T
4 9.5 Q
(#f) 432.98 622.95 T
2 11 Q
( is) 444.38 622.95 T
(r) 180.65 608.95 T
(eturned.) 184.79 608.95 T
3 13 Q
(1.6.2  Loc) 99.65 575.62 T
(ks) 148.05 575.62 T
3 14 Q
(<loc) 99.65 527.95 T
(k>) 122.73 527.95 T
0 13 Q
(Abstract instantiable class) 339.48 528.62 T
5 12 Q
(Summar) 108.65 503.29 T
(y) 146.12 503.29 T
2 11 Q
(The class of locks.) 180.65 503.29 T
5 12 Q
(Libr) 108.65 475.29 T
(ar) 124.97 475.29 T
(y) 134.02 475.29 T
4 9 Q
(threads) 180.65 475.29 T
5 12 Q
(Module) 108.65 448.29 T
4 9 Q
(threads) 180.65 448.29 T
5 12 Q
(Superclasses) 108.65 421.29 T
4 9 Q
(<synchronization>) 180.65 421.29 T
5 12 Q
(Descr) 108.65 394.29 T
(iption) 134.48 394.29 T
2 11 Q
(Locks ar) 180.65 394.29 T
(e synchr) 221.44 394.29 T
(onization objects which change state when) 262.07 394.29 T
(they ar) 180.65 380.29 T
(e) 214.42 380.29 T
0 F
(claimed) 222.44 380.29 T
2 F
( \050using) 256.25 380.29 T
4 9.5 Q
(wait-for) 292.43 380.29 T
2 11 Q
(\051, and r) 338.03 380.29 T
(evert state when) 372.71 380.29 T
0 F
(r) 180.65 366.29 T
(eleased) 184.73 366.29 T
2 F
( \050using) 215.29 366.29 T
4 9.5 Q
(release) 251.47 366.29 T
2 11 Q
(\051.) 291.37 366.29 T
-0.18 (It is normally necessary for pr) 180.65 346.29 P
-0.18 (ograms to ensur) 325.04 346.29 P
-0.18 (e that locks ar) 403.23 346.29 P
-0.18 (e) 469.81 346.29 P
(r) 180.65 332.29 T
(eleased, otherwise ther) 184.79 332.29 T
(e is the possibility of) 296.26 332.29 T
0 F
(deadlock) 398.6 332.29 T
2 F
(. Locks) 436.07 332.29 T
(may be used to r) 180.65 318.29 T
(estrict the access of other thr) 261.36 318.29 T
(eads to shar) 399.17 318.29 T
(ed) 457.13 318.29 T
(r) 180.65 304.29 T
(esour) 184.79 304.29 T
(ces between the synchr) 211.51 304.29 T
(onization and the r) 323.51 304.29 T
(elease. It is) 415.59 304.29 T
-0.36 (common for a pr) 180.65 290.29 P
-0.36 (otected operation to be performed by a body) 260.8 290.29 P
(of code which is evaluated in a single thr) 180.65 276.29 T
(ead between syn-) 379.11 276.29 T
-0.35 (chr) 180.65 262.29 P
-0.35 (onization and r) 196.08 262.29 P
-0.35 (elease. A macr) 269.46 262.29 P
-0.35 (o) 338.99 262.29 P
4 9.5 Q
-0.72 (with-lock) 347.39 262.29 P
2 11 Q
-0.35 (is pr) 403.67 262.29 P
-0.35 (ovided for) 424.7 262.29 P
(this purpose. When a thr) 180.65 248.29 T
(ead uses a lock for) 301.1 248.29 T
0 F
(mutual-exclusion) 393.29 248.29 T
2 F
(in this way) 180.65 234.29 T
(, the thr) 233.17 234.29 T
(ead is said to) 270.82 234.29 T
0 F
(own the lock) 336.85 234.29 T
2 F
(.) 392.04 234.29 T
4 9.5 Q
(<lock>) 180.65 214.29 T
2 11 Q
( has no dir) 214.85 214.29 T
(ect instances; calling) 266.14 214.29 T
4 9.5 Q
(make) 367.96 214.29 T
2 11 Q
( on) 390.76 214.29 T
4 9.5 Q
(<lock>) 408.67 214.29 T
2 11 Q
(r) 180.65 200.29 T
(eturns an instance of) 184.79 200.29 T
4 9.5 Q
(<simple-lock>) 288.17 200.29 T
2 11 Q
(.) 362.27 200.29 T
5 12 Q
(Oper) 108.65 172.62 T
(ations) 130.44 172.62 T
2 11 Q
(The class) 180.65 172.62 T
4 9.5 Q
(<lock>) 227.48 172.62 T
2 11 Q
( provides the following operations:) 261.67 172.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Proposal for a Dylan Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(16) 63.65 124.95 T
0 F
(DRAFT) 465.64 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
4 9.5 Q
0 X
(with-lock) 198.65 665.62 T
2 11 Q
(Execute a body of code between) 279.65 665.62 T
4 9.5 Q
(wait-for) 438.21 665.62 T
2 11 Q
(and) 279.65 651.62 T
4 9.5 Q
(release) 301.02 651.62 T
2 11 Q
( operations.) 340.92 651.62 T
3 14 Q
(with-loc) 117.65 603.62 T
(k) 160.81 603.62 T
0 13 Q
(Macr) 461.72 604.29 T
(o) 489.88 604.29 T
5 12 Q
(Summar) 126.65 578.95 T
(y) 164.12 578.95 T
2 11 Q
(Holds a lock while executing a body of code.) 198.65 578.95 T
5 12 Q
(Libr) 126.65 550.95 T
(ar) 142.97 550.95 T
(y) 152.02 550.95 T
4 9 Q
(threads) 198.65 550.95 T
5 12 Q
(Module) 126.65 523.95 T
4 9 Q
(threads) 198.65 523.95 T
5 12 Q
(Macro call) 126.65 496.95 T
4 9 Q
(with-lock \050) 198.65 496.95 T
7 F
(lock) 258.05 496.95 T
4 F
(, #key) 275.05 496.95 T
7 F
(keys) 312.85 496.95 T
4 F
(\051) 330.85 496.95 T
7 F
(body) 209.45 485.95 T
4 F
([failure) 198.65 474.95 T
7 F
(failur) 247.25 474.95 T
(e-expr) 269.59 474.95 T
4 F
(]) 294.08 474.95 T
(end) 198.65 463.95 T
5 12 Q
(Arguments) 126.65 437.95 T
0 11 Q
(lock) 198.65 437.95 T
2 F
(An instance of) 279.65 437.95 T
4 9.5 Q
(<lock>) 352.43 437.95 T
2 11 Q
(.) 386.64 437.95 T
0 F
(keys) 198.65 417.95 T
2 F
(Zer) 279.65 417.95 T
(o or mor) 296.4 417.95 T
(e of the keywor) 338.12 417.95 T
(ds pr) 413.4 417.95 T
(ovided by) 438.29 417.95 T
4 9.5 Q
(wait-for) 279.65 403.95 T
2 11 Q
(,  page 13) 324.43 403.95 T
(.) 369.93 403.95 T
0 F
(body) 198.65 383.95 T
2 F
(A body of Dylan code.) 279.65 383.95 T
5 12 Q
(V) 126.65 356.29 T
(alues) 132.54 356.29 T
0 11 Q
(values) 198.65 356.29 T
2 F
(Zer) 279.65 356.29 T
(o or mor) 296.4 356.29 T
(e instances of) 338.12 356.29 T
4 9.5 Q
(<object>) 405.88 356.29 T
2 11 Q
(.) 451.48 356.29 T
5 12 Q
(Exceptions) 126.65 328.29 T
4 9.5 Q
(with-lock) 198.65 328.29 T
2 11 Q
( may signal a condition of the following class \050a) 249.95 328.29 T
(subclass of) 198.65 314.29 T
4 9.5 Q
(<serious-condition>) 254.11 314.29 T
2 11 Q
(\051:) 362.41 314.29 T
4 9.5 Q
(<timeout-expired>) 198.65 288.29 T
2 11 Q
(This is signalled when) 279.65 270.29 T
4 9.5 Q
(with-lock) 391.05 270.29 T
2 11 Q
( did not) 442.35 270.29 T
-0.22 (succeed in claiming the lock within the time-) 279.65 256.29 P
(out period.) 279.65 242.29 T
5 12 Q
(Descr) 126.65 214.62 T
(iption) 152.48 214.62 T
2 11 Q
(Execute the) 198.65 214.62 T
0 F
(body) 257.44 214.62 T
2 F
( with) 278.42 214.62 T
0 F
(lock) 306.28 214.62 T
2 F
( held. If a) 323.59 214.62 T
4 9.5 Q
(failure) 371.8 214.62 T
2 11 Q
( clause is sup-) 411.7 214.62 T
(plied, then it will be evaluated and its values r) 198.65 200.62 T
(eturned fr) 423.32 200.62 T
(om) 472.11 200.62 T
4 9.5 Q
(with-lock) 198.65 186.62 T
2 11 Q
( if the lock cannot be claimed \050because a timeout) 249.95 186.62 T
(occurr) 198.65 172.62 T
(ed\051. The default, if no) 229.55 172.62 T
4 9.5 Q
(failure) 336.71 172.62 T
2 11 Q
( clause is supplied, is to) 376.61 172.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(DRAFT) 99.65 124.95 T
1 F
(17) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
2 11 Q
0 X
-0.29 (signal an exception of class) 180.65 665.62 P
4 9.5 Q
-0.61 (<timeout-expired>) 313.4 665.62 P
2 11 Q
-0.29 (. If ther) 410.3 665.62 P
-0.29 (e is no) 444.74 665.62 P
(failur) 180.65 651.62 T
(e,) 206.99 651.62 T
4 9.5 Q
(with-lock) 217.76 651.62 T
2 11 Q
( r) 269.06 651.62 T
(eturns the r) 275.96 651.62 T
(esults of evaluating the body) 331.76 651.62 T
(.) 471.03 651.62 T
5 12 Q
(Example) 108.65 623.95 T
2 11 Q
-0.46 (If no) 180.65 623.95 P
4 9.5 Q
-0.95 (failure) 205.01 623.95 P
2 11 Q
-0.46 ( clause is supplied, the macr) 244.91 623.95 P
-0.46 (o expands into code) 379.55 623.95 P
(equivalent to the following:) 180.65 609.95 T
4 9 Q
(if \050wait-for\050lock,) 180.65 589.29 T
7 F
(keys) 283.25 589.29 T
0 F
( ...) 301.25 589.29 T
4 F
(\051\051) 310.25 589.29 T
(block \050\051) 191.45 578.29 T
7 F
(body) 202.25 567.29 T
4 F
( ...) 222.09 567.29 T
(cleanup) 191.45 556.29 T
(release\050lock\051) 202.25 545.29 T
(end block) 191.45 534.29 T
(else) 180.65 523.29 T
(signal\050make\050<timeout-expired>, synchronization: lock\051) 191.45 512.29 T
(end if) 180.65 501.29 T
3 13 Q
(1.6.3  Semaphores) 99.65 469.62 T
3 14 Q
(<semaphore>) 99.65 421.95 T
0 13 Q
(Instantiable primary class) 341.39 422.62 T
5 12 Q
(Summar) 108.65 397.29 T
(y) 146.12 397.29 T
2 11 Q
(The class of traditional counting semaphor) 180.65 397.29 T
(es.) 388.18 397.29 T
5 12 Q
(Libr) 108.65 369.29 T
(ar) 124.97 369.29 T
(y) 134.02 369.29 T
4 9 Q
(threads) 180.65 369.29 T
5 12 Q
(Module) 108.65 342.29 T
4 9 Q
(threads) 180.65 342.29 T
5 12 Q
(Superclasses) 108.65 315.29 T
4 9 Q
(<lock>) 180.65 315.29 T
5 12 Q
(Descr) 108.65 288.29 T
(iption) 134.48 288.29 T
2 11 Q
(The) 180.65 288.29 T
4 9.5 Q
(<semaphore>) 201.81 288.29 T
2 11 Q
( class is a class r) 264.51 288.29 T
(epr) 341.6 288.29 T
(esenting a traditional) 357.63 288.29 T
(counting semaphor) 180.65 274.29 T
(e. An instance of) 274.94 274.29 T
4 9.5 Q
(<semaphore>) 358.5 274.29 T
2 11 Q
( contains a) 421.2 274.29 T
(counter in its internal state. Calling) 180.65 260.29 T
4 9.5 Q
(release) 354.01 260.29 T
2 11 Q
( on a semaphor) 393.91 260.29 T
(e) 468.38 260.29 T
(incr) 180.65 246.29 T
(ements the internal count. Calling) 199.28 246.29 T
4 9.5 Q
(wait-for) 366.78 246.29 T
2 11 Q
( on a sema-) 412.38 246.29 T
(phor) 180.65 232.29 T
(e decr) 203.81 232.29 T
(ements the internal count, unless it is zer) 232.85 232.29 T
(o, in) 430.83 232.29 T
-0.41 (which case the thr) 180.65 218.29 P
-0.41 (ead blocks until another thr) 267.44 218.29 P
-0.41 (ead r) 399.9 218.29 P
-0.41 (eleases the) 423.88 218.29 P
(semaphor) 180.65 204.29 T
(e.) 228.96 204.29 T
(Semaphor) 180.65 184.29 T
(es ar) 230.07 184.29 T
(e less ef) 252.4 184.29 T
(\336cient than exclusive locks, but they) 289.7 184.29 T
(have asynchr) 180.65 170.29 T
(onous pr) 244.9 170.29 T
(operties which may be useful \050for) 288.12 170.29 T
(example for managing queues or pools of shar) 180.65 156.29 T
(ed r) 405.95 156.29 T
(esour) 424.84 156.29 T
(ces\051.) 451.56 156.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 18
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Proposal for a Dylan Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(18) 63.65 124.95 T
0 F
(DRAFT) 465.64 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
(Semaphor) 198.65 665.62 T
(es may be r) 248.07 665.62 T
(eleased by any thr) 303.08 665.62 T
(ead, so ther) 391.58 665.62 T
(e is no) 447.39 665.62 T
(built-in concept of a thr) 198.65 651.62 T
(ead owning a semaphor) 312.56 651.62 T
(e. It is not) 429.42 651.62 T
(necessary for a thr) 198.65 637.62 T
(ead to r) 287.66 637.62 T
(elease a semaphor) 324.39 637.62 T
(e after waiting) 412.87 637.62 T
(for it \321 although semaphor) 198.65 623.62 T
(es may be used as locks if they) 333.61 623.62 T
(do.) 198.65 609.62 T
5 12 Q
(Init-k) 126.65 581.95 T
(e) 147.79 581.95 T
(yw) 153.08 581.95 T
(ords) 165.02 581.95 T
0 11 Q
(initial-count) 198.65 581.95 T
2 F
(A non-negative integer) 279.65 581.95 T
(, corr) 391.11 581.95 T
(esponding to) 415.99 581.95 T
(the initial state of the internal counter) 279.65 567.95 T
(. The) 461.45 567.95 T
(default value is 0.) 279.65 553.95 T
0 F
(maximum-count) 198.65 533.95 T
2 F
-0.48 (A non-negative integer corr) 279.65 533.95 P
-0.48 (esponding to the) 412.61 533.95 P
(maximum permitted value of the internal) 279.65 519.95 T
(counter) 279.65 505.95 T
(. The default value is the lar) 315.96 505.95 T
(gest) 450.98 505.95 T
(value supported by the implementation,) 279.65 491.95 T
(which is the value of the constant) 279.65 477.95 T
4 9.5 Q
($semaphore-maximum-count-limit) 279.65 463.95 T
2 11 Q
(. This) 450.65 463.95 T
(constant will not be smaller than 10000.) 279.65 449.95 T
3 14 Q
(wait-f) 117.65 401.95 T
(or) 147.41 401.95 T
0 13 Q
(Sealed method) 420.9 402.62 T
5 12 Q
(Summar) 126.65 377.29 T
(y) 164.12 377.29 T
2 11 Q
(Claims a semaphor) 198.65 377.29 T
(e object.) 292.04 377.29 T
5 12 Q
(Libr) 126.65 349.29 T
(ar) 142.97 349.29 T
(y) 152.02 349.29 T
4 9 Q
(threads) 198.65 349.29 T
5 12 Q
(Module) 126.65 322.29 T
4 9 Q
(threads) 198.65 322.29 T
5 12 Q
(Signature) 126.65 295.29 T
4 9 Q
(wait-for) 198.65 295.29 T
7 F
(object) 247.25 295.29 T
4 F
( #key) 271.58 295.29 T
7 F
(timeout) 303.98 295.29 T
4 F
( =>) 335.48 295.29 T
7 F
(success) 357.08 295.29 T
5 12 Q
(Arguments) 126.65 268.29 T
0 11 Q
(object) 198.65 268.29 T
2 F
-0.41 (An instance of) 279.65 268.29 P
4 9.5 Q
-0.86 (<semaphore>) 351.19 268.29 P
2 11 Q
-0.41 (. The semaphor) 413.89 268.29 P
-0.41 (e) 488.04 268.29 P
(object to wait for) 279.65 254.29 T
(.) 360.55 254.29 T
0 F
(timeout) 198.65 234.29 T
2 F
(T) 279.65 234.29 T
(ime-out interval. If the value is) 285.79 234.29 T
4 9.5 Q
(#f) 438.14 234.29 T
2 11 Q
(\050the) 455.24 234.29 T
-0.26 (default\051, the time-out interval never elapses.) 279.65 220.29 P
(Otherwise the value should be a) 279.65 206.29 T
4 9.5 Q
(<real>) 439.26 206.29 T
2 11 Q
(,) 473.46 206.29 T
(corr) 279.65 192.29 T
(esponding to the desir) 299.03 192.29 T
(ed interval in sec-) 407.52 192.29 T
(onds.) 279.65 178.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 18
%%Page: "19" 19
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(DRAFT) 99.65 124.95 T
1 F
(19) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
5 12 Q
0 X
(V) 108.65 664.95 T
(alues) 114.54 664.95 T
0 11 Q
(success) 180.65 664.95 T
4 9.5 Q
-0.58 (#t) 261.65 664.95 P
2 11 Q
-0.28 ( if synchr) 273.05 664.95 P
-0.28 (onization was achieved, or) 317.47 664.95 P
4 9.5 Q
-0.58 (#f) 449.06 664.95 P
2 11 Q
-0.28 (to) 465.58 664.95 P
(indicate that a time-out occurr) 261.65 650.95 T
(ed.) 408.54 650.95 T
5 12 Q
(Descr) 108.65 623.29 T
(iption) 134.48 623.29 T
2 11 Q
(Decr) 180.65 623.29 T
(ements the internal count of the semaphor) 203.46 623.29 T
(e object,) 408.78 623.29 T
(blocking if the count is zer) 180.65 609.29 T
(o.) 308.82 609.29 T
5 12 Q
(See also) 108.65 581.62 T
4 9.5 Q
(wait-for) 180.65 581.62 T
2 11 Q
(,  page 13.) 225.43 581.62 T
3 14 Q
(release) 99.65 533.29 T
0 13 Q
(Sealed method) 402.9 533.95 T
5 12 Q
(Summar) 108.65 508.62 T
(y) 146.12 508.62 T
2 11 Q
(Releases a semaphor) 180.65 508.62 T
(e object.) 281.14 508.62 T
5 12 Q
(Libr) 108.65 480.62 T
(ar) 124.97 480.62 T
(y) 134.02 480.62 T
4 9 Q
(threads) 180.65 480.62 T
5 12 Q
(Module) 108.65 453.62 T
4 9 Q
(threads) 180.65 453.62 T
5 12 Q
(Signature) 108.65 426.62 T
4 9 Q
(release) 180.65 426.62 T
7 F
(object) 223.85 426.62 T
4 F
( => \050\051) 248.18 426.62 T
5 12 Q
(Arguments) 108.65 399.62 T
0 11 Q
(object) 180.65 399.62 T
2 F
(An instance of) 261.65 399.62 T
4 9.5 Q
(<semaphore>) 334.43 399.62 T
2 11 Q
(.) 397.14 399.62 T
5 12 Q
(V) 108.65 371.62 T
(alues) 114.54 371.62 T
2 11 Q
(None.) 180.65 371.62 T
5 12 Q
(Exceptions) 108.65 343.62 T
2 11 Q
(An implementation of this) 180.65 343.62 T
4 9.5 Q
(release) 311.79 343.62 T
2 11 Q
( method is permitted to) 351.69 343.62 T
(signal a condition of the following class, which is a subclass) 180.65 329.62 T
(of) 180.65 315.62 T
4 9.5 Q
(<error>) 193.07 315.62 T
2 11 Q
(:) 232.97 315.62 T
4 9.5 Q
(<count-exceeded-error>) 180.65 292.62 T
2 11 Q
(This may be signalled when an attempt is) 261.65 275.12 T
(made to r) 261.65 261.12 T
(elease a) 308.09 261.12 T
4 9.5 Q
(<semaphore>) 348.26 261.12 T
2 11 Q
( when the) 410.96 261.12 T
(internal counter is alr) 261.65 247.12 T
(eady at its maximum) 365.64 247.12 T
(count.) 261.65 233.12 T
5 12 Q
(Descr) 108.65 205.45 T
(iption) 134.48 205.45 T
2 11 Q
(Releases a semaphor) 180.65 205.45 T
(e object, by incr) 281.14 205.45 T
(ementing its internal) 356.65 205.45 T
(count.) 180.65 191.45 T
5 12 Q
(See also) 108.65 163.79 T
4 9.5 Q
(release) 180.65 163.79 T
2 11 Q
(,  page 14.) 220.55 163.79 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 19
%%Page: "20" 20
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Proposal for a Dylan Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(20) 63.65 124.95 T
0 F
(DRAFT) 465.64 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
3 13 Q
0 X
(1.6.4  Exc) 117.65 664.29 T
(lusive loc) 166.06 664.29 T
(ks) 214.46 664.29 T
3 14 Q
(<e) 117.65 616.62 T
(xc) 130.58 616.62 T
(lusive-loc) 143.14 616.62 T
(k>) 195.89 616.62 T
0 13 Q
(Abstract instantiable class) 357.48 617.29 T
5 12 Q
(Summar) 126.65 591.95 T
(y) 164.12 591.95 T
2 11 Q
(The class of locks whose state can be changed only by the) 198.65 591.95 T
(thr) 198.65 577.95 T
(eads that own them.) 212.78 577.95 T
5 12 Q
(Libr) 126.65 550.29 T
(ar) 142.97 550.29 T
(y) 152.02 550.29 T
4 9 Q
(threads) 198.65 550.29 T
5 12 Q
(Module) 126.65 523.29 T
4 9 Q
(threads) 198.65 523.29 T
5 12 Q
(Superclasses) 126.65 496.29 T
4 9 Q
(<lock>) 198.65 496.29 T
5 12 Q
(Descr) 126.65 469.29 T
(iption) 152.48 469.29 T
2 11 Q
(The class of locks whose state can be changed only by the) 198.65 469.29 T
(thr) 198.65 455.29 T
(eads that own them. An instance of) 212.78 455.29 T
4 9.5 Q
(<exclusive-lock>) 387.1 455.29 T
2 11 Q
(may only be locked by one thr) 198.65 441.29 T
(ead at a time, by calling) 345.76 441.29 T
4 9.5 Q
(wait-) 463.56 441.29 T
(for) 198.65 427.29 T
2 11 Q
( on the lock. Once locked, any attempt by any other) 215.75 427.29 T
(thr) 198.65 413.29 T
(ead to wait for the lock causes that thr) 212.78 413.29 T
(ead to block.) 397.63 413.29 T
-0.06 (It is an err) 198.65 393.29 P
-0.06 (or for a thr) 247.55 393.29 P
-0.06 (ead to r) 299.63 393.29 P
-0.06 (elease an) 336.25 393.29 P
4 9.5 Q
-0.12 (<exclusive-lock>) 382.71 393.29 P
2 11 Q
-0.06 ( if it) 473.91 393.29 P
(does not own the lock. The notion of ownership is dir) 198.65 379.29 T
(ectly) 458.29 379.29 T
(supported by the class, and a thr) 198.65 365.29 T
(ead may test whether an) 356.97 365.29 T
4 9.5 Q
(<exclusive-lock>) 198.65 351.29 T
2 11 Q
( is curr) 289.85 351.29 T
(ently owned.) 323.22 351.29 T
4 9.5 Q
(<exclusive-lock>) 198.65 331.29 T
2 11 Q
( has no dir) 289.85 331.29 T
(ect instances; calling) 341.14 331.29 T
4 9.5 Q
(make) 442.96 331.29 T
2 11 Q
( on) 465.76 331.29 T
4 9.5 Q
(<exclusive-lock>) 198.65 317.29 T
2 11 Q
(r) 295.55 317.29 T
(eturns an instance of) 299.7 317.29 T
4 9.5 Q
(<simple-lock>) 403.07 317.29 T
2 11 Q
(.) 477.17 317.29 T
5 12 Q
(Oper) 126.65 289.62 T
(ations) 148.44 289.62 T
2 11 Q
(The class) 198.65 289.62 T
4 9.5 Q
(<exclusive-lock>) 245.48 289.62 T
2 11 Q
(provides the following opera-) 342.38 289.62 T
(tions:) 198.65 275.62 T
4 9.5 Q
(owned?) 198.65 255.62 T
2 11 Q
(T) 279.65 255.62 T
(ests to see if the lock has been claimed by) 285.38 255.62 T
(the curr) 279.65 241.62 T
(ent thr) 317.66 241.62 T
(ead.) 349.81 241.62 T
3 14 Q
(release) 117.65 193.62 T
0 13 Q
(Pr) 452.33 194.29 T
(otocol) 465.1 194.29 T
5 12 Q
(Summar) 126.65 168.95 T
(y) 164.12 168.95 T
2 11 Q
(Releases an exclusive lock.) 198.65 168.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 20
%%Page: "21" 21
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(DRAFT) 99.65 124.95 T
1 F
(21) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
5 12 Q
0 X
(Libr) 108.65 664.95 T
(ar) 124.97 664.95 T
(y) 134.02 664.95 T
4 9 Q
(threads) 180.65 664.95 T
5 12 Q
(Module) 108.65 637.95 T
4 9 Q
(threads) 180.65 637.95 T
5 12 Q
(Signature) 108.65 610.95 T
4 9 Q
(release) 180.65 610.95 T
7 F
(object) 223.85 610.95 T
4 F
( => \050\051) 248.18 610.95 T
5 12 Q
(Arguments) 108.65 583.95 T
0 11 Q
(object) 180.65 583.95 T
2 F
(An instance of) 261.65 583.95 T
4 9.5 Q
(<exclusive-lock>) 334.43 583.95 T
2 11 Q
(.) 425.64 583.95 T
5 12 Q
(V) 108.65 555.95 T
(alues) 114.54 555.95 T
2 11 Q
(None.) 180.65 555.95 T
5 12 Q
(Exceptions) 108.65 527.95 T
2 11 Q
(Implementations of) 180.65 527.95 T
4 9.5 Q
(release) 278.65 527.95 T
2 11 Q
( methods for subclasses of) 318.55 527.95 T
4 9.5 Q
(<exclusive-lock>) 180.65 513.95 T
2 11 Q
( ar) 271.85 513.95 T
(e permitted to signal a condition of the) 284.24 513.95 T
(following class, which is a subclass of) 180.65 499.95 T
4 9.5 Q
(<error>) 365.92 499.95 T
2 11 Q
(:) 405.82 499.95 T
4 9.5 Q
(<not-owned-error>) 180.65 476.95 T
2 11 Q
(This may be signalled when an attempt is) 261.65 459.45 T
-0.16 (made to r) 261.65 445.45 P
-0.16 (elease an) 307.77 445.45 P
4 9.5 Q
-0.33 (<exclusive-lock>) 354.02 445.45 P
2 11 Q
-0.16 ( when) 445.22 445.45 P
(the lock is not owned by the curr) 261.65 431.45 T
(ent thr) 421.26 431.45 T
(ead.) 453.4 431.45 T
5 12 Q
(Descr) 108.65 403.79 T
(iption) 134.48 403.79 T
2 11 Q
(Releases a lock that is owned by the calling thr) 180.65 403.79 T
(ead. It is an) 406.9 403.79 T
(err) 180.65 389.79 T
(or if the lock is not owned.) 194.41 389.79 T
-0.33 (The Thr) 180.65 369.79 P
-0.33 (eads library does not pr) 218.77 369.79 P
-0.33 (ovide a method on r) 332.8 369.79 P
-0.33 (elease for) 429.63 369.79 P
4 9.5 Q
-0.35 (<exclusive-lock>) 180.65 355.79 P
2 11 Q
-0.17 (, which is an open abstract class. Each con-) 271.85 355.79 P
-0.23 (cr) 180.65 341.79 P
-0.23 (ete subclass will have an applicable method which may sig-) 189.68 341.79 P
(nal err) 180.65 327.79 T
(ors accor) 212.26 327.79 T
(ding to the pr) 255.45 327.79 T
(otocol described above.) 321.74 327.79 T
3 14 Q
(o) 99.65 279.79 T
(wned?) 106.51 279.79 T
0 13 Q
(Generic function) 389.4 280.45 T
5 12 Q
(Summar) 108.65 255.12 T
(y) 146.12 255.12 T
2 11 Q
(T) 180.65 255.12 T
(ests whether an exclusive lock has been claimed by the cur-) 186.38 255.12 T
(r) 180.65 241.12 T
(ent thr) 184.79 241.12 T
(ead.) 216.94 241.12 T
5 12 Q
(Libr) 108.65 213.45 T
(ar) 124.97 213.45 T
(y) 134.02 213.45 T
4 9 Q
(threads) 180.65 213.45 T
5 12 Q
(Module) 108.65 186.45 T
4 9 Q
(threads) 180.65 186.45 T
5 12 Q
(Signature) 108.65 159.45 T
4 9 Q
(owned?) 180.65 159.45 T
7 F
(object) 218.45 159.45 T
4 F
( =>) 242.77 159.45 T
7 F
(owned?) 264.38 159.45 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 21
%%Page: "22" 22
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Proposal for a Dylan Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(22) 63.65 124.95 T
0 F
(DRAFT) 465.64 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
5 12 Q
0 X
(Arguments) 126.65 664.95 T
0 11 Q
(object) 198.65 664.95 T
2 F
(An instance of) 279.65 664.95 T
4 9.5 Q
(<exclusive-lock>) 352.43 664.95 T
2 11 Q
(.) 443.64 664.95 T
5 12 Q
(V) 126.65 636.95 T
(alues) 132.54 636.95 T
0 11 Q
(owned?) 198.65 636.95 T
2 F
(An instance of) 279.65 636.95 T
4 9.5 Q
(<boolean>) 352.43 636.95 T
2 11 Q
(.) 403.73 636.95 T
5 12 Q
(Descr) 126.65 608.95 T
(iption) 152.48 608.95 T
2 11 Q
-0.04 (T) 198.65 608.95 P
-0.04 (ests whether the exclusive lock has been claimed by the cur-) 204.38 608.95 P
(r) 198.65 594.95 T
(ent thr) 202.79 594.95 T
(ead.) 234.94 594.95 T
3 13 Q
(1.6.5  Recur) 117.65 561.62 T
(sive loc) 177.36 561.62 T
(ks) 216.28 561.62 T
3 14 Q
(<recur) 117.65 513.95 T
(sive-loc) 152.91 513.95 T
(k>) 195.46 513.95 T
0 13 Q
(Instantiable primary class) 359.39 514.62 T
5 12 Q
(Summar) 126.65 489.29 T
(y) 164.12 489.29 T
2 11 Q
(The class of locks that can be locked r) 198.65 489.29 T
(ecursively) 380.07 489.29 T
(.) 428.65 489.29 T
5 12 Q
(Libr) 126.65 461.29 T
(ar) 142.97 461.29 T
(y) 152.02 461.29 T
4 9 Q
(threads) 198.65 461.29 T
5 12 Q
(Module) 126.65 434.29 T
4 9 Q
(threads) 198.65 434.29 T
5 12 Q
(Superclasses) 126.65 407.29 T
4 9 Q
(<exclusive-lock>) 198.65 407.29 T
5 12 Q
(Descr) 126.65 380.29 T
(iption) 152.48 380.29 T
2 11 Q
(A thr) 198.65 380.29 T
(ead can lock a) 224.09 380.29 T
4 9.5 Q
(<recursive-lock>) 295.07 380.29 T
2 11 Q
( multiple times, r) 386.27 380.29 T
(ecur-) 469.27 380.29 T
-0.36 (sively) 198.65 366.29 P
-0.36 (, but the lock must later be r) 226.09 366.29 P
-0.36 (eleased the same number of) 359.31 366.29 P
(times. The lock will be fr) 198.65 352.29 T
(eed on the last of these r) 318.14 352.29 T
(eleases.) 435.52 352.29 T
3 14 Q
(wait-f) 117.65 304.29 T
(or) 147.41 304.29 T
0 13 Q
(Sealed method) 420.9 304.95 T
5 12 Q
(Summar) 126.65 279.62 T
(y) 164.12 279.62 T
2 11 Q
(Claims a r) 198.65 279.62 T
(ecursive lock.) 247.87 279.62 T
5 12 Q
(Libr) 126.65 251.62 T
(ar) 142.97 251.62 T
(y) 152.02 251.62 T
4 9 Q
(threads) 198.65 251.62 T
5 12 Q
(Module) 126.65 224.62 T
4 9 Q
(threads) 198.65 224.62 T
5 12 Q
(Signature) 126.65 197.62 T
4 9 Q
(wait-for) 198.65 197.62 T
7 F
(object) 247.25 197.62 T
4 F
( #key) 271.58 197.62 T
7 F
(timeout) 303.98 197.62 T
4 F
( =>) 335.48 197.62 T
7 F
(success) 357.08 197.62 T
5 12 Q
(Arguments) 126.65 170.62 T
0 11 Q
(object) 198.65 170.62 T
2 F
(An instance of) 279.65 170.62 T
4 9.5 Q
(<recursive-lock>) 352.43 170.62 T
2 11 Q
(.) 443.64 170.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 22
%%Page: "23" 23
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(DRAFT) 99.65 124.95 T
1 F
(23) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
0 11 Q
0 X
(timeout) 180.65 665.62 T
2 F
(T) 261.65 665.62 T
(ime-out interval. If the value is) 267.79 665.62 T
4 9.5 Q
(#f) 420.14 665.62 T
2 11 Q
(\050the) 437.24 665.62 T
-0.26 (default\051, the time-out interval never elapses.) 261.65 651.62 P
(Otherwise the value should be a) 261.65 637.62 T
4 9.5 Q
(<real>) 421.26 637.62 T
2 11 Q
(,) 455.46 637.62 T
(corr) 261.65 623.62 T
(esponding to the desir) 281.03 623.62 T
(ed interval in sec-) 389.52 623.62 T
(onds.) 261.65 609.62 T
5 12 Q
(V) 108.65 581.95 T
(alues) 114.54 581.95 T
0 11 Q
(success) 180.65 581.95 T
2 F
(An instance of) 261.65 581.95 T
4 9.5 Q
(<boolean>) 334.43 581.95 T
2 11 Q
(.) 385.73 581.95 T
5 12 Q
(Descr) 108.65 553.95 T
(iption) 134.48 553.95 T
2 11 Q
(Claims a r) 180.65 553.95 T
(ecursive lock, blocking if it is owned by another) 229.87 553.95 T
(thr) 180.65 539.95 T
(ead.) 194.78 539.95 T
5 12 Q
(See also) 108.65 512.29 T
4 9.5 Q
(wait-for) 180.65 512.29 T
2 11 Q
(,  page 13.) 225.43 512.29 T
3 14 Q
(release) 99.65 463.95 T
0 13 Q
(Sealed method) 402.9 464.62 T
5 12 Q
(Summar) 108.65 439.29 T
(y) 146.12 439.29 T
2 11 Q
(Releases a r) 180.65 439.29 T
(ecursive lock.) 236.98 439.29 T
5 12 Q
(Libr) 108.65 411.29 T
(ar) 124.97 411.29 T
(y) 134.02 411.29 T
4 9 Q
(threads) 180.65 411.29 T
5 12 Q
(Module) 108.65 384.29 T
4 9 Q
(threads) 180.65 384.29 T
5 12 Q
(Signature) 108.65 357.29 T
4 9 Q
(release) 180.65 357.29 T
7 F
(object) 223.85 357.29 T
4 F
( => \050\051) 248.18 357.29 T
5 12 Q
(Arguments) 108.65 330.29 T
0 11 Q
(object) 180.65 330.29 T
2 F
(An instance of) 261.65 330.29 T
4 9.5 Q
(<recursive-lock>) 334.43 330.29 T
2 11 Q
(.) 425.64 330.29 T
5 12 Q
(V) 108.65 302.29 T
(alues) 114.54 302.29 T
2 11 Q
(None.) 180.65 302.29 T
5 12 Q
(Descr) 108.65 274.29 T
(iption) 134.48 274.29 T
2 11 Q
-0.32 (Releases a r) 180.65 274.29 P
-0.32 (ecursive lock, and makes it available if it has been) 236.34 274.29 P
(r) 180.65 260.29 T
(eleased as many times as it was claimed with) 184.79 260.29 T
4 9.5 Q
(wait-for) 406.91 260.29 T
2 11 Q
(.) 451.69 260.29 T
3 14 Q
(o) 99.65 212.29 T
(wned?) 106.51 212.29 T
0 13 Q
(Sealed method) 402.9 212.95 T
5 12 Q
(Summar) 108.65 187.62 T
(y) 146.12 187.62 T
2 11 Q
(T) 180.65 187.62 T
(ests whether a r) 186.38 187.62 T
(ecursive lock has been claimed by the cur-) 262.91 187.62 T
(r) 180.65 173.62 T
(ent thr) 184.79 173.62 T
(ead.) 216.94 173.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 23
%%Page: "24" 24
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Proposal for a Dylan Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(24) 63.65 124.95 T
0 F
(DRAFT) 465.64 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
5 12 Q
0 X
(Libr) 126.65 664.95 T
(ar) 142.97 664.95 T
(y) 152.02 664.95 T
4 9 Q
(threads) 198.65 664.95 T
5 12 Q
(Module) 126.65 637.95 T
4 9 Q
(threads) 198.65 637.95 T
5 12 Q
(Signature) 126.65 610.95 T
4 9 Q
(owned?) 198.65 610.95 T
7 F
(object) 236.45 610.95 T
4 F
( =>) 260.77 610.95 T
7 F
(owned?) 282.38 610.95 T
5 12 Q
(Arguments) 126.65 583.95 T
0 11 Q
(object) 198.65 583.95 T
2 F
(An instance of) 279.65 583.95 T
4 9.5 Q
(<recursive-lock>) 352.43 583.95 T
2 11 Q
(.) 443.64 583.95 T
5 12 Q
(V) 126.65 555.95 T
(alues) 132.54 555.95 T
0 11 Q
(owned?) 198.65 555.95 T
2 F
(An instance of) 279.65 555.95 T
4 9.5 Q
(<boolean>) 352.43 555.95 T
2 11 Q
(.) 403.73 555.95 T
5 12 Q
(Descr) 126.65 527.95 T
(iption) 152.48 527.95 T
2 11 Q
(T) 198.65 527.95 T
(ests whether a r) 204.38 527.95 T
(ecursive lock has been claimed by the cur-) 280.91 527.95 T
(r) 198.65 513.95 T
(ent thr) 202.79 513.95 T
(ead.) 234.94 513.95 T
3 13 Q
(1.6.6  Simple loc) 117.65 480.62 T
(ks) 200.42 480.62 T
3 14 Q
(<simple-loc) 117.65 432.95 T
(k>) 180.93 432.95 T
0 13 Q
(Instantiable primary class) 359.39 433.62 T
5 12 Q
(Summar) 126.65 408.29 T
(y) 164.12 408.29 T
2 11 Q
(A simple and ef) 198.65 408.29 T
(\336cient lock.) 275.47 408.29 T
5 12 Q
(Libr) 126.65 380.29 T
(ar) 142.97 380.29 T
(y) 152.02 380.29 T
4 9 Q
(threads) 198.65 380.29 T
5 12 Q
(Module) 126.65 353.29 T
4 9 Q
(threads) 198.65 353.29 T
5 12 Q
(Superclasses) 126.65 326.29 T
4 9 Q
(<exclusive-lock>) 198.65 326.29 T
5 12 Q
(Descr) 126.65 299.29 T
(iption) 152.48 299.29 T
2 11 Q
-0 (The) 198.65 299.29 P
4 9.5 Q
-0 (<simple-lock>) 219.81 299.29 P
2 11 Q
-0 ( class r) 293.91 299.29 P
-0 (epr) 326.47 299.29 P
-0 (esents the most simple and ef) 342.49 299.29 P
-0 (\336-) 485.33 299.29 P
(cient mutual exclusion synchr) 198.65 285.29 T
(onization primitive. It is an) 344.06 285.29 T
(err) 198.65 271.29 T
(or to lock a) 212.41 271.29 T
4 9.5 Q
(<simple-lock>) 269.06 271.29 T
2 11 Q
( r) 343.16 271.29 T
(ecursively . An attempt to do) 350.06 271.29 T
-0.26 (so might r) 198.65 257.29 P
-0.26 (esult in an err) 247.47 257.29 P
-0.26 (or being signalled, or deadlock occur-) 313.56 257.29 P
(ring.) 198.65 243.29 T
3 14 Q
(wait-f) 117.65 195.29 T
(or) 147.41 195.29 T
0 13 Q
(Sealed method) 420.9 195.95 T
5 12 Q
(Summar) 126.65 170.62 T
(y) 164.12 170.62 T
2 11 Q
(Claims a simple lock.) 198.65 170.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 24
%%Page: "25" 25
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(DRAFT) 99.65 124.95 T
1 F
(25) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
5 12 Q
0 X
(Libr) 108.65 664.95 T
(ar) 124.97 664.95 T
(y) 134.02 664.95 T
4 9 Q
(threads) 180.65 664.95 T
5 12 Q
(Module) 108.65 637.95 T
4 9 Q
(threads) 180.65 637.95 T
5 12 Q
(Signature) 108.65 610.95 T
4 9 Q
(wait-for) 180.65 610.95 T
7 F
(object) 229.25 610.95 T
4 F
( #key) 253.57 610.95 T
7 F
(timeout) 285.98 610.95 T
4 F
( =>) 317.48 610.95 T
7 F
(success) 339.08 610.95 T
5 12 Q
(Arguments) 108.65 583.95 T
0 11 Q
(object) 180.65 583.95 T
2 F
(An instance of) 261.65 583.95 T
4 9.5 Q
(<simple-lock>) 334.43 583.95 T
2 11 Q
(.) 408.54 583.95 T
0 F
(timeout) 180.65 563.95 T
2 F
(T) 261.65 563.95 T
(ime-out interval. If the value is) 267.79 563.95 T
4 9.5 Q
(#f) 420.14 563.95 T
2 11 Q
(\050the) 437.24 563.95 T
-0.26 (default\051, the time-out interval never elapses.) 261.65 549.95 P
(Otherwise the value should be a) 261.65 535.95 T
4 9.5 Q
(<real>) 421.26 535.95 T
2 11 Q
(,) 455.46 535.95 T
(corr) 261.65 521.95 T
(esponding to the desir) 281.03 521.95 T
(ed interval in sec-) 389.52 521.95 T
(onds.) 261.65 507.95 T
5 12 Q
(V) 108.65 480.29 T
(alues) 114.54 480.29 T
0 11 Q
(success) 180.65 480.29 T
2 F
(An instance of) 261.65 480.29 T
4 9.5 Q
(<boolean>) 334.43 480.29 T
2 11 Q
(.) 385.73 480.29 T
5 12 Q
(Descr) 108.65 452.29 T
(iption) 134.48 452.29 T
2 11 Q
(Claims a simple lock, blocking if it is owned by another) 180.65 452.29 T
(thr) 180.65 438.29 T
(ead.) 194.78 438.29 T
5 12 Q
(See also) 108.65 410.62 T
4 9.5 Q
(wait-for) 180.65 410.62 T
2 11 Q
(,  page 13.) 225.43 410.62 T
3 14 Q
(release) 99.65 362.29 T
0 13 Q
(Sealed method) 402.9 362.95 T
5 12 Q
(Summar) 108.65 337.62 T
(y) 146.12 337.62 T
2 11 Q
(Releases a simple lock.) 180.65 337.62 T
5 12 Q
(Libr) 108.65 309.62 T
(ar) 124.97 309.62 T
(y) 134.02 309.62 T
4 9 Q
(threads) 180.65 309.62 T
5 12 Q
(Module) 108.65 282.62 T
4 9 Q
(threads) 180.65 282.62 T
5 12 Q
(Signature) 108.65 255.62 T
4 9 Q
(release) 180.65 255.62 T
7 F
(object) 223.85 255.62 T
4 F
( => \050\051) 248.18 255.62 T
5 12 Q
(Arguments) 108.65 228.62 T
0 11 Q
(object) 180.65 228.62 T
2 F
(An instance of) 261.65 228.62 T
4 9.5 Q
(<simple-lock>) 334.43 228.62 T
2 11 Q
(.) 408.54 228.62 T
5 12 Q
(V) 108.65 200.62 T
(alues) 114.54 200.62 T
2 11 Q
(None.) 180.65 200.62 T
5 12 Q
(Descr) 108.65 172.62 T
(iption) 134.48 172.62 T
2 11 Q
(Releases a simple lock.) 180.65 172.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "25" 25
%%Page: "26" 26
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Proposal for a Dylan Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(26) 63.65 124.95 T
0 F
(DRAFT) 465.64 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
5 12 Q
0 X
(See also) 126.65 664.95 T
4 9.5 Q
(release) 198.65 664.95 T
2 11 Q
(,  page 14.) 238.55 664.95 T
3 14 Q
(o) 117.65 616.62 T
(wned?) 124.51 616.62 T
0 13 Q
(Sealed method) 420.9 617.29 T
5 12 Q
(Summar) 126.65 591.95 T
(y) 164.12 591.95 T
2 11 Q
(T) 198.65 591.95 T
(ests whether a simple lock has been claimed by the curr) 204.38 591.95 T
(ent) 474.42 591.95 T
(thr) 198.65 577.95 T
(ead.) 212.78 577.95 T
5 12 Q
(Libr) 126.65 550.29 T
(ar) 142.97 550.29 T
(y) 152.02 550.29 T
4 9 Q
(threads) 198.65 550.29 T
5 12 Q
(Module) 126.65 523.29 T
4 9 Q
(threads) 198.65 523.29 T
5 12 Q
(Signature) 126.65 496.29 T
4 9 Q
(owned?) 198.65 496.29 T
7 F
(object) 236.45 496.29 T
4 F
( =>) 260.77 496.29 T
7 F
(owned?) 282.38 496.29 T
5 12 Q
(Arguments) 126.65 469.29 T
0 11 Q
(object) 198.65 469.29 T
2 F
(An instance of) 279.65 469.29 T
4 9.5 Q
(<simple-lock>) 352.43 469.29 T
2 11 Q
(.) 426.54 469.29 T
5 12 Q
(V) 126.65 441.29 T
(alues) 132.54 441.29 T
0 11 Q
(owned?) 198.65 441.29 T
2 F
(An instance of) 279.65 441.29 T
4 9.5 Q
(<boolean>) 352.43 441.29 T
2 11 Q
(.) 403.73 441.29 T
5 12 Q
(Descr) 126.65 413.29 T
(iption) 152.48 413.29 T
2 11 Q
(T) 198.65 413.29 T
(ests whether a simple lock has been claimed by the curr) 204.38 413.29 T
(ent) 474.42 413.29 T
(thr) 198.65 399.29 T
(ead.) 212.78 399.29 T
3 13 Q
(1.6.7  Noti\336cations) 117.65 365.95 T
3 14 Q
(<noti\336cation>) 117.65 318.29 T
0 13 Q
(Instantiable sealed class) 370.95 318.95 T
5 12 Q
(Summar) 126.65 293.62 T
(y) 164.12 293.62 T
2 11 Q
(The class of objects that can be used to notify thr) 198.65 293.62 T
(eads of a) 433.41 293.62 T
(change of state elsewher) 198.65 279.62 T
(e in the pr) 317.14 279.62 T
(ogram.) 366.28 279.62 T
5 12 Q
(Libr) 126.65 251.95 T
(ar) 142.97 251.95 T
(y) 152.02 251.95 T
4 9 Q
(threads) 198.65 251.95 T
5 12 Q
(Module) 126.65 224.95 T
4 9 Q
(threads) 198.65 224.95 T
5 12 Q
(Superclasses) 126.65 197.95 T
4 9 Q
(<synchronization>) 198.65 197.95 T
5 12 Q
(Init-k) 126.65 170.95 T
(e) 147.79 170.95 T
(yw) 153.08 170.95 T
(ords) 165.02 170.95 T
0 11 Q
(lock) 198.65 170.95 T
2 F
(Requir) 279.65 170.95 T
(ed. An instance of) 312.41 170.95 T
4 9.5 Q
(<simple-lock>) 402.68 170.95 T
2 11 Q
(.) 476.78 170.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "26" 26
%%Page: "27" 27
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(DRAFT) 99.65 124.95 T
1 F
(27) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
5 12 Q
0 X
(Descr) 108.65 664.95 T
(iption) 134.48 664.95 T
2 11 Q
(The class of objects that can be used to notify thr) 180.65 664.95 T
(eads of a) 415.41 664.95 T
(change of state elsewher) 180.65 650.95 T
(e in the pr) 299.14 650.95 T
(ogram. Noti\336cations ar) 348.28 650.95 T
(e) 460.69 650.95 T
(used in association with locks, and ar) 180.65 636.95 T
(e sometimes called) 361.91 636.95 T
0 F
(condition variables) 180.65 622.95 T
2 F
(. They may be used to support the sharing) 264.47 622.95 T
(of data between thr) 180.65 608.95 T
(eads using) 275.06 608.95 T
0 F
(monitors) 329.73 608.95 T
2 F
(. Each) 369.45 608.95 T
4 9.5 Q
(<notification>) 180.65 594.95 T
2 11 Q
( is permanently associated with a) 260.45 594.95 T
4 9.5 Q
(<simple-) 425.08 594.95 T
(lock>) 180.65 580.95 T
2 11 Q
(, although the same lock may be associated with many) 209.15 580.95 T
(noti\336cations.) 180.65 566.95 T
(The r) 180.65 546.95 T
(equir) 205.96 546.95 T
(ed) 231.37 546.95 T
0 F
(lock) 246.11 546.95 T
2 F
( is associated with the noti\336cation, and it is) 263.41 546.95 T
-0.32 (only possible to wait for) 180.65 532.95 P
-0.32 (, or r) 296.04 532.95 P
-0.32 (elease, the noti\336cation if the lock) 318.14 532.95 P
(is owned.) 180.65 518.95 T
(Thr) 180.65 498.95 T
(eads wait for the change of state to be noti\336ed by calling) 197.94 498.95 T
4 9.5 Q
-0.03 (wait-for) 180.65 484.95 P
2 11 Q
-0.01 (. Thr) 225.43 484.95 P
-0.01 (eads notify other thr) 248.21 484.95 P
-0.01 (eads of the change of state) 347.3 484.95 P
(by calling) 180.65 470.95 T
4 9.5 Q
(release) 230.85 470.95 T
2 11 Q
(.) 270.75 470.95 T
5 12 Q
(Oper) 108.65 443.29 T
(ations) 130.44 443.29 T
2 11 Q
(The class) 180.65 443.29 T
4 9.5 Q
(<notification>) 227.48 443.29 T
2 11 Q
(provides the following opera-) 312.98 443.29 T
(tions:) 180.65 429.29 T
4 9.5 Q
(associated-lock) 180.65 406.29 T
2 11 Q
(Returns the lock associated with the noti\336-) 261.65 388.79 T
(cation object.) 261.65 374.79 T
4 9.5 Q
(wait-for) 180.65 354.79 T
2 11 Q
(W) 261.65 354.79 T
(ait for the noti\336cation of the change in) 271.64 354.79 T
(state. The associated lock must be owned,) 261.65 340.79 T
(and is atomically r) 261.65 326.79 T
(eleased befor) 351.44 326.79 T
(e synchr) 415.25 326.79 T
(oni-) 455.89 326.79 T
(zation, and r) 261.65 312.79 T
(eclaimed after) 322.86 312.79 T
(.) 390.92 312.79 T
4 9.5 Q
(release) 180.65 292.79 T
2 11 Q
-0.41 (Notify the change of state to a single waiting) 261.65 292.79 P
(thr) 261.65 278.79 T
(ead. This has no ef) 275.78 278.79 T
(fect on the associated) 365.74 278.79 T
(lock, which must be owned.) 261.65 264.79 T
4 9.5 Q
(release-all) 180.65 244.79 T
2 11 Q
(Notify the change of state to all waiting) 261.65 244.79 T
(thr) 261.65 230.79 T
(eads. This has no ef) 275.78 230.79 T
(fect on the associated) 370.4 230.79 T
(lock, which must be owned.) 261.65 216.79 T
5 12 Q
(Example) 108.65 189.12 T
2 11 Q
(This example shows how to use a noti\336cation and an associ-) 180.65 189.12 T
(ated lock to implement a queue. The variable) 180.65 175.12 T
4 9.5 Q
(*queue*) 402.43 175.12 T
2 11 Q
( is the) 442.33 175.12 T
(actual queue object \050a) 180.65 161.12 T
4 9.5 Q
(<deque>) 288.48 161.12 T
2 11 Q
(\051. Queue access is performed) 328.38 161.12 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "27" 27
%%Page: "28" 28
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Proposal for a Dylan Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(28) 63.65 124.95 T
0 F
(DRAFT) 465.64 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
(by interlocking pushes and pops on the) 198.65 665.62 T
4 9.5 Q
(<deque>) 393.25 665.62 T
2 11 Q
(. The) 433.15 665.62 T
4 9.5 Q
(*queue*) 198.65 651.62 T
2 11 Q
( variable can be a constant, since it is the) 238.55 651.62 T
4 9.5 Q
(<deque>) 437.11 651.62 T
2 11 Q
(which is mutated and not the value of) 198.65 637.62 T
4 9.5 Q
(*queue*) 385.95 637.62 T
2 11 Q
(.) 425.85 637.62 T
4 9 Q
(define constant *queue* = make\050<deque>\051;) 198.65 616.95 T
2 11 Q
(The variable) 198.65 596.62 T
4 9.5 Q
(*lock*) 261.88 596.62 T
2 11 Q
( is used to isolate access to the queue) 296.08 596.62 T
4 9 Q
(define constant *lock* = make\050<lock>\051;) 198.65 575.95 T
2 11 Q
(The variable) 198.65 555.62 T
4 9.5 Q
(*something-queued*) 261.88 555.62 T
2 11 Q
( is a noti\336cation which is) 364.48 555.62 T
(used to notify other thr) 198.65 541.62 T
(eads that an object is being put onto) 311.24 541.62 T
(an empty queue.) 198.65 527.62 T
4 9 Q
(define constant *something-queued* =) 198.65 506.95 T
(make\050<notification>, lock: *lock*\051;) 209.45 495.95 T
2 11 Q
(The function) 198.65 475.62 T
4 9.5 Q
(put-on-queue) 263.34 475.62 T
2 11 Q
( pushes an object onto the queue.) 331.74 475.62 T
(If the queue was initially empty) 198.65 461.62 T
(, then all thr) 352.01 461.62 T
(eads which ar) 410.71 461.62 T
(e) 478.07 461.62 T
(waiting for the queue to \336ll ar) 198.65 447.62 T
(e noti\336ed that ther) 343.86 447.62 T
(e is a new) 433.7 447.62 T
(entry) 198.65 433.62 T
(.) 223.15 433.62 T
4 9 Q
(define method put-on-queue \050object\051 => \050\051) 198.65 412.95 T
(with-lock \050*lock*\051) 209.45 401.95 T
(if \050*queue*.empty?\051) 220.25 390.95 T
(release-all\050*something-queued*\051) 231.05 379.95 T
(end;) 220.25 368.95 T
(push\050*queue*, object\051) 220.25 357.95 T
(end with-lock) 209.45 346.95 T
(end method;) 198.65 335.95 T
2 11 Q
(The) 198.65 315.62 T
4 9.5 Q
(get-from-queue) 219.81 315.62 T
2 11 Q
( function r) 299.61 315.62 T
(eturns an object fr) 350.04 315.62 T
(om the) 437.3 315.62 T
(queue. If no object is immediately available, then it blocks) 198.65 301.62 T
(until it r) 198.65 287.62 T
(eceives a noti\336cation that the queue is no longer) 238.1 287.62 T
(empty) 198.65 273.62 T
(. After r) 228.72 273.62 T
(eceiving the noti\336cation it tests again to see if) 266.54 273.62 T
(an object is pr) 198.65 259.62 T
(esent, in case it was popped by another thr) 265.83 259.62 T
(ead.) 473.48 259.62 T
4 9 Q
(define method get-from-queue \050\051 => \050object\051) 198.65 238.95 T
(with-lock \050*lock*\051) 209.45 227.95 T
(while \050*queue*.empty?\051) 220.25 216.95 T
(wait-for\050*something-queued*\051) 231.05 205.95 T
(end;) 220.25 194.95 T
(pop\050*queue*\051) 220.25 183.95 T
(end with-lock) 209.45 172.95 T
(end method;) 198.65 161.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "28" 28
%%Page: "29" 29
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(DRAFT) 99.65 124.95 T
1 F
(29) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
3 14 Q
0 X
(associated-loc) 99.65 663.62 T
(k) 179.2 663.62 T
0 13 Q
(Function) 429.73 664.29 T
5 12 Q
(Summar) 108.65 638.95 T
(y) 146.12 638.95 T
2 11 Q
(Returns the lock associated with the noti\336cation object sup-) 180.65 638.95 T
(plied.) 180.65 624.95 T
5 12 Q
(Signature) 108.65 597.29 T
4 9 Q
(associated-lock) 180.65 597.29 T
7 F
(noti\336cation) 267.05 597.29 T
4 F
( =>) 314.56 597.29 T
7 F
(lock) 336.16 597.29 T
5 12 Q
(Libr) 108.65 570.29 T
(ar) 124.97 570.29 T
(y) 134.02 570.29 T
4 9 Q
(threads) 180.65 570.29 T
5 12 Q
(Module) 108.65 543.29 T
4 9 Q
(threads) 180.65 543.29 T
5 12 Q
(Arguments) 108.65 516.29 T
0 11 Q
(noti\336cation) 180.65 516.29 T
2 F
(An instance of) 261.65 516.29 T
4 9.5 Q
(<notification>) 334.43 516.29 T
2 11 Q
(.) 414.23 516.29 T
5 12 Q
(V) 108.65 488.29 T
(alues) 114.54 488.29 T
0 11 Q
(lock) 180.65 488.29 T
2 F
(An instance of) 261.65 488.29 T
4 9.5 Q
(<simple-lock>) 334.43 488.29 T
2 11 Q
(.) 408.54 488.29 T
5 12 Q
(Descr) 108.65 460.29 T
(iption) 134.48 460.29 T
2 11 Q
(Returns the lock associated with the noti\336cation object) 180.65 460.29 T
0 F
(noti\336cation) 180.65 446.29 T
2 F
(.) 231.26 446.29 T
3 14 Q
(wait-f) 99.65 398.29 T
(or) 129.41 398.29 T
0 13 Q
(Sealed method) 402.9 398.95 T
5 12 Q
(Summar) 108.65 373.62 T
(y) 146.12 373.62 T
2 11 Q
(W) 180.65 373.62 T
(ait for another thr) 190.64 373.62 T
(ead to r) 276.83 373.62 T
(elease a noti\336cation.) 313.56 373.62 T
5 12 Q
(Libr) 108.65 345.62 T
(ar) 124.97 345.62 T
(y) 134.02 345.62 T
4 9 Q
(threads) 180.65 345.62 T
5 12 Q
(Module) 108.65 318.62 T
4 9 Q
(threads) 180.65 318.62 T
5 12 Q
(Signature) 108.65 291.62 T
4 9 Q
(wait-for) 180.65 291.62 T
7 F
(noti\336cation) 229.25 291.62 T
4 F
( #key) 276.76 291.62 T
7 F
(timeout) 309.16 291.62 T
4 F
( =>) 340.66 291.62 T
7 F
(success) 362.26 291.62 T
5 12 Q
(Arguments) 108.65 264.62 T
0 11 Q
(noti\336cation) 180.65 264.62 T
2 F
(An instance of) 261.65 264.62 T
4 9.5 Q
(<notification>) 334.43 264.62 T
2 11 Q
(.) 414.23 264.62 T
0 F
(timeout) 180.65 244.62 T
2 F
(T) 261.65 244.62 T
(ime-out interval. If the value is) 267.79 244.62 T
4 9.5 Q
(#f) 420.14 244.62 T
2 11 Q
(\050the) 437.24 244.62 T
-0.26 (default\051, the time-out interval never elapses.) 261.65 230.62 P
(Otherwise the value should be a) 261.65 216.62 T
4 9.5 Q
(<real>) 421.26 216.62 T
2 11 Q
(,) 455.46 216.62 T
(corr) 261.65 202.62 T
(esponding to the desir) 281.03 202.62 T
(ed interval in sec-) 389.52 202.62 T
(onds.) 261.65 188.62 T
5 12 Q
(V) 108.65 160.95 T
(alues) 114.54 160.95 T
0 11 Q
(success) 180.65 160.95 T
2 F
(An instance of) 261.65 160.95 T
4 9.5 Q
(<boolean>) 334.43 160.95 T
2 11 Q
(.) 385.73 160.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "29" 29
%%Page: "30" 30
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Proposal for a Dylan Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(30) 63.65 124.95 T
0 F
(DRAFT) 465.64 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
5 12 Q
0 X
(Descr) 126.65 664.95 T
(iption) 152.48 664.95 T
2 11 Q
-0.07 (W) 198.65 664.95 P
-0.07 (ait for another thr) 208.64 664.95 P
-0.07 (ead to r) 294.62 664.95 P
-0.07 (elease) 331.2 664.95 P
0 F
-0.07 (noti\336cation) 363.05 664.95 P
2 F
-0.07 (. The lock associ-) 413.66 664.95 P
(ated with the noti\336cation must be owned. Atomically) 198.65 650.95 T
(, the) 457.04 650.95 T
(lock is r) 198.65 636.95 T
(eleased and the curr) 236.37 636.95 T
(ent thr) 334.4 636.95 T
(ead starts blocking, wait-) 366.54 636.95 T
(ing for another thr) 198.65 622.95 T
(ead to r) 288.28 622.95 T
(elease the noti\336cation. The curr) 325.01 622.95 T
(ent) 477.04 622.95 T
(thr) 198.65 608.95 T
(ead r) 212.78 608.95 T
(eclaims the lock once it has r) 237.17 608.95 T
(eceived the noti\336cation.) 375.63 608.95 T
(Note that the state should be tested again once) 198.65 588.95 T
4 9.5 Q
(wait-for) 427.69 588.95 T
2 11 Q
( has) 473.29 588.95 T
(r) 198.65 574.95 T
(eturned, because ther) 202.79 574.95 T
(e may have been a delay between the) 306.98 574.95 T
4 9.5 Q
(release) 198.65 560.95 T
2 11 Q
( of the noti\336cation and the claiming of the lock, and) 238.55 560.95 T
(the state may have been changed during that time. If a time-) 198.65 546.95 T
-0.2 (out is supplied, then this is used for waiting for the r) 198.65 532.95 P
-0.2 (elease of) 451.71 532.95 P
-0.09 (the noti\336cation only) 198.65 518.95 P
-0.09 (. The) 295.17 518.95 P
4 9.5 Q
-0.18 (wait-for) 321.66 518.95 P
2 11 Q
-0.09 ( function always waits for) 367.26 518.95 P
(the lock with no timeout, and it is guaranteed that the lock) 198.65 504.95 T
-0.05 (will be owned on r) 198.65 490.95 P
-0.05 (eturn. The) 289.69 490.95 P
4 9.5 Q
-0.11 (wait-for) 342.48 490.95 P
2 11 Q
-0.05 ( function r) 388.08 490.95 P
-0.05 (eturns) 438.4 490.95 P
4 9.5 Q
-0.11 (#f) 471.99 490.95 P
2 11 Q
-0.05 ( if) 483.39 490.95 P
(the noti\336cation wait times out.) 198.65 476.95 T
5 12 Q
(Exceptions) 126.65 449.29 T
2 11 Q
(Implementations of this) 198.65 449.29 T
4 9.5 Q
(wait-for) 317.25 449.29 T
2 11 Q
( method ar) 362.85 449.29 T
(e permitted to) 415.69 449.29 T
(signal a condition of the following class, which is a subclass) 198.65 435.29 T
(of) 198.65 421.29 T
4 9.5 Q
(<error>) 211.07 421.29 T
2 11 Q
(:) 250.97 421.29 T
4 9.5 Q
(<not-owned-error>) 198.65 398.29 T
2 11 Q
(This may be signalled when an attempt is) 279.65 380.79 T
(made to wait for a noti\336cation when the) 279.65 366.79 T
(associated lock is not owned by the curr) 279.65 352.79 T
(ent) 474 352.79 T
(thr) 279.65 338.79 T
(ead.) 293.78 338.79 T
3 14 Q
(release) 117.65 290.79 T
0 13 Q
(Sealed method) 420.9 291.45 T
5 12 Q
(Summar) 126.65 266.12 T
(y) 164.12 266.12 T
2 11 Q
(Releases a noti\336cation to one of the thr) 198.65 266.12 T
(eads that ar) 386.34 266.12 T
(e blocked) 442.72 266.12 T
(and waiting for it.) 198.65 252.12 T
5 12 Q
(Libr) 126.65 224.45 T
(ar) 142.97 224.45 T
(y) 152.02 224.45 T
4 9 Q
(threads) 198.65 224.45 T
5 12 Q
(Module) 126.65 197.45 T
4 9 Q
(threads) 198.65 197.45 T
5 12 Q
(Signature) 126.65 170.45 T
4 9 Q
(release) 198.65 170.45 T
7 F
(noti\336cation) 241.85 170.45 T
4 F
( => \050\051) 289.36 170.45 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "30" 30
%%Page: "31" 31
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.6) 413.62 702.62 T
(Synchronization protocol) 434.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(DRAFT) 99.65 124.95 T
1 F
(31) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
5 12 Q
0 X
(Arguments) 108.65 664.95 T
0 11 Q
(noti\336cation) 180.65 664.95 T
2 F
(An instance of) 261.65 664.95 T
4 9.5 Q
(<notification>) 334.43 664.95 T
2 11 Q
(.) 414.23 664.95 T
5 12 Q
(V) 108.65 636.95 T
(alues) 114.54 636.95 T
2 11 Q
(None.) 180.65 636.95 T
5 12 Q
(Exceptions) 108.65 608.95 T
2 11 Q
(Implementations of this) 180.65 608.95 T
4 9.5 Q
(release) 299.25 608.95 T
2 11 Q
(method ar) 344.85 608.95 T
(e permitted to) 394.94 608.95 T
(signal a condition of the following class, which is a subclass) 180.65 594.95 T
(of) 180.65 580.95 T
4 9.5 Q
(<error>) 193.07 580.95 T
2 11 Q
(:) 232.97 580.95 T
4 9.5 Q
(<not-owned-error>) 180.65 557.95 T
2 11 Q
(This may be signalled when an attempt is) 261.65 540.45 T
-0.19 (made to r) 261.65 526.45 P
-0.19 (elease a noti\336cation when the asso-) 307.72 526.45 P
(ciated lock is not owned by the curr) 261.65 512.45 T
(ent) 435.16 512.45 T
(thr) 261.65 498.45 T
(ead.) 275.78 498.45 T
5 12 Q
(Descr) 108.65 470.79 T
(iption) 134.48 470.79 T
2 11 Q
-0.2 (Releases) 180.65 470.79 P
0 F
-0.2 (noti\336cation) 224.38 470.79 P
2 F
-0.2 (, announcing the change of state to one of) 274.99 470.79 P
(the thr) 180.65 456.79 T
(eads which ar) 212.79 456.79 T
(e blocked and waiting for it. The choice) 280.15 456.79 T
(of which thr) 180.65 442.79 T
(ead r) 240.01 442.79 T
(eceives the noti\336cation is unde\336ned. The) 264.4 442.79 T
-0.33 (r) 180.65 428.79 P
-0.33 (eceiving thr) 184.79 428.79 P
-0.33 (ead may not be unblocked immediately) 241.91 428.79 P
-0.33 (, because) 431.76 428.79 P
(it must \336rst claim ownership of the noti\336cation\325s associated) 180.65 414.79 T
(lock.) 180.65 400.79 T
3 14 Q
(release-all) 99.65 352.79 T
0 13 Q
(Function) 429.73 353.45 T
5 12 Q
(Summar) 108.65 328.12 T
(y) 146.12 328.12 T
2 11 Q
(Release a noti\336cation to all the thr) 180.65 328.12 T
(eads that ar) 345.48 328.12 T
(e blocked and) 401.86 328.12 T
(waiting for it.) 180.65 314.12 T
5 12 Q
(Signature) 108.65 286.45 T
4 9 Q
(release-all) 180.65 286.45 T
7 F
(noti\336cation) 245.45 286.45 T
4 F
( <notification>, #key\051 => \050\051) 292.96 286.45 T
5 12 Q
(Libr) 108.65 259.45 T
(ar) 124.97 259.45 T
(y) 134.02 259.45 T
4 9 Q
(threads) 180.65 259.45 T
5 12 Q
(Module) 108.65 232.45 T
4 9 Q
(threads) 180.65 232.45 T
5 12 Q
(Arguments) 108.65 205.45 T
0 11 Q
(noti\336cation) 180.65 205.45 T
2 F
(An instance of) 261.65 205.45 T
4 9.5 Q
(<notification>) 334.43 205.45 T
2 11 Q
(.) 414.23 205.45 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "31" 31
%%Page: "32" 32
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Proposal for a Dylan Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(32) 63.65 124.95 T
0 F
(DRAFT) 465.64 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
5 12 Q
0 X
(Exceptions) 126.65 664.95 T
2 11 Q
(Implementations of the) 198.65 664.95 T
4 9.5 Q
(release-all) 314.65 664.95 T
2 11 Q
( function ar) 377.35 664.95 T
(e permitted) 433.28 664.95 T
(to signal a condition of the following class \050which is a sub-) 198.65 650.95 T
(class of) 198.65 636.95 T
4 9.5 Q
(<error>) 236.73 636.95 T
2 11 Q
(\051.) 276.63 636.95 T
4 9.5 Q
(<not-owned-error>) 198.65 613.95 T
2 11 Q
(This may be signalled when an attempt is) 279.65 596.45 T
-0.19 (made to r) 279.65 582.45 P
-0.19 (elease a noti\336cation when the asso-) 325.72 582.45 P
(ciated lock is not owned by the curr) 279.65 568.45 T
(ent) 453.16 568.45 T
(thr) 279.65 554.45 T
(ead.) 293.78 554.45 T
5 12 Q
(Descr) 126.65 526.79 T
(iption) 152.48 526.79 T
2 11 Q
(Releases) 198.65 526.79 T
0 F
(noti\336cation) 242.58 526.79 T
2 F
(, announcing the change of state to all) 293.19 526.79 T
(thr) 198.65 512.79 T
(eads which ar) 212.78 512.79 T
(e blocked and waiting for it. Those thr) 280.15 512.79 T
(eads) 465.52 512.79 T
(will then necessarily have to compete for the lock associated) 198.65 498.79 T
(with the noti\336cation.) 198.65 484.79 T
3 16 Q
(1.7  Timer) 117.65 449.45 T
(s) 178.74 449.45 T
3 14 Q
(sleep) 117.65 400.79 T
0 13 Q
(Function) 447.73 401.45 T
5 12 Q
(Summar) 126.65 376.12 T
(y) 164.12 376.12 T
2 11 Q
(Blocks the curr) 198.65 376.12 T
(ent thr) 271.01 376.12 T
(ead for a speci\336ed number of seconds.) 303.15 376.12 T
5 12 Q
(Libr) 126.65 348.12 T
(ar) 142.97 348.12 T
(y) 152.02 348.12 T
4 9 Q
(threads) 198.65 348.12 T
5 12 Q
(Module) 126.65 321.12 T
4 9 Q
(threads) 198.65 321.12 T
5 12 Q
(Signature) 126.65 294.12 T
4 9 Q
(sleep) 198.65 294.12 T
7 F
(interval) 231.05 294.12 T
4 F
( => \050\051) 263.05 294.12 T
5 12 Q
(Arguments) 126.65 267.12 T
0 11 Q
(interval) 198.65 267.12 T
2 F
(An instance of) 279.65 267.12 T
4 9.5 Q
(<real>) 352.43 267.12 T
2 11 Q
(.) 386.64 267.12 T
5 12 Q
(V) 126.65 239.12 T
(alues) 132.54 239.12 T
2 11 Q
(None.) 198.65 239.12 T
5 12 Q
(Descr) 126.65 211.12 T
(iption) 152.48 211.12 T
2 11 Q
-0.35 (Blocks the curr) 198.65 211.12 P
-0.35 (ent thr) 270.3 211.12 P
-0.35 (ead for the number of seconds speci\336ed) 302.1 211.12 P
(in) 198.65 197.12 T
0 F
(interval) 211 197.12 T
2 F
(.) 245.84 197.12 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "32" 32
%%Page: "33" 33
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.8) 471.58 702.62 T
(Atomicity) 492.95 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(DRAFT) 99.65 124.95 T
1 F
(33) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
3 16 Q
0 X
(1.8  Atomicity) 99.65 662.29 T
3 13 Q
(1.8.1  Atomic v) 99.65 628.29 T
(ariab) 174.11 628.29 T
(les) 199.5 628.29 T
3 14 Q
(atomic) 99.65 580.62 T
0 13 Q
(V) 331.88 581.29 T
(ariable de\336nition adjective) 340.3 581.29 T
5 12 Q
(Summar) 108.65 555.95 T
(y) 146.12 555.95 T
2 11 Q
-0.35 (An adjective to) 180.65 555.95 P
4 9.5 Q
-0.72 (define variable) 255.63 555.95 P
2 11 Q
-0.35 ( for de\336ning atomic module) 340.41 555.95 P
(variables.) 180.65 541.95 T
5 12 Q
(Libr) 108.65 514.29 T
(ar) 124.97 514.29 T
(y) 134.02 514.29 T
4 9 Q
(threads) 180.65 514.29 T
5 12 Q
(Module) 108.65 487.29 T
4 9 Q
(threads) 180.65 487.29 T
5 12 Q
(Syntax) 108.65 460.29 T
4 9 Q
(define atomic variable) 180.65 460.29 T
7 F
(bindings) 304.85 460.29 T
4 F
( =) 339.18 460.29 T
7 F
(init) 355.38 460.29 T
4 F
(;) 369.88 460.29 T
5 12 Q
(Descr) 108.65 433.29 T
(iption) 134.48 433.29 T
2 11 Q
(An adjective to) 180.65 433.29 T
4 9.5 Q
(define variable) 256.67 433.29 T
2 11 Q
(. The constr) 342.17 433.29 T
(uct) 398.63 433.29 T
4 9.5 Q
(define) 416.48 433.29 T
(atomic variable) 180.65 419.29 T
2 11 Q
( de\336nes) 266.15 419.29 T
0 F
(atomic) 306.63 419.29 T
2 F
( module variables in the cur-) 336.15 419.29 T
(r) 180.65 405.29 T
(ent module in a similar manner to) 184.79 405.29 T
4 9.5 Q
(define variable) 353 405.29 T
2 11 Q
(.) 438.5 405.29 T
(An) 180.65 385.29 T
0 F
(atomic) 198.36 385.29 T
2 F
( variable has the same semantics as a normal mod-) 227.88 385.29 T
(ule variable, and additionally pr) 180.65 371.29 T
(ovides the guarantee that) 337.55 371.29 T
(assignments to the variable will be atomic with r) 180.65 357.29 T
(espect to) 416.52 357.29 T
-0.29 (other thr) 180.65 343.29 P
-0.29 (eads. That is, after an assignment, but befor) 222.85 343.29 P
-0.29 (e explicit) 431.83 343.29 P
(synchr) 180.65 329.29 T
(onization, another thr) 213.26 329.29 T
(ead will either see the old value) 318.96 329.29 T
(or the new value of the variable. Ther) 180.65 315.29 T
(e is no possibility of an) 362.72 315.29 T
(unde\336ned half-way state.) 180.65 301.29 T
(For those implementations of the Thr) 180.65 281.29 T
(eads library which do) 361.33 281.29 T
(not guarantee atomicity for assignments to normal module) 180.65 267.29 T
(variables, atomic variables ar) 180.65 253.29 T
(e likely to be less ef) 322.14 253.29 T
(\336cient that) 415.74 253.29 T
(normal variables. For Thr) 180.65 239.29 T
(eads library implementations) 304.55 239.29 T
-0.14 (which pr) 180.65 225.29 P
-0.14 (ovide the atomicity guarantee, atomic variables and) 224.08 225.29 P
(normal variables ar) 180.65 211.29 T
(e completely equivalent, and ther) 274.94 211.29 T
(e is no) 437.28 211.29 T
(loss of ef) 180.65 197.29 T
(\336ciency for atomic variables.) 223.09 197.29 T
5 12 Q
(Example) 108.65 169.62 T
2 11 Q
(The following example de\336nes an atomic variable. This) 180.65 169.62 T
(might be used in a situation wher) 180.65 155.62 T
(e multiple thr) 343.68 155.62 T
(eads ar) 410 155.62 T
(e) 444.55 155.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "33" 33
%%Page: "34" 34
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Proposal for a Dylan Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(34) 63.65 124.95 T
0 F
(DRAFT) 465.64 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
(working in parallel to \336nd a solution to a pr) 198.65 665.62 T
(oblem. Each) 411.61 665.62 T
-0.04 (thr) 198.65 651.62 P
-0.04 (ead may test the variable, without locking, to see whether) 212.78 651.62 P
(a solution has alr) 198.65 637.62 T
(eady been found. If a thr) 281.51 637.62 T
(ead \336nds a solu-) 401.07 637.62 T
(tion, it may assign to the variable, again without locking, to) 198.65 623.62 T
(indicate its success.) 198.65 609.62 T
4 9 Q
(define atomic variable *found-solution* = #f;) 198.65 588.95 T
3 13 Q
(1.8.2  Atomic slots) 117.65 557.29 T
3 14 Q
(atomic) 117.65 509.62 T
0 13 Q
(Slot de\336nition adjective) 372.27 510.29 T
5 12 Q
(Summar) 126.65 484.95 T
(y) 164.12 484.95 T
2 11 Q
(An adjective to) 198.65 484.95 T
4 9.5 Q
(slot) 274.67 484.95 T
2 11 Q
( for de\336ning) 297.47 484.95 T
0 F
(atomic slots) 360.5 484.95 T
2 F
( in classes.) 412.94 484.95 T
5 12 Q
(Libr) 126.65 456.95 T
(ar) 142.97 456.95 T
(y) 152.02 456.95 T
4 9 Q
(threads) 198.65 456.95 T
5 12 Q
(Module) 126.65 429.95 T
4 9 Q
(threads) 198.65 429.95 T
5 12 Q
(Syntax) 126.65 402.95 T
2 11 Q
-0.36 (The) 198.65 402.95 P
4 9.5 Q
-0.74 (atomic) 219.45 402.95 P
2 11 Q
-0.36 ( adjective can be used in any slot speci\336cation in a) 253.65 402.95 P
4 9.5 Q
(define class) 198.65 388.95 T
2 11 Q
(.) 267.05 388.95 T
5 12 Q
(Descr) 126.65 361.29 T
(iption) 152.48 361.29 T
2 11 Q
(An adjective to) 198.65 361.29 T
4 9.5 Q
(slot) 274.67 361.29 T
2 11 Q
( for de\336ning) 297.47 361.29 T
0 F
(atomic slots) 360.5 361.29 T
2 F
( in classes.) 412.94 361.29 T
(A slot which is de\336ned to be) 198.65 341.29 T
4 9.5 Q
(atomic) 339.82 341.29 T
2 11 Q
( additionally pr) 374.02 341.29 T
(ovides) 449.64 341.29 T
-0.37 (the guarantee that assignments to the slot will be atomic with) 198.65 327.29 P
(r) 198.65 313.29 T
(espect to other thr) 202.79 313.29 T
(eads. That is, after an assignment, but) 290.66 313.29 T
-0.43 (befor) 198.65 299.29 P
-0.43 (e explicit synchr) 223.82 299.29 P
-0.43 (onization, another thr) 301.97 299.29 P
-0.43 (ead will either see) 406.82 299.29 P
(the old value or the new value of the slot. Ther) 198.65 285.29 T
(e is no possi-) 425.12 285.29 T
(bility of an unde\336ned half-way state.) 198.65 271.29 T
(For those implementations of the Thr) 198.65 251.29 T
(eads library which do) 379.33 251.29 T
(not guarantee atomicity for assignments to normal slots,) 198.65 237.29 T
(atomic slots ar) 198.65 223.29 T
(e likely to be less ef) 268.81 223.29 T
(\336cient than normal slots.) 362.4 223.29 T
(For Thr) 198.65 209.29 T
(eads-library implementations which pr) 235.16 209.29 T
(ovide the ato-) 425.16 209.29 T
(micity guarantee, atomic slots and normal slots ar) 198.65 195.29 T
(e com-) 440.54 195.29 T
(pletely equivalent, and ther) 198.65 181.29 T
(e is no loss of ef) 332.36 181.29 T
(\336ciency for) 408.59 181.29 T
(atomic slots.) 198.65 167.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "34" 34
%%Page: "35" 35
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.9) 447.03 702.62 T
(Thread variables) 468.41 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(DRAFT) 99.65 124.95 T
1 F
(35) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
5 12 Q
0 X
(Example) 108.65 664.95 T
2 11 Q
(The following example de\336nes a class with a single atomic) 180.65 664.95 T
(slot, which might be used in a situation wher) 180.65 650.95 T
(e thr) 399.45 650.95 T
(ead) 421.6 650.95 T
0 F
(A) 441.84 650.95 T
2 F
(is) 452.54 650.95 T
-0.24 (working on a substantial task in parallel with thr) 180.65 636.95 P
-0.24 (ead) 415.83 636.95 P
0 F
-0.24 (B) 435.84 636.95 P
2 F
-0.24 ( which) 442.56 636.95 P
(is continually updating a status bar indicator) 180.65 622.95 T
(. Thr) 398.01 622.95 T
(ead) 420.8 622.95 T
0 F
(A) 441.04 622.95 T
2 F
( may) 448.98 622.95 T
(update the value of the slot, and thr) 180.65 608.95 T
(ead) 354.18 608.95 T
0 F
(B) 374.42 608.95 T
2 F
( may r) 381.14 608.95 T
(ead it, with-) 412.12 608.95 T
(out any explicit synchr) 180.65 594.95 T
(onization between the two thr) 291.39 594.95 T
(eads.) 437.4 594.95 T
4 9 Q
(define class <status> \050<object>\051) 180.65 574.29 T
(atomic slot percent-complete :: <integer> = 0;) 191.45 563.29 T
(end class) 180.65 552.29 T
3 16 Q
(1.9  Thread v) 99.65 518.62 T
(ariab) 179.63 518.62 T
(les) 210.88 518.62 T
3 14 Q
(thread) 99.65 469.95 T
0 13 Q
(V) 331.88 470.62 T
(ariable de\336nition adjective) 340.3 470.62 T
5 12 Q
(Summar) 108.65 445.29 T
(y) 146.12 445.29 T
2 11 Q
(An adjective to) 180.65 445.29 T
4 9.5 Q
(define variable) 256.67 445.29 T
2 11 Q
( for de\336ning thr) 342.17 445.29 T
(ead vari-) 419.33 445.29 T
(ables.) 180.65 431.29 T
5 12 Q
(Libr) 108.65 403.62 T
(ar) 124.97 403.62 T
(y) 134.02 403.62 T
4 9 Q
(threads) 180.65 403.62 T
5 12 Q
(Module) 108.65 376.62 T
4 9 Q
(threads) 180.65 376.62 T
5 12 Q
(Syntax) 108.65 349.62 T
4 9 Q
(define thread variable) 180.65 349.62 T
7 F
(bindings) 304.85 349.62 T
4 F
( =) 339.18 349.62 T
7 F
(init) 355.38 349.62 T
4 F
(;) 369.88 349.62 T
5 12 Q
(Descr) 108.65 322.62 T
(iption) 134.48 322.62 T
2 11 Q
(An adjective to) 180.65 322.62 T
4 9.5 Q
(define variable) 256.67 322.62 T
2 11 Q
(. The constr) 342.17 322.62 T
(uct) 398.63 322.62 T
4 9.5 Q
(define) 416.48 322.62 T
(thread variable) 180.65 308.62 T
2 11 Q
( de\336nes module variables in the curr) 266.15 308.62 T
(ent) 444.02 308.62 T
(module which have thr) 180.65 294.62 T
(ead-local bindings. The initialization) 294.02 294.62 T
(expr) 180.65 280.62 T
(ession is evaluated once, and is used to pr) 202.35 280.62 T
(ovide the ini-) 405.75 280.62 T
(tial values for the variables in each thr) 180.65 266.62 T
(ead. The value of a) 365.91 266.62 T
(thr) 180.65 252.62 T
(ead variable binding may be changed with the normal) 194.78 252.62 T
(assignment operator) 180.65 238.62 T
4 9.5 Q
(:=) 283.33 238.62 T
2 11 Q
(. This assignment is not visible in) 294.73 238.62 T
(other thr) 180.65 224.62 T
(eads.) 223.14 224.62 T
(Since the bindings of thr) 180.65 204.62 T
(ead variables ar) 299.03 204.62 T
(e invisible to other) 375.64 204.62 T
(thr) 180.65 190.62 T
(eads, it is meaningless to consider whether a thr) 194.78 190.62 T
(ead vari-) 427.91 190.62 T
(able may be assigned to atomically) 180.65 176.62 T
(. A variable which is) 348.95 176.62 T
(de\336ned with both of the adjectives) 180.65 162.62 T
4 9.5 Q
(thread) 351.43 162.62 T
2 11 Q
( and) 385.63 162.62 T
4 9.5 Q
(atomic) 409.76 162.62 T
2 11 Q
( is) 443.96 162.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "35" 35
%%Page: "36" 36
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Proposal for a Dylan Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(36) 63.65 124.95 T
0 F
(DRAFT) 465.64 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
2 11 Q
0 X
-0.31 (exactly equivalent to a variable which is de\336ned with just the) 198.65 665.62 P
4 9.5 Q
(thread) 198.65 651.62 T
2 11 Q
( adjective.) 232.85 651.62 T
5 12 Q
(Example) 126.65 623.95 T
4 9 Q
(define thread variable *standard-output*) 198.65 623.95 T
(= make\050<standard-output-stream>\051;) 209.45 612.95 T
3 16 Q
(1.10  Dynamic binding) 117.65 579.29 T
3 14 Q
(d) 117.65 530.62 T
(ynamic-bind) 124.51 530.62 T
0 13 Q
(Macr) 461.72 531.29 T
(o) 489.88 531.29 T
5 12 Q
(Summar) 126.65 505.95 T
(y) 164.12 505.95 T
2 11 Q
(Executes a body of code in a context in which variables ar) 198.65 505.95 T
(e) 478.38 505.95 T
(dynamically r) 198.65 491.95 T
(ebound.) 266.1 491.95 T
5 12 Q
(Libr) 126.65 464.29 T
(ar) 142.97 464.29 T
(y) 152.02 464.29 T
4 9 Q
(threads) 198.65 464.29 T
5 12 Q
(Module) 126.65 437.29 T
4 9 Q
(threads) 198.65 437.29 T
5 12 Q
(Macro call) 126.65 410.29 T
4 9 Q
(dynamic-bind \050) 198.65 410.29 T
7 F
(place1) 274.25 410.29 T
4 F
( =) 299.74 410.29 T
7 F
(init1) 315.95 410.29 T
4 F
(,) 334.94 410.29 T
7 F
(place2) 345.74 410.29 T
4 F
( =) 371.24 410.29 T
7 F
(init2) 387.44 410.29 T
4 F
(, ...\051) 406.44 410.29 T
7 F
(body) 444.24 410.29 T
4 F
( end;) 464.08 410.29 T
5 12 Q
(Descr) 126.65 383.29 T
(iption) 152.48 383.29 T
2 11 Q
(Executes) 198.65 383.29 T
0 F
(body) 244.1 383.29 T
2 F
( with the speci\336ed) 265.08 383.29 T
0 F
(places) 356.97 383.29 T
2 F
( r) 383.45 383.29 T
(ebound in the) 390.35 383.29 T
(dynamic envir) 198.65 369.29 T
(onment, each place being initialized to the) 269.17 369.29 T
(r) 198.65 355.29 T
(esults of evaluating the initialization expr) 202.79 355.29 T
(essions. In other) 404.5 355.29 T
-0.3 (wor) 198.65 341.29 P
-0.3 (ds, the places ar) 217.98 341.29 P
-0.3 (e initialized to new values on entry to the) 294.48 341.29 P
(body but r) 198.65 327.29 T
(estor) 249.52 327.29 T
(ed to their old values once the body has \336n-) 273.2 327.29 T
(ished executing, whether because it \336nishes normally) 198.65 313.29 T
(, or) 457.25 313.29 T
-0.4 (because of a non-local transfer of contr) 198.65 299.29 P
-0.4 (ol. T) 383.94 299.29 P
-0.4 (ypically) 403.99 299.29 P
-0.4 (, each) 441.6 299.29 P
0 F
-0.4 (place) 471.1 299.29 P
2 F
(is a thr) 198.65 285.29 T
(ead variable.) 231.65 285.29 T
-0 (If the) 198.65 265.29 P
0 F
-0 (place) 226.77 265.29 P
2 F
-0 ( is a) 248.97 265.29 P
0 F
-0 (name) 270.58 265.29 P
2 F
-0 (, it must be the name of a thr) 294.42 265.29 P
-0 (ead variable) 433.35 265.29 P
(in the module scope.) 198.65 251.29 T
5 12 Q
(Example) 126.65 223.62 T
2 11 Q
(The following example shows the dynamic binding of a sin-) 198.65 223.62 T
(gle variable.) 198.65 209.62 T
4 9 Q
(dynamic-bind \050*standard-output* = new-val\050\051\051) 198.65 188.95 T
(top-level-loop \050\051) 209.45 177.95 T
(end;) 198.65 166.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "36" 36
%%Page: "37" 37
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(1.10) 437.86 702.62 T
(Dynamic binding) 463.99 702.62 T
99.65 105.95 531.65 141.95 R
7 X
V
0 9 Q
0 X
(DRAFT) 99.65 124.95 T
1 F
(37) 522.65 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
7 X
V
2 11 Q
0 X
(This expands into code equivalent to the following:) 180.65 665.62 T
4 9 Q
(begin) 180.65 644.95 T
(let old-value = *standard-output*;) 191.45 633.95 T
(block \050\051) 191.45 622.95 T
(*standard-output* := new-val\050\051;) 202.25 611.95 T
(top-level-loop\050\051) 202.25 600.95 T
(cleanup) 191.45 589.95 T
(*standard-output* := old-value) 202.25 578.95 T
(end) 191.45 567.95 T
(end) 180.65 556.95 T
3 13 Q
(1.10.1  An e) 99.65 525.29 T
(xtended f) 158.17 525.29 T
(orm of d) 205.36 525.29 T
(ynamic-bind) 247.86 525.29 T
2 11 Q
(Some implementations of the Thr) 99.65 505.62 T
(eads library may pr) 261.95 505.62 T
(ovide an extended form) 357.23 505.62 T
-0.01 (of) 99.65 491.62 P
4 9.5 Q
-0.03 (dynamic-bind) 112.05 491.62 P
2 11 Q
-0.01 ( for binding places other than variables. The implementation) 180.45 491.62 P
(of this extended form r) 99.65 477.62 T
(equir) 210.96 477.62 T
(es the use of non-standar) 236.37 477.62 T
(d featur) 357.79 477.62 T
(es in the Dylan) 396.05 477.62 T
(macr) 99.65 463.62 T
(o system, and hence cannot be written as a portable macr) 123.89 463.62 T
(o. These non-) 401.21 463.62 T
(standar) 99.65 449.62 T
(d extensions ar) 136.17 449.62 T
(e subject to discussion amongst the Dylan language) 209.18 449.62 T
(designers, and may eventually become standar) 99.65 435.62 T
(d featur) 327.89 435.62 T
(es. Until such time as) 366.16 435.62 T
(standar) 99.65 421.62 T
(dization occurs, implementations ar) 136.17 421.62 T
(e not mandated to implement the) 310.67 421.62 T
(extended form of) 99.65 407.62 T
4 9.5 Q
(dynamic-bind) 186.21 407.62 T
2 11 Q
(, and portable code should not depend upon) 254.61 407.62 T
(this featur) 99.65 393.62 T
(e.) 149.05 393.62 T
(The extended form is described below) 99.65 373.62 T
(.) 284.2 373.62 T
3 14 Q
(d) 99.65 325.62 T
(ynamic-bind) 106.51 325.62 T
0 13 Q
(Macr) 443.72 326.29 T
(o) 471.88 326.29 T
5 12 Q
(Summar) 108.65 300.95 T
(y) 146.12 300.95 T
2 11 Q
(Executes a body of code in a context in which variables or) 180.65 300.95 T
(other places ar) 180.65 286.95 T
(e dynamically r) 251.53 286.95 T
(ebound.) 327 286.95 T
5 12 Q
(Libr) 108.65 259.29 T
(ar) 124.97 259.29 T
(y) 134.02 259.29 T
4 9 Q
(threads) 180.65 259.29 T
5 12 Q
(Module) 108.65 232.29 T
4 9 Q
(threads) 180.65 232.29 T
5 12 Q
(Syntax) 108.65 205.29 T
4 9 Q
(dynamic-bind \050) 180.65 205.29 T
7 F
(place1) 256.25 205.29 T
4 F
( =) 281.74 205.29 T
7 F
(init1) 297.95 205.29 T
4 F
(,) 316.94 205.29 T
7 F
(place2) 327.74 205.29 T
4 F
( =) 353.24 205.29 T
7 F
(init2) 369.44 205.29 T
4 F
(, ...\051 body end;) 388.44 205.29 T
2 11 Q
(\050This is the same as the simple form.\051) 180.65 184.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "37" 37
%%Page: "38" 38
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Proposal for a Dylan Threads Library) 63.65 702.62 T
63.65 105.95 495.65 141.95 R
7 X
V
1 9 Q
0 X
(38) 63.65 124.95 T
0 F
(DRAFT) 465.64 124.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 495.65 672.95 R
7 X
V
5 12 Q
0 X
(Descr) 126.65 664.95 T
(iption) 152.48 664.95 T
2 11 Q
-0.34 (If) 198.65 664.95 P
0 F
-0.34 (place) 208.43 664.95 P
2 F
-0.34 ( is not a name, then it may have the syntax of a call to a) 230.63 664.95 P
(function. This permits an) 198.65 650.95 T
0 F
(extended form) 323.48 650.95 T
2 F
( for) 386.12 650.95 T
4 9.5 Q
(dynamic-bind) 405.64 650.95 T
2 11 Q
(, by) 474.04 650.95 T
(analogy with the extended form for) 198.65 636.95 T
4 9.5 Q
(:=) 374.26 636.95 T
2 11 Q
(. In this case, if the) 385.66 636.95 T
(place appears syntactically as) 198.65 622.95 T
4 9.5 Q
(name\050) 344.62 622.95 T
0 11 Q
(ar) 373.12 622.95 T
(g1) 382.08 622.95 T
4 9.5 Q
(,) 393.08 622.95 T
2 11 Q
( ...) 398.78 622.95 T
0 F
(ar) 412.53 622.95 T
(gn) 421.5 622.95 T
4 9.5 Q
(\051) 433.11 622.95 T
2 11 Q
(, then the) 438.81 622.95 T
(macr) 198.65 608.95 T
(o expands into a call to the function) 222.89 608.95 T
4 9 Q
(name-dynamic-binder\050) 209.45 588.29 T
7 F
(init) 317.45 588.29 T
4 F
(,) 331.95 588.29 T
7 F
(body-method) 342.75 588.29 T
4 F
(,) 396.1 588.29 T
7 F
(ar) 406.9 588.29 T
(g1) 415.24 588.29 T
4 F
(, ...) 424.24 588.29 T
7 F
(ar) 456.64 588.29 T
(gn) 464.98 588.29 T
4 F
(\051) 474.49 588.29 T
2 11 Q
-0.31 (wher) 198.65 567.95 P
-0.31 (e) 223.64 567.95 P
0 F
-0.31 (init) 231.35 567.95 P
2 F
-0.31 ( is the initial value for the binding, and) 247.24 567.95 P
0 F
-0.31 (body-method) 436.19 567.95 P
2 F
(is function with no parameters whose body is the) 198.65 553.95 T
0 F
(body of) 441.18 553.95 T
2 F
(the) 475.6 553.95 T
4 9.5 Q
-0.06 (dynamic-bind) 198.65 539.95 P
2 11 Q
-0.03 (. The extended form also permits the other \322) 267.05 539.95 P
4 9.5 Q
-0.06 (.) 481.73 539.95 P
2 11 Q
-0.03 (\323) 487.43 539.95 P
(and \322) 198.65 525.95 T
4 9.5 Q
([]) 225.52 525.95 T
2 11 Q
(\323syntaxes for function calls.) 236.92 525.95 T
(Ther) 198.65 505.95 T
(e ar) 221.21 505.95 T
(e no featur) 238.88 505.95 T
(es in the curr) 290.85 505.95 T
(ent version of the Thr) 353.9 505.95 T
(eads) 458.48 505.95 T
(library which make use of the extended form of) 198.65 491.95 T
4 9.5 Q
(dynamic-) 432.65 491.95 T
(bind) 198.65 477.95 T
2 11 Q
(.) 221.45 477.95 T
5 12 Q
(Example) 126.65 450.29 T
2 11 Q
-0.21 (The following example shows the extended form of) 198.65 450.29 P
4 9.5 Q
-0.44 (dynamic-) 450.05 450.29 P
(bind) 198.65 436.29 T
2 11 Q
(.) 221.45 436.29 T
4 9 Q
(dynamic-bind \050object.a-slot = new-slot-val\050\051\051) 198.65 415.62 T
(inner-body\050object\051) 209.45 404.62 T
(end;) 198.65 393.62 T
2 11 Q
(This expands into code equivalent to the following:) 198.65 373.29 T
4 9 Q
(a-slot-dynamic-binder\050new-slot-val\050\051,) 198.65 352.62 T
(method \050\051 inner-body\050object\051 end,) 263.45 341.62 T
(object\051) 263.45 330.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "38" 38
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 38
%%DocumentFonts: Palatino-Italic
%%+ Palatino-Bold
%%+ Palatino-Roman
%%+ Helvetica-Narrow-Bold
%%+ Courier-Bold
%%+ Helvetica-Narrow
%%+ Helvetica
%%+ Palatino-BoldItalic
%%EOF
