
The general idea is that we provide a set of open generic functions
for all of the following, and provide these sealed methods that
implement ANSI C-like behavior over reals.  (In fact, the restrictions
and error cases described here are intended to be the same as they are
in ANSI C.)  Complex versions of these functions can be provided by an
additional library.

It is permitted to implement all of this stuff by FFI'ing out to a
standard library for transcendentals.  Therefore, the exact precision
and algorithms (and hence, the exact results) for all of these
functions is explicitly unspecified.  Note, however, that we do expect
the following, even in libraries that are implemented by calling
foreign libraries:
 - domain and range errors should be signalled as Dylan errors
 - floating point precision "contagion" must obey Dylan rules (that
   is, functions called on single precision values return single
   precision results, and functions on double precision values return
   double precision results)


$single-pi							[Constant]

 The value of pi as a single float.


$double-pi							[Constant]

 The value of pi as a double float.


sin (x :: <real>) => (y :: <float>)				[G.F. method]
cos (x :: <real>) => (y :: <float>)				[G.F. method]
tan (x :: <real>) => (y :: <float>)				[G.F. method]

 Returns the sine, cosine, or tangent of _x_, respectively.  _x_ is
 given in radians.

 The floating point precision of the result is given by the precision
 of _x_.  The result will be a <single-float> if _x_ is an integer.


asin (y :: <real>) => (x :: <float>), -1 <= y <= +1		[G.F. method]
acos (y :: <real>) => (x :: <float>), -1 <= y <= +1		[G.F. method]

 Returns the arc sine or arc cosine of _y_, in radians.  If _y_ is not
 in the range [-1, +1], an error is signalled.

 The floating point precision of the result is given by the precision
 of _y_.  The result will be a <single-float> if _y_ is an integer.


atan (y :: <real>) => (x :: <float>)				[G.F. method]

 Returns the arc tangent of _y_, in radians.

 The floating point precision of the result is given by the precision
 of _y_.  The result will be a <single-float> if _y_ is an integer.


atan2 (y :: <real>, x :: <real>) => (z :: <float>)		[G.F. method]

 Returns the arc tangent of _y_/_x_, in radians.  _x_ may be zero if
 _y_ is not zero.  The signs of _x_ and _y_ are used to derived what
 quadrant the angle falls in.

 The floating point precision of the result is given by the precision
 of _y_/_x_.  The result will be a <single-float> if _y_/_x_ is an integer.


sinh (x :: <real>) => (y :: <float>)				[G.F. method]
cosh (x :: <real>) => (y :: <float>)				[G.F. method]
tanh (x :: <real>) => (y :: <float>)				[G.F. method]

 Returns the hyperbolic sine, hyperbolic cosine, or hyperbolic tangent
 of _x_, respectively.

 The floating point precision of the result is given by the precision
 of _x_.  The result will be a <single-float> if _x_ is an integer.


asinh (y :: <real>) => (x :: <float>)				[G.F. method]
acosh (y :: <real>) => (x :: <float>)				[G.F. method]
atanh (y :: <real>) => (x :: <float>)				[G.F. method]

 Returns the hyperbolic arc sine, hyperbolic arc cosine, or hyperbolic
 arc tangent of _y_, respectively.

 The floating point precision of the result is given by the precision
 of _y_.  The result will be a <single-float> if _y_ is an integer.


$single-e							[Constant]

 The value of e as a single float.


$double-e							[Constant]

 The value of e as a double float.


log (x :: <real>) => (y :: <float>), x > 0			[G.F. method]

 Returns the natural logarithm of _x_ in base _e_.  If _x_ <= 0, an
 error is signalled.

 The floating point precision of the result is given by the precision
 of _x_.  The result will be a <single-float> if _x_ is an integer.


exp (x :: <real>) => (y :: <float>)				[G.F. method]

 Returns e raised to the power _x_.

 The floating point precision of the result is given by the precision
 of _x_.


logn (x :: <real>, b :: <real>) => (y :: <float>), x > 0, b > 1	[G.F. method]

 Returns the logarithm of _x_ in base _b_.  If _b_ <= 1 or _x_ <= 0, an
 error is signalled.

 The floating point precision of the result is given by the precision
 of _x_.  The result will be a <single-float> if _x_ is an integer.


\^ (b :: <real>, x :: <real>) => (y :: <float>)			[G.F. method]

 Returns _b_ raised to the power _x_.  If _b_ is 0 and _x_ is not
 positive, an error is signalled.  If _b_ is negative and _x_ is not
 an integer, an error is signalled.

 The floating point precision of the result is given by the precision
 of _b_.  The result will be a <single-float> if _b_ is an integer.


\^ (b :: <integer>, x :: <integer>) => (y :: <integer>)		[G.F. method]

 Returns an integer result giving _b_ raised to the power _x_.  If _b_
 is 0 and _x_ is not positive, an error is signalled.  If _x_ is
 negative, an error is signalled.


sqrt (x :: <real>) => (y :: <float>), x >= 0			[G.F. method]

 Returns the square root of _x_.  If _x_ < 0, an error is signalled.

 The floating point precision of the result is given by the precision
 of _x_.  The result will be a <single-float> if _x_ is an integer.


isqrt (x :: <integer>) => (y :: <integer>), x >= 0		[G.F. method]

 Returns the integer square root of _x_, that is, the greatest integer
 less than or equal to the exact positive square root of _x_.
 If _x_ < 0, an error is signalled.

------- End of Forwarded Message

