Title:     `DUIM-OLE-Server' and `DUIM-OLE-Control' library description

Author:    David N. Gray

Date:	   September 13, 1996 - initial proposal.
	   September 26, 1996 - as checked in to HOPE.
	   December 11, 1996 - added self-registration support.
	   January 29, 1997 - minor clarifications.
	   February 8, 1997 - add tool bar and status bar support.
	   March 21, 1997 - add support for OLE Controls.
	   May 6, 1997 - minor updates to OLE Control support.
	   June 3, 1997 - minor updates.
	   August 1, 1997 - update structure of OCX application.
	   August 25, 1997 - more modifications for OLE Controls.
	   September 12, 1997 - Add `frame-container-name'; minor details.
	   September 22, 1997 - Add `misc-status:' option for OLE Controls.
	   September 25, 1997 - add ambient property support.
	   October 9, 1997 - Add automatic type info and stock properties.
	   October 17, 1997 - update trivial details.
	   November 12, 1997 - now supporting multiple panes.

Status:    This describes what is currently implemented and working,
	   although the specifications are still subject to change.  

Copyright: 1996, 1997 Functional Objects, Inc.  All rights reserved.

Version: $HopeName: D-doc-lib!ole-duim.text(trunk.21) $


The `DUIM-OLE-Server' library can be used together with `DUIM' to easily
create an application program that can be used as an OLE server.  In other
words, the program can either be run by itself, or it can be embedded
within an OLE container application.  The programmer does not need to know
anything about the OLE API.

This currently only implements an embedded local server (an .EXE file with
either in-place or out-of-place activation).  It does not yet support
"linking" (where the data is stored in a file instead of as part of the
compound document) or an in-process server (.DLL file).

For a complete example, see the program in directory
"~dylan/app/ole-scribble/"; note its "README.text" file.

To use this, an application program is written using the usual structure of
a DUIM application, with a few differences summarized in the
following outline:

 * Use the `DUIM-OLE-Server' library and module.

 * Define the application as a subclass of `<embeddable-frame>' instead of
   `<simple-frame>'.

 * Define methods for `save-frame-to-storage' and
   `load-frame-from-storage' to handle saving the application's data as
   part of the compound document.

 * Call `note-embedded-data-changed' on the frame when the data needs to be
   saved.

 * When making the frame, supply a `class-id:' argument (whose value is
   usually created by `make-GUID').   There are also some additional
   optional arguments which can be specified to control how the server is
   registered.

 * For displaying status bar messages, instead of referring directly to
   `frame-status-bar', use:
	frame-status-message(frame) := "message text string";
    which will work either when embedded or not.

Execution is initiated as usual by calling `start-frame'.  (There is a
specialized method on `start-frame' for `<embeddable-frame>', so don't try
to use the frame in some other way.)

During in-place activation, the application frame's menu bar will be merged
into the container application's menu bar.  Often a different set of menus
are appropriate than for stand-alone execution, so the application can
optionally provide a method on `frame-container-menus' to specify the
embedded menus separately from the normal menu bar.

Before the program can be embedded in a container, it must first be
registered by running it from a DOS command prompt with the "/RegServer"
command line option.  This will create the necessary entries in the Windows
System Registry and then terminate without displaying any window.  (The
"/UnregServer" option can be used to remove the registry entries.)  The
full pathname of the executable file is recorded in the registry, so if the
program is moved to a different directory, it will need to be re-registered.

Following is a more detailed description of the names that are exported by
the `DUIM-OLE-Server' module.

  make-GUID (l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) => (ID :: <REFGUID>)

	Creates a GUID ("Globally Unique IDentifier") object (class
	<REFGUID>, alias <REFCLSID>) from the constituent integers.  This
	is used for specifying the OLE class ID of the server application.
	The utility program "UUIDGEN" from the Win32 SDK can be run at a
	DOS prompt to generate an ID for a new application.  For example,
	if "UUIDGEN" displays:

	  113f2c00-f87b-11cf-89fd-02070119f639

	this could be used directly in a registration file but needs to
	be formatted a little differently to become the arguments for this
	function:

	  define constant $my-class-ID =
		make-GUID(#x113f2c00, #xf87b, #x11cf,
			  #x89, #xfd, #x02, #x07, #x01, #x19, #xf6, #x39);

	[Note: when using the internal compiler running under LispWorks
	(instead of the native compiler), the first digit has to be 0, 1,
	E, or F to avoid integer truncation.  You can just run "UUIDGEN"
	again a few minutes later until an acceptable value appears.]

	[Issue: Since not all users will have the SDK, DylanWorks will need
	to provide our own implementation of the "UUIDGEN" utility.  Note
	that this simply involves calling the COM library functions
	`CoCreateGuid' and `StringFromGUID2'.]
 
  <embeddable-frame>					[Open Class]

	This is a subclass of a DUIM `<simple-frame>', and should be used as
	the superclass for the user's application.  For use in an OLE Server
	process, it accepts the following additional initialization
	keywords:

	  class-id:	(Required) The OLE class ID of the application.
			This may be represented as either a `<REFCLSID>'
			(as from `make-GUID') or a string in the format
			    "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}"
			where each `x' is a hexadecimal digit.

	  object-title: (Optional) A string which is used as the program
			name shown in the container's "insert object"
			dialog box.  If not provided, the inherited
			`title:' option is used instead.  Either `title:'
			or `object-title:' must be supplied for the program
			to be able to register itself.

			The object title should be unique, since if two
			servers are registered with the same title, only
			one will be accessible from the "insert object"
			dialog box. 

	  short-title:	(Optional) A string used as the program name in
			container menus and the Links dialog box.  It must
			not be more than 15 characters long.  If not
			specified, it defaults to the shorter of `title:'
			or `object-title:', truncated to 15 characters if
			necessary.

	  prog-id:	(Optional) The OLE "programatic identifier".
			This is a string which is used internally and will
			only be visible in the Registry Editor.  If
			specified, it must start with a letter, it cannot
			contain any spaces or punctuation except period,
			and it must not be more than 39 characters long.
			It must be different from the ID of any other
			program.  If not specified, a default value will be
			created automatically using portions of the title
			and class ID.

	Note: the three optional parameters above are only used during
	self-registration, and may be overridden by manually entering
	different values into the System Registry.  If more control is
	needed over the registration, the user may write override methods
	for the generic functions `frame-register-server' and
	`frame-unregister-server'; each takes a single argument which is
	the frame instance.

	(None of the four options listed above are used with OLE Controls,
	where registration and instantiation is not controlled by the frame.)

  frame-embedded-sheet (frame) => (sheet :: false-or(<sheet>))	[Open GF]

	If the application defines a method on this function (specialized
	on the application's subclass of `<embeddable-frame>') which
	returns a sheet, then only out-of-place activation will be used,
	and only the returned sheet will be displayed in the container.
	This could be used for an application that wants to use different
	window layouts when active and inactive.  The default method
	returns `#f'.  (This should not be used for an OLE Control, since
	they don't support out-of-place activation.)

  frame-embedded-size-requested ( frame )			[Open GF]
		=> ( width :: <integer>, height :: <integer> )

	The application may optionally define a method on this function,
	specialized on the application's subclass of `<embeddable-frame>',
	which returns the amount of space (in pixels) that is desired to be
	reserved in the container.  The default method returns the size of
	the sheet returned by `frame-embedded-sheet', if any, or else the
	size of the `frame-layout' sheet.

  frame-embedded-size ( frame )					[Function]
		=> ( width :: <integer>, height :: <integer> )

	This function may be called to obtain the current size (in pixels)
	of the space reserved in the container for the embedded image.
	(These are the same values reported by function
	`note-embedded-region-changed'.)

  frame-container-menus ( frame )				[Open GF]
		=> ( edit-menus, object-menus, help-menus )

	The application may optionally define a method on this function,
	specialized on the application's subclass of `<embeddable-frame>',
	which specifies menus to be included in the container's menu bar
	during in-place activation.  Three values are to be returned,
	corresponding to three positions in the menu bar that are
	designated for edit menus, object menus, and help menus
	respectively.  Each of the three values can be any of the
	following:

	   #f  --  indicating no menus in this group.
	   a menu object (instance of <menu>)	   
	   a <sequence> of <menu> objects (possibly empty)
	   a menu bar object (an instance of <sheet>)  --  causing all of
			the contained menus to be merged in.
	   
	The default method returns:
	  values( frame-menu-bar(frame), #f, #f )

	[Issue: need to resolve whether the menus and buttons should be
	newly created or may be re-used for multiple activations.]

  note-in-place-activation ( frame ) => ()			[Open GF]

	This function is called by the support library when an in-place
	activation is begun, immediately after completion of displaying the
	application's document window, menus, and tool bar in the
	container.  The application may optionally define a method if it
	desires to be notified of that fact.  The default method does
	nothing.

	[Issue: is there a need to distinguish here between just "in-place
	active" versus also "UI active"?]

  note-in-place-deactivation ( frame ) => ()			[Open GF]

	This function is called by the support library just before an
	in-place activation is ended.  The application may optionally
	define a method if it desires to be notified of that fact.  The
	default method does nothing.

	[Issue: is this (a "before" notification) what is desired, or would
	an "after" notification be more useful?]

	The container's status bar is cleared before this method is called,
	but `frame-status-message-setter' can be called here to leave a
	parting message.

  frame-in-place-active? ( frame :: <embeddable-frame> )	[Function]
		=> (active? :: <boolean>)

	The application may call this function to determine whether it is
	currently running in the context of an in-place activation.

  save-frame-to-storage ( frame, stream :: <storage-istream> ) => () [Open GF]

	If the application has any data that is to be stored persistently
	as part of the container's compound document, then it must provide
	a method on this function to store the data.  The default method
	does nothing.  For example, if there are three <integer> values to
	be saved, the method might look something like:

	 define method save-frame-to-storage
		( frame :: <foo-frame>, stream :: <storage-istream> ) => ()
	   istream-write-integer(stream, frame.foo);
	   istream-write-integer(stream, frame.bar);
	   istream-write-integer(stream, frame.baz);
	 end method;

	The function `istream-write-integer' stores a 32-bit signed integer
	(and returns no values), while `istream-write-int16' may be used
	for values that will fit into a 16-bit signed field.  Use
	`istream-write-float' for a `<single-float>', or
	`istream-write-string' to write a `<byte-string>'.  Also, the
	low-level OLE API function `IStream/Write' may be used to output
	arbitrary FFI data (`<storage-istream>' is actually an alias for
	`<LPSTREAM>' from the `COM' library.).

	Note that there are separate `istream-write-...' functions instead
	of a single generic function because the object type is not saved
	to the stream; you need to know what kind of object you are writing
	in order to know how to read it back.

	Note that the "stream" argument here is an OLE storage stream, not
	to be confused with a Dylan `<stream>' from the `Streams' library.
	However, we intend to eventually provide a utility that will allow
	it to be accessed as a `<stream>'.  That should also allow using
	`DOSS' or `DOOD' to save structured data.

  load-frame-from-storage (frame, stream :: <storage-istream>) => () [Open GF]

	The application needs to provide a method on this function to
	restore the data saved by `save-frame-to-storage'.  The default
	method does nothing.  For example:

	 define method load-frame-from-storage
		( frame :: <foo-frame>, stream :: <storage-istream> ) => ()
	   frame.foo := istream-read-integer(stream);
	   frame.bar := istream-read-integer(stream);
	   frame.baz := istream-read-integer(stream);
	   values()
	 end method;
	
	Function `istream-read-integer' reads a value written by
	`istream-write-integer', while `istream-read-int16' reads a value
	written by `istream-write-int16', `istream-read-float' reads a
	value written by `istream-write-float', `istream-read-string' reads
	a value written by `istream-write-string', and `IStream/Read'
	corresponds to `IStream/Write'.

  frame-init-new-object (frame) => ()				    [Open GF]

	This function is called when a new object is being created, i.e.,
	when `load-frame-from-storage' will not be called to load an old
	object.  A method may be defined to perform any desired
	initialization.  The default method does nothing.

  note-embedded-data-changed ( frame :: <embeddable-frame> ) => ()  [Function]

	This function should be called by the application on its frame
	object whenever a change is made to either the persistent data or
	to the image that should appear in the container.  It ensures that
	`save-frame-to-storage' will be called when needed and that the
	container's display will be refreshed when needed.  (It has no
	effect if the program is not running under OLE.)

	This function is actually implemented as:

	  define method note-embedded-data-changed
		( frame :: <embeddable-frame> ) => ()
	    frame.embedded-data-changed? := #t;	// need to save data
	    note-embedded-image-changed(frame);	// update image in container
	  end method;

	The application program can instead use the two parts of this
	separately if desired.  The slot `embedded-data-changed?' indicates
	whether `save-frame-to-storage' needs to be called, and is
	automatically set to `#f' when either it or
	`load-frame-from-storage' is called.

  note-embedded-region-changed ( frame, width :: <integer>,	   [Open GF]
				height :: <integer>) => (ok :: <boolean>)

	The application may provide a method on this function in order to
	be notified if the container application has allocated an amount of
	space different from what the program asked for.  For example, the
	container might permit the user to manually resize the embedded
	window.  The width and height are given in pixels.  The default
	method does nothing; the image will simply be clipped if the
	application tries to draw outside the provided space.  The
	application would need to provide a method if it wants to do
	something such as scaling the image to fit the available space.
	Return `#t' if the change is acceptable, or `#f' to force use of
	out-of-place activation if the program can't operate in the space
	given. 

	Note that the drawing pane sheet will be automatically resized as
	necessary independently of this function, but the program should
	not rely on looking at the sheet size because it might reflect
	temporary visibility clipping, not necessarily the full image size.

	Note that the same width and height values can also be obtained by
	calling `frame-embedded-size' if you don't want to have to remember
	them here.

  frame-container-name ( frame :: <embeddable-frame> )		[Function]
        => (application :: false-or(<string>), document :: false-or(<string>))

	Returns the name of the container application program (or #f if not
	running under OLE or if called too soon) and the name of the
	container document (or #f if not applicable).  This won't have
	meaningful data until the server is activated.

	One use for this is that when running in an out-of-place
	activation, the "Exit" menu item should say
	"Exit to <container-application-name>".
	[Issue: but it isn't clear how to do that in DUIM.]


There are a number of OLE features that are not yet supported by the
current implementation.  Hopefully many of these can be provided
transparently, but some might need additional library functions that have
not yet been specified.  Features not yet considered in the design include:

    * Support linking as well as embedding.
    * Option for in-process server as well as local server process.
    * Adding additional control or label panes around an in-place activation.
    * Clipboard.
    * Drag and drop.
    * Context-sensitive help.
    * Progress indicator in status bar.
    * Status bar display for containers without their own status bar.
    * Undo.
    * Presentation as icon or thumbnail.
    * Additional considerations for MDI context.

[Issue: Currently, only a single connection is allowed to the class factory
and hence to the server process (`REGCLS_SINGLEUSE' in OLE terms).  Would
it be meaningful to support multiple connections, and how should it work?
It might mean either multiple application instances within the same
process, or multiple windows within an MDI frame.]



Low-level API
=============

In addition, the library exports some names that allow the user access to
the lower-level APIs (either at the level of the `OLE-Server'
library or the raw `OLE' and `COM' libraries) if that is desired in
order to extend the functionality beyond what this library supports.
Anyone not interested in these lower levels can stop reading now.

The low-level hooks include the following.

  frame-ole-object (frame) => (obj :: false-or(<DUIM-OLE-server>))  [Function]

	When running connected to an OLE container, the server can call
	this function to obtain the OLE interface object, which is an
	instance of class `<DUIM-OLE-server>' (from this library), which is
	a subclass of `<ole-server-framework>' (from the
	`OLE-Server' library) and of `<IUnknown>' (from the `COM'
	library).  This object is the "controlling unknown" for all of the
	low-level OLE interfaces, so `QueryInterface' may be called on it
	if it is necessary to obtain any of the low-level interface
	pointers.  This function does _not_ call `AddRef', so the caller
	should not call `Release' unless it also calls `AddRef' explicitly.
	If not connected, the function returns `#f'.

  frame-ole-object-class ( frame ) => (class :: <class>, args :: <sequence>)
								[Open GF]

	This function returns the class that is to be instantiated for the
	OLE interface object, and a sequence of any additional keyword
	options to be passed to `make'.  The default method returns
	`<DUIM-OLE-server>' as the first value.  The application may define a
	method on this function that will return it's own customized
	subclass.  The subclass could do things like provide overrides for
	methods in either the `DUIM-OLE-Server' or `OLE-Server'
	libraries, or its `initialize' method could instantiate additional
	OLE interfaces (using the `controlling-unknown:' option to
	reference the object being instantiated) which would then be
	available to the container application when it calls
	`QueryInterface'.  Note that an override method should concatenate
	the subclass's arguments with the second value returned by
	`next-method()'.

	This function is not used for OLE Controls.



OLE Controls
============

A DUIM application can also be an "OLE Control".  This is like the "OLE
Compound Document Server" support described above, except for a few
differences which are summarized here:

 * Use the library and module `DUIM-OLE-Control' instead of
   `DUIM-OLE-Server'. 

 * Optionally provide type information specifying the methods and
   properties that are available to clients.  (This is an instance of
   `<coclass-type-info>'.)  If the frame just contains a DUIM `<gadget>',
   you can let the library automatically create type information
   corresponding to the DUIM gadget protocols.

 * If possible, define a method for `max-storage-size'.

 * The program must be linked as a Dynamic Link Library (file suffix ".DLL"
   or ".OCX"), not an ".EXE" file.

 * Do not directly make the frame or call `start-frame'.
   Instead, registration and activation is handled by the
   `initialize-ole-control' macro, as described below.

So the over-all structure of an OLE Control program should look something
like this:

  define frame <my-frame> (<embeddable-frame>) ... end;
  define constant $my-class-ID = make-GUID(...);
  define constant my-type-info = 
	make(<coclass-type-info>, uuid: $my-class-ID, ...);
  initialize-ole-control(typeinfo: my-type-info,
		     prog-id: "my.prog.id",
		     title: "my control",
		     frame-class: <my-frame>);

[Issue: Do we want a macro to wrap all of this up into a single package?]

The `<coclass-type-info>' should include at least one dispatch interface,
as described in the OLE-Automation documentation.  The `make' of
`<component-interface-description>' should specify the `class:' option to
be either `<ocx-dispatch>' or a user-defined subclass thereof.  The methods
for automation properties and methods will be specialized on that class, and
should use the function `ocx-frame' to find the corresponding frame object.

For a complete example, see the program in directory
"~dylan/app/ocx-scribble/".

An OLE Control also differs from a Compound Document Server in that
out-of-place activation is never used, and to be actually used as a
"control" element, it is typical that the frame will contain just a single
<gadget>, with no menu bar or tool bar, so that it can be active at the
same time as other controls.

Following is more detailed information about the additional names:

  initialize-ole-control ( #rest options )				[Macro]

	This macro needs to be called at top-level in order to set up some
	static initializations needed for DLL initialization and
	registration.  (It is not an executable expression.)  Without this,
	the OCX container will be unable to connect to the control
	application.  This macro cannot be used more than once in a DLL
	library.  The arguments are keyword options, as described below.
	Note that you must specify `frame-class:' and either `typeinfo:' or
	`class-id:' and `title:'.

	  typeinfo:	(Optional) The type information describing the object.

			If not specified, the library will create default
			type information based on the attributes of the
			DUIM sheet being used.  If the frame contains a
			DUIM <gadget>, dispatch properties and methods
			corresponding to the gadget protocols will be
			automatically created (for example, a "value"
			property for a `<value-gadget>').

			If specified, the `typeinfo:' value should be an
			instance of class `<coclass-type-info>', as
			described in the documentation for the
			`OLE-Automation' library.

			If the `class:' option of `<coclass-type-info>' is
			specified, it must be a subclass of `<DUIM-OCX>'.

	  class-id:	The OLE class ID of the application (as described
			for <embeddable-frame> above).  This is required if
			`typeinfo:' is not specified; otherwise, this
			option is not used and the class ID is specified by
			the `uuid:' option of the `<coclass-type-info>'
			instead.

	  value-type:	(Optional) If the `typeinfo:' is being defaulted,
			and the frame contains a <value-gadget>, this
			option may be used to specify the data type of the
			"value" property of the OLE Control.  It defaults
			from `gadget-value-type', which may not be specific
			enough to map to an OLE Automation type.  See the
			documentation for the OLE-Automation library for
			a description of the valid types for a dispatch
			property.

	  disp-typeinfo-options:  (Optional)  If the `typeinfo:' is being
			defaulted, this option can be used to add
			additional information to the automatically
			generated dispatch type info.  The value should be
			a sequence of keyword and value pairs such as used as
			`make' options for a `<disp-type-info>'.  For
			example, to add a user-defined property:

			  disp-typeinfo-options:
				vector(name: "my-dispatch",
				       properties:
					 vector(make(<variable-description>,
						     name: "foo",
						     getter: my-property)))

	  frame-class:  (Required) The class to be instantiated for the
			DUIM frame.  This should be a user-defined subclass
			of <embeddable-frame>.

	  frame-options: (Optional) A sequence of keyword options to be
			passed to `make' when instantiating the frame.
			Defaults to an empty sequence.  OLE Server options
			such as `class-id:' and `object-title:' are not
			needed here since they are specified as options to
			either the `initialize-ole-control' macro or when
			making the `<coclass-type-info>'.

	  title:	(Optional) A string which is used as the program
			name shown in the container's "insert object"
			dialog box.  If not provided, it defaults from the
			`documentation:' or `name:' of the type info.
			This is required if `typeinfo:' is not specified.

	  short-title:	(Optional) A string used as the program name in
			container menus and the Links dialog box.  It must
			not be more than 15 characters long.  If not
			specified, it defaults from the title, truncated to
			15 characters if necessary.

	  prog-id:	(Optional) The OLE "programatic identifier".
			This is a string which is used internally and will
			only be visible in the Registry Editor.  If
			specified, it must start with a letter, it cannot
			contain any spaces or punctuation except period,
			and it must not be more than 39 characters long.
			It must be different from the ID of any other
			program.  If not specified, a default value will be
			created automatically using portions of the title
			and class ID.

	  misc-status:  (Optional) An <integer> formed by using `logior' to
			combine `$OLEMISC-...' constants to specify various
			attributes of the OLE Control.  If not specified,
			the library will attempt to choose an appropriate
			default for the application frame.  See the
			documentation for `register-ole-server' for more
			information. 

	  versioned-prog-id:
			Optional string which is a prog-id that includes
			the version number (as documented for
			`register-automation-server'). 

	  versioned-title:
			Optional title string that includes the program's
			version number.

	[Issue: there may be a need to support registering more than one
	class ID.  (For example, for backward compatibility, a new version
	of an application might support both old and new class IDs.)]

  max-storage-size (frame) => (max-size :: false-or(<integer>))	  [Open GF]

	Return the maximum size, as an integer number of bytes, that will
	be needed for the data written by `save-frame-to-storage' (for
	example, count 4 bytes for each call to `istream-write-integer'),
	or return `#f' if it is not possible to make such an estimate.  The
	user is encouraged to provide a method specialized on the user's
	frame class.  The default method returns `#f'.  (This information
	is used only if the control container chooses to utilize the
	IPersistStream or IPersistStreamInit interface.)

  <ocx-dispatch> 					[Open concrete Class]

	A subclass of `<simple-dispatch>' (from the OLE-Automation library)
	which adds some additional functionality for use in DUIM OLE
	controls. 

	Note that subclasses need to be defined by `define COM-interface'
	instead of `define class'.

  ocx-frame ( interface ) => ( frame :: <embeddable-frame> ) [Generic Function]

	Given an instance of `<ocx-dispatch>' or `<DUIM-OCX>', returns the
	associated DUIM frame.


The "ambient properties" of the control container may be accessed by using
function `frame-ole-object' to get the OLE object and then using the
facilities described in the documentation for the "ole-control-framework"
library.  For example:

    let obj = frame-ole-object(frame);
    let locale-code = OLE-util-locale(obj);
    let language = PRIMARYLANGID(locale-code);
    select (language)
      $LANG-NEUTRAL,
      $LANG-ENGLISH => ...
      $LANG-FRENCH  => ...
      $LANG-SPANISH => ...
     ...

When the typeinfo is generated automatically, it will provide support for
whichever of the following properties are applicable:

  name     disp-id         DUIM function         applicable to
  ----     -------         -------------         -------------
  Value    $DISPID-VALUE   gadget-value          <value-gadget>
  items                    gadget-items          <collection-gadget>
  mode                     gadget-selection-mode <collection-gadget>
  Caption  $DISPID-CAPTION gadget-label          <labelled-gadget-mixin>
  Text     $DISPID-TEXT    gadget-text           <text-gadget>
  Enabled  $DISPID-ENABLED gadget-enabled?	 [any accepting input]
  TabStop  $DISPID-TABSTOP                       type-union(<tab-control>,
						   <collection-gadget>,
						   <text-gadget>)
  ForeColor $DISPID-FORECOLOR medium-foreground	 <sheet-with-medium-mixin>
  BackColor $DISPID-BACKCOLOR medium-background	 <sheet-with-medium-mixin>

and the following methods:

  name     disp-id         DUIM function         applicable to
  ----     -------         -------------         -------------
  activate $DISPID-DOCLICK activate-gadget       <action-gadget>



The following may be used for low-level customization; the beginning user
need not be concerned with them.

  <DUIM-OCX>						[Open concrete Class]

	The class which is instantiated to create the OLE object for an
	OLE Control; it is the "controlling unknown" for the various
	supported interfaces.  It is a subclass of both
	`<ole-server-framework>' and `<simple-component-object>', as well
	as `<IUnknown>'.

	Note that subclasses need to be defined by `define COM-interface'
	instead of `define class'.

