%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.1
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%-
%- Frame ps_prolog 5.0, for use with Frame 5.0 products
%- This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
%- All rights reserved.  This ps_prolog file may be freely copied and 
%- distributed in conjunction with documents created using FrameMaker, 
%- FrameMaker/SGML FrameReader and FrameViewer as long as this 
%- copyright notice is preserved.
%-
%- FrameMaker users specify the proper paper size for each print job in the
%- "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
%- printer that the PS file is sent to does not support the requested paper
%- size, or if there is no paper tray of the proper size currently installed, 
%- then the job will not be printed.  The following flag, if set to true, will
%- cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            true def
%-
%- Frame products normally print colors as their true color on a color printer
%- or as shades of gray, based on luminance, on a black-and white printer. The
%- following flag, if set to true, forces all non-white colors to print as pure
%- black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%-
%- Frame products can either set their own line screens or use a printer's 
%- default settings. Three flags below control this separately for no 
%- separations, spot separations and process separations. If a flag
%- is true, then the default printer settings will not be changed. If it is
%- false, Frame products will use their own settings from a table based on
%- the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%-
%- For any given PostScript printer resolution, Frame products have two sets of 
%- screen angles and frequencies for printing process separations, which are 
%- recomended by Adobe. The following variable chooses the higher frequencies
%- when set to true or the lower frequencies when set to false. This is only
%- effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%-
%- The following is a set of predefined optimal frequencies and angles for various
%- common dpi settings. This is taken from "Advances in Color Separation Using
%- PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
%- and corrolated with information which is in various PPD (4.0) files.
%-
%- The "dpiranges" figure is the minimum dots per inch device resolution which
%- can support this setting. The "low" and "high" values are controlled by the
%- setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
%- the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
%- three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%-
%- PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
%- to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
%- (too badly) against the screen frequencies of any separations for that DPI.
% This is computed by taking dpi/9 as the ideal pixels per repetition, and then
% computing a tiling size in printer pixels for each of the four separations as 
% (dpi/screenFreq)*(cos(screenAngle)+sin(screenAngle)) Actually, this is the same 
% for Cyan and Magenta). Then, we take a "nice" LCM of the tile sizes close to
% the desired pattern tile where the beat factor is not more than 2 or 3.
%
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def

/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def

/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%-
%- PostScript Level 2 printers contain an "Accurate Screens" feature which can
%- improve process separation rendering at the expense of compute time. This 
%- flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%-
%- The following PostScript procedure defines the spot function that Frame
%- products will use for process separations. You may un-comment-out one of
%- the alternative functions below, or use your own.
%-
%- Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%-
%- Line function
%- /FMSpotFunction { pop } def
%-
%- Elipse function
%- /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%-		sqrt 1 exch sub } def
%-
%-

/FMversion (5.0) def % matches PS_VERSION in fmprintdriver

% PostScript Level 1 = true, 2 = false
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def

% Set up Color vs. Black-and-White
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
%		statusdict /processcolors known {
%			statusdict /processcolors get exec
%		} {1} ifelse
%		1 gt
		true
	} ifelse
def

/FrameDict 400 dict def % should check this value each time changes made

%
% For NeWS we add a fake errordict, so we can psh files
%
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if

%- The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put % save old rangecheck
errordict /rangecheck {FrameDict /bug true put} put % will flag bug found
FrameDict /bug false put % flag bug not found
mark % since we're not sure what will happen next
%- Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark % junk from readline and rangecheck
errordict /rangecheck FrameDict /tmprangecheck get put % restore rangecheck
FrameDict /bug get { % redefine readline if last one got a rangecheck
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop % get a char
			dup 10 eq {exit} if % exit if LF
			dup 13 eq {exit} if % exit if CR
			gstring exch gindex exch put % store it away
			/gindex gindex 1 add def % bump index
		} loop
		pop % eol character
		gstring 0 gindex getinterval true % simulate real readline
		} bind def
	} if

% outer-world defs

/FMshowpage /showpage load def
/FMquit /quit load def

/FMFAILURE { % enter with two error strings on the stack
	dup = flush % send a copy of the message to the console
	FMshowpage % msg on a page by itself, so it can't be, say, black on black
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage % we might be in the middle of some EPS, where "showpage"
	FMquit % and "quit" are redefined
	} def % only used once at most, so no bind

/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def % only used at startup, so no bind

/FMBADEPSF { % Call with bad operator name on stack (as a string)
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length % parmstr errstr errstr indx
	5 -1 roll % errstr errstr index parmstr
	putinterval % errstr
	FMFAILURE
	} def

% standard concatprocs routine
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def

% Put all local variables here in alphabetical order.
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall

% Start of PDF/Acrobat support

% Bind def
/FmBD {bind def} bind def

systemdict /pdfmark known {
	/fMAcrobat true def

	% FmPD is a conditional PDFMark
	/FmPD /pdfmark load def
	
	% FmPT is a show text operator which only show up when distiller is active
	/FmPT /show load def
	
	% FmPD2 and FmPA are Acrobat 2.0-specific
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		% FmPD2 is like FmPD but for Acrobat 2.0-specific PDF
		/FmPD2 /pdfmark load def
		
		% x y/name FmPA
		% 	is equivalent to
		% [/Dest/name/View[/FitH x y FmDC exch pop]/DEST FmPD
		% It is a shortcut for pagragraph Uinique ID designators whic occurr commonly.
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		% These are No-Ops for Distiller 1.0
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	% these are the No-Ops for regular PostScript
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse

% This convert a set of X Y coordinates from the current user space to the default
% PostScript coordinates needed by some pdfmark variants. We also convert to 
% integer because the distiller doesn't always like floats!
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD

% This converts four numbers into a bounding box making sure the first two are maller than the last two
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD

% End of PDF/Acrobat support

%
% Color separation code
%

% Constants.

/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def

/fMNegative false def % we are inverting the page

% Variables.

/FrameSepIs FMnone def % separation we are printing
% If FrameSepIs is FMcustom, this is the custom color
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def

/FrameCurColors [ 0 0 0 1 0 0 0 ] def % c m y k r g b

% Utility routines

/FrameColorEpsilon .001 def	% epsilon by which values can differ and sill be equal
/eqepsilon {		% v1 v2 eqeps bool
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def

% are the cmyk and cmykrgb arrays on the stack the same color?
/FrameCmpColorsCMYK { % [ c1 m1 y1 k1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
% are the rgb and cmykrgb arrays on the stack the same color?
/FrameCmpColorsRGB { % [ r1 g1 b1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def

% convert r g b to c m y k
/RGBtoCMYK { % r g b
	1 exch sub % r g y
	3 1 roll % y r g
	1 exch sub % y r m
	3 1 roll % m y r
	1 exch sub % m y c
	3 1 roll % c m y
	3 copy % c m y c m y
	2 copy % c m y c m y m y
	le { pop } { exch pop } ifelse % c m y c min(m,y)
	2 copy % c m y c min(m,y) c min(m,y)
	le { pop } { exch pop } ifelse % c m y min(c, min(m,y))
	dup dup dup % c m y k k k k
	6 1 roll % c k m y k k k
	4 1 roll % c k m k y k k
	7 1 roll % k c k m k y k
	sub % k c k m k y
	6 1 roll % y k c k m k
	sub % y k c k m
	5 1 roll % m y k c k
	sub % m y k c
	4 1 roll % c m y k 
} bind def
/CMYKtoRGB { % c m y k CMYKtoRGB r g b
	dup dup 4 -1 roll add 						  % c m k k y+k
	5 1 roll 3 -1 roll add 						  % y+k c k m+k
	4 1 roll add 								  % m+k y+k c+k
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  % r m+k y+k
	1 exch sub dup 0 lt {pop 0} if exch 	      % r b m+k
	1 exch sub dup 0 lt {pop 0} if exch	  		  % r g b
} bind def

% Public routines


% Happens at the top of each page that is a separation
/FrameSepInit {
	1.0 RealSetgray
} bind def
% Tell the separation code that this separation is for a custom color
/FrameSetSepColor { % c m y k r g b
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
% Tell the separation code that this separation is Cyan
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
% Tell the separation code that this separation is Magenta
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Yellow
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Black
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
% Tell the separation code we are not doing a separation
/FrameNoSep { %
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def

% Initialize the separation code with all the custom colors we are
% separating (not process colors)
/FrameSetSepColors { % list of arrays of [c m y k r g b] count 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  % array of arrays of colors we are separating
	exch def end
	} bind def

% is this color array in the array of custom color separations?
/FrameColorInSepListCMYK { % [ c m y k ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsCMYK % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { % [ r g b ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsRGB % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def

% Level 1 color operators saved and redefined
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 

% Setgray patch
/setgray { % num
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ % go to white unless the current sep color is black
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { % r g b
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] % r g b [ r g b ]
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor % safe since we will overwrite the color state
		currentrgbcolor  % r g b - Let PostsCript to the conversion.
		setrgbcolor % call our version
	} 
	ifelse
	end
} bind def
FrameDict begin

/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { % c m y k
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put

% Set up a prototype pattern for PostScript Level 2
fMLevel1 { 
	% set up screen functions for the patterns in PS level 1
	% each entry contains an angle, spot function, flipped spot function,
	% gray level and frequency multiplier.
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { % prototype level 2 pattern dictionary
	% define some PostScript procedures for known jaggy patterns.
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		% Always 1 for PS Level 2
		/PaintType 2 def		% Uncolored pattern
		/TilingType 3 def		% constant spacing and faster tiling
		/BBox [ 0 0 8 8 ] def 	% bounding box
		/XStep 8 def			% X offset
		/YStep 8 def			% Y offset
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse

%combineColor puts together the current gray value (which could also be
%a fraction of on bits for a fill pattern and the current color and calls
%the appropriate function
%
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { % separation case
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				% Level 1 patterns are either all there or not there at all
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def

/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
% freq and sangle are used for ps Level 1 pattern building.
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def

%
% screen index depending on dpi
%	- screenIndex smallint
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def

%
% These routines get the standard Adobe frequencies, angles, and spot functions
% depending on the DPI
%
% - getCyanScreen freq angle spotfunction
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getMagentaScreen freq angle spotFunction
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getYellowScreen freq angle spotFunction
% note that some of these use a "tripple dot" function at 1/3 the frequency
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def

%
% - getBlackScreen freq angle spotFunction
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def

%
% - getSpotScreen freq angle spotFunction
/getSpotScreen {
	getBlackScreen
} bind def

%
% - getCompositeScreen freq angle spotFunction
/getCompositeScreen {
	getBlackScreen
} bind def

% FmSetScreen sets the screen for either PostScript Level 1 or Level 2 and optionally
% sets the accuratescreens flag in the latter case
% freq angle spotfunction FMSetScreen -
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def

% This sets the default screen as was set at the beginning of the job
% - setDefaultScreen -
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def

% This sets the current screen depending on FrameSepIs
% - setCurrentScreen -
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def


end

% End of Color separation code
%
	
/FMDOCUMENT { % xscale yscale edown negative paperwidth paperheight manfeed numcopies numfonts
	array /FMfonts exch def % Why isn't this in FrameDict???
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def % invert page
	0 ne /edown exch def % flip page along y axis
	/yscale exch def
	/xscale exch def

	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def % some PS's leave junk on dict ...
		/FMoptop count def % ...or on operand stack...
		setpapername % This stuff may alter the transfer/screen/angle
		manualfeed {true} {papersize} ifelse % true->more work to do
		{manualpapersize} {false} ifelse % true->more work to do
		{desperatepapersize} {false} ifelse % true->failed completely
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for %...if tray not installed
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse % fMLevel1
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def

			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse

	end % FrameDict
} def % only used at startup, so no bind

/FMBEGINPAGE { % pagewidth pageheight landscape color-arrays count
	FrameDict begin % for the whole page...
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { % check for landscape
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
% paint the whole page in "white".  If the page is inverted, then
% this will actually paint our black background
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave % for CLIP
} def % only used infrequently, so no bind

/FMENDPAGE {
	grestore % for CLIP
	pagesave restore
	end % FrameDict
	showpage
	} def % only used infrequently, so no bind

/FMFONTDEFINE { % fontindex nonstd_encoding fontname -- 
	FrameDict begin
	findfont % fontindex nonstd_encoding font
	ReEncode % fontindex font'
	1 index exch % fontindex fontindex font'
	definefont % fontindex font"
	FMfonts 3 1 roll %  FMfonts fontindex font"
	put
	end % FrameDict
	} def % only used infrequently, so no bind

/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end % framedict
	} def % Only called once, so no bind

/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end % FrameDict
	} def % only used infrequently, so no bind

% Set things to a known, quiescent state, for when we switch to another writer
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray % Not FMsetgray; only called outside of our environment!
	} bind def

/FMBEGINEPSF { % <theta> llx lly urx ury fw fh fx fy
	end % FrameDict
	/FMEPSF save def % in userdict
	/showpage {} def % this def is in userdict
%- See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
%- "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def % FMBADEPSF knows this is the longest!
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
%	/initmatrix {(initmatrix) FMBADEPSF} def	% Aldus Freehand 4.0 epsf uses this harmlessly <Gus 4/26/95>
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall % neat trick
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale % then scale
	llx neg lly neg translate % then compensate for LL offset 
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count def % tricky! "/FMoptop" on stack
	} bind def

/FMENDEPSF {
	count -1 FMoptop {pop pop} for % clear EPS junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMEPSF restore
	FrameDict begin % for the whole page...
	} bind def

FrameDict begin % put most defs here

/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def

/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def

/pagedimen { % name width height
	paperheight sub abs 16 lt exch % 16pt is an arbitrary slop amount
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def

/setpapername { % Already set up: paperwidth paperheight and manualfeed
	/papersizedict 14 dict def % one for /papername, one for /unknown
	papersizedict begin
	/papername /unknown def % in case no match
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def

/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end % return true if more work to do
	} bind def

/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped % return true if more work to do
	} bind def

/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped % return true iff failed
		end
		} {true} ifelse % return true iff failed
	} bind def

/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def

%
% Font re-encoding to include diacritics
% 
/DiacriticEncoding [

/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron

] def

/ReEncode { % nonstd_encoding font -- reencodedfont
	dup % nonstd_encoding font font
	length % nonstd_encoding font dictlength
	dict begin % nonstd_encoding font % currentdict = newdict
	{% forall % forall is over font to be copied
	1 index /FID ne % skip FID
		{def} % defs go into newfontdict which is currentdict
		{pop pop} ifelse % copy all keys including /Encoding
	} forall % nonstd_encoding
	0 eq {/Encoding DiacriticEncoding def} if % --
	currentdict % push a copy of the copied font dict onto operand stack
	end % font' % before popping it off dictionary stack
	} bind def

FMPColor 
	% setup procs for color printing
	{

	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	% setup procs for B&W printing
	{
	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse

/K { % c m y k r g b SEPARATION
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
%
% graymode is true if we are just doing gray fills, this way do not keep calling
% setscreen. I don't know what the cost is on calling setscreen with defaults, but
% this is easy to keep track of, and we know for sure we aren't wasting cycles.
% if graymode is false and fMLevel1 is false, then we are using Level 2 patterns.
%
/graymode true def

% used by level 1 patterns
% defaultflip matrixentry fmGetFlit -> eith -1 or 1
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if

/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop % angle spot fspot gray mult
			freq 								% freq
			mul									% times multiplier
			5 2 roll							% angle spot fspot gray mult freq -> gray freq angle spot fspot
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		% landscape
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								% portrait     
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		% take regular or flipped spot function
			fMNegative { 
				{neg} fmConcatProcs 			% invert spot function
			} if
			bind
			% we need to bypass any screen filter and go directly to systemdict
			% to avoid problems with Kodak Precision calibration software
			% <Gus 9/13/93>
			systemdict /setscreen get exec		% leave graylevel on stack
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { % Level 2 version
		pop pop
		dup patCache exch known {
			patCache exch get
		} { % not in cache
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
%			9 orgfreq 
%				organgle sin abs organgle cos abs add div
%				dup 16 div round dup 0 le {pop 1} if  % Unix pattern size
%			    dup  9 div round dup 0 le {pop 1} if  % Mac larger (WYSIWYG) size
%					div div dup matrix scale % This gives Unix pattern size.
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def

/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def

/normalize {
	transform round exch round exch itransform
	} bind def

/dnormalize {
	dtransform round exch round exch idtransform
	} bind def

/lnormalize { % line widths are always odd so that arrow heads work
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def

/H { % THICK
	lnormalize setlinewidth
	} bind def

/Z {
	setlinecap
	} bind def
	
% This is used to fill or stroke white behind a Level 2 pattern
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def

/X { % TEXTURE
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} % Silly to pass parameters here
	{setGrayScaleMode}
	ifelse
	} bind def

/V { % FILL
	PFill gsave eofill grestore
	} bind def

/Vclip {
	clip
	} bind def

/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/N { % PEN
	PStroke
	} bind def

/Nclip {
	strokepath clip newpath
	} bind def

/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def

/L { % POLYLINE
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def

/Y { % POLYGON !!!
	L % POLYLINE
	closepath
	} bind def

/R { % RECT x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y % POLYGON
	} bind def

/rarc % Leaves all sorts of junk on the operand stack for caller to clear off
	{rad % arcto might fail if we're scaled way down
	 arcto
	} bind def

/RR { % ROUNDRECT x1 y1 x2 y2 r
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if % in case rarc failed for degenerate arcs
	cleartomark
	} bind def

/RRR { % ROUNDRECT ROTATED xs ys x1 y1 x2 y2 x3 y3 x4 y4 r
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto % eats xs ys
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def

/C { % CLIP
	grestore
	gsave
	R % RECT
	clip
	setCurrentScreen
} bind def

/CP { % CLIPPOLY p1x p1y p2x p2y ... n 
	grestore
	gsave
	Y % POLYGON
	clip
	setCurrentScreen
} bind def

/F { % FONT
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def

/Q { % POINTSIZE (& font)
	/FMpointsize exch def
	F % could be slightly optimized here
	} bind def

/T { % TEXT <string> <x> <y>
	moveto show
	} bind def

% Callers of RF (rotate/flip) must gsave (or save) first; (g)restore when done
/RF { % <flip> <theta>
	rotate
	0 ne {-1 1 scale} if
	} bind def

/TF { % TEXTFLIPROTATE <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	show
	grestore
	} bind def

/P { % PADTEXT <pad> <string> <x> <y>
	moveto
	0 32 3 2 roll widthshow
	} bind def

/PF { % PADTEXTFLIPROTATE <pad> <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def

/S { % SPREADTEXT <spread> <string> <x> <y>
	moveto
	0 exch ashow
	} bind def

/SF { % SPREADTEXTFLIPROTATE <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def

/B { % PADSPREADTEXT <pad> <spread> <string> <x> <y>
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def

/BF { % PADSPREADTEXTFLIPROTATE <pad> <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def

/G { % ARCFILL theta1 theta2 width height x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	PFill fill
	grestore
	} bind def

/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
    normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
    translate
    scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def

/Gclip { % ARCFILL theta1 theta2 width height x y swid
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	clip newpath
	restorematrix
	} bind def

/GG { % ARCFILL ROTATED theta1 theta2 width height angle x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	rotate % eats angle
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath
	PFill
	fill
	grestore
	} bind def

/GGclip { % ARCFILL ROTATED theta1 theta2 width height angle x y
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	clip newpath
	restorematrix
	} bind def

/GGstrk { % ARCFILL ROTATED swid theta1 theta2 width height angle x y
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/A { % ARCPEN theta1 theta2 width height x y
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
	normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
	translate 
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	strokepath clip newpath
	restorematrix
} bind def

/Astrk {
	Gstrk
} bind def

/AA { % ARCPEN ROTATED theta1 theta2 width height angle x y
	gsave
	savematrix
	newpath
	% theta1 theta2 width height angle x y
	3 index 2 div add exch 4 index 2 div sub exch 
	% theta1 theta2 width height angle x y
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate % eats x y
	rotate % eats angle
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	strokepath clip newpath
	restorematrix
} bind def

/AAstrk {
	GGstrk
} bind def

/BEGINPRINTCODE { % -x -y width height
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count 7 sub def % tricky! 7 params on stack, plus "/FMoptop"
	/FMsaveobject save def
	userdict begin % insulate user from FrameDict; not in /FMdicttop count
	/showpage {} def % this def is in userdict
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	3 index neg 3 index neg translate
	} bind def

/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for % clear user junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMsaveobject restore % this is now safe, unless user very malicious
	} bind def

/gn { % get a number in a funny encoding scheme
	0 % result on stack
	{	46 mul % shift old digits
		cf read pop % get next character
		32 sub % zero is the space character
		dup 46 lt {exit} if % quit if we're the last digit
		46 sub add % add in this digit and loop around for next
		} loop
	add % result on stack
	} bind def

/cfs { % create a string of length "sl" filled with "val"s
	/str sl string def % create string as "str"
	0 1 sl 1 sub {str exch val put} for % fill array
	str def % define real array name, too; name is on stack from caller
	} bind def

/ic [ % "case" stmt list of procedures that the image commands should call
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def

/ms { % make all the strings
	/sl exch def % remember length of currently existing strings
	/val 255 def % that's white
	/ws cfs % make "ws" a string filled with white
	/im cfs % and "im" is a complete image scanline
	/val 0 def % that's black
	/bs cfs % make "bs" a string filled with black
	/cs cfs % here's where we'll put complete command lines
	} bind def

400 ms % make strings that will be plenty long for most applications

/ip { % image procedure; reads and executes commands to make scanlines
	is % leave image string and...
	0 % ...image position on stack all through this procedure
	cf cs readline pop % get a string of commands
	{	ic exch get exec % execute next command
		add % all commands leave a length on the stack; update pos
		} forall % step through all commands
	pop % get rid of image position pointer
	% image string left on stack, so it's returned to image primitive
	} bind def
/rip { % this is similar to ip above, except for 24 bit images
	   % this takes an extra argument, the width of the image
	  % do red
	  bis ris copy pop % copy blue to red
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  ris gis copy pop % copy red to green
	  dup is exch % position of green is width bytes into is
	  % do green
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop % copy green to blue
	  dup add is exch % position of blue is 2*width bytes into is
	  % do blue
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def

/rip4 { % this is similar to ip above, except for 32 bit images
	   % this takes an extra argument, the width of the image
	  % do cyan
	  kis cis copy pop % copy black to cyan
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  cis mis copy pop % copy cyan to magenta
	  dup is exch % position of magenta is width bytes into is
	  % do magenta
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop % copy magenta to yellow
	  dup dup add is exch % position of yellow is 2*width bytes into is
	  % do yellow
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop % copy yellow to black
	  3 mul is exch % position of black is 3*width bytes into is
	  % do black
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def


/wh { % fill a number of bytes with "white"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	ws 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/bl { % fill a number of bytes with "black"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	bs 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/s1 1 string def

/fl { % fill a number of bytes with a specific hex value
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len % remember where we got to
	} bind def

/hx { % read hex bytes directly; on entry, stack has <str> <pos> <len>
	3 copy getinterval % stack has <str> <pos> <len> <substr>
	cf exch readhexstring pop pop % stack back to <str> <pos> <len>
	} bind def

/wbytes { % width depth -> wb      find width in bytes  given 1, 2, 8 or 24 or 32
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAPc
	} bind def
%
% Common routine for imaging compressed images
%
/COMMONBITMAPc { % iw, ih, width, height, theta, x y depth proc
		 % (x,y) is the lower left corner of the image
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc                % run the desired proc after save has occurred
	/is im 0 lb getinterval def % image substring
	ws 0 lb getinterval is copy pop % whiten it
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{ip} image % zap!
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def
/BEGINBITMAPBW { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAP
	} bind def
%
% Common routine for uncompressed images
%
/COMMONBITMAP { % iw, ih, width, height, theta, x y depth proc
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc              % run the desired proc after save has occurred
	/is width depth wbytes string def
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{cf is readhexstring pop} image
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def

%
% All this hairy color setup stuff gus wrote on the mac, I just copied and
% changed the variable names to be humanly readable.

/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def

fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
% The HP PaintJet XL300 ignores the gray transfer curve but still sets its
% default black generation and undercolor removal functions as if it is
% used. This causes black colors not to work. Bug#56844 <Gus 2/22/93>
% - We go back to the old (correct?) way of doing this since this code
% is now bypassed for PS Level 2 printers in favor of colorSetup2 which
% uses PS Level 2 indexed color, which is much cleaner. <Gus 3/3/93>
		/u kk currentundercolorremoval exec def
%-		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
% Here, we set up indexed color for imaging on PS Level 2 without mucking around
% with the transfer functions.

/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse

%
% Setup a transfer function to convert psuedo color values into grayscale
% values based on the color lookup tables.
%
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
%
% image a color image
%
/BITMAPCOLOR { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
%
% Compressed color image rendering
%
/BITMAPCOLORc { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
%
% image a color image to a b&width device
%
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { % c m y k width
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { % r g b width
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end % of FrameDict definitions

% OPI stuff
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def

% Dashed lines stuff
/I { setdash } bind def
/J { [] 0 setdash } bind def

%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 17 FMDOCUMENT
0 0 /Palatino-Italic FMFONTDEFINE
1 0 /Palatino-Bold FMFONTDEFINE
2 0 /Palatino-Roman FMFONTDEFINE
3 0 /Helvetica-Narrow-Bold FMFONTDEFINE
4 0 /Courier-Bold FMFONTDEFINE
5 0 /Palatino-BoldItalic FMFONTDEFINE
6 0 /Helvetica-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "91" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
108 81 540 117 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(91) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 513 504 648 R
7 X
V
2 30 Q
0 X
(2) 180 628 T
108 586.45 504 614 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 586.45 504 614 R
7 X
0 0 0 1 0 0 0 K
V
108 607.14 270 607.14 2 L
V
3 H
2 Z
0 X
N
108 598.14 270 598.14 2 L
7 X
V
1 H
0 X
N
36 72 576 720 C
0 0 0 0 1 1 1 K
2 2 Q
7 X
(2) 108 566.45 T
0 0 0 1 0 0 0 K
2 30 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan\325s COM,) 109 566.45 T
(OLE, and ActiveX Libraries) 108 528.45 T
108 126 486 432 R
7 X
V
3 16 Q
0 X
(2.1  Intr) 108 421.33 T
(oduction) 154.43 421.33 T
2 11 Q
(This chapter intr) 108 400.67 T
(oduces Harlequin Dylan\325s support for Micr) 188.44 400.67 T
(osoft\325s Compo-) 398.8 400.67 T
(nent Object Model, COM, and the various technologies based on it \321 Object) 108 386.67 T
(Linking and Embedding \050OLE\051 for compound documents, OLE Automation,) 108 372.67 T
(OLE/ActiveX contr) 108 358.67 T
(ols, and so on.) 203.58 358.67 T
1 F
-0.09 (Note:) 108 338.67 P
2 F
-0.09 ( Though \322ActiveX\323 is a common term nowadays, in this documentation) 135.19 338.67 P
(we generally use the longer) 108 324.67 T
(-standing term \322OLE\322. Discussions of OLE con-) 241.83 324.67 T
(tr) 108 310.67 T
(ols normally also apply to ActiveX contr) 115.73 310.67 T
(ols.) 311.67 310.67 T
1 F
-0.42 (Note:) 108 290.67 P
2 F
-0.42 ( Harlequin Dylan supports OLE2, and follows Micr) 135.19 290.67 P
-0.42 (osoft in r) 381.7 290.67 P
-0.42 (eferring to it) 424.03 290.67 P
(as simply \322OLE\323.) 108 276.67 T
(This chapter assumes a basic knowledge of the concepts of OLE compound) 108 256.67 T
(documents \050linking and embedding; servers and containers\051, OLE Automa-) 108 242.67 T
(tion \050servers and contr) 108 228.67 T
(ollers\051, and OLE contr) 217.53 228.67 T
(ols and contr) 324.61 228.67 T
(ol containers.) 387.63 228.67 T
3 16 Q
(2.2  Libraries) 108 193.33 T
2 11 Q
(Harlequin Dylan pr) 108 172.67 T
(ovides access to OLE/COM at thr) 203.85 172.67 T
(ee levels. The following) 367.96 172.67 T
(sections discuss each of them.) 108 158.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "91" 1
%%Page: "92" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Harlequin Dylan\325s COM, OLE, and ActiveX Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(92) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 13 Q
0 X
(2.2.1  High-le) 126 639.33 T
(vel DUIM integration) 191.62 639.33 T
2 11 Q
(At the highest level, the DUIM-OLE-Server and DUIM-OLE-Contr) 126 619.67 T
(ol libraries) 448.43 619.67 T
(pr) 126 605.67 T
(ovide a simple framework for building OLE server applications and OLE) 136.76 605.67 T
(contr) 126 591.67 T
(ols fr) 151.02 591.67 T
(om DUIM applications. \050DUIM, the Dylan User Interface Manager) 175.46 591.67 T
(,) 497.25 591.67 T
-0.08 (is Dylan\325s portable user interface toolkit. T) 126 577.67 P
-0.08 (o learn about DUIM, see the) 331.18 577.67 P
0 F
-0.08 (DUIM) 470.16 577.67 P
(User Guide) 126 563.67 T
2 F
( manual.\051 These libraries integrate smoothly with the DUIM pr) 177.04 563.67 T
(o-) 481.84 563.67 T
(gramming model.) 126 549.67 T
(See Chapter 3,  \322Compound Documents and OLE Contr) 126 529.67 T
(ols in DUIM\323 for) 397.79 529.67 T
(details of these libraries.) 126 515.67 T
(Ther) 126 495.67 T
(e is pr) 148.56 495.67 T
(esently no high-level framework for developing DUIM applica-) 177.95 495.67 T
-0.22 (tions that can be used as OLE containers, but you can use the lower) 126 481.67 P
-0.22 (-level OLE) 450.03 481.67 P
(API libraries to do so.) 126 467.67 T
3 13 Q
(2.2.2  Lo) 126 434.33 T
(w-le) 168.52 434.33 T
(vel FFI libraries) 189.12 434.33 T
2 11 Q
(At the lowest level, the COM, OLE, OLE-Dialogs OLE-Contr) 126 414.67 T
(ols, and OLE-) 419.55 414.67 T
(Automation libraries pr) 126 400.67 T
(esent a simple mapping of Dylan names to names) 241.26 400.67 T
(de\336ned in the Micr) 126 386.67 T
(osoft OLE/COM API. W) 218.79 386.67 T
(ith these libraries you can build) 338.62 386.67 T
(OLE/COM components without using DUIM, be they servers, containers,) 126 372.67 T
(contr) 126 358.67 T
(ols, automation servers, or automation contr) 151.02 358.67 T
(ollers. W) 366.56 358.67 T
(e built these librar-) 408.73 358.67 T
(ies using the Dylan C for) 126 344.67 T
(eign function interface \050FFI\051.) 246.51 344.67 T
126 290.01 504 298 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
2 11 Q
0 X
0 0 0 1 0 0 0 K
(T) 138.93 301.67 T
(able 2.1  OLE/COM FFI libraries and the corr) 144.66 301.67 T
(esponding W) 365.08 301.67 T
(indows \336les.) 429.61 301.67 T
(Dylan library) 146.26 261.67 T
(C header) 239.61 261.67 T
(Link library) 328.73 261.67 T
(Runtime) 435.33 268.67 T
(library) 440.01 254.67 T
2 9 Q
(COM) 139.57 233.01 T
(OBJBASE.H) 230.21 233.01 T
(OLE32.LIB,UUID.LIB) 305.07 233.01 T
(OLE32.DLL) 422.39 233.01 T
(OLE) 139.57 214.01 T
(OLE2.H) 230.21 214.01 T
(OLE32.LIB,UUID.LIB) 305.07 214.01 T
(OLE32.DLL) 422.39 214.01 T
(OLE-Automation) 139.57 195.01 T
(OLEAUT) 230.21 195.01 T
(O.H) 267.64 195.01 T
(OLEAUT32.LIB) 305.07 195.01 T
(OLEAUT32.DLL) 422.39 195.01 T
(OLE-Dialogs) 139.57 176.01 T
(OLEDLG.H) 230.21 176.01 T
(OLEDLG.LIB) 305.07 176.01 T
(OLEDLG.DLL) 422.39 176.01 T
(OLE-Contr) 139.57 157.01 T
(ols) 183.5 157.01 T
(OLECTL.H) 230.21 157.01 T
(OLEPRO32.LIB) 305.07 157.01 T
(OLEPRO32.DLL) 422.39 157.01 T
224.21 284.01 224.21 150.01 2 L
V
0.25 H
0 Z
N
299.07 284.01 299.07 150.01 2 L
V
N
416.39 284.01 416.39 150.01 2 L
V
N
133.57 245.01 496.43 245.01 2 L
V
N
133.57 226.01 496.43 226.01 2 L
V
N
133.57 207.01 496.43 207.01 2 L
V
N
133.57 188.01 496.43 188.01 2 L
V
N
133.57 169.01 496.43 169.01 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "92" 2
%%Page: "93" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2.2) 484.66 677.67 T
(Libraries) 506.04 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(93) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(These FFI libraries enable Dylan pr) 108 640.67 T
(ograms to use OLE/COM in much the) 278.06 640.67 T
(same way as a C++ pr) 108 626.67 T
(ogram would, assuming it used dir) 215.24 626.67 T
(ect OLE calls rather) 386.19 626.67 T
(than MFC. Y) 108 612.67 T
(ou can use most of function, type, variable, and constant names) 168.79 612.67 T
(documented in the OLE speci\336cations, though of course ther) 108 598.67 T
(e ar) 402.45 598.67 T
(e a few syn-) 420.11 598.67 T
(tactic modi\336cations to account for Dylan naming and coding conventions.) 108 584.67 T
(Chapter 6,  \322OLE FFI Facilities\323, describes these dif) 108 570.67 T
(fer) 356.04 570.67 T
(ences.) 369.12 570.67 T
3 13 Q
(2.2.3  Intermediate la) 108 537.33 T
(y) 212.69 537.33 T
(er libraries) 218.53 537.33 T
2 11 Q
(Between the high-level DUIM frameworks and the low-level FFI layer is an) 108 517.67 T
(intermediate layer of OLE/COM libraries. The OLE-Server and OLE-Contr) 108 503.67 T
(ol-) 472.02 503.67 T
(Framework libraries support compound documents and OLE contr) 108 489.67 T
(ols r) 434.69 489.67 T
(espec-) 455.46 489.67 T
(tively; they ar) 108 475.67 T
(e comparable to DUIM-OLE-Server and DUIM-OLE-Contr) 174.86 475.67 T
(ol,) 459.56 475.67 T
(but for use when building application user interfaces with the dir) 108 461.67 T
(ect W) 425.27 461.67 T
(in32) 452.16 461.67 T
(API libraries \050W) 108 447.67 T
(in32-User and W) 186.28 447.67 T
(in32-GDI\051 instead of DUIM. The OLE-Auto-) 267.9 447.67 T
(mation library includes a high-level framework for OLE Automation as well) 108 433.67 T
-0.11 (as a low-level FFI interface to the Micr) 108 419.67 P
-0.11 (osoft OLE Automation API, as exposed) 292.9 419.67 P
(thr) 108 405.67 T
(ough) 122.14 405.67 T
4 9.5 Q
(OLEAUTO.H) 150.04 405.67 T
2 11 Q
(,) 201.34 405.67 T
4 9.5 Q
(OLEAUT32.LIB) 206.84 405.67 T
2 11 Q
(, and) 275.24 405.67 T
4 9.5 Q
(OLEAUT32.DLL) 302.11 405.67 T
2 11 Q
(.) 370.52 405.67 T
108 131.01 486 139 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
2 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 166.67 142.67 T
(e 2.1  The Harlequin Dylan OLE/COM libraries.) 192.88 142.67 T
114.75 159 479.25 382 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
0 X
0 0 0 1 0 0 0 K
(OLE-Automation) 155.25 311.67 T
(OLE-Dialogs) 410.75 311.67 T
(COM) 272.25 365.67 T
(OLE) 348.75 311.67 T
(OLE-Server) 348.75 266.67 T
(DUIM-OLE-Server) 348.75 221.67 T
(DUIM-OLE-Contr) 150.75 176.67 T
(ol) 239.29 176.67 T
(OLE-Contr) 177.75 248.67 T
(ols) 231.44 248.67 T
285.75 364 357.75 319 2 L
0.25 H
2 Z
N
195.75 319 285.75 364 2 L
N
366.75 310 222.75 256 2 L
N
290.25 364 438.75 319 2 L
N
285.75 364 213.75 256 2 L
N
366.75 229 366.75 265 2 L
N
366.75 274 366.75 310 2 L
N
195.75 310 204.75 256 2 L
N
366.75 220 204.75 184 2 L
N
(OLE-Contr) 132.75 212.67 T
(ol-Framework) 186.44 212.67 T
366.75 310 240.75 220 2 L
N
366.75 265 249.75 220 2 L
N
195.75 310 159.75 220 2 L
N
204.75 247 186.75 220 2 L
N
231.75 211 204.75 184 2 L
N
36 72 576 720 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "93" 3
%%Page: "94" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Harlequin Dylan\325s COM, OLE, and ActiveX Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(94) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
-0.14 (See Chapter 4,  \322OLE Automation\323 for details of the OLE-Automation library) 126 640.67 P
-0.14 (.) 498.64 640.67 P
(The OLE-Server and OLE-Contr) 126 626.67 T
(ol-Framework libraries ar) 281.95 626.67 T
(e described in) 406.36 626.67 T
(Chapter 5,  \322The OLE-Server and OLE-Contr) 126 612.67 T
(ol-Framework Libraries\323.) 343.46 612.67 T
3 16 Q
(2.3  Choosing the right OLE/COM libraries) 126 577.33 T
2 11 Q
(Ther) 126 556.67 T
(e is mor) 148.56 556.67 T
(e than one way to write an OLE/COM component with Harle-) 187.06 556.67 T
(quin Dylan libraries. As we have seen, ther) 126 542.67 T
(e ar) 334.75 542.67 T
(e both high-level frameworks) 352.41 542.67 T
-0.39 (for developing particular kinds of components, and low-level FFI interfaces to) 126 528.67 P
(the major Micr) 126 514.67 T
(osoft OLE/COM API libraries. Which Dylan library should) 197.53 514.67 T
(you use to get the job done?) 126 500.67 T
(Most OLE/COM functionality is available thr) 126 480.67 T
(ough the low-level FFIs: OLE,) 348.07 480.67 T
(COM, OLE-Dialogs, OLE-Contr) 126 466.67 T
(ol, and parts of OLE-Automation. Y) 280.49 466.67 T
(ou could) 453.22 466.67 T
(use these libraries alone and achieve your goals, but it would painful and) 126 452.67 T
-0.2 (unnecessary given that Harlequin Dylan also of) 126 438.67 P
-0.2 (fers some higher) 356.17 438.67 P
-0.2 (-level abstrac-) 436.4 438.67 P
(tions. Obviously it is much better to start with the higher) 126 424.67 T
(-level libraries, and) 401.73 424.67 T
(delve into the lower levels only if you have certain r) 126 410.67 T
(equir) 378.51 410.67 T
(ements they do not) 403.92 410.67 T
(satisfy \321 this is particularly tr) 126 396.67 T
(ue if you ar) 272.83 396.67 T
(e not experienced in implementing) 328.25 396.67 T
(OLE/COM-based softwar) 126 382.67 T
(e using the C-based Micr) 252.99 382.67 T
(osoft APIs.) 373.87 382.67 T
-0.21 (The following sections explain which OLE/COM libraries ar) 126 362.67 P
-0.21 (e suitable for par-) 418.84 362.67 P
(ticular tasks.) 126 348.67 T
3 13 Q
(2.3.1  For compound document ser) 126 315.33 T
(ver applications) 303.23 315.33 T
2 11 Q
(The DUIM-OLE-Server and OLE-Server libraries ar) 126 295.67 T
(e both high-level frame-) 375.03 295.67 T
(works for developing compound document server applications. Y) 126 281.67 T
(our choice) 445.32 281.67 T
(of library depends on whether you ar) 126 267.67 T
(e using DUIM or the low-level W) 307.87 267.67 T
(in32) 469.05 267.67 T
(FFI libraries \050W) 126 253.67 T
(in32-user and W) 201.31 253.67 T
(in32-GDI; see the chapter on W) 281 253.67 T
(in32 API) 432.24 253.67 T
(libraries in the Inter) 126 239.67 T
(operability I r) 222.03 239.67 T
(efer) 288.5 239.67 T
(ence volume\051 to develop your server) 306.85 239.67 T
(application\325s user interface.) 126 225.67 T
(The OLE library) 126 205.67 T
(, an FFI interface to the C-based W) 203.57 205.67 T
(in32 OLE library) 370.48 205.67 T
(, is low-) 450.24 205.67 T
-0.01 (level but complete, and may be a useful supplement to the higher) 126 191.67 P
-0.01 (-level librar-) 444.1 191.67 P
(ies.) 126 177.67 T
(DUIM-OLE-Server exports the module) 126 157.67 T
4 9.5 Q
(DUIM-OLE-Server) 317.77 157.67 T
2 11 Q
(, and OLE-Server) 402.46 157.67 T
(exports the module) 126 143.67 T
4 9.5 Q
(OLE-Server) 223.21 143.67 T
2 11 Q
(.) 279.39 143.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "94" 4
%%Page: "95" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2.3) 367.32 677.67 T
(Choosing the right OLE/COM libraries) 388.69 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(95) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(The OLE library exports the module) 108 640.67 T
4 9.5 Q
(OLE) 286.75 640.67 T
2 11 Q
(.) 303.85 640.67 T
3 13 Q
(2.3.2  For compound document container applications) 108 607.33 T
2 11 Q
-0.19 (Use the OLE library) 108 587.67 P
-0.19 (, a low-level FFI to the W) 203.08 587.67 P
-0.19 (in32 OLE library) 323.05 587.67 P
-0.19 (, to develop com-) 402.43 587.67 P
(pound document container applications. Ther) 108 573.67 T
(e is pr) 330.86 573.67 T
(esently no high-level) 360.25 573.67 T
(framework for developing compound document containers, whether written) 108 559.67 T
-0.07 (using DUIM or the low-level W) 108 545.67 P
-0.07 (in32 FFI libraries. The OLE library exports the) 260.78 545.67 P
(module) 108 531.67 T
4 9.5 Q
(OLE) 148.29 531.67 T
2 11 Q
(.) 165.39 531.67 T
3 13 Q
(2.3.3  For OLE contr) 108 498.33 T
(ols) 209.11 498.33 T
2 11 Q
-0.25 (The DUIM-OLE-Contr) 108 478.67 P
-0.25 (ol and OLE-Contr) 217.45 478.67 P
-0.25 (ol-Framework libraries ar) 303.97 478.67 P
-0.25 (e both high-) 427.87 478.67 P
-0.01 (level frameworks for developing OLE contr) 108 464.67 P
-0.01 (ols. The choice of library depends) 319.78 464.67 P
(on whether you ar) 108 450.67 T
(e using DUIM or the low-level W) 197.51 450.67 T
(in32 FFI libraries \050W) 358.68 450.67 T
(in32-) 457.34 450.67 T
-0.09 (user and W) 108 436.67 P
-0.09 (in32-GDI; see the chapter on W) 163.24 436.67 P
-0.09 (in32 API libraries in the Inter) 314.02 436.67 P
-0.09 (opera-) 454.61 436.67 P
(bility I r) 108 422.67 T
(efer) 146.74 422.67 T
(ence volume\051 to develop your contr) 165.09 422.67 T
(ol\325s user interface.) 338.37 422.67 T
-0.38 (The OLE and OLE-Contr) 108 402.67 P
-0.38 (ols libraries, both FFI interfaces to the C-based W) 227.92 402.67 P
-0.38 (in32) 463.03 402.67 P
(OLE \050compound documents\051 and OLEPRO32 \050OLE contr) 108 388.67 T
(ols\051 libraries, ar) 385.89 388.67 T
(e) 461.13 388.67 T
(low-level but complete, and may be a useful supplements to the higher) 108 374.67 T
(-level) 452.92 374.67 T
(libraries.) 108 360.67 T
(The DUIM-OLE-Contr) 108 340.67 T
(ol library exports the module) 217.7 340.67 T
4 9.5 Q
(DUIM-OLE-Control) 362.41 340.67 T
2 11 Q
(, and) 453.61 340.67 T
(the OLE-Contr) 108 326.67 T
(ol-Framework library exports the module) 179.7 326.67 T
4 9.5 Q
(OLE-Control-) 384.65 326.67 T
(Framework) 108 312.67 T
2 11 Q
(.) 159.3 312.67 T
(The OLE library exports the module) 108 292.67 T
4 9.5 Q
(OLE) 286.75 292.67 T
2 11 Q
(, and the OLE-Contr) 303.85 292.67 T
(ols library) 402.42 292.67 T
(exports the module) 108 278.67 T
4 9.5 Q
(OLE-Controls) 205.21 278.67 T
2 11 Q
(.) 273.61 278.67 T
3 13 Q
(2.3.4  For OLE contr) 108 245.33 T
(ol container applications) 209.11 245.33 T
2 11 Q
-0.42 (Use the low-level libraries OLE and OLE-Contr) 108 225.67 P
-0.42 (ols for developing OLE contr) 335.14 225.67 P
-0.42 (ol) 474.46 225.67 P
-0.42 (container applications. These libraries ar) 108 211.67 P
-0.42 (e FFI interfaces to the W) 302.83 211.67 P
-0.42 (in32 OLE and) 417.7 211.67 P
(OLEPRO32 libraries r) 108 197.67 T
(espectively) 213.18 197.67 T
(. Ther) 266.25 197.67 T
(e is pr) 294.31 197.67 T
(esently no high-level framework) 323.7 197.67 T
(for developing contr) 108 183.67 T
(ol containers, whether written using DUIM or the low-) 207.55 183.67 T
(level W) 108 169.67 T
(in32 FFI libraries.) 144.3 169.67 T
(The OLE library exports the module) 108 149.67 T
4 9.5 Q
(OLE) 286.75 149.67 T
2 11 Q
(, and the OLE-Contr) 303.85 149.67 T
(ols library) 402.42 149.67 T
(exports the module) 108 135.67 T
4 9.5 Q
(OLE-Controls) 205.21 135.67 T
2 11 Q
(.) 273.61 135.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "95" 5
%%Page: "96" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Harlequin Dylan\325s COM, OLE, and ActiveX Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(96) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 13 Q
0 X
(2.3.5  For OLE A) 126 639.33 T
(utomation ser) 208.04 639.33 T
(ver) 278.63 639.33 T
(s and contr) 294.49 639.33 T
(oller) 351.76 639.33 T
(s) 374.13 639.33 T
2 11 Q
-0.02 (The OLE Automation library pr) 126 619.67 P
-0.02 (ovides a high-level framework suitable for all) 280.17 619.67 P
(OLE Automation implementations, and additionally pr) 126 605.67 T
(ovides an FFI to the) 394.84 605.67 T
(W) 126 591.67 T
(in32 OLEAUT32 library) 136.4 591.67 T
(. Y) 251.01 591.67 T
(ou can use this library to implement OLE Auto-) 262.84 591.67 T
(mation applications r) 126 577.67 T
(egar) 229.42 577.67 T
(dless of whether you ar) 250.45 577.67 T
(e using DUIM or the W) 364.49 577.67 T
(in32) 477.71 577.67 T
-0.12 (API to write your user interface. Indeed, you can use OLE Automation in con-) 126 563.67 P
(sole applications.) 126 549.67 T
(The OLE-Automation library exports the module) 126 529.67 T
4 9.5 Q
(OLE-Automation) 367.6 529.67 T
2 11 Q
(.) 447.4 529.67 T
3 13 Q
(2.3.6  For OLE dialogs) 126 496.33 T
2 11 Q
(The OLE-Dialogs library pr) 126 476.67 T
(ovides a low-level FFI interface to the OLE com-) 259.17 476.67 T
-0.1 (mon dialogs of the C-based W) 126 462.67 P
-0.1 (in32 OLE-DLG library) 271.82 462.67 P
-0.1 (. The library pr) 378.68 462.67 P
-0.1 (ovides the) 451.36 462.67 P
(following dialogs: Insert Object dialog, Convert Object dialog, Paste Special) 126 448.67 T
(dialog, Change Icon dialog, Edit Links dialog, Update Links dialog, Change) 126 434.67 T
(Sour) 126 420.67 T
(ce dialog, Busy dialog, User Err) 148.56 420.67 T
(or Message dialog, and Object Pr) 301.64 420.67 T
(operties) 461.58 420.67 T
(dialog.) 126 406.67 T
(The OLE-Dialogs library exports the module) 126 386.67 T
4 9.5 Q
(OLE-Dialogs) 345.61 386.67 T
2 11 Q
(.) 408.32 386.67 T
3 16 Q
(2.4  Intr) 126 351.33 T
(oduction to OLE/COM) 172.43 351.33 T
2 11 Q
(This section yet to be written. Note that David Chappel\325s book, Understand-) 126 330.67 T
(ing ActiveX and OLE \050Micr) 126 316.67 T
(osoft Pr) 258.78 316.67 T
(ess, 1996\051 is an excellent intr) 296.25 316.67 T
(oduction to) 432.87 316.67 T
(COM and the technologies built upon it.) 126 302.67 T
3 16 Q
(2.5  Basics of the Dylan OLE/COM API) 126 267.33 T
2 11 Q
(This section describes basic featur) 126 246.67 T
(es of the Harlequin Dylan OLE/COM API.) 290.25 246.67 T
3 13 Q
(2.5.1  GUIDs: Globall) 126 213.33 T
(y Unique Identi\336er) 230.73 213.33 T
(s) 323.59 213.33 T
2 11 Q
(Globally unique identi\336ers \050GUIDs\051 ar) 126 193.67 T
(e a cor) 313.12 193.67 T
(e concept in COM. Client appli-) 344.43 193.67 T
(cations use them to identify the COM interfaces and objects implemented by) 126 179.67 T
(server applications and OLE contr) 126 165.67 T
(ols. By using GUIDs, server applications) 292.21 165.67 T
(and contr) 126 151.67 T
(ols written with COM can be identi\336ed uniquely on any computer) 172.4 151.67 T
(system, anywher) 126 137.67 T
(e.) 208.52 137.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "96" 6
%%Page: "97" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2.5) 380.27 677.67 T
(Basics of the Dylan OLE/COM API) 401.64 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(97) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
-0.12 (Once you have the GUIDs you need for the server or contr) 108 640.67 P
-0.12 (ol softwar) 390.58 640.67 P
-0.12 (e you ar) 439.16 640.67 P
-0.12 (e) 478.1 640.67 P
(writing, you can associate those GUIDs with its interfaces and COM classes.) 108 626.67 T
(These identi\336ers must r) 108 612.67 T
(emain \336xed for all time so that client softwar) 222.65 612.67 T
(e will) 439.77 612.67 T
(always be able to \336nd your COM class or the interfaces it pr) 108 598.67 T
(ovides.) 398.73 598.67 T
(Ther) 108 578.67 T
(eafter) 130.56 578.67 T
(, you can r) 157.38 578.67 T
(egister your COM softwar) 208.07 578.67 T
(e, and the services it pr) 335.46 578.67 T
(ovides,) 447.16 578.67 T
(on a machine that supports COM, and other COM softwar) 108 564.67 T
(e will be able to) 391.65 564.67 T
(\336nd and use your softwar) 108 550.67 T
(e using GUIDs to identify it. COM softwar) 233.81 550.67 T
(e is r) 440.06 550.67 T
(egis-) 462.84 550.67 T
(ter) 108 536.67 T
(ed in the W) 121 536.67 T
(indows system r) 176.5 536.67 T
(egistry) 256.32 536.67 T
(.) 288.4 536.67 T
-0.27 (Ther) 108 516.67 P
-0.27 (e ar) 130.56 516.67 P
-0.27 (e two stages to cr) 147.96 516.67 P
-0.27 (eating GUIDs for use in applications. First, you need) 230.35 516.67 P
-0.09 (to generate the ID number) 108 502.67 P
-0.09 (. Then the ID number has be encoded in a special C) 235.12 502.67 P
-0.44 (type that the W) 108 488.67 P
-0.44 (indows OLE/COM libraries understand. The Harlequin Dylan) 181.24 488.67 P
(OLE/COM API libraries need to pass GUIDs to W) 108 474.67 T
(indows in this C format.) 352.84 474.67 T
3 13 Q
(2.5.1.1  Creating GUID n) 108 441.33 T
(umber) 228.77 441.33 T
(s) 261.2 441.33 T
2 11 Q
-0.02 (T) 108 421.67 P
-0.02 (o cr) 113.73 421.67 P
-0.02 (eate the numbers that make up a GUID, you need to r) 131.5 421.67 P
-0.02 (un a special utility) 392.15 421.67 P
-0.02 (.) 480.52 421.67 P
-0.23 (Harlequin Dylan of) 108 407.67 P
-0.23 (fers a utility called) 202.11 407.67 P
4 9.5 Q
-0.48 (create-id) 293.93 407.67 P
2 11 Q
-0.23 ( for generating GUIDs. Own-) 345.23 407.67 P
(ers of Micr) 108 393.67 T
(osoft W) 160.09 393.67 T
(indows pr) 197.15 393.67 T
(ogramming tools and development kits have a) 246.83 393.67 T
(further choice with the utility UUIDGEN. \050UUID is another name for GUID.\051) 108 379.67 T
(Y) 108 365.67 T
(ou can use whichever utility you like.) 114.32 365.67 T
(The) 108 345.67 T
4 9.5 Q
(create-id) 129.16 345.67 T
2 11 Q
( pr) 180.46 345.67 T
(ogram is a console-mode pr) 193.97 345.67 T
(ogram to be r) 328.58 345.67 T
(un fr) 393.71 345.67 T
(om an MS-) 417.3 345.67 T
(DOS command pr) 108 331.67 T
(ompt. It accepts a single ar) 196.13 331.67 T
(gument, which is the number of) 325.24 331.67 T
-0.34 (GUIDs you wish generate. The default is one GUID. The generated GUIDs ar) 108 317.67 P
-0.34 (e) 478.32 317.67 P
-0.2 (written to standar) 108 303.67 P
-0.2 (d output in the form of string literals that can be pasted into) 194.77 303.67 P
(Dylan sour) 108 289.67 T
(ce code.) 161.93 289.67 T
(This is an example of using) 108 269.67 T
4 9.5 Q
(create-id) 243.2 269.67 T
2 11 Q
( to cr) 294.5 269.67 T
(eate four GUID numbers:) 318.62 269.67 T
4 9 Q
(ms-dos> create-id 4) 135 249 T
("{C16C1BFE-41DA-11D1-9A58-006097C90313}") 135 238 T
("{C16C1BFF-41DA-11D1-9A58-006097C90313}") 135 227 T
("{C16C1C00-41DA-11D1-9A58-006097C90313}") 135 216 T
("{C16C1C01-41DA-11D1-9A58-006097C90313}") 135 205 T
(ms-dos>) 135 194 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "97" 7
%%Page: "98" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Harlequin Dylan\325s COM, OLE, and ActiveX Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(98) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 13 Q
0 X
(2.5.1.2  Making a GUID instance) 126 639.33 T
2 11 Q
(After generating all the GUID numbers you need for the dif) 126 619.67 T
(fer) 415.64 619.67 T
(ent parts of) 428.72 619.67 T
-0.29 (your application, the next stage is to supply those GUIDs in the pr) 126 605.67 P
-0.29 (oper format) 444.04 605.67 P
(when you instantiate the classes, interfaces, and so on that the GUIDs will) 126 591.67 T
(identify) 126 577.67 T
(.) 162.94 577.67 T
(Y) 126 557.67 T
(ou need to supply GUIDs when making instances of classes such as) 132.32 557.67 T
4 9.5 Q
(<embeddable-frame>) 126 543.67 T
2 11 Q
( \050fr) 228.6 543.67 T
(om the DUIM-OLE-Server and DUIM-OLE-Contr) 242.82 543.67 T
(ol) 483.78 543.67 T
(libraries\051, and) 126 529.67 T
4 9.5 Q
(<class-factory>) 193.6 529.67 T
2 11 Q
( \050fr) 279.1 529.67 T
(om the OLE-Automation and OLE-Server) 293.32 529.67 T
(libraries\051.) 126 515.67 T
(The Harlequin Dylan OLE/COM API of) 126 495.67 T
(fers two ways of doing this. The sim-) 321.74 495.67 T
(plest, but least ef) 126 481.67 T
(\336cient method, is to pass the GUID as a string, in the format) 207.59 481.67 T
-0.08 (output by the utility) 126 467.67 P
4 9.5 Q
-0.17 (create-id) 226.71 467.67 P
2 11 Q
-0.08 ( \050see \322Cr) 278.01 467.67 P
-0.08 (eating GUID numbers\323 , above\051. That) 319.66 467.67 P
(format is:) 126 453.67 T
4 9 Q
("{) 153 433 T
5 F
(xxxxxxxx) 163.8 433 T
4 F
(-) 199.8 433 T
5 F
(xxxx) 205.2 433 T
4 F
(-) 223.2 433 T
5 F
(xxxx) 228.6 433 T
4 F
(-) 246.6 433 T
5 F
(xxxx) 252 433 T
4 F
(-) 270 433 T
5 F
(xxxxxxxxxxxx) 275.4 433 T
4 F
(}") 329.4 433 T
2 11 Q
(Wher) 126 412.67 T
(e each) 152.82 412.67 T
0 F
(x) 185.64 412.67 T
2 F
( is a hexadecimal digit. For example:) 191.14 412.67 T
4 9 Q
("{C16C1BFE-41DA-11D1-9A58-006097C90313}") 153 392 T
2 11 Q
(Y) 126 371.67 T
(ou could paste these strings dir) 132.32 371.67 T
(ectly into your code, to server as init ar) 284.03 371.67 T
(gu-) 472.91 371.67 T
(ments for the various classes that r) 126 357.67 T
(equir) 294.04 357.67 T
(e GUIDs.) 319.45 357.67 T
(The second, and mor) 126 337.67 T
(e ef) 227.85 337.67 T
(\336cient, way to supply a GUID is to pass the output) 244.6 337.67 T
-0.19 (fr) 126 323.67 P
-0.19 (om) 133.81 323.67 P
4 9.5 Q
-0.4 (create-id) 152.09 323.67 P
2 11 Q
-0.19 ( as a series of ar) 203.39 323.67 P
-0.19 (guments to the function) 278.57 323.67 P
4 9.5 Q
-0.4 (make-GUID) 396.81 323.67 P
2 11 Q
-0.19 (, which cr) 448.11 323.67 P
-0.19 (e-) 495.07 323.67 P
(ates the C data that the native W) 126 309.67 T
(indows OLE/COM libraries need to r) 283.53 309.67 T
(epr) 466.26 309.67 T
(e-) 482.29 309.67 T
(sent the GUID, and r) 126 295.67 T
(eturns a handle on that data as an instance of the class) 226.87 295.67 T
4 9.5 Q
(<REFGUID>) 126 281.67 T
2 11 Q
(. \050The class) 177.3 281.67 T
4 9.5 Q
(<REFGUID>) 233.29 281.67 T
2 11 Q
( also turns up in the Harlequin Dylan librar-) 284.59 281.67 T
(ies under the aliases) 126 267.67 T
4 9.5 Q
(<REFCLSID>) 226.76 267.67 T
2 11 Q
( and) 283.76 267.67 T
4 9.5 Q
(<REFIID>) 307.88 267.67 T
2 11 Q
(.\051) 353.48 267.67 T
(The DUIM-OLE-Server) 126 247.67 T
(, DUIM-OLE-Contr) 238.17 247.67 T
(ol, OLE-Automation, OLE-Server) 332.21 247.67 T
(and OLE-Contr) 126 233.67 T
(ol-Framework libraries all export) 201.06 233.67 T
4 9.5 Q
(make-GUID) 364.72 233.67 T
2 11 Q
(.) 416.02 233.67 T
(The following is a brief description of) 126 213.67 T
4 9.5 Q
(make-GUID) 311.12 213.67 T
2 11 Q
(. A description of) 362.42 213.67 T
4 9.5 Q
(make-GUID) 449.29 213.67 T
2 11 Q
(also appears in the r) 126 199.67 T
(efer) 223.88 199.67 T
(ence material for each library that exports it.) 242.23 199.67 T
3 12 Q
(make-GUID) 126 165 T
0 11 Q
(Function) 463.45 165.67 T
4 9 Q
(make-GUID) 153 145 T
5 F
(l) 207 145 T
(w1) 215.4 145 T
(w2) 232.79 145 T
(b1) 250.19 145 T
(b2) 264.92 145 T
(b3) 279.66 145 T
(b4) 294.39 145 T
(b5) 309.12 145 T
(b6) 323.86 145 T
(b7) 338.59 145 T
(b8) 353.32 145 T
4 F
( =>) 362.65 145 T
5 F
(ID) 384.26 145 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "98" 8
%%Page: "99" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2.5) 380.27 677.67 T
(Basics of the Dylan OLE/COM API) 401.64 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(99) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
-0.27 (Returns an object r) 135 640.67 P
-0.27 (epr) 225.13 640.67 P
-0.27 (esenting a a globally unique identi\336er \050GUID\051, cr) 241.16 640.67 P
-0.27 (e-) 477.07 640.67 P
-0.21 (ated fr) 135 626.67 P
-0.21 (om the hexadecimal ar) 166.42 626.67 P
-0.21 (guments. The ID value is an instance of the) 275.99 626.67 P
-0.11 (class) 135 612.67 P
4 9.5 Q
-0.23 (<REFGUID>) 160.55 612.67 P
2 11 Q
-0.11 (. This function cr) 211.85 612.67 P
-0.11 (eates the C str) 293.34 612.67 P
-0.11 (uctur) 361.11 612.67 P
-0.11 (e necessary to r) 387 612.67 P
-0.11 (epr) 461.04 612.67 P
-0.11 (e-) 477.07 612.67 P
(sent a GUID in the native W) 135 598.67 T
(indows OLE/COM libraries.) 271.52 598.67 T
(The ar) 135 578.67 T
(guments to make-GUID ar) 165.81 578.67 T
(e taken fr) 295.12 578.67 T
(om the output of the GUID-) 340.57 578.67 T
(generation utility) 135 564.67 T
4 9.5 Q
(create-id) 222.12 564.67 T
2 11 Q
(. Given the following value fr) 273.42 564.67 T
(om) 416.26 564.67 T
4 9.5 Q
(create-) 434.72 564.67 T
(id) 135 550.67 T
2 11 Q
(:) 146.4 550.67 T
4 9 Q
("{113f2c00-f87b-11cf-89fd-02070119f639}") 145.8 530 T
2 11 Q
(you need to split the value into parts as follows, and for each add the) 135 509.67 T
(pr) 135 495.67 T
(e\336x #x. For example:) 145.76 495.67 T
4 9 Q
(define constant $my-class-ID =) 145.8 475 T
(make-GUID\050#x113f2c00, #xf87b, #x11cf, #x89, #xfd, #x02, #x07,) 156.6 464 T
(#x01, #x19, #xf6, #x39\051;) 210.6 453 T
3 13 Q
(2.5.2) 108 421.33 T
(Registering OLE ser) 137.64 421.33 T
(ver) 240.24 421.33 T
(s and OLE contr) 256.1 421.33 T
(ols) 338.24 421.33 T
2 11 Q
-0.17 (All the dif) 108 401.67 P
-0.17 (fer) 156.76 401.67 P
-0.17 (ent kinds of OLE/COM server softwar) 169.84 401.67 P
-0.17 (e \321 compound document) 357.22 401.67 P
(server applications, Automation server applications, and OLE contr) 108 387.67 T
(ols \321) 436.62 387.67 T
(must be r) 108 373.67 T
(egister) 153.6 373.67 T
(ed with W) 185.85 373.67 T
(indows so that OLE/COM client applications \321) 236.1 373.67 T
(compound document containers, automation contr) 108 359.67 T
(ollers, and OLE contr) 355.36 359.67 T
(ol) 458.78 359.67 T
-0.24 (containers \321 can use them. Until a server or contr) 108 345.67 P
-0.24 (ol has been r) 348.85 345.67 P
-0.24 (egister) 409.32 345.67 P
-0.24 (ed, ther) 441.57 345.67 P
-0.24 (e) 478.22 345.67 P
(is no way for the client to \336nd it.) 108 331.67 T
(Servers and contr) 108 311.67 T
(ols typically r) 193.03 311.67 T
(egister themselves. Registration involves the) 258.96 311.67 T
(server or contr) 108 297.67 T
(ol entering its own COM Class ID into the W) 178.98 297.67 T
(indows system) 396.31 297.67 T
(r) 108 283.67 T
(egistry) 112.15 283.67 T
(. If a server or contr) 144.22 283.67 T
(ol implements mor) 239.08 283.67 T
(e than one COM object, it must) 331.28 283.67 T
(r) 108 269.67 T
(egister the Class ID for each one.) 112.15 269.67 T
(The Class ID is r) 108 249.67 T
(ecor) 187.48 249.67 T
(ded alongside the pathname to the server executable, or) 207.78 249.67 T
(contr) 108 235.67 T
(ol OCX or DLL \336le. When a client application asks to connect to a COM) 133.02 235.67 T
(object with a particular Class ID, the native W) 108 221.67 T
(indows OLE/COM libraries) 330.7 221.67 T
(consult the r) 108 207.67 T
(egistry to \336nd the path to the server or contr) 168.28 207.67 T
(ol that implements) 383.39 207.67 T
(the COM object in question, using the Class ID as a key) 108 193.67 T
(.) 375.3 193.67 T
-0.27 (Conventionally) 108 173.67 P
-0.27 (, you r) 182.09 173.67 P
-0.27 (egister server applications by calling them with the com-) 212.69 173.67 P
(mand-line ar) 108 159.67 T
(gument) 170.47 159.67 T
4 9.5 Q
(\134RegServer) 210.94 159.67 T
2 11 Q
( or) 267.94 159.67 T
4 9.5 Q
(-RegServer) 283.79 159.67 T
2 11 Q
(. For example:) 339.98 159.67 T
4 9 Q
(ms-dos> my-server-app.exe /RegServer) 135 139 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "99" 9
%%Page: "100" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Harlequin Dylan\325s COM, OLE, and ActiveX Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(100) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(The application r) 126 640.67 T
(ecognizes the r) 208.76 640.67 T
(egistration r) 280.98 640.67 T
(equest, r) 339.75 640.67 T
(egisters itself, and exits) 380.98 640.67 T
(without doing anything else. Applications can also unr) 126 626.67 T
(egister themselves) 392.93 626.67 T
(when they r) 126 612.67 T
(eceive the command-line ar) 184.27 612.67 T
(gument) 318.2 612.67 T
4 9.5 Q
(\134UnregServer) 358.67 612.67 T
2 11 Q
( or) 427.07 612.67 T
4 9.5 Q
(-Unreg-) 442.92 612.67 T
(Server) 126 598.67 T
2 11 Q
(.) 159.39 598.67 T
(The Harlequin Dylan OLE/COM API pr) 126 578.67 T
(ovides functions to help simplify the) 323.03 578.67 T
(coding you need to do for r) 126 564.67 T
(egistration. For details, see the documentation for) 258.73 564.67 T
(the library you will be using.) 126 550.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "100" 10
%%Page: "101" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 540 117 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(101) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 513 504 648 R
7 X
V
2 30 Q
0 X
(3) 180 628 T
108 586.45 504 614 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 586.45 504 614 R
7 X
0 0 0 1 0 0 0 K
V
108 607.14 270 607.14 2 L
V
3 H
2 Z
0 X
N
108 598.14 270 598.14 2 L
7 X
V
1 H
0 X
N
36 72 576 720 C
0 0 0 0 1 1 1 K
2 2 Q
7 X
(3) 108 566.45 T
0 0 0 1 0 0 0 K
2 30 Q
0 X
0 0 0 1 0 0 0 K
(Compound Documents and) 109 566.45 T
(OLE Contr) 108 528.45 T
(ols in DUIM) 251.94 528.45 T
108 126 486 432 R
7 X
V
3 16 Q
0 X
(3.1  Intr) 108 421.33 T
(oduction) 154.43 421.33 T
2 11 Q
(This chapter explains how to write DUIM applications that implement OLE) 108 400.67 T
(compound document servers, by using the DUIM-OLE-Server library; and) 108 386.67 T
(applications that implement OLE contr) 108 372.67 T
(ols, by using the DUIM-OLE-Contr) 297.52 372.67 T
(ol) 468.15 372.67 T
(library) 108 358.67 T
(.) 139.57 358.67 T
3 16 Q
(3.2  About the DUIM-OLE-Ser) 108 323.33 T
(ver librar) 288.91 323.33 T
(y) 345.2 323.33 T
2 11 Q
(The DUIM-OLE-Server library allows you to cr) 108 302.67 T
(eate a DUIM application that) 336.65 302.67 T
(can be used as an OLE compound document server) 108 288.67 T
(.) 357.06 288.67 T
-0.12 (In other wor) 108 268.67 P
-0.12 (ds, the pr) 168.3 268.67 P
-0.12 (ogram can either be r) 213.71 268.67 P
-0.12 (un by itself, or it can be embedded) 316.36 268.67 P
-0.49 (within an OLE container application. Because DUIM-OLE-Server is integrated) 108 254.67 P
(tightly with the standar) 108 240.67 T
(d DUIM pr) 222.6 240.67 T
(ogramming model, you do not need to) 276.76 240.67 T
(know anything about the low-level Harlequin Dylan OLE/COM API or) 108 226.67 T
(Micr) 108 212.67 T
(osoft\325s OLE SDK to use it.) 130.64 212.67 T
(If you want to write a compound document server using Harlequin Dylan\325s) 108 192.67 T
(dir) 108 178.67 T
(ect W) 122.07 178.67 T
(in32 API instead of DUIM, you should use the OLE-Server library) 148.95 178.67 T
(.) 467.66 178.67 T
(See .) 108 164.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "101" 11
%%Page: "102" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Compound Documents and OLE Controls in DUIM) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(102) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 13 Q
0 X
(3.2.1  Limitations of the DUIM-OLE-Ser) 126 639.33 T
(ver librar) 320.99 639.33 T
(y) 366.72 639.33 T
2 11 Q
(Ther) 126 619.67 T
(e ar) 148.56 619.67 T
(e a few limitations on what you can do with the DUIM-OLE-Server) 166.23 619.67 T
-0.14 (library) 126 605.67 P
-0.14 (. These limitations do not pr) 157.57 605.67 P
-0.14 (event you fr) 293.45 605.67 P
-0.14 (om using standar) 351.98 605.67 P
-0.14 (d OLE/COM) 436.45 605.67 P
(featur) 126 591.67 T
(es in your applications, but you will need to use the lower) 154.8 591.67 T
(-level OLE-) 436.51 591.67 T
(Server and OLE libraries to access the missing featur) 126 577.67 T
(es.) 381.21 577.67 T
(\245) 135 557.67 T
(Adding additional contr) 153 557.67 T
(ol or label panes ar) 271.28 557.67 T
(ound an in-place activation.) 363.19 557.67 T
(\245) 135 537.67 T
(Clipboar) 153 537.67 T
(d.) 195.55 537.67 T
(\245) 135 517.67 T
(Drag and dr) 153 517.67 T
(op.) 212.47 517.67 T
(\245) 135 497.67 T
(Context-sensitive help.) 153 497.67 T
(\245) 135 477.67 T
(Undo.) 153 477.67 T
(\245) 135 457.67 T
(Pr) 153 457.67 T
(esentation as icon or thumbnail.) 163.79 457.67 T
(\245) 135 437.67 T
(Additional considerations for MDI context.) 153 437.67 T
(\245) 135 417.67 T
(Cloning of an embedded object.) 153 417.67 T
(\245) 135 397.67 T
(Using container) 153 397.67 T
(\325s r) 231.1 397.67 T
(ecommended color palette.) 245.72 397.67 T
(The library only allows you build an embedded local compound document) 126 377.67 T
(server \321 that is, an executable \050) 126 363.67 T
4 9.5 Q
(.EXE) 280.23 363.67 T
2 11 Q
(\051 \336le with either in-place or out-of-place) 303.03 363.67 T
(activation.) 126 349.67 T
(The library does not support OLE \322linking\323, wher) 126 329.67 T
(e the server) 369.03 329.67 T
(\325s persistent) 425.98 329.67 T
(data is stor) 126 315.67 T
(ed in its own \336le instead of as part of the compound document,) 179.07 315.67 T
(with the compound document containing a link to the other \336le.) 126 301.67 T
-0.31 (The library does not allow you to build an in-pr) 126 281.67 P
-0.31 (ocess server \321 that is, a server) 355.02 281.67 P
(built as) 126 267.67 T
4 9.5 Q
(.DLL) 164.37 267.67 T
2 11 Q
( \336le that r) 187.17 267.67 T
(uns in the container) 233.87 267.67 T
(\325s pr) 331.09 267.67 T
(ocess.) 352.32 267.67 T
3 13 Q
(3.2.2  Modules e) 126 234.33 T
(xpor) 207.63 234.33 T
(ted fr) 230.94 234.33 T
(om DUIM-OLE-Ser) 257.39 234.33 T
(ver) 349.89 234.33 T
2 11 Q
(The DUIM-OLE-Server library exports the module) 126 214.67 T
4 9.5 Q
(DUIM-OLE-Server) 374.48 214.67 T
2 11 Q
(.) 459.17 214.67 T
3 13 Q
(3.2.3  A note about compound document container applications and DUIM) 126 181.33 T
2 11 Q
(Ther) 126 161.67 T
(e is no DUIM-based framework equivalent to DUIM-OLE-Server for) 148.56 161.67 T
-0.21 (implementing compound document) 126 147.67 P
0 F
-0.21 (container) 304.5 147.67 P
2 F
-0.21 ( applications. T) 346.26 147.67 P
-0.21 (o write container) 419.19 147.67 P
(applications, you must use OLE, the low-level FFI library) 126 133.67 T
(. Y) 402.84 133.67 T
(ou can, of course,) 414.66 133.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "102" 12
%%Page: "103" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.3) 368.66 677.67 T
(About the DUIM-OLE-Control library) 390.03 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(103) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
-0.16 (still write your application\325s user interface in DUIM, but the OLE side of your) 108 640.67 P
-0.42 (implementation will not be so closely integrated with DUIM as it would be for) 108 626.67 P
(a server written using DUIM-OLE-Server) 108 612.67 T
(.) 308.19 612.67 T
3 16 Q
(3.3) 108 577.33 T
(About the DUIM-OLE-Contr) 133.54 577.33 T
(ol librar) 302.37 577.33 T
(y) 350.62 577.33 T
2 11 Q
(The DUIM-OLE-Contr) 108 556.67 T
(ol library allows you to build an OLE Contr) 217.7 556.67 T
(ol using) 429.56 556.67 T
-0.02 (DUIM to de\336ne its user interface elements. Using DUIM-OLE-Contr) 108 542.67 P
-0.02 (ol is simi-) 439.02 542.67 P
(lar to using DUIM-OLE-Server; this r) 108 528.67 T
(e\337ects the fact that OLE Contr) 287.97 528.67 T
(ols shar) 434.07 528.67 T
(e) 471.41 528.67 T
(some of the characteristics of OLE compound document servers, such as) 108 514.67 T
(being embeddable.) 108 500.67 T
(Because DUIM-OLE-Contr) 108 480.67 T
(ol is integrated tightly with the standar) 238.23 480.67 T
(d DUIM) 428.14 480.67 T
(pr) 108 466.67 T
(ogramming model, you do not need to know anything about the low-level) 118.76 466.67 T
(Harlequin Dylan OLE/COM API or Micr) 108 452.67 T
(osoft\325s OLE SDK to use it.) 308.85 452.67 T
(If you want to write an OLE contr) 108 432.67 T
(ol using Harlequin Dylan\325s dir) 272.22 432.67 T
(ect W) 420.83 432.67 T
(in32) 447.71 432.67 T
(API instead of DUIM, you should use the OLE-Contr) 108 418.67 T
(ol-Framework library) 365.75 418.67 T
(.) 469.53 418.67 T
(See .) 108 404.67 T
3 13 Q
(3.3.1  Limitations) 108 371.33 T
(3.3.2) 108 338.33 T
(Modules e) 137.64 338.33 T
(xpor) 189.63 338.33 T
(ted fr) 212.94 338.33 T
(om DUIM-OLE-Contr) 239.39 338.33 T
(ol) 342.82 338.33 T
2 11 Q
(The DUIM-OLE-Contr) 108 318.67 T
(ol library exports the module) 217.7 318.67 T
4 9.5 Q
(DUIM-OLE-Control) 362.41 318.67 T
2 11 Q
(.) 453.61 318.67 T
3 13 Q
(3.3.3  A note about OLE contr) 108 285.33 T
(ol container applications and DUIM) 257.08 285.33 T
2 11 Q
(Ther) 108 265.67 T
(e is no DUIM-based framework equivalent to DUIM-OLE-Contr) 130.56 265.67 T
(ol for) 442.14 265.67 T
(implementing contr) 108 251.67 T
(ol) 204.46 251.67 T
0 F
(container) 216.42 251.67 T
2 F
( applications. T) 258.17 251.67 T
(o write contr) 331.52 251.67 T
(ol container appli-) 393.63 251.67 T
-0.07 (cations, you must use OLE and OLE-Contr) 108 237.67 P
-0.07 (ols, the low-level FFI libraries. Y) 315.39 237.67 P
-0.07 (ou) 470.68 237.67 P
(can, of course, still write your application\325s user interface in DUIM, but the) 108 223.67 T
-0.29 (OLE side of your implementation will not be so closely integrated with DUIM) 108 209.67 P
(as it would be for a server written using DUIM-OLE-Contr) 108 195.67 T
(ol.) 393.53 195.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "103" 13
%%Page: "104" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Compound Documents and OLE Controls in DUIM) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(104) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 16 Q
0 X
(3.4) 126 637.33 T
(Building a compound document ser) 151.54 637.33 T
(ver in DUIM) 375.47 637.33 T
2 11 Q
(This section gives an overview of building compound document servers in) 126 616.67 T
(DUIM using the DUIM-OLE-Server library) 126 602.67 T
(.) 333.85 602.67 T
3 13 Q
(3.4.1  Diff) 126 569.33 T
(erences fr) 173.31 569.33 T
(om or) 224.07 569.33 T
(dinar) 253.49 569.33 T
(y DUIM applications) 279.66 569.33 T
2 11 Q
(T) 126 549.67 T
(o build a compound document server application in DUIM, write your) 131.73 549.67 T
-0.17 (application as you would a normal DUIM application, but with the few dif) 126 535.67 P
-0.17 (fer-) 487.06 535.67 P
(ences summarized below) 126 521.67 T
(.) 247.97 521.67 T
1 F
(1.) 135 501.67 T
2 F
(Use the DUIM-OLE-Server library) 153 501.67 T
(.) 318.39 501.67 T
(In addition to the DUIM libraries you would normally use, use the) 153 483.67 T
(DUIM-OLE-Server library and its) 153 469.67 T
4 9.5 Q
(DUIM-OLE-Server) 318.68 469.67 T
2 11 Q
( module in your) 404.18 469.67 T
(server application\325s library and module de\336nitions.) 153 455.67 T
1 F
(2.) 135 435.67 T
2 F
(De\336ne the application as a subclass of) 153 435.67 T
4 9.5 Q
(<embeddable-frame>) 339.95 435.67 T
2 11 Q
(.) 442.55 435.67 T
(Instead of de\336ning your application as a subclass of) 153 417.67 T
4 9.5 Q
(<simple-frame>) 407.46 417.67 T
2 11 Q
(,) 487.26 417.67 T
(de\336ne it as a subclass of) 153 403.67 T
4 9.5 Q
(<embeddable-frame>) 272.23 403.67 T
2 11 Q
( \050page 1) 374.83 403.67 T
(10\051.) 412.38 403.67 T
1 F
(3.) 135 383.67 T
2 F
(Give the application a COM Class ID \050a GUID\051.) 153 383.67 T
(When cr) 153 365.67 T
(eating an instance of) 193.85 365.67 T
4 9.5 Q
(<embeddable-frame>) 296.41 365.67 T
2 11 Q
( with) 399.01 365.67 T
4 9.5 Q
(make) 426.87 365.67 T
2 11 Q
(, supply a) 449.67 365.67 T
4 9.5 Q
(class-id:) 153 351.67 T
2 11 Q
( ar) 204.3 351.67 T
(gument \050whose value is usually cr) 216.7 351.67 T
(eated by) 383.01 351.67 T
4 9.5 Q
(make-GUID) 427.05 351.67 T
2 11 Q
(,) 478.35 351.67 T
(page 1) 153 337.67 T
(15\051. This ar) 184.14 337.67 T
(gument is r) 237.71 337.67 T
(ecor) 292.94 337.67 T
(ded next to the name of the server) 313.25 337.67 T
-0.06 (application in the W) 153 323.67 P
-0.06 (indows r) 251.03 323.67 P
-0.06 (egistry; it is the key that client applications) 294.04 323.67 P
(use to \336nd the server application. Ther) 153 309.67 T
(e ar) 340.81 309.67 T
(e other) 358.48 309.67 T
(, optional ar) 391.29 309.67 T
(guments) 449.7 309.67 T
(that allow further contr) 153 295.67 T
(ol over r) 266.67 295.67 T
(egistration. See) 307.36 295.67 T
4 9.5 Q
(<embeddable-frame>) 383.8 295.67 T
2 11 Q
(,) 486.4 295.67 T
(page 1) 153 281.67 T
(10.) 184.14 281.67 T
1 F
(4.) 135 261.67 T
2 F
(De\336ne methods to handle persistent storage in compound documents.) 153 261.67 T
(De\336ne methods for) 153 243.67 T
4 9.5 Q
(save-frame-to-storage) 249.73 243.67 T
2 11 Q
( \050page 1) 369.43 243.67 T
(18\051 and) 406.99 243.67 T
4 9.5 Q
(load-) 445.77 243.67 T
(frame-from-storage) 153 229.67 T
2 11 Q
( \050page 1) 255.6 229.67 T
(19\051. These functions handle your server) 293.15 229.67 T
(application\325s persistent data, ensuring that it can be saved as part of a) 153 215.67 T
(compound document and r) 153 201.67 T
(eloaded next time the user accesses the com-) 286.21 201.67 T
(pound document. When your application needs to save its data, call) 153 187.67 T
4 9.5 Q
(note-embedded-data-changed) 153 173.67 T
2 11 Q
( \050page 1) 301.2 173.67 T
(16\051 on the instance of) 338.75 173.67 T
4 9.5 Q
(<embeddable-frame>) 153 159.67 T
2 11 Q
(.) 255.6 159.67 T
1 F
(5.) 135 139.67 T
2 F
(Use) 153 139.67 T
4 9.5 Q
(frame-status-message) 174.24 139.67 T
2 11 Q
( for application status bar messages) 288.24 139.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "104" 14
%%Page: "105" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.4) 330.9 677.67 T
(Building a compound document server in DUIM) 352.27 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(105) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(T) 135 640.67 T
(o display status bar messages, instead of r) 140.73 640.67 T
(eferring dir) 344.33 640.67 T
(ectly to) 399.76 640.67 T
4 9.5 Q
(frame-) 437.91 640.67 T
(status-bar) 135 626.67 T
2 11 Q
(, use this idiom:) 191.19 626.67 T
4 9 Q
(frame-status-message\050) 145.8 606 T
5 F
(frame) 259.2 606 T
4 F
(\051 := "Message-text string";) 282.2 606 T
2 11 Q
(This ensur) 135 585.67 T
(es that status bar messages always work, whether or not the) 185.88 585.67 T
(application is r) 135 571.67 T
(unning embedded.) 207.32 571.67 T
3 13 Q
(3.4.2  Running y) 108 538.33 T
(our DUIM-OLE-Ser) 189.5 538.33 T
(ver application) 283.17 538.33 T
2 11 Q
(Y) 108 518.67 T
(ou r) 114.32 518.67 T
(un DUIM-OLE-Server applications by calling) 133.97 518.67 T
4 9.5 Q
(start-frame) 356.64 518.67 T
2 11 Q
( on the appli-) 419.34 518.67 T
(cation frame, as you would any DUIM application. Note that ther) 108 504.67 T
(e is a spe-) 426.11 504.67 T
-0.35 (cialized method on) 108 490.67 P
4 9.5 Q
-0.73 (start-frame) 202.77 490.67 P
2 11 Q
-0.35 ( for) 265.47 490.67 P
4 9.5 Q
-0.73 (<embeddable-frame>) 284.28 490.67 P
2 11 Q
-0.35 (, so do not try to use) 386.88 490.67 P
(the frame in some other way) 108 476.67 T
(.) 245.93 476.67 T
3 13 Q
(3.4.3) 108 443.33 T
(Registering ser) 137.64 443.33 T
(ver applications with Windo) 215.35 443.33 T
(ws) 356.2 443.33 T
2 11 Q
(Befor) 108 423.67 T
(e your application can be embedded in a container) 133.81 423.67 T
(, it must \336rst be r) 378.67 423.67 T
(egis-) 461.3 423.67 T
(ter) 108 409.67 T
(ed with the W) 121 409.67 T
(indows operating system as an OLE server) 189.26 409.67 T
(. Once you have) 396.42 409.67 T
(done this, container applications can use your application as a server) 108 395.67 T
(.) 441.58 395.67 T
(The typical way to r) 108 375.67 T
(egister a server application is to invoke it fr) 205.04 375.67 T
(om the MS-) 415.07 375.67 T
-0.15 (DOS command line, passing the ar) 108 361.67 P
-0.15 (gument) 275.75 361.67 P
4 9.5 Q
-0.31 (/RegServer) 316.07 361.67 P
2 11 Q
-0.15 (. The application r) 372.25 361.67 P
-0.15 (ecog-) 460.06 361.67 P
(nizes the r) 108 347.67 T
(egistration r) 157.94 347.67 T
(equest, cr) 216.71 347.67 T
(eates the necessary entries in the W) 262.83 347.67 T
(indows) 433.97 347.67 T
(r) 108 333.67 T
(egistry) 112.15 333.67 T
(, and then exits \050without displaying any window\051. Y) 144.22 333.67 T
(ou can r) 397.07 333.67 T
(evoke the) 436.14 333.67 T
(r) 108 319.67 T
(egistration \321 that is, r) 112.15 319.67 T
(emove the r) 219.86 319.67 T
(egistry entries \321 by r) 277.23 319.67 T
(unning the applica-) 381.72 319.67 T
(tion again with the option) 108 305.67 T
4 9.5 Q
(/UnregServer) 237.1 305.67 T
2 11 Q
(. If you do not specify either ar) 304.68 305.67 T
(gu-) 453.65 305.67 T
(ment, the application r) 108 291.67 T
(uns normally) 218.19 291.67 T
(.) 281.9 291.67 T
(The DUIM-OLE-Server library pr) 108 271.67 T
(ovides takes car) 270.03 271.67 T
(e of these r) 347.27 271.67 T
(egistration tasks) 399.8 271.67 T
-0.12 (within the normal DUIM pr) 108 257.67 P
-0.12 (ogramming context. Y) 242.84 257.67 P
-0.12 (ou do not have to write any) 349.69 257.67 P
(code for interpr) 108 243.67 T
(eting the command-line ar) 183.96 243.67 T
(guments. Instead, when you call) 312.36 243.67 T
4 9.5 Q
(start-frame) 108 229.67 T
2 11 Q
( on your instance of) 170.7 229.67 T
4 9.5 Q
(<embeddable-frame>) 269.54 229.67 T
2 11 Q
(, the selected method) 372.14 229.67 T
(checks whether you passed) 108 215.67 T
4 9.5 Q
(/RegServer) 243.85 215.67 T
2 11 Q
( was passed. If you did, the) 300.85 215.67 T
4 9.5 Q
(start-) 436.39 215.67 T
-0.05 (frame) 108 201.67 P
2 11 Q
-0.03 ( method r) 136.5 201.67 P
-0.03 (egisters your server application and then exits the application.) 183.79 201.67 P
(For example:) 108 181.67 T
4 9 Q
(ms-dos> my-server-app.exe /RegServer) 135 161 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "105" 15
%%Page: "106" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Compound Documents and OLE Controls in DUIM) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(106) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
1 11 Q
0 X
(Note:) 126 640.67 T
2 F
( The full pathname of the executable \336le is r) 153.19 640.67 T
(ecor) 365.47 640.67 T
(ded in the r) 385.78 640.67 T
(egistry) 441.74 640.67 T
(. If) 473.82 640.67 T
(you move the \336le to dif) 126 626.67 T
(fer) 239.07 626.67 T
(ent folder afterwar) 252.15 626.67 T
(ds, you must r) 343.29 626.67 T
(egister it again.) 413.18 626.67 T
3 13 Q
(3.4.4  Specifying men) 126 593.33 T
(us f) 234.34 593.33 T
(or in-place activ) 253.1 593.33 T
(ation) 334.08 593.33 T
2 11 Q
-0.02 (When a server application is activated in-place \050that is, in the container) 126 573.67 P
-0.02 (\325s win-) 471.11 573.67 P
-0.22 (dow\051, OLE mer) 126 559.67 P
-0.22 (ges its frame\325s menu bar into the container application\325s menu) 200.59 559.67 P
(bar) 126 545.67 T
(. Often, it is mor) 141.11 545.67 T
(e appr) 219.7 545.67 T
(opriate to have a dif) 250.59 545.67 T
(fer) 347.97 545.67 T
(ent set of menus available) 361.05 545.67 T
(during the server) 126 531.67 T
(\325s in-place activation. Y) 211.1 531.67 T
(ou can add a method to) 322.95 531.67 T
4 9.5 Q
(frame-) 440.61 531.67 T
-0.71 (container-menus) 126 517.67 P
2 11 Q
-0.34 ( to specify dif) 211.5 517.67 P
-0.34 (fer) 276.11 517.67 P
-0.34 (ent menus to be seen when your application) 289.19 517.67 P
(is r) 126 503.67 T
(unning in-place.) 140.87 503.67 T
(If the application is r) 126 483.67 T
(un out of place \050that is, in its own window\051, it uses) 226.45 483.67 T
4 9.5 Q
(frame-menu-bar) 126 469.67 T
2 11 Q
( and never calls) 205.8 469.67 T
4 9.5 Q
(frame-container-menus) 284.37 469.67 T
2 11 Q
(.) 404.07 469.67 T
3 13 Q
(3.4.5) 126 436.33 T
(ANYTHING ELSE?) 155.64 436.33 T
(3.4.6) 126 403.33 T
(Skeleton application) 155.64 403.33 T
2 11 Q
(The overall str) 126 383.67 T
(uctur) 196.16 383.67 T
(e of an OLE server pr) 222.04 383.67 T
(ogram should look something like) 325.58 383.67 T
(the skeleton application below) 126 369.67 T
(.) 273.44 369.67 T
4 9 Q
(define frame <foo-frame> \050<embeddable-frame>\051 ... end;) 153 349 T
(define constant $foo-class-ID = make-GUID\050...\051;) 153 330 T
(define method save-frame-to-storage ... end;) 153 311 T
(define method load-frame-from-storage ... end;) 153 292 T
(define variable $foo-ole-server) 153 273 T
(= make\050<foo-frame>,) 163.8 262 T
(title: "Foo Works",) 201.6 251 T
(class-id: $foo-class-ID,) 201.6 240 T
(prog-id: "DUIMSVR.TEST.1",) 201.6 229 T
(object-title: "FooSoft FOO"\051;) 201.6 218 T
(start-frame\050$foo-ole-server\051) 153 199 T
2 11 Q
(Her) 126 178.67 T
(e we have a server application that implements \322foo\323 objects that can be) 144.57 178.67 T
(embedded in a compound document. The) 126 164.67 T
4 9.5 Q
(title:) 332.72 164.67 T
2 11 Q
( init-keywor) 366.92 164.67 T
(d names the) 426.55 164.67 T
(server application window) 126 150.67 T
(, and the) 255.98 150.67 T
4 9.5 Q
(object-title:) 300.86 150.67 T
2 11 Q
( init-keywor) 374.96 150.67 T
(d is the name) 434.59 150.67 T
(that appears in the container) 126 136.67 T
(\325s Insert Object dialog. The) 265.84 136.67 T
4 9.5 Q
(class-id:) 398.24 136.67 T
2 11 Q
( is the) 449.54 136.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "106" 16
%%Page: "107" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.5) 383.06 677.67 T
(Building an OLE control in DUIM) 404.43 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(107) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
-0.35 (GUID that will be enter) 108 640.67 P
-0.35 (ed into the r) 220.65 640.67 P
-0.35 (egistry for identifying the COM object that) 278.43 640.67 P
(the server implements, and the) 108 626.67 T
4 9.5 Q
(prog-id:) 261.37 626.67 T
2 11 Q
( is the name associated with the) 306.97 626.67 T
(server in the r) 108 612.67 T
(egistry) 175.36 612.67 T
(.) 207.44 612.67 T
3 16 Q
(3.5) 108 577.33 T
(Building an OLE contr) 133.54 577.33 T
(ol in DUIM) 271.81 577.33 T
2 11 Q
(This section gives an overview of building OLE contr) 108 556.67 T
(ols in DUIM using the) 366.42 556.67 T
(DUIM-OLE-Contr) 108 542.67 T
(ol library) 196.54 542.67 T
(. It assumes that you have alr) 240.07 542.67 T
(eady r) 381.78 542.67 T
(ead about) 412.28 542.67 T
(implementing OLE compound document servers in Section 3.4 on page 104.) 108 528.67 T
3 13 Q
(3.5.1  Diff) 108 495.33 T
(erences fr) 155.31 495.33 T
(om implementing OLE compound document ser) 206.07 495.33 T
(ver s) 449.63 495.33 T
2 11 Q
-0.12 (T) 108 475.67 P
-0.12 (o build an OLE contr) 113.73 475.67 P
-0.12 (ol in DUIM using the DUIM-OLE-Contr) 215.09 475.67 P
-0.12 (ol library) 409.02 475.67 P
-0.12 (, write) 452.42 475.67 P
(your application as you would write an OLE compound document server) 108 461.67 T
-0.27 (with DUIM-OLE-Server \050see Section 3.4\051, but with the few dif) 108 447.67 P
-0.27 (fer) 404.07 447.67 P
-0.27 (ences summa-) 417.15 447.67 P
(rized below) 108 433.67 T
(.) 164.51 433.67 T
1 F
(1.) 117 413.67 T
2 F
(Use the library DUIM-OLE-Contr) 135 413.67 T
(ol instead of DUIM-OLE-Server) 298.33 413.67 T
(.) 451.8 413.67 T
(In addition to the DUIM libraries you would normally use, use the) 135 395.67 T
(DUIM-OLE-Contr) 135 381.67 T
(ol library and its) 223.54 381.67 T
4 9.5 Q
(DUIM-OLE-Control) 306.61 381.67 T
2 11 Q
( module in your) 397.81 381.67 T
(contr) 135 367.67 T
(ol\325s library and module de\336nitions.) 160.02 367.67 T
1 F
(2.) 117 347.67 T
2 F
(Y) 135 347.67 T
(ou can optionally pr) 141.32 347.67 T
(ovide type information, specifying the methods) 239.59 347.67 T
(and pr) 135 333.67 T
(operties that ar) 167.13 333.67 T
(e available to your contr) 240.3 333.67 T
(ol\325s clients \050contr) 357.96 333.67 T
(ol con-) 440.28 333.67 T
(tainers\051. T) 135 319.67 T
(ype information is r) 182.88 319.67 T
(epr) 279.17 319.67 T
(esented with an instance of) 295.19 319.67 T
4 9.5 Q
(<coclass-) 429.96 319.67 T
-0.26 (type-info>) 135 305.67 P
2 11 Q
-0.12 (. If the frame just contains a DUIM) 192 305.67 P
4 9.5 Q
-0.26 (<gadget>) 361.66 305.67 P
2 11 Q
-0.12 (, you can let the) 407.26 305.67 P
-0.35 (library cr) 135 291.67 P
-0.35 (eate type information automatically) 179.22 291.67 P
-0.35 (. It cr) 351.05 291.67 P
-0.35 (eates type information) 374.91 291.67 P
(corr) 135 277.67 T
(esponding to the DUIM gadget pr) 154.38 277.67 T
(otocols.) 319.62 277.67 T
1 F
(3.) 117 257.67 T
2 F
(If possible, de\336ne a method for) 135 257.67 T
4 9.5 Q
(max-storage-size) 288.85 257.67 T
2 11 Q
(.) 380.05 257.67 T
1 F
(4.) 117 237.67 T
2 F
-0.3 (The pr) 135 237.67 P
-0.3 (ogram must be linked as a dynamic link library \050\336le suf) 166.62 237.67 P
-0.3 (\336x) 433.16 237.67 P
4 9.5 Q
-0.62 (.DLL) 447.94 237.67 P
2 11 Q
-0.3 ( or) 470.74 237.67 P
4 9.5 Q
(.OCX) 135 223.67 T
2 11 Q
(\051, not as an) 157.8 223.67 T
4 9.5 Q
(.EXE) 213.27 223.67 T
2 11 Q
( \336le.) 236.07 223.67 T
1 F
(5.) 117 203.67 T
2 F
(Do not dir) 135 203.67 T
(ectly instantiate the DUIM frame or call) 185.08 203.67 T
4 9.5 Q
(start-frame) 380.36 203.67 T
2 11 Q
(.) 443.05 203.67 T
(OLE contr) 135 185.67 T
(ol r) 184.86 185.67 T
(egistration and activation is handled by the) 200.97 185.67 T
4 9.5 Q
(initialize-) 414.33 185.67 T
(ole-control) 135 171.67 T
2 11 Q
( macr) 197.7 171.67 T
(o, described below) 224.69 171.67 T
(.) 314.83 171.67 T
-0.02 (An OLE contr) 108 151.67 P
-0.02 (ol also dif) 175.54 151.67 P
-0.02 (fers fr) 222.97 151.67 P
-0.02 (om a compound document server in that out-of-) 251.46 151.67 P
(place activation is never used, and to be actually used as a \322contr) 108 137.67 T
(ol\323 element,) 423.61 137.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "107" 17
%%Page: "108" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Compound Documents and OLE Controls in DUIM) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(108) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(it is typical that the frame will contain just a single) 126 640.67 T
4 9.5 Q
(<gadget>) 373.39 640.67 T
2 11 Q
(, with no menu) 418.99 640.67 T
(bar or tool bar) 126 626.67 T
(, so that it can be active at the same time as other contr) 194.44 626.67 T
(ols.) 458.32 626.67 T
3 13 Q
(3.5.2  Getting the contr) 126 593.33 T
(ol container\325) 241.32 593.33 T
(s ambient pr) 304.09 593.33 T
(oper) 367.28 593.33 T
(ties) 390.59 593.33 T
2 11 Q
(Y) 126 573.67 T
(our OLE contr) 132.32 573.67 T
(ol can adapt itself to match dif) 201.92 573.67 T
(fer) 348.98 573.67 T
(ent contr) 362.06 573.67 T
(ol containers by) 405.09 573.67 T
(accessing and then acting upon the contr) 126 559.67 T
(ol container) 323.99 559.67 T
(\325s ambient pr) 382.36 559.67 T
(operties.) 446.09 559.67 T
(T) 126 539.67 T
(o access the ambient pr) 131.73 539.67 T
(operties of the container using it, your OLE contr) 244.37 539.67 T
(ol) 482.61 539.67 T
(should call) 126 525.67 T
4 9.5 Q
(frame-ole-object) 181.91 525.67 T
2 11 Q
( on its own frame, and then use the facilities) 273.11 525.67 T
(described in the documentation for the OLE-Contr) 126 511.67 T
(ol-Framework library) 371.39 511.67 T
(, in) 475.16 511.67 T
(\322Ambient pr) 126 497.67 T
(operties\323 on page 222.) 187.82 497.67 T
(The following example shows how a contr) 126 477.67 T
(ol can ef) 332.14 477.67 T
(fectively localize itself) 372.37 477.67 T
(accor) 126 463.67 T
(ding to the contr) 151.42 463.67 T
(ol container using it.) 231.99 463.67 T
4 9 Q
(let obj = frame-ole-object\050frame\051;) 153 443 T
(let locale-code = OLE-util-locale\050obj\051;) 153 432 T
(let language = PRIMARYLANGID\050locale-code\051;) 153 421 T
(select \050language\051) 153 410 T
($LANG-NEUTRAL,) 163.8 399 T
($LANG-ENGLISH => \311) 163.8 388 T
($LANG-FRENCH  => \311) 163.8 377 T
($LANG-SPANISH => \311) 163.8 366 T
(\311) 153 355 T
3 13 Q
(3.5.3  An) 126 323.33 T
(ything else?) 169.65 323.33 T
(3.5.4) 126 290.33 T
(Skeleton application) 155.64 290.33 T
2 11 Q
-0.05 (An OLE contr) 126 270.67 P
-0.05 (ol pr) 193.47 270.67 P
-0.05 (ogram should look something like the skeleton application) 216.14 270.67 P
(below) 126 256.67 T
(.) 154.72 256.67 T
4 9 Q
(define frame <my-frame> \050<embeddable-frame>\051 ... end;) 153 236 T
(define constant $my-class-ID = make-GUID\050...\051;) 153 217 T
(define constant my-type-info =) 153 198 T
(make\050<coclass-type-info>, uuid: $my-class-ID, ...\051;) 163.8 187 T
(initialize-ole-control\050typeinfo: my-type-info,) 153 168 T
(prog-id: "my.prog.id",) 277.2 157 T
(title: "my control",) 277.2 146 T
(frame-class: <my-frame>\051;) 277.2 135 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "108" 18
%%Page: "109" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.6) 383.51 677.67 T
(The DUIM-OLE-SERVER module) 404.88 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(109) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(The instance of) 108 640.67 T
4 9.5 Q
(<coclass-type-info>) 184.24 640.67 T
2 11 Q
( should include at least one dispatch) 292.54 640.67 T
(interface. See \322Overview of OLE Automation\323 on page 130.) 108 626.67 T
-0.06 (The) 108 606.67 P
4 9.5 Q
-0.12 (make) 129.1 606.67 P
2 11 Q
-0.06 ( of) 151.9 606.67 P
4 9.5 Q
-0.12 (<component-interface-description>) 166.96 606.67 P
2 11 Q
-0.06 ( should specify the) 355.05 606.67 P
4 9.5 Q
-0.12 (class:) 449.11 606.67 P
2 11 Q
-0.1 (option as either) 108 592.67 P
4 9.5 Q
-0.22 (<ocx-dispatch>) 185.99 592.67 P
2 11 Q
-0.1 ( or a user) 265.79 592.67 P
-0.1 (-de\336ned subclass ther) 310.29 592.67 P
-0.1 (eof. The meth-) 415.97 592.67 P
(ods for automation pr) 108 578.67 T
(operties and methods will be specialized on that class,) 214.55 578.67 T
(and should use the function) 108 564.67 T
4 9.5 Q
(ocx-frame) 246.6 564.67 T
2 11 Q
( to \336nd the corr) 297.9 564.67 T
(esponding frame) 372.91 564.67 T
(object.) 108 550.67 T
3 16 Q
(3.6) 108 515.33 T
(The DUIM-OLE-SER) 133.54 515.33 T
(VER module) 256.08 515.33 T
2 11 Q
(This section contains a r) 108 494.67 T
(efer) 224.31 494.67 T
(ence entry for each name exported by the DUIM-) 242.66 494.67 T
(OLE-Server library\325s) 108 480.67 T
4 9.5 Q
(DUIM-OLE-Server) 210.98 480.67 T
2 11 Q
( module.) 296.48 480.67 T
3 12 Q
(<embed) 108 446 T
(dab) 145.38 446 T
(le-frame>) 162.79 446 T
0 11 Q
(Open abstract class) 399.85 446.67 T
2 F
(Super) 135 424.67 T
(classes:) 163.43 424.67 T
4 9.5 Q
(<simple-frame>) 201.78 424.67 T
2 11 Q
-0.05 (The class of DUIM applications that can be used as OLE compound doc-) 135 404.67 P
(ument servers. Use it as the super) 135 390.67 T
(class of your DUIM application.) 298.65 390.67 T
(For use in an OLE Server pr) 135 370.67 T
(ocess, it accepts the following initialization) 270.1 370.67 T
(keywor) 135 356.67 T
(ds \050in addition to those inherited fr) 171.83 356.67 T
(om) 342.04 356.67 T
4 9.5 Q
(<simple-frame>) 360.51 356.67 T
2 11 Q
(\051:) 440.31 356.67 T
4 9.5 Q
(class-id:) 135 336.67 T
2 11 Q
(The COM Class ID that identi\336es the object the server) 216 336.67 T
-0.53 (pr) 216 322.67 P
-0.53 (ovides. Requir) 226.76 322.67 P
-0.53 (ed. This ID can be r) 296.56 322.67 P
-0.53 (epr) 387.9 322.67 P
-0.53 (esented either as) 403.93 322.67 P
(a string of 32 hexadecimal digits in the following for-) 216 308.67 T
(mat) 216 294.67 T
("{) 221.5 276.67 T
0 F
(xxxxxxxx) 229.24 276.67 T
2 F
(-) 273.24 276.67 T
0 F
(xxxx) 276.91 276.67 T
2 F
(-) 298.91 276.67 T
0 F
(xxxx) 302.57 276.67 T
2 F
(-) 324.57 276.67 T
0 F
(xxxx) 328.23 276.67 T
2 F
(-) 350.23 276.67 T
0 F
(xxxxxxxxxxxx) 353.9 276.67 T
2 F
(}") 419.9 276.67 T
(That is, wher) 216 258.67 T
(e each) 279.34 258.67 T
0 F
(x) 312.16 258.67 T
2 F
( is a hexadecimal digit. For exam-) 317.66 258.67 T
(ple:) 216 244.67 T
("{e90f09e0-43db-1) 221.5 226.67 T
(1d0-8a04-020701) 306.97 226.67 T
(19f639}") 386.41 226.67 T
(Alternatively) 216 208.67 T
(, the ID can be a) 279.23 208.67 T
4 9.5 Q
(<REFCLSID>) 359.59 208.67 T
2 11 Q
(, as r) 416.59 208.67 T
(eturned) 439.15 208.67 T
(fr) 216 194.67 T
(om) 223.81 194.67 T
4 9.5 Q
(make-GUID) 242.28 194.67 T
2 11 Q
(.) 293.58 194.67 T
(Y) 216 176.67 T
(ou can get the ID value by generating a GUID with) 222.32 176.67 T
(Harlequin Dylan\325s) 216 162.67 T
4 9.5 Q
(create-id) 308.82 162.67 T
2 11 Q
( utility) 360.12 162.67 T
(. See \322Cr) 391.17 162.67 T
(eating) 433.18 162.67 T
(GUID numbers\323 on page 97.) 216 148.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "109" 19
%%Page: "110" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Compound Documents and OLE Controls in DUIM) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(1) 72 100 T
(10) 76.17 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 9.5 Q
0 X
(object-title:) 153 640.67 T
2 11 Q
(If the container application has an Insert Object dialog,) 234 640.67 T
-0.15 (this optional string ar) 234 626.67 P
-0.15 (gument will be used as the title of) 338.13 626.67 P
(the COM object that your application serves. If this) 234 612.67 T
(ar) 234 598.67 T
(gument is not pr) 243.65 598.67 T
(ovided, the inherited DUIM frame) 324.23 598.67 T
4 9.5 Q
(title:) 234 584.67 T
2 11 Q
( is used instead.) 268.2 584.67 T
-0.1 (At least one of) 234 566.67 P
4 9.5 Q
-0.21 (title:) 306.31 566.67 P
2 11 Q
-0.1 ( and) 340.51 566.67 P
4 9.5 Q
-0.21 (object-title:) 364.43 566.67 P
2 11 Q
-0.1 ( must be sup-) 438.53 566.67 P
-0.11 (plied for the application to be able to r) 234 552.67 P
-0.11 (egister itself. The) 418.87 552.67 P
(object title should be unique, since if two servers ar) 234 538.67 T
(e) 482.49 538.67 T
(r) 234 524.67 T
(egister) 238.15 524.67 T
(ed with the same title, only one will be accessi-) 270.4 524.67 T
(ble fr) 234 510.67 T
(om the Insert Object dialog box.) 259.11 510.67 T
4 9.5 Q
(short-title:) 153 490.67 T
2 11 Q
-0.03 (A string used as the pr) 234 490.67 P
-0.03 (ogram name in container menus) 343.95 490.67 P
(and the Links dialog box. It must not be mor) 234 476.67 T
(e than 15) 450.1 476.67 T
(characters long. If not speci\336ed, it defaults to the) 234 462.67 T
(shorter of) 234 448.67 T
4 9.5 Q
(title:) 283.79 448.67 T
2 11 Q
( or) 317.99 448.67 T
4 9.5 Q
(object-title:) 333.84 448.67 T
2 11 Q
(, tr) 407.94 448.67 T
(uncated to 15) 421.28 448.67 T
(characters if necessary) 234 434.67 T
(.) 341.64 434.67 T
4 9.5 Q
(prog-id:) 153 414.67 T
2 11 Q
(The server application\325s pr) 234 414.67 T
(ogramatic identi\336er \050pr) 363.95 414.67 T
(og) 477.38 414.67 T
-0.32 (ID\051. The pr) 234 400.67 P
-0.32 (og ID is a string which is used internally and) 286.66 400.67 P
-0.41 (is only visible in the Registry Editor) 234 386.67 P
-0.41 (. If speci\336ed, it must) 404.76 386.67 P
(start with a letter; it cannot contain any spaces or punc-) 234 372.67 T
(tuation except period; and it must not be mor) 234 358.67 T
(e than 39) 454.33 358.67 T
(characters long. It must be dif) 234 344.67 T
(fer) 378.23 344.67 T
(ent fr) 391.31 344.67 T
(om the ID of any) 417.13 344.67 T
(other application. If not speci\336ed, a default value is cr) 234 330.67 T
(e-) 494.99 330.67 T
(ated automatically using portions of the title and class) 234 316.67 T
(ID.) 234 302.67 T
(The thr) 153 282.67 T
(ee optional parameters ar) 188.3 282.67 T
(e used only during self-r) 312.05 282.67 T
(egistration.) 431.36 282.67 T
(Y) 153 268.67 T
(ou can override them by entering dif) 159.32 268.67 T
(fer) 337.77 268.67 T
(ent values into the W) 350.85 268.67 T
(indows) 453.43 268.67 T
(r) 153 254.67 T
(egistry by hand. If you need mor) 157.15 254.67 T
(e contr) 316.57 254.67 T
(ol over r) 349.61 254.67 T
(egistration, write over-) 390.3 254.67 T
(ride methods on the generic functions) 153 240.67 T
4 9.5 Q
(frame-register-server) 339.99 240.67 T
2 11 Q
( and) 459.69 240.67 T
4 9.5 Q
(frame-unregister-server) 153 226.67 T
2 11 Q
(; each takes the frame instance as its single) 284.1 226.67 T
(ar) 153 212.67 T
(gument.) 162.65 212.67 T
(None of this information is used to r) 153 192.67 T
(egister OLE Contr) 329.51 192.67 T
(ols written with) 417.48 192.67 T
(the DUIM-OLE-Contr) 153 178.67 T
(ol library) 259.55 178.67 T
(, since r) 303.07 178.67 T
(egistration and instantiation is) 339.89 178.67 T
(not contr) 153 164.67 T
(olled by the frame.) 196.77 164.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "110" 20
%%Page: "111" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.6) 383.51 677.67 T
(The DUIM-OLE-SERVER module) 404.88 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(1) 527.17 100 T
(1) 531.33 100 T
(1) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 12 Q
0 X
(frame-container) 108 640 T
(-men) 182.18 640 T
(us) 205.61 640 T
0 11 Q
(Open generic function) 386.57 640.67 T
4 9 Q
(frame-container-menus) 135 620 T
5 F
(frame) 253.8 620 T
4 F
( =>) 276.8 620 T
5 F
(edit-menus) 298.39 620 T
(object-menus) 348.29 620 T
(help-menus) 407.02 620 T
2 11 Q
(Speci\336es menus to be included in the container) 135 599.67 T
(\325s menu bar if the appli-) 364.5 599.67 T
-0.14 (cation is activated in place. Applications can optionally de\336ne a method) 135 585.67 P
(on this function, specialized on the application\325s subclass of) 135 571.67 T
4 9.5 Q
(<embedda-) 427.61 571.67 T
(ble-frame>) 135 557.67 T
2 11 Q
(.) 192 557.67 T
-0.49 (The method should r) 135 537.67 P
-0.49 (eturn thr) 235.66 537.67 P
-0.49 (ee values, corr) 278.29 537.67 P
-0.49 (esponding to thr) 346.96 537.67 P
-0.49 (ee positions) 426.6 537.67 P
(in the menu bar that ar) 135 523.67 T
(e designated for edit menus, object menus, and) 246.28 523.67 T
(help menus r) 135 509.67 T
(espectively) 198.81 509.67 T
(. Each of the thr) 251.88 509.67 T
(ee values can be any of the fol-) 328.19 509.67 T
(lowing:) 135 495.67 T
4 9.5 Q
(#f) 140.5 475.67 T
2 11 Q
(, indicating that ther) 151.9 475.67 T
(e ar) 250.59 475.67 T
(e no menus in this gr) 268.26 475.67 T
(oup.) 370.08 475.67 T
(A menu object \050an instance of) 140.5 455.67 T
4 9.5 Q
(<menu>) 287.12 455.67 T
2 11 Q
(\051.) 321.32 455.67 T
(A) 140.5 435.67 T
4 9.5 Q
(<sequence>) 151.81 435.67 T
2 11 Q
( of) 208.81 435.67 T
4 9.5 Q
(<menu>) 223.98 435.67 T
2 11 Q
( objects, possibly empty) 258.18 435.67 T
(.) 372.86 435.67 T
(A menu bar object \050an instance of) 140.5 415.67 T
4 9.5 Q
(<sheet>) 305.8 415.67 T
2 11 Q
(\051.) 345.7 415.67 T
(The default method r) 140.5 395.67 T
(eturns:) 243.58 395.67 T
4 9 Q
(values\050frame-menu-bar\050) 156.6 375 T
5 F
(frame) 275.4 375 T
4 F
(\051, #f, #f\051) 298.39 375 T
3 12 Q
(frame-container) 108 342 T
(-name) 182.18 342 T
0 11 Q
(Function) 445.45 342.67 T
4 9 Q
(frame-container-name) 135 322 T
5 F
(frame) 248.4 322 T
4 F
( =>) 271.39 322 T
5 F
(container) 292.99 322 T
(document) 336.4 322 T
2 11 Q
(Returns the name of the container application and the name of the con-) 135 301.67 T
(tainer document.) 135 287.67 T
-0.01 (Both values ar) 135 267.67 P
-0.01 (e instances of) 204.33 267.67 P
4 9.5 Q
-0.01 (false-or\050<string>\051) 272.08 267.67 P
2 11 Q
-0.01 (. The value) 374.67 267.67 P
0 F
-0.01 (container) 430.89 267.67 P
2 F
-0.01 ( is) 472.65 267.67 P
4 9.5 Q
-0.25 (#f) 135 253.67 P
2 11 Q
-0.12 ( if the application is not r) 146.4 253.67 P
-0.12 (unning as an OLE server; the value) 267.12 253.67 P
0 F
-0.12 (document) 439.78 253.67 P
2 F
(is) 135 239.67 T
4 9.5 Q
(#f) 145.62 239.67 T
2 11 Q
( if ther) 157.01 239.67 T
(e is no applicable container document name.) 188.78 239.67 T
(This function will not r) 135 219.67 T
(eturn meaningful data until the server is acti-) 246.71 219.67 T
-0.45 (vated. Thus this function will r) 135 205.67 P
-0.45 (eturn false values if the application calls it) 282.53 205.67 P
(early) 135 191.67 T
(.) 158.21 191.67 T
(An application r) 135 171.67 T
(unning in an out-of-place activation can use this func-) 214.42 171.67 T
(tion to set the) 135 157.67 T
6 9.6 Q
(Exit) 203.56 157.67 T
2 11 Q
( menu item to) 221.17 157.67 T
6 9.6 Q
(Exit to) 291.55 157.67 T
0 11 Q
(container) 323.55 157.67 T
2 F
(.) 364.5 157.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "111" 21
%%Page: "112" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Compound Documents and OLE Controls in DUIM) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(1) 72 100 T
(12) 76.17 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 12 Q
0 X
(frame-embed) 126 640 T
(ded-sheet) 187.7 640 T
0 11 Q
(Open generic function) 404.57 640.67 T
4 9 Q
(frame-embedded-sheet) 153 620 T
5 F
(frame) 266.4 620 T
4 F
( =>) 289.39 620 T
5 F
(sheet) 310.99 620 T
2 11 Q
(Returns an instance of) 153 599.67 T
4 9.5 Q
(<sheet>) 263.73 599.67 T
2 11 Q
( r) 303.63 599.67 T
(epr) 310.52 599.67 T
(esenting the image to be displayed) 326.55 599.67 T
(in the container application. If your server application frame contains) 153 585.67 T
(mor) 153 571.67 T
(e than a single drawing pane, you should write a method on this) 172.87 571.67 T
(function, specialized on the application\325s subclass of) 153 557.67 T
4 9.5 Q
(<embeddable-) 409.85 557.67 T
-0.49 (frame>) 153 543.67 P
2 11 Q
-0.23 (, to r) 187.2 543.67 P
-0.23 (eturn such a sheet. It must be a mirr) 208.72 543.67 P
-0.23 (or) 381.25 543.67 P
-0.23 (ed sheet, and not just a) 391.4 543.67 P
(layout.) 153 529.67 T
(When an out-of-place activation is completed, a DUIM) 153 509.67 T
4 9.5 Q
(<window-) 421.3 509.67 T
(repaint-event>) 153 495.67 T
2 11 Q
( is invoked on) 232.8 495.67 T
0 F
(sheet) 304 495.67 T
2 F
(, and whatever it draws is what will) 326 495.67 T
(appear in the container application.) 153 481.67 T
3 12 Q
(frame-embed) 126 447 T
(ded-siz) 187.7 447 T
(e) 221.7 447 T
0 11 Q
(Function) 463.45 447.67 T
4 9 Q
(frame-embedded-size) 153 427 T
5 F
(frame) 261 427 T
4 F
( =>) 283.99 427 T
5 F
(width) 305.6 427 T
(height) 335 427 T
2 11 Q
-0.15 (Returns the curr) 153 406.67 P
-0.15 (ent size \050in pixels\051 of the space r) 231.72 406.67 P
-0.15 (eserved in the container) 385.38 406.67 P
(application for the embedded image.) 153 392.67 T
-0.16 (Both) 153 372.67 P
0 F
-0.16 (width) 178.3 372.67 P
2 F
-0.16 ( and) 203.96 372.67 P
0 F
-0.16 (height) 227.76 372.67 P
2 F
-0.16 ( ar) 255.26 372.67 P
-0.16 (e instances of) 267.5 372.67 P
4 9.5 Q
-0.34 (<integer>) 334.77 372.67 P
2 11 Q
-0.16 (. These ar) 386.07 372.67 P
-0.16 (e the same val-) 431.99 372.67 P
(ues as r) 153 358.67 T
(eported by the function) 189.38 358.67 T
4 9.5 Q
(note-embedded-region-changed) 306.42 358.67 T
2 11 Q
(.) 466.02 358.67 T
3 12 Q
(frame-embed) 126 324 T
(ded-siz) 187.7 324 T
(e-requested) 221.7 324 T
0 11 Q
(Open generic function) 404.57 324.67 T
4 9 Q
(frame-embedded-size-requested) 153 304 T
5 F
(frame) 315 304 T
4 F
( =>) 337.99 304 T
5 F
(width) 359.6 304 T
(height) 389 304 T
2 11 Q
-0.37 (Y) 153 283.67 P
-0.37 (ou can optionally de\336ne a method on this function, specialized on your) 159.32 283.67 P
(server application\325s subclass of) 153 269.67 T
4 9.5 Q
(<embeddable-frame>) 306.49 269.67 T
2 11 Q
(, to r) 409.09 269.67 T
(eturn the) 431.08 269.67 T
-0.23 (amount of space \050in pixels\051 that you want to be r) 153 255.67 P
-0.23 (eserved in the container) 385.73 255.67 P
(for the embedded server image.) 153 241.67 T
(The default method r) 153 221.67 T
(eturns the size of the sheet r) 256.08 221.67 T
(eturned by) 391.63 221.67 T
4 9.5 Q
(frame-) 447.56 221.67 T
(embedded-sheet) 153 207.67 T
2 11 Q
(. Both) 232.8 207.67 T
0 F
(width) 263.77 207.67 T
2 F
( and) 289.43 207.67 T
0 F
(height) 313.55 207.67 T
2 F
( ar) 341.05 207.67 T
(e instances of) 353.45 207.67 T
4 9.5 Q
(<integer>) 421.21 207.67 T
2 11 Q
(.) 472.51 207.67 T
3 12 Q
(frame-init-ne) 126 173 T
(w-object) 185.46 173 T
0 11 Q
(Open generic function) 404.57 173.67 T
4 9 Q
(frame-init-new-object) 153 153 T
5 F
(frame) 271.8 153 T
4 F
( => \050\051) 294.8 153 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "112" 22
%%Page: "113" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.6) 383.51 677.67 T
(The DUIM-OLE-SERVER module) 404.88 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(1) 526.83 100 T
(13) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(When the OLE/COM API is using your server application to cr) 135 640.67 T
(eate a) 442.76 640.67 T
(new COM object \050and not loading an old object with) 135 626.67 T
4 9.5 Q
(load-frame-from-) 392.62 626.67 T
-0.16 (storage) 135 612.67 P
2 11 Q
-0.08 (\051, it calls this function. Y) 174.9 612.67 P
-0.08 (ou can de\336ne a method on this function) 290.63 612.67 P
(to perform any initialization your server application might need. The) 135 598.67 T
(default method does nothing.) 135 584.67 T
3 12 Q
(frame-in-place-active?) 108 550 T
0 11 Q
(Function) 445.45 550.67 T
4 9 Q
(frame-in-place-active?) 135 530 T
5 F
(frame) 259.2 530 T
4 F
( =>) 282.2 530 T
5 F
(active?) 303.8 530 T
2 11 Q
(Returns tr) 135 509.67 T
(ue if the server application is r) 183.84 509.67 T
(unning in the context of an in-) 331.3 509.67 T
(place activation, and false otherwise. Call this function to determine) 135 495.67 T
(whether your application is curr) 135 481.67 T
(ently r) 292.12 481.67 T
(unning in place.) 323.7 481.67 T
3 12 Q
(frame-ole-object) 108 447 T
0 11 Q
(Function) 445.45 447.67 T
4 9 Q
(frame-ole-object) 135 427 T
5 F
(frame) 226.8 427 T
4 F
( =>) 249.79 427 T
5 F
(obj) 271.39 427 T
2 11 Q
-0.21 (A server application can call this function to get the OLE interface object) 135 406.67 P
-0.03 (that the container uses to access the server) 135 392.67 P
-0.03 (. The object,) 339.19 392.67 P
0 F
-0.03 (obj) 399.67 392.67 P
2 F
-0.03 (, is an instance) 412.7 392.67 P
(of) 135 378.67 T
4 9.5 Q
(false-or\050<DUIM-OLE-server>\051) 147.42 378.67 T
2 11 Q
(. If the application is not curr) 301.32 378.67 T
(ently) 441.77 378.67 T
(connected to an OLE container) 135 364.67 T
(, this function r) 283.79 364.67 T
(eturns) 357.56 364.67 T
4 9.5 Q
(#f) 391.21 364.67 T
2 11 Q
(.) 402.61 364.67 T
(The) 135 344.67 T
4 9.5 Q
(<DUIM-OLE-Server>) 156.16 344.67 T
2 11 Q
( class \050fr) 253.06 344.67 T
(om DUIM-OLE-Server\051 is a subclass of) 292.95 344.67 T
4 9.5 Q
(<ole-server-framework>) 135 330.67 T
2 11 Q
( \050fr) 260.4 330.67 T
(om the OLE-Server library\051 and of) 274.62 330.67 T
4 9.5 Q
(<IUnknown>) 135 316.67 T
2 11 Q
( \050fr) 192 316.67 T
(om the low-level COM library\051.) 206.22 316.67 T
(The interface object) 135 296.67 T
0 F
(obj) 232.18 296.67 T
2 F
( is the \322contr) 245.22 296.67 T
(olling unknown\323 for all of the low-) 307.12 296.67 T
(level OLE interfaces, so) 135 282.67 T
4 9.5 Q
(QueryInterface) 251.45 282.67 T
2 11 Q
( can be called on it if it is neces-) 331.25 282.67 T
(sary to obtain any of the low-level interface pointers.) 135 268.67 T
(This function does) 135 248.67 T
0 F
(not) 227.7 248.67 T
2 F
( call) 242.36 248.67 T
4 9.5 Q
(AddRef) 264.65 248.67 T
2 11 Q
(, so the caller should not call) 298.85 248.67 T
4 9.5 Q
(Release) 439.58 248.67 T
2 11 Q
(unless it also calls) 135 234.67 T
4 9.5 Q
(AddRef) 224.44 234.67 T
2 11 Q
( explicitly) 258.64 234.67 T
(.) 305.12 234.67 T
3 12 Q
(frame-ole-object-c) 108 200 T
(lass) 193.12 200 T
0 11 Q
(Open generic function) 386.57 200.67 T
4 9 Q
(frame-ole-object-class) 135 180 T
5 F
(frame) 259.2 180 T
4 F
( =>) 282.2 180 T
5 F
(class) 303.8 180 T
(ar) 329.18 180 T
(gs) 337.53 180 T
2 11 Q
(Returns the class to be instantiated for the OLE interface object, and a) 135 159.67 T
(sequence of any additional keywor) 135 145.67 T
(d options to be passed to) 305.1 145.67 T
4 9.5 Q
(make) 428.77 145.67 T
2 11 Q
(. The) 451.57 145.67 T
0 F
(class) 135 131.67 T
2 F
( value is an instance of) 155.98 131.67 T
4 9.5 Q
(<class>) 268.64 131.67 T
2 11 Q
( and) 308.54 131.67 T
0 F
(ar) 332.66 131.67 T
(gs) 341.63 131.67 T
2 F
( an instance of) 351.41 131.67 T
4 9.5 Q
(<sequence>) 423.89 131.67 T
2 11 Q
(.) 480.89 131.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "113" 23
%%Page: "114" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Compound Documents and OLE Controls in DUIM) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(1) 72 100 T
(14) 76.17 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(The default method r) 153 640.67 T
(eturns) 256.08 640.67 T
4 9.5 Q
(<DUIM-OLE-server>) 289.73 640.67 T
2 11 Q
( in) 386.63 640.67 T
0 F
(class) 401.73 640.67 T
2 F
(. The server) 422.71 640.67 T
(application can de\336ne a method on this function that r) 153 626.67 T
(eturns its own) 417.01 626.67 T
(customized subclass. The subclass could do things like pr) 153 612.67 T
(ovide over-) 432.02 612.67 T
(rides for methods in either the DUIM-OLE-Server or OLE-Server librar-) 153 598.67 T
(ies, or its) 153 584.67 T
4 9.5 Q
(initialize) 198.94 584.67 T
2 11 Q
( method could instantiate additional OLE) 255.94 584.67 T
(interfaces \050using the) 153 570.67 T
4 9.5 Q
(controlling-unknown:) 253.97 570.67 T
2 11 Q
( option to r) 367.97 570.67 T
(efer) 421.77 570.67 T
(ence the) 440.12 570.67 T
-0.45 (object being instantiated\051 which would then be available to the container) 153 556.67 P
-0.33 (application when it calls) 153 542.67 P
4 9.5 Q
-0.68 (QueryInterface) 272.87 542.67 P
2 11 Q
-0.33 (. Note that an override method) 352.67 542.67 P
(should concatenate the subclass\325s ar) 153 528.67 T
(guments with the second value) 327.83 528.67 T
(r) 153 514.67 T
(eturned by) 157.15 514.67 T
4 9.5 Q
(next-method\050\051) 213.07 514.67 T
2 11 Q
(.) 287.17 514.67 T
(This function is not used for OLE Contr) 153 494.67 T
(ols.) 345.23 494.67 T
3 12 Q
(make-GUID) 126 460 T
0 11 Q
(Function) 463.45 460.67 T
4 9 Q
(make-GUID) 153 440 T
5 F
(l) 207 440 T
(w1) 215.4 440 T
(w2) 232.79 440 T
(b1) 250.19 440 T
(b2) 264.92 440 T
(b3) 279.66 440 T
(b4) 294.39 440 T
(b5) 309.12 440 T
(b6) 323.86 440 T
(b7) 338.59 440 T
(b8) 353.32 440 T
4 F
( =>) 362.65 440 T
5 F
(ID) 384.26 440 T
2 11 Q
(Cr) 153 419.67 T
(eates an object r) 164.95 419.67 T
(epr) 241.93 419.67 T
(esenting a globally unique identi\336er \050GUID\051 fr) 257.96 419.67 T
(om) 483.55 419.67 T
(the hexadecimal ar) 153 405.67 T
(guments.) 244.74 405.67 T
(All server applications and OLE contr) 153 385.67 T
(ols must be r) 336.92 385.67 T
(egister) 399.14 385.67 T
(ed in the W) 431.39 385.67 T
(in-) 486.88 385.67 T
(dows r) 153 371.67 T
(egistry with a unique \050and \336xed\051 COM class ID, so that clients) 186.46 371.67 T
(can invoke them. Class IDs ar) 153 357.67 T
(e GUIDs. T) 296.83 357.67 T
(o give your server application) 349.91 357.67 T
(or OLE contr) 153 343.67 T
(ol its class ID, you must generate a GUID for it.) 215.96 343.67 T
(The) 153 323.67 T
0 F
(ID) 174.16 323.67 T
2 F
( value is an instance of the class) 186.38 323.67 T
4 9.5 Q
(<REFGUID>) 342.72 323.67 T
2 11 Q
(, which has the alias) 394.02 323.67 T
4 9.5 Q
(<REFCLSID>) 153 309.67 T
2 11 Q
(. The) 210 309.67 T
4 9.5 Q
(<embeddable-frame>) 236.66 309.67 T
2 11 Q
( class\325s r) 339.26 309.67 T
(equir) 379.55 309.67 T
(ed init-keywor) 404.96 309.67 T
(d) 476.58 309.67 T
4 9.5 Q
(class-id:) 153 295.67 T
2 11 Q
( expects an object of this class.) 204.3 295.67 T
(The) 153 275.67 T
4 9.5 Q
(make-GUID) 174.16 275.67 T
2 11 Q
( function cr) 225.46 275.67 T
(eates the C str) 280.77 275.67 T
(uctur) 348.87 275.67 T
(e necessary to r) 374.76 275.67 T
(epr) 449.13 275.67 T
(esent a) 465.15 275.67 T
(GUID. However) 153 261.67 T
(, it does) 232.29 261.67 T
0 F
(not) 272.73 261.67 T
2 F
( cr) 287.4 261.67 T
(eate the unique hexadecimal values that) 299.18 261.67 T
(constitute the GUID. Y) 153 247.67 T
(ou must do that with a once-only invocation of a) 262.57 247.67 T
(special utility pr) 153 233.67 T
(ogram pr) 232.11 233.67 T
(ovided with Harlequin Dylan called) 277.3 233.67 T
4 9.5 Q
(create-) 455.92 233.67 T
(id) 153 219.67 T
2 11 Q
(.) 164.4 219.67 T
(T) 153 199.67 T
(o cr) 158.73 199.67 T
(eate a GUID value, r) 176.52 199.67 T
(un) 275.64 199.67 T
4 9.5 Q
(create-id) 291.42 199.67 T
2 11 Q
( utility at an MS-DOS pr) 342.72 199.67 T
(ompt.) 460.52 199.67 T
(The utility takes a single integer ar) 153 185.67 T
(gument, which is the number of) 320.76 185.67 T
(GUIDs to generate. \050The default is one GUID.\051) 153 171.67 T
(The utility writes the GUIDs it generates to the standar) 153 151.67 T
(d output in the) 419.6 151.67 T
(form of string literals that can be pasted into Dylan sour) 153 137.67 T
(ce code.) 425.12 137.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "114" 24
%%Page: "115" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.6) 383.51 677.67 T
(The DUIM-OLE-SERVER module) 404.88 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(1) 526.83 100 T
(15) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(Given the following value fr) 135 640.67 T
(om) 272.33 640.67 T
4 9.5 Q
(create-id) 290.8 640.67 T
2 11 Q
(:) 342.1 640.67 T
4 9 Q
(MS-DOS> create-id) 145.8 620 T
("{113f2c00-f87b-11cf-89fd-02070119f639}") 145.8 609 T
2 11 Q
(you need to split the value into parts as follows, and for each add the) 135 590.67 T
(pr) 135 576.67 T
(e\336x #x. For example:) 145.76 576.67 T
4 9 Q
(define constant $my-class-ID =) 145.8 556 T
(make-GUID\050#x113f2c00, #xf87b, #x11cf, #x89, #xfd, #x02, #x07,) 156.6 545 T
(#x01, #x19, #xf6, #x39\051;) 210.6 534 T
2 11 Q
(See \322GUIDs: Globally Unique Identi\336ers\323 on page 96 for mor) 135 513.67 T
(e on) 432.18 513.67 T
(GUIDs and when to use) 135 499.67 T
4 9.5 Q
(make-GUID) 254.61 499.67 T
2 11 Q
(.) 305.91 499.67 T
3 12 Q
(note-embed) 108 465 T
(ded-data-c) 163.68 465 T
(hang) 213.35 465 T
(ed) 236.95 465 T
0 11 Q
(Function) 445.45 465.67 T
4 9 Q
(note-embedded-data-changed) 135 445 T
5 F
(frame) 280.8 445 T
4 F
( => \050\051) 303.8 445 T
2 11 Q
(A server application should call this function on its frame object when-) 135 424.67 T
-0.08 (ever a change is made to either the embedded object\325s persistent data or) 135 410.67 P
(to the image that should appear in the container) 135 396.67 T
(. The function ensur) 367.83 396.67 T
(es) 465.13 396.67 T
(that) 135 382.67 T
4 9.5 Q
(save-frame-to-storage) 156.82 382.67 T
2 11 Q
( is called as necessary and that the con-) 276.52 382.67 T
(tainer) 135 368.67 T
(\325s display of the embedded object is r) 164.12 368.67 T
(efr) 344.21 368.67 T
(eshed as necessary) 357.29 368.67 T
(. It has) 447.17 368.67 T
(no ef) 135 354.67 T
(fect if the pr) 158.89 354.67 T
(ogram is not r) 217.42 354.67 T
(unning under OLE.) 285.47 354.67 T
(This function is implemented as follows:) 135 334.67 T
4 9 Q
(define method note-embedded-data-changed \050frame ::) 135 314 T
(<embeddable-frame>\051 => \050\051) 145.8 303 T
(frame.embedded-data-changed? := #t;) 156.6 292 T
(// need to save data) 356.4 292 T
(note-embedded-image-changed\050frame\051;) 156.6 281 T
(// update image in) 356.4 281 T
(// container) 356.4 270 T
(end method;) 135 259 T
2 11 Q
(If you pr) 135 238.67 T
(efer) 177.38 238.67 T
(, your application can use the two elements of this function) 195.12 238.67 T
(separately) 135 224.67 T
(. The slot) 183.84 224.67 T
4 9.5 Q
(embedded-data-changed?) 230.71 224.67 T
2 11 Q
( indicates whether) 356.11 224.67 T
4 9.5 Q
(save-) 448.24 224.67 T
(frame-to-storage) 135 210.67 T
2 11 Q
( needs to be called, and is automatically set to) 226.2 210.67 T
4 9.5 Q
(#f) 450.72 210.67 T
2 11 Q
(when either it or) 135 196.67 T
4 9.5 Q
(load-frame-from-storage) 218.46 196.67 T
2 11 Q
( is called.) 349.56 196.67 T
3 12 Q
(note-embed) 108 162 T
(ded-region-c) 163.68 162 T
(hang) 223.19 162 T
(ed) 246.79 162 T
0 11 Q
(Open generic function) 386.57 162.67 T
4 9 Q
(note-embedded-region-changed) 135 142 T
5 F
(frame) 291.6 142 T
(width) 319.99 142 T
(height) 349.4 142 T
4 F
( =>) 374.4 142 T
5 F
(ok?) 396 142 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "115" 25
%%Page: "116" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Compound Documents and OLE Controls in DUIM) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(1) 72 100 T
(16) 76.17 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(A server application can de\336ne a method on this function in or) 153 640.67 T
(der to be) 457.71 640.67 T
(noti\336ed if the container application allocates a scr) 153 626.67 T
(een r) 393.52 626.67 T
(egion dif) 417.35 626.67 T
(fer) 460.48 626.67 T
(ent) 473.56 626.67 T
(fr) 153 612.67 T
(om that your server application asked for) 160.81 612.67 T
(. For example, the container) 361.48 612.67 T
(might permit the user to manually r) 153 598.67 T
(esize the embedded window) 327.42 598.67 T
(. The) 466.26 598.67 T
0 F
(width) 153 584.67 T
2 F
( and) 178.66 584.67 T
0 F
(height) 202.79 584.67 T
2 F
( ar) 230.29 584.67 T
(e given in pixels.) 242.68 584.67 T
(The default method does nothing; the embedded image is simply) 153 564.67 T
(clipped if the server application tries to draw outside the pr) 153 550.67 T
(ovided) 442.42 550.67 T
(space. Y) 153 536.67 T
(our application should pr) 191.75 536.67 T
(ovide a method if it wants to do some-) 316.08 536.67 T
(thing such as scaling the image to \336t the available space. The method) 153 522.67 T
(should r) 153 508.67 T
(eturn) 193.52 508.67 T
4 9.5 Q
(#t) 222.51 508.67 T
2 11 Q
( if the change is acceptable, or) 233.91 508.67 T
4 9.5 Q
(#f) 381.61 508.67 T
2 11 Q
( to for) 393.01 508.67 T
(ce use of out-of-) 421.91 508.67 T
(place activation if the server application cannot operate in the space) 153 494.67 T
(given.) 153 480.67 T
(Note that the drawing pane sheet will be automatically r) 153 460.67 T
(esized as neces-) 427.42 460.67 T
(sary independently of this function, but the server application should) 153 446.67 T
(not r) 153 432.67 T
(ely on looking at the sheet size because it might r) 175.89 432.67 T
(e\337ect temporary) 413.85 432.67 T
(visibility clipping, not necessarily the full image size.) 153 418.67 T
-0.1 (Note that the same width and height values can also be obtained by call-) 153 398.67 P
-0.2 (ing) 153 384.67 P
4 9.5 Q
-0.41 (frame-embedded-size) 171.27 384.67 P
2 11 Q
-0.2 ( if you do not want to have to r) 279.57 384.67 P
-0.2 (emember them) 428.26 384.67 P
(her) 153 370.67 T
(e.) 168.82 370.67 T
3 12 Q
(note-in-place-activ) 126 336 T
(ation) 212.76 336 T
0 11 Q
(Open generic function) 404.57 336.67 T
4 9 Q
(note-in-place-activation) 153 316 T
5 F
(frame) 288 316 T
4 F
( => \050\051) 310.99 316 T
2 11 Q
(The DUIM-OLE-Server library calls this function when an in-place acti-) 153 295.67 T
(vation is begun, immediately after it has \336nished displaying the server) 153 281.67 T
(application\325s document window) 153 267.67 T
(, menus, and tool bar in the container) 309.8 267.67 T
(application. Y) 153 253.67 T
(our server application can de\336ne a method on this func-) 219.53 253.67 T
-0.11 (tion if it desir) 153 239.67 P
-0.11 (es to be noti\336ed of that fact. The default method does noth-) 217.76 239.67 P
(ing.) 153 225.67 T
3 12 Q
(note-in-place-deactiv) 126 191 T
(ation) 224.24 191 T
0 11 Q
(Open generic function) 404.57 191.67 T
4 9 Q
(note-in-place-deactivation) 153 171 T
5 F
(frame) 298.8 171 T
4 F
( => \050\051) 321.8 171 T
2 11 Q
(The DUIM-OLE-Server library calls this function just befor) 153 150.67 T
(e it ends an) 437.98 150.67 T
(in-place activation. Y) 153 136.67 T
(our server application can de\336ne a method on this) 254.39 136.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "116" 26
%%Page: "117" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.6) 383.51 677.67 T
(The DUIM-OLE-SERVER module) 404.88 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(1) 526.83 100 T
(17) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(function it desir) 135 640.67 T
(es to be noti\336ed of that fact. The default method does) 212.07 640.67 T
(nothing.) 135 626.67 T
(The container) 135 606.67 T
(\325s status bar is clear) 202.57 606.67 T
(ed befor) 296.72 606.67 T
(e this method is called, but) 336.63 606.67 T
4 9.5 Q
(frame-status-message-setter) 135 592.67 T
2 11 Q
( can be called her) 288.9 592.67 T
(e to leave a parting) 372.63 592.67 T
(message.) 135 578.67 T
3 12 Q
(sa) 108 544 T
(ve-frame-to-stora) 118.81 544 T
(g) 199.64 544 T
(e) 205.75 544 T
0 11 Q
(Open generic function) 386.57 544.67 T
4 9 Q
(save-frame-to-storage) 135 524 T
5 F
(frame) 253.8 524 T
(str) 282.2 524 T
(eam) 293.03 524 T
4 F
( => \050\051) 309.53 524 T
2 11 Q
(The DUIM-OLE-Server library calls this function to stor) 135 503.67 T
(e the server) 405.35 503.67 T
(application\325s data persistently as part of the container) 135 489.67 T
(\325s compound doc-) 396.44 489.67 T
(ument. If your server application has any data that should be saved per-) 135 475.67 T
(sistently) 135 461.67 T
(, you must pr) 174.47 461.67 T
(ovide a method on this function. The default) 239.58 461.67 T
(method does nothing.) 135 447.67 T
(If you wanted to save thr) 135 427.67 T
(ee) 256.9 427.67 T
4 9.5 Q
(<integer>) 270.19 427.67 T
2 11 Q
( values in the compound docu-) 321.49 427.67 T
(ment, the method on) 135 413.67 T
4 9.5 Q
(save-frame-to-storage) 239.08 413.67 T
2 11 Q
( might look something) 358.78 413.67 T
(like this:) 135 399.67 T
4 9 Q
(define method save-frame-to-storage \050frame :: <foo-frame>,) 135 379 T
(stream :: <storage-istream>) 334.8 368 T
(\051 => \050\051) 329.4 357 T
(istream-write-integer\050stream, frame.foo\051;) 145.8 346 T
(istream-write-integer\050stream, frame.bar\051;) 145.8 335 T
(istream-write-integer\050stream, frame.baz\051;) 145.8 324 T
(end method;) 135 313 T
2 11 Q
-0.32 (The function) 135 292.67 P
4 9.5 Q
-0.66 (istream-write-integer) 199.06 292.67 P
2 11 Q
-0.32 ( stor) 318.76 292.67 P
-0.32 (es a 32-bit signed integer \050and) 339.59 292.67 P
(r) 135 278.67 T
(eturns no values\051, while) 139.15 278.67 T
4 9.5 Q
(istream-write-int16) 258.6 278.67 T
2 11 Q
( can be used for values) 366.9 278.67 T
(that \336t into a 16-bit signed \336eld. Use) 135 264.67 T
4 9.5 Q
(istream-write-float) 314 264.67 T
2 11 Q
( for a) 422.3 264.67 T
4 9.5 Q
(<single-float>) 135 250.67 T
2 11 Q
(, or) 214.8 250.67 T
4 9.5 Q
(istream-write-string) 233.4 250.67 T
2 11 Q
( to write a) 347.4 250.67 T
4 9.5 Q
(<byte-string>) 399.07 250.67 T
2 11 Q
(.) 473.17 250.67 T
(Y) 135 230.67 T
(ou can also use the low-level OLE API function) 141.32 230.67 T
4 9.5 Q
(IStream/Write) 373.67 230.67 T
2 11 Q
( to out-) 447.77 230.67 T
(put arbitrary FFI data:) 135 216.67 T
4 9.5 Q
(<storage-istream>) 245.85 216.67 T
2 11 Q
( is actually an alias for) 342.75 216.67 T
4 9.5 Q
(<LPSTREAM>) 135 202.67 T
2 11 Q
( fr) 192 202.67 T
(om the) 202.56 202.67 T
4 9.5 Q
(COM) 239.04 202.67 T
2 11 Q
( library) 256.14 202.67 T
(.) 290.46 202.67 T
(Note that ther) 135 182.67 T
(e ar) 202.98 182.67 T
(e separate) 220.65 182.67 T
4 9.5 Q
(istream-write-) 272.16 182.67 T
2 11 Q
(\311 functions instead of a) 351.96 182.67 T
(single generic function, because the object type is not saved to the) 135 168.67 T
-0.41 (str) 135 154.67 P
-0.41 (eam; you need to know what kind of object you ar) 147.4 154.67 P
-0.41 (e writing in or) 387.32 154.67 P
-0.41 (der to) 455.39 154.67 P
(know how to r) 135 140.67 T
(ead it back.) 206.27 140.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "117" 27
%%Page: "118" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Compound Documents and OLE Controls in DUIM) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(1) 72 100 T
(18) 76.17 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(Note that the) 153 640.67 T
0 F
(str) 219.58 640.67 T
(eam) 231.61 640.67 T
2 F
( ar) 249.33 640.67 T
(gument must be an instance of an OLE storage) 261.72 640.67 T
(str) 153 626.67 T
(eam,) 165.4 626.67 T
4 9.5 Q
(<storage-istream>) 191.38 626.67 T
2 11 Q
(. It is not an instance of the class) 288.28 626.67 T
4 9.5 Q
(<stream>) 446.58 626.67 T
2 11 Q
(fr) 153 612.67 T
(om the Str) 160.81 612.67 T
(eams library) 210.79 612.67 T
(.) 270.26 612.67 T
3 12 Q
(load-frame-fr) 126 578 T
(om-stora) 186.5 578 T
(g) 228.52 578 T
(e) 234.62 578 T
0 11 Q
(Open generic function) 404.57 578.67 T
4 9 Q
(load-frame-from-storage) 153 558 T
5 F
(frame) 282.6 558 T
(str) 310.99 558 T
(eam) 321.83 558 T
4 F
( :: <storage-istream> => \050\051) 338.33 558 T
2 11 Q
(Server applications must pr) 153 537.67 T
(ovide a method on this function to r) 287.19 537.67 T
(estor) 461.83 537.67 T
(e) 485.5 537.67 T
(the data saved by) 153 523.67 T
4 9.5 Q
(save-frame-to-storage) 241.13 523.67 T
2 11 Q
(. The default method does) 360.83 523.67 T
(nothing. Server applications do not call this method; instead it is called) 153 509.67 T
(by the DUIM-OLE-Server library) 153 495.67 T
(.) 312.09 495.67 T
(Note that the) 153 475.67 T
0 F
(str) 219.58 475.67 T
(eam) 231.61 475.67 T
2 F
( ar) 249.33 475.67 T
(gument must be an instance of an OLE storage) 261.72 475.67 T
(str) 153 461.67 T
(eam,) 165.4 461.67 T
4 9.5 Q
(<storage-istream>) 191.38 461.67 T
2 11 Q
(. It is not an instance of the class) 288.28 461.67 T
4 9.5 Q
(<stream>) 446.58 461.67 T
2 11 Q
(fr) 153 447.67 T
(om the Str) 160.81 447.67 T
(eams library) 210.79 447.67 T
(.) 270.26 447.67 T
-0.23 (The following example loads thr) 153 427.67 P
-0.23 (ee) 309.93 427.67 P
4 9.5 Q
-0.48 (<integer>) 322.98 427.67 P
2 11 Q
-0.23 ( values back fr) 374.29 427.67 P
-0.23 (om the com-) 443.72 427.67 P
(pound document:) 153 413.67 T
4 9 Q
(define method load-frame-from-storage \050frame :: <foo-frame>,) 153 393 T
(stream :: <storage-istream>) 358.2 382 T
(\051 => \050\051) 358.2 371 T
(frame.foo := istream-read-integer\050stream\051;) 163.8 360 T
(frame.bar := istream-read-integer\050stream\051;) 163.8 349 T
(frame.baz := istream-read-integer\050stream\051;) 163.8 338 T
(values\050\051) 163.8 327 T
(end method;) 153 316 T
2 11 Q
(The function) 153 295.67 T
4 9.5 Q
(istream-read-integer) 217.69 295.67 T
2 11 Q
( r) 331.69 295.67 T
(eads a value written by) 338.59 295.67 T
4 9.5 Q
(istream-) 454.57 295.67 T
(write-integer) 153 281.67 T
2 11 Q
(, while) 226.29 281.67 T
4 9.5 Q
(istream-read-int16) 261.78 281.67 T
2 11 Q
( r) 364.38 281.67 T
(eads a value written by) 371.28 281.67 T
4 9.5 Q
(istream-write-int16) 153 267.67 T
2 11 Q
(, and) 261.3 267.67 T
4 9.5 Q
(IStream/Read) 288.17 267.67 T
2 11 Q
( corr) 356.57 267.67 T
(esponds to) 378.7 267.67 T
4 9.5 Q
(IStream/Write) 153 253.67 T
2 11 Q
(.) 227.1 253.67 T
3 16 Q
(3.7  The DUIM-OLE-CONTR) 126 218.33 T
(OL module) 294.14 218.33 T
2 11 Q
(This section contains a r) 126 197.67 T
(efer) 242.31 197.67 T
(ence entry for the items that the DUIM-OLE-Con-) 260.66 197.67 T
(tr) 126 183.67 T
(ol module exports fr) 133.73 183.67 T
(om the DUIM-OLE-Contr) 232.7 183.67 T
(ol library) 357.71 183.67 T
(. Note that, in addi-) 401.24 183.67 T
(tion to these items, DUIM-OLE-Contr) 126 169.67 T
(ol also r) 308.7 169.67 T
(e-exports all the items fr) 346.92 169.67 T
(om) 464.42 169.67 T
(DUIM-OLE-Server) 126 155.67 T
(. See Section 3.6 on page 1) 217 155.67 T
(10 for those r) 342.24 155.67 T
(efer) 405.58 155.67 T
(ence entries.) 423.92 155.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "118" 28
%%Page: "119" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.7) 374 677.67 T
(The DUIM-OLE-CONTROL module) 395.37 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(1) 526.83 100 T
(19) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 12 Q
0 X
(initializ) 108 640 T
(e-ole-contr) 141.46 640 T
(ol) 192.12 640 T
0 11 Q
(Macr) 457.29 640.67 T
(o) 481.12 640.67 T
4 9 Q
(initialize-ole-control \050 #rest options \051) 135 620 T
2 11 Q
(Y) 135 599.67 T
(ou must call this macr) 141.32 599.67 T
(o at top-level in your OLE contr) 248.44 599.67 T
(ol in or) 402.87 599.67 T
(der to set) 437.33 599.67 T
(up some static initializations necessary for DLL initialization and r) 135 585.67 T
(egis-) 457.96 585.67 T
(tration. \050It is not an executable expr) 135 571.67 T
(ession.\051 W) 306.67 571.67 T
(ithout this call, contr) 356.43 571.67 T
(ol) 456.51 571.67 T
(containers will be unable to connect to your contr) 135 557.67 T
(ol.) 375.22 557.67 T
(This macr) 135 537.67 T
(o cannot be used mor) 183 537.67 T
(e than once in a DLL library) 287.3 537.67 T
(. The ar) 422.14 537.67 T
(gu-) 458.45 537.67 T
(ments ar) 135 523.67 T
(e keywor) 177.03 523.67 T
(d options. Note that you must specify) 221.88 523.67 T
4 9.5 Q
(frame-class:) 407.91 523.67 T
2 11 Q
(and either) 135 509.67 T
4 9.5 Q
(typeinfo:) 187.2 509.67 T
2 11 Q
( or) 238.49 509.67 T
4 9.5 Q
(class-id:) 254.35 509.67 T
2 11 Q
( and) 305.65 509.67 T
4 9.5 Q
(title:) 329.77 509.67 T
2 11 Q
(.) 363.97 509.67 T
4 9.5 Q
(typeinfo:) 135 489.67 T
2 11 Q
(The type information describing the object. Optional.) 216 489.67 T
-0.17 (If not speci\336ed, the library cr) 216 471.67 P
-0.17 (eates default type informa-) 355.34 471.67 P
(tion based on the attributes of the DUIM sheet being) 216 457.67 T
(used. If the frame contains a DUIM) 216 443.67 T
4 9.5 Q
(<gadget>) 389.73 443.67 T
2 11 Q
(, dispatch) 435.33 443.67 T
(pr) 216 429.67 T
(operties and methods corr) 226.76 429.67 T
(esponding to the gadget) 354.33 429.67 T
(pr) 216 415.67 T
(otocols will be automatically cr) 226.76 415.67 T
(eated \050for example, a) 377.9 415.67 T
(\322value\323 pr) 216 401.67 T
(operty for a) 267.33 401.67 T
4 9.5 Q
(<value-gadget>) 327.02 401.67 T
2 11 Q
(\051.) 406.82 401.67 T
(If speci\336ed, the) 216 383.67 T
4 9.5 Q
(typeinfo:) 292.9 383.67 T
2 11 Q
( value should be an instance) 344.2 383.67 T
(of class) 216 369.67 T
4 9.5 Q
(<coclass-type-info>) 254.08 369.67 T
2 11 Q
(, as described in the .) 362.38 369.67 T
(If the) 216 351.67 T
4 9.5 Q
(class:) 244.13 351.67 T
2 11 Q
( option of) 278.33 351.67 T
4 9.5 Q
(<coclass-type-info>) 328.06 351.67 T
2 11 Q
( is speci-) 436.36 351.67 T
(\336ed, it must be a subclass of) 216 337.67 T
4 9.5 Q
(<DUIM-OCX>) 354.84 337.67 T
2 11 Q
(.) 411.84 337.67 T
4 9.5 Q
(class-id:) 135 317.67 T
2 11 Q
(The COM Class ID for the contr) 216 317.67 T
(ol, as described) 370.11 317.67 T
(for) 216 303.67 T
4 9.5 Q
(<embeddable-frame>) 230.01 303.67 T
2 11 Q
( above.) 332.61 303.67 T
-0.43 (This is r) 216 285.67 P
-0.43 (equir) 253.66 285.67 P
-0.43 (ed if) 279.07 285.67 P
4 9.5 Q
-0.89 (typeinfo:) 302.56 285.67 P
2 11 Q
-0.43 ( is not speci\336ed; otherwise,) 353.86 285.67 P
(this option is not used and the class ID is speci\336ed by) 216 271.67 T
(the) 216 257.67 T
4 9.5 Q
(uuid:) 234.01 257.67 T
2 11 Q
( option of the) 262.51 257.67 T
4 9.5 Q
(<coclass-type-info>) 330.24 257.67 T
2 11 Q
( instead.) 438.55 257.67 T
4 9.5 Q
(value-type:) 135 237.67 T
2 11 Q
(If the) 216 237.67 T
4 9.5 Q
(typeinfo:) 244.13 237.67 T
2 11 Q
( is being cr) 295.43 237.67 T
(eated by default, and the) 347.64 237.67 T
(frame contains a) 216 223.67 T
4 9.5 Q
(<value-gadget>) 298.89 223.67 T
2 11 Q
(, this option can be) 378.68 223.67 T
(used to specify the data type of the "value" pr) 216 209.67 T
(operty of) 436.85 209.67 T
(the OLE contr) 216 195.67 T
(ol. It gets its default value fr) 283.87 195.67 T
(om) 419.91 195.67 T
4 9.5 Q
(gadget-) 438.38 195.67 T
(value-type) 216 181.67 T
2 11 Q
(, which may not be speci\336c enough to map) 273 181.67 T
(to an OLE Automation type.) 216 167.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "119" 29
%%Page: "120" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Compound Documents and OLE Controls in DUIM) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(120) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 9.5 Q
0 X
(disp-typeinfo-options:) 153 640.67 T
2 11 Q
-0.09 (If the) 234 622.67 P
4 9.5 Q
-0.19 (typeinfo:) 261.94 622.67 P
2 11 Q
-0.09 ( is being cr) 313.24 622.67 P
-0.09 (eated by default, this option) 365.18 622.67 P
(can be used to add information to the automatically) 234 608.67 T
(generated dispatch type info. The value should be a) 234 594.67 T
(sequence of keywor) 234 580.67 T
(d and value pairs such as used as) 330.55 580.67 T
4 9.5 Q
(make) 234 566.67 T
2 11 Q
( options for a) 256.8 566.67 T
4 9.5 Q
(<disp-type-info>) 323.79 566.67 T
2 11 Q
(. For example, to) 414.99 566.67 T
(add a user) 234 552.67 T
(-de\336ned pr) 284.65 552.67 T
(operty:) 338.86 552.67 T
4 9 Q
(disp-typeinfo-options:) 250.2 532 T
(vector\050name: "my-dispatch",) 261 521 T
(properties:) 298.8 510 T
(vector\050make\050<variable-description>,) 309.6 499 T
(name: "foo",) 358.2 488 T
(getter: my-property\051\051\051) 358.2 477 T
4 9.5 Q
(frame-class:) 153 458.67 T
2 11 Q
(The class to be instantiated for the DUIM frame.) 234 458.67 T
(Requir) 234 444.67 T
(ed. This should be a user) 266.76 444.67 T
(-de\336ned subclass of) 387.45 444.67 T
4 9.5 Q
(<embeddable-frame>) 234 430.67 T
2 11 Q
(.) 336.6 430.67 T
4 9.5 Q
(frame-options:) 153 410.67 T
2 11 Q
(An optional sequence of keywor) 234 410.67 T
(d options to be passed) 391.52 410.67 T
-0.23 (to) 234 396.67 P
4 9.5 Q
-0.47 (make) 246.12 396.67 P
2 11 Q
-0.23 ( when instantiating the frame. The default value) 268.92 396.67 P
(is an empty sequence. Options used when cr) 234 382.67 T
(eating an) 450.29 382.67 T
-0.07 (OLE server) 234 368.67 P
-0.07 (, such as) 288.06 368.67 P
4 9.5 Q
-0.15 (class-id:) 331.59 368.67 P
2 11 Q
-0.07 ( and) 382.89 368.67 P
4 9.5 Q
-0.15 (object-title:) 406.88 368.67 P
2 11 Q
-0.07 (, ar) 480.98 368.67 P
-0.07 (e) 496.05 368.67 P
(not needed her) 234 354.67 T
(e, since they ar) 306.96 354.67 T
(e speci\336ed as options to) 378.67 354.67 T
(either the) 234 340.67 T
4 9.5 Q
(initialize-ole-control) 282.83 340.67 T
2 11 Q
( macr) 408.23 340.67 T
(o or when) 435.22 340.67 T
(making the) 234 326.67 T
4 9.5 Q
(<coclass-type-info>) 291.8 326.67 T
2 11 Q
(.) 400.11 326.67 T
4 9.5 Q
(title:) 153 306.67 T
2 11 Q
(A string to be used as the pr) 234 306.67 T
(ogram name shown in the) 370.53 306.67 T
(container) 234 292.67 T
(\325s Insert Object dialog. If not pr) 280.41 292.67 T
(ovided, the) 431.26 292.67 T
(default value is taken fr) 234 278.67 T
(om the) 348.94 278.67 T
4 9.5 Q
(documentation:) 385.42 278.67 T
2 11 Q
( or) 465.21 278.67 T
4 9.5 Q
(name:) 234 264.67 T
2 11 Q
( of the type info. This option is r) 262.5 264.67 T
(equir) 417.86 264.67 T
(ed if) 443.27 264.67 T
4 9.5 Q
(typeinfo:) 234 250.67 T
2 11 Q
( is not speci\336ed.) 285.3 250.67 T
4 9.5 Q
(short-title:) 153 230.67 T
2 11 Q
(An optional string used as the pr) 234 230.67 T
(ogram name in con-) 393.75 230.67 T
-0.01 (tainer menus and the Links dialog. It must not be mor) 234 216.67 P
-0.01 (e) 495.99 216.67 P
(than 15 characters long. If not speci\336ed, the default) 234 202.67 T
(value is taken fr) 234 188.67 T
(om the title, tr) 311.62 188.67 T
(uncated to 15 characters) 380.28 188.67 T
(if necessary) 234 174.67 T
(.) 289.51 174.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "120" 30
%%Page: "121" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.7) 374 677.67 T
(The DUIM-OLE-CONTROL module) 395.37 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(121) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 9.5 Q
0 X
(prog-id:) 135 640.67 T
2 11 Q
-0.19 (The OLE \322pr) 216 640.67 P
-0.19 (ogrammatic identi\336er\323. This is an optional) 277.88 640.67 P
(string which is used internally and will only be visible) 216 626.67 T
(in the r) 216 612.67 T
(egistry editor) 250.51 612.67 T
(. If speci\336ed, it must start with a) 314.87 612.67 T
(letter; it must not contain any spaces or punctuation) 216 598.67 T
(except a period \050.\051; and it must not be mor) 216 584.67 T
(e than 39) 419.74 584.67 T
(characters long. It must be unique amongst the IDs of) 216 570.67 T
(all other pr) 216 556.67 T
(ograms.) 269.77 556.67 T
-0.1 (If not speci\336ed, a default value is cr) 216 538.67 P
-0.1 (eated automatically) 387.73 538.67 P
(using portions of the title and class ID.) 216 524.67 T
4 9.5 Q
(misc-status:) 135 504.67 T
2 11 Q
-0.22 (An optional) 216 504.67 P
4 9.5 Q
-0.46 (<integer>) 276.53 504.67 P
2 11 Q
-0.22 ( formed by using) 327.83 504.67 P
4 9.5 Q
-0.46 (logior) 412.88 504.67 P
2 11 Q
-0.22 ( to com-) 447.08 504.67 P
(bine) 216 490.67 T
4 9.5 Q
($OLEMISC-) 239.71 490.67 T
2 11 Q
(\311 constants to specify various) 291.01 490.67 T
(attributes of the OLE contr) 216 476.67 T
(ol. If not speci\336ed, the) 345.49 476.67 T
(library attempts to choose an appr) 216 462.67 T
(opriate default for) 382.65 462.67 T
(the application frame. See the documentation for) 216 448.67 T
4 9.5 Q
(register-ole-server) 216 434.67 T
2 11 Q
( for mor) 324.3 434.67 T
(e information.) 363.68 434.67 T
4 9.5 Q
(versioned-prog-id:) 135 411.67 T
2 11 Q
(An optional string which is a pr) 216 394.17 T
(og ID that includes the) 370.47 394.17 T
(version number \321 as documented for) 216 380.17 T
4 9.5 Q
(register-) 403.43 380.17 T
(automation-server) 216 366.17 T
2 11 Q
(.) 312.09 366.17 T
4 9.5 Q
(versioned-title:) 135 343.17 T
2 11 Q
-0.49 (Optional title string that includes the pr) 216 325.67 P
-0.49 (ogram\325s version) 405.96 325.67 P
(number) 216 311.67 T
(.) 253.63 311.67 T
3 12 Q
(max-stora) 108 277 T
(g) 154.94 277 T
(e-siz) 161.05 277 T
(e) 183.02 277 T
0 11 Q
(Open generic function) 386.57 277.67 T
4 9 Q
(max-storage-size) 135 257 T
5 F
(frame) 226.8 257 T
4 F
( =>) 249.79 257 T
5 F
(max-size) 271.39 257 T
2 11 Q
(Return the maximum size, as an integer number of bytes, that will be) 135 236.67 T
(needed for the data written by) 135 222.67 T
4 9.5 Q
(save-frame-to-storage) 285.49 222.67 T
2 11 Q
( \050for example,) 405.19 222.67 T
(count 4 bytes for each call to) 135 208.67 T
4 9.5 Q
(istream-write-integer) 275.43 208.67 T
2 11 Q
(\051, or r) 395.13 208.67 T
(eturn) 421.54 208.67 T
4 9.5 Q
(#f) 450.52 208.67 T
2 11 Q
( if it) 461.92 208.67 T
(is not possible to make such an estimate. Y) 135 194.67 T
(ou may wish to pr) 341.1 194.67 T
(ovide a) 429.86 194.67 T
(method specialized on your contr) 135 180.67 T
(ol\325s frame class. The default method) 298.25 180.67 T
(r) 135 166.67 T
(eturns) 139.15 166.67 T
4 9.5 Q
(#f) 172.8 166.67 T
2 11 Q
(.) 184.2 166.67 T
(This information is used only if the contr) 135 146.67 T
(ol container chooses to utilize) 333.31 146.67 T
(the) 135 132.67 T
4 9.5 Q
(IPersistStream) 153.01 132.67 T
2 11 Q
( or) 232.81 132.67 T
4 9.5 Q
(IPersistStreamInit) 248.66 132.67 T
2 11 Q
( interface.) 351.26 132.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "121" 31
%%Page: "122" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Compound Documents and OLE Controls in DUIM) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(122) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 12 Q
0 X
(<ocx-dispatc) 126 640 T
(h>) 186.35 640 T
0 11 Q
(Open concr) 416.81 640.67 T
(ete class) 468.05 640.67 T
2 F
(Super) 153 618.67 T
(classes:) 181.43 618.67 T
4 9.5 Q
(<simple-dispatch>) 219.78 618.67 T
2 11 Q
(Adds some functionality for use in DUIM OLE contr) 153 598.67 T
(ols to) 408.18 598.67 T
4 9.5 Q
(<simple-) 437.14 598.67 T
(dispatch>) 153 584.67 T
2 11 Q
( fr) 204.3 584.67 T
(om the OLE-Automation library) 214.86 584.67 T
(.) 370.6 584.67 T
(Note that subclasses need to be de\336ned by) 153 564.67 T
4 9.5 Q
(define) 362.14 564.67 T
(COM-interface) 399.09 564.67 T
2 11 Q
(instead of) 153 550.67 T
4 9.5 Q
(define) 203.51 550.67 T
(class) 240.46 550.67 T
2 11 Q
(.) 268.96 550.67 T
3 12 Q
(ocx-frame) 126 516 T
0 11 Q
(Sealed generic function) 400.91 516.67 T
4 9 Q
(ocx-frame) 153 496 T
5 F
(interface) 207 496 T
4 F
( =>) 241.99 496 T
5 F
(frame) 263.59 496 T
2 11 Q
(Given an instance of) 153 475.67 T
4 9.5 Q
(<ocx-dispatch>) 254.96 475.67 T
2 11 Q
( or) 334.76 475.67 T
4 9.5 Q
(<DUIM-OCX>) 350.61 475.67 T
2 11 Q
(, r) 407.61 475.67 T
(eturns the associ-) 417.26 475.67 T
(ated DUIM frame.) 153 461.67 T
3 13 Q
(3.7.1  Getting the ambient pr) 126 428.33 T
(oper) 269.17 428.33 T
(ties of the contr) 292.48 428.33 T
(ol\325) 372.25 428.33 T
(s container) 384.06 428.33 T
2 11 Q
(T) 126 408.67 T
(o access the ambient pr) 131.73 408.67 T
(operties of the container using it, your OLE contr) 244.37 408.67 T
(ol) 482.61 408.67 T
(should call) 126 394.67 T
4 9.5 Q
(frame-ole-object) 181.91 394.67 T
2 11 Q
( on its own frame, and then use the facilities) 273.11 394.67 T
(described in the documentation for the OLE-Contr) 126 380.67 T
(ol-Framework library) 371.39 380.67 T
(, in) 475.16 380.67 T
(\322Ambient pr) 126 366.67 T
(operties\323 on page 222.) 187.82 366.67 T
(The following example shows how a contr) 126 346.67 T
(ol can ef) 332.14 346.67 T
(fectively localize itself) 372.37 346.67 T
(accor) 126 332.67 T
(ding to the contr) 151.42 332.67 T
(ol container using it.) 231.99 332.67 T
4 9 Q
(let obj = frame-ole-object\050frame\051;) 153 312 T
(let locale-code = OLE-util-locale\050obj\051;) 153 301 T
(let language = PRIMARYLANGID\050locale-code\051;) 153 290 T
(select \050language\051) 153 279 T
($LANG-NEUTRAL,) 163.8 268 T
($LANG-ENGLISH => \311) 163.8 257 T
($LANG-FRENCH  => \311) 163.8 246 T
($LANG-SPANISH => \311) 163.8 235 T
(\311) 153 224 T
3 13 Q
(3.7.2  A) 126 192.33 T
(utomaticall) 163.02 192.33 T
(y g) 219.16 192.33 T
(enerated contr) 234.67 192.33 T
(ol pr) 308.52 192.33 T
(oper) 331.43 192.33 T
(ties) 354.73 192.33 T
2 11 Q
(When the typeinfo is generated automatically) 126 172.67 T
(, it pr) 346.68 172.67 T
(ovides support for which-) 372.48 172.67 T
(ever of the following pr) 126 158.67 T
(operties and methods ar) 240.75 158.67 T
(e applicable.) 358.58 158.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "122" 32
%%Page: "123" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.8) 365.57 677.67 T
(Low-level DUIM-OLE-Control features) 386.95 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(123) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 16 Q
0 X
(3.8  Lo) 108 220.35 T
(w-le) 149.39 220.35 T
(vel DUIM-OLE-Contr) 174.74 220.35 T
(ol f) 300.59 220.35 T
(eatures) 320.16 220.35 T
2 11 Q
(The following may be used for low-level customization; the beginning user) 108 199.68 T
(need not be concerned with them.) 108 185.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
101.15 606.01 492.85 614 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
2 11 Q
0 X
0 0 0 1 0 0 0 K
(T) 205.52 617.67 T
(able 3.1  Default typeinfo pr) 211.25 617.67 T
(operties.) 346.78 617.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Name) 113.45 584.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Dispatch ID) 182.38 584.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DUIM function) 275.43 584.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(applicable to) 394.16 584.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(V) 107.15 563.01 T
(alue) 112.82 563.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($DISPID-V) 161.37 563.01 T
(ALUE) 204.53 563.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(gadget-value) 273.72 563.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<value-gadget>) 363.86 563.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(items) 107.15 544.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(gadget-items) 273.72 544.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<collection-gadget>) 363.86 544.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mode) 107.15 525.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(gadget-selection-) 273.72 525.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mode) 273.72 516.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<collection-gadget>) 363.86 525.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Caption) 107.15 497.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($DISPID-CAPTION) 161.37 497.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(gadget-label) 273.72 497.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<labelled-gadget-mixin>) 363.86 497.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 107.15 478.01 T
(ext) 111.83 478.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($DISPID-TEXT) 161.37 478.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(gadget-text) 273.72 478.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<text-gadget>) 363.86 478.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Enabled) 107.15 459.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($DISPID-ENABLED) 161.37 459.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(gadget-enabled?) 273.72 459.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Any that accept input) 363.86 459.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 107.15 440.01 T
(abStop) 111.83 440.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($DISPID-T) 161.37 440.01 T
(ABST) 203.88 440.01 T
(OP) 226.46 440.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(type-union\050<tab-contr) 363.86 440.01 T
(ol>,) 452.29 440.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<collection-gadget>, <text-) 363.86 431.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(gadget>\051) 363.86 422.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(For) 107.15 403.01 T
(eColor) 120.46 403.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($DISPID-FORECOLOR) 161.37 403.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(medium-) 273.72 403.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for) 273.72 394.01 T
(egr) 285.02 394.01 T
(ound) 297.73 394.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<sheet-with-medium-mixin>) 363.86 403.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(BackColor) 107.15 375.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($DISPID-BACKCOLOR) 161.37 375.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(medium-) 273.72 375.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(backgr) 273.72 366.01 T
(ound) 300.59 366.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<sheet-with-medium-mixin>) 363.86 375.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.82 302.02 487.18 310.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
2 11 Q
0 X
0 0 0 1 0 0 0 K
(T) 209.19 313.67 T
(able 3.2  Default typeinfo methods.) 214.92 313.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Name) 119.14 280.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Dispatch ID) 178.64 280.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DUIM function) 272.82 280.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(applicable to) 395.29 280.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(activate) 112.82 259.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($DISPID-DOCLICK) 167.08 259.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(activate-gadget) 260.54 259.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<action-gadget>) 371.81 259.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
155.37 600.01 155.37 359.01 2 L
V
0.25 H
0 Z
N
267.72 600.01 267.72 359.01 2 L
V
N
357.86 600.01 357.86 359.01 2 L
V
N
101.15 575.01 492.85 575.01 2 L
V
N
101.15 556.01 492.85 556.01 2 L
V
N
101.15 537.01 492.85 537.01 2 L
V
N
101.15 509.01 492.85 509.01 2 L
V
N
101.15 490.01 492.85 490.01 2 L
V
N
101.15 471.01 492.85 471.01 2 L
V
N
101.15 452.01 492.85 452.01 2 L
V
N
101.15 415.01 492.85 415.01 2 L
V
N
101.15 387.01 492.85 387.01 2 L
V
N
161.08 296.02 161.08 252.02 2 L
V
N
254.54 296.02 254.54 252.02 2 L
V
N
365.81 296.02 365.81 252.02 2 L
V
N
106.82 271.02 487.18 271.02 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "123" 33
%%Page: "124" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Compound Documents and OLE Controls in DUIM) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(124) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 12 Q
0 X
(<DUIM-OCX>) 126 640 T
0 11 Q
(Open concr) 416.81 640.67 T
(ete class) 468.05 640.67 T
2 F
(Super) 153 618.67 T
(classes:) 181.43 618.67 T
4 9.5 Q
(<ole-server-framework>) 222.53 618.67 T
(<simple-) 221.75 604.67 T
(component-object>) 267.35 604.67 T
(<IUnknown>) 227.25 590.67 T
2 11 Q
(.) 284.25 590.67 T
-0.25 (This is the class that is instantiated to cr) 153 570.67 P
-0.25 (eate the COM object that an OLE) 343.27 570.67 P
(contr) 153 556.67 T
(ol implements. The instance of this class is the \322contr) 178.02 556.67 T
(olling) 434.77 556.67 T
(unknown\323 for the various interfaces supported by the contr) 153 542.67 T
(ol\325s COM) 443.18 542.67 T
(object.) 153 528.67 T
-0.37 (If you want to de\336ne a subclass of this class, you must do so with) 153 508.67 P
4 9.5 Q
-0.77 (define) 467.42 508.67 P
(COM-interface) 153 494.67 T
2 11 Q
( rather than) 227.1 494.67 T
4 9.5 Q
(define) 286.69 494.67 T
(class) 323.64 494.67 T
2 11 Q
(.) 352.14 494.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "124" 34
%%Page: "129" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 540 117 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(129) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 513 504 648 R
7 X
V
2 30 Q
0 X
(4) 180 628 T
108 586.45 504 614 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 586.45 504 614 R
7 X
0 0 0 1 0 0 0 K
V
108 607.14 270 607.14 2 L
V
3 H
2 Z
0 X
N
108 598.14 270 598.14 2 L
7 X
V
1 H
0 X
N
36 72 576 720 C
0 0 0 0 1 1 1 K
2 2 Q
7 X
(4) 108 566.45 T
0 0 0 1 0 0 0 K
2 30 Q
0 X
0 0 0 1 0 0 0 K
(OLE Automation) 109 566.45 T
108 126 486 432 R
7 X
V
3 16 Q
0 X
(4.1  Intr) 108 421.33 T
(oduction) 154.43 421.33 T
2 11 Q
-0.15 (This chapter explains how to write applications that implement OLE Automa-) 108 400.67 P
(tion servers and contr) 108 386.67 T
(ollers, by using the OLE-Automation library) 213.86 386.67 T
(.) 428.03 386.67 T
3 16 Q
(4.2  About the OLE-A) 108 351.33 T
(utomation librar) 238.83 351.33 T
(y) 338.83 351.33 T
2 11 Q
(The OLE-Automation library allows you to cr) 108 330.67 T
(eate an application that can be) 329.77 330.67 T
-0.41 (used as an OLE Automation server or contr) 108 316.67 P
-0.41 (oller) 316.52 316.67 P
-0.41 (. The OLE-Automation library) 337.73 316.67 P
(includes a high-level framework for OLE Automation as well as a low-level) 108 302.67 T
(FFI interface to the Micr) 108 288.67 T
(osoft OLE Automation API, as exposed thr) 224.54 288.67 T
(ough) 432.42 288.67 T
4 9.5 Q
(OLE-) 460.33 288.67 T
(AUTO.H) 108 274.67 T
2 11 Q
(,) 142.2 274.67 T
4 9.5 Q
(OLEAUT32.LIB) 147.7 274.67 T
2 11 Q
(, and) 216.1 274.67 T
4 9.5 Q
(OLEAUT32.DLL) 242.97 274.67 T
2 11 Q
(.) 311.37 274.67 T
-0.05 (Because OLE Automation is a COM technology) 108 254.67 P
-0.05 (, some of the names that Auto-) 337.4 254.67 P
-0.46 (mation applications use ar) 108 240.67 P
-0.46 (e actually de\336ned in the Dylan COM library instead) 234.87 240.67 P
(of the OLE-Automation library) 108 226.67 T
(. However) 257.69 226.67 T
(, they ar) 307.8 226.67 T
(e all r) 347.07 226.67 T
(e-exported by OLE-) 373.89 226.67 T
(Automation so that you do not need to use COM dir) 108 212.67 T
(ectly) 362.65 212.67 T
(.) 384.48 212.67 T
-0.47 (By convention, functions fr) 108 192.67 P
-0.47 (om the higher) 238.05 192.67 P
-0.47 (-level part of the library ar) 305.13 192.67 P
-0.47 (e generally) 430.75 192.67 P
(shown beginning with a lower case letter) 108 178.67 T
(, while lower) 306.96 178.67 T
(-level function names) 370.25 178.67 T
(begin with an upper case letter) 108 164.67 T
(, the same as in the Micr) 257.31 164.67 T
(osoft documentation) 374.63 164.67 T
(for use fr) 108 150.67 T
(om C or C++, except that \322-\323 is used in place of \322_\323 and a \322$\323 or \322?\323) 151.89 150.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "129" 35
%%Page: "130" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(130) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(may be added wher) 126 640.67 T
(e appr) 222.85 640.67 T
(opriate. See Chapter 6,  \322OLE FFI Facilities\323 for) 253.74 640.67 T
(mor) 126 626.67 T
(e on OLE/COM FFI library conventions.) 145.87 626.67 T
(OLE Automation applications do) 126 606.67 T
0 F
(not) 290.37 606.67 T
2 F
( need to use the Dylan OLE library) 305.04 606.67 T
(,) 472.75 606.67 T
(which is concerned only with implementing compound documents.) 126 592.67 T
3 16 Q
(4.3  Over) 126 557.33 T
(vie) 181.57 557.33 T
(w of OLE A) 199.63 557.33 T
(utomation) 269.23 557.33 T
2 11 Q
(This section pr) 126 536.67 T
(ovides an overview of the concepts and terminology of OLE) 197.28 536.67 T
(Automation.) 126 522.67 T
3 13 Q
(4.3.1) 126 489.33 T
(Intr) 155.64 489.33 T
(oducing OLE A) 172.62 489.33 T
(utomation) 249.3 489.33 T
2 11 Q
(OLE Automation \321 also known simply as Automation \321 is a mechanism by) 126 469.67 T
(which two pr) 126 455.67 T
(ograms can communicate with one another) 191.09 455.67 T
(, using an interface) 400.49 455.67 T
(that can be speci\336ed independently of their implementation.) 126 441.67 T
-0.48 (Like the OLE compound documents technology) 126 421.67 P
-0.48 (, Automation works thr) 355.62 421.67 P
-0.48 (ough a) 468.8 421.67 P
(client-server mechanism. Server applications of) 126 407.67 T
(fer functionality to client) 355.87 407.67 T
(applications, but unlike compound documents the server and client need not) 126 393.67 T
-0.22 (of) 126 379.67 P
-0.22 (fer document-style functionality or even have any on-scr) 135.47 379.67 P
-0.22 (een r) 409.2 379.67 P
-0.22 (epr) 432.81 379.67 P
-0.22 (esentation.) 448.84 379.67 P
-0.24 (Automation simply allows a client application, or) 126 365.67 P
0 F
-0.24 (contr) 367.86 365.67 P
-0.24 (oller) 391.08 365.67 P
2 F
-0.24 (, to access function-) 409.82 365.67 P
(ality in a server that the server) 126 351.67 T
(\325s developer chose to expose.) 274.57 351.67 T
3 13 Q
(4.3.2  Dispatc) 126 318.33 T
(h interfaces, pr) 194.05 318.33 T
(oper) 270.29 318.33 T
(ties, and dispatc) 293.6 318.33 T
(h methods) 377.04 318.33 T
2 11 Q
(Servers expose functionality thr) 126 298.67 T
(ough) 280.14 298.67 T
0 F
(dispatch interfaces) 308.05 298.67 T
2 F
( or) 390.03 298.67 T
0 F
(dispinterfaces) 405.88 298.67 T
2 F
(.) 466.59 298.67 T
(Because dispatch interfaces ar) 126 284.67 T
(e COM interfaces that can be speci\336ed in a lan-) 271.19 284.67 T
(guage-independent fashion, and because all communication between a con-) 126 270.67 T
(tr) 126 256.67 T
(oller and server is undertaken thr) 133.73 256.67 T
(ough dispatch interfaces, an Automation) 296.48 256.67 T
(contr) 126 242.67 T
(oller written in V) 151.02 242.67 T
(isual BASIC can access a server written in Dylan with-) 233.8 242.67 T
(out any dif) 126 228.67 T
(\336culty) 179.13 228.67 T
(.) 208.98 228.67 T
(Dispatch interfaces ar) 126 208.67 T
(e implemented using the COM interface) 231.29 208.67 T
4 9.5 Q
(IDispatch) 429.26 208.67 T
2 11 Q
(.) 480.56 208.67 T
(Automation contr) 126 194.67 T
(ollers use) 212.97 194.67 T
4 9.5 Q
(IDispatch) 261.72 194.67 T
2 11 Q
( to access the dispatch interface or) 313.02 194.67 T
(interfaces that a server of) 126 180.67 T
(fers.) 247.93 180.67 T
-0.41 (In an Automation) 126 160.67 P
0 F
-0.41 (server) 214.22 160.67 P
2 F
-0.41 ( written using the OLE-Automation library) 241.12 160.67 P
-0.41 (, a dispatch) 447.16 160.67 P
-0.32 (interface is r) 126 146.67 P
-0.32 (epr) 184.99 146.67 P
-0.32 (esented as an instance of a Dylan class. That class has methods) 201.02 146.67 P
(de\336ned on it that can be invoked by the contr) 126 132.67 T
(oller) 346.61 132.67 T
(.) 367.81 132.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "130" 36
%%Page: "131" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.3) 402.25 677.67 T
(Overview of OLE Automation) 423.62 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(131) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(In an Automation) 108 640.67 T
0 F
(contr) 197.45 640.67 T
(oller) 220.67 640.67 T
2 F
( written using the OLE-Automation library) 240.23 640.67 T
(, a dis-) 448.33 640.67 T
(patch interface is r) 108 626.67 T
(epr) 197.36 626.67 T
(esented by a Dylan object which supports methods for) 213.39 626.67 T
(accessing the server) 108 612.67 T
(.) 203.63 612.67 T
(In OLE Automation, a dispatch interface can support two kinds of functional-) 108 592.67 T
(ity:) 108 578.67 T
0 F
(pr) 126.4 578.67 T
(operties) 135.98 578.67 T
2 F
( and) 170.21 578.67 T
0 F
(methods) 194.33 578.67 T
2 F
(. Pr) 230.99 578.67 T
(operties ar) 247.28 578.67 T
(e like Dylan class slots: they have a) 298.63 578.67 T
(value that can be r) 108 564.67 T
(ead or written. Methods ar) 197.18 564.67 T
(e functions that can be called on) 327.03 564.67 T
(the dispatch interface implementation object, that can accept additional) 108 550.67 T
(parameters, and that can r) 108 536.67 T
(eturn a single r) 235.18 536.67 T
(esult value.) 308.17 536.67 T
1 F
(Note:) 108 516.67 T
2 F
( W) 135.19 516.67 T
(e use the term \322dispatch method\323 to try to distinguish the OLE Auto-) 147.93 516.67 T
(mation/COM concept of a method fr) 108 502.67 T
(om Dylan\325s concept of a method.) 287.99 502.67 T
(Every dispatch interface can support any number of pr) 108 482.67 T
(operties and dispatch) 374.49 482.67 T
-0.04 (methods. Contr) 108 468.67 P
-0.04 (ollers can access these pr) 183.76 468.67 P
-0.04 (operties and dispatch methods using) 303.91 468.67 P
(a) 108 454.67 T
0 F
(dispatch ID) 116.25 454.67 T
2 F
( or) 168.08 454.67 T
0 F
(DISPID) 183.93 454.67 T
2 F
(, which is an integer index.) 221.21 454.67 T
(Each pr) 108 434.67 T
(operty or dispatch method also has a string name. \050Refer) 145.01 434.67 T
(ences to this) 420.06 434.67 T
(name ar) 108 420.67 T
(e case insensitive.\051 A contr) 147.28 420.67 T
(oller can query a server to look up the) 275.94 420.67 T
(DISPID corr) 108 406.67 T
(esponding to a name. Some standar) 166.99 406.67 T
(d pr) 340.14 406.67 T
(operties, called) 360.37 406.67 T
0 F
(stock) 436.35 406.67 T
-0.18 (pr) 108 392.67 P
-0.18 (operties) 117.58 392.67 P
2 F
-0.18 (, have a special r) 151.8 392.67 P
-0.18 (eserved DISPID, and so do not need to be looked up) 231.19 392.67 P
(by name.) 108 378.67 T
3 13 Q
(4.3.3  Ser) 108 345.33 T
(ver) 154.93 345.33 T
(s and COM objects) 170.79 345.33 T
2 11 Q
-0.28 (A server can implement mor) 108 325.67 P
-0.28 (e than one dispatch interface, but it will normally) 246.16 325.67 P
(implement a single COM object, which a contr) 108 311.67 T
(oller can connect to and query) 333.16 311.67 T
(to obtain the dispatch interfaces it contains. A) 108 297.67 T
0 F
(COM) 332.72 297.67 T
(object) 361.75 297.67 T
2 F
( is simply the) 387.2 297.67 T
(OLE/COM terminology for a piece of component softwar) 108 283.67 T
(e written using) 388.85 283.67 T
(COM.) 108 269.67 T
(The description of the COM object as a whole is called a) 108 249.67 T
0 F
(coclass) 382.34 249.67 T
2 F
(, which stands) 412.68 249.67 T
(for COM class. Each such kind of object is identi\336ed by a) 108 235.67 T
0 F
(Class ID) 386.72 235.67 T
2 F
(. A Class ID) 425.53 235.67 T
(is a) 108 221.67 T
0 F
(GUID) 126.86 221.67 T
2 F
( \050\322Globally Unique IDenti\336er\323\051, a 128-bit number) 155.59 221.67 T
(. \050Also sometimes) 394.2 221.67 T
(called a) 108 207.67 T
0 F
(UUID \321) 147.78 207.67 T
2 F
(\322Universally Unique IDenti\336er\323\051.) 193.61 207.67 T
1 F
(Note:) 108 187.67 T
2 F
( Her) 135.19 187.67 T
(e we ar) 156.51 187.67 T
(e discussing the OLE/COM notion of a class, and not a) 191.37 187.67 T
(Dylan) 108 173.67 T
4 9.5 Q
(<class>) 140.48 173.67 T
2 11 Q
(.) 180.38 173.67 T
(The following is an example of a GUID that could be used as a Class ID:) 108 153.67 T
4 9 Q
(e90f09e0-43db-11d0-8a04-02070119f639) 135 133 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "131" 37
%%Page: "132" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(132) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(For mor) 126 640.67 T
(e on GUIDs, see Section 2.5.1 on page 96.) 165.08 640.67 T
-0.37 (When an Automation contr) 126 620.67 P
-0.37 (oller wants to use a particular Automation service,) 258.34 620.67 P
(it r) 126 606.67 T
(equests an instance of a COM object with a particular Class ID. The native) 139.68 606.67 T
-0.31 (OLE/COM libraries will then arrange for the contr) 126 592.67 P
-0.31 (oller to either connect to an) 370.73 592.67 P
(alr) 126 578.67 T
(eady r) 138.85 578.67 T
(unning server for objects of that Class ID, or start a new server r) 169.46 578.67 T
(un-) 479.84 578.67 T
(ning. It \336nds out which server to r) 126 564.67 T
(un by looking up the Class ID in the W) 292.1 564.67 T
(in-) 480.94 564.67 T
(dows system r) 126 550.67 T
(egistry) 196.22 550.67 T
(, wher) 228.3 550.67 T
(e it will \336nd the pathname of the server) 258.79 550.67 T
(application to be r) 126 536.67 T
(un.) 214.15 536.67 T
3 13 Q
(4.3.4  T) 126 503.33 T
(ype libraries and type inf) 161.53 503.33 T
(ormation) 286.94 503.33 T
2 11 Q
(The r) 126 483.67 T
(egistry information for a Class ID may also include a) 151.31 483.67 T
0 F
(type library) 410.21 483.67 T
2 F
(, which) 460.83 483.67 T
-0.22 (pr) 126 469.67 P
-0.22 (ovides a description of all of the interfaces that the server supports. Contr) 136.76 469.67 P
-0.22 (ol-) 491.13 469.67 P
(lers \050and various utilities\051 can examine a COM class\325s type library without) 126 455.67 T
(r) 126 441.67 T
(unning the associated server application.) 130.26 441.67 T
(For example, the Micr) 126 421.67 T
(osoft OLE V) 232.6 421.67 T
(iewer utility can use the type library to dis-) 291.45 421.67 T
(play a detailed description of the services pr) 126 407.67 T
(ovided by an Automation server) 340.73 407.67 T
(,) 498.45 407.67 T
-0.14 (and the V) 126 393.67 P
-0.14 (isual C++ wizar) 172.44 393.67 P
-0.14 (ds can use a type library to generate the skeleton for) 249.52 393.67 P
(a contr) 126 379.67 T
(oller application that could use the server) 159.27 379.67 T
(.) 360.14 379.67 T
(Each of the dispatch interfaces in the type library is described by an item of) 126 359.67 T
0 F
-0.43 (type information) 126 345.67 P
2 F
-0.43 (, or a) 199.82 345.67 P
0 F
-0.43 (typeinfo) 225.39 345.67 P
2 F
-0.43 (. Ther) 261.45 345.67 P
-0.43 (e is also an item of) 289.08 345.67 P
0 F
-0.43 (coclass type information) 378.86 345.67 P
2 F
-0.43 ( for) 485.34 345.67 P
(the COM object that the server implements.) 126 331.67 T
3 13 Q
(4.3.5  Class factories) 126 298.33 T
2 11 Q
(When a server starts r) 126 278.67 T
(unning, it does not typically cr) 232.28 278.67 T
(eate an instance of the) 380.83 278.67 T
-0.22 (COM class it was asked for straight away) 126 264.67 P
-0.22 (. Instead, it \336rst cr) 324.33 264.67 P
-0.22 (eates a) 410.85 264.67 P
0 F
-0.22 (class factory) 445.7 264.67 P
2 F
-0.22 (.) 498.72 264.67 P
(A class factory can cr) 126 244.67 T
(eate multiple objects of a single COM class. Class facto-) 228.39 244.67 T
(ries ar) 126 230.67 T
(e COM objects that support the interface) 155.88 230.67 T
4 9.5 Q
(IClassFactory) 355.22 230.67 T
2 11 Q
( or) 429.32 230.67 T
4 9.5 Q
(IClassFactory2) 126 216.67 T
2 11 Q
(.) 205.8 216.67 T
(The OLE-Automation library pr) 126 196.67 T
(ovides the class) 281.15 196.67 T
4 9.5 Q
(<class-factory>) 359.65 196.67 T
2 11 Q
(. When you) 445.15 196.67 T
-0.06 (cr) 126 182.67 P
-0.06 (eate an instance of this class, a COM class factory object is cr) 135.03 182.67 P
-0.06 (eated and r) 426.59 182.67 P
-0.06 (egis-) 481.09 182.67 P
(ter) 126 168.67 T
(ed with W) 139 168.67 T
(indows. Once you have \336nished with the class factory \050such as) 189.25 168.67 T
-0.15 (when the server is about to terminate\051 you must end this r) 126 154.67 P
-0.15 (egistration with the) 406.71 154.67 P
(function) 126 140.67 T
4 9.5 Q
(revoke-registration) 169.53 140.67 T
2 11 Q
(.) 277.83 140.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "132" 38
%%Page: "133" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.4) 339.89 677.67 T
(Building an Automation controller application) 361.27 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(133) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(Once the server) 108 640.67 T
(\325s class factory is r) 184.88 640.67 T
(unning, the contr) 272.74 640.67 T
(oller connects to the class) 356.42 640.67 T
(factory and dir) 108 626.67 T
(ects it to make an instance of the desir) 180.29 626.67 T
(ed COM object.) 364.41 626.67 T
3 16 Q
(4.4) 108 591.33 T
(Building an A) 133.54 591.33 T
(utomation contr) 217.71 591.33 T
(oller application) 317.33 591.33 T
2 11 Q
(The complexity of an Automation contr) 108 570.67 T
(oller depends on how many dispatch) 300.21 570.67 T
-0.36 (interfaces it uses. This example \336rst assumes a contr) 108 556.67 P
-0.36 (oller that uses the server) 357.82 556.67 P
-0.36 (\325s) 475.89 556.67 P
(default dispatch interface, or \050equivalently\051 a server that implements only a) 108 542.67 T
(single dispatch interface. W) 108 528.67 T
(e will discuss the use of multiple dispatch inter-) 241.53 528.67 T
(faces in Section 4.4.9 on page 135.) 108 514.67 T
3 13 Q
(4.4.1  Initializing OLE A) 108 481.33 T
(utomation) 225 481.33 T
2 11 Q
(Befor) 108 461.67 T
(e using any OLE Automation facilities, a contr) 133.81 461.67 T
(oller application should) 358.28 461.67 T
(call the function) 108 447.67 T
4 9.5 Q
(OLE-initialize) 189.07 447.67 T
2 11 Q
(. This function ensur) 268.87 447.67 T
(es that the Micr) 368.77 447.67 T
(osoft) 443.92 447.67 T
(OLE/COM libraries have been initialized on the local machine.) 108 433.67 T
(The number of calls to this function must be balanced by the same number of) 108 413.67 T
(calls to the function) 108 399.67 T
4 9.5 Q
(OLE-uninitialize) 206.08 399.67 T
2 11 Q
(.) 297.28 399.67 T
3 13 Q
(4.4.2  Connecting to an A) 108 366.33 T
(utomation ser) 235.05 366.33 T
(ver application) 305.64 366.33 T
2 11 Q
(Automation contr) 108 346.67 T
(ollers connect to Automation servers using the function) 194.97 346.67 T
4 9.5 Q
(create-dispatch) 108 332.67 T
2 11 Q
(:) 193.5 332.67 T
4 9 Q
(let disp-interface = create-dispatch\050) 135 312 T
5 F
(class-ID) 334.8 312 T
4 F
(\051;) 368.79 312 T
2 11 Q
(This call instantiates a COM object of class) 108 291.67 T
0 F
(class-ID) 316.69 291.67 T
2 F
(, and r) 353.55 291.67 T
(eturns an object r) 384.57 291.67 T
(ep-) 468.17 291.67 T
(r) 108 277.67 T
(esenting the default dispatch interface implemented by that COM class. The) 112.15 277.67 T
0 F
(class-ID) 108 263.67 T
2 F
( ar) 144.86 263.67 T
(gument is a COM Class ID, as discussed in Section 4.3.3 on page) 157.26 263.67 T
(131.) 108 249.67 T
3 13 Q
(4.4.3  Getting Dispatc) 108 216.33 T
(h IDs f) 216.33 216.33 T
(or pr) 248.71 216.33 T
(oper) 272.8 216.33 T
(ties and dispatc) 296.11 216.33 T
(h methods) 376.59 216.33 T
2 11 Q
(Given a string) 108 196.67 T
0 F
(name) 179.54 196.67 T
2 F
(, use) 203.38 196.67 T
4 9.5 Q
(get-id-of-name) 228.2 196.67 T
2 11 Q
( to r) 308 196.67 T
(eturn Dispatch IDs for dispatch) 327.24 196.67 T
(interface pr) 108 182.67 T
(operties and dispatch methods:) 163.63 182.67 T
4 9 Q
(let disp-ID = get-id-of-name\050disp-interface,) 135 162 T
5 F
(name) 378 162 T
4 F
(\051;) 399.5 162 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "133" 39
%%Page: "134" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(134) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 13 Q
0 X
(4.4.4  Getting and setting the v) 126 639.33 T
(alue of a dispatc) 280.43 639.33 T
(h pr) 363.87 639.33 T
(oper) 383.82 639.33 T
(ty) 407.12 639.33 T
2 11 Q
(Use) 126 619.67 T
4 9.5 Q
(get-property) 147.24 619.67 T
2 11 Q
( to r) 215.64 619.67 T
(ead the value of a pr) 234.88 619.67 T
(operty with a known Dispatch ID:) 334.12 619.67 T
4 9 Q
(let value = get-property\050disp-interface, disp-ID\051;) 153 599 T
2 11 Q
-0.02 (Use) 126 578.67 P
4 9.5 Q
-0.05 (set-property) 147.22 578.67 P
2 11 Q
-0.02 ( to set the value of a pr) 215.62 578.67 P
-0.02 (operty with a known Dispatch ID to) 325.83 578.67 P
(a) 126 564.67 T
0 F
(new-value) 134.25 564.67 T
2 F
(:) 180.09 564.67 T
4 9 Q
(set-property\050disp-interface, disp-ID,) 153 544 T
5 F
(new-value) 358.2 544 T
4 F
(\051;) 400.2 544 T
3 13 Q
(4.4.5  Calling dispatc) 126 512.33 T
(h methods) 231.38 512.33 T
2 11 Q
(Given a Dispatch ID, use) 126 492.67 T
4 9.5 Q
(call-simple-method) 249.63 492.67 T
2 11 Q
( to call a dispatch method:) 352.23 492.67 T
4 9 Q
(let result =) 153 472 T
(call-simple-method\050disp-interface, disp-id, args, \311\051;) 163.8 461 T
3 13 Q
(4.4.6  Releasing the dispatc) 126 429.33 T
(h interface) 265.15 429.33 T
2 11 Q
-0.03 (When the contr) 126 409.67 P
-0.03 (oller is \336nished with the dispatch interface, it must inform the) 200.8 409.67 P
(server) 126 395.67 T
(. Do this with the function) 155.29 395.67 T
4 9.5 Q
(Release) 285.31 395.67 T
2 11 Q
(:) 325.21 395.67 T
4 9 Q
(Release\050disp-interface\051;) 153 375 T
4 9.5 Q
(Release) 126 354.67 T
2 11 Q
( is the Dylan implementation of the standar) 165.9 354.67 T
(d OLE/COM) 377.11 354.67 T
4 9.5 Q
(IUnknown) 444.94 354.67 T
2 11 Q
(interface method,) 126 340.67 T
4 9.5 Q
(Release) 214.07 340.67 T
2 11 Q
(.) 253.97 340.67 T
3 13 Q
(4.4.7  Closing OLE A) 126 307.33 T
(utomation do) 229.96 307.33 T
(wn) 297.33 307.33 T
2 11 Q
(Befor) 126 287.67 T
(e it exits, an Automation contr) 151.81 287.67 T
(oller application should close OLE down) 298.88 287.67 T
(by calling) 126 273.67 T
4 9.5 Q
(OLE-uninitialize) 176.2 273.67 T
2 11 Q
(. This function ensur) 267.4 273.67 T
(es that the Micr) 367.31 273.67 T
(osoft) 442.46 273.67 T
(OLE/COM libraries have been uninitialized on the local machine.) 126 259.67 T
3 13 Q
(4.4.8  Skeleton OLE A) 126 226.33 T
(utomation contr) 235.3 226.33 T
(oller) 316.24 226.33 T
2 11 Q
(Putting all the pr) 126 206.67 T
(evious elements together) 208.34 206.67 T
(, a simple Automation contr) 328.96 206.67 T
(oller) 465.09 206.67 T
(might look like this:) 126 192.67 T
4 9 Q
(OLE-initialize\050\051;  // Initialize OLE libraries) 153 172 T
(let disp-interface = create-dispatch\050class-id\051; // Start server) 153 153 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "134" 40
%%Page: "135" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.4) 339.89 677.67 T
(Building an Automation controller application) 361.27 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(135) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 F
0 X
(let disp-id =) 135 642 T
(get-id-of-name\050disp-interface, "frob"\051; // Look method up) 145.8 631 T
(let result = call-simple-method\050disp-interface, disp-id, "foo",) 135 612 T
("bar"\051; // Call the method) 307.8 601 T
(Release\050disp-interface\051; // Release the server) 135 582 T
(OLE-uninitialize\050\051;  // Shut down OLE) 135 563 T
2 11 Q
(A contr) 108 542.67 T
(oller application that \336ts this simple model can be made even simpler) 144.33 542.67 T
(using the macr) 108 528.67 T
(o) 180.02 528.67 T
4 9.5 Q
(with-dispatch-interface) 188.77 528.67 T
2 11 Q
(:) 319.87 528.67 T
4 9 Q
(with-dispatch-interface disp-interface \050class-id\051) 135 508 T
(let disp-id =) 145.8 497 T
(get-id-of-name\050disp-interface, "frob"\051; // Look method up) 156.6 486 T
(let result = call-simple-method\050disp-interface, disp-id, "foo",) 145.8 467 T
("bar"\051; // Call the method) 318.6 456 T
(end with-dispatch-interface;) 135 437 T
2 11 Q
-0.38 (Furthermor) 108 416.67 P
-0.38 (e, if a DISPID will only be used once, the member name can just be) 164.56 416.67 P
-0.28 (passed dir) 108 402.67 P
-0.28 (ectly to) 157.97 402.67 P
4 9.5 Q
-0.57 (get-property) 195.57 402.67 P
2 11 Q
-0.28 ( or) 263.97 402.67 P
4 9.5 Q
-0.57 (call-simple-method) 279.27 402.67 P
2 11 Q
-0.28 ( instead. So we could) 381.87 402.67 P
(do:) 108 388.67 T
4 9 Q
(with-dispatch-interface disp-interface \050class-id\051) 135 368 T
(let result = call-simple-method\050disp-interface, "frob", "foo",) 145.8 357 T
("bar"\051;) 318.6 346 T
(end with-dispatch-interface;) 135 335 T
3 13 Q
(4.4.9  Contr) 108 303.33 T
(oller) 165.86 303.33 T
(s using more than one dispatc) 188.24 303.33 T
(h interface) 342.17 303.33 T
2 11 Q
(If the server pr) 108 283.67 T
(ovides mor) 179.74 283.67 T
(e than one interface, the contr) 234.43 283.67 T
(oller can \336nd addi-) 378.17 283.67 T
(tional interfaces by calling the COM function) 108 269.67 T
4 9.5 Q
(QueryInterface) 329.52 269.67 T
2 11 Q
(, passing the) 409.32 269.67 T
(dispatch interface and the ID \050fr) 108 255.67 T
(om) 263.01 255.67 T
4 9.5 Q
(make-GUID) 281.48 255.67 T
2 11 Q
(\051 of the desir) 332.78 255.67 T
(ed interface.) 393.62 255.67 T
(For example:) 108 235.67 T
4 9 Q
(let \050status, foo-interface\051 =) 135 215 T
(QueryInterface\050disp-interface, interface-id\051;) 145.8 204 T
(if \050FAILED?\050status\051\051) 135 185 T
(error\050\311\051;  // Requested interface not found) 145.8 174 T
(else) 135 163 T
(\311 // Use foo-interface) 145.8 152 T
(Release\050foo-interface\051; // Mandatory when finished) 145.8 141 T
(end;) 135 130 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "135" 41
%%Page: "136" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(136) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 16 Q
0 X
(4.5) 126 637.33 T
(Building an A) 151.54 637.33 T
(utomation ser) 235.71 637.33 T
(ver application) 322.59 637.33 T
2 11 Q
(This section explains how to build an OLE Automation server application,) 126 616.67 T
(intr) 126 602.67 T
(oducing necessary concepts along the way) 143.34 602.67 T
(.) 348.52 602.67 T
3 13 Q
(4.5.1  Over) 126 569.33 T
(vie) 180.04 569.33 T
(w) 194.72 569.33 T
2 11 Q
(T) 126 549.67 T
(o cr) 131.73 549.67 T
(eate an Automation server in Dylan, you need to pr) 149.52 549.67 T
(ovide four things:) 399.94 549.67 T
1 F
(1.) 135 529.67 T
2 F
(A Dylan class, and Dylan methods on that class, which implement the) 153 529.67 T
(functionality that you wish to expose to contr) 153 515.67 T
(oller applications.) 373.61 515.67 T
1 F
(2.) 135 495.67 T
2 F
(A description of the functionality that the server is making available.) 153 495.67 T
(This the) 153 481.67 T
0 F
(type information) 194.77 481.67 T
2 F
( r) 269.02 481.67 T
(equir) 275.91 481.67 T
(ed for the) 301.32 481.67 T
0 F
(type library) 350.83 481.67 T
2 F
( that potential Auto-) 402.68 481.67 T
-0.43 (mation contr) 153 467.67 P
-0.43 (oller clients can query and, if they choose, use to dispatch to) 214.75 467.67 P
(their implementations.) 153 453.67 T
1 F
(3.) 135 433.67 T
2 F
(A) 153 433.67 T
0 F
(class factory) 164.31 433.67 T
2 F
( that will instantiate the COM class that the server imple-) 218.78 433.67 T
(ments when a contr) 153 419.67 T
(oller applications r) 248.66 419.67 T
(equests it.) 339.69 419.67 T
1 F
(4.) 135 399.67 T
2 F
(Code to r) 153 399.67 T
(egister the server so that contr) 198.03 399.67 T
(oller applications can invoke it.) 344.37 399.67 T
3 13 Q
(4.5.2  De\336ning the Dylan c) 126 366.33 T
(lass representing a dispatc) 257.92 366.33 T
(h interface) 395.3 366.33 T
2 11 Q
(W) 126 346.67 T
(e \336rst consider the case of a server that implements a single dispatch inter-) 135.99 346.67 T
(face. Y) 126 332.67 T
(ou must de\336ne the Dylan class r) 157.14 332.67 T
(epr) 313.24 332.67 T
(esenting the dispatch interface as a) 329.27 332.67 T
(subclass of) 126 318.67 T
4 9.5 Q
(<simple-dispatch>) 181.46 318.67 T
2 11 Q
(, using the macr) 278.36 318.67 T
(o) 355.88 318.67 T
4 9.5 Q
(define) 364.64 318.67 T
(COM-interface) 401.58 318.67 T
2 11 Q
(. For) 475.68 318.67 T
(example:) 126 304.67 T
4 9 Q
(define COM-interface <my-dispatch-object> \050<simple-dispatch>\051) 153 284 T
(slot my-property;) 163.8 273 T
(\311) 163.8 262 T
(end;) 153 251 T
2 11 Q
(The syntax and semantics of the) 126 230.67 T
4 9.5 Q
(define) 284.29 230.67 T
(COM-interface) 321.24 230.67 T
2 11 Q
( macr) 395.34 230.67 T
(o ar) 422.33 230.67 T
(e exactly the) 440.74 230.67 T
(same as) 126 216.67 T
4 9.5 Q
(define) 166.81 216.67 T
(class) 203.76 216.67 T
2 11 Q
(, but for implementation r) 232.26 216.67 T
(easons we curr) 358.13 216.67 T
(ently r) 430.59 216.67 T
(equir) 462.06 216.67 T
(e) 487.47 216.67 T
(that you use) 126 202.67 T
4 9.5 Q
(define) 188.65 202.67 T
(COM-interface) 225.6 202.67 T
2 11 Q
( instead. If this should change in a futur) 299.7 202.67 T
(e) 492.98 202.67 T
(r) 126 188.67 T
(elease, we will of course r) 130.15 188.67 T
(etain the) 254.66 188.67 T
4 9.5 Q
(define) 299.37 188.67 T
(COM-interface) 336.32 188.67 T
2 11 Q
( macr) 410.42 188.67 T
(o for back-) 437.42 188.67 T
(war) 126 174.67 T
(ds compatibility) 144.82 174.67 T
(.) 222.62 174.67 T
-0.21 (Y) 126 154.67 P
-0.21 (ou can de\336ne any slots that you like in your dispatch interface class, without) 132.32 154.67 P
(being concerned about what a contr) 126 140.67 T
(oller will be able to access. A contr) 300 140.67 T
(oller) 467.24 140.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "136" 42
%%Page: "137" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.5) 353.78 677.67 T
(Building an Automation server application) 375.16 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(137) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
-0.01 (can access the dispatch interface class slot) 108 640.67 P
0 F
-0.01 (only) 313.14 640.67 P
2 F
-0.01 ( if you explicitly enable it to do) 332.7 640.67 P
(so in the type information you pr) 108 626.67 T
(ovide for the dispatch interface.) 269.15 626.67 T
3 13 Q
(4.5.3  De\336ning type inf) 108 593.33 T
(ormation f) 220.96 593.33 T
(or the dispatc) 272.88 593.33 T
(h interface) 342.69 593.33 T
2 11 Q
(T) 108 573.67 T
(o de\336ne type information for dispatch interface, cr) 113.73 573.67 T
(eate an instance of the) 358.39 573.67 T
(class) 108 559.67 T
4 9.5 Q
(<disp-type-info>) 133.66 559.67 T
2 11 Q
(. W) 224.86 559.67 T
(e continue the example above by de\336ning type) 240.35 559.67 T
(information suitable for) 108 545.67 T
4 9.5 Q
(<my-dispatch-object>) 226.43 545.67 T
2 11 Q
(.) 340.43 545.67 T
(If you wanted the) 108 525.67 T
4 9.5 Q
(my-property) 197.03 525.67 T
2 11 Q
( slot in the example above to be an OLE Auto-) 259.73 525.67 T
(mation pr) 108 511.67 T
(operty that a contr) 155.92 511.67 T
(oller can r) 245.7 511.67 T
(ead or write, you could de\336ne type) 294.15 511.67 T
(information like this:) 108 497.67 T
4 9 Q
(define constant $my-type-info =) 135 477 T
(make\050<disp-type-info>,) 145.8 466 T
(properties: vector\050make\050<variable-description>,) 172.8 455 T
(name: "value",) 302.4 444 T
(documentation: "some value",) 302.4 433 T
(getter: my-property,) 302.4 422 T
(setter: my-property-setter\051\051\051;) 302.4 411 T
2 11 Q
(The) 108 390.67 T
4 9.5 Q
(name:) 129.16 390.67 T
2 11 Q
( option speci\336es the pr) 157.66 390.67 T
(operty name that the contr) 267.71 390.67 T
(oller will see; the) 396.88 390.67 T
(Dylan class and function names will not be visible externally) 108 376.67 T
(.) 401.64 376.67 T
(If you wish, you can deny either r) 108 356.67 T
(ead or write access by suppling) 271.83 356.67 T
4 9.5 Q
(getter:) 427.25 356.67 T
2 11 Q
( or) 467.15 356.67 T
4 9.5 Q
(setter:) 108 342.67 T
2 11 Q
( values of) 147.9 342.67 T
4 9.5 Q
(#f) 197.3 342.67 T
2 11 Q
( r) 208.7 342.67 T
(espectively) 215.6 342.67 T
(.) 268.66 342.67 T
(The) 108 322.67 T
4 9.5 Q
(documentation:) 129.16 322.67 T
2 11 Q
( is optional; it corr) 208.96 322.67 T
(esponds what is called a \322plastering\323) 297.26 322.67 T
(in ODL.) 108 308.67 T
-0.02 (Note that a pr) 108 288.67 P
-0.02 (operty does not have to corr) 175.53 288.67 P
-0.02 (espond to a slot. It simply needs an) 312.14 288.67 P
(accessor method specialized on the class. Any number of pr) 108 274.67 T
(operties could be) 397.96 274.67 T
(speci\336ed as elements of the vector) 108 260.67 T
(. The DISPID values will be assigned auto-) 272.98 260.67 T
(matically; your server does not need to know what they ar) 108 246.67 T
(e, because the con-) 391.65 246.67 T
(tr) 108 232.67 T
(oller will ask for them by name.) 115.73 232.67 T
(Note that) 108 212.67 T
4 9.5 Q
(setter:) 156.58 212.67 T
(#f) 199.23 212.67 T
2 11 Q
( simply means that the contr) 210.63 212.67 T
(oller cannot change the) 348.79 212.67 T
(value \321 not that it is necessarily a constant. Y) 108 198.67 T
(ou can specify a pr) 329.41 198.67 T
(operty that) 420.5 198.67 T
(r) 108 184.67 T
(eally is just a constant value like this:) 112.15 184.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "137" 43
%%Page: "138" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(138) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 F
0 X
(\311) 153 642 T
(properties: vector\050\311 make\050<constant-description>,) 153 631 T
(name: "pi",) 293.4 620 T
(value: 3.1416\051,) 293.4 609 T
(\311) 282.6 598 T
2 11 Q
-0.33 (In this case, the type information contains the complete implementation of the) 126 577.67 P
(pr) 126 563.67 T
(operty; no slot or accessor functions ar) 136.76 563.67 T
(e needed.) 323.46 563.67 T
3 13 Q
(4.5.4  De\336ning dispatc) 126 530.33 T
(h methods f) 238.48 530.33 T
(or the dispatc) 298.69 530.33 T
(h interface) 368.5 530.33 T
2 11 Q
(T) 126 510.67 T
(o de\336ne dispatch methods for the dispatch interface, you simply de\336ne) 131.73 510.67 T
(Dylan methods on your dispatch interface class. For example:) 126 496.67 T
4 9 Q
(define function foo\050this :: <my-dispatch-object>\051) 153 476 T
(=> status :: <SCODE>;) 163.8 465 T
(\311) 163.8 454 T
(end;) 153 443 T
(define function bar\050this :: <my-dispatch-object>,) 153 424 T
(name :: <BSTR>,) 261 413 T
(#key color :: <BSTR>,) 261 402 T
(size :: <integer>\051) 288 391 T
(=> \050status :: <SCODE>, value :: <integer>\051;) 163.8 380 T
(\311) 163.8 369 T
(end;) 153 358 T
3 13 Q
(4.5.4.1  Dispatc) 126 326.33 T
(h method ar) 202.95 326.33 T
(gument requirements) 263.81 326.33 T
2 11 Q
(The \336rst ar) 126 306.67 T
(gument of a dispatch method must always be specialized on the) 178.81 306.67 T
(dispatch interface\325s Dylan implementation class. The r) 126 292.67 T
(emaining ar) 389.53 292.67 T
(guments) 447.73 292.67 T
(corr) 126 278.67 T
(espond to the dispatch method ar) 145.38 278.67 T
(guments.) 308.57 278.67 T
(See also \322Dispatch method ar) 126 258.67 T
(gument and r) 268.89 258.67 T
(eturn value types\323 on page 140.) 334.88 258.67 T
3 13 Q
(4.5.4.2  Dispatc) 126 225.33 T
(h method return v) 202.95 225.33 T
(alue requirements) 293.38 225.33 T
2 11 Q
(Dispatch methods must always r) 126 205.67 T
(eturn an OLE status code as their \336rst value.) 285.62 205.67 T
(Return the constant) 126 191.67 T
4 9.5 Q
($S-OK) 224.12 191.67 T
2 11 Q
( when ther) 252.62 191.67 T
(e is no err) 304.77 191.67 T
(or) 352.32 191.67 T
(. Y) 361.86 191.67 T
(ou can r) 373.69 191.67 T
(eturn a second) 412.76 191.67 T
-0.23 (value fr) 126 177.67 P
-0.23 (om a dispatch method to r) 163.15 177.67 P
-0.23 (epr) 289.97 177.67 P
-0.23 (esent the r) 306 177.67 P
-0.23 (esult of executing the method.) 355.64 177.67 P
(Mor) 126 163.67 T
(e than two r) 146.56 163.67 T
(esult values ar) 204.88 163.67 T
(e not meaningful.) 274.86 163.67 T
(See also \322Dispatch method ar) 126 143.67 T
(gument and r) 268.89 143.67 T
(eturn value types\323 on page 140.) 334.88 143.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "138" 44
%%Page: "139" 45
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.5) 353.78 677.67 T
(Building an Automation server application) 375.16 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(139) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(The following general purpose err) 108 640.67 T
(or codes could be useful as the \336rst r) 274.39 640.67 T
(eturn) 451.96 640.67 T
(value fr) 108 626.67 T
(om a dispatch method:) 145.38 626.67 T
4 9.5 Q
($E-UNEXPECTED) 135 606.67 T
2 11 Q
(Unexpected failur) 216 606.67 T
(e.) 303.34 606.67 T
4 9.5 Q
($E-NOTIMPL) 135 586.67 T
2 11 Q
(Not implemented.) 216 586.67 T
4 9.5 Q
($E-OUTOFMEMORY) 135 566.67 T
2 11 Q
(Ran out of memory) 216 566.67 T
(.) 309.33 566.67 T
4 9.5 Q
($E-INVALIDARG) 135 546.67 T
2 11 Q
(One or mor) 216 546.67 T
(e ar) 272.03 546.67 T
(guments ar) 289.7 546.67 T
(e invalid.) 344.48 546.67 T
4 9.5 Q
($E-POINTER) 135 526.67 T
2 11 Q
(Invalid pointer) 216 526.67 T
(.) 288.3 526.67 T
4 9.5 Q
($E-HANDLE) 135 506.67 T
2 11 Q
(Invalid handle.) 216 506.67 T
4 9.5 Q
($E-ABORT) 135 486.67 T
2 11 Q
(Operation aborted.) 216 486.67 T
4 9.5 Q
($E-FAIL) 135 466.67 T
2 11 Q
(Unspeci\336ed err) 216 466.67 T
(or) 290.74 466.67 T
(.) 300.28 466.67 T
4 9.5 Q
($E-ACCESSDENIED) 135 440.67 T
2 11 Q
(General access denied err) 216 422.67 T
(or) 339.84 422.67 T
(.) 349.38 422.67 T
(Y) 108 402.67 T
(ou can convert a W) 114.32 402.67 T
(indows err) 207.35 402.67 T
(or code, such as r) 260.03 402.67 T
(eturned by the W) 343.91 402.67 T
(indows) 428.23 402.67 T
-0.08 (function w) 108 388.67 P
4 9.5 Q
-0.16 (GetLastError) 160.62 388.67 P
2 11 Q
-0.08 (, to a corr) 228.21 388.67 P
-0.08 (esponding) 273.45 388.67 P
4 9.5 Q
-0.16 (<SCODE>) 327.52 388.67 P
2 11 Q
-0.08 ( value with the function) 367.42 388.67 P
4 9.5 Q
(HRESULT-FROM-WIN32) 108 374.67 T
2 11 Q
(,  page 173.) 210.6 374.67 T
-0.26 (If) 108 354.67 P
4 9.5 Q
-0.53 (<abort>) 117.86 354.67 P
2 11 Q
-0.26 ( is signalled during execution of the method \050or a pr) 157.76 354.67 P
-0.26 (operty getter or) 408.07 354.67 P
(setter\051, a handler in the OLE-Automation library will catch it and r) 108 340.67 T
(eturn) 430.9 340.67 T
4 9.5 Q
($E-) 459.89 340.67 T
(ABORT) 108 326.67 T
2 11 Q
( to the client.) 136.5 326.67 T
3 13 Q
(4.5.5  Dispatc) 108 293.33 T
(h method ar) 176.05 293.33 T
(gument and return v) 236.92 293.33 T
(alue types) 339.79 293.33 T
2 11 Q
(The ar) 108 273.67 T
(gument types and r) 138.81 273.67 T
(eturn types for dispatch methods ar) 233.8 273.67 T
(e limited to the) 407.62 273.67 T
(following:) 108 259.67 T
4 9 Q
(<integer>, <character>, <single-float>, <double-float>,) 135 239 T
(<boolean>, <PLARGE-INTEGER>,) 135 228 T
4 9.5 Q
(<BSTR>) 291.6 228 T
4 9 Q
(,) 325.8 228 T
4 9.5 Q
(<LPDISPATCH>) 336.6 228 T
4 9 Q
(,) 405 228 T
4 9.5 Q
(<LPUNKNOWN>) 415.8 228 T
4 9 Q
(,) 478.5 228 T
(<machine-word>) 135 217 T
2 11 Q
(This limitation is necessary to allow the types to be mapped between Dylan) 108 196.67 T
(and the C r) 108 182.67 T
(epr) 162.08 182.67 T
(esentations of the native OLE/COM libraries.) 178.1 182.67 T
3 13 Q
(4.5.6  De\336ning type inf) 108 149.33 T
(ormation f) 220.96 149.33 T
(or dispatc) 272.88 149.33 T
(h methods) 323.73 149.33 T
2 11 Q
(The type information for the methods in Section 4.5.4 might look like this:) 108 129.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "139" 45
%%Page: "140" 46
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(140) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 F
0 X
(make\050<disp-type-info>,) 153 642 T
(properties: vector\050\311\051,) 180 631 T
(methods:) 244.8 620 T
(vector\050make\050<function-description>,) 255.6 609 T
(function: foo,) 320.4 598 T
(name: "foo"\051,) 320.4 587 T
(make\050<function-description>,) 293.4 576 T
(function: bar,) 320.4 565 T
(name: "bar",) 320.4 554 T
(argument-names: #["name", "color",) 320.4 543 T
("size"],) 417.6 532 T
(argument-types: vector\050<BSTR>,) 320.4 521 T
(<BSTR>,) 444.6 510 T
(<C-long>\051,) 444.6 499 T
(result-type: <C-unsigned>\051\051\051) 320.4 488 T
2 11 Q
-0.23 (The) 126 467.67 P
4 9.5 Q
-0.48 (argument-types:) 146.93 467.67 P
2 11 Q
-0.23 ( and) 232.43 467.67 P
4 9.5 Q
-0.48 (result-type:) 256.09 467.67 P
2 11 Q
-0.23 ( options ar) 324.49 467.67 P
-0.23 (e the C type designators if) 375.65 467.67 P
(they can not pr) 126 453.67 T
(operly be inferr) 199.16 453.67 T
(ed fr) 274.59 453.67 T
(om intr) 297.14 453.67 T
(ospection of the designated) 332.94 453.67 T
4 9.5 Q
(function:) 126 439.67 T
2 11 Q
(. See) 177.3 439.67 T
4 9.5 Q
(<disp-type-info>) 201.86 439.67 T
2 11 Q
(,  page 154 for other options you can use.) 293.06 439.67 T
3 13 Q
(4.5.7  The DEFINE DISP) 126 406.33 T
(A) 243.44 406.33 T
(TCH-INTERF) 250.19 406.33 T
(A) 313.29 406.33 T
(CE macr) 320.57 406.33 T
(o) 363.63 406.33 T
2 11 Q
-0.36 (Rather than specifying the parts of a dispatch interface separately) 126 386.67 P
-0.36 (, you can use) 439.6 386.67 P
(the high-level macr) 126 372.67 T
(o) 219.94 372.67 T
4 9.5 Q
(define) 228.7 372.67 T
(dispatch-interface) 265.65 372.67 T
2 11 Q
( to specify both an imple-) 368.25 372.67 T
(mentation class and its associated type information. For example:) 126 358.67 T
4 9 Q
(define dispatch-interface <my-dispatch-object>) 153 338 T
(\050<simple-dispatch>\051) 163.8 327 T
(property my-property :: <integer>;) 163.8 316 T
(\311) 153 305 T
2 11 Q
(This de\336nes) 126 284.67 T
4 9.5 Q
(my-property) 187.49 284.67 T
2 11 Q
( as both a class slot and a dispatch pr) 250.19 284.67 T
(operty) 429.5 284.67 T
(.) 460.21 284.67 T
3 13 Q
(4.5.8) 126 251.33 T
(Retaining ar) 155.64 251.33 T
(guments sent to dispatc) 217.1 251.33 T
(h methods) 339.63 251.33 T
2 11 Q
-0.03 (When an Automation server r) 126 231.67 P
-0.03 (eceives a string or array as a method ar) 271.3 231.67 P
-0.03 (gument,) 460.81 231.67 P
(it is temporarily allocated a value \050an instance of) 126 217.67 T
4 9.5 Q
(<BSTR>) 364.62 217.67 T
2 11 Q
(,) 398.82 217.67 T
4 9.5 Q
(<ole-array>) 404.32 217.67 T
2 11 Q
(, or) 467.02 217.67 T
4 9.5 Q
(<ole-vector>) 126 203.67 T
2 11 Q
(\051 that is deleted after the method r) 194.4 203.67 T
(eturns, so you will need to) 359.75 203.67 T
-0.01 (make a copy of the data if you want to keep it. Y) 126 189.67 P
-0.01 (ou can use the function) 359.79 189.67 P
4 9.5 Q
-0.03 (copy-) 475.5 189.67 P
(automation-value) 126 175.67 T
2 11 Q
( can be used to do this. \050Copying is done automatically) 217.2 175.67 T
(when setting a pr) 126 161.67 T
(operty) 210.58 161.67 T
(.\051) 241.29 161.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "140" 46
%%Page: "141" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.5) 353.78 677.67 T
(Building an Automation server application) 375.16 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(141) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(Similarly) 108 640.67 T
(, if an ar) 151.03 640.67 T
(gument is an interface \050such as) 190.45 640.67 T
4 9.5 Q
(<LPUNKNOWN>) 342.96 640.67 T
2 11 Q
( or) 405.66 640.67 T
4 9.5 Q
(<LPDIS-) 421.51 640.67 T
(PATCH>) 108 626.67 T
2 11 Q
(\051 you must call) 142.2 626.67 T
4 9.5 Q
(AddRef) 217 626.67 T
2 11 Q
( on it if it will be kept for use after the call) 251.2 626.67 T
(r) 108 612.67 T
(eturns, and later call) 112.15 612.67 T
4 9.5 Q
(Release) 214.11 612.67 T
2 11 Q
( when \336nished with it.) 254.01 612.67 T
3 13 Q
(4.5.9) 108 579.33 T
(Cleaning up) 137.64 579.33 T
2 11 Q
-0.08 (Besides the dispatch methods, your class will also pr) 108 559.67 P
-0.08 (obably need to pr) 362.73 559.67 P
-0.08 (ovide a) 447.75 559.67 P
(method for the) 108 545.67 T
4 9.5 Q
(terminate) 183.22 545.67 T
2 11 Q
( function, which is called when the client calls) 234.52 545.67 T
4 9.5 Q
(Release) 108 531.67 T
2 11 Q
( at the time that it is \336nished with the dispatch interface. This can be) 147.9 531.67 T
(used to clean up data str) 108 517.67 T
(uctur) 226.94 517.67 T
(es or to terminate the pr) 252.83 517.67 T
(ogram. \050It can be) 369.34 517.67 T
(thought of as corr) 108 503.67 T
(esponding to a C++ destr) 194.2 503.67 T
(uctor) 317.31 503.67 T
(.\051 For example:) 341.95 503.67 T
4 9 Q
(define method terminate \050this :: <my-dispatch-object>\051 => \050\051) 135 483 T
(next-method\050\051; // don't forget this!) 145.8 472 T
(// post ourselves a close message to end the program:) 145.8 461 T
(PostMessage\050this.my-window-handle,) 145.8 450 T
($WM-SYSCOMMAND,) 210.6 439 T
($SC-CLOSE, 0\051;) 210.6 428 T
(values\050\051) 145.8 417 T
(end method terminate ;) 135 406 T
3 13 Q
(4.5.10) 108 374.33 T
(Creating a c) 143.57 374.33 T
(lass factor) 204.4 374.33 T
(y) 257.83 374.33 T
2 11 Q
-0.16 (Rather than using) 108 354.67 P
4 9.5 Q
-0.32 (make) 197.14 354.67 P
2 11 Q
-0.16 ( to dir) 219.94 354.67 P
-0.16 (ectly instantiate the COM object, a server should) 248.79 354.67 P
(cr) 108 340.67 T
(eate a class factory) 117.03 340.67 T
(. The class) 206.2 340.67 T
4 9.5 Q
(<class-factory>) 258.52 340.67 T
2 11 Q
( is pr) 344.02 340.67 T
(ovided as a convenient) 368.15 340.67 T
(way to do this. For example:) 108 326.67 T
4 9 Q
(make\050<class-factory>,) 135 306 T
(class: <my-dispatch-object>,) 162 295 T
(typeinfo: make\050<disp-type-info>, \311\051,) 162 284 T
(clsid: make-GUID\050\311\051\051) 162 273 T
2 11 Q
(This code cr) 108 252.67 T
(eates and r) 166.42 252.67 T
(egisters a class factory so that the designated dispatch) 218.98 252.67 T
(interface class is instantiated when a client tries to invoke a server for the des-) 108 238.67 T
(ignated Class ID. Y) 108 224.67 T
(ou can also pr) 200.17 224.67 T
(ovide any initialization keywor) 267.97 224.67 T
(ds accepted) 420.17 224.67 T
(by the class being instantiated, and the following class factory options:) 108 210.67 T
4 9.5 Q
(server-context:) 135 184.67 T
2 11 Q
(Defaults to) 216 166.67 T
4 9.5 Q
($CLSCTX-LOCAL-SERVER) 272.12 166.67 T
2 11 Q
(.) 386.12 166.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "141" 47
%%Page: "142" 48
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(142) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 9.5 Q
0 X
(connection-flags:) 153 640.67 T
2 11 Q
(Defaults to) 234 622.67 T
4 9.5 Q
($REGCLS-SINGLEUSE) 290.12 622.67 T
2 11 Q
(.) 387.02 622.67 T
(Befor) 126 602.67 T
(e your server application terminates, it must call the function) 151.81 602.67 T
4 9.5 Q
(revoke-) 450.97 602.67 T
(registration) 126 588.67 T
2 11 Q
( on the class factory) 194.4 588.67 T
(.) 288.86 588.67 T
(As a convenience, making a) 126 568.67 T
4 9.5 Q
(<class-factory>) 263.97 568.67 T
2 11 Q
( and calling) 349.47 568.67 T
4 9.5 Q
(revoke-) 408.85 568.67 T
(registration) 126 554.67 T
2 11 Q
( can be combined by using the macr) 194.4 554.67 T
(o) 368.78 554.67 T
4 9.5 Q
(with-class-factory) 377.54 554.67 T
2 11 Q
( like) 480.14 554.67 T
(this:) 126 540.67 T
4 9 Q
(with-class-factory \050class: <my-dispatch-object>,) 153 520 T
(typeinfo: make\050<disp-type-info>, \311\051,) 261 509 T
(clsid: make-GUID\050...\051 \051) 261 498 T
(\311 // body of application) 153 476 T
(end with-class-factory;) 153 454 T
3 13 Q
(4.5.11  Ser) 126 422.33 T
(ver) 178.86 422.33 T
(s pr) 194.72 422.33 T
(o) 214.07 422.33 T
(viding more than one dispatc) 220.39 422.33 T
(h interface) 368.4 422.33 T
2 11 Q
(Y) 126 402.67 T
(ou can cr) 132.32 402.67 T
(eate a server that supports mor) 176.28 402.67 T
(e than one dispatch interface as fol-) 327.32 402.67 T
(lows.) 126 388.67 T
4 9 Q
(define constant my-type-info =) 153 368 T
(make\050<coclass-type-info>,) 163.8 357 T
(uuid: make-GUID\050...\051, // Class ID) 190.8 346 T
(interfaces: vector\050make\050<component-interface-description>,) 190.8 335 T
(class: <my-dispatch-object1>,) 304.2 324 T
(typeinfo: make\050<disp-type-info>, \311\051\051,) 304.2 313 T
(make\050<component-interface-description>,) 293.4 302 T
(class: <my-dispatch-object2>,) 298.8 291 T
(typeinfo: make\050<disp-type-info>,) 298.8 280 T
(uuid: make-GUID\050\311\051, \311\051, \311\051) 298.8 269 T
(\311) 153 258 T
(\051\051;) 153 247 T
(\311) 153 228 T
(let factory = make-object-factory\050my-type-info\051;) 153 209 T
2 11 Q
(Each element of the) 126 188.67 T
4 9.5 Q
(interfaces:) 224.14 188.67 T
2 11 Q
( sequence speci\336es a dispatch interface with) 286.84 188.67 T
(type information, and the Dylan class that must be instantiated to implement) 126 174.67 T
(it.) 126 160.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "142" 48
%%Page: "143" 49
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.5) 353.78 677.67 T
(Building an Automation server application) 375.16 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(143) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(By default, the \336rst dispatch interface listed will be the default interface that) 108 640.67 T
(will be r) 108 626.67 T
(eturned if a client application calls) 147.78 626.67 T
4 9.5 Q
(QueryInterface) 317.56 626.67 T
2 11 Q
( on) 397.36 626.67 T
4 9.5 Q
($IID-) 415.27 626.67 T
(IDispatch) 108 612.67 T
2 11 Q
( \050although it can specify an alternate) 159.3 612.67 T
4 9.5 Q
(uuid:) 338.6 612.67 T
2 11 Q
( too\051.) 367.1 612.67 T
(The type information for the r) 108 592.67 T
(emaining dispatch interfaces must specify the) 253.19 592.67 T
4 9.5 Q
-0.19 (uuid:) 108 578.67 P
2 11 Q
-0.09 ( option, supplying the ID that a client application can use to select them.) 136.5 578.67 P
(Note too that each type information instance must pr) 108 558.67 T
(ovide a value for the) 365.6 558.67 T
4 9.5 Q
-0.68 (name:) 108 544.67 P
2 11 Q
-0.33 ( option, so that it has a distinguished name in the type library) 136.5 544.67 P
-0.33 (. See \322T) 430.42 544.67 P
-0.33 (ype) 465.58 544.67 P
(libraries and type information\323 on page 132 a description of a type library) 108 530.67 T
(.) 465.65 530.67 T
(By default, the class factory instantiates the class) 108 510.67 T
4 9.5 Q
(<simple-component-) 346.16 510.67 T
(object>) 108 496.67 T
2 11 Q
(, but you can specify a user) 147.9 496.67 T
(-de\336ned subclass ther) 279.61 496.67 T
(eof with the) 385.51 496.67 T
4 9.5 Q
(class:) 446.32 496.67 T
2 11 Q
(initialization keywor) 108 482.67 T
(d for) 209.27 482.67 T
4 9.5 Q
(<coclass-type-info>) 235.5 482.67 T
2 11 Q
(. This is a subclass of) 343.8 482.67 T
4 9.5 Q
(<IUnknown>) 108 468.67 T
2 11 Q
(, so its) 165 468.67 T
4 9.5 Q
(initialize) 198.12 468.67 T
2 11 Q
( method could cr) 255.12 468.67 T
(eate additional interfaces) 337.54 468.67 T
(using it as the contr) 108 454.67 T
(olling unknown if you want your OLE object to support) 203.25 454.67 T
(other interfaces besides) 108 440.67 T
4 9.5 Q
(IDispatch) 224.51 440.67 T
2 11 Q
(. Also,) 275.81 440.67 T
4 9.5 Q
(<coclass-type-info>) 309.24 440.67 T
2 11 Q
( accepts all of) 417.54 440.67 T
(the same optional keywor) 108 426.67 T
(ds as) 233.99 426.67 T
4 9.5 Q
(<disp-type-info>) 261.04 426.67 T
2 11 Q
(, which can be used to pr) 352.24 426.67 T
(o-) 473.33 426.67 T
-0.13 (vide type library documentation for the object as a whole. This might be a r) 108 412.67 P
-0.13 (ea-) 471.57 412.67 P
(son to use it even if ther) 108 398.67 T
(e is only one interface. For example:) 223.94 398.67 T
4 9 Q
(make-object-factory\050) 135 378 T
(make\050<coclass-type-info>,) 145.8 367 T
(name: "foo", documentation: "la de dah",) 172.8 356 T
(major-version: 1, minor-version: 2,) 172.8 345 T
(\311) 135 334 T
2 11 Q
(Alternatively) 108 313.67 T
(, the type information can be speci\336ed by using the macr) 171.23 313.67 T
(o) 446.47 313.67 T
4 9.5 Q
(define) 108 299.67 T
(coclass) 144.95 299.67 T
2 11 Q
(. For example:) 184.85 299.67 T
4 9 Q
(define coclass my-coclass) 135 279 T
(name "foo";) 145.8 268 T
(uuid make-GUID\050...\051; // Class ID) 145.8 257 T
(default interface <interface-1>;) 145.8 246 T
(interface <interface-2>;) 145.8 235 T
(end;) 135 224 T
2 11 Q
(wher) 108 203.67 T
(e each interface class was de\336ned by) 132.99 203.67 T
4 9.5 Q
(define) 313.17 203.67 T
(dispatch-interface) 350.12 203.67 T
2 11 Q
(.) 452.72 203.67 T
(After an Automation server cr) 108 183.67 T
(eates its class factory) 254.65 183.67 T
(, it should enter a normal) 354.43 183.67 T
(W) 108 169.67 T
(indows event loop as any other W) 118.39 169.67 T
(indows pr) 283.81 169.67 T
(ogram would. Requests fr) 333.49 169.67 T
(om) 459.31 169.67 T
-0.11 (the client ar) 108 155.67 P
-0.11 (e automatically dispatched by the default message dispatch mech-) 164.72 155.67 P
(anism.) 108 141.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "143" 49
%%Page: "144" 50
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(144) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 13 Q
0 X
(4.5.12  Registration code f) 126 639.33 T
(or A) 257.92 639.33 T
(utomation ser) 278.93 639.33 T
(ver) 349.52 639.33 T
(s) 365.38 639.33 T
2 11 Q
(Finally) 126 619.67 T
(, for an Automation contr) 158.52 619.67 T
(oller to be able to invoke an Automation) 282.4 619.67 T
-0.37 (server pr) 126 605.67 P
-0.37 (ogram, the server must be r) 169.25 605.67 P
-0.37 (egister) 301.05 605.67 P
-0.37 (ed in the W) 333.3 605.67 P
-0.37 (indows system r) 387.7 605.67 P
-0.37 (egistry) 466.79 605.67 P
-0.37 (.) 498.87 605.67 P
(The following code, wrapped ar) 126 585.67 T
(ound the main pr) 281.89 585.67 T
(ogram of the server) 366.73 585.67 T
(, will) 460.88 585.67 T
(take car) 126 571.67 T
(e of r) 163.75 571.67 T
(egistration:) 188.34 571.67 T
4 9 Q
(if \050OLE-util-register-only?\050\051\051 // [un]register and terminate) 153 551 T
(register-automation-server\050class-id, prog-id, title, \311\051;) 163.8 540 T
(register-type-library\050coclass-type-info\051;) 163.8 529 T
(else) 153 510 T
(\311 // everything else here) 163.8 499 T
(end if;) 153 488 T
2 11 Q
(If this application is executed with the command-line ar) 126 469.67 T
(gument) 397.04 469.67 T
4 9.5 Q
(/RegServer) 437.51 469.67 T
2 11 Q
(\050case insensitive\051 it simply r) 126 455.67 T
(ecor) 261.16 455.67 T
(ds itself in the r) 281.46 455.67 T
(egistry and terminates. Con-) 356.44 455.67 T
(versely) 126 441.67 T
(, the command-line ar) 159.86 441.67 T
(gument) 266.44 441.67 T
4 9.5 Q
(/UnregServer) 306.91 441.67 T
2 11 Q
( r) 375.31 441.67 T
(emoves the r) 382.2 441.67 T
(egistry) 444.24 441.67 T
(entries.) 126 427.67 T
1 F
(Note:) 126 407.67 T
2 F
( The server application\325s full pathname is r) 153.19 407.67 T
(ecor) 361.08 407.67 T
(ded in the r) 381.39 407.67 T
(egistry) 437.36 407.67 T
(, so if) 469.43 407.67 T
(you move the application to another dir) 126 393.67 T
(ectory) 319.59 393.67 T
(, you will need to r) 348.57 393.67 T
(egister it) 440.01 393.67 T
(again.) 126 379.67 T
3 13 Q
(4.5.13  Skeleton OLE A) 126 346.33 T
(utomation ser) 241.23 346.33 T
(ver) 311.82 346.33 T
2 11 Q
(Putting all the pr) 126 326.67 T
(evious elements together) 208.34 326.67 T
(, the main pr) 328.96 326.67 T
(ogram for an Automa-) 390.79 326.67 T
(tion server might look something like this:) 126 312.67 T
4 9 Q
(define constant $my-class-id = make-GUID\050\311\051;) 153 292 T
(define method main-program \050\051 => \050\051) 153 273 T
(if \050OLE-util-register-only?\050\051\051 // [un]register and terminate) 163.8 254 T
(register-automation-server\050$my-class-id,) 174.6 243 T
("Foo.Bar",) 320.4 232 T
("Simple OLE Automation server"\051;) 320.4 221 T
(else) 163.8 202 T
(initialize-my-application\050\051; // create window etc.) 174.6 191 T
(// create and register the factory object:) 174.6 172 T
(with-class-factory \050clsid: $my-class-id,) 174.6 153 T
(class: <my-dispatch-object>,) 282.6 142 T
(typeinfo: make\050<disp-type-info>, \311\051\051) 282.6 131 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "144" 50
%%Page: "145" 51
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.6) 459.25 677.67 T
(Error reporting) 480.62 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(145) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 F
0 X
(// normal Windows event loop:) 167.4 642 T
(with-stack-structure \050pmsg :: <PMSG>\051) 167.4 623 T
(while\050GetMessage\050pmsg, $NULL-HWND, 0, 0\051\051) 178.2 612 T
(TranslateMessage\050pmsg\051;) 189 601 T
(DispatchMessage\050pmsg\051;) 189 590 T
(end while;) 178.2 579 T
(end with-stack-structure;) 167.4 568 T
(end with-class-factory;) 156.6 549 T
(values\050\051) 156.6 530 T
(end if;) 145.8 511 T
(end method main-program;) 135 492 T
2 11 Q
-0.26 (Some application pr) 108 451.67 P
-0.26 (ograms can be used either interactively or by Automation) 205.21 451.67 P
-0.11 (contr) 108 437.67 P
-0.11 (ol. In such a case, you might want to cr) 133.02 437.67 P
-0.11 (eate a class factory only if the pr) 321.09 437.67 P
-0.11 (o-) 476.33 437.67 P
(gram was actually initiated by an Automation contr) 108 423.67 T
(oller) 359.87 423.67 T
(. For this purpose,) 381.08 423.67 T
(you can do something like this:) 108 409.67 T
4 9 Q
(\311) 135 389 T
(let factory = #f;) 135 370 T
(if \050OLE-util-automation?\050\051\051) 135 351 T
(factory := make\050<class-factory>, \311\051;) 145.8 340 T
(end if;) 135 329 T
(\311 // body of program) 135 310 T
(revoke-registration\050factory\051; // does nothing if argument is #f) 135 291 T
(\311) 135 272 T
3 16 Q
(4.6  Err) 108 238.33 T
(or repor) 152.26 238.33 T
(ting) 202.82 238.33 T
2 11 Q
(Most of the low-level COM and OLE functions r) 108 217.67 T
(eturn a status code as their) 341.94 217.67 T
(\336rst r) 108 203.67 T
(esult value. Y) 134.15 203.67 T
(ou can test this value with the functions) 198.89 203.67 T
4 9.5 Q
(FAILED?) 395.15 203.67 T
2 11 Q
( and) 435.05 203.67 T
4 9.5 Q
-0.2 (SUCCEEDED?) 108 189.67 P
2 11 Q
-0.1 ( to determine whether an err) 165 189.67 P
-0.1 (or is indicated. Y) 303.74 189.67 P
-0.1 (ou can also compar) 384.47 189.67 P
-0.1 (e) 478.08 189.67 P
(the value against various named constants to check for speci\336c err) 108 175.67 T
(or condi-) 429.5 175.67 T
(tions.) 108 161.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "145" 51
%%Page: "146" 52
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(146) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
-0.21 (The Dylan type of OLE status codes is called either) 126 640.67 P
4 9.5 Q
-0.44 (<SCODE>) 373.76 640.67 P
2 11 Q
-0.21 ( \050\322status code\323\051 or) 413.66 640.67 P
4 9.5 Q
(<HRESULT>) 126 626.67 T
2 11 Q
( \050\322r) 177.3 626.67 T
(esult handle\323\051. These two names mean the same thing; the r) 193.36 626.67 T
(ea-) 483.43 626.67 T
(son for ther) 126 612.67 T
(e being two names is historical.) 181.99 612.67 T
1 F
(Note:) 126 592.67 T
2 F
( Do not assume that status code is an) 153.19 592.67 T
4 9.5 Q
(<integer>) 335.25 592.67 T
2 11 Q
(.) 386.55 592.67 T
(In or) 126 572.67 T
(der to simplify your application, the high-level OLE Automation func-) 149.01 572.67 T
(tions do not r) 126 558.67 T
(equir) 190.98 558.67 T
(e you to check status codes. Instead, when an err) 216.39 558.67 T
(or occurs,) 452.74 558.67 T
(it is signalled automatically as an instance of class) 126 544.67 T
4 9.5 Q
(<ole-error>) 370.86 544.67 T
2 11 Q
(, a subclass of) 433.56 544.67 T
4 9.5 Q
(<error>) 126 530.67 T
2 11 Q
(.) 165.9 530.67 T
(If you call a low-level function and want to turn the status code into an err) 126 510.67 T
(or) 487.11 510.67 T
(,) 496.64 510.67 T
(do something like this:) 126 496.67 T
4 9 Q
(let status = foo\050interface, whatever\051;) 153 476 T
(check-ole-status\050status, "foo", interface, whatever\051;) 153 465 T
2 11 Q
(The call to) 126 444.67 T
4 9.5 Q
(check-ole-status) 179.04 444.67 T
2 11 Q
( signals an) 270.24 444.67 T
4 9.5 Q
(<ole-error>) 324.14 444.67 T
2 11 Q
( if the call to) 386.84 444.67 T
4 9.5 Q
(foo) 449.09 444.67 T
2 11 Q
( fails.) 466.19 444.67 T
3 16 Q
(4.7  Datatypes) 126 409.33 T
2 11 Q
(Since the mechanisms of OLE Automation wer) 126 388.67 T
(e designed for C and BASIC) 353.24 388.67 T
(rather than for Dylan, it does not support the passing of arbitrary Dylan) 126 374.67 T
(objects. However) 126 360.67 T
(, instances of the following Dylan classes can be used as) 209.18 360.67 T
(method ar) 126 346.67 T
(guments, r) 176.09 346.67 T
(esults, and pr) 228.12 346.67 T
(operty values:) 293.77 346.67 T
4 9 Q
(<integer>, <machine-word>, <byte-character>, <boolean>,) 153 326 T
(<single-float>, <double-float>, <string>) 153 315 T
2 11 Q
(An COM interface can itself be passed as an ar) 126 294.67 T
(gument. Also, you can pass) 351.54 294.67 T
(instances of) 126 280.67 T
4 9.5 Q
(<sequence>) 185.74 280.67 T
2 11 Q
( or) 242.74 280.67 T
4 9.5 Q
(<array>) 258.59 280.67 T
2 11 Q
( as long as each element is of one of these) 298.49 280.67 T
(types. \050The elements do not necessarily have to be of the same class if the) 126 266.67 T
(server is pr) 126 252.67 T
(epar) 180.23 252.67 T
(ed to accept heter) 201.76 252.67 T
(ogeneous data; that will be tr) 287 252.67 T
(ue automati-) 428.21 252.67 T
-0 (cally if the server is implemented in Dylan.\051 For a) 126 238.67 P
4 9.5 Q
-0.01 (<sequence>) 369.12 238.67 P
2 11 Q
-0 (, the server will) 426.12 238.67 P
(r) 126 224.67 T
(eceive the data as a vector) 130.15 224.67 T
(, r) 255.72 224.67 T
(egar) 265.37 224.67 T
(dless of which subclass of) 286.4 224.67 T
4 9.5 Q
(<sequence>) 414.36 224.67 T
2 11 Q
( was) 471.36 224.67 T
(used in the contr) 126 210.67 T
(oller) 207.42 210.67 T
(.) 228.63 210.67 T
(Y) 126 190.67 T
(ou can also pass the special value) 132.32 190.67 T
4 9.5 Q
($SQL-NULL) 297.21 190.67 T
2 11 Q
( as an ar) 348.52 190.67 T
(gument to indicate an) 388.48 190.67 T
(unspeci\336ed value. This is intended to corr) 126 176.67 T
(espond to the null value of SQL,) 329.8 176.67 T
(and not a C) 126 162.67 T
4 9.5 Q
(NULL) 184.92 162.67 T
2 11 Q
( pointer) 207.72 162.67 T
(.) 245.07 162.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "146" 52
%%Page: "147" 53
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.8) 409.37 677.67 T
(Memory management issues) 430.74 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(147) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
-0.37 (Note that you cannot pass C pointers, because the contr) 108 640.67 P
-0.37 (oller and server do not) 374.65 640.67 P
(necessarily have access to the same addr) 108 626.67 T
(ess space. Essentially) 304.35 626.67 T
(, what is being) 405.43 626.67 T
(passed acr) 108 612.67 T
(oss the dispatch interface is a copy of the value.) 158.71 612.67 T
3 16 Q
(4.8  Memor) 108 577.33 T
(y mana) 176.67 577.33 T
(g) 221.78 577.33 T
(ement issues) 229.92 577.33 T
2 11 Q
(Some of the values r) 108 556.67 T
(eturned by functions in the OLE Automation API ar) 206.32 556.67 T
(e) 458.88 556.67 T
(actually allocated on by the W) 108 542.67 T
(in32 libraries, and thus use memory that will) 254.5 542.67 T
(not be r) 108 528.67 T
(eclaimed automatically by the Dylan garbage collector) 144.99 528.67 T
(.) 408.56 528.67 T
-0.1 (If a pr) 108 508.67 P
-0.1 (operty value or dispatch method r) 136.93 508.67 P
-0.1 (esult is a string, it will be r) 302.72 508.67 P
-0.1 (epr) 430.14 508.67 P
-0.1 (esented) 446.17 508.67 P
(as an instance of class) 108 494.67 T
4 9.5 Q
(<BSTR>) 216.31 494.67 T
2 11 Q
( \050\322BASIC string\323\051, which is a subclass of) 250.51 494.67 T
4 9.5 Q
(<string>) 108 480.67 T
2 11 Q
( \050but not a) 153.6 480.67 T
4 9.5 Q
(<byte-string>) 206.06 480.67 T
2 11 Q
(\051. This string value will be allocated by) 280.16 480.67 T
(W) 108 466.67 T
(in32. Similarly) 118.39 466.67 T
(, sequences or arrays r) 187.53 466.67 T
(eceived as dispatch method r) 295.46 466.67 T
(esults or) 436.87 466.67 T
-0.05 (pr) 108 452.67 P
-0.05 (operty values will be instances of) 118.76 452.67 P
4 9.5 Q
-0.11 (<ole-array>) 282.72 452.67 P
2 11 Q
-0.05 ( or) 345.42 452.67 P
4 9.5 Q
-0.11 (<ole-vector>) 361.17 452.67 P
2 11 Q
-0.05 (, again allo-) 429.57 452.67 P
(cated by W) 108 438.67 T
(in32.) 162.05 438.67 T
-0.36 (T) 108 418.67 P
-0.36 (o ensur) 113.73 418.67 P
-0.36 (e that the memory occupied by such a value is r) 149.24 418.67 P
-0.36 (ecycled, you must call) 377.21 418.67 P
(the function) 108 404.67 T
4 9.5 Q
(destroy) 169.53 404.67 T
2 11 Q
( on the string when it is no longer in use.) 209.43 404.67 T
(Also, if an interface \050such as an instance of) 108 384.67 T
4 9.5 Q
(<LPUNKNOWN>) 316.7 384.67 T
2 11 Q
( or) 379.4 384.67 T
4 9.5 Q
(<LPDISPATCH>) 395.25 384.67 T
2 11 Q
(\051 is) 463.65 384.67 T
-0.29 (r) 108 370.67 P
-0.29 (eceived as a dispatch method r) 112.15 370.67 P
-0.29 (esult or pr) 260.34 370.67 P
-0.29 (operty value, you must call) 309.72 370.67 P
4 9.5 Q
-0.61 (Release) 443.64 370.67 P
2 11 Q
(on it when \336nished using it.) 108 356.67 T
3 16 Q
(4.9) 108 321.33 T
(Internationalization) 133.54 321.33 T
2 11 Q
(Many of the OLE Automation functions accept an optional) 108 300.67 T
4 9.5 Q
(locale:) 395.97 300.67 T
2 11 Q
( option) 435.87 300.67 T
(that can be used for internationalization. Usually you would not specify it,) 108 286.67 T
(instead allowing the curr) 108 272.67 T
(ent user) 229.66 272.67 T
(\325s default locale to be adopted as the default.) 269.39 272.67 T
(If you do need to specify a particular language, constr) 108 252.67 T
(uct a locale value with) 369.86 252.67 T
(the function) 108 238.67 T
4 9.5 Q
(MAKELCID) 169.53 238.67 T
2 11 Q
( in the W) 215.13 238.67 T
(in32-Common library \050see) 258.64 238.67 T
0 F
(Dylan W) 388.45 238.67 T
(in32 API) 429.48 238.67 T
(Libraries) 108 224.67 T
2 F
( in the Inter) 147.32 224.67 T
(operability I r) 203.55 224.67 T
(efer) 270.02 224.67 T
(ence volume\051. See also) 288.37 224.67 T
4 9.5 Q
(MAKELANGID) 400.33 224.67 T
2 11 Q
( and) 457.33 224.67 T
(the associated) 108 210.67 T
4 9.5 Q
($LANG-) 178.75 210.67 T
2 11 Q
(\311 and) 212.95 210.67 T
4 9.5 Q
($SUBLANG-) 248.07 210.67 T
2 11 Q
(\311 constants. For example, you could) 299.38 210.67 T
(do:) 108 196.67 T
4 9 Q
(define constant $british-english-locale =) 135 176 T
(MAKELCID\050MAKELANGID\050$LANG-ENGLISH,$SUBLANG-ENGLISH-UK\051,) 145.8 165 T
($SORT-DEFAULT\051;) 194.4 154 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "147" 53
%%Page: "148" 54
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(148) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 16 Q
0 X
(4.10) 126 637.33 T
(The OLE-A) 158.83 637.33 T
(UT) 225.98 637.33 T
(OMA) 242.96 637.33 T
(TION module) 272.4 637.33 T
2 11 Q
(This section contains a r) 126 616.67 T
(efer) 242.31 616.67 T
(ence entry for each item exported fr) 260.66 616.67 T
(om the OLE-) 433.83 616.67 T
(Automation module.) 126 602.67 T
3 12 Q
(<LPUNKNO) 126 568 T
(WN>) 179.92 568 T
0 11 Q
(Open abstract instantiable primary class) 324.14 568.67 T
2 F
(Super) 153 546.67 T
(classes:) 181.43 546.67 T
4 9.5 Q
(<object>) 219.78 546.67 T
2 11 Q
(The abstract super) 153 526.67 T
(class of all OLE/COM interface objects.) 242.39 526.67 T
3 12 Q
(<LPDISP) 126 492 T
(A) 166.32 492 T
(TCH>) 172.55 492 T
0 11 Q
(Open abstract instantiable primary class) 324.14 492.67 T
2 F
(Super) 153 470.67 T
(classes:) 181.43 470.67 T
4 9.5 Q
(<LPUNKNOWN>) 219.78 470.67 T
2 11 Q
(The class of objects that r) 153 450.67 T
(epr) 274.03 450.67 T
(esent OLE Automation) 290.06 450.67 T
4 9.5 Q
(IDispatch) 404.78 450.67 T
2 11 Q
( inter-) 456.08 450.67 T
(faces.) 153 436.67 T
3 12 Q
(<BSTR>) 126 402 T
0 11 Q
(Sealed concr) 374.34 402.67 T
(ete primary class) 429.24 402.67 T
2 F
(Super) 153 380.67 T
(classes:) 181.43 380.67 T
4 9.5 Q
(<string>) 219.78 380.67 T
(<C-Unicode-string>) 270.88 380.67 T
2 11 Q
(The class of BASIC strings. Corr) 153 360.67 T
(esponds to the string r) 308.33 360.67 T
(epr) 416.98 360.67 T
(esentation) 433.01 360.67 T
(used by OLE Automation pr) 153 346.67 T
(operty values and dispatch method ar) 291.52 346.67 T
(gu-) 476.22 346.67 T
(ments. The elements ar) 153 332.67 T
(e 16-bit Unicode characters.) 265.07 332.67 T
(Besides supporting the full) 153 312.67 T
4 9.5 Q
(<string>) 286.64 312.67 T
2 11 Q
( pr) 332.24 312.67 T
(otocol, this class can also be) 345.75 312.67 T
(r) 153 298.67 T
(egar) 157.15 298.67 T
(ded as a C pointer) 178.18 298.67 T
(, since it is a subclass of the C-FFI type) 265.96 298.67 T
4 9.5 Q
(<C-) 454.98 298.67 T
(unicode-string>) 153 284.67 T
2 11 Q
(.) 238.5 284.67 T
-0.07 (Y) 153 264.67 P
-0.07 (ou can use the constant) 159.32 264.67 P
4 9.5 Q
-0.14 ($NULL-BSTR) 275.02 264.67 P
2 11 Q
-0.07 ( to pass a NULL pointer in place of) 332.02 264.67 P
-0.17 (a string, and the function) 153 250.67 P
4 9.5 Q
-0.36 (null-pointer?) 277.11 250.67 P
2 11 Q
-0.17 ( to test a r) 351.21 250.67 P
-0.17 (eceived) 397.87 250.67 P
4 9.5 Q
-0.36 (<BSTR>) 437.27 250.67 P
2 11 Q
-0.17 ( to see) 471.47 250.67 P
(if it is a NULL pointer) 153 236.67 T
(. However) 259.51 236.67 T
(, a NULL pointer is tr) 309.63 236.67 T
(eated the same as) 413.79 236.67 T
(an empty string by the iteration pr) 153 222.67 T
(otocol, so it may not be necessary to) 320.32 222.67 T
(do this test.) 153 208.67 T
1 F
-0.47 (Note:) 153 188.67 P
2 F
-0.47 ( The W) 180.19 188.67 P
-0.47 (in32 OLE/COM libraries allocate memory on the C heap for) 213.57 188.67 P
(these strings. This means that the memory is not automatically) 153 174.67 T
(r) 153 160.67 T
(eclaimed by the Harlequin Dylan garbage collector) 157.15 160.67 T
(. Y) 403.95 160.67 T
(ou must call the) 415.78 160.67 T
(function) 153 146.67 T
4 9.5 Q
(destroy) 196.53 146.67 T
2 11 Q
( on a) 236.43 146.67 T
4 9.5 Q
(<BSTR>) 262.58 146.67 T
2 11 Q
( when you ar) 296.79 146.67 T
(e \336nished with it.) 360.68 146.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "148" 54
%%Page: "149" 55
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.10) 378.23 677.67 T
(The OLE-AUTOMATION module) 404.36 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(149) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(Y) 135 640.67 T
(ou can use the Dylan) 141.32 640.67 T
4 9.5 Q
(as) 246.06 640.67 T
2 11 Q
( coer) 257.46 640.67 T
(cion function to convert between) 280.51 640.67 T
4 9.5 Q
(<BSTR>) 442.88 640.67 T
2 11 Q
(and other string types.) 135 626.67 T
-0 (The function) 135 606.67 P
4 9.5 Q
-0 (copy-as-BSTR) 199.69 606.67 P
2 11 Q
-0 ( copies any kind of) 268.09 606.67 P
4 9.5 Q
-0 (<string>) 362.58 606.67 P
2 11 Q
-0 ( to a newly allo-) 408.18 606.67 P
(cated) 135 592.67 T
4 9.5 Q
(<BSTR>) 163.71 592.67 T
2 11 Q
(; you should use this instead of) 197.91 592.67 T
4 9.5 Q
(as) 351.72 592.67 T
2 11 Q
( when r) 363.12 592.67 T
(eturning a value) 400.02 592.67 T
(that will be deallocated by the r) 135 578.67 T
(eceiving pr) 288.16 578.67 T
(ogram. The) 342.23 578.67 T
4 9.5 Q
(copy-as-BSTR) 400.57 578.67 T
2 11 Q
(function r) 135 564.67 T
(eturns) 182.67 564.67 T
4 9.5 Q
($NULL-BSTR) 216.32 564.67 T
2 11 Q
( if the ar) 273.32 564.67 T
(gument is) 313.34 564.67 T
4 9.5 Q
(#f) 364.42 564.67 T
2 11 Q
( or a NULL pointer) 375.83 564.67 T
(.) 468.42 564.67 T
3 12 Q
(<ole-arra) 108 530 T
(y>) 149.66 530 T
0 11 Q
(Sealed concr) 356.34 530.67 T
(ete primary class) 411.24 530.67 T
2 F
(Super) 135 508.67 T
(classes:) 163.43 508.67 T
4 9.5 Q
(<array>) 201.78 508.67 T
(<LPSAFEARRAY>) 253.08 508.67 T
2 11 Q
(This class allows you to use the Dylan array pr) 135 488.67 T
(otocol on data that is) 361.89 488.67 T
(actually allocated as a C SAFEARRA) 135 474.67 T
(Y str) 312.46 474.67 T
(uctur) 335.06 474.67 T
(e.) 360.94 474.67 T
(Arrays r) 135 454.67 T
(eceived by Dylan fr) 175.43 454.67 T
(om an OLE Automation call will appear as) 270.24 454.67 T
(an) 135 440.67 T
4 9.5 Q
(<ole-vector>) 149.65 440.67 T
2 11 Q
( if they ar) 218.05 440.67 T
(e one-dimensional, and otherwise as) 264.19 440.67 T
(instances of) 135 426.67 T
4 9.5 Q
(<ole-array>) 194.74 426.67 T
2 11 Q
(.) 257.44 426.67 T
1 F
-0.47 (Note:) 135 406.67 P
2 F
-0.47 ( The W) 162.19 406.67 P
-0.47 (in32 OLE/COM libraries allocate memory on the C heap for) 195.57 406.67 P
-0.37 (these arrays. This means that the memory is not automatically r) 135 392.67 P
-0.37 (eclaimed) 439.86 392.67 P
(by the Harlequin Dylan garbage collector) 135 378.67 T
(. Y) 335.3 378.67 T
(ou must call the function) 347.12 378.67 T
4 9.5 Q
(destroy) 135 364.67 T
2 11 Q
( on an) 174.9 364.67 T
4 9.5 Q
(<ole-array>) 207.46 364.67 T
2 11 Q
( when you ar) 270.16 364.67 T
(e \336nished with it.) 334.06 364.67 T
1 F
-0.18 (Note:) 135 344.67 P
2 F
-0.18 ( The dimensions in a SAFEARRA) 162.19 344.67 P
-0.18 (Y specify both a lower and upper) 322.58 344.67 P
(bound for the index, but since Dylan does not support alternate lower) 135 330.67 T
-0.33 (bounds, index 0 always corr) 135 316.67 P
-0.33 (esponds to the \336rst element when viewed as) 270.24 316.67 P
(a Dylan array) 135 302.67 T
(.) 200.32 302.67 T
3 12 Q
(<ole-vector>) 108 268 T
0 11 Q
(Sealed concr) 356.34 268.67 T
(ete primary class) 411.24 268.67 T
2 F
(Super) 135 246.67 T
(classes:) 163.43 246.67 T
4 9.5 Q
(<ole-array>) 201.78 246.67 T
(<vector>) 275.88 246.67 T
2 11 Q
(This class allows you to use the Dylan vector pr) 135 226.67 T
(otocol on one-dimen-) 366.39 226.67 T
(sional vectors passed in an OLE Automation call.) 135 212.67 T
(Y) 135 192.67 T
(ou can use the function) 141.32 192.67 T
4 9.5 Q
(ole-vector) 257.1 192.67 T
2 11 Q
( just like) 314.1 192.67 T
4 9.5 Q
(vector) 357.59 192.67 T
2 11 Q
( to constr) 391.79 192.67 T
(uct an) 436.68 192.67 T
4 9.5 Q
(<ole-vector>) 135 178.67 T
2 11 Q
( containing the function ar) 203.4 178.67 T
(guments.) 331.78 178.67 T
1 F
-0.47 (Note:) 135 158.67 P
2 F
-0.47 ( The W) 162.19 158.67 P
-0.47 (in32 OLE/COM libraries allocate memory on the C heap for) 195.57 158.67 P
(these vectors. This means that the memory is not automatically) 135 144.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "149" 55
%%Page: "150" 56
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(150) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(r) 153 640.67 T
(eclaimed by the Harlequin Dylan garbage collector) 157.15 640.67 T
(. Y) 403.95 640.67 T
(ou must call the) 415.78 640.67 T
(function) 153 626.67 T
4 9.5 Q
(destroy) 196.53 626.67 T
2 11 Q
( on an) 236.43 626.67 T
4 9.5 Q
(<ole-vector>) 268.99 626.67 T
2 11 Q
( when you ar) 337.39 626.67 T
(e \336nished with it.) 401.29 626.67 T
3 12 Q
(<c) 126 592 T
(lass-factor) 137.04 592 T
(y>) 186.9 592 T
0 11 Q
(Open concr) 378.01 592.67 T
(ete primary class) 429.24 592.67 T
2 F
(This class implements the COM) 153 570.67 T
4 9.5 Q
(IClassFactory) 310.41 570.67 T
2 11 Q
( interface. Making an) 384.51 570.67 T
-0.2 (instance of it causes it to be r) 153 556.67 P
-0.2 (egister) 290.68 556.67 P
-0.2 (ed with the system automatically) 322.93 556.67 P
-0.2 (, for) 482.14 556.67 P
(use by potential clients.) 153 542.67 T
(An Automation server application does not need to use the instance) 153 522.67 T
(dir) 153 508.67 T
(ectly) 167.07 508.67 T
(, except that it must call the function) 188.9 508.67 T
4 9.5 Q
(revoke-registration) 368.23 508.67 T
2 11 Q
( on) 476.53 508.67 T
(the instance befor) 153 494.67 T
(e terminating.) 238.83 494.67 T
(The class supports the following init-keywor) 153 474.67 T
(ds:) 370.3 474.67 T
4 9.5 Q
(clsid:) 153 454.67 T
2 11 Q
(The COM Class ID that identi\336es the object the server) 234 454.67 T
-0.53 (pr) 234 440.67 P
-0.53 (ovides. Requir) 244.76 440.67 P
-0.53 (ed. This ID can be r) 314.56 440.67 P
-0.53 (epr) 405.9 440.67 P
-0.53 (esented either as) 421.93 440.67 P
(a string of 32 hexadecimal digits in the following for-) 234 426.67 T
(mat) 234 412.67 T
("{) 239.5 394.67 T
0 F
(xxxxxxxx) 247.24 394.67 T
2 F
(-) 291.24 394.67 T
0 F
(xxxx) 294.91 394.67 T
2 F
(-) 316.91 394.67 T
0 F
(xxxx) 320.57 394.67 T
2 F
(-) 342.57 394.67 T
0 F
(xxxx) 346.23 394.67 T
2 F
(-) 368.23 394.67 T
0 F
(xxxxxxxxxxxx) 371.9 394.67 T
2 F
(}") 437.9 394.67 T
(That is, wher) 234 376.67 T
(e each) 297.34 376.67 T
0 F
(x) 330.16 376.67 T
2 F
( is a hexadecimal digit. For exam-) 335.66 376.67 T
(ple:) 234 362.67 T
("{e90f09e0-43db-1) 239.5 344.67 T
(1d0-8a04-020701) 324.97 344.67 T
(19f639}") 404.41 344.67 T
(Alternatively) 234 326.67 T
(, the ID can be a) 297.23 326.67 T
4 9.5 Q
(<REFCLSID>) 377.59 326.67 T
2 11 Q
(, as r) 434.59 326.67 T
(eturned) 457.15 326.67 T
(fr) 234 312.67 T
(om) 241.81 312.67 T
4 9.5 Q
(make-GUID) 260.28 312.67 T
2 11 Q
(.) 311.58 312.67 T
(Y) 234 294.67 T
(ou can get the ID value by generating a GUID with) 240.32 294.67 T
(Harlequin Dylan\325s) 234 280.67 T
4 9.5 Q
(create-id) 326.82 280.67 T
2 11 Q
( utility) 378.12 280.67 T
(. See \322Cr) 409.17 280.67 T
(eating) 451.18 280.67 T
(GUID numbers\323 on page 97.) 234 266.67 T
4 9.5 Q
(class:) 153 246.67 T
2 11 Q
(The Dylan class \050usually a user) 234 246.67 T
(-de\336ned subclass of) 384.63 246.67 T
4 9.5 Q
-0.15 (<simple-dispatch>) 234 232.67 P
2 11 Q
-0.07 (\051 that is to be instantiated when the) 330.9 232.67 P
(client \050contr) 234 218.67 T
(oller\051 r) 291.98 218.67 T
(equests it. Requir) 324.56 218.67 T
(ed.) 408.6 218.67 T
4 9.5 Q
(args:) 153 198.67 T
2 11 Q
(Optional sequence of initialization ar) 234 198.67 T
(guments to be) 413.71 198.67 T
(passed to) 234 184.67 T
4 9.5 Q
(make) 282.52 184.67 T
2 11 Q
( when instantiating the object. The) 305.32 184.67 T
-0.27 (default is to pass the same ar) 234 170.67 P
-0.27 (guments as for the) 372.38 170.67 P
4 9.5 Q
-0.57 (<class-) 464.82 170.67 P
(factory) 234.72 156.67 T
(>) 273.9 156.67 T
2 11 Q
( \050) 279.6 156.67 T
4 9.5 Q
(<simple-dispatch>) 286.01 156.67 T
2 11 Q
( accepts and ignor) 382.91 156.67 T
(es) 471.06 156.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "150" 56
%%Page: "151" 57
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.10) 378.23 677.67 T
(The OLE-AUTOMATION module) 404.36 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(151) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(those that ar) 216 640.67 T
(e only for the factory) 276.15 640.67 T
(, and <class-factory>) 376.29 640.67 T
(ignor) 216 626.67 T
(es any that it does not r) 241.87 626.67 T
(ecognize.\051 Note that) 354.98 626.67 T
4 9.5 Q
(<simple-dispatch>) 216 612.67 T
2 11 Q
( r) 312.9 612.67 T
(equir) 319.8 612.67 T
(es) 345.21 612.67 T
4 9.5 Q
(typeinfo:) 357.89 612.67 T
2 11 Q
( to be supplied.) 409.19 612.67 T
4 9.5 Q
(server-context:) 135 586.67 T
2 11 Q
(Indicates wher) 216 568.67 T
(e the server is r) 287.68 568.67 T
(unning. See the descrip-) 361.43 568.67 T
-0.11 (tion of) 216 554.67 P
4 9.5 Q
-0.22 (create-dispatch) 250.15 554.67 P
2 11 Q
-0.11 ( below for a list of possible val-) 335.65 554.67 P
(ues. Defaults to) 216 540.67 T
4 9.5 Q
($CLSCTX-LOCAL-SERVER) 294.19 540.67 T
2 11 Q
(. Y) 408.19 540.67 T
(ou can use) 420.01 540.67 T
4 9.5 Q
($CLSCTX-INPROC-SERVER) 216 526.67 T
2 11 Q
( instead to suppr) 335.7 526.67 T
(ess external) 417.55 526.67 T
(r) 216 512.67 T
(egistration of the factory) 220.15 512.67 T
(.) 338.08 512.67 T
4 9.5 Q
(connection-flags:) 135 486.67 T
2 11 Q
-0.24 (Contr) 216 468.67 P
-0.24 (ols the number of connections. Must be one of the) 243.94 468.67 P
(following constants:) 216 454.67 T
4 9.5 Q
($REGCLS-SINGLEUSE) 216 436.67 T
2 11 Q
( \321 Only one connection allowed.) 312.9 436.67 T
(This is the default value.) 216 422.67 T
4 9.5 Q
($REGCLS-MULTIPLEUSE) 216 404.67 T
2 11 Q
( \321 Multiple connections) 324.3 404.67 T
(allowed.) 216 390.67 T
4 9.5 Q
($REGCLS-MULTI-SEPARATE) 216 372.67 T
2 11 Q
( \321 Multiple connections) 341.4 372.67 T
(allowed, separate contr) 216 358.67 T
(ol.) 329.09 358.67 T
(Any other keywor) 135 338.67 T
(d ar) 224.01 338.67 T
(guments ar) 243.13 338.67 T
(e passed in the) 297.91 338.67 T
4 9.5 Q
(make) 372.47 338.67 T
2 11 Q
( call when the) 395.27 338.67 T
(Dylan class is instantiated. Note that) 135 324.67 T
4 9.5 Q
(<simple-dispatch>) 315.45 324.67 T
2 11 Q
( r) 412.36 324.67 T
(equir) 419.25 324.67 T
(es) 444.66 324.67 T
4 9.5 Q
(typeinfo:) 135 310.67 T
2 11 Q
( to be supplied.) 186.3 310.67 T
3 12 Q
(<simple-dispatc) 108 276 T
(h>) 182.57 276 T
0 11 Q
(Open concr) 360.01 276.67 T
(ete primary class) 411.24 276.67 T
2 F
(Super) 135 254.67 T
(classes:) 163.43 254.67 T
4 9.5 Q
(<LPDISPATCH>) 201.78 254.67 T
2 11 Q
(Implements the COM) 135 234.67 T
4 9.5 Q
(IDispatch) 243.49 234.67 T
2 11 Q
( interface.) 294.79 234.67 T
(Automation server applications should de\336ne subclasses of this class to) 135 214.67 T
(r) 135 200.67 T
(epr) 139.15 200.67 T
(esent the dispatch interface that they wish to expose to Automation) 155.17 200.67 T
(contr) 135 186.67 T
(oller applications. Y) 160.02 186.67 T
(ou must use) 255.99 186.67 T
4 9.5 Q
(define) 318.04 186.67 T
(COM-interface) 354.99 186.67 T
2 11 Q
( to de\336ne) 429.09 186.67 T
(subclasses of this class.) 135 172.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "151" 57
%%Page: "152" 58
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(152) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
-0.25 (T) 153 640.67 P
-0.25 (o de\336ne dispatch methods, you should de\336ne or) 158.73 640.67 P
-0.25 (dinary Dylan methods) 392.11 640.67 P
(on your subclass of) 153 626.67 T
4 9.5 Q
(<simple-dispatch>) 249.47 626.67 T
2 11 Q
( that implement the functional-) 346.37 626.67 T
(ity you wish to expose as dispatch methods.) 153 612.67 T
(T) 153 592.67 T
(o de\336ne dispatch interface pr) 158.73 592.67 T
(operties, you should de\336ne type informa-) 300.5 592.67 T
(tion for your subclass of) 153 578.67 T
4 9.5 Q
(<simple-dispatch>) 273.02 578.67 T
2 11 Q
(. Do this with) 369.92 578.67 T
4 9.5 Q
(<disp-type-) 438.41 578.67 T
(info>) 153 564.67 T
2 11 Q
(,  page 154.) 181.5 564.67 T
(In the OLE/COM model, your dispatch interface class is usually instan-) 153 544.67 T
(tiated by a class factory) 153 530.67 T
(. In the OLE-Automation library) 265.35 530.67 T
(, the instance of) 420.98 530.67 T
4 9.5 Q
(<class-factory>) 153 516.67 T
2 11 Q
( \050cr) 238.5 516.67 T
(eated explicitly or via the) 253.94 516.67 T
4 9.5 Q
(with-class-factory) 379.51 516.67 T
2 11 Q
-0.03 (macr) 153 502.67 P
-0.03 (o\051 instantiates your dispatch interface subclass, so you do not need) 177.24 502.67 P
(to call) 153 488.67 T
4 9.5 Q
(make) 184.88 488.67 T
2 11 Q
( on it dir) 207.68 488.67 T
(ectly) 249.19 488.67 T
(.) 271.03 488.67 T
(The class supports the following init-keywor) 153 468.67 T
(ds:) 370.3 468.67 T
4 9.5 Q
(typeinfo:) 153 448.67 T
2 11 Q
(The COM) 234 448.67 T
4 9.5 Q
(ITypeInfo) 284.77 448.67 T
2 11 Q
( interface describing the services) 336.07 448.67 T
(being pr) 234 434.67 T
(ovided. This is usually an instance of) 274.58 434.67 T
4 9.5 Q
(<disp-) 457.01 434.67 T
(type-info>) 234 420.67 T
2 11 Q
(. Requir) 291 420.67 T
(ed.) 329.26 420.67 T
(For supporting multiple locales, the value may be a) 234 402.67 T
4 9.5 Q
(<collection>) 234 388.67 T
2 11 Q
( of) 302.4 388.67 T
4 9.5 Q
(<disp-type-info>) 317.57 388.67 T
2 11 Q
( which will be) 408.77 388.67 T
(indexed by the locale code.) 234 374.67 T
4 9.5 Q
(controlling-unknown:) 153 348.67 T
2 11 Q
(Designates the) 234 330.67 T
4 9.5 Q
(IUnknown) 307.94 330.67 T
2 11 Q
( interface if aggr) 353.54 330.67 T
(egation is) 432.65 330.67 T
(being used to pr) 234 316.67 T
(ovide multiple interfaces fr) 312.96 316.67 T
(om a single) 444.63 316.67 T
(OLE object. Optional.) 234 302.67 T
(Note that this value is pr) 234 284.67 T
(ovided automatically if the) 354.12 284.67 T
(aggr) 234 270.67 T
(egation is cr) 255.88 270.67 T
(eated by using) 314.36 270.67 T
4 9.5 Q
(<coclass-type-info>) 388.17 270.67 T
2 11 Q
(and) 234 256.67 T
4 9.5 Q
(make-object-factory) 255.37 256.67 T
2 11 Q
(, so it is only in rar) 362.45 256.67 T
(e cases) 452.34 256.67 T
(that you will need to supply a value for this keywor) 234 242.67 T
(d.) 486.21 242.67 T
3 12 Q
(<disp-type-inf) 126 208 T
(o>) 190.61 208 T
0 11 Q
(Sealed concr) 413.15 208.67 T
(ete class) 468.05 208.67 T
2 F
(Implements the COM) 153 186.67 T
4 9.5 Q
(ITypeInfo) 261.49 186.67 T
2 11 Q
( interface.) 312.79 186.67 T
(Automation server applications cr) 153 166.67 T
(eate an instance of this class to r) 318.95 166.67 T
(epr) 473.8 166.67 T
(e-) 489.83 166.67 T
(sent the type information for each dispatch interface class \050subclass of) 153 152.67 T
4 9.5 Q
(<simple-dispatch>) 153 138.67 T
2 11 Q
( that they implement.) 249.9 138.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "152" 58
%%Page: "153" 59
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.10) 378.23 677.67 T
(The OLE-AUTOMATION module) 404.36 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(153) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(The class supports the following init-keywor) 135 640.67 T
(ds:) 352.3 640.67 T
4 9.5 Q
(name:) 135 620.67 T
2 11 Q
(A string name for the dispatch interface.) 216 620.67 T
4 9.5 Q
(uuid:) 135 600.67 T
2 11 Q
(A GUID that identi\336es the interface. The default is) 216 600.67 T
4 9.5 Q
($IID-IDispatch) 216 586.67 T
2 11 Q
(.) 295.8 586.67 T
(This should pr) 216 568.67 T
(eferably be an instance of) 286.89 568.67 T
4 9.5 Q
(<REFGUID>) 412.92 568.67 T
2 11 Q
-0.51 (\050fr) 216 554.67 P
-0.51 (om) 227.47 554.67 P
4 9.5 Q
-1.06 (make-GUID) 245.43 554.67 P
2 11 Q
-0.51 (\051 but can also be a string r) 296.73 554.67 P
-0.51 (epr) 417.85 554.67 P
-0.51 (esentation) 433.88 554.67 P
(of the GUID \050containing 32 hexadecimal digits within) 216 540.67 T
(braces\051.) 216 526.67 T
4 9.5 Q
(properties:) 135 506.67 T
2 11 Q
( A) 216 506.67 T
4 9.5 Q
(<sequence>) 230.06 506.67 T
2 11 Q
( in which each element is an instance of) 287.06 506.67 T
4 9.5 Q
(<variable-description>) 216 492.67 T
2 11 Q
( or) 341.4 492.67 T
4 9.5 Q
(<constant-description>) 357.25 492.67 T
2 11 Q
(that speci\336es one dispatch interface pr) 216 478.67 T
(operty) 402.16 478.67 T
(. The) 432.88 478.67 T
(default is no pr) 216 464.67 T
(operties.) 289.85 464.67 T
4 9.5 Q
(methods:) 135 444.67 T
2 11 Q
( A) 216 444.67 T
4 9.5 Q
(<sequence>) 230.06 444.67 T
2 11 Q
( in which each element is an instance of) 287.06 444.67 T
4 9.5 Q
(<function-description>) 216 430.67 T
2 11 Q
( that speci\336es a dispatch) 341.4 430.67 T
(interface method. The default is no dispatch interface) 216 416.67 T
(methods.) 216 402.67 T
4 9.5 Q
(documentation:) 135 382.67 T
2 11 Q
-0.21 (A string describing the dispatch interface. This is called) 216 382.67 P
(a) 216 368.67 T
0 F
(helpstring) 224.25 368.67 T
2 F
( in ODL.) 269.48 368.67 T
4 9.5 Q
(help-file:) 135 348.67 T
2 11 Q
(A W) 216 348.67 T
(indows Help \336le name containing help for this dis-) 237.7 348.67 T
(patch interface. The help \336le must be in W) 216 334.67 T
(inHelp for-) 420.82 334.67 T
(mat. The default is no help \336le.) 216 320.67 T
4 9.5 Q
(help-context:) 135 300.67 T
2 11 Q
(The position in the W) 216 300.67 T
(inHelp \336le \050fr) 320.35 300.67 T
(om) 386.28 300.67 T
4 9.5 Q
(help-file:) 404.75 300.67 T
2 11 Q
(\051) 461.75 300.67 T
(wher) 216 286.67 T
(e this dispatch interface is documented. Optional.) 240.99 286.67 T
4 9.5 Q
(major-version:) 135 266.67 T
2 11 Q
(Major version number) 216 266.67 T
(. Default value: 0.) 324.06 266.67 T
4 9.5 Q
(minor-version:) 135 246.67 T
2 11 Q
(Minor version number) 216 246.67 T
(. Default value: 0.) 325.59 246.67 T
4 9.5 Q
(locale:) 135 226.67 T
2 11 Q
(Internationalization locale. Default value: 0, meaning) 216 226.67 T
(neutral.) 216 212.67 T
4 9.5 Q
(inherit:) 135 192.67 T
2 11 Q
-0.49 (The base type fr) 216 192.67 P
-0.49 (om which this type information inherits) 292.11 192.67 P
(information. Optional.) 216 178.67 T
(If speci\336ed, the value should be another instance of) 216 160.67 T
4 9.5 Q
(<disp-type-info>) 216 146.67 T
2 11 Q
( which the curr) 307.2 146.67 T
(ent type inherits) 380.78 146.67 T
(fr) 216 132.67 T
(om. The curr) 223.81 132.67 T
(ent type will support all of the dispatch) 286.2 132.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "153" 59
%%Page: "154" 60
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(154) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(pr) 234 640.67 T
(operties and dispatch methods of the base type in) 244.76 640.67 T
-0.07 (addition to its own. Some of the other options will gain) 234 626.67 P
(their default value fr) 234 612.67 T
(om the base type wher) 334.25 612.67 T
(e appr) 444.32 612.67 T
(opri-) 475.21 612.67 T
(ate.) 234 598.67 T
1 F
(Note:) 234 580.67 T
2 F
( T) 261.19 580.67 T
(ype information inheritance is implemented) 269.7 580.67 T
(separately fr) 234 566.67 T
(om the Dylan class hierar) 294.62 566.67 T
(chy) 418.11 566.67 T
(.) 434.29 566.67 T
3 12 Q
(<v) 126 532 T
(ariab) 137.04 532 T
(le-description>) 160.48 532 T
0 11 Q
(Sealed concr) 413.15 532.67 T
(ete class) 468.05 532.67 T
2 F
(Describes a single pr) 153 510.67 T
(operty of a dispatch interface.) 253.25 510.67 T
(The class supports the following init-keywor) 153 490.67 T
(ds:) 370.3 490.67 T
4 9.5 Q
(name:) 153 470.67 T
2 11 Q
(A string name for the pr) 234 470.67 T
(operty) 351.54 470.67 T
(. Requir) 382.25 470.67 T
(ed.) 420.51 470.67 T
4 9.5 Q
(getter:) 153 450.67 T
2 11 Q
-0.13 (A Dylan function that takes the dispatch interface as its) 234 450.67 P
(sole ar) 234 436.67 T
(gument and r) 265.54 436.67 T
(eturns the value of the pr) 331.53 436.67 T
(operty) 453.93 436.67 T
(, or) 484.65 436.67 T
4 9.5 Q
(#f) 234 422.67 T
2 11 Q
( if the pr) 245.4 422.67 T
(operty is not externally r) 286.53 422.67 T
(eadable. Default) 406.03 422.67 T
(value:) 234 408.67 T
4 9.5 Q
(#f) 266.32 408.67 T
2 11 Q
(.) 277.72 408.67 T
4 9.5 Q
(setter:) 153 388.67 T
2 11 Q
(A Dylan function that changes the value of the pr) 234 388.67 T
(op-) 473.89 388.67 T
(erty) 234 374.67 T
(, taking the new value and the dispatch interface as) 252.1 374.67 T
(its ar) 234 360.67 T
(guments, or) 257.85 360.67 T
4 9.5 Q
(#f) 318.83 360.67 T
2 11 Q
( if the client is not permitted to) 330.23 360.67 T
(change the pr) 234 346.67 T
(operty value. Default value:) 300.09 346.67 T
4 9.5 Q
(#f) 438.52 346.67 T
2 11 Q
(.) 449.92 346.67 T
-0.16 (Note that ther) 234 328.67 P
-0.16 (e is a special case. If the value of the pr) 301.66 328.67 P
-0.16 (op-) 487.72 328.67 P
(erty is an interface pointer \050such as) 234 314.67 T
4 9.5 Q
(<LPUNKNOWN>) 406.28 314.67 T
2 11 Q
( or) 468.98 314.67 T
4 9.5 Q
(<LPDISPATCH>) 234 300.67 T
2 11 Q
(\051, the setter method must call) 302.4 300.67 T
4 9.5 Q
(AddRef) 446.37 300.67 T
2 11 Q
( on) 480.57 300.67 T
(the new value and must call) 234 286.67 T
4 9.5 Q
(Release) 373.42 286.67 T
2 11 Q
( on the old value.) 413.33 286.67 T
4 9.5 Q
(type:) 153 266.67 T
2 11 Q
-0.11 (A C designator type fr) 234 266.67 P
-0.11 (om the C-FFI library) 342.13 266.67 P
-0.11 (. It is used to) 440 266.67 P
(specify the datatype that an Automation client written) 234 252.67 T
(in C or C++ will use to r) 234 238.67 T
(epr) 351.22 238.67 T
(esent the pr) 367.24 238.67 T
(operty value.) 423.95 238.67 T
(The following values ar) 234 224.67 T
(e legal:) 348.76 224.67 T
4 9.5 Q
-1.08 (<C-int>) 234 206.67 P
2 11 Q
-0.52 (,) 273.9 206.67 P
4 9.5 Q
-1.08 (<C-short>) 278.88 206.67 P
2 11 Q
-0.52 (,) 330.18 206.67 P
4 9.5 Q
-1.08 (<C-long>) 335.16 206.67 P
2 11 Q
-0.52 (,) 380.76 206.67 P
4 9.5 Q
-1.08 (<C-float>) 385.74 206.67 P
2 11 Q
-0.52 (,) 437.04 206.67 P
4 9.5 Q
-1.08 (<C-double>) 442.02 206.67 P
2 11 Q
-0.52 (,) 499.02 206.67 P
4 9.5 Q
(<C-signed-char>) 234 192.67 T
2 11 Q
(,) 319.5 192.67 T
4 9.5 Q
(<C-character>) 325 192.67 T
2 11 Q
(,) 399.1 192.67 T
4 9.5 Q
(<CY>) 404.6 192.67 T
2 11 Q
(,) 427.4 192.67 T
4 9.5 Q
(<DATE>) 438.4 192.67 T
2 11 Q
(,) 472.6 192.67 T
4 9.5 Q
(<BSTR>) 234 178.67 T
2 11 Q
(,) 268.2 178.67 T
4 9.5 Q
(<LPUNKNOWN>) 273.7 178.67 T
2 11 Q
(,) 336.4 178.67 T
4 9.5 Q
(<LPDISPATCH>) 341.9 178.67 T
2 11 Q
(,) 410.3 178.67 T
4 9.5 Q
(<C-HRESULT>) 415.8 178.67 T
2 11 Q
(,) 478.5 178.67 T
4 9.5 Q
(<aVARIANT-BOOL>) 234 164.67 T
2 11 Q
(,) 319.5 164.67 T
4 9.5 Q
(<VARIANT>) 325 164.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "154" 60
%%Page: "155" 61
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.10) 378.23 677.67 T
(The OLE-AUTOMATION module) 404.36 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(155) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(Y) 216 640.67 T
(ou can also specify the corr) 222.32 640.67 T
(esponding Dylan type) 353.92 640.67 T
(\050such as) 216 626.67 T
4 9.5 Q
(<single-float>) 257.91 626.67 T
2 11 Q
(,) 337.71 626.67 T
4 9.5 Q
(<double-float>) 343.21 626.67 T
2 11 Q
(,) 423.01 626.67 T
4 9.5 Q
(<charac-) 428.51 626.67 T
(ter>) 216 612.67 T
2 11 Q
(, or) 238.8 612.67 T
4 9.5 Q
(<boolean>) 257.4 612.67 T
2 11 Q
(\051. The class) 308.7 612.67 T
4 9.5 Q
(<integer>) 364.69 612.67 T
2 11 Q
( is consider) 415.99 612.67 T
(ed) 470.65 612.67 T
(equivalent to) 216 598.67 T
4 9.5 Q
(<C-long>) 282.53 598.67 T
2 11 Q
(, and) 328.13 598.67 T
4 9.5 Q
(<string>) 355 598.67 T
2 11 Q
( is equivalent to) 400.6 598.67 T
4 9.5 Q
(<BSTR>) 216 584.67 T
2 11 Q
(.) 250.2 584.67 T
-0.29 (\050In addition, the low-level r) 216 566.67 P
-0.29 (epr) 348.29 566.67 P
-0.29 (esentation as an instance) 364.32 566.67 P
(of) 216 552.67 T
4 9.5 Q
(<LPTYPEDESC>) 228.42 552.67 T
2 11 Q
( can be used her) 296.82 552.67 T
(e.\051) 375.06 552.67 T
(For an array) 216 534.67 T
(, you must also specify the element type.) 274.45 534.67 T
(Do this by using the function) 216 520.67 T
4 9.5 Q
(ole-array-type) 360.12 520.67 T
2 11 Q
( to con-) 439.92 520.67 T
(str) 216 506.67 T
(uct a type description. For example,) 228.51 506.67 T
4 9.5 Q
(ole-array-) 405.29 506.67 T
(type\050<C-float>\051) 216 492.67 T
2 11 Q
( for a vector or array of single \337oats,) 301.5 492.67 T
(or) 216 478.67 T
4 9.5 Q
(ole-array-type\050<VARIANT>\051) 229.1 478.67 T
2 11 Q
( for a heter) 371.6 478.67 T
(ogeneous) 424.04 478.67 T
(array) 216 464.67 T
(. Note that dimensions ar) 240.59 464.67 T
(e not speci\336ed her) 363.3 464.67 T
(e.) 451.91 464.67 T
(If you do not specify the) 216 446.67 T
4 9.5 Q
(type:) 337.01 446.67 T
2 11 Q
(, the OLE-Automation) 365.51 446.67 T
(library will select one automatically to most closely) 216 432.67 T
(match the Dylan type declar) 216 418.67 T
(ed for the r) 353.38 418.67 T
(esult value of) 407.04 418.67 T
-0.26 (the getter function. One way or the other) 216 404.67 P
-0.26 (, the type must) 411.87 404.67 P
(be speci\336ed.) 216 390.67 T
-0.39 (Note that the default is the type declar) 216 372.67 P
-0.39 (ed for the generic) 399.83 372.67 P
(function. It is not suf) 216 358.67 T
(\336cient simply to specify the type) 316.44 358.67 T
(for a slot, since ther) 216 344.67 T
(e is not enough information her) 310.55 344.67 T
(e to) 464.09 344.67 T
(know which method is applicable.) 216 330.67 T
4 9.5 Q
(documentation:) 135 310.67 T
2 11 Q
-0.02 (A optional string describing the pr) 216 310.67 P
-0.02 (operty) 383.95 310.67 P
-0.02 (. This is called) 414.67 310.67 P
(a) 216 296.67 T
0 F
(helpstring) 224.25 296.67 T
2 F
( in ODL.) 269.48 296.67 T
4 9.5 Q
(help-context:) 135 276.67 T
2 11 Q
(The position in the W) 216 276.67 T
(inHelp \336le \050fr) 320.35 276.67 T
(om) 386.28 276.67 T
4 9.5 Q
(help-file:) 404.75 276.67 T
2 11 Q
( in) 461.75 276.67 T
(the) 216 262.67 T
4 9.5 Q
(<coclass-type-info>) 234.01 262.67 T
2 11 Q
( instance\051 wher) 342.31 262.67 T
(e this pr) 416.37 262.67 T
(op-) 455.75 262.67 T
(erty is documented. Optional.) 216 248.67 T
4 9.5 Q
(disp-id:) 135 228.67 T
2 11 Q
(DISPID by which the client will r) 216 228.67 T
(efer to the pr) 376.35 228.67 T
(operty) 438.75 228.67 T
(.) 469.46 228.67 T
(Usually you would not specify this, and the OLE-Auto-) 216 214.67 T
(mation library would automatically assign a DISPID.) 216 200.67 T
-0.06 (Y) 216 186.67 P
-0.06 (ou do need to specify a DISPID when implementing a) 222.32 186.67 P
(stock pr) 216 172.67 T
(operty) 254.76 172.67 T
(. For example:) 285.48 172.67 T
4 9 Q
(make\050<variable-description>,) 232.2 152 T
(name: "Value",) 259.2 141 T
(disp-id: $DISPID-VALUE \311\051) 259.2 130 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "155" 61
%%Page: "156" 62
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(156) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 12 Q
0 X
(<constant-description>) 126 640 T
0 11 Q
(Sealed concr) 413.15 640.67 T
(ete class) 468.05 640.67 T
2 F
(Describes a single constant-valued pr) 153 618.67 T
(operty of a dispatch interface.) 334.24 618.67 T
(The class supports the following init-keywor) 153 598.67 T
(ds:) 370.3 598.67 T
4 9.5 Q
(name:) 153 578.67 T
2 11 Q
(A string name for the pr) 234 578.67 T
(operty) 351.54 578.67 T
(. Requir) 382.25 578.67 T
(ed.) 420.51 578.67 T
4 9.5 Q
(value:) 153 558.67 T
2 11 Q
(The value of the pr) 234 558.67 T
(operty) 325.92 558.67 T
(. Requir) 356.63 558.67 T
(ed.) 394.89 558.67 T
4 9.5 Q
(type:) 153 538.67 T
2 11 Q
(A C type, as for) 234 538.67 T
4 9.5 Q
(<variable-description>) 312.62 538.67 T
2 11 Q
( above. The) 438.02 538.67 T
(default value is derived fr) 234 524.67 T
(om the Dylan class of the) 359.81 524.67 T
(value.) 234 510.67 T
4 9.5 Q
(documentation:) 153 490.67 T
2 11 Q
(An optional string describing the pr) 234 490.67 T
(operty) 408.44 490.67 T
(.) 439.15 490.67 T
4 9.5 Q
(help-context:) 153 470.67 T
2 11 Q
(The position in the W) 234 470.67 T
(inHelp \336le \050fr) 338.35 470.67 T
(om) 404.28 470.67 T
4 9.5 Q
(help-file:) 422.75 470.67 T
2 11 Q
( in) 479.75 470.67 T
(the) 234 456.67 T
4 9.5 Q
(<coclass-type-info>) 252.01 456.67 T
2 11 Q
( instance\051 wher) 360.31 456.67 T
(e this pr) 434.37 456.67 T
(op-) 473.75 456.67 T
(erty is documented. Optional.) 234 442.67 T
4 9.5 Q
(disp-id:) 153 422.67 T
2 11 Q
(Optional DISPID.) 234 422.67 T
3 12 Q
(<function-description>) 126 388 T
0 11 Q
(Sealed concr) 413.15 388.67 T
(ete class) 468.05 388.67 T
2 F
(Describes a single dispatch method in a dispatch interface.) 153 366.67 T
(The class supports the following init-keywor) 153 346.67 T
(ds:) 370.3 346.67 T
4 9.5 Q
(name:) 153 326.67 T
2 11 Q
(A string name for the dispatch method. Requir) 234 326.67 T
(ed.) 461.05 326.67 T
4 9.5 Q
(function:) 153 306.67 T
2 11 Q
(The Dylan function or method that implements the) 234 306.67 T
(functionality of this dispatch method. Requir) 234 292.67 T
(ed.) 452.43 292.67 T
(This function is called with the dispatch instance as its) 234 274.67 T
(\336rst ar) 234 260.67 T
(gument, and the dispatch method ar) 265.65 260.67 T
(guments as) 442.66 260.67 T
(its r) 234 246.67 T
(emaining ar) 252.35 246.67 T
(guments. It must r) 310.55 246.67 T
(eturn an instance of) 399.97 246.67 T
4 9.5 Q
(<SCODE>) 234 232.67 T
2 11 Q
( as its \336rst r) 273.9 232.67 T
(esult value, and may optionally) 329.91 232.67 T
(r) 234 218.67 T
(eturn a second r) 238.15 218.67 T
(esult value, which is the value) 316.23 218.67 T
(r) 234 204.67 T
(eturned fr) 238.15 204.67 T
(om the dispatch method.) 286.93 204.67 T
-0.04 (The function can have) 234 186.67 P
4 9.5 Q
-0.08 (#key) 344.2 186.67 P
2 11 Q
-0.04 ( ar) 367 186.67 P
-0.04 (guments that corr) 379.36 186.67 P
-0.04 (espond) 465.62 186.67 P
(to OLE Automation named ar) 234 172.67 T
(guments. An) 379.12 172.67 T
4 9.5 Q
(#all-keys) 444.72 172.67 T
2 11 Q
(speci\336cation would not be useful.) 234 158.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "156" 62
%%Page: "157" 63
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.10) 378.23 677.67 T
(The OLE-AUTOMATION module) 404.36 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(157) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(If the function uses) 216 640.67 T
4 9.5 Q
(#rest) 311.63 640.67 T
2 11 Q
( but not) 340.13 640.67 T
4 9.5 Q
(#key) 380.68 640.67 T
2 11 Q
(, it will be) 402.26 640.67 T
(described to a client written in C as accepting a \322safe) 216 626.67 T
(array\323 as the value of an additional ar) 216 612.67 T
(gument.) 400.05 612.67 T
4 9.5 Q
(argument-names:) 135 586.67 T
2 11 Q
-0.28 (A) 216 568.67 P
4 9.5 Q
-0.59 (<sequence>) 227.02 568.67 P
2 11 Q
-0.28 ( giving the names of the dispatch method) 284.02 568.67 P
-0.1 (ar) 216 554.67 P
-0.1 (guments. The length of this sequence must match the) 225.65 554.67 P
(number of function ar) 216 540.67 T
(guments \050including any `#key') 322.79 540.67 T
(ar) 216 526.67 T
(guments\051 after the dispatch interface. Default value:) 225.65 526.67 T
(no ar) 216 512.67 T
(guments.) 240.8 512.67 T
(Note that even for) 216 494.67 T
4 9.5 Q
(#key) 307.24 494.67 T
2 11 Q
( ar) 330.05 494.67 T
(guments, these names that) 342.44 494.67 T
(ar) 216 480.67 T
(e exposed to clients do not have to match the Dylan) 225.65 480.67 T
(identi\336ers; the corr) 216 466.67 T
(espondence is strictly by position) 308.2 466.67 T
(or) 216 452.67 T
(der) 226.15 452.67 T
(. A) 241.67 452.67 T
4 9.5 Q
(#rest) 258.48 452.67 T
2 11 Q
( ar) 286.98 452.67 T
(gument does not have a name.) 299.38 452.67 T
4 9.5 Q
(argument-types:) 135 426.67 T
2 11 Q
(A) 216 408.67 T
4 9.5 Q
(<sequence>) 227.31 408.67 T
2 11 Q
( giving the C types of the ar) 284.31 408.67 T
(guments, as) 418.68 408.67 T
(for the) 216 394.67 T
4 9.5 Q
(type:) 250.77 394.67 T
2 11 Q
( option of) 279.27 394.67 T
4 9.5 Q
(<variable-description>) 329 394.67 T
2 11 Q
(above. The default is to attempt to infer the types fr) 216 380.67 T
(om) 465.4 380.67 T
(the declar) 216 366.67 T
(ed Dylan types of the function ar) 263.73 366.67 T
(guments.) 423.55 366.67 T
4 9.5 Q
(result-type:) 135 346.67 T
2 11 Q
(The C type of the r) 216 346.67 T
(esult value, or) 306.62 346.67 T
4 9.5 Q
(#f) 378.14 346.67 T
2 11 Q
( if no r) 389.54 346.67 T
(esult. The) 421.21 346.67 T
-0.14 (default value is derived fr) 216 332.67 P
-0.14 (om the declar) 341.26 332.67 P
-0.14 (ed r) 407.19 332.67 P
-0.14 (esult values) 425.94 332.67 P
(of the Dylan function.) 216 318.67 T
4 9.5 Q
(documentation:) 135 298.67 T
2 11 Q
(An optional string describing the function.) 216 298.67 T
4 9.5 Q
(help-context:) 135 278.67 T
2 11 Q
(Position in W) 216 278.67 T
(inHelp \336le. Optional.) 281.21 278.67 T
4 9.5 Q
(scodes:) 135 258.67 T
2 11 Q
(A) 216 258.67 T
4 9.5 Q
(<sequence>) 227.31 258.67 T
2 11 Q
( of err) 284.31 258.67 T
(or code values that might be) 313.24 258.67 T
(r) 216 244.67 T
(eturned. The default is an empty sequence.) 220.15 244.67 T
-0.02 (This value is for documentation purposes only: ther) 216 226.67 P
-0.02 (e is) 467.41 226.67 P
(nothing to pr) 216 212.67 T
(event the function fr) 279.96 212.67 T
(om r) 378.8 212.67 T
(eturning other) 401.42 212.67 T
(codes not listed her) 216 198.67 T
(e.) 310.25 198.67 T
4 9.5 Q
(flags:) 135 178.67 T
(logior) 216 178.67 T
2 11 Q
( of) 250.2 178.67 T
4 9.5 Q
($FUNCFLAG-\311) 265.37 178.67 T
2 11 Q
( values. Default value: 0. \050Refer) 328.07 178.67 T
(to the Micr) 216 164.67 T
(osoft documentation for the FUNCFLAGS) 268.99 164.67 T
(enumeration.\051 This is not likely to be necessary; it just) 216 150.67 T
(\336ne-tunes the appearance of the function in br) 216 136.67 T
(owsers.) 440.48 136.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "157" 63
%%Page: "158" 64
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(158) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 9.5 Q
0 X
(disp-id:) 153 640.67 T
2 11 Q
(Optional DISPID.) 234 640.67 T
3 12 Q
(<coc) 126 606 T
(lass-type-inf) 148.52 606 T
(o>) 206.3 606 T
0 11 Q
(Sealed concr) 413.15 606.67 T
(ete class) 468.05 606.67 T
2 F
(Implements the COM) 153 584.67 T
4 9.5 Q
(ITypeInfo) 261.49 584.67 T
2 11 Q
( interface.) 312.79 584.67 T
(Automation servers instantiate this class to pr) 153 564.67 T
(ovide an) 375.48 564.67 T
4 9.5 Q
(ITypeInfo) 420.29 564.67 T
2 11 Q
( inter-) 471.59 564.67 T
(face describing a component object class \050COM class\051 that can contain) 153 550.67 T
(any number of dispatch interfaces.) 153 536.67 T
(The class supports the following init-keywor) 153 516.67 T
(ds:) 370.3 516.67 T
4 9.5 Q
(name:) 153 496.67 T
2 11 Q
( String name of the COM object class.) 234 496.67 T
4 9.5 Q
(uuid:) 153 476.67 T
2 11 Q
(The GUID that identi\336es the COM object class.) 234 476.67 T
(Requir) 234 462.67 T
(ed.) 266.76 462.67 T
4 9.5 Q
(class:) 153 442.67 T
2 11 Q
(The instance of) 234 442.67 T
4 9.5 Q
(<class>) 310.24 442.67 T
2 11 Q
( that is to be instantiated to) 350.14 442.67 T
(implement the COM object. Defaults to) 234 428.67 T
4 9.5 Q
(<simple-com-) 427.35 428.67 T
(ponent-object>) 234 414.67 T
2 11 Q
(. Usually it would be overridden only) 313.8 414.67 T
(by a user) 234 400.67 T
(-de\336ned subclass of) 277.91 400.67 T
4 9.5 Q
(<simple-component-) 376.82 400.67 T
(object>) 234 386.67 T
2 11 Q
(, but the only r) 273.9 386.67 T
(equir) 345.08 386.67 T
(ement is that it implement) 370.49 386.67 T
(the) 234 372.67 T
4 9.5 Q
(IUnknown) 252.01 372.67 T
2 11 Q
( interface and that it accept a) 297.61 372.67 T
4 9.5 Q
(typeinfo:) 439.69 372.67 T
2 11 Q
(init ar) 234 358.67 T
(gument with the instance of) 262.79 358.67 T
4 9.5 Q
(<coclass-type-) 401.45 358.67 T
(info>) 234 344.67 T
2 11 Q
( as the value.) 262.5 344.67 T
4 9.5 Q
(args:) 153 324.67 T
2 11 Q
(A) 234 324.67 T
4 9.5 Q
(<sequence>) 245.31 324.67 T
2 11 Q
( of initialization keywor) 302.31 324.67 T
(d ar) 418.74 324.67 T
(guments for) 437.86 324.67 T
(instantiating the class \050in addition to) 234 310.67 T
4 9.5 Q
(typeinfo:) 414.21 310.67 T
2 11 Q
(\051.) 465.51 310.67 T
(Defaults to the empty sequence. Ther) 234 296.67 T
(e ar) 414.79 296.67 T
(e no init ar) 432.45 296.67 T
(gu-) 484.42 296.67 T
(ments applicable to) 234 282.67 T
4 9.5 Q
(<simple-component-object>) 331.54 282.67 T
2 11 Q
(, so) 474.04 282.67 T
(use this only if you also specify) 234 268.67 T
4 9.5 Q
(class:) 388.79 268.67 T
2 11 Q
(.) 422.99 268.67 T
4 9.5 Q
(interfaces:) 153 248.67 T
2 11 Q
(A) 234 248.67 T
4 9.5 Q
(<vector>) 245.31 248.67 T
2 11 Q
( in which each element is an instance of) 290.91 248.67 T
4 9.5 Q
(<component-interface-description>) 234 234.67 T
2 11 Q
( describing an) 422.1 234.67 T
(interface that is supported by the compound object) 234 220.67 T
(\050COM object\051.) 234 206.67 T
4 9.5 Q
(documentation:) 153 186.67 T
2 11 Q
(A string describing the type library) 234 186.67 T
(.) 403.92 186.67 T
(This string will appear as the name of the type library) 234 168.67 T
(in the Micr) 234 154.67 T
(osoft OLE2VIEW utility) 287 154.67 T
(, which assumes a) 401.68 154.67 T
(single line that will be tr) 234 140.67 T
(uncated at about 45 characters.) 351.72 140.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "158" 64
%%Page: "159" 65
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.10) 378.23 677.67 T
(The OLE-AUTOMATION module) 404.36 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(159) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 9.5 Q
0 X
(help-file:) 135 640.67 T
2 11 Q
(Name of W) 216 640.67 T
(indows Help \336le containing help for . The) 271.19 640.67 T
(help \336le must be in W) 216 626.67 T
(inHelp format. The default is no) 322.3 626.67 T
(help \336le.) 216 612.67 T
4 9.5 Q
(help-context:) 260.86 612.67 T
2 11 Q
(Position in the W) 334.96 612.67 T
(inHelp \336le) 418.17 612.67 T
(wher) 216 598.67 T
(e the documentation appears.) 240.99 598.67 T
4 9.5 Q
(major-version:) 135 578.67 T
2 11 Q
(Major version number) 216 578.67 T
(. Default value: 0.) 324.06 578.67 T
4 9.5 Q
(minor-version:) 135 558.67 T
2 11 Q
(Minor version number) 216 558.67 T
(. Default value: 0.) 325.59 558.67 T
4 9.5 Q
(locale:) 135 538.67 T
2 11 Q
(Internationalization locale. Default value: neutral.) 216 538.67 T
3 12 Q
(<simple-component-object>) 108 504 T
0 11 Q
(Open concr) 360.01 504.67 T
(ete primary class) 411.24 504.67 T
2 F
(Super) 135 482.67 T
(classes:) 163.43 482.67 T
4 9.5 Q
(<IUnknown>) 201.78 482.67 T
2 11 Q
(This class implements a \322compound class object\323.) 135 462.67 T
-0.08 (Y) 135 442.67 P
-0.08 (ou can instantiate it dir) 141.32 442.67 P
-0.08 (ectly) 253.2 442.67 P
-0.08 (, or you can de\336ne a subclass of it to instan-) 275.04 442.67 P
(tiate. It takes one r) 135 428.67 T
(equir) 224.14 428.67 T
(ed init-keywor) 249.55 428.67 T
(d,) 321.17 428.67 T
4 9.5 Q
(typeinfo:) 333.4 428.67 T
2 11 Q
(, whose value is an) 384.7 428.67 T
(instance of) 135 414.67 T
4 9.5 Q
(<coclass-type-info>) 190.08 414.67 T
2 11 Q
(, which speci\336es the component inter-) 298.38 414.67 T
(faces that will be automatically instantiated when the object is instanti-) 135 400.67 T
(ated.) 135 386.67 T
(Because this class is a subclass of) 135 366.67 T
4 9.5 Q
(<IUnknown>) 297.28 366.67 T
2 11 Q
(, you can call the function) 354.28 366.67 T
4 9.5 Q
(QueryInterface) 135 352.67 T
2 11 Q
( can on an instance of it to obtain one of the component) 214.8 352.67 T
(interfaces.) 135 338.67 T
-0.32 (Note that you must de\336ne subclasses of this class with the macr) 135 318.67 P
-0.32 (o) 440.94 318.67 P
4 9.5 Q
-0.67 (define) 449.38 318.67 P
(COM-interface) 135 304.67 T
2 11 Q
( rather than) 209.1 304.67 T
4 9.5 Q
(define) 268.69 304.67 T
(class) 305.64 304.67 T
2 11 Q
(.) 334.14 304.67 T
3 12 Q
(<component-interface-description>) 108 270 T
0 11 Q
(Sealed concr) 395.15 270.67 T
(ete class) 450.05 270.67 T
2 F
(This class is dir) 135 248.67 T
(ectly instantiated to specify one interface in a \322com-) 209.11 248.67 T
(pound class object\323.) 135 234.67 T
(The class supports the following init-keywor) 135 214.67 T
(ds:) 352.3 214.67 T
4 9.5 Q
(typeinfo:) 135 194.67 T
2 11 Q
(An) 216 194.67 T
4 9.5 Q
(ITypeInfo) 233.71 194.67 T
2 11 Q
( interface that describes the interface.) 285.01 194.67 T
(Usually this will be an instance of) 216 180.67 T
4 9.5 Q
(<disp-type-info>) 382.58 180.67 T
2 11 Q
(.) 473.78 180.67 T
(Requir) 216 166.67 T
(ed.) 248.76 166.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "159" 65
%%Page: "160" 66
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(160) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 9.5 Q
0 X
(class:) 153 640.67 T
2 11 Q
(The Dylan) 234 640.67 T
4 9.5 Q
(<class>) 287.65 640.67 T
2 11 Q
( that will be instantiated to imple-) 327.55 640.67 T
(ment the interface. The class should be a subclass of) 234 626.67 T
4 9.5 Q
(<simple-dispatch>) 234 612.67 T
2 11 Q
(.) 330.9 612.67 T
4 9.5 Q
(args:) 153 592.67 T
2 11 Q
(A) 234 592.67 T
4 9.5 Q
(<sequence>) 245.31 592.67 T
2 11 Q
( of initialization ar) 302.31 592.67 T
(guments for the Dylan) 391.56 592.67 T
(class, besides the) 234 578.67 T
4 9.5 Q
(typeinfo:) 319.04 578.67 T
2 11 Q
( and) 370.34 578.67 T
4 9.5 Q
(controlling-) 394.46 578.67 T
(unknown:) 234 564.67 T
2 11 Q
( ar) 279.6 564.67 T
(guments that ar) 292 564.67 T
(e supplied automatically) 368.6 564.67 T
(.) 487.69 564.67 T
(The default value is the empty sequence.) 234 550.67 T
(This is only necessary for keywor) 234 532.67 T
(ds added by a user) 396.3 532.67 T
(-) 488.03 532.67 T
(de\336ned subclass.) 234 518.67 T
4 9.5 Q
(flags:) 153 498.67 T
2 11 Q
-0.22 (Implementation \337ags. An) 234 498.67 P
4 9.5 Q
-0.45 (<integer>) 360.45 498.67 P
2 11 Q
-0.22 ( formed by) 411.75 498.67 P
4 9.5 Q
-0.45 (logior) 467.27 498.67 P
2 11 Q
(of) 234 484.67 T
4 9.5 Q
($IMPLTYPEFLAG-) 246.42 484.67 T
2 11 Q
(\311 values. \050Refer to the Micr) 326.22 484.67 T
(osoft) 462.24 484.67 T
(OLE/COM API documentation for the) 234 470.67 T
4 9.5 Q
(IMPLTYPEFLAGS) 425.44 470.67 T
2 11 Q
(enumeration.\051 Default value: 0. Meaningful values ar) 234 456.67 T
(e:) 491.35 456.67 T
4 9.5 Q
($IMPLTYPEFLAG-FDEFAULT) 234 438.67 T
2 11 Q
( \321 Designates this interface) 359.4 438.67 T
(as the default. If none have this \337ag, the \336rst one listed) 234 424.67 T
(will be used as the default.) 234 410.67 T
4 9.5 Q
($IMPLTYPEFLAG-FSOURCE) 234 392.67 T
2 11 Q
( \321 A \322sour) 353.7 392.67 T
(ce\323 interface, that) 408.46 392.67 T
(is, one that is called by the server and should be imple-) 234 378.67 T
(mented by the contr) 234 364.67 T
(oller) 331.69 364.67 T
(.) 352.9 364.67 T
4 9.5 Q
($IMPLTYPEFLAG-FRESTRICTED) 234 346.67 T
2 11 Q
( \321 Designates a member) 376.5 346.67 T
(that should not be visible or used externally) 234 332.67 T
(. This is) 446.11 332.67 T
(pr) 234 318.67 T
(obably not useful in Dylan, since you could simply) 244.76 318.67 T
(omit to mention such a member in the type informa-) 234 304.67 T
(tion.) 234 290.67 T
3 12 Q
(<ole-err) 126 256 T
(or>) 162.19 256 T
0 11 Q
(Open concr) 378.01 256.67 T
(ete primary class) 429.24 256.67 T
2 F
(Super) 153 234.67 T
(classes:) 181.43 234.67 T
4 9.5 Q
(<error>) 219.78 234.67 T
2 11 Q
(The class of OLE err) 153 214.67 T
(or codes.) 250.85 214.67 T
-0.41 (Use the function) 153 194.67 P
4 9.5 Q
-0.85 (ole-error) 234.55 194.67 P
2 11 Q
-0.41 ( or) 285.85 194.67 P
4 9.5 Q
-0.85 (check-ole-status) 300.89 194.67 P
2 11 Q
-0.41 ( to cr) 392.09 194.67 P
-0.41 (eate and signal an) 415.4 194.67 P
-0.44 (instance of this class. Y) 153 180.67 P
-0.44 (ou can use the following accessor functions on the) 261.66 180.67 P
(err) 153 166.67 T
(or object:) 166.76 166.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "160" 66
%%Page: "161" 67
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.10) 378.23 677.67 T
(The OLE-AUTOMATION module) 404.36 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(161) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 9.5 Q
0 X
(ole-error-status) 135 640.67 T
2 11 Q
(Returns the low-level status code.) 216 622.67 T
4 9.5 Q
(ole-error-context) 135 596.67 T
2 11 Q
(Returns the name of the function that r) 216 578.67 T
(eturned the) 404.56 578.67 T
(code.) 216 564.67 T
4 9.5 Q
(ole-error-instance) 135 538.67 T
2 11 Q
-0.02 (Returns the interface that the function was acting upon.) 216 520.67 P
4 9.5 Q
(ole-error-args) 135 494.67 T
2 11 Q
-0.36 (Returns a) 216 476.67 P
4 9.5 Q
-0.74 (<sequence>) 264.53 476.67 P
2 11 Q
-0.36 ( of additional function ar) 321.53 476.67 P
-0.36 (guments) 441.23 476.67 P
(\050not necessarily a complete list, just whatever else) 216 462.67 T
(might be inter) 216 448.67 T
(esting\051.) 284.48 448.67 T
3 12 Q
(OLE-initializ) 108 414 T
(e) 164.96 414 T
0 11 Q
(Function) 445.45 414.67 T
4 9 Q
(OLE-initialize \050\051 => \050\051) 135 394 T
2 11 Q
(Ensur) 135 373.67 T
(es that the Micr) 163.57 373.67 T
(osoft OLE/COM libraries have been initialized.) 238.72 373.67 T
(Contr) 135 359.67 T
(oller applications should call this function befor) 162.94 359.67 T
(e attempting to) 395.04 359.67 T
(connect to a server) 135 345.67 T
(. This function r) 225.07 345.67 T
(eturns no values.) 302 345.67 T
(Though it does no harm to call this function mor) 135 325.67 T
(e than once, you must) 370.74 325.67 T
(balance each call to this function by a matching call to the function) 135 311.67 T
4 9.5 Q
(OLE-) 460.57 311.67 T
(uninitialize) 135 297.67 T
2 11 Q
(.) 203.4 297.67 T
3 12 Q
(OLE-uninitializ) 108 263 T
(e) 176.99 263 T
0 11 Q
(Function) 445.45 263.67 T
4 9 Q
(OLE-uninitialize \050\051 => \050\051) 135 243 T
2 11 Q
(Releases the Micr) 135 222.67 T
(osoft OLE/COM libraries when the contr) 219.58 222.67 T
(oller is \336n-) 420.2 222.67 T
-0.16 (ished using them. Y) 135 208.67 P
-0.16 (ou should call this function only to undo a matching) 230.08 208.67 P
(call to) 135 194.67 T
4 9.5 Q
(OLE-initialize) 166.88 194.67 T
2 11 Q
(. This function r) 246.68 194.67 T
(eturns no values.) 323.61 194.67 T
(This call allows any r) 135 174.67 T
(esour) 237.71 174.67 T
(ces used by the libraries to be fr) 264.43 174.67 T
(eed, and) 417.8 174.67 T
(ensur) 135 160.67 T
(es that any pending messages ar) 162.12 160.67 T
(e handled and any open connec-) 319.12 160.67 T
(tions closed.) 135 146.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "161" 67
%%Page: "162" 68
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(162) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 12 Q
0 X
(with-OLE) 126 640 T
0 11 Q
(Macr) 475.29 640.67 T
(o) 499.12 640.67 T
4 9 Q
(with-OLE) 153 620 T
5 F
(body) 201.6 620 T
4 F
( end) 221.45 620 T
2 11 Q
(A convenience macr) 153 599.67 T
(o that calls) 251.51 599.67 T
4 9.5 Q
(OLE-initialize) 306.29 599.67 T
2 11 Q
(, executes the) 386.08 599.67 T
0 F
(body) 453.59 599.67 T
2 F
(forms, and calls) 153 585.67 T
4 9.5 Q
(OLE-uninitialize) 232.46 585.67 T
2 11 Q
( in a) 323.66 585.67 T
4 9.5 Q
(cleanup) 347.02 585.67 T
2 11 Q
( clause.) 386.92 585.67 T
3 12 Q
(make-GUID) 126 551 T
0 11 Q
(Function) 463.45 551.67 T
4 9 Q
(make-GUID) 153 531 T
5 F
(l) 207 531 T
(w1) 215.4 531 T
(w2) 232.79 531 T
(b1) 250.19 531 T
(b2) 264.92 531 T
(b3) 279.66 531 T
(b4) 294.39 531 T
(b5) 309.12 531 T
(b6) 323.86 531 T
(b7) 338.59 531 T
(b8) 353.32 531 T
4 F
( =>) 362.65 531 T
5 F
(ID) 384.26 531 T
2 11 Q
(Cr) 153 510.67 T
(eates an object r) 164.95 510.67 T
(epr) 241.93 510.67 T
(esenting a globally unique identi\336er \050GUID\051 fr) 257.96 510.67 T
(om) 483.55 510.67 T
(the hexadecimal ar) 153 496.67 T
(guments.) 244.74 496.67 T
(All Automation server applications must be r) 153 476.67 T
(egister) 373.22 476.67 T
(ed in the W) 405.47 476.67 T
(indows) 460.97 476.67 T
(r) 153 462.67 T
(egistry with a unique \050and \336xed\051 COM Class ID, so that clients can) 157.15 462.67 T
(invoke them. Class IDs ar) 153 448.67 T
(e GUIDs. T) 277.29 448.67 T
(o give your server application its) 330.38 448.67 T
(Class ID, you must generate a GUID for it.) 153 434.67 T
(Other items, such as dispatch interfaces, r) 153 414.67 T
(equir) 354.93 414.67 T
(e unique identi\336ers.) 380.34 414.67 T
(Again, you must generate a GUID for them.) 153 400.67 T
(The) 153 380.67 T
0 F
(ID) 174.16 380.67 T
2 F
( value is an instance of the class) 186.38 380.67 T
4 9.5 Q
(<REFGUID>) 342.72 380.67 T
2 11 Q
(, which has the alias) 394.02 380.67 T
4 9.5 Q
(<REFCLSID>) 153 366.67 T
2 11 Q
(. The) 210 366.67 T
4 9.5 Q
(<embeddable-frame>) 236.66 366.67 T
2 11 Q
( class\325s r) 339.26 366.67 T
(equir) 379.55 366.67 T
(ed init-keywor) 404.96 366.67 T
(d) 476.58 366.67 T
4 9.5 Q
(class-id:) 153 352.67 T
2 11 Q
( expects an object of this class.) 204.3 352.67 T
(The) 153 332.67 T
4 9.5 Q
(make-GUID) 174.16 332.67 T
2 11 Q
( function cr) 225.46 332.67 T
(eates the C str) 280.77 332.67 T
(uctur) 348.87 332.67 T
(e necessary to r) 374.76 332.67 T
(epr) 449.13 332.67 T
(esent a) 465.15 332.67 T
(GUID. However) 153 318.67 T
(, it does) 232.29 318.67 T
0 F
(not) 272.73 318.67 T
2 F
( cr) 287.4 318.67 T
(eate the unique hexadecimal values that) 299.18 318.67 T
(constitute the GUID. Y) 153 304.67 T
(ou must do that with a once-only invocation of a) 262.57 304.67 T
(special utility pr) 153 290.67 T
(ogram pr) 232.11 290.67 T
(ovided with Harlequin Dylan called) 277.3 290.67 T
4 9.5 Q
(create-) 455.92 290.67 T
(id) 153 276.67 T
2 11 Q
(.) 164.4 276.67 T
(T) 153 256.67 T
(o cr) 158.73 256.67 T
(eate a GUID value, r) 176.52 256.67 T
(un) 275.64 256.67 T
4 9.5 Q
(create-id) 291.42 256.67 T
2 11 Q
( utility at an MS-DOS pr) 342.72 256.67 T
(ompt.) 460.52 256.67 T
(The utility takes a single integer ar) 153 242.67 T
(gument, which is the number of) 320.76 242.67 T
(GUIDs to generate. \050The default is one GUID.\051) 153 228.67 T
(The utility writes the GUIDs it generates to the standar) 153 208.67 T
(d output in the) 419.6 208.67 T
(form of string literals that can be pasted into Dylan sour) 153 194.67 T
(ce code.) 425.12 194.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "162" 68
%%Page: "163" 69
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.10) 378.23 677.67 T
(The OLE-AUTOMATION module) 404.36 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(163) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(Given the following value fr) 135 640.67 T
(om) 272.33 640.67 T
4 9.5 Q
(create-id) 290.8 640.67 T
2 11 Q
(:) 342.1 640.67 T
4 9 Q
(MS-DOS> create-id) 145.8 620 T
("{113f2c00-f87b-11cf-89fd-02070119f639}") 145.8 609 T
2 11 Q
(you need to split the value into parts as follows, and for each add the) 135 590.67 T
(pr) 135 576.67 T
(e\336x #x. For example:) 145.76 576.67 T
4 9 Q
(define constant $my-class-ID =) 145.8 556 T
(make-GUID\050#x113f2c00, #xf87b, #x11cf, #x89, #xfd, #x02, #x07,) 156.6 545 T
(#x01, #x19, #xf6, #x39\051;) 210.6 534 T
2 11 Q
(See \322GUIDs: Globally Unique Identi\336ers\323 on page 96 for mor) 135 513.67 T
(e on) 432.18 513.67 T
(GUIDs and when to use) 135 499.67 T
4 9.5 Q
(make-GUID) 254.61 499.67 T
2 11 Q
(.) 305.91 499.67 T
3 12 Q
(as) 108 465 T
0 11 Q
(G.f. method) 434.37 465.67 T
4 9 Q
(as class == <string>,) 135 445 T
5 F
(GUID) 253.8 445 T
4 F
( =>) 278.31 445 T
5 F
(string) 299.91 445 T
2 11 Q
(Converts the internal r) 135 424.67 T
(epr) 244.85 424.67 T
(esentation of a GUID \050instance of) 260.87 424.67 T
4 9.5 Q
(<REFGUID>) 424.84 424.67 T
2 11 Q
(\051) 476.14 424.67 T
(to a r) 135 410.67 T
(epr) 159.74 410.67 T
(esentation as a string, by calling the Micr) 175.77 410.67 T
(osoft library function) 374.23 410.67 T
4 9.5 Q
(StringFromGUID2) 135 396.67 T
2 11 Q
(. The string has the form:) 220.5 396.67 T
4 9 Q
("{) 145.8 376 T
5 F
(xxxxxxxx) 156.6 376 T
4 F
(-) 192.6 376 T
5 F
(xxxx) 198 376 T
4 F
(-) 216 376 T
5 F
(xxxx) 221.4 376 T
4 F
(-) 239.4 376 T
5 F
(xxxx) 244.8 376 T
4 F
(-) 262.8 376 T
5 F
(xxxxxxxxxxxx) 268.2 376 T
4 F
(}") 322.2 376 T
2 11 Q
(wher) 135 355.67 T
(e each) 159.99 355.67 T
0 F
(x) 192.82 355.67 T
2 F
( is a hexadecimal digit. For example:) 198.32 355.67 T
4 9 Q
("{113f2c00-f87b-11cf-89fd-02070119f639}") 145.8 335 T
3 12 Q
(as) 108 302 T
0 11 Q
(G.f. method) 434.37 302.67 T
4 9 Q
(as class == <REFGUID>,) 135 282 T
5 F
(string) 259.2 282 T
4 F
( =>) 282.7 282 T
5 F
(GUID) 304.3 282 T
2 11 Q
-0.45 (Calls the Micr) 135 261.67 P
-0.45 (osoft library function) 201.85 261.67 P
4 9.5 Q
-0.94 (CLSIDFromString) 306.23 261.67 P
2 11 Q
-0.45 ( to convert) 391.73 261.67 P
0 F
-0.45 (string) 444.92 261.67 P
2 F
-0.45 ( to) 471.82 261.67 P
-0.37 (a GUID. The string can r) 135 247.67 P
-0.37 (epr) 252 247.67 P
-0.37 (esent the GUID in one of two forms. The \336rst) 268.03 247.67 P
(form is the standar) 135 233.67 T
(d hexadecimal string form, as follows:) 226.62 233.67 T
4 9 Q
("{) 145.8 213 T
5 F
(xxxxxxxx) 156.6 213 T
4 F
(-) 192.6 213 T
5 F
(xxxx) 198 213 T
4 F
(-) 216 213 T
5 F
(xxxx) 221.4 213 T
4 F
(-) 239.4 213 T
5 F
(xxxx) 244.8 213 T
4 F
(-) 262.8 213 T
5 F
(xxxxxxxxxxxx) 268.2 213 T
4 F
(}") 322.2 213 T
2 11 Q
(For example:) 135 192.67 T
4 9 Q
("{113f2c00-f87b-11cf-89fd-02070119f639}") 145.8 172 T
2 11 Q
(The enclosing braces ar) 135 151.67 T
(e a r) 248.2 151.67 T
(equir) 268.62 151.67 T
(ed part of the syntax; letters may be) 294.03 151.67 T
(either upper or lower case.) 135 137.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "163" 69
%%Page: "164" 70
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(164) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(The second form is as a pr) 153 640.67 T
(ogrammatic identi\336er or Pr) 279.87 640.67 T
(og ID \321 a r) 412.48 640.67 T
(egis-) 468.47 640.67 T
(ter) 153 626.67 T
(ed, unique symbolic alias for a numeric GUID. The Pr) 166 626.67 T
(og ID is looked) 426.81 626.67 T
(up in the W) 153 612.67 T
(indows r) 209.75 612.67 T
(egistry and the corr) 252.81 612.67 T
(esponding GUID is r) 347.62 612.67 T
(eturned.) 448.45 612.67 T
(This function signals an err) 153 592.67 T
(or if the string is not in the expected format) 285.2 592.67 T
(and is not found in the r) 153 578.67 T
(egistry) 270.41 578.67 T
(.) 302.49 578.67 T
(The value r) 153 558.67 T
(eturned is a C str) 207.88 558.67 T
(uctur) 290.77 558.67 T
(e pointer) 316.66 558.67 T
(, so when you ar) 359.28 558.67 T
(e \336nished) 439.35 558.67 T
(with it you must call the function) 153 544.67 T
4 9.5 Q
(destroy) 317.57 544.67 T
2 11 Q
( on it to ensur) 357.47 544.67 T
(e that the mem-) 424.37 544.67 T
(ory it uses is r) 153 530.67 T
(ecycled.) 220.5 530.67 T
3 12 Q
(cop) 126 496 T
(y-automation-v) 143.36 496 T
(alue) 213.71 496 T
4 9 Q
(copy-automation-value) 153 490 T
5 F
(object) 271.8 490 T
4 F
( =>) 296.13 490 T
5 F
(object) 317.73 490 T
2 11 Q
-0.23 (If the ar) 153 469.67 P
-0.23 (gument is an instance of) 190.32 469.67 P
4 9.5 Q
-0.47 (<BSTR>) 310 469.67 P
2 11 Q
-0.23 (,) 344.2 469.67 P
4 9.5 Q
-0.47 (<ole-vector>) 349.48 469.67 P
2 11 Q
-0.23 (, or) 417.88 469.67 P
4 9.5 Q
-0.47 (<ole-array>) 436.03 469.67 P
2 11 Q
-0.23 (,) 498.73 469.67 P
(the value r) 153 455.67 T
(eturned is a corr) 204.72 455.67 T
(esponding Dylan object that has the same) 283.94 455.67 T
(contents but does not use any C-allocated storage. For example, the con-) 153 441.67 T
-0.35 (tents of an) 153 427.67 P
4 9.5 Q
-0.72 (<ole-vector>) 205.29 427.67 P
2 11 Q
-0.35 ( would be copied into a) 273.69 427.67 P
4 9.5 Q
-0.72 (<simple-vector>) 388.58 427.67 P
2 11 Q
-0.35 (, with) 474.08 427.67 P
4 9.5 Q
(copy-automation-value) 153 413.67 T
2 11 Q
( being r) 272.7 413.67 T
(ecursively called on each element.) 309.42 413.67 T
(If the ar) 153 393.67 T
(gument is of any other type, it is r) 190.77 393.67 T
(eturned unchanged.) 354.78 393.67 T
(A dispatch method could use this method to ensur) 153 373.67 T
(e that an ar) 399.09 373.67 T
(gument) 453.23 373.67 T
-0.26 (value it has r) 153 359.67 P
-0.26 (eceived can be kept after the call r) 214.79 359.67 P
-0.26 (eturns. A contr) 377.33 359.67 P
-0.26 (oller could) 449.55 359.67 P
(use it on a pr) 153 345.67 T
(operty value or dispatch method r) 216.02 345.67 T
(esult that it r) 382.28 345.67 T
(eceives.) 443.89 345.67 T
3 12 Q
(Quer) 126 311 T
(yInterface) 149.06 311 T
0 11 Q
(Function) 463.45 311.67 T
4 9 Q
(QueryInterface) 153 291 T
5 F
(interface) 234 291 T
(interface-ID) 274.39 291 T
4 F
( =>) 323.39 291 T
5 F
(status) 344.99 291 T
(object) 375.39 291 T
2 11 Q
-0.07 (Given one) 153 270.67 P
0 F
-0.07 (interface) 205.52 270.67 P
2 F
-0.07 (, \336nd another interface supported by the server appli-) 243.61 270.67 P
(cation that has the GUID) 153 256.67 T
0 F
(interface-id) 276.4 256.67 T
2 F
(.) 326.71 256.67 T
-0.38 (This function implements the basic COM method) 153 236.67 P
4 9.5 Q
-0.78 (QueryInterface) 393.17 236.67 P
2 11 Q
-0.38 (, fr) 472.97 236.67 P
-0.38 (om) 485.91 236.67 P
(the) 153 222.67 T
4 9.5 Q
(IUnknown) 171.01 222.67 T
2 11 Q
( interface.) 216.61 222.67 T
(If the server supports an interface with the given GUID, the \336rst r) 153 202.67 T
(eturn) 471.27 202.67 T
(value fr) 153 188.67 T
(om this function \050) 190.38 188.67 T
0 F
(status) 276.64 188.67 T
2 F
(\051 will satisfy the pr) 303.52 188.67 T
(edicate) 394.37 188.67 T
4 9.5 Q
(SUCCEEDED?) 431.55 188.67 T
2 11 Q
(,) 488.55 188.67 T
(and the second value \050) 153 174.67 T
0 F
(object) 262.31 174.67 T
2 F
(\051 will be the interface that was found.) 287.76 174.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "164" 70
%%Page: "165" 71
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.10) 378.23 677.67 T
(The OLE-AUTOMATION module) 404.36 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(165) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(The \336rst value is an OLE status value, an instance of) 135 640.67 T
4 9.5 Q
(<SCODE>) 391.27 640.67 T
2 11 Q
(.  If the) 431.17 640.67 T
(server does not support an interface with the supplied GUID, the \336rst) 135 626.67 T
(r) 135 612.67 T
(eturn value will be) 139.15 612.67 T
4 9.5 Q
($E-NOINTERFACE) 233.33 612.67 T
2 11 Q
(.) 313.13 612.67 T
1 F
-0.33 (Note:) 135 592.67 P
2 F
-0.33 ( Y) 162.19 592.67 P
-0.33 (ou should call) 170.93 592.67 P
4 9.5 Q
-0.69 (Release) 241.24 592.67 P
2 11 Q
-0.33 ( on) 281.14 592.67 P
0 F
-0.33 (object) 298.38 592.67 P
2 F
-0.33 ( when you have \336nished using it.) 323.83 592.67 P
3 12 Q
(Release) 108 558 T
0 11 Q
(Function) 445.45 558.67 T
4 9 Q
(Release) 135 538 T
5 F
(interface) 178.2 538 T
4 F
( =>) 213.19 538 T
5 F
(new-r) 234.79 538 T
(ef-count) 258.13 538 T
2 11 Q
-0.18 (Releases the COM interface) 135 517.67 P
0 F
-0.18 (interface) 270.71 517.67 P
2 F
-0.18 (. This function implements the basic) 308.8 517.67 P
(COM method) 135 503.67 T
4 9.5 Q
(Release) 205.05 503.67 T
2 11 Q
(, fr) 244.95 503.67 T
(om the) 258.26 503.67 T
4 9.5 Q
(IUnknown) 294.73 503.67 T
2 11 Q
( interface.) 340.33 503.67 T
(Call this function on an interface when your Automation client is \336n-) 135 483.67 T
-0.03 (ished with it. This lets the server know that the session with the client is) 135 469.67 P
(completed. The r) 135 455.67 T
(eturn value is usually not useful.) 217.07 455.67 T
3 12 Q
(g) 108 421 T
(et-id-of-name) 114.11 421 T
0 11 Q
(Function) 445.45 421.67 T
4 9 Q
(get-id-of-name) 135 401 T
5 F
(disp-interface) 216 401 T
(name) 276.89 401 T
4 F
( #key) 298.39 401 T
5 F
(locale) 330.8 401 T
(unde\336ned-ok?) 360.19 401 T
4 F
( =>) 416.2 401 T
5 F
(disp-ID) 437.8 401 T
2 11 Q
(Returns the integer Dispatch ID \050DISPID\051 for the dispatch method or) 135 380.67 T
(pr) 135 366.67 T
(operty whose name \050for the given) 145.76 366.67 T
0 F
(locale) 312.73 366.67 T
2 F
(\051 matches the given string) 337.37 366.67 T
0 F
(name) 135 352.67 T
2 F
(. \050The match is not case-sensitive.\051) 158.84 352.67 T
(The) 135 332.67 T
0 F
(disp-interface) 156.16 332.67 T
2 F
( ar) 216.26 332.67 T
(gument is an instance of) 228.65 332.67 T
4 9.5 Q
(<LPDISPATCH>) 349.47 332.67 T
2 11 Q
(.) 417.87 332.67 T
(This function works for dispatch methods or pr) 135 312.67 T
(operties, but does not) 365.39 312.67 T
(support mapping the names of the ar) 135 298.67 T
(guments of dispatch methods.) 315.49 298.67 T
(If) 135 278.67 T
0 F
(name) 145.12 278.67 T
2 F
( is not de\336ned and) 168.96 278.67 T
0 F
(unde\336ned-ok?) 262.23 278.67 T
2 F
(is tr) 327.62 278.67 T
(ue, the function r) 346.08 278.67 T
(eturns the) 429.16 278.67 T
(integer value) 135 264.67 T
4 9.5 Q
($DISPID-UNKNOWN) 201.51 264.67 T
2 11 Q
( instead of signalling an err) 287.01 264.67 T
(or) 419.43 264.67 T
(.) 428.97 264.67 T
(The default value of) 135 244.67 T
0 F
(locale) 235.47 244.67 T
2 F
( is) 260.11 244.67 T
4 9.5 Q
($LOCALE-USER-DEFAULT) 273.48 244.67 T
2 11 Q
(. The default value) 386.67 244.67 T
(of) 135 230.67 T
0 F
(unde\336ned-ok?) 147.42 230.67 T
2 F
( is) 210.06 230.67 T
4 9.5 Q
(#f) 223.43 230.67 T
2 11 Q
(.) 234.83 230.67 T
3 12 Q
(g) 108 196 T
(et-pr) 114.11 196 T
(oper) 135.79 196 T
(ty) 157.31 196 T
0 11 Q
(Function) 445.45 196.67 T
4 9 Q
(get-property) 135 176 T
5 F
(disp-interface) 205.2 176 T
(pr) 266.09 176 T
(operty) 274.44 176 T
4 F
( #key) 300.45 176 T
5 F
(default) 332.85 176 T
(locale) 366.75 176 T
4 F
( =>) 390.74 176 T
5 F
(value) 412.34 176 T
2 11 Q
(Returns the value of a pr) 135 155.67 T
(operty of a dispatch interface.) 255 155.67 T
(The) 135 135.67 T
0 F
(disp-interface) 156.16 135.67 T
2 F
( ar) 216.26 135.67 T
(gument is an instance of) 228.65 135.67 T
4 9.5 Q
(<LPDISPATCH>) 349.47 135.67 T
2 11 Q
(.) 417.87 135.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "165" 71
%%Page: "166" 72
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(166) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(The) 153 640.67 T
0 F
(pr) 174.16 640.67 T
(operty) 183.74 640.67 T
2 F
( ar) 211.85 640.67 T
(gument is either the name of the pr) 224.25 640.67 T
(operty \050an instance of) 394.98 640.67 T
4 9.5 Q
(<string>) 153 626.67 T
2 11 Q
(\051, or the DISPID \050an) 198.6 626.67 T
4 9.5 Q
(<integer>) 296.8 626.67 T
2 11 Q
(\051. If the pr) 348.1 626.67 T
(operty will be r) 396.14 626.67 T
(efer-) 470.6 626.67 T
(enced mor) 153 612.67 T
(e than once, it is much mor) 204.16 612.67 T
(e ef) 335.28 612.67 T
(\336cient to use) 352.03 612.67 T
4 9.5 Q
(get-id-of-name) 416.44 612.67 T
2 11 Q
(to map the name to a DISPID just once.) 153 598.67 T
(If) 153 578.67 T
0 F
(pr) 163.12 578.67 T
(operty) 172.7 578.67 T
2 F
( is not supported, and the) 200.81 578.67 T
4 9.5 Q
(default:) 328.24 578.67 T
2 11 Q
( keywor) 373.84 578.67 T
(d option is speci-) 413.42 578.67 T
(\336ed, the value passed with that keywor) 153 564.67 T
(d is r) 344.66 564.67 T
(eturned. This is useful for) 368.9 564.67 T
(querying stock pr) 153 550.67 T
(operties. Otherwise, the function signals an err) 238.76 550.67 T
(or) 465.71 550.67 T
(.) 475.24 550.67 T
(The default value of) 153 530.67 T
0 F
(locale) 253.47 530.67 T
2 F
( is) 278.11 530.67 T
4 9.5 Q
($LOCALE-USER-DEFAULT) 291.48 530.67 T
2 11 Q
(.) 404.67 530.67 T
(Y) 153 510.67 T
(ou can also use this function on the left-hand side of an assignment to) 159.32 510.67 T
(set the value of a pr) 153 496.67 T
(operty) 248.27 496.67 T
(.) 278.98 496.67 T
3 12 Q
(set-pr) 126 462 T
(oper) 153.16 462 T
(ty) 174.67 462 T
0 11 Q
(Function) 463.45 462.67 T
4 9 Q
(set-property) 153 442 T
5 F
(disp-interface) 223.2 442 T
(pr) 284.09 442 T
(operty) 292.44 442 T
(new-value) 323.85 442 T
4 F
( #key) 365.85 442 T
5 F
(locale) 398.25 442 T
4 F
( => \050\051) 422.24 442 T
2 11 Q
(Sets a pr) 153 421.67 T
(operty in) 194.05 421.67 T
0 F
(disp-interface) 241.09 421.67 T
2 F
( to) 301.18 421.67 T
0 F
(new-value) 316.27 421.67 T
2 F
(. As for) 362.11 421.67 T
4 9.5 Q
(get-property) 400.35 421.67 T
2 11 Q
(, the) 468.75 421.67 T
0 F
(pr) 153 407.67 T
(operty) 162.58 407.67 T
2 F
( ar) 190.69 407.67 T
(gument is either a string name or integer DISPID, and disp-) 203.08 407.67 T
(interface is an instance of) 153 393.67 T
4 9.5 Q
(<LPDISPATCH>) 278.21 393.67 T
2 11 Q
(. The default value of) 346.61 393.67 T
0 F
(locale) 452.59 393.67 T
2 F
( is) 477.23 393.67 T
4 9.5 Q
($LOCALE-USER-DEFAULT) 153 379.67 T
2 11 Q
(. This function r) 266.19 379.67 T
(eturns no values.) 343.12 379.67 T
3 12 Q
(call-simple-method) 126 345 T
0 11 Q
(Function) 463.45 345.67 T
4 9 Q
(call-simple-method) 153 325 T
5 F
(disp-interface) 255.6 325 T
(dispatch-method) 316.49 325 T
4 F
( #rest) 384.51 325 T
5 F
(ar) 422.31 325 T
(gs) 430.65 325 T
4 F
( =>) 439.15 325 T
5 F
(r) 460.75 325 T
(esult) 464.08 325 T
2 11 Q
(This function pr) 153 304.67 T
(ovides a simple way to call a dispatch method in a dis-) 231.04 304.67 T
(patch interface.) 153 290.67 T
(This function is limited to dispatch methods that have only positional) 153 270.67 T
(ar) 153 256.67 T
(guments \050as opposed to named ar) 162.65 256.67 T
(guments\051 and which do not need to) 327.34 256.67 T
(have a locale speci\336ed.) 153 242.67 T
-0.02 (The) 153 222.67 P
0 F
-0.02 (dispatch-method) 174.15 222.67 P
2 F
-0.02 ( ar) 247.05 222.67 P
-0.02 (gument is either the name of the dispatch method) 259.43 222.67 P
(\050a) 153 208.67 T
4 9.5 Q
(<string>) 164.91 208.67 T
2 11 Q
(\051, or its DISPID \050an) 210.51 208.67 T
4 9.5 Q
(<integer>) 304.9 208.67 T
2 11 Q
(\051. If you expect to call the dis-) 356.2 208.67 T
(patch method mor) 153 194.67 T
(e than once, it is much mor) 243.05 194.67 T
(e ef) 374.17 194.67 T
(\336cient to use) 390.92 194.67 T
4 9.5 Q
(get-id-) 455.32 194.67 T
(of-name) 153 180.67 T
2 11 Q
( to map the name to a DISPID just once.) 192.9 180.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "166" 72
%%Page: "167" 73
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.10) 378.23 677.67 T
(The OLE-AUTOMATION module) 404.36 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(167) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 12 Q
0 X
(create-dispatc) 108 640 T
(h) 174.64 640 T
0 11 Q
(Function) 445.45 640.67 T
4 9 Q
(create-dispatch) 135 620 T
5 F
(class-ID) 221.4 620 T
4 F
( #key) 255.39 620 T
5 F
(context) 287.79 620 T
(interface-ID) 322.7 620 T
4 F
( =>) 371.69 620 T
5 F
(disp-interface) 393.29 620 T
2 11 Q
(Invokes or connects to an Automation server) 135 599.67 T
(, as speci\336ed by its COM) 352.3 599.67 T
0 F
(class-ID) 135 585.67 T
2 F
(. This is a function for use by Automation contr) 171.86 585.67 T
(ollers.) 401.51 585.67 T
(Normally) 135 565.67 T
(, the server) 181 565.67 T
(\325s primary dispatch interface is r) 235.43 565.67 T
(eturned, but you) 392.43 565.67 T
(can use the) 135 551.67 T
0 F
(interface-ID) 191.86 551.67 T
2 F
( option to select speci\336c interface.) 245.84 551.67 T
(Y) 135 531.67 T
(ou should call) 141.32 531.67 T
4 9.5 Q
(Release) 212.63 531.67 T
2 11 Q
( on the r) 252.53 531.67 T
(eturned interface when \336nished using) 292.59 531.67 T
(it.) 135 517.67 T
(The) 135 497.67 T
0 F
(class-id) 156.16 497.67 T
2 F
( ar) 189.36 497.67 T
(gument and) 201.76 497.67 T
0 F
(interface-ID) 263.6 497.67 T
2 F
( option may be either an instance) 317.58 497.67 T
-0.24 (of) 135 483.67 P
4 9.5 Q
-0.49 (<REFCLSID>) 147.18 483.67 P
2 11 Q
-0.24 ( \050such as r) 204.18 483.67 P
-0.24 (eturned by) 252.28 483.67 P
4 9.5 Q
-0.49 (make-GUID) 307.73 483.67 P
2 11 Q
-0.24 (\051 or a string of 32 hexadec-) 359.03 483.67 P
(imal digits in the following format) 135 469.67 T
4 9 Q
("{) 145.8 449 T
5 F
(xxxxxxxx) 156.6 449 T
4 F
(-) 192.6 449 T
5 F
(xxxx) 198 449 T
4 F
(-) 216 449 T
5 F
(xxxx) 221.4 449 T
4 F
(-) 239.4 449 T
5 F
(xxxx) 244.8 449 T
4 F
(-) 262.8 449 T
5 F
(xxxxxxxxxxxx) 268.2 449 T
4 F
(}") 322.2 449 T
2 11 Q
(That is, wher) 135 428.67 T
(e each) 198.34 428.67 T
0 F
(x) 231.16 428.67 T
2 F
( is a hexadecimal digit. For example:) 236.66 428.67 T
4 9 Q
("{e90f09e0-43db-11d0-8a04-02070119f639}") 145.8 408 T
2 11 Q
-0.16 (The) 135 387.67 P
0 F
-0.16 (context) 156 387.67 P
2 F
-0.16 ( option takes one of the following values, constraining which) 188.59 387.67 P
(implementation of the server to use:) 135 373.67 T
4 9.5 Q
($CLSCTX-INPROC-SERVER) 135 347.67 T
2 11 Q
(An in-pr) 216 329.67 T
(ocess server \050DLL r) 257.73 329.67 T
(unning in the container) 351.45 329.67 T
(\325s) 466.13 329.67 T
(pr) 216 315.67 T
(ocess\051.) 226.76 315.67 T
4 9.5 Q
($CLSCTX-LOCAL-SERVER) 135 289.67 T
2 11 Q
(A server r) 216 271.67 T
(unning in its own pr) 264.42 271.67 T
(ocess \050EXE \336le\051.) 363.97 271.67 T
4 9.5 Q
($CLSCTX-REMOTE-SERVER) 135 245.67 T
2 11 Q
(Server r) 216 227.67 T
(unning on a r) 254.23 227.67 T
(emote machine.) 319.69 227.67 T
4 9.5 Q
($CLSCTX-SERVER) 135 201.67 T
2 11 Q
(Any of the above.) 216 183.67 T
4 9.5 Q
($CLSCTX-INPROC-HANDLER) 135 157.67 T
2 11 Q
(An in-pr) 216 139.67 T
(ocess handler) 257.73 139.67 T
(.) 323 139.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "167" 73
%%Page: "168" 74
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(168) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 9.5 Q
0 X
($CLSCTX-ALL) 153 640.67 T
2 11 Q
(Any of the above. This is the default value.) 234 622.67 T
-0.17 (If the Class ID is not found in the W) 153 602.67 P
-0.17 (indows r) 325.41 602.67 P
-0.17 (egistry) 368.3 602.67 P
-0.17 (, or ther) 400.38 602.67 P
-0.17 (e is no server) 438.04 602.67 P
(that matches the r) 153 588.67 T
(equested) 239.75 588.67 T
0 F
(context) 286.07 588.67 T
2 F
(, the function will signal an) 318.65 588.67 T
4 9.5 Q
(<ole-) 453.7 588.67 T
(error>) 153 574.67 T
2 11 Q
(, with status code of) 187.2 574.67 T
4 9.5 Q
($REGDB-E-CLASSNOTREG) 287.24 574.67 T
2 11 Q
(.) 401.24 574.67 T
(If an interface matching the) 153 554.67 T
0 F
(interface-ID) 289.2 554.67 T
2 F
( is not found, the function will) 343.18 554.67 T
(signal an) 153 540.67 T
4 9.5 Q
(<ole-error>) 199.49 540.67 T
2 11 Q
( with status code) 262.19 540.67 T
4 9.5 Q
($E-NOINTERFACE) 347.06 540.67 T
2 11 Q
(.) 426.86 540.67 T
3 12 Q
(make-object-factor) 126 506 T
(y) 214.13 506 T
0 11 Q
(Function) 463.45 506.67 T
4 9 Q
(make-object-factory) 153 486 T
5 F
(typeinfo) 261 486 T
4 F
( #rest) 294.51 486 T
5 F
(other-ar) 332.31 486 T
(gs) 365.16 486 T
4 F
( =>) 373.65 486 T
5 F
(factory) 395.25 486 T
2 11 Q
(Cr) 153 465.67 T
(eates, r) 164.95 465.67 T
(egisters, and r) 198.88 465.67 T
(eturns a COM class factory for the COM object) 267.02 465.67 T
(described by the given coclass type information,) 153 451.67 T
0 F
(typeinfo) 390.23 451.67 T
2 F
(. Automation) 426.28 451.67 T
(servers should use this function to facilitate r) 153 437.67 T
(epeated instantiations of) 371.17 437.67 T
(the COM objects they support.) 153 423.67 T
(The additional ar) 153 403.67 T
(guments ar) 236.6 403.67 T
(e used as initialization keywor) 291.38 403.67 T
(ds for either) 439.62 403.67 T
(the instance of) 153 389.67 T
4 9.5 Q
(<class-factory>) 226.08 389.67 T
2 11 Q
( or the COM object implementation) 311.58 389.67 T
(class.) 153 375.67 T
-0.48 (Y) 153 355.67 P
-0.48 (ou must call) 159.32 355.67 P
4 9.5 Q
-0.99 (revoke-registration) 220.17 355.67 P
2 11 Q
-0.48 ( on the r) 328.47 355.67 P
-0.48 (eturned) 367.1 355.67 P
0 F
-0.48 (factory) 407.6 355.67 P
2 F
-0.48 ( object befor) 438.34 355.67 P
-0.48 (e) 496.46 355.67 P
(your pr) 153 341.67 T
(ogram terminates.) 189.61 341.67 T
-0.34 (See Section 4.3.5 on page 132 for mor) 153 321.67 P
-0.34 (e information about the r) 329.58 321.67 P
-0.34 (ole of class) 449.72 321.67 P
(factories in OLE Automation.) 153 307.67 T
3 12 Q
(re) 126 273 T
(v) 135.17 273 T
(oke-registration) 140.35 273 T
0 11 Q
(Function) 463.45 273.67 T
4 9 Q
(revoke-registration) 153 253 T
5 F
(factory) 261 253 T
4 F
( => \050\051) 290.01 253 T
2 11 Q
(Unr) 153 232.67 T
(egisters a COM class factory) 172.11 232.67 T
(, making it no longer available to poten-) 308.36 232.67 T
(tial contr) 153 218.67 T
(oller clients. This function r) 196.26 218.67 T
(eturns no values.) 329.18 218.67 T
-0.19 (This function does nothing if the ar) 153 198.67 P
-0.19 (gument is) 322.7 198.67 P
4 9.5 Q
-0.39 (#f) 373.4 198.67 P
2 11 Q
-0.19 ( or) 384.8 198.67 P
4 9.5 Q
-0.39 ($null-interface) 400.28 198.67 P
2 11 Q
-0.19 (, or) 485.78 198.67 P
(if it has alr) 153 184.67 T
(eady been called on the same factory instance.) 204.32 184.67 T
(See Section 4.3.5 on page 132 for a description of the r) 153 164.67 T
(ole of class facto-) 412.57 164.67 T
(ries in OLE Automation.) 153 150.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "168" 74
%%Page: "169" 75
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.10) 378.23 677.67 T
(The OLE-AUTOMATION module) 404.36 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(169) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 12 Q
0 X
(with-c) 108 640 T
(lass-factor) 136.25 640 T
(y) 186.11 640 T
0 11 Q
(Macr) 457.29 640.67 T
(o) 481.12 640.67 T
4 9 Q
(with-class-factory \050) 135 620 T
5 F
(ar) 243 620 T
(gs) 251.34 620 T
4 F
(\051) 259.84 620 T
5 F
(body) 145.8 609 T
4 F
(end) 135 598 T
2 11 Q
(This convenience macr) 135 577.67 T
(o calls) 245.96 577.67 T
4 9.5 Q
(make) 278.91 577.67 T
2 11 Q
( on) 301.71 577.67 T
4 9.5 Q
(<class-factory>) 319.62 577.67 T
2 11 Q
(, with the given) 405.12 577.67 T
(initialization keywor) 135 563.67 T
(d ar) 236.27 563.67 T
(guments, then executes the) 255.38 563.67 T
0 F
(body) 389.68 563.67 T
2 F
( forms, and) 410.66 563.67 T
(\336nally calls) 135 549.67 T
4 9.5 Q
(revoke-registration) 193.02 549.67 T
2 11 Q
( a cleanup clause.) 301.33 549.67 T
(See Section 4.3.5 on page 132 for a description of the r) 135 529.67 T
(ole of class facto-) 394.57 529.67 T
(ries in OLE Automation.) 135 515.67 T
3 12 Q
(ole-err) 108 481 T
(or) 138.44 481 T
0 11 Q
(Function) 445.45 481.67 T
4 9 Q
(ole-error) 135 461 T
5 F
(status) 189 461 T
(context) 219.4 461 T
(instance) 254.3 461 T
4 F
( #rest) 287.8 461 T
5 F
(ar) 325.6 461 T
(gs) 333.95 461 T
4 F
( =>) 342.44 461 T
2 11 Q
(Signals an) 135 440.67 T
4 9.5 Q
(<ole-error>) 187.26 440.67 T
2 11 Q
( with the speci\336ed parameters.) 249.96 440.67 T
(The) 135 420.67 T
0 F
(context) 156.16 420.67 T
2 F
( ar) 188.75 420.67 T
(gument is intended to be the name of the function that) 201.14 420.67 T
(r) 135 406.67 T
(eturned the status code \050) 139.15 406.67 T
0 F
(status) 258.8 406.67 T
2 F
(, an instance of) 285.69 406.67 T
4 9.5 Q
(<SCODE>) 360.92 406.67 T
2 11 Q
(\051; the) 400.82 406.67 T
0 F
(instance) 427.99 406.67 T
2 F
-0.29 (ar) 135 392.67 P
-0.29 (gument is the interface the function was operating on; and you can list) 144.65 392.67 P
(r) 135 378.67 T
(elevant function ar) 139.15 378.67 T
(guments for information purposes by passing them) 230.51 378.67 T
(as) 135 364.67 T
0 F
(ar) 147.91 364.67 T
(gs) 156.88 364.67 T
2 F
(.) 166.66 364.67 T
3 12 Q
(c) 108 330 T
(hec) 113.39 330 T
(k-ole-status) 130.16 330 T
0 11 Q
(Function) 445.45 330.67 T
4 9 Q
(check-ole-status) 135 310 T
5 F
(status) 226.8 310 T
(context) 257.2 310 T
(instance) 292.1 310 T
4 F
( #rest) 325.6 310 T
5 F
(ar) 363.4 310 T
(gs) 371.74 310 T
4 F
( => \050\051) 380.24 310 T
2 11 Q
(Calls) 135 289.67 T
4 9.5 Q
(ole-error) 162.12 289.67 T
2 11 Q
( to signal an err) 213.41 289.67 T
(or condition, if) 288.75 289.67 T
0 F
(status) 363.38 289.67 T
2 F
( indicates an err) 390.26 289.67 T
(or) 467.6 289.67 T
(.) 477.14 289.67 T
(This function r) 135 275.67 T
(eturns no values.) 206.43 275.67 T
(The ar) 135 255.67 T
(guments for this function as the same as those for) 165.81 255.67 T
4 9.5 Q
(ole-error) 409.01 255.67 T
2 11 Q
(.) 460.31 255.67 T
3 12 Q
(ole-arra) 108 221 T
(y-type) 143.92 221 T
0 11 Q
(Function) 445.45 221.67 T
4 9 Q
(ole-array-type) 135 201 T
5 F
(element-type) 216 201 T
4 F
( =>) 267.99 201 T
5 F
(array-type-description) 289.59 201 T
2 11 Q
(Cr) 135 180.67 T
(eates and r) 146.95 180.67 T
(eturns a pseudo-type used to specify array types for the) 199.5 180.67 T
4 9.5 Q
(type:) 135 166.67 T
2 11 Q
(,) 163.5 166.67 T
4 9.5 Q
(argument-types:) 169 166.67 T
2 11 Q
( or) 254.5 166.67 T
4 9.5 Q
(result-type:) 270.35 166.67 T
2 11 Q
( options when cr) 338.75 166.67 T
(eating a type) 419.76 166.67 T
(information instance \050an instance of) 135 152.67 T
4 9.5 Q
(<disp-type-info>) 311.83 152.67 T
2 11 Q
(\051.) 403.02 152.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "169" 75
%%Page: "170" 76
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(170) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(The ar) 153 640.67 T
(gument is the type descriptor \050C type or Dylan class\051 of the ele-) 183.81 640.67 T
-0.25 (ments of the array) 153 626.67 P
-0.25 (. If the ar) 239.65 626.67 P
-0.25 (gument is) 282.18 626.67 P
4 9.5 Q
-0.51 (<VARIANT>) 332.77 626.67 P
2 11 Q
-0.25 ( or) 384.07 626.67 P
4 9.5 Q
-0.51 (<object>) 399.42 626.67 P
2 11 Q
-0.25 (, a heter) 445.02 626.67 P
-0.25 (oge-) 482.95 626.67 P
(neous array is indicated, in which each element carries its own type) 153 612.67 T
(information at r) 153 598.67 T
(un time.) 229.87 598.67 T
3 12 Q
(HRESUL) 126 564 T
(T) 165.58 564 T
(-FR) 170.42 564 T
(OM-WIN32) 186.64 564 T
0 11 Q
(Function) 463.45 564.67 T
4 9 Q
(HRESULT-FROM-WIN32) 153 544 T
5 F
(err) 255.6 544 T
(or-code) 266.44 544 T
4 F
( =>) 296.44 544 T
5 F
(status) 318.04 544 T
2 11 Q
(Given an integer W) 153 523.67 T
(indows err) 247.21 523.67 T
(or code, such as r) 299.89 523.67 T
(eturned by W) 383.77 523.67 T
(indows) 450.09 523.67 T
(function) 153 509.67 T
4 9.5 Q
(GetLastError) 196.53 509.67 T
2 11 Q
(, r) 264.11 509.67 T
(eturn the corr) 273.76 509.67 T
(esponding) 340.13 509.67 T
4 9.5 Q
(<SCODE>) 394.28 509.67 T
2 11 Q
( value.) 434.18 509.67 T
3 12 Q
(OLE-util-automation?) 126 475 T
0 11 Q
(Function) 463.45 475.67 T
4 9 Q
(OLE-util-automation? \050\051 =>) 153 455 T
5 F
(automation?) 298.8 455 T
2 11 Q
-0.46 (Returns) 153 434.67 P
4 9.5 Q
-0.96 (#t) 193.53 434.67 P
2 11 Q
-0.46 ( if the application was invoked with the command-line option) 204.93 434.67 P
4 9.5 Q
(/Automation) 153 420.67 T
2 11 Q
( \050case-insensitive\051, indicating that execution was initiated) 215.7 420.67 T
-0.42 (by an Automation contr) 153 406.67 P
-0.42 (oller client, as opposed to being invoked dir) 268.3 406.67 P
-0.42 (ectly) 478.62 406.67 P
(by a user) 153 392.67 T
(.) 196.3 392.67 T
(Y) 153 372.67 T
(our application might want to make a class factory) 159.32 372.67 T
0 F
(only) 408.14 372.67 T
2 F
( if this is tr) 427.7 372.67 T
(ue.) 479.13 372.67 T
(For example:) 153 358.67 T
4 9 Q
(\311) 153 338 T
(let factory = #f;) 153 327 T
(if \050 OLE-util-automation?\050\051 \051) 153 316 T
(factory := make\050<class-factory>, \311\051;) 163.8 305 T
(end if;) 153 294 T
(\311 // body of program) 153 275 T
(revoke-registration\050factory\051; // does nothing if argument is #f) 153 256 T
(\311) 153 245 T
3 12 Q
(OLE-util-\336le-ar) 126 212 T
(g) 194.21 212 T
0 11 Q
(Function) 463.45 212.67 T
4 9 Q
(OLE-util-file-arg \050\051 =>) 153 192 T
5 F
(\336le-name) 282.6 192 T
4 F
( :: false-or\050<string>\051) 320.09 192 T
2 11 Q
(This convenience function can be used by applications that want to) 153 171.67 T
(accept a single \336le name as a command line ar) 153 157.67 T
(gument.  If such an ar) 377.17 157.67 T
(gu-) 482.89 157.67 T
(ment has been supplied, it will be r) 153 143.67 T
(eturned as a string.) 323.53 143.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "170" 76
%%Page: "171" 77
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.10) 378.23 677.67 T
(The OLE-AUTOMATION module) 404.36 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(171) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 12 Q
0 X
(OLE-util-register) 108 640 T
(-onl) 185.46 640 T
(y?) 203.36 640 T
0 11 Q
(Function) 135 634 T
4 9 Q
(OLE-util-register-only? \050\051 =>) 175.55 634 T
5 F
(r) 337.55 634 T
(egister?) 340.89 634 T
2 11 Q
(Returns) 135 613.67 T
4 9.5 Q
(#f) 176 613.67 T
2 11 Q
( unless the application\325s \336rst command-line ar) 187.4 613.67 T
(gument is any) 411.98 613.67 T
(of) 135 599.67 T
4 9.5 Q
(/RegServer) 147.42 599.67 T
2 11 Q
(,) 203.6 599.67 T
4 9.5 Q
(-RegServer) 209.1 599.67 T
2 11 Q
(,) 265.29 599.67 T
4 9.5 Q
(/UnregServer) 270.79 599.67 T
2 11 Q
( or) 339.19 599.67 T
4 9.5 Q
(-UnregServer) 355.04 599.67 T
2 11 Q
(. The com-) 422.63 599.67 T
(parison of the command-line ar) 135 585.67 T
(guments with these strings is not case-) 287.98 585.67 T
(sensitive.) 135 571.67 T
-0.02 (If the r) 135 551.67 P
-0.02 (esult is not false, the server application should just call) 167.23 551.67 P
4 9.5 Q
-0.05 (register-) 434.7 551.67 P
(automation-server) 135 537.67 T
2 11 Q
( and exit without doing anything else.) 231.9 537.67 T
3 12 Q
(register) 108 503 T
(-automation-ser) 143.92 503 T
(ver) 218.36 503 T
0 11 Q
(Function) 445.45 503.67 T
4 9 Q
(register-automation-server) 135 483 T
5 F
(class-ID) 280.8 483 T
(pr) 320.19 483 T
(og-ID) 328.54 483 T
(title-string) 357.44 483 T
4 F
(#key) 280.8 472 T
5 F
(versioned-pr) 307.8 472 T
(og-ID) 358.15 472 T
(versioned-title) 387.05 472 T
4 F
( => \050\051) 446.05 472 T
2 11 Q
(If the application was invoked with the command-line ar) 135 451.67 T
(gument) 411.54 451.67 T
4 9.5 Q
(/RegServer) 135 437.67 T
2 11 Q
( or) 192 437.67 T
4 9.5 Q
(-RegServer) 207.85 437.67 T
2 11 Q
(, this function cr) 264.04 437.67 T
(eates the W) 342.7 437.67 T
(indows r) 398.14 437.67 T
(egistry) 441.2 437.67 T
(entries necessary for the curr) 135 423.67 T
(ent application to be invoked by an Auto-) 275.13 423.67 T
(mation contr) 135 409.67 T
(oller) 197.18 409.67 T
(. If the application was invoked with) 218.39 409.67 T
4 9.5 Q
(/UnregServer) 399.35 409.67 T
2 11 Q
( or) 467.75 409.67 T
4 9.5 Q
(-UnregServer) 135 395.67 T
2 11 Q
(, this function attempts to delete any r) 202.59 395.67 T
(egistry entries) 386.8 395.67 T
(belonging to the application.) 135 381.67 T
(This function r) 135 361.67 T
(eturns no values.) 206.43 361.67 T
(The) 135 341.67 T
0 F
(class-ID) 156.16 341.67 T
2 F
( ar) 193.02 341.67 T
(gument must be the same value as passed as the) 205.42 341.67 T
4 9.5 Q
(clsid:) 442.82 341.67 T
2 11 Q
(ar) 135 327.67 T
(gument to) 144.65 327.67 T
4 9.5 Q
(make) 197.46 327.67 T
2 11 Q
( on) 220.26 327.67 T
4 9.5 Q
(<class-factory>) 238.17 327.67 T
2 11 Q
(, or as the) 323.67 327.67 T
4 9.5 Q
(uuid:) 373.19 327.67 T
2 11 Q
( ar) 401.69 327.67 T
(gument to) 414.08 327.67 T
4 9.5 Q
(make) 135 313.67 T
2 11 Q
( on) 157.8 313.67 T
4 9.5 Q
(<coclass-type-info>) 175.71 313.67 T
2 11 Q
(.) 284.01 313.67 T
(Note that if you want to be able to have two versions of a pr) 135 293.67 T
(ogram) 426.29 293.67 T
(installed at the same time, then both versions must have dif) 135 279.67 T
(fer) 424.12 279.67 T
(ent Class) 437.2 279.67 T
(IDs, and you must also specify a) 135 265.67 T
4 9.5 Q
(versioned-prog-id:) 295.14 265.67 T
2 11 Q
( for each.) 397.74 265.67 T
(The) 135 245.67 T
0 F
(pr) 156.16 245.67 T
(og-id) 165.74 245.67 T
2 F
( ar) 188.35 245.67 T
(gument must be the class\325s pr) 200.75 245.67 T
(ogrammatic identi\336er or) 344.81 245.67 T
-0.26 (Pr) 135 231.67 P
-0.26 (og ID. A Pr) 145.79 231.67 P
-0.26 (og ID is a unique symbolic alias for a numeric GUID, r) 199.7 231.67 P
-0.26 (epr) 461.04 231.67 P
-0.26 (e-) 477.07 231.67 P
(sented by a string. \050Pr) 135 217.67 T
(og IDs allow a server to be used by V) 241.13 217.67 T
(isual Basic) 421.34 217.67 T
(and ar) 135 203.67 T
(e also r) 166.02 203.67 T
(equir) 200.31 203.67 T
(ed for compatibility with OLE1.\051 A Pr) 225.72 203.67 T
(og ID must) 408.82 203.67 T
(begin with a letter; it cannot contain any spaces or punctuation except) 135 189.67 T
-0.06 (the period \050.\051 character) 135 175.67 P
-0.06 (, and it must not be mor) 244.45 175.67 P
-0.06 (e than 39 characters long.) 360.55 175.67 P
(In or) 135 161.67 T
(der to ensur) 158.01 161.67 T
(e uniqueness, the r) 216.55 161.67 T
(ecommended format is:) 307.52 161.67 T
4 9 Q
(<) 145.8 141 T
5 F
(vendor-name) 151.2 141 T
4 F
(>.<) 203.71 141 T
5 F
(pr) 219.91 141 T
(oduct-name) 228.26 141 T
4 F
(>) 275.77 141 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "171" 77
%%Page: "172" 78
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(172) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(For example:) 153 640.67 T
4 9 Q
(AcmeWidgets.FrobMaster) 163.8 620 T
2 11 Q
-0.4 (The) 153 599.67 P
0 F
-0.4 (title-string) 173.76 599.67 P
2 F
-0.4 ( identi\336es the pr) 222.04 599.67 P
-0.4 (ogram in displays to its user) 300.08 599.67 P
-0.4 (. It should not) 434.93 599.67 P
(include the version number) 153 585.67 T
(.) 286.55 585.67 T
(The optional) 153 565.67 T
0 F
(versioned-pr) 217.43 565.67 T
(og-id) 272.85 565.67 T
2 F
( must be either) 295.45 565.67 T
4 9.5 Q
(#f) 370.47 565.67 T
2 11 Q
( or a string. W) 381.87 565.67 T
(e r) 449.77 565.67 T
(ecom-) 461.94 565.67 T
(mend that it be the same as the) 153 551.67 T
0 F
(pr) 306.14 551.67 T
(og-ID) 315.72 551.67 T
2 F
(, with a version identi\336cation) 341.99 551.67 T
(appended. For example:) 153 537.67 T
4 9 Q
(AcmeWidgets.FrobMaster.2.1) 163.8 517 T
2 11 Q
(The optional) 153 496.67 T
0 F
(versioned-title) 217.43 496.67 T
2 F
( must be either) 280.98 496.67 T
4 9.5 Q
(#f) 356.01 496.67 T
2 11 Q
(, or a title string that) 367.4 496.67 T
(includes the pr) 153 482.67 T
(ogram\325s version number) 225.49 482.67 T
(.) 344.12 482.67 T
3 12 Q
(register) 126 448 T
(-type-librar) 161.92 448 T
(y) 213.41 448 T
0 11 Q
(Function) 463.45 448.67 T
4 9 Q
(register-type-library) 153 428 T
5 F
(typeinfo) 271.8 428 T
4 F
( :: <ITypeInfo> \051 => \050\051) 305.31 428 T
2 11 Q
(Cr) 153 407.67 T
(eates an OLE/COM) 164.95 407.67 T
0 F
(type library) 264.99 407.67 T
2 F
( \336le fr) 316.83 407.67 T
(om the given type information) 345.27 407.67 T
(and r) 153 393.67 T
(ecor) 178.52 393.67 T
(ds it in W) 198.83 393.67 T
(indows r) 245.25 393.67 T
(egistry) 288.31 393.67 T
(, associating it with this Automation) 320.39 393.67 T
(server) 153 379.67 T
(. \050If the type library alr) 182.29 379.67 T
(eady exists and is alr) 292.3 379.67 T
(eady r) 393.31 379.67 T
(egister) 423.81 379.67 T
(ed, this) 456.06 379.67 T
(function will not cr) 153 365.67 T
(eate and r) 245.83 365.67 T
(egister it again.\051) 293.72 365.67 T
(If the server was invoked with the command line option) 153 345.67 T
4 9.5 Q
(/UnregServer) 428.95 345.67 T
2 11 Q
(or) 153 331.67 T
4 9.5 Q
(-UnregServer) 166.1 331.67 T
2 11 Q
(, this function attempts to delete the type library fr) 233.69 331.67 T
(om) 478.68 331.67 T
(the r) 153 317.67 T
(egistry) 175.15 317.67 T
(.) 207.23 317.67 T
(This function r) 153 297.67 T
(eturns no values.) 224.43 297.67 T
-0.01 (The type library \336le that is cr) 153 277.67 P
-0.01 (eated is placed in the same dir) 293.29 277.67 P
-0.01 (ectory as the) 440.17 277.67 P
(server \050) 153 263.67 T
4 9.5 Q
(.EXE) 189.52 263.67 T
2 11 Q
(\051 \336le, and will have the same name but with the extension) 212.32 263.67 T
4 9.5 Q
(.TLB) 153 249.67 T
2 11 Q
(.) 175.8 249.67 T
(Automation contr) 153 229.67 T
(ollers and other utilities can use the type library to) 239.97 229.67 T
(\336nd out what facilities ar) 153 215.67 T
(e pr) 274.68 215.67 T
(ovided by the Automation server the type) 293.46 215.67 T
(library describes, without actually executing the server) 153 201.67 T
(.) 418.94 201.67 T
(It is not mandatory to cr) 153 181.67 T
(eate and r) 270.41 181.67 T
(egister a type library for your Auto-) 318.31 181.67 T
(mation server) 153 167.67 T
(, since the server itself does not use it, and an Automation) 219.45 167.67 T
(contr) 153 153.67 T
(oller does not necessarily need it either) 178.02 153.67 T
(. If a potential contr) 366.42 153.67 T
(oller) 461.43 153.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "172" 78
%%Page: "173" 79
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.11) 389.06 677.67 T
(Low-level OLE Automation API) 415.19 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(173) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(r) 135 640.67 T
(equests the type library) 139.15 640.67 T
(, it will use the r) 252.05 640.67 T
(egister) 330.08 640.67 T
(ed one if it exists, or else) 362.34 640.67 T
(for) 135 626.67 T
(ce the type library to be cr) 148.82 626.67 T
(eated and r) 275.07 626.67 T
(egister) 329.69 626.67 T
(ed dynamically) 361.94 626.67 T
(.) 436.02 626.67 T
-0.12 (Normally the ar) 135 606.67 P
-0.12 (gument should be an instance of) 212.38 606.67 P
4 9.5 Q
-0.25 (<coclass-type-info>) 372.32 606.67 P
2 11 Q
-0.12 (,) 480.62 606.67 P
(although if ther) 135 592.67 T
(e is just a single dispatch interface, it is also possible to) 210.61 592.67 T
(pass an instance of) 135 578.67 T
4 9.5 Q
(<disp-type-info>) 228.92 578.67 T
2 11 Q
( pr) 320.12 578.67 T
(ovided it was cr) 333.63 578.67 T
(eated with a) 411.17 578.67 T
(unique) 135 564.67 T
4 9.5 Q
(uuid:) 172.05 564.67 T
2 11 Q
( ar) 200.55 564.67 T
(gument \050not just) 212.95 564.67 T
4 9.5 Q
($IID-IDispatch) 296.03 564.67 T
2 11 Q
(\051; it will then act as) 375.83 564.67 T
(both an Interface ID and a Class ID.) 135 550.67 T
(The type library can be identi\336ed by its version number and locale as) 135 530.67 T
-0.31 (well as its Class ID \050type info options) 135 516.67 P
4 9.5 Q
-0.64 (major-version:) 316.02 516.67 P
2 11 Q
-0.31 (,) 395.82 516.67 P
4 9.5 Q
-0.64 (minor-version:) 401.01 516.67 P
2 11 Q
-0.31 (,) 480.81 516.67 P
4 9.5 Q
-0.11 (locale:) 135 502.67 P
2 11 Q
-0.05 (, and) 174.9 502.67 P
4 9.5 Q
-0.11 (uuid:) 201.66 502.67 P
2 11 Q
-0.05 (, r) 230.16 502.67 P
-0.05 (espectively\051 so dif) 239.76 502.67 P
-0.05 (fer) 327.15 502.67 P
-0.05 (ent versions of an application) 340.23 502.67 P
-0.02 (can be installed at the same time, and one application can r) 135 488.67 P
-0.02 (egister multi-) 420.83 488.67 P
(ple type libraries with dif) 135 474.67 T
(fer) 258.22 474.67 T
(ent locales \050but the same Class ID, version,) 271.3 474.67 T
(and help dir) 135 460.67 T
(ectory\051. \050However) 194.68 460.67 T
(, ther) 282.32 460.67 T
(e will still be only one call to) 307.23 460.67 T
4 9.5 Q
(make-) 448.26 460.67 T
(object-factory) 135 446.67 T
2 11 Q
(, since it does not depend on the locale.\051) 214.8 446.67 T
3 16 Q
(4.11  Lo) 108 411.33 T
(w-le) 156.69 411.33 T
(vel OLE A) 182.03 411.33 T
(utomation API) 243.63 411.33 T
2 11 Q
(Besides the high-level utilities described above, the OLE-Automation library) 108 390.67 T
(also pr) 108 376.67 T
(ovides a C-FFI interface to the Micr) 140.88 376.67 T
(osoft OLE Automation API, as) 311.96 376.67 T
(exposed thr) 108 362.67 T
(ough) 165.1 362.67 T
4 9.5 Q
(OLEAUTO.H) 193.01 362.67 T
2 11 Q
(,) 244.31 362.67 T
4 9.5 Q
(OLEAUT32.LIB) 249.81 362.67 T
2 11 Q
(, and) 318.21 362.67 T
4 9.5 Q
(OLEAUT32.DLL) 345.08 362.67 T
2 11 Q
(.) 413.48 362.67 T
(Note that the following names fr) 108 342.67 T
(om the Micr) 266.41 342.67 T
(osoft OLE Automation API) 325.52 342.67 T
(names ar) 108 328.67 T
(e not supported, because they ar) 151.95 328.67 T
(e consider) 309.48 328.67 T
(ed obsolete:) 358.79 328.67 T
4 9 Q
(INTERFACEDATA, METHODDATA, PARAMDATA, CreateDispTypeInfo) 135 308 T
2 11 Q
-0.42 (See Chapter 6,  \322OLE FFI Facilities\323, for details of the corr) 108 287.67 P
-0.42 (espondence between) 382.79 287.67 P
(the C/C++ names in the Micr) 108 273.67 T
(osoft OLE documentation and Dylan names in) 251.65 273.67 T
(the Harlequin Dylan OLE/COM FFI libraries.) 108 259.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "173" 79
%%Page: "174" 80
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE Automation) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(174) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "174" 80
%%Page: "185" 81
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 540 117 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(185) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 513 504 648 R
7 X
V
2 30 Q
0 X
(5) 180 628 T
108 586.45 504 614 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 586.45 504 614 R
7 X
0 0 0 1 0 0 0 K
V
108 607.14 270 607.14 2 L
V
3 H
2 Z
0 X
N
108 598.14 270 598.14 2 L
7 X
V
1 H
0 X
N
36 72 576 720 C
0 0 0 0 1 1 1 K
2 2 Q
7 X
(5) 108 566.45 T
0 0 0 1 0 0 0 K
2 30 Q
0 X
0 0 0 1 0 0 0 K
(The OLE-Server and OLE-) 109 566.45 T
(Contr) 108 528.45 T
(ol-Framework Libraries) 184.2 528.45 T
108 126 486 432 R
7 X
V
3 16 Q
0 X
(5.1  Intr) 108 421.33 T
(oduction) 154.43 421.33 T
2 11 Q
(This document describes the facilities of the OLE-Server and OLE-Contr) 108 400.67 T
(ol-) 457.91 400.67 T
(Framework libraries.) 108 386.67 T
(Y) 108 366.67 T
(ou should use these libraries if you want to write either an OLE compound) 114.32 366.67 T
-0.29 (document server application or an OLE contr) 108 352.67 P
-0.29 (ol but you do) 326.14 352.67 P
0 F
-0.29 (not) 392.97 352.67 P
2 F
-0.29 ( want to use the) 407.63 352.67 P
(DUIM library to de\336ne its graphical user interface.) 108 338.67 T
(Otherwise, the DUIM-OLE-Server and DUIM-OLE-Contr) 108 318.67 T
(ol libraries r) 386.54 318.67 T
(espec-) 445.2 318.67 T
(tively of) 108 304.67 T
(fer a simpler means of implementing compound documents or con-) 147.81 304.67 T
(tr) 108 290.67 T
(ols. See Chapter 3,  \322Compound Documents and OLE Contr) 115.73 290.67 T
(ols in DUIM\323) 406.89 290.67 T
(for mor) 108 276.67 T
(e on those libraries.) 144.63 276.67 T
(The OLE-Server and OLE-Contr) 108 256.67 T
(ol-Framework libraries pr) 263.95 256.67 T
(ovide a br) 389.47 256.67 T
(oader) 438.11 256.67 T
(range of facilities than the DUIM OLE libraries, so even if you ar) 108 242.67 T
(e using a) 420.74 242.67 T
(DUIM OLE library you may \336nd a need to use one of these libraries too.) 108 228.67 T
3 16 Q
(5.2  Implementing OLE compound document ser) 108 193.33 T
(ver) 409.97 193.33 T
(s) 429.49 193.33 T
2 11 Q
(T) 108 172.67 T
(o constr) 113.73 172.67 T
(uct an OLE compound document server application, use the OLE-) 152.29 172.67 T
-0.13 (Server library and module. Note that to implement the user interface for your) 108 158.67 P
-0.21 (server) 108 144.67 P
-0.21 (, you will also have to use the W) 137.29 144.67 P
-0.21 (in32 API libraries described in the Inter-) 292.45 144.67 P
(operability I r) 108 130.67 T
(efer) 174.47 130.67 T
(ence volume.) 192.82 130.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "185" 81
%%Page: "186" 82
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(The OLE-Server and OLE-Control-Framework Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(186) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 13 Q
0 X
(5.2.1  Basics of implementing compound document ser) 126 639.33 T
(ver) 405.72 639.33 T
(s) 421.58 639.33 T
2 11 Q
-0.21 (T) 126 619.67 P
-0.21 (o implement a compound document server application, you de\336ne an imple-) 131.73 619.67 P
-0.04 (mentation class for it and de\336ne methods on that class to serve as COM meth-) 126 605.67 P
(ods for it. Certain methods ar) 126 591.67 T
(e r) 268.8 591.67 T
(equir) 280.97 591.67 T
(ed while others ar) 306.38 591.67 T
(e optional; the) 393.78 591.67 T
-0.45 (r) 126 577.67 P
-0.45 (equir) 130.15 577.67 P
-0.45 (ed methods ar) 155.56 577.67 P
-0.45 (e described in Section 5.2.3 on page 188 while the optional) 224.15 577.67 P
(ones ar) 126 563.67 T
(e described in Section 5.2.4 on page 192.) 160.74 563.67 T
(Y) 126 543.67 T
(our server can be a) 132.32 543.67 T
0 F
(local server) 226.8 543.67 T
2 F
( \050a server that is built as a) 276.81 543.67 T
4 9.5 Q
(.EXE) 403.39 543.67 T
2 11 Q
( \336le and ther) 426.19 543.67 T
(e-) 487.59 543.67 T
(for) 126 529.67 T
(e r) 139.82 529.67 T
(uns in its own pr) 152.09 529.67 T
(ocess\051 or an) 234.18 529.67 T
0 F
(in-pr) 293.84 529.67 T
(ocess) 316.26 529.67 T
2 F
( server \050a server that is built as a) 338.45 529.67 T
4 9.5 Q
(.DLL) 126 515.67 T
2 11 Q
( \336le and that r) 148.8 515.67 T
(uns in its container) 216.88 515.67 T
(\325s pr) 310.29 515.67 T
(ocess\051. Ther) 331.52 515.67 T
(e is no dir) 388.73 515.67 T
(ect support) 436.59 515.67 T
(for r) 126 501.67 T
(emote servers.) 146.91 501.67 T
(Local servers must be de\336ned as subclasses of) 126 481.67 T
4 9.5 Q
(<ole-server-framework>) 352.13 481.67 T
2 11 Q
(,) 477.53 481.67 T
(while in-pr) 126 467.67 T
(ocess servers must be de\336ned as subclasses of) 180.02 467.67 T
4 9.5 Q
(<ole-in-process-) 405.32 467.67 T
(server>) 126 453.67 T
2 11 Q
(.) 165.9 453.67 T
1 F
(Note:) 126 433.67 T
2 F
( Y) 153.19 433.67 T
(ou must de\336ne the subclass of) 162.27 433.67 T
4 9.5 Q
(<ole-server-framework>) 311.54 433.67 T
2 11 Q
( or) 436.94 433.67 T
4 9.5 Q
(<ole-in-) 452.79 433.67 T
-0.64 (process-server>) 126 419.67 P
2 11 Q
-0.31 ( using) 211.5 419.67 P
4 9.5 Q
-0.64 (define) 243.4 419.67 P
-0.64 (COM-interface) 280.04 419.67 P
2 11 Q
-0.31 ( rather than) 354.14 419.67 P
4 9.5 Q
-0.64 (define) 412.81 419.67 P
-0.64 (class) 449.45 419.67 P
2 11 Q
-0.31 (. The) 477.95 419.67 P
(syntax and semantics of de\336ne COM-interface ar) 126 405.67 T
(e exactly the same as those) 363.21 405.67 T
(for) 126 391.67 T
4 9.5 Q
(define) 142.76 391.67 T
(class) 179.71 391.67 T
2 11 Q
(, but for implementation r) 208.21 391.67 T
(easons it is not pr) 334.09 391.67 T
(esently possible) 419 391.67 T
(to use) 126 377.67 T
4 9.5 Q
(define) 157.66 377.67 T
(class) 194.61 377.67 T
2 11 Q
(.) 223.11 377.67 T
(When a container application connects to your server application, a single) 126 357.67 T
(instance of your subclass is instantiated automatically) 126 343.67 T
(. This object is the \322con-) 386.36 343.67 T
(tr) 126 329.67 T
(olling unknown\323 for all the low-level OLE interfaces, so a container can) 133.73 329.67 T
4 9.5 Q
-0.74 (QueryInterface) 126 315.67 P
2 11 Q
-0.35 ( may be called on it if necessary) 205.8 315.67 P
-0.35 (, to obtain any of the low-level) 355.97 315.67 P
(interface pointers in or) 126 301.67 T
(der to extend the capabilities of the library) 236.21 301.67 T
(.) 440.96 301.67 T
3 13 Q
(5.2.2) 126 268.33 T
(Implementing local ser) 155.64 268.33 T
(ver) 271.27 268.33 T
(s) 287.14 268.33 T
2 11 Q
(T) 126 248.67 T
(o implement a local server) 131.73 248.67 T
(, the basic str) 259.29 248.67 T
(uctur) 322.38 248.67 T
(e of your application should be) 348.27 248.67 T
(the same as any GUI application using the W) 126 234.67 T
(in32 API, with the following) 344.61 234.67 T
(exceptions.) 126 220.67 T
3 13 Q
(5.2.2.1  Basic OLE integration f) 126 187.33 T
(or local ser) 282.22 187.33 T
(ver) 339.21 187.33 T
(s) 355.07 187.33 T
2 11 Q
(Call) 126 167.67 T
4 9.5 Q
(OLE-util-started-by-OLE?\050\051) 148.45 167.67 T
2 11 Q
( to \336nd out whether the application is r) 296.65 167.67 T
(un-) 486.77 167.67 T
(ning under OLE. If it r) 126 153.67 T
(eturns) 234.38 153.67 T
4 9.5 Q
(#f) 268.03 153.67 T
2 11 Q
(, your application should just r) 279.43 153.67 T
(un as a normal) 429.08 153.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "186" 82
%%Page: "187" 83
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.2) 332.47 677.67 T
(Implementing OLE compound document servers) 353.85 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(187) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(independent application. Otherwise, it should not show any of its windows;) 108 640.67 T
(the OLE support library will do that at the appr) 108 626.67 T
(opriate time.) 339.13 626.67 T
-0.15 (If your application is r) 108 606.67 P
-0.15 (unning under OLE, then befor) 215.68 606.67 P
-0.15 (e it enters the event loop,) 362.26 606.67 P
(it must make an instance of) 108 592.67 T
4 9.5 Q
(<class-factory>) 243.96 592.67 T
2 11 Q
(, passing it the application\325s) 329.46 592.67 T
(COM Class ID and the Dylan object class to be instantiated \321 that is, your) 108 578.67 T
(subclass of) 108 564.67 T
4 9.5 Q
(<ole-server-framework>) 163.46 564.67 T
2 11 Q
(.) 288.86 564.67 T
-0.11 (Instantiating the class factory takes car) 108 544.67 P
-0.11 (e of r) 294.99 544.67 P
-0.11 (egistering your server application) 319.36 544.67 P
(pr) 108 530.67 T
(ocess so that the container can connect to it. \050Not to be confused with r) 118.76 530.67 T
(egis-) 460.78 530.67 T
(tering the class so that the container knows which server application to r) 108 516.67 T
(un.\051) 459.77 516.67 T
(When your application terminates, it should call the function) 108 502.67 T
4 9.5 Q
(revoke-regis-) 407.14 502.67 T
(tration) 108 488.67 T
2 11 Q
( on the instance of) 147.9 488.67 T
4 9.5 Q
(<class-factory>) 238.89 488.67 T
2 11 Q
(.) 324.39 488.67 T
(When your application is activated in-place, you must call the function) 108 468.67 T
4 9.5 Q
(OLE-) 455.11 468.67 T
(util-translate-accelerator) 108 454.67 T
2 11 Q
( within the event loop to pr) 256.2 454.67 T
(operly handle the) 388.84 454.67 T
(top-level menu. \050It is harmless to call it in other contexts.\051) 108 440.67 T
(Note that the COM interface object is cr) 108 420.67 T
(eated while events ar) 299.85 420.67 T
(e being pr) 402.74 420.67 T
(o-) 451.34 420.67 T
(cessed, so it cannot simply be placed in a local variable befor) 108 406.67 T
(e entering the) 402.13 406.67 T
(loop.) 108 392.67 T
(If the application has cr) 108 372.67 T
(eated an interface object, then befor) 221.93 372.67 T
(e it terminates) 394.02 372.67 T
-0.46 (\050such as when r) 108 358.67 P
-0.46 (esponding to a) 182.69 358.67 P
4 9.5 Q
-0.94 ($WM-CLOSE) 256.05 358.67 P
2 11 Q
-0.46 ( message\051, the application make sur) 307.35 358.67 P
-0.46 (e) 478.44 358.67 P
(that the interface is pr) 108 344.67 T
(operly disconnected fr) 214.07 344.67 T
(om the container) 322.94 344.67 T
(. T) 404.2 344.67 T
(o do this, call) 415.43 344.67 T
(the function) 108 330.67 T
4 9.5 Q
(OLE-util-close-server) 169.53 330.67 T
2 11 Q
( on the interface object.) 289.23 330.67 T
(Because the OLE-Server instantiates the COM interface object for your server) 108 310.67 T
(automatically) 108 296.67 T
(, rather than thr) 173.41 296.67 T
(ough calling) 249.88 296.67 T
4 9.5 Q
(make) 313.04 296.67 T
2 11 Q
( on your subclass of) 335.84 296.67 T
4 9.5 Q
(<ole-) 435.06 296.67 T
(server-) 108 282.67 T
(framework>) 147.9 282.67 T
2 11 Q
(, your application will not naturally have a name bound) 204.9 282.67 T
-0.38 (to the COM interface object upon which you can call) 108 268.67 P
4 9.5 Q
-0.78 (OLE-util-close-server) 361.99 268.67 P
2 11 Q
-0.38 (.) 480.88 268.67 P
(Y) 108 254.67 T
(ou must arrange to bind the instance to a name by de\336ning an) 114.32 254.67 T
4 9.5 Q
(initialize) 418.79 254.67 T
2 11 Q
(method on your subclass.) 108 240.67 T
3 13 Q
(5.2.2.2  Windo) 108 207.33 T
(w handling f) 178.95 207.33 T
(or local ser) 240.95 207.33 T
(ver) 297.94 207.33 T
(s) 313.8 207.33 T
2 11 Q
(A server application must have at least two windows: a top-level frame win-) 108 187.67 T
(dow \050which includes the bor) 108 173.67 T
(der and title bar\051, and a single child window) 247.1 173.67 T
(occupying the client ar) 108 159.67 T
(ea within the bor) 218.55 159.67 T
(der) 301.03 159.67 T
(, and r) 316.55 159.67 T
(eferr) 347.57 159.67 T
(ed to as the) 370.26 159.67 T
0 F
(document) 428.27 159.67 T
(window) 108 145.67 T
2 F
(. The document window can be subdivided into other child windows,) 142.43 145.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "187" 83
%%Page: "188" 84
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(The OLE-Server and OLE-Control-Framework Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(188) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(but ther) 126 640.67 T
(e must be a single window handle r) 164.46 640.67 T
(epr) 337.6 640.67 T
(esenting the whole client) 353.62 640.67 T
(r) 126 626.67 T
(egion.) 130.15 626.67 T
(In stand-alone execution, the server application uses) 126 606.67 T
4 9.5 Q
(ShowWindow) 383.25 606.67 T
2 11 Q
( to display) 440.25 606.67 T
(the frame window) 126 592.67 T
(, as any W) 214.91 592.67 T
(indows pr) 264.49 592.67 T
(ogram would. For out-of-place activa-) 314.17 592.67 T
-0.41 (tion under OLE, the frame window is not shown until the support library calls) 126 578.67 P
(the application\325s) 126 564.67 T
4 9.5 Q
(OLE-part-open-out) 209.18 564.67 T
2 11 Q
( method.) 306.08 564.67 T
(For in-place activation \321 that is, activation as an embedded object \321 the sup-) 126 544.67 T
(port library calls the application\325s) 126 530.67 T
4 9.5 Q
(OLE-part-doc-window) 292.22 530.67 T
2 11 Q
( method to get the) 400.52 530.67 T
(document window) 126 516.67 T
(. The library then takes car) 217.63 516.67 T
(e of displaying the document) 346.66 516.67 T
-0.02 (window as a child of the container) 126 502.67 P
-0.02 (\325s window) 294.48 502.67 P
-0.02 (, and also automatically places a) 344.6 502.67 P
(\322hatch\323 bor) 126 488.67 T
(der ar) 182.76 488.67 T
(ound it. Although the frame window is not used during in-) 211.49 488.67 T
(place activation, it must still exist, to serve as the initial par) 126 474.67 T
(ent when cr) 412.25 474.67 T
(eating) 469.29 474.67 T
(the document window) 126 460.67 T
(.) 235.64 460.67 T
(Y) 126 440.67 T
(ou must set up the code that actually draws to the document window by) 132.32 440.67 T
(calling it fr) 126 426.67 T
(om either of two contexts: in r) 178.6 426.67 T
(esponse to a) 323.9 426.67 T
4 9.5 Q
($WM-PAINT) 386.13 426.67 T
2 11 Q
( message, or) 437.43 426.67 T
-0.14 (when the application\325s) 126 412.67 P
4 9.5 Q
-0.29 (OLE-part-draw-metafile) 238.75 412.67 P
2 11 Q
-0.14 ( method is called to pr) 364.15 412.67 P
-0.14 (oduce) 471.88 412.67 P
(an image of the window that will be displayed by the container when the) 126 398.67 T
(server is not active, and will be saved with the container) 126 384.67 T
(\325s other data.) 400.02 384.67 T
-0.34 (If your application has state information other than the scr) 126 364.67 P
-0.34 (een image \321 which) 406.54 364.67 P
-0.09 (it most likely will \321 it will need to pr) 126 350.67 P
-0.09 (ovide methods to dir) 307.17 350.67 P
-0.09 (ect the loading and) 408.59 350.67 P
(storing of that data.) 126 336.67 T
3 13 Q
(5.2.3  Required methods f) 126 303.33 T
(or a compound document ser) 255.54 303.33 T
(ver) 405.51 303.33 T
2 11 Q
(Y) 126 283.67 T
(ou must pr) 132.32 283.67 T
(ovide a method on each of the following generic functions for) 185.82 283.67 T
(your server application to work. The OLE-Server calls these methods.) 126 269.67 T
(In each case, the \336rst ar) 126 249.67 T
(gument \050named) 239.13 249.67 T
0 F
(obj) 319.62 249.67 T
2 F
( her) 332.66 249.67 T
(e\051 is to be specialized on the) 351.23 249.67 T
(application\325s subclass of) 126 235.67 T
4 9.5 Q
(<ole-server-framework>) 246.64 235.67 T
2 11 Q
( or) 372.04 235.67 T
4 9.5 Q
(<ole-in-process-) 387.89 235.67 T
(server>) 126 221.67 T
2 11 Q
(.) 165.9 221.67 T
3 12 Q
(OLE-par) 126 187 T
(t-doc-windo) 165.01 187 T
(w) 220.63 187 T
0 11 Q
(G.f method) 455.12 187.67 T
4 9 Q
(OLE-part-doc-window) 153 167 T
5 F
(obj) 261 167 T
4 F
( =>) 273.83 167 T
5 F
(document-window) 295.43 167 T
2 11 Q
(Returns the handle of the application\325s document window) 153 146.67 T
(, an instance) 435.48 146.67 T
(of) 153 132.67 T
4 9.5 Q
(<HWND>) 165.42 132.67 T
2 11 Q
(.) 199.62 132.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "188" 84
%%Page: "189" 85
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.2) 332.47 677.67 T
(Implementing OLE compound document servers) 353.85 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(189) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(If this r) 135 640.67 T
(eturns a null handle \050for example,) 169.87 640.67 T
4 9.5 Q
($NULL-HWND) 337.37 640.67 T
2 11 Q
(\051, then in-place) 394.37 640.67 T
-0.5 (activation will not be supported, and out-of-place activation will be used) 135 626.67 P
-0.16 (instead. \050However) 135 612.67 P
-0.16 (, in this case, a method must also be pr) 223.97 612.67 P
-0.16 (ovided for) 409.86 612.67 P
4 9.5 Q
-0.32 (OLE-) 463.2 612.67 P
(part-requested-size) 135 598.67 T
2 11 Q
(.\051) 243.3 598.67 T
3 12 Q
(OLE-par) 108 564 T
(t-open-out) 147.01 564 T
0 11 Q
(G.f. method) 434.37 564.67 T
4 9 Q
(OLE-part-open-out) 135 544 T
5 F
(obj) 232.2 544 T
4 F
( =>) 245.03 544 T
5 F
(frame-window) 266.63 544 T
2 11 Q
(Do out-of-place activation by showing the frame window) 135 523.67 T
(. The value is) 413.11 523.67 T
(the handle of the frame window) 135 509.67 T
(, an instance of) 290.58 509.67 T
4 9.5 Q
(<HWND>) 365.81 509.67 T
2 11 Q
(.) 400.01 509.67 T
(If the method r) 135 489.67 T
(eturns a null handle \050for example) 207.72 489.67 T
4 9.5 Q
($NULL-HWND) 372.47 489.67 T
2 11 Q
(\051, the con-) 429.47 489.67 T
(tainer will be told that the activation has failed.) 135 475.67 T
3 12 Q
(OLE-par) 108 441 T
(t-dra) 147.01 441 T
(w-meta\336le) 168.74 441 T
0 11 Q
(G.f. method) 434.37 441.67 T
4 9 Q
(OLE-part-draw-metafile) 135 421 T
5 F
(obj) 259.2 421 T
(hDC) 277.43 421 T
4 F
( =>) 295.61 421 T
5 F
(status) 317.2 421 T
2 11 Q
-0.29 (Draw all of the document window display to the device context) 135 400.67 P
0 F
-0.29 (hDC) 444.12 400.67 P
2 F
-0.29 ( \050an) 465.52 400.67 P
(instance of) 135 386.67 T
4 9.5 Q
(<HDC>) 190.08 386.67 T
2 11 Q
(\051.) 218.58 386.67 T
(This image is what the container will display when the server is no) 135 366.67 T
(longer active.) 135 352.67 T
(Normally) 135 332.67 T
(, this method should r) 181 332.67 T
(eturn) 288.08 332.67 T
4 9.5 Q
($S-OK) 317.06 332.67 T
2 11 Q
(, but you can also r) 345.56 332.67 T
(eturn an) 437.42 332.67 T
(err) 135 318.67 T
(or status code \050instance of) 148.76 318.67 T
4 9.5 Q
(<HRESULT>) 277.61 318.67 T
2 11 Q
(\051 that will be r) 328.92 318.67 T
(eported back to) 396.93 318.67 T
(the container pr) 135 304.67 T
(ogram.) 212.11 304.67 T
3 12 Q
(terminate) 108 270 T
0 11 Q
(G.f. method) 434.37 270.67 T
4 9 Q
(terminate) 135 250 T
5 F
(obj) 189 250 T
4 F
( => \050\051) 201.83 250 T
2 11 Q
(The OLE-Server library calls this method when the container discon-) 135 229.67 T
-0.43 (nects, so the method must take whatever action is appr) 135 215.67 P
-0.43 (opriate given that) 398.23 215.67 P
(the object) 135 201.67 T
0 F
(obj) 184.16 201.67 T
2 F
( is no longer in use. T) 197.19 201.67 T
(ypically) 299.98 201.67 T
(, this method will post a close) 337.59 201.67 T
(message to cause the pr) 135 187.67 T
(ocess to be terminated. For example:) 249.75 187.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "189" 85
%%Page: "190" 86
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(The OLE-Server and OLE-Control-Framework Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(190) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 F
0 X
(define method terminate \050obj :: <my-server-object>\051 => \050\051) 153 642 T
(next-method\050\051;) 163.8 631 T
(if \050 OLE-util-started-by-OLE?\050\051 \051 // if we were started by OLE) 163.8 620 T
(// post close message to terminate the process.) 174.6 609 T
(PostMessage\050obj.main-window, $WM-SYSCOMMAND, $SC-CLOSE, 0\051;) 174.6 598 T
(end if;) 163.8 587 T
(values\050\051) 163.8 576 T
(end;) 153 565 T
1 11 Q
(Note:) 153 544.67 T
2 F
( Y) 180.19 544.67 T
(ou must always call) 189.27 544.67 T
4 9.5 Q
(next-method) 288.44 544.67 T
2 11 Q
( \336rst because ther) 351.14 544.67 T
(e is a default) 436.35 544.67 T
(method that does important bookkeeping.) 153 530.67 T
(The following gr) 126 510.67 T
(oup of methods is used to implement the persistent storage) 207.15 510.67 T
(of any server data that you need to save in addition to the window image. If) 126 496.67 T
(ther) 126 482.67 T
(e is no such data, you can de\336ne these methods to do nothing; you must) 145.4 482.67 T
(be sur) 126 468.67 T
(e to de\336ne them even so, because no default methods ar) 155.55 468.67 T
(e pr) 427.06 468.67 T
(ovided.) 445.84 468.67 T
(W) 126 448.67 T
(e have not supplied default methods because most applications will need) 135.99 448.67 T
(persistent storage, and to allow these operations to be silently ignor) 126 434.67 T
(ed could) 453.87 434.67 T
(lead to dif) 126 420.67 T
(\336culties that would be dif) 175.17 420.67 T
(\336cult to trace.) 299.81 420.67 T
3 12 Q
(OLE-par) 126 386 T
(t-Create-Streams) 165.01 386 T
0 11 Q
(G.f. method) 452.37 386.67 T
4 9 Q
(OLE-part-Create-Streams) 153 366 T
5 F
(obj) 282.6 366 T
(storage) 300.83 366 T
4 F
( :: <LPSTORAGE>\051 => \050\051) 330.34 366 T
2 11 Q
(Cr) 153 345.67 T
(eate any str) 164.95 345.67 T
(eams needed for persistent data. These str) 220.49 345.67 T
(eams ar) 424.19 345.67 T
(e ways) 461.74 345.67 T
(of accessing a portion of data within the supplied) 153 331.67 T
0 F
(storage) 395.77 331.67 T
2 F
( object.) 427.54 331.67 T
(The str) 153 311.67 T
(eams must be instances of) 186.56 311.67 T
4 9.5 Q
(<LPSTREAM>) 315.65 311.67 T
2 11 Q
(, fr) 372.65 311.67 T
(om the COM interface) 385.96 311.67 T
4 9.5 Q
(IStream) 153 297.67 T
2 11 Q
(, not to be confused with the Str) 192.9 297.67 T
(eams library\325s) 347.21 297.67 T
4 9.5 Q
(<stream>) 418.37 297.67 T
2 11 Q
( class.) 463.97 297.67 T
(Usually this will be done like:) 153 277.67 T
4 9 Q
(obj.my-stream := OLE-util-Create-Stream\050storage, stream-name\051;) 163.8 257 T
2 11 Q
(for each str) 153 236.67 T
(eam needed, wher) 206.97 236.67 T
(e the second ar) 296.34 236.67 T
(gument is an OLE string) 368.71 236.67 T
(\050instance of) 153 222.67 T
4 9.5 Q
(<LPOLESTR>) 211.74 222.67 T
2 11 Q
(\051 that is the name of the str) 268.74 222.67 T
(eam. For example:) 398.06 222.67 T
4 9 Q
(define constant $my-stream-name = as\050<LPOLESTR>, "MyData"\051;) 163.8 202 T
3 12 Q
(OLE-par) 126 169 T
(t-Open-Streams) 165.01 169 T
0 11 Q
(G.f. method) 452.37 169.67 T
4 9 Q
(OLE-part-Open-Streams) 153 149 T
5 F
(obj) 271.8 149 T
(storage) 290.03 149 T
4 F
( :: <LPSTORAGE>\051 => \050\051) 319.54 149 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "190" 86
%%Page: "191" 87
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.2) 332.47 677.67 T
(Implementing OLE compound document servers) 353.85 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(191) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(Open any str) 135 640.67 T
(eams r) 197.84 640.67 T
(equir) 229.89 640.67 T
(ed. Usually this will be done like:) 255.3 640.67 T
4 9 Q
(obj.my-stream := OLE-util-open-stream\050storage, stream-name\051;) 145.8 620 T
3 12 Q
(OLE-par) 108 587 T
(t-Release-Streams) 147.01 587 T
0 11 Q
(G.f method) 437.12 587.67 T
4 9 Q
(OLE-part-Release-Streams) 135 567 T
5 F
(obj) 270 567 T
4 F
( => \050\051) 282.83 567 T
2 11 Q
(Call) 135 546.67 T
4 9.5 Q
(Release) 157.45 546.67 T
2 11 Q
( on each of the str) 197.35 546.67 T
(eam objects and for) 282.89 546.67 T
(get them.) 377.12 546.67 T
3 12 Q
(OLE-par) 108 512 T
(t-Sa) 147.01 512 T
(ve-T) 165.47 512 T
(o-Stora) 184.92 512 T
(g) 219.28 512 T
(e) 225.38 512 T
0 11 Q
(G.f. method) 434.37 512.67 T
4 9 Q
(OLE-part-Save-To-Storage) 135 492 T
5 F
(obj) 270 492 T
(storage) 288.23 492 T
(sameasload?) 323.14 492 T
4 F
( => \050\051) 374.63 492 T
2 11 Q
-0.15 (Saves your persistent data to) 135 471.67 P
0 F
-0.15 (storage) 277.02 471.67 P
2 F
-0.15 ( by writing it to your str) 308.79 471.67 P
-0.15 (eam objects,) 424.5 471.67 P
0 F
(obj) 135 457.67 T
2 F
(. The) 148.04 457.67 T
0 F
(storage) 174.7 457.67 T
2 F
( ar) 206.47 457.67 T
(gument is an instance of) 218.86 457.67 T
4 9.5 Q
(<LPSTORAGE>) 339.68 457.67 T
2 11 Q
(.) 402.38 457.67 T
(The) 135 437.67 T
0 F
(sameasload?) 156.16 437.67 T
2 F
( parameter is an instance of) 211.15 437.67 T
4 9.5 Q
(<boolean>) 347.14 437.67 T
2 11 Q
( indicating) 398.43 437.67 T
(whether this is the same compound document storage that the object) 135 423.67 T
(was originally cr) 135 409.67 T
(eated with. If so, the method should write to the) 216.16 409.67 T
(str) 135 395.67 T
(eams r) 147.4 395.67 T
(emember) 179.44 395.67 T
(ed fr) 224.9 395.67 T
(om a pr) 247.45 395.67 T
(evious call to) 284.93 395.67 T
4 9.5 Q
(OLE-part-Create-Streams) 351.55 395.67 T
2 11 Q
(or) 135 381.67 T
4 9.5 Q
(OLE-part-Open-Streams) 148.1 381.67 T
2 11 Q
(; otherwise,) 267.8 381.67 T
4 9.5 Q
(OLE-part-Create-Streams) 326.72 381.67 T
2 11 Q
(should be called to cr) 135 367.67 T
(eate new temporary str) 238.38 367.67 T
(eams \050which should be) 350.98 367.67 T
(r) 135 353.67 T
(eleased with) 139.15 353.67 T
4 9.5 Q
(Release) 202.9 353.67 T
2 11 Q
( befor) 242.8 353.67 T
(e r) 270.72 353.67 T
(eturning\051.) 282.89 353.67 T
(Y) 135 333.67 T
(ou can call) 141.32 333.67 T
4 9.5 Q
(istream-rewrite) 195.79 333.67 T
2 11 Q
( on each str) 281.29 333.67 T
(eam to position it at the begin-) 336.4 333.67 T
(ning and erase any old data, or use) 135 319.67 T
4 9.5 Q
(IStream/Seek) 307.71 319.67 T
2 11 Q
( to do selective) 376.11 319.67 T
(updates. The writing can be done either by using helper functions such) 135 305.67 T
(as) 135 291.67 T
4 9.5 Q
(istream-write-integer) 147.91 291.67 T
2 11 Q
( and) 267.61 291.67 T
4 9.5 Q
(istream-read-int16) 291.74 291.67 T
2 11 Q
(, or by using the) 394.34 291.67 T
(low-level API function) 135 277.67 T
4 9.5 Q
(IStream/Write) 248.13 277.67 T
2 11 Q
(.) 322.23 277.67 T
3 12 Q
(OLE-par) 108 243 T
(t-Load-Fr) 147.01 243 T
(om-Stora) 190.01 243 T
(g) 233.11 243 T
(e) 239.22 243 T
0 11 Q
(G.f. method) 434.37 243.67 T
4 9 Q
(OLE-part-Load-From-Storage) 135 223 T
5 F
(obj) 280.8 223 T
(width) 299.03 223 T
(height) 328.44 223 T
4 F
( => \050\051) 353.44 223 T
2 11 Q
(Initialize the size of your document window to the saved) 135 202.67 T
0 F
(width) 415.04 202.67 T
2 F
( and) 440.7 202.67 T
0 F
(height) 135 188.67 T
2 F
( \050in pixels; must be instances of) 162.5 188.67 T
4 9.5 Q
(<integer>) 316.58 188.67 T
2 11 Q
(\051, and load your persis-) 367.88 188.67 T
-0.07 (tent data fr) 135 174.67 P
-0.07 (om storage by r) 188.31 174.67 P
-0.07 (eading fr) 263.89 174.67 P
-0.07 (om your str) 307.59 174.67 P
-0.07 (eam objects \050which wer) 364.16 174.67 P
-0.07 (e) 478.05 174.67 P
(cr) 135 160.67 T
(eated by) 144.03 160.67 T
4 9.5 Q
(OLE-part-Open-Streams) 188.07 160.67 T
2 11 Q
(\051.) 307.77 160.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "191" 87
%%Page: "192" 88
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(The OLE-Server and OLE-Control-Framework Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(192) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(The r) 153 640.67 T
(eading can be done either by using helper functions such as) 178.31 640.67 T
4 9.5 Q
(istream-read-integer) 153 626.67 T
2 11 Q
( and) 267 626.67 T
4 9.5 Q
(istream-read-int16) 291.12 626.67 T
2 11 Q
(, or by using the low-) 393.72 626.67 T
(level API function) 153 612.67 T
4 9.5 Q
(IStream/Read) 244.09 612.67 T
2 11 Q
(.) 312.49 612.67 T
3 13 Q
(5.2.4  Optional methods f) 126 579.33 T
(or a compound document ser) 252.58 579.33 T
(ver) 402.55 579.33 T
2 11 Q
(The following methods ar) 126 559.67 T
(e optional.) 251.64 559.67 T
3 12 Q
(OLE-par) 126 525 T
(t-init-ne) 165.01 525 T
(w) 200.95 525 T
0 11 Q
(G.f. method) 452.37 525.67 T
4 9 Q
(OLE-part-init-new) 153 505 T
5 F
(obj) 250.2 505 T
4 F
( => \050\051) 263.03 505 T
2 11 Q
-0.17 (The OLE-Server library calls this method when a new object is being cr) 153 484.67 P
-0.17 (e-) 495.07 484.67 P
(ated \321 that is, when) 153 470.67 T
4 9.5 Q
(OLE-part-Load-From-Storage) 255.76 470.67 T
2 11 Q
( is not going to be) 403.96 470.67 T
(called to load an old object. Y) 153 456.67 T
(ou can de\336ne a method to perform any) 294.6 456.67 T
(desir) 153 442.67 T
(ed initialization. The default method does nothing.) 177 442.67 T
3 12 Q
(OLE-par) 126 408 T
(t-dir) 165.01 408 T
(ty?) 184.33 408 T
0 11 Q
(G.f. method) 452.37 408.67 T
4 9 Q
(OLE-part-dirty?) 153 388 T
5 F
(obj) 239.4 388 T
4 F
( =>) 252.23 388 T
5 F
(dirty?) 273.83 388 T
2 11 Q
-0.19 (Returns tr) 153 367.67 P
-0.19 (ue if the any of the application\325s data has changed since it was) 201.65 367.67 P
(last loaded or stor) 153 353.67 T
(ed; otherwise false.) 240.37 353.67 T
(The OLE-Server library uses this method to decide whether it needs to) 153 333.67 T
(call your) 153 319.67 T
4 9.5 Q
(OLE-part-Save-To-Storage) 198.39 319.67 T
2 11 Q
( method.) 335.19 319.67 T
(T) 153 299.67 T
(ypically you would want your object to contain a slot which this) 158.75 299.67 T
(method would r) 153 285.67 T
(eturn, that is set to) 232.08 285.67 T
4 9.5 Q
(#f) 324.86 285.67 T
2 11 Q
( by) 336.26 285.67 T
4 9.5 Q
(OLE-part-Save-To-Storage) 353.96 285.67 T
2 11 Q
(and) 153 271.67 T
4 9.5 Q
(OLE-part-Load-From-Storage) 174.37 271.67 T
2 11 Q
(, and set to) 322.57 271.67 T
4 9.5 Q
(#t) 378.06 271.67 T
2 11 Q
( when any r) 389.46 271.67 T
(elevant) 447.12 271.67 T
(data is changed. The default method always r) 153 257.67 T
(eturns) 374.45 257.67 T
4 9.5 Q
(#t) 408.1 257.67 T
2 11 Q
(.) 419.5 257.67 T
3 12 Q
(OLE-par) 126 223 T
(t-title) 165.01 223 T
0 11 Q
(G.f. method) 452.37 223.67 T
4 9 Q
(OLE-part-title) 153 203 T
5 F
(obj) 234 203 T
4 F
( =>) 246.83 203 T
5 F
(title) 268.43 203 T
4 F
( :: false-or\050<string>\051) 285.43 203 T
2 11 Q
(Returns either) 153 182.67 T
4 9.5 Q
(#f) 224.82 182.67 T
2 11 Q
( or a string identifying the server application.) 236.22 182.67 T
(If it r) 153 162.67 T
(eturns) 176.8 162.67 T
4 9.5 Q
(#f) 210.45 162.67 T
2 11 Q
( or an empty string, the part will have no title.) 221.85 162.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "192" 88
%%Page: "193" 89
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.2) 332.47 677.67 T
(Implementing OLE compound document servers) 353.85 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(193) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(T) 135 640.67 T
(ypically this would be the same as what would be shown in the win-) 140.75 640.67 T
(dow title bar for stand-alone execution. However) 135 626.67 T
(, most containers do) 373.39 626.67 T
(not use this information. The default method r) 135 612.67 T
(eturns no title.) 360.27 612.67 T
3 12 Q
(OLE-par) 108 578 T
(t-set-f) 147.01 578 T
(ocus) 174.16 578 T
0 11 Q
(G.f method) 437.12 578.67 T
4 9 Q
(OLE-part-set-focus) 135 558 T
5 F
(obj) 237.6 558 T
4 F
( => \050\051) 250.43 558 T
2 11 Q
(Sets the focus to the embedded object\325s document window) 135 537.67 T
(.) 419.02 537.67 T
(The default method does:) 135 517.67 T
4 9 Q
(SetFocus\050OLE-part-doc-window\050) 145.8 497 T
5 F
(obj) 302.4 497 T
4 F
(\051\051;) 315.23 497 T
2 11 Q
(That is usually the right thing to do, but some applications might want) 135 476.67 T
(to pr) 135 462.67 T
(ovide an override on this method for performing additional book-) 158.1 462.67 T
(keeping.) 135 448.67 T
3 12 Q
(OLE-par) 108 414 T
(t-requested-siz) 147.01 414 T
(e) 217.09 414 T
0 11 Q
(G.f. method) 434.37 414.67 T
4 9 Q
(OLE-part-requested-size) 135 394 T
5 F
(obj) 264.6 394 T
4 F
( =>) 277.43 394 T
5 F
(width) 299.03 394 T
(height) 328.44 394 T
2 11 Q
(Returns the dimensions of the display r) 135 373.67 T
(egion you want your embedded) 326.33 373.67 T
(object to occupy in the container) 135 359.67 T
(. The OLE-Server library calls this) 291.52 359.67 T
(method to \336nd out what dimensions you would like the embedded) 135 345.67 T
(object display to have.) 135 331.67 T
(The values to be r) 135 311.67 T
(eturned ar) 220.99 311.67 T
(e two integers r) 271.61 311.67 T
(epr) 346.89 311.67 T
(esenting the r) 362.92 311.67 T
(egion\325s) 428.73 311.67 T
(width and height in pixels.) 135 297.67 T
(Usually the container can make the r) 135 277.67 T
(equested r) 313.01 277.67 T
(egion available, but if) 363.48 277.67 T
(not, it calls) 135 263.67 T
4 9.5 Q
(OLE-part-change-size) 190.23 263.67 T
2 11 Q
( to r) 304.23 263.67 T
(eport the actual size.) 323.47 263.67 T
-0.18 (The default method uses) 135 243.67 P
4 9.5 Q
-0.37 (GetClientRect) 257.2 243.67 P
2 11 Q
-0.18 ( to get the initial size of the win-) 331.3 243.67 P
(dow r) 135 229.67 T
(eturned by) 163.8 229.67 T
4 9.5 Q
(OLE-part-doc-window) 219.72 229.67 T
2 11 Q
(.) 328.02 229.67 T
3 12 Q
(OLE-par) 108 195 T
(t-c) 147.01 195 T
(hang) 158.95 195 T
(e-siz) 182.56 195 T
(e) 204.53 195 T
0 11 Q
(G.f method) 437.12 195.67 T
4 9 Q
(OLE-part-change-size) 135 175 T
5 F
(obj) 248.4 175 T
(width) 266.63 175 T
(height) 296.04 175 T
4 F
( =>) 321.04 175 T
5 F
(OK?) 342.64 175 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "193" 89
%%Page: "194" 90
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(The OLE-Server and OLE-Control-Framework Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(194) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(The OLE-Server library calls this method when the container changes) 153 640.67 T
(the size of the display r) 153 626.67 T
(egion it has allocated for the embedded object.) 265.73 626.67 T
(This might happen if the container user r) 153 612.67 T
(esizes the embedded object.) 351.85 612.67 T
(The) 153 592.67 T
0 F
(width) 174.16 592.67 T
2 F
( and) 199.83 592.67 T
0 F
(height) 223.95 592.67 T
2 F
( ar) 251.45 592.67 T
(guments ar) 263.85 592.67 T
(e the numbers of pixels de\336ning the) 318.63 592.67 T
(r) 153 578.67 T
(egion as changed.) 157.15 578.67 T
(This method will not be called as long as the space is the same as) 153 558.67 T
(r) 153 544.67 T
(equested by) 157.15 544.67 T
4 9.5 Q
(OLE-part-requested-size) 218.42 544.67 T
2 11 Q
(.) 349.52 544.67 T
(Y) 153 524.67 T
(our method should r) 159.32 524.67 T
(eturn) 260.03 524.67 T
4 9.5 Q
(#t) 289.02 524.67 T
2 11 Q
( if the change is acceptable, or) 300.42 524.67 T
4 9.5 Q
(#f) 448.11 524.67 T
2 11 Q
( if in-) 459.51 524.67 T
(place activation can no longer be supported in the given space.) 153 510.67 T
(The default method does nothing and r) 153 490.67 T
(eturns) 343.73 490.67 T
4 9.5 Q
(#t) 377.38 490.67 T
2 11 Q
(. Y) 388.78 490.67 T
(ou should supply an) 400.6 490.67 T
(override method if you want to r) 153 476.67 T
(espond to a change by altering the) 312.59 476.67 T
(embedded object display) 153 462.67 T
(, such as by scaling or scr) 273.46 462.67 T
(olling, instead of) 395.67 462.67 T
(mer) 153 448.67 T
(ely letting it be clipped.) 172.13 448.67 T
(Note that the actual change to the window size should be carried out) 153 428.67 T
(separately by) 153 414.67 T
4 9.5 Q
(OLE-part-position-window) 220.76 414.67 T
2 11 Q
(.) 357.56 414.67 T
3 12 Q
(OLE-par) 126 380 T
(t-position-windo) 165.01 380 T
(w) 241.4 380 T
0 11 Q
(G.f. method) 452.37 380.67 T
4 9 Q
(OLE-part-position-window) 153 360 T
5 F
(obj) 288 360 T
(r) 306.23 360 T
(ect) 309.57 360 T
(r) 326.47 360 T
(epaint?) 329.8 360 T
4 F
( => \050\051) 359.31 360 T
2 11 Q
(The OLE-Server library calls this method during in-place activation, to) 153 339.67 T
-0.19 (set the size and position of the embedded object\325s document window) 153 325.67 P
-0.19 (, as) 485.97 325.67 P
(designated by the given r) 153 311.67 T
(ectangle with pixel coor) 276.26 311.67 T
(dinates.) 392.1 311.67 T
(The) 153 291.67 T
0 F
(r) 174.16 291.67 T
(ect) 178.24 291.67 T
2 F
( ar) 190.66 291.67 T
(gument is an instance of) 203.06 291.67 T
4 9.5 Q
(<LPRECT>) 323.87 291.67 T
2 11 Q
(.) 369.47 291.67 T
(If the) 153 271.67 T
4 9.5 Q
(<boolean>) 181.13 271.67 T
2 11 Q
( ar) 232.43 271.67 T
(gument) 244.82 271.67 T
0 F
(r) 285.29 271.67 T
(epaint?) 289.37 271.67 T
2 F
( is tr) 322.37 271.67 T
(ue, this method should r) 343.58 271.67 T
(e-draw) 462.56 271.67 T
(the document window) 153 257.67 T
(.) 262.64 257.67 T
(Note that the window size given her) 153 237.67 T
(e is what is curr) 330.17 237.67 T
(ently visible in the) 406.84 237.67 T
-0.04 (container after clipping, and not necessarily the full size of the allocated) 153 223.67 P
(space \050as fr) 153 209.67 T
(om) 207.07 209.67 T
4 9.5 Q
(OLE-part-change-size) 225.53 209.67 T
2 11 Q
(\051.) 339.53 209.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "194" 90
%%Page: "195" 91
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.2) 332.47 677.67 T
(Implementing OLE compound document servers) 353.85 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(195) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(The default method does this:) 135 640.67 T
4 9 Q
(MoveWindow\050OLE-part-doc-window\050obj\051,) 135 620 T
(rect.left-value, rect.top-value,) 145.8 609 T
(rect.right-value - rect.left-value,) 145.8 598 T
(rect.bottom-value - rect.top-value,) 145.8 587 T
(repaint?\051;) 145.8 576 T
2 11 Q
(As is documented for the) 135 555.67 T
4 9.5 Q
(IOleInPlaceObject/SetObjectRects) 260.31 555.67 T
2 11 Q
( opera-) 442.71 555.67 T
(tion that uses it, this method must not make calls to the W) 135 541.67 T
(indows) 416.47 541.67 T
4 9.5 Q
(PeekMessage) 135 527.67 T
2 11 Q
( or) 197.7 527.67 T
4 9.5 Q
(GetMessage) 213.55 527.67 T
2 11 Q
( functions, or to a dialog box.) 270.55 527.67 T
3 12 Q
(OLE-par) 108 493 T
(t-hide) 147.01 493 T
0 11 Q
(G.f. method) 434.37 493.67 T
4 9 Q
(OLE-part-hide) 135 473 T
5 F
(obj) 210.6 473 T
4 F
( => \050\051) 223.43 473 T
2 11 Q
(Remove the application frame window fr) 135 452.67 T
(om the scr) 335.51 452.67 T
(een.) 385.68 452.67 T
(The OLE-Server library calls this method during out-of-place activation) 135 432.67 T
(only) 135 418.67 T
(. The default method does this:) 155.5 418.67 T
4 9 Q
(ShowWindow\050) 145.8 398 T
5 F
(window) 205.2 398 T
4 F
(, $SW-HIDE\051;) 238.2 398 T
2 11 Q
(wher) 135 377.67 T
(e) 159.99 377.67 T
0 F
(window) 168.01 377.67 T
2 F
( is the value r) 203.45 377.67 T
(eturned by) 268.54 377.67 T
4 9.5 Q
(OLE-part-open-out) 324.46 377.67 T
2 11 Q
(.) 421.36 377.67 T
3 12 Q
(OLE-par) 108 343 T
(t-in-place-activ) 147.01 343 T
(ated) 216.28 343 T
0 11 Q
(G.f. method) 434.37 343.67 T
4 9 Q
(OLE-part-in-place-activated) 135 323 T
5 F
(obj) 286.2 323 T
4 F
( => \050\051) 299.03 323 T
2 11 Q
(The OLE-Server library calls this method when in-place activation is) 135 302.67 T
(begins, immediately after it has completed displaying the server appli-) 135 288.67 T
(cation\325s document window) 135 274.67 T
(, menus, and toolbar in the container) 266.68 274.67 T
(.) 444.35 274.67 T
(The purpose of the call to this method is simply to allow your applica-) 135 254.67 T
(tion to take any action that might be necessary once the display part of) 135 240.67 T
(in-place activiation is complete. This action could be bookkeeping or a) 135 226.67 T
(visual change. The default method does nothing.) 135 212.67 T
3 12 Q
(OLE-par) 108 178 T
(t-UI-activ) 147.01 178 T
(ated) 188.93 178 T
0 11 Q
(G.f. method) 434.37 178.67 T
4 9 Q
(OLE-part-UI-activated) 135 158 T
5 F
(obj) 253.8 158 T
4 F
( => \050\051) 266.63 158 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "195" 91
%%Page: "196" 92
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(The OLE-Server and OLE-Control-Framework Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(196) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(The OLE-Server library calls this method after adding any frame-level) 153 640.67 T
(user interface \050such as menus or tool bar\051 for an in-place activation.) 153 626.67 T
(The purpose of the call to this method is simply to allow your applica-) 153 606.67 T
(tion to take any action that might be necessary at this point. This action) 153 592.67 T
(could be bookkeeping or a visual change. The default method does) 153 578.67 T
(nothing.) 153 564.67 T
(Usually) 153 544.67 T
(, the in-place activation of an embedded server causes both) 189.65 544.67 T
4 9.5 Q
(OLE-) 479.11 544.67 T
(part-in-place-activated) 153 530.67 T
2 11 Q
( and) 284.1 530.67 T
4 9.5 Q
(OLE-part-UI-activated) 308.22 530.67 T
2 11 Q
( to be called,) 427.92 530.67 T
(but for an OLE Contr) 153 516.67 T
(ol which can be one of several active at the same) 256.25 516.67 T
(time,) 153 502.67 T
4 9.5 Q
(OLE-part-UI-activated) 180.27 502.67 T
2 11 Q
( will not be called since the frame-level) 299.97 502.67 T
(user interface is not alter) 153 488.67 T
(ed.) 272.59 488.67 T
3 12 Q
(OLE-par) 126 454 T
(t-in-place-deactiv) 165.01 454 T
(ated) 245.76 454 T
0 11 Q
(G.f. method) 452.37 454.67 T
4 9 Q
(OLE-part-in-place-deactivated) 153 434 T
5 F
(obj) 315 434 T
4 F
( => \050\051) 327.83 434 T
2 11 Q
(This method is called when in-place activation is ended, just befor) 153 413.67 T
(e) 473.53 413.67 T
(r) 153 399.67 T
(estoring the container) 157.15 399.67 T
(\325s user interface. It simply allows the application) 263.9 399.67 T
(to r) 153 385.67 T
(ecognize that this is going to happen and to perform any desir) 169.49 385.67 T
(ed) 471.59 385.67 T
(bookkeeping. The default method does nothing.) 153 371.67 T
4 9.5 Q
(OLE-util-set-status-text) 153 351.67 T
2 11 Q
( can be called her) 289.8 351.67 T
(e to leave a parting mes-) 373.53 351.67 T
(sage.) 153 337.67 T
3 12 Q
(OLE-par) 126 303 T
(t-UI-deactiv) 165.01 303 T
(ated) 218.41 303 T
0 11 Q
(G.f. method) 452.37 303.67 T
4 9 Q
(OLE-part-UI-deactivated) 153 283 T
5 F
(obj) 282.6 283 T
4 F
( => \050\051) 295.43 283 T
2 11 Q
(This method is called befor) 153 262.67 T
(e r) 284.52 262.67 T
(emoving any frame-level user interface) 296.68 262.67 T
(\050such as menus or tool bar\051 for an in-place activation. The default) 153 248.67 T
(method does nothing.) 153 234.67 T
(Usually for an embedded document server) 153 214.67 T
(, this will be followed by a) 360.81 214.67 T
(call to) 153 200.67 T
4 9.5 Q
(OLE-part-in-place-deactivated) 184.88 200.67 T
2 11 Q
(, but an OLE Contr) 350.18 200.67 T
(ol can) 442.16 200.67 T
(r) 153 186.67 T
(emain in-place-active even though it is no longer UI active.) 157.15 186.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "196" 92
%%Page: "197" 93
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.2) 332.47 677.67 T
(Implementing OLE compound document servers) 353.85 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(197) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 12 Q
0 X
(OLE-par) 108 640 T
(t-inser) 147.01 640 T
(t-men) 177.28 640 T
(us) 203.98 640 T
0 11 Q
(G.f. method) 434.37 640.67 T
4 9 Q
(OLE-part-insert-menus) 135 620 T
5 F
(obj) 253.8 620 T
(hmenu) 272.03 620 T
4 F
( :: <HMENU>) 298.54 620 T
5 F
(edit-pos) 363.34 620 T
4 F
( :: <integer>) 396.34 620 T
5 F
(object-pos) 135 609 T
4 F
( :: <integer>,) 176.83 609 T
5 F
(help-pos) 257.83 609 T
4 F
( :: <integer>\051) 292.34 609 T
(=> \050) 135 598 T
5 F
(nedit) 156.6 598 T
4 F
( :: <integer>,) 177.1 598 T
5 F
(nobject) 258.1 598 T
4 F
( :: <integer>,) 287.43 598 T
5 F
(nhelp) 368.43 598 T
4 F
( :: <integer>\051) 390.44 598 T
2 11 Q
(This method can be implemented to specify menus that will be mer) 135 579.67 T
(ged) 462.06 579.67 T
(into the container) 135 565.67 T
(\325s menu bar during in-place activation.) 221.36 565.67 T
-0.21 (The) 135 545.67 P
0 F
-0.21 (hmenu) 155.95 545.67 P
2 F
-0.21 ( ar) 186.52 545.67 P
-0.21 (gument is the shar) 198.71 545.67 P
-0.21 (ed menu bar with the container) 287.87 545.67 P
-0.21 (\325s menus) 440.52 545.67 P
(alr) 135 531.67 T
(eady installed, and an instance of) 147.85 531.67 T
4 9.5 Q
(<HMENU>) 312.55 531.67 T
2 11 Q
(.) 352.45 531.67 T
(The) 135 511.67 T
0 F
(edit-pos) 156.16 511.67 T
2 F
(,) 190.99 511.67 T
0 F
(object-pos) 196.49 511.67 T
2 F
(, and) 240.27 511.67 T
0 F
(help-pos) 267.14 511.67 T
2 F
( ar) 303.81 511.67 T
(guments ar) 316.2 511.67 T
(e integers each specify-) 370.98 511.67 T
(ing the positions in the menu bar at which menus can be inserted for) 135 497.67 T
(each of thr) 135 483.67 T
(ee gr) 186.36 483.67 T
(oups, designated \322edit\323, \322object\323, and \322help\323 menus.) 209.91 483.67 T
(This method must r) 135 463.67 T
(eturn the number of menus added in each gr) 230.7 463.67 T
(oup.) 447.84 463.67 T
(The default method does nothing, r) 135 449.67 T
(eturning) 307.11 449.67 T
4 9.5 Q
(values\0500,) 351.81 449.67 T
(0,) 405.86 449.67 T
(0\051) 420.01 449.67 T
2 11 Q
(.) 431.41 449.67 T
(Y) 135 429.67 T
(ou can insert menus by calling the W) 141.32 429.67 T
(in32 function) 320.5 429.67 T
4 9.5 Q
(InsertMenu) 387.38 429.67 T
2 11 Q
(. For) 444.38 429.67 T
-0.29 (example, if ther) 135 415.67 P
-0.29 (e is just one menu to be inserted, the method body might) 210.17 415.67 P
(look something like:) 135 401.67 T
4 9 Q
(InsertMenu\050hmenu, edit-pos, logior\050$MF-BYPOSITION,$MF-POPUP\051,) 135 381 T
(pointer-address\050my-hMenu\051, TEXT\050"&Mine"\051\051;) 145.8 370 T
(values\050 1, 0, 0 \051) 135 359 T
3 12 Q
(OLE-par) 108 326 T
(t-release-men) 147.01 326 T
(u) 210.91 326 T
0 11 Q
(G.f. method) 434.37 326.67 T
4 9 Q
(OLE-part-release-menu) 135 306 T
5 F
(obj) 253.8 306 T
(hmenu) 272.03 306 T
4 F
( :: <HMENU> => \050\051) 298.54 306 T
2 11 Q
(When an in-place activation is ended, this method is called on each of) 135 285.67 T
(the menus that wer) 135 271.67 T
(e inserted by) 228.85 271.67 T
4 9.5 Q
(OLE-part-insert-menus) 294.03 271.67 T
2 11 Q
(.) 413.73 271.67 T
(This pr) 135 251.67 T
(ovides an opportunity to call) 169.52 251.67 T
4 9.5 Q
(DestroyMenu) 312.73 251.67 T
2 11 Q
( if appr) 375.43 251.67 T
(opriate. The) 410.66 251.67 T
(default method does nothing.) 135 237.67 T
3 12 Q
(OLE-par) 108 203 T
(t-command-windo) 147.01 203 T
(w) 231.61 203 T
0 11 Q
(G.f. method) 434.37 203.67 T
4 9 Q
(OLE-part-command-window) 135 183 T
5 F
(obj) 264.6 183 T
4 F
( =>) 277.43 183 T
5 F
(window) 299.03 183 T
4 F
( :: <HWND>) 332.04 183 T
2 11 Q
(Return the window handle to which command messages will be) 135 162.67 T
(dir) 135 148.67 T
(ected when any items fr) 149.07 148.67 T
(om the inserted menus ar) 265.31 148.67 T
(e invoked.) 389.07 148.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "197" 93
%%Page: "198" 94
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(The OLE-Server and OLE-Control-Framework Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(198) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(The default method uses the document window; an override method) 153 640.67 T
(will be needed if the menu commands ar) 153 626.67 T
(e to be pr) 351.42 626.67 T
(ocessed by the frame) 396.64 626.67 T
(window) 153 612.67 T
(.) 192.67 612.67 T
3 12 Q
(OLE-par) 126 578 T
(t-accelerator) 165.01 578 T
(s) 223.94 578 T
0 11 Q
(G.f method) 455.12 578.67 T
4 9 Q
(OLE-part-accelerators) 153 558 T
5 F
(obj) 271.8 558 T
4 F
( =>) 284.63 558 T
5 F
(table) 306.23 558 T
4 F
( :: false-or\050<HACCEL>\051) 326.57 558 T
2 11 Q
(Returns the handle of the application\325s accelerator key table, or) 153 537.67 T
4 9.5 Q
(#f) 461.88 537.67 T
2 11 Q
( if the) 473.28 537.67 T
(application does not use any accelerators. The default method r) 153 523.67 T
(eturns) 460.73 523.67 T
4 9.5 Q
(#f) 153 509.67 T
2 11 Q
(.) 164.4 509.67 T
-0.24 (This method is used during in-place activation of an in-pr) 153 489.67 P
-0.24 (ocess server to) 431.28 489.67 P
(handle keystr) 153 475.67 T
(okes r) 219.14 475.67 T
(eceived by the container) 248.1 475.67 T
(. An accelerator handle is) 365.41 475.67 T
(obtained fr) 153 461.67 T
(om the W) 206.33 461.67 T
(in32 function) 253.2 461.67 T
4 9.5 Q
(LoadAccelerators) 320.08 461.67 T
2 11 Q
( or) 411.28 461.67 T
4 9.5 Q
(CreateAccel-) 427.13 461.67 T
(eratorTable) 153 447.67 T
2 11 Q
(, but those should not be called in this method since it will) 215.7 447.67 T
(be called for each keystr) 153 433.67 T
(oke. Instead, this method should simply be an) 270.1 433.67 T
(accessor for a pr) 153 419.67 T
(eviously computed value. Note that this should be the) 231.74 419.67 T
(same value as is passed to) 153 405.67 T
4 9.5 Q
(TranslateAccelerator) 282.51 405.67 T
2 11 Q
( in the server) 396.51 405.67 T
(\325s event) 460.55 405.67 T
(loop.) 153 391.67 T
3 12 Q
(OLE-par) 126 357 T
(t-toolbar) 165.01 357 T
(-windo) 204.73 357 T
(w) 236.3 357 T
0 11 Q
(G.f method) 455.12 357.67 T
4 9 Q
(OLE-part-toolbar-window) 153 337 T
5 F
(obj) 282.6 337 T
4 F
( =>) 295.43 337 T
5 F
(toolbar-window) 317.03 337 T
4 F
( :: <HWND>) 383.38 337 T
2 11 Q
-0.03 (Returns the window handle of the application\325s tool bar) 153 316.67 P
-0.03 (. If the handle is) 423.68 316.67 P
(not null, the window will be displayed at the top of the container win-) 153 302.67 T
(dow during in-place activation. The height of the window should have) 153 288.67 T
(been set as desir) 153 274.67 T
(ed befor) 231.96 274.67 T
(e this function r) 271.87 274.67 T
(eturns. The width of the win-) 348.16 274.67 T
(dow will be automatically adjusted to \336t the container) 153 260.67 T
(. The default) 415.2 260.67 T
(method r) 153 246.67 T
(eturns) 197.59 246.67 T
4 9.5 Q
($NULL-HWND) 231.24 246.67 T
2 11 Q
(.) 288.24 246.67 T
3 12 Q
(OLE-par) 126 212 T
(t-g) 165.01 212 T
(et-data) 177.67 212 T
0 11 Q
(G.f. method) 452.37 212.67 T
4 9 Q
(OLE-part-get-data \050obj, pformatetc :: <LPFORMATETC>, pmedium ::) 153 192 T
(<LPSTGMEDIUM>\051 => status :: <HRESULT>) 153 181 T
2 11 Q
(Implements the) 153 160.67 T
4 9.5 Q
(IDataObject/GetData) 231.89 160.67 T
2 11 Q
( operation by storing a r) 340.19 160.67 T
(epr) 457.03 160.67 T
(esen-) 473.06 160.67 T
(tation of the document window in the given) 153 146.67 T
0 F
(pmedium) 370.16 146.67 T
2 F
( \050an instance of) 411.73 146.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "198" 94
%%Page: "199" 95
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.2) 332.47 677.67 T
(Implementing OLE compound document servers) 353.85 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(199) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 9.5 Q
0 X
(<LPSTGMEDIUM>) 135 640.67 T
2 11 Q
(\051 accor) 209.1 640.67 T
(ding to the format speci\336ed by) 240.93 640.67 T
0 F
(pformatetc) 393.01 640.67 T
2 F
( \050and) 440.25 640.67 T
(instance of) 135 626.67 T
4 9.5 Q
(<LPFORMATETC>) 190.08 626.67 T
2 11 Q
(\051.) 264.18 626.67 T
(If) 135 606.67 T
0 F
(pmedium) 145.12 606.67 T
2 F
( is a null pointer) 186.69 606.67 T
(, this method should not actually stor) 265.1 606.67 T
(e any) 446.54 606.67 T
(data, but just indicate by the r) 135 592.67 T
(eturned status whether the format is sup-) 279.68 592.67 T
(ported \050this case is used to implement) 135 578.67 T
4 9.5 Q
(IDataObject/QueryGetData) 322.33 578.67 T
2 11 Q
(\051.) 459.13 578.67 T
(The default method cr) 135 558.67 T
(eates a \322meta\336le\323 and calls) 242.96 558.67 T
4 9.5 Q
(OLE-part-draw-meta-) 376.77 558.67 T
(file) 135 544.67 T
2 11 Q
( to draw into it. \050Both old style and enhanced meta\336les ar) 157.8 544.67 T
(e sup-) 436.23 544.67 T
(ported for compatibility with both 16-bit and 32-bit container) 135 530.67 T
(applications.\051 Y) 135 516.67 T
(ou should only need to override this if you need to sup-) 209.85 516.67 T
-0.38 (port some other data format or some r) 135 502.67 P
-0.38 (epr) 317.63 502.67 P
-0.38 (esentation other than the entir) 333.66 502.67 P
-0.38 (e) 478.37 502.67 P
(window \050) 135 488.67 T
4 9.5 Q
($DVASPECT-CONTENT) 182.09 488.67 T
2 11 Q
(\051.) 278.99 488.67 T
(See also the companion function) 135 468.67 T
4 9.5 Q
(OLE-part-formats-for-get) 295.19 468.67 T
2 11 Q
( below) 431.99 468.67 T
(.) 463.46 468.67 T
3 12 Q
(OLE-par) 108 434 T
(t-set-data) 147.01 434 T
0 11 Q
(G.f method) 437.12 434.67 T
4 9 Q
(OLE-part-set-data \050obj, pformatetc :: <LPFORMATETC>, pmedium ::) 135 414 T
(<LPSTGMEDIUM>\051 => status :: <HRESULT>) 135 403 T
2 11 Q
(Implements the) 135 382.67 T
4 9.5 Q
(IDataObject/SetData) 213.89 382.67 T
2 11 Q
( operation by storing the given) 322.19 382.67 T
(data into the application. The default method simply r) 135 368.67 T
(eturns an err) 398.55 368.67 T
(or) 460.61 368.67 T
-0.06 (status indicating that this operation is not supported, which is suf) 135 354.67 P
-0.06 (\336cient) 453.32 354.67 P
-0.3 (for many applications. Most compound document containers do not call) 135 340.67 P
(this.) 135 326.67 T
3 12 Q
(OLE-par) 108 292 T
(t-f) 147.01 292 T
(ormats-f) 156.66 292 T
(or) 195.84 292 T
(-g) 205.5 292 T
(et) 214.88 292 T
0 11 Q
(G.f method) 437.12 292.67 T
4 9 Q
(OLE-part-formats-for-get \050obj\051 => formats :: <list>) 135 272 T
2 11 Q
(Used in the implementation of the) 135 251.67 T
4 9.5 Q
(IDataObject/EnumFormatEtc) 304.16 251.67 T
2 11 Q
( opera-) 446.66 251.67 T
(tion \050not used by all containers\051 when the dir) 135 237.67 T
(ection is) 353.73 237.67 T
4 9.5 Q
($DATADIR-GET) 396.45 237.67 T
2 11 Q
(. It) 464.03 237.67 T
(r) 135 223.67 T
(eturns a list in which each element is an instance of) 139.15 223.67 T
4 9.5 Q
(<FORMATETC-info>) 390.22 223.67 T
2 11 Q
-0.27 (which describes a supported data format for) 135 209.67 P
4 9.5 Q
-0.57 (IDataObject/GetData) 351.58 209.67 P
2 11 Q
-0.27 (. The) 459.88 209.67 P
(default method r) 135 195.67 T
(eturns:) 216.92 195.67 T
4 9 Q
(list\050make\050<FORMATETC-info>, format: $CF-METAFILEPICT,) 135 175 T
(aspect: $DVASPECT-CONTENT,) 189 164 T
(tymed: logior\050$TYMED-MFPICT, $TYMED-ENHMF\051\051\051) 189 153 T
(pair\050 make\050<FORMATETC-info>, \311\051, next-method\050\051 \051) 135 134 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "199" 95
%%Page: "200" 96
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(The OLE-Server and OLE-Control-Framework Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(200) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 12 Q
0 X
(OLE-par) 126 640 T
(t-f) 165.01 640 T
(ormats-f) 174.66 640 T
(or) 213.84 640 T
(-set) 223.5 640 T
0 11 Q
(Open generic function) 404.57 640.67 T
4 9 Q
(OLE-part-formats-for-set) 153 620 T
5 F
(obj) 288 620 T
4 F
( => formats :: <list>) 300.83 620 T
2 11 Q
(Used in the implementation of the) 153 599.67 T
4 9.5 Q
(IDataObject/EnumFormatEtc) 322.16 599.67 T
2 11 Q
( opera-) 464.66 599.67 T
(tion when the dir) 153 585.67 T
(ection is) 237.02 585.67 T
4 9.5 Q
($DATADIR-SET) 279.73 585.67 T
2 11 Q
(. It r) 347.32 585.67 T
(eturns a list in which each) 367.01 585.67 T
(element is a description of a supported data format for) 153 571.67 T
4 9.5 Q
(IDataOb-) 421.21 571.67 T
(ject/SetData) 153 557.67 T
2 11 Q
(.) 221.4 557.67 T
(The default method r) 153 537.67 T
(eturns an empty list. If you override the default) 256.08 537.67 T
(method for) 153 523.67 T
4 9.5 Q
(OLE-part-set-data) 210.21 523.67 T
2 11 Q
(, a corr) 307.11 523.67 T
(esponding override should be) 340.24 523.67 T
(pr) 153 509.67 T
(ovided for this method too.) 163.76 509.67 T
3 12 Q
(OLE-par) 126 475 T
(t-enab) 165.01 475 T
(le-dialog) 194.45 475 T
0 11 Q
(Open generic function) 404.57 475.67 T
4 9 Q
(OLE-part-enable-dialog \050obj, enable? :: <boolean>\051 => \050\051) 153 455 T
2 11 Q
(A server should pr) 153 434.67 T
(ovide a method for this if it displays any modeless) 244.3 434.67 T
(dialog boxes.) 153 420.67 T
(When the) 153 400.67 T
4 9.5 Q
(<boolean>) 202.83 400.67 T
2 11 Q
( ar) 254.13 400.67 T
(gument) 266.53 400.67 T
0 F
(enable?) 307 400.67 T
2 F
( is false, any modeless dialog) 340.2 400.67 T
(boxes curr) 153 386.67 T
(ently being displayed should be disabled because the con-) 203.46 386.67 T
(tainer is showing a modal dialog box. When) 153 372.67 T
0 F
(enable?) 370.11 372.67 T
2 F
( is tr) 403.32 372.67 T
(ue, any mode-) 424.52 372.67 T
(less dialog boxes should be r) 153 358.67 T
(e-enabled. The default method does) 292.12 358.67 T
(nothing.) 153 344.67 T
3 13 Q
(5.2.5  Functions in the OLE-SER) 126 311.33 T
(VER module) 287.8 311.33 T
2 11 Q
(The following functions ar) 126 291.67 T
(e implemented and exported by the OLE-Server) 254.72 291.67 T
(module. Y) 126 277.67 T
(ou may wish to use them in a server application.) 175.37 277.67 T
3 12 Q
(make-GUID) 126 243 T
0 11 Q
(Function) 463.45 243.67 T
4 9 Q
(make-GUID) 153 223 T
5 F
(l) 207 223 T
(w1) 215.4 223 T
(w2) 232.79 223 T
(b1) 250.19 223 T
(b2) 264.92 223 T
(b3) 279.66 223 T
(b4) 294.39 223 T
(b5) 309.12 223 T
(b6) 323.86 223 T
(b7) 338.59 223 T
(b8) 353.32 223 T
4 F
( =>) 362.65 223 T
5 F
(ID) 384.26 223 T
2 11 Q
(Cr) 153 202.67 T
(eates an object r) 164.95 202.67 T
(epr) 241.93 202.67 T
(esenting a globally unique identi\336er \050GUID\051 fr) 257.96 202.67 T
(om) 483.55 202.67 T
(the hexadecimal ar) 153 188.67 T
(guments.) 244.74 188.67 T
(All server applications must be r) 153 168.67 T
(egister) 311.28 168.67 T
(ed in the W) 343.53 168.67 T
(indows r) 399.03 168.67 T
(egistry with) 442.09 168.67 T
(a unique \050and \336xed\051 COM class ID, so that clients can invoke them.) 153 154.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "200" 96
%%Page: "201" 97
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.2) 332.47 677.67 T
(Implementing OLE compound document servers) 353.85 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(201) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(Class IDs ar) 135 640.67 T
(e GUIDs. T) 192.86 640.67 T
(o give your server application its class ID, you) 245.95 640.67 T
(must generate a GUID for it.) 135 626.67 T
(The) 135 606.67 T
0 F
(ID) 156.16 606.67 T
2 F
( value is an instance of the class) 168.38 606.67 T
4 9.5 Q
(<REFGUID>) 324.72 606.67 T
2 11 Q
(, which has the alias) 376.02 606.67 T
4 9.5 Q
(<REFCLSID>) 135 592.67 T
2 11 Q
(. The) 192 592.67 T
4 9.5 Q
(<embeddable-frame>) 218.66 592.67 T
2 11 Q
( class\325s r) 321.26 592.67 T
(equir) 361.55 592.67 T
(ed init-keywor) 386.96 592.67 T
(d) 458.58 592.67 T
4 9.5 Q
(class-id:) 135 578.67 T
2 11 Q
( expects an object of this class.) 186.3 578.67 T
(The) 135 558.67 T
4 9.5 Q
(make-GUID) 156.16 558.67 T
2 11 Q
( function cr) 207.46 558.67 T
(eates the C str) 262.77 558.67 T
(uctur) 330.87 558.67 T
(e necessary to r) 356.76 558.67 T
(epr) 431.13 558.67 T
(esent a) 447.15 558.67 T
(GUID. However) 135 544.67 T
(, it does) 214.29 544.67 T
0 F
(not) 254.74 544.67 T
2 F
( cr) 269.4 544.67 T
(eate the unique hexadecimal values that) 281.18 544.67 T
(constitute the GUID. Y) 135 530.67 T
(ou must do that with a once-only invocation of a) 244.57 530.67 T
(special utility pr) 135 516.67 T
(ogram pr) 214.11 516.67 T
(ovided with Harlequin Dylan called) 259.3 516.67 T
4 9.5 Q
(create-) 437.92 516.67 T
(id) 135 502.67 T
2 11 Q
(.) 146.4 502.67 T
(T) 135 482.67 T
(o cr) 140.73 482.67 T
(eate a GUID value, r) 158.52 482.67 T
(un) 257.64 482.67 T
4 9.5 Q
(create-id) 273.42 482.67 T
2 11 Q
( utility at an MS-DOS pr) 324.72 482.67 T
(ompt.) 442.52 482.67 T
(The utility takes a single integer ar) 135 468.67 T
(gument, which is the number of) 302.76 468.67 T
(GUIDs to generate. \050The default is one GUID.\051) 135 454.67 T
(The utility writes the GUIDs it generates to the standar) 135 434.67 T
(d output in the) 401.6 434.67 T
(form of string literals that can be pasted into Dylan sour) 135 420.67 T
(ce code.) 407.12 420.67 T
(Given the following value fr) 135 400.67 T
(om) 272.33 400.67 T
4 9.5 Q
(create-id) 290.8 400.67 T
2 11 Q
(:) 342.1 400.67 T
4 9 Q
(MS-DOS> create-id) 145.8 380 T
("{113f2c00-f87b-11cf-89fd-02070119f639}") 145.8 369 T
2 11 Q
(you need to split the value into parts as follows, and for each add the) 135 350.67 T
(pr) 135 336.67 T
(e\336x #x. For example:) 145.76 336.67 T
4 9 Q
(define constant $my-class-ID =) 145.8 316 T
(make-GUID\050#x113f2c00, #xf87b, #x11cf, #x89, #xfd, #x02, #x07,) 156.6 305 T
(#x01, #x19, #xf6, #x39\051;) 210.6 294 T
2 11 Q
(See \322GUIDs: Globally Unique Identi\336ers\323 on page 96 for mor) 135 273.67 T
(e on) 432.18 273.67 T
(GUIDs and when to use) 135 259.67 T
4 9.5 Q
(make-GUID) 254.61 259.67 T
2 11 Q
(.) 305.91 259.67 T
3 12 Q
(istream-re) 108 225 T
(write) 155.45 225 T
0 11 Q
(Function) 445.45 225.67 T
4 9 Q
(istream-rewrite \050 stream :: <LPSTREAM> \051 => \050\051) 135 205 T
2 11 Q
(Rewind) 135 184.67 T
0 F
(str) 175.87 184.67 T
(eam) 187.89 184.67 T
2 F
( to its beginning and set its size to 0 in pr) 205.61 184.67 T
(eparation for) 403.77 184.67 T
(writing new data.) 135 170.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "201" 97
%%Page: "202" 98
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(The OLE-Server and OLE-Control-Framework Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(202) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 12 Q
0 X
(istream-write-integ) 126 640 T
(er) 214.13 640 T
0 11 Q
(Function) 463.45 640.67 T
4 9 Q
(istream-write-integer \050stream :: <LPSTREAM>, value :: <integer>\051) 153 620 T
(=> \050\051) 153 609 T
(istream-write-int16  \050stream :: <LPSTREAM>, value :: <integer>\051) 153 590 T
(=> \050\051) 153 579 T
2 11 Q
(W) 153 558.67 T
(rite an integer to the OLE data str) 163.19 558.67 T
(eam. The \336rst function writes any) 325.57 558.67 T
4 9.5 Q
(<integer>) 153 544.67 T
2 11 Q
( as a 32-bit value, while the second writes only 16 bits.) 204.3 544.67 T
3 12 Q
(istream-read-integ) 126 510 T
(er) 211.94 510 T
0 11 Q
(Function) 463.45 510.67 T
4 9 Q
(istream-read-integer \050 stream :: <LPSTREAM> \051 => value ::) 153 490 T
(<integer>) 153 479 T
2 11 Q
(Read a value written by) 153 458.67 T
4 9.5 Q
(istream-write-integer) 271.67 458.67 T
2 11 Q
(.) 390.55 458.67 T
3 12 Q
(istream-read-int16) 126 424 T
0 11 Q
(Function) 463.45 424.67 T
4 9 Q
(istream-read-int16 \050 stream :: <LPSTREAM> \051 => value :: <integer>) 153 404 T
2 11 Q
(Read a value written by) 153 383.67 T
4 9.5 Q
(istream-write-int16) 271.67 383.67 T
2 11 Q
(.) 379.97 383.67 T
3 12 Q
(OLE-util-Create-Stream) 126 349 T
0 11 Q
(Function) 463.45 349.67 T
4 9 Q
-1.12 (OLE-util-Create-Stream \050) 153 329 P
5 F
-0.46 (storage) 281.48 329 P
4 F
-1.12 ( :: <LPSTORAGE>,) 310.99 329 P
5 F
-0.46 (name) 399.44 329 P
4 F
-1.12 ( :: <LPOLESTR>,) 420.94 329 P
(#key) 153 318 T
5 F
(mode) 180 318 T
4 F
( \051 =>) 201.5 318 T
5 F
(str) 233.9 318 T
(eam) 244.74 318 T
4 F
( :: <LPSTREAM>) 261.23 318 T
2 11 Q
(Cr) 153 297.67 T
(eate a storage str) 164.95 297.67 T
(eam. This would be used in a method for) 246.2 297.67 T
4 9.5 Q
(OLE-part-) 448.38 297.67 T
(Create-Streams) 153 283.67 T
2 11 Q
(, described above. The) 232.8 283.67 T
0 F
(mode) 343.94 283.67 T
2 F
( keywor) 367.17 283.67 T
(d defaults to:) 406.74 283.67 T
4 9 Q
(logior\050$STGM-READWRITE, $STGM-SHARE-EXCLUSIVE, $STGM-CREATE\051) 153 263 T
2 11 Q
(For an explanation of those constants, see the OLE documentation for) 153 242.67 T
(the method) 153 228.67 T
4 9.5 Q
(IStorage::CreateStream) 211.45 228.67 T
2 11 Q
(.) 336.85 228.67 T
3 12 Q
(OLE-util-open-stream) 126 194 T
0 11 Q
(Function) 463.45 194.67 T
4 9 Q
(OLE-util-open-stream \050) 153 174 T
5 F
(storage) 271.8 174 T
4 F
( :: <LPSTORAGE>,) 301.3 174 T
5 F
(name) 393.1 174 T
4 F
( :: <LPOLESTR>,) 414.6 174 T
(#key) 153 163 T
5 F
(mode) 180 163 T
4 F
( \051 =>) 201.5 163 T
5 F
(str) 233.9 163 T
(eam) 244.74 163 T
4 F
( :: <LPSTREAM>) 261.23 163 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "202" 98
%%Page: "203" 99
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.2) 332.47 677.67 T
(Implementing OLE compound document servers) 353.85 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(203) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(Open a storage str) 135 640.67 T
(eam. This would be used in a method for) 223.56 640.67 T
4 9.5 Q
(OLE-part-) 425.74 640.67 T
(Open-Streams) 135 626.67 T
2 11 Q
(, described above. The) 203.4 626.67 T
0 F
(mode) 314.54 626.67 T
2 F
( option defaults to:) 337.77 626.67 T
4 9 Q
(logior\050$STGM-READWRITE,$STGM-SHARE-EXCLUSIVE\051) 135 606 T
3 12 Q
(OLE-util-set-status-te) 108 573 T
(xt) 207.91 573 T
0 11 Q
(Function) 445.45 573.67 T
4 9 Q
(OLE-util-set-status-text) 135 553 T
5 F
(obj) 270 553 T
4 F
( :: <ole-server-framework>,) 282.83 553 T
5 F
(text) 434.03 553 T
4 F
( ::) 449.53 553 T
(false-or\050<string>\051\051 =>) 135 542 T
5 F
(status) 259.2 542 T
4 F
( :: <HRESULT>) 284.2 542 T
2 11 Q
-0.29 (Display the given string in the container application\325s status bar) 135 521.67 P
-0.29 (, or clear) 442.33 521.67 P
(the status bar if) 135 507.67 T
0 F
(text) 212.68 507.67 T
2 F
( is) 229.79 507.67 T
4 9.5 Q
(#f) 243.15 507.67 T
2 11 Q
( or the empty string.) 254.55 507.67 T
(T) 135 487.67 T
(ypically this would be used in a window callback function to r) 140.75 487.67 T
(espond) 443.73 487.67 T
(to a) 135 473.67 T
4 9.5 Q
($WM-MENUSELECT) 155.59 473.67 T
2 11 Q
( message by showing a description of the menu) 235.39 473.67 T
(item. The r) 135 459.67 T
(eturned value could be one of:) 187.58 459.67 T
4 9.5 Q
($S-OK) 135 439.67 T
2 11 Q
(Whole text successfully displayed. Satis\336es the pr) 216 439.67 T
(edi-) 457.05 439.67 T
(cate) 216 425.67 T
4 9.5 Q
(SUCCEEDED?) 237.99 425.67 T
2 11 Q
(.) 294.99 425.67 T
4 9.5 Q
($S-TRUNCATED) 135 405.67 T
2 11 Q
(Displayed part of message too long to \336t. Satis\336es the) 216 405.67 T
(pr) 216 391.67 T
(edicate) 226.76 391.67 T
4 9.5 Q
(SUCCEEDED?) 263.94 391.67 T
2 11 Q
(.) 320.94 391.67 T
4 9.5 Q
($E-FAIL) 135 371.67 T
2 11 Q
( Container does not support a status bar) 216 371.67 T
(. Satis\336es the) 410.12 371.67 T
(pr) 216 357.67 T
(edicate) 226.76 357.67 T
4 9.5 Q
(FAILED?) 263.94 357.67 T
2 11 Q
(.) 303.84 357.67 T
4 9.5 Q
($OLE-E-NOT-INPLACEACTIVE) 135 331.67 T
2 11 Q
(Not r) 216 313.67 T
(unning in-place active. Satis\336es the pr) 241.74 313.67 T
(edicate) 426.11 313.67 T
4 9.5 Q
(FAILED?) 216 299.67 T
2 11 Q
(.) 255.9 299.67 T
-0.21 (A string of type) 135 279.67 P
4 9.5 Q
-0.43 (<LPOLESTR>) 213.29 279.67 P
2 11 Q
-0.21 ( is pr) 270.29 279.67 P
-0.21 (eferr) 294 279.67 P
-0.21 (ed, but any other type of) 316.69 279.67 P
4 9.5 Q
-0.43 (<string>) 437.86 279.67 P
2 11 Q
(will be automatically converted. Thus, if a literal is being used, you) 135 265.67 T
(might want to call) 135 251.67 T
4 9.5 Q
(OLESTR) 226.06 251.67 T
2 11 Q
( on it to cache the conversion.) 260.26 251.67 T
3 12 Q
(OLE-util-star) 108 217 T
(ted-b) 167.78 217 T
(y-OLE?) 191.65 217 T
0 11 Q
(Function) 445.45 217.67 T
4 9 Q
(OLE-util-started-by-OLE? \050\051 =>) 135 197 T
5 F
(started-by-ole?) 302.4 197 T
2 11 Q
(Returns) 135 176.67 T
4 9.5 Q
(#t) 176 176.67 T
2 11 Q
( if the pr) 187.4 176.67 T
(ogram was initiated by OLE;) 228.53 176.67 T
4 9.5 Q
(#f) 371 176.67 T
2 11 Q
( if r) 382.4 176.67 T
(unning by itself.) 399.02 176.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "203" 99
%%Page: "204" 100
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(The OLE-Server and OLE-Control-Framework Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(204) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 12 Q
0 X
(OLE-util-container) 126 640 T
(-name) 211.66 640 T
0 11 Q
(Function) 463.45 640.67 T
4 9 Q
(OLE-util-container-name) 153 620 T
5 F
(obj) 282.6 620 T
4 F
( :: <ole-server-framework> =>) 295.43 620 T
(\050) 153 609 T
5 F
(application) 158.4 609 T
4 F
( :: false-or\050<string>\051,) 204.91 609 T
5 F
(document) 334.51 609 T
4 F
( :: false-or\050<string>\051\051) 373.52 609 T
2 11 Q
(Returns the name of the container application pr) 153 588.67 T
(ogram \050or) 388.62 588.67 T
4 9.5 Q
(#f) 439.81 588.67 T
2 11 Q
( if not r) 451.21 588.67 T
(un-) 486.58 588.67 T
-0.14 (ning under OLE or if called too soon\051 and the name of the container doc-) 153 574.67 P
(ument \050or) 153 560.67 T
4 9.5 Q
(#f) 204.12 560.67 T
2 11 Q
( if not applicable\051.) 215.52 560.67 T
(This will not have meaningful data until the server is activated, so it) 153 540.67 T
(should typically be called fr) 153 526.67 T
(om the) 287.98 526.67 T
4 9.5 Q
(OLE-part-open-out) 324.46 526.67 T
2 11 Q
( or) 421.36 526.67 T
4 9.5 Q
(OLE-part-) 437.21 526.67 T
(insert-menus) 153 512.67 T
2 11 Q
( methods.) 221.4 512.67 T
(One use for this is that when r) 153 492.67 T
(unning in an out-of-place activation, the) 299.44 492.67 T
(\322Exit\323 menu item should say \322Exit to <container) 153 478.67 T
(-application-name>\323.) 388.47 478.67 T
3 12 Q
(OLE-util-translate-accelerator) 126 444 T
0 11 Q
(Function) 463.45 444.67 T
4 9 Q
(OLE-util-translate-accelerator) 153 424 T
5 F
(obj) 320.4 424 T
4 F
( :: false-or\050<ole-server-) 333.23 424 T
(framework>\051,) 153 413 T
5 F
(msg) 223.2 413 T
4 F
( :: <LPMSG> \051 =>) 239.19 413 T
5 F
(handled?) 330.99 413 T
4 F
( :: <boolean>) 367 413 T
2 11 Q
-0.09 (If the pr) 153 392.67 P
-0.09 (ogram is r) 191.7 392.67 P
-0.09 (unning as an in-place activation and the window mes-) 240.82 392.67 P
(sage is a keypr) 153 378.67 T
(ess which is an accelerator key for the container applica-) 224.42 378.67 T
-0.15 (tion, then the corr) 153 364.67 P
-0.15 (esponding command is posted to the container and) 239.05 364.67 P
4 9.5 Q
-0.31 (#t) 490 364.67 P
2 11 Q
(is r) 153 350.67 T
(eturned. Otherwise,) 167.76 350.67 T
4 9.5 Q
(#f) 267.54 350.67 T
2 11 Q
( is r) 278.94 350.67 T
(eturned, indicating that the message) 296.45 350.67 T
(should be passed on to) 153 336.67 T
4 9.5 Q
(DispatchMessage) 267.16 336.67 T
2 11 Q
(. This should be used in the) 352.66 336.67 T
(server) 153 322.67 T
(\325s event loop after handling the server) 183.92 322.67 T
(\325s own accelerators, like) 369.19 322.67 T
(this:) 153 308.67 T
4 9 Q
(while \050 GetMessage\050msg, $NULL-HWND, 0, 0\051 \051) 153 288 T
(// Check the server\325s accelerator keys first:) 163.8 277 T
(if \050zero?\050TranslateAccelerator\050msg.hwnd-value,) 163.8 266 T
(*my-accelerator-table*,) 336.6 255 T
(msg\051\051) 336.6 244 T
(// Check the container\325s accelerator keys:) 174.6 233 T
(& ~ OLE-util-translate-accelerator\050*server-object*, msg\051\051) 185.4 222 T
(// Message is not an accelerator key.) 190.8 211 T
(TranslateMessage\050msg\051; // Translates virtual key codes) 190.8 200 T
(DispatchMessage\050msg\051;  // Dispatches message to window) 190.8 189 T
(end if;) 163.8 178 T
(end while;) 153 167 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "204" 100
%%Page: "205" 101
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.2) 332.47 677.67 T
(Implementing OLE compound document servers) 353.85 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(205) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 12 Q
0 X
(OLE-util-current-siz) 108 640 T
(e) 199.94 640 T
0 11 Q
(Function) 445.45 640.67 T
4 9 Q
(OLE-util-current-size) 135 620 T
5 F
(obj) 253.8 620 T
4 F
( => \050) 266.63 620 T
5 F
(width) 293.63 620 T
4 F
(,) 317.64 620 T
5 F
(height) 328.44 620 T
4 F
(\051) 353.44 620 T
2 11 Q
(Return the curr) 135 599.67 T
(ent size of the space allocated to the object in the con-) 209.35 599.67 T
(tainer) 135 585.67 T
(, as two integers r) 162.49 585.67 T
(epr) 248.17 585.67 T
(esenting the number of pixels. These ar) 264.2 585.67 T
(e the) 454.34 585.67 T
(same values that would have been passed in the most r) 135 571.67 T
(ecent call to) 402.75 571.67 T
4 9.5 Q
(OLE-) 462.79 571.67 T
(part-requested-size) 135 557.67 T
2 11 Q
( or) 243.3 557.67 T
4 9.5 Q
(OLE-part-change-size) 259.15 557.67 T
2 11 Q
(.) 373.15 557.67 T
3 12 Q
(OLE-util-HIMETRIC-siz) 108 523 T
(e) 213.6 523 T
0 11 Q
(Function) 445.45 523.67 T
4 9 Q
(OLE-util-HIMETRIC-size \050) 135 503 T
5 F
(obj) 264.6 503 T
4 F
( :: <ole-server-framework>\051 => \050) 277.43 503 T
5 F
(width) 450.23 503 T
4 F
(:: <integer>,) 135 492 T
5 F
(height) 210.6 492 T
4 F
( :: <integer>\051) 235.6 492 T
2 11 Q
(Returns the document window size \050as fr) 135 471.67 T
(om) 335.17 471.67 T
4 9.5 Q
(OLE-util-current-size) 353.64 471.67 T
2 11 Q
(\051) 473.34 471.67 T
(converted to) 135 457.67 T
4 9.5 Q
(HIMETRIC) 198.79 457.67 T
2 11 Q
( coor) 244.39 457.67 T
(dinates. This is pr) 268.18 457.67 T
(obably only useful in a) 354.16 457.67 T
(method for) 135 443.67 T
4 9.5 Q
(OLE-part-get-data) 192.21 443.67 T
2 11 Q
(.) 289.11 443.67 T
3 12 Q
(OLE-util-c) 108 409 T
(lose-ser) 154.84 409 T
(ver) 192.67 409 T
0 11 Q
(Function) 445.45 409.67 T
4 9 Q
(OLE-util-close-server) 135 389 T
5 F
(obj) 253.8 389 T
4 F
( :: <ole-server-framework> =>) 266.63 389 T
2 11 Q
(Disconnects the object fr) 135 368.67 T
(om the container application, if it is still con-) 253.2 368.67 T
(nected to one. Does nothing otherwise. The r) 135 354.67 T
(eturn value is not useful in) 352.2 354.67 T
(this context.) 135 340.67 T
3 12 Q
(OLE-util-in-place-active?) 108 306 T
0 11 Q
(Function) 445.45 306.67 T
4 9 Q
(OLE-util-in-place-active? \050) 135 286 T
5 F
(obj) 280.8 286 T
4 F
( :: <ole-server-framework>\051 =>) 293.63 286 T
5 F
(active?) 135 275 T
4 F
( :: <boolean>) 163.49 275 T
2 11 Q
(Returns tr) 135 254.67 T
(ue if curr) 183.84 254.67 T
(ently r) 228.12 254.67 T
(unning in-place active.) 259.7 254.67 T
3 12 Q
(OLE-util-vie) 108 220 T
(w-c) 163.09 220 T
(hang) 179.41 220 T
(ed) 203.02 220 T
0 11 Q
(Function) 445.45 220.67 T
4 9 Q
(OLE-util-view-changed \050) 135 200 T
5 F
(obj) 259.2 200 T
4 F
( :: <ole-server-framework>\051 => \050\051) 272.03 200 T
2 11 Q
(T) 135 179.67 T
(ell the container that the server) 140.73 179.67 T
(\325s image data has changed. This will) 292.26 179.67 T
-0.29 (ensur) 135 165.67 P
-0.29 (e that) 162.12 165.67 P
4 9.5 Q
-0.61 (OLE-part-get-data) 191.37 165.67 P
2 11 Q
-0.29 ( will be invoked to copy the image to the) 288.27 165.67 P
(container) 135 151.67 T
(.) 179.78 151.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "205" 101
%%Page: "206" 102
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(The OLE-Server and OLE-Control-Framework Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(206) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 12 Q
0 X
(re) 126 640 T
(v) 135.17 640 T
(oke-registration) 140.35 640 T
0 11 Q
(Function) 463.45 640.67 T
4 9 Q
(revoke-registration\050) 153 620 T
5 F
(factory) 261 620 T
4 F
( :: <class-factory>\051 => \050\051) 290.01 620 T
2 11 Q
(Befor) 153 599.67 T
(e the pr) 178.81 599.67 T
(ogram terminates, call this function on the factory instance) 215.59 599.67 T
(to cancel the r) 153 585.67 T
(egistration of the server object instance. In other wor) 220.39 585.67 T
(ds,) 475.4 585.67 T
-0.08 (this makes the object no longer available for clients to connect to it. \050The) 153 571.67 P
(class is still available, but a new copy of the pr) 153 557.67 T
(ogram will be initiated) 377.5 557.67 T
(instead of using this one.\051) 153 543.67 T
(This function does nothing if the ar) 153 523.67 T
(gument is) 323.83 523.67 T
4 9.5 Q
(#f) 374.91 523.67 T
2 11 Q
( or) 386.31 523.67 T
4 9.5 Q
($null-instance) 402.17 523.67 T
2 11 Q
(, or) 481.96 523.67 T
(if the factory was not r) 153 509.67 T
(egister) 262.45 509.67 T
(ed anyway) 294.7 509.67 T
(.) 347.03 509.67 T
3 12 Q
(<c) 126 475 T
(lass-factor) 137.04 475 T
(y>) 186.9 475 T
0 11 Q
(Open instantiable class) 400.92 475.67 T
2 F
-0.27 (This class pr) 153 453.67 P
-0.27 (ovides an implementation of the COM) 212.65 453.67 P
4 9.5 Q
-0.56 (IClassFactory) 400.95 453.67 P
2 11 Q
-0.27 ( inter-) 475.05 453.67 P
(face. Making an instance of it causes it to be r) 153 439.67 T
(egister) 372.07 439.67 T
(ed with the system) 404.32 439.67 T
(automatically) 153 425.67 T
(, for use by potential clients.) 218.41 425.67 T
(The class supports the following init-keywor) 153 405.67 T
(ds:) 370.3 405.67 T
4 9.5 Q
(clsid:) 153 385.67 T
2 11 Q
(The COM Class ID that identi\336es the object the server) 234 385.67 T
-0.53 (pr) 234 371.67 P
-0.53 (ovides. Requir) 244.76 371.67 P
-0.53 (ed. This ID can be r) 314.56 371.67 P
-0.53 (epr) 405.9 371.67 P
-0.53 (esented either as) 421.93 371.67 P
(a string of 32 hexadecimal digits in the following for-) 234 357.67 T
(mat) 234 343.67 T
("{) 239.5 325.67 T
0 F
(xxxxxxxx) 247.24 325.67 T
2 F
(-) 291.24 325.67 T
0 F
(xxxx) 294.91 325.67 T
2 F
(-) 316.91 325.67 T
0 F
(xxxx) 320.57 325.67 T
2 F
(-) 342.57 325.67 T
0 F
(xxxx) 346.23 325.67 T
2 F
(-) 368.23 325.67 T
0 F
(xxxxxxxxxxxx) 371.9 325.67 T
2 F
(}") 437.9 325.67 T
(That is, wher) 234 307.67 T
(e each) 297.34 307.67 T
0 F
(x) 330.16 307.67 T
2 F
( is a hexadecimal digit. For exam-) 335.66 307.67 T
(ple:) 234 293.67 T
("{e90f09e0-43db-1) 239.5 275.67 T
(1d0-8a04-020701) 324.97 275.67 T
(19f639}") 404.41 275.67 T
(Alternatively) 153 255.67 T
(, the ID can be a) 216.23 255.67 T
4 9.5 Q
(<REFCLSID>) 296.59 255.67 T
2 11 Q
(, as r) 353.59 255.67 T
(eturned fr) 376.15 255.67 T
(om) 424.94 255.67 T
4 9.5 Q
(make-GUID) 443.41 255.67 T
2 11 Q
(.) 494.71 255.67 T
(Y) 234 237.67 T
(ou can get the ID value by generating a GUID with) 240.32 237.67 T
(Harlequin Dylan\325s) 234 223.67 T
4 9.5 Q
(create-id) 326.82 223.67 T
2 11 Q
( utility) 378.12 223.67 T
(. See \322Cr) 409.17 223.67 T
(eating) 451.18 223.67 T
(GUID numbers\323 on page 97.) 234 209.67 T
4 9.5 Q
(class:) 153 189.67 T
2 11 Q
(The Dylan class of the server object to be cr) 234 189.67 T
(eated \050the) 443.22 189.67 T
(user) 234 175.67 T
(-de\336ned subclass of) 254.71 175.67 T
4 9.5 Q
(<ole-server-framework>) 353.62 175.67 T
2 11 Q
(\051) 479.02 175.67 T
(when the container r) 234 161.67 T
(equests it. Requir) 334.5 161.67 T
(ed.) 418.54 161.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "206" 102
%%Page: "207" 103
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.2) 332.47 677.67 T
(Implementing OLE compound document servers) 353.85 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(207) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 9.5 Q
0 X
(args:) 135 640.67 T
2 11 Q
(Optional sequence of initialization ar) 216 640.67 T
(guments to be) 395.71 640.67 T
(passed to) 216 626.67 T
4 9.5 Q
(make) 264.52 626.67 T
2 11 Q
( when instantiating the) 287.32 626.67 T
4 9.5 Q
(class:) 402.17 626.67 T
2 11 Q
( object.) 436.37 626.67 T
(The default is to pass the same ar) 216 612.67 T
(guments as for the) 377.18 612.67 T
4 9.5 Q
(<class-factory>) 216 598.67 T
2 11 Q
( \050) 301.5 598.67 T
4 9.5 Q
(<ole-server-framework>) 307.91 598.67 T
2 11 Q
( accepts) 433.31 598.67 T
(and ignor) 216 584.67 T
(es those that ar) 263.24 584.67 T
(e only for the factory) 336.08 584.67 T
(, and) 436.22 584.67 T
4 9.5 Q
(<class-factory>) 216 570.67 T
2 11 Q
( ignor) 301.5 570.67 T
(es any that it does not r) 330.12 570.67 T
(ecog-) 443.23 570.67 T
(nize.\051 Note that) 216 556.67 T
4 9.5 Q
(<ole-server-framework>) 294.11 556.67 T
2 11 Q
( needs) 419.51 556.67 T
4 9.5 Q
(clsid:) 216 542.67 T
2 11 Q
( to be speci\336ed.) 250.2 542.67 T
4 9.5 Q
(server-context:) 135 522.67 T
2 11 Q
(Optional context in which the server will be r) 220.5 522.67 T
(unning.) 440.48 522.67 T
(The value should be one of the following constants:) 216 508.67 T
4 9.5 Q
($CLSCTX-LOCAL-SERVER) 216 490.67 T
2 11 Q
( \321 Server in separate pr) 330 490.67 T
(ocess) 447.07 490.67 T
(\050the default\051.) 216 476.67 T
4 9.5 Q
($CLSCTX-INPROC-SERVER) 216 458.67 T
2 11 Q
( \321 In-pr) 335.7 458.67 T
(ocess server) 376.73 458.67 T
(.) 434.26 458.67 T
4 9.5 Q
($CLSCTX-INPROC-HANDLER) 216 440.67 T
2 11 Q
( \321 In-pr) 341.4 440.67 T
(ocess handler) 382.43 440.67 T
(.) 447.69 440.67 T
4 9.5 Q
($CLSCTX-LOCAL-SERVER) 216 422.67 T
2 11 Q
( causes the factory to be r) 330 422.67 T
(egis-) 452.56 422.67 T
(ter) 216 408.67 T
(ed for external clients;) 229 408.67 T
4 9.5 Q
($CLSCTX-INPROC-SERVER) 339.21 408.67 T
2 11 Q
-0.4 (could be used to suppr) 216 394.67 P
-0.4 (ess r) 325.73 394.67 P
-0.4 (egistration if the factory was) 346.83 394.67 P
(only to be used within the same pr) 216 380.67 T
(ocess.) 384.33 380.67 T
4 9.5 Q
(connection-flags:) 135 354.67 T
2 11 Q
(Optional connection \337ags, contr) 216 336.67 T
(olling whether mor) 371.19 336.67 T
(e) 465.13 336.67 T
(than one client is allowed to invoke the same class fac-) 216 322.67 T
-0.3 (tory \050and hence use the same server pr) 216 308.67 P
-0.3 (ocess\051. The value) 401.53 308.67 P
(is one of the following OLE constants:) 216 294.67 T
4 9.5 Q
($REGCLS-SINGLEUSE) 216 276.67 T
2 11 Q
(   - only one connection allowed) 312.9 276.67 T
(\050default\051) 216 262.67 T
4 9.5 Q
-0.2 ($REGCLS-MULTIPLEUSE) 216 244.67 P
2 11 Q
-0.1 ( - multiple connections permitted) 324.3 244.67 P
4 9.5 Q
($REGCLS-MULTI-SEPARATE) 216 226.67 T
2 11 Q
( - multiple connect, separate) 341.4 226.67 T
(contr) 216 212.67 T
(ol) 241.02 212.67 T
-0.23 (For a further explanation of these constants, see the OLE documentation) 135 192.67 P
(for function) 135 178.67 T
4 9.5 Q
(CoRegisterClassObject) 195.29 178.67 T
2 11 Q
(.) 314.99 178.67 T
(Any other keywor) 135 158.67 T
(d ar) 224.01 158.67 T
(guments ar) 243.13 158.67 T
(e passed in the) 297.91 158.67 T
4 9.5 Q
(make) 372.47 158.67 T
2 11 Q
( call when the) 395.27 158.67 T
(Dylan class is instantiated.) 135 144.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "207" 103
%%Page: "208" 104
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(The OLE-Server and OLE-Control-Framework Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(208) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(Y) 153 640.67 T
(ou can subclass) 159.32 640.67 T
4 9.5 Q
(<class-factory>) 237.29 640.67 T
2 11 Q
( \050using) 322.79 640.67 T
4 9.5 Q
(define) 358.97 640.67 T
(COM-interface) 395.92 640.67 T
2 11 Q
(\051 if) 470.02 640.67 T
(desir) 153 626.67 T
(ed for adding additional functionality \050such as overriding the) 177 626.67 T
4 9.5 Q
(IClassFactory/LockServer) 153 612.67 T
2 11 Q
( and) 289.8 612.67 T
4 9.5 Q
(terminate) 313.92 612.67 T
2 11 Q
( methods\051.) 365.22 612.67 T
3 13 Q
(5.2.6  API hooks) 126 579.33 T
4 9 Q
(in-place-frame-info \050obj :: <ole-server-framework>\051 => pInfo ::) 153 559 T
(<LPOLEINPLACEFRAMEINFO>) 153 548 T
2 11 Q
(Returns the container) 126 527.67 T
(\325s frame information str) 231.41 527.67 T
(uctur) 346.41 527.67 T
(e pointer) 372.29 527.67 T
(.) 414.92 527.67 T
4 9 Q
(container-IOleInPlaceFrame \050obj :: <ole-server-framework>\051 =>) 153 507 T
(pFrame :: <LPOLEINPLACEFRAME>) 153 496 T
2 11 Q
-0.32 (Returns the container) 126 475.67 P
-0.32 (\325s) 230.77 475.67 P
4 9.5 Q
-0.66 (IOleInPlaceFrame) 240.93 475.67 P
2 11 Q
-0.32 ( interface pointer) 332.13 475.67 P
-0.32 (. \050This is just a slot) 413.71 475.67 P
(accessor) 126 461.67 T
(, it does not call) 165.4 461.67 T
4 9.5 Q
(AddRef) 244.13 461.67 T
2 11 Q
( on the r) 278.33 461.67 T
(eturned value.\051 The pointer is null) 318.39 461.67 T
(when not in-place active.) 126 447.67 T
3 12 Q
(ser) 126 413 T
(ver) 140.87 413 T
(-IOleObject) 155.46 413 T
0 11 Q
(Function) 463.45 413.67 T
4 9 Q
(server-IOleObject \050obj :: <ole-server-framework>\051 => value ::) 153 393 T
(<IOleObject>;) 153 382 T
2 11 Q
-0.17 (Returns the server object\325s) 153 361.67 P
4 9.5 Q
-0.35 (IOleObject) 283.06 361.67 P
2 11 Q
-0.17 ( interface pointer) 340.06 361.67 P
-0.17 (. \050It does not call) 421.95 361.67 P
4 9.5 Q
(AddRef) 153 347.67 T
2 11 Q
(.\051) 187.2 347.67 T
3 12 Q
(container) 126 313 T
(-parent-windo) 170.11 313 T
(w) 235.03 313 T
0 11 Q
(Function) 463.45 313.67 T
4 9 Q
-0.9 (container-parent-window \050obj :: <ole-server-framework>\051 => window) 153 293 P
(:: <HWND>) 153 282 T
2 11 Q
(Returns the container) 153 261.67 T
(\325s window which is the par) 258.41 261.67 T
(ent of the embedded) 390.01 261.67 T
(part during in-place activation.) 153 247.67 T
3 12 Q
(hatc) 126 213 T
(h-windo) 146.15 213 T
(w) 183.73 213 T
0 11 Q
(Function) 463.45 213.67 T
4 9 Q
(hatch-window \050obj :: <ole-server-framework>\051 => window :: <HWND>) 153 193 T
2 11 Q
(Returns the hatch bor) 153 172.67 T
(der window pr) 257.76 172.67 T
(ovided by the server support) 331.04 172.67 T
(library for in-place activation.) 153 158.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "208" 104
%%Page: "209" 105
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.2) 332.47 677.67 T
(Implementing OLE compound document servers) 353.85 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(209) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 13 Q
0 X
(5.2.7  Err) 108 639.33 T
(or handling) 152.85 639.33 T
2 11 Q
(If an err) 108 619.67 T
(or occurs in an OLE pr) 146.53 619.67 T
(otocol operation, the OLE library signals a con-) 256.4 619.67 T
(dition of class) 108 605.67 T
4 9.5 Q
(<ole-error>) 177.95 605.67 T
2 11 Q
(. Y) 240.65 605.67 T
(ou can signal an) 252.47 605.67 T
4 9.5 Q
(<ole-error>) 333.89 605.67 T
2 11 Q
( yourself with the) 396.58 605.67 T
4 9.5 Q
(check-ole-status) 108 591.67 T
2 11 Q
( function.) 199.2 591.67 T
3 12 Q
(<ole-err) 108 557 T
(or>) 144.19 557 T
0 11 Q
(Open instantiable class) 382.92 557.67 T
2 F
(The class of OLE pr) 135 535.67 T
(otocol err) 229.84 535.67 T
(ors. It is subclass of) 276.04 535.67 T
4 9.5 Q
(<error>) 372.68 535.67 T
2 11 Q
(.) 412.58 535.67 T
3 12 Q
(ole-err) 108 501 T
(or) 138.44 501 T
(-status) 148.1 501 T
0 11 Q
(Function) 445.45 501.67 T
4 9 Q
(ole-error-status) 135 481 T
5 F
(ole-err) 226.8 481 T
(or) 253.13 481 T
4 F
( =>) 261.64 481 T
5 F
(status) 283.24 481 T
2 11 Q
-0.25 (Returns the OLE status code \050an instance of) 135 460.67 P
4 9.5 Q
-0.52 (<HRESULT>) 347.25 460.67 P
2 11 Q
-0.25 ( or) 398.55 460.67 P
4 9.5 Q
-0.52 (<SCODE>) 413.91 460.67 P
2 11 Q
-0.25 (\051 fr) 453.81 460.67 P
-0.25 (om) 467.78 460.67 P
(an instance of) 135 446.67 T
4 9.5 Q
(<ole-error>) 204.73 446.67 T
2 11 Q
(.) 267.43 446.67 T
3 12 Q
(ole-err) 108 412 T
(or) 138.44 412 T
(-conte) 148.1 412 T
(xt) 177.49 412 T
0 11 Q
(Function) 445.45 412.67 T
4 9 Q
(ole-error-context) 135 392 T
5 F
(ole-err) 232.2 392 T
(or) 258.53 392 T
4 F
( =>) 267.04 392 T
5 F
(function-name) 288.64 392 T
2 11 Q
(Returns a string identifying the function involved in the err) 135 371.67 T
(or) 423.57 371.67 T
(.) 433.11 371.67 T
(The) 135 351.67 T
0 F
(ole-err) 156.16 351.67 T
(or) 184.69 351.67 T
2 F
( ar) 193.85 351.67 T
(gument is an instance of) 206.25 351.67 T
4 9.5 Q
(<ole-error>) 327.06 351.67 T
2 11 Q
(.) 389.76 351.67 T
3 12 Q
(ole-err) 108 317 T
(or) 138.44 317 T
(-instance) 148.1 317 T
0 11 Q
(Function) 445.45 317.67 T
4 9 Q
(ole-error-instance) 135 297 T
5 F
(ole-err) 237.6 297 T
(or) 263.93 297 T
4 F
( =>) 272.44 297 T
5 F
(ole-interface) 294.04 297 T
2 11 Q
(Returns the OLE interface instance involved in the err) 135 276.67 T
(or) 396.47 276.67 T
(, or) 406.01 276.67 T
4 9.5 Q
(#f) 424.61 276.67 T
2 11 Q
(.) 436.01 276.67 T
(The) 135 256.67 T
0 F
(ole-err) 156.16 256.67 T
(or) 184.69 256.67 T
2 F
( ar) 193.85 256.67 T
(gument is an instance of) 206.25 256.67 T
4 9.5 Q
(<ole-error>) 327.06 256.67 T
2 11 Q
(.) 389.76 256.67 T
3 12 Q
(ole-err) 108 222 T
(or) 138.44 222 T
(-ar) 148.1 222 T
(gs) 160.55 222 T
0 11 Q
(Function) 445.45 222.67 T
4 9 Q
(ole-error-args) 135 202 T
5 F
(ole-err) 216 202 T
(or) 242.33 202 T
4 F
( =>) 250.84 202 T
5 F
(values) 272.44 202 T
2 11 Q
(Returns a sequence of other r) 135 181.67 T
(elevant values.) 276.47 181.67 T
(The) 135 161.67 T
0 F
(ole-err) 156.16 161.67 T
(or) 184.69 161.67 T
2 F
( ar) 193.85 161.67 T
(gument is an instance of) 206.25 161.67 T
4 9.5 Q
(<ole-error>) 327.06 161.67 T
2 11 Q
(.) 389.76 161.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "209" 105
%%Page: "210" 106
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(The OLE-Server and OLE-Control-Framework Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(210) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 12 Q
0 X
(c) 126 640 T
(hec) 131.39 640 T
(k-ole-status) 148.16 640 T
0 11 Q
(Function) 463.45 640.67 T
4 9 Q
(check-ole-status) 153 620 T
5 F
(status) 244.8 620 T
(context) 275.2 620 T
(instance) 310.1 620 T
4 F
( #rest) 343.6 620 T
5 F
(ar) 381.4 620 T
(gs) 389.74 620 T
4 F
( => \050\051) 398.24 620 T
2 11 Q
(Cr) 153 599.67 T
(eates an instance of) 164.95 599.67 T
4 9.5 Q
(<ole-error>) 261.71 599.67 T
2 11 Q
( and signals it, if) 324.41 599.67 T
0 F
(status) 406.93 599.67 T
2 F
( r) 433.82 599.67 T
(epr) 440.72 599.67 T
(esents an) 456.74 599.67 T
(err) 153 585.67 T
(or) 166.76 585.67 T
(.) 176.3 585.67 T
(In some contexts, the support library handles such err) 153 565.67 T
(ors by r) 414.59 565.67 T
(eporting) 451.45 565.67 T
0 F
(status) 153 551.67 T
2 F
( back to the container application. This is done using the macr) 179.88 551.67 T
(o) 480.4 551.67 T
4 9 Q
(returning-error-status ?) 163.8 531 T
5 F
(body) 293.4 531 T
4 F
( end) 313.24 531 T
2 11 Q
(The) 153 510.67 T
4 9.5 Q
(returning-error-status) 174.16 510.67 T
2 11 Q
( macr) 299.56 510.67 T
(o r) 326.56 510.67 T
(eturns) 339.46 510.67 T
4 9.5 Q
($S-OK) 373.11 510.67 T
2 11 Q
( if all of the) 401.61 510.67 T
0 F
(body) 459.05 510.67 T
2 F
(forms wer) 153 496.67 T
(e successfully executed, or the err) 202.73 496.67 T
(or status code if an) 365.65 496.67 T
4 9.5 Q
(<ole-) 460.03 496.67 T
(error>) 153 482.67 T
2 11 Q
( was signalled during execution of) 187.2 482.67 T
0 F
(body) 357.33 482.67 T
2 F
(, a Dylan body) 377.08 482.67 T
2 8.8 Q
(bnf) 448.24 479.92 T
2 11 Q
(.) 461.16 482.67 T
3 13 Q
(5.2.8  Registering OLE ser) 126 449.33 T
(ver applications) 258.24 449.33 T
2 11 Q
(Every OLE server application must be r) 126 429.67 T
(egister) 318.16 429.67 T
(ed in the W) 350.41 429.67 T
(indows system r) 405.91 429.67 T
(eg-) 485.73 429.67 T
(istry so that container applications can \336nd and invoke them.) 126 415.67 T
(One way to do this is by pr) 126 395.67 T
(eparing a r) 257.35 395.67 T
(egistration data \336le \050 and r) 309.94 395.67 T
(unning the) 438.54 395.67 T
(command "r) 126 381.67 T
(egedit /s sample.r) 185.92 381.67 T
(eg" to r) 274.76 381.67 T
(ecor) 309.47 381.67 T
(d the information in the r) 329.77 381.67 T
(egistry) 452.54 381.67 T
(.) 484.61 381.67 T
-0.06 (A simpler way is to have the application r) 126 361.67 P
-0.06 (egister itself. T) 328.8 361.67 P
-0.06 (o do this, the body of) 398.69 361.67 P
(the main application should have something like this wrapped ar) 126 347.67 T
(ound it:) 443.42 347.67 T
4 9 Q
(if \050OLE-util-register-only?\050\051\051 // just [un]register and terminate) 153 327 T
(register-ole-server\050class-id, prog-id, title-string,) 163.8 316 T
(short-name: short-name-string\051;) 271.8 305 T
(else // actually run the program) 153 294 T
(\311) 153 283 T
(end if;) 153 272 T
2 11 Q
-0.06 (When the application is wrapped in this code, if it is r) 126 251.67 P
-0.06 (un with the) 385.58 251.67 P
4 9.5 Q
-0.12 (/RegServer) 444.31 251.67 P
2 11 Q
-0.42 (option \050typically done as part of an installation script\051, it will just r) 126 237.67 P
-0.42 (egister itself) 443.31 237.67 P
-0.19 (and terminate, or if r) 126 223.67 P
-0.19 (un with the) 225.95 223.67 P
4 9.5 Q
-0.4 (/UnregServer) 284.29 223.67 P
2 11 Q
-0.19 ( option, it will try to unr) 352.69 223.67 P
-0.19 (egister) 468.99 223.67 P
-0.37 (itself and terminate. Otherwise,) 126 209.67 P
4 9.5 Q
-0.76 (OLE-util-register-only?) 280.66 209.67 P
2 11 Q
-0.37 ( r) 411.76 209.67 P
-0.37 (eturns) 418.29 209.67 P
4 9.5 Q
-0.76 (#f) 451.57 209.67 P
2 11 Q
-0.37 ( and the) 462.97 209.67 P
-0.15 (application will continue to r) 126 195.67 P
-0.15 (un. \050However) 266.09 195.67 P
-0.15 (, some of the Micr) 332.75 195.67 P
-0.15 (osoft documenta-) 419.1 195.67 P
(tion r) 126 181.67 T
(ecommends that a server should always r) 152.09 181.67 T
(egister itself anytime it is r) 353.84 181.67 T
(un,) 482.32 181.67 T
(and the) 126 167.67 T
4 9.5 Q
(/RegServer) 165.38 167.67 T
2 11 Q
( option should just mean that server should not do any-) 222.38 167.67 T
(thing else.\051) 126 153.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "210" 106
%%Page: "211" 107
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.2) 332.47 677.67 T
(Implementing OLE compound document servers) 353.85 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(21) 526.83 100 T
(1) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 12 Q
0 X
(OLE-util-register) 108 640 T
(-onl) 185.46 640 T
(y?) 203.36 640 T
0 11 Q
(Function) 445.45 640.67 T
4 9 Q
(OLE-util-register-only? \050\051 =>) 135 620 T
5 F
(r) 297 620 T
(egister?) 300.34 620 T
2 11 Q
(Returns) 135 599.67 T
4 9.5 Q
(#f) 176 599.67 T
2 11 Q
( unless the application\325s \336rst command-line ar) 187.4 599.67 T
(gument is any) 411.98 599.67 T
(of) 135 585.67 T
4 9.5 Q
(/RegServer) 147.42 585.67 T
2 11 Q
(,) 203.6 585.67 T
4 9.5 Q
(-RegServer) 209.1 585.67 T
2 11 Q
(,) 265.29 585.67 T
4 9.5 Q
(/UnregServer) 270.79 585.67 T
2 11 Q
( or) 339.19 585.67 T
4 9.5 Q
(-UnregServer) 355.04 585.67 T
2 11 Q
(. The com-) 422.63 585.67 T
(parison of the actual command-line ar) 135 571.67 T
(guments with these strings is not) 320.03 571.67 T
(case-sensitive.) 135 557.67 T
-0.02 (If the r) 135 537.67 P
-0.02 (esult is not false, the server application should just call) 167.23 537.67 P
4 9.5 Q
-0.05 (register-) 434.7 537.67 P
(ole-server) 135 523.67 T
2 11 Q
( and terminate without doing anything else.) 192 523.67 T
3 12 Q
(register) 108 489 T
(-ole-ser) 143.92 489 T
(ver) 179.56 489 T
0 11 Q
(Function) 445.45 489.67 T
4 9 Q
(register-ole-server class-id :: <REFCLSID>, prog-id :: <string>,) 135 469 T
(title-string :: <string>, #key full-name, short-name, app-name,) 135 458 T
(misc-status, verbs \051 => \050\051) 135 447 T
2 11 Q
-0.1 (Cr) 135 428.67 P
-0.1 (eates the W) 146.95 428.67 P
-0.1 (indows 95 and W) 202.19 428.67 P
-0.1 (indows NT system r) 286.34 428.67 P
-0.1 (egistry entries neces-) 384.51 428.67 P
-0.31 (sary for the curr) 135 414.67 P
-0.31 (ent application to be used as an embeddable OLE object.) 212.24 414.67 P
-0.1 (But if the application was invoked with) 135 394.67 P
4 9.5 Q
-0.2 (/UnregServer) 328.96 394.67 P
2 11 Q
-0.1 ( or) 397.36 394.67 P
4 9.5 Q
-0.2 (-UnregServer) 413.01 394.67 P
2 11 Q
-0.1 (,) 480.6 394.67 P
(this function will try to delete any r) 135 380.67 T
(egistry entries that belong to the) 306.78 380.67 T
(application.) 135 366.67 T
(The) 135 346.67 T
0 F
(class-id) 156.16 346.67 T
2 F
( ar) 189.36 346.67 T
(gument must have the same value as passed with the) 201.76 346.67 T
4 9.5 Q
(clsid:) 135 332.67 T
2 11 Q
( init-keywor) 169.2 332.67 T
(d to) 228.83 332.67 T
4 9.5 Q
(make) 250.64 332.67 T
2 11 Q
( on) 273.44 332.67 T
4 9.5 Q
(<class-factory>) 291.35 332.67 T
2 11 Q
(.) 376.85 332.67 T
(The) 135 312.67 T
0 F
(pr) 156.16 312.67 T
(og-id) 165.74 312.67 T
2 F
( ar) 188.35 312.67 T
(gument is a unique internal name for the class. It must) 200.75 312.67 T
(begin with a letter) 135 298.67 T
(. It cannot contain any spaces or punctuation except a) 222.63 298.67 T
(period \050.\051 character) 135 284.67 T
(, and it must not be mor) 226.63 284.67 T
(e than 39 characters long. In) 343.1 284.67 T
(or) 135 270.67 T
(der to ensur) 145.15 270.67 T
(e uniqueness, the r) 203.7 270.67 T
(ecommended format is:) 294.67 270.67 T
5 9 Q
(vendor-name) 145.8 250 T
4 F
(.) 198.32 250 T
5 F
(pr) 203.71 250 T
(oduct-name) 212.06 250 T
4 F
(.) 259.57 250 T
5 F
(version-number) 264.97 250 T
2 11 Q
(For example:) 135 229.67 T
4 9 Q
(AcmeWidgets.FrobMaster.2) 145.8 209 T
2 11 Q
(The) 135 188.67 T
0 F
(title-string) 156.16 188.67 T
2 F
( ar) 204.44 188.67 T
(gument will appear in a container) 216.84 188.67 T
(\325s \322insert object\323 dia-) 382.43 188.67 T
(log box to identify this server application.) 135 174.67 T
(The) 135 154.67 T
0 F
(full-name) 156.16 154.67 T
2 F
( keywor) 198.95 154.67 T
(d ar) 238.53 154.67 T
(gument is the full type name of the class.) 257.65 154.67 T
(Default value: the value of the) 135 140.67 T
0 F
(short-name) 284.43 140.67 T
2 F
( keywor) 334.54 140.67 T
(d.) 374.12 140.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "211" 107
%%Page: "212" 108
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(The OLE-Server and OLE-Control-Framework Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(212) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(The) 153 640.67 T
0 F
(short-name) 174.16 640.67 T
2 F
( keywor) 224.27 640.67 T
(d ar) 263.85 640.67 T
(gument is used for popup menus and the) 282.96 640.67 T
(Links dialog box. It must be a string of not mor) 153 626.67 T
(e than 15 characters in) 381.45 626.67 T
(length. Default value: the value of the) 153 612.67 T
0 F
(app-name) 338.91 612.67 T
2 F
( keywor) 382.3 612.67 T
(d.) 421.87 612.67 T
(The) 153 592.67 T
0 F
(app-name) 174.16 592.67 T
2 F
( keywor) 217.55 592.67 T
(d ar) 257.13 592.67 T
(gument is the name of the application servic-) 276.24 592.67 T
(ing the class, and is used in the Result text in dialog boxes. Default) 153 578.67 T
(value: the value of the \050r) 153 564.67 T
(equir) 271.13 564.67 T
(ed\051) 296.54 564.67 T
0 F
(title-string) 314.94 564.67 T
2 F
( ar) 363.22 564.67 T
(gument.) 375.62 564.67 T
(The) 153 544.67 T
0 F
(misc-status) 174.16 544.67 T
2 F
( keywor) 225.08 544.67 T
(d ar) 264.66 544.67 T
(gument speci\336es the value to be r) 283.78 544.67 T
(eturned by) 446.38 544.67 T
4 9.5 Q
(IOleObject::GetMiscStatus) 153 530.67 T
2 11 Q
(. The value is formed by using) 295.5 530.67 T
4 9.5 Q
(logior) 445.53 530.67 T
2 11 Q
( to) 479.73 530.67 T
(combine) 153 516.67 T
4 9.5 Q
($OLEMISC-) 197.31 516.67 T
2 11 Q
(\311 constants. Default value: 0.) 248.61 516.67 T
(The verbs keywor) 153 496.67 T
(d ar) 240.32 496.67 T
(gument speci\336es the verbs and menu entries that) 259.44 496.67 T
(the object supports. The value is a vector) 153 482.67 T
(, with each element r) 349.87 482.67 T
(epr) 450.89 482.67 T
(esent-) 466.92 482.67 T
(ing the attributes of one verb. Default value:) 153 468.67 T
4 9 Q
(vector\050vector\0500, "&Edit",  // in-place activation) 153 448 T
($MF-ENABLED, $OLEVERBATTRIB-ONCONTAINERMENU\051,) 228.6 437 T
(vector\0501, "&Open",  // out-of-place activation) 190.8 426 T
($MF-ENABLED, $OLEVERBATTRIB-ONCONTAINERMENU\051\051) 228.6 415 T
2 11 Q
(This value pr) 153 396.67 T
(oduces the following r) 217.09 396.67 T
(egistry entries:) 325.89 396.67 T
4 9 Q
(HKEY_CLASSES_ROOT\134CLSID\134{...}\134Verb\1340 = &Edit,0,2) 163.8 376 T
(HKEY_CLASSES_ROOT\134CLSID\134{...}\134Verb\1341 = &Open,0,2) 163.8 357 T
2 11 Q
(Alternatively) 126 316.67 T
(, you can r) 189.23 316.67 T
(egister with:) 239.92 316.67 T
4 9 Q
(// check for "/RegServer" or "/UnregServer") 153 296 T
(if \050~OLE-util-maybe-just-register\050class-id,) 163.8 285 T
(prog-id,) 347.4 274 T
(title-string,) 347.4 263 T
(short-name:) 347.4 252 T
5 F
(short-name-string) 412.2 252 T
4 F
(\051 \051) 485.21 252 T
(// now run the application) 153 241 T
(\311) 153 230 T
(end if;) 153 219 T
2 11 Q
(Her) 126 198.67 T
(e, the) 144.57 198.67 T
4 9.5 Q
(OLE-util-maybe-just-register) 173.34 198.67 T
2 11 Q
( function has the same ar) 332.94 198.67 T
(guments) 454.09 198.67 T
(as) 126 184.67 T
4 9.5 Q
(register-ole-server) 138.91 184.67 T
2 11 Q
(. It either unr) 246.4 184.67 T
(egisters the server application and) 309.95 184.67 T
(r) 126 170.67 T
(eturns) 130.15 170.67 T
4 9.5 Q
(#t) 163.8 170.67 T
2 11 Q
(, or does nothing and r) 175.2 170.67 T
(eturns) 285.59 170.67 T
4 9.5 Q
(#f) 319.24 170.67 T
2 11 Q
(.) 330.64 170.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "212" 108
%%Page: "213" 109
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.2) 332.47 677.67 T
(Implementing OLE compound document servers) 353.85 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(213) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 13 Q
0 X
(5.2.9  In-pr) 108 639.33 T
(ocess ser) 161.13 639.33 T
(ver) 210.43 639.33 T
(s) 226.29 639.33 T
2 11 Q
(Much of the discussion above has assumed that you ar) 108 619.67 T
(e building a server) 373.32 619.67 T
(application that works as a \322local server\323, that is, an) 108 605.67 T
4 9.5 Q
(.exe) 363.49 605.67 T
2 11 Q
( \336le r) 386.29 605.67 T
(unning in its) 411.17 605.67 T
(own pr) 108 591.67 T
(ocess.) 143.09 591.67 T
-0.38 (If you want to build your server application as an in-pr) 108 571.67 P
-0.38 (ocess server \321 a server) 371.94 571.67 P
-0.11 (that r) 108 557.67 P
-0.11 (uns within the client\325 application\325s pr) 133.97 557.67 P
-0.11 (ocess \321 ther) 314.88 557.67 P
-0.11 (e ar) 376.05 557.67 P
-0.11 (e a few dif) 393.61 557.67 P
-0.11 (fer) 443.79 557.67 P
-0.11 (ences) 456.87 557.67 P
(and additional considerations:) 108 543.67 T
(\245) 117 523.67 T
(Y) 135 523.67 T
(ou must build your in-pr) 141.32 523.67 T
(ocess server application as a) 262.52 523.67 T
4 9.5 Q
(.DLL) 402.23 523.67 T
2 11 Q
( \336le instead) 425.03 523.67 T
(of a) 135 509.67 T
4 9.5 Q
(.EXE) 155.67 509.67 T
2 11 Q
( \336le.) 178.47 509.67 T
(Since your server application is a dynamic link library instead of a com-) 135 491.67 T
(plete pr) 135 477.67 T
(ogram, ther) 172.44 477.67 T
(e will be no main pr) 229.03 477.67 T
(ogram. The event loop will be) 326.16 477.67 T
(pr) 135 463.67 T
(ovided by the container application.) 145.76 463.67 T
(\245) 117 443.67 T
(Y) 135 443.67 T
(ou must de\336ne a subclass of) 141.32 443.67 T
4 9.5 Q
(<ole-in-process-server>) 280.84 443.67 T
2 11 Q
( instead of) 411.94 443.67 T
4 9.5 Q
(<ole-server-framework>) 135 429.67 T
2 11 Q
(.) 260.4 429.67 T
(The) 135 411.67 T
4 9.5 Q
(<ole-in-process-server>) 156.16 411.67 T
2 11 Q
( class is itself a subclass of) 287.26 411.67 T
4 9.5 Q
(<ole-server-) 416.34 411.67 T
(framework>) 135 397.67 T
2 11 Q
(, so in-pr) 192 397.67 T
(ocess servers inherit all methods documented for) 234.94 397.67 T
4 9.5 Q
(<ole-server-framework>) 135 383.67 T
2 11 Q
(.) 260.4 383.67 T
(\245) 117 363.67 T
(Y) 135 363.67 T
(ou can handle persistent storage dif) 141.32 363.67 T
(fer) 314.46 363.67 T
(ently) 327.54 363.67 T
(. Another technique is) 350.9 363.67 T
(described .) 135 349.67 T
(\245) 117 329.67 T
(Drawing is handled a little dif) 135 329.67 T
(fer) 281.01 329.67 T
(ently) 294.09 329.67 T
(. Instead of calling) 317.45 329.67 T
4 9.5 Q
(OLE-part-) 409.22 329.67 T
(draw-metafile) 135 315.67 T
2 11 Q
(, the function) 209.1 315.67 T
4 9.5 Q
(OLE-part-draw) 276.13 315.67 T
2 11 Q
( is called. This function) 350.23 315.67 T
(takes one additional parameter) 135 301.67 T
(, which is a r) 285.42 301.67 T
(ectangle specifying the size) 346.75 301.67 T
(and position within which to draw) 135 287.67 T
(.) 303.4 287.67 T
(\245) 117 267.67 T
(Since ther) 135 267.67 T
(e is no main pr) 182.68 267.67 T
(ogram, self-r) 254.8 267.67 T
(egistration and cr) 316.59 267.67 T
(eation of a class) 401.62 267.67 T
(factory ar) 135 253.67 T
(e handled by code generated by the) 181.5 253.67 T
4 9.5 Q
(initialize-ole-server) 357.24 253.67 T
2 11 Q
(macr) 135 239.67 T
(o.) 159.24 239.67 T
(Overall, an in-pr) 108 219.67 T
(ocess server application will look something like this:) 188.55 219.67 T
4 9 Q
(define constant $my-class-ID = make-GUID\050...\051;) 135 199 T
(define COM-interface <my-object-class> \050<ole-in-process-server>\051) 135 180 T
(\311) 145.8 169 T
(end;) 135 158 T
(\311 // methods on <my-object-class>) 135 139 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "213" 109
%%Page: "214" 110
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(The OLE-Server and OLE-Control-Framework Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(214) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 F
0 X
(initialize-ole-server\050<my-object-class>,) 153 642 T
($my-class-ID,) 271.8 631 T
("my.prog.id",) 271.8 620 T
("title of my application"\051;) 271.8 609 T
2 11 Q
(The) 126 588.67 T
4 9.5 Q
(initialize-ole-server) 147.16 588.67 T
2 11 Q
( macr) 266.86 588.67 T
(o is described below) 293.86 588.67 T
(.) 391.86 588.67 T
3 12 Q
(initializ) 126 554 T
(e-ole-ser) 159.46 554 T
(ver) 200.57 554 T
0 11 Q
(Macr) 475.29 554.67 T
(o) 499.12 554.67 T
4 9 Q
(initialize-ole-server \050) 153 534 T
5 F
(class) 277.2 534 T
4 F
(,) 297.19 534 T
5 F
(class-ID) 307.99 534 T
4 F
(,) 341.98 534 T
5 F
(pr) 352.78 534 T
(og-ID) 361.12 534 T
4 F
(,) 384.63 534 T
5 F
(title-string) 395.43 534 T
4 F
(, #rest) 439.42 534 T
5 F
(options) 153 523 T
4 F
( \051) 183.51 523 T
2 11 Q
(This macr) 153 502.67 T
(o must be called at top level in or) 201 502.67 T
(der to set up some static ini-) 361.93 502.67 T
(tializations needed for DLL initialization and r) 153 488.67 T
(egistration. \050It is not an) 379.13 488.67 T
(executable expr) 153 474.67 T
(ession.\051) 228.82 474.67 T
(The macr) 153 454.67 T
(o-expansion pr) 198.41 454.67 T
(ovides de\336nitions for the W) 271.32 454.67 T
(indows functions) 406.17 454.67 T
4 9.5 Q
(DllRegisterServer) 153 440.67 T
2 11 Q
(,) 249.09 440.67 T
4 9.5 Q
(DllUnregisterServer) 254.59 440.67 T
2 11 Q
(,) 362.07 440.67 T
4 9.5 Q
(DllGetClassObject) 367.57 440.67 T
2 11 Q
(, and) 464.47 440.67 T
4 9.5 Q
(DllCanUnloadNow) 153 426.67 T
2 11 Q
(. W) 237.49 426.67 T
(ithout calling this, the container application will be) 253.38 426.67 T
(unable to connect to the server) 153 412.67 T
(.) 301.01 412.67 T
(This macr) 153 392.67 T
(o cannot be used mor) 201 392.67 T
(e than once in a DLL library) 305.3 392.67 T
(.) 440.14 392.67 T
(The) 153 372.67 T
0 F
(class) 174.16 372.67 T
2 F
( ar) 195.14 372.67 T
(gument is the user) 207.54 372.67 T
(-de\336ned subclass of) 297.34 372.67 T
4 9.5 Q
(<ole-in-process-) 396.25 372.67 T
(server>) 153 358.67 T
2 11 Q
( to be instantiated when the server is invoked.) 192.9 358.67 T
(The) 153 338.67 T
0 F
(class-ID) 174.16 338.67 T
2 F
( ar) 211.02 338.67 T
(gument is the OLE class ID of the server object, as) 223.42 338.67 T
(r) 153 324.67 T
(eturned fr) 157.15 324.67 T
(om) 205.93 324.67 T
4 9.5 Q
(make-GUID) 224.4 324.67 T
2 11 Q
(.) 275.7 324.67 T
-0.49 (The) 153 304.67 P
0 F
-0.49 (pr) 173.68 304.67 P
-0.49 (og-ID) 183.26 304.67 P
2 F
-0.49 ( ar) 209.52 304.67 P
-0.49 (gument is the \322pr) 221.43 304.67 P
-0.49 (ogramatic identi\336er\323 string, as described) 305.31 304.67 P
(for) 153 290.67 T
4 9.5 Q
(register-ole-server) 169.76 290.67 T
2 11 Q
(,  page 212.) 277.25 290.67 T
-0.37 (The) 153 270.67 P
0 F
-0.37 (title-string) 173.79 270.67 P
2 F
-0.37 ( ar) 222.07 270.67 P
-0.37 (gument is the string that should appear in the container) 234.09 270.67 P
(application\325s \322insert object\323 dialog box to identify this server applica-) 153 256.67 T
(tion.) 153 242.67 T
(The optional) 153 222.67 T
0 F
(options) 217.43 222.67 T
2 F
( ar) 249.81 222.67 T
(guments ar) 262.21 222.67 T
(e the same as those speci\336ed for) 316.99 222.67 T
4 9.5 Q
(reg-) 475.29 222.67 T
(ister-ole-server) 153 208.67 T
2 11 Q
(,  page 212.) 243.39 208.67 T
-0.5 (T) 126 168.67 P
-0.5 (o implement persistent storage for an in-pr) 131.73 168.67 P
-0.5 (ocess compound document server) 337.22 168.67 P
(\050in the case wher) 126 154.67 T
(e the container application chooses to utilize the interface) 208.08 154.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "214" 110
%%Page: "215" 111
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.2) 332.47 677.67 T
(Implementing OLE compound document servers) 353.85 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(215) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 9.5 Q
0 X
(IPersistStream) 108 640.67 T
2 11 Q
( or) 187.8 640.67 T
4 9.5 Q
(IPersistStreamInit) 203.65 640.67 T
2 11 Q
( instead of) 306.25 640.67 T
4 9.5 Q
(IPersistStorage) 359.51 640.67 T
2 11 Q
(\051, you) 445.01 640.67 T
(must de\336ne methods on the following generic functions.) 108 626.67 T
3 12 Q
(OLE-par) 108 592 T
(t-max-sa) 147.01 592 T
(ve-siz) 187.34 592 T
(e) 214.79 592 T
0 11 Q
(Open generic function) 386.57 592.67 T
4 9 Q
(OLE-part-max-save-size) 135 572 T
5 F
(obj) 259.2 572 T
4 F
( =>) 272.03 572 T
5 F
(maximum-size) 293.63 572 T
2 11 Q
(Returns the maximum size, as an integer number of bytes, that ar) 135 551.67 T
(e) 451.84 551.67 T
(needed for the str) 135 537.67 T
(eam to which the persistent data will be written, or) 220.57 537.67 T
(r) 135 523.67 T
(eturns) 139.15 523.67 T
4 9.5 Q
(#f) 172.8 523.67 T
2 11 Q
( if it is not possible to make such an estimate. The default) 184.2 523.67 T
(method always r) 135 509.67 T
(eturns) 216.5 509.67 T
4 9.5 Q
(#f) 250.15 509.67 T
2 11 Q
(.) 261.55 509.67 T
3 12 Q
(OLE-par) 108 475 T
(t-Sa) 147.01 475 T
(ve-T) 165.47 475 T
(o-Stream) 184.92 475 T
0 11 Q
(Open generic function) 386.57 475.67 T
4 9 Q
(OLE-part-Save-To-Stream \050obj, stream :: <LPSTREAM>\051 => \050\051) 135 455 T
2 11 Q
(W) 135 434.67 T
(rite the object\325s persistent data to the given str) 145.19 434.67 T
(eam. This is similar to) 368.32 434.67 T
4 9.5 Q
(OLE-part-Save-To-Storage) 135 420.67 T
2 11 Q
( above, except that the str) 271.8 420.67 T
(eam is pr) 395.4 420.67 T
(ovided) 440 420.67 T
(instead of having to be cr) 135 406.67 T
(eated and r) 257.57 406.67 T
(emember) 312.19 406.67 T
(ed by .) 357.65 406.67 T
1 F
(Note:) 135 386.67 T
2 F
( Ther) 162.19 386.67 T
(e is no default method for this generic function. Y) 187.5 386.67 T
(ou must) 427.27 386.67 T
(pr) 135 372.67 T
(ovide a method yourself.) 145.76 372.67 T
3 12 Q
(OLE-par) 108 338 T
(t-Load-Fr) 147.01 338 T
(om-Stream) 190.01 338 T
0 11 Q
(Open generic function) 386.57 338.67 T
4 9 Q
(OLE-part-Load-From-Stream) 135 318 T
5 F
(obj) 275.4 318 T
4 F
( stream :: <LPSTREAM>\051 => \050\051) 288.23 318 T
2 11 Q
-0.29 (Read the object\325s persistent data fr) 135 297.67 P
-0.29 (om the given str) 300.23 297.67 P
-0.29 (eam. This is similar to) 378.18 297.67 P
4 9.5 Q
-0.59 (OLE-part-Load-From-Storage) 135 283.67 P
2 11 Q
-0.29 ( above, except that the str) 283.2 283.67 P
-0.29 (eam is pr) 405.37 283.67 P
-0.29 (ovided) 449.4 283.67 P
(instead of having to be cr) 135 269.67 T
(eated and r) 257.57 269.67 T
(emember) 312.19 269.67 T
(ed by .) 357.65 269.67 T
1 F
(Note:) 135 249.67 T
2 F
( Ther) 162.19 249.67 T
(e is no default method for this generic function. Y) 187.5 249.67 T
(ou must) 427.27 249.67 T
(pr) 135 235.67 T
(ovide a method yourself.) 145.76 235.67 T
3 12 Q
(OLE-par) 108 201 T
(t-init-ne) 147.01 201 T
(w) 182.95 201 T
0 11 Q
(Open generic function) 386.57 201.67 T
4 9 Q
(OLE-part-init-new) 135 181 T
5 F
(obj) 232.2 181 T
4 F
( => \050\051) 245.03 181 T
2 11 Q
-0.12 (; the library will call either) 135 160.67 P
4 9.5 Q
-0.25 (OLE-part-init-new) 265.2 160.67 P
2 11 Q
-0.12 ( or) 362.1 160.67 P
4 9.5 Q
-0.25 (OLE-part-Load-From-) 377.7 160.67 P
(Stream) 135 146.67 T
2 11 Q
( after the) 169.2 146.67 T
4 9.5 Q
(initialize) 215.07 146.67 T
2 11 Q
( method for the object. The default method) 272.07 146.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "215" 111
%%Page: "216" 112
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(The OLE-Server and OLE-Control-Framework Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(216) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(does nothing. \050However) 153 640.67 T
(, this will not get called if the container is using) 270.3 640.67 T
(the obsolete) 153 626.67 T
4 9.5 Q
(IPersistStream) 213.84 626.67 T
2 11 Q
( interface instead of) 293.64 626.67 T
4 9.5 Q
(IPersistStreamInit) 391.77 626.67 T
2 11 Q
(.\051) 494.37 626.67 T
3 12 Q
(OLE-par) 126 592 T
(t-dir) 165.01 592 T
(ty?-setter) 184.33 592 T
0 11 Q
(Open generic function) 404.57 592.67 T
4 9 Q
(OLE-part-dirty?-setter) 153 572 T
5 F
(dirty) 277.2 572 T
4 F
(? <boolean>) 297.21 572 T
5 F
(obj) 362.01 572 T
4 F
( =>) 374.84 572 T
5 F
(dirty?) 396.44 572 T
4 F
( :: <boolean>) 420.44 572 T
2 11 Q
(In addition to the method on) 153 551.67 T
4 9.5 Q
(OLE-part-dirty?) 295.9 551.67 T
2 11 Q
( that \322local\323 servers) 381.4 551.67 T
(de\336ne, in-pr) 153 537.67 T
(ocess server applications must supply a method for) 212.84 537.67 T
4 9.5 Q
(OLE-) 465.44 537.67 T
(part-dirty?-setter) 153 523.67 T
2 11 Q
(. The application\325s dirty status should) 254.79 523.67 T
0 F
(not) 441.1 523.67 T
2 F
( be r) 455.77 523.67 T
(eset) 476.77 523.67 T
(by) 153 509.67 T
4 9.5 Q
(OLE-part-Save-To-Stream) 167.95 509.67 T
2 11 Q
( or) 299.05 509.67 T
4 9.5 Q
(OLE-part-Load-From-Stream) 314.9 509.67 T
2 11 Q
(; instead,) 457.4 509.67 T
(the library will call this setter function separately when appr) 153 495.67 T
(opriate.) 446.89 495.67 T
1 F
(Note:) 153 475.67 T
2 F
( Ther) 180.19 475.67 T
(e is no default method for this generic function. Y) 205.5 475.67 T
(ou must) 445.27 475.67 T
(pr) 153 461.67 T
(ovide a method yourself.) 163.76 461.67 T
(Other generic functions for which in-pr) 126 401.67 T
(ocess server applications should pr) 317.03 401.67 T
(o-) 487.37 401.67 T
(vide methods:) 126 387.67 T
3 12 Q
(OLE-par) 126 353 T
(t-dra) 165.01 353 T
(w) 186.74 353 T
0 11 Q
(Open generic function) 404.57 353.67 T
4 9 Q
(OLE-part-draw) 153 333 T
5 F
(obj) 228.6 333 T
(hDC) 246.83 333 T
4 F
( :: <HDC>,) 265.01 333 T
5 F
(r) 324.4 333 T
(ect) 327.74 333 T
4 F
( :: <LPRECTL> =>) 339.24 333 T
5 F
(status) 431.04 333 T
4 F
( ::) 456.04 333 T
(<HRESULT>) 153 322 T
2 11 Q
(This method should draw all of the document window display to the) 153 301.67 T
(given Device Context,) 153 287.67 T
0 F
(hDC) 262.88 287.67 T
2 F
(, scaled and translated to \336t within the given) 284.27 287.67 T
(r) 153 273.67 T
(ectangle,) 157.15 273.67 T
0 F
(r) 202.87 273.67 T
(ect) 206.96 273.67 T
2 F
(.) 219.37 273.67 T
(This is what will be displayed by the container when the server is no) 153 253.67 T
-0.15 (longer active. Normally) 153 239.67 P
-0.15 (, this function should r) 266.95 239.67 P
-0.15 (eturn) 376.5 239.67 P
4 9.5 Q
-0.31 ($S-OK) 405.34 239.67 P
2 11 Q
-0.15 ( but it is possi-) 433.84 239.67 P
(ble to r) 153 225.67 T
(eturn an err) 186.79 225.67 T
(or status code that will be r) 244.19 225.67 T
(eported back to the con-) 375.9 225.67 T
(tainer pr) 153 211.67 T
(ogram.) 194.81 211.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "216" 112
%%Page: "217" 113
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.3) 464.52 677.67 T
(OLE Controls) 485.9 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(217) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 16 Q
0 X
(5.3  OLE Contr) 108 605.33 T
(ols) 198.9 605.33 T
2 11 Q
-0.02 (An application which is an \322OLE Contr) 108 584.67 P
-0.02 (ol\323 combines the featur) 299.42 584.67 P
-0.02 (es of an in-pr) 412.6 584.67 P
-0.02 (o-) 476.33 584.67 P
(cess OLE Server and an Automation Server) 108 570.67 T
(, so much of what is described) 317.41 570.67 T
(above applies to Contr) 108 556.67 T
(ols also. The dif) 217.91 556.67 T
(fer) 293.95 556.67 T
(ences fr) 307.03 556.67 T
(om an OLE Server ar) 344.08 556.67 T
(e:) 445.66 556.67 T
(\245) 117 536.67 T
(Y) 135 536.67 T
(ou must build your OLE Contr) 141.32 536.67 T
(ol application as a Dynamic Link) 291.28 536.67 T
(Library) 135 522.67 T
(, as for an in-pr) 170.09 522.67 T
(ocess server application. However) 243.94 522.67 T
(, following) 409.86 522.67 T
(convention, you can use the \336lename extension) 135 508.67 T
4 9.5 Q
(.OCX) 367.22 508.67 T
2 11 Q
( instead of) 390.02 508.67 T
4 9.5 Q
(.DLL) 443.28 508.67 T
2 11 Q
(.) 466.08 508.67 T
(\245) 117 488.67 T
(Y) 135 488.67 T
(ou must use the OLE-contr) 141.32 488.67 T
(ol-framework library  instead of the OLE-) 272.16 488.67 T
(Server library) 135 474.67 T
(.) 200.54 474.67 T
(\245) 117 454.67 T
(Y) 135 454.67 T
(ou must de\336ne a subclass of) 141.32 454.67 T
4 9.5 Q
(<ole-control-framework>) 280.84 454.67 T
2 11 Q
( instead of) 411.94 454.67 T
4 9.5 Q
(<ole-server-framework>) 135 440.67 T
2 11 Q
( or) 260.4 440.67 T
4 9.5 Q
(<ole-in-process-server>) 276.25 440.67 T
2 11 Q
(. \050) 407.35 440.67 T
4 9.5 Q
(<ole-con-) 416.51 440.67 T
(trol-framework>) 135 426.67 T
2 11 Q
( is a subclass of both) 220.5 426.67 T
4 9.5 Q
(<ole-in-process-server>) 322.4 426.67 T
2 11 Q
( and) 453.5 426.67 T
4 9.5 Q
(<simple-component-object>) 135 412.67 T
2 11 Q
(.\051) 277.5 412.67 T
(\245) 117 392.67 T
(De\336ne \322coclass\323 type information, as for an OLE Automation server) 135 392.67 T
(.) 465.67 392.67 T
(\245) 117 372.67 T
(Out-of-place activation will not be used.) 135 372.67 T
(\245) 117 352.67 T
(Since ther) 135 352.67 T
(e is no main pr) 182.68 352.67 T
(ogram, self-r) 254.8 352.67 T
(egistration and cr) 316.59 352.67 T
(eation of a class) 401.62 352.67 T
(factory ar) 135 338.67 T
(e handled by code generated by the) 181.5 338.67 T
4 9.5 Q
(initialize-ole-control) 357.24 338.67 T
2 11 Q
(macr) 135 324.67 T
(o.) 159.24 324.67 T
(Overall, the code for an OLE contr) 108 304.67 T
(ol will look something like this:) 274.79 304.67 T
4 9 Q
(define COM-interface <my-object-class> \050<ole-control-framework>\051) 135 284 T
(\311) 140.4 273 T
(end;) 135 262 T
(define constant my-type-info =) 135 243 T
(make\050<coclass-type-info>, class: <my-object-class>, \311\051;) 145.8 232 T
(\311) 135 213 T
(initialize-ole-control\050my-type-info, "my.prog.id"\051;) 135 194 T
2 11 Q
(The) 108 173.67 T
4 9.5 Q
(initialize-ole-control) 129.16 173.67 T
2 11 Q
( macr) 254.56 173.67 T
(o is described below) 281.56 173.67 T
(.) 379.56 173.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "217" 113
%%Page: "218" 114
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(The OLE-Server and OLE-Control-Framework Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(218) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 12 Q
0 X
(initializ) 126 640 T
(e-ole-contr) 159.46 640 T
(ol) 210.12 640 T
0 11 Q
(Macr) 475.29 640.67 T
(o) 499.12 640.67 T
4 9 Q
(initialize-ole-control \050) 153 620 T
5 F
(coclass-type-info) 288 620 T
(pr) 362.9 620 T
(og-ID) 371.24 620 T
4 F
( #rest) 394.75 620 T
5 F
(options) 432.55 620 T
4 F
( \051) 463.06 620 T
2 11 Q
(This macr) 153 599.67 T
(o must be called at top level in or) 201 599.67 T
(der to set up some static ini-) 361.93 599.67 T
(tializations needed for DLL initialization and r) 153 585.67 T
(egistration. \050It is not an) 379.13 585.67 T
(executable expr) 153 571.67 T
(ession.\051) 228.82 571.67 T
(The macr) 153 551.67 T
(o-expansion pr) 198.41 551.67 T
(ovides de\336nitions for the W) 271.32 551.67 T
(indows functions) 406.17 551.67 T
4 9.5 Q
(DllRegisterServer) 153 537.67 T
2 11 Q
(,) 249.09 537.67 T
4 9.5 Q
(DllUnregisterServer) 254.59 537.67 T
2 11 Q
(,) 362.07 537.67 T
4 9.5 Q
(DllGetClassObject) 367.57 537.67 T
2 11 Q
(, and) 464.47 537.67 T
4 9.5 Q
(DllCanUnloadNow) 153 523.67 T
2 11 Q
(.) 237.49 523.67 T
(W) 153 503.67 T
(ithout this, the OCX container will be unable to connect to the contr) 163.4 503.67 T
(ol) 491.16 503.67 T
(application.) 153 489.67 T
(This macr) 153 469.67 T
(o cannot be used mor) 201 469.67 T
(e than once in a DLL library) 305.3 469.67 T
(.) 440.14 469.67 T
(The) 153 449.67 T
0 F
(coclass-type-info) 174.16 449.67 T
2 F
( ar) 247.89 449.67 T
(gument is the type information describing the) 260.28 449.67 T
(contr) 153 435.67 T
(ol\325s Automation functionality) 178.02 435.67 T
(. The value should be an instance of) 320.8 435.67 T
-0.16 (the class) 153 421.67 P
4 9.5 Q
-0.32 (<coclass-Type-Info>) 196.36 421.67 P
2 11 Q
-0.16 (, with the) 304.66 421.67 P
4 9.5 Q
-0.32 (class:) 352.8 421.67 P
2 11 Q
-0.16 ( init-keywor) 387.01 421.67 P
-0.16 (d passed to) 446.48 421.67 P
4 9.5 Q
-0.49 (make) 153 407.67 P
2 11 Q
-0.24 ( specifying the user) 175.8 407.67 P
-0.24 (-de\336ned subclass of) 269.44 407.67 P
4 9.5 Q
-0.49 (<ole-control-framework>) 367.64 407.67 P
2 11 Q
-0.24 (.) 498.74 407.67 P
-0.29 (The macr) 153 393.67 P
-0.29 (o ar) 198.11 393.67 P
-0.29 (gument should be the name of a variable or constant which) 216.22 393.67 P
-0.38 (holds the instance of the type information, not the) 153 379.67 P
4 9.5 Q
-0.79 (make) 395.01 379.67 P
2 11 Q
-0.38 ( expr) 417.81 379.67 P
-0.38 (ession, since) 441.89 379.67 P
(it will be duplicated in the macr) 153 365.67 T
(o expansion.) 307.85 365.67 T
(The) 153 345.67 T
0 F
(pr) 174.16 345.67 T
(og-ID) 183.74 345.67 T
2 F
( ar) 210.01 345.67 T
(gument is the \322pr) 222.41 345.67 T
(ogrammatic identi\336er\323 string, as) 307.76 345.67 T
(described for) 153 331.67 T
4 9.5 Q
(register-ole-server) 219.67 331.67 T
2 11 Q
(,  page 212.) 327.16 331.67 T
-0.06 (The) 153 311.67 P
0 F
-0.06 (options) 174.11 311.67 P
2 F
-0.06 ( ar) 206.49 311.67 P
-0.06 (e optional keywor) 218.83 311.67 P
-0.06 (d and value pairs for additional r) 306.82 311.67 P
-0.06 (egistra-) 467.66 311.67 P
(tion options. The options accepted ar) 153 297.67 T
(e any that ar) 332.43 297.67 T
(e speci\336ed for either) 392.69 297.67 T
(r) 153 283.67 T
(egister) 157.15 283.67 T
(-ole-server or r) 189.4 283.67 T
(egister) 261.31 283.67 T
(-automation-server) 293.56 283.67 T
(, except that) 386.31 283.67 T
4 9.5 Q
(title:) 447.68 283.67 T
2 11 Q
( is) 481.88 283.67 T
(accepted in place of the) 153 269.67 T
0 F
(title-string) 269.47 269.67 T
2 F
( positional ar) 317.75 269.67 T
(gument \050it defaults fr) 381.27 269.67 T
(om) 484.74 269.67 T
-0.13 (the) 153 255.67 P
4 9.5 Q
-0.28 (name:) 170.87 255.67 P
2 11 Q
-0.13 ( of the type info\051 and the default value for the) 199.37 255.67 P
4 9.5 Q
-0.28 (verbs:) 422.14 255.67 P
2 11 Q
-0.13 ( option is:) 456.34 255.67 P
4 9 Q
(vector\050vector\050$OLEIVERB-PRIMARY, "&Edit", $MF-ENABLED,) 153 235 T
($OLEVERBATTRIB-ONCONTAINERMENU\051,) 228.6 224 T
(vector\050$OLEIVERB-PROPERTIES, "&Properties", $MF-ENABLED,) 190.8 213 T
($OLEVERBATTRIB-ONCONTAINERMENU\051\051) 228.6 202 T
2 11 Q
(Besides the \322accelerator\323 keys that apply when a server is active \050see OLE-) 126 183.67 T
(part-accelerators' above\051, OLE Contr) 126 169.67 T
(ols can also have \322mnemonic\323 keys that) 303.21 169.67 T
(will be pr) 126 155.67 T
(ocessed by the contr) 172.39 155.67 T
(ol even if it is not alr) 270.6 155.67 T
(eady active. This is imple-) 369.82 155.67 T
(mented by using the following functions:) 126 141.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "218" 114
%%Page: "219" 115
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.3) 464.52 677.67 T
(OLE Controls) 485.9 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(219) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 12 Q
0 X
(OLE-par) 108 640 T
(t-mnemonics) 147.01 640 T
0 11 Q
(Open generic function) 386.57 640.67 T
4 9 Q
(OLE-part-mnemonics) 135 620 T
5 F
(obj) 237.6 620 T
4 F
( =>) 250.43 620 T
5 F
(table) 272.03 620 T
2 11 Q
-0.1 (Y) 135 599.67 P
-0.1 (our  application can de\336ne a method on this function to r) 141.32 599.67 P
-0.1 (eturn the han-) 417.24 599.67 P
(dle of an accelerator table specifying the application\325s mnemonic keys,) 135 585.67 T
(or) 135 571.67 T
4 9.5 Q
(#f) 148.1 571.67 T
2 11 Q
( if the application does not use any mnemonics. The default) 159.5 571.67 T
(method r) 135 557.67 T
(eturns) 179.59 557.67 T
4 9.5 Q
(#f) 213.24 557.67 T
2 11 Q
(. This is used by the container to forwar) 224.64 557.67 T
(d keyboar) 417.03 557.67 T
(d) 465.74 557.67 T
(events to a contr) 135 543.67 T
(ol that is not curr) 214.77 543.67 T
(ently active.) 297.92 543.67 T
(\050The contr) 135 523.67 T
(ol indicates which keys it is pr) 184.85 523.67 T
(epar) 331.62 523.67 T
(ed to handle, but the con-) 353.15 523.67 T
-0.04 (tainer is not r) 135 509.67 P
-0.04 (equir) 199.45 509.67 P
-0.04 (ed to honor the r) 224.86 509.67 P
-0.04 (equest. V) 305.85 509.67 P
-0.04 (arious containers may have) 349.83 509.67 P
(dif) 135 495.67 T
(fer) 148.39 495.67 T
(ent policies about what kind of keystr) 161.47 495.67 T
(okes they pass thr) 344.74 495.67 T
(ough.\051) 431.99 495.67 T
3 12 Q
(OLE-par) 108 461 T
(t-on-mnemonic) 147.01 461 T
0 11 Q
(Open generic function) 386.57 461.67 T
4 9 Q
(OLE-part-on-mnemonic) 135 441 T
5 F
(obj) 248.4 441 T
(vkey) 266.63 441 T
(pMsg) 291.04 441 T
4 F
( => \050\051) 313.04 441 T
2 11 Q
-0.15 (This function is called by the container when one of the designated mne-) 135 420.67 P
(monic keys is pr) 135 406.67 T
(essed. The) 214.24 406.67 T
0 F
(vkey) 267.49 406.67 T
2 F
( ar) 287.66 406.67 T
(gument is the virtual key code. The) 300.05 406.67 T
0 F
-0.04 (pMsg) 135 392.67 P
2 F
-0.04 ( ar) 160.66 392.67 P
-0.04 (gument is a pointer to the actual keypr) 173.02 392.67 P
-0.04 (ess message, in case addi-) 360.9 392.67 P
(tional information might be needed fr) 135 378.67 T
(om it.) 318.5 378.67 T
(The default method sends the corr) 135 358.67 T
(esponding) 301.79 358.67 T
4 9.5 Q
($WM-SYSCOMMAND) 355.93 358.67 T
2 11 Q
( message) 435.73 358.67 T
(by doing:) 135 344.67 T
4 9 Q
(TranslateAccelerator\050OLE-part-command-window\050obj\051,) 145.8 324 T
(OLE-part-mnemonics\050obj\051,) 156.6 313 T
(pMsg\051;) 145.8 302 T
2 11 Q
-0.03 (The application can de\336ne an override method if that is not appr) 135 281.67 P
-0.03 (opriate.) 448.73 281.67 P
3 12 Q
(OLE-util-ke) 108 247 T
(y-c) 160.36 247 T
(hang) 174.49 247 T
(e) 198.1 247 T
0 11 Q
(Function) 445.45 247.67 T
4 9 Q
(OLE-util-key-change) 135 227 T
5 F
(obj) 243 227 T
4 F
( => \050\051) 255.83 227 T
2 11 Q
-0.25 (The application should call this function when it wants to change the set) 135 206.67 P
(of mnemonics supported. This will for) 135 192.67 T
(ce) 321.47 192.67 T
4 9.5 Q
(OLE-part-mnemonics) 334.38 192.67 T
2 11 Q
( to be) 436.98 192.67 T
(called again to get the new information.) 135 178.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "219" 115
%%Page: "220" 116
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(The OLE-Server and OLE-Control-Framework Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(220) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(Following ar) 126 640.67 T
(e some additional support functions which may be called by an) 187.82 640.67 T
(OLE Contr) 126 626.67 T
(ol.) 178.78 626.67 T
3 12 Q
(OLE-util-on-f) 126 592 T
(ocus) 185.94 592 T
0 11 Q
(Function) 463.45 592.67 T
4 9 Q
(OLE-util-on-focus) 153 572 T
5 F
(obj) 250.2 572 T
(got-focus?) 268.43 572 T
4 F
( => \050\051) 309.93 572 T
2 11 Q
(The application should call this function when it r) 153 551.67 T
(eceives \050second ar) 395.34 551.67 T
(gu-) 482.87 551.67 T
(ment) 153 537.67 T
4 9.5 Q
(#t) 180.72 537.67 T
2 11 Q
(\051 or loses \050ar) 192.12 537.67 T
(gument) 251.5 537.67 T
4 9.5 Q
(#f) 291.97 537.67 T
2 11 Q
(\051 the focus, if it might af) 303.37 537.67 T
(fect the way the) 419.02 537.67 T
(container handles it.  For example, a button might need to be displayed) 153 523.67 T
(dif) 153 509.67 T
(fer) 166.39 509.67 T
(ently when it becomes the default button, or the handling of the) 179.47 509.67 T
(Return and Escape keys may depend on which contr) 153 495.67 T
(ol has the focus.) 408.84 495.67 T
3 16 Q
(5.4  Ambient pr) 126 460.33 T
(oper) 220.54 460.33 T
(ties) 249.23 460.33 T
2 11 Q
(An OLE Contr) 126 439.67 T
(ol container application typically makes available to the con-) 196.49 439.67 T
(tained contr) 126 425.67 T
(ol certain information about the envir) 184.45 425.67 T
(onment in which it is r) 366.92 425.67 T
(un-) 476.62 425.67 T
(ning. This information is r) 126 411.67 T
(eferr) 252.92 411.67 T
(ed to as) 275.61 411.67 T
0 F
(ambient pr) 315.61 411.67 T
(operties) 363.59 411.67 T
2 F
( of the container) 397.81 411.67 T
(.) 475.77 411.67 T
(Some of these pr) 126 397.67 T
(operties ar) 206.63 397.67 T
(e used dir) 257.98 397.67 T
(ectly by the DUIM-OLE-Contr) 306.1 397.67 T
(ol library) 453.4 397.67 T
(,) 496.93 397.67 T
(and the user does not need to be concerned with them.  \050This includes) 126 383.67 T
4 9.5 Q
($DISPID-AMBIENT-SHOWHATCHING) 126 369.67 T
2 11 Q
(.\051) 285.6 369.67 T
(Some pr) 126 349.67 T
(operties ar) 166.27 349.67 T
(e cached by the library so that the user caneasily access) 217.62 349.67 T
(them by calling the following functions:) 126 335.67 T
3 12 Q
(freez) 126 301 T
(e-e) 149.06 301 T
(vents?) 163.15 301 T
0 11 Q
(Function) 463.45 301.67 T
4 9 Q
(freeze-events?) 153 281 T
5 F
(obj) 234 281 T
4 F
( =>) 246.83 281 T
5 F
(fr) 268.43 281 T
(ozen?) 274.77 281 T
2 11 Q
(Returns tr) 153 260.67 T
(ue when the container is not accepting events \050that is,) 201.84 260.67 T
4 9.5 Q
(IDis-) 464.41 260.67 T
(patch) 153 246.67 T
2 11 Q
( dispatch method calls\051 fr) 181.5 246.67 T
(om the OLE contr) 304.69 246.67 T
(ol.) 391.03 246.67 T
3 12 Q
(freez) 126 212 T
(e-UI?) 149.06 212 T
0 11 Q
(Function) 463.45 212.67 T
4 9 Q
(freeze-UI?) 153 192 T
5 F
(obj) 212.4 192 T
4 F
( =>) 225.23 192 T
5 F
(fr) 246.83 192 T
(ozen?) 253.17 192 T
2 11 Q
-0.17 (When this r) 153 171.67 P
-0.17 (eturns tr) 209.23 171.67 P
-0.17 (ue, the contr) 250.55 171.67 P
-0.17 (ol should ignor) 310.64 171.67 P
-0.17 (e user input events such) 384.51 171.67 P
(as mouse clicks. \050This corr) 153 157.67 T
(esponds to the ambient pr) 280.2 157.67 T
(operty) 406.9 157.67 T
4 9.5 Q
($DISPID-) 441.58 157.67 T
(AMBIENT-UIDEAD) 153 143.67 T
2 11 Q
(.\051) 232.8 143.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "220" 116
%%Page: "221" 117
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.4) 444.82 677.67 T
(Ambient properties) 466.2 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(221) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 12 Q
0 X
(OLE-util-locale) 108 640 T
0 11 Q
(Function) 445.45 640.67 T
4 9 Q
(OLE-util-locale) 135 620 T
5 F
(obj) 221.4 620 T
4 F
( =>) 234.23 620 T
5 F
(lcID) 255.83 620 T
2 11 Q
(Returns the W) 135 599.67 T
(indows locale code obtained fr) 204.4 599.67 T
(om the container) 353.09 599.67 T
(. This) 434.34 599.67 T
(could be used to adapt messages to the user) 135 585.67 T
(\325s language.  \050Refer to the) 349.03 585.67 T
(documentation for the OLE-Automation library for mor) 135 571.67 T
(e information) 406.29 571.67 T
(about locale codes.\051  If the container does not supply a value, it defaults) 135 557.67 T
(to) 135 543.67 T
4 9.5 Q
($LOCALE-USER-DEFAULT) 147.34 543.67 T
2 11 Q
(.) 260.53 543.67 T
(The curr) 135 523.67 T
(ent value of any ambient pr) 176.17 523.67 T
(operty can be obtained like this:) 310.2 523.67 T
4 9 Q
(let dispatch-interface = object.container-IDispatch;) 135 503 T
(unless \050 null-pointer?\050dispatch-interface\051 \051) 135 484 T
(let value = get-property\050dispatch-interface, disp-id,) 145.8 465 T
(default: $unfound\051;) 280.8 454 T
(unless \050 value == $unfound \051) 145.8 435 T
(      ... // use the value) 135 424 T
(end unless;) 145.8 413 T
(end unless;) 135 394 T
2 11 Q
(The function `get-pr) 135 373.67 T
(operty' is fr) 232.75 373.67 T
(om the OLE-Automation library) 288.14 373.67 T
(.  A) 443.88 373.67 T
(`default:' value must be supplied because containers ar) 135 359.67 T
(e not r) 401.41 359.67 T
(equir) 432.32 359.67 T
(ed to) 457.73 359.67 T
(support all pr) 135 345.67 T
(operties.  The particular pr) 201.62 345.67 T
(operty is identi\336ed by a "disp-) 331.3 345.67 T
(id", which is one of the following constants:) 135 331.67 T
4 9.5 Q
($DISPID-AMBIENT-BACKCOLOR) 135 305.67 T
2 11 Q
(Backgr) 216 287.67 T
(ound color) 249.48 287.67 T
(. Convert the value with) 301.62 287.67 T
4 9.5 Q
(OLE-util-) 422.18 287.67 T
(translate-color) 216 273.67 T
2 11 Q
(.) 300.69 273.67 T
4 9.5 Q
($DISPID-AMBIENT-FORECOLOR) 135 247.67 T
2 11 Q
(For) 216 229.67 T
(egr) 232.27 229.67 T
(ound color) 247.8 229.67 T
(. Convert the value with) 299.94 229.67 T
4 9.5 Q
(OLE-util-) 420.5 229.67 T
(translate-color) 216 215.67 T
2 11 Q
(.) 300.69 215.67 T
4 9.5 Q
($DISPID-AMBIENT-FONT) 135 189.67 T
2 11 Q
(Font, as an) 216 171.67 T
4 9.5 Q
(IDispatch) 271.18 171.67 T
2 11 Q
( interface.) 322.48 171.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "221" 117
%%Page: "222" 118
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(The OLE-Server and OLE-Control-Framework Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(222) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 9.5 Q
0 X
($DISPID-AMBIENT-DISPLAYNAME) 153 640.67 T
2 11 Q
(Name of contr) 234 622.67 T
(ol for use in err) 303.82 622.67 T
(or messages.) 377.97 622.67 T
4 9.5 Q
($DISPID-AMBIENT-LOCALEID) 153 602.67 T
2 11 Q
(Locale.) 234 584.67 T
4 9.5 Q
($DISPID-AMBIENT-MESSAGEREFLECT) 153 558.67 T
2 11 Q
(Boolean value indicating whether the container wants) 234 540.67 T
(to r) 234 526.67 T
(eceive W) 250.49 526.67 T
(indows messages such as) 293.74 526.67 T
4 9.5 Q
($WM-CTLCOLOR) 419.52 526.67 T
2 11 Q
(,) 487.92 526.67 T
4 9.5 Q
($WM-DRAWITEM) 234 512.67 T
2 11 Q
(, or) 302.4 512.67 T
4 9.5 Q
($WM-PARENTNOTIFY) 321 512.67 T
2 11 Q
(.) 410.98 512.67 T
4 9.5 Q
($DISPID-AMBIENT-SCALEUNITS) 153 486.67 T
2 11 Q
(A string \050actually an instance of) 234 468.67 T
4 9.5 Q
(<BSTR>) 391.14 468.67 T
2 11 Q
(\051 naming the) 425.33 468.67 T
(coor) 234 454.67 T
(dinate unit used by the container) 255.04 454.67 T
(.) 414.82 454.67 T
4 9.5 Q
($DISPID-AMBIENT-TEXTALIGN) 153 428.67 T
2 11 Q
(T) 234 410.67 T
(ext alignment:) 239.73 410.67 T
(0 => numbers to the right and text to the left) 234 392.67 T
(1 => left) 234 374.67 T
(2 => center) 234 356.67 T
(3 => right) 234 338.67 T
(4 => \336ll justify) 234 320.67 T
4 9.5 Q
($DISPID-AMBIENT-USERMODE) 153 294.67 T
2 11 Q
(T) 234 276.67 T
(r) 239.75 276.67 T
(ue if user mode, false if design mode.) 244.01 276.67 T
4 9.5 Q
($DISPID-AMBIENT-UIDEAD) 153 253.67 T
2 11 Q
(T) 234 236.17 T
(r) 239.75 236.17 T
(ue if user input should be ignor) 244.01 236.17 T
(ed.) 397.47 236.17 T
4 9.5 Q
($DISPID-AMBIENT-SHOWGRABHANDLES) 153 213.17 T
2 11 Q
(T) 234 195.67 T
(r) 239.75 195.67 T
(ue to enable r) 244.01 195.67 T
(esize handles.) 309.62 195.67 T
4 9.5 Q
($DISPID-AMBIENT-DISPLAYASDEFAULT) 153 172.67 T
2 11 Q
(T) 234 155.17 T
(r) 239.75 155.17 T
(ue if contr) 244.01 155.17 T
(ol is the default button.) 293.3 155.17 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "222" 118
%%Page: "223" 119
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.4) 444.82 677.67 T
(Ambient properties) 466.2 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(223) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 9.5 Q
0 X
($DISPID-AMBIENT-SUPPORTSMNEMONICS) 135 640.67 T
2 11 Q
(T) 216 622.67 T
(r) 221.75 622.67 T
(ue if contr) 226.01 622.67 T
(ol supports mnemonics.) 275.3 622.67 T
(Alternatively) 135 602.67 T
(, a contr) 198.23 602.67 T
(ol can ask to be noti\336ed whenever the value of an) 237 602.67 T
(ambient pr) 135 588.67 T
(operty changes. This is done by de\336ning a method on) 188.26 588.67 T
4 9.5 Q
(OLE-) 451.52 588.67 T
(part-ambient-properties) 135 574.67 T
2 11 Q
( to specify which pr) 266.1 574.67 T
(operties ar) 361.92 574.67 T
(e of inter) 413.27 574.67 T
(est,) 456.31 574.67 T
-0.45 (and de\336ning one or mor) 135 560.67 P
-0.45 (e methods on) 251.47 560.67 P
4 9.5 Q
-0.94 (OLE-part-set-ambient-property) 318.4 560.67 P
2 11 Q
(to r) 135 546.67 T
(eceive the values.) 151.49 546.67 T
(Following ar) 135 526.67 T
(e mor) 196.82 526.67 T
(e details about the functions r) 224.71 526.67 T
(elated to ambient pr) 368.52 526.67 T
(op-) 466.42 526.67 T
(erties:) 135 512.67 T
3 12 Q
(container) 108 478 T
(-IDispatc) 152.11 478 T
(h) 193.58 478 T
0 11 Q
(Function) 445.45 478.67 T
4 9 Q
(container-IDispatch) 135 458 T
5 F
(obj) 243 458 T
4 F
( =>) 255.83 458 T
5 F
(idisp) 277.43 458 T
2 11 Q
(Returns the container) 135 437.67 T
(\325s) 240.41 437.67 T
4 9.5 Q
(IDispatch) 250.88 437.67 T
2 11 Q
( interface pointer) 302.18 437.67 T
(.  \050This is just a slot) 384.41 437.67 T
-0.06 (accessor -- it does not call) 135 423.67 P
4 9.5 Q
-0.12 (AddRef) 260.91 423.67 P
2 11 Q
-0.06 ( on the r) 295.11 423.67 P
-0.06 (eturned value.\051 If not null, this) 335 423.67 P
(can be used as the \336rst ar) 135 409.67 T
(gument to) 257.24 409.67 T
4 9.5 Q
(get-property) 310.05 409.67 T
2 11 Q
( \050fr) 378.45 409.67 T
(om the OLE-Auto-) 392.68 409.67 T
(mation library) 135 395.67 T
(, see page 168\051 to obtain the curr) 203.73 395.67 T
(ent values of ambient) 360.23 395.67 T
(pr) 135 381.67 T
(operties fr) 145.76 381.67 T
(om the container) 195.27 381.67 T
(. The pointer may be null if the container) 276.53 381.67 T
-0.23 (does not support ambient pr) 135 367.67 P
-0.23 (operties or if this is called befor) 272.71 367.67 P
-0.23 (e the contr) 423.67 367.67 P
-0.23 (ol) 474.27 367.67 P
(is fully initialized.) 135 353.67 T
3 12 Q
(OLE-par) 108 319 T
(t-ambient-pr) 147.01 319 T
(oper) 204.23 319 T
(ties) 225.74 319 T
0 11 Q
(Open generic function) 386.57 319.67 T
4 9 Q
(OLE-part-ambient-properties) 135 299 T
5 F
(obj) 286.2 299 T
4 F
( =>) 299.03 299 T
5 F
(pr) 320.63 299 T
(operties) 328.98 299 T
2 11 Q
(De\336ne a method on this function to r) 135 278.67 T
(eturn a sequence of Dispatch IDs) 314.33 278.67 T
-0.11 (for ambient pr) 135 264.67 P
-0.11 (operties for which the application wishes to be noti\336ed of) 204.8 264.67 P
(any changes by a call to) 135 250.67 T
4 9.5 Q
(OLE-part-set-ambient-property) 252.83 250.67 T
2 11 Q
(. The default) 418.13 250.67 T
(method r) 135 236.67 T
(eturns an empty sequence.  If de\336ning a method on a subclass) 179.59 236.67 T
(of) 135 222.67 T
4 9.5 Q
(<DUIM-OCX>) 147.42 222.67 T
2 11 Q
( \050that is, when using the DUIM-OLE-Contr) 204.42 222.67 T
(ol library\051, use) 412.33 222.67 T
4 9.5 Q
(union) 135 208.67 T
2 11 Q
( to mer) 163.5 208.67 T
(ge your values with those r) 197.72 208.67 T
(eturned by) 329.88 208.67 T
4 9.5 Q
(next-method) 385.8 208.67 T
2 11 Q
(.) 448.5 208.67 T
3 12 Q
(OLE-par) 108 174 T
(t-set-ambient-pr) 147.01 174 T
(oper) 221.72 174 T
(ty) 243.24 174 T
0 11 Q
(Open generic function) 386.57 174.67 T
4 9 Q
(OLE-part-set-ambient-property) 135 154 T
5 F
(obj) 297 154 T
(disp-ID) 315.23 154 T
(value) 351.64 154 T
4 F
( => \050\051) 373.64 154 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "223" 119
%%Page: "224" 120
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(The OLE-Server and OLE-Control-Framework Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(224) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(This function is called to r) 153 640.67 T
(eport the value of an ambient pr) 278.92 640.67 T
(operty) 435.39 640.67 T
(, either) 466.1 640.67 T
(at start-up or whenever the value changes.  This will be called only for) 153 626.67 T
(pr) 153 612.67 T
(operties that ar) 163.76 612.67 T
(e supported by the container and have either been) 236.93 612.67 T
(r) 153 598.67 T
(equested by being included in the value r) 157.15 598.67 T
(eturned fr) 358.1 598.67 T
(om) 406.88 598.67 T
4 9.5 Q
(OLE-part-ambient-properties) 153 584.67 T
2 11 Q
( or ar) 306.9 584.67 T
(e used dir) 332.4 584.67 T
(ectly by the library) 380.52 584.67 T
(.) 470.86 584.67 T
-0.23 (The application pr) 153 564.67 P
-0.23 (ovides methods as needed for the pr) 241.92 564.67 P
-0.23 (operties it wishes) 417.32 564.67 P
(to r) 153 550.67 T
(eceive. Y) 169.49 550.67 T
(ou should call) 211.42 550.67 T
4 9.5 Q
(next-method) 282.72 550.67 T
2 11 Q
( in case the library also wants to) 345.42 550.67 T
(handle the pr) 153 536.67 T
(operty) 218.01 536.67 T
(.) 248.72 536.67 T
(Note that) 153 516.67 T
4 9.5 Q
(OLE-util-translate-color) 201.58 516.67 T
2 11 Q
( should be used if the value is to) 338.38 516.67 T
(be interpr) 153 502.67 T
(eted as a color) 200.66 502.67 T
(.) 269.05 502.67 T
3 12 Q
(OLE-util-translate-color) 126 468 T
0 11 Q
(Function) 463.45 468.67 T
4 9 Q
(OLE-util-translate-color) 153 448 T
5 F
(obj) 288 448 T
(ambient-color) 306.23 448 T
4 F
( =>) 363.07 448 T
5 F
(color-r) 384.67 448 T
(ef) 412.01 448 T
2 11 Q
(This should be used for converting the value of the ambient pr) 153 427.67 T
(operties) 456.48 427.67 T
-0.21 (for for) 153 413.67 P
-0.21 (egr) 183.37 413.67 P
-0.21 (ound or backgr) 198.9 413.67 P
-0.21 (ound color to a W) 272.93 413.67 P
-0.21 (in32 color value. For example:) 358.78 413.67 P
4 9 Q
(define method OLE-part-set-ambient-property) 153 393 T
(\050obj :: <my-object-class>,) 163.8 382 T
(disp-id == $DISPID-AMBIENT-FORECOLOR,) 169.2 371 T
(value :: <object>\051 => \050\051) 169.2 360 T
(let color = OLE-util-translate-color\050obj, value\051;) 163.8 349 T
(\311) 163.8 338 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "224" 120
%%Page: "227" 121
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 540 117 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(227) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 513 504 648 R
7 X
V
2 30 Q
0 X
(6) 180 628 T
108 586.45 504 614 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 586.45 504 614 R
7 X
0 0 0 1 0 0 0 K
V
108 607.14 270 607.14 2 L
V
3 H
2 Z
0 X
N
108 598.14 270 598.14 2 L
7 X
V
1 H
0 X
N
36 72 576 720 C
0 0 0 0 1 1 1 K
2 2 Q
7 X
(6) 108 566.45 T
0 0 0 1 0 0 0 K
2 30 Q
0 X
0 0 0 1 0 0 0 K
(OLE FFI Facilities) 109 566.45 T
108 126 486 432 R
7 X
V
3 16 Q
0 X
(6.1  Intr) 108 421.33 T
(oduction) 154.43 421.33 T
2 11 Q
(This document pr) 108 400.67 T
(ovides a pr) 194.48 400.67 T
(eliminary overview of how DylanW) 248.32 400.67 T
(orks pr) 422.93 400.67 T
(o-) 457.57 400.67 T
(grams can interface with Micr) 108 386.67 T
(osoft\325s OLE \050which originally stood for "Object) 253.24 386.67 T
(Linking and Embedding"\051 fr) 108 372.67 T
(om a user) 245.53 372.67 T
(\325s point of view) 293.98 372.67 T
(.) 368.27 372.67 T
(By "OLE", I actually mean "OLE2", but I'm following Micr) 108 352.67 T
(osoft's lead in dr) 387.92 352.67 T
(op-) 468.21 352.67 T
(ping the "2".  The interface curr) 108 338.67 T
(ently supports only the W) 259.04 338.67 T
(in32 envir) 385.11 338.67 T
(onment,) 433.7 338.67 T
(not W) 108 324.67 T
(in16.) 137.14 324.67 T
(The Dylan interface r) 108 304.67 T
(esides in a library and module named) 210.66 304.67 T
4 9.5 Q
(OLE) 397.37 304.67 T
2 11 Q
(.  It uses a) 414.47 304.67 T
(library and module named) 108 290.67 T
4 9.5 Q
(COM) 241.56 290.67 T
2 11 Q
( which pr) 258.66 290.67 T
(ovides interfaces to Micr) 304.98 290.67 T
(osoft\325s Com-) 424.32 290.67 T
(ponent Object Model, but it is not expected that users of) 108 276.67 T
4 9.5 Q
(OLE) 382.47 276.67 T
2 11 Q
( will also need to) 399.57 276.67 T
(use) 108 262.67 T
4 9.5 Q
(COM) 127.32 262.67 T
2 11 Q
( dir) 144.42 262.67 T
(ectly) 161.24 262.67 T
(, since the) 183.07 262.67 T
4 9.5 Q
(OLE) 233.75 262.67 T
2 11 Q
( module exports the r) 250.85 262.67 T
(elevant names fr) 354.95 262.67 T
(om) 435.25 262.67 T
4 9.5 Q
(COM) 453.72 262.67 T
2 11 Q
(.) 470.82 262.67 T
(Ther) 108 242.67 T
(e ar) 130.56 242.67 T
(e also additional libraries for interfaces to OLE Automation, OLE) 148.23 242.67 T
(common dialogs, and OLE custom contr) 108 228.67 T
(ols.  The Dylan libraries and the cor-) 303.86 228.67 T
(r) 108 214.67 T
(esponding Micr) 112.15 214.67 T
(osoft \336les ar) 188.93 214.67 T
(e shown in the following table:) 247.79 214.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "227" 121
%%Page: "228" 122
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE FFI Facilities) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(228) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(These libraries enable Dylan pr) 126 443.67 T
(ograms to use OLE in a manner almost the) 277.37 443.67 T
(same as would be done by a C++ pr) 126 429.67 T
(ogram \050assuming that it uses dir) 300.38 429.67 T
(ect OLE) 457.53 429.67 T
(calls rather than MFC\051.  \050Higher) 126 415.67 T
(-level interfaces ar) 281.22 415.67 T
(e described in the \336les "ole-) 369.97 415.67 T
(utilities.text" and "ole-duim.text".\051  Most of the function, type, variable, and) 126 401.67 T
(constant names documented in the OLE speci\336cations ar) 126 387.67 T
(e de\336ned for the) 401.15 387.67 T
(Dylan pr) 126 373.67 T
(ogrammer to use.  As with the W) 169.24 373.67 T
(in32 libraries \050see \336le "win32-) 329.64 373.67 T
-0.01 (library) 126 359.67 P
-0.01 (.text"\051, ther) 157.57 359.67 P
-0.01 (e ar) 211.07 359.67 P
-0.01 (e a few dif) 228.73 359.67 P
-0.01 (fer) 279.21 359.67 P
-0.01 (ences in or) 292.29 359.67 P
-0.01 (der to accommodate Dylan style) 344.02 359.67 P
(and coding conventions:) 126 345.67 T
(\245) 135 325.67 T
(Class and type names ar) 153 325.67 T
(e enclosed in angle brackets. For example,) 271.23 325.67 T
4 9.5 Q
-0.08 (HRESULT) 153 311.67 P
2 11 Q
-0.04 ( becomes) 192.9 311.67 P
4 9.5 Q
-0.08 (<HRESULT>) 240.21 311.67 P
2 11 Q
-0.04 (. For Dylan classes r) 291.51 311.67 P
-0.04 (epr) 388.3 311.67 P
-0.04 (esenting C pointers,) 404.33 311.67 P
(the Dylan) 153 297.67 T
4 9.5 Q
(=) 203.49 297.67 T
2 11 Q
( operator compar) 209.19 297.67 T
(es the pointer addr) 293.22 297.67 T
(esses, and) 385.17 297.67 T
4 9.5 Q
(==) 436.57 297.67 T
2 11 Q
( is not) 447.97 297.67 T
(likely to be useful.) 153 283.67 T
(\245) 135 263.67 T
(Names of constants ar) 153 263.67 T
(e pr) 260.55 263.67 T
(e\336xed by a dollar sign \050$\051. For example,) 279.32 263.67 T
4 9.5 Q
(NOERROR) 153 249.67 T
2 11 Q
( becomes) 192.9 249.67 T
4 9.5 Q
($NOERROR) 240.29 249.67 T
2 11 Q
(.) 285.89 249.67 T
(\245) 135 229.67 T
(Underscor) 153 229.67 T
(es ar) 204 229.67 T
(e r) 226.33 229.67 T
(eplaced by hyphens. For example,) 238.49 229.67 T
4 9.5 Q
(MAKE_HRESULT) 406.97 229.67 T
2 11 Q
(becomes) 153 215.67 T
4 9.5 Q
(MAKE-HRESULT) 197.64 215.67 T
2 11 Q
( and) 266.04 215.67 T
4 9.5 Q
(S_OK) 290.16 215.67 T
2 11 Q
( becomes) 312.96 215.67 T
4 9.5 Q
($S-OK) 360.35 215.67 T
2 11 Q
(. \050However) 388.85 215.67 T
(, hyphens) 442.63 215.67 T
(ar) 153 201.67 T
(e not inserted between capitalized wor) 162.65 201.67 T
(ds.\051) 350.67 201.67 T
(\245) 135 181.67 T
(Functions whose only ef) 153 181.67 T
(fect is to r) 271.12 181.67 T
(eturn a tr) 318.37 181.67 T
(ue-or) 363.45 181.67 T
(-false value have a) 389.17 181.67 T
(question mark \050?\051 appended to their names. For example:) 153 167.67 T
4 9.5 Q
(SUCCEEDED?) 433.81 167.67 T
2 11 Q
(,) 490.81 167.67 T
4 9.5 Q
(FAILED?) 153 153.67 T
2 11 Q
(, and) 192.9 153.67 T
4 9.5 Q
(IsEqualIID?) 219.77 153.67 T
2 11 Q
(.) 282.47 153.67 T
126 606.01 504 614 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
2 11 Q
0 X
0 0 0 1 0 0 0 K
(T) 131.49 617.67 T
(able 6.1  Harlequin Dylan OLE libraries and corr) 137.22 617.67 T
(esponding W) 372.52 617.67 T
(indows \336les.) 437.06 617.67 T
(Dylan library) 146.26 577.67 T
(C header) 239.61 577.67 T
(Link library) 328.73 577.67 T
(Runtime) 435.33 584.67 T
(library) 440.01 570.67 T
2 9 Q
(COM) 139.57 549.01 T
(OBJBASE.H) 230.21 549.01 T
(OLE32.LIB,UUID.LIB) 305.07 549.01 T
(OLE32.DLL) 422.39 549.01 T
(OLE) 139.57 530.01 T
(OLE2.H) 230.21 530.01 T
(OLE32.LIB,UUID.LIB) 305.07 530.01 T
(OLE32.DLL) 422.39 530.01 T
(OLE-Automation) 139.57 511.01 T
(OLEAUT) 230.21 511.01 T
(O.H) 267.64 511.01 T
(OLEAUT32.LIB) 305.07 511.01 T
(OLEAUT32.DLL) 422.39 511.01 T
(OLE-Dialogs) 139.57 492.01 T
(OLEDLG.H) 230.21 492.01 T
(OLEDLG.LIB) 305.07 492.01 T
(OLEDLG.DLL) 422.39 492.01 T
(OLE-Contr) 139.57 473.01 T
(ol) 183.5 473.01 T
(OLECTL.H) 230.21 473.01 T
(OLEPRO32.LIB) 305.07 473.01 T
(OLEPRO32.DLL) 422.39 473.01 T
224.21 600.01 224.21 466.01 2 L
V
0.25 H
0 Z
N
299.07 600.01 299.07 466.01 2 L
V
N
416.39 600.01 416.39 466.01 2 L
V
N
133.57 561.01 496.43 561.01 2 L
V
N
133.57 542.01 496.43 542.01 2 L
V
N
133.57 523.01 496.43 523.01 2 L
V
N
133.57 504.01 496.43 504.01 2 L
V
N
133.57 485.01 496.43 485.01 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "228" 122
%%Page: "229" 123
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(6.1) 469.9 677.67 T
(Introduction) 491.27 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(229) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(\245) 117 640.67 T
(Wher) 135 640.67 T
(e an interface function is documented under a name such as, for) 161.82 640.67 T
(example,) 135 626.67 T
4 9.5 Q
(IClassFactory::CreateInstance) 181.74 626.67 T
2 11 Q
(, the corr) 347.04 626.67 T
(esponding Dylan) 389.93 626.67 T
(generic function is called) 135 612.67 T
4 9.5 Q
(IClassFactory/CreateInstance) 258.9 612.67 T
2 11 Q
(. This means) 418.5 612.67 T
(that function names generally need to be quali\336ed by their interface) 135 598.67 T
(names in Dylan, although they ar) 135 584.67 T
(e not in C or C++. This is necessary) 297.25 584.67 T
(because ther) 135 570.67 T
(e ar) 195.46 570.67 T
(e several names that ar) 213.12 570.67 T
(e used in dif) 324.12 570.67 T
(fer) 383.92 570.67 T
(ent interfaces) 397 570.67 T
(with incompatible ar) 135 556.67 T
(gument lists, so that the same generic function can-) 236.17 556.67 T
(not be used. However) 135 542.67 T
(, for convenience, the following alias names ar) 241.25 542.67 T
(e) 465.7 542.67 T
(de\336ned:) 135 528.67 T
4 9 Q
(define constant QueryInterface = IUnknown/QueryInterface;) 145.8 508 T
(define constant AddRef = IUnknown/AddRef;) 145.8 489 T
(define constant Release = IUnknown/Release;) 145.8 470 T
2 11 Q
(\245) 117 449.67 T
(Wher) 135 449.67 T
(e a C/C++ function takes a pointer ar) 161.82 449.67 T
(gument as a place to stor) 343.91 449.67 T
(e a) 464.51 449.67 T
(r) 135 435.67 T
(esult value \050when that value is a pointer or integer) 139.15 435.67 T
(, not when \336lling in) 383.38 435.67 T
(\336elds in a str) 135 421.67 T
(uctur) 197.37 421.67 T
(e\051 , the corr) 223.25 421.67 T
(esponding Dylan function uses multiple) 277.82 421.67 T
(r) 135 407.67 T
(eturn values to r) 139.15 407.67 T
(eturn such output parameters following the original) 218.85 407.67 T
(function r) 135 393.67 T
(eturn value. For example, wher) 182.67 393.67 T
(e C++ code says:) 334.92 393.67 T
4 9 Q
(status = obj->QueryInterface\050IID_Ifoo, & result\051;) 145.8 373 T
2 11 Q
(the equivalent Dylan code is:) 135 352.67 T
4 9 Q
(let \050 status :: <SCODE>, result :: <Interface> \051 =) 145.8 332 T
(QueryInterface\050obj,$IID-Ifoo\051;) 156.6 321 T
2 11 Q
(\245) 117 300.67 T
(The multitude of integer data types in C code \050) 135 300.67 T
4 9.5 Q
(int) 362.06 300.67 T
2 11 Q
(,) 379.16 300.67 T
4 9.5 Q
(long) 384.66 300.67 T
2 11 Q
(,) 407.46 300.67 T
4 9.5 Q
(unsigned) 412.96 300.67 T
2 11 Q
(,) 458.56 300.67 T
4 9.5 Q
(ULONG) 135 286.67 T
2 11 Q
(,) 163.5 286.67 T
4 9.5 Q
(DWORD) 169 286.67 T
2 11 Q
(, and so on\051 ar) 197.5 286.67 T
(e all designated as) 266.26 286.67 T
4 9.5 Q
(<integer>) 358.05 286.67 T
2 11 Q
( \050or some) 409.35 286.67 T
(appr) 135 272.67 T
(opriate subrange ther) 157.87 272.67 T
(eof\051 in Dylan method ar) 262.3 272.67 T
(gument types. How-) 378.58 272.67 T
(ever) 135 258.67 T
(, in some cases, values that ar) 155.28 258.67 T
(e too lar) 297.72 258.67 T
(ge to be r) 336.94 258.67 T
(epr) 381.66 258.67 T
(esented as an) 397.69 258.67 T
4 9.5 Q
(<integer>) 135 244.67 T
2 11 Q
( ar) 186.3 244.67 T
(e r) 198.7 244.67 T
(epr) 210.86 244.67 T
(esented as a) 226.89 244.67 T
4 9.5 Q
(<machine-word>) 287.98 244.67 T
2 11 Q
( instead.) 367.78 244.67 T
(The names) 135 226.67 T
4 9.5 Q
(<SCODE>) 190.46 226.67 T
2 11 Q
( and) 230.36 226.67 T
4 9.5 Q
(<HRESULT>) 254.49 226.67 T
2 11 Q
( ar) 305.79 226.67 T
(e de\336ned as Dylan data types) 318.18 226.67 T
-0.37 (because they ar) 135 212.67 P
-0.37 (e not used as integers even though they ar) 209.08 212.67 P
-0.37 (e implemented) 411.01 212.67 P
(as such in C. \050In Dylan, they ar) 135 198.67 T
(e actually aliases for) 284.42 198.67 T
4 9.5 Q
(<machine-word>) 385.33 198.67 T
2 11 Q
(.\051) 465.13 198.67 T
(\245) 117 178.67 T
(The C type) 135 178.67 T
4 9.5 Q
(BOOL) 191.04 178.67 T
2 11 Q
( is mapped to) 213.85 178.67 T
4 9.5 Q
(<boolean>) 282.73 178.67 T
2 11 Q
( in Dylan. Use) 334.03 178.67 T
4 9.5 Q
(#t) 405.6 178.67 T
2 11 Q
( and) 417 178.67 T
4 9.5 Q
(#f) 441.13 178.67 T
2 11 Q
(instead of) 135 164.67 T
4 9.5 Q
(TRUE) 185.51 164.67 T
2 11 Q
( and) 208.31 164.67 T
4 9.5 Q
(FALSE) 232.43 164.67 T
2 11 Q
(.) 260.93 164.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "229" 123
%%Page: "230" 124
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE FFI Facilities) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(230) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(\245) 135 640.67 T
(Because slot names ar) 153 640.67 T
(e not in a separate name space in Dylan, the) 258.84 640.67 T
(names of C str) 153 626.67 T
(uctur) 222.77 626.67 T
(e \336elds will have the suf) 248.66 626.67 T
(\336x) 366.37 626.67 T
4 9.5 Q
(-value) 381.45 626.67 T
2 11 Q
( added to form) 415.65 626.67 T
(the name of the Dylan accessor function. For example, the C statement:) 153 612.67 T
4 9 Q
(pt->x = x;) 163.8 592 T
2 11 Q
(becomes in Dylan:) 153 571.67 T
4 9 Q
(pt.x-value := x;) 163.8 551 T
2 11 Q
(\245) 135 530.67 T
(The class) 153 530.67 T
4 9.5 Q
(<Interface>) 199.83 530.67 T
2 11 Q
( is an abstract class that includes all OLE inter-) 262.53 530.67 T
(faces, r) 153 516.67 T
(egar) 186.63 516.67 T
(dless of whether they ar) 207.66 516.67 T
(e implemented in C or Dylan. Thus) 324.31 516.67 T
(this is the appr) 153 502.67 T
(opriate declar) 225.09 502.67 T
(ed type for a variable holding an arbitrary) 292.08 502.67 T
(interface, such as r) 153 488.67 T
(eturned by) 243.01 488.67 T
4 9.5 Q
(QueryInterface) 298.94 488.67 T
2 11 Q
( or) 378.74 488.67 T
4 9.5 Q
(CreateInstance) 394.59 488.67 T
2 11 Q
(.) 474.39 488.67 T
(Classes such as) 153 474.67 T
4 9.5 Q
(<LPUNKNOWN>) 229.76 474.67 T
2 11 Q
(,) 292.46 474.67 T
4 9.5 Q
(<LPOLECONTAINER>) 297.96 474.67 T
2 11 Q
(,) 389.16 474.67 T
4 9.5 Q
(<LPOLEOBJECT>) 394.66 474.67 T
2 11 Q
(, and) 468.76 474.67 T
-0.19 (so on r) 153 460.67 P
-0.19 (epr) 185.34 460.67 P
-0.19 (esent speci\336c interfaces which could be implemented in either) 201.36 460.67 P
(C or Dylan; conceptually these ar) 153 446.67 T
(e subclasses of) 314.51 446.67 T
4 9.5 Q
(<Interface>) 387.93 446.67 T
2 11 Q
(, but they) 450.63 446.67 T
(ar) 153 432.67 T
(e curr) 162.65 432.67 T
(ently actually implemented as aliases of) 190.68 432.67 T
4 9.5 Q
(<Interface>) 387.16 432.67 T
2 11 Q
( instead of) 449.86 432.67 T
(as distinct types. . The C-FFI library\325s function) 153 418.67 T
4 9.5 Q
(pointer-cast) 380.26 418.67 T
2 11 Q
( can be) 448.66 418.67 T
(used to convert an) 153 404.67 T
4 9.5 Q
(<Interface>) 245.49 404.67 T
2 11 Q
( to one of the mor) 308.19 404.67 T
(e speci\336c types.  The) 394 404.67 T
(classes) 153 390.67 T
4 9.5 Q
(<IUnknown>) 188.6 390.67 T
2 11 Q
(,) 245.6 390.67 T
4 9.5 Q
(<IOleContainer>) 251.1 390.67 T
2 11 Q
(,) 336.6 390.67 T
4 9.5 Q
(<IOleObject>) 342.1 390.67 T
2 11 Q
(, and so on ar) 410.5 390.67 T
(e) 475.59 390.67 T
(subclasses used for interfaces implemented in Dylan. Thus, the class) 153 376.67 T
(hierar) 153 362.67 T
(chy looks \050conceptually\051 like:) 181.86 362.67 T
4 9 Q
(<Interface>) 169.2 342 T
(|) 190.8 331 T
(<LPUNKNOWN>) 174.6 320 T
(/) 180 309 T
(\134) 223.2 309 T
(/) 174.6 298 T
(<IUnknown>) 217.8 298 T
(<LPOLEOBJECT>) 153 287 T
(/) 234 287 T
(\134) 266.4 287 T
(/) 169.2 276 T
(\134) 190.8 276 T
(/) 228.6 276 T
(\134) 271.8 276 T
(/) 163.8 265 T
(<IOleObject>) 185.4 265 T
(...) 271.8 265 T
(...) 158.4 254 T
(|) 212.4 254 T
(<my-OleObject>) 174.6 243 T
2 11 Q
(wher) 153 222.67 T
(e) 177.99 222.67 T
4 9.5 Q
(<my-OleObject>) 186.01 222.67 T
2 11 Q
( r) 265.81 222.67 T
(epr) 272.71 222.67 T
(esents a user) 288.73 222.67 T
(-de\336ned Dylan class that pr) 350.3 222.67 T
(o-) 484.48 222.67 T
(vides an implementation of the) 153 208.67 T
4 9.5 Q
(IOleObject) 307.31 208.67 T
2 11 Q
( interface. Classes) 364.31 208.67 T
4 9.5 Q
(<IUnknown>) 153 194.67 T
2 11 Q
( and) 210 194.67 T
4 9.5 Q
(<IOleObject>) 234.12 194.67 T
2 11 Q
( do not have any dir) 302.52 194.67 T
(ect instances.) 400.47 194.67 T
(\245) 135 174.67 T
(The function call) 153 174.67 T
4 9.5 Q
(null-pointer\050<LP\311>\051) 237.23 174.67 T
2 11 Q
( is used to cr) 345.53 174.67 T
(eate a null pointer) 406.3 174.67 T
(of a particular interface type, wher) 153 160.67 T
(e C code would just use) 321.17 160.67 T
4 9.5 Q
(NULL) 439.37 160.67 T
2 11 Q
(. The) 462.17 160.67 T
(constant) 153 146.67 T
4 9.5 Q
($NULL-interface) 196.78 146.67 T
2 11 Q
( is pr) 282.28 146.67 T
(ovided as a null instance of type) 306.4 146.67 T
4 9.5 Q
(<Interface>) 153 132.67 T
2 11 Q
(, which is not otherwise dir) 215.7 132.67 T
(ectly instantiable. The function) 348.11 132.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "230" 124
%%Page: "231" 125
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(6.1) 469.9 677.67 T
(Introduction) 491.27 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(231) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 9.5 Q
0 X
(null?) 135 640.67 T
2 11 Q
( can be used to test whether an instance of) 163.5 640.67 T
4 9.5 Q
(<Interface>) 371.05 640.67 T
2 11 Q
( \050or any) 433.75 640.67 T
(other C pointer type\051 is null. It also r) 135 626.67 T
(eturns) 311.93 626.67 T
4 9.5 Q
(#t) 345.58 626.67 T
2 11 Q
( if the ar) 356.98 626.67 T
(gument is) 397 626.67 T
4 9.5 Q
(#f) 448.09 626.67 T
2 11 Q
(. It is) 459.49 626.67 T
(not valid to use) 135 612.67 T
4 9.5 Q
(null-pointer) 212.99 612.67 T
2 11 Q
( on a Dylan implementation class \050that is,) 281.39 612.67 T
(any subclass of) 135 598.67 T
4 9.5 Q
(<IUnknown>) 211.23 598.67 T
2 11 Q
(\051.) 268.23 598.67 T
(As in C++, an OLE application is written by de\336ning subclasses for the vari-) 108 578.67 T
(ous interface classes to be supported, and the methods to implement the pr) 108 564.67 T
(e-) 472.22 564.67 T
(scribed behavior) 108 550.67 T
(. Multiple inheritance of interface classes is not allowed, but) 188.12 550.67 T
4 9.5 Q
-0.42 (<IUnknown>) 108 536.67 P
2 11 Q
-0.2 ( is implicitly included as a super) 165 536.67 P
-0.2 (class of all of the other interfaces.) 321.08 536.67 P
-0 (The library pr) 108 522.67 P
-0 (ovides a complete implementation of the) 175.45 522.67 P
4 9.5 Q
-0.01 (IUnknown) 376.62 522.67 P
2 11 Q
-0 ( interface, so) 422.23 522.67 P
(the user is not r) 108 508.67 T
(equir) 183.17 508.67 T
(ed to de\336ne the methods) 208.58 508.67 T
4 9.5 Q
(QueryInterface) 331.85 508.67 T
2 11 Q
(,) 411.65 508.67 T
4 9.5 Q
(AddRef) 417.15 508.67 T
2 11 Q
(, and) 451.35 508.67 T
4 9.5 Q
(Release) 108 494.67 T
2 11 Q
(, although they may be overridden if necessary) 147.9 494.67 T
(. When) 375.05 494.67 T
4 9.5 Q
(make) 412.37 494.67 T
2 11 Q
( is called) 435.17 494.67 T
-0.03 (to instantiate an interface class, the optional keywor) 108 480.67 P
-0.03 (d) 359.83 480.67 P
4 9.5 Q
-0.06 (controlling-unknown:) 369.28 480.67 P
2 11 Q
-0.11 (may be used to designate the object handling the) 108 466.67 P
4 9.5 Q
-0.23 (IUnknown) 346.88 466.67 P
2 11 Q
-0.11 ( pr) 392.48 466.67 P
-0.11 (otocol on behalf) 405.88 466.67 P
(of an aggr) 108 452.67 T
(egate object.) 156.95 452.67 T
(Other methods for which default implementations ar) 108 432.67 T
(e pr) 365.73 432.67 T
(ovided:) 384.51 432.67 T
4 9.5 Q
(LockServer) 424.14 432.67 T
2 11 Q
(For example, wher) 108 412.67 T
(e C++ might say:) 198.95 412.67 T
4 9 Q
(interface myOLEobject : public IOleObject) 135 392 T
({) 145.8 381 T
(\311) 135 370 T
(};) 135 359 T
2 11 Q
(the corr) 108 338.67 T
(esponding Dylan code would be:) 145.39 338.67 T
4 9 Q
(define COM-interface <myOLEobject> \050 <IOleObject> \051) 135 318 T
(\311) 135 307 T
(end;) 135 296 T
2 11 Q
(The macr) 108 275.67 T
(o) 153.41 275.67 T
4 9.5 Q
(define) 162.16 275.67 T
(COM-interface) 199.11 275.67 T
2 11 Q
( has the same syntax and semantics as) 273.21 275.67 T
4 9.5 Q
-0.59 (define) 108 261.67 P
-0.59 (class) 144.66 261.67 P
2 11 Q
-0.28 (, but compiler limitations r) 173.16 261.67 P
-0.28 (equir) 301.71 261.67 P
-0.28 (e it to be used to perform special) 327.12 261.67 P
(handling for interface classes.) 108 247.67 T
-0.27 (For convenience, it is permissible to call) 108 227.67 P
4 9.5 Q
-0.57 (AddRef) 302 227.67 P
2 11 Q
-0.27 ( or) 336.2 227.67 P
4 9.5 Q
-0.57 (Release) 351.51 227.67 P
2 11 Q
-0.27 ( on a null interface,) 391.41 227.67 P
(so it is not necessary to check \336rst.) 108 213.67 T
4 9.5 Q
(<IUnknown>) 108 193.67 T
2 11 Q
( also implements a function called) 165 193.67 T
4 9.5 Q
(SubRef) 333.55 193.67 T
2 11 Q
(, which is like) 367.75 193.67 T
4 9.5 Q
(Release) 437.22 193.67 T
2 11 Q
(in that it undoes the ef) 108 179.67 T
(fect of a call to) 216.9 179.67 T
4 9.5 Q
(AddRef) 289.6 179.67 T
2 11 Q
(, but dif) 323.8 179.67 T
(fers fr) 361.74 179.67 T
(om) 390.24 179.67 T
4 9.5 Q
(Release) 408.71 179.67 T
2 11 Q
( in that) 448.61 179.67 T
(it will not terminate the object if the count is r) 108 165.67 T
(eturned to 0. This is sometimes) 329.23 165.67 T
(needed within an) 108 151.67 T
4 9.5 Q
(\324) 195.77 151.67 T
2 11 Q
(initialize\325 method to r) 201.47 151.67 T
(eturn the r) 306.48 151.67 T
(efer) 357.61 151.67 T
(ence count to 0 befor) 375.96 151.67 T
(e) 476.56 151.67 T
-0.34 (the) 108 137.67 P
4 9.5 Q
-0.7 (AddRef) 125.67 137.67 P
2 11 Q
-0.34 ( is performed by the caller of) 159.87 137.67 P
4 9.5 Q
-0.7 (make) 300.08 137.67 P
2 11 Q
-0.34 (. \050In C/C++ code, this situation is) 322.88 137.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "231" 125
%%Page: "232" 126
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE FFI Facilities) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(232) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(typically handled by dir) 126 640.67 T
(ectly incr) 243.15 640.67 T
(ementing and decr) 287.59 640.67 T
(ementing the r) 378.69 640.67 T
(ef count) 449.55 640.67 T
(slot, without using AddRef or Release, but the Dylan implementation does) 126 626.67 T
(not dir) 126 612.67 T
(ectly expose that slot.\051) 158.81 612.67 T
(If the user class is to de\336ne a new interface \050as opposed to implementing a) 126 592.67 T
(pr) 126 578.67 T
(e-de\336ned interface\051, then for) 136.76 578.67 T
4 9.5 Q
(QueryInterface) 277.93 578.67 T
2 11 Q
( to r) 357.73 578.67 T
(ecognize the new inter-) 376.97 578.67 T
(face, it is suf) 126 564.67 T
(\336cient to de\336ne an interface ID and a method like:) 185.73 564.67 T
4 9 Q
(define method initialize \050 self :: <IFoo> \051) 153 544 T
(next-method\050\051;) 163.8 533 T
(add-interface\050self, $IID-IFoo\051;) 163.8 522 T
(end initialize;) 153 511 T
2 11 Q
(However) 126 490.67 T
(, the methods of the new interface will not be callable fr) 170.62 490.67 T
(om code in) 439.9 490.67 T
(other languages without the use of additional tools that ar) 126 476.67 T
(e not curr) 408.06 476.67 T
(ently pr) 454.83 476.67 T
(o-) 492.92 476.67 T
(vided. Such tools ar) 126 462.67 T
(e expected to be needed, but ar) 221.93 462.67 T
(e not yet speci\336ed.) 372.28 462.67 T
(For de\336ning the interface ID, wher) 126 442.67 T
(e C code would do like:) 294.32 442.67 T
4 9 Q
(DEFINE_GUID\050GUID_SIMPLE, 0xBCF6D4A0, 0xBE8C, 0x1068, 0xB6, 0xD4,) 153 422 T
(0x00, 0xDD, 0x01, 0x0C, 0x05, 0x09\051;) 228.6 411 T
2 11 Q
(in Dylan do:) 126 390.67 T
4 9 Q
(define constant $GUID-SIMPLE :: <REFGUID> =) 153 370 T
(make-GUID\050#xBCF6D4A0, #xBE8C, #x1068, #xB6, #xD4, #x00, #xDD,) 163.8 359 T
(#x01, #x0C, #x05, #x09\051;) 217.8 348 T
2 11 Q
-0.27 (Alternatively) 126 327.67 P
-0.27 (, the internal) 189.23 327.67 P
4 9.5 Q
-0.55 (GUID) 252.59 327.67 P
2 11 Q
-0.27 ( can also be converted fr) 275.39 327.67 P
-0.27 (om the string r) 391.82 327.67 P
-0.27 (epr) 462.71 327.67 P
-0.27 (esen-) 478.73 327.67 P
(tation like this:) 126 313.67 T
4 9 Q
(define constant $GUID-SIMPLE :: <REFGUID> =) 153 293 T
(as\050<REFGUID>, "{BCF6D4A0-BE8C-1068-B6D4-00DD010C0509}"\051;) 163.8 282 T
2 11 Q
(Ther) 126 261.67 T
(e is also an) 148.56 261.67 T
4 9.5 Q
(as) 203.97 261.67 T
2 11 Q
( method for converting a GUID to a) 215.37 261.67 T
4 9.5 Q
(<string>) 391.27 261.67 T
2 11 Q
(.) 436.87 261.67 T
(Since Dylan does not have destr) 126 241.67 T
(uctors, any cleanup code that would have) 281.55 241.67 T
(been done in a C++ destr) 126 227.67 T
(uctor must instead be done by pr) 247.9 227.67 T
(oviding a method) 408.5 227.67 T
(on generic function) 126 213.67 T
4 9.5 Q
(terminate) 222.92 213.67 T
2 11 Q
(. The default method for) 274.22 213.67 T
4 9.5 Q
(Release) 395.42 213.67 T
2 11 Q
( will call) 435.32 213.67 T
4 9.5 Q
(terminate) 126 199.67 T
2 11 Q
( when the object\325s r) 177.3 199.67 T
(efer) 271.08 199.67 T
(ence count is decr) 289.42 199.67 T
(emented to zer) 375.89 199.67 T
(o. It may) 448.13 199.67 T
(also be called befor) 126 185.67 T
(e the object is garbage collected, if GC \336nalizations ar) 218.92 185.67 T
(e) 477.68 185.67 T
(available and enabled.) 126 171.67 T
(For example, wher) 126 151.67 T
(e a C++ OLE application class might do:) 216.95 151.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "232" 126
%%Page: "233" 127
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(6.1) 469.9 677.67 T
(Introduction) 491.27 677.67 T
108 81 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(233) 526.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 F
0 X
(myApp::~myApp\050\051) 135 642 T
({) 145.8 631 T
(if \050IsInitialized\050\051\051) 156.6 620 T
(OleUninitialize\050\051;) 167.4 609 T
(DestroyWindow\050m_hAppWnd\051;) 156.6 598 T
(}) 135 587 T
2 11 Q
(the corr) 108 566.67 T
(esponding Dylan code would look like:) 145.39 566.67 T
4 9 Q
(define method terminate \050this :: <my-app>\051 => \050\051;) 135 546 T
(next-method\050\051;) 145.8 535 T
(if \050 IsInitialized\050\051 \051) 145.8 524 T
(OleUninitialize\050\051;) 156.6 513 T
(end if;) 145.8 502 T
(DestroyWindow\050this.m_hAppWnd\051;) 145.8 491 T
(values\050\051;) 145.8 480 T
(end terminate;) 135 469 T
2 11 Q
(The Dylan function) 108 448.67 T
4 9.5 Q
(pointer-value) 205.17 448.67 T
2 11 Q
( can be used to convert between a Dylan) 279.27 448.67 T
(integer and a) 108 434.67 T
4 9.5 Q
(LARGE_INTEGER) 174.56 434.67 T
2 11 Q
( or) 248.66 434.67 T
4 9.5 Q
(ULARGE_INTEGER) 264.51 434.67 T
2 11 Q
(. For example:) 344.31 434.67 T
4 9 Q
(let li :: make\050 <PLARGE-INTEGER> \051;) 135 414 T
(pointer-value\050li\051 := 0;) 145.8 403 T
2 11 Q
(allocates a) 108 382.67 T
4 9.5 Q
(LARGE_INTEGER) 160.81 382.67 T
2 11 Q
( and sets its value to 0, without needing to be con-) 234.91 382.67 T
(cerned with the individual \336elds of the internal r) 108 368.67 T
(epr) 344.99 368.67 T
(esentation.) 361.02 368.67 T
(Note that this makes the C macr) 108 348.67 T
(os) 263.99 348.67 T
4 9.5 Q
(LISet32) 277.41 348.67 T
2 11 Q
( and) 317.31 348.67 T
4 9.5 Q
(ULISet32) 341.43 348.67 T
2 11 Q
( unnecessary in) 387.03 348.67 T
(Dylan.) 108 334.67 T
(When an interface pointer is r) 108 314.67 T
(eceived fr) 252.28 314.67 T
(om an API call, it could r) 299.66 314.67 T
(epr) 420.61 314.67 T
(esent an) 436.64 314.67 T
(interface implemented in either C/C++ or Dylan, so any calls to its methods) 108 300.67 T
-0.28 (need to \336rst go thr) 108 286.67 P
-0.28 (ough the C/C++ method table, and then thr) 196.64 286.67 P
-0.28 (ough the Dylan) 408.44 286.67 P
(generic function dispatch if it is actually implemented in Dylan. If the inter-) 108 272.67 T
(face is going to be used in a series of method calls, it may be mor) 108 258.67 T
(e ef) 421.92 258.67 T
(\336cient to) 438.67 258.67 T
(\336rst call function) 108 244.67 T
4 9.5 Q
(dylan-interface) 193.06 244.67 T
2 11 Q
( on it to obtain a dir) 278.56 244.67 T
(ect Dylan r) 374.2 244.67 T
(epr) 427.32 244.67 T
(esenta-) 443.34 244.67 T
(tion of the interface that uses Dylan dispatch dir) 108 230.67 T
(ectly) 341.92 230.67 T
(. The ar) 363.75 230.67 T
(gument is) 400.06 230.67 T
(r) 108 216.67 T
(eturned unchanged if it is not a Dylan interface. For example:) 112.15 216.67 T
4 9 Q
(let interface = dylan-interface\050 object.foo-interface \051;) 135 196 T
(foo\050interface, ...\051;) 145.8 185 T
(bar\050interface, ...\051;) 145.8 174 T
2 11 Q
(Some other helper functions pr) 108 153.67 T
(ovided to make it easier to use Dylan data) 258.67 153.67 T
(types:) 108 139.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "233" 127
%%Page: "234" 128
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(OLE FFI Facilities) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(234) 72 100 T
0 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 F
0 X
-0.68 (IStream/Write-integer\050 stream, integer-value \051 => \050 status, count) 153 642 P
(\051) 153 631 T
2 11 Q
(Calls IStr) 158.5 610.67 T
(eam/W) 202.83 610.67 T
(rite to output the integer) 240.16 610.67 T
(-value in a 4-byte \336eld.) 359.46 610.67 T
4 9 Q
(IStream/Read-integer\050 stream \051 => \050 status, integer-value, count) 153 590 T
(\051) 153 579 T
2 11 Q
(Calls IStr) 158.5 558.67 T
(eam/Read to r) 202.83 558.67 T
(ead a value written by IStr) 274.05 558.67 T
(eam/W) 402.59 558.67 T
(rite-integer) 439.92 558.67 T
(.) 493.36 558.67 T
(For convenience, the class) 126 538.67 T
4 9.5 Q
(<LPSTGMEDIUM>) 254.59 538.67 T
2 11 Q
( has) 328.69 538.67 T
4 9.5 Q
(pointer-value) 350.76 538.67 T
2 11 Q
( and) 424.86 538.67 T
4 9.5 Q
(pointer-) 448.98 538.67 T
(value-setter) 126 524.67 T
2 11 Q
( methods pr) 194.4 524.67 T
(ovided which use Dylan\325s r) 253.02 524.67 T
(un-time typing to auto-) 386.49 524.67 T
(matically manage the) 126 510.67 T
4 9.5 Q
(tymed) 232.91 510.67 T
2 11 Q
( \336eld.) 261.41 510.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "234" 128
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 128
%%DocumentFonts: Palatino-Italic
%%+ Palatino-Bold
%%+ Palatino-Roman
%%+ Helvetica-Narrow-Bold
%%+ Courier-Bold
%%+ Palatino-BoldItalic
%%+ Helvetica-Bold
%%EOF
