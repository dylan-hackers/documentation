%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.1
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%-
%- Frame ps_prolog 5.0, for use with Frame 5.0 products
%- This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
%- All rights reserved.  This ps_prolog file may be freely copied and 
%- distributed in conjunction with documents created using FrameMaker, 
%- FrameMaker/SGML FrameReader and FrameViewer as long as this 
%- copyright notice is preserved.
%-
%- FrameMaker users specify the proper paper size for each print job in the
%- "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
%- printer that the PS file is sent to does not support the requested paper
%- size, or if there is no paper tray of the proper size currently installed, 
%- then the job will not be printed.  The following flag, if set to true, will
%- cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            true def
%-
%- Frame products normally print colors as their true color on a color printer
%- or as shades of gray, based on luminance, on a black-and white printer. The
%- following flag, if set to true, forces all non-white colors to print as pure
%- black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%-
%- Frame products can either set their own line screens or use a printer's 
%- default settings. Three flags below control this separately for no 
%- separations, spot separations and process separations. If a flag
%- is true, then the default printer settings will not be changed. If it is
%- false, Frame products will use their own settings from a table based on
%- the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%-
%- For any given PostScript printer resolution, Frame products have two sets of 
%- screen angles and frequencies for printing process separations, which are 
%- recomended by Adobe. The following variable chooses the higher frequencies
%- when set to true or the lower frequencies when set to false. This is only
%- effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%-
%- The following is a set of predefined optimal frequencies and angles for various
%- common dpi settings. This is taken from "Advances in Color Separation Using
%- PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
%- and corrolated with information which is in various PPD (4.0) files.
%-
%- The "dpiranges" figure is the minimum dots per inch device resolution which
%- can support this setting. The "low" and "high" values are controlled by the
%- setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
%- the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
%- three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%-
%- PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
%- to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
%- (too badly) against the screen frequencies of any separations for that DPI.
% This is computed by taking dpi/9 as the ideal pixels per repetition, and then
% computing a tiling size in printer pixels for each of the four separations as 
% (dpi/screenFreq)*(cos(screenAngle)+sin(screenAngle)) Actually, this is the same 
% for Cyan and Magenta). Then, we take a "nice" LCM of the tile sizes close to
% the desired pattern tile where the beat factor is not more than 2 or 3.
%
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def

/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def

/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%-
%- PostScript Level 2 printers contain an "Accurate Screens" feature which can
%- improve process separation rendering at the expense of compute time. This 
%- flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%-
%- The following PostScript procedure defines the spot function that Frame
%- products will use for process separations. You may un-comment-out one of
%- the alternative functions below, or use your own.
%-
%- Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%-
%- Line function
%- /FMSpotFunction { pop } def
%-
%- Elipse function
%- /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%-		sqrt 1 exch sub } def
%-
%-

/FMversion (5.0) def % matches PS_VERSION in fmprintdriver

% PostScript Level 1 = true, 2 = false
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def

% Set up Color vs. Black-and-White
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
%		statusdict /processcolors known {
%			statusdict /processcolors get exec
%		} {1} ifelse
%		1 gt
		true
	} ifelse
def

/FrameDict 400 dict def % should check this value each time changes made

%
% For NeWS we add a fake errordict, so we can psh files
%
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if

%- The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put % save old rangecheck
errordict /rangecheck {FrameDict /bug true put} put % will flag bug found
FrameDict /bug false put % flag bug not found
mark % since we're not sure what will happen next
%- Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark % junk from readline and rangecheck
errordict /rangecheck FrameDict /tmprangecheck get put % restore rangecheck
FrameDict /bug get { % redefine readline if last one got a rangecheck
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop % get a char
			dup 10 eq {exit} if % exit if LF
			dup 13 eq {exit} if % exit if CR
			gstring exch gindex exch put % store it away
			/gindex gindex 1 add def % bump index
		} loop
		pop % eol character
		gstring 0 gindex getinterval true % simulate real readline
		} bind def
	} if

% outer-world defs

/FMshowpage /showpage load def
/FMquit /quit load def

/FMFAILURE { % enter with two error strings on the stack
	dup = flush % send a copy of the message to the console
	FMshowpage % msg on a page by itself, so it can't be, say, black on black
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage % we might be in the middle of some EPS, where "showpage"
	FMquit % and "quit" are redefined
	} def % only used once at most, so no bind

/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def % only used at startup, so no bind

/FMBADEPSF { % Call with bad operator name on stack (as a string)
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length % parmstr errstr errstr indx
	5 -1 roll % errstr errstr index parmstr
	putinterval % errstr
	FMFAILURE
	} def

% standard concatprocs routine
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def

% Put all local variables here in alphabetical order.
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall

% Start of PDF/Acrobat support

% Bind def
/FmBD {bind def} bind def

systemdict /pdfmark known {
	/fMAcrobat true def

	% FmPD is a conditional PDFMark
	/FmPD /pdfmark load def
	
	% FmPT is a show text operator which only show up when distiller is active
	/FmPT /show load def
	
	% FmPD2 and FmPA are Acrobat 2.0-specific
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		% FmPD2 is like FmPD but for Acrobat 2.0-specific PDF
		/FmPD2 /pdfmark load def
		
		% x y/name FmPA
		% 	is equivalent to
		% [/Dest/name/View[/FitH x y FmDC exch pop]/DEST FmPD
		% It is a shortcut for pagragraph Uinique ID designators whic occurr commonly.
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		% These are No-Ops for Distiller 1.0
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	% these are the No-Ops for regular PostScript
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse

% This convert a set of X Y coordinates from the current user space to the default
% PostScript coordinates needed by some pdfmark variants. We also convert to 
% integer because the distiller doesn't always like floats!
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD

% This converts four numbers into a bounding box making sure the first two are maller than the last two
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD

% End of PDF/Acrobat support

%
% Color separation code
%

% Constants.

/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def

/fMNegative false def % we are inverting the page

% Variables.

/FrameSepIs FMnone def % separation we are printing
% If FrameSepIs is FMcustom, this is the custom color
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def

/FrameCurColors [ 0 0 0 1 0 0 0 ] def % c m y k r g b

% Utility routines

/FrameColorEpsilon .001 def	% epsilon by which values can differ and sill be equal
/eqepsilon {		% v1 v2 eqeps bool
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def

% are the cmyk and cmykrgb arrays on the stack the same color?
/FrameCmpColorsCMYK { % [ c1 m1 y1 k1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
% are the rgb and cmykrgb arrays on the stack the same color?
/FrameCmpColorsRGB { % [ r1 g1 b1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def

% convert r g b to c m y k
/RGBtoCMYK { % r g b
	1 exch sub % r g y
	3 1 roll % y r g
	1 exch sub % y r m
	3 1 roll % m y r
	1 exch sub % m y c
	3 1 roll % c m y
	3 copy % c m y c m y
	2 copy % c m y c m y m y
	le { pop } { exch pop } ifelse % c m y c min(m,y)
	2 copy % c m y c min(m,y) c min(m,y)
	le { pop } { exch pop } ifelse % c m y min(c, min(m,y))
	dup dup dup % c m y k k k k
	6 1 roll % c k m y k k k
	4 1 roll % c k m k y k k
	7 1 roll % k c k m k y k
	sub % k c k m k y
	6 1 roll % y k c k m k
	sub % y k c k m
	5 1 roll % m y k c k
	sub % m y k c
	4 1 roll % c m y k 
} bind def
/CMYKtoRGB { % c m y k CMYKtoRGB r g b
	dup dup 4 -1 roll add 						  % c m k k y+k
	5 1 roll 3 -1 roll add 						  % y+k c k m+k
	4 1 roll add 								  % m+k y+k c+k
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  % r m+k y+k
	1 exch sub dup 0 lt {pop 0} if exch 	      % r b m+k
	1 exch sub dup 0 lt {pop 0} if exch	  		  % r g b
} bind def

% Public routines


% Happens at the top of each page that is a separation
/FrameSepInit {
	1.0 RealSetgray
} bind def
% Tell the separation code that this separation is for a custom color
/FrameSetSepColor { % c m y k r g b
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
% Tell the separation code that this separation is Cyan
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
% Tell the separation code that this separation is Magenta
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Yellow
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Black
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
% Tell the separation code we are not doing a separation
/FrameNoSep { %
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def

% Initialize the separation code with all the custom colors we are
% separating (not process colors)
/FrameSetSepColors { % list of arrays of [c m y k r g b] count 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  % array of arrays of colors we are separating
	exch def end
	} bind def

% is this color array in the array of custom color separations?
/FrameColorInSepListCMYK { % [ c m y k ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsCMYK % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { % [ r g b ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsRGB % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def

% Level 1 color operators saved and redefined
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 

% Setgray patch
/setgray { % num
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ % go to white unless the current sep color is black
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { % r g b
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] % r g b [ r g b ]
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor % safe since we will overwrite the color state
		currentrgbcolor  % r g b - Let PostsCript to the conversion.
		setrgbcolor % call our version
	} 
	ifelse
	end
} bind def
FrameDict begin

/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { % c m y k
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put

% Set up a prototype pattern for PostScript Level 2
fMLevel1 { 
	% set up screen functions for the patterns in PS level 1
	% each entry contains an angle, spot function, flipped spot function,
	% gray level and frequency multiplier.
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { % prototype level 2 pattern dictionary
	% define some PostScript procedures for known jaggy patterns.
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		% Always 1 for PS Level 2
		/PaintType 2 def		% Uncolored pattern
		/TilingType 3 def		% constant spacing and faster tiling
		/BBox [ 0 0 8 8 ] def 	% bounding box
		/XStep 8 def			% X offset
		/YStep 8 def			% Y offset
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse

%combineColor puts together the current gray value (which could also be
%a fraction of on bits for a fill pattern and the current color and calls
%the appropriate function
%
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { % separation case
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				% Level 1 patterns are either all there or not there at all
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def

/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
% freq and sangle are used for ps Level 1 pattern building.
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def

%
% screen index depending on dpi
%	- screenIndex smallint
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def

%
% These routines get the standard Adobe frequencies, angles, and spot functions
% depending on the DPI
%
% - getCyanScreen freq angle spotfunction
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getMagentaScreen freq angle spotFunction
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getYellowScreen freq angle spotFunction
% note that some of these use a "tripple dot" function at 1/3 the frequency
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def

%
% - getBlackScreen freq angle spotFunction
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def

%
% - getSpotScreen freq angle spotFunction
/getSpotScreen {
	getBlackScreen
} bind def

%
% - getCompositeScreen freq angle spotFunction
/getCompositeScreen {
	getBlackScreen
} bind def

% FmSetScreen sets the screen for either PostScript Level 1 or Level 2 and optionally
% sets the accuratescreens flag in the latter case
% freq angle spotfunction FMSetScreen -
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def

% This sets the default screen as was set at the beginning of the job
% - setDefaultScreen -
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def

% This sets the current screen depending on FrameSepIs
% - setCurrentScreen -
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def


end

% End of Color separation code
%
	
/FMDOCUMENT { % xscale yscale edown negative paperwidth paperheight manfeed numcopies numfonts
	array /FMfonts exch def % Why isn't this in FrameDict???
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def % invert page
	0 ne /edown exch def % flip page along y axis
	/yscale exch def
	/xscale exch def

	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def % some PS's leave junk on dict ...
		/FMoptop count def % ...or on operand stack...
		setpapername % This stuff may alter the transfer/screen/angle
		manualfeed {true} {papersize} ifelse % true->more work to do
		{manualpapersize} {false} ifelse % true->more work to do
		{desperatepapersize} {false} ifelse % true->failed completely
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for %...if tray not installed
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse % fMLevel1
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def

			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse

	end % FrameDict
} def % only used at startup, so no bind

/FMBEGINPAGE { % pagewidth pageheight landscape color-arrays count
	FrameDict begin % for the whole page...
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { % check for landscape
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
% paint the whole page in "white".  If the page is inverted, then
% this will actually paint our black background
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave % for CLIP
} def % only used infrequently, so no bind

/FMENDPAGE {
	grestore % for CLIP
	pagesave restore
	end % FrameDict
	showpage
	} def % only used infrequently, so no bind

/FMFONTDEFINE { % fontindex nonstd_encoding fontname -- 
	FrameDict begin
	findfont % fontindex nonstd_encoding font
	ReEncode % fontindex font'
	1 index exch % fontindex fontindex font'
	definefont % fontindex font"
	FMfonts 3 1 roll %  FMfonts fontindex font"
	put
	end % FrameDict
	} def % only used infrequently, so no bind

/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end % framedict
	} def % Only called once, so no bind

/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end % FrameDict
	} def % only used infrequently, so no bind

% Set things to a known, quiescent state, for when we switch to another writer
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray % Not FMsetgray; only called outside of our environment!
	} bind def

/FMBEGINEPSF { % <theta> llx lly urx ury fw fh fx fy
	end % FrameDict
	/FMEPSF save def % in userdict
	/showpage {} def % this def is in userdict
%- See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
%- "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def % FMBADEPSF knows this is the longest!
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
%	/initmatrix {(initmatrix) FMBADEPSF} def	% Aldus Freehand 4.0 epsf uses this harmlessly <Gus 4/26/95>
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall % neat trick
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale % then scale
	llx neg lly neg translate % then compensate for LL offset 
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count def % tricky! "/FMoptop" on stack
	} bind def

/FMENDEPSF {
	count -1 FMoptop {pop pop} for % clear EPS junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMEPSF restore
	FrameDict begin % for the whole page...
	} bind def

FrameDict begin % put most defs here

/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def

/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def

/pagedimen { % name width height
	paperheight sub abs 16 lt exch % 16pt is an arbitrary slop amount
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def

/setpapername { % Already set up: paperwidth paperheight and manualfeed
	/papersizedict 14 dict def % one for /papername, one for /unknown
	papersizedict begin
	/papername /unknown def % in case no match
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def

/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end % return true if more work to do
	} bind def

/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped % return true if more work to do
	} bind def

/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped % return true iff failed
		end
		} {true} ifelse % return true iff failed
	} bind def

/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def

%
% Font re-encoding to include diacritics
% 
/DiacriticEncoding [

/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron

] def

/ReEncode { % nonstd_encoding font -- reencodedfont
	dup % nonstd_encoding font font
	length % nonstd_encoding font dictlength
	dict begin % nonstd_encoding font % currentdict = newdict
	{% forall % forall is over font to be copied
	1 index /FID ne % skip FID
		{def} % defs go into newfontdict which is currentdict
		{pop pop} ifelse % copy all keys including /Encoding
	} forall % nonstd_encoding
	0 eq {/Encoding DiacriticEncoding def} if % --
	currentdict % push a copy of the copied font dict onto operand stack
	end % font' % before popping it off dictionary stack
	} bind def

FMPColor 
	% setup procs for color printing
	{

	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	% setup procs for B&W printing
	{
	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse

/K { % c m y k r g b SEPARATION
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
%
% graymode is true if we are just doing gray fills, this way do not keep calling
% setscreen. I don't know what the cost is on calling setscreen with defaults, but
% this is easy to keep track of, and we know for sure we aren't wasting cycles.
% if graymode is false and fMLevel1 is false, then we are using Level 2 patterns.
%
/graymode true def

% used by level 1 patterns
% defaultflip matrixentry fmGetFlit -> eith -1 or 1
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if

/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop % angle spot fspot gray mult
			freq 								% freq
			mul									% times multiplier
			5 2 roll							% angle spot fspot gray mult freq -> gray freq angle spot fspot
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		% landscape
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								% portrait     
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		% take regular or flipped spot function
			fMNegative { 
				{neg} fmConcatProcs 			% invert spot function
			} if
			bind
			% we need to bypass any screen filter and go directly to systemdict
			% to avoid problems with Kodak Precision calibration software
			% <Gus 9/13/93>
			systemdict /setscreen get exec		% leave graylevel on stack
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { % Level 2 version
		pop pop
		dup patCache exch known {
			patCache exch get
		} { % not in cache
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
%			9 orgfreq 
%				organgle sin abs organgle cos abs add div
%				dup 16 div round dup 0 le {pop 1} if  % Unix pattern size
%			    dup  9 div round dup 0 le {pop 1} if  % Mac larger (WYSIWYG) size
%					div div dup matrix scale % This gives Unix pattern size.
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def

/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def

/normalize {
	transform round exch round exch itransform
	} bind def

/dnormalize {
	dtransform round exch round exch idtransform
	} bind def

/lnormalize { % line widths are always odd so that arrow heads work
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def

/H { % THICK
	lnormalize setlinewidth
	} bind def

/Z {
	setlinecap
	} bind def
	
% This is used to fill or stroke white behind a Level 2 pattern
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def

/X { % TEXTURE
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} % Silly to pass parameters here
	{setGrayScaleMode}
	ifelse
	} bind def

/V { % FILL
	PFill gsave eofill grestore
	} bind def

/Vclip {
	clip
	} bind def

/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/N { % PEN
	PStroke
	} bind def

/Nclip {
	strokepath clip newpath
	} bind def

/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def

/L { % POLYLINE
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def

/Y { % POLYGON !!!
	L % POLYLINE
	closepath
	} bind def

/R { % RECT x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y % POLYGON
	} bind def

/rarc % Leaves all sorts of junk on the operand stack for caller to clear off
	{rad % arcto might fail if we're scaled way down
	 arcto
	} bind def

/RR { % ROUNDRECT x1 y1 x2 y2 r
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if % in case rarc failed for degenerate arcs
	cleartomark
	} bind def

/RRR { % ROUNDRECT ROTATED xs ys x1 y1 x2 y2 x3 y3 x4 y4 r
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto % eats xs ys
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def

/C { % CLIP
	grestore
	gsave
	R % RECT
	clip
	setCurrentScreen
} bind def

/CP { % CLIPPOLY p1x p1y p2x p2y ... n 
	grestore
	gsave
	Y % POLYGON
	clip
	setCurrentScreen
} bind def

/F { % FONT
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def

/Q { % POINTSIZE (& font)
	/FMpointsize exch def
	F % could be slightly optimized here
	} bind def

/T { % TEXT <string> <x> <y>
	moveto show
	} bind def

% Callers of RF (rotate/flip) must gsave (or save) first; (g)restore when done
/RF { % <flip> <theta>
	rotate
	0 ne {-1 1 scale} if
	} bind def

/TF { % TEXTFLIPROTATE <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	show
	grestore
	} bind def

/P { % PADTEXT <pad> <string> <x> <y>
	moveto
	0 32 3 2 roll widthshow
	} bind def

/PF { % PADTEXTFLIPROTATE <pad> <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def

/S { % SPREADTEXT <spread> <string> <x> <y>
	moveto
	0 exch ashow
	} bind def

/SF { % SPREADTEXTFLIPROTATE <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def

/B { % PADSPREADTEXT <pad> <spread> <string> <x> <y>
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def

/BF { % PADSPREADTEXTFLIPROTATE <pad> <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def

/G { % ARCFILL theta1 theta2 width height x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	PFill fill
	grestore
	} bind def

/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
    normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
    translate
    scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def

/Gclip { % ARCFILL theta1 theta2 width height x y swid
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	clip newpath
	restorematrix
	} bind def

/GG { % ARCFILL ROTATED theta1 theta2 width height angle x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	rotate % eats angle
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath
	PFill
	fill
	grestore
	} bind def

/GGclip { % ARCFILL ROTATED theta1 theta2 width height angle x y
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	clip newpath
	restorematrix
	} bind def

/GGstrk { % ARCFILL ROTATED swid theta1 theta2 width height angle x y
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/A { % ARCPEN theta1 theta2 width height x y
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
	normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
	translate 
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	strokepath clip newpath
	restorematrix
} bind def

/Astrk {
	Gstrk
} bind def

/AA { % ARCPEN ROTATED theta1 theta2 width height angle x y
	gsave
	savematrix
	newpath
	% theta1 theta2 width height angle x y
	3 index 2 div add exch 4 index 2 div sub exch 
	% theta1 theta2 width height angle x y
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate % eats x y
	rotate % eats angle
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	strokepath clip newpath
	restorematrix
} bind def

/AAstrk {
	GGstrk
} bind def

/BEGINPRINTCODE { % -x -y width height
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count 7 sub def % tricky! 7 params on stack, plus "/FMoptop"
	/FMsaveobject save def
	userdict begin % insulate user from FrameDict; not in /FMdicttop count
	/showpage {} def % this def is in userdict
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	3 index neg 3 index neg translate
	} bind def

/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for % clear user junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMsaveobject restore % this is now safe, unless user very malicious
	} bind def

/gn { % get a number in a funny encoding scheme
	0 % result on stack
	{	46 mul % shift old digits
		cf read pop % get next character
		32 sub % zero is the space character
		dup 46 lt {exit} if % quit if we're the last digit
		46 sub add % add in this digit and loop around for next
		} loop
	add % result on stack
	} bind def

/cfs { % create a string of length "sl" filled with "val"s
	/str sl string def % create string as "str"
	0 1 sl 1 sub {str exch val put} for % fill array
	str def % define real array name, too; name is on stack from caller
	} bind def

/ic [ % "case" stmt list of procedures that the image commands should call
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def

/ms { % make all the strings
	/sl exch def % remember length of currently existing strings
	/val 255 def % that's white
	/ws cfs % make "ws" a string filled with white
	/im cfs % and "im" is a complete image scanline
	/val 0 def % that's black
	/bs cfs % make "bs" a string filled with black
	/cs cfs % here's where we'll put complete command lines
	} bind def

400 ms % make strings that will be plenty long for most applications

/ip { % image procedure; reads and executes commands to make scanlines
	is % leave image string and...
	0 % ...image position on stack all through this procedure
	cf cs readline pop % get a string of commands
	{	ic exch get exec % execute next command
		add % all commands leave a length on the stack; update pos
		} forall % step through all commands
	pop % get rid of image position pointer
	% image string left on stack, so it's returned to image primitive
	} bind def
/rip { % this is similar to ip above, except for 24 bit images
	   % this takes an extra argument, the width of the image
	  % do red
	  bis ris copy pop % copy blue to red
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  ris gis copy pop % copy red to green
	  dup is exch % position of green is width bytes into is
	  % do green
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop % copy green to blue
	  dup add is exch % position of blue is 2*width bytes into is
	  % do blue
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def

/rip4 { % this is similar to ip above, except for 32 bit images
	   % this takes an extra argument, the width of the image
	  % do cyan
	  kis cis copy pop % copy black to cyan
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  cis mis copy pop % copy cyan to magenta
	  dup is exch % position of magenta is width bytes into is
	  % do magenta
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop % copy magenta to yellow
	  dup dup add is exch % position of yellow is 2*width bytes into is
	  % do yellow
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop % copy yellow to black
	  3 mul is exch % position of black is 3*width bytes into is
	  % do black
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def


/wh { % fill a number of bytes with "white"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	ws 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/bl { % fill a number of bytes with "black"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	bs 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/s1 1 string def

/fl { % fill a number of bytes with a specific hex value
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len % remember where we got to
	} bind def

/hx { % read hex bytes directly; on entry, stack has <str> <pos> <len>
	3 copy getinterval % stack has <str> <pos> <len> <substr>
	cf exch readhexstring pop pop % stack back to <str> <pos> <len>
	} bind def

/wbytes { % width depth -> wb      find width in bytes  given 1, 2, 8 or 24 or 32
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAPc
	} bind def
%
% Common routine for imaging compressed images
%
/COMMONBITMAPc { % iw, ih, width, height, theta, x y depth proc
		 % (x,y) is the lower left corner of the image
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc                % run the desired proc after save has occurred
	/is im 0 lb getinterval def % image substring
	ws 0 lb getinterval is copy pop % whiten it
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{ip} image % zap!
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def
/BEGINBITMAPBW { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAP
	} bind def
%
% Common routine for uncompressed images
%
/COMMONBITMAP { % iw, ih, width, height, theta, x y depth proc
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc              % run the desired proc after save has occurred
	/is width depth wbytes string def
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{cf is readhexstring pop} image
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def

%
% All this hairy color setup stuff gus wrote on the mac, I just copied and
% changed the variable names to be humanly readable.

/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def

fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
% The HP PaintJet XL300 ignores the gray transfer curve but still sets its
% default black generation and undercolor removal functions as if it is
% used. This causes black colors not to work. Bug#56844 <Gus 2/22/93>
% - We go back to the old (correct?) way of doing this since this code
% is now bypassed for PS Level 2 printers in favor of colorSetup2 which
% uses PS Level 2 indexed color, which is much cleaner. <Gus 3/3/93>
		/u kk currentundercolorremoval exec def
%-		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
% Here, we set up indexed color for imaging on PS Level 2 without mucking around
% with the transfer functions.

/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse

%
% Setup a transfer function to convert psuedo color values into grayscale
% values based on the color lookup tables.
%
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
%
% image a color image
%
/BITMAPCOLOR { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
%
% Compressed color image rendering
%
/BITMAPCOLORc { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
%
% image a color image to a b&width device
%
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { % c m y k width
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { % r g b width
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end % of FrameDict definitions

% OPI stuff
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def

% Dashed lines stuff
/I { setdash } bind def
/J { [] 0 setdash } bind def

%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 22 FMDOCUMENT
0 0 /Palatino-Roman FMFONTDEFINE
1 0 /Palatino-Italic FMFONTDEFINE
2 0 /Palatino-Bold FMFONTDEFINE
3 0 /Helvetica-Narrow-Bold FMFONTDEFINE
4 0 /Courier-Bold FMFONTDEFINE
5 0 /Courier-BoldOblique FMFONTDEFINE
6 0 /Palatino-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "i" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
108 117 486 612 R
7 X
0 0 0 1 0 0 0 K
V
108 570.45 486 612 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 570.45 486 612 R
7 X
0 0 0 1 0 0 0 K
V
108 605.14 270 605.14 2 L
V
3 H
2 Z
0 X
N
108 596.14 270 596.14 2 L
7 X
V
1 H
0 X
N
36 72 576 720 C
0 0 0 0 1 1 1 K
0 2 Q
7 X
(0) 108 546.45 T
0 0 0 1 0 0 0 K
0 36 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan) 109 546.45 T
0 24 Q
(Library Refer) 108 503.45 T
(ence: Inter) 249.29 503.45 T
(operability) 359.33 503.45 T
0 14 Q
(V) 108 471.12 T
(ersion 1.0 Beta Pr) 116.55 471.12 T
(eview) 223.15 471.12 T
108 117 486 612 C
248.06 117 345.94 225 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
%%BeginBinary:  11171    
337 419 80.88 100.56 0 257.06 117 BEGINBITMAPGRAYc








BzJrJzJz
?D3PID3O!5D3O!8D3J$J'JRJS?%JT
KD3D3D3O,D3D3D3D3D3D3O4O!FFFFFFFFO!J'J&<'JrJ%8$JT
O D3D3D3D3D3D3O!D3D3D3D3D3D3D3D3D3D3D3O/D3O(FFFFFFFFFFFFFFO.J'J&G'J&=rJ$8&JQ
O&D3D3D3D3D3D3DD3D3D3D3D3D3D3D3D3D3D3O$D3D3D3D3D3D3O"D3D3D3D3D3D3D3D3O5J&J%J'J%I'J%@t
O,D3D3D3D3D3;D3D3D3D3<D3D3D3D3D3D3HD3D3D3D3D3D3D3D3D3D3FD3D3D3D3D3J'F&J'J&JrJ%Js
O1D3D3D3D3D3D3D3D3D3D3D3FD3D3D3D3D3D3=D3D3D3D3D3=D3;D3D3D3D37D3J';&J'H&JrF%Jt
O7D3D3D3D3D3D3D3D3D3D3D3O#D3D3D3D3D3D3D3D3D3D3D3ID3D3D3D3D3CD3JP;QJ'?$J'>#JtJ&
O8O(D3D3D3D3D3D3D3D3D3O'D3D3D3D3D3D3D3D3O"D3AD3D3D3D3D3JQFQJP?QJ%>RJsJ%
O2O#O&FFFFFFFFO&D35D3D3D3D3B"JPJQJPJRJPISJt>%
FFO <F4HO&D3D3D3D3D3CPJPJQJ%JQJ%JRJ#>Q
DG<FFFFFFFF@>FFFFFFFF@O&FFFFHPJPJQGPJRHPJRJ%FQ
:O$JKIFFFFFFFFJ%FQJQ<PJQ=PJRJ%J"
7FFFFFFFFO/O(O)>FFFFFFFF:FFJP<PJQJRJSH%
;O;O3O5FFFFFFFFJQJ'JrJR=%
@O@D3D3D3D3D3D3O4D3O<FFFFFFFFJ'J&<'J%=rJR
@D3D3D3D3D3D3O;D3D3D3D3D3D3D3D3D3D3D3O*D3D3D3D3D3O<J'<'J&G'J&HrJs
:D3D3D3D3D3D3D3D3D3D3D3D3O0D3D3D3D3D3D3D3D3D3D3D3MD3D3D3D3D3D3O6D3J'H'J&J'J%JrJ&>s
4D3D3D3D3D3D3D3D3D3D3D3D3O%D3D3D3D3D3<D3D3D3D3D3D3CD3D3D3D3>D3O*D3D3D3D3D3D3D'J'J'J&J%JrJ%Js
D3D3D3D3D3D3>D3D3D3D3D3D3GD3D3D3D3D3D3GD3D3D3D3D3:D3D3D3D3ID3MD3D3D3D35D3B#J'J&J'E&JrJ&Js
D3D3JD3D3D3D3D3D3<D3D3D3D3D3O$D3D3D3D3D3D3D3D3D3D3D3O&D3AD3D3D3D3D3AD3J'G&J';%JrJ&Js
O0D3D3D3D3D3D3D3D3D3D3D3O/D3D3D3D3D3D3D3D3D3D3O2D35D3D3D3D3D3O D3J'<&JP;QJr@%J&
O6D3D3D3D3D3D3D3D3D3D3D3O5O7D3D3D3D3D3O-D3D3D3D3D3JQ<QJPFQJ$<%
O6O/O5FFFFFFD3D3D3D3B#JPHQJPJQJ%?RJ#
FFFFO#O$;O+FFFFFFFFO1FFFFDPJQJQJPJQJ%JRJ%
F=GFO!FFFFFFFF4O&FFFFFFFFIPJPJQJPJQJ%JSJ%
<I<O#EFFFFFFFF?HFFFFFFFFJQGPJQGPJQJ%JRJ%
8O&O.;FFFFFFFFK=FFFFFFFFJP<QJQ<PJQG%JRH%
>O1O9FFFFFFFFO(FFFFFFFFJQJQJQ=%JR=%
CO=ODFFFFFFFFO3FFFFFFFFJ'JrJ(J(
CD3D3D3D3D3D3O=D3OIFFFFFFD3FFFFFFO>FFFFFFFFD3FFFFJ&<&J&='JrJr
>D3D3D3D3D3D3D3D3D3D3O3D3D3D3D3D3D3D3D3D3D3D3OCD3O@D3J&F&J&H'J&='J%=r
9D3D3D3D3D3D3D3D3D3D3O)D3D3D3D3D3D3D3D3D3D3D3O8D3D3D3D3D3D3D3D3D3D3D3O6D3D3D3D3D3J&J&J&F"B'J%H&J$Hr
4D3D3D3D3D3:D3D3D3D3D3MD3D3D3D3D3FFD3D3D3D3D3D3O.D3D3D3D3D3D3D3D3D3O.D3D3D3D3E&J&J%J#F'J&J'J%J'
D3D3D3D3D3DD3D3D3D3D3DD3D3D3D36FFFFD3D3D3D3D3D3O#D3D3D3D3D3;D3D3D3D3D3D3O$D3D3D3D3<D3D3D3D3D3D3B$J&J&J#J'J&J&J$
D3D3D3O D3D3D3D3D3:D3D3D3D3D3<FFFF4D3D3D3D3D3D3FD3D3D3D3D3FD3D3D3D3D3JD3D3D3J&F&J":#J'J&J&J$
O4D3D3D3D3D3D3D3D3D3D3>D3FFFF8D3D3D3D3D3D3;D3D3D3D3D3O"D3D3D3D3D3BD3D3D3J&<&J#J'G%J'J%
O9D3D3D3D3D3D3D3D3D3D3JFFFF<D3D3D3D3D3D3D3D3D3D3O,D3D3D3D3D3D38D3D3D3D3J%<PJ#J'=%J&F$
O:FFFFFFFFLFFFF@D3D3D3D3D3D3D3D3D3D3O6D3D3D3D3D3D3D3D3JPEPJ#J%=QJ'=$
O5IFFFF@FFFFFFFFO9D3D3D3D3D3D3D3D3D3J%JPJ"A#JPGQJ%=Q
O1FFFFFFFF9:D3FFFF9O5FFFFFFFFJ%JPJ#I%JQJ%GQ
O-FFFFFFFFBCFFFFFFFFFFFF<O+FFFFFFFFB#JPJPJ#C%JQJ%JP
FFFFHK@FFFFFFFFFFFFFO!FFFFFFFF;D%J%JPJ#<PJQJ%JQ
FFFFFFFF@FFFFFFFFO'=FFFFO"EFFFFFFFFDHPJPJP="HQJQJ%JP
6O0D3O-;FFFFFFFFO JPC%JPJQG%JQ
7FFFFFFFFO:P FFFFFFFFO)J%;%J$JQ=%JQ
<FFFFFFFFFFFFFFFFOCFFFFFFP#FFFFFFFFO3JPJRJP
@R%O=J&J&JQ
@D3D3D3D3D3R'D3D3D3D3D3OBJ';%J%J%;'J$
:D3D3D3D3D3D3D3D3D3D3OCD3D3D3D3P&D3D3D3D3D3D3D3D3D3D3OBFFFFFFJ'E%J%J%E&J#
4D3D3D3D3D3D3D3D3D3D3O;D3D3D3D3P&D3D3D3D3D3D3D3D3D3O>D3D3E&J%J&J$J'J%
D3D3D3D3D39D3D3D3D3O2D3D3D3D3D3P'D3D3D38D3D3D3D3D3D3O4D3D3D3D3B$J%J&J%J&J$
D3D3D3BD3D3D3D3O)D3D3D3D3D3P(D3D3D3D3AD3D3D3D3D3O,D3D3D3J&J%H"J%J'J$
O'D3D3D3D3D3O D3D3D3D3D3ODD3D3D3D3JD3D3D3D3D3D3O#D3D3D3J%J&J$J'J%
O,D3D3D3D3ED3D3D3D3D3P*D3D3D3O&D3D3D3D3D3D3GD3D3D3D3J%J&J%J&J$
O0D3D3D3D3<D3D3D3D3D3P+D3D3D3D3O/D3D3D3D3D3?D3D3D3J%J%J"J%J'J$
O4D3D3D3D34D3D3D3D3O=D3<D3D3D3D3O8D3D3D3D3D3D36D3D3D3J%A&J"J&J$J&C%
O8D3D3D3D3D3D3D3D3D3ED3IFFFFD3D3D35D3D3D3OBD3D3D3D3D3D3D3D3D3J%=%J)B%J'<"
O<D3D3D3D3FFFFFFFFODFFFFD3D3D3D3D3D3D3D3D3D3OJD3D3D3D3D3D3D3JPA%J#:%;$J#<Q
O;FFFFFFFFOBFFFFD3D3D3D3D3D3D3P$FFFFJPJ%J#9$;PJ%DQ
O64FFFFFFFFO@FFFFFFFFFFOLFFFFFFFFJ%J%J"J$CQJ$JQ
O2FFFFFFFF=FFFFFFFF;D3O"FFFFFFOCFFFFFF8JPJ%JPJ$JQ
O-EFFFFFFFFP"O;FFFFFFAJPJ%JPJ$J$
O(O FFFFFFFFP#O3FFFFFFJFFFFFFJPJ%JPJ%
O#O)FFFFFFFFP$O*FFFFFFFFJPJ%B"JQJ$
LO2FFFFFFFFD3OFO!FFFFFFJPJ%JPJ$
GO;FFFFFFFFP'GFFFFFFJ%J%JPJ$
CFFFFFFFFODFFFFFFFFP(?FFFFFFB%DPJ%JPJ$
FFFFFFFFOLFFFFFFFFP)7FFFFFFF%;PJ"JQC%
FFFFFFFFP'FFP-FFFFFFFFJPJP;$
4R@FFFFFFI&JP
D3D3D3D3D3RFD&;%J&
D3D3D3D3D3D3D3D3D3RCD3D3D3D3D3B#D%J$;&
D3D3D3D3D3D3R<D3D3D3D3D3D3D3D3J%J#J$C&
@D3D3D3D3P"D3D3P1D3D3D3D3D3D3D3D3J$J%J$J&
DD3D3D3OID3D3D3D3P0D3D3D35D3D3D3D3D3J%J$J$J&
GD3D3D3D3OBD3D3D3P1D3D3D3=D3D3D3D3D3J%J%J$J&
KD3D3D3D3O:D3D3D3D3P1D3D3D3ED3D3D3D3D3J%J%C"J$J&
O!D3D3D3D3O2D3D3D3D3D3P$D3D3D3MD3D3D3D3D3J$J%J%J%
O%D3D3D3O+D3D3D3D3P2D3D3D3D3O'D3D3D3D3J%J$J$J&
O(D3D3D3D3O$D3D3D3P3D3D3D3O/D3D3D3D3D3J%J%J$J&
O,D3D3D3D3JD3D3D3D3P3D3D3D3O7D3D3D3D3D3J%J%J"J$J&
O0D3D3D3D3BD3D3D3D3=D3ODD3D3D3O?D3D3D3D3D3J$J$J$J&
O4D3D3D3<D3D3D3P5D3D3D3OGD3D3D3D3D3J%J%J#J&
O7D3D3D3D34D3D3D3D3P6D3D3P!D3D3D3D3D3J%B%J&
O;D3D3D3D3D3D3D3D3RBD3D3D3D3D3J$;%J"J"J"
O?D3D3D3D3D3D3D3MD3O>FFP+FFJ%;%J%J#
O>FFFFFFFFFFFFFFFFP?FFFFFFFFP%FFFFJ%C%JPJ$
O:FFFFFFFFFFFFFFFFP?OKFFFFFFJ%J%J%J#
O6FFFFFFFF5FFFFFFFFP@FFFFFFFFOEFFFFJ%J%J%J#
O2FFFFFFFF=FFFFFFFFP@FFFFFFFFO?FFFFJ%J%J"JPJ#
O.FFFFFFFFEFFFFFFFF>D3P!O8FFFFJ%J$J%J$
O*FFFFFFFFMFFFFFFPBFFFFFFFFO1FFFFFFJ%J%JPJ#
O&FFFFFFFFO&FFFFFFFFPBO*FFFFJ%J%J%J#
O"FFFFFFFFO.FFFFFFFFPCFFFFFFFFO$FFFFJ%J%F"J%J$
LFFFFFFFFO6FFFFFFFFD3P2FFFFFFFFKFFFFFFJ%J%JPJ#
HFFFFFFFFO>FFFFFFFFPCDFFFFJ%J$J%J#
DFFFFFFFFOFFFFFFFPEFFFFFFFF>FFFFB#H%J%J%J#
FFFFFFFFFFFFOMFFFFFFFFPEFFFFFFFF8FFFFD%@%J%8"JPF$
FFFFFFFFFFFFFFFFP'FFFFFFFFD3PBFFFFFFH$9%J$J%@#
FFFFFFFFFFFFFFP/FFFFFFPGFFFFFFFFFFFFJ$J%:#
5FFFFFFS3FFFFFFFFFFFFJ$J%
5D3D3D3S7FFFFFFFFI#9$J%
D3D3D3D3D3S5D3D3D3D3F$>$J#:%
D3D3D3D3D3D3S0D3D3D3D3D3D3D#D$J#@%
D3D3D3D3D3S+D3D3D3D3D3D3B#I$J$F&
D3D3D3D3D3S%D3D3D3D3D3D3D3D3J$J"J#J%
DD3D3D3P'D3PFD3D38D3D3D3D3J#J&J#J&
GD3D3P"D3D3D3D3D3PCD3D3>D3D3D3D3D3J$J%J$J%
ID3D3D3OID3D3D3D3PED3D3D3ED3D3D3D3J$J$J#J%
LD3D3D3OCD3D3D3PGD3D3LD3D3D3D3J$J$J#J&
O!D3D3D3O=D3D3D3PHD3D3O$D3D3D3D3D3J$J$E"J$J%
O$D3D3D3O7D3D3D3D3P8D3D3D3O+D3D3D3D3J$J$J#J"
O'D3D3D3O1D3D3D3PID3D3O2D3J$J$J#
O*D3D3D3O+D3D3D3PJD3D3J$J$J#
O-D3D3D3O%D3D3D3PKD3D3J$J$J"J$
O0D3D3D3MD3D3D3<D3P.D3D3D3J$J$J#
O3D3D3D3GD3D3D3PLD3D3J$J$J#
O6D3D3D3AD3D3D3PMD3D3J#J%J$
O9D3D3;D3D3D3D3PMD3D3D3J$J$J"J#
O;D3D3D35D3D3D3JD3P$D3D3J$E$J#
O>D3D3D3D3D3D3Q"D3D3J$?$J$
OAD3D3D3D3D3D3Q"D3D3D3J$9$J#
ODD3D3D3D3D3D3Q#D3D3J$9$J#9#
ODFFFFFFFFFFFFPJD3D3D3D3J%?$J"J#9%
O@FFFFFFFFFFFFFFO#D3OCFFFFFFFFFFFFJ$F$J%
O=FFFFFFFFFFFFPMFFFFFFFFJ$J$J%
O:FFFFFF6FFFFFFQ FFFFFFFFJ$J$J%
O7FFFFFF<FFFFFFQ!FFFFFFFFJ%J$J"J$
O3FFFFFFFFBFFFFFFFD3P)FFFFFFJ$J$J%
O0FFFFFFIFFFFFFQ"FFFFFFFFJ$J$J%
O-FFFFFFO!FFFFFFQ#FFFFFFFFJ$J$J%
O*FFFFFFO'FFFFFFQ$FFFFFFFFJ%J$J"J%
O&FFFFFFFFO-FFFFFF;D3P7FFFFFFFFJ$J$J$
O#FFFFFFO4FFFFFFQ&FFFFFFJ$J$J%
O FFFFFFO:FFFFFFQ&FFFFFFFFJ$J$J%
KFFFFFFO@FFFFFFQ'FFFFFFFFJ%J$F"J%
GFFFFFFFFOFFFFFFFD3PEFFFFFFFFJ$J$J%
DFFFFFFOMFFFFFFQ)FFFFFFFFJ$J$J$
AFFFFFFP%FFFFFFQ*FFFFFFJ$J$J%
>FFFFFFP+FFFFFFQ*FFFFFFFFJ%J$J%
:FFFFFFFFP1FFFFFFQ+FFFFFFFFJ$J$8"J%
7FFFFFFP8FFFFFFD3Q)FFFFFFFFJ$J$J%
4FFFFFFP>FFFFFFQ-FFFFFFFFG$J$
FFFFFFT'FFFFFFC%J%
FFFFFFFFT-FFFFFFFFB"J%
FFT5FFFFFFFFJ%
TFFFFFFFFFJ%
TJFFFFFFFF
B#
D3D3D$J"
D3D3D3T<D3G#J#
D3D3T8D3D3I$J"
D3D3D3T4D3J#J#
6D3D3T0D3D3J#J#
8D3D3T,D3D3J$J#
:D3D3D3T'D3D3J#J"
=D3D3T$D3J#J#J#
?D3D3P9D3D3Q3D3D3J$J$J#
AD3D3D3P3D3D3D3Q3D3D3J#J#J"
DD3D3P/D3D3Q5D3J$J#J#
FD3D3D3P*D3D3Q5D3D3J#J$J#
ID3D3P%D3D3D3Q5D3D3J#J#B"J"
KD3D3P!D3D3D3Q*D3J$J$J#
MD3D3D3OID3D3D3Q7D3D3J#J#J#
O"D3D3OED3D3Q8D3D3J#J#J#
O$D3D3OAD3D3Q8D3D3J$J$J"J"
O&D3D3D3O;D3D3D36D3Q"D3J#J#J#
O)D3D3O7D3D3Q:D3D3J#J#J#
O+D3D3O3D3D3Q:D3D3J$J$J"
O-D3D3D3O-D3D3D3Q;D3J#J#J"J#
O0D3D3O)D3D3AD3PHD3D3J$J$J#
O2D3D3D3O#D3D3D3Q<D3D3J#J#J"
O5D3D3MD3D3Q>D3J#J#J#
O7D3D3ID3D3Q>D3D3J$J$J"J#J#
O9D3D3D3CD3D3D3KD3OID3D3CD3D3J#J#J$J"
O<D3D3?D3D3PLD3D3D3?D3J#J#J$J#
O>D3D3;D3D3Q#D3D3D3:D3D3J$J$J$J"=$J#
O@D3D3D35D3D3D3O%D3D3D3OFFFD3D3D35D3D3J#G#J%J$F#
OCD3D3D3D3O+D3D3D3D3OMD3D3D3D3D3J$A$J%J$B"
OED3D3D3D3D3D3O1D3D3D3D3OLD3D3D3D3J#=#J%J"E$=#
OHD3D3D3D3O8D3D3D3D3O;FFD3D3D3D3D3J#9#J&J$8#
OJD3D3D3D3O>D3D3D3D3D3OID3D3D3D3D3J#9#J%J#
OJFFFFFFFFOCD3D3D3D3OHD3D3J#=#J%J"
OHFFFFFFFFOED3D3D3D3O/FFJ$A$J&
OEFFFFFFFFFFFFOFD3D3D3D3D3J#G#J%
OCFFFFFFFFOID3D3D3D3J#J#J%J"
OAFFFF5FFFFOKD3D3D3D3O#FFJ$J$J%
O>FFFFFF9FFFFFFOLD3D3D3D3J#J#J&J"
O<FFFF?FFFFP D3D3D3D3D3IFFJ#J#J%
O:FFFFCFFFFP#D3D3D3D3J$J$J%
O7FFFFFFGFFFFFFP$D3D3D3D3J#J#J%J"
O5FFFFMFFFFP&D3D3D3D3>FFJ#J#J&
O3FFFFO#FFFFP(D3D3D3D3D3J$J$J%
O0FFFFFFO'FFFFFFP*D3D3D3D3J#J#J%H"
O.FFFFO-FFFFP,D3D3D3D3FFJ#J#J&
O,FFFFO1FFFFP.D3D3D3D3D3J$J$J%
O)FFFFFFO5FFFFFFP0D3D3D3D3J#J#J%<"
O'FFFFO;FFFFP2D3D3D3D3FFJ#J#J%
O%FFFFO?FFFFP4D3D3D3D3J$J$J$
O"FFFFFFOCFFFFFFP5D3D3D3J#J#
O FFFFOIFFFFJ#J#
LFFFFOMFFFFJ#J$
JFFFFP#FFFFFFJ$J#
GFFFFFFP(FFFFJ#J$
EFFFFP-FFFFFFJ#J#
CFFFFP2FFFFJ$J#
@FFFFFFP6FFFFJ#J$
>FFFFP;FFFFFFJ#J#
<FFFFP@FFFFJ$J#Js
9FFFFFFPDFFFFO,83J#J$Jy>"
7FFFFPIFFFFFFI8383J#J#JzJ"
5FFFFQ FFFF8/83783H$J#>y
FFFFFFQ$FFFF83F#J'sJ"
FFFFQ#DADADADADADA83O'83D#Jz<$J"
FFFFPD/DADADADAO-83B#JyJ#J"
FFFFP8DA8DADAO,83JsJ#J"
P>DAHDADAO+83J$
QBDADADAJ"J#J"
P>FFO&DADAO'83J#J"
QGDADAO&83J"J$J"
P?FFO)DADADAO$83J#J"
QLDADAO#83J$
R DADADAB"J"J#J"
D3P3FFO0DADAM83C#J#J"
D3D3QDDADAL83E#J#J"
D3D3QDDADAK83G"J"J"J"
D3P/FFO483L83H#J#
D3D3Q@8383J#J"J#J"
4D3D3P,FFO/8383O"83J"J"J"
6D3Q:83O%83J#J#J"
7D3D3Q68383O'83J#J"J#J"
9D3D3P(FFO)8383O*83J"J"
;D3Q083J#J#J"
<D3D3Q,8383O.83J#J"J#J"
>D3D3P$FFO#8383O183J"J"J"
@D3Q&83O483J#J"J#J"
AD3D3P"FFM8383O683J#J#
CD3D3PL8383J#J"J"
ED3D3PI83O;83J"J"J#J"
GD3OLFFG8383O=83J#J#J"
HD3D3PB8383O@83J#J"J"
JD3D3P?83OC83J"J"J#
LD3OHFFA8383J#J#J"
MD3D3P88383OG83J#J"J"J"
O!D3D3OEFF=83OJ83J"J#J"
O#D3P28383OL83J#J"J"
O$D3D3P/83P!83J#J"J#
O&D3D3OAFF78383J#J#J"
O(D3D3P'8383P%83J"J"J"
O*D3P%83P(83J#J"G#J"
O+D3D3O=FF8383P*83J#J#J"
O-D3D3OK8383P-83J"J"C"
O/D3O;FF83J#J#J"
O0D3D3OE8383P183J#J#J"
O2D3D3OA8383P483J"J"="J"
O4D3O7FF83P783J#J#J"
O5D3D3O;8383P983J#J#
O7D3D3O78383J"J$J"
O9D3O3FFDA83P>83J#J#J"
O:D3D3O1D383P@83J#J%Jr
O<D3D3O-D3D3D3D3P:D3J#J"Jw
O>D3D3O*D3P2D3J"J#Jw
O@D3O'D3D3P'D3J#J#="Jw
OAD3D3O#D3D3D3OCD3J#J"Jw
OCD3D3O D3OAD3J"J#Jw
OED3KD3D3O6D3J#J#C"Jw
OFD3D3GD3D3D3LD3J#J#Jw
OHD3D3CD3D3O"D3J"J"H"Iw
OJD3AD3D3D3J#J#Jw
OKD3D3=D3D3;D3J#J#Jr
OMD3D39D3D36D3J"J"
P!D37D3J#I#
P"D3D3D3D3J#E#
P$D3D3D3D3J#A#
P&D3D3D3D3J"?"
P(D3D3J#;#
P)D3D3D3D3J&
P+D3D3FFD3D3JP
P+J#;#
P)FFFFFFFFJ"?"
P(FFFFJ#A#
P&FFFFFFFFJ#E#
P$FFFFFFFFJ#I"
P"FFFFFFJ"J#
P!FF6FFFFJ#J#
OMFFFF9FFFFJ#J"
OKFFFF=FFJ"J#
OJFF@FFFFJ#J"
OHFFFFCFFJ#J#
OFFFFFFFFFFJ"J#
OEFFJFFFFJ#J"
OCFFFFMFFJ#J#
OAFFFFO"FFFFJ#J#
O?FFFFO&FFFFJ"J"
O>FFO*FFJ#J#
O<FFFFO,FFFFJ#J#
O:FFFFO0FFFFJ"J"
O9FFO4FFJ#J#
O7FFFFO6FFFFJ#J#
O5FFFFO:FFFFJ"J"
O4FFO>FFJ#J#
O2FFFFO@FFFFJ#J#
O0FFFFODFFFFJ#J"
O.FFFFOHFFJ"J#
O-FFOKFFFFJ#J"
O+FFFFP FFJ#J#
O)FFFFP#FFFFJ"J#
O(FFP'FFFFJ#J"
O&FFFFP*FFJ#J#
O$FFFFP-FFFFJ"J#
O#FFP1FFFFJ#J"
O!FFFFP4FFBZJZ
CP7Q6












J"
SL83BvJvJ$
83P/83PH838383J"9"
SJ8383J";"
SI8383J"="
SH8383J"?"
SG8383J"?"
SGFFFFJ"="
SHFFFFJ";"
SIFFFFJ"9"
SJFFFFJ$
SKFF83FFJ"
SLFF


Jw
SG83JvJzAz;wCwJz
P#83L=83A8383834?83JzBzJzJ"J#>"J#
7783<839083683=838383PB8383J"J$G&J"J"<"J"
O 83G8383838383838383E83@8383PE83J"J"J"J"
O!83I83O+83B83JVJZJRJWJWJWA"
962L?>OF83J"A"A"J#B"JSJ"B"F"A"J"
8FFFF83;FFFF835EFFFF83FFP0FFJ"J"J#J"J"
7FFO(FF?FFFFB83QC83J#J"
P0FFFFR/FFJ"
P/FF
J"
P.FF
Jy
Q383

Jz
O-483J#
O+8383J"
O*83J"
O)83JXJZ
O4O@:J"
O(83












J"@"J"J"A"
Q(FF83I83<FF83J"A"J#J#
O(FF83OM8383H8383JwJ"BzJuG"Aw
O583O6FF383783FF83J"J"J"J"
O)FFP FFFFFJFFJ#J#J$J"J$
O*FFFF?FFFFO,FFFFFFDFFJFFFFFFBVJZ<VJVAZ@ZJZ:W:V
C?8;76?JWJV
ES?













JV
R<













ENDBITMAP
%%EndBinary
108 117 486 612 C
36 72 576 720 C
0 0 0 1 0 0 0 K
[/Creator(FrameMaker xm5.1.1P1b)/DOCINFO FmPD2
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.i/DEST FmPD2
[/Dest/F.titledoc/DEST FmPD2
[/Dest/L.titledoc/DEST FmPD2
108 600/I1.1.130209 FmPA
FMENDPAGE
%%EndPage: "i" 1
%%Page: "ii" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 81 540 117 R
7 X
0 0 0 1 0 0 0 K
V
1 9 Q
0 X
(DRAFT) 72 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 126 504 684 R
7 X
V
2 F
0 X
(Copyright and T) 72 678 T
(rademarks) 139.01 678 T
1 F
(Harlequin Dylan: Library Refer) 72 663 T
(ence: Inter) 187.2 663 T
(operability) 225.21 663 T
0 F
(V) 72 648 T
(ersion 1.0 Beta Pr) 77.5 648 T
(eview) 146.02 648 T
(July 1997) 72 633 T
(Part number: DYL-) 72 618 T
(1.0.BP-) 148.1 618 T
(RM3) 175.53 618 T
(Copyright \251 1997 by The Harlequin Gr) 72 603 T
(oup Limited.) 227.38 603 T
(Companies, names and data used in examples her) 72 588 T
(ein ar) 271.03 588 T
(e \336ctitious unless otherwise noted.) 293.34 588 T
-0.04 (All Rights Reserved. No part of this publication may be r) 72 573 P
-0.04 (epr) 297.85 573 P
-0.04 (oduced, stor) 310.96 573 P
-0.04 (ed in a r) 360.13 573 P
-0.04 (etrieval system, or transmit-) 392.33 573 P
-0.16 (ted, in any form or by any means, electr) 72 563 P
-0.16 (onic, mechanical, photocopying, r) 228.58 563 P
-0.16 (ecor) 362.33 563 P
-0.16 (ding, or otherwise, without the) 378.94 563 P
(prior written permission of The Harlequin Gr) 72 553 T
(oup Limited.) 252.93 553 T
-0.05 (The information in this publication is pr) 72 538 P
-0.05 (ovided for information only) 230.7 538 P
-0.05 (, is subject to change without notice, and) 340.94 538 P
(should not be constr) 72 528 T
(ued as a commitment by Harlequin Limited, Harlequin Incorporated, Harlequin) 153.02 528 T
-0.17 (Australia Pty) 72 518 P
-0.17 (. Limited, or The Harlequin Gr) 123.43 518 P
-0.17 (oup Limited. The Harlequin Gr) 244.34 518 P
-0.17 (oup Limited assumes no r) 368.21 518 P
-0.17 (esponsi-) 470.88 518 P
-0.09 (bility or liability for any err) 72 508 P
-0.09 (ors or inaccuracies that may appear in this publication. The softwar) 180.01 508 P
-0.09 (e described in) 446.77 508 P
(this book is furnished under license and may only be used or copied in accor) 72 498 T
(dance with the terms of that) 376.67 498 T
(license.) 72 488 T
(Dylan is a trademark of Apple Computer) 72 473 T
(, Inc.) 235.44 473 T
(Other brand or pr) 72 458 T
(oduct names ar) 142.9 458 T
(e the r) 203.88 458 T
(egister) 228.56 458 T
(ed trademarks or trademarks of their r) 254.95 458 T
(espective holders.) 407.93 458 T
(US Government Use) 72 443 T
(The Harlequin Dylan Softwar) 72 428 T
(e is a computer softwar) 189.91 428 T
(e pr) 282.71 428 T
(ogram developed at private expense and is subject) 298.07 428 T
-0.05 (to the following Restricted Rights Legend: \322Use, duplication, or disclosur) 72 418 P
-0.05 (e by the United States Government) 362.78 418 P
(is subject to r) 72 408 T
(estrictions as set forth in \050i\051 F) 123.99 408 T
(AR 52.227-14 Alt III or \050ii\051 F) 238.07 408 T
(AR 52.227-19, as applicable.  Use by) 347.02 408 T
-0.04 (agencies of the Department of Defense \050DOD\051 is subject to Harlequin\325s customary commer) 72 398 P
-0.04 (cial license as con-) 431.26 398 P
(tained in the accompanying license agr) 72 388 T
(eement, in accor) 226.86 388 T
(dance with DF) 291.32 388 T
(AR 227.7202-1\050a\051.  For purposes of the) 348.97 388 T
(F) 72 378 T
(AR, the Softwar) 76.34 378 T
(e shall be deemed to be `unpublished\325 and licensed with disclosur) 139.55 378 T
(e pr) 401.58 378 T
(ohibitions, rights) 416.94 378 T
(r) 72 368 T
(eserved under the copyright laws of the United States.  Harlequin Incorporated, One Cambridge Center) 75.39 368 T
(,) 487.26 368 T
(Cambridge, Massachusetts 02142.\323) 72 358 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Eur) 72 239 T
(ope:) 86.32 239 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Harlequin Limited) 72 224 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Barrington Hall) 72 214 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Barrington) 72 204 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Cambridge CB2 5RG) 72 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(U.K.) 72 184 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(telephone +44 1223 873 800) 72 169 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fax +44 1223 873 873) 72 159 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(North America:) 216 239 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Harlequin Incorporated) 216 224 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(One Cambridge Center) 216 214 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Cambridge, MA 02142) 216 204 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(U.S.A.) 216 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(telephone +1 617 374 2400) 216 179 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fax +1 617 252 6505) 216 169 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Electr) 360 239 T
(onic Access:) 382.75 239 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(http://www) 360 224 T
(.harlequin.co.uk/) 411.36 224 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(http://www) 360 214 T
(.harlequin.com/) 411.36 214 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.ii/DEST FmPD2
[/Dest/F.copyrightdoc/DEST FmPD2
[/Dest/L.copyrightdoc/DEST FmPD2
72 608/I2.1.850138 FmPA
360 374/I2.1.850004 FmPA
481 374/I2.1.850005 FmPA
360 364/I2.1.850007 FmPA
477 364/I2.1.850008 FmPA
FMENDPAGE
%%EndPage: "ii" 2
%%Page: "iii" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 540 522 630 R
7 X
0 0 0 1 0 0 0 K
V
0 30 Q
0 X
(Contents) 108 553.83 T
108 540 522 630 C
0 0 0 1 0 0 0 K
108 588.83 405 619 C
0 0 0 1 0 0 0 K
104.67 603.83 266.67 603.83 2 L
3 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
104.67 594.83 266.67 594.83 2 L
1 H
N
0 0 0 1 0 0 0 K
108 540 522 630 C
36 72 576 720 C
0 0 0 1 0 0 0 K
108 81 540 117 R
7 X
0 0 0 1 0 0 0 K
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(iii) 531.01 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 468 R
7 X
V
3 13 Q
0 X
(1) 108 459.33 T
(The C-FFI Library) 135 459.33 T
(1) 236.26 459.33 T
0 11 Q
(Intr) 135 439.67 T
(oduction) 152.84 439.67 T
(1) 207.28 439.67 T
(Overview) 135 425.67 T
(1) 194.33 425.67 T
(T) 135 411.67 T
(erminology) 140.73 411.67 T
(9) 208.11 411.67 T
(Basic options in C-FFI macr) 135 397.67 T
(os) 268.69 397.67 T
(9) 290.36 397.67 T
(Designator classes) 135 383.67 T
(10) 235.2 383.67 T
(De\336ning types) 135 369.67 T
(25) 217.55 369.67 T
(Functions) 135 355.67 T
(36) 193.89 355.67 T
(Allocating and deallocating C storage) 135 341.67 T
(47) 329.15 341.67 T
(Utility designator classes) 135 327.67 T
(50) 267.61 327.67 T
3 13 Q
(2) 108 305.33 T
(Dylan Win32 API Libraries) 135 305.33 T
(53) 280.12 305.33 T
0 11 Q
(Intr) 135 285.67 T
(oduction) 152.84 285.67 T
(53) 207.28 285.67 T
(W) 135 271.67 T
(in32 libraries pr) 145.4 271.67 T
(ovided) 222.07 271.67 T
(54) 267.2 271.67 T
(Content and or) 135 257.67 T
(ganization of the W) 208.33 257.67 T
(in32 API libraries) 303.31 257.67 T
(55) 399.13 257.67 T
(Index of W) 135 243.67 T
(in32 IDs excluded fr) 188.34 243.67 T
(om the Dylan libraries) 286.26 243.67 T
(56) 406.03 243.67 T
(API naming and mapping conventions) 135 229.67 T
(60) 335.06 229.67 T
(De\336ning callback functions) 135 215.67 T
(63) 278.87 215.67 T
(Dealing with the C function W) 135 201.67 T
(inMain) 283.54 201.67 T
(64) 329.66 201.67 T
(Combining bit mask constants) 135 187.67 T
(65) 293.73 187.67 T
(Other minor details) 135 173.67 T
(66) 241.56 173.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.iii/DEST FmPD2
[/Dest/F.interopTOCdoc/DEST FmPD2
[/Rect[108 456 486 468]/Border[0 0 0]/Dest/G4.886461/LNK FmPD2
[/Rect[108 434 486 446]/Border[0 0 0]/Dest/G4.886462/LNK FmPD2
[/Rect[108 420 486 432]/Border[0 0 0]/Dest/G4.886476/LNK FmPD2
[/Rect[108 406 486 418]/Border[0 0 0]/Dest/G4.886638/LNK FmPD2
[/Rect[108 392 486 404]/Border[0 0 0]/Dest/G4.886644/LNK FmPD2
[/Rect[108 378 486 390]/Border[0 0 0]/Dest/G4.886650/LNK FmPD2
[/Rect[108 364 486 376]/Border[0 0 0]/Dest/G4.1038252/LNK FmPD2
[/Rect[108 350 486 362]/Border[0 0 0]/Dest/G4.887470/LNK FmPD2
[/Rect[108 336 486 348]/Border[0 0 0]/Dest/G4.946964/LNK FmPD2
[/Rect[108 322 486 334]/Border[0 0 0]/Dest/G4.1055760/LNK FmPD2
[/Rect[108 302 486 314]/Border[0 0 0]/Dest/G5.888029/LNK FmPD2
[/Rect[108 280 486 292]/Border[0 0 0]/Dest/G5.888030/LNK FmPD2
[/Rect[108 266 486 278]/Border[0 0 0]/Dest/G5.888036/LNK FmPD2
[/Rect[108 252 486 264]/Border[0 0 0]/Dest/G5.888048/LNK FmPD2
[/Rect[108 238 486 250]/Border[0 0 0]/Dest/G5.888152/LNK FmPD2
[/Rect[108 224 486 236]/Border[0 0 0]/Dest/G5.888974/LNK FmPD2
[/Rect[108 210 486 222]/Border[0 0 0]/Dest/G5.889773/LNK FmPD2
[/Rect[108 196 486 208]/Border[0 0 0]/Dest/G5.889791/LNK FmPD2
[/Rect[108 182 486 194]/Border[0 0 0]/Dest/G5.889842/LNK FmPD2
[/Rect[135 168 486 180]/Border[0 0 0]/Dest/G5.888865/LNK FmPD2
[/Title(A)/Rect[99 117 495 477]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "iii" 3
%%Page: "iv" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
72 81 504 117 R
V
2 9 Q
0 X
(iv) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.iv/DEST FmPD2
[/Dest/L.interopTOCdoc/DEST FmPD2
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "iv" 4
%%Page: "1" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 540 117 R
7 X
0 0 0 1 0 0 0 K
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(1) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 513 504 648 R
7 X
V
0 30 Q
0 X
(1) 180 628 T
108 586.45 504 614 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 586.45 504 614 R
7 X
0 0 0 1 0 0 0 K
V
108 607.14 270 607.14 2 L
V
3 H
2 Z
0 X
N
108 598.14 270 598.14 2 L
7 X
V
1 H
0 X
N
36 72 576 720 C
0 0 0 0 1 1 1 K
0 2 Q
7 X
(1) 108 566.45 T
0 0 0 1 0 0 0 K
0 30 Q
0 X
0 0 0 1 0 0 0 K
(The C-FFI Library) 109 566.45 T
108 710/G4.886461 FmPA
108 126 486 432 R
7 X
V
3 16 Q
0 X
(1.1  Intr) 108 421.33 T
(oduction) 154.43 421.33 T
108 565/G4.886462 FmPA
0 11 Q
-0.4 (The C-FFI \050) 108 400.67 P
1 F
-0.4 (C for) 162.18 400.67 P
-0.4 (eign function interface) 183.89 400.67 P
0 F
-0.4 (\051 library pr) 283.12 400.67 P
-0.4 (ovides a means of interfacing a) 335.04 400.67 P
(Dylan application with code written in the C language. The C-FFI library is) 108 386.67 T
(available to applications as the module) 108 372.67 T
4 9.5 Q
(c-ffi) 300.09 372.67 T
0 11 Q
( in the library) 328.59 372.67 T
4 9.5 Q
(c-ffi) 397.24 372.67 T
0 11 Q
(.) 425.74 372.67 T
-0.35 (The C-FFI library consists of macr) 108 352.67 P
-0.35 (os, classes, and functions that you can use to) 270.57 352.67 P
(write a complete description of the Dylan interface to a C library) 108 338.67 T
(. Compiling) 419.99 338.67 T
(this description generates a set of Dylan classes and functions thr) 108 324.67 T
(ough which) 424.13 324.67 T
-0.41 (Dylan code can manipulate the C library\325s data and call its functions. Interface) 108 310.67 P
(descriptions can also allow C code to call into Dylan; compiling such a) 108 296.67 T
(description generates entry points compatible with C\325s calling conventions.) 108 282.67 T
3 16 Q
(1.2) 108 247.33 T
(Over) 133.54 247.33 T
(vie) 163.57 247.33 T
(w) 181.63 247.33 T
108 391/G4.886476 FmPA
0 11 Q
(This section is an overview of the C-FFI library) 108 226.67 T
(, intr) 334.38 226.67 T
(oducing the most com-) 357.22 226.67 T
(monly used constr) 108 212.67 T
(ucts as the basis for examples.) 198.02 212.67 T
(The C-FFI library pr) 108 192.67 T
(ovides a set of macr) 205.61 192.67 T
(os that can be used to describe a C) 301.62 192.67 T
-0.22 (interface in a form that the Harlequin Dylan compiler can understand; we call) 108 178.67 P
(these macr) 108 164.67 T
(os the) 160.18 164.67 T
1 F
(C interface de\336nition language) 191.61 164.67 T
0 F
(.) 328.11 164.67 T
(The C interface de\336nition language pr) 108 144.67 T
(ovides macr) 293.02 144.67 T
(os that corr) 352.09 144.67 T
(espond to each) 406.72 144.67 T
(of C\325s type, function, variable, and constant de\336ning forms. These macr) 108 130.67 T
(os) 454.76 130.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.1/DEST FmPD2
[/Dest/F.cffidoc/DEST FmPD2
134 402/I4.1.1057628 FmPA
134 402/M4.9.14214.1Heading.12.Overview FmPA
134 402/I4.1.963133 FmPA
[/Title(A)/Rect[99 504 513 657]/ARTICLE FmPD2
[/Title(A)/Rect[99 117 495 441]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "1" 5
%%Page: "2" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(2) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 11 Q
0 X
(de\336ne Dylan classes that designate and encapsulate instances of C types,) 126 640.67 T
(Dylan methods thr) 126 626.67 T
(ough which to manipulate C variables and call out to C) 217.73 626.67 T
-0.39 (functions, and functions with C-compatible entry points thr) 126 612.67 P
-0.39 (ough which to call) 412.97 612.67 P
(in to Dylan fr) 126 598.67 T
(om C.) 190.99 598.67 T
(In addition to the interface de\336nition language, the C-FFI library pr) 126 578.67 T
(ovides) 453.05 578.67 T
(r) 126 564.67 T
(un-time methods and functions for allocating, manipulating and destr) 130.26 564.67 T
(oying) 470.59 564.67 T
(instances of C data str) 126 550.67 T
(uctur) 232.85 550.67 T
(es. For example, using these facilities you can allo-) 258.74 550.67 T
(cate C str) 126 536.67 T
(ucts and arrays, and access and set their elements.) 171.04 536.67 T
3 13 Q
(1.2.1  C types in Dylan) 126 503.33 T
0 11 Q
(When you use the interface de\336nition language to describe a C type to the) 126 483.67 T
-0.25 (Dylan compiler) 126 469.67 P
-0.25 (, the compiler generates a new Dylan class. This class is said to) 200.65 469.67 P
1 F
-0.36 (designate) 126 455.67 P
0 F
-0.36 ( the C type, which means that it carries with it the essential pr) 167.56 455.67 P
-0.36 (operties) 462.66 455.67 P
(of the C type such as its size and alignment.) 126 441.67 T
(Y) 126 421.67 T
(ou can use this) 132.32 421.67 T
1 F
(designator class) 207.17 421.67 T
0 F
( in subsequent interface de\336nition forms to) 277.34 421.67 T
-0.24 (specify which elements involve the designated C type. A designator class also) 126 407.67 P
(carries with it the information on how to interpr) 126 393.67 T
(et the untyped C data as a) 359.78 393.67 T
(tagged Dylan object.) 126 379.67 T
(The C-FFI library contains pr) 126 359.67 T
(ede\336ned designator classes for C\325s fundamental) 267.01 359.67 T
(types like) 126 345.67 T
4 9.5 Q
(int) 175.53 345.67 T
0 11 Q
( and) 192.63 345.67 T
4 9.5 Q
(double) 216.76 345.67 T
0 11 Q
(. The names of these pr) 250.96 345.67 T
(ede\336ned Dylan classes ar) 363.04 345.67 T
(e) 485.82 345.67 T
(formed fr) 126 331.67 T
(om the C name of the fundamental type being designated. The des-) 172.28 331.67 T
(ignator class name for a particular C type formed using Dylan\325s standar) 126 317.67 T
(d) 474.61 317.67 T
(class-naming convention; it is pr) 126 303.67 T
(e\336xed with \322C-\323, hyphenated if it contains) 283.44 303.67 T
(mor) 126 289.67 T
(e than one wor) 145.87 289.67 T
(d, and enclosed in angle brackets. For example, the C-FFI) 218.28 289.67 T
(library pr) 126 275.67 T
(ovides the class) 172.3 275.67 T
4 9.5 Q
(<C-int>) 250.79 275.67 T
0 11 Q
( to designate the C type) 290.7 275.67 T
4 9.5 Q
(int) 408.15 275.67 T
0 11 Q
(; it designates) 425.25 275.67 T
4 9.5 Q
-0.44 (double) 126 261.67 P
0 11 Q
-0.22 ( by the class) 160.2 261.67 P
4 9.5 Q
-0.44 (<C-double>) 220.71 261.67 P
0 11 Q
-0.22 (, and) 277.71 261.67 P
4 9.5 Q
-0.44 (unsigned) 304.15 261.67 P
-0.44 (long) 352.29 261.67 P
0 11 Q
-0.22 ( by the class) 375.09 261.67 P
4 9.5 Q
-0.44 (<C-unsigned-) 435.6 261.67 P
(long>.) 126 247.67 T
2 11 Q
(Note:) 126 227.67 T
0 F
( Since Dylan variable names ar) 153.19 227.67 T
(e compar) 302.71 227.67 T
(ed without sensitivity to case,) 347.6 227.67 T
(the capitalization of the \322C\323 in the names above, and in other Dylan names) 126 213.67 T
(appearing in this document, is not binding and can safely be ignor) 126 199.67 T
(ed.) 448.26 199.67 T
-0.12 (The C-FFI library also pr) 126 179.67 P
-0.12 (ovides pr) 245.24 179.67 P
-0.12 (ede\336ned classes designating pointers to C\325s) 290.71 179.67 P
(fundamental numeric types. T) 126 165.67 T
(o do so, it adds a) 272.01 165.67 T
4 9.5 Q
(*) 356.56 165.67 T
0 11 Q
( to the fundamental C type) 362.26 165.67 T
(designator) 126 151.67 T
(. For example) 177 151.67 T
4 9.5 Q
(<C-double*>) 245.7 151.67 T
0 11 Q
( designates the C type) 308.4 151.67 T
4 9.5 Q
(double) 418.18 151.67 T
(*) 455.13 151.67 T
0 11 Q
(.) 460.83 151.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.2/DEST FmPD2
207 573/I4.1.901452 FmPA
126 511/I4.1.1057637 FmPA
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "2" 6
%%Page: "3" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.2) 481.15 677.67 T
(Overview) 502.52 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(3) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
(The following is an example of de\336ning and using designator classes. Sup-) 108 640.67 T
(pose we have the following C str) 108 626.67 T
(uct:) 267.41 626.67 T
4 9 Q
(typedef struct {) 135 606 T
(unsigned short x_coord;) 145.8 595 T
(unsigned short y_coord;) 145.8 584 T
(} Point;) 135 573 T
0 11 Q
(W) 108 552.67 T
(e describe C str) 117.99 552.67 T
(ucts to Dylan using the macr) 192.25 552.67 T
(o) 331.61 552.67 T
4 9.5 Q
(define) 340.36 552.67 T
(C-struct) 377.31 552.67 T
0 11 Q
(:) 422.91 552.67 T
4 9 Q
(define C-struct <Point>) 135 532 T
(slot x-coord :: <C-unsigned-short>;) 145.8 521 T
(slot y-coord :: <C-unsigned-short>;) 145.8 510 T
(end C-struct;) 135 499 T
0 11 Q
(This form de\336nes a new designator class) 108 478.67 T
4 9.5 Q
(<Point>) 308.04 478.67 T
0 11 Q
( for a str) 347.93 478.67 T
(uctur) 388.21 478.67 T
(e type corr) 414.09 478.67 T
(e-) 465.82 478.67 T
(sponding to the C type) 108 464.67 T
4 9.5 Q
(Point) 222.1 464.67 T
0 11 Q
(. W) 250.6 464.67 T
(e designate the types of the slots of) 266.09 464.67 T
4 9.5 Q
(<Point>) 438.31 464.67 T
0 11 Q
(using the Dylan classes designating the C types used in the de\336nition of) 108 450.67 T
4 9.5 Q
-0.09 (Point) 108 436.67 P
0 11 Q
-0.04 (. In this case, both slots ar) 136.5 436.67 P
-0.04 (e of the C type) 260.38 436.67 P
4 9.5 Q
-0.09 (unsigned) 333.5 436.67 P
-0.09 (short) 381.81 436.67 P
0 11 Q
-0.04 ( which is desig-) 410.31 436.67 P
(nated by the pr) 108 422.67 T
(ede\336ned class) 181.94 422.67 T
4 9.5 Q
(<C-unsigned-short>) 252.66 422.67 T
0 11 Q
(. The information about) 355.26 422.67 T
-0.44 (the C type) 108 408.67 P
4 9.5 Q
-0.92 (unsigned) 159.56 408.67 P
-0.92 (short) 207.46 408.67 P
0 11 Q
-0.44 ( carried by this designator class allows the compiler) 235.96 408.67 P
-0.1 (to compute the size, alignment, and layout of the str) 108 394.67 P
-0.1 (uct. The compiler r) 360.05 394.67 P
-0.1 (ecor) 451.65 394.67 P
-0.1 (ds) 471.96 394.67 P
(the str) 108 380.67 T
(uct\325s size and alignment and associates them with) 138.51 380.67 T
4 9.5 Q
(<Point>) 383.88 380.67 T
0 11 Q
(. The desig-) 423.78 380.67 T
(nator class) 108 366.67 T
4 9.5 Q
(<Point>) 162.25 366.67 T
0 11 Q
( can then be used in the de\336nition of other types, func-) 202.15 366.67 T
(tions, and variables. For example, we could describe) 108 352.67 T
4 9 Q
(typedef struct {) 135 332 T
(Point start;) 145.8 321 T
(Point end;) 145.8 310 T
(} LineSegment;) 135 299 T
0 11 Q
(like this:) 108 278.67 T
4 9 Q
(define C-struct <LineSegment>) 135 258 T
(slot start :: <Point>;) 145.8 247 T
(slot end   :: <Point>;) 145.8 236 T
(end C-struct;) 135 225 T
0 11 Q
-0.32 (As well as acting as a static information carrier for use in other FFI de\336nitions,) 108 204.67 P
(a designator class can also be instantiable, in which case Dylan uses an) 108 190.67 T
(instance of the designator class to r) 108 176.67 T
(epr) 277.8 176.67 T
(esent an object of the C type it desig-) 293.82 176.67 T
(nates when that object is passed fr) 108 162.67 T
(om the \322C world\323 to the \322Dylan world\323.) 273.75 162.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.3/DEST FmPD2
340 704/I4.1.886492 FmPA
253 574/I4.1.886499 FmPA
135 408/I4.1.886505 FmPA
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "3" 7
%%Page: "4" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(4) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(Note:) 126 640.67 T
0 F
( Only classes that designate C pointer types can be instantiated in this) 153.19 640.67 T
(way) 126 626.67 T
(. Instances of C\325s fundamental numeric value types like) 145.57 626.67 T
4 9.5 Q
(int) 417.23 626.67 T
0 11 Q
(,) 434.33 626.67 T
4 9.5 Q
(char) 439.83 626.67 T
0 11 Q
(, and) 461.81 626.67 T
4 9.5 Q
(double) 126 612.67 T
0 11 Q
( ar) 160.2 612.67 T
(e just converted to an equivalent Dylan object with the same value.) 172.6 612.67 T
-0.38 (The) 126 598.67 P
4 9.5 Q
-0.78 (<Point>) 146.79 598.67 P
0 11 Q
-0.38 ( class is not an instantiable class in Dylan because ther) 186.69 598.67 P
-0.38 (e is nothing) 445.63 598.67 P
(in Dylan that corr) 126 584.67 T
(esponds to a C str) 212.04 584.67 T
(uct. However) 298.78 584.67 T
(, the C-FFI does pr) 364 584.67 T
(ovide a) 453.82 584.67 T
(Dylan r) 126 570.67 T
(epr) 162.63 570.67 T
(esentation of a pointer to a C str) 178.66 570.67 T
(uct.) 333.78 570.67 T
(T) 126 550.67 T
(o illustrate, her) 131.73 550.67 T
(e is an example interaction involving a C str) 204.99 550.67 T
(uct containing) 418.41 550.67 T
(some pointer) 126 536.67 T
(-typed slots and some slots whose types ar) 189.62 536.67 T
(e fundamental) 396.77 536.67 T
(numeric types:) 126 522.67 T
4 9 Q
(define C-struct <Example>) 153 502 T
(slot count) 163.8 491 T
(:: <C-int>;) 261 491 T
(slot statistic) 163.8 480 T
(:: <C-double>;) 261 480 T
(slot data) 163.8 469 T
(:: <C-char*>;) 261 469 T
(slot next) 163.8 458 T
(:: <Example*>;) 261 458 T
(pointer-type-name) 163.8 447 T
(:: <Example*>;) 261 447 T
(end C-struct;) 153 436 T
0 11 Q
(This example de\336nes the two designator types) 126 415.67 T
4 9.5 Q
(<Example>) 354.56 415.67 T
0 11 Q
( and) 405.86 415.67 T
4 9.5 Q
(<Example*>) 429.98 415.67 T
0 11 Q
(;) 486.98 415.67 T
(the slots) 126 401.67 T
4 9.5 Q
(count) 168.88 401.67 T
0 11 Q
( and) 197.38 401.67 T
4 9.5 Q
(statistic) 221.5 401.67 T
0 11 Q
( have fundamental numeric types while) 272.8 401.67 T
4 9.5 Q
(data) 469.22 401.67 T
0 11 Q
(and) 126 387.67 T
4 9.5 Q
(next) 147.37 387.67 T
0 11 Q
( have pointer types. The getter and setter methods for the slots ar) 170.17 387.67 T
(e) 486.3 387.67 T
(de\336ned for instances of) 126 373.67 T
4 9.5 Q
(<Example*>) 242.29 373.67 T
0 11 Q
(.) 299.29 373.67 T
(Suppose ther) 126 353.67 T
(e is a function) 189.72 353.67 T
4 9.5 Q
(current-example) 260.13 353.67 T
0 11 Q
( that r) 345.63 353.67 T
(eturns an initialized) 374.36 353.67 T
4 9.5 Q
(<Example*>) 126 339.67 T
0 11 Q
( str) 183 339.67 T
(uct. The following transactions illustrate what you get when) 198.26 339.67 T
(you r) 126 325.67 T
(ead the slots of the str) 151.65 325.67 T
(uctur) 257.7 325.67 T
(e it r) 283.59 325.67 T
(eturns:) 305.29 325.67 T
5 9 Q
(?) 153 305 T
4 F
( define variable example = current-example\050\051;) 158.4 305 T
(// Defined example) 153 294 T
5 F
(?) 153 275 T
4 F
( example.count;) 158.4 275 T
(4) 153 264 T
5 F
(?) 153 245 T
4 F
( instance?\050example.count, <integer>\051;) 158.4 245 T
(#t) 153 234 T
5 F
(?) 153 215 T
4 F
(example.statistic;) 163.8 215 T
(10.5) 153 204 T
5 F
(?) 153 185 T
4 F
( instance?\050example.statistic, <float>\051;) 158.4 185 T
(#t) 153 174 T
0 11 Q
-0.35 (The interactions above show that if we access str) 126 153.67 P
-0.35 (uctur) 358.75 153.67 P
-0.35 (e slots that wer) 384.63 153.67 P
-0.35 (e de\336ned) 456.89 153.67 P
(as being of one of C\325s fundamental numeric types, we get a Dylan number of) 126 139.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.4/DEST FmPD2
301 792/I4.1.886511 FmPA
153 652/I4.1.886514 FmPA
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "4" 8
%%Page: "5" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.2) 481.15 677.67 T
(Overview) 502.52 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(5) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
(the equivalent value. The same thing happens if an imported C function) 108 640.67 T
(r) 108 626.67 T
(eturns a fundamental numeric type: a Dylan number with the same value) 112.15 626.67 T
(appears in Dylan. Similarly) 108 612.67 T
(, when setting slots in str) 239.87 612.67 T
(ucts expecting numbers) 360.67 612.67 T
(or passing objects out to C functions expecting numeric ar) 108 598.67 T
(guments, you) 389.49 598.67 T
-0.38 (should pr) 108 584.67 P
-0.38 (ovide a Dylan number) 154.76 584.67 P
-0.38 (, and the C-FFI will convert it automatically to) 262.14 584.67 P
(its C equivalent.) 108 570.67 T
5 9 Q
(?) 135 550 T
4 F
( example.data;) 140.4 550 T
({<C-char> pointer #xff5e00}) 135 539 T
5 F
(?) 135 520 T
4 F
( instance?\050example.data, <C-char*>\051;) 140.4 520 T
(#t) 135 509 T
5 F
(?) 135 490 T
4 F
( example.next;) 140.4 490 T
({<Example> pointer #xff5f00}) 135 479 T
5 F
(?) 135 460 T
4 F
( instance?\050example.next, <Example*>\051;) 140.4 460 T
(#t) 135 449 T
0 11 Q
-0.09 (The interactions above show that accessing str) 108 428.67 P
-0.09 (uctur) 331.9 428.67 P
-0.09 (e slots with a pointer type) 357.79 428.67 P
(r) 108 414.67 T
(esults in an instance of the Dylan class that designates that type. Again, the) 112.15 414.67 T
(same thing happens if an imported C function r) 108 400.67 T
(eturns a pointer type: an) 339.25 400.67 T
(instance of the corr) 108 386.67 T
(esponding designator class is cr) 200.47 386.67 T
(eated. Similarly) 354.48 386.67 T
(, when set-) 429.35 386.67 T
(ting slots in str) 108 372.67 T
(ucts expecting pointers or passing objects out to C functions) 179.79 372.67 T
(expecting pointer ar) 108 358.67 T
(guments, you should pr) 205.58 358.67 T
(ovide an instance of the Dylan) 322.1 358.67 T
(designator class for that pointer type, and the C-FFI will convert it automati-) 108 344.67 T
(cally to the raw C pointer value.) 108 330.67 T
(Later sections describe all the macr) 108 310.67 T
(os available for de\336ning C types and the) 277.69 310.67 T
(functions available for manipulating them.) 108 296.67 T
3 13 Q
(1.2.2  C functions in Dylan) 108 263.33 T
0 11 Q
-0.24 (When you use the interface de\336nition language to describe a C function to the) 108 243.67 P
(Dylan compiler) 108 229.67 T
(, the compiler generates a new Dylan function. This) 182.9 229.67 T
1 F
(wrapper) 435.92 229.67 T
(function) 108 215.67 T
0 F
( accepts Dylan ar) 145.49 215.67 T
(guments and r) 228.52 215.67 T
(eturns Dylan r) 299.17 215.67 T
(esults. It converts each) 369.45 215.67 T
-0.3 (of its ar) 108 201.67 P
-0.3 (guments fr) 143.66 201.67 P
-0.3 (om a Dylan object to a corr) 196.3 201.67 P
-0.3 (esponding C value befor) 324.81 201.67 P
-0.3 (e calling) 443.33 201.67 P
(the C function it wraps. The C-FFI converts any r) 108 187.67 T
(esults that the C function) 345.77 187.67 T
(r) 108 173.67 T
(eturns into Dylan objects befor) 112.15 173.67 T
(e r) 261.21 173.67 T
(eturning them to the caller) 273.37 173.67 T
(.) 401.73 173.67 T
(In or) 108 153.67 T
(der for Dylan to be able to call into C corr) 131.01 153.67 T
(ectly) 332.35 153.67 T
(, C functions must be) 354.18 153.67 T
(described to Dylan in the same detail a C header \336le would pr) 108 139.67 T
(ovide a calling) 409.39 139.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.5/DEST FmPD2
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "5" 9
%%Page: "6" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(6) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 11 Q
0 X
(C pr) 126 640.67 T
(ogram. Speci\336cally) 147.31 640.67 T
(, for every function we must pr) 238.56 640.67 T
(ovide the C name and) 389.61 640.67 T
(the type of its ar) 126 626.67 T
(guments and r) 204.61 626.67 T
(esults. As with str) 275.26 626.67 T
(uct de\336nitions, these types) 362.37 626.67 T
(ar) 126 612.67 T
(e indicated by naming the designator classes corr) 135.65 612.67 T
(esponding to the C types) 374.48 612.67 T
(involved in the C-FFI description of the C function.) 126 598.67 T
(The following is an example of de\336ning and using wrapper functions. Sup-) 126 578.67 T
(pose we have the following) 126 564.67 T
4 9.5 Q
(extern) 262.36 564.67 T
0 11 Q
( C function declaration:) 296.56 564.67 T
4 9 Q
(extern double cos \050double angle\051;) 153 544 T
0 11 Q
(W) 126 523.67 T
(e describe C functions to Dylan using the C-FFI macr) 135.99 523.67 T
(o) 392.93 523.67 T
4 9.5 Q
(define) 401.68 523.67 T
(C-function) 438.63 523.67 T
0 11 Q
(:) 495.63 523.67 T
4 9 Q
(define C-function C-cos) 153 503 T
(parameter angle) 163.8 492 T
(:: <C-double>;) 250.2 492 T
(result) 163.8 481 T
(cos) 217.8 481 T
(:: <C-double>;) 250.2 481 T
(c-name: "cos") 163.8 470 T
(end C-function;) 153 459 T
0 11 Q
-0.38 (The name appearing immediately after the) 126 438.67 P
4 9.5 Q
-0.8 (define) 334.16 438.67 P
-0.8 (C-function) 370.72 438.67 P
0 11 Q
-0.38 ( is the name we) 427.72 438.67 P
(want to give to the Dylan variable to which our wrapper function will be) 126 424.67 T
(bound. W) 126 410.67 T
(e call it) 173.33 410.67 T
4 9.5 Q
(C-cos) 210.43 410.67 T
0 11 Q
(. W) 238.93 410.67 T
(e also give the actual C name of the function we) 254.41 410.67 T
(want to wrap as the value of the keywor) 126 396.67 T
(d) 321.88 396.67 T
4 9.5 Q
(c-name:) 331.35 396.67 T
0 11 Q
(.) 371.25 396.67 T
(Once we have compiled the de\336nition \321 and assuming the compiled version) 126 376.67 T
(of the C library implementing) 126 362.67 T
4 9.5 Q
(cos) 273.95 362.67 T
0 11 Q
( has been linked in with the Dylan applica-) 291.05 362.67 T
(tion \321 we can call the wrapper function just like any other Dylan function:) 126 348.67 T
5 9 Q
(?) 153 328 T
4 F
( C-cos\0500.0\051;) 158.4 328 T
(1.0) 153 317 T
0 11 Q
(As we noted above, when values ar) 126 296.67 T
(e passed back and forth between Dylan) 298.35 296.67 T
(and C, the C-FFI performs automatic conversions. In this case, the type of the) 126 282.67 T
(parameter and the r) 126 268.67 T
(esult ar) 222.41 268.67 T
(e both fundamental numeric types which means) 258.17 268.67 T
-0.2 (that the C-FFI will accept and r) 126 254.67 P
-0.2 (eturn Dylan \337oats, converting to and fr) 275.29 254.67 P
-0.2 (om raw) 464.17 254.67 P
(C \337oats as necessary) 126 240.67 T
(.) 224.55 240.67 T
-0.11 (As well as making C functions available to Dylan code, the C-FFI allows us to) 126 220.67 P
(make Dylan functions available to call fr) 126 206.67 T
(om C code. W) 322.13 206.67 T
(e do this by de\336ning a) 389.52 206.67 T
1 F
-0.14 (C-callable) 126 192.67 P
0 F
-0.14 (wrapper function. A C-callable wrapper is a Dylan function that a C) 172.4 192.67 P
(pr) 126 178.67 T
(ogram can call. The C-callable wrapper has a C calling convention. When a) 136.76 178.67 T
(C pr) 126 164.67 T
(ogram calls a C-callable wrapper) 147.31 164.67 T
(, the C-FFI performs the necessary data) 306.28 164.67 T
(conversions and then invokes a Dylan function.) 126 150.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.6/DEST FmPD2
402 675/I4.1.886548 FmPA
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "6" 10
%%Page: "7" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.2) 481.15 677.67 T
(Overview) 502.52 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(7) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
(Y) 108 640.67 T
(ou can pass C-callable wrappers into C code for use as callbacks. Y) 114.32 640.67 T
(ou can) 436.73 640.67 T
-0.07 (also give them names visible in C, so that C clients of Dylan code can call into) 108 626.67 P
(Dylan dir) 108 612.67 T
(ectly by invoking a named function.) 154.55 612.67 T
(The ar) 108 592.67 T
(gument and r) 138.81 592.67 T
(esult conversions performed by C-callable wrappers ar) 204.8 592.67 T
(e) 471.32 592.67 T
(just like those done within Dylan wrapper functions. The macr) 108 578.67 T
(o that de\336nes) 412.72 578.67 T
(C-callable wrappers is called) 108 564.67 T
4 9.5 Q
(define) 250.46 564.67 T
(C-callable-wrapper) 287.41 564.67 T
0 11 Q
( and we describe it) 390.01 564.67 T
(in detail later) 108 550.67 T
(. For now) 171.67 550.67 T
(, consider the following simple example. Suppose we) 216.96 550.67 T
(have a C) 108 536.67 T
4 9.5 Q
(extern) 152.93 536.67 T
0 11 Q
( function declaration) 187.13 536.67 T
4 9.5 Q
(AddDouble) 290.78 536.67 T
0 11 Q
(:) 342.08 536.67 T
4 9 Q
(extern double AddDouble \050double x, double y\051;) 135 516 T
0 11 Q
(This function is intended to r) 108 495.67 T
(eturn the sum of two) 248.71 495.67 T
4 9.5 Q
(double) 353.4 495.67 T
0 11 Q
( values. Instead of) 387.6 495.67 T
(implementing the function in C, we can implement it in Dylan using Dylan\325s) 108 481.67 T
(generic function) 108 467.67 T
4 9.5 Q
(+) 189.76 467.67 T
0 11 Q
(. All we need to do is de\336ne a C-callable wrapper for) 195.46 467.67 T
4 9.5 Q
(+) 454.45 467.67 T
0 11 Q
(, as) 460.15 467.67 T
(follows:) 108 453.67 T
4 9 Q
(define C-callable-wrapper AddDoubleObject of \134+) 135 433 T
(parameter x :: <C-double>;) 145.8 422 T
(parameter y :: <C-double>;) 145.8 411 T
(c-name: "AddDouble";) 145.8 400 T
(end C-callable-wrapper;) 135 389 T
0 11 Q
(W) 108 368.67 T
(e can now call) 117.99 368.67 T
4 9.5 Q
(AddDouble) 189.41 368.67 T
0 11 Q
( in C. Our wrapper will be invoked, the C ar) 240.71 368.67 T
(gu-) 455.35 368.67 T
(ments will be converted and passed to Dylan\325s + generic function, and then) 108 354.67 T
(the r) 108 340.67 T
(esult of the computation will be converted and passed back to C:) 130.15 340.67 T
4 9 Q
({) 135 320 T
(extern double AddDouble \050double x, double y\051;) 145.8 309 T
(double result;) 145.8 298 T
(result = AddDouble\0501.0, 2.0\051;) 145.8 276 T
(}) 135 265 T
0 11 Q
(The C-FFI binds the Dylan variable) 108 244.67 T
4 9.5 Q
(AddDoubleObject) 281.69 244.67 T
0 11 Q
( to a Dylan object r) 367.19 244.67 T
(epr) 458.31 244.67 T
(e-) 474.34 244.67 T
(senting the function pointer of the C-callable wrapper) 108 230.67 T
(. This r) 368.61 230.67 T
(efer) 402.02 230.67 T
(ence allows) 420.37 230.67 T
(the C-callable wrapper to be passed to a C function expecting a callback ar) 108 216.67 T
(gu-) 468.73 216.67 T
(ment.) 108 202.67 T
3 13 Q
(1.2.3  C v) 108 169.33 T
(ariab) 154.03 169.33 T
(les in Dylan) 179.42 169.33 T
0 11 Q
-0.14 (When you use the interface de\336nition language to describe a C variable to the) 108 149.67 P
-0.14 (Dylan compiler) 108 135.67 P
-0.14 (, the compiler generates new Dylan getter and setter functions) 182.76 135.67 P
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.7/DEST FmPD2
250 716/I4.1.886565 FmPA
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "7" 11
%%Page: "8" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(8) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 11 Q
0 X
(for r) 126 640.67 T
(eading and setting the variable\325s value fr) 146.91 640.67 T
(om Dylan. If the variable is con-) 344.99 640.67 T
(stant, it de\336nes a getter function only) 126 626.67 T
(.) 305.71 626.67 T
(The getter function converts the C value to a Dylan value befor) 126 606.67 T
(e r) 431.67 606.67 T
(eturning it) 443.83 606.67 T
(accor) 126 592.67 T
(ding to the variable\325s declar) 151.42 592.67 T
(ed type. Similarly) 286.47 592.67 T
(, the setter function con-) 371.32 592.67 T
-0.4 (verts its ar) 126 578.67 P
-0.4 (gument, as Dylan value, into a C value befor) 175.87 578.67 P
-0.4 (e setting the C variable.) 389.05 578.67 P
(These conversions happen accor) 126 564.67 T
(ding to the same r) 282.87 564.67 T
(ules that apply to other C-) 370.56 564.67 T
(Dylan world transition points, such as ar) 126 550.67 T
(gument passing or str) 324.19 550.67 T
(uctur) 430.17 550.67 T
(e slot) 456.05 550.67 T
(access.) 126 536.67 T
-0.18 (In or) 126 516.67 P
-0.18 (der for Dylan to be able to access a C variable corr) 148.83 516.67 P
-0.18 (ectly) 389.65 516.67 P
-0.18 (, we must describe) 411.49 516.67 P
(the variable to Dylan in the same detail that a C header \336le would give to a C) 126 502.67 T
-0.31 (pr) 126 488.67 P
-0.31 (ogram that uses it. Speci\336cally) 136.76 488.67 P
-0.31 (, we must pr) 282.12 488.67 P
-0.31 (ovide the C name and the type of) 341.99 488.67 P
(the variable. As with str) 126 474.67 T
(uct and function de\336nitions, we indicate C types by) 242.41 474.67 T
(naming the appr) 126 460.67 T
(opriate Dylan designator classes.) 206.96 460.67 T
(Her) 126 440.67 T
(e is an example of de\336ning and using C variables. Suppose we have the) 144.57 440.67 T
(following) 126 426.67 T
4 9.5 Q
(extern) 175.72 426.67 T
0 11 Q
( C variable declaration:) 209.92 426.67 T
4 9 Q
(extern double mean;) 153 406 T
0 11 Q
(W) 126 385.67 T
(e describe C variables to Dylan using the C-FFI macr) 135.99 385.67 T
(o) 391.46 385.67 T
4 9.5 Q
(define C-variable) 400.22 385.67 T
0 11 Q
(:) 497.12 385.67 T
4 9 Q
(define C-variable C-mean :: <C-double>) 153 365 T
(  c-name: "mean";) 153 354 T
(end C-variable;) 153 343 T
0 11 Q
-0.07 (The name immediately after the) 126 322.67 P
4 9.5 Q
-0.14 (define C-variable) 283.81 322.67 P
0 11 Q
-0.07 ( is the name of the Dylan) 380.57 322.67 P
(variable to which the getter for our C variable will be bound. In this case it is) 126 308.67 T
4 9.5 Q
(C-mean) 126 294.67 T
0 11 Q
(.) 160.2 294.67 T
-0.3 (W) 126 274.67 P
-0.3 (e give the C name of the variable as the value of the keywor) 135.99 274.67 P
-0.3 (d) 422.08 274.67 P
4 9.5 Q
-0.62 (c-name:) 431.25 274.67 P
0 11 Q
-0.3 (. Once) 471.15 274.67 P
-0.18 (we have compiled the de\336nition \321 and assuming the compiled version of the) 126 260.67 P
(C library de\336ning) 126 246.67 T
4 9.5 Q
(mean) 215.61 246.67 T
0 11 Q
( has been linked in with the Dylan application \321 we) 238.41 246.67 T
(can call the getter function just like any other Dylan function:) 126 232.67 T
4 9 Q
(? C-mean\050\051;) 153 212 T
(1.5) 153 201 T
0 11 Q
(By default, the C-FFI also de\336nes a setter function for the variable. The setter) 126 180.67 T
(name uses Dylan\325s convention of appending \323-setter\323 to the getter name.) 126 166.67 T
4 9 Q
(? C-mean\050\051 := 0.0;) 153 146 T
(0.0) 153 135 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.8/DEST FmPD2
400 537/I4.1.886585 FmPA
440 537/I4.1.886586 FmPA
153 515/I4.1.886590 FmPA
324 474/I4.1.886594 FmPA
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "8" 12
%%Page: "9" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.3) 469.54 677.67 T
(Terminology) 490.91 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(9) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 F
0 X
(? C-mean\050\051;) 135 642 T
(0.0) 135 631 T
0 11 Q
(As described above, when values ar) 108 610.67 T
(e passed back and forth between Dylan) 282.33 610.67 T
(and C, the C-FFI performs automatic conversions. In this case, the type of the) 108 596.67 T
(variable is a fundamental numeric type which means that the C-FFI accepts) 108 582.67 T
(and r) 108 568.67 T
(eturns Dylan \337oats, converting to and fr) 133.52 568.67 T
(om raw C \337oats as necessary) 328.3 568.67 T
(.) 467.08 568.67 T
2 F
(Note:) 108 548.67 T
0 F
( W) 135.19 548.67 T
(e could achieve the same r) 147.93 548.67 T
(esult by using the) 275.68 548.67 T
4 9.5 Q
(define C-address) 364.51 548.67 T
0 11 Q
(macr) 108 534.67 T
(o, which de\336nes a constant that is a pointer to the storage allocated for) 132.24 534.67 T
(the C variable.) 108 520.67 T
3 16 Q
(1.3  T) 108 485.33 T
(erminology) 140.78 485.33 T
108 629/G4.886638 FmPA
0 11 Q
-0.22 (For the r) 108 464.67 P
-0.22 (est of this chapter) 148.93 464.67 P
-0.22 (, we adopt the following terminology) 233.34 464.67 P
-0.22 (, hopefully not) 412.57 464.67 P
(too inconsistent with common C terminology:) 108 450.67 T
1 F
(Base type) 135 430.67 T
0 F
-0.3 (Basic units of data storage \050C\325s variously sized integers,) 216 430.67 P
(characters, and \337oating point numbers\051 and aggr) 216 416.67 T
(egate) 453.83 416.67 T
(r) 216 402.67 T
(ecor) 220.15 402.67 T
(ds \050str) 240.45 402.67 T
(ucts and unions\051.) 270.76 402.67 T
1 F
(Derived type) 135 382.67 T
0 F
(.) 192.15 382.67 T
(A type based on some other type \050C\325s pointer) 216 382.67 T
(, array) 435.42 382.67 T
(,) 465.5 382.67 T
(and function types\051.) 216 368.67 T
1 F
(Fundamental numeric type) 135 342.67 T
0 F
(.) 255.62 342.67 T
-0.21 (One of C\325s integer or \337oating point types. This does not) 216 324.67 P
(include pointer types, str) 216 310.67 T
(uctur) 337.48 310.67 T
(e types, or union types.) 363.37 310.67 T
3 16 Q
(1.4  Basic options in C-FFI macr) 108 275.33 T
(os) 306.82 275.33 T
108 419/G4.886644 FmPA
0 11 Q
(The de\336ning macr) 108 254.67 T
(os of the C-FFI shar) 196.92 254.67 T
(e a consistent cor) 291.63 254.67 T
(e set of options which) 374.35 254.67 T
(ar) 108 240.67 T
(e worth describing her) 117.65 240.67 T
(e:) 227.38 240.67 T
(\245) 117 220.67 T
(A) 135 220.67 T
1 F
(c-name) 146.31 220.67 T
0 F
( ar) 178.29 220.67 T
(gument. Every de\336ning form allows you to specify the cor-) 190.68 220.67 T
(r) 135 206.67 T
(esponding C entity thr) 139.15 206.67 T
(ough the keywor) 248.88 206.67 T
(d) 331.62 206.67 T
4 9.5 Q
(c-name:) 341.1 206.67 T
0 11 Q
(. It is optional in) 381 206.67 T
(some forms but r) 135 192.67 T
(equir) 217.74 192.67 T
(ed in others. Y) 243.15 192.67 T
(ou can de\336ne types that have no) 312.34 192.67 T
(named opposite number in C, and the) 135 178.67 T
1 F
(c-name) 322.29 178.67 T
0 F
( option is always optional) 354.26 178.67 T
(in type de\336nitions. On the other hand, you must always name an) 135 164.67 T
(imported C function or variable so that Dylan knows the corr) 135 150.67 T
(ect name) 432.67 150.67 T
(fr) 135 136.67 T
(om the compiled C library to link with.) 142.81 136.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.9/DEST FmPD2
404 700/I4.1.886604 FmPA
341 358/I4.1.886647 FmPA
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "9" 13
%%Page: "10" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(10) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 11 Q
0 X
(In general, any C entity you can declar) 153 640.67 T
(e in C using) 340.45 640.67 T
4 9.5 Q
(extern) 401.14 640.67 T
0 11 Q
( can only be) 435.34 640.67 T
(found by the C-FFI if you pass a) 153 626.67 T
1 F
(c-name) 311.84 626.67 T
0 F
( ar) 343.82 626.67 T
(gument to the corr) 356.21 626.67 T
(esponding) 446.41 626.67 T
(C-FFI de\336nition.) 153 612.67 T
(\245) 135 592.67 T
(A) 153 592.67 T
1 F
(pointer-type-name) 164.31 592.67 T
0 F
( ar) 246.19 592.67 T
(gument. All the type-de\336ning forms allow you to) 258.59 592.67 T
(name the type for a pointer to the type being de\336ned. This is normally) 153 578.67 T
(speci\336ed thr) 153 564.67 T
(oughout the) 213.16 564.67 T
4 9.5 Q
(pointer-type-name:) 275.3 564.67 T
0 11 Q
( keywor) 377.9 564.67 T
(d option.) 417.48 564.67 T
3 16 Q
(1.5  Designator c) 126 529.33 T
(lasses) 230.77 529.33 T
126 673/G4.886650 FmPA
0 11 Q
-0.03 (As Section 1.2 explained, the C-FFI de\336nes some Dylan classes to designate C) 126 508.67 P
-0.41 (types and to describe how they ar) 126 494.67 P
-0.41 (e passed to and fr) 287.55 494.67 P
-0.41 (om Dylan. These) 371.64 494.67 P
1 F
-0.41 (designator) 455.22 494.67 P
(classes) 126 480.67 T
0 F
( carry with them static information about the C type they designate.) 155.54 480.67 T
-0.4 (The C-FFI library pr) 126 460.67 P
-0.4 (ovides an initial set of designator classes corr) 222.4 460.67 P
-0.4 (esponding to) 438.32 460.67 P
(C\325s fundamental types, as well as macr) 126 446.67 T
(os for generating designator classes) 315.02 446.67 T
(corr) 126 432.67 T
(esponding to C\325s pointer types and for extending the translation between) 145.38 432.67 T
(C data and Dylan objects.) 126 418.67 T
(Designator classes that corr) 126 398.67 T
(espond to fundamental numeric types ar) 259.15 398.67 T
(e not) 457.1 398.67 T
(instantiable. When you pass a numeric value to Dylan fr) 126 384.67 T
(om C, the C-FFI sim-) 399.26 384.67 T
-0.43 (ply generates a Dylan number with the same value. Similarly) 126 370.67 P
-0.43 (, a Dylan number) 418.29 370.67 P
(passed to C is converted to a C number of the appr) 126 356.67 T
(opriate type and value.) 372.76 356.67 T
-0 (Each of the fundamental designator classes indicate a conversion to or fr) 126 336.67 P
-0 (om a) 477.29 336.67 P
(unique Dylan class. The conversions that take place ar) 126 322.67 T
(e described in detail in) 388.82 322.67 T
(the documentation for each designator class.) 126 308.67 T
(The main r) 126 288.67 T
(easons for this design ar) 178.88 288.67 T
(e incr) 296.27 288.67 T
(eased ef) 322.92 288.67 T
(\336ciency) 361.83 288.67 T
(, simpli\336ed imple-) 398.02 288.67 T
(mentation, and added convenience when working with numeric values. The) 126 274.67 T
(designator classes for the numeric types could have been made instantiable) 126 260.67 T
(and placed beneath the appr) 126 246.67 T
(opriate number pr) 264.45 246.67 T
(otocol classes in Dylan, but) 353.67 246.67 T
(these extra r) 126 232.67 T
(epr) 185.21 232.67 T
(esentations in such a fundamental ar) 201.24 232.67 T
(ea could cause pr) 379.46 232.67 T
(oblems) 463.63 232.67 T
-0.31 (for Dylan compilers. In addition, to make these instantiable designator classes) 126 218.67 P
-0.11 (convenient to work with, the C-FFI would also have to de\336ne methods on the) 126 204.67 P
-0.23 (standar) 126 190.67 P
-0.23 (d arithmetic and comparison operators. It is simpler to r) 162.52 190.67 P
-0.23 (epr) 432.55 190.67 P
-0.23 (esent these) 448.58 190.67 P
(fundamental types with existing Dylan objects.) 126 176.67 T
-0.11 (However) 126 156.67 P
-0.11 (, the designator classes that corr) 170.62 156.67 P
-0.11 (espond to pointer types) 324.93 156.67 P
1 F
-0.11 (ar) 442.41 156.67 P
-0.11 (e) 451.38 156.67 P
0 F
-0.11 ( instantia-) 455.66 156.67 P
(ble. When you pass a pointer fr) 126 142.67 T
(om C to Dylan, the C-FFI constr) 277.8 142.67 T
(ucts an) 432.35 142.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.10/DEST FmPD2
152 684/I4.1.886649 FmPA
152 684/M4.9.20449.1Heading.15.Designator.classes FmPA
152 684/I4.1.978806 FmPA
[/Rect[142 505 194 516]/Border[0 0 0]/Page 5/View[/XYZ null 134 402 FmDC exch pop null]/LNK FmPD
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "10" 14
%%Page: "11" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.5) 447.99 677.67 T
(Designator classes) 469.37 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(1) 531.33 100 T
(1) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
(instance of the appr) 108 640.67 T
(opriate designator class that contains the raw addr) 203.95 640.67 T
(ess. A) 449.53 640.67 T
-0.28 (wrapped pointer like this can be passed out to some C code that is expecting a) 108 626.67 P
(compatible pointer \321 the C-FFI extracts the raw addr) 108 612.67 T
(ess befor) 368.01 612.67 T
(e handing it to) 410.52 612.67 T
(C code. The documentation for the abstract class) 108 598.67 T
4 9.5 Q
(<C-pointer>) 346.08 598.67 T
0 11 Q
( describes the) 408.78 598.67 T
(compatibility r) 108 584.67 T
(ules for pointer types.) 179.9 584.67 T
(This featur) 108 564.67 T
(e of pointer designator classes allows Dylan code to be typed to a) 160.56 564.67 T
(speci\336c kind of pointer) 108 550.67 T
(. For example, you can de\336ne methods that specialize) 219.13 550.67 T
(on dif) 108 536.67 T
(fer) 136.54 536.67 T
(ent kinds of pointer on the same generic function.) 149.62 536.67 T
3 13 Q
(1.5.1  Designator type pr) 108 503.33 T
(oper) 231.63 503.33 T
(ties) 254.94 503.33 T
0 11 Q
(T) 108 483.67 T
(o understand how designator classes work, it is useful to know about their) 113.73 483.67 T
-0.05 (pr) 108 469.67 P
-0.05 (operties. A few of these pr) 118.76 469.67 P
-0.05 (operties ar) 246.21 469.67 P
-0.05 (e accessible pr) 297.51 469.67 P
-0.05 (ogrammatically) 366.54 469.67 P
-0.05 (, but oth-) 441.9 469.67 P
(ers ar) 108 455.67 T
(e implicit and only r) 134.68 455.67 T
(eally exist in the compiler) 233.04 455.67 T
(. Some of the pr) 357 455.67 T
(operties) 433.19 455.67 T
(may be empty) 108 441.67 T
(.) 176.26 441.67 T
(A) 108 421.67 T
1 F
(r) 119.31 421.67 T
(efer) 123.39 421.67 T
(enced type) 139.09 421.67 T
0 F
( is the designator type to which a pointer r) 185.43 421.67 T
(efers. A designa-) 391.42 421.67 T
(tor) 108 407.67 T
(\325s) 122.75 407.67 T
1 F
(r) 133.22 407.67 T
(efer) 137.3 407.67 T
(enced-type) 153 407.67 T
0 F
( only has a value for subtypes of) 200.26 407.67 T
4 9.5 Q
(<C-statically-typed-) 360.17 407.67 T
(pointer>) 108 393.67 T
0 11 Q
(. Pr) 153.6 393.67 T
(ograms can access the r) 169.89 393.67 T
(efer) 283.29 393.67 T
(enced type thr) 301.64 393.67 T
(ough the function) 371.4 393.67 T
4 9.5 Q
(referenced-type) 108 379.67 T
0 11 Q
(.) 193.5 379.67 T
(A designator class\325s) 108 359.67 T
1 F
(pointer-type) 207.25 359.67 T
0 F
( only has a value for each of those types that) 261.64 359.67 T
(has a pointer designator type that r) 108 345.67 T
(efers to it. Most of the constr) 278.6 345.67 T
(ucts that) 416.83 345.67 T
(de\336ne a new designator type also de\336ne a pointer) 108 331.67 T
(-type for that designator) 350.46 331.67 T
(.) 468.04 331.67 T
(Many of the macr) 108 317.67 T
(os that de\336ne designators accept a) 193.84 317.67 T
4 9.5 Q
(pointer-type-name:) 363.11 317.67 T
0 11 Q
-0.08 (keywor) 108 303.67 P
-0.08 (d to bind the) 144.83 303.67 P
1 F
-0.08 (pointer-type) 209.48 303.67 P
0 F
-0.08 ( of the de\336ned designator to a given variable.) 263.86 303.67 P
(The pointer) 108 289.67 T
(-type is not pr) 164.39 289.67 T
(ogrammatically available because it may not have) 232.5 289.67 T
-0.13 (been de\336ned. Y) 108 275.67 P
-0.13 (ou can assur) 182.37 275.67 P
-0.13 (e that ther) 242.64 275.67 P
-0.13 (e is a pointer) 291.62 275.67 P
-0.13 (-type for a particular desig-) 353.33 275.67 P
(nator by using the macr) 108 261.67 T
(o) 223.55 261.67 T
4 9.5 Q
(define) 232.31 261.67 T
(c-pointer-type) 269.26 261.67 T
0 11 Q
(.) 349.06 261.67 T
(A designator class\325s) 108 241.67 T
1 F
(import type) 207.25 241.67 T
0 F
( and) 258.89 241.67 T
1 F
(export type) 283.01 241.67 T
0 F
( ar) 332.81 241.67 T
(e instantiable Dylan types) 345.2 241.67 T
(that describe the Dylan instantiation of a designator class when it is used in a) 108 227.67 T
(position that) 108 213.67 T
1 F
(imports) 172.25 213.67 T
0 F
( values fr) 206.47 213.67 T
(om C, or) 251.26 213.67 T
1 F
(exports) 296.13 213.67 T
0 F
( values to C.) 328.52 213.67 T
(Nearly all of the C-FFI\325s designators have import and export types that ar) 108 193.67 T
(e) 464.93 193.67 T
-0.31 (equivalent. Some, such as) 108 179.67 P
4 9.5 Q
-0.64 (<C-string>) 234.22 179.67 P
0 11 Q
-0.31 (, have dif) 291.22 179.67 P
-0.31 (fer) 335.63 179.67 P
-0.31 (ent import and export types) 348.7 179.67 P
(because it is possible to pass a pointer to a Dylan object to C dir) 108 165.67 T
(ectly without) 415.79 165.67 T
(cr) 108 151.67 T
(eating a C pointer object, or copying the underlying data, but when import-) 117.03 151.67 T
(ing a string fr) 108 137.67 T
(om C it is not practical to copy the contents and cr) 173.59 137.67 T
(eate a Dylan) 416.64 137.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.11/DEST FmPD2
138 656/I4.1.896521 FmPA
119 573/I4.1.963288 FmPA
207 511/I4.1.886661 FmPA
207 393/I4.1.886663 FmPA
283 393/I4.1.886664 FmPA
138 656/M4.9.39469.2Heading.151.Designator.type.properties FmPA
138 656/I4.1.978802 FmPA
108 573/I4.1.1057646 FmPA
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "11" 15
%%Page: "12" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(12) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 11 Q
0 X
(string. By default, the import and export types for any subtype of) 126 640.67 T
4 9.5 Q
(<C-) 445.97 640.67 T
-0.01 (pointer>) 126 626.67 P
0 11 Q
-0.01 ( ar) 171.6 626.67 P
-0.01 (e the class itself. Y) 183.99 626.67 P
-0.01 (ou can override this by de\336ning a new subclass) 271.06 626.67 P
(with the macr) 126 612.67 T
(o) 193.36 612.67 T
4 9.5 Q
(define) 202.12 612.67 T
(C-mapped-subtype.) 239.07 612.67 T
0 11 Q
(Y) 126 592.67 T
(ou can de\336ne a designator) 132.32 592.67 T
(\325s) 261.19 592.67 T
1 F
(import-function) 271.66 592.67 T
0 F
( and) 342.76 592.67 T
1 F
(export-function) 366.88 592.67 T
0 F
( by using the) 436.13 592.67 T
(macr) 126 578.67 T
(o) 150.24 578.67 T
4 9.5 Q
(define) 159 578.67 T
(c-mapped-subtype) 195.95 578.67 T
0 11 Q
(. These functions ar) 287.15 578.67 T
(e mer) 381.58 578.67 T
(ely the pr) 408.73 578.67 T
(ocedural) 454.83 578.67 T
(speci\336cations for translating the C data to Dylan and back. The) 126 564.67 T
1 F
(import) 434.35 564.67 T
0 F
( and) 464.29 564.67 T
1 F
(export) 126 550.67 T
0 F
( functions ar) 154.1 550.67 T
(e inherited when you de\336ne a subclass for a designator) 214.69 550.67 T
(.) 481.73 550.67 T
3 13 Q
(1.5.2  Designator c) 126 517.33 T
(lass basics) 220.02 517.33 T
3 12 Q
(<C-v) 126 483 T
(alue>) 147.42 483 T
1 11 Q
(Sealed abstract class) 414.18 483.67 T
0 F
(The abstract super) 153 461.67 T
(class of all designator classes. It is a subclass of) 242.39 461.67 T
4 9.5 Q
(<object>) 153 447.67 T
0 11 Q
(. It has neither an) 198.6 447.67 T
1 F
(export-type) 285.33 447.67 T
0 F
( nor an) 336.05 447.67 T
1 F
(import-type) 372.95 447.67 T
0 F
(, so you cannot) 425.5 447.67 T
(use it when designating a transition between C and Dylan.) 153 433.67 T
3 12 Q
(<C-v) 126 399 T
(oid>) 147.31 399 T
1 11 Q
(Sealed abstract class) 414.18 399.67 T
0 F
(The abstract super) 153 377.67 T
(class of all designator classes. It is a subclass of) 242.39 377.67 T
4 9.5 Q
(<C-) 472.4 377.67 T
-0.86 (value>) 153 363.67 P
0 11 Q
-0.41 (. It has neither an) 187.2 363.67 P
1 F
-0.41 (export-type) 271.87 363.67 P
0 F
-0.41 ( nor an) 322.58 363.67 P
1 F
-0.41 (import-type) 358.25 363.67 P
0 F
-0.41 (, so you cannot use) 410.79 363.67 P
(it when designating a transition between C and Dylan.) 153 349.67 T
(This class is only useful in that it is the) 153 329.67 T
1 F
(r) 342.66 329.67 T
(efer) 346.74 329.67 T
(enced-type) 362.44 329.67 T
0 F
( for) 409.7 329.67 T
4 9.5 Q
(<C-void*>.) 429.21 329.67 T
3 12 Q
(siz) 126 295 T
(e-of) 139.22 295 T
1 11 Q
(Function) 463.45 295.67 T
4 9 Q
(size-of) 153 275 T
6 F
(designator-class) 196.2 275 T
4 F
( =>) 262.2 275 T
6 F
(size) 283.8 275 T
0 11 Q
(T) 153 254.67 T
(akes a designator class and r) 158.73 254.67 T
(eturns the size of the C type that the class) 297.02 254.67 T
(designates.) 153 240.67 T
(The) 153 220.67 T
4 9.5 Q
(size-of) 174.16 220.67 T
0 11 Q
( function can be applied to any designator class. It corr) 214.06 220.67 T
(e-) 479.35 220.67 T
(sponds to C\325s) 153 206.67 T
4 9.5 Q
(sizeof) 221.43 206.67 T
0 11 Q
( operator and r) 255.63 206.67 T
(eturns an integer) 328.32 206.67 T
(,) 409.99 206.67 T
1 F
(size) 415.49 206.67 T
0 F
(, in the same) 431.99 206.67 T
(units as) 153 192.67 T
4 9.5 Q
(sizeof) 193.15 192.67 T
0 11 Q
( does on the tar) 227.35 192.67 T
(get platform. It can be useful when allo-) 301.91 192.67 T
(cating a C object whose declar) 153 178.67 T
(ed size is not accurate and has to be) 299.38 178.67 T
(adjusted manually) 153 164.67 T
(.) 242.46 164.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.12/DEST FmPD2
272 744/I4.1.886666 FmPA
367 744/I4.1.963412 FmPA
156 670/I4.1.886669 FmPA
126 447/M4.9.31007.Inlineinterface.sizeof FmPA
126 447/I4.1.1057620 FmPA
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "12" 16
%%Page: "13" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.5) 447.99 677.67 T
(Designator classes) 469.37 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(13) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 12 Q
0 X
(alignment-of) 108 640 T
1 11 Q
(Function) 445.45 640.67 T
4 9 Q
(alignment-of) 135 620 T
6 F
(designator-class) 205.2 620 T
4 F
( =>) 271.2 620 T
6 F
(alignment) 292.8 620 T
0 11 Q
-0.14 (T) 135 599.67 P
-0.14 (akes a designator class and r) 140.73 599.67 P
-0.14 (eturns the alignment of the C type that the) 278.32 599.67 P
(class designates. The) 135 585.67 T
4 9.5 Q
(alignment-of) 238.72 585.67 T
0 11 Q
( function can be applied to any des-) 307.12 585.67 T
(ignator class. It r) 135 571.67 T
(eturns the alignment as an integer) 215.51 571.67 T
(, in the same units as) 380.24 571.67 T
4 9.5 Q
(size-of) 135 557.67 T
0 11 Q
( does.) 174.9 557.67 T
3 13 Q
(1.5.3  Fundamental n) 108 524.33 T
(umeric type designator c) 213.37 524.33 T
(lasses) 339.36 524.33 T
0 11 Q
(This section describes the pr) 108 504.67 T
(e-de\336ned designator classes for fundamental C) 245.14 504.67 T
(numeric types. On page 10 we saw that none of these designator types ar) 108 490.67 T
(e) 462.23 490.67 T
(instantiable:. a number on one side of the interface is converted to a number) 108 476.67 T
(on the other side with the same value.) 108 462.67 T
(Ther) 108 442.67 T
(e ar) 130.56 442.67 T
(e some additional details to note about integer r) 148.23 442.67 T
(epr) 380.33 442.67 T
(esentations.) 396.35 442.67 T
(Because Dylan\325s integer r) 108 428.67 T
(epr) 230.98 428.67 T
(esentations do not match C\325s exactly) 247.01 428.67 T
(, for each of) 422.64 428.67 T
-0.08 (the C integer types ther) 108 414.67 P
-0.08 (e ar) 221.56 414.67 P
-0.08 (e thr) 239.15 414.67 P
-0.08 (ee designator classes that can be used to trans-) 261.22 414.67 P
(late Dylan r) 108 400.67 T
(epr) 164.94 400.67 T
(esentations to that C integer) 180.96 400.67 T
(. The categories ar) 316.35 400.67 T
(e) 404.25 400.67 T
1 F
(plain) 412.27 400.67 T
0 F
(,) 434.89 400.67 T
1 F
(unsafe) 440.39 400.67 T
0 F
(,) 469.12 400.67 T
(and) 108 386.67 T
1 F
(raw) 129.37 386.67 T
0 F
( integers.) 146.48 386.67 T
1 F
(Plain) 108 366.67 T
0 F
( integer designators \321 of which the class) 131.84 366.67 T
4 9.5 Q
(<C-unsigned-short>) 333.4 366.67 T
0 11 Q
( is an) 436 366.67 T
-0.02 (example \321 translate C integer values to instances of) 108 352.67 P
4 9.5 Q
-0.03 (<integer>) 364.2 352.67 P
0 11 Q
-0.02 (. If the integer) 415.5 352.67 P
-0.28 (being translated is too big for the destination, the C-FFI signals an err) 108 338.67 P
-0.28 (or) 440.95 338.67 P
-0.28 (. Ther) 450.48 338.67 P
-0.28 (e) 478.26 338.67 P
(ar) 108 324.67 T
(e two ways this can happen.) 117.65 324.67 T
(\245) 117 304.67 T
(On export, the C-FFI signals an err) 135 304.67 T
(or if the Dylan value has mor) 302.86 304.67 T
(e signif-) 444.82 304.67 T
(icant bits than the C integer) 135 290.67 T
(.) 268.18 290.67 T
(This can happen if, for example, the designator is) 135 272.67 T
4 9.5 Q
(<C-unsigned-short>) 376.89 272.67 T
0 11 Q
(,) 479.49 272.67 T
-0.24 (and the Dylan value is negative, or if) 135 258.67 P
4 9.5 Q
-0.5 (unsigned) 314.88 258.67 P
-0.5 (short) 362.99 258.67 P
0 11 Q
-0.24 ( on that platform is) 391.49 258.67 P
-0.18 (16 bits wide, but the Dylan integer has mor) 135 244.67 P
-0.18 (e than 16 signi\336cant bits. The) 343.12 244.67 P
-0.04 (check will be omitted if the compiler can determine that no Dylan value) 135 230.67 P
(outside the safe range can r) 135 216.67 T
(each ther) 267.75 216.67 T
(e. This can be done using a limited) 311.96 216.67 T
(integer type.) 135 202.67 T
(\245) 117 182.67 T
(On import into Dylan, the C-FFI signals an err) 135 182.67 T
(or if it cannot r) 359.26 182.67 T
(epr) 431.19 182.67 T
(esent) 447.21 182.67 T
(the C value using a Dylan) 135 168.67 T
4 9.5 Q
(<integer>) 263.62 168.67 T
0 11 Q
(.) 314.92 168.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.13/DEST FmPD2
138 677/I4.1.932558 FmPA
108 518/I4.1.1057655 FmPA
[/Rect[227 487 238 498]/Border[0 0 0]/Page 14/View[/XYZ null 152 684 FmDC exch pop null]/LNK FmPD
[/Rect[108 554 175 565]/Border[0 0 0]/Page 16/View[/XYZ null 126 447 FmDC exch pop null]/LNK FmPD
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "13" 17
%%Page: "14" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(14) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 11 Q
0 X
(This can happen with any C integer type that is mor) 153 640.67 T
(e than 30 bits wide.) 405.85 640.67 T
-0.28 (The size of a Dylan) 153 626.67 P
4 9.5 Q
-0.57 (<integer>) 247.32 626.67 P
0 11 Q
-0.28 ( depends on the particular platform, but it) 298.62 626.67 P
(is guaranteed to be at least 30 bits in length.) 153 612.67 T
(The C-FFI never signals an err) 126 592.67 T
(or for the) 272.48 592.67 T
1 F
(unsafe) 320.35 592.67 T
0 F
( designator classes \321 of which) 349.08 592.67 T
(the class) 126 578.67 T
4 9.5 Q
(<C-unsafe-unsigned-short>) 169.67 578.67 T
0 11 Q
( is an example \321 but if the destination) 312.17 578.67 T
-0.27 (is too small for the value, the most signi\336cant bits of the value ar) 126 564.67 P
-0.27 (e chopped of) 435.64 564.67 P
-0.27 (f) 497.85 564.67 P
-0.25 (to \336t into the destination. Because ther) 126 550.67 P
-0.25 (e is no checking, using the unsafe desig-) 310.91 550.67 P
(nator classes brings a very small performance impr) 126 536.67 T
(ovement, but nonetheless) 374.15 536.67 T
(you should not use them unless you ar) 126 522.67 T
(e certain you will not lose any bits.) 314.4 522.67 T
1 F
(Raw) 126 502.67 T
0 F
( designator classes \321 of which the class) 146.16 502.67 T
4 9.5 Q
(<C-raw-unsigned-int>) 341.72 502.67 T
0 11 Q
( is an) 455.72 502.67 T
(example \321 r) 126 488.67 T
(epr) 187.89 488.67 T
(esent the integer on the Dylan side as a) 203.91 488.67 T
4 9.5 Q
(<machine-word>) 396.21 488.67 T
0 11 Q
(. An) 476.02 488.67 T
(instance of) 126 474.67 T
4 9.5 Q
(<machine-word>) 181.08 474.67 T
0 11 Q
( is guaranteed to have enough bits to r) 260.88 474.67 T
(epr) 447.16 474.67 T
(esent) 463.19 474.67 T
(any C) 126 460.67 T
4 9.5 Q
(long) 157.32 460.67 T
0 11 Q
( value, or any C) 180.12 460.67 T
4 9.5 Q
(void) 259.6 460.67 T
(*) 285.15 460.67 T
0 11 Q
( value. Note that a) 290.85 460.67 T
4 9.5 Q
(<machine-word>) 382.75 460.67 T
0 11 Q
( value) 462.55 460.67 T
(may still have mor) 126 446.67 T
(e signi\336cant bits than some C integer types, and so the C-) 216.68 446.67 T
-0.4 (FFI may still signal an over\337ow err) 126 432.67 P
-0.4 (or if the) 293.66 432.67 P
4 9.5 Q
-0.83 (<machine-word>) 333.18 432.67 P
0 11 Q
-0.4 ( value, interpr) 412.98 432.67 P
-0.4 (eted) 480.81 432.67 P
(as indicated by the designator) 126 418.67 T
(, has mor) 271.1 418.67 T
(e signi\336cant bits than may be held in) 315.78 418.67 T
(the indicated C type.) 126 404.67 T
(T) 126 384.67 T
(able 1.1 shows all raw) 131.73 384.67 T
(, plain, and unsafe integer designator types exported) 237.35 384.67 T
(fr) 126 370.67 T
(om the) 133.81 370.67 T
4 9.5 Q
(c-ffi) 170.29 370.67 T
0 11 Q
( module.) 198.79 370.67 T
126 316.01 504 324 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
0 11 Q
0 X
0 0 0 1 0 0 0 K
(T) 167.73 327.67 T
(able 1.1  The integer designator classes and their mappings.) 173.46 327.67 T
(Designator name) 178.35 294.67 T
(C type) 328.85 294.67 T
(Dylan type\050s\051) 406.92 294.67 T
4 9.5 Q
(<C-int>) 148.63 273.01 T
(int) 303.3 273.01 T
(<integer>) 398.53 273.01 T
(<C-raw-int>) 148.63 254.01 T
(int) 303.3 254.01 T
(<machine-word>) 398.53 254.01 T
(<C-unsafe-int>) 148.63 235.01 T
(int) 303.3 235.01 T
(<integer>) 398.53 235.01 T
(<C-raw-signed-int>) 148.63 216.01 T
(signed int) 303.3 216.01 T
(<machine-word>) 398.53 216.01 T
(<C-unsafe-signed int>) 148.63 197.01 T
(signed int) 303.3 197.01 T
(<integer>) 398.53 197.01 T
(<C-signed-int>) 148.63 178.01 T
(signed int) 303.3 178.01 T
(<integer>) 398.53 178.01 T
(<C-raw-unsigned-int>) 148.63 159.01 T
(unsigned int) 303.3 159.01 T
(<machine-word>) 398.53 159.01 T
(<C-unsafe-unsigned-int>) 148.63 140.01 T
(unsigned int) 303.3 140.01 T
(<integer>) 398.53 140.01 T
297.3 310.01 297.3 133.01 2 L
V
0.25 H
0 Z
N
392.53 310.01 392.53 133.01 2 L
V
N
142.63 285.01 487.37 285.01 2 L
V
N
142.63 266.01 487.37 266.01 2 L
V
N
142.63 247.01 487.37 247.01 2 L
V
N
142.63 228.01 487.37 228.01 2 L
V
N
142.63 209.01 487.37 209.01 2 L
V
N
142.63 190.01 487.37 190.01 2 L
V
N
142.63 171.01 487.37 171.01 2 L
V
N
142.63 152.01 487.37 152.01 2 L
V
N
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.14/DEST FmPD2
216 479/M4.9.60010.TableTitle.TABLE.1.Integer.designator.types.and.their.mappings FmPA
216 479/I4.1.917809 FmPA
230 556/I4.1.1057664 FmPA
126 536/I4.1.1057673 FmPA
245 522/I4.1.1057683 FmPA
[/Rect[126 381 168 392]/Border[0 0 0]/Page 18/View[/XYZ null 216 479 FmDC exch pop null]/LNK FmPD
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "14" 18
%%Page: "15" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.5) 447.99 677.67 T
(Designator classes) 469.37 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(15) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
(For each of the fundamental integer designator types,) 108 160.67 T
4 9.5 Q
(<C-) 371.03 160.67 T
1 11 Q
(xxx) 388.13 160.67 T
4 9.5 Q
(>) 404.63 160.67 T
0 11 Q
(, ther) 410.33 160.67 T
(e is also a) 435.24 160.67 T
(type designating pointers to that type called) 108 146.67 T
4 9.5 Q
(<C-) 325.12 146.67 T
1 11 Q
(xxx) 342.22 146.67 T
4 9.5 Q
(*>) 358.72 146.67 T
0 11 Q
(. In addition, the C-FFI) 370.12 146.67 T
(de\336nes methods for) 108 132.67 T
4 9.5 Q
(pointer-value) 207.6 132.67 T
0 11 Q
( and) 281.7 132.67 T
4 9.5 Q
(pointer-value-setter) 305.83 132.67 T
0 11 Q
(, with appr) 419.01 132.67 T
(o-) 472.5 132.67 T
4 9.5 Q
(<C-unsigned-int>) 130.63 586.01 T
(unsigned int) 285.3 586.01 T
(<integer>) 380.53 586.01 T
(<C-unsigned-long>) 130.63 567.01 T
(unsigned long) 285.3 567.01 T
(<integer>) 380.53 567.01 T
(<C-signed-long>) 130.63 548.01 T
(signed long) 285.3 548.01 T
(<integer>) 380.53 548.01 T
(<C-unsafe-unsigned-long>) 130.63 529.01 T
(unsigned long) 285.3 529.01 T
(<integer>) 380.53 529.01 T
(<C-unsafe-signed-long>) 130.63 510.01 T
(signed long) 285.3 510.01 T
(<integer>) 380.53 510.01 T
(<C-raw-unsigned-long>) 130.63 491.01 T
(unsigned long) 285.3 491.01 T
(<machine-word>) 380.53 491.01 T
(<C-raw-signed-long>) 130.63 472.01 T
(signed long) 285.3 472.01 T
(<machine-word>) 380.53 472.01 T
(<C-unsigned-short>) 130.63 453.01 T
(unsigned short) 285.3 453.01 T
(<integer>) 380.53 453.01 T
(<C-signed-short>) 130.63 434.01 T
(signed short) 285.3 434.01 T
(<integer>) 380.53 434.01 T
(<C-unsafe-unsigned-short>) 130.63 415.01 T
(unsigned short) 285.3 415.01 T
(<integer>) 380.53 415.01 T
(<C-unsafe-signed-short>) 130.63 396.01 T
(signed short) 285.3 396.01 T
(<integer>) 380.53 396.01 T
(<C-raw-unsigned-short>) 130.63 377.01 T
(unsigned short) 285.3 377.01 T
(<machine-word>) 380.53 377.01 T
(<C-raw-signed-short>) 130.63 358.01 T
(signed short) 285.3 358.01 T
(<machine-word>) 380.53 358.01 T
(<C-unsigned-char>) 130.63 339.01 T
(unsigned char) 285.3 339.01 T
(<integer>) 380.53 339.01 T
(<C-signed-char>) 130.63 320.01 T
(signed char) 285.3 320.01 T
(<integer>) 380.53 320.01 T
(<C-unsafe-unsigned-char>) 130.63 301.01 T
(unsigned char) 285.3 301.01 T
(<integer>) 380.53 301.01 T
(<C-unsafe-signed-char>) 130.63 282.01 T
(signed char) 285.3 282.01 T
(<integer>) 380.53 282.01 T
(<C-raw-unsigned-char>) 130.63 263.01 T
(unsigned char) 285.3 263.01 T
(<machine-word>) 380.53 263.01 T
(<C-raw-signed-char>) 130.63 244.01 T
(signed char) 285.3 244.01 T
(<machine-word>) 380.53 244.01 T
(<C-char>) 130.63 225.01 T
(char) 285.3 225.01 T
(<integer>) 380.53 225.01 T
(<C-unsafe-char>) 130.63 206.01 T
(char) 285.3 206.01 T
(<integer>) 380.53 206.01 T
(<C-raw-char>) 130.63 187.01 T
(char) 285.3 187.01 T
(<machine-word>) 380.53 187.01 T
108 629.01 486 637 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
0 11 Q
0 X
0 0 0 1 0 0 0 K
(T) 149.73 640.67 T
(able 1.1  The integer designator classes and their mappings.) 155.46 640.67 T
(Designator name) 160.35 607.67 T
(C type) 310.85 607.67 T
(Dylan type\050s\051) 388.92 607.67 T
279.3 623.01 279.3 180.01 2 L
V
0.25 H
0 Z
N
374.53 623.01 374.53 180.01 2 L
V
N
124.63 598.01 469.37 598.01 2 L
V
N
124.63 579.01 469.37 579.01 2 L
V
N
124.63 560.01 469.37 560.01 2 L
V
N
124.63 541.01 469.37 541.01 2 L
V
N
124.63 522.01 469.37 522.01 2 L
V
N
124.63 503.01 469.37 503.01 2 L
V
N
124.63 484.01 469.37 484.01 2 L
V
N
124.63 465.01 469.37 465.01 2 L
V
N
124.63 446.01 469.37 446.01 2 L
V
N
124.63 427.01 469.37 427.01 2 L
V
N
124.63 408.01 469.37 408.01 2 L
V
N
124.63 389.01 469.37 389.01 2 L
V
N
124.63 370.01 469.37 370.01 2 L
V
N
124.63 351.01 469.37 351.01 2 L
V
N
124.63 332.01 469.37 332.01 2 L
V
N
124.63 313.01 469.37 313.01 2 L
V
N
124.63 294.01 469.37 294.01 2 L
V
N
124.63 275.01 469.37 275.01 2 L
V
N
124.63 256.01 469.37 256.01 2 L
V
N
124.63 237.01 469.37 237.01 2 L
V
N
124.63 218.01 469.37 218.01 2 L
V
N
124.63 199.01 469.37 199.01 2 L
V
N
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.15/DEST FmPD2
131 717/I4.1.1002846 FmPA
131 698/I4.1.1002849 FmPA
131 679/I4.1.1002852 FmPA
131 660/I4.1.1002855 FmPA
131 622/I4.1.1002860 FmPA
131 603/I4.1.1002863 FmPA
131 584/I4.1.1002866 FmPA
131 565/I4.1.1002869 FmPA
131 546/I4.1.1002872 FmPA
131 527/I4.1.1002875 FmPA
131 508/I4.1.1002878 FmPA
131 489/I4.1.1002881 FmPA
131 470/I4.1.1002884 FmPA
131 451/I4.1.1002887 FmPA
131 432/I4.1.1002890 FmPA
131 413/I4.1.1002893 FmPA
131 394/I4.1.1002896 FmPA
131 375/I4.1.1002899 FmPA
131 356/I4.1.1002902 FmPA
131 337/I4.1.1002905 FmPA
108 312/I4.1.1057695 FmPA
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "15" 19
%%Page: "16" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(16) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 11 Q
0 X
(priate translation behavior for each of the types designating pointers to the) 126 640.67 T
(fundamental integer designator types.) 126 626.67 T
3 12 Q
(<C-n) 126 592 T
(umber>) 148.06 592 T
1 11 Q
(Sealed abstract class) 414.18 592.67 T
0 F
(The abstract super) 153 570.67 T
(class of all classes that designate a fundamental) 242.39 570.67 T
(numeric C type. Super) 153 556.67 T
(class is) 262.26 556.67 T
4 9.5 Q
(<C-value>) 298.54 556.67 T
0 11 Q
(.) 349.84 556.67 T
3 12 Q
(<C-\337oat>) 126 522 T
1 11 Q
(Sealed abstract class) 414.18 522.67 T
3 12 Q
(<C-doub) 126 491 T
(le>) 166.09 491 T
1 11 Q
(Sealed abstract class) 414.18 491.67 T
3 12 Q
(<C-long-doub) 126 460 T
(le>) 190.14 460 T
1 11 Q
(Sealed abstract class) 414.18 460.67 T
0 F
(These thr) 153 438.67 T
(ee classes designate the C \337oating point types) 198.23 438.67 T
4 9.5 Q
(float) 422.95 438.67 T
0 11 Q
(,) 451.45 438.67 T
4 9.5 Q
(double) 456.95 438.67 T
0 11 Q
(,) 491.15 438.67 T
(and) 153 424.67 T
4 9.5 Q
(long) 174.37 424.67 T
(double) 199.92 424.67 T
0 11 Q
( r) 234.12 424.67 T
(espectively) 241.02 424.67 T
(. The super) 294.08 424.67 T
(class of each is) 348.07 424.67 T
4 9.5 Q
(<C-number>) 421.57 424.67 T
0 11 Q
(.) 478.57 424.67 T
(The Dylan r) 153 404.67 T
(epr) 210.79 404.67 T
(esentation of any C \337oating point type is the corr) 226.82 404.67 T
(espond-) 464.33 404.67 T
(ing Dylan \337oating point value of at least equivalent pr) 153 390.67 T
(ecision. By) 416.49 390.67 T
(default, wher) 153 376.67 T
(e C expects one of these types, only Dylan \337oats ar) 218.07 376.67 T
(e) 463.67 376.67 T
(accepted on the Dylan side.) 153 362.67 T
3 13 Q
(1.5.4  P) 126 329.33 T
(ointer designator c) 162.34 329.33 T
(lasses and related functions) 258.11 329.33 T
0 11 Q
(This section describes the pr) 126 309.67 T
(e-de\336ned classes that designate C pointer types.) 263.14 309.67 T
(Subclasses of the abstract classes documented her) 126 295.67 T
(e ar) 366.78 295.67 T
(e instantiable, and C) 384.45 295.67 T
(pointers ar) 126 281.67 T
(e r) 178.48 281.67 T
(epr) 190.65 281.67 T
(esented in Dylan by instances of these classes.) 206.67 281.67 T
2 F
(Note:) 126 261.67 T
0 F
( Pointer designator classes ar) 153.19 261.67 T
(e de\336ned for all the designator classes in) 293.95 261.67 T
(T) 126 247.67 T
(able 1.1, but ar) 131.73 247.67 T
(e not listed her) 202.48 247.67 T
(e. T) 274.46 247.67 T
(o form the name of the pointer designator) 290.96 247.67 T
(class for a particular designator class, append a \322*\323 to the part of the name) 126 233.67 T
(enclosed in angle brackets. Thus for) 126 219.67 T
4 9.5 Q
(<C-int>) 302.66 219.67 T
0 11 Q
( the pointer designator class is) 342.56 219.67 T
4 9.5 Q
(<C-int*>) 126 205.67 T
0 11 Q
(.) 171.6 205.67 T
3 12 Q
(<C-pointer>) 126 171 T
1 11 Q
(Primary open abstract class) 381.49 171.67 T
0 F
-0.19 (The abstract super) 153 149.67 P
-0.19 (class of all classes that designate a C pointer type. It is) 242 149.67 P
-0.38 (a subclass of) 153 135.67 P
4 9.5 Q
-0.79 (<C-value>) 215.57 135.67 P
0 11 Q
-0.38 (. Instances of concr) 266.87 135.67 P
-0.38 (ete subclasses of) 357.8 135.67 P
4 9.5 Q
-0.79 (<C-pointer>) 438.93 135.67 P
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.16/DEST FmPD2
156 482/I4.1.886995 FmPA
[/Rect[126 244 168 255]/Border[0 0 0]/Page 18/View[/XYZ null 216 479 FmDC exch pop null]/LNK FmPD
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "16" 20
%%Page: "17" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.5) 447.99 677.67 T
(Designator classes) 469.37 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(17) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
(encapsulate a raw C addr) 135 640.67 T
(ess. The make methods on subclasses of) 258.93 640.67 T
4 9.5 Q
(<C-) 455.2 640.67 T
(pointer>) 135 626.67 T
0 11 Q
( accept the keywor) 180.6 626.67 T
(d ar) 271.67 626.67 T
(gument) 290.79 626.67 T
4 9.5 Q
(address:) 331.26 626.67 T
0 11 Q
(, which must be a) 376.86 626.67 T
(Dylan) 135 612.67 T
4 9.5 Q
(<integer>) 167.48 612.67 T
0 11 Q
( or) 218.78 612.67 T
4 9.5 Q
(<machine-word>) 234.63 612.67 T
0 11 Q
( r) 314.43 612.67 T
(epr) 321.33 612.67 T
(esentation of the C addr) 337.36 612.67 T
(ess.) 454.06 612.67 T
3 12 Q
(pointer) 108 578 T
(-ad) 141.17 578 T
(dress) 155.84 578 T
1 11 Q
(Function) 445.45 578.67 T
4 9 Q
(pointer-address) 135 558 T
6 F
(C-pointer) 221.4 558 T
4 F
( =>) 260.07 558 T
6 F
(addr) 281.67 558 T
(ess) 300.02 558 T
0 11 Q
-0.43 (Recovers the addr) 135 537.67 P
-0.43 (ess fr) 222 537.67 P
-0.43 (om an instance of) 246.73 537.67 P
4 9.5 Q
-0.88 (<C-pointer>) 333.23 537.67 P
0 11 Q
-0.43 ( and r) 395.93 537.67 P
-0.43 (eturns it as a) 423.35 537.67 P
(Dylan) 135 523.67 T
4 9.5 Q
(<machine-word>) 167.48 523.67 T
0 11 Q
(.) 247.28 523.67 T
3 12 Q
(as) 108 489 T
1 11 Q
(G.f. method) 434.37 489.67 T
4 9 Q
(as) 135 469 T
6 F
(pointer-designator-class) 151.2 469 T
(C-pointer) 255.1 469 T
4 F
( =>) 293.78 469 T
6 F
(new-C-pointer) 315.38 469 T
0 11 Q
(Converts a pointer fr) 135 448.67 T
(om one pointer type to another) 236.27 448.67 T
(. The new pointer) 386.7 448.67 T
(will have the same addr) 135 434.67 T
(ess as the old pointer) 251.65 434.67 T
(.) 353.21 434.67 T
3 12 Q
(n) 108 400 T
(ull-pointer) 113.93 400 T
1 11 Q
(Function) 445.45 400.67 T
4 9 Q
(null-pointer) 135 380 T
6 F
(pointer-designator-class) 205.2 380 T
4 F
( =>) 303.7 380 T
6 F
(null-pointer) 325.3 380 T
0 11 Q
(Returns a null pointer whose type is given by) 135 359.67 T
1 F
(pointer-designator-class) 358.72 359.67 T
0 F
(.) 465.24 359.67 T
(Note that dif) 135 345.67 T
(fer) 196.96 345.67 T
(ent calls to) 210.04 345.67 T
4 9.5 Q
(null-pointer) 264.59 345.67 T
0 11 Q
( may r) 332.99 345.67 T
(eturn the same object.) 363.97 345.67 T
3 12 Q
(n) 108 311 T
(ull-pointer?) 113.93 311 T
1 11 Q
(Function) 445.45 311.67 T
4 9 Q
(null-pointer?) 135 291 T
6 F
(C-pointer) 210.6 291 T
4 F
( =>) 249.27 291 T
6 F
(boolean) 270.87 291 T
0 11 Q
(Returns tr) 135 270.67 T
(ue if a pointer is null and false otherwise.) 183.84 270.67 T
3 12 Q
(<C-untyped-pointer>) 108 236 T
1 11 Q
(Open abstract class) 399.85 236.67 T
0 F
(The abstract super) 135 214.67 T
(class of all classes encapsulating a C pointer type for) 224.39 214.67 T
(an unspeci\336c base type. It is a subclass of) 135 200.67 T
4 9.5 Q
(<C-pointer>) 337.32 200.67 T
0 11 Q
(.) 400.02 200.67 T
3 12 Q
(<C-v) 108 166 T
(oid*>) 129.31 166 T
1 11 Q
(Open concr) 398.81 166.67 T
(ete class) 450.05 166.67 T
0 F
(The class designating C\325s) 135 144.67 T
4 9.5 Q
(void*) 260.03 144.67 T
0 11 Q
( pointer type. It is a subclass of) 288.53 144.67 T
4 9.5 Q
(<C-) 440.9 144.67 T
(pointer>) 135 130.67 T
0 11 Q
(. No) 180.6 130.67 T
4 9.5 Q
(pointer-value) 204 130.67 T
0 11 Q
( methods ar) 278.1 130.67 T
(e de\336ned on this class.) 335.61 130.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.17/DEST FmPD2
135 441/I4.1.996447 FmPA
[/Rect[204 125 278 137]/Border[0 0 0]/Page 22/View[/XYZ null 126 460 FmDC exch pop null]/LNK FmPD
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "17" 21
%%Page: "18" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(18) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 12 Q
0 X
(<C-staticall) 126 640 T
(y-typed-pointer>) 178.64 640 T
1 11 Q
(Open abstract class) 417.85 640.67 T
0 F
(The abstract super) 153 618.67 T
(class of all classes designating a C pointer type for a) 242.39 618.67 T
(non-) 153 604.67 T
4 9.5 Q
(void) 175.47 604.67 T
0 11 Q
( base. It is a subclass of) 198.27 604.67 T
4 9.5 Q
(<C-pointer>) 312.41 604.67 T
0 11 Q
(.) 375.11 604.67 T
3 12 Q
(de\336ne C-pointer) 126 570 T
(-type) 201.26 570 T
1 11 Q
(De\336nition macr) 428.83 570.67 T
(o) 499.12 570.67 T
4 9 Q
(define C-pointer-type) 153 550 T
6 F
(pointer-class-name) 271.8 550 T
4 F
( =>) 349.3 550 T
6 F
(designator-class-name) 370.9 550 T
0 11 Q
-0.09 (De\336nes a constant bound to a pointer class designating pointers to) 153 529.67 P
1 F
-0.09 (desig-) 477.72 529.67 P
(nator-class-name) 153 515.67 T
0 F
(. Note that the pointer type may alr) 228.97 515.67 T
(eady exist. If the) 400.48 515.67 T
-0.35 (pointer type does not alr) 153 501.67 P
-0.35 (eady exist then this macr) 271.09 501.67 P
-0.35 (o de\336nes that class and) 390.43 501.67 P
(also de\336nes) 153 487.67 T
4 9.5 Q
(pointer-value) 212.85 487.67 T
0 11 Q
(,) 286.95 487.67 T
4 9.5 Q
(pointer-value-setter) 292.45 487.67 T
0 11 Q
(, and) 405.64 487.67 T
4 9.5 Q
(make) 432.51 487.67 T
0 11 Q
( methods) 455.31 487.67 T
(on the de\336ned type. The class de\336ned will be open, abstract and instan-) 153 473.67 T
-0.44 (tiable. Objects r) 153 459.67 P
-0.44 (eturned by) 227.07 459.67 P
4 9.5 Q
-0.9 (make\050) 282.12 459.67 P
1 11 Q
-0.44 (pointer-class-name) 310.62 459.67 P
4 9.5 Q
-0.9 (\051) 394.54 459.67 P
0 11 Q
-0.44 ( will be instances of a) 400.24 459.67 P
(sealed concr) 153 445.67 T
(ete subclass of) 212.7 445.67 T
1 F
(pointer-class-name) 285.03 445.67 T
0 F
(.) 368.95 445.67 T
3 12 Q
(ref) 126 411 T
(erenced-type) 138.49 411 T
1 11 Q
(Function) 463.45 411.67 T
4 9 Q
(referenced-type pointer-designator-class => designator-class) 153 391 T
0 11 Q
-0.27 (Returns the class designating the contents type of the C pointer type des-) 153 370.67 P
-0.06 (ignated by) 153 356.67 P
1 F
-0.06 (pointer-designator-class) 207.37 356.67 P
0 F
-0.06 (. The same designator class is r) 313.9 356.67 P
-0.06 (eturned) 463.08 356.67 P
(whenever) 153 342.67 T
4 9.5 Q
(referenced-type) 204.1 342.67 T
0 11 Q
( is called with the same ar) 289.6 342.67 T
(gument.) 415.15 342.67 T
3 12 Q
(pointer) 126 308 T
(-v) 159.17 308 T
(alue) 167.74 308 T
1 11 Q
(Open generic function) 404.57 308.67 T
4 9 Q
(pointer-value) 153 288 T
6 F
(C-typed-pointer) 228.6 288 T
4 F
( #key) 293.28 288 T
6 F
(index) 325.68 288 T
4 F
( =>) 347.18 288 T
6 F
(object) 368.78 288 T
3 12 Q
(pointer) 126 255 T
(-v) 159.17 255 T
(alue-setter) 167.74 255 T
1 11 Q
(Open generic function) 404.57 255.67 T
4 9 Q
(pointer-value-setter) 153 235 T
6 F
(new-value) 266.4 235 T
(C-typed-pointer) 313.8 235 T
4 F
( #key) 378.49 235 T
6 F
(index) 410.89 235 T
4 F
( =>) 432.39 235 T
6 F
(new-value) 453.99 235 T
0 11 Q
-0.37 (These functions der) 153 214.67 P
-0.37 (efer) 247.69 214.67 P
-0.37 (ence and set C pointer values fr) 266.04 214.67 P
-0.37 (om Dylan. It is an) 416.82 214.67 P
(err) 153 200.67 T
(or if) 166.76 200.67 T
1 F
(C-typed-pointer) 189.48 200.67 T
0 F
( does not point to a valid addr) 260.36 200.67 T
(ess or is a null) 407.09 200.67 T
(pointer) 153 186.67 T
(.) 187.61 186.67 T
-0.19 (The) 153 166.67 P
4 9.5 Q
-0.4 (pointer-value) 173.97 166.67 P
0 11 Q
-0.19 ( function der) 248.07 166.67 P
-0.19 (efer) 310.11 166.67 P
-0.19 (ences) 328.45 166.67 P
1 F
-0.19 (c-typed-pointer) 357.5 166.67 P
0 F
-0.19 ( using its encap-) 425.53 166.67 P
(sulated raw C addr) 153 152.67 T
(ess, and r) 246.73 152.67 T
(eturns a Dylan object r) 292.35 152.67 T
(epr) 402.03 152.67 T
(esenting the) 418.06 152.67 T
(object at that addr) 153 138.67 T
(ess. If you supply) 240.9 138.67 T
1 F
(index) 329.21 138.67 T
0 F
(, the pointer is tr) 353.66 138.67 T
(eated as a) 433.69 138.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.18/DEST FmPD2
458 494/I4.1.1057767 FmPA
126 460/M4.9.58276.Inlineinterface.pointervalue FmPA
126 460/I4.1.1057889 FmPA
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "18" 22
%%Page: "19" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.5) 447.99 677.67 T
(Designator classes) 469.37 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(19) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
(pointer to an array) 135 640.67 T
(, and the function r) 224.75 640.67 T
(eturns the appr) 317.3 640.67 T
(opriate element) 391.83 640.67 T
(indexed by the corr) 135 626.67 T
(ect unit size.) 229.35 626.67 T
(The) 135 606.67 T
4 9.5 Q
(pointer-value-setter) 156.16 606.67 T
0 11 Q
( function allows you to set pointer values.) 270.16 606.67 T
(The options ar) 135 592.67 T
(e the same as those for) 205.04 592.67 T
4 9.5 Q
(pointer-value) 317.31 592.67 T
0 11 Q
(.) 391.41 592.67 T
(These two functions ar) 135 572.67 T
(e part of a pr) 245.45 572.67 T
(otocol for extending the C type con-) 307.69 572.67 T
(versions. Y) 135 558.67 T
(ou can de\336ne new methods for) 187.59 558.67 T
4 9.5 Q
(pointer-value) 341.05 558.67 T
0 11 Q
( and) 415.15 558.67 T
4 9.5 Q
(pointer-) 439.27 558.67 T
(value) 135 544.67 T
0 11 Q
( for types de\336ned by) 163.5 544.67 T
4 9.5 Q
(define C-subtype) 266.75 544.67 T
0 11 Q
( that ar) 357.95 544.67 T
(e subtypes of) 392.17 544.67 T
4 9.5 Q
(<C-) 458.98 544.67 T
(pointer>) 135 530.67 T
0 11 Q
(.) 180.6 530.67 T
(These functions perform the primitive Dylan-to-C and C-to-Dylan con-) 135 510.67 T
(versions as documented with the designator class of the pointer) 135 496.67 T
(\325s con-) 445.39 496.67 T
(tents type \050see T) 135 482.67 T
(able 1.1\051. The C-FFI signals an err) 212.93 482.67 T
(or if it cannot convert) 374.88 482.67 T
(the object you attempt to stor) 135 468.67 T
(e in the pointer to a compatible type.) 277.01 468.67 T
3 12 Q
(pointer) 108 434 T
(-v) 141.17 434 T
(alue-ad) 149.74 434 T
(dress) 184.1 434 T
1 11 Q
(Open generic function) 386.57 434.67 T
4 9 Q
(pointer-value-address) 135 414 T
6 F
(C-typed-pointer) 253.8 414 T
4 F
( #key) 318.48 414 T
6 F
(index) 350.88 414 T
4 F
( =>) 372.38 414 T
6 F
(object) 393.98 414 T
0 11 Q
(Returns a pointer of the same type as) 135 393.67 T
1 F
(C-typed-pointer) 317.98 393.67 T
0 F
( that points to the) 388.87 393.67 T
1 F
(index) 135 379.67 T
0 F
(th object offset into) 159.45 379.67 T
1 F
(C-typed-pointer) 254.89 379.67 T
0 F
(. The following expr) 324.96 379.67 T
(ession is) 423.05 379.67 T
(guaranteed to be tr) 135 365.67 T
(ue:) 227.38 365.67 T
4 9 Q
(pointer-value\050) 135 345 T
6 F
(C-typed-pointer) 210.6 345 T
4 F
(, index: i\051) 275.28 345 T
-1.06 (= pointer-value \050pointer-value-address\050) 145.8 334 P
6 F
-0.44 (C-typed-pointer) 354.29 334 P
4 F
-1.06 (, index: i\051\051) 418.97 334 P
3 12 Q
(element) 108 301 T
1 11 Q
(G.f. method) 434.37 301.67 T
4 9 Q
(element) 135 281 T
6 F
(C-statically-typed-pointer) 178.2 281 T
(index) 290.78 281 T
4 F
( =>) 312.28 281 T
6 F
(object) 333.88 281 T
0 11 Q
(Synonymous with a call to) 135 260.67 T
4 9.5 Q
(pointer-value) 266.82 260.67 T
0 11 Q
( that includes the optional) 340.92 260.67 T
(index. Thus it does the same thing as:) 135 246.67 T
4 9 Q
(pointer-value\050) 135 226 T
6 F
(C-statically-typed-pointer) 210.6 226 T
4 F
(, index:) 317.78 226 T
6 F
(index) 366.38 226 T
4 F
(\051) 387.88 226 T
3 12 Q
(element-setter) 108 193 T
1 11 Q
(G.f. method) 434.37 193.67 T
4 9 Q
(element-setter) 135 173 T
6 F
(new) 216 173 T
(C-statically-typed-pointer) 237.9 173 T
(index) 350.48 173 T
4 F
( =>) 371.98 173 T
6 F
(object) 393.58 173 T
0 11 Q
(Synonymous with a call to) 135 152.67 T
4 9.5 Q
(pointer-value-setter) 266.82 152.67 T
0 11 Q
( that includes the) 380.82 152.67 T
(optional index. Thus it does the same thing as:) 135 138.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.19/DEST FmPD2
[/Rect[207 479 249 490]/Border[0 0 0]/Page 18/View[/XYZ null 216 479 FmDC exch pop null]/LNK FmPD
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "19" 23
%%Page: "20" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(20) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 F
0 X
(pointer-value-setter\050) 153 642 T
6 F
(new) 266.4 642 T
4 F
(,) 282.9 642 T
6 F
(C-statically-typed-pointer) 293.7 642 T
4 F
(, index:) 400.88 642 T
6 F
(index) 449.48 642 T
4 F
(\051) 470.98 642 T
3 12 Q
(-) 126 609 T
1 11 Q
(G.f method) 455.12 609.67 T
4 9 Q
(-) 153 589 T
6 F
(C-pointer-1) 163.8 589 T
(C-pointer-2) 215.87 589 T
4 F
( =>) 262.55 589 T
6 F
(machine-word) 284.15 589 T
3 12 Q
(=) 126 556 T
1 11 Q
(G.f method) 455.12 556.67 T
4 9 Q
(=) 153 536 T
6 F
(C-pointer-1) 163.8 536 T
(C-pointer-2) 215.87 536 T
4 F
( =>) 262.55 536 T
6 F
(boolean) 284.15 536 T
3 12 Q
(<) 126 503 T
1 11 Q
(G.f method) 455.12 503.67 T
4 9 Q
(<) 153 483 T
6 F
(C-pointer-1) 163.8 483 T
(C-pointer-2) 215.87 483 T
4 F
( =>) 262.55 483 T
6 F
(boolean) 284.15 483 T
0 11 Q
-0.39 (These methods allow pointer comparison operations to be performed on) 153 462.67 P
(instances of) 153 448.67 T
4 9.5 Q
(<C-pointer>) 212.74 448.67 T
0 11 Q
(.) 275.44 448.67 T
(The r) 153 428.67 T
(esult of) 178.31 428.67 T
4 9.5 Q
(-) 216.83 428.67 T
0 11 Q
( is given in terms of element units rather than bytes.) 222.53 428.67 T
(The method for = is equivalent to:) 153 408.67 T
4 9 Q
(\050pointer-address\050) 163.8 388 T
6 F
(C-pointer-1) 255.6 388 T
4 F
(\051 = pointer-address\050) 302.27 388 T
6 F
(C-pointer-2) 410.27 388 T
4 F
(\051\051) 456.95 388 T
0 11 Q
(Note that operations corr) 153 367.67 T
(esponding to C pointer arithmetic ar) 275.3 367.67 T
(e not) 452.58 367.67 T
(de\336ned on) 153 353.67 T
4 9.5 Q
(<C-pointer>) 207.95 353.67 T
0 11 Q
(. If pointer arithmetic operations ar) 270.64 353.67 T
(e r) 440.86 353.67 T
(equir) 453.02 353.67 T
(ed,) 478.43 353.67 T
(use) 153 339.67 T
4 9.5 Q
(pointer-value) 172.32 339.67 T
0 11 Q
( with an) 246.42 339.67 T
4 9.5 Q
(index:) 288.93 339.67 T
0 11 Q
( ar) 323.13 339.67 T
(gument.) 335.53 339.67 T
(The following functions comprise the conceptual foundation on which the) 126 299.67 T
(pointer accessing pr) 126 285.67 T
(otocol is based. In the signatur) 223.26 285.67 T
(es of these functions,) 371.17 285.67 T
1 F
(byte-) 475.15 285.67 T
-0.06 (index) 126 271.67 P
0 F
-0.06 ( is in terms of addr) 150.45 271.67 P
-0.06 (ess units \050typically bytes\051 and) 241.71 271.67 P
1 F
-0.06 (scaled-index) 388.34 271.67 P
0 F
-0.06 ( is scaled by) 442.93 271.67 P
-0.09 (the size of the units involved. In the setters,) 126 257.67 P
1 F
-0.09 (new) 338.7 257.67 P
0 F
-0.09 ( is the new value to which the) 357.04 257.67 P
-0.14 (value in the pointed-at location will be set. These functions can be used to def-) 126 243.67 P
(er) 126 229.67 T
(ence any general instance of) 135.42 229.67 T
4 9.5 Q
(<C-pointer>) 274.69 229.67 T
0 11 Q
(.) 337.39 229.67 T
3 12 Q
(C-unsigned-c) 126 195 T
(har) 188.78 195 T
(-at) 203.92 195 T
1 11 Q
(Function) 463.45 195.67 T
4 9 Q
-0.77 (C-unsigned-char-at) 153 175 P
6 F
-0.32 (C-pointer) 254.83 175 P
4 F
-0.77 ( #key) 293.5 175 P
6 F
-0.32 (byte-index) 324.36 175 P
-0.32 (scaled-index) 371.32 175 P
4 F
-0.77 ( =>) 421.31 175 P
6 F
-0.32 (machine-word) 441.37 175 P
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.20/DEST FmPD2
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "20" 24
%%Page: "21" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.5) 447.99 677.67 T
(Designator classes) 469.37 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(21) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 12 Q
0 X
(C-unsigned-c) 108 640 T
(har) 170.78 640 T
(-at-setter) 185.92 640 T
1 11 Q
(Function) 445.45 640.67 T
4 9 Q
(C-unsigned-char-at-setter) 135 620 T
6 F
(new) 275.4 620 T
(C-pointer) 297.3 620 T
4 F
( #key) 335.97 620 T
6 F
(byte-index) 368.37 620 T
(scaled-index) 416.11 620 T
4 F
(=>) 145.8 609 T
6 F
(machine-word) 162 609 T
3 12 Q
(C-signed-c) 108 576 T
(har) 158.76 576 T
(-at) 173.89 576 T
1 11 Q
(Function) 445.45 576.67 T
4 9 Q
(C-signed-char-at) 135 556 T
6 F
(C-pointer) 226.8 556 T
4 F
( #key) 265.47 556 T
6 F
(byte-index) 297.87 556 T
(scaled-index) 345.61 556 T
4 F
( =>) 395.6 556 T
6 F
(machine-word) 417.2 556 T
3 12 Q
(C-signed-c) 108 523 T
(har) 158.76 523 T
(-at-setter) 173.89 523 T
1 11 Q
(Function) 445.45 523.67 T
4 9 Q
(C-signed-char-at-setter) 135 503 T
6 F
(new) 264.6 503 T
(C-pointer) 286.5 503 T
4 F
( #key) 325.17 503 T
6 F
(byte-index) 357.57 503 T
(scaled-index) 405.31 503 T
4 F
(=>) 145.8 492 T
6 F
(machine-word) 162 492 T
3 12 Q
(C-c) 108 459 T
(har) 123.77 459 T
(-at) 138.9 459 T
1 11 Q
(Function) 445.45 459.67 T
4 9 Q
(C-char-at) 135 439 T
6 F
(C-pointer) 189 439 T
4 F
( #key) 227.67 439 T
6 F
(byte-index) 260.07 439 T
(scaled-index) 307.81 439 T
4 F
( =>) 357.8 439 T
6 F
(machine-word) 379.4 439 T
3 12 Q
(C-c) 108 406 T
(har) 123.77 406 T
(-at-setter) 138.9 406 T
1 11 Q
(Function) 445.45 406.67 T
4 9 Q
(C-char-at-setter) 135 386 T
6 F
(new) 226.8 386 T
(C-pointer) 248.7 386 T
4 F
( #key) 287.37 386 T
6 F
(byte-index) 319.77 386 T
(scaled-index) 367.51 386 T
4 F
(=>) 145.8 375 T
6 F
(machine-word) 162 375 T
3 12 Q
(C-unsigned-shor) 108 342 T
(t-at) 186.91 342 T
1 11 Q
(Function) 445.45 342.67 T
4 9 Q
(C-unsigned-short-at) 135 322 T
6 F
(C-pointer) 243 322 T
4 F
( #key) 281.67 322 T
6 F
(byte-index) 314.07 322 T
(scaled-index) 361.81 322 T
4 F
(=>) 145.8 311 T
6 F
(machine-word) 162 311 T
3 12 Q
(C-unsigned-shor) 108 278 T
(t-at-setter) 186.91 278 T
1 11 Q
(Function) 445.45 278.67 T
4 9 Q
(C-unsigned-short-at-setter) 135 258 T
6 F
(new) 280.8 258 T
(C-pointer) 302.7 258 T
4 F
( #key) 341.37 258 T
6 F
(byte-index) 373.77 258 T
(scaled-index) 421.51 258 T
4 F
(=>) 145.8 247 T
6 F
(machine-word) 162 247 T
3 12 Q
(C-signed-shor) 108 214 T
(t-at) 174.89 214 T
1 11 Q
(Function) 445.45 214.67 T
4 9 Q
-0 (C-signed-short-at) 135 194 P
6 F
-0 (C-pointer) 232.2 194 P
4 F
-0 ( #key) 270.87 194 P
6 F
-0 (byte-index) 303.27 194 P
-0 (scaled-index) 351 194 P
4 F
-0 ( =>) 401 194 P
6 F
-0 (machine-word) 422.6 194 P
3 12 Q
(C-signed-shor) 108 161 T
(t-at-setter) 174.89 161 T
1 11 Q
(Function) 445.45 161.67 T
4 9 Q
(C-signed-short-at-setter) 135 141 T
6 F
(new) 270 141 T
(C-pointer) 291.9 141 T
4 F
( #key) 330.57 141 T
6 F
(byte-index) 362.97 141 T
(scaled-index) 410.71 141 T
4 F
(=>) 145.8 130 T
6 F
(machine-word) 162 130 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.21/DEST FmPD2
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "21" 25
%%Page: "22" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(22) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 12 Q
0 X
(C-shor) 126 640 T
(t-at) 157.9 640 T
1 11 Q
(Function) 463.45 640.67 T
4 9 Q
(C-short-at) 153 620 T
6 F
(C-pointer) 212.4 620 T
4 F
( #key) 251.07 620 T
6 F
(byte-index) 283.47 620 T
(scaled-index) 331.21 620 T
4 F
( =>) 381.2 620 T
6 F
(machine-word) 402.8 620 T
3 12 Q
(C-shor) 126 587 T
(t-at-setter) 157.9 587 T
1 11 Q
(Function) 463.45 587.67 T
4 9 Q
(C-short-at-setter) 153 567 T
6 F
(new) 250.2 567 T
(C-pointer) 272.1 567 T
4 F
( #key) 310.77 567 T
6 F
(byte-index) 343.17 567 T
(scaled-index) 390.91 567 T
4 F
(=>) 163.8 556 T
6 F
(machine-word) 180 556 T
3 12 Q
(C-unsigned-long-at) 126 523 T
1 11 Q
(Function) 463.45 523.67 T
4 9 Q
-0.77 (C-unsigned-long-at) 153 503 P
6 F
-0.32 (C-pointer) 254.83 503 P
4 F
-0.77 ( #key) 293.5 503 P
6 F
-0.32 (byte-index) 324.36 503 P
-0.32 (scaled-index) 371.32 503 P
4 F
-0.77 ( =>) 421.31 503 P
6 F
-0.32 (machine-word) 441.37 503 P
3 12 Q
(C-unsigned-long-at-setter) 126 470 T
1 11 Q
(Function) 463.45 470.67 T
4 9 Q
(C-unsigned-long-at-setter) 153 450 T
6 F
(new) 293.4 450 T
(C-pointer) 315.3 450 T
4 F
( #key) 353.97 450 T
6 F
(byte-index) 386.37 450 T
(scaled-index) 434.11 450 T
4 F
(=>) 163.8 439 T
6 F
(machine-word) 180 439 T
3 12 Q
(C-signed-long-at) 126 406 T
1 11 Q
(Function) 463.45 406.67 T
4 9 Q
(C-signed-long-at) 153 386 T
6 F
(C-pointer) 244.8 386 T
4 F
( #key) 283.47 386 T
6 F
(byte-index) 315.87 386 T
(scaled-index) 363.61 386 T
4 F
( =>) 413.6 386 T
6 F
(machine-word) 435.2 386 T
3 12 Q
(C-signed-long-at-setter) 126 353 T
1 11 Q
(Function) 463.45 353.67 T
4 9 Q
(C-signed-long-at-setter) 153 333 T
6 F
(new) 282.6 333 T
(C-pointer) 304.5 333 T
4 F
( #key) 343.17 333 T
6 F
(byte-index) 375.57 333 T
(scaled-index) 423.31 333 T
4 F
(=>) 163.8 322 T
6 F
(machine-word) 180 322 T
3 12 Q
(C-long-at) 126 289 T
1 11 Q
(Function) 463.45 289.67 T
4 9 Q
(C-long-at) 153 269 T
6 F
(C-pointer) 207 269 T
4 F
( #key) 245.67 269 T
6 F
(byte-index) 278.07 269 T
(scaled-index) 325.81 269 T
4 F
( =>) 375.8 269 T
6 F
(machine-word) 397.4 269 T
3 12 Q
(C-long-at-setter) 126 236 T
1 11 Q
(Function) 463.45 236.67 T
4 9 Q
(C-long-at-setter) 153 216 T
6 F
(new) 244.8 216 T
(C-pointer) 266.7 216 T
4 F
( #key) 305.37 216 T
6 F
(byte-index) 337.77 216 T
(scaled-index) 385.51 216 T
4 F
(=>) 163.8 205 T
6 F
(machine-word) 180 205 T
3 12 Q
(C-unsigned-int-at) 126 172 T
1 11 Q
(Function) 463.45 172.67 T
4 9 Q
-0 (C-unsigned-int-at) 153 152 P
6 F
-0 (C-pointer) 250.2 152 P
4 F
-0 ( #key) 288.87 152 P
6 F
-0 (byte-index) 321.27 152 P
-0 (scaled-index) 369 152 P
4 F
-0 ( =>) 419 152 P
6 F
-0 (machine-word) 440.6 152 P
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.22/DEST FmPD2
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "22" 26
%%Page: "23" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.5) 447.99 677.67 T
(Designator classes) 469.37 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(23) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 12 Q
0 X
(C-unsigned-int-at-setter) 108 640 T
1 11 Q
(Function) 445.45 640.67 T
4 9 Q
(C-unsigned-int-at-setter) 135 620 T
6 F
(new) 270 620 T
(C-pointer) 291.9 620 T
4 F
( #key) 330.57 620 T
6 F
(byte-index) 362.97 620 T
(scaled-index) 410.71 620 T
4 F
(=>) 145.8 609 T
6 F
(machine-word) 162 609 T
3 12 Q
(C-signed-int-at) 108 576 T
1 11 Q
(Function) 445.45 576.67 T
4 9 Q
(C-signed-int-at) 135 556 T
6 F
(C-pointer) 221.4 556 T
4 F
( #key) 260.07 556 T
6 F
(byte-index) 292.47 556 T
(scaled-index) 340.21 556 T
4 F
( =>) 390.2 556 T
6 F
(machine-word) 411.8 556 T
3 12 Q
(C-signed-int-at-setter) 108 523 T
1 11 Q
(Function) 445.45 523.67 T
4 9 Q
(C-signed-int-at-setter) 135 503 T
6 F
(new) 259.2 503 T
(C-pointer) 281.1 503 T
4 F
( #key) 319.77 503 T
6 F
(byte-index) 352.17 503 T
(scaled-index) 399.91 503 T
4 F
(=>) 145.8 492 T
6 F
(machine-word) 162 492 T
3 12 Q
(C-int-at) 108 459 T
1 11 Q
(Function) 445.45 459.67 T
4 9 Q
(C-int-at) 135 439 T
6 F
(C-pointer) 183.6 439 T
4 F
( #key) 222.27 439 T
6 F
(byte-index) 254.67 439 T
(scaled-index) 302.41 439 T
4 F
( =>) 352.4 439 T
6 F
(machine-word) 374 439 T
3 12 Q
(C-int-at-setter) 108 406 T
1 11 Q
(Function) 445.45 406.67 T
4 9 Q
(C-int-at-setter) 135 386 T
6 F
(new) 221.4 386 T
(C-pointer) 243.3 386 T
4 F
( #key) 281.97 386 T
6 F
(byte-index) 314.37 386 T
(scaled-index) 362.11 386 T
4 F
(=>) 145.8 375 T
6 F
(machine-word) 162 375 T
3 12 Q
(C-doub) 108 342 T
(le-at) 142.34 342 T
1 11 Q
(Function) 445.45 342.67 T
4 9 Q
(C-double-at) 135 322 T
6 F
(C-pointer) 199.8 322 T
4 F
( #key) 238.47 322 T
6 F
(byte-index) 270.87 322 T
(scaled-index) 318.61 322 T
4 F
( =>) 368.6 322 T
6 F
(\337oat) 390.2 322 T
3 12 Q
(C-doub) 108 289 T
(le-at-setter) 142.34 289 T
1 11 Q
(Function) 445.45 289.67 T
4 9 Q
-0.09 (C-double-at-setter) 135 269 P
6 F
-0.04 (new-double-\337oat) 237.51 269 P
-0.04 (C-pointer) 312.16 269 P
4 F
-0.09 ( #key) 350.83 269 P
6 F
-0.04 (byte-index) 383.05 269 P
-0.04 (scaled-index) 430.7 269 P
4 F
(=>) 145.8 258 T
6 F
(\337oat) 162 258 T
3 12 Q
(C-\337oat-at) 108 225 T
1 11 Q
(Function) 445.45 225.67 T
4 9 Q
(C-float-at) 135 205 T
6 F
(C-pointer) 194.4 205 T
4 F
( #key) 233.07 205 T
6 F
(byte-index) 265.47 205 T
(scaled-index) 313.21 205 T
4 F
( =>) 363.2 205 T
6 F
(\337oat) 384.8 205 T
3 12 Q
(C-\337oat-at-setter) 108 172 T
1 11 Q
(Function) 445.45 172.67 T
4 9 Q
(C-float-at-setter) 135 152 T
6 F
(new-single-\337oat) 232.2 152 T
(C-pointer) 303.6 152 T
4 F
( #key) 342.27 152 T
6 F
(byte-index) 374.67 152 T
(scaled-index) 422.41 152 T
4 F
(=>) 145.8 141 T
6 F
(\337oat) 162 141 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.23/DEST FmPD2
108 377/I4.1.1057776 FmPA
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "23" 27
%%Page: "24" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(24) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 12 Q
0 X
(C-pointer) 126 640 T
(-at) 169.55 640 T
1 11 Q
(Function) 463.45 640.67 T
4 9 Q
(C-pointer-at) 153 620 T
6 F
(C-pointer) 223.2 620 T
4 F
( #key) 261.87 620 T
6 F
(byte-index) 294.27 620 T
(scaled-index) 342.01 620 T
4 F
( =>) 392 620 T
6 F
(C-pointer) 413.6 620 T
3 12 Q
(C-pointer) 126 587 T
(-at-setter) 169.55 587 T
1 11 Q
(Function) 463.45 587.67 T
4 9 Q
(C-pointer-at-setter) 153 567 T
6 F
(new) 261 567 T
(C-pointer) 282.9 567 T
4 F
( #key) 321.57 567 T
6 F
(byte-index) 353.97 567 T
(scaled-index) 401.71 567 T
4 F
(=>) 163.8 556 T
6 F
(C-pointer) 180 556 T
3 13 Q
(1.5.5  Structure types) 126 524.33 T
3 12 Q
(<C-struct>) 126 490 T
1 11 Q
(Open abstract class) 417.85 490.67 T
0 F
(The abstract super) 153 468.67 T
(class of all classes designating a C str) 242.39 468.67 T
(uct type. It is a) 421.95 468.67 T
(subclass of) 153 454.67 T
4 9.5 Q
(<C-value>) 208.46 454.67 T
0 11 Q
(. It is a subclass of) 259.76 454.67 T
4 9.5 Q
(<C-value>) 349.63 454.67 T
0 11 Q
(. Y) 400.93 454.67 T
(ou can describe) 412.76 454.67 T
(new str) 153 440.67 T
(uct types using the) 189.1 440.67 T
4 9.5 Q
(define) 283.72 440.67 T
(C-struct) 320.67 440.67 T
0 11 Q
( macr) 366.27 440.67 T
(o.) 393.27 440.67 T
(Classes designating C str) 153 420.67 T
(ucts ar) 274.49 420.67 T
(e not instantiable. Wher) 306.66 420.67 T
(e a slot, array) 422.33 420.67 T
-0.17 (element, function parameter or function r) 153 406.67 P
-0.17 (esult is typed as a str) 353.56 406.67 P
-0.17 (uct value,) 454.16 406.67 P
(pointers to that str) 153 392.67 T
(uct type ar) 242.51 392.67 T
(e accepted and r) 294.34 392.67 T
(eturned.) 373.35 392.67 T
3 13 Q
(1.5.6  Union types) 126 359.33 T
3 12 Q
(<C-union>) 126 325 T
1 11 Q
(Open abstract class) 417.85 325.67 T
0 F
(The abstract super) 153 303.67 T
(class of all classes designating a C union type. It is a) 242.39 303.67 T
(subclass of) 153 289.67 T
4 9.5 Q
(<C-value>) 208.46 289.67 T
0 11 Q
(. Y) 259.76 289.67 T
(ou can describe new union types with the) 271.59 289.67 T
(macr) 153 275.67 T
(o) 177.24 275.67 T
4 9.5 Q
(define) 186 275.67 T
(C-union) 222.95 275.67 T
0 11 Q
(. Classes designating C unions ar) 262.85 275.67 T
(e not instantia-) 423.04 275.67 T
-0.15 (ble. Wher) 153 261.67 P
-0.15 (e a slot, array element, function parameter or function r) 199.72 261.67 P
-0.15 (esult is) 467.58 261.67 P
(typed as a union value, pointers to that union type ar) 153 247.67 T
(e accepted and) 411.3 247.67 T
(r) 153 233.67 T
(eturned.) 157.15 233.67 T
3 13 Q
(1.5.7  Notes on C type macr) 126 200.33 T
(os) 265.04 200.33 T
0 11 Q
-0.36 (The C-FFI\325s C interface description language does not model all of the ways of) 126 180.67 P
(de\336ning new types in C, but all C types should be expr) 126 166.67 T
(essible in it. As a sim-) 393.19 166.67 T
(pli\336cation, we do not support anonymous base types in the C interface) 126 152.67 T
(description language. If a str) 126 138.67 T
(uctur) 264.75 138.67 T
(e or union \336eld has an in-line type de\336ni-) 290.64 138.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.24/DEST FmPD2
156 677/I4.1.996723 FmPA
126 477/I4.1.1030424 FmPA
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "24" 28
%%Page: "25" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.6) 461.87 677.67 T
(Defining types) 483.25 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(25) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
-0 (tion in C, that de\336nition must be extracted and given a name in or) 108 640.67 P
-0 (der for it to) 428.29 640.67 P
(be used. For example, the following C str) 108 626.67 T
(uct) 307.63 626.67 T
4 9 Q
(struct something {) 135 606 T
(char *name;) 145.8 595 T
(long flags;) 145.8 584 T
(union {) 145.8 573 T
(long int_val;) 151.2 562 T
(char *string_val;) 151.2 551 T
(} val;) 145.8 540 T
(}) 135 529 T
0 11 Q
(can be described with these de\336nitions:) 108 508.67 T
4 9 Q
(define C-union <anonymous-union-1>) 135 488 T
(slot int-val) 145.8 477 T
(:: <C-long>;) 232.2 477 T
(slot string-val :: <C-string>;) 145.8 466 T
(end C-union;) 135 455 T
(define C-struct <anonymous-struct-1>) 135 436 T
(slot name  :: <C-string>;) 145.8 425 T
(slot flags :: <C-long>;) 145.8 414 T
(slot val   :: <anonymous-union-1>;) 145.8 403 T
(end C-struct;) 135 392 T
0 11 Q
-0.4 (The slots of these ex-inline types must be accessed thr) 108 371.67 P
-0.4 (ough a chain of accesses,) 365 371.67 P
(for example) 108 357.67 T
4 9.5 Q
(o.val.string-val) 168.75 357.67 T
0 11 Q
(.) 259.95 357.67 T
3 16 Q
(1.6  De\336ning types) 108 322.33 T
108 466/G4.1038252 FmPA
0 11 Q
(This section covers the de\336nition macr) 108 301.67 T
(os that cr) 295.1 301.67 T
(eate Dylan designators for C) 339.37 301.67 T
(types, str) 108 287.67 T
(ucts and unions.) 152.25 287.67 T
3 13 Q
(1.6.1  De\336ning specializ) 108 254.33 T
(ed ver) 227.79 254.33 T
(sions of designator c) 259.06 254.33 T
(lasses) 366.09 254.33 T
3 12 Q
(de\336ne C-subtype) 108 220 T
1 11 Q
(De\336nition macr) 410.83 220.67 T
(o) 481.12 220.67 T
4 9 Q
(define) 135 200 T
([) 172.8 200 T
6 F
(modi\336ers) 178.2 200 T
4 F
(*] C-subtype) 215.69 200 T
5 F
(name) 285.89 200 T
4 F
( \050) 307.49 200 T
5 F
(superclasses) 318.29 200 T
4 F
(\051) 383.09 200 T
([) 145.8 189 T
6 F
(slot-spec) 151.2 189 T
4 F
(;) 187.19 189 T
(\311] [;]) 197.99 189 T
([) 145.8 178 T
6 F
(type-options) 151.2 178 T
4 F
(] [;]) 202.72 178 T
(end [C-subtype] [) 135 167 T
6 F
(name) 226.8 167 T
4 F
(]) 248.3 167 T
0 11 Q
(De\336nes a specialized designator class for a C type based on an existing) 135 146.67 T
(designator class for that type. It does this by de\336ning a subclass of the) 135 132.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.25/DEST FmPD2
232 350/I4.1.1034374 FmPA
108 372/I4.1.1057788 FmPA
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "25" 29
%%Page: "26" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(26) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 11 Q
0 X
-0.19 (original designator class, and is a simple wrapper ar) 153 640.67 P
-0.19 (ound) 405.1 640.67 P
4 9.5 Q
-0.39 (define class) 433.42 640.67 P
0 11 Q
(fr) 153 626.67 T
(om which it takes its syntax. The) 160.81 626.67 T
1 F
(super) 322.32 626.67 T
(classes) 346.58 626.67 T
0 F
(,) 376.11 626.67 T
1 F
(slot-spec) 381.61 626.67 T
0 F
(s, and) 419.7 626.67 T
1 F
(modifiers) 451.23 626.67 T
0 F
(ar) 153 612.67 T
(e passed on to) 162.65 612.67 T
4 9.5 Q
(define class) 234.35 612.67 T
0 11 Q
( unchanged. In ef) 302.74 612.67 T
(fect, it expands to:) 386.92 612.67 T
4 9 Q
(define class) 153 592 T
6 F
(name) 223.2 592 T
4 F
( \050) 244.7 592 T
6 F
(super) 255.5 592 T
(classes) 276.84 592 T
4 F
(\051) 304.82 592 T
6 F
(slot-spec) 163.8 581 T
4 F
(; ...) 199.79 581 T
(end class;) 153 570 T
0 11 Q
(In terms of C,) 153 549.67 T
4 9.5 Q
(define) 221.9 549.67 T
(C-subtype) 258.85 549.67 T
0 11 Q
( can be thought of as implementing a) 310.15 549.67 T
-0.19 (str) 153 535.67 P
-0.19 (ongly typed version of) 165.4 535.67 P
4 9.5 Q
-0.41 (typedef) 277.53 535.67 P
0 11 Q
-0.19 ( because a new designator class is gen-) 317.43 535.67 P
(erated that Dylan\325s type system can distinguish fr) 153 521.67 T
(om the designator) 394.45 521.67 T
-0.21 (class on which it was based. As well as inheriting fr) 153 507.67 P
-0.21 (om an existing desig-) 401.02 507.67 P
(nator class, other Dylan classes can be mixed in too.) 153 493.67 T
(The optional) 153 473.67 T
1 F
(type-options) 217.43 473.67 T
0 F
(must be a pr) 275.17 473.67 T
(operty list. The) 335.62 473.67 T
4 9.5 Q
(c-name:) 411.62 473.67 T
0 11 Q
( keywor) 451.52 473.67 T
(d) 491.1 473.67 T
(is r) 153 459.67 T
(ecognized, allowing the original C name of the type designated by) 167.76 459.67 T
(the class to be documented. The) 153 445.67 T
4 9.5 Q
(pointer-type-name:) 310.98 445.67 T
0 11 Q
(keywor) 419.28 445.67 T
(d option) 456.11 445.67 T
(can be used to name the designator for pointers to) 153 431.67 T
1 F
(name) 399.16 431.67 T
0 F
(.) 422.99 431.67 T
(Some example C declarations:) 153 411.67 T
4 9 Q
(typedef void *Handle;) 153 391 T
(typedef Handle WindowHandle;) 153 380 T
(typedef Handle StreamHandle;) 153 369 T
(extern WindowHandle CurrentWindow \050void\051;) 153 350 T
(extern StreamHandle CurrentStream \050void\051;) 153 339 T
0 11 Q
(Example FFI de\336nitions:) 153 318.67 T
4 9 Q
(define C-subtype <Handle> \050<void*>\051 end;) 153 298 T
(define C-subtype <WindowHandle> \050<Handle>\051 end;) 153 287 T
(define C-subtype <StreamHandle> \050<Handle>\051 end;) 153 276 T
(define C-function CurrentWindow) 153 257 T
(result value :: <WindowHandle>;) 163.8 246 T
(c-name: "CurrentWindow";) 163.8 235 T
(end C-function;) 153 224 T
(define C-function CurrentStream) 153 205 T
(result value :: <StreamHandle>;) 163.8 194 T
(c-name: "CurrentStream";) 163.8 183 T
(end C-function;) 153 172 T
0 11 Q
(Example transactions:) 153 151.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.26/DEST FmPD2
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "26" 30
%%Page: "27" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.6) 461.87 677.67 T
(Defining types) 483.25 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(27) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 F
0 X
(? <void*> == <WindowHandle> | <WindowHandle> ==) 135 642 T
(<StreamHandle>;) 216 631 T
(#f) 135 620 T
(? define variable *cw* = CurrentWindow\050\051;) 135 601 T
(// Defined *cw*) 135 590 T
(? *cw*) 135 571 T
({<WindowHandle> #xff5400}) 135 560 T
(? define variable *cs* = CurrentStream\050\051;) 135 541 T
(// Defined *cs*) 135 530 T
(? *cs*) 135 511 T
({<StreamHandle> #xff6400}) 135 500 T
(? instance?\050*cs*, <WindowHandle>\051 |) 135 481 T
(instance?\050*cw*, <StreamHandle>\051;) 199.8 470 T
(#f) 135 459 T
0 11 Q
(The following example uses the ability to specify extra super) 135 438.67 T
(classes to) 429.45 438.67 T
(place a type beneath an abstract class.) 135 424.67 T
(Example C declarations:) 135 404.67 T
4 9 Q
(struct _Matrix {) 135 384 T
(int rank;) 145.8 373 T
(int *dimensions;) 145.8 362 T
(int *values;) 145.8 351 T
(};) 135 340 T
(typedef struct _Matrix *Matrix;) 135 321 T
(extern Matrix MatrixAdd \050Matrix m, Matrix n\051;) 135 302 T
0 11 Q
(Example FFI de\336nitions:) 135 281.67 T
4 9 Q
(define C-struct <_Matrix-struct>) 135 261 T
(slot rank :: <C-int>;) 145.8 250 T
(slot dimensions :: <C-int*>;) 145.8 239 T
(slot values :: <C-int*>;) 145.8 228 T
(pointer-type-name: <_Matrix-struct*>;) 145.8 217 T
(end C-struct;) 135 206 T
(define C-subtype <Matrix> \050<_Matrix-struct*>, <number>\051 end;) 135 187 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.27/DEST FmPD2
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "27" 31
%%Page: "28" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(28) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 F
0 X
(define C-function MatrixAdd) 153 642 T
(parameter m :: <Matrix>;) 163.8 631 T
(parameter n :: <Matrix>;) 163.8 620 T
(result value :: <Matrix>;) 163.8 609 T
(c-name: \322MatrixAdd\323;) 163.8 598 T
(end C-function;) 153 587 T
(define method \134+ \050m1 :: <Matrix>, m2 :: <Matrix>\051 =>) 153 568 T
(\050r :: <Matrix>\051) 169.2 557 T
(MatrixAdd\050m1, m2\051) 163.8 546 T
(end method;) 153 535 T
3 13 Q
(1.6.2  De\336ning specializ) 126 503.33 T
(ed designator c) 245.79 503.33 T
(lasses) 324.39 503.33 T
3 12 Q
(de\336ne C-mapped-subtype) 126 469 T
1 11 Q
(De\336nition macr) 428.83 469.67 T
(o) 499.12 469.67 T
4 9 Q
(define) 153 449 T
6 F
(modi\336ers) 190.8 449 T
4 F
( C-mapped-subtype) 228.29 449 T
6 F
(type-name) 325.49 449 T
4 F
( \050) 368 449 T
6 F
(super) 378.8 449 T
(classes) 400.14 449 T
4 F
(\051) 428.12 449 T
([pointer-type-name) 163.8 438 T
6 F
(pointer-type-name) 266.4 438 T
4 F
([,) 341.42 438 T
(pointer-value-setter:) 255.6 427 T
6 F
(boolean-value) 374.4 427 T
4 F
(];]) 431.75 427 T
([map) 163.8 416 T
6 F
(high-level-type) 190.8 416 T
4 F
([,) 262.6 416 T
(import-function:) 278.8 416 T
6 F
(import-fun) 370.6 416 T
4 F
(]) 414.61 416 T
([,) 261 405 T
(export-function:) 277.2 405 T
6 F
(export-fun) 369 405 T
4 F
(];]) 411.01 405 T
([import-map) 163.8 394 T
6 F
(high-level-type) 228.6 394 T
4 F
(,) 289.6 394 T
(import-function:) 169.2 383 T
6 F
(import-function) 261 383 T
4 F
(;]) 325.51 383 T
([export-map) 163.8 372 T
6 F
(high-level-type) 228.6 372 T
4 F
(,) 289.6 372 T
(export-function:) 169.2 361 T
6 F
(export-function) 261 361 T
4 F
(;]) 323.51 361 T
(end) 153 350 T
0 11 Q
-0.29 (The) 153 329.67 P
1 F
-0.29 (modi\336ers) 173.87 329.67 P
0 F
-0.29 ( may be) 214.51 329.67 P
4 9.5 Q
-0.61 (sealed) 254.57 329.67 P
0 11 Q
-0.29 ( or) 288.77 329.67 P
4 9.5 Q
-0.61 (open) 304.03 329.67 P
0 11 Q
-0.29 (. \050The default is) 326.83 329.67 P
4 9.5 Q
-0.61 (sealed) 403.92 329.67 P
0 11 Q
-0.29 (.\051 Their ef) 438.12 329.67 P
-0.29 (fect) 484.14 329.67 P
(on the class de\336ned is the same as the similar modi\336ers on an or) 153 315.67 T
(dinary) 464.92 315.67 T
(class.) 153 301.67 T
(The possible combinations ar) 153 281.67 T
(e, a map clause, an import-map clause, an) 294.66 281.67 T
(export-map clause, or both an import-map and an export-map clause.) 153 267.67 T
(Any other combinations ar) 153 253.67 T
(e illegal.) 283.23 253.67 T
-0.31 (The) 153 233.67 P
4 9.5 Q
-0.65 (import-map) 173.85 233.67 P
0 11 Q
-0.31 ( clause speci\336es that a type conversion takes place when) 230.85 233.67 P
1 F
(type-name) 153 219.67 T
0 F
( is used as a designator for values ar) 199.44 219.67 T
(e imported fr) 375.21 219.67 T
(om C to) 439.24 219.67 T
(Dylan. The conversion is accomplished by calling the) 153 205.67 T
1 F
(import-function) 414.17 205.67 T
0 F
( on) 485.27 205.67 T
(the imported value. This call is automatically inserted into function) 153 191.67 T
(wrappers, str) 153 177.67 T
(uctur) 217.53 177.67 T
(e member getters, pointer) 243.41 177.67 T
(-value der) 368.13 177.67 T
(efer) 417.49 177.67 T
(ence func-) 435.84 177.67 T
-0.38 (tions and so on by the C-FFI. The) 153 163.67 P
1 F
-0.38 (high-level-type) 313.53 163.67 P
0 F
-0.38 ( is used as the Dylan type) 379.53 163.67 P
-0.46 (speci\336er for the appr) 153 149.67 P
-0.46 (opriate parameter or r) 252.91 149.67 P
-0.46 (esult in any wrapper function) 358.94 149.67 P
(or) 153 135.67 T
4 9.5 Q
(c-struct) 166.1 135.67 T
0 11 Q
( accessors which uses the de\336ned class. The) 211.7 135.67 T
4 9.5 Q
(export-map) 426.24 135.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.28/DEST FmPD2
191 599/I4.1.1036505 FmPA
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "28" 32
%%Page: "29" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.6) 461.87 677.67 T
(Defining types) 483.25 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(29) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
(clause speci\336es a similar type conversion for exported values. The) 135 640.67 T
1 F
(high-) 458.31 640.67 T
(level-type) 135 626.67 T
0 F
(must in either case name an instantiable Dylan type.) 180.53 626.67 T
4 9 Q
(map <type-c>;) 145.8 606 T
0 11 Q
(is equivalent to:) 135 585.67 T
4 9 Q
(import-map <type-c>;) 145.8 565 T
(export-map <type-c>;) 145.8 554 T
0 11 Q
(The import and export functions ar) 135 533.67 T
(e monadic functions whose single) 305.83 533.67 T
-0.36 (ar) 135 519.67 P
-0.36 (gument is the appr) 144.65 519.67 P
-0.36 (opriate low-level value for export functions and the) 235.52 519.67 P
(appr) 135 505.67 T
(opriate Dylan type for import functions. Any mapped subtype) 157.87 505.67 T
(which speci\336es an import-map must specify an) 135 491.67 T
1 F
(import-function) 367.29 491.67 T
0 F
(. Any) 438.38 491.67 T
(mapped subtype which speci\336es an export-map must specify an) 135 477.67 T
1 F
(export-) 450.2 477.67 T
(function) 135 463.67 T
0 F
(.) 172.49 463.67 T
(Map boolean example:) 135 443.67 T
4 9 Q
(bool-header.h:) 135 423 T
(typedef int bool;) 135 404 T
(bool bool_function \050bool b\051;) 135 385 T
(void bool_pointer_function \050bool *b\051;) 135 374 T
(//eof) 135 355 T
(Module: my-module) 135 336 T
(define C-mapped-subtype <bool> \050<C-int>\051) 135 317 T
(pointer-type <bool*>;) 145.8 306 T
(map <boolean>,) 145.8 295 T
(export-function:) 156.6 284 T
(method \050v :: <boolean>\051 => \050result :: <integer>\051) 167.4 273 T
(as\050<integer>, if\050v\051 1 else 0 end if\051 end,) 178.2 262 T
(import-function:) 156.6 251 T
(method \050v :: <integer>\051 => \050result :: <boolean>\051) 167.4 240 T
(~zero?\050v\051 end;) 172.8 229 T
(end;) 135 218 T
(//end module) 135 199 T
0 11 Q
-0.17 (Mapped string example: an alternate version of C-string which automat-) 135 178.67 P
(ically converts instances of) 135 164.67 T
4 9.5 Q
(<byte-string>) 267.71 164.67 T
0 11 Q
( to instances of) 341.82 164.67 T
4 9.5 Q
(<C-example-) 416.65 164.67 T
(string>) 135 150.67 T
0 11 Q
( on export.) 174.9 150.67 T
4 9 Q
(string-header.h) 135 130 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.29/DEST FmPD2
135 280/I4.1.1057797 FmPA
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "29" 33
%%Page: "30" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(30) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 F
0 X
(typedef char *string;) 153 642 T
(string string-filter\050string s\051;) 153 623 T
(void string-modifier\050string *s\051;) 153 612 T
(//eof) 153 593 T
(module: my-module) 153 574 T
(define C-mapped-subtype <C-example-string> \050<C-char*>,) 153 555 T
(<string>\051) 390.6 544 T
(pointer-type <c-string*>;) 163.8 533 T
(export-map type-union\050<byte-string>,) 163.8 522 T
(<C-example-string>\051,) 282.6 511 T
(export-function: c-string-exporter;) 163.8 500 T
(end;) 153 489 T
(define method c-string-exporter) 153 470 T
(\050s :: <byte-string>\051 => \050result :: <C-char*>\051) 163.8 459 T
(as\050<C-example-string>, s\051) 174.6 448 T
(end;) 153 437 T
(define method c-string-exporter) 153 418 T
(\050s :: <C-example-string>\051 => \050result :: <C-example-string>\051) 163.8 407 T
(s) 174.6 396 T
(end;) 153 385 T
(//end module) 153 366 T
0 11 Q
(It is possible to de\336ne an or) 153 345.67 T
(dinary subtype of a mapped supertype. The) 286.32 345.67 T
-0.16 (mapping characteristic of the subtype is inherited fr) 153 331.67 P
-0.16 (om the supertype. It) 403.51 331.67 P
(is also possible to de\336ne a mapped subtype of a mapped supertype.) 153 317.67 T
(When the subtype and supertype both specify an export function, the) 153 303.67 T
(export functions of the subtype and the supertype ar) 153 289.67 T
(e composed with) 408.45 289.67 T
(the subtype\325s export function applied to the r) 153 275.67 T
(esult of the supertype\325s) 372.57 275.67 T
(export function. Import functions of a mapped subtype and supertype) 153 261.67 T
(ar) 153 247.67 T
(e similarly composed. Mapping characteristics ar) 162.65 247.67 T
(e inherited fr) 400.84 247.67 T
(om the) 463.82 247.67 T
(supertype wher) 153 233.67 T
(e the subtype does not de\336ne them. \050Y) 229.85 233.67 T
(ou can think of) 415.26 233.67 T
(this as composition with identity when either the supertype or subtype) 153 219.67 T
(fails to specify an import or export function.\051 This shadowing is only) 153 205.67 T
(useful when import and export maps ar) 153 191.67 T
(e de\336ned separately) 346.52 191.67 T
(. Her) 443.17 191.67 T
(e is an) 467.24 191.67 T
(example of a mapped subtypes which adds an import map to the) 153 177.67 T
(mapped version of) 153 163.67 T
4 9.5 Q
(<C-example-string>) 247.45 163.67 T
0 11 Q
( de\336ned above.) 350.05 163.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.30/DEST FmPD2
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "30" 34
%%Page: "31" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.6) 461.87 677.67 T
(Defining types) 483.25 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(31) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 F
0 X
(define C-mapped-subtype <other-string>) 135 642 T
(\050<C-example-string>\051) 156.6 631 T
(pointer-type <other-string*>;) 145.8 620 T
(import-map <byte-string>,) 145.8 609 T
(import-function: method \050v :: <byte-string>\051 =>) 156.6 598 T
(\050result :: <C-example-string>\051) 167.4 587 T
(as\050<C-example-string>, v\051) 178.2 576 T
(end method;) 167.4 565 T
(end;) 135 554 T
0 11 Q
(The import signatur) 135 533.67 T
(e is) 232.62 533.67 T
4 9.5 Q
(<byte-string>) 251.26 533.67 T
0 11 Q
(. The export signatur) 325.36 533.67 T
(e is inher-) 426.52 533.67 T
(ited fr) 135 519.67 T
(om) 164.34 519.67 T
4 9.5 Q
(<C-example-string>) 182.81 519.67 T
(type-union\050<byte-string>,) 288.16 519.67 T
(<C-exam-) 433.41 519.67 T
(ple-string>\051) 135 505.67 T
0 11 Q
(. For a example involving composition of mapped types) 203.4 505.67 T
(consider the following \050hypothetical\051 de\336nitions of) 135 491.67 T
4 9.5 Q
(<C-raw-int>) 385.08 491.67 T
0 11 Q
(,) 447.79 491.67 T
4 9.5 Q
(<C-) 453.29 491.67 T
(mapped-int>) 135 477.67 T
0 11 Q
( and) 197.7 477.67 T
4 9.5 Q
(<bool>) 221.82 477.67 T
0 11 Q
(. The) 256.02 477.67 T
4 9.5 Q
(<C-raw-int>) 282.69 477.67 T
0 11 Q
( class is a primitive which) 345.39 477.67 T
(r) 135 463.67 T
(eturns and accepts instances of) 139.15 463.67 T
4 9.5 Q
(<machine-word>) 292.06 463.67 T
0 11 Q
(. The) 371.86 463.67 T
4 9.5 Q
(<C-mapped-int>) 398.52 463.67 T
0 11 Q
(class is a mapped subtype which converts the instances of) 135 449.67 T
4 9.5 Q
(<machine-) 419.1 449.67 T
(word>) 135 435.67 T
0 11 Q
( to instances of) 163.5 435.67 T
4 9.5 Q
(<integer>) 238.33 435.67 T
0 11 Q
(. The) 289.63 435.67 T
4 9.5 Q
(<bool>) 316.3 435.67 T
0 11 Q
( class is a mapped subtype) 350.5 435.67 T
(of) 135 421.67 T
4 9.5 Q
(<C-mapped-int>) 147.42 421.67 T
0 11 Q
( which converts to and fr) 227.22 421.67 T
(om) 348.43 421.67 T
4 9.5 Q
(<boolean>) 366.9 421.67 T
0 11 Q
(.) 418.2 421.67 T
4 9 Q
(define C-mapped-subtype <C-mapped-int> \050<C-raw-int>\051) 135 401 T
(pointer-type <bool*>;) 145.8 390 T
(map <boolean>,) 145.8 379 T
(export-function:) 156.6 368 T
(method \050v :: <integer>\051 =>) 167.4 357 T
(\050result :: <machine-word>\051) 178.2 346 T
(as\050<machine-word>, v\051 end,) 189 335 T
(import-function:) 156.6 324 T
(method \050v :: <machine-word>\051 =>) 167.4 313 T
(\050result :: <integer>\051) 178.2 302 T
(as\050<integer>, v\051 end;) 189 291 T
(end;) 135 280 T
(define C-mapped-subtype <bool> \050<C-mapped-int>\051) 135 261 T
(pointer-type <bool*>;) 145.8 250 T
(map <boolean>,) 145.8 239 T
(export-function:) 156.6 228 T
(method \050v :: <boolean>\051 => \050result :: <integer>\051) 167.4 217 T
(if\050v\051 1 else 0 end if\051 end,) 178.2 206 T
(import-function:) 156.6 195 T
(method \050v :: <integer>\051 => \050result :: <boolean>\051) 167.4 184 T
(~zero?\050v\051 end;) 178.2 173 T
(end;) 135 162 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.31/DEST FmPD2
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "31" 35
%%Page: "32" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(32) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 13 Q
0 X
(1.6.3  Describing structure types) 126 639.33 T
3 12 Q
(de\336ne C-struct) 126 605 T
1 11 Q
(De\336nition macr) 428.83 605.67 T
(o) 499.12 605.67 T
4 9 Q
(define C-struct) 153 585 T
6 F
(name) 239.4 585 T
4 F
([) 163.8 574 T
6 F
(slot-spec) 169.2 574 T
4 F
(; ...] [;]) 205.19 574 T
([) 163.8 563 T
6 F
(type-options) 169.2 563 T
4 F
(] [;]) 220.72 563 T
(end [C-struct] [) 153 552 T
6 F
(name) 239.4 552 T
4 F
(]) 260.9 552 T
0 11 Q
(The) 153 531.67 T
4 9.5 Q
(define C-struct) 174.16 531.67 T
0 11 Q
( macr) 259.66 531.67 T
(o describes C\325s aggr) 286.66 531.67 T
(egate str) 383.41 531.67 T
(uctur) 424.41 531.67 T
(es. The) 450.29 531.67 T
1 F
(name) 153 517.67 T
0 F
(is de\336ned to be a designator class encapsulating the) 179.59 517.67 T
1 F
(value) 433.63 517.67 T
0 F
( of a) 457.47 517.67 T
-0.06 (str) 153 503.67 P
-0.06 (uctur) 165.51 503.67 P
-0.06 (e,) 191.39 503.67 P
1 F
-0.06 (not) 202.1 503.67 P
0 F
-0.06 ( a pointer to the str) 216.76 503.67 P
-0.06 (uctur) 308.46 503.67 P
-0.06 (e. This is signi\336cant because many) 334.35 503.67 P
(of the pr) 153 489.67 T
(otocols associated with str) 194.18 489.67 T
(uctur) 321.65 489.67 T
(es work only on pointers to) 347.54 489.67 T
(str) 153 475.67 T
(uctur) 165.51 475.67 T
(es \321 pointers to str) 191.39 475.67 T
(uctur) 285.51 475.67 T
(es being the most common form and) 311.39 475.67 T
(the form closest to Dylan\325s object model. The new designator class is) 153 461.67 T
(de\336ned to be a subclass of) 153 447.67 T
4 9.5 Q
(<C-struct>) 282.94 447.67 T
0 11 Q
(.) 339.94 447.67 T
(Once de\336ned, a str) 153 427.67 T
(uctur) 244.24 427.67 T
(e-designating class is most likely to be used as) 270.13 427.67 T
(the basis for a pointer type de\336nition in terms of which most further) 153 413.67 T
(transactions will take place. Str) 153 399.67 T
(uctur) 303.82 399.67 T
(e-designating classes ar) 329.7 399.67 T
(e abstract) 443.81 399.67 T
-0.29 (and cannot have dir) 153 385.67 P
-0.29 (ect instances. Accessor methods de\336ned for the slots) 249.23 385.67 P
(of the str) 153 371.67 T
(uctur) 195.93 371.67 T
(e ar) 221.82 371.67 T
(e specialized on the str) 239.48 371.67 T
(uctur) 349.94 371.67 T
(e designator) 375.83 371.67 T
(\325s pointer) 436.47 371.67 T
(-) 482.16 371.67 T
(type. However) 153 357.67 T
(, the class itself may be needed to specify an in-line str) 224.7 357.67 T
(uc-) 487.53 357.67 T
(tur) 153 343.67 T
(e in another str) 167.37 343.67 T
(uctur) 240.51 343.67 T
(e, union, or array) 266.39 343.67 T
(, or a value-passed str) 348.99 343.67 T
(uctur) 455.01 343.67 T
(e) 480.89 343.67 T
(ar) 153 329.67 T
(gument or r) 162.65 329.67 T
(esult in a C function.) 220.36 329.67 T
(A) 153 309.67 T
1 F
(slot-spec) 164.31 309.67 T
0 F
( has the following syntax:) 202.39 309.67 T
4 9 Q
([) 153 289 T
6 F
(slot-adjective) 158.4 289 T
4 F
(] slot) 213.89 289 T
6 F
(getter-name) 251.69 289 T
4 F
( ::) 299.69 289 T
6 F
(c-type) 321.29 289 T
4 F
( #key) 346.29 289 T
6 F
(setter) 378.69 289 T
(addr) 406.58 289 T
(ess-getter) 424.93 289 T
(c-name) 468.82 289 T
(dimensions) 379.8 278 T
(width) 430.7 278 T
0 11 Q
(The) 153 257.67 T
1 F
(slot-adjective) 174.16 257.67 T
0 F
( can be either) 232.41 257.67 T
4 9.5 Q
(array) 299.62 257.67 T
0 11 Q
( or) 328.12 257.67 T
4 9.5 Q
(bitfield) 343.97 257.67 T
0 11 Q
(. The) 389.57 257.67 T
4 9.5 Q
(array) 416.23 257.67 T
0 11 Q
( slot adjec-) 444.73 257.67 T
(tive indicates that the slot is r) 153 243.67 T
(epeated and the) 295 243.67 T
1 F
(dimensions) 375.35 243.67 T
0 F
( option is used) 425.48 243.67 T
(to indicate how many r) 153 229.67 T
(epetitions ar) 265.82 229.67 T
(e de\336ned, and how it is accessed.) 326.01 229.67 T
(The) 153 215.67 T
4 9.5 Q
(bitfield) 174.16 215.67 T
0 11 Q
( slot adjective indicates that the slot is r) 219.76 215.67 T
(eally a bit\336eld. If) 409.67 215.67 T
4 9.5 Q
(bitfield) 153 201.67 T
0 11 Q
( is given then the) 198.6 201.67 T
1 F
(width) 284.33 201.67 T
0 F
( option must also be given. The) 310 201.67 T
1 F
(c-type) 464.74 201.67 T
0 F
(given for a) 153 187.67 T
4 9.5 Q
(bitfield) 207.97 187.67 T
0 11 Q
( slot must be a subclass of) 253.57 187.67 T
4 9.5 Q
(<C-integer>) 381.68 187.67 T
0 11 Q
(. The) 444.38 187.67 T
1 F
(c-type) 471.05 187.67 T
0 F
-0.44 (for a) 153 173.67 P
4 9.5 Q
-0.92 (bitfield) 177.13 173.67 P
0 11 Q
-0.44 ( slot indicates how the value is interpr) 222.73 173.67 P
-0.44 (eted in Dylan by the) 404.83 173.67 P
(slot accessor) 153 159.67 T
(. A slot may not be speci\336ed as both an) 212.61 159.67 T
4 9.5 Q
(array) 404.97 159.67 T
0 11 Q
( and a) 433.47 159.67 T
4 9.5 Q
(bit-) 465.84 159.67 T
(field) 153 145.67 T
0 11 Q
(.) 181.5 145.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.32/DEST FmPD2
191 735/I4.1.1039516 FmPA
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "32" 36
%%Page: "33" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.6) 461.87 677.67 T
(Defining types) 483.25 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(33) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
(The) 135 640.67 T
1 F
(getter-name) 156.16 640.67 T
0 F
(keywor) 212.08 640.67 T
(d speci\336es the name of the Dylan function to) 248.9 640.67 T
-0.23 (which the getter method for the str) 135 626.67 P
-0.23 (uctur) 303.07 626.67 P
-0.23 (e slot will be added. The special-) 328.95 626.67 P
(izer of the getter method\325s single ar) 135 612.67 T
(gument will be a designator indicat-) 306.83 612.67 T
(ing a pointer to the str) 135 598.67 T
(uct\325s) 242.74 598.67 T
1 F
(name) 268.32 598.67 T
0 F
(.) 292.16 598.67 T
(The) 135 578.67 T
1 F
(c-type) 156.16 578.67 T
0 F
(speci\336es the \336eld\325s C type, and must be a designator class.) 186 578.67 T
(Unlike Dylan slot speci\336cations, the type declaration her) 135 564.67 T
(e is) 409.74 564.67 T
1 F
(not) 428.37 564.67 T
0 F
(optional.) 135 550.67 T
(The optional) 135 530.67 T
1 F
(setter) 199.43 530.67 T
0 F
(keywor) 226.62 530.67 T
(d speci\336es the generic function to which the) 263.45 530.67 T
(setter method for the str) 135 516.67 T
(uctur) 252.19 516.67 T
(e slot will be added. It defaults to) 278.08 516.67 T
1 F
(getter-) 442.74 516.67 T
(name) 135 502.67 T
4 9.5 Q
(-setter) 158.84 502.67 T
0 11 Q
(. No setter method is de\336ned if the) 197.92 502.67 T
1 F
(setter) 369.26 502.67 T
0 F
( option is) 393.7 502.67 T
4 9.5 Q
(#f) 441.63 502.67 T
0 11 Q
(.) 453.03 502.67 T
(The optional) 135 482.67 T
1 F
(addr) 199.43 482.67 T
(ess-getter) 219.39 482.67 T
0 F
( speci\336es the name of a function that can be) 261.55 482.67 T
(used to r) 135 468.67 T
(eturn a pointer to the data in the member) 177.53 468.67 T
(. It must r) 377.27 468.67 T
(eturn a) 424.31 468.67 T
4 9.5 Q
(<C-) 461.55 468.67 T
(pointer>) 135 454.67 T
0 11 Q
( object that points to a C type. No) 180.6 454.67 T
1 F
(addr) 345.67 454.67 T
(ess-getter) 365.63 454.67 T
0 F
( is de\336ned by) 407.79 454.67 T
(default.) 135 440.67 T
(Y) 135 420.67 T
(ou can use the) 141.32 420.67 T
1 F
(dimensions) 213.57 420.67 T
0 F
( keywor) 263.7 420.67 T
(d only if you used the) 303.28 420.67 T
4 9.5 Q
(array) 412.39 420.67 T
0 11 Q
( slot) 440.89 420.67 T
-0.07 (adjective. This) 135 406.67 P
1 F
-0.07 (dimensions) 207.33 406.67 P
0 F
-0.07 ( value can be either a list of integers or a single) 257.46 406.67 P
(integer) 135 392.67 T
(. The accessor for an array slot is de\336ned to take an extra integer) 168.37 392.67 T
(parameter for each dimension given.) 135 378.67 T
(Y) 135 358.67 T
(ou can use the) 141.32 358.67 T
1 F
(width) 213.57 358.67 T
0 F
( keywor) 239.24 358.67 T
(d option only if you used the) 278.81 358.67 T
4 9.5 Q
(bitfield) 422.48 358.67 T
0 11 Q
(adjective.) 135 344.67 T
(The optional) 135 324.67 T
1 F
(c-name) 199.43 324.67 T
0 F
( keywor) 231.4 324.67 T
(d allows you to document the original C) 270.98 324.67 T
(name of the slot.) 135 310.67 T
(The) 135 290.67 T
1 F
(type-options) 156.16 290.67 T
0 F
( clause is a pr) 211.15 290.67 T
(operty list allowing you to specify pr) 276.43 290.67 T
(oper-) 455.83 290.67 T
(ties of the type as a whole. It accepts the optional keywor) 135 276.67 T
(d) 412.23 276.67 T
1 F
(c-name:) 421.7 276.67 T
0 F
(,) 456.43 276.67 T
(allowing you to document the original C name of the str) 135 262.67 T
(uct to be docu-) 408.21 262.67 T
(mented. The optional keywor) 135 248.67 T
(d) 278.71 248.67 T
4 9.5 Q
(pointer-type-name:) 288.19 248.67 T
0 11 Q
( is also accepted.) 390.79 248.67 T
(When given, the name is bound to the str) 135 234.67 T
(uct pointer type on which the) 335.23 234.67 T
(accessors ar) 135 220.67 T
(e de\336ned.) 192.28 220.67 T
(The type option) 135 200.67 T
4 9.5 Q
(pack:) 215.06 200.67 T
1 11 Q
( n) 243.56 200.67 T
0 F
( indicates that the str) 252.42 200.67 T
(uct has the packing seman-) 353.69 200.67 T
(tics of Micr) 135 186.67 T
(osoft\325s) 189.14 186.67 T
4 9.5 Q
(#pragma) 223.54 186.67 T
(pack\050) 266.19 186.67 T
1 11 Q
(n) 294.69 186.67 T
4 9.5 Q
(\051) 300.8 186.67 T
0 11 Q
(.) 306.51 186.67 T
(Example C declaration:) 135 166.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.33/DEST FmPD2
316 530/I4.1.1057806 FmPA
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "33" 37
%%Page: "34" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(34) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 F
0 X
(struct Point {) 153 642 T
(unsigned short x;) 163.8 631 T
(unsigned short y;) 163.8 620 T
(};) 153 609 T
(Point *OnePoint\050\051;   /* Returns a pointer to a Point */) 153 590 T
(Point *PointArray\050\051; /* Returns a Point array */) 153 579 T
0 11 Q
(Example FFI de\336nition:) 153 558.67 T
4 9 Q
(define C-struct <Point>) 153 538 T
(slot x :: <C-unsigned-short>;) 163.8 527 T
(slot y :: <C-unsigned-short>;) 163.8 516 T
(pointer-type-name: <Point*>;) 163.8 505 T
(end C-struct;) 153 494 T
(define C-function one-point) 153 475 T
(result point :: <Point*>;) 163.8 464 T
(c-name: \322OnePoint\323;) 163.8 453 T
(end C-function;) 153 442 T
(define C-function point-array) 153 423 T
(result array :: <Point*>;) 163.8 412 T
(c-name: \322PointArray\323;) 163.8 401 T
(end C-function;) 153 390 T
0 11 Q
(Example transactions:) 153 369.67 T
4 9 Q
(? define variable p = one-point\050\051;) 153 349 T
(// Defined p.) 153 338 T
(? values\050p.x, p.y\051;) 153 319 T
(100) 153 308 T
(50) 153 297 T
(? define variable array = point-array\050\051;) 153 278 T
(// Defined array.) 153 267 T
(? array[5].object-class; // implicit conversion to) 153 248 T
(// the pointer type) 288 237 T
({<Point> pointer #xff5e00}) 153 226 T
(? begin array[5].x := 10; array[5].y := 20 end;) 153 207 T
(20) 153 196 T
(? values\050array[5].x, array[5].y\051) 153 177 T
(10) 153 166 T
(20) 153 155 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.34/DEST FmPD2
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "34" 38
%%Page: "35" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.6) 461.87 677.67 T
(Defining types) 483.25 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(35) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 13 Q
0 X
(1.6.4  Describing union types) 108 639.33 T
3 12 Q
(de\336ne C-union) 108 605 T
1 11 Q
(De\336nition macr) 410.83 605.67 T
(o) 481.12 605.67 T
4 9 Q
(define C-union) 135 585 T
6 F
(name) 216 585 T
4 F
([) 145.8 574 T
6 F
(slot-spec) 151.2 574 T
4 F
(; ...] [;]) 187.19 574 T
([) 145.8 563 T
6 F
(type-options) 151.2 563 T
4 F
(] [;]) 202.72 563 T
(end [C-union] [) 135 552 T
6 F
(name) 216 552 T
4 F
(]) 237.5 552 T
0 11 Q
(Describes C union types to the C-FFI. The syntax for the macr) 135 531.67 T
(o and its) 433.7 531.67 T
(use ar) 135 517.67 T
(e similar to) 163.96 517.67 T
4 9.5 Q
(define) 220.9 517.67 T
(c-struct) 257.85 517.67 T
0 11 Q
( except that bit\336eld slots ar) 303.45 517.67 T
(e not) 434.05 517.67 T
(allowed.) 135 503.67 T
(Each of the slots in a union is laid out in memory on top of one another) 135 483.67 T
(just as in C\325s) 135 469.67 T
4 9.5 Q
(union) 198.74 469.67 T
0 11 Q
( constr) 227.24 469.67 T
(uct.) 259.79 469.67 T
(Example C declaration:) 135 449.67 T
4 9 Q
(union Num {) 135 429 T
(int) 145.8 418 T
(int_value;) 183.6 418 T
(double double_value;) 145.8 407 T
(};) 135 396 T
(Num *OneNum\050\051;   /* Returns a pointer to a Num */) 135 377 T
(Num *NumArray\050\051; /* Returns a Num array */) 135 366 T
0 11 Q
(Example FFI de\336nition:) 135 345.67 T
4 9 Q
(define C-union <Num>) 135 325 T
(slot int-value    :: <C-int>;) 145.8 314 T
(slot double-value :: <C-double>;) 145.8 303 T
(pointer-type-name: <Num*>;) 145.8 292 T
(end C-union;) 135 281 T
(define C-function one-num) 135 262 T
(result num :: <Num*>;) 145.8 251 T
(c-name: \322OneNum\323;) 145.8 240 T
(end C-function;) 135 229 T
(define C-function num-array) 135 210 T
(result array :: <Num*>;) 145.8 199 T
(c-name: \322NumArray\323;) 145.8 188 T
(end C-function;) 135 177 T
0 11 Q
(Example transactions:) 135 156.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.35/DEST FmPD2
173 735/I4.1.1041646 FmPA
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "35" 39
%%Page: "36" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(36) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 F
0 X
(? define variable n = one-num\050\051;) 153 642 T
(// Defined n.) 153 631 T
(? values\050p.int-value, p.double-value\051;) 153 612 T
(154541) 153 601 T
(92832.e23 // or something) 153 590 T
5 F
(?) 153 571 T
4 F
(define variable array = num-array\050\051;) 163.8 571 T
(// Defined array.) 153 560 T
5 F
(?) 153 541 T
4 F
( array[5].object-class; // implicit conversion to) 158.4 541 T
(// the pointer type) 288 530 T
({<Num> pointer #xff5e00}) 153 519 T
5 F
(?) 153 500 T
4 F
( array[5].int-value := 0;) 158.4 500 T
(0) 153 489 T
5 F
(?) 153 470 T
4 F
( array[5].double-value;) 158.4 470 T
(11232e-12 // or a different something) 153 459 T
3 16 Q
(1.7  Functions) 126 425.33 T
126 569/G4.887470 FmPA
0 11 Q
(This section describes the C FFI macr) 126 404.67 T
(os that allow C functions to be made) 305.86 404.67 T
(available to Dylan and Dylan functions available to C.) 126 390.67 T
3 13 Q
(1.7.1  Function types) 126 357.33 T
0 11 Q
(This section describes classes that designate C function types and how to con-) 126 337.67 T
(str) 126 323.67 T
(uct them.) 138.51 323.67 T
3 12 Q
(<C-function-pointer>) 126 289 T
1 11 Q
(Open abstract class) 417.85 289.67 T
0 F
(The super) 153 267.67 T
(class of all classes that designate a C function type. It is a sub-) 201.49 267.67 T
(class of) 153 253.67 T
4 9.5 Q
(<C-pointer>) 191.08 253.67 T
0 11 Q
(. The Dylan variable bound by) 253.78 253.67 T
4 9.5 Q
(define) 404.54 253.67 T
(c-callable) 441.49 253.67 T
0 11 Q
(is of this type.) 153 239.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.36/DEST FmPD2
126 441/I4.1.887474 FmPA
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "36" 40
%%Page: "37" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.7) 479.91 677.67 T
(Functions) 501.29 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(37) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 13 Q
0 X
(1.7.2  Describing C functions to Dylan) 108 639.33 T
3 12 Q
(de\336ne C-function) 108 605 T
1 11 Q
(De\336nition macr) 410.83 605.67 T
(o) 481.12 605.67 T
4 9 Q
(define C-function) 135 585 T
6 F
(name) 232.2 585 T
4 F
([) 145.8 574 T
6 F
(parameter-spec) 151.2 574 T
4 F
(; ...]) 212.7 574 T
([) 145.8 563 T
6 F
(r) 151.2 563 T
(esult-spec) 154.54 563 T
4 F
(;]) 194.53 563 T
([) 145.8 552 T
6 F
(function-option) 151.2 552 T
4 F
(, \311; \311]) 214.72 552 T
(end [C-function] [) 135 541 T
6 F
(name) 232.2 541 T
4 F
(]) 253.7 541 T
0 11 Q
-0.21 (Describes a C function to the C-FFI. In or) 135 520.67 P
-0.21 (der for a C function to be called) 331.54 520.67 P
(corr) 135 506.67 T
(ectly by Dylan, the same information about the function must be) 154.38 506.67 T
(given as is needed by C callers, typically pr) 135 492.67 T
(ovided by) 344.87 492.67 T
4 9.5 Q
(extern) 396.7 492.67 T
0 11 Q
( declara-) 430.9 492.67 T
(tions for the function in a C header \336le: the function\325s name and the) 135 478.67 T
(types of its parameters and r) 135 464.67 T
(esults.) 273.69 464.67 T
(The r) 135 444.67 T
(esult of pr) 160.31 444.67 T
(ocessing a) 209.59 444.67 T
4 9.5 Q
(define) 261.8 444.67 T
(C-function) 298.75 444.67 T
0 11 Q
( de\336nition is a Dylan func-) 355.75 444.67 T
(tion which is bound to) 135 430.67 T
1 F
(name) 247.31 430.67 T
0 F
(. This function takes Dylan objects as ar) 271.15 430.67 T
(gu-) 462.68 430.67 T
-0.26 (ments, converting them to their C r) 135 416.67 P
-0.26 (epr) 304.04 416.67 P
-0.26 (esentations accor) 320.06 416.67 P
-0.26 (ding to the types) 402.52 416.67 P
(declar) 135 402.67 T
(ed for the parameters of the C function befor) 164.72 402.67 T
(e calling the C func-) 381.45 402.67 T
(tion with them. If the C function r) 135 388.67 T
(eturns r) 298.88 388.67 T
(esults, these r) 336.67 388.67 T
(esults ar) 402.28 388.67 T
(e con-) 442.69 388.67 T
-0.09 (verted to Dylan r) 135 374.67 P
-0.09 (epr) 217.86 374.67 P
-0.09 (esentations accor) 233.89 374.67 P
-0.09 (ding to the declar) 316.52 374.67 P
-0.09 (ed types of those) 401.52 374.67 P
(r) 135 360.67 T
(esults befor) 139.15 360.67 T
(e being r) 195.08 360.67 T
(eturned to the Dylan caller of the function. By) 237.07 360.67 T
(default the function cr) 135 346.67 T
(eated is a raw method, not a generic function. A) 242.89 346.67 T
(generic function method can de\336ned by using the) 135 332.67 T
4 9.5 Q
(generic-function-) 379.26 332.67 T
(method:) 135 318.67 T
0 11 Q
( option.) 174.9 318.67 T
(Either the) 135 298.67 T
1 F
(c-name) 185.28 298.67 T
0 F
(function option must be supplied, or the) 220.01 298.67 T
4 9.5 Q
(indirect:) 419.06 298.67 T
0 11 Q
(option must be supplied with a value other than) 135 284.67 T
4 9.5 Q
(#f) 372.6 284.67 T
0 11 Q
(, but not both.) 384 284.67 T
(A) 135 264.67 T
1 F
(parameter-spec) 146.31 264.67 T
0 F
(has the following syntax:) 215.86 264.67 T
4 9 Q
([) 135 244 T
6 F
(adjectives) 140.4 244 T
4 13 Q
(]) 180.89 244 T
4 9 Q
(parameter [) 196.49 244 T
6 F
(name) 255.89 244 T
4 F
( ::]) 277.39 244 T
6 F
(c-type) 304.39 244 T
4 F
( #key) 329.39 244 T
6 F
(c-name) 361.79 244 T
0 11 Q
(If no parameters ar) 135 223.67 T
(e speci\336ed, the C function is taken to have no ar) 227.48 223.67 T
(gu-) 459.87 223.67 T
(ments.) 135 209.67 T
-0.1 (The) 135 189.67 P
1 F
-0.1 (adjectives) 156.06 189.67 P
0 F
-0.1 ( can be either) 199.04 189.67 P
4 9.5 Q
-0.22 (output) 265.83 189.67 P
0 11 Q
-0.1 (,) 300.03 189.67 P
4 9.5 Q
-0.22 (input) 305.42 189.67 P
0 11 Q
-0.1 (, or both. The calling discipline) 333.92 189.67 P
(is speci\336ed by the) 135 175.67 T
4 9.5 Q
(input) 224.6 175.67 T
0 11 Q
( and) 253.1 175.67 T
4 9.5 Q
(output) 277.22 175.67 T
0 11 Q
( adjectives.) 311.42 175.67 T
(By itself,) 135 155.67 T
4 9.5 Q
(input) 179.67 155.67 T
0 11 Q
( indicates that the ar) 208.17 155.67 T
(gument is passed into the function) 306.58 155.67 T
(by value. This option is the default and is used primarily to document) 135 141.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.37/DEST FmPD2
173 735/I4.1.1045495 FmPA
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "37" 41
%%Page: "38" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(38) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 11 Q
0 X
(the code. Ther) 153 640.67 T
(e is a parameter to the generated Dylan function corr) 221.95 640.67 T
(e-) 478.69 640.67 T
(sponding to each) 153 626.67 T
4 9.5 Q
(input) 239.02 626.67 T
0 11 Q
( parameter of the C function.) 267.52 626.67 T
-0.08 (The) 153 606.67 P
4 9.5 Q
-0.17 (output) 174.08 606.67 P
0 11 Q
-0.08 ( adjective speci\336es that the ar) 208.28 606.67 P
-0.08 (gument value to the C function) 350.03 606.67 P
(is used to identify a location into which an extra r) 153 592.67 T
(esult of the C function) 393.37 592.67 T
(will be stor) 153 578.67 T
(ed. Ther) 207.03 578.67 T
(e is no parameter in the generated Dylan function) 247.08 578.67 T
(corr) 153 564.67 T
(esponding to an) 172.38 564.67 T
4 9.5 Q
(output) 253.52 564.67 T
0 11 Q
( parameter of the C function. The C-FFI gen-) 287.72 564.67 T
(erates a location for the extra r) 153 550.67 T
(eturn value itself and passes it to the C) 300.21 550.67 T
(function. When the C function r) 153 536.67 T
(eturns, the value in the location is) 307.33 536.67 T
-0.06 (accessed and r) 153 522.67 P
-0.06 (eturned as an extra r) 223.01 522.67 P
-0.06 (esult fr) 322.58 522.67 P
-0.06 (om the Dylan function. The C-) 356.43 522.67 P
(FFI allocates space for the output parameter) 153 508.67 T
(\325s r) 367.46 508.67 T
(efer) 382.08 508.67 T
(enced type, passes a) 400.42 508.67 T
(pointer to the allocated space, and r) 153 494.67 T
(eturns) 326.08 494.67 T
4 9.5 Q
(pointer-value) 359.73 494.67 T
0 11 Q
(of that) 439.53 494.67 T
-0.29 (pointer) 153 480.67 P
-0.29 (. A pointer to a str) 187.61 480.67 P
-0.29 (uct or union type may not be used as an output) 274.21 480.67 P
(parameter) 153 466.67 T
(.) 202.32 466.67 T
(Example of) 153 446.67 T
4 9.5 Q
(output) 210.86 446.67 T
0 11 Q
( parameter de\336nition:) 245.06 446.67 T
4 9 Q
(define C-function mix-it-up) 163.8 426 T
(output parameter out1 :: <some-struct*>;) 174.6 415 T
(output parameter out2 :: <C-int*>;) 174.6 404 T
(result value :: <C-int>;) 174.6 393 T
(c-name: "mix_it_up";) 174.6 382 T
(end C-function mix-it-up;) 163.8 371 T
0 11 Q
(Example transaction:) 153 350.67 T
4 9 Q
(? mix-it-up\050\051;) 163.8 330 T
(1) 163.8 319 T
({<some-struct> pointer #xfefe770}) 163.8 308 T
(42) 163.8 297 T
0 11 Q
(If both) 153 276.67 T
4 9.5 Q
(input) 187.95 276.67 T
0 11 Q
(and) 219.2 276.67 T
4 9.5 Q
(output) 240.57 276.67 T
0 11 Q
( ar) 274.77 276.67 T
(e supplied, they specify that the ar) 287.17 276.67 T
(gument) 454.36 276.67 T
(value to the C function is used to identify a location fr) 153 262.67 T
(om which a value) 414.49 262.67 T
(is accessed and into which an extra r) 153 248.67 T
(esult value is placed by the C func-) 330.28 248.67 T
(tion. Ther) 153 234.67 T
(e is a parameter to the generated Dylan function corr) 200.26 234.67 T
(espond-) 457 234.67 T
(ing to each) 153 220.67 T
4 9.5 Q
(input) 208.62 220.67 T
(output) 239.87 220.67 T
0 11 Q
( parameter of the C function that is specialized) 274.07 220.67 T
(as the union of the export type of the r) 153 206.67 T
(efer) 338.89 206.67 T
(enced type of the type given) 357.24 206.67 T
(for the parameter in) 153 192.67 T
4 9.5 Q
(define) 253.01 192.67 T
(c-function) 289.96 192.67 T
0 11 Q
(, and) 346.96 192.67 T
4 9.5 Q
(#f.) 373.83 192.67 T
0 11 Q
(When the C function) 396.64 192.67 T
(r) 153 178.67 T
(eturns, the value in the location is accessed and r) 157.15 178.67 T
(eturned as an extra) 393.76 178.67 T
(r) 153 164.67 T
(esult fr) 157.15 164.67 T
(om the Dylan function. If an) 191.06 164.67 T
4 9.5 Q
(input) 331.07 164.67 T
(output) 362.32 164.67 T
0 11 Q
( parameter is passed) 396.52 164.67 T
-0.28 (as) 153 150.67 P
4 9.5 Q
-0.59 (#f) 165.63 150.67 P
0 11 Q
-0.28 ( fr) 177.03 150.67 P
-0.28 (om Dylan then a) 187.3 150.67 P
4 9.5 Q
-0.59 (NULL) 269.78 150.67 P
0 11 Q
-0.28 ( pointer is passed to the C function, and the) 292.58 150.67 P
(extra value r) 153 136.67 T
(eturned by the Dylan function will be) 213.84 136.67 T
4 9.5 Q
(#f) 399.41 136.67 T
0 11 Q
(.) 410.81 136.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.38/DEST FmPD2
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "38" 42
%%Page: "39" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.7) 479.91 677.67 T
(Functions) 501.29 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(39) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
(Example of) 135 640.67 T
4 9.5 Q
(input) 192.86 640.67 T
(output) 224.11 640.67 T
0 11 Q
( parameter de\336nition:) 258.31 640.67 T
4 9 Q
(define C-function mix-it-up) 145.8 620 T
(input output parameter inout :: <C-int*>;) 156.6 609 T
(result value :: <C-int>;) 156.6 598 T
(c-name: "mix_it_up";) 156.6 587 T
(end C-function mix-it-up;) 145.8 576 T
0 11 Q
(Example transaction:) 135 555.67 T
4 9 Q
(? mix-it-up\0507\051;) 135 535 T
(1) 135 524 T
(14) 135 513 T
0 11 Q
(Note that neither) 135 492.67 T
4 9.5 Q
(output) 220.8 492.67 T
0 11 Q
( nor) 255 492.67 T
4 9.5 Q
(input) 277.25 492.67 T
(output) 308.5 492.67 T
0 11 Q
(af) 345.45 492.67 T
(fects the declar) 354.42 492.67 T
(ed type of) 426.96 492.67 T
(an ar) 135 478.67 T
(gument: it must have the same type it has in C and so, because it) 159.3 478.67 T
(r) 135 464.67 T
(epr) 139.15 464.67 T
(esents a location, must be a pointer type.) 155.17 464.67 T
(A) 135 444.67 T
1 F
(r) 146.31 444.67 T
(esult-spec) 150.39 444.67 T
0 F
( has the following syntax:) 193.98 444.67 T
4 9 Q
(result [) 145.8 424 T
6 F
(name) 189 424 T
4 F
(::]) 215.9 424 T
6 F
(c-type) 237.5 424 T
0 11 Q
(If no) 135 403.67 T
4 9.5 Q
(result) 160.28 403.67 T
0 11 Q
( is speci\336ed, the Dylan function does not r) 194.48 403.67 T
(eturn a value for) 398.93 403.67 T
-0.19 (the C r) 135 389.67 P
-0.19 (esult, and the C function is expected to have a r) 167.33 389.67 P
-0.19 (eturn type of) 395.28 389.67 P
4 9.5 Q
-0.39 (void) 460.45 389.67 P
0 11 Q
-0.19 (.) 483.25 389.67 P
(Each) 135 369.67 T
1 F
(function-option) 161.26 369.67 T
0 F
( is a keywor) 230.51 369.67 T
(d\320value pair) 288.96 369.67 T
(. The) 349.59 369.67 T
4 9.5 Q
(generic-function-) 376.25 369.67 T
(method:) 135 355.67 T
0 11 Q
( option may be either) 174.9 355.67 T
4 9.5 Q
(#t) 281.21 355.67 T
0 11 Q
( or) 292.61 355.67 T
4 9.5 Q
(#f) 308.47 355.67 T
0 11 Q
(, indicating whether to add a) 319.87 355.67 T
(method to the generic function name or to bind a bar) 135 341.67 T
(e constant method) 391.77 341.67 T
(dir) 135 327.67 T
(ectly to name. The default value for) 149.07 327.67 T
4 9.5 Q
(generic-function-method:) 324.42 327.67 T
0 11 Q
( is) 461.22 327.67 T
4 9.5 Q
-0.44 (#f) 135 313.67 P
0 11 Q
-0.21 (. The option) 146.4 313.67 P
4 9.5 Q
-0.44 (C-modifiers:) 206.99 313.67 P
0 11 Q
-0.21 ( can be used to specify platform dependent) 275.39 313.67 P
-0.31 (modi\336ers for the C function being called. For example, on W) 135 299.67 P
-0.31 (indows, use) 425.64 299.67 P
4 9.5 Q
-0.34 (C-modifiers:) 135 285.67 P
-0.34 ("__stdcall") 205.99 285.67 P
0 11 Q
-0.16 ( if the C function to be called is de\336ned to be) 268.69 285.67 P
(a) 135 271.67 T
4 9.5 Q
(__stdcall) 143.25 271.67 T
0 11 Q
( function.) 194.55 271.67 T
(The) 135 251.67 T
4 9.5 Q
(c-name:) 156.16 251.67 T
0 11 Q
( option is used to specify the name of the C function as it is) 196.06 251.67 T
-0.31 (de\336ned in the object or shar) 135 237.67 P
-0.31 (ed library \336le. The) 268.55 237.67 P
1 F
-0.31 (c-name) 359.36 237.67 P
0 F
-0.31 ( must be a constant) 391.34 237.67 P
(string.) 135 223.67 T
(The) 135 203.67 T
4 9.5 Q
(indirect:) 156.16 203.67 T
(#t) 210.21 203.67 T
0 11 Q
( option de\336nes a function that accepts a C function) 221.61 203.67 T
(pointer as its \336rst ar) 135 189.67 T
(gument. and calls the function given with the signa-) 231.93 189.67 T
-0.24 (tur) 135 175.67 P
-0.24 (e described by the parameters and r) 149.37 175.67 P
-0.24 (esult given. In this case the Dylan) 321.87 175.67 P
(function de\336ned accepts one mor) 135 161.67 T
(e ar) 296.76 161.67 T
(gument than if) 314.42 161.67 T
1 F
(c-name) 389.14 161.67 T
0 F
( was given.) 421.12 161.67 T
(The type speci\336ed for the \336rst parameter of the Dylan function is) 135 147.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.39/DEST FmPD2
135 596/I4.1.1057815 FmPA
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "39" 43
%%Page: "40" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(40) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 9.5 Q
0 X
(<c-function-pointer>) 153 640.67 T
0 11 Q
(. One of) 267 640.67 T
1 F
(c-name) 307.99 640.67 T
0 F
( or) 339.96 640.67 T
4 9.5 Q
(indirect:) 355.81 640.67 T
(#t) 409.86 640.67 T
0 11 Q
( must be sup-) 421.26 640.67 T
(plied, but not both.) 153 626.67 T
(Example C declarations:) 153 606.67 T
4 9 Q
(/* Compute the length of a string */) 153 586 T
(int strlen\050char *string\051;) 153 575 T
(/* Set the given locations to values,) 153 556 T
(returning an error code */) 169.2 545 T
(int fill_locations\050int *loc1, int* loc2\051;) 153 534 T
(/* Read at most as far as indicated in max_then_read,) 153 515 T
(updating it to contain how much was actually read */) 169.2 504 T
(void read_stuff\050int *max_then_read\051;) 153 485 T
0 11 Q
(Example FFI de\336nitions:) 153 464.67 T
4 9 Q
(define C-function strlen) 153 444 T
(parameter) 163.8 433 T
(string :: <C-char*>;) 217.8 433 T
(result) 163.8 422 T
(value  :: <C-int>;) 217.8 422 T
(c-name: "strlen";) 163.8 411 T
(end C-function;) 153 400 T
(define C-function fill-locations) 153 381 T
(output parameter loc1 :: <C-int*>;) 163.8 370 T
(output parameter loc2 :: <C-int*>;) 163.8 359 T
(result return-code) 163.8 348 T
(:: <C-int>;) 282.6 348 T
(c_name: "fill_locations";) 163.8 337 T
(end C-function;) 153 326 T
(define C-function read-stuff) 153 307 T
(input output parameter :: <C-int*>;) 163.8 296 T
(c-name: "read_stuff";) 163.8 285 T
(end C-function;) 153 274 T
0 11 Q
(Example transactions:) 153 253.67 T
4 9 Q
(? strlen\050$my-c-string\051;) 153 233 T
(44) 153 222 T
5 F
(?) 153 203 T
4 F
(fill-locations\050\051;) 163.8 203 T
(0) 153 192 T
(101 // extra output value) 153 181 T
(102 // extra output value) 153 170 T
5 F
(?) 153 151 T
4 F
( read-stuff\050100\051;) 158.4 151 T
(50 // extra output value) 153 140 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.40/DEST FmPD2
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "40" 44
%%Page: "41" 45
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.7) 479.91 677.67 T
(Functions) 501.29 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(41) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
(In ef) 135 640.67 T
(fect, a) 156.59 640.67 T
4 9.5 Q
(define) 187.74 640.67 T
(C-function) 224.7 640.67 T
0 11 Q
( such as:) 281.7 640.67 T
4 9 Q
(define C-function foo) 135 620 T
(parameter string) 145.8 609 T
(::) 237.6 609 T
(<C-char*>;) 253.8 609 T
(parameter count) 145.8 598 T
(::) 237.6 598 T
(<C-int>;) 253.8 598 T
(result) 145.8 587 T
(value) 199.8 587 T
(::) 237.6 587 T
(<C-int>;) 253.8 587 T
(c-name: "foo";) 145.8 576 T
(end C-function;) 135 565 T
0 11 Q
(expands into something like:) 135 544.67 T
4 9 Q
(define constant foo =) 135 524 T
(method \050string, count\051) 145.8 513 T
(let c-string = %as-c-representation\050<C-char*>,) 156.6 502 T
(string\051;) 351 491 T
(let c-count = %as-c-representation\050<C-int>, count\051;) 156.6 480 T
(let c-result = %call-c-function\050"foo", c-string,) 156.6 469 T
(c-count\051;) 329.4 458 T
(%as-dylan-representation\050<C-int>, c-result\051;) 156.6 447 T
(end;) 135 436 T
0 11 Q
(with the declar) 135 415.67 T
(ed type.) 207.84 415.67 T
3 13 Q
(1.7.3  Describing Dylan functions f) 108 382.33 T
(or use b) 281.98 382.33 T
(y C) 323.25 382.33 T
3 12 Q
(de\336ne C-callab) 108 348 T
(le-wrapper) 177.91 348 T
1 11 Q
(De\336nition macr) 410.83 348.67 T
(o) 481.12 348.67 T
4 9 Q
(define C-callable-wrapper) 135 328 T
6 F
(dylan-r) 275.4 328 T
(ep-name) 305.25 328 T
4 F
(of) 347.05 328 T
6 F
(dylan-function) 363.26 328 T
4 F
([) 145.8 317 T
6 F
(parameter-spec) 151.2 317 T
4 F
(; ...] [;]) 212.7 317 T
([) 145.8 306 T
6 F
(r) 151.2 306 T
(esult-spec) 154.54 306 T
4 F
(] [;]) 194.53 306 T
([) 145.8 295 T
6 F
(function-options) 151.2 295 T
4 F
(][;]) 218.72 295 T
(end [C-callable-wrapper]) 135 284 T
0 11 Q
(Makes a Dylan function callable fr) 135 263.67 T
(om C, by describing a C contract for) 301.36 263.67 T
(the function. In or) 135 249.67 T
(der to generate a corr) 222.3 249.67 T
(ect C-callable function wrapper) 325.86 249.67 T
(,) 477.97 249.67 T
(the same information about the function must be given as would be) 135 235.67 T
(needed by C callers, typically pr) 135 221.67 T
(ovided by) 291.39 221.67 T
4 9.5 Q
(extern) 343.22 221.67 T
0 11 Q
( declarations for the) 377.42 221.67 T
(function in a C header \336le: the types of its parameters and r) 135 207.67 T
(esults.) 423.26 207.67 T
(The r) 135 187.67 T
(esult of pr) 160.31 187.67 T
(ocessing a) 209.59 187.67 T
4 9.5 Q
(define C-callable-wrapper) 261.8 187.67 T
0 11 Q
( de\336nition is a) 404.3 187.67 T
(function with a C entry point with the contract described. This function) 135 173.67 T
(takes C values as ar) 135 159.67 T
(guments, converting them to Dylan r) 230.23 159.67 T
(epr) 409.98 159.67 T
(esentations) 426.01 159.67 T
(accor) 135 145.67 T
(ding to the types declar) 160.42 145.67 T
(ed for the parameters of the C function) 274.68 145.67 T
(befor) 135 131.67 T
(e calling the Dylan function with them. If the C function was) 160.17 131.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.41/DEST FmPD2
173 478/I4.1.1047389 FmPA
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "41" 45
%%Page: "42" 46
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(42) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 11 Q
0 X
(described as r) 153 640.67 T
(eturning r) 219.97 640.67 T
(esults, the r) 268.82 640.67 T
(esults of the call to the Dylan func-) 324.49 640.67 T
(tion ar) 153 626.67 T
(e converted to C r) 184.59 626.67 T
(epr) 271.1 626.67 T
(esentations accor) 287.12 626.67 T
(ding to the declar) 369.84 626.67 T
(ed types) 455.1 626.67 T
(of those r) 153 612.67 T
(esults befor) 198.24 612.67 T
(e being r) 254.18 612.67 T
(eturned to the C caller of the function.) 296.17 612.67 T
(If) 153 592.67 T
1 F
(dylan-rep-name) 163.12 592.67 T
0 F
( is supplied, it is a name that is bound to a C function-) 233.4 592.67 T
(pointer object that points to the C entry point of the function being) 153 578.67 T
(de\336ned.) 153 564.67 T
-0.12 (The) 153 544.67 P
1 F
-0.12 (dylan-function) 174.04 544.67 P
0 F
-0.12 ( is a Dylan function that accepts the corr) 240.25 544.67 P
-0.12 (ect number of) 434.26 544.67 P
(parameters, and is called by the C callable wrapper) 153 530.67 T
(.) 400.95 530.67 T
(The) 153 510.67 T
1 F
(function-options) 174.16 510.67 T
0 F
( ar) 247.7 510.67 T
(e a pr) 260.1 510.67 T
(operty list. This list may contain a string) 287.12 510.67 T
-0.12 (value for the) 153 496.67 P
1 F
-0.12 (c-name) 216.99 496.67 P
0 F
-0.12 ( keywor) 248.97 496.67 P
-0.12 (d. If a) 288.43 496.67 P
1 F
-0.12 (c-name) 318.67 496.67 P
0 F
-0.12 ( is speci\336ed, that name is made) 350.65 496.67 P
(visible to C as the name of the generated C-callable wrapper function.) 153 482.67 T
(Given a compatible) 153 468.67 T
4 9.5 Q
(extern) 250.28 468.67 T
0 11 Q
( declaration, this allows C code to call Dylan) 284.48 468.67 T
(code simply by invoking a named function.) 153 454.67 T
(If) 153 434.67 T
1 F
(dylan-r) 163.12 434.67 T
(ep-name) 195.92 434.67 T
0 F
( is speci\336ed, it is bound to an instance of a function-) 233.2 434.67 T
(pointer designator class identifying the generated C-callable wrapper) 153 420.67 T
(function. Y) 153 406.67 T
(ou can pass this pointer to C code for use as, for example, a) 205.6 406.67 T
(callback.) 153 392.67 T
(A) 153 372.67 T
1 F
(parameter-spec) 164.31 372.67 T
0 F
(has the following syntax:) 233.86 372.67 T
4 9 Q
([) 153 352 T
6 F
(adjectives) 158.4 352 T
4 F
(] parameter [) 198.89 352 T
6 F
(name) 269.09 352 T
4 F
( ::]) 290.59 352 T
6 F
(c-type) 317.59 352 T
4 F
( #key) 342.59 352 T
6 F
(c-name) 374.99 352 T
0 11 Q
(If no parameters ar) 153 331.67 T
(e speci\336ed, the C function is taken to have no ar) 245.48 331.67 T
(gu-) 477.87 331.67 T
(ments.) 153 317.67 T
(An) 153 297.67 T
1 F
(adjective) 170.71 297.67 T
0 F
( can be) 209.41 297.67 T
4 9.5 Q
(input) 245.8 297.67 T
0 11 Q
(,) 274.3 297.67 T
4 9.5 Q
(output) 279.8 297.67 T
0 11 Q
(, or both. The calling discipline is spec-) 314 297.67 T
(i\336ed by the) 153 283.67 T
4 9.5 Q
(input) 210.55 283.67 T
0 11 Q
( and) 239.05 283.67 T
4 9.5 Q
(output) 263.17 283.67 T
0 11 Q
( adjectives.) 297.38 283.67 T
(If a parameter is) 153 263.67 T
4 9.5 Q
(output) 234.87 263.67 T
0 11 Q
(, the corr) 269.07 263.67 T
(esponding parameter is not passed to) 311.96 263.67 T
-0.21 (the Dylan function, but the Dylan function is expected to r) 153 249.67 P
-0.21 (eturn an extra) 433.87 249.67 P
-0.29 (value that is placed in the location pointed to by the parameter) 153 235.67 P
-0.29 (. The type) 453.86 235.67 P
(designated for the parameter must be a pointer type.) 153 221.67 T
(If a parameter is both) 153 201.67 T
4 9.5 Q
(input) 259.7 201.67 T
0 11 Q
( and) 288.2 201.67 T
4 9.5 Q
(output) 312.32 201.67 T
0 11 Q
(, the parameter must be a) 346.52 201.67 T
(pointer type, and the value accepted by the Dylan function will be the) 153 187.67 T
(r) 153 173.67 T
(esult of) 157.15 173.67 T
4 9.5 Q
(pointer-value) 195.67 173.67 T
0 11 Q
( on that pointer) 269.77 173.67 T
(. The Dylan function is expected) 344.11 173.67 T
-0.33 (to r) 153 159.67 P
-0.33 (eturn an extra value which is placed into the location speci\336ed by the) 169.16 159.67 P
(pointer passed to the C function. If the pointer passed to the C function) 153 145.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.42/DEST FmPD2
[/Rect[196 168 270 180]/Border[0 0 0]/Page 22/View[/XYZ null 126 460 FmDC exch pop null]/LNK FmPD
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "42" 46
%%Page: "43" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.7) 479.91 677.67 T
(Functions) 501.29 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(43) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
(is) 135 640.67 T
4 9.5 Q
(NULL) 145.62 640.67 T
0 11 Q
(, then the value passed to the Dylan function will be) 168.41 640.67 T
4 9.5 Q
(#f) 424.07 640.67 T
0 11 Q
(, and the) 435.47 640.67 T
(extra value r) 135 626.67 T
(eturned will be ignor) 195.84 626.67 T
(ed.) 298.32 626.67 T
(Ther) 135 606.67 T
(e is curr) 157.56 606.67 T
(ently no way to de\336ne a C-callable function that accepts a) 196.2 606.67 T
(variable number of ar) 135 592.67 T
(guments.) 240.32 592.67 T
(A) 135 572.67 T
1 F
(r) 146.31 572.67 T
(esult-spec) 150.39 572.67 T
0 F
( has the following syntax:) 193.98 572.67 T
4 9 Q
(result [) 135 552 T
6 F
(name) 178.2 552 T
4 F
( ::]) 199.7 552 T
6 F
(c-type) 226.7 552 T
0 11 Q
-0.02 (If no) 135 531.67 P
4 9.5 Q
-0.05 (result) 160.23 531.67 P
0 11 Q
-0.02 ( is speci\336ed, the C function de\336ned does not r) 194.43 531.67 P
-0.02 (eturn a value.) 416.52 531.67 P
(It is de\336ned as what in C terminology is known as a) 135 517.67 T
1 F
(void) 390.01 517.67 T
0 F
( function.) 408.95 517.67 T
(Example C declarations:) 135 497.67 T
4 9 Q
(/* Compute the length of a string */) 135 477 T
(int strlen\050char *string\051;) 135 466 T
(/* Set the given locations to values, returning an) 135 447 T
(error code */) 151.2 436 T
(int fill_locations\050int *loc1, int* loc2\051;) 135 417 T
(/* Read at most as far as indicated in max_then_read,) 135 398 T
(updating it to contain how much was actually read */) 151.2 387 T
(void read_stuff\050int *max_then_read\051;) 135 368 T
0 11 Q
(Example FFI de\336nitions:) 135 347.67 T
4 9 Q
(define method dylan-strlen \050string\051 => \050length\051 \311 end;) 135 327 T
(define C-callable-wrapper of dylan-strlen) 135 308 T
(parameter string :: <C-char*>;) 145.8 297 T
(result) 145.8 286 T
(value) 199.8 286 T
(:: <C-int>;) 237.6 286 T
(c-name: "strlen";) 145.8 275 T
(end C-function;) 135 264 T
(define method dylan-fill-locations \050\051) 135 245 T
( => \050return-code :: <integer>,) 135 234 T
(val1 :: <integer>,) 162 223 T
(val2 :: <integer>\051) 162 212 T
(\311) 135 201 T
(end;) 135 190 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.43/DEST FmPD2
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "43" 47
%%Page: "44" 48
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(44) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 F
0 X
(define C-callable-wrapper of dylan-fill-locations) 153 642 T
(output parameter loc1) 163.8 631 T
(:: <C-int*>;) 282.6 631 T
(output parameter loc2) 163.8 620 T
(:: <C-int*>;) 282.6 620 T
(result return-code) 163.8 609 T
(:: <C-int>;) 282.6 609 T
(c-name: "fill_locations";) 163.8 598 T
(end C-function;) 153 587 T
(define method dylan-read-stuff \050max :: <integer>\051 =>) 153 568 T
(\050read :: <integer\051 \311) 163.8 557 T
(end;) 153 546 T
(define C-callable-wrapper of dylan-read-stuff) 153 527 T
(input output parameter max-then-read :: <C-int*>;) 163.8 516 T
(c-name: "read_stuff";) 163.8 505 T
(end C-function;) 153 494 T
0 11 Q
(Example C calls:) 153 473.67 T
4 9 Q
({) 153 453 T
(int length, *loc1, *loc2, max_then_read;) 163.8 442 T
(length = strlen\050\322ABC\323\051;) 163.8 423 T
(fill_locations\050loc1, loc2\051;) 163.8 404 T
(max_then_read = 100) 163.8 385 T
(read_stuff\050&max_then_read\051;) 163.8 374 T
(}) 153 363 T
0 11 Q
(In ef) 153 342.67 T
(fect, a) 174.59 342.67 T
4 9.5 Q
(define C-callable-wrapper) 205.74 342.67 T
0 11 Q
( such as:) 348.24 342.67 T
4 9 Q
(define C-callable-wrapper of foo) 153 322 T
(parameter string :: <C-char*>;) 163.8 311 T
(parameter count) 163.8 300 T
(:: <C-int>;) 255.6 300 T
(result) 163.8 289 T
(value) 217.8 289 T
(:: <C-int>;) 255.6 289 T
(c-name: "foo";) 163.8 278 T
(end C-function;) 153 267 T
0 11 Q
(expands into something like:) 153 246.67 T
4 9 Q
(%c-callable-function "foo" \050c-string, c-count\051) 153 226 T
(let dylan-string) 174.6 215 T
(= %as-dylan-representation\050<C-char*>, c-string\051;) 185.4 204 T
(let dylan-count) 174.6 193 T
(= %as-dylan-representation\050<C-int>, c-count\051;) 185.4 182 T
(let dylan-result) 174.6 171 T
(= foo\050dylan-string, dylan-count\051;) 185.4 160 T
(%as-c-representation\050<C-int>, dylan-result\051;) 174.6 149 T
(end;) 163.8 138 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.44/DEST FmPD2
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "44" 48
%%Page: "45" 49
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.7) 479.91 677.67 T
(Functions) 501.29 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(45) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
-0.25 (wher) 135 640.67 P
-0.25 (e the) 159.99 640.67 P
4 9.5 Q
-0.53 (%) 185.51 640.67 P
0 11 Q
-0.25 ( functions perform the primitive conversions between Dylan) 191.21 640.67 P
(and C r) 135 626.67 T
(epr) 171.07 626.67 T
(esentations, checking that their ar) 187.1 626.67 T
(guments ar) 350.19 626.67 T
(e compatible) 404.97 626.67 T
(with the declar) 135 612.67 T
(ed type.) 207.84 612.67 T
(Callback example:) 135 592.67 T
4 9 Q
(? define C-function c-sort) 135 572 T
(parameter strings) 156.6 561 T
(:: <C-string*>;) 275.4 561 T
(parameter compare) 156.6 550 T
(:: <C-function-pointer>;) 275.4 550 T
(result sorted-strings) 156.6 539 T
(:: <C-string*>;) 275.4 539 T
(c-name: "sort";) 156.6 528 T
(end C-function;) 145.8 517 T
(// Defined c-sort.) 135 498 T
5 F
(?) 135 479 T
4 F
(define C-callable-wrapper callback-for-< of \134<) 145.8 479 T
(parameter string1 :: <C-string>;) 156.6 468 T
(parameter string2 :: <C-string>;) 156.6 457 T
(result) 156.6 446 T
(int) 210.6 446 T
(:: <C-int>;) 253.8 446 T
(end C-callable-wrapper;) 145.8 435 T
(// Defined callback-for-<) 135 416 T
5 F
(?) 135 397 T
4 F
( callback-for-<) 140.4 397 T
({function pointer #xff6e00}) 135 386 T
5 F
(?) 135 375 T
4 F
(c-sort\050some-c-strings, callback-for-<\051;) 145.8 375 T
({<C-string> array}) 135 364 T
3 13 Q
(1.7.4  V) 108 332.33 T
(ariab) 144.13 332.33 T
(les) 169.52 332.33 T
0 11 Q
(This section covers describing and accessing C variables.) 108 312.67 T
3 12 Q
(de\336ne C-v) 108 278 T
(ariab) 155.39 278 T
(le) 178.82 278 T
1 11 Q
(De\336nition macr) 410.83 278.67 T
(o) 481.12 278.67 T
4 9 Q
(define C-variable) 135 258 T
6 F
(getter-name) 232.2 258 T
4 F
( ::) 280.2 258 T
6 F
(c-type) 301.8 258 T
4 F
(#key) 145.8 247 T
6 F
(setter) 172.8 247 T
(c-name) 200.69 247 T
4 F
(end [C-variable]) 135 236 T
0 11 Q
-0.04 (Describes C variables to the C-FFI. It de\336nes a getter and setter function) 135 215.67 P
(for accessing the variable\325s value. The) 135 201.67 T
1 F
(c-name) 321.37 201.67 T
0 F
( keywor) 353.35 201.67 T
(d ar) 392.93 201.67 T
(gument is) 412.05 201.67 T
(r) 135 187.67 T
(equir) 139.15 187.67 T
(ed and gives the C name of the variable to be accessed. The) 164.56 187.67 T
1 F
(setter) 454.53 187.67 T
0 F
-0.2 (keywor) 135 173.67 P
-0.2 (d allows you to specify the name of the setter function, or if a set-) 171.83 173.67 P
-0.19 (ter function is to be de\336ned at all. If) 135 159.67 P
1 F
-0.19 (setter) 309 159.67 P
0 F
-0.19 ( is) 333.44 159.67 P
4 9.5 Q
-0.39 (#f) 346.44 159.67 P
0 11 Q
-0.19 (, no setter function will be) 357.84 159.67 P
(de\336ned.) 135 145.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.45/DEST FmPD2
173 408/I4.1.1050843 FmPA
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "45" 49
%%Page: "46" 50
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(46) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 11 Q
0 X
-0.19 (For integer) 153 640.67 P
-0.19 (, \337oat, or pointer) 205.4 640.67 P
-0.19 (-typed C variables the r) 285.94 640.67 P
-0.19 (epr) 399.34 640.67 P
-0.19 (esentation is clear) 415.36 640.67 P
(and unambiguous. For C str) 153 626.67 T
(uct or union typed variables the translation) 289.73 626.67 T
(is not so simple. A C union or str) 153 612.67 T
(uct has no dir) 312.8 612.67 T
(ect r) 379.19 612.67 T
(epr) 399.83 612.67 T
(esentation in) 415.86 612.67 T
-0.21 (Dylan. Y) 153 598.67 P
-0.21 (ou may only have a r) 194.35 598.67 P
-0.21 (efer) 295.78 598.67 P
-0.21 (ence to the C object in Dylan thr) 314.13 598.67 P
-0.21 (ough a) 468.26 598.67 P
4 9.5 Q
-0.57 (<c-pointer>) 153 584.67 P
0 11 Q
-0.28 ( object. For this r) 215.7 584.67 P
-0.28 (eason,) 295.21 584.67 P
4 9.5 Q
-0.57 (define) 328.27 584.67 P
-0.57 (c-variable) 364.95 584.67 P
0 11 Q
-0.28 ( is not permitted) 421.95 584.67 P
(for variables with C aggr) 153 570.67 T
(egate types. Use) 274.03 570.67 T
4 9.5 Q
(Define) 355.51 570.67 T
(C-address) 392.46 570.67 T
0 11 Q
( for those) 443.76 570.67 T
(variables.) 153 556.67 T
4 9 Q
(? define C-variable process-count :: <C-int>,) 153 536 T
(c-name: "process_count" end;) 174.6 525 T
(? process-count\050\051;) 153 506 T
(57) 153 495 T
(? process-count\050\051 := 0;) 153 476 T
(0) 153 465 T
(? process-count\050\051;) 153 446 T
(0) 153 435 T
(? define C-variable machine-name-1 :: <C-char*>,) 153 416 T
(c-name: "MachineName";) 174.6 405 T
(end;) 153 394 T
(? machine-name-1\050\051;) 153 375 T
(#{<C-char*> #xaaabc00}) 153 364 T
0 11 Q
-0.05 (In C and other static languages what is known as a variable is a named alloca-) 126 343.67 P
(tion of memory) 126 329.67 T
(. T) 200.3 329.67 T
(o access a global C variable fr) 211.54 329.67 T
(om Dylan it is occasionally) 354.44 329.67 T
(necessary to get a handle to the location wher) 126 315.67 T
(e that variable is kept. The) 347.3 315.67 T
4 9.5 Q
(define) 126 301.67 T
(C-address) 162.95 301.67 T
0 11 Q
( macr) 214.25 301.67 T
(o can be used for this purpose.) 241.24 301.67 T
3 12 Q
(de\336ne C-ad) 126 267 T
(dress) 179.5 267 T
1 11 Q
(De\336nition macr) 428.83 267.67 T
(o) 499.12 267.67 T
4 9 Q
(define C-address) 153 247 T
6 F
(name) 244.8 247 T
4 F
( ::) 266.3 247 T
6 F
(pointer-designator-type) 287.9 247 T
4 F
(#key) 163.8 236 T
6 F
(c-name) 190.8 236 T
4 F
(end [C-address] [) 153 225 T
6 F
(name) 244.8 225 T
4 F
(]) 266.3 225 T
0 11 Q
(De\336nes a Dylan constant binding,) 153 204.67 T
1 F
(name) 320.66 204.67 T
0 F
(, that is a) 344.5 204.67 T
4 9.5 Q
(<C-pointer>) 390.69 204.67 T
0 11 Q
( which) 453.39 204.67 T
(points to the location of the C global variable) 153 190.67 T
1 F
(c-name) 374 190.67 T
0 F
(.) 405.98 190.67 T
1 F
(Pointer-designator-type) 153 170.67 T
0 F
( must be) 258.71 170.67 T
(the type of the constant to be de\336ned,) 302.91 170.67 T
(and a subtype of) 153 156.67 T
4 9.5 Q
(<C-pointer>) 236.75 156.67 T
0 11 Q
(.) 299.45 156.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.46/DEST FmPD2
158 419/I4.1.1052243 FmPA
191 397/I4.1.1052249 FmPA
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "46" 50
%%Page: "47" 51
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.8) 374.74 677.67 T
(Allocating and deallocating C storage) 396.11 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(47) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 16 Q
0 X
(1.8  Allocating and deallocating C stora) 108 637.33 T
(g) 352.88 637.33 T
(e) 361.02 637.33 T
108 781/G4.946964 FmPA
0 11 Q
-0.35 (C objects can be allocated by calling) 108 616.67 P
4 9.5 Q
-0.73 (make) 282.38 616.67 P
0 11 Q
-0.35 ( on an associated wrapper class or by) 305.18 616.67 P
(allocating them on the stack using the macr) 108 602.67 T
(o) 318.75 602.67 T
4 9.5 Q
(with-stack-structure) 327.51 602.67 T
0 11 Q
(.) 441.51 602.67 T
(The C component of a) 108 582.67 T
4 9.5 Q
(make) 218.01 582.67 T
0 11 Q
(-allocated object is not deallocated by default) 240.81 582.67 T
-0.06 (when the Dylan designator object is r) 108 568.67 P
-0.06 (eclaimed by the garbage collector) 288.6 568.67 P
-0.06 (, so we) 450.07 568.67 P
(pr) 108 554.67 T
(ovide a manual means of fr) 118.76 554.67 T
(eeing this storage with the function) 251.4 554.67 T
4 9.5 Q
(destroy) 425.89 554.67 T
0 11 Q
(.) 464.57 554.67 T
3 12 Q
(make) 108 520 T
6 F
(subclass\050<C-pointer>\051) 135.9 520 T
1 11 Q
(G.f. method) 434.37 520.67 T
4 9 Q
(make) 135 500 T
6 F
(subclass\050<c-pointer>\051) 162 500 T
4 F
( #key) 249.23 500 T
6 F
(allocator) 281.63 500 T
(element-count) 324.04 500 T
(extra-bytes) 291.6 489 T
(addr) 342.33 489 T
(ess) 360.68 489 T
4 F
( =>) 372.67 489 T
6 F
(C-pointer) 394.27 489 T
0 11 Q
(Allocates a C object on the heap, using whatever standar) 135 468.67 T
(d C allocation) 409.81 468.67 T
-0.31 (function is in use on the tar) 135 454.67 P
-0.31 (get platform \050typically) 265.37 454.67 P
4 9.5 Q
-0.64 (malloc) 376.37 454.67 P
0 11 Q
-0.31 (\051 to allocate the) 410.57 454.67 P
(storage. This method is applicable to subclasses of) 135 440.67 T
4 9.5 Q
(<C-pointer>) 381.36 440.67 T
0 11 Q
( and) 444.06 440.67 T
(r) 135 426.67 T
(eturns an instance of its ar) 139.15 426.67 T
(gument class.) 266.37 426.67 T
-0.31 (If the) 135 406.67 P
1 F
-0.31 (pointer) 162.5 406.67 P
0 F
-0.31 ( option is pr) 194.28 406.67 P
-0.31 (ovided, no new storage is allocated, but instead,) 252.02 406.67 P
(a new pointer with the given machine wor) 135 392.67 T
(d addr) 341.54 392.67 T
(ess is r) 374.1 392.67 T
(eturned.) 406.2 392.67 T
(The) 135 372.67 T
1 F
(allocator) 156.16 372.67 T
0 F
( ar) 194.24 372.67 T
(gument should be a Dylan function that can serve as an) 206.63 372.67 T
(allocator) 135 358.67 T
(. It must accept a single integer ar) 176.41 358.67 T
(gument \321 the number of) 339.23 358.67 T
(bytes to be allocated \321 and r) 135 344.67 T
(eturn a Dylan) 275.8 344.67 T
4 9.5 Q
(<machine-word>) 345.52 344.67 T
0 11 Q
( that r) 425.32 344.67 T
(epr) 454.04 344.67 T
(e-) 470.07 344.67 T
(sents the addr) 135 330.67 T
(ess of the memory it allocated.) 203.43 330.67 T
(The amount of storage allocated by default is the r) 135 310.67 T
(esult of:) 379.07 310.67 T
4 9 Q
(size-of\050) 145.8 290 T
6 F
(pointer-wrapper-class) 189 290 T
4 F
(.referenced-type\051) 278.51 290 T
0 11 Q
(If a positive integer is passed as an) 135 269.67 T
1 F
(extra-bytes) 306.17 269.67 T
0 F
( option, that number of) 355.25 269.67 T
(extra bytes is also allocated.) 135 255.67 T
-0.11 (If a positive integer is passed as a) 135 235.67 P
1 F
-0.11 (element-count) 298.89 235.67 P
0 F
-0.11 ( option, space for) 362.04 235.67 P
1 F
-0.11 (element-) 448.11 235.67 P
(count) 135 221.67 T
0 F
(copies of the r) 163.01 221.67 T
(efer) 230.96 221.67 T
(enced type is allocated, taking into account the) 249.31 221.67 T
1 F
(extra-bytes) 135 207.67 T
0 F
( option for each of them. The) 184.08 207.67 T
1 F
(element-count) 327.02 207.67 T
0 F
(ar) 392.92 207.67 T
(gument can be) 402.56 207.67 T
(used for allocating arrays of sizes that ar) 135 193.67 T
(e not known statically) 331.31 193.67 T
(. The key-) 437.14 193.67 T
(wor) 135 179.67 T
(d) 154.33 179.67 T
1 F
(element-count) 163.8 179.67 T
0 F
( is used for this option rather than) 226.95 179.67 T
1 F
(size) 395.12 179.67 T
0 F
( in or) 411.62 179.67 T
(der to) 436.87 179.67 T
(avoid con\337ict with the) 135 165.67 T
1 F
(size) 246.91 165.67 T
0 F
(collection keywor) 266.16 165.67 T
(d. The logical size of a col-) 352.38 165.67 T
(lection r) 135 151.67 T
(epr) 174.45 151.67 T
(esented by a pointer wrapper and the number of array ele-) 190.47 151.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.47/DEST FmPD2
135 650/I4.1.1053474 FmPA
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "47" 51
%%Page: "48" 52
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(48) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 11 Q
0 X
(ments that implement it may dif) 153 640.67 T
(fer; a null-terminated string is an) 309.93 640.67 T
(example of such a case.) 153 626.67 T
(This) 153 606.67 T
4 9.5 Q
(make) 176.76 606.67 T
0 11 Q
( method calls) 199.56 606.67 T
4 9.5 Q
(initialize) 266.96 606.67 T
0 11 Q
( on the wrapper object it generates) 323.96 606.67 T
(befor) 153 592.67 T
(e r) 178.17 592.67 T
(eturning it.) 190.33 592.67 T
4 9 Q
(? define variable *space-for-one-int* = make\050<C-int*>\051;) 153 572 T
(? *space-for-one-int*[0];) 153 553 T
(97386437634) 153 542 T
(// Could have been anything unless the) 228.6 542 T
(// default) 228.6 531 T
(// allocator guarantees to zero new memory.) 153 512 T
(? *space-for-one-int*[0] := 0;) 153 493 T
(0) 153 482 T
(? *space-for-one-int*[0];) 153 463 T
(0) 153 452 T
(? define variable *space-for-ten-ints*) 153 433 T
(= make\050<C-int*>, element-count: 10\051;) 174.6 422 T
(? define C-struct <Z-properties>) 153 403 T
(slot type :: <C-int>;) 174.6 392 T
(array slot properties :: <C-int>,) 174.6 381 T
(end C-struct <Z-properties>;) 163.8 370 T
(? define variable *props* =) 153 351 T
(make\050<Z-properties>,) 174.6 340 T
(extra-bytes: 10 * size-of\050<C-int>\051\051;) 201.6 329 T
3 12 Q
(destr) 126 296 T
(o) 149.88 296 T
(y) 155.71 296 T
1 13 Q
(Open generic function) 386.49 295.33 T
4 9 Q
(destroy) 153 272 T
6 F
(C-pointer) 196.2 272 T
4 F
( #key) 234.87 272 T
6 F
(deallocator) 267.27 272 T
4 F
( => \050\051) 313.28 272 T
0 11 Q
(Fr) 153 251.67 T
(ees the allocated heap memory at the addr) 163.26 251.67 T
(ess encapsulated in) 369.22 251.67 T
1 F
(C-) 465.91 251.67 T
(pointer) 153 237.67 T
0 F
(.) 183.96 237.67 T
(The) 153 217.67 T
1 F
(deallocator) 174.16 217.67 T
0 F
( ar) 222.01 217.67 T
(gument should be a Dylan function that can serve as a) 234.41 217.67 T
(deallocation facility) 153 203.67 T
(. It must accept an addr) 247.36 203.67 T
(ess as a) 361.47 203.67 T
4 9.5 Q
(<machine-word>) 399.98 203.67 T
0 11 Q
( and) 479.78 203.67 T
(fr) 153 189.67 T
(ee the storage allocated at that addr) 160.81 189.67 T
(ess.) 333.71 189.67 T
-0.14 (Y) 153 169.67 P
-0.14 (ou should only use) 159.32 169.67 P
4 9.5 Q
-0.28 (destroy) 254.34 169.67 P
0 11 Q
-0.14 ( on pointers allocated using) 294.24 169.67 P
4 9.5 Q
-0.28 (make) 430.69 169.67 P
0 11 Q
-0.14 ( wher) 453.49 169.67 P
-0.14 (e no) 481.09 169.67 P
(addr) 153 155.67 T
(ess was given. If) 176.09 155.67 T
1 F
(allocator) 258.35 155.67 T
0 F
( was passed to) 296.42 155.67 T
4 9.5 Q
(make) 369.78 155.67 T
0 11 Q
(, the matching deallo-) 392.58 155.67 T
(cator should be passed to) 153 141.67 T
4 9.5 Q
(destroy) 279.07 141.67 T
0 11 Q
(.) 317.75 141.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.48/DEST FmPD2
153 422/I4.1.1053521 FmPA
153 422/I4.1.1053522 FmPA
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "48" 52
%%Page: "49" 53
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.8) 374.74 677.67 T
(Allocating and deallocating C storage) 396.11 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(49) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
(Ther) 135 640.67 T
(e is a default method for destr) 157.56 640.67 T
(oy on) 303.37 640.67 T
4 9.5 Q
(<C-statically-typed-) 333.4 640.67 T
(pointer>) 135 626.67 T
0 11 Q
(.) 180.6 626.67 T
3 12 Q
(with-stac) 108 592 T
(k-structure) 150.47 592 T
1 11 Q
(Macr) 457.29 592.67 T
(o) 481.12 592.67 T
4 9 Q
(with-stack-structure \050) 135 572 T
6 F
(name) 253.8 572 T
4 F
( ::) 275.3 572 T
6 F
(wrapper-type) 296.9 572 T
4 F
(#key) 253.8 561 T
6 F
(element-count) 280.8 561 T
(extra-bytes) 343.2 561 T
4 F
(\051) 388.53 561 T
6 F
(body) 145.8 550 T
4 F
(end [with-stack-structure]) 135 539 T
0 11 Q
(Allocates an object) 135 518.67 T
1 F
(name) 228.42 518.67 T
0 F
( within the scope of a) 252.26 518.67 T
1 F
(body) 358.59 518.67 T
0 F
(. The) 378.34 518.67 T
1 F
(element-count) 405.01 518.67 T
0 F
(and) 135 504.67 T
1 F
(extra-bytes) 156.37 504.67 T
0 F
( options behave as in) 205.46 504.67 T
4 9.5 Q
(make) 310.19 504.67 T
0 11 Q
(. The memory that was allo-) 332.99 504.67 T
(cated is fr) 135 490.67 T
(eed after) 182.13 490.67 T
1 F
(body) 227.26 490.67 T
0 F
( exits. This macr) 248.23 490.67 T
(o gives the object) 326.88 490.67 T
1 F
(dynamic) 413.01 490.67 T
(extent.) 453.86 490.67 T
4 9 Q
(? define C-struct <PointStruct>) 135 470 T
(slot x-coord :: <C-unsigned-short>;) 156.6 459 T
(slot y-coord :: <C-unsigned-short>;) 156.6 448 T
(pointer-type-name: <PointStruct*>) 156.6 437 T
(end C-struct;) 145.8 426 T
(// Defined <PointStruct>, x-coord, x-coord-setter,) 135 407 T
(y-coord, and y-coord-setter.) 151.2 396 T
(? define constant <Point> = <PointStruct*>;) 135 377 T
(// Defined <Point>.) 135 366 T
(? define C-function PlotPoint) 135 347 T
(parameter point :: <Point>;) 156.6 336 T
(c-name: "PlotPoint";) 156.6 325 T
(end C-function;) 145.8 314 T
(// Defined PlotPoint.) 135 303 T
(? define method plot \050x, y\051) 135 284 T
(with-stack-structure \050point :: <Point>\051) 156.6 273 T
(point.x-coord := 20;) 167.4 262 T
(point.y-coord := 30;) 167.4 251 T
(PlotPoint\050point\051;) 167.4 240 T
(end;) 156.6 229 T
(end;) 145.8 218 T
(// Defined plot.) 135 207 T
5 F
(?) 135 188 T
4 F
( plot\05020, 20\051;) 140.4 188 T
5 F
(?) 135 169 T
4 F
( plot\05050, 50\051;) 140.4 169 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.49/DEST FmPD2
135 722/I4.1.1053530 FmPA
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "49" 53
%%Page: "50" 54
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(50) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 16 Q
0 X
(1.9) 126 637.33 T
(Utility designator c) 151.54 637.33 T
(lasses) 269.41 637.33 T
126 781/G4.1055760 FmPA
0 11 Q
(The following designator classes ar) 126 616.67 T
(e de\336ned for convenience purposes using) 296.69 616.67 T
4 9.5 Q
(define) 126 602.67 T
(c-mapped-subtype) 162.95 602.67 T
0 11 Q
(.) 254.15 602.67 T
3 12 Q
(<C-boolean>) 126 568 T
1 11 Q
(Open abstract class) 417.85 568.67 T
0 F
(A mapped subclass of) 153 546.67 T
4 9.5 Q
(<C-int>) 262.95 546.67 T
0 11 Q
( that pr) 302.85 546.67 T
(ovides an analogue to Dylan\325s) 338.18 546.67 T
4 9.5 Q
(<boolean>) 153 532.67 T
0 11 Q
( class. The Dylan type for both import and export is) 204.3 532.67 T
4 9.5 Q
(<boolean>) 153 518.67 T
0 11 Q
(, and the C type is) 204.3 518.67 T
4 9.5 Q
(int) 294.68 518.67 T
0 11 Q
(. The C integer 0 is mapped to) 311.78 518.67 T
4 9.5 Q
(#f) 460.31 518.67 T
0 11 Q
( in) 471.71 518.67 T
(Dylan, and all other values ar) 153 504.67 T
(e mapped to) 296.49 504.67 T
4 9.5 Q
(#t) 360.03 504.67 T
0 11 Q
(.) 371.43 504.67 T
3 12 Q
(<C-string>) 126 470 T
1 11 Q
(Open abstract class) 417.85 470.67 T
0 F
(A mapped subclass of) 153 448.67 T
4 9.5 Q
(<C-char*>) 262.95 448.67 T
0 11 Q
( and) 314.24 448.67 T
4 9.5 Q
(<string>) 338.37 448.67 T
0 11 Q
(. On export the Dylan) 383.97 448.67 T
(types) 153 434.67 T
4 9.5 Q
(<C-string>) 182 434.67 T
0 11 Q
(, or) 239 434.67 T
4 9.5 Q
(<byte-string>) 257.6 434.67 T
0 11 Q
( may be passed to C. On import all) 331.7 434.67 T
-0.36 (values ar) 153 420.67 P
-0.36 (e mapped to) 196.52 420.67 P
4 9.5 Q
-0.75 (<C-string>) 258.97 420.67 P
0 11 Q
-0.36 (. A) 315.97 420.67 P
4 9.5 Q
-0.75 (<byte-string>) 332.06 420.67 P
0 11 Q
-0.36 ( may be passed to C) 406.16 420.67 P
(dir) 153 406.67 T
(ectly and no copying takes place. The value in C will be a pointer to) 167.07 406.67 T
(the data of the byte-string. The implementation of) 153 392.67 T
4 9.5 Q
(<byte-string>) 398.01 392.67 T
0 11 Q
( is) 472.11 392.67 T
(such that, unless ther) 153 378.67 T
(e ar) 255.89 378.67 T
(e) 273.56 378.67 T
4 9.5 Q
(NULL) 281.58 378.67 T
0 11 Q
( characters embedded in the string,) 304.38 378.67 T
4 9.5 Q
(strlen) 153 364.67 T
0 11 Q
( in C and size in Dylan will r) 187.2 364.67 T
(eturn the same value.) 326.12 364.67 T
(A) 126 330 T
4 9.5 Q
(<byte-string>) 137.31 330 T
0 11 Q
( may only be safely passed to a C function if its value is) 211.41 330 T
(never stor) 126 330 T
(ed and used after the call r) 174.65 330 T
(eturns.) 303.61 330 T
3 12 Q
(<C-c) 340.01 330 T
(haracter>) 361.52 330 T
1 11 Q
(Open abstract class) 417.85 330.67 T
0 F
(A mapped subclass of) 153 308.67 T
4 9.5 Q
(<C-raw-unsigned-char>) 262.95 308.67 T
0 11 Q
(. The Dylan type for) 382.64 308.67 T
(inport and export is) 153 294.67 T
4 9.5 Q
(<character>) 252.13 294.67 T
0 11 Q
(. The C type is) 314.83 294.67 T
4 9.5 Q
(unsigned) 386.99 294.67 T
(char) 435.34 294.67 T
0 11 Q
(.) 457.33 294.67 T
3 12 Q
(with-c-string) 126 260 T
1 11 Q
(Macr) 475.29 260.67 T
(o) 499.12 260.67 T
4 9 Q
(with-c-string \050) 153 240 T
6 F
(variable) 234 240 T
4 F
( =) 267.34 240 T
6 F
(string-valued-expr) 283.54 240 T
(ession) 357.89 240 T
4 F
(\051) 382.88 240 T
6 F
(body) 163.8 229 T
4 F
(end) 153 218 T
0 11 Q
(Use this macr) 153 197.67 T
(o when you need to pass C a pointer to the contents of a) 219.09 197.67 T
4 9.5 Q
(<byte-string>) 153 183.67 T
0 11 Q
(, but for some r) 227.1 183.67 T
(eason it cannot be passed dir) 300.96 183.67 T
(ectly) 440.97 183.67 T
(. Inside) 462.81 183.67 T
(the) 153 169.67 T
1 F
(body) 171.01 169.67 T
0 F
(,) 190.76 169.67 T
1 F
(variable) 196.26 169.67 T
0 F
( is bound to a) 231.3 169.67 T
4 9.5 Q
(<C-string>) 299.85 169.67 T
0 11 Q
(object that r) 359.6 169.67 T
(efers to the con-) 416.72 169.67 T
(tents of the string r) 153 155.67 T
(eturned by) 244.89 155.67 T
1 F
(string-valued-expr) 300.82 155.67 T
(ession) 383.74 155.67 T
0 F
(.) 410.63 155.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.50/DEST FmPD2
126 720/I4.1.1055762 FmPA
126 720/I4.1.1055763 FmPA
126 622/I4.1.1055778 FmPA
126 412/I4.1.1055795 FmPA
153 390/I4.1.1055801 FmPA
152 792/I4.1.1057824 FmPA
340 482/I4.1.1057845 FmPA
340 482/I4.1.1057855 FmPA
340 482/I4.1.1057864 FmPA
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "50" 54
%%Page: "51" 55
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(1.9) 421.87 677.67 T
(Utility designator classes) 443.24 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(51) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(Note:) 135 640.67 T
0 F
( The) 162.19 640.67 T
4 9.5 Q
(<c-string>) 186.11 640.67 T
0 11 Q
( object is only live during the period that) 243.11 640.67 T
1 F
(body) 443.64 640.67 T
0 F
( is) 464.61 640.67 T
(executing. If the pr) 135 626.67 T
(ogram holds onto the pointer after that, the data it) 226.42 626.67 T
(r) 135 612.67 T
(efers to cannot be guaranteed to be corr) 139.15 612.67 T
(ect, because the garbage collec-) 331 612.67 T
(tor can no longer keep track of it.) 135 598.67 T
3 12 Q
(<C-Dylan-object>) 108 564 T
1 11 Q
(Open abstract class) 399.85 564.67 T
0 F
-0.17 (A mapped subclass of) 135 542.67 P
4 9.5 Q
-0.36 (<C-void*>) 244.25 542.67 P
0 11 Q
-0.17 (. Objects of this type corr) 295.55 542.67 P
-0.17 (espond to spe-) 415.38 542.67 P
(ci\336c Dylan objects. The Dylan type for import and export is) 135 528.67 T
4 9.5 Q
(<C-Dylan-) 425.61 528.67 T
(Object>) 135 514.67 T
0 11 Q
(. The C type is) 174.9 514.67 T
4 9.5 Q
(void*) 247.06 514.67 T
0 11 Q
(.) 275.56 514.67 T
(T) 135 494.67 T
(o pass a r) 140.73 494.67 T
(efer) 186.07 494.67 T
(ence to an arbitrary Dylan object to C, the Dylan object) 204.42 494.67 T
(\336rst must be r) 135 480.67 T
(egister) 202.6 480.67 T
(ed using) 234.85 480.67 T
4 9.5 Q
(register-C-Dylan-object) 279.35 480.67 T
0 11 Q
(. Then a) 410.45 480.67 T
4 9.5 Q
(<C-) 451.77 480.67 T
(Dylan-object>) 135 466.67 T
1 11 Q
(handle) 211.85 466.67 T
0 F
( to the object can be cr) 241.19 466.67 T
(eated using the function) 348.11 466.67 T
4 9.5 Q
(export-C-Dylan-object) 135 452.67 T
0 11 Q
(. The handle can then be passed dir) 254.7 452.67 T
(ectly to any) 425.9 452.67 T
-0.25 (C transition point designated as) 135 438.67 P
4 9.5 Q
-0.52 (<C-Dylan-object>) 291.6 438.67 P
0 11 Q
-0.25 (. Any object r) 382.8 438.67 P
-0.25 (eceived) 446.67 438.67 P
(by Dylan fr) 135 424.67 T
(om a transition point designated as) 190.24 424.67 T
4 9.5 Q
(<C-Dylan-object>) 364.27 424.67 T
0 11 Q
( may) 455.47 424.67 T
-0.41 (be passed to) 135 410.67 P
4 9.5 Q
-0.85 (import-C-Dylan-object) 196.4 410.67 P
0 11 Q
-0.41 ( to get the Dylan object for which it) 316.1 410.67 P
(was a handle.) 135 396.67 T
3 12 Q
(register) 108 362 T
(-C-Dylan-object) 143.92 362 T
1 11 Q
(Function) 445.45 362.67 T
4 9 Q
(register-C-Dylan-object) 135 342 T
6 F
(object) 264.6 342 T
3 12 Q
(unregister) 108 309 T
(-C-Dylan-object) 155.94 309 T
1 11 Q
(Function) 445.45 309.67 T
4 9 Q
(unregister-C-Dylan-object) 135 289 T
6 F
(object) 275.4 289 T
0 11 Q
(These functions allows objects to be passed to a C function as instances) 135 268.67 T
(of) 135 254.67 T
4 9.5 Q
(<C-Dylan-object>) 147.42 254.67 T
0 11 Q
(.) 238.62 254.67 T
(The) 135 234.67 T
4 9.5 Q
(register-C-Dylan-object) 156.16 234.67 T
0 11 Q
( function arranges for the garbage collec-) 287.26 234.67 T
(tor to leave the storage used by) 135 220.67 T
1 F
(object) 289.46 220.67 T
0 F
( unclaimed, and assur) 314.92 220.67 T
(es that the) 421.67 220.67 T
-0.42 (handle passed to C is not accidentally corr) 135 206.67 P
-0.42 (upted \050fr) 337.47 206.67 P
-0.42 (om C\325s point of view\051) 380.09 206.67 P
(by the memory manager) 135 192.67 T
(.) 253.9 192.67 T
(When the handle is no longer needed fr) 135 172.67 T
(om C, you should call) 327.15 172.67 T
4 9.5 Q
(unregister-C-Dylan-object) 135 158.67 T
0 11 Q
( to allow the object to be normally) 277.5 158.67 T
(r) 135 144.67 T
(eclaimed by the memory manager) 139.15 144.67 T
(. Calls to) 304.55 144.67 T
4 9.5 Q
(register-C-Dylan-object) 349.51 144.67 T
0 11 Q
(and) 135 130.67 T
4 9.5 Q
(unregister-C-Dylan-object) 156.37 130.67 T
0 11 Q
( on the same object nest or interleave) 298.87 130.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.51/DEST FmPD2
108 716/I4.1.1055818 FmPA
108 514/I4.1.1055837 FmPA
108 514/I4.1.1055838 FmPA
108 514/M4.9.17488.REntry.registercdylanobject FmPA
108 514/I4.1.1055839 FmPA
108 461/I4.1.1055846 FmPA
[/Rect[279 477 410 488]/Border[0 0 0]/Page 55/View[/XYZ null 108 514 FmDC exch pop null]/LNK FmPD
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "51" 55
%%Page: "52" 56
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(The C-FFI Library) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(52) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 11 Q
0 X
(without interfer) 153 640.67 T
(ence. That is, if) 230.22 640.67 T
4 9.5 Q
(register-C-Dylan-object) 305.5 640.67 T
0 11 Q
( is called) 436.6 640.67 T
(exactly twice on an object then) 153 626.67 T
4 9.5 Q
(unregister-C-Dylan-object) 304.22 626.67 T
0 11 Q
( must be) 446.72 626.67 T
(called exactly twice befor) 153 612.67 T
(e the memory manager can r) 275.54 612.67 T
(eclaim the space) 414.76 612.67 T
(for the object as it normally would.) 153 598.67 T
3 12 Q
(e) 126 564 T
(xpor) 131.34 564 T
(t-C-Dylan-object) 152.86 564 T
1 11 Q
(Function) 463.45 564.67 T
4 9 Q
(export-C-Dylan-object) 153 544 T
6 F
(object) 271.8 544 T
4 F
( =>) 296.13 544 T
6 F
(c-dylan-object) 317.73 544 T
0 11 Q
(Fetches the) 153 523.67 T
4 9.5 Q
(<C-Dylan-object>) 209.95 523.67 T
0 11 Q
( handle for a Dylan object.) 301.15 523.67 T
3 12 Q
(impor) 126 489 T
(t-C-Dylan-object) 153.53 489 T
1 11 Q
(Function) 463.45 489.67 T
4 9 Q
(import-c-dylan-object) 153 469 T
6 F
(c-dylan-object) 271.8 469 T
4 F
( =>) 330.14 469 T
6 F
(object) 351.74 469 T
0 11 Q
(Fetches the Dylan object for a) 153 448.67 T
4 9.5 Q
(<C-Dylan-object>) 298.6 448.67 T
0 11 Q
( handle.) 389.8 448.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.52/DEST FmPD2
[/Dest/L.cffidoc/DEST FmPD2
126 716/I4.1.1055854 FmPA
126 716/I4.1.1055855 FmPA
126 641/I4.1.1055872 FmPA
126 641/I4.1.1055873 FmPA
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "52" 56
%%Page: "53" 57
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 540 117 R
7 X
0 0 0 1 0 0 0 K
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(53) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 513 504 648 R
7 X
V
0 30 Q
0 X
(2) 180 628 T
108 586.45 504 614 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 586.45 504 614 R
7 X
0 0 0 1 0 0 0 K
V
108 607.14 270 607.14 2 L
V
3 H
2 Z
0 X
N
108 598.14 270 598.14 2 L
7 X
V
1 H
0 X
N
36 72 576 720 C
0 0 0 0 1 1 1 K
0 2 Q
7 X
(2) 108 566.45 T
0 0 0 1 0 0 0 K
0 30 Q
0 X
0 0 0 1 0 0 0 K
(Dylan W) 109 566.45 T
(in32 API Libraries) 225.94 566.45 T
108 710/G5.888029 FmPA
108 126 486 432 R
7 X
V
3 16 Q
0 X
(2.1  Intr) 108 421.33 T
(oduction) 154.43 421.33 T
108 565/G5.888030 FmPA
0 11 Q
(This chapter describes a set of Dylan libraries pr) 108 400.67 T
(oviding a low-level interface) 341.7 400.67 T
(to Micr) 108 386.67 T
(osoft W) 142.98 386.67 T
(indows. Each Dylan library is a Dylan C FFI built by a simple) 180.05 386.67 T
(translation of the W) 108 372.67 T
(indows API\325s C and C++ header \336les into C-FFI declara-) 203.96 372.67 T
-0.34 (tions. W) 108 358.67 P
-0.34 (indows pr) 147.41 358.67 P
-0.34 (ograms can ther) 196.75 358.67 P
-0.34 (efor) 274.1 358.67 P
-0.34 (e be written in Dylan by using the same) 293.18 358.67 P
-0.27 (functions and types as you would in C, albeit with slightly modi\336ed names so) 108 344.67 P
(that they conform to Dylan naming conventions and r) 108 330.67 T
(equir) 369.93 330.67 T
(ements.) 395.34 330.67 T
(The Dylan W) 108 310.67 T
(in32 API has been constr) 172.04 310.67 T
(ucted fr) 291.94 310.67 T
(om several Dylan libraries.) 329.6 310.67 T
(W) 108 296.67 T
(in32 functionality is divided among the libraries to match the contents of) 118.39 296.67 T
(Micr) 108 282.67 T
(osoft\325s DLLs, allowing Dylan applications to avoid r) 130.64 282.67 T
(efer) 384.19 282.67 T
(ences to DLLs) 402.54 282.67 T
(they do not need to use, and also limiting the amount of information that) 108 268.67 T
(must be loaded into the compilation envir) 108 254.67 T
(onment.) 311.86 254.67 T
(Since, with the exception of changes necessitated by Dylan naming conven-) 108 234.67 T
(tions and r) 108 220.67 T
(equir) 160.13 220.67 T
(ements, the names of C items have been pr) 185.54 220.67 T
(eserved in the) 393.07 220.67 T
(Dylan W) 108 206.67 T
(in32 API libraries, this chapter does not pr) 150.88 206.67 T
(ovide an exhaustive list of) 356.06 206.67 T
-0.12 (items available. Instead, this chapter explains the name-mapping scheme that) 108 192.67 P
-0.18 (was used in the conversion and pr) 108 178.67 P
-0.18 (ovides a collection of tips for writing Dylan) 273.7 178.67 P
(applications with the libraries.) 108 164.67 T
2 F
-0.23 (Note:) 108 144.67 P
0 F
-0.23 ( This r) 135.19 144.67 P
-0.23 (elease supports the W) 165.4 144.67 P
-0.23 (in32 API for W) 270.91 144.67 P
-0.23 (indows NT and W) 342.4 144.67 P
-0.23 (indows 95.) 431.04 144.67 P
(No support for W) 108 130.67 T
(in16 \05016-bit applications on W) 194.26 130.67 T
(indows 3.) 339.23 130.67 T
1 F
(x) 386.4 130.67 T
0 F
(\051 is planned.) 391.9 130.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.53/DEST FmPD2
[/Dest/F.win32doc/DEST FmPD2
109 730/M5.9.11231.Chapter.8.Windows.API.Libraries FmPA
109 730/I5.1.888028 FmPA
[/Title(A)/Rect[99 504 513 657]/ARTICLE FmPD2
[/Title(A)/Rect[99 117 495 441]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "53" 57
%%Page: "54" 58
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(Dylan Win32 API Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(54) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 16 Q
0 X
(2.2  Win32 libraries pr) 126 637.33 T
(o) 261.41 637.33 T
(vided) 269.18 637.33 T
126 781/G5.888036 FmPA
0 11 Q
(Each library has a single API module with the same name as the library) 126 616.67 T
(. For) 472.06 616.67 T
(example, the library) 126 602.67 T
4 9.5 Q
(win32-common) 226.29 602.67 T
0 11 Q
( has an API module also called) 294.69 602.67 T
4 9.5 Q
(win32-) 447 602.67 T
(common) 126 588.67 T
0 11 Q
(.) 160.2 588.67 T
(Y) 126 568.67 T
(ou can access the libraries fr) 132.32 568.67 T
(om the) 268.24 568.67 T
4 9.5 Q
(System\134Registry) 304.72 568.67 T
0 11 Q
( folder in the distribu-) 390.22 568.67 T
(tion. For a default installation, this can be found in) 126 554.67 T
4 9.5 Q
(C:\134Program) 126 540.67 T
(Files\134Harlequin\134Dylan) 188.7 540.67 T
0 11 Q
(.) 308.4 540.67 T
4 9.5 Q
(win32-common) 153 520.67 T
0 11 Q
-0.26 (Data types, constants \050including err) 234 520.67 P
-0.26 (or codes\051, and str) 405.92 520.67 P
-0.26 (uc-) 488.82 520.67 P
(tur) 234 506.67 T
(e accessors that ar) 248.37 506.67 T
(e shar) 335.49 506.67 T
(ed by the other modules.) 364.22 506.67 T
(Most of these come fr) 234 488.67 T
(om the W) 338.2 488.67 T
(in32 header \336les) 385.07 488.67 T
4 9.5 Q
(WIN-) 467.22 488.67 T
(DEF.H) 234 474.67 T
0 11 Q
(,) 262.5 474.67 T
4 9.5 Q
(WINNT.H) 268 474.67 T
0 11 Q
(, and) 307.9 474.67 T
4 9.5 Q
(WINERROR.H) 334.77 474.67 T
0 11 Q
(. \050Ther) 391.77 474.67 T
(e is no DLL \336le) 423.5 474.67 T
(supplied as standar) 234 460.67 T
(d with W) 329.1 460.67 T
(indows that corr) 374.07 460.67 T
(esponds) 454.2 460.67 T
-0.29 (with this library) 234 446.67 P
-0.29 (, because ther) 310.71 446.67 P
-0.29 (e ar) 376.08 446.67 P
-0.29 (e no C functions in the) 393.46 446.67 P
(header \336les to which it forms an interface.\051) 234 432.67 T
4 9.5 Q
(win32-kernel) 153 412.67 T
0 11 Q
(Non-GUI system services, as implemented in) 234 412.67 T
4 9.5 Q
(KERNEL32.DLL) 234 398.67 T
0 11 Q
( and declar) 302.4 398.67 T
(ed in) 356.24 398.67 T
4 9.5 Q
(WINBASE.H) 383.34 398.67 T
0 11 Q
( \050\336les, pipes,) 434.64 398.67 T
(semaphor) 234 384.67 T
(es, atoms, time, and so on\051,) 282.31 384.67 T
4 9.5 Q
(WINCON.H) 416.35 384.67 T
0 11 Q
( \050NT) 461.95 384.67 T
(console subsystem\051, and) 234 370.67 T
4 9.5 Q
(WINNLS.H) 355.11 370.67 T
0 11 Q
( \050National Language) 400.71 370.67 T
(Support\051.) 234 356.67 T
2 F
(Note:) 234 338.67 T
0 F
( This library does not pr) 261.19 338.67 T
(ovide thr) 378.15 338.67 T
(ead support.) 422.45 338.67 T
(Thr) 234 324.67 T
(ead support is being handled at a higher level by) 251.29 324.67 T
(Dylan\325s own Thr) 234 310.67 T
(eads library) 315.83 310.67 T
(. See the) 372.3 310.67 T
1 F
(Cor) 414.87 310.67 T
(e Featur) 431.17 310.67 T
(es and) 467.34 310.67 T
(Mathematics) 234 296.67 T
0 F
( manual for details.) 291.63 296.67 T
4 9.5 Q
(win32-gdi) 153 276.67 T
0 11 Q
(Graphics Device Interface, drawing graphics and text,) 234 276.67 T
(and printing. Corr) 234 262.67 T
(esponds to) 323.03 262.67 T
4 9.5 Q
(WINGDI.H) 378.46 262.67 T
0 11 Q
( and) 424.06 262.67 T
4 9.5 Q
(GDI32.DLL) 448.19 262.67 T
0 11 Q
(.) 499.49 262.67 T
4 9.5 Q
(win32-user) 153 242.67 T
0 11 Q
-0.48 (Other windowing functions. Corr) 234 242.67 P
-0.48 (esponds to) 395.95 242.67 P
4 9.5 Q
-0.99 (WINUSER.H) 450.43 242.67 P
0 11 Q
(and) 234 228.67 T
4 9.5 Q
(USER32.DLL) 255.37 228.67 T
0 11 Q
(.) 312.37 228.67 T
4 9.5 Q
(win32-version) 153 208.67 T
0 11 Q
(V) 234 208.67 T
(ersion management. Corr) 240.72 208.67 T
(esponds to) 364.62 208.67 T
4 9.5 Q
(WINVER.H) 420.05 208.67 T
0 11 Q
( and) 465.65 208.67 T
4 9.5 Q
(VERSION.DLL) 234 194.67 T
0 11 Q
(.) 296.7 194.67 T
4 9.5 Q
(win32-dialog) 153 174.67 T
0 11 Q
(Common dialog boxes, as implemented in) 234 174.67 T
4 9.5 Q
(COMDLG32.DLL) 234 160.67 T
0 11 Q
( and declar) 302.4 160.67 T
(ed in) 356.24 160.67 T
4 9.5 Q
(COMMDLG.H) 383.34 160.67 T
0 11 Q
(,) 434.64 160.67 T
4 9.5 Q
(DLGS.H) 440.14 160.67 T
0 11 Q
(, and) 474.34 160.67 T
4 9.5 Q
(CDERR.H) 234 146.67 T
0 11 Q
(.) 273.9 146.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.54/DEST FmPD2
152 792/M5.9.54926.1Heading.82.Win32.libraries.provided FmPA
152 792/I5.1.888035 FmPA
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "54" 58
%%Page: "55" 59
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
-0.15 (2.3) 324 677.67 P
-0.15 (Content and organization of the Win32 API librar-) 345.38 677.67 P
(ies) 108 666.17 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(55) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 9.5 Q
0 X
(win32-controls) 135 640.67 T
0 11 Q
(\322Common contr) 216 622.67 T
(ols\323, including list view) 294.91 622.67 T
(, tr) 409.55 622.67 T
(ee view) 422.78 622.67 T
(,) 458.91 622.67 T
(pr) 216 608.67 T
(operty sheets, and so on \050) 226.76 608.67 T
4 9.5 Q
(COMMCTRL.H) 350.41 608.67 T
0 11 Q
( and) 407.41 608.67 T
4 9.5 Q
(COMCTL32.DLL) 216 594.67 T
0 11 Q
(\051.) 284.4 594.67 T
4 9.5 Q
(win32-registry) 135 568.67 T
0 11 Q
(Registry \050) 216 550.67 T
4 9.5 Q
(WINREG.H) 263.06 550.67 T
0 11 Q
( and) 308.66 550.67 T
4 9.5 Q
(ADVAPI32.DLL) 332.78 550.67 T
0 11 Q
(\051.) 401.18 550.67 T
4 9.5 Q
(win32-rich-edit) 135 524.67 T
0 11 Q
(\322Rich edit\323 contr) 216 506.67 T
(ols \050) 298.14 506.67 T
4 9.5 Q
(RICHEDIT.H) 318.42 506.67 T
0 11 Q
( and) 375.42 506.67 T
4 9.5 Q
(RICHED32.DLL) 399.54 506.67 T
0 11 Q
(\051.) 467.94 506.67 T
4 9.5 Q
(win32-dde) 135 486.67 T
0 11 Q
(Dynamic Data Exchange \050) 216 486.67 T
4 9.5 Q
(DDE.H) 342.31 486.67 T
0 11 Q
( and) 370.81 486.67 T
4 9.5 Q
(DDEML.H) 394.94 486.67 T
0 11 Q
(\051.) 434.84 486.67 T
(Libraries alr) 108 466.67 T
(eady being consider) 166.93 466.67 T
(ed for futur) 264.4 466.67 T
(e r) 320.56 466.67 T
(eleases include COM and OLE) 332.73 466.67 T
-0.02 (support. These libraries will be implemented with a single API module of the) 108 452.67 P
(same name as the library) 108 438.67 T
(.) 228.02 438.67 T
3 16 Q
(2.3  Content and or) 108 403.33 T
(ganization of the Win32 API libraries) 226.66 403.33 T
108 547/G5.888048 FmPA
0 11 Q
(The Dylan W) 108 382.67 T
(in32 libraries ar) 172.04 382.67 T
(e modeled closely upon the W) 247.6 382.67 T
(in32 C libraries.) 394.17 382.67 T
(Most names available in the Dylan libraries ar) 108 368.67 T
(e the same as those available in) 331.18 368.67 T
-0.38 (the C libraries, though the Dylan libraries ar) 108 354.67 P
-0.38 (e a subset of what is available to C) 319.77 354.67 P
(pr) 108 340.67 T
(ogrammers. Mor) 118.76 340.67 T
(eover) 200.49 340.67 T
(, to conform to Dylan naming conventions and) 226.78 340.67 T
(r) 108 326.67 T
(estrictions, many of the C names have been translated.) 112.15 326.67 T
-0.36 (Inef) 108 306.67 P
-0.36 (\336ciencies in the pr) 126.84 306.67 P
-0.36 (eliminary version of the Dylan compiler also limited the) 214.05 306.67 P
-0.15 (extent to which the) 108 292.67 P
4 9.5 Q
-0.3 (win32-user) 203.12 292.67 P
0 11 Q
-0.15 (,) 259.3 292.67 P
4 9.5 Q
-0.3 (win32-gdi) 264.65 292.67 P
0 11 Q
-0.15 (, and) 315.95 292.67 P
4 9.5 Q
-0.3 (win32-kernel) 342.54 292.67 P
0 11 Q
-0.15 ( libraries could) 410.93 292.67 P
(be completed. These libraries de\336ne only the minimal subset of names) 108 278.67 T
(r) 108 264.67 T
(equir) 112.15 264.67 T
(ed for r) 137.56 264.67 T
(unning example pr) 173.32 264.67 T
(ograms and for other short-term r) 265.97 264.67 T
(equir) 430.04 264.67 T
(e-) 455.45 264.67 T
(ments.) 108 250.67 T
2 F
(Note:) 108 230.67 T
0 F
( Look at the) 135.19 230.67 T
4 9.5 Q
(library.dylan) 195.38 230.67 T
0 11 Q
( \336le in each library to see what each library) 269.48 230.67 T
(pr) 108 216.67 T
(ovides. \050Look in) 118.76 216.67 T
4 9.5 Q
(comlib.dylan) 199.95 216.67 T
0 11 Q
( for) 268.35 216.67 T
4 9.5 Q
(win32-common) 287.86 216.67 T
0 11 Q
(.\051 If ther) 356.26 216.67 T
(e is an additional) 394.95 216.67 T
(ar) 108 202.67 T
(ea of W) 117.65 202.67 T
(in32 you would like to see these libraries support, please tell the) 153.98 202.67 T
(Dylan library team. E-mail:) 108 188.67 T
4 9.5 Q
(dylan-libraries) 243.09 188.67 T
0 11 Q
(.) 328.59 188.67 T
(The initial implementations of the libraries generally include only featur) 108 168.67 T
(es) 458.77 168.67 T
(that apply to both W) 108 154.67 T
(indows NT and W) 208.18 154.67 T
(indows 95.) 297.5 154.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.55/DEST FmPD2
140 402/I5.1.890265 FmPA
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "55" 59
%%Page: "56" 60
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(Dylan Win32 API Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(56) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 13 Q
0 X
(2.3.1  Notes on the translations) 126 639.33 T
0 11 Q
(The) 126 619.67 T
4 9.5 Q
(Win32-common) 147.16 619.67 T
0 11 Q
( module exports some names fr) 215.56 619.67 T
(om the) 368.02 619.67 T
4 9.5 Q
(c-ffi) 404.5 619.67 T
0 11 Q
( module that) 433 619.67 T
(its user may need to use dir) 126 605.67 T
(ectly) 260.08 605.67 T
(, without needing to use \050or know about\051 the) 281.91 605.67 T
4 9.5 Q
(c-ffi) 126 591.67 T
0 11 Q
( module itself. These names ar) 154.5 591.67 T
(e:) 301.67 591.67 T
4 9.5 Q
(null-pointer) 312.44 591.67 T
0 11 Q
(,) 380.02 591.67 T
4 9.5 Q
(null-pointer?) 385.52 591.67 T
0 11 Q
(,) 459.62 591.67 T
4 9.5 Q
(pointer-address) 126 577.67 T
0 11 Q
(,) 211.5 577.67 T
4 9.5 Q
(pointer-value) 217 577.67 T
0 11 Q
(,) 291.1 577.67 T
4 9.5 Q
(pointer-value-setter) 296.6 577.67 T
0 11 Q
(,) 409.79 577.67 T
4 9.5 Q
(pointer-cast) 415.29 577.67 T
0 11 Q
(,) 483.69 577.67 T
4 9.5 Q
(<C-string>) 126 563.67 T
0 11 Q
(,) 183 563.67 T
4 9.5 Q
(<C-unicode-string>) 188.5 563.67 T
0 11 Q
(,) 291.1 563.67 T
4 9.5 Q
(destroy) 296.6 563.67 T
0 11 Q
(, and) 335.28 563.67 T
4 9.5 Q
(with-stack-structure.) 362.15 563.67 T
0 11 Q
-0.23 (Names that ar) 126 543.67 P
-0.23 (e documented as being obsolete and/or included in W) 194.04 543.67 P
-0.23 (in32 only) 456.64 543.67 P
-0.04 (for compatibility with W) 126 529.67 P
-0.04 (in16, ar) 245.78 529.67 P
-0.04 (e generally not de\336ned in the Dylan libraries.) 281.48 529.67 P
(The names excluded ar) 126 515.67 T
(e listed in Section 2.4 on page 56.) 238.23 515.67 T
(The extended API macr) 126 495.67 T
(os, de\336ned in the optional C header \336le) 240.73 495.67 T
4 9.5 Q
(WINDOWSX.H) 434.99 495.67 T
0 11 Q
(,) 491.99 495.67 T
(ar) 126 481.67 T
(e not supported.) 135.65 481.67 T
3 16 Q
(2.4  Inde) 126 446.33 T
(x of Win32 IDs e) 178.34 446.33 T
(xc) 278.78 446.33 T
(luded fr) 293.14 446.33 T
(om the Dylan libraries) 341.01 446.33 T
126 590/G5.888152 FmPA
0 11 Q
(The names listed in the index below ar) 126 425.67 T
(e excluded fr) 313.36 425.67 T
(om the Dylan W) 376.32 425.67 T
(in32 API) 455.67 425.67 T
(libraries because they ar) 126 411.67 T
(e obsolete.) 243.38 411.67 T
-0.37 (Functions for old-style meta\336les \050) 126 391.67 P
4 9.5 Q
-0.78 (CreateMetaFile) 287.36 391.67 P
0 11 Q
-0.37 (,) 367.16 391.67 P
4 9.5 Q
-0.78 (CloseMetaFile) 372.28 391.67 P
0 11 Q
-0.37 (, and so on\051) 446.38 391.67 P
(ar) 126 377.67 T
(e described in the W) 135.65 377.67 T
(in32 SDK as being obsolete, but they ar) 234.33 377.67 T
(e being sup-) 423.85 377.67 T
(ported because they ar) 126 363.67 T
(e needed for OLE applications to exchange data with) 236.11 363.67 T
(16-bit applications.) 126 349.67 T
(Functions) 126 329.67 T
4 9.5 Q
(wsprintf) 176.64 329.67 T
0 11 Q
( and) 222.24 329.67 T
4 9.5 Q
(wvsprintf) 246.37 329.67 T
0 11 Q
( ar) 297.67 329.67 T
(e not supported because the Dylan) 310.06 329.67 T
(function) 126 315.67 T
4 9.5 Q
(format-to-string) 169.53 315.67 T
0 11 Q
( serves the same purpose. Also, the FFI doesn't) 260.73 315.67 T
(curr) 126 301.67 T
(ently support C functions with a variable number of ar) 146.01 301.67 T
(guments.) 411.97 301.67 T
(The extended API macr) 126 281.67 T
(os de\336ned in optional C header \336le) 240.73 281.67 T
4 9.5 Q
(windowsx.h) 414.23 281.67 T
0 11 Q
( will) 471.23 281.67 T
(not be supported by the Dylan interface.) 126 267.67 T
(The 64-bit utility macr) 126 247.67 T
(os) 233.96 247.67 T
4 9.5 Q
(Int32x32To64) 247.38 247.67 T
0 11 Q
(,) 315.79 247.67 T
4 9.5 Q
(Int64ShllMod32) 321.29 247.67 T
0 11 Q
(,) 401.08 247.67 T
4 9.5 Q
(Int64ShraMod32) 406.58 247.67 T
0 11 Q
(,) 486.39 247.67 T
4 9.5 Q
(Int64ShrlMod32) 126 233.67 T
0 11 Q
(, and) 205.8 233.67 T
4 9.5 Q
(UInt32x32To64) 232.67 233.67 T
0 11 Q
( ar) 306.77 233.67 T
(e not planned to be supported since) 319.17 233.67 T
-0.03 (ther) 126 219.67 P
-0.03 (e is no clear need for them and the functionality can be obtained by using) 145.4 219.67 P
(Dylan extended integers. However) 126 205.67 T
(, an interface to function) 295.11 205.67 T
4 9.5 Q
(MulDiv) 416 205.67 T
0 11 Q
( is pr) 450.2 205.67 T
(o-) 474.33 205.67 T
(vided, since it is an or) 126 191.67 T
(dinary C function that is commonly used.) 231.75 191.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.56/DEST FmPD2
152 601/M5.9.91728.1Heading.106.Index.of.Win32.IDs.excluded.from.the.Dylan.libraries FmPA
152 601/I5.1.888151 FmPA
[/Rect[288 512 395 523]/Border[0 0 0]/Page 60/View[/XYZ null 152 601 FmDC exch pop null]/LNK FmPD
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "56" 60
%%Page: "57" 61
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(2.4) 334.77 677.67 T
(Index of Win32 IDs excluded from the Dylan li-) 356.15 677.67 T
(braries) 108 666.17 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(57) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 13 Q
0 X
(2.4.1  Character) 108 639.33 T
(s) 187.26 639.33 T
4 9 Q
(_hread, _hwrite, _lclose, _lcreat, _llseek, _lopen, _lread,) 135 619 T
(_lwrite) 135 608 T
3 13 Q
(2.4.2  A) 108 576.33 T
4 9 Q
(AccessResource, AllocDSToCSAlias, AllocResource, AllocSelector,) 135 556 T
(AnsiLowerBuff, AnsiNext, AnsiPrev, AnsiToOem, AnsiToOemBuff,) 135 545 T
(AnsiUpper, AnsiUpperBuff) 135 534 T
3 13 Q
(2.4.3  B) 108 502.33 T
4 9 Q
(BN_DBLCLK, BN_DISABLE, BN_DOUBLECLICKED, BN_HILITE, BN_PAINT,) 135 482 T
(BN_PUSHED, BN_UNPUSHED, BS_USERBUTTON) 135 471 T
3 13 Q
(2.4.4  C) 108 439.33 T
4 9 Q
(CPL_INQUIRE, ChangeSelector, CloseComm, CloseSound, CopyLZFile,) 135 419 T
(CountVoiceNotes,) 135 408 T
3 13 Q
(2.4.5  D) 108 376.33 T
4 9 Q
(DOS3Call, DefHookProc, DefineHandleTable, DeviceMode,) 135 356 T
(DlgDirSelect, DlgDirSelectComboBox) 135 345 T
3 13 Q
(2.4.6  E) 108 313.33 T
4 9 Q
(EnumFonts, ERR_..., ExtDeviceMode) 135 293 T
3 13 Q
(2.4.7  F) 108 261.33 T
4 9 Q
(FixBrushOrgEx, FlushComm, FreeModule, FreeProcInstance,) 135 241 T
(FreeSelector) 135 230 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.57/DEST FmPD2
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "57" 61
%%Page: "58" 62
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(Dylan Win32 API Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(58) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 13 Q
0 X
(2.4.8  G) 126 639.33 T
4 9 Q
(GCW_HBRBACKGROUND, GCW_HCURSOR, GCW_HICON, GWW_HINSTANCE,) 153 619 T
(GWW_HWNDPARENT, GWW_ID, GWW_USERDATA, GetAspectRatioFilter,) 153 608 T
(GetAtomHandle, GetBitmapBits, GetBitmapDimension, GetBrushOrg,) 153 597 T
(GetCharWidth, GetCodeHandle, GetCodeInfo, GetCommError,) 153 586 T
(GetCurrentPDB, GetCurrentPosition, GetEnvironment, GetFreeSpace,) 153 575 T
(GetFreeSystemResources, GetInstanceData, GetKBCodePage,) 153 564 T
(GetMetaFile, GetMetaFileBits, GetPrivateProfileInt) 153 553 T
(GetPrivateProfileSection, GetPrivateProfileSectionNames,) 153 542 T
(GetPrivateProfileString, GetPrivateProfileStruct, GetProfileInt,) 153 531 T
(GetProfileSection, GetProfileString, GetStringTypeA,) 153 520 T
(GetStringTypeW, GetTempDrive, GetTextExtent, GetTextExtentEx,) 153 509 T
(GetTextExtentPoint, GetThresholdEvent, GetThresholdStatus,) 153 498 T
(GetViewportExt, GetViewportOrg, GetWindowExt, GetWindowOrg,) 153 487 T
(GlobalCompact, GlobalDosAlloc, GlobalDosFree, GlobalFix,) 153 476 T
(GlobalLRUNewest, GlobalLRUOldest, GlobalNotify, GlobalPageLock,) 153 465 T
(GlobalPageUnlock, GlobalUnWire, GlobalUnfix, GlobalUnwire,) 153 454 T
(GlobalWire) 153 443 T
3 13 Q
(2.4.9  H) 126 411.33 T
4 9 Q
(HFILE, HFILE_ERROR) 153 391 T
3 13 Q
(2.4.10  L) 126 359.33 T
4 9 Q
(LZDone, LZStart, LimitEmsPages, LocalCompact, LocalInit,) 153 339 T
(LocalNotify, LocalShrink, LockSegment) 153 328 T
3 13 Q
(2.4.11  M) 126 296.33 T
4 9 Q
(MAKEPOINT, MakeProcInstance, MoveTo) 153 276 T
3 13 Q
(2.4.12  N) 126 244.33 T
4 9 Q
(NetBIOSCall) 153 224 T
3 13 Q
(2.4.13  O) 126 192.33 T
4 9 Q
(OemToAnsi, OemToAnsiBuff, OffsetViewportOrg, OffsetWindowOrg,) 153 172 T
(OpenComm, OpenFile, OpenSound) 153 161 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.58/DEST FmPD2
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "58" 62
%%Page: "59" 63
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(2.4) 334.77 677.67 T
(Index of Win32 IDs excluded from the Dylan li-) 356.15 677.67 T
(braries) 108 666.17 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(59) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 13 Q
0 X
(2.4.14  P) 108 639.33 T
4 9 Q
(PM_NOYIELD, ProfClear, ProfFinish, ProfFlush, ProfInsChk,) 135 619 T
(ProfSampRate, ProfSetup, ProfStart, ProfStop) 135 608 T
3 13 Q
(2.4.15  R) 108 576.33 T
4 9 Q
(READ, READ_WRITE, ReadComm, RegCreateKey, RegEnumKey, RegOpenKey,) 135 556 T
(RegQueryValue, RegSetValue) 135 545 T
3 13 Q
(2.4.16  S) 108 513.33 T
4 9 Q
(SYSTEM_FIXED_FONT, ScaleViewportExt, ScaleWindowExt,) 135 493 T
(SetBitmapDimension, SetCommEventMask, SetEnvironment,) 135 482 T
(SetMetaFileBits, SetResourceHandler, SetScrollPos,) 135 471 T
(SetScrollRange, SetSoundNoise, SetSwapAreaSize,) 135 460 T
(SetViewportExt, SetViewportOrg, SetVoiceAccent, SetVoiceEnvelope,) 135 449 T
(SetVoiceNote, SetVoiceQueueSize, SetVoiceSound,) 135 438 T
(SetVoiceThreshold, SetWindowExt, SetWindowOrg, SetWindowsHook,) 135 427 T
(StartSound, StopSound, SwitchStackBack, SwitchStackTo,) 135 416 T
(SyncAllVoices) 135 405 T
3 13 Q
(2.4.17  U) 108 373.33 T
4 9 Q
(UngetCommChar, UnhookWindowsHook, UnlockSegment) 135 353 T
3 13 Q
(2.4.18  V) 108 321.33 T
4 9 Q
(ValidateCodeSegments, ValidateFreeSpaces) 135 301 T
3 13 Q
(2.4.19  W) 108 269.33 T
4 9 Q
(WM_CTLCOLOR, WNetAddConnection, WNetCancelConnection, WRITE,) 135 249 T
(WaitSoundState, WriteComm, WritePrivateProfileSection,) 135 238 T
(WritePrivateProfileString, WritePrivateProfileStruct,) 135 227 T
(WriteProfileSection, WriteProfileString) 135 216 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.59/DEST FmPD2
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "59" 63
%%Page: "60" 64
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(Dylan Win32 API Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(60) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 13 Q
0 X
(2.4.20  Y) 126 639.33 T
4 9 Q
(Yield) 153 619 T
3 16 Q
(2.5  API naming and mapping con) 126 585.33 T
(ventions) 335.47 585.33 T
126 729/G5.888974 FmPA
0 11 Q
-0.24 (A Dylan W) 126 564.67 P
-0.24 (indows pr) 179.71 564.67 P
-0.24 (ogram will generally use the same API names as a C pr) 229.15 564.67 P
-0.24 (o-) 494.33 564.67 P
(gram would, with the following modi\336cations for consistency with Dylan) 126 550.67 T
(conventions.) 126 536.67 T
3 13 Q
(2.5.1  Simple naming con) 126 503.33 T
(ventions) 252.97 503.33 T
0 11 Q
(T) 126 483.67 T
(ype names ar) 131.75 483.67 T
(e enclosed in angle brackets. For example,) 196.44 483.67 T
4 9.5 Q
(HANDLE) 403.12 483.67 T
0 11 Q
( becomes) 437.32 483.67 T
4 9.5 Q
(<HANDLE>) 126 469.67 T
0 11 Q
(.) 171.6 469.67 T
(Names of constants ar) 126 449.67 T
(e pr) 233.55 449.67 T
(e\336xed by) 252.32 449.67 T
4 9.5 Q
($) 299.61 449.67 T
0 11 Q
(. For example,) 305.31 449.67 T
4 9.5 Q
(OPAQUE) 376.77 449.67 T
0 11 Q
( becomes) 410.97 449.67 T
4 9.5 Q
($OPAQUE) 458.36 449.67 T
0 11 Q
(.) 498.26 449.67 T
(Underscor) 126 429.67 T
(es ar) 177 429.67 T
(e r) 199.33 429.67 T
(eplaced by hyphens. Thus, a constant called) 211.49 429.67 T
4 9.5 Q
(NO_ERROR) 427.51 429.67 T
0 11 Q
(becomes) 126 415.67 T
4 9.5 Q
($NO-ERROR) 170.64 415.67 T
0 11 Q
( and a class called) 221.94 415.67 T
4 9.5 Q
(LIST_ENTRY) 311.5 415.67 T
0 11 Q
( becomes) 368.5 415.67 T
4 9.5 Q
(<LIST-ENTRY>) 415.89 415.67 T
0 11 Q
(.) 484.29 415.67 T
(Hyphens will) 126 395.67 T
1 F
(not) 194.89 395.67 T
0 F
( be inserted between capitalized wor) 209.56 395.67 T
(ds \050for example,) 387.67 395.67 T
4 9.5 Q
(Cre-) 468.97 395.67 T
(ateWindow) 126 381.67 T
0 11 Q
( does not become) 177.3 381.67 T
4 9.5 Q
(Create-Window) 264.18 381.67 T
0 11 Q
(\051 since that is a less obvious map-) 338.28 381.67 T
(ping that is mor) 126 367.67 T
(e likely to cause confusion when switching between Dylan) 203.38 367.67 T
(code and W) 126 353.67 T
(indows documentation.) 183.4 353.67 T
3 13 Q
(2.5.2  Mapping the n) 126 320.33 T
(ull v) 227.8 320.33 T
(alue) 248.94 320.33 T
0 11 Q
(In place of) 126 300.67 T
4 9.5 Q
(NULL) 179.49 300.67 T
0 11 Q
(, ther) 202.29 300.67 T
(e ar) 227.2 300.67 T
(e several constants pr) 244.86 300.67 T
(oviding null values for fr) 349.3 300.67 T
(e-) 470.9 300.67 T
(quently used types, such as) 126 286.67 T
4 9.5 Q
($NULL-HANDLE) 262.15 286.67 T
0 11 Q
(,) 330.55 286.67 T
4 9.5 Q
($NULL-RECT) 336.05 286.67 T
0 11 Q
(, and) 392.23 286.67 T
4 9.5 Q
($NULL-STRING) 419.11 286.67 T
0 11 Q
(.) 487.51 286.67 T
(Null values for other pointer types may be designated by the expr) 126 272.67 T
(ession) 446.48 272.67 T
4 9.5 Q
(null-pointer\050<FOO>\051) 126 258.67 T
0 11 Q
(. Use the function) 234.3 258.67 T
4 9.5 Q
(null-pointer?) 322.58 258.67 T
0 11 Q
( to test whether a) 396.67 258.67 T
-0.38 (value is null. Do not use the expr) 126 244.67 P
-0.38 (ession) 283.52 244.67 P
4 9.5 Q
-0.78 (if\050ptr\051...) 316.1 244.67 P
0 11 Q
-0.38 ( as is often done in C, since) 373.1 244.67 P
-0.07 (a null pointer is not the same as) 126 230.67 P
4 9.5 Q
-0.15 (#f) 282.21 230.67 P
0 11 Q
-0.07 (. Ther) 293.61 230.67 P
-0.07 (e ar) 321.61 230.67 P
-0.07 (e also functions) 339.2 230.67 P
4 9.5 Q
-0.15 (null-handle) 417.32 230.67 P
0 11 Q
-0.07 ( and) 480.02 230.67 P
4 9.5 Q
-0.96 (null-handle?) 126 216.67 P
0 11 Q
-0.47 ( for cr) 194.4 216.67 P
-0.47 (eating and testing handles, since conceptually they ar) 222.01 216.67 P
-0.47 (e not) 478.17 216.67 P
(necessarily pointers.) 126 202.67 T
3 13 Q
(2.5.3  Mapping C types onto Dylan c) 126 169.33 T
(lasses) 307.67 169.33 T
0 11 Q
(The multitude of integer data types in C code \050) 126 149.67 T
4 9.5 Q
(int) 353.06 149.67 T
0 11 Q
(,) 370.16 149.67 T
4 9.5 Q
(long) 375.66 149.67 T
0 11 Q
(,) 398.46 149.67 T
4 9.5 Q
(unsigned) 403.96 149.67 T
0 11 Q
(,) 449.56 149.67 T
4 9.5 Q
(ULONG) 455.06 149.67 T
0 11 Q
(,) 483.56 149.67 T
4 9.5 Q
-0.27 (DWORD) 126 135.67 P
0 11 Q
-0.13 (,) 154.5 135.67 P
4 9.5 Q
-0.27 (LRESULT) 159.87 135.67 P
0 11 Q
-0.13 (, and so on\051 ar) 198.96 135.67 P
-0.13 (e all designated as) 267.2 135.67 P
4 9.5 Q
-0.27 (<integer>) 358.47 135.67 P
0 11 Q
-0.13 ( \050or some appr) 409.77 135.67 P
-0.13 (opri-) 480.17 135.67 P
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.60/DEST FmPD2
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "60" 64
%%Page: "61" 65
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(2.5) 369.61 677.67 T
(API naming and mapping conventions) 390.98 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(61) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
(ate subrange ther) 108 640.67 T
(eof\051 in Dylan method ar) 192.27 640.67 T
(gument types. However) 308.55 640.67 T
(, a) 425.38 640.67 T
4 9.5 Q
(<machine-word>) 108 626.67 T
0 11 Q
( needs to be used to r) 187.8 626.67 T
(epr) 290.6 626.67 T
(esent values that do not \336t in the) 306.62 626.67 T
(signed 30-bit r) 108 612.67 T
(epr) 177.55 612.67 T
(esentation of an integer) 193.58 612.67 T
(.) 306.66 612.67 T
(Names such as) 108 592.67 T
4 9.5 Q
(<DWORD>) 183.28 592.67 T
0 11 Q
( should not be used in application code because they) 223.18 592.67 T
(r) 108 578.67 T
(efer to the FFI designation of the C value r) 112.15 578.67 T
(epr) 316.99 578.67 T
(esentation, not to a Dylan data) 333.02 578.67 T
(type.) 108 564.67 T
(The C types) 108 544.67 T
4 9.5 Q
(BOOL) 168.71 544.67 T
0 11 Q
( and) 191.51 544.67 T
4 9.5 Q
(BOOLEAN) 215.63 544.67 T
0 11 Q
( ar) 255.53 544.67 T
(e both mapped to) 267.93 544.67 T
4 9.5 Q
(<boolean>) 356.29 544.67 T
0 11 Q
( in Dylan. Use) 407.59 544.67 T
4 9.5 Q
(#t) 108 530.67 T
0 11 Q
( and) 119.4 530.67 T
4 9.5 Q
(#f) 143.52 530.67 T
0 11 Q
( instead of) 154.92 530.67 T
4 9.5 Q
(TRUE) 208.18 530.67 T
0 11 Q
( and) 230.99 530.67 T
4 9.5 Q
(FALSE) 255.11 530.67 T
0 11 Q
(.) 283.61 530.67 T
2 F
(Note:) 108 510.67 T
0 F
( Bewar) 135.19 510.67 T
(e that some functions, such as) 168.75 510.67 T
4 9.5 Q
(TranslateAccelerator) 316.19 510.67 T
0 11 Q
(, though) 429.37 510.67 T
(documented to r) 108 496.67 T
(eturn) 188.44 496.67 T
4 9.5 Q
(TRUE) 217.43 496.67 T
0 11 Q
( or) 240.23 496.67 T
4 9.5 Q
(FALSE) 256.08 496.67 T
0 11 Q
(, actually r) 284.58 496.67 T
(eturn) 335.6 496.67 T
4 9.5 Q
(int) 364.58 496.67 T
0 11 Q
( instead of) 381.68 496.67 T
4 9.5 Q
(BOOL) 434.94 496.67 T
0 11 Q
(; in) 457.74 496.67 T
(such a case, you will have to compar) 108 482.67 T
(e the r) 285.77 482.67 T
(esult to 0.) 315.94 482.67 T
-0.27 (Similarly) 108 462.67 P
-0.27 (, watch out for cases wher) 151.03 462.67 P
-0.27 (e C code passes) 275.95 462.67 P
4 9.5 Q
-0.56 (TRUE) 353.2 462.67 P
0 11 Q
-0.27 ( or) 376 462.67 P
4 9.5 Q
-0.56 (FALSE) 391.32 462.67 P
0 11 Q
-0.27 ( as an integer) 419.82 462.67 P
(ar) 108 448.67 T
(gument. T) 117.65 448.67 T
(o handle one common case, the Dylan implementation of) 166.6 448.67 T
4 9.5 Q
(MAKELPARAM) 108 434.67 T
0 11 Q
( accepts either an) 165 434.67 T
4 9.5 Q
(<integer>) 251.37 434.67 T
0 11 Q
( or) 302.67 434.67 T
4 9.5 Q
(<boolean>) 318.52 434.67 T
0 11 Q
( as the \336rst ar) 369.82 434.67 T
(gument.) 435.14 434.67 T
(The C types) 108 414.67 T
4 9.5 Q
(CHAR) 168.71 414.67 T
0 11 Q
(,) 191.51 414.67 T
4 9.5 Q
(WCHAR) 197.01 414.67 T
0 11 Q
(, and) 225.51 414.67 T
4 9.5 Q
(TCHAR) 252.38 414.67 T
0 11 Q
( ar) 280.88 414.67 T
(e all mapped to) 293.28 414.67 T
4 9.5 Q
(<character>) 371.47 414.67 T
0 11 Q
( in Dylan.) 434.17 414.67 T
(However) 108 400.67 T
(,) 152.62 400.67 T
4 9.5 Q
(UCHAR) 158.12 400.67 T
0 11 Q
( is mapped to) 186.62 400.67 T
4 9.5 Q
(<integer>) 255.5 400.67 T
0 11 Q
( since that is how it is actually used.) 306.8 400.67 T
(Most of the pointer types in the W) 108 380.67 T
(indows API have several names; for exam-) 273.76 380.67 T
(ple:) 108 366.67 T
4 9.5 Q
(PRECT) 128.58 366.67 T
0 11 Q
(,) 156.27 366.67 T
4 9.5 Q
(NPRECT) 161.77 366.67 T
0 11 Q
(, and) 195.15 366.67 T
4 9.5 Q
(LPRECT) 222.03 366.67 T
0 11 Q
(. In 16-bit code, these distinguished between) 255.41 366.67 T
-0.4 (\322near\323 and \322far\323 pointers, but in 32-bit code ther) 108 352.67 P
-0.4 (e is no dif) 340.99 352.67 P
-0.4 (fer) 386.96 352.67 P
-0.4 (ence. Rather than) 400.04 352.67 P
-0.29 (carry the duplicate names over into Dylan, it would be simpler to use only the) 108 338.67 P
(basic) 108 324.67 T
4 9.5 Q
(P...) 135.08 324.67 T
0 11 Q
( pr) 157.88 324.67 T
(e\336x names. However) 171.39 324.67 T
(, the) 273.4 324.67 T
4 9.5 Q
(LP...) 296.91 324.67 T
0 11 Q
( names seem to be used much) 325.41 324.67 T
(mor) 108 310.67 T
(e often, and hence may be mor) 127.87 310.67 T
(e familiar) 276.71 310.67 T
(, and the Micr) 322.24 310.67 T
(osoft documenta-) 389.75 310.67 T
(tion still tends to use the) 108 296.67 T
4 9.5 Q
(LP...) 229.6 296.67 T
0 11 Q
( names in most places. So the Dylan interface) 258.11 296.67 T
(de\336nes both the) 108 282.67 T
4 9.5 Q
(<P...>) 188.56 282.67 T
0 11 Q
( and) 222.76 282.67 T
4 9.5 Q
(<LP...>) 246.89 282.67 T
0 11 Q
( names even though they have identical) 286.79 282.67 T
(values. The) 108 268.67 T
4 9.5 Q
(NP...) 166.15 268.67 T
0 11 Q
( names ar) 194.65 268.67 T
(e not de\336ned in Dylan since they ar) 241.34 268.67 T
(e not as com-) 413.67 268.67 T
(monly used.) 108 254.67 T
(V) 108 234.67 T
(alues of type) 114.93 234.67 T
4 9.5 Q
(char*) 179.7 234.67 T
0 11 Q
( in C ar) 208.2 234.67 T
(e r) 243.5 234.67 T
(epr) 255.66 234.67 T
(esented as instances of class) 271.69 234.67 T
4 9.5 Q
(<C-string>) 409.94 234.67 T
0 11 Q
( in) 466.94 234.67 T
(Dylan. This is a subclass of) 108 220.67 T
4 9.5 Q
(<string>) 241.32 220.67 T
0 11 Q
(, so all of the normal string operations) 286.92 220.67 T
(can be used dir) 108 206.67 T
(ectly) 181.74 206.67 T
(. C function parameters of type) 203.58 206.67 T
4 9.5 Q
(char*) 357.46 206.67 T
0 11 Q
( will also accept an) 385.96 206.67 T
(instance of) 108 192.67 T
4 9.5 Q
(<byte-string>) 163.08 192.67 T
0 11 Q
(; in the curr) 237.18 192.67 T
(ent implementation, that involves auto-) 293.05 192.67 T
(matically copying the string at r) 108 178.67 T
(un time, but the need for copying is intended) 262.9 178.67 T
(to be r) 108 164.67 T
(emoved later) 138.59 164.67 T
(.) 201.62 164.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.61/DEST FmPD2
363 634/I5.1.890274 FmPA
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "61" 65
%%Page: "62" 66
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(Dylan Win32 API Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(62) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 11 Q
0 X
(The) 126 640.67 T
4 9.5 Q
(TEXT) 147.16 640.67 T
0 11 Q
( function can be used to coer) 169.96 640.67 T
(ce a string literal to a) 308.56 640.67 T
4 9.5 Q
(<C-string>) 412.43 640.67 T
0 11 Q
( such) 469.43 640.67 T
(that the copy is performed only once. This usage is consistent with the W) 126 626.67 T
(in32) 480.28 626.67 T
4 9.5 Q
(TEXT) 126 612.67 T
0 11 Q
( macr) 148.8 612.67 T
(o, although the curr) 175.79 612.67 T
(ent purpose is dif) 271.91 612.67 T
(fer) 356.81 612.67 T
(ent.) 369.89 612.67 T
(The Dylan declarations for C types will generally follow the) 126 592.67 T
1 F
(strict) 419.69 592.67 T
0 F
( alternative) 443.11 592.67 T
(versions of the C declarations. This means, for example, that the various han-) 126 578.67 T
(dle types such as) 126 564.67 T
4 9.5 Q
(<hmenu>) 211.18 564.67 T
0 11 Q
( and) 251.08 564.67 T
4 9.5 Q
(<hwnd>) 275.21 564.67 T
0 11 Q
( ar) 309.41 564.67 T
(e disjoint subclasses of) 321.8 564.67 T
4 9.5 Q
(<handle>) 434.32 564.67 T
0 11 Q
(,) 479.92 564.67 T
(instead of all being equivalent.) 126 550.67 T
3 13 Q
(2.5.4  Creating methods fr) 126 517.33 T
(om Windo) 256.73 517.33 T
(ws alias functions) 308.1 517.33 T
0 11 Q
(Consider a W) 126 497.67 T
(indows function called, for example,) 191.8 497.67 T
4 9.5 Q
(Foo) 372.03 497.67 T
0 11 Q
(, which is an alias for) 389.13 497.67 T
(either) 126 483.67 T
4 9.5 Q
(FooA) 156.82 483.67 T
0 11 Q
( \050an 8-bit character version\051 or) 179.62 483.67 T
4 9.5 Q
(FooW) 328.55 483.67 T
0 11 Q
( \050a 16-bit character version\051. In) 351.35 483.67 T
-0.42 (Dylan, only the name) 126 469.67 P
4 9.5 Q
-0.87 (Foo) 231.67 469.67 P
0 11 Q
-0.42 ( will be de\336ned, but it will be a generic function with) 248.77 469.67 P
(separate methods for ar) 126 455.67 T
(guments of types) 241.02 455.67 T
4 9.5 Q
(<C-string>) 327.56 455.67 T
0 11 Q
(,) 384.56 455.67 T
4 9.5 Q
(<C-unicode-string>) 390.06 455.67 T
0 11 Q
(,) 492.66 455.67 T
4 9.5 Q
(<byte-string>) 126 441.67 T
0 11 Q
( or) 200.1 441.67 T
4 9.5 Q
(<unicode-string>) 215.95 441.67 T
0 11 Q
(. \050Only the 8-bit versions will be sup-) 307.15 441.67 T
-0.3 (ported in the initial implementation, both because the compiler is not r) 126 427.67 P
-0.3 (eady to) 465.9 427.67 P
(handle Unicode and because it will not work on W) 126 413.67 T
(indows 95.\051) 372.21 413.67 T
3 13 Q
(2.5.5  Mapping C structure \336elds onto Dylan slot names) 126 380.33 T
0 11 Q
-0.05 (Because slot names ar) 126 360.67 P
-0.05 (e not in a separate name space in Dylan, the names of C) 231.68 360.67 P
(str) 126 346.67 T
(uctur) 138.51 346.67 T
(e \336elds will have the suf) 164.39 346.67 T
(\336x) 282.1 346.67 T
4 9.5 Q
(-value) 297.18 346.67 T
0 11 Q
( added to form the name of the) 331.38 346.67 T
(Dylan accessor function. For example, the C statement:) 126 332.67 T
4 9 Q
(   pt->x = x;) 153 312 T
0 11 Q
(becomes in Dylan:) 126 291.67 T
4 9 Q
(   pt.x-value := x;) 153 271 T
0 11 Q
-0.29 (Ther) 126 250.67 P
-0.29 (e is not any attempt to append) 148.56 250.67 P
4 9.5 Q
-0.6 (?) 297.49 250.67 P
0 11 Q
-0.29 ( to the names of pr) 303.19 250.67 P
-0.29 (edicate functions since) 392.32 250.67 P
(it is not obvious exactly which functions that should apply to. The Dylan con-) 126 236.67 T
(vention of) 126 222.67 T
4 9.5 Q
(*...*) 178.25 222.67 T
0 11 Q
( for global variables is not r) 206.75 222.67 T
(elevant since ther) 339.36 222.67 T
(e ar) 424.12 222.67 T
(e no global) 441.79 222.67 T
(variables involved.) 126 208.67 T
3 13 Q
(2.5.6  Handling return of m) 126 175.33 T
(ultiple v) 260.28 175.33 T
(alues) 300.37 175.33 T
0 11 Q
(In cases wher) 126 155.67 T
(e the C library function takes a pointer ar) 191.58 155.67 T
(gument as a place to) 391.18 155.67 T
(stor) 126 141.67 T
(e a pointer) 144.4 141.67 T
(, integer) 195.28 141.67 T
(, or boolean value, the corr) 234.15 141.67 T
(esponding Dylan function) 363.68 141.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.62/DEST FmPD2
388 764/I5.1.890283 FmPA
429 565/I5.1.890292 FmPA
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "62" 66
%%Page: "63" 67
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(2.6) 413.41 677.67 T
(Defining callback functions) 434.79 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(63) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
(uses multiple r) 108 640.67 T
(eturn values to r) 180.29 640.67 T
(eturn such output parameters following the) 260 640.67 T
(original function r) 108 626.67 T
(eturn value. For example, wher) 196.4 626.67 T
(e C code does:) 348.65 626.67 T
4 9 Q
(BOOL ok;) 135 606 T
(DWORD NumberRead;) 135 595 T
(ok = ReadConsoleInput\050handle, buffer, length, & NumberRead\051;) 135 584 T
0 11 Q
(in Dylan it would be:) 108 563.67 T
4 9 Q
(let \050 ok :: <boolean>, NumberRead :: <integer> \051 =) 135 543 T
(    ReadConsoleInput\050handle, buffer, length\051;) 135 532 T
0 11 Q
(Similarly) 108 511.67 T
(, this function r) 151.03 511.67 T
(eturns multiple values instead of a str) 224.81 511.67 T
(uctur) 408.12 511.67 T
(e:) 434.01 511.67 T
4 9 Q
(let \050 x, y \051 = GetLargestConsoleWindowSize\050handle\051;) 135 491 T
3 16 Q
(2.6  De\336ning callbac) 108 457.33 T
(k functions) 233.92 457.33 T
108 601/G5.889773 FmPA
0 11 Q
-0.04 (The) 108 436.67 P
4 9.5 Q
-0.09 (win32-common) 129.12 436.67 P
0 11 Q
-0.04 ( library pr) 197.52 436.67 P
-0.04 (ovides a) 246.49 436.67 P
4 9.5 Q
-0.09 (define) 289.48 436.67 P
-0.09 (callback) 329.38 436.67 P
0 11 Q
-0.04 ( macr) 374.98 436.67 P
-0.04 (o to make it easy) 401.93 436.67 P
(to de\336ne callback functions without the application pr) 108 422.67 T
(ogrammer needing to) 371.27 422.67 T
(use the FFI) 108 408.67 T
4 9.5 Q
(define) 164.01 408.67 T
(c-callable-wrapper) 203.91 408.67 T
0 11 Q
( macr) 306.51 408.67 T
(o dir) 333.51 408.67 T
(ectly) 356.33 408.67 T
(. It is used like this:) 378.17 408.67 T
4 9 Q
(define callback WndProc :: <WNDPROC> = my-window-function;) 135 388 T
0 11 Q
(This says that) 108 367.67 T
4 9.5 Q
(WndProc) 177.28 367.67 T
0 11 Q
( is being de\336ned as a C function pointer of type) 217.18 367.67 T
4 9.5 Q
(<) 108 353.67 T
(WNDPROC>) 113.7 353.67 T
0 11 Q
(, which when called fr) 159.3 353.67 T
(om C causes the Dylan function) 266.95 353.67 T
4 9.5 Q
(my-) 424.35 353.67 T
(window-) 441.45 353.67 T
(function) 108 339.67 T
0 11 Q
( to be r) 153.6 339.67 T
(un. The Dylan function will be de\336ned normally using) 187.05 339.67 T
4 9.5 Q
(define) 108 325.67 T
(method) 147.9 325.67 T
0 11 Q
( or) 182.1 325.67 T
4 9.5 Q
(define) 197.95 325.67 T
(function) 237.85 325.67 T
0 11 Q
(, and it is the r) 283.45 325.67 T
(esponsibility of the pr) 352.63 325.67 T
(o-) 458.77 325.67 T
(grammer to ensur) 108 311.67 T
(e that its ar) 195.21 311.67 T
(gument signatur) 248.9 311.67 T
(e is consistent with what) 329.62 311.67 T
4 9.5 Q
(<WND-) 452.19 311.67 T
(PROC>) 108 297.67 T
0 11 Q
( r) 136.5 297.67 T
(equir) 143.4 297.67 T
(es. For example:) 168.81 297.67 T
4 9 Q
(define method my-window-function\050) 135 277 T
(               hWnd) 135 266 T
(  :: <HWND>,       // window handle) 237.6 266 T
(               message :: <integer>,  // type of message) 135 255 T
(               uParam,                // additional information) 135 244 T
(               lParam\051                // additional information) 135 233 T
(        => return :: <integer>;) 135 222 T
(...) 135 211 T
0 11 Q
(Note that the) 108 190.67 T
4 9.5 Q
(uParam) 174.58 190.67 T
0 11 Q
( and) 208.78 190.67 T
4 9.5 Q
(lParam) 232.91 190.67 T
0 11 Q
( ar) 267.11 190.67 T
(guments might r) 279.5 190.67 T
(eceive values of either) 360.55 190.67 T
(type) 108 176.67 T
4 9.5 Q
(<integer>) 132.33 176.67 T
0 11 Q
( or) 183.63 176.67 T
4 9.5 Q
(<machine-word>) 199.48 176.67 T
0 11 Q
(, so it may be best not to specialize them.) 279.28 176.67 T
(Often these values ar) 108 162.67 T
(e not used dir) 210.13 162.67 T
(ectly anyway) 277 162.67 T
(, but ar) 340.4 162.67 T
(e passed to other func-) 374.6 162.67 T
(tions \050such as) 108 148.67 T
4 9.5 Q
(LOWORD) 176.52 148.67 T
0 11 Q
( and) 210.72 148.67 T
4 9.5 Q
(HIWORD) 234.84 148.67 T
0 11 Q
(\051 which have methods for handling either) 269.04 148.67 T
(r) 108 134.67 T
(epr) 112.15 134.67 T
(esentation.) 128.17 134.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.63/DEST FmPD2
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "63" 67
%%Page: "64" 68
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(Dylan Win32 API Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(64) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 11 Q
0 X
(The other types of function supported by) 126 640.67 T
4 9.5 Q
(define) 328.61 640.67 T
(callback) 368.51 640.67 T
0 11 Q
( ar) 414.11 640.67 T
(e dialog func-) 426.51 640.67 T
(tions \050) 126 626.67 T
4 9.5 Q
(<DLGPROC>) 156.27 626.67 T
0 11 Q
(\051 and dialog hooks \050) 207.57 626.67 T
4 9.5 Q
(<LP...HOOKPROC>) 304.46 626.67 T
0 11 Q
(\051, both of which have) 389.96 626.67 T
(the same ar) 126 612.67 T
(gument types as a window function, but r) 181.55 612.67 T
(eturn a) 385.08 612.67 T
4 9.5 Q
(<boolean>) 422.32 612.67 T
0 11 Q
(. \050The) 473.62 612.67 T
(dialog hook functions ar) 126 598.67 T
(e actually declar) 244.61 598.67 T
(ed in) 323.73 598.67 T
4 9.5 Q
(COMMDLG.H) 350.82 598.67 T
0 11 Q
( as r) 402.12 598.67 T
(eturning a) 421.93 598.67 T
4 9.5 Q
(UINT) 474.88 598.67 T
0 11 Q
(,) 496.87 598.67 T
(but the value is always supposed to be) 126 584.67 T
4 9.5 Q
(TRUE) 316.52 584.67 T
0 11 Q
( or) 339.32 584.67 T
4 9.5 Q
(FALSE) 355.17 584.67 T
0 11 Q
(, so the Dylan callback) 383.67 584.67 T
(interface has been implemented using) 126 570.67 T
4 9.5 Q
(BOOL) 313.43 570.67 T
0 11 Q
( instead.\051) 336.23 570.67 T
3 16 Q
(2.7  Dealing with the C function WinMain) 126 535.33 T
126 679/G5.889791 FmPA
0 11 Q
(In C, the pr) 126 514.67 T
(ogrammer has to supply a) 180.92 514.67 T
4 9.5 Q
(WinMain) 311.17 514.67 T
0 11 Q
( function as the main pr) 351.07 514.67 T
(ogram) 466.6 514.67 T
(for a GUI application, but in Dylan ther) 126 500.67 T
(e is no main pr) 317.92 500.67 T
(ogram as such. The) 390.03 500.67 T
(beginning of execution is indicated simply by a top-level function call expr) 126 486.67 T
(es-) 488.88 486.67 T
(sion; this needs to be at the bottom of the last \336le listed in the LID \336le \050See) 126 472.67 T
1 F
(Library Refer) 126 458.67 T
(ence V) 184.99 458.67 T
(olume II: I/O and Networks) 214.02 458.67 T
0 F
( for details about the LID \336le for-) 336.74 458.67 T
-0.09 (mat\051. Functions ar) 126 444.67 P
-0.09 (e pr) 214.06 444.67 P
-0.09 (ovided to obtain the values which would have been the) 232.74 444.67 P
(ar) 126 430.67 T
(guments to) 135.65 430.67 T
4 9.5 Q
(WinMain) 193.12 430.67 T
0 11 Q
(:) 233.02 430.67 T
4 9 Q
(application-instance-handle\050\051 => <HINSTANCE>) 153 410 T
(application-command-line\050\051 => <string>) 153 399 T
(                             // arguments without program name) 153 388 T
(application-show-window\050\051 => <integer>   // one of $SW-...) 153 377 T
0 11 Q
(Ther) 126 356.67 T
(e is no accessor pr) 148.56 356.67 T
(ovided for the) 236.08 356.67 T
4 9.5 Q
(WinMain) 307.73 356.67 T
0 11 Q
( pr) 347.63 356.67 T
(evious instance parameter) 361.14 356.67 T
(because on W) 126 342.67 T
(in32, that parameter is always null, even for W) 192.6 342.67 T
(in32s as well as) 418.94 342.67 T
(NT and W) 126 328.67 T
(in95.) 176.4 328.67 T
(In the Dylan envir) 126 308.67 T
(onment, ther) 214.58 308.67 T
(e is no concept of a command line, so) 276.86 308.67 T
4 9.5 Q
(application-command-line) 126 294.67 T
0 11 Q
( always r) 262.8 294.67 T
(eturns a null pointer) 306.6 294.67 T
(, and) 405.29 294.67 T
4 9.5 Q
(application-) 432.17 294.67 T
(show-window) 126 280.67 T
0 11 Q
( always r) 188.7 280.67 T
(eturns the default value) 232.5 280.67 T
4 9.5 Q
($SW-SHOWNORMAL) 351.05 280.67 T
0 11 Q
(.) 430.85 280.67 T
(The pr) 126 260.67 T
(ogram can be terminated by calling the) 157.92 260.67 T
4 9.5 Q
(exit-application) 350.54 260.67 T
0 11 Q
( function in) 441.74 260.67 T
(the Operating-system library so that an exit code can be speci\336ed. But do not) 126 246.67 T
-0.4 (do that if the pr) 126 232.67 P
-0.4 (ogram is to be used in the Harlequin Dylan envir) 200.1 232.67 P
-0.4 (onment, since) 434.74 232.67 P
(you will close down the r) 126 218.67 T
(emote application. Instead, use the standar) 249.01 218.67 T
(d Dylan) 457 218.67 T
4 9.5 Q
(abort) 126 204.67 T
0 11 Q
( function to r) 154.5 204.67 T
(eturn to the r) 217.27 204.67 T
(emote listener) 280.75 204.67 T
(. Ther) 348.46 204.67 T
(e is no way to r) 376.52 204.67 T
(eturn an) 450.35 204.67 T
(exit code.) 126 190.67 T
(The start of an application pr) 126 170.67 T
(ogram might look something like this:) 266.88 170.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.64/DEST FmPD2
126 666/I5.1.890301 FmPA
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "64" 68
%%Page: "65" 69
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(2.8) 402.25 677.67 T
(Combining bit mask constants) 423.62 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(65) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 F
0 X
(define method my-main \050\051) 135 642 T
(let hInstance :: <HINSTANCE> = application-instance-handle\050\051;) 145.8 631 T
(let wc :: <PWNDCLASS> = make\050<PWNDCLASS>\051;) 145.8 620 T
(wc.style-value := 0;) 145.8 609 T
(wc.lpfnWndProc-value := MainWndProc;) 145.8 598 T
(...) 135 587 T
(RegisterClass\050wc\051;) 145.8 576 T
(let hWnd = CreateWindow\050 ... \051;) 145.8 565 T
(ShowWindow\050hWnd, application-show-window\050\051\051;) 145.8 554 T
(UpdateWindow\050hWnd\051;) 145.8 543 T
(let msg :: <PMSG> = make\050<PMSG>\051;) 145.8 532 T
(while \050 GetMessage\050msg, $NULL-HWND, 0, 0\051 \051) 145.8 521 T
(TranslateMessage\050msg\051;) 156.6 510 T
(DispatchMessage\050msg\051;) 156.6 499 T
(end;) 145.8 488 T
(ExitProcess\050msg.wParam-value\051;) 145.8 477 T
(end method my-main;) 135 466 T
(my-main\050\051;) 135 447 T
(// this is what initiates execution.) 199.8 447 T
0 11 Q
(For a complete example pr) 108 426.67 T
(ogram, see) 237.5 426.67 T
4 9 Q
(Projects\134Examples\134windows-ffi-example\134example.dylan) 135 406 T
0 11 Q
(in the dir) 108 385.67 T
(ectory that you installed Harlequin Dylan) 152.43 385.67 T
(\050) 108 371.67 T
4 9.5 Q
(C:\134Program) 111.66 371.67 T
(Files\134Harlequin\134Dylan\134) 174.36 371.67 T
0 11 Q
( by default\051.) 299.76 371.67 T
3 16 Q
(2.8  Combining bit mask constants) 108 336.33 T
108 480/G5.889842 FmPA
0 11 Q
-0.17 (Wher) 108 315.67 P
-0.17 (e C code would use the) 134.82 315.67 P
4 9.5 Q
-0.35 (|) 249.8 315.67 P
0 11 Q
-0.17 ( operator to combine bit mask constants, Dylan) 255.5 315.67 P
(code usually uses the) 108 301.67 T
4 9.5 Q
(logior) 214.32 301.67 T
0 11 Q
( function. However) 248.51 301.67 T
(, a few such constants have) 342.16 301.67 T
(values of type) 108 287.67 T
4 9.5 Q
(<machine-word>) 178.98 287.67 T
0 11 Q
( when they will not \336t in a small integer) 258.78 287.67 T
(, and) 451.92 287.67 T
4 9.5 Q
(logior) 108 273.67 T
0 11 Q
( only works on instances of) 142.2 273.67 T
4 9.5 Q
(<integer>) 277.38 273.67 T
0 11 Q
(. Because of this, the) 328.68 273.67 T
4 9.5 Q
(win32-) 429.65 273.67 T
(common) 108 259.67 T
0 11 Q
( library exports a) 142.2 259.67 T
4 9.5 Q
(%logior) 227.65 259.67 T
0 11 Q
( function which is used like) 267.55 259.67 T
4 9.5 Q
(logior) 403.83 259.67 T
0 11 Q
( except) 438.03 259.67 T
-0.18 (that it accepts values of either type) 108 245.67 P
4 9.5 Q
-0.38 (<integer>) 278.04 245.67 P
0 11 Q
-0.18 ( or) 329.34 245.67 P
4 9.5 Q
-0.38 (<machine-word>) 344.83 245.67 P
0 11 Q
-0.18 ( and r) 424.63 245.67 P
-0.18 (eturns) 452.53 245.67 P
(a) 108 231.67 T
4 9.5 Q
(<machine-word>) 116.25 231.67 T
0 11 Q
( r) 196.05 231.67 T
(esult. It can be used in most places that accept a bit mask) 202.95 231.67 T
-0.17 (\050C types) 108 217.67 P
4 9.5 Q
-0.35 (DWORD) 150.87 217.67 P
0 11 Q
-0.17 (,) 179.37 217.67 P
4 9.5 Q
-0.35 (ULONG) 184.71 217.67 P
0 11 Q
-0.17 (,) 213.21 217.67 P
4 9.5 Q
-0.35 (LPARAM) 218.54 217.67 P
0 11 Q
-0.17 (, and so on\051, but must be used if any of the ar) 252.74 217.67 P
-0.17 (gu-) 469.59 217.67 P
(ments ar) 108 203.67 T
(e a) 150.03 203.67 T
4 9.5 Q
(<machine-word>) 166.3 203.67 T
0 11 Q
(. The contexts wher) 246.1 203.67 T
(e this is likely to occur ar) 340.58 203.67 T
(e:) 461.16 203.67 T
(\245) 117 183.67 T
(W) 135 183.67 T
(indow style parameter of) 145.4 183.67 T
4 9.5 Q
(CreateWindow \050$WS-...\051) 270.54 183.67 T
0 11 Q
(\245) 117 163.67 T
(Flags value for) 135 163.67 T
4 9.5 Q
(CreateFile) 209.68 163.67 T
0 11 Q
( or) 266.68 163.67 T
4 9.5 Q
(CreateNamedPipe) 282.53 163.67 T
(\050$FILE-FLAG-...\051) 370.78 163.67 T
0 11 Q
(\245) 117 143.67 T
4 9.5 Q
($LOCALE-NOUSEROVERRIDE) 135 143.67 T
0 11 Q
( for) 260.4 143.67 T
4 9.5 Q
(LCTYPE) 279.91 143.67 T
0 11 Q
( parameters for) 314.11 143.67 T
4 9.5 Q
(GetLocaleInfoA) 391.18 143.67 T
0 11 Q
(,) 470.98 143.67 T
4 9.5 Q
(GetLocaleInfo) 135 129.67 T
0 11 Q
(, and possibly others, or) 209.1 129.67 T
4 9.5 Q
(dwFlags) 328.14 129.67 T
0 11 Q
( parameter of) 368.04 129.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.65/DEST FmPD2
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "65" 69
%%Page: "66" 70
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(Dylan Win32 API Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(66) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 9.5 Q
0 X
(GetTimeFormat) 153 640.67 T
0 11 Q
(,) 227.1 640.67 T
4 9.5 Q
(GetNumberFormat) 232.6 640.67 T
0 11 Q
(,) 318.1 640.67 T
4 9.5 Q
(GetCurrencyFormat) 323.6 640.67 T
0 11 Q
(, or) 420.5 640.67 T
4 9.5 Q
(GetDateFormat) 153 626.67 T
0 11 Q
(.) 227.1 626.67 T
(\245) 135 606.67 T
(Mask and ef) 153 606.67 T
(fects values in) 212.54 606.67 T
4 9.5 Q
(CHARFORMAT) 283.94 606.67 T
0 11 Q
( str) 340.94 606.67 T
(uctur) 356.2 606.67 T
(e for \322rich edit\323 contr) 382.08 606.67 T
(ols) 486 606.67 T
4 9.5 Q
(\050$CFM-...) 153 592.67 T
0 11 Q
( and) 204.3 592.67 T
4 9.5 Q
($CFE-...\051) 228.42 592.67 T
0 11 Q
(\245) 135 572.67 T
(Mask value in) 153 572.67 T
4 9.5 Q
(PARAFORMAT) 224.36 572.67 T
0 11 Q
( str) 281.36 572.67 T
(uctur) 296.61 572.67 T
(e for \322rich edit\323 contr) 322.5 572.67 T
(ols) 426.41 572.67 T
4 9.5 Q
(\050$PFM-...\051) 153 558.67 T
3 16 Q
(2.9  Other minor details) 126 523.33 T
126 667/G5.888865 FmPA
0 11 Q
(The types) 126 502.67 T
4 9.5 Q
(<FARPROC>) 176.16 502.67 T
0 11 Q
( and) 227.46 502.67 T
4 9.5 Q
(<PROC>) 251.58 502.67 T
0 11 Q
( ar) 285.78 502.67 T
(e de\336ned as equivalent to) 298.18 502.67 T
4 9.5 Q
(<C-function-) 425.43 502.67 T
(pointer>) 126 488.67 T
0 11 Q
(, so any C function wrapper object can be passed to a r) 171.6 488.67 T
(outine taking) 435.68 488.67 T
-0.04 (a) 126 474.67 P
4 9.5 Q
-0.08 (<FARPROC>) 134.21 474.67 P
0 11 Q
-0.04 ( without needing to do any type conversion like that needed in C.) 185.51 474.67 P
(T) 126 454.67 T
(ype casts between handles and integers \050) 131.75 454.67 T
4 9.5 Q
(<integer>) 329.9 454.67 T
0 11 Q
( or) 381.2 454.67 T
4 9.5 Q
(<machine-word>) 397.05 454.67 T
0 11 Q
(\051 can) 476.85 454.67 T
(be done by using) 126 440.67 T
4 9.5 Q
(as) 211.96 440.67 T
0 11 Q
(. For example:) 223.37 440.67 T
4 9 Q
(window-class.hbrBackground-value :=) 153 420 T
-0.41 (                                    as\050<HBRUSH>, $COLOR-WINDOW + 1\051;) 153 409 P
0 11 Q
(For type casts fr) 126 388.67 T
(om one pointer type to another) 203.41 388.67 T
(, use the function) 353.84 388.67 T
4 9.5 Q
(pointer-) 440.19 388.67 T
(cast) 126 374.67 T
0 11 Q
( instead of) 148.8 374.67 T
4 9.5 Q
(as) 202.06 374.67 T
0 11 Q
(. Think of) 213.46 374.67 T
4 9.5 Q
(as) 262.99 374.67 T
0 11 Q
( as converting the data str) 274.39 374.67 T
(uctur) 399.81 374.67 T
(e pointed to,) 425.69 374.67 T
(while) 126 360.67 T
4 9.5 Q
(pointer-cast) 156 360.67 T
0 11 Q
( operates on just the pointer itself.) 224.4 360.67 T
(The Dylan function) 126 340.67 T
4 9.5 Q
(pointer-value) 223.17 340.67 T
0 11 Q
( can be used to convert between a Dylan) 297.27 340.67 T
(integer and a) 126 326.67 T
4 9.5 Q
(LARGE-INTEGER) 192.56 326.67 T
0 11 Q
( or) 266.66 326.67 T
4 9.5 Q
(ULARGE-INTEGER) 282.51 326.67 T
0 11 Q
(. For example:) 362.31 326.67 T
4 9 Q
(let li :: make\050 <PLARGE-INTEGER> \051; pointer-value\050li\051 := 0;) 153 306 T
0 11 Q
(allocates a) 126 285.67 T
4 9.5 Q
(LARGE-INTEGER) 178.81 285.67 T
0 11 Q
( and sets its value to 0, without needing to be con-) 252.91 285.67 T
(cerned with the individual \336elds of the internal r) 126 271.67 T
(epr) 362.99 271.67 T
(esentation. Alternatively) 379.02 271.67 T
(,) 497.64 271.67 T
(you can use an initialization keywor) 126 257.67 T
(d:) 302.27 257.67 T
4 9 Q
(let li :: make\050 <PLARGE-INTEGER>, value: 0 \051;) 153 237 T
0 11 Q
-0.06 (The C macr) 126 216.67 P
-0.06 (os) 181.83 216.67 P
4 9.5 Q
-0.13 (MAKEPOINT) 195.18 216.67 P
0 11 Q
-0.06 (,) 245.67 216.67 P
4 9.5 Q
-0.13 (MAKEPOINTS) 251.1 216.67 P
0 11 Q
-0.06 (, and) 308.1 216.67 P
4 9.5 Q
-0.13 (LONG2POINT) 334.85 216.67 P
0 11 Q
-0.06 ( do not easily translate) 391.85 216.67 P
(to Dylan. Instead, use the Dylan function) 126 202.67 T
4 9.5 Q
(lparam-to-xy) 328.26 202.67 T
0 11 Q
(to split a parameter) 402.36 202.67 T
(into two signed numbers. For example:) 126 188.67 T
4 9 Q
(let \050 x, y \051 = LPARAM-TO-XY\050lParam\051;) 153 168 T
0 11 Q
(Wher) 126 147.67 T
(e the W) 152.82 147.67 T
(indows documentation speci\336es using a value of) 189.24 147.67 T
4 9.5 Q
(0xFFFFFFFF) 428.79 147.67 T
0 11 Q
(,) 484.77 147.67 T
-0.02 (this should be denoted in Dylan by using the constant) 126 133.67 P
4 9.5 Q
-0.04 ($FFFFFFFF) 390.95 133.67 P
0 11 Q
-0.02 ( because the) 442.25 133.67 P
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.66/DEST FmPD2
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "66" 70
%%Page: "67" 71
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(2.9) 443.15 677.67 T
(Other minor details) 464.52 677.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(DRAFT) 108 100 T
2 F
(67) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
(literal) 108 640.67 T
4 9.5 Q
(#xFFFFFFFF) 139.05 640.67 T
0 11 Q
( is outside the range for a small integer) 196.05 640.67 T
(. \050In the SCC or VM-) 384.05 640.67 T
(T) 108 626.67 T
(ether) 113.73 626.67 T
(, it would be silently tr) 137.79 626.67 T
(uncated, while the DFMC would r) 247.65 626.67 T
(eport a type) 414.36 626.67 T
(err) 108 612.67 T
(or) 121.76 612.67 T
(.\051) 131.3 612.67 T
(In Dylan,) 108 592.67 T
4 9.5 Q
(<RECTL>) 156.09 592.67 T
0 11 Q
( is an alias of) 195.99 592.67 T
4 9.5 Q
(<RECT>) 261.24 592.67 T
0 11 Q
( instead of being a distinct type. \050In) 295.44 592.67 T
-0.27 (W) 108 578.67 P
-0.27 (in32, they ar) 118.39 578.67 P
-0.27 (e str) 177.73 578.67 P
-0.27 (ucturally equivalent but wer) 197.99 578.67 P
-0.27 (e separate types for the sake of) 335.87 578.67 P
(sour) 108 564.67 T
(ce code compatibility with W) 129.45 564.67 T
(in16; ther) 271.13 564.67 T
(e is no need to maintain that arti\336-) 316.64 564.67 T
(cial distinction in Dylan.\051) 108 550.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.67/DEST FmPD2
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "67" 71
%%Page: "68" 72
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
1 9.5 Q
0 X
(Dylan Win32 API Libraries) 72 677.67 T
72 81 504 117 R
7 X
V
2 9 Q
0 X
(68) 72 100 T
1 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.68/DEST FmPD2
[/Dest/L.win32doc/DEST FmPD2
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
[/Page 1/View[/XYZ null 109 714 FmDC exch pop null]/Title(Harlequin Dylan)/Count 2/OUT FmPD
[/Page 5/View[/XYZ null 109 730 FmDC exch pop null]/Title(The C-FFI Library)/Count 9/OUT FmPD
[/Page 5/View[/XYZ null 134 576 FmDC exch pop null]/Title(1.1 Introduction)/OUT FmPD
[/Page 5/View[/XYZ null 134 402 FmDC exch pop null]/Title(1.2 Overview)/Count -3/OUT FmPD
[/Page 6/View[/XYZ null 156 656 FmDC exch pop null]/Title(1.2.1 C types in Dylan)/OUT FmPD
[/Page 9/View[/XYZ null 138 416 FmDC exch pop null]/Title(1.2.2 C functions in Dylan)/OUT FmPD
[/Page 11/View[/XYZ null 138 322 FmDC exch pop null]/Title(1.2.3 C variables in Dylan)/OUT FmPD
[/Page 13/View[/XYZ null 134 640 FmDC exch pop null]/Title(1.3 Terminology)/OUT FmPD
[/Page 13/View[/XYZ null 134 430 FmDC exch pop null]/Title(1.4 Basic options in C-FFI macros)/OUT FmPD
[/Page 14/View[/XYZ null 152 684 FmDC exch pop null]/Title(1.5 Designator classes)/Count -7/OUT FmPD
[/Page 15/View[/XYZ null 138 656 FmDC exch pop null]/Title(1.5.1 Designator type properties)/OUT FmPD
[/Page 16/View[/XYZ null 156 670 FmDC exch pop null]/Title(1.5.2 Designator class basics)/Count -4/OUT FmPD
[/Page 16/View[/XYZ null 126 635 FmDC exch pop null]/Title(<C-value>)/OUT FmPD
[/Page 16/View[/XYZ null 126 551 FmDC exch pop null]/Title(<C-void>)/OUT FmPD
[/Page 16/View[/XYZ null 126 447 FmDC exch pop null]/Title(size-of)/OUT FmPD
[/Page 17/View[/XYZ null 108 792 FmDC exch pop null]/Title(alignment-of)/OUT FmPD
[/Page 17/View[/XYZ null 138 677 FmDC exch pop null]/Title(1.5.3 Fundamental numeric type designator classes)/Count -4/OUT FmPD
[/Page 20/View[/XYZ null 126 744 FmDC exch pop null]/Title(<C-number>)/OUT FmPD
[/Page 20/View[/XYZ null 126 674 FmDC exch pop null]/Title(<C-float>)/OUT FmPD
[/Page 20/View[/XYZ null 126 643 FmDC exch pop null]/Title(<C-double>)/OUT FmPD
[/Page 20/View[/XYZ null 126 612 FmDC exch pop null]/Title(<C-long-double>)/OUT FmPD
[/Page 20/View[/XYZ null 156 482 FmDC exch pop null]/Title(1.5.4 Pointer designator classes and related funct...)/Count -48/OUT FmPD
[/Page 20/View[/XYZ null 126 323 FmDC exch pop null]/Title(<C-pointer>)/OUT FmPD
[/Page 21/View[/XYZ null 108 730 FmDC exch pop null]/Title(pointer-address)/OUT FmPD
[/Page 21/View[/XYZ null 108 641 FmDC exch pop null]/Title(as)/OUT FmPD
[/Page 21/View[/XYZ null 108 552 FmDC exch pop null]/Title(null-pointer)/OUT FmPD
[/Page 21/View[/XYZ null 108 463 FmDC exch pop null]/Title(null-pointer?)/OUT FmPD
[/Page 21/View[/XYZ null 108 388 FmDC exch pop null]/Title(<C-untyped-pointer>)/OUT FmPD
[/Page 21/View[/XYZ null 108 318 FmDC exch pop null]/Title(<C-void*>)/OUT FmPD
[/Page 22/View[/XYZ null 126 792 FmDC exch pop null]/Title(<C-statically-typed-pointer>)/OUT FmPD
[/Page 22/View[/XYZ null 126 722 FmDC exch pop null]/Title(define C-pointer-type)/OUT FmPD
[/Page 22/View[/XYZ null 126 563 FmDC exch pop null]/Title(referenced-type)/OUT FmPD
[/Page 22/View[/XYZ null 126 460 FmDC exch pop null]/Title(pointer-value)/OUT FmPD
[/Page 22/View[/XYZ null 126 407 FmDC exch pop null]/Title(pointer-value-setter)/OUT FmPD
[/Page 23/View[/XYZ null 108 586 FmDC exch pop null]/Title(pointer-value-address)/OUT FmPD
[/Page 23/View[/XYZ null 108 453 FmDC exch pop null]/Title(element)/OUT FmPD
[/Page 23/View[/XYZ null 108 345 FmDC exch pop null]/Title(element-setter)/OUT FmPD
[/Page 24/View[/XYZ null 126 761 FmDC exch pop null]/Title(-)/OUT FmPD
[/Page 24/View[/XYZ null 126 708 FmDC exch pop null]/Title(=)/OUT FmPD
[/Page 24/View[/XYZ null 126 655 FmDC exch pop null]/Title(<)/OUT FmPD
[/Page 24/View[/XYZ null 126 347 FmDC exch pop null]/Title(C-unsigned-char-at)/OUT FmPD
[/Page 25/View[/XYZ null 108 792 FmDC exch pop null]/Title(C-unsigned-char-at-setter)/OUT FmPD
[/Page 25/View[/XYZ null 108 728 FmDC exch pop null]/Title(C-signed-char-at)/OUT FmPD
[/Page 25/View[/XYZ null 108 675 FmDC exch pop null]/Title(C-signed-char-at-setter)/OUT FmPD
[/Page 25/View[/XYZ null 108 611 FmDC exch pop null]/Title(C-char-at)/OUT FmPD
[/Page 25/View[/XYZ null 108 558 FmDC exch pop null]/Title(C-char-at-setter)/OUT FmPD
[/Page 25/View[/XYZ null 108 494 FmDC exch pop null]/Title(C-unsigned-short-at)/OUT FmPD
[/Page 25/View[/XYZ null 108 430 FmDC exch pop null]/Title(C-unsigned-short-at-setter)/OUT FmPD
[/Page 25/View[/XYZ null 108 366 FmDC exch pop null]/Title(C-signed-short-at)/OUT FmPD
[/Page 25/View[/XYZ null 108 313 FmDC exch pop null]/Title(C-signed-short-at-setter)/OUT FmPD
[/Page 26/View[/XYZ null 126 792 FmDC exch pop null]/Title(C-short-at)/OUT FmPD
[/Page 26/View[/XYZ null 126 739 FmDC exch pop null]/Title(C-short-at-setter)/OUT FmPD
[/Page 26/View[/XYZ null 126 675 FmDC exch pop null]/Title(C-unsigned-long-at)/OUT FmPD
[/Page 26/View[/XYZ null 126 622 FmDC exch pop null]/Title(C-unsigned-long-at-setter)/OUT FmPD
[/Page 26/View[/XYZ null 126 558 FmDC exch pop null]/Title(C-signed-long-at)/OUT FmPD
[/Page 26/View[/XYZ null 126 505 FmDC exch pop null]/Title(C-signed-long-at-setter)/OUT FmPD
[/Page 26/View[/XYZ null 126 441 FmDC exch pop null]/Title(C-long-at)/OUT FmPD
[/Page 26/View[/XYZ null 126 388 FmDC exch pop null]/Title(C-long-at-setter)/OUT FmPD
[/Page 26/View[/XYZ null 126 324 FmDC exch pop null]/Title(C-unsigned-int-at)/OUT FmPD
[/Page 27/View[/XYZ null 108 792 FmDC exch pop null]/Title(C-unsigned-int-at-setter)/OUT FmPD
[/Page 27/View[/XYZ null 108 728 FmDC exch pop null]/Title(C-signed-int-at)/OUT FmPD
[/Page 27/View[/XYZ null 108 675 FmDC exch pop null]/Title(C-signed-int-at-setter)/OUT FmPD
[/Page 27/View[/XYZ null 108 611 FmDC exch pop null]/Title(C-int-at)/OUT FmPD
[/Page 27/View[/XYZ null 108 558 FmDC exch pop null]/Title(C-int-at-setter)/OUT FmPD
[/Page 27/View[/XYZ null 108 494 FmDC exch pop null]/Title(C-double-at)/OUT FmPD
[/Page 27/View[/XYZ null 108 441 FmDC exch pop null]/Title(C-double-at-setter)/OUT FmPD
[/Page 27/View[/XYZ null 108 377 FmDC exch pop null]/Title(C-float-at)/OUT FmPD
[/Page 27/View[/XYZ null 108 324 FmDC exch pop null]/Title(C-float-at-setter)/OUT FmPD
[/Page 28/View[/XYZ null 126 792 FmDC exch pop null]/Title(C-pointer-at)/OUT FmPD
[/Page 28/View[/XYZ null 126 739 FmDC exch pop null]/Title(C-pointer-at-setter)/OUT FmPD
[/Page 28/View[/XYZ null 156 677 FmDC exch pop null]/Title(1.5.5 Structure types)/Count -1/OUT FmPD
[/Page 28/View[/XYZ null 126 642 FmDC exch pop null]/Title(<C-struct>)/OUT FmPD
[/Page 28/View[/XYZ null 156 512 FmDC exch pop null]/Title(1.5.6 Union types)/Count -1/OUT FmPD
[/Page 28/View[/XYZ null 126 477 FmDC exch pop null]/Title(<C-union>)/OUT FmPD
[/Page 28/View[/XYZ null 156 353 FmDC exch pop null]/Title(1.5.7 Notes on C type macros)/OUT FmPD
[/Page 29/View[/XYZ null 134 477 FmDC exch pop null]/Title(1.6 Defining types)/Count -4/OUT FmPD
[/Page 29/View[/XYZ null 138 407 FmDC exch pop null]/Title(1.6.1 Defining specialized versions of designator ...)/Count -1/OUT FmPD
[/Page 29/View[/XYZ null 108 372 FmDC exch pop null]/Title(define C-subtype)/OUT FmPD
[/Page 32/View[/XYZ null 156 656 FmDC exch pop null]/Title(1.6.2 Defining specialized designator classes)/Count -1/OUT FmPD
[/Page 32/View[/XYZ null 126 621 FmDC exch pop null]/Title(define C-mapped-subtype)/OUT FmPD
[/Page 36/View[/XYZ null 156 792 FmDC exch pop null]/Title(1.6.3 Describing structure types)/Count -1/OUT FmPD
[/Page 36/View[/XYZ null 126 757 FmDC exch pop null]/Title(define C-struct)/OUT FmPD
[/Page 39/View[/XYZ null 138 792 FmDC exch pop null]/Title(1.6.4 Describing union types)/Count -1/OUT FmPD
[/Page 39/View[/XYZ null 108 757 FmDC exch pop null]/Title(define C-union)/OUT FmPD
[/Page 40/View[/XYZ null 152 580 FmDC exch pop null]/Title(1.7 Functions)/Count -4/OUT FmPD
[/Page 40/View[/XYZ null 156 510 FmDC exch pop null]/Title(1.7.1 Function types)/Count -1/OUT FmPD
[/Page 40/View[/XYZ null 126 441 FmDC exch pop null]/Title(<C-function-pointer>)/OUT FmPD
[/Page 41/View[/XYZ null 138 792 FmDC exch pop null]/Title(1.7.2 Describing C functions to Dylan)/Count -1/OUT FmPD
[/Page 41/View[/XYZ null 108 757 FmDC exch pop null]/Title(define C-function)/OUT FmPD
[/Page 45/View[/XYZ null 138 535 FmDC exch pop null]/Title(1.7.3 Describing Dylan functions for use by C)/Count -1/OUT FmPD
[/Page 45/View[/XYZ null 108 500 FmDC exch pop null]/Title(define C-callable-wrapper)/OUT FmPD
[/Page 49/View[/XYZ null 138 485 FmDC exch pop null]/Title(1.7.4 Variables)/Count -2/OUT FmPD
[/Page 49/View[/XYZ null 108 430 FmDC exch pop null]/Title(define C-variable)/OUT FmPD
[/Page 50/View[/XYZ null 126 419 FmDC exch pop null]/Title(define C-address)/OUT FmPD
[/Page 51/View[/XYZ null 134 792 FmDC exch pop null]/Title(1.8 Allocating and deallocating C storage)/Count -3/OUT FmPD
[/Page 51/View[/XYZ null 108 672 FmDC exch pop null]/Title(make subclass\(<C-pointer>\))/OUT FmPD
[/Page 52/View[/XYZ null 126 448 FmDC exch pop null]/Title(destroy)/OUT FmPD
[/Page 53/View[/XYZ null 108 744 FmDC exch pop null]/Title(with-stack-structure)/OUT FmPD
[/Page 54/View[/XYZ null 152 792 FmDC exch pop null]/Title(1.9 Utility designator classes)/Count -9/OUT FmPD
[/Page 54/View[/XYZ null 126 720 FmDC exch pop null]/Title(<C-boolean>)/OUT FmPD
[/Page 54/View[/XYZ null 126 622 FmDC exch pop null]/Title(<C-string>)/OUT FmPD
[/Page 54/View[/XYZ null 126 482 FmDC exch pop null]/Title(A <byte-string> may only be safely passed to a C f...)/OUT FmPD
[/Page 54/View[/XYZ null 126 412 FmDC exch pop null]/Title(with-c-string)/OUT FmPD
[/Page 55/View[/XYZ null 108 716 FmDC exch pop null]/Title(<C-Dylan-object>)/OUT FmPD
[/Page 55/View[/XYZ null 108 514 FmDC exch pop null]/Title(register-C-Dylan-object)/OUT FmPD
[/Page 55/View[/XYZ null 108 461 FmDC exch pop null]/Title(unregister-C-Dylan-object)/OUT FmPD
[/Page 56/View[/XYZ null 126 716 FmDC exch pop null]/Title(export-C-Dylan-object)/OUT FmPD
[/Page 56/View[/XYZ null 126 641 FmDC exch pop null]/Title(import-C-Dylan-object)/OUT FmPD
[/Page 57/View[/XYZ null 109 730 FmDC exch pop null]/Title(Dylan Win32 API Libraries)/Count 9/OUT FmPD
[/Page 57/View[/XYZ null 134 576 FmDC exch pop null]/Title(2.1 Introduction)/OUT FmPD
[/Page 58/View[/XYZ null 152 792 FmDC exch pop null]/Title(2.2 Win32 libraries provided)/OUT FmPD
[/Page 59/View[/XYZ null 134 558 FmDC exch pop null]/Title(2.3 Content and organization of the Win32 API libr...)/Count -1/OUT FmPD
[/Page 60/View[/XYZ null 156 792 FmDC exch pop null]/Title(2.3.1 Notes on the translations)/OUT FmPD
[/Page 60/View[/XYZ null 152 601 FmDC exch pop null]/Title(2.4 Index of Win32 IDs excluded from the Dylan lib...)/Count -20/OUT FmPD
[/Page 61/View[/XYZ null 138 792 FmDC exch pop null]/Title(2.4.1 Characters)/OUT FmPD
[/Page 61/View[/XYZ null 138 729 FmDC exch pop null]/Title(2.4.2 A)/OUT FmPD
[/Page 61/View[/XYZ null 138 655 FmDC exch pop null]/Title(2.4.3 B)/OUT FmPD
[/Page 61/View[/XYZ null 138 592 FmDC exch pop null]/Title(2.4.4 C)/OUT FmPD
[/Page 61/View[/XYZ null 138 529 FmDC exch pop null]/Title(2.4.5 D)/OUT FmPD
[/Page 61/View[/XYZ null 138 466 FmDC exch pop null]/Title(2.4.6 E)/OUT FmPD
[/Page 61/View[/XYZ null 138 414 FmDC exch pop null]/Title(2.4.7 F)/OUT FmPD
[/Page 62/View[/XYZ null 156 792 FmDC exch pop null]/Title(2.4.8 G)/OUT FmPD
[/Page 62/View[/XYZ null 156 564 FmDC exch pop null]/Title(2.4.9 H)/OUT FmPD
[/Page 62/View[/XYZ null 162 512 FmDC exch pop null]/Title(2.4.10 L)/OUT FmPD
[/Page 62/View[/XYZ null 162 449 FmDC exch pop null]/Title(2.4.11 M)/OUT FmPD
[/Page 62/View[/XYZ null 162 397 FmDC exch pop null]/Title(2.4.12 N)/OUT FmPD
[/Page 62/View[/XYZ null 162 345 FmDC exch pop null]/Title(2.4.13 O)/OUT FmPD
[/Page 63/View[/XYZ null 144 792 FmDC exch pop null]/Title(2.4.14 P)/OUT FmPD
[/Page 63/View[/XYZ null 144 729 FmDC exch pop null]/Title(2.4.15 R)/OUT FmPD
[/Page 63/View[/XYZ null 144 666 FmDC exch pop null]/Title(2.4.16 S)/OUT FmPD
[/Page 63/View[/XYZ null 144 526 FmDC exch pop null]/Title(2.4.17 U)/OUT FmPD
[/Page 63/View[/XYZ null 144 474 FmDC exch pop null]/Title(2.4.18 V)/OUT FmPD
[/Page 63/View[/XYZ null 144 422 FmDC exch pop null]/Title(2.4.19 W)/OUT FmPD
[/Page 64/View[/XYZ null 162 792 FmDC exch pop null]/Title(2.4.20 Y)/OUT FmPD
[/Page 64/View[/XYZ null 152 740 FmDC exch pop null]/Title(2.5 API naming and mapping conventions)/Count -6/OUT FmPD
[/Page 64/View[/XYZ null 156 656 FmDC exch pop null]/Title(2.5.1 Simple naming conventions)/OUT FmPD
[/Page 64/View[/XYZ null 156 473 FmDC exch pop null]/Title(2.5.2 Mapping the null value)/OUT FmPD
[/Page 64/View[/XYZ null 156 322 FmDC exch pop null]/Title(2.5.3 Mapping C types onto Dylan classes)/OUT FmPD
[/Page 66/View[/XYZ null 156 670 FmDC exch pop null]/Title(2.5.4 Creating methods from Windows alias function...)/OUT FmPD
[/Page 66/View[/XYZ null 156 533 FmDC exch pop null]/Title(2.5.5 Mapping C structure fields onto Dylan slot n...)/OUT FmPD
[/Page 66/View[/XYZ null 156 328 FmDC exch pop null]/Title(2.5.6 Handling return of multiple values)/OUT FmPD
[/Page 67/View[/XYZ null 134 612 FmDC exch pop null]/Title(2.6 Defining callback functions)/OUT FmPD
[/Page 68/View[/XYZ null 152 690 FmDC exch pop null]/Title(2.7 Dealing with the C function WinMain)/OUT FmPD
[/Page 69/View[/XYZ null 134 491 FmDC exch pop null]/Title(2.8 Combining bit mask constants)/OUT FmPD
[/Page 70/View[/XYZ null 152 678 FmDC exch pop null]/Title(2.9 Other minor details)/OUT FmPD
FMENDPAGE
%%EndPage: "68" 72
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 72
%%DocumentFonts: Palatino-Roman
%%+ Palatino-Italic
%%+ Palatino-Bold
%%+ Helvetica-Narrow-Bold
%%+ Courier-Bold
%%+ Courier-BoldOblique
%%+ Palatino-BoldItalic
%%EOF
