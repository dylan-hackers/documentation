%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.1
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%-
%- Frame ps_prolog 5.0, for use with Frame 5.0 products
%- This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
%- All rights reserved.  This ps_prolog file may be freely copied and 
%- distributed in conjunction with documents created using FrameMaker, 
%- FrameMaker/SGML FrameReader and FrameViewer as long as this 
%- copyright notice is preserved.
%-
%- FrameMaker users specify the proper paper size for each print job in the
%- "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
%- printer that the PS file is sent to does not support the requested paper
%- size, or if there is no paper tray of the proper size currently installed, 
%- then the job will not be printed.  The following flag, if set to true, will
%- cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            true def
%-
%- Frame products normally print colors as their true color on a color printer
%- or as shades of gray, based on luminance, on a black-and white printer. The
%- following flag, if set to true, forces all non-white colors to print as pure
%- black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%-
%- Frame products can either set their own line screens or use a printer's 
%- default settings. Three flags below control this separately for no 
%- separations, spot separations and process separations. If a flag
%- is true, then the default printer settings will not be changed. If it is
%- false, Frame products will use their own settings from a table based on
%- the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%-
%- For any given PostScript printer resolution, Frame products have two sets of 
%- screen angles and frequencies for printing process separations, which are 
%- recomended by Adobe. The following variable chooses the higher frequencies
%- when set to true or the lower frequencies when set to false. This is only
%- effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%-
%- The following is a set of predefined optimal frequencies and angles for various
%- common dpi settings. This is taken from "Advances in Color Separation Using
%- PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
%- and corrolated with information which is in various PPD (4.0) files.
%-
%- The "dpiranges" figure is the minimum dots per inch device resolution which
%- can support this setting. The "low" and "high" values are controlled by the
%- setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
%- the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
%- three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%-
%- PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
%- to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
%- (too badly) against the screen frequencies of any separations for that DPI.
% This is computed by taking dpi/9 as the ideal pixels per repetition, and then
% computing a tiling size in printer pixels for each of the four separations as 
% (dpi/screenFreq)*(cos(screenAngle)+sin(screenAngle)) Actually, this is the same 
% for Cyan and Magenta). Then, we take a "nice" LCM of the tile sizes close to
% the desired pattern tile where the beat factor is not more than 2 or 3.
%
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def

/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def

/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%-
%- PostScript Level 2 printers contain an "Accurate Screens" feature which can
%- improve process separation rendering at the expense of compute time. This 
%- flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%-
%- The following PostScript procedure defines the spot function that Frame
%- products will use for process separations. You may un-comment-out one of
%- the alternative functions below, or use your own.
%-
%- Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%-
%- Line function
%- /FMSpotFunction { pop } def
%-
%- Elipse function
%- /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%-		sqrt 1 exch sub } def
%-
%-

/FMversion (5.0) def % matches PS_VERSION in fmprintdriver

% PostScript Level 1 = true, 2 = false
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def

% Set up Color vs. Black-and-White
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
%		statusdict /processcolors known {
%			statusdict /processcolors get exec
%		} {1} ifelse
%		1 gt
		true
	} ifelse
def

/FrameDict 400 dict def % should check this value each time changes made

%
% For NeWS we add a fake errordict, so we can psh files
%
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if

%- The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put % save old rangecheck
errordict /rangecheck {FrameDict /bug true put} put % will flag bug found
FrameDict /bug false put % flag bug not found
mark % since we're not sure what will happen next
%- Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark % junk from readline and rangecheck
errordict /rangecheck FrameDict /tmprangecheck get put % restore rangecheck
FrameDict /bug get { % redefine readline if last one got a rangecheck
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop % get a char
			dup 10 eq {exit} if % exit if LF
			dup 13 eq {exit} if % exit if CR
			gstring exch gindex exch put % store it away
			/gindex gindex 1 add def % bump index
		} loop
		pop % eol character
		gstring 0 gindex getinterval true % simulate real readline
		} bind def
	} if

% outer-world defs

/FMshowpage /showpage load def
/FMquit /quit load def

/FMFAILURE { % enter with two error strings on the stack
	dup = flush % send a copy of the message to the console
	FMshowpage % msg on a page by itself, so it can't be, say, black on black
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage % we might be in the middle of some EPS, where "showpage"
	FMquit % and "quit" are redefined
	} def % only used once at most, so no bind

/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def % only used at startup, so no bind

/FMBADEPSF { % Call with bad operator name on stack (as a string)
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length % parmstr errstr errstr indx
	5 -1 roll % errstr errstr index parmstr
	putinterval % errstr
	FMFAILURE
	} def

% standard concatprocs routine
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def

% Put all local variables here in alphabetical order.
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall

% Start of PDF/Acrobat support

% Bind def
/FmBD {bind def} bind def

systemdict /pdfmark known {
	/fMAcrobat true def

	% FmPD is a conditional PDFMark
	/FmPD /pdfmark load def
	
	% FmPT is a show text operator which only show up when distiller is active
	/FmPT /show load def
	
	% FmPD2 and FmPA are Acrobat 2.0-specific
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		% FmPD2 is like FmPD but for Acrobat 2.0-specific PDF
		/FmPD2 /pdfmark load def
		
		% x y/name FmPA
		% 	is equivalent to
		% [/Dest/name/View[/FitH x y FmDC exch pop]/DEST FmPD
		% It is a shortcut for pagragraph Uinique ID designators whic occurr commonly.
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		% These are No-Ops for Distiller 1.0
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	% these are the No-Ops for regular PostScript
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse

% This convert a set of X Y coordinates from the current user space to the default
% PostScript coordinates needed by some pdfmark variants. We also convert to 
% integer because the distiller doesn't always like floats!
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD

% This converts four numbers into a bounding box making sure the first two are maller than the last two
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD

% End of PDF/Acrobat support

%
% Color separation code
%

% Constants.

/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def

/fMNegative false def % we are inverting the page

% Variables.

/FrameSepIs FMnone def % separation we are printing
% If FrameSepIs is FMcustom, this is the custom color
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def

/FrameCurColors [ 0 0 0 1 0 0 0 ] def % c m y k r g b

% Utility routines

/FrameColorEpsilon .001 def	% epsilon by which values can differ and sill be equal
/eqepsilon {		% v1 v2 eqeps bool
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def

% are the cmyk and cmykrgb arrays on the stack the same color?
/FrameCmpColorsCMYK { % [ c1 m1 y1 k1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
% are the rgb and cmykrgb arrays on the stack the same color?
/FrameCmpColorsRGB { % [ r1 g1 b1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def

% convert r g b to c m y k
/RGBtoCMYK { % r g b
	1 exch sub % r g y
	3 1 roll % y r g
	1 exch sub % y r m
	3 1 roll % m y r
	1 exch sub % m y c
	3 1 roll % c m y
	3 copy % c m y c m y
	2 copy % c m y c m y m y
	le { pop } { exch pop } ifelse % c m y c min(m,y)
	2 copy % c m y c min(m,y) c min(m,y)
	le { pop } { exch pop } ifelse % c m y min(c, min(m,y))
	dup dup dup % c m y k k k k
	6 1 roll % c k m y k k k
	4 1 roll % c k m k y k k
	7 1 roll % k c k m k y k
	sub % k c k m k y
	6 1 roll % y k c k m k
	sub % y k c k m
	5 1 roll % m y k c k
	sub % m y k c
	4 1 roll % c m y k 
} bind def
/CMYKtoRGB { % c m y k CMYKtoRGB r g b
	dup dup 4 -1 roll add 						  % c m k k y+k
	5 1 roll 3 -1 roll add 						  % y+k c k m+k
	4 1 roll add 								  % m+k y+k c+k
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  % r m+k y+k
	1 exch sub dup 0 lt {pop 0} if exch 	      % r b m+k
	1 exch sub dup 0 lt {pop 0} if exch	  		  % r g b
} bind def

% Public routines


% Happens at the top of each page that is a separation
/FrameSepInit {
	1.0 RealSetgray
} bind def
% Tell the separation code that this separation is for a custom color
/FrameSetSepColor { % c m y k r g b
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
% Tell the separation code that this separation is Cyan
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
% Tell the separation code that this separation is Magenta
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Yellow
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Black
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
% Tell the separation code we are not doing a separation
/FrameNoSep { %
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def

% Initialize the separation code with all the custom colors we are
% separating (not process colors)
/FrameSetSepColors { % list of arrays of [c m y k r g b] count 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  % array of arrays of colors we are separating
	exch def end
	} bind def

% is this color array in the array of custom color separations?
/FrameColorInSepListCMYK { % [ c m y k ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsCMYK % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { % [ r g b ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsRGB % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def

% Level 1 color operators saved and redefined
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 

% Setgray patch
/setgray { % num
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ % go to white unless the current sep color is black
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { % r g b
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] % r g b [ r g b ]
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor % safe since we will overwrite the color state
		currentrgbcolor  % r g b - Let PostsCript to the conversion.
		setrgbcolor % call our version
	} 
	ifelse
	end
} bind def
FrameDict begin

/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { % c m y k
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put

% Set up a prototype pattern for PostScript Level 2
fMLevel1 { 
	% set up screen functions for the patterns in PS level 1
	% each entry contains an angle, spot function, flipped spot function,
	% gray level and frequency multiplier.
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { % prototype level 2 pattern dictionary
	% define some PostScript procedures for known jaggy patterns.
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		% Always 1 for PS Level 2
		/PaintType 2 def		% Uncolored pattern
		/TilingType 3 def		% constant spacing and faster tiling
		/BBox [ 0 0 8 8 ] def 	% bounding box
		/XStep 8 def			% X offset
		/YStep 8 def			% Y offset
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse

%combineColor puts together the current gray value (which could also be
%a fraction of on bits for a fill pattern and the current color and calls
%the appropriate function
%
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { % separation case
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				% Level 1 patterns are either all there or not there at all
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def

/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
% freq and sangle are used for ps Level 1 pattern building.
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def

%
% screen index depending on dpi
%	- screenIndex smallint
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def

%
% These routines get the standard Adobe frequencies, angles, and spot functions
% depending on the DPI
%
% - getCyanScreen freq angle spotfunction
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getMagentaScreen freq angle spotFunction
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getYellowScreen freq angle spotFunction
% note that some of these use a "tripple dot" function at 1/3 the frequency
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def

%
% - getBlackScreen freq angle spotFunction
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def

%
% - getSpotScreen freq angle spotFunction
/getSpotScreen {
	getBlackScreen
} bind def

%
% - getCompositeScreen freq angle spotFunction
/getCompositeScreen {
	getBlackScreen
} bind def

% FmSetScreen sets the screen for either PostScript Level 1 or Level 2 and optionally
% sets the accuratescreens flag in the latter case
% freq angle spotfunction FMSetScreen -
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def

% This sets the default screen as was set at the beginning of the job
% - setDefaultScreen -
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def

% This sets the current screen depending on FrameSepIs
% - setCurrentScreen -
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def


end

% End of Color separation code
%
	
/FMDOCUMENT { % xscale yscale edown negative paperwidth paperheight manfeed numcopies numfonts
	array /FMfonts exch def % Why isn't this in FrameDict???
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def % invert page
	0 ne /edown exch def % flip page along y axis
	/yscale exch def
	/xscale exch def

	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def % some PS's leave junk on dict ...
		/FMoptop count def % ...or on operand stack...
		setpapername % This stuff may alter the transfer/screen/angle
		manualfeed {true} {papersize} ifelse % true->more work to do
		{manualpapersize} {false} ifelse % true->more work to do
		{desperatepapersize} {false} ifelse % true->failed completely
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for %...if tray not installed
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse % fMLevel1
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def

			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse

	end % FrameDict
} def % only used at startup, so no bind

/FMBEGINPAGE { % pagewidth pageheight landscape color-arrays count
	FrameDict begin % for the whole page...
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { % check for landscape
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
% paint the whole page in "white".  If the page is inverted, then
% this will actually paint our black background
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave % for CLIP
} def % only used infrequently, so no bind

/FMENDPAGE {
	grestore % for CLIP
	pagesave restore
	end % FrameDict
	showpage
	} def % only used infrequently, so no bind

/FMFONTDEFINE { % fontindex nonstd_encoding fontname -- 
	FrameDict begin
	findfont % fontindex nonstd_encoding font
	ReEncode % fontindex font'
	1 index exch % fontindex fontindex font'
	definefont % fontindex font"
	FMfonts 3 1 roll %  FMfonts fontindex font"
	put
	end % FrameDict
	} def % only used infrequently, so no bind

/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end % framedict
	} def % Only called once, so no bind

/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end % FrameDict
	} def % only used infrequently, so no bind

% Set things to a known, quiescent state, for when we switch to another writer
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray % Not FMsetgray; only called outside of our environment!
	} bind def

/FMBEGINEPSF { % <theta> llx lly urx ury fw fh fx fy
	end % FrameDict
	/FMEPSF save def % in userdict
	/showpage {} def % this def is in userdict
%- See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
%- "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def % FMBADEPSF knows this is the longest!
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
%	/initmatrix {(initmatrix) FMBADEPSF} def	% Aldus Freehand 4.0 epsf uses this harmlessly <Gus 4/26/95>
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall % neat trick
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale % then scale
	llx neg lly neg translate % then compensate for LL offset 
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count def % tricky! "/FMoptop" on stack
	} bind def

/FMENDEPSF {
	count -1 FMoptop {pop pop} for % clear EPS junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMEPSF restore
	FrameDict begin % for the whole page...
	} bind def

FrameDict begin % put most defs here

/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def

/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def

/pagedimen { % name width height
	paperheight sub abs 16 lt exch % 16pt is an arbitrary slop amount
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def

/setpapername { % Already set up: paperwidth paperheight and manualfeed
	/papersizedict 14 dict def % one for /papername, one for /unknown
	papersizedict begin
	/papername /unknown def % in case no match
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def

/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end % return true if more work to do
	} bind def

/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped % return true if more work to do
	} bind def

/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped % return true iff failed
		end
		} {true} ifelse % return true iff failed
	} bind def

/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def

%
% Font re-encoding to include diacritics
% 
/DiacriticEncoding [

/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron

] def

/ReEncode { % nonstd_encoding font -- reencodedfont
	dup % nonstd_encoding font font
	length % nonstd_encoding font dictlength
	dict begin % nonstd_encoding font % currentdict = newdict
	{% forall % forall is over font to be copied
	1 index /FID ne % skip FID
		{def} % defs go into newfontdict which is currentdict
		{pop pop} ifelse % copy all keys including /Encoding
	} forall % nonstd_encoding
	0 eq {/Encoding DiacriticEncoding def} if % --
	currentdict % push a copy of the copied font dict onto operand stack
	end % font' % before popping it off dictionary stack
	} bind def

FMPColor 
	% setup procs for color printing
	{

	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	% setup procs for B&W printing
	{
	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse

/K { % c m y k r g b SEPARATION
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
%
% graymode is true if we are just doing gray fills, this way do not keep calling
% setscreen. I don't know what the cost is on calling setscreen with defaults, but
% this is easy to keep track of, and we know for sure we aren't wasting cycles.
% if graymode is false and fMLevel1 is false, then we are using Level 2 patterns.
%
/graymode true def

% used by level 1 patterns
% defaultflip matrixentry fmGetFlit -> eith -1 or 1
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if

/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop % angle spot fspot gray mult
			freq 								% freq
			mul									% times multiplier
			5 2 roll							% angle spot fspot gray mult freq -> gray freq angle spot fspot
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		% landscape
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								% portrait     
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		% take regular or flipped spot function
			fMNegative { 
				{neg} fmConcatProcs 			% invert spot function
			} if
			bind
			% we need to bypass any screen filter and go directly to systemdict
			% to avoid problems with Kodak Precision calibration software
			% <Gus 9/13/93>
			systemdict /setscreen get exec		% leave graylevel on stack
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { % Level 2 version
		pop pop
		dup patCache exch known {
			patCache exch get
		} { % not in cache
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
%			9 orgfreq 
%				organgle sin abs organgle cos abs add div
%				dup 16 div round dup 0 le {pop 1} if  % Unix pattern size
%			    dup  9 div round dup 0 le {pop 1} if  % Mac larger (WYSIWYG) size
%					div div dup matrix scale % This gives Unix pattern size.
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def

/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def

/normalize {
	transform round exch round exch itransform
	} bind def

/dnormalize {
	dtransform round exch round exch idtransform
	} bind def

/lnormalize { % line widths are always odd so that arrow heads work
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def

/H { % THICK
	lnormalize setlinewidth
	} bind def

/Z {
	setlinecap
	} bind def
	
% This is used to fill or stroke white behind a Level 2 pattern
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def

/X { % TEXTURE
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} % Silly to pass parameters here
	{setGrayScaleMode}
	ifelse
	} bind def

/V { % FILL
	PFill gsave eofill grestore
	} bind def

/Vclip {
	clip
	} bind def

/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/N { % PEN
	PStroke
	} bind def

/Nclip {
	strokepath clip newpath
	} bind def

/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def

/L { % POLYLINE
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def

/Y { % POLYGON !!!
	L % POLYLINE
	closepath
	} bind def

/R { % RECT x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y % POLYGON
	} bind def

/rarc % Leaves all sorts of junk on the operand stack for caller to clear off
	{rad % arcto might fail if we're scaled way down
	 arcto
	} bind def

/RR { % ROUNDRECT x1 y1 x2 y2 r
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if % in case rarc failed for degenerate arcs
	cleartomark
	} bind def

/RRR { % ROUNDRECT ROTATED xs ys x1 y1 x2 y2 x3 y3 x4 y4 r
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto % eats xs ys
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def

/C { % CLIP
	grestore
	gsave
	R % RECT
	clip
	setCurrentScreen
} bind def

/CP { % CLIPPOLY p1x p1y p2x p2y ... n 
	grestore
	gsave
	Y % POLYGON
	clip
	setCurrentScreen
} bind def

/F { % FONT
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def

/Q { % POINTSIZE (& font)
	/FMpointsize exch def
	F % could be slightly optimized here
	} bind def

/T { % TEXT <string> <x> <y>
	moveto show
	} bind def

% Callers of RF (rotate/flip) must gsave (or save) first; (g)restore when done
/RF { % <flip> <theta>
	rotate
	0 ne {-1 1 scale} if
	} bind def

/TF { % TEXTFLIPROTATE <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	show
	grestore
	} bind def

/P { % PADTEXT <pad> <string> <x> <y>
	moveto
	0 32 3 2 roll widthshow
	} bind def

/PF { % PADTEXTFLIPROTATE <pad> <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def

/S { % SPREADTEXT <spread> <string> <x> <y>
	moveto
	0 exch ashow
	} bind def

/SF { % SPREADTEXTFLIPROTATE <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def

/B { % PADSPREADTEXT <pad> <spread> <string> <x> <y>
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def

/BF { % PADSPREADTEXTFLIPROTATE <pad> <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def

/G { % ARCFILL theta1 theta2 width height x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	PFill fill
	grestore
	} bind def

/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
    normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
    translate
    scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def

/Gclip { % ARCFILL theta1 theta2 width height x y swid
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	clip newpath
	restorematrix
	} bind def

/GG { % ARCFILL ROTATED theta1 theta2 width height angle x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	rotate % eats angle
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath
	PFill
	fill
	grestore
	} bind def

/GGclip { % ARCFILL ROTATED theta1 theta2 width height angle x y
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	clip newpath
	restorematrix
	} bind def

/GGstrk { % ARCFILL ROTATED swid theta1 theta2 width height angle x y
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/A { % ARCPEN theta1 theta2 width height x y
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
	normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
	translate 
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	strokepath clip newpath
	restorematrix
} bind def

/Astrk {
	Gstrk
} bind def

/AA { % ARCPEN ROTATED theta1 theta2 width height angle x y
	gsave
	savematrix
	newpath
	% theta1 theta2 width height angle x y
	3 index 2 div add exch 4 index 2 div sub exch 
	% theta1 theta2 width height angle x y
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate % eats x y
	rotate % eats angle
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	strokepath clip newpath
	restorematrix
} bind def

/AAstrk {
	GGstrk
} bind def

/BEGINPRINTCODE { % -x -y width height
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count 7 sub def % tricky! 7 params on stack, plus "/FMoptop"
	/FMsaveobject save def
	userdict begin % insulate user from FrameDict; not in /FMdicttop count
	/showpage {} def % this def is in userdict
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	3 index neg 3 index neg translate
	} bind def

/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for % clear user junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMsaveobject restore % this is now safe, unless user very malicious
	} bind def

/gn { % get a number in a funny encoding scheme
	0 % result on stack
	{	46 mul % shift old digits
		cf read pop % get next character
		32 sub % zero is the space character
		dup 46 lt {exit} if % quit if we're the last digit
		46 sub add % add in this digit and loop around for next
		} loop
	add % result on stack
	} bind def

/cfs { % create a string of length "sl" filled with "val"s
	/str sl string def % create string as "str"
	0 1 sl 1 sub {str exch val put} for % fill array
	str def % define real array name, too; name is on stack from caller
	} bind def

/ic [ % "case" stmt list of procedures that the image commands should call
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def

/ms { % make all the strings
	/sl exch def % remember length of currently existing strings
	/val 255 def % that's white
	/ws cfs % make "ws" a string filled with white
	/im cfs % and "im" is a complete image scanline
	/val 0 def % that's black
	/bs cfs % make "bs" a string filled with black
	/cs cfs % here's where we'll put complete command lines
	} bind def

400 ms % make strings that will be plenty long for most applications

/ip { % image procedure; reads and executes commands to make scanlines
	is % leave image string and...
	0 % ...image position on stack all through this procedure
	cf cs readline pop % get a string of commands
	{	ic exch get exec % execute next command
		add % all commands leave a length on the stack; update pos
		} forall % step through all commands
	pop % get rid of image position pointer
	% image string left on stack, so it's returned to image primitive
	} bind def
/rip { % this is similar to ip above, except for 24 bit images
	   % this takes an extra argument, the width of the image
	  % do red
	  bis ris copy pop % copy blue to red
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  ris gis copy pop % copy red to green
	  dup is exch % position of green is width bytes into is
	  % do green
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop % copy green to blue
	  dup add is exch % position of blue is 2*width bytes into is
	  % do blue
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def

/rip4 { % this is similar to ip above, except for 32 bit images
	   % this takes an extra argument, the width of the image
	  % do cyan
	  kis cis copy pop % copy black to cyan
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  cis mis copy pop % copy cyan to magenta
	  dup is exch % position of magenta is width bytes into is
	  % do magenta
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop % copy magenta to yellow
	  dup dup add is exch % position of yellow is 2*width bytes into is
	  % do yellow
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop % copy yellow to black
	  3 mul is exch % position of black is 3*width bytes into is
	  % do black
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def


/wh { % fill a number of bytes with "white"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	ws 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/bl { % fill a number of bytes with "black"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	bs 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/s1 1 string def

/fl { % fill a number of bytes with a specific hex value
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len % remember where we got to
	} bind def

/hx { % read hex bytes directly; on entry, stack has <str> <pos> <len>
	3 copy getinterval % stack has <str> <pos> <len> <substr>
	cf exch readhexstring pop pop % stack back to <str> <pos> <len>
	} bind def

/wbytes { % width depth -> wb      find width in bytes  given 1, 2, 8 or 24 or 32
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAPc
	} bind def
%
% Common routine for imaging compressed images
%
/COMMONBITMAPc { % iw, ih, width, height, theta, x y depth proc
		 % (x,y) is the lower left corner of the image
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc                % run the desired proc after save has occurred
	/is im 0 lb getinterval def % image substring
	ws 0 lb getinterval is copy pop % whiten it
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{ip} image % zap!
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def
/BEGINBITMAPBW { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAP
	} bind def
%
% Common routine for uncompressed images
%
/COMMONBITMAP { % iw, ih, width, height, theta, x y depth proc
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc              % run the desired proc after save has occurred
	/is width depth wbytes string def
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{cf is readhexstring pop} image
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def

%
% All this hairy color setup stuff gus wrote on the mac, I just copied and
% changed the variable names to be humanly readable.

/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def

fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
% The HP PaintJet XL300 ignores the gray transfer curve but still sets its
% default black generation and undercolor removal functions as if it is
% used. This causes black colors not to work. Bug#56844 <Gus 2/22/93>
% - We go back to the old (correct?) way of doing this since this code
% is now bypassed for PS Level 2 printers in favor of colorSetup2 which
% uses PS Level 2 indexed color, which is much cleaner. <Gus 3/3/93>
		/u kk currentundercolorremoval exec def
%-		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
% Here, we set up indexed color for imaging on PS Level 2 without mucking around
% with the transfer functions.

/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse

%
% Setup a transfer function to convert psuedo color values into grayscale
% values based on the color lookup tables.
%
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
%
% image a color image
%
/BITMAPCOLOR { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
%
% Compressed color image rendering
%
/BITMAPCOLORc { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
%
% image a color image to a b&width device
%
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { % c m y k width
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { % r g b width
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end % of FrameDict definitions

% OPI stuff
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def

% Dashed lines stuff
/I { setdash } bind def
/J { [] 0 setdash } bind def

%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 16 FMDOCUMENT
0 0 /Palatino-Roman FMFONTDEFINE
1 0 /Palatino-Bold FMFONTDEFINE
2 0 /Palatino-Italic FMFONTDEFINE
3 0 /Helvetica-Narrow-Bold FMFONTDEFINE
4 0 /Helvetica-Bold FMFONTDEFINE
5 0 /Courier-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "i" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
108 117 486 612 R
7 X
0 0 0 1 0 0 0 K
V
108 570.45 486 612 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 570.45 486 612 R
7 X
0 0 0 1 0 0 0 K
V
108 605.14 270 605.14 2 L
V
3 H
2 Z
0 X
N
108 596.14 270 596.14 2 L
7 X
V
1 H
0 X
N
36 72 576 720 C
0 0 0 0 1 1 1 K
0 2 Q
7 X
(0) 108 546.45 T
0 0 0 1 0 0 0 K
0 36 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan) 109 546.45 T
0 24 Q
(Guide to the Envir) 108 503.45 T
(onment) 304.37 503.45 T
0 14 Q
(V) 108 471.12 T
(ersion 1.0 ALPHA) 116.55 471.12 T
0 11 Q
(This guide ...) 108 449.12 T
1 F
(Contents) 108 429.12 T
108 117 486 612 C
248.06 117 345.94 225 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
%%BeginBinary:  11171    
337 419 80.88 100.56 0 257.06 117 BEGINBITMAPGRAYc








BzJrJzJz
?D3PID3O!5D3O!8D3J$J'JRJS?%JT
KD3D3D3O,D3D3D3D3D3D3O4O!FFFFFFFFO!J'J&<'JrJ%8$JT
O D3D3D3D3D3D3O!D3D3D3D3D3D3D3D3D3D3D3O/D3O(FFFFFFFFFFFFFFO.J'J&G'J&=rJ$8&JQ
O&D3D3D3D3D3D3DD3D3D3D3D3D3D3D3D3D3D3O$D3D3D3D3D3D3O"D3D3D3D3D3D3D3D3O5J&J%J'J%I'J%@t
O,D3D3D3D3D3;D3D3D3D3<D3D3D3D3D3D3HD3D3D3D3D3D3D3D3D3D3FD3D3D3D3D3J'F&J'J&JrJ%Js
O1D3D3D3D3D3D3D3D3D3D3D3FD3D3D3D3D3D3=D3D3D3D3D3=D3;D3D3D3D37D3J';&J'H&JrF%Jt
O7D3D3D3D3D3D3D3D3D3D3D3O#D3D3D3D3D3D3D3D3D3D3D3ID3D3D3D3D3CD3JP;QJ'?$J'>#JtJ&
O8O(D3D3D3D3D3D3D3D3D3O'D3D3D3D3D3D3D3D3O"D3AD3D3D3D3D3JQFQJP?QJ%>RJsJ%
O2O#O&FFFFFFFFO&D35D3D3D3D3B"JPJQJPJRJPISJt>%
FFO <F4HO&D3D3D3D3D3CPJPJQJ%JQJ%JRJ#>Q
DG<FFFFFFFF@>FFFFFFFF@O&FFFFHPJPJQGPJRHPJRJ%FQ
:O$JKIFFFFFFFFJ%FQJQ<PJQ=PJRJ%J"
7FFFFFFFFO/O(O)>FFFFFFFF:FFJP<PJQJRJSH%
;O;O3O5FFFFFFFFJQJ'JrJR=%
@O@D3D3D3D3D3D3O4D3O<FFFFFFFFJ'J&<'J%=rJR
@D3D3D3D3D3D3O;D3D3D3D3D3D3D3D3D3D3D3O*D3D3D3D3D3O<J'<'J&G'J&HrJs
:D3D3D3D3D3D3D3D3D3D3D3D3O0D3D3D3D3D3D3D3D3D3D3D3MD3D3D3D3D3D3O6D3J'H'J&J'J%JrJ&>s
4D3D3D3D3D3D3D3D3D3D3D3D3O%D3D3D3D3D3<D3D3D3D3D3D3CD3D3D3D3>D3O*D3D3D3D3D3D3D'J'J'J&J%JrJ%Js
D3D3D3D3D3D3>D3D3D3D3D3D3GD3D3D3D3D3D3GD3D3D3D3D3:D3D3D3D3ID3MD3D3D3D35D3B#J'J&J'E&JrJ&Js
D3D3JD3D3D3D3D3D3<D3D3D3D3D3O$D3D3D3D3D3D3D3D3D3D3D3O&D3AD3D3D3D3D3AD3J'G&J';%JrJ&Js
O0D3D3D3D3D3D3D3D3D3D3D3O/D3D3D3D3D3D3D3D3D3D3O2D35D3D3D3D3D3O D3J'<&JP;QJr@%J&
O6D3D3D3D3D3D3D3D3D3D3D3O5O7D3D3D3D3D3O-D3D3D3D3D3JQ<QJPFQJ$<%
O6O/O5FFFFFFD3D3D3D3B#JPHQJPJQJ%?RJ#
FFFFO#O$;O+FFFFFFFFO1FFFFDPJQJQJPJQJ%JRJ%
F=GFO!FFFFFFFF4O&FFFFFFFFIPJPJQJPJQJ%JSJ%
<I<O#EFFFFFFFF?HFFFFFFFFJQGPJQGPJQJ%JRJ%
8O&O.;FFFFFFFFK=FFFFFFFFJP<QJQ<PJQG%JRH%
>O1O9FFFFFFFFO(FFFFFFFFJQJQJQ=%JR=%
CO=ODFFFFFFFFO3FFFFFFFFJ'JrJ(J(
CD3D3D3D3D3D3O=D3OIFFFFFFD3FFFFFFO>FFFFFFFFD3FFFFJ&<&J&='JrJr
>D3D3D3D3D3D3D3D3D3D3O3D3D3D3D3D3D3D3D3D3D3D3OCD3O@D3J&F&J&H'J&='J%=r
9D3D3D3D3D3D3D3D3D3D3O)D3D3D3D3D3D3D3D3D3D3D3O8D3D3D3D3D3D3D3D3D3D3D3O6D3D3D3D3D3J&J&J&F"B'J%H&J$Hr
4D3D3D3D3D3:D3D3D3D3D3MD3D3D3D3D3FFD3D3D3D3D3D3O.D3D3D3D3D3D3D3D3D3O.D3D3D3D3E&J&J%J#F'J&J'J%J'
D3D3D3D3D3DD3D3D3D3D3DD3D3D3D36FFFFD3D3D3D3D3D3O#D3D3D3D3D3;D3D3D3D3D3D3O$D3D3D3D3<D3D3D3D3D3D3B$J&J&J#J'J&J&J$
D3D3D3O D3D3D3D3D3:D3D3D3D3D3<FFFF4D3D3D3D3D3D3FD3D3D3D3D3FD3D3D3D3D3JD3D3D3J&F&J":#J'J&J&J$
O4D3D3D3D3D3D3D3D3D3D3>D3FFFF8D3D3D3D3D3D3;D3D3D3D3D3O"D3D3D3D3D3BD3D3D3J&<&J#J'G%J'J%
O9D3D3D3D3D3D3D3D3D3D3JFFFF<D3D3D3D3D3D3D3D3D3D3O,D3D3D3D3D3D38D3D3D3D3J%<PJ#J'=%J&F$
O:FFFFFFFFLFFFF@D3D3D3D3D3D3D3D3D3D3O6D3D3D3D3D3D3D3D3JPEPJ#J%=QJ'=$
O5IFFFF@FFFFFFFFO9D3D3D3D3D3D3D3D3D3J%JPJ"A#JPGQJ%=Q
O1FFFFFFFF9:D3FFFF9O5FFFFFFFFJ%JPJ#I%JQJ%GQ
O-FFFFFFFFBCFFFFFFFFFFFF<O+FFFFFFFFB#JPJPJ#C%JQJ%JP
FFFFHK@FFFFFFFFFFFFFO!FFFFFFFF;D%J%JPJ#<PJQJ%JQ
FFFFFFFF@FFFFFFFFO'=FFFFO"EFFFFFFFFDHPJPJP="HQJQJ%JP
6O0D3O-;FFFFFFFFO JPC%JPJQG%JQ
7FFFFFFFFO:P FFFFFFFFO)J%;%J$JQ=%JQ
<FFFFFFFFFFFFFFFFOCFFFFFFP#FFFFFFFFO3JPJRJP
@R%O=J&J&JQ
@D3D3D3D3D3R'D3D3D3D3D3OBJ';%J%J%;'J$
:D3D3D3D3D3D3D3D3D3D3OCD3D3D3D3P&D3D3D3D3D3D3D3D3D3D3OBFFFFFFJ'E%J%J%E&J#
4D3D3D3D3D3D3D3D3D3D3O;D3D3D3D3P&D3D3D3D3D3D3D3D3D3O>D3D3E&J%J&J$J'J%
D3D3D3D3D39D3D3D3D3O2D3D3D3D3D3P'D3D3D38D3D3D3D3D3D3O4D3D3D3D3B$J%J&J%J&J$
D3D3D3BD3D3D3D3O)D3D3D3D3D3P(D3D3D3D3AD3D3D3D3D3O,D3D3D3J&J%H"J%J'J$
O'D3D3D3D3D3O D3D3D3D3D3ODD3D3D3D3JD3D3D3D3D3D3O#D3D3D3J%J&J$J'J%
O,D3D3D3D3ED3D3D3D3D3P*D3D3D3O&D3D3D3D3D3D3GD3D3D3D3J%J&J%J&J$
O0D3D3D3D3<D3D3D3D3D3P+D3D3D3D3O/D3D3D3D3D3?D3D3D3J%J%J"J%J'J$
O4D3D3D3D34D3D3D3D3O=D3<D3D3D3D3O8D3D3D3D3D3D36D3D3D3J%A&J"J&J$J&C%
O8D3D3D3D3D3D3D3D3D3ED3IFFFFD3D3D35D3D3D3OBD3D3D3D3D3D3D3D3D3J%=%J)B%J'<"
O<D3D3D3D3FFFFFFFFODFFFFD3D3D3D3D3D3D3D3D3D3OJD3D3D3D3D3D3D3JPA%J#:%;$J#<Q
O;FFFFFFFFOBFFFFD3D3D3D3D3D3D3P$FFFFJPJ%J#9$;PJ%DQ
O64FFFFFFFFO@FFFFFFFFFFOLFFFFFFFFJ%J%J"J$CQJ$JQ
O2FFFFFFFF=FFFFFFFF;D3O"FFFFFFOCFFFFFF8JPJ%JPJ$JQ
O-EFFFFFFFFP"O;FFFFFFAJPJ%JPJ$J$
O(O FFFFFFFFP#O3FFFFFFJFFFFFFJPJ%JPJ%
O#O)FFFFFFFFP$O*FFFFFFFFJPJ%B"JQJ$
LO2FFFFFFFFD3OFO!FFFFFFJPJ%JPJ$
GO;FFFFFFFFP'GFFFFFFJ%J%JPJ$
CFFFFFFFFODFFFFFFFFP(?FFFFFFB%DPJ%JPJ$
FFFFFFFFOLFFFFFFFFP)7FFFFFFF%;PJ"JQC%
FFFFFFFFP'FFP-FFFFFFFFJPJP;$
4R@FFFFFFI&JP
D3D3D3D3D3RFD&;%J&
D3D3D3D3D3D3D3D3D3RCD3D3D3D3D3B#D%J$;&
D3D3D3D3D3D3R<D3D3D3D3D3D3D3D3J%J#J$C&
@D3D3D3D3P"D3D3P1D3D3D3D3D3D3D3D3J$J%J$J&
DD3D3D3OID3D3D3D3P0D3D3D35D3D3D3D3D3J%J$J$J&
GD3D3D3D3OBD3D3D3P1D3D3D3=D3D3D3D3D3J%J%J$J&
KD3D3D3D3O:D3D3D3D3P1D3D3D3ED3D3D3D3D3J%J%C"J$J&
O!D3D3D3D3O2D3D3D3D3D3P$D3D3D3MD3D3D3D3D3J$J%J%J%
O%D3D3D3O+D3D3D3D3P2D3D3D3D3O'D3D3D3D3J%J$J$J&
O(D3D3D3D3O$D3D3D3P3D3D3D3O/D3D3D3D3D3J%J%J$J&
O,D3D3D3D3JD3D3D3D3P3D3D3D3O7D3D3D3D3D3J%J%J"J$J&
O0D3D3D3D3BD3D3D3D3=D3ODD3D3D3O?D3D3D3D3D3J$J$J$J&
O4D3D3D3<D3D3D3P5D3D3D3OGD3D3D3D3D3J%J%J#J&
O7D3D3D3D34D3D3D3D3P6D3D3P!D3D3D3D3D3J%B%J&
O;D3D3D3D3D3D3D3D3RBD3D3D3D3D3J$;%J"J"J"
O?D3D3D3D3D3D3D3MD3O>FFP+FFJ%;%J%J#
O>FFFFFFFFFFFFFFFFP?FFFFFFFFP%FFFFJ%C%JPJ$
O:FFFFFFFFFFFFFFFFP?OKFFFFFFJ%J%J%J#
O6FFFFFFFF5FFFFFFFFP@FFFFFFFFOEFFFFJ%J%J%J#
O2FFFFFFFF=FFFFFFFFP@FFFFFFFFO?FFFFJ%J%J"JPJ#
O.FFFFFFFFEFFFFFFFF>D3P!O8FFFFJ%J$J%J$
O*FFFFFFFFMFFFFFFPBFFFFFFFFO1FFFFFFJ%J%JPJ#
O&FFFFFFFFO&FFFFFFFFPBO*FFFFJ%J%J%J#
O"FFFFFFFFO.FFFFFFFFPCFFFFFFFFO$FFFFJ%J%F"J%J$
LFFFFFFFFO6FFFFFFFFD3P2FFFFFFFFKFFFFFFJ%J%JPJ#
HFFFFFFFFO>FFFFFFFFPCDFFFFJ%J$J%J#
DFFFFFFFFOFFFFFFFPEFFFFFFFF>FFFFB#H%J%J%J#
FFFFFFFFFFFFOMFFFFFFFFPEFFFFFFFF8FFFFD%@%J%8"JPF$
FFFFFFFFFFFFFFFFP'FFFFFFFFD3PBFFFFFFH$9%J$J%@#
FFFFFFFFFFFFFFP/FFFFFFPGFFFFFFFFFFFFJ$J%:#
5FFFFFFS3FFFFFFFFFFFFJ$J%
5D3D3D3S7FFFFFFFFI#9$J%
D3D3D3D3D3S5D3D3D3D3F$>$J#:%
D3D3D3D3D3D3S0D3D3D3D3D3D3D#D$J#@%
D3D3D3D3D3S+D3D3D3D3D3D3B#I$J$F&
D3D3D3D3D3S%D3D3D3D3D3D3D3D3J$J"J#J%
DD3D3D3P'D3PFD3D38D3D3D3D3J#J&J#J&
GD3D3P"D3D3D3D3D3PCD3D3>D3D3D3D3D3J$J%J$J%
ID3D3D3OID3D3D3D3PED3D3D3ED3D3D3D3J$J$J#J%
LD3D3D3OCD3D3D3PGD3D3LD3D3D3D3J$J$J#J&
O!D3D3D3O=D3D3D3PHD3D3O$D3D3D3D3D3J$J$E"J$J%
O$D3D3D3O7D3D3D3D3P8D3D3D3O+D3D3D3D3J$J$J#J"
O'D3D3D3O1D3D3D3PID3D3O2D3J$J$J#
O*D3D3D3O+D3D3D3PJD3D3J$J$J#
O-D3D3D3O%D3D3D3PKD3D3J$J$J"J$
O0D3D3D3MD3D3D3<D3P.D3D3D3J$J$J#
O3D3D3D3GD3D3D3PLD3D3J$J$J#
O6D3D3D3AD3D3D3PMD3D3J#J%J$
O9D3D3;D3D3D3D3PMD3D3D3J$J$J"J#
O;D3D3D35D3D3D3JD3P$D3D3J$E$J#
O>D3D3D3D3D3D3Q"D3D3J$?$J$
OAD3D3D3D3D3D3Q"D3D3D3J$9$J#
ODD3D3D3D3D3D3Q#D3D3J$9$J#9#
ODFFFFFFFFFFFFPJD3D3D3D3J%?$J"J#9%
O@FFFFFFFFFFFFFFO#D3OCFFFFFFFFFFFFJ$F$J%
O=FFFFFFFFFFFFPMFFFFFFFFJ$J$J%
O:FFFFFF6FFFFFFQ FFFFFFFFJ$J$J%
O7FFFFFF<FFFFFFQ!FFFFFFFFJ%J$J"J$
O3FFFFFFFFBFFFFFFFD3P)FFFFFFJ$J$J%
O0FFFFFFIFFFFFFQ"FFFFFFFFJ$J$J%
O-FFFFFFO!FFFFFFQ#FFFFFFFFJ$J$J%
O*FFFFFFO'FFFFFFQ$FFFFFFFFJ%J$J"J%
O&FFFFFFFFO-FFFFFF;D3P7FFFFFFFFJ$J$J$
O#FFFFFFO4FFFFFFQ&FFFFFFJ$J$J%
O FFFFFFO:FFFFFFQ&FFFFFFFFJ$J$J%
KFFFFFFO@FFFFFFQ'FFFFFFFFJ%J$F"J%
GFFFFFFFFOFFFFFFFD3PEFFFFFFFFJ$J$J%
DFFFFFFOMFFFFFFQ)FFFFFFFFJ$J$J$
AFFFFFFP%FFFFFFQ*FFFFFFJ$J$J%
>FFFFFFP+FFFFFFQ*FFFFFFFFJ%J$J%
:FFFFFFFFP1FFFFFFQ+FFFFFFFFJ$J$8"J%
7FFFFFFP8FFFFFFD3Q)FFFFFFFFJ$J$J%
4FFFFFFP>FFFFFFQ-FFFFFFFFG$J$
FFFFFFT'FFFFFFC%J%
FFFFFFFFT-FFFFFFFFB"J%
FFT5FFFFFFFFJ%
TFFFFFFFFFJ%
TJFFFFFFFF
B#
D3D3D$J"
D3D3D3T<D3G#J#
D3D3T8D3D3I$J"
D3D3D3T4D3J#J#
6D3D3T0D3D3J#J#
8D3D3T,D3D3J$J#
:D3D3D3T'D3D3J#J"
=D3D3T$D3J#J#J#
?D3D3P9D3D3Q3D3D3J$J$J#
AD3D3D3P3D3D3D3Q3D3D3J#J#J"
DD3D3P/D3D3Q5D3J$J#J#
FD3D3D3P*D3D3Q5D3D3J#J$J#
ID3D3P%D3D3D3Q5D3D3J#J#B"J"
KD3D3P!D3D3D3Q*D3J$J$J#
MD3D3D3OID3D3D3Q7D3D3J#J#J#
O"D3D3OED3D3Q8D3D3J#J#J#
O$D3D3OAD3D3Q8D3D3J$J$J"J"
O&D3D3D3O;D3D3D36D3Q"D3J#J#J#
O)D3D3O7D3D3Q:D3D3J#J#J#
O+D3D3O3D3D3Q:D3D3J$J$J"
O-D3D3D3O-D3D3D3Q;D3J#J#J"J#
O0D3D3O)D3D3AD3PHD3D3J$J$J#
O2D3D3D3O#D3D3D3Q<D3D3J#J#J"
O5D3D3MD3D3Q>D3J#J#J#
O7D3D3ID3D3Q>D3D3J$J$J"J#J#
O9D3D3D3CD3D3D3KD3OID3D3CD3D3J#J#J$J"
O<D3D3?D3D3PLD3D3D3?D3J#J#J$J#
O>D3D3;D3D3Q#D3D3D3:D3D3J$J$J$J"=$J#
O@D3D3D35D3D3D3O%D3D3D3OFFFD3D3D35D3D3J#G#J%J$F#
OCD3D3D3D3O+D3D3D3D3OMD3D3D3D3D3J$A$J%J$B"
OED3D3D3D3D3D3O1D3D3D3D3OLD3D3D3D3J#=#J%J"E$=#
OHD3D3D3D3O8D3D3D3D3O;FFD3D3D3D3D3J#9#J&J$8#
OJD3D3D3D3O>D3D3D3D3D3OID3D3D3D3D3J#9#J%J#
OJFFFFFFFFOCD3D3D3D3OHD3D3J#=#J%J"
OHFFFFFFFFOED3D3D3D3O/FFJ$A$J&
OEFFFFFFFFFFFFOFD3D3D3D3D3J#G#J%
OCFFFFFFFFOID3D3D3D3J#J#J%J"
OAFFFF5FFFFOKD3D3D3D3O#FFJ$J$J%
O>FFFFFF9FFFFFFOLD3D3D3D3J#J#J&J"
O<FFFF?FFFFP D3D3D3D3D3IFFJ#J#J%
O:FFFFCFFFFP#D3D3D3D3J$J$J%
O7FFFFFFGFFFFFFP$D3D3D3D3J#J#J%J"
O5FFFFMFFFFP&D3D3D3D3>FFJ#J#J&
O3FFFFO#FFFFP(D3D3D3D3D3J$J$J%
O0FFFFFFO'FFFFFFP*D3D3D3D3J#J#J%H"
O.FFFFO-FFFFP,D3D3D3D3FFJ#J#J&
O,FFFFO1FFFFP.D3D3D3D3D3J$J$J%
O)FFFFFFO5FFFFFFP0D3D3D3D3J#J#J%<"
O'FFFFO;FFFFP2D3D3D3D3FFJ#J#J%
O%FFFFO?FFFFP4D3D3D3D3J$J$J$
O"FFFFFFOCFFFFFFP5D3D3D3J#J#
O FFFFOIFFFFJ#J#
LFFFFOMFFFFJ#J$
JFFFFP#FFFFFFJ$J#
GFFFFFFP(FFFFJ#J$
EFFFFP-FFFFFFJ#J#
CFFFFP2FFFFJ$J#
@FFFFFFP6FFFFJ#J$
>FFFFP;FFFFFFJ#J#
<FFFFP@FFFFJ$J#Js
9FFFFFFPDFFFFO,83J#J$Jy>"
7FFFFPIFFFFFFI8383J#J#JzJ"
5FFFFQ FFFF8/83783H$J#>y
FFFFFFQ$FFFF83F#J'sJ"
FFFFQ#DADADADADADA83O'83D#Jz<$J"
FFFFPD/DADADADAO-83B#JyJ#J"
FFFFP8DA8DADAO,83JsJ#J"
P>DAHDADAO+83J$
QBDADADAJ"J#J"
P>FFO&DADAO'83J#J"
QGDADAO&83J"J$J"
P?FFO)DADADAO$83J#J"
QLDADAO#83J$
R DADADAB"J"J#J"
D3P3FFO0DADAM83C#J#J"
D3D3QDDADAL83E#J#J"
D3D3QDDADAK83G"J"J"J"
D3P/FFO483L83H#J#
D3D3Q@8383J#J"J#J"
4D3D3P,FFO/8383O"83J"J"J"
6D3Q:83O%83J#J#J"
7D3D3Q68383O'83J#J"J#J"
9D3D3P(FFO)8383O*83J"J"
;D3Q083J#J#J"
<D3D3Q,8383O.83J#J"J#J"
>D3D3P$FFO#8383O183J"J"J"
@D3Q&83O483J#J"J#J"
AD3D3P"FFM8383O683J#J#
CD3D3PL8383J#J"J"
ED3D3PI83O;83J"J"J#J"
GD3OLFFG8383O=83J#J#J"
HD3D3PB8383O@83J#J"J"
JD3D3P?83OC83J"J"J#
LD3OHFFA8383J#J#J"
MD3D3P88383OG83J#J"J"J"
O!D3D3OEFF=83OJ83J"J#J"
O#D3P28383OL83J#J"J"
O$D3D3P/83P!83J#J"J#
O&D3D3OAFF78383J#J#J"
O(D3D3P'8383P%83J"J"J"
O*D3P%83P(83J#J"G#J"
O+D3D3O=FF8383P*83J#J#J"
O-D3D3OK8383P-83J"J"C"
O/D3O;FF83J#J#J"
O0D3D3OE8383P183J#J#J"
O2D3D3OA8383P483J"J"="J"
O4D3O7FF83P783J#J#J"
O5D3D3O;8383P983J#J#
O7D3D3O78383J"J$J"
O9D3O3FFDA83P>83J#J#J"
O:D3D3O1D383P@83J#J%Jr
O<D3D3O-D3D3D3D3P:D3J#J"Jw
O>D3D3O*D3P2D3J"J#Jw
O@D3O'D3D3P'D3J#J#="Jw
OAD3D3O#D3D3D3OCD3J#J"Jw
OCD3D3O D3OAD3J"J#Jw
OED3KD3D3O6D3J#J#C"Jw
OFD3D3GD3D3D3LD3J#J#Jw
OHD3D3CD3D3O"D3J"J"H"Iw
OJD3AD3D3D3J#J#Jw
OKD3D3=D3D3;D3J#J#Jr
OMD3D39D3D36D3J"J"
P!D37D3J#I#
P"D3D3D3D3J#E#
P$D3D3D3D3J#A#
P&D3D3D3D3J"?"
P(D3D3J#;#
P)D3D3D3D3J&
P+D3D3FFD3D3JP
P+J#;#
P)FFFFFFFFJ"?"
P(FFFFJ#A#
P&FFFFFFFFJ#E#
P$FFFFFFFFJ#I"
P"FFFFFFJ"J#
P!FF6FFFFJ#J#
OMFFFF9FFFFJ#J"
OKFFFF=FFJ"J#
OJFF@FFFFJ#J"
OHFFFFCFFJ#J#
OFFFFFFFFFFJ"J#
OEFFJFFFFJ#J"
OCFFFFMFFJ#J#
OAFFFFO"FFFFJ#J#
O?FFFFO&FFFFJ"J"
O>FFO*FFJ#J#
O<FFFFO,FFFFJ#J#
O:FFFFO0FFFFJ"J"
O9FFO4FFJ#J#
O7FFFFO6FFFFJ#J#
O5FFFFO:FFFFJ"J"
O4FFO>FFJ#J#
O2FFFFO@FFFFJ#J#
O0FFFFODFFFFJ#J"
O.FFFFOHFFJ"J#
O-FFOKFFFFJ#J"
O+FFFFP FFJ#J#
O)FFFFP#FFFFJ"J#
O(FFP'FFFFJ#J"
O&FFFFP*FFJ#J#
O$FFFFP-FFFFJ"J#
O#FFP1FFFFJ#J"
O!FFFFP4FFBZJZ
CP7Q6












J"
SL83BvJvJ$
83P/83PH838383J"9"
SJ8383J";"
SI8383J"="
SH8383J"?"
SG8383J"?"
SGFFFFJ"="
SHFFFFJ";"
SIFFFFJ"9"
SJFFFFJ$
SKFF83FFJ"
SLFF


Jw
SG83JvJzAz;wCwJz
P#83L=83A8383834?83JzBzJzJ"J#>"J#
7783<839083683=838383PB8383J"J$G&J"J"<"J"
O 83G8383838383838383E83@8383PE83J"J"J"J"
O!83I83O+83B83JVJZJRJWJWJWA"
962L?>OF83J"A"A"J#B"JSJ"B"F"A"J"
8FFFF83;FFFF835EFFFF83FFP0FFJ"J"J#J"J"
7FFO(FF?FFFFB83QC83J#J"
P0FFFFR/FFJ"
P/FF
J"
P.FF
Jy
Q383

Jz
O-483J#
O+8383J"
O*83J"
O)83JXJZ
O4O@:J"
O(83












J"@"J"J"A"
Q(FF83I83<FF83J"A"J#J#
O(FF83OM8383H8383JwJ"BzJuG"Aw
O583O6FF383783FF83J"J"J"J"
O)FFP FFFFFJFFJ#J#J$J"J$
O*FFFF?FFFFO,FFFFFFDFFJFFFFFFBVJZ<VJVAZ@ZJZ:W:V
C?8;76?JWJV
ES?













JV
R<













ENDBITMAP
%%EndBinary
108 117 486 612 C
36 72 576 720 C
0 0 0 1 0 0 0 K
[/Creator(FrameMaker xm5.1.1P1b)/DOCINFO FmPD2
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.i/DEST FmPD2
[/Dest/F.titledoc/DEST FmPD2
[/Dest/L.titledoc/DEST FmPD2
FMENDPAGE
%%EndPage: "i" 1
%%Page: "ii" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 81 540 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9 Q
0 X
(DRAFT) 72 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 126 504 684 R
7 X
V
1 F
0 X
(Copyright and T) 72 678 T
(rademarks) 139.01 678 T
2 F
(Harlequin Dylan: Guide to the Envir) 72 663 T
(onment) 206.52 663 T
0 F
(V) 72 648 T
(ersion 1.0 Alpha) 77.5 648 T
(July 1997) 72 633 T
(Part number: GE1) 72 618 T
(Copyright \251 1997 by The Harlequin Gr) 72 603 T
(oup Limited.) 227.38 603 T
(Companies, names and data used in examples her) 72 588 T
(ein ar) 271.03 588 T
(e \336ctitious unless otherwise noted.) 293.34 588 T
-0.04 (All Rights Reserved. No part of this publication may be r) 72 573 P
-0.04 (epr) 297.85 573 P
-0.04 (oduced, stor) 310.96 573 P
-0.04 (ed in a r) 360.13 573 P
-0.04 (etrieval system, or transmit-) 392.33 573 P
-0.16 (ted, in any form or by any means, electr) 72 563 P
-0.16 (onic, mechanical, photocopying, r) 228.58 563 P
-0.16 (ecor) 362.33 563 P
-0.16 (ding, or otherwise, without the) 378.94 563 P
(prior written permission of The Harlequin Gr) 72 553 T
(oup Limited.) 252.93 553 T
-0.05 (The information in this publication is pr) 72 538 P
-0.05 (ovided for information only) 230.7 538 P
-0.05 (, is subject to change without notice, and) 340.94 538 P
(should not be constr) 72 528 T
(ued as a commitment by Harlequin Limited, Harlequin Incorporated, Harlequin) 153.02 528 T
-0.17 (Australia Pty) 72 518 P
-0.17 (. Limited, or The Harlequin Gr) 123.43 518 P
-0.17 (oup Limited. The Harlequin Gr) 244.34 518 P
-0.17 (oup Limited assumes no r) 368.21 518 P
-0.17 (esponsi-) 470.88 518 P
-0.09 (bility or liability for any err) 72 508 P
-0.09 (ors or inaccuracies that may appear in this publication. The softwar) 180.01 508 P
-0.09 (e described in) 446.77 508 P
(this book is furnished under license and may only be used or copied in accor) 72 498 T
(dance with the terms of that) 376.67 498 T
(license.) 72 488 T
(Harlequin Dylan is a trademark of The Harlequin Gr) 72 473 T
(oup Limited.) 281.9 473 T
(Other brand or pr) 72 458 T
(oduct names ar) 142.9 458 T
(e the r) 203.88 458 T
(egister) 228.56 458 T
(ed trademarks or trademarks of their r) 254.95 458 T
(espective holders.) 407.93 458 T
(US Government Use) 72 443 T
(The Harlequin Dylan Softwar) 72 428 T
(e is a computer softwar) 189.91 428 T
(e pr) 282.71 428 T
(ogram developed at private expense and is subject) 298.07 428 T
-0.05 (to the following Restricted Rights Legend: \322Use, duplication, or disclosur) 72 418 P
-0.05 (e by the United States Government) 362.78 418 P
(is subject to r) 72 408 T
(estrictions as set forth in \050i\051 F) 123.99 408 T
(AR 52.227-14 Alt III or \050ii\051 F) 238.07 408 T
(AR 52.227-19, as applicable.  Use by) 347.02 408 T
-0.04 (agencies of the Department of Defense \050DOD\051 is subject to Harlequin\325s customary commer) 72 398 P
-0.04 (cial license as con-) 431.26 398 P
(tained in the accompanying license agr) 72 388 T
(eement, in accor) 226.86 388 T
(dance with DF) 291.32 388 T
(AR 227.7202-1\050a\051.  For purposes of the) 348.97 388 T
(F) 72 378 T
(AR, the Softwar) 76.34 378 T
(e shall be deemed to be `unpublished\325 and licensed with disclosur) 139.55 378 T
(e pr) 401.58 378 T
(ohibitions, rights) 416.94 378 T
(r) 72 368 T
(eserved under the copyright laws of the United States.  Harlequin Incorporated, One Cambridge Center) 75.39 368 T
(,) 487.26 368 T
(Cambridge, Massachusetts 02142.\323) 72 358 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Eur) 72 209 T
(ope:) 86.32 209 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Harlequin Limited) 72 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Barrington Hall) 72 184 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Barrington) 72 174 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Cambridge CB2 5RG) 72 164 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(U.K.) 72 154 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(telephone +44 1223 873 800) 72 139 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fax +44 1223 873 873) 72 129 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(North America:) 216 209 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Harlequin Incorporated) 216 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(One Cambridge Center) 216 184 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Cambridge, MA 02142) 216 174 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(U.S.A.) 216 164 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(telephone +1 617 374 2400) 216 149 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fax +1 617 252 6505) 216 139 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Electr) 360 209 T
(onic Access:) 382.75 209 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(http://www) 360 194 T
(.harlequin.co.uk/) 411.36 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(http://www) 360 184 T
(.harlequin.com/) 411.36 184 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.ii/DEST FmPD2
[/Dest/F.copyrightdoc/DEST FmPD2
[/Dest/L.copyrightdoc/DEST FmPD2
360 344/I2.1.850004 FmPA
481 344/I2.1.850005 FmPA
360 334/I2.1.850007 FmPA
477 334/I2.1.850008 FmPA
FMENDPAGE
%%EndPage: "ii" 2
%%Page: "iii" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 540 522 630 R
7 X
0 0 0 1 0 0 0 K
V
0 30 Q
0 X
(Contents) 108 553.83 T
108 540 522 630 C
0 0 0 1 0 0 0 K
108 588.83 405 619 C
0 0 0 1 0 0 0 K
104.67 603.83 266.67 603.83 2 L
3 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
104.67 594.83 266.67 594.83 2 L
1 H
N
0 0 0 1 0 0 0 K
108 540 522 630 C
36 72 576 720 C
0 0 0 1 0 0 0 K
108 81 540 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9 Q
0 X
(DRAFT) 108 100 T
1 F
(iii) 531.01 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 468 R
7 X
V
3 13 Q
0 X
(1) 108 459.33 T
(Quick Start) 135 459.33 T
(3) 204.88 459.33 T
0 11 Q
(Intr) 135 439.67 T
(oduction) 152.84 439.67 T
(3) 207.28 439.67 T
(Starting Harlequin Dylan) 135 425.67 T
(3) 269.61 425.67 T
(Pr) 135 411.67 T
(ojects) 145.79 411.67 T
(4) 183.77 411.67 T
(Building a standalone application) 135 397.67 T
(5) 309.9 397.67 T
(Making changes) 135 383.67 T
(5) 225.73 383.67 T
3 13 Q
(2) 108 361.33 T
(Fixing Bugs) 135 361.33 T
(7) 209.01 361.33 T
0 11 Q
(Intr) 135 341.67 T
(oduction) 152.84 341.67 T
(7) 207.28 341.67 T
(Rebuilding the application) 135 327.67 T
(7) 275.64 327.67 T
(Compiler warnings) 135 313.67 T
(8) 240.7 313.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.iii/DEST FmPD2
[/Dest/F.envTOCdoc/DEST FmPD2
[/Rect[108 455 486 468]/Border[0 0 0]/Dest/G5.887893/LNK FmPD2
[/Rect[108 434 486 447]/Border[0 0 0]/Dest/G5.887900/LNK FmPD2
[/Rect[108 420 486 433]/Border[0 0 0]/Dest/G5.887926/LNK FmPD2
[/Rect[108 406 486 419]/Border[0 0 0]/Dest/G5.888113/LNK FmPD2
[/Rect[108 392 486 405]/Border[0 0 0]/Dest/G5.888424/LNK FmPD2
[/Rect[108 378 486 391]/Border[0 0 0]/Dest/G5.888640/LNK FmPD2
[/Rect[108 357 486 370]/Border[0 0 0]/Dest/G6.887888/LNK FmPD2
[/Rect[108 336 486 349]/Border[0 0 0]/Dest/G6.887889/LNK FmPD2
[/Rect[108 322 486 335]/Border[0 0 0]/Dest/G6.887923/LNK FmPD2
[/Rect[135 308 486 321]/Border[0 0 0]/Dest/G6.887909/LNK FmPD2
[/Title(A)/Rect[99 117 495 477]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "iii" 3
%%Page: "iv" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
72 81 504 117 R
V
1 9 Q
0 X
(iv) 72 100 T
2 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.iv/DEST FmPD2
[/Dest/L.envTOCdoc/DEST FmPD2
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "iv" 4
%%Page: "i" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 540 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9 Q
0 X
(DRAFT) 108 100 T
1 F
(i) 537 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 567 504 621 R
7 X
V
108 593.45 504 621 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 593.45 504 621 R
7 X
0 0 0 1 0 0 0 K
V
108 614.14 270 614.14 2 L
3 H
2 Z
0 X
N
108 605.14 270 605.14 2 L
1 H
N
36 72 576 720 C
0 30 Q
0 X
0 0 0 1 0 0 0 K
(Pr) 108 573.45 T
(eface) 137.43 573.45 T
108 126 486 468 R
7 X
V
3 13 Q
0 X
(W) 108 459.33 T
(elcome!) 117.7 459.33 T
0 11 Q
(W) 108 439.67 T
(elcome to Harlequin Dylan! Thank you for choosing this pr) 117.99 439.67 T
(oduct. Y) 405.55 439.67 T
(ap.) 445.2 439.67 T
3 13 Q
(Appr) 108 406.33 T
(oac) 132.67 406.33 T
(h) 150.95 406.33 T
0 11 Q
(This guide is intended to show you how to work best with Harlequin Dylan.) 108 386.67 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
485.53 371.57 108 371.57 2 L
0 1 1 0 1 0 0 K
V
0.55 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(It guides by example: rather than explaining how to do things in the abstract,) 108 372.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
172.27 357.57 108 357.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(it gives concr) 108 358.67 T
0 1 1 0 1 0 0 K
237.6 357.57 172.07 357.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(ete examples.) 172.07 358.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(It pr) 108 338.67 T
(ovides practical examples of the sorts of things you will do all the time) 128.8 338.67 T
(when writing Dylan applications.) 108 324.67 T
3 13 Q
(Con) 108 291.33 T
(ventions used in this book) 128.31 291.33 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.i/DEST FmPD2
[/Dest/F.prefacedoc/DEST FmPD2
108 737/M4.9.91093.Preface.Preface FmPA
108 737/I4.1.543349 FmPA
[/Title(A)/Rect[99 558 513 630]/ARTICLE FmPD2
[/Title(A)/Rect[99 117 495 477]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "i" 5
%%Page: "ii" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
72 81 504 117 R
V
1 9 Q
0 X
(ii) 72 100 T
2 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.ii/DEST FmPD2
[/Dest/L.prefacedoc/DEST FmPD2
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "ii" 6
%%Page: "3" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 540 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9 Q
0 X
(DRAFT) 108 100 T
1 F
(3) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 513 504 648 R
7 X
V
0 30 Q
0 X
(1) 180 628 T
108 586.45 504 614 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 586.45 504 614 R
7 X
0 0 0 1 0 0 0 K
V
108 607.14 270 607.14 2 L
V
3 H
2 Z
0 X
N
108 598.14 270 598.14 2 L
7 X
V
1 H
0 X
N
36 72 576 720 C
0 0 0 0 1 1 1 K
0 2 Q
7 X
(1) 108 566.45 T
0 0 0 1 0 0 0 K
0 30 Q
0 X
0 0 0 1 0 0 0 K
(Quick Start) 109 566.45 T
108 710/G5.887893 FmPA
108 126 486 432 R
7 X
V
3 16 Q
0 X
(1.1  Intr) 108 421.33 T
(oduction) 154.43 421.33 T
108 565/G5.887900 FmPA
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
119 399.57 108 399.57 2 L
0 1 1 0 1 0 0 K
V
0.55 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 11 Q
(W) 108 400.67 T
0 1 1 0 1 0 0 K
461.9 399.57 117.99 399.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(elcome to Harlequin Dylan! This guide explains how to use Harlequin) 117.99 400.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
240.65 385.57 108 385.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(Dylan\325s development envir) 108 386.67 T
0 1 1 0 1 0 0 K
466.28 385.57 240.45 385.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(onment to develop stand-alone Dylan applica-) 240.45 386.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
277.73 371.57 108 371.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(tions. It covers the ... THIS IS PREF) 108 372.67 T
0 1 1 0 1 0 0 K
321.71 371.57 276.92 371.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(ACE MA) 276.92 372.67 T
0 1 1 0 1 0 0 K
363.44 371.57 320.89 371.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(TERIAL.) 320.89 372.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This \336rst chapter is a quick intr) 108 352.67 T
(oduction to Harlequin Dylan\325s main featur) 259.05 352.67 T
(es.) 466.77 352.67 T
3 16 Q
(1.2  Star) 108 317.33 T
(ting Harlequin Dylan) 159.31 317.33 T
108 461/G5.887926 FmPA
0 11 Q
(Start Harlequin Dylan by choosing XXX. A splash scr) 108 296.67 T
(een appears, followed) 366.32 296.67 T
(shortly after by this dialog:) 108 282.67 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
193.7 261.57 135 261.57 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(XXXXXXXX) 135 262.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
193.7 241.57 135 241.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(XXXXXXXX) 135 242.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
193.7 221.57 135 221.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(XXXXXXXX) 135 222.67 T
0 0 0 1 0 0 0 K
1 F
0 0 0 1 0 0 0 K
(1.) 117 202.67 T
0 F
(Select the \322Open an example\323 radio button, then click) 135 202.67 T
4 9.6 Q
(OK) 398.82 202.67 T
0 11 Q
(.) 413.22 202.67 T
(The Harlequin Dylan Examples dialog appears.) 135 184.67 T
(The Harlequin Dylan Examples dialog has a tr) 108 164.67 T
(ee contr) 333.16 164.67 T
(ol whose nodes ar) 371.47 164.67 T
(e) 459.15 164.67 T
-0.43 (example Dylan applications. In this guide, we ar) 108 150.67 P
-0.43 (e going to look at the example) 340.11 150.67 P
(called Othello.) 108 136.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.3/DEST FmPD2
[/Dest/F.quickstartdoc/DEST FmPD2
[/Title(A)/Rect[99 504 513 657]/ARTICLE FmPD2
[/Title(A)/Rect[99 117 495 441]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "3" 7
%%Page: "4" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(Quick Start) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(4) 72 100 T
2 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 11 Q
0 X
(Y) 126 640.67 T
(ou will need your own copy of the \336les that make up the Othello example,) 132.32 640.67 T
(because we ar) 126 626.67 T
(e going to modify it.) 193.89 626.67 T
1 F
(2.) 135 606.67 T
0 F
(Check the \322Make a copy for my own use\323 box at the bottom of the dia-) 153 606.67 T
(log.) 153 592.67 T
1 F
(3.) 135 572.67 T
0 F
(Select the \322Othello\323 node, then click) 153 572.67 T
4 9.6 Q
(OK) 331.14 572.67 T
0 11 Q
(.) 345.55 572.67 T
(The Open dialog appears.) 153 554.67 T
1 F
(4.) 135 534.67 T
0 F
(Choose a dir) 153 534.67 T
(ectory for your copy of the Othello \336les.) 214.21 534.67 T
(Harlequin Dylan copies the Othello \336les to the dir) 153 516.67 T
(ectory you choose.) 395.51 516.67 T
(The W) 153 498.67 T
(orkspace tool appears.) 184.15 498.67 T
-0.04 (The W) 126 478.67 P
-0.04 (orkspace tool is one of \336ve tools in the Harlequin Dylan. Fr) 157.11 478.67 P
-0.04 (om now on,) 443.41 478.67 P
(we simply call it the W) 126 464.67 T
(orkspace.) 236.52 464.67 T
(The other tools in Harlequin Dylan ar) 126 444.67 T
(e the Br) 308.83 444.67 T
(owser) 345.73 444.67 T
(, the Editor) 374.37 444.67 T
(, the Interactor) 427.64 444.67 T
(,) 497.96 444.67 T
(and the Debugger) 126 430.67 T
(. W) 212.91 430.67 T
(e will see those later) 228.4 430.67 T
(.) 325.66 430.67 T
3 16 Q
(1.3  Pr) 126 395.33 T
(ojects) 165.15 395.33 T
126 539/G5.888113 FmPA
0 11 Q
(In the W) 126 374.67 T
(orkspace, you can see the) 166.85 374.67 T
2 F
(pr) 292.75 374.67 T
(oject) 302.33 374.67 T
0 F
( that you ar) 322.69 374.67 T
(e working on. The W) 378.42 374.67 T
(ork-) 479.61 374.67 T
(space curr) 126 360.67 T
(ently shows the Othello pr) 175.69 360.67 T
(oject,) 304.5 360.67 T
5 9.5 Q
(othello.proj) 332.32 360.67 T
0 11 Q
(.) 400.72 360.67 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
211.7 339.57 153 339.57 2 L
0 1 1 0 1 0 0 K
V
0.55 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(XXXXXXXX) 153 340.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
211.7 319.57 153 319.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(XXXXXXXX) 153 320.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
211.7 299.57 153 299.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(XXXXXXXX) 153 300.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Harlequin Dylan tr) 126 280.67 T
(eats all your work as part of a development pr) 218.83 280.67 T
(oject. Appli-) 443.64 280.67 T
(cations ar) 126 266.67 T
(e the end pr) 172.64 266.67 T
(oduct of pr) 230.57 266.67 T
(ojects.) 284.32 266.67 T
(Harlequin Dylan stor) 126 246.67 T
(es information about your pr) 229.5 246.67 T
(oject in a) 370.12 246.67 T
2 F
(pr) 415.8 246.67 T
(oject \336le) 425.38 246.67 T
0 F
(. A) 461.63 246.67 T
(pr) 126 232.67 T
(oject \336le describes the sour) 136.76 232.67 T
(ce \336les and compilation options that Harlequin) 267.01 232.67 T
(Dylan uses to make the your application.) 126 218.67 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
388.08 217.57 328.21 217.57 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(COMMENT) 328.21 218.67 T
0 1 1 0 1 0 0 K
403.96 217.57 387.47 217.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(: Pr) 387.47 218.67 T
0 1 1 0 1 0 0 K
472.9 217.57 403.76 217.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(esumably a pr) 403.76 218.67 T
0 1 1 0 1 0 0 K
497.77 217.57 472.7 217.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(oject) 472.7 218.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
240.67 203.57 126 203.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
-0.05 (could also point to sour) 126 204.67 P
0 1 1 0 1 0 0 K
307.44 203.57 240.47 203.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
-0.05 (ce \336les that ar) 240.47 204.67 P
0 1 1 0 1 0 0 K
504 203.57 307.24 203.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
-0.05 (en\325t part of your app? And other things.) 307.24 204.67 P
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
249.3 189.57 126 189.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(Need to de\336ne this better) 126 190.67 T
0 1 1 0 1 0 0 K
251.24 189.57 248.49 189.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(.) 248.49 190.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
185.86 169.57 126 169.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(COMMENT) 126 170.67 T
0 1 1 0 1 0 0 K
260.2 169.57 185.26 169.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(: yap some mor) 185.26 170.67 T
0 1 1 0 1 0 0 K
320.28 169.57 260 169.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(e, and better) 260 170.67 T
0 1 1 0 1 0 0 K
366.48 169.57 319.47 169.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(, about pr) 319.47 170.67 T
0 1 1 0 1 0 0 K
398.77 169.57 366.28 169.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(ojects.) 366.28 170.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Harlequin Dylan identi\336es pr) 126 150.67 T
(oject \336les fr) 269.57 150.67 T
(om their name suf) 324.99 150.67 T
(\336x,) 413.41 150.67 T
5 9.5 Q
(.proj) 431.24 150.67 T
0 11 Q
(.) 459.74 150.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.4/DEST FmPD2
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "4" 8
%%Page: "5" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(1.4) 389.94 677.67 T
(Building a standalone application) 411.31 677.67 T
108 81 540 117 R
7 X
V
2 9 Q
0 X
(DRAFT) 108 100 T
1 F
(5) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 16 Q
0 X
(1.4  Building a standalone application) 108 637.33 T
108 781/G5.888424 FmPA
0 11 Q
(W) 108 616.67 T
(e can use the W) 117.99 616.67 T
(orkspace to build a standalone application fr) 192.85 616.67 T
(om the Othello) 409.44 616.67 T
(pr) 108 602.67 T
(oject. A standalone application is a) 118.76 602.67 T
5 9.5 Q
(.exe) 290.2 602.67 T
0 11 Q
( \336le and any associated DLLs,) 313 602.67 T
(r) 108 588.67 T
(esour) 112.15 588.67 T
(ces, and help \336les.) 138.87 588.67 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
167.86 567.57 108 567.57 2 L
0 1 1 0 1 0 0 K
V
0.55 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(COMMENT) 108 568.67 T
0 1 1 0 1 0 0 K
468.05 567.57 167.26 567.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(: 1997-05-28: Is the game called Othello in the US? Is it a trade) 167.26 568.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
180.84 553.57 108 553.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(name anywher) 108 554.67 T
0 1 1 0 1 0 0 K
390.84 553.57 180.64 553.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(e? Maybe Reversi is the name we must use.) 180.64 554.67 T
0 0 0 1 0 0 0 K
1 F
0 0 0 1 0 0 0 K
(1.) 117 534.67 T
0 F
(Choose) 135 534.67 T
4 9.6 Q
(Build othello.e) 173.9 534.67 T
(x) 239.9 534.67 T
(e) 245.14 534.67 T
0 11 Q
( fr) 250.48 534.67 T
(om the) 261.04 534.67 T
4 9.6 Q
(Build) 297.51 534.67 T
0 11 Q
( menu.) 321.51 534.67 T
(Harlequin Dylan starts building the application.) 108 514.67 T
1 F
(Note:) 108 494.67 T
0 F
( Fr) 135.19 494.67 T
(om now on, we use the notation) 148.21 494.67 T
4 9.6 Q
(Men) 306.87 494.67 T
(u > Command) 325.97 494.67 T
0 11 Q
( to mean the item) 389.72 494.67 T
4 9.6 Q
(Command) 108 480.67 T
0 11 Q
( on the menu) 154.93 480.67 T
4 9.6 Q
(Men) 221.62 480.67 T
(u) 240.72 480.67 T
0 11 Q
(. So \322Choose) 246.59 480.67 T
4 9.6 Q
(Build > Build othello.e) 311.01 480.67 T
(x) 411.96 480.67 T
(e) 417.2 480.67 T
0 11 Q
(\323 would) 422.54 480.67 T
(mean the same as step 1 above.) 108 466.67 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
167.86 445.57 108 445.57 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(COMMENT) 108 446.67 T
0 1 1 0 1 0 0 K
243.4 445.57 167.26 445.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(: Does the envir) 167.26 446.67 T
0 1 1 0 1 0 0 K
287.67 445.57 243.2 445.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(onment r) 243.2 446.67 T
0 1 1 0 1 0 0 K
463.38 445.57 287.48 445.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(eport anything when the build com-) 287.48 446.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
296.54 431.57 108 431.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(pletes? Should we point them to the W) 108 432.67 T
0 1 1 0 1 0 0 K
366.04 431.57 295.53 431.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(arnings page?) 295.53 432.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Once the application is built, you can r) 108 412.67 T
(un it. The W) 295.53 412.67 T
(orkspace menu command) 354.75 412.67 T
4 9.6 Q
(Run > Star) 108 398.67 T
(t) 156.47 398.67 T
0 11 Q
( r) 159.67 398.67 T
(uns the latest executable built for the curr) 166.67 398.67 T
(ent pr) 368.04 398.67 T
(oject.) 396.8 398.67 T
1 F
(2.) 117 378.67 T
0 F
(Choose) 135 378.67 T
4 9.6 Q
(Run > Star) 173.9 378.67 T
(t) 222.37 378.67 T
0 11 Q
(.) 225.56 378.67 T
(The Othello window appears.) 135 360.67 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
193.7 339.57 135 339.57 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(XXXXXXXX) 135 340.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
193.7 319.57 135 319.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(XXXXXXXX) 135 320.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
193.7 299.57 135 299.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(XXXXXXXX) 135 300.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.22 (The Othello application is now up and r) 108 280.67 P
-0.22 (unning. If you do not know the game,) 300.71 280.67 P
(you can r) 108 266.67 T
(ead the on-line help available fr) 153.19 266.67 T
(om its) 306.79 266.67 T
4 9.6 Q
(Help) 339.46 266.67 T
0 11 Q
( menu.) 360.27 266.67 T
3 16 Q
(1.5  Making c) 108 231.33 T
(hang) 189.57 231.33 T
(es) 221.04 231.33 T
108 375/G5.888640 FmPA
0 11 Q
-0.15 (<justi\336cation for change to Othello \321 we don\325t know what the change will be) 108 210.67 P
(yet>) 108 196.67 T
1 F
(1.) 117 176.67 T
0 F
(If you ar) 135 176.67 T
(e still r) 176.27 176.67 T
(unning Othello, exit it by selecting) 209.15 176.67 T
4 9.6 Q
(File > Quit) 379.18 176.67 T
0 11 Q
(.) 425.86 176.67 T
1 F
(2.) 117 156.67 T
0 F
(Select the Sour) 135 156.67 T
(ces tab in the W) 206.3 156.67 T
(orkspace.) 282.14 156.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.5/DEST FmPD2
135 686/M5.9.48360.Step1.1.Choose.Build.othelloexe.from.the.Build.menu FmPA
135 686/I5.1.888595 FmPA
[/Rect[219 461 225 474]/Border[0 0 0]/Page 9/View[/XYZ null 135 686 FmDC exch pop null]/LNK FmPD
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "5" 9
%%Page: "6" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(Quick Start) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(6) 72 100 T
2 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 11 Q
0 X
(The Sour) 126 640.67 T
(ces page has a tr) 169.73 640.67 T
(ee contr) 248.84 640.67 T
(ol that shows the sour) 287.15 640.67 T
(ce \336les making up the) 394.05 640.67 T
(Othello application.) 126 626.67 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
285.13 625.57 225.26 625.57 2 L
0 1 1 0 1 0 0 K
V
0.55 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(COMMENT) 225.26 626.67 T
0 1 1 0 1 0 0 K
296.76 625.57 284.52 625.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(: T) 284.52 626.67 T
0 1 1 0 1 0 0 K
337.13 625.57 295.75 625.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(our sour) 295.75 626.67 T
0 1 1 0 1 0 0 K
387.55 625.57 336.94 625.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(ces a little.) 336.94 626.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
329.64 605.57 126 605.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(<justi\336cation of needing the XXX facility>) 126 606.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Among the Othello example \336les we copied earlier) 126 586.67 T
(, ther) 372.09 586.67 T
(e is a pr) 397 586.67 T
(e-pr) 434.64 586.67 T
(epar) 454.33 586.67 T
(ed) 475.86 586.67 T
-0.43 (Dylan sour) 126 572.67 P
-0.43 (ce \336le with the changes we need for the) 179.51 572.67 P
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
391.93 571.57 369.92 571.57 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
-0.43 (XXX) 369.92 572.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.43 ( facility) 391.93 572.67 P
-0.43 (. T) 426.39 572.67 P
-0.43 (o incorporate) 437.19 572.67 P
(it into our Othello application, we simply add it to the pr) 126 558.67 T
(oject.) 402.27 558.67 T
1 F
(3.) 135 538.67 T
0 F
(Choose) 153 538.67 T
4 9.6 Q
(Pr) 191.9 538.67 T
(oject > Inser) 201.84 538.67 T
(t File) 258.33 538.67 T
0 11 Q
(.) 280.73 538.67 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
212.86 519.57 153 519.57 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(COMMENT) 153 520.67 T
0 1 1 0 1 0 0 K
426.54 519.57 212.26 519.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(: Does the \336le have to be described anywher) 212.26 520.67 T
0 1 1 0 1 0 0 K
502.1 519.57 426.34 519.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(e, like LID \336le?) 426.34 520.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
183.72 505.57 153 505.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(Is ther) 153 506.67 T
0 1 1 0 1 0 0 K
222.66 505.57 183.52 505.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(e any or) 183.52 506.67 T
0 1 1 0 1 0 0 K
488.83 505.57 222.46 505.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(dering issue? Do we have to have selected a particular) 222.46 506.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
218.44 491.57 153 491.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(node in the tr) 153 492.67 T
0 1 1 0 1 0 0 K
236.41 491.57 218.24 491.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(ee?) 218.24 492.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The Open dialog appears.) 153 474.67 T
1 F
(4.) 135 454.67 T
0 F
(In the Open dialog, select) 153 454.67 T
5 9.5 Q
(changes.dylan) 279.41 454.67 T
0 11 Q
( and click) 353.51 454.67 T
4 9.6 Q
(OK) 402.67 454.67 T
0 11 Q
(.) 417.07 454.67 T
(Harlequin Dylan adds) 153 436.67 T
5 9.5 Q
(changes.dylan) 264.45 436.67 T
0 11 Q
( to the pr) 338.55 436.67 T
(oject.) 382.41 436.67 T
(Now) 126 416.67 T
5 9.5 Q
(changes.dylan) 153.07 416.67 T
0 11 Q
( is part of the sour) 227.17 416.67 T
(ces used to build the Othello applica-) 315.2 416.67 T
(tion, we can r) 126 402.67 T
(ebuild) 191.57 402.67 T
5 9.5 Q
(othello.exe) 225.43 402.67 T
0 11 Q
(.) 288.13 402.67 T
1 F
(5.) 135 382.67 T
0 F
(Choose) 153 382.67 T
4 9.6 Q
(Build > Build othello.e) 191.9 382.67 T
(x) 292.84 382.67 T
(e) 298.08 382.67 T
0 11 Q
( in the W) 303.42 382.67 T
(orkspace.) 346.52 382.67 T
(Harlequin Dylan builds the application again.) 153 364.67 T
(This time, Harlequin Dylan compiles only one \336le:) 126 344.67 T
5 9.5 Q
(changes.dylan) 373.95 344.67 T
0 11 Q
(. No) 448.05 344.67 T
(changes had been made to the existing sour) 126 330.67 T
(ce \336les, so it did not need to) 337.75 330.67 T
(r) 126 316.67 T
(ecompile them. It just linked the existing compiled \336les with the new one to) 130.15 316.67 T
(make the new version .) 126 302.67 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
301.16 301.57 241.3 301.57 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(COMMENT) 241.3 302.67 T
0 1 1 0 1 0 0 K
391.08 301.57 300.56 301.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(: Compiled-\336le suf) 300.56 302.67 T
0 1 1 0 1 0 0 K
477.24 301.57 390.88 301.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(\336x details? DLLs?) 390.88 302.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This featur) 126 282.67 T
(e is called) 178.56 282.67 T
2 F
(incr) 228.72 282.67 T
(emental compilation) 246.45 282.67 T
0 F
(. It can save a lot of time during) 336.18 282.67 T
-0.34 (development, when you want to r) 126 268.67 P
-0.34 (ebuild your application after a small change) 289.48 268.67 P
(in or) 126 254.67 T
(der to test its ef) 148.51 254.67 T
(fects.) 222.72 254.67 T
(Y) 126 234.67 T
(ou can now r) 132.32 234.67 T
(un the new version of Othello.) 195.84 234.67 T
1 F
(6.) 135 214.67 T
0 F
(Choose) 153 214.67 T
4 9.6 Q
(Run > Star) 191.9 214.67 T
(t) 240.37 214.67 T
0 11 Q
( in the W) 243.56 214.67 T
(orkspace.) 286.66 214.67 T
(A new Othello window appears.) 153 196.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.6/DEST FmPD2
[/Dest/L.quickstartdoc/DEST FmPD2
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "6" 10
%%Page: "7" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 540 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9 Q
0 X
(DRAFT) 108 100 T
1 F
(7) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 513 504 648 R
7 X
V
0 30 Q
0 X
(2) 180 628 T
108 586.45 504 614 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 586.45 504 614 R
7 X
0 0 0 1 0 0 0 K
V
108 607.14 270 607.14 2 L
V
3 H
2 Z
0 X
N
108 598.14 270 598.14 2 L
7 X
V
1 H
0 X
N
36 72 576 720 C
0 0 0 0 1 1 1 K
0 2 Q
7 X
(2) 108 566.45 T
0 0 0 1 0 0 0 K
0 30 Q
0 X
0 0 0 1 0 0 0 K
(Fixing Bugs) 109 566.45 T
108 710/G6.887888 FmPA
108 126 486 432 R
7 X
V
3 16 Q
0 X
(2.1  Intr) 108 421.33 T
(oduction) 154.43 421.33 T
108 565/G6.887889 FmPA
0 11 Q
(Though we can play Othello, we cannot save games in pr) 108 400.67 T
(ogr) 386.01 400.67 T
(ess and r) 402.28 400.67 T
(esume) 445.15 400.67 T
(play at a later date.) 108 386.67 T
-0.04 (In this section, we add a save featur) 108 366.67 P
-0.04 (e to the game, available thr) 281.01 366.67 P
-0.04 (ough) 411.82 366.67 P
4 9.6 Q
-0.04 (Sa) 439.69 366.67 P
-0.04 (ve) 451.29 366.67 P
0 11 Q
-0.04 ( and) 461.96 366.67 P
4 9.6 Q
(Open) 108 352.67 T
0 11 Q
( commands on its) 132.54 352.67 T
4 9.6 Q
(File) 221 352.67 T
0 11 Q
( menu. \050If you look at the version of Othello we) 237.54 352.67 T
(have at the moment, you will see that those items ar) 108 338.67 T
(e disabled.\051 The code for) 360.48 338.67 T
-0.01 (the save featur) 108 324.67 P
-0.01 (e has some small bugs that we must corr) 179.18 324.67 P
-0.01 (ect befor) 375.86 324.67 P
-0.01 (e the save fea-) 417.51 324.67 P
(tur) 108 310.67 T
(e will work pr) 122.37 310.67 T
(operly) 191.06 310.67 T
(. In doing so we will see the Editor and Debugger) 221.39 310.67 T
(.) 461.28 310.67 T
3 16 Q
(2.2  Reb) 108 275.33 T
(uilding the application) 158.08 275.33 T
108 419/G6.887923 FmPA
0 11 Q
-0.03 (Ther) 108 254.67 P
-0.03 (e is another pr) 130.56 254.67 P
-0.03 (e-pr) 200.13 254.67 P
-0.03 (epar) 219.82 254.67 P
-0.03 (ed Dylan sour) 241.35 254.67 P
-0.03 (ce \336le with the changes we need for) 309.97 254.67 P
(the game-saving facility) 108 240.67 T
(.) 223.25 240.67 T
1 F
(1.) 117 220.67 T
0 F
(Choose) 135 220.67 T
4 9.6 Q
(Pr) 173.9 220.67 T
(oject > Inser) 183.84 220.67 T
(t File) 240.33 220.67 T
0 11 Q
(.) 262.73 220.67 T
(The Open dialog appears.) 135 202.67 T
1 F
(2.) 117 182.67 T
0 F
(In the Open dialog, select) 135 182.67 T
5 9.5 Q
(changes2.dylan) 261.41 182.67 T
0 11 Q
( and click) 341.21 182.67 T
4 9.6 Q
(OK) 390.37 182.67 T
0 11 Q
(.) 404.77 182.67 T
(Harlequin Dylan adds) 135 164.67 T
5 9.5 Q
(changes2.dylan) 246.45 164.67 T
0 11 Q
( to the pr) 326.25 164.67 T
(oject.) 370.11 164.67 T
(Now we can r) 108 144.67 T
(ebuild) 175.95 144.67 T
5 9.5 Q
(othello.exe) 209.8 144.67 T
0 11 Q
(.) 272.51 144.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.7/DEST FmPD2
[/Dest/F.expandingdoc/DEST FmPD2
[/Title(A)/Rect[99 504 513 657]/ARTICLE FmPD2
[/Title(A)/Rect[99 117 495 441]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "7" 11
%%Page: "8" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(Fixing Bugs) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(8) 72 100 T
2 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
1 11 Q
0 X
(3.) 135 640.67 T
0 F
(Choose) 153 640.67 T
4 9.6 Q
(Build > Build othello.e) 191.9 640.67 T
(x) 292.84 640.67 T
(e) 298.08 640.67 T
0 11 Q
( in the W) 303.42 640.67 T
(orkspace.) 346.52 640.67 T
(Harlequin Dylan builds the application again.) 153 622.67 T
3 16 Q
(2.3  Compiler warnings) 126 587.33 T
126 731/G6.887909 FmPA
0 11 Q
-0.17 (Notice that during compilation, Harlequin Dylan r) 126 566.67 P
-0.17 (eports that) 370.84 566.67 P
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
447.56 565.57 425.55 565.57 2 L
0 1 1 0 1 0 0 K
V
0.55 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
-0.17 (XXX) 425.55 566.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.17 (. The W) 447.56 566.67 P
-0.17 (ork-) 483.87 566.67 P
(space has a W) 126 552.67 T
(arnings page wher) 193.23 552.67 T
(e it collects compile-time warnings together) 283.85 552.67 T
(.) 495.24 552.67 T
1 F
(4.) 135 532.67 T
0 F
(Select the W) 153 532.67 T
(arnings page in the W) 211.73 532.67 T
(orkspace.) 317.7 532.67 T
(Each warning is hyperlinked to the sour) 126 512.67 T
(ce de\336nition that caused it. If you) 320.96 512.67 T
(click on the warning, Harlequin Dylan brings up the Editor on the de\336nition.) 126 498.67 T
1 F
(5.) 135 478.67 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
210.93 477.57 153 477.57 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(<ACTION>) 153 478.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( on the warning.) 210.93 478.67 T
(The Editor appears.) 153 460.67 T
(Now we can see the faulty de\336nition.) 126 440.67 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
390.76 439.57 310.15 439.57 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(<Describe the pr) 310.15 440.67 T
0 1 1 0 1 0 0 K
489.44 439.57 390.56 439.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(oblem and how it is) 390.56 440.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
164.74 425.57 126 425.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(solved>) 126 426.67 T
0 0 0 1 0 0 0 K
1 F
0 0 0 1 0 0 0 K
(6.) 135 406.67 T
0 F
(Go to the Editor and type in the changes.) 153 406.67 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
212.86 387.57 153 387.57 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(COMMENT) 153 388.67 T
0 1 1 0 1 0 0 K
286.02 387.57 212.26 387.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(: Focus action?) 212.26 388.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
185.86 367.57 126 367.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(COMMENT) 126 368.67 T
0 1 1 0 1 0 0 K
494.64 367.57 185.26 367.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(: Something like this: Harlequin Dylan\325s Editor is a very power-) 185.26 368.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
441.74 353.57 126 353.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(ful, but it has been designed so it can be used like a simple editor) 126 354.67 T
0 1 1 0 1 0 0 K
484.68 353.57 440.93 353.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(, such as) 440.93 354.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
185.33 339.57 126 339.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(Notepad. W) 126 340.67 T
0 1 1 0 1 0 0 K
261.4 339.57 184.32 339.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(e will learn mor) 184.32 340.67 T
0 1 1 0 1 0 0 K
497.3 339.57 261.2 339.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(e about the Editor in chapter X, but for now you) 261.2 340.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
153.47 325.57 126 325.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(can tr) 126 326.67 T
0 1 1 0 1 0 0 K
230.76 325.57 153.27 325.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(eat it as if it wer) 153.27 326.67 T
0 1 1 0 1 0 0 K
304.71 325.57 230.57 325.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(e like Notepad.) 230.57 326.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
166.49 305.57 126 305.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(Note: Pr) 126 306.67 T
0 1 1 0 1 0 0 K
288.24 305.57 166.29 305.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(eviously Open/Save wer) 166.29 306.67 T
0 1 1 0 1 0 0 K
490.61 305.57 288.04 305.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(e disabled / grayed out. Also, Filesystem) 288.04 306.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
200.84 291.57 126 291.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(etc. libraries alr) 126 292.67 T
0 1 1 0 1 0 0 K
349.62 291.57 200.65 291.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(eady used in \336rst version of pr) 200.65 292.67 T
0 1 1 0 1 0 0 K
374.49 291.57 349.42 291.57 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(oject.) 349.42 292.67 T
0 0 0 1 0 0 0 K
1 F
0 0 0 1 0 0 0 K
(7.) 135 272.67 T
0 F
(Choose) 153 272.67 T
4 9.6 Q
(File > Sa) 191.9 272.67 T
(ve) 230.98 272.67 T
0 11 Q
( in the Editor) 241.65 272.67 T
(.) 304.53 272.67 T
-0.44 (Having \336xed the sour) 126 252.67 P
-0.44 (ce of the warning, we can r) 230.54 252.67 P
-0.44 (ebuild the application and try) 358.73 252.67 P
(out the new version.) 126 238.67 T
1 F
(8.) 135 218.67 T
0 F
(Choose Build > Build othello.exe.) 153 218.67 T
(See updated app) 153 200.67 T
(Play game) 126 180.67 T
1 F
(9.) 135 160.67 T
0 F
(T) 153 160.67 T
(ry to save a game.) 158.75 160.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.8/DEST FmPD2
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "8" 12
%%Page: "9" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(2.3) 444.46 677.67 T
(Compiler warnings) 465.83 677.67 T
108 81 540 117 R
7 X
V
2 9 Q
0 X
(DRAFT) 108 100 T
1 F
(9) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
(Enters debugger) 135 640.67 T
(. Runtime err) 214.48 640.67 T
(or: saves 0s and ones \050numbers\051 to str) 278.64 640.67 T
(eam) 460.85 640.67 T
(that is made of <byte-chars>.) 135 626.67 T
1 F
(10.) 117 606.67 T
0 F
(Open, edit, save, r) 135 606.67 T
(ebuild. Application still r) 223 606.67 T
(unning -- is updated.) 344.98 606.67 T
1 F
(1) 117 568.67 T
(1.) 122.09 568.67 T
0 F
(T) 135 568.67 T
(ry again. W) 140.75 568.67 T
(ithout r) 196.58 568.67 T
(estarting. Save works. Now do open.) 232.89 568.67 T
(Enters debugger) 135 550.67 T
(. Stack-r) 214.48 550.67 T
(elated bug. Diagnosis: r) 253.65 550.67 T
(eads of) 368.19 550.67 T
(f end of game) 402.56 550.67 T
(\336le. One-of) 135 536.67 T
(f err) 189.08 536.67 T
(or on elements: for ... to 63 not for ... below 63. Must) 209.25 536.67 T
-0.09 (br) 135 522.67 P
-0.09 (owse stack to \336x. Then double-click on local variable, goes to function) 145.23 522.67 P
(de\336nition.) 135 508.67 T
1 F
(12.) 117 488.67 T
0 F
(Open, edit, save, r) 135 488.67 T
(ebuild.) 223 488.67 T
(W) 135 470.67 T
(orks.) 144.99 470.67 T
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.9/DEST FmPD2
[/Title(A)/Rect[99 117 495 657]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "9" 13
%%Page: "10" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(Fixing Bugs) 72 677.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(10) 72 100 T
2 F
(DRAFT) 473.99 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 0 0 1 0 0 0 K
[/CropBox[36 72 FmDC 576 720 FmDC FmBx]/PAGE FmPD
[/Dest/P.10/DEST FmPD2
[/Dest/L.expandingdoc/DEST FmPD2
[/Title(A)/Rect[117 117 513 657]/ARTICLE FmPD2
[/Page 1/View[/XYZ null 109 714 FmDC exch pop null]/Title(Harlequin Dylan)/Count 11/OUT FmPD
[/Page 5/View[/XYZ null 108 737 FmDC exch pop null]/Title(Preface)/OUT FmPD
[/Page 7/View[/XYZ null 109 730 FmDC exch pop null]/Title(Quick Start)/OUT FmPD
[/Page 7/View[/XYZ null 134 576 FmDC exch pop null]/Title(1.1 Introduction)/OUT FmPD
[/Page 7/View[/XYZ null 134 472 FmDC exch pop null]/Title(1.2 Starting Harlequin Dylan)/OUT FmPD
[/Page 8/View[/XYZ null 152 550 FmDC exch pop null]/Title(1.3 Projects)/OUT FmPD
[/Page 9/View[/XYZ null 134 792 FmDC exch pop null]/Title(1.4 Building a standalone application)/OUT FmPD
[/Page 9/View[/XYZ null 134 386 FmDC exch pop null]/Title(1.5 Making changes)/OUT FmPD
[/Page 11/View[/XYZ null 109 730 FmDC exch pop null]/Title(Fixing Bugs)/OUT FmPD
[/Page 11/View[/XYZ null 134 576 FmDC exch pop null]/Title(2.1 Introduction)/OUT FmPD
[/Page 11/View[/XYZ null 134 430 FmDC exch pop null]/Title(2.2 Rebuilding the application)/OUT FmPD
[/Page 12/View[/XYZ null 152 742 FmDC exch pop null]/Title(2.3 Compiler warnings)/OUT FmPD
FMENDPAGE
%%EndPage: "10" 14
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 14
%%DocumentFonts: Palatino-Roman
%%+ Palatino-Bold
%%+ Palatino-Italic
%%+ Helvetica-Narrow-Bold
%%+ Helvetica-Bold
%%+ Courier-Bold
%%EOF
