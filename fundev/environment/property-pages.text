Title:     Environment Property Pages
Synopsis:  A breakdown of the environment property pages
Authors:   Andy Armstrong
Copyright: 1996 Functional Objects, Inc. All rights reserved.
Versions:
  26 Nov 96 - andrewa wrote initial version

* Property pages

Almost every page should have a 'general' property page which gives
the name of the object, plus other useful information where relevant
such as type, arguments, superclasses etc.

There is a question as to which order the property pages appear in. My
current thinking is that they appear generic to specific left to
right, so the first page is normally 'General'.

* Environment objects

This is an alphabetical list of all of the objects that the user sees
(i.e. all concrete environment objects), and the property pages that
are seen:

  <application>

    general:
      - shows the application file name, status etc.
    threads:
      - shows all of the threads, with priorities, status etc.

  <boolean-object>

    - is it worth having a page at all for this?

  <breakpoint-object>

    general:
      - shows status (enabled?), what else?
    source:
      - shows the source code with the breakpoint marked
   
  <class-object>

    general:
      - shows name, module & library, direct superclasses etc
    contents:
      - shows slot names and values
    source:
      - shows the source code
    usage:
      - shows a graph of used and client definitions
    warnings:
      - shows all warnings associated with this definition
    hierarchy:
      - shows the class hierarchy in a graph centered on this object
    methods:
      - lists all methods applicable to this class. Defaults to
        direct methods, but can toggle to show inherited methods too.
    keywords:
      - lists all initialization keywrods applicable to this
        class. Defaults to direct keywords, but can toggle to show
        indirect keywords too.
    slots:
      - lists all of the class slots. Defaults to direct slots, but
        can toggle to show inherited slots too.
   
  <collection-object>

    contents:
      - shows keys and elements
   
  <compiler-database>

    general:
      - shows what? file location? status?
   
  <compiler-warning-object>

    - should this be browsable?
   
  <constant-object>

    general:
      - shows the constant's name, type, value if known. Anything else?
    source:
      - shows the source code
    usage:
      - shows a graph of used and client definitions
    warnings:
      - shows all warnings associated with this definition

  <duim-frame>

    contents:
      - shows slot names and values
    hierarchy:
      - shows the DUIM sheet hierarchy

  <duim-gadget>

    contents:
      - shows slot names and values
    hierarchy:
      - shows the DUIM sheet hierarchy

  <duim-sheet>

    contents:
      - shows slot names and values
    hierarchy:
      - shows the DUIM sheet hierarchy

  <function-object>

    general:
      - shows the function name, parameters, return values etc.
    source:
      - shows the source code, with breakpoints etc. marked
    usage:
      - shows a graph of used and client definitions
    warnings:
      - shows all warnings associated with this definition
   
  <generic-function-object>

    general:
      - shows the function name, parameters, return values etc.
    source:
      - shows the source code
    usage:
      - shows a graph of used and client definitions
    warnings:
      - shows all warnings associated with this definition
    methods:
   
  <library-object>

    general:
      - shows the libraries name, its project, anything else?
    source:
      - shows the source code
    usage:
      - shows a graph of used and client libraries
    warnings:
      - shows all warnings from compiling the library
    bindings:
      - shows all of the bindings in the library, probably in a tree
        presented by module.
    modules:
      - shows all of the modules in the library, probably in a tree.
   
  <local-variable-object>   

    general:
      - shows the variable name, type, anything else?
    contents:
      - shows the contents of the variable's value.

  <method-object>

    general:
      - shows the method name, parameters, return values etc.
    source:
      - shows the source code, with breakpoints etc. marked
    usage:
      - shows a graph of used and client definitions
    warnings:
      - shows all warnings associated with this definition
   
  <module-object>

    general:
      - shows the module's name, parent library etc.
    source:
      - shows the source code
    usage:
      - shows a graph of used and client modules
    warnings:
      - shows all warnings from compiling the module
    bindings:
      - shows all of the bindings in the module. Can filter by type
        and by substring, and sort alphabetically or by type. Shows
        imports/exports somehow (icon?)
   
  <number-object>

    - is there anything worth showing here?
   
  <pair-object>

    contents:
      - shows the head and tail
   
  <project-object>

    general:
      - shows the project name, project file location, library,
        application object, compiler database object etc.
    breakpoints:
      - shows all of the breakpoints currently defined on the project. 
    source:  (?)
      - shows the source code
    usage:   (?)
      - shows a graph of used and client projects (?)
    warnings:
      - shows all warnings from compiling the project
    libraries:
      - shows the hierarchy of libraries in the project
    bindings:
      - shows all of the bindings in the project, probably in a tree
        presented by library and then by module.
   
  <range-object>

    contents:
      - shows range options
   
  <singleton-object>

    general:
      - shows the singleton's value (is this useful?)
    contents:
      - shows slot names and values
   
  <slot-object>

    general:
      - shows the slot's name, type, getter, setter, init keyword,
        init function/value etc.

  <stack-frame-object>

    general:
      - shows the function (if applicable), anything else?
    source:
      - shows the source code for the associated function object, with
        breakpoints etc. marked.
    

  <string-object>

    contents:
      - shows the string in a number of useful ways:
        - memory dump (ascii or hex)
        - by line
        - any others?
   
  <symbol-object>

    - is it worth having anything for this?
   
  <thread-object>

    general:
      - shows the thread name (is there one?), status etc.
   
  <type-object>

    general:
      - shows the name, type, module and library. Anything else?
    source:
      - shows the source code
    usage:
      - shows a graph of used and client definitions
    warnings:
      - shows all warnings associated with this definition
   
  <variable-object>

    general:
      - shows the name, type, module and library. Anything else?
    source:
      - shows the source code
    usage:
      - shows a graph of used and client definitions
    warnings:
      - shows all warnings associated with this definition