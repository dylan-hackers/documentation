Class: <function>
==============================

The class of objects that can be applied to arguments. All functions are
instances of <function>.


Exported from:
------------------------------
- #Module common-dylan#
- #Module Dylan#


Modifiers:
------------------------------
abstract free sealed


Superclasses:
------------------------------
- #<object>#
 

Subclasses:
------------------------------
- #<generic-function>#
- #<method>#


Functions on <function>:
------------------------------
- #alist-copy#
- #alist-delete#
- #any?#
- #apair#
- #applicable-method?#
- #apply#
- #assoc#
- #callback-entry#
- #choose#
- #choose-by#
- #choose-map#
- #collection-hash#
- #complement#
- #compose#
- #concatenate-map#
- #conjoin#
- #curry#
- #difference#
- #disjoin#
- #do#
- #do-directory#
- #do-handlers#
- #every?#
- #find#
- #find-element#
- #find-first-key#
- #find-key#
- #find-last-key#
- #find-tail#
- #foldl#
- #foldr#
- #function-arguments#
- #function-return-values#
- #function-specializers#
- #index#
- #map#
- #map-as#
- #map-into#
- #on-exit#
- #pair-do#
- #pair-foldl#
- #pair-foldr#
- #partition#
- #position#
- #pprint-logical-block#
- #precedes?#
- #rcurry#
- #reduce#
- #reduce1#
- #reduce-l#
- #reduce-r#
- #replace-elements!#
- #run-application#
- #satisfies#
- #sequence-hash#
- #tabulate#
- #unfold#
- #unfold/tail#
- #values-hash#


Functions returning <function>:
------------------------------
- #always#
- #backward-iteration-protocol#
- #collector-protocol#
- #complement#
- #compose#
- #conjoin#
- #curry#
- #disjoin#
- #forward-iteration-protocol#
- #key-test#
- #make-regexp-positioner#
- #make-regexp-replacer#
- #make-splitter#
- #make-translator#
- #rcurry#
- #table-protocol#



