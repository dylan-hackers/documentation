Class: <exclusive-lock>
==============================

The class of locks which prohibit unlocking by threads that do not own the
lock.

The notion of ownership is directly supported by the class, and a thread can
test whether an #<exclusive-lock># is currently owned. An instance of
#<exclusive-lock># can only be owned by one thread at a time, by calling
#wait-for# on the lock.

Once owned, any attempt by any other thread to wait for the lock will cause
that thread to block. It is an error for a thread to release an
#<exclusive-lock># if another thread owns it.

#<exclusive-lock># has no direct instances; calling #make# on
#<exclusive-lock># returns an instance of #<simple-lock>#.


Exported from:
------------------------------
- #Module Runtime-Threads#
- #Module threads#


Modifiers:
------------------------------
abstract free open


Superclasses:
------------------------------
- #<lock>#
 

Subclasses:
------------------------------
- #<read-write-lock>#
- #<recursive-lock>#
- #<simple-lock>#


Functions on <exclusive-lock>:
------------------------------
- #owned?#



