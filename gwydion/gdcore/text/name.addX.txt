Generic: add!
==============================

Adds an element to a sequence, possibly modifying the sequence.

Returns a sequence that contains _new-element_ and all the elements of
_source-sequence_. The _result-sequence_ may or may not be freshly allocated.
It may share structure with a preexisting sequence. _source-sequence_ and
_result-sequence_ may or may not be ==.

_source-sequence_ may be modified by this operation.

_result-sequence_'s size is one greater than the size of _source-sequence_.
The generic function #add!# doesn't specify where the new element will be
added, although individual methods may do so.

> define variable *numbers* = list (3, 4, 5)
> add! (*numbers*, 1)
>   ⇒  #(1, 3, 4, 5)
> *numbers*
>   ⇒ {undefined}


Exported from:
------------------------------
- #Module common-dylan#
- #Module Dylan#


Modifiers:
------------------------------
open


Arguments:
------------------------------
source-sequence - An instance of type-union(<set>, <sequence>). 
new-element     - An instance of #<object>#. 


Values:
------------------------------
result-sequence - An instance of type-union(<set>, <sequence>). 



Methods: add!
==============================
add! - The result of #add!# on a #<list># is equivalent to
       pair(element, list). The result will share structure with the _list_
       argument, but it will not be == to the argument, and the argument will
       not be modified.
