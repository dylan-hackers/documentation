Module: Module Dylan
==============================

Whenever possible, we have tried to keep the Dylan module pristine and
unextended, preferring to add our extensions to separate modules or libraries.
However, this is not always possible, particularly when it involves extending
the behavior of a function or macro that is exported from the Dylan module.
Currently, Gwydion compilers support these extensions to the Dylan module as
described below.

Keyed-by clause:

Gwydion compilers support keyed-by clauses in #for# statements. The format of
such a clause is "_var_ keyed-by _key_ in _collection_". _var_ is bound to
each element in collection, and _key_ is bound to the element's key value.

Using clause:

Gwydion compilers support using clauses in #for# statements. The format of
such a clause is "_var_ in _collection_ using _protocol_". The protocol will
be used instead of #forward-iteration-protocol#. The protocol argument must be
a variable name, not an expression. These using clauses may be used together
with keyed-by: "_var_ keyed-by _key_ in _collection_ using _protocol_".

Define function:

Gwydion compilers have an additional type of top level definition, "define
function" (see #function-definer#), which creates a constant binding in the
current module and initializes it to a new function. The usage of define
function is similar to that of define method (see #method-definer#). The
following is an example:

: define function cube (x)
:   x * x * x;
: end function cube;

A similar result might be had by writing

: define constant cube = method (x)
:                          x * x * x;
:                        end method;

or

: define method cube (x)
:   x * x * x;
: end method cube;

Subclass specializers:

Gwydion compilers supports subclass specializers via the #limited# function. A
subclass specializer causes a method to be invoked whenever the generic
function was called on a value that is the specified class or any subclass of
the specified class. The method is never invoked on a value that is an
instance (direct or indirect) of the specified class, only when the value is a
subclass of the specified class. The following is an example:

: define method make
:     (result-class :: limited(<class>, subclass-of: <my-class>));
:   let x = next-method();
:   do-special-logging-or-something(x);
:   x;
: end method;


Exported from:
------------------------------
- #Library common-dylan#
- #Library Dylan#


Topic: Dylan names
------------------------------
- #-#
- #:=#
- #/#
- #^#
- #~#
- #~=#
- #~==#
- #$maximum-integer#
- #$minimum-integer#
- #*#
- #&#
- #+#
- #<#
- #<=#
- #<abort>#
- #<array>#
- #<boolean>#
- #<byte-string>#
- #<character>#
- #<class>#
- #<collection>#
- #<complex>#
- #<condition>#
- #<deque>#
- #<double-float>#
- #<empty-list>#
- #<error>#
- #<explicit-key-collection>#
- #<extended-float>#
- #<float>#
- #<function>#
- #<generic-function>#
- #<integer>#
- #<list>#
- #<method>#
- #<mutable-collection>#
- #<mutable-explicit-key-collection>#
- #<mutable-sequence>#
- #<number>#
- #<object>#
- #<object-table>#
- #<pair>#
- #<range>#
- #<rational>#
- #<real>#
- #<restart>#
- #<sealed-object-error>#
- #<sequence>#
- #<serious-condition>#
- #<simple-error>#
- #<simple-object-vector>#
- #<simple-restart>#
- #<simple-vector>#
- #<simple-warning>#
- #<single-float>#
- #<singleton>#
- #<stretchy-collection>#
- #<stretchy-vector>#
- #<string>#
- #<symbol>#
- #<table>#
- #<type>#
- #<type-error>#
- #<unicode-string>#
- #<vector>#
- #<warning>#
- #=#
- #==#
- #>#
- #>=#
- #|#
- #abort#
- #abs#
- #add#
- #add!#
- #add-method#
- #add-new#
- #add-new!#
- #all-superclasses#
- #always#
- #any?#
- #applicable-method?#
- #apply#
- #aref#
- #aref-setter#
- #as#
- #ash#
- #as-lowercase#
- #as-lowercase!#
- #as-uppercase#
- #as-uppercase!#
- #backward-iteration-protocol#
- #begin#
- #block#
- #break#
- #case#
- #ceiling#
- #ceiling/#
- #cerror#
- #check-type#
- #choose#
- #choose-by#
- #class-definer#
- #complement#
- #compose#
- #concatenate#
- #concatenate-as#
- #condition-format-arguments#
- #condition-format-string#
- #conjoin#
- #constant-definer#
- #copy-sequence#
- #curry#
- #default-handler#
- #dimension#
- #dimensions#
- #direct-subclasses#
- #direct-superclasses#
- #disjoin#
- #do#
- #do-handlers#
- #domain-definer#
- #element#
- #element-setter#
- #empty?#
- #error#
- #even?#
- #every?#
- #fill!#
- #find-key#
- #find-method#
- #first#
- #first-setter#
- #floor#
- #floor/#
- #for#
- #forward-iteration-protocol#
- #function-arguments#
- #function-definer#
- #function-return-values#
- #function-specializers#
- #gcd#
- #generic-definer#
- #generic-function-mandatory-keywords#
- #generic-function-methods#
- #head#
- #head-setter#
- #identity#
- #if#
- #initialize#
- #instance?#
- #integral?#
- #intersection#
- #key-sequence#
- #key-test#
- #last#
- #last-setter#
- #lcm#
- #library-definer#
- #limited#
- #list#
- #logand#
- #logbit?#
- #logior#
- #lognot#
- #logxor#
- #make#
- #map#
- #map-as#
- #map-into#
- #max#
- #member?#
- #merge-hash-ids#
- #method#
- #method-definer#
- #min#
- #modulo#
- #negative#
- #negative?#
- #object-class#
- #object-hash#
- #odd?#
- #pair#
- #pop#
- #pop-last#
- #positive?#
- #push#
- #push-last#
- #range#
- #rank#
- #rcurry#
- #reduce#
- #reduce1#
- #remainder#
- #remove#
- #remove!#
- #remove-duplicates#
- #remove-duplicates!#
- #remove-key!#
- #remove-method#
- #replace-elements!#
- #replace-subsequence!#
- #restart-query#
- #return-allowed?#
- #return-description#
- #return-query#
- #reverse#
- #reverse!#
- #round#
- #round/#
- #row-major-index#
- #second#
- #second-setter#
- #select#
- #shallow-copy#
- #signal#
- #singleton#
- #size#
- #size-setter#
- #slot-initialized?#
- #sort#
- #sort!#
- #sorted-applicable-methods#
- #subsequence-position#
- #subtype?#
- #table-protocol#
- #tail#
- #tail-setter#
- #third#
- #third-setter#
- #truncate#
- #truncate/#
- #type-error-expected-type#
- #type-error-location#
- #type-error-value#
- #type-for-copy#
- #type-union#
- #union#
- #unless#
- #until#
- #values#
- #variable-definer#
- #vector#
- #while#
- #zero?#

