@inproceedings {vitek97efficient,
    author = "Jan Vitek and R. Nigel Horspool and Andreas Krall",
    title = "Efficient type inclusion tests",
    booktitle = "Proceedings of the Conference on Object-Oriented Programming,
                 Systems, Languages, and Application, OOPSLA'97",
    month = "October",
    year = 1997,
    address = "Atlanta, GA",
    publisher = "ACM Press"
}

@article {dujardin96fast,
    author = "Eric Dujardin and Eric Amiel and Eric Simon",
    title = "Fast algorithms for compressed multimethod dispatch table
             generation",
    note = "Originally written in 1996",
    journal = "ACM Transactions on Programming Languages and Systems",
      volume = 20,
      number = 1,
      year = 1998,
      pages = "116--165",
}

@inproceedings {vitek96compact,
    author = "Jan Vitek and R. Nigel Horspool",
    title = "Compact dispatch tables for dynamically typed programming
             languages",
    booktitle = "Proceedings of the International Conference on Compiler
                 Construction",
    year = 1996
}

@book {drm,
    author = "Andrew Shalit",
    title = "The {D}ylan Reference Manual",
    publisher = "Adison--Wesley Developers Press",
    address = "Reading, Massachusetts",
    year = 1996
}

@techreport {fahlman,
    author = "Scott E. Fahlman",
    title = "Gwydion: An integrated software environment for evolutionary
             software development and maintenance",
    institution = "School of Computer Science, Carnegie Mellon University",
    address = "Pittsburgh, PA 15217",
    month = "March",
    year = "1994"
}

@misc {engine,
    author = "Unknown",
    note = "Unpublished engine node dispatch paper, Harlequin, Ltd.
            Mentioned by Jonathan Bachrach in talk at MIT Media Lab.
            Availability and authorship unknown."
}

@misc {bachrach,
    author = "Jonathan Bachrach",
    title = "Unpublished talk at {MIT} {M}edia {L}ab",
    year = 2000,
    note = "Slides available at:\\
            \texttt{http://www.ai.mit.edu/{\textasciitilde}jrb/Projects/dylan-dispatch.htm}"
}

@misc {icfp2000,
    author = "Andreas Bogk and Jeff Dubrule and Gabor Greif and Bruce Hoult",
    title = "Raytracer submitted to the {ICFP}~2000 programming contest",
    year = 2000
}

@inproceedings {commonLoops,
    author = "Daniel G. Bobrow and Kenneth Kahn and Gregor Kiczales and
              Larry Masinter and Mark Stefik and Frank Zdybel",
    title = "{CommonLoops}: merging {L}isp and object-oriented programming",
    booktitle = "Proceedings of the Conference on Object-Oriented Programming,
                 Systems, Languages, and Application, OOPSLA'86",
    year = 1986,
    month = "September",
    address = "Portland, OR",
    publisher = "ACM Press",
    comment = "The original paper on multiple dispatch"
}

@inproceedings {predicate,
    author = "Michael D. Ernst and Craig Kaplan and Craig Chambers",
    title = "Predicate Dispatching: A Unified Theory of Dispatch",
    booktitle = "{ECOOP}'98",
    pages = "116--165",
    year = 1998,
    month = "July",
    address = "Brussels, Belgium"
}

@techreport {kidd2001thesis,
  author = {Eric Kidd},
  title = {Efficient Compression of Generic Function Dispatch Tables},
  institution = {Dartmouth College, Computer Science},
  address = {Hanover, NH},
  number = {TR2001-404},
  year = {2001},
  month = {June},
  URL = {ftp://ftp.cs.dartmouth.edu/TR/TR2001-404.ps.Z},
  comment = {
    Senior Honors Thesis.  Advisor: Chris Hawblitzel.
  },
  abstract = {
    A generic function is similar to an overloaded operator, but provides a
    way to select an appropriate behavior at run-time instead of compile-time.
    Dujardin and colleagues have proposed an algorithm for building and
    compressing generic function dispatch tables.

    We present several modifications to their algorithm, including an
    improvement to Pseudo-Closest-Poles and two new algorithms for compressing
    pole tables.  The two new compression algorithms are simple and fast, and
    one produces smaller output than the original.
  }
}

@TechReport{bourdoncle:integration,
  author = 	 "Fran{\c{c}}ois Bourdoncle and Stephan Merz",
  title = 	 "On the integration of functional programming, class-based
                  object-oriented programming, and multi-methods",
  institution =  "Centre de Math{\'e}matiques Appliqu{\'e}es, 
                  Ecole des Mines de Paris",
  year = 	 1996,
  type =	 "Research Report",
  number =	 "26",
  address =	 "Paris",
  month =	 mar
  URL = {http://jazz.pst.informatik.uni-muenchen.de/~merz/papers/mlsub.html},
  abstract = { 
    We present a new predicative and decidable type system, called
    ML<, suitable for object-oriented languages with implicit
    polymorphism in the tradition of ML. Instead of using extensible
    records as a foundation for object-oriented extensions of
    functional languages, we propose to reinterpret classical datatype
    declarations as abstract and concrete class declarations, and to
    replace pattern-matching on run-time values by dynamic dispatch on
    run-time types. ML< is based on universally quantified polymorphic
    constrained types, where constraints are conjunctions of
    structural inequalities between monotypes built from extensible
    and partially ordered classes of type constructors. We show how
    this type system can be used to design programming languages
    retaining much of the ML spirit while integrating in a seamless
    fashion higher-order and class-based object-oriented programming,
    dynamic dispatch on several arguments, and parametric
    polymorphism. We give type-checking rules for a small, explicitly
    typed functional language with methods, and show that the
    resulting system has decidable minimal typing. We discuss type
    inference for this language. We then define a strict operational
    semantics, prove subject reduction, and show how abstraction and
    encapsulation can be achieved by proper use of a module system. We
    present a prototype implementation of this type system and discuss
    algorithmic and implementation issues. In particular, we give a
    type-checking algorithm which is exponential in the worst case but
    is expected to be polynomial in practice. We conclude by a
    comparison with other similar type systems in the literature,
    including ad-hoc polymorphism, dynamics, systems for performing
    type inference in the presence of primitive subtyping, as well as
    impredicative systems like F<.
  }
}
