<!--

  DylanDoc
  DocBook extensions for the Dylan programming language

  The following file overrides various parts of DocBook to make it better
  suited to the Dylan programming language. See the README file for more
  details.

  In SGML, the first declaration of a given entity silently overrides all
  subsequent declarations of that entity. DocBook contains a number of
  empty entities which are meant to be overriden. These are included at
  strategic points in the DTD, allowing local users to extend most parts of
  DocBook in a very clean fashion.

  This DTD should be referred to by the public identifier
  "UNREGISTERED::Gwydion Dylan Maintainers//DTD DylanDoc V4.2//EN",
  where V4.2 matches the appropriate version of DocBook. More complex version
  numbers may be used in the future to allow DylanDoc to be revised more often
  than DocBook.

  Eric Kidd
  eric.kidd@pobox.com

  Note:  This DTD has been modified for use with XML DocBook, and
  the public identifier has been changed to reflect the Gwydion Dylan
  Maintainers.

  Brent Fulgham
  brent@gwydiondylan.org

-->


<!-- =============== Local Modular Entities ======================= -->

<!ENTITY % local.dylan.def.class "">
<!ENTITY % dylan.def.class
	   "dylan-constant-def|dylan-variable-def|
	    dylan-generic-def|dylan-method-def|dylan-function-def|
	    dylan-class-def|dylan-macro-def|dylan-char-fn-def
	    %local.dylan.def.class;" >

<!ENTITY % local.dylan.tech.char.class "">
<!ENTITY % dylan.tech.char.class
	   "dlibrary|dmodule|dname|dlit|dparam|em|dclass|dkeyword
	    %local.dylan.tech.char.class;" >


<!-- =============== DocBook Entity Overrides ===================== -->

<!ENTITY % local.synop.class "|%dylan.def.class;">
<!ENTITY % local.tech.char.class "|%dylan.tech.char.class;">
<!ENTITY % local.para.class "|dlibrary|dmodule|dclass|dname|dlit|dparam">

<!-- =============== The Real Thing =============================== -->

<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
 "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
%DocBookDTD;


<!-- =============== Local Entities ===============================
  The following entities define collections of attributes which can
  be used to locate a Dylan library, module or definition. These
  represent hyperlinks of a sort, and should only be used someplace
  that a cross-reference would be meaningful.

  Note that these attributes do not refer to the namespace *within*
  a module, but rather the names exported by one.
-->

<!ENTITY % dlib "dlib CDATA #IMPLIED" >
<!ENTITY % dmod "dmod CDATA #IMPLIED" >
<!ENTITY % dloc "%dlib; %dmod;" >


<!-- =============== Inline Elements ==================================
  These are meant for use in normal text contexts. They're essentially
  just variations on LITERAL, but provide Dylan-specific information.

  DLibrary and DModule should be used to refer to library and module
  names, respectively. DName should be used for any single Dylan name
  which could appear in an export statement (classes, variables,
  functions, macros, etc). DLit can be used for any other fragments of
  Dylan code.

  Of special importance: please try to use the standard DocBook tag
  PARAMETER when refering to parameters, instead of using DLit or
  LITERAL.
-->

<!ELEMENT dlibrary (#PCDATA) >

<!ELEMENT dmodule (#PCDATA) >
<!ATTLIST dmodule %dlib; >

<!ELEMENT dname (#PCDATA) >
<!ATTLIST dname %dloc; >

<!ELEMENT dlit (#PCDATA) >
<!ELEMENT dclass (#PCDATA) >
<!ELEMENT dkeyword (#PCDATA) >
<!ELEMENT dparam (#PCDATA) >


<!-- =============== Definition Elements ==============================
  These correspond to the different types of definitions in the Dylan
  Reference Manual.
-->

<!ELEMENT dylan-constant-def (constant, defsummary, deftype?, defvalue?,
				defdescription, defsection*) >

<!ELEMENT dylan-variable-def (defname, defsummary, deftype?, defvalue?,
				defdescription, defsection*) >

<!ELEMENT dylan-function-def (function, defadjectives?, defsummary,
				defparameters, defreturns, defdescription,
				defsection*) >

<!ELEMENT dylan-generic-def (defname, defadjectives?, defsummary,
			       defparameters, defreturns, defdescription,
			       defsection*) >

<!ELEMENT dylan-method-def (defname, defadjectives?, defsummary,
			      defparameters, defreturns, defdescription,
			      defsection*) >

<!--
     For now this only processes Statement Macros (of the "with-" variety).
     If someone else wants to add definer and function macros, be my guest.
 -->

<!ELEMENT dylan-macro-def (defname, defadjectives?, defsummary,
			     defparameters, defdescription,
			     defsection*) >

<!ELEMENT dylan-class-def (classname, defadjectives?, defsummary, defsupers,
			     def-init-keywords, defdescription, defsection*) >

<!ATTLIST dylan-constant-def dylan-def-name CDATA #FIXED "Constant">
<!ATTLIST dylan-variable-def dylan-def-name CDATA #FIXED "Variable">
<!ATTLIST dylan-function-def dylan-def-name CDATA #FIXED "Function">
<!ATTLIST dylan-generic-def  dylan-def-name CDATA #FIXED "Generic">
<!ATTLIST dylan-method-def   dylan-def-name CDATA #FIXED "Method">
<!ATTLIST dylan-macro-def    dylan-def-name CDATA #FIXED "Macro">
<!ATTLIST dylan-class-def    dylan-def-name CDATA #FIXED "Class">

<!-- =============== Shared Definition Support ========================
  The following elements show up in most types of definitions.
-->

<!ELEMENT defname (#PCDATA) >
<!ELEMENT defadjectives (#PCDATA) >
<!ELEMENT defsummary (%para.char.mix;)*>
<!ELEMENT defdescription (%component.mix;)+> <!-- -(synop.class) -->
<!ELEMENT defsection (title, (%component.mix;)+)> <!-- -(synop.class) > -->

<!-- =============== Variable and Constant Definitions ================
  The following elements show up in variable and constant defintions.
-->

<!ELEMENT deftype (#PCDATA) >
<!ELEMENT defvalue (#PCDATA) >


<!-- =============== Parameter Definition Support ======================
  The following elements are used to define different kinds of
  parameter lists.

  Note that the ParamName for KeyParam should not include the final ":"
  character. This will be added as appropriate by the style sheets.
-->

<!ELEMENT varparam (variable-name, binds-to) >
<!ELEMENT rest-param (param-name, param-type?, param-summary?)? >
<!ELEMENT key-param (param-name, param-type?, param-default?, param-summary?) >
<!ELEMENT all-keys EMPTY >
<!ELEMENT variable-name (#PCDATA) >
<!ELEMENT binds-to (#PCDATA) >
<!ELEMENT param-name (#PCDATA) >
<!ELEMENT param-type (#PCDATA) >
<!ELEMENT param-default (#PCDATA) >
<!ELEMENT param-singleton (#PCDATA) >
<!ELEMENT param-summary (%para.char.mix; | %para.mix;)*>
<!ELEMENT param (param-name, (param-type|param-singleton)?, param-summary?) >

<!-- =============== Class Definitions ================================
  The following elements are used to define different kinds of
  parameter lists.
-->

<!ELEMENT defsupers (defsuper*) >
<!ELEMENT defsuper (#PCDATA) >
<!ELEMENT def-init-keywords (key-param*) >
<!ENTITY obj-super '
 <defsupers>
  <defsuper>&lt;object&gt;</defsuper>
 </defsupers>'>
<!ENTITY object '&lt;object&gt;'>

<!-- =============== Function Definitions ========================
  The following elements are used to define functions, methods
  and generic functions.
-->

<!ELEMENT defparameters (varparam?, param*, rest-param?,
			     (key-param*, all-keys?)?) >
<!ELEMENT defreturns (param*, rest-param?)> <!-- -(param-singleton)> -->
<!ENTITY no-returns '<defreturns></defreturns>'>

<!-- and a little something for emphasis!  -->

<!ELEMENT em (#PCDATA)>
