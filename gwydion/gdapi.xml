<?xml version='1.0'?>
<!DOCTYPE book PUBLIC
 "UNREGISTERED::Gwydion Dylan Maintainers//DTD DylanDoc V4.2//EN" 
 "dylandoc.dtd"
 [
 <!ENTITY % entities SYSTEM "./dylandoc.ent">
 %entities;
 ]>

<book id="gdapi">
  <bookinfo>
    <title>&d2c; API Reference</title>
    <pubdate>24 May 2000</pubdate>

    <authorgroup>
      <editor>&contact.neel;</editor>
    </authorgroup>

    <copyright>
      <year>2000</year>
      <year>2001</year>
      <year>2002</year>
      <year>2003</year>
      <year>2004</year>
      <holder>gwydion dylan maintainers</holder>
    </copyright>
    &cmu.terms;
  </bookinfo>

  <chapter id="introduction">
    <title>Introduction</title>
    <para>
      This document is a companion to the Gwydion &dylan; Maintainer's Manual.
      The Maintainer's Manual contains an overview of the compiler's overall
      design, and information about its use. This document, the &d2c; API
      Reference Manual, is simply a catalog and description of all the
      methods, classes and variables in &d2c;. In addition to the signature and
      overview, each method definition contains information about which
      variables and parameters are mutated.  There may be some descriptions
      of algorithms in this document, but it is intended that that
      information be put in the Maintainer's Manual.
    </para>
    <para>
      Each chapter comprises one library, and is broken down into
      subsections by module and then file.
    </para>
    <para>
      Comments, corrections and additions are welcomed. This is
      intended to be a collaborative effort &mdash; your contributions are
      sorely needed. In particular, I'd like to ask that when you add or
      modify any definitions to &d2c;, that you add the documentation to
      this guide. The more people that work on this, the faster that it
      will get done.
    </para>
  </chapter>

  <chapter id="library-compiler-base">
    <title>Library compiler-base</title>
    <sect1 id="module-c-rep">
      <title>Module c-representation</title>
      <para>
	This module contains classes that represent the various C
	representations of &dylan; objects, along with various methods to
	manipulate them.
      </para>
      <sect2 id="file-c-rep">
	<title>File compiler/base/c-rep.dylan</title>
	<dylan-constant-def>
	  <constant>$byte-bits</constant>
	  <defsummary>The number of bits in a byte.</defsummary>
	  <deftype>&lt;integer&gt;</deftype>
	  <defdescription>
	    <para>
	      The number of bits in a byte. This is used for documentation
	      in various byte-twiddling operations.
	    </para>
	  </defdescription>
	</dylan-constant-def>
	<dylan-variable-def>
	  <defname>*pointer-alignment*</defname>
	  <defsummary>Word boundary for pointers</defsummary>
	  <deftype>
	    &lt;object&gt; &mdash; really false-or(&lt;integer&gt;)
	  </deftype>
	  <defdescription>
	    <para>
	      This variable is initially &lt;false&gt;, and is set by the
	      method <dlit>seed-representations</dlit>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*pointer-size*</defname>
	  <defsummary>The size of a pointer.</defsummary>
	  <deftype>
	    &lt;object&gt; &mdash; really false-or(&lt;integer&gt;)
	  </deftype>
	  <defdescription>
	    <para>
	      This variable is initially false, and set by
	      <dlit>seed-representations</dlit>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*short-alignment*</defname>
	  <defsummary>Boundaries based on size of C short ints.</defsummary>
	  <deftype>
	    &lt;object&gt; &mdash; really false-or(&lt;integer&gt;)
	  </deftype>
	  <defdescription>
	    <para>
	      This variable is initially false, and set by
	      <dlit>seed-representations</dlit>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*short-size*</defname>
	  <defsummary>The size in bytes of a C short int.</defsummary>
	  <deftype>
	    &lt;object&gt; &mdash; really false-or(&lt;integer&gt;)
	  </deftype>
	  <defdescription>
	    <para>
	      This variable is initially false, and set by
	      <dlit>seed-representations</dlit>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*int-alignment*</defname>
	  <defsummary>Natural boundaries for C ints.</defsummary>
	  <deftype>
	    &lt;object&gt; &mdash; really false-or(&lt;integer&gt;)
	  </deftype>
	  <defdescription>
	    <para>
	      This variable is initially false, and set by
	      <dlit>seed-representations</dlit>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*int-size*</defname>
	  <defsummary>The size in bytes of a C int.</defsummary>
	  <deftype>
	    &lt;object&gt; &mdash; really false-or(&lt;integer&gt;)
	  </deftype>
	  <defdescription>
	    <para>
	      This variable is initially false, and set by
	      <dlit>seed-representations</dlit>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*long-alignment*</defname>
	  <defsummary>Natural boundaries for C longs.</defsummary>
	  <deftype>
	    &lt;object&gt; &mdash; really false-or(&lt;integer&gt;)
	  </deftype>
	  <defdescription>
	    <para>This variable is initially false, and set by
<dlit>seed-representations</dlit>.</para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*long-size*</defname>
	  <defsummary>The size in bytes of a C long integer</defsummary>
	  <deftype>
	    &lt;object&gt; &mdash; really false-or(&lt;integer&gt;)
	  </deftype>
	  <defdescription>
	    <para>
	      This variable is initially false, and set by
	      <dlit>seed-representations</dlit>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*single-alignment*</defname>
	  <defsummary>Boundary for C single-precision floats.</defsummary>
	  <deftype>
	    &lt;object&gt; &mdash; really false-or(&lt;integer&gt;)
	  </deftype>
	  <defdescription>
	    <para>
	      This variable is initially false, and set by
	      <dlit>seed-representations</dlit>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*single-size*</defname>
	  <defsummary>The size in bytes of a C float.</defsummary>
	  <deftype>
	    &lt;object&gt; &mdash; really false-or(&lt;integer&gt;)
	  </deftype>
	  <defdescription>
	    <para>
	      This variable is initially false, and set by
	      <dlit>seed-representations</dlit>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*double-alignment*</defname>
	  <defsummary>Boundary for C double-precision floats.</defsummary>
	  <deftype>
	    &lt;object&gt; &mdash; really false-or(&lt;integer&gt;)
	  </deftype>
	  <defdescription>
	    <para>
	      This variable is initially false, and set by
	      <dlit>seed-representations</dlit>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*double-size*</defname>
	  <defsummary>Size in bytes of C double-precision floats.</defsummary>
	  <deftype>
	    &lt;object&gt; &mdash; really false-or(&lt;integer&gt;)
	  </deftype>
	  <defdescription>
	    <para>
	      This variable is initially false, and set by
	      <dlit>seed-representations</dlit>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*long-double-alignment*</defname>
	  <defsummary>Boundary for C long double floats.</defsummary>
	  <deftype>
	    &lt;object&gt; &mdash; really false-or(&lt;integer&gt;)
	  </deftype>
	  <defdescription>
	    <para>
	      This variable is initially false, and set by
	      <dlit>seed-representations</dlit>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*long-double-size*</defname>
	  <defsummary>Size in bytes of C long double floats.</defsummary>
	  <deftype>
	    &lt;object&gt; &mdash; really false-or(&lt;integer&gt;)
	  </deftype>
	  <defdescription>
	    <para>
	      This variable is initially false, and set by
	      <dlit>seed-representations</dlit>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*data-word-size*</defname>
	  <defsummary>Bytes of largest one-word data element</defsummary>
	  <deftype>
	    &lt;object&gt; &mdash; really false-or(&lt;integer&gt;)
	  </deftype>
	  <defdescription>
	    <para>
	      that fits in one word &mdash; the max of
	      <dname>*long-size*</dname> and <dname>*pointer-size*</dname>.
	      This variable is initially false, and is set by
	      <dlit>seed-representations</dlit>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-class-def>
	  <classname>&lt;c-representation&gt;</classname>
	  <defadjectives>abstract</defadjectives>
	  <defsummary>The abstract supertype of C representations.</defsummary>
	  <defsupers>
	    <defsuper> &lt;representation&gt; </defsuper>
	    <defsuper> &lt;identity-preserving-mixin&gt; </defsuper>
	  </defsupers>
	  <def-init-keywords>
	    <key-param>
	      <param-name>name</param-name>
	      <param-type>false-or(&lt;symbol&gt;)</param-type>
	      <param-default>#f</param-default>
	    </key-param>
	    <key-param>
	      <param-name>more-general</param-name>
	      <param-type>false-or(&lt;representation&gt;)</param-type>
	      <param-default>#f</param-default>
	    </key-param>
	    <key-param>
	      <param-name>to-more-general</param-name>
	      <param-type>type-union(&lt;byte-string&gt;,
                                    one-of(#t, #f))</param-type>
	      <param-default>#t</param-default>
	    </key-param>
	    <key-param>
	      <param-name>from-more-general</param-name>
	      <param-type>type-union(&lt;byte-string&gt;,
                                    one-of(#t, #f))</param-type>
	      <param-default>#t</param-default>
	    </key-param>
	    <key-param>
	      <param-name>alignment</param-name>
	      <param-type>&lt;integer&gt;</param-type>
	      <param-summary>This keyword is required.</param-summary>
	    </key-param>
	    <key-param>
	      <param-name>size</param-name>
	      <param-type>&lt;integer&gt;</param-type>
	      <param-summary>This keyword is required.</param-summary>
	    </key-param>
	    <key-param>
	      <param-name>c-type</param-name>
	      <param-type>&lt;string&gt;</param-type>
	      <param-summary>This keyword is required.</param-summary>
	    </key-param>
	  </def-init-keywords>
	  <defdescription>
	    <para>
	      This class is the abstract superclass of all C
	      representations. There should be more description here, but I'm
	      not sure what.
	    </para>
	  </defdescription>
	</dylan-class-def>
	<dylan-generic-def>
	  <defname>representation-has-bottom-value?</defname>
	  <defsummary>Returns true if the representation can support
bottom.</defsummary>
	  <defparameters>
	    <param>
	      <param-name>res</param-name>
	      <param-type>&lt;representation&gt;</param-type>
	    </param>
	  </defparameters>
	  <defreturns>
	    <param>
	      <param-name>result</param-name>
	      <param-type>&lt;boolean&gt;</param-type>
	    </param>
	  </defreturns>
	  <defdescription>
	    <para>
	      This method returns true if the representation class
	      can support a bottom value. (Eg, the immediate form for
	      integers can't, but the full heap representation can.) I'm not
	      sure if bottom is meant in the denotational sense or just as an
	      imprecise shorthand for "this value is not defined."
	    </para>
	  </defdescription>
	</dylan-generic-def>
	<dylan-method-def>
	  <defname>representation-has-bottom-value?</defname>
	  <defsummary>The default method in the generic</defsummary>
	  <defparameters>
	    <param>
	      <param-name>res</param-name>
	      <param-type>&lt;representation&gt;</param-type>
	    </param>
	  </defparameters>
	  <defreturns>
	    <param>
	      <param-name>result</param-name>
	      <param-type>&lt;boolean&gt;</param-type>
	    </param>
	  </defreturns>
	  <defdescription>
	    <para>The default method returns <dlit>#t</dlit>.</para>
	  </defdescription>
	</dylan-method-def>
	<dylan-method-def>
	  <defname>print-object</defname>
	  <defsummary>Writes a string to a stream. </defsummary>
	  <defparameters>
	    <param>
	      <param-name>rep</param-name>
	      <param-type>&lt;c-representation&gt;</param-type>
	    </param>
	    <param>
	      <param-name>stream</param-name>
	      <param-type>&lt;stream&gt;</param-type>
	    </param>
	  </defparameters>
	  <defreturns>
	  </defreturns>
	  <defdescription>
	    <para>
	      Prints the fields of <dname>rep</dname> to
	      <dname>stream</dname>.
	    </para>
	  </defdescription>
	</dylan-method-def>
	<dylan-class-def>
	  <classname>&lt;general-representation&gt;</classname>
	  <defsummary></defsummary>
	  <defsupers>
	    <defsuper>&lt;c-representation&gt;</defsuper>
	  </defsupers>
	  <def-init-keywords>
	    <key-param>
	      <param-name>to-more-general</param-name>
	      <param-type>type-union(&lt;byte-string&gt;,
                                    one-of(#t, #f))</param-type>
	      <param-default>#f</param-default>
	    </key-param>
	    <key-param>
	      <param-name>from-more-general</param-name>
	      <param-type>type-union(&lt;byte-string&gt;,
                                    one-of(#t, #f))</param-type>
	      <param-default>#f</param-default>
	    </key-param>
	  </def-init-keywords>
	  <defdescription>
	    <para>A subclass of <dname>&lt;c-representation&gt; that
represents arbitrary objects of unknown type.</dname>.</para>
	  </defdescription>
	</dylan-class-def>
	<dylan-class-def>
	  <classname>&lt;heap-representation&gt;</classname>
	  <defsummary></defsummary>
	  <defsupers>
	    <defsuper>&lt;c-representation&gt;</defsuper>
	  </defsupers>
	  <def-init-keywords>
	  </def-init-keywords>
	  <defdescription>
	    <para>
	      A subclass of <dname>&lt;c-representation&gt;</dname>
	      representing heap-allocated objects. I'm not sure how this
	      differs from <dname>&lt;general-representation&gt;</dname>
	    objects.
	    </para>
 	    <para>
	      I think it might be useful in a case when an object needs to
	      be heap allocated, but the type is known and doesn't necessarily
	      need the full object representation &mdash; eg, to represent
	      <dname>&lt;pair&gt;</dname>s with two words of RAM. I won't know
	      for certain, though, until I learn more about &d2c;.
	    </para>
	  </defdescription>
	</dylan-class-def>
	<dylan-class-def>
	  <classname>&lt;immediate-representation&gt;</classname>
	  <defsummary>Representation of "unboxed" values, I think.</defsummary>
	  <defsupers>
	    <defsuper>&lt;c-representation&gt;</defsuper>
	  </defsupers>
	  <def-init-keywords>
	  </def-init-keywords>
	  <defdescription>
	    <para>I believe this class represents unboxed values that
may be larger than one machine word.</para>
	  </defdescription>
	</dylan-class-def>
	<dylan-class-def>
	  <classname>&lt;c-data-word-representation&gt;</classname>
	  <defsummary>Objects that can fit in one C word.</defsummary>
	  <defsupers>
	    <defsuper>&lt;immediate-representation&gt;</defsuper>
	    <defsuper>&lt;data-word-representation&lt;</defsuper>
	  </defsupers>
	  <def-init-keywords>
	    <key-param>
	      <param-name>class</param-name>
	      <param-type>&lt;cclass&gt;</param-type>
	      <param-summary>This argument is required.</param-summary>
	    </key-param>
	    <key-param>
	      <param-name>data-word-member</param-name>
	      <param-type>&lt;byte-string&gt;</param-type>
	      <param-summary>This argument is required.</param-summary>
	    </key-param>
	  </def-init-keywords>
	  <defdescription>
	    <para>
	      This class represents objects whose layout can fit
	      into a single word of memory.
	    </para>
	  </defdescription>
	</dylan-class-def>
	<dylan-variable-def>
	  <defname>*general-rep*</defname>
	  <defsummary>A module variable possibly defining the C
representation for general variables.</defsummary>
	  <deftype>false-or(&lt;c-representation&gt;)</deftype>
	  <defdescription>
	    <para>
	      This variable is set by <dname>seed-representations</dname>
	      and is dependent on the value of <dname>*current-target*</dname>
	      &mdash; more when I learn more. It's referenced in the <dlibrary>
	      cback</dlibrary> a lot, but never mutated AFAICT.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*heap-rep*</defname>
	  <defsummary>Same as <dname>*general-rep*</dname>, only for
heap objects.</defsummary>
	  <deftype>false-or(&lt;c-representation&gt;)</deftype>
	  <defdescription>
	    <para>
	      This variable is set by <dname>seed-representations</dname>
	      and is dependent on the value of <dname>*current-target*</dname>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*boolean-rep*</defname>
	  <defsummary>
	    Presumably, the representation of boolean values.
	  </defsummary>
	  <deftype>false-or(&lt;c-representation&gt;)</deftype>
	  <defdescription>
	    <para>
	      This variable is set by <dname>seed-representations</dname> and
	      is dependent on the value of <dname>*current-target*</dname>. 
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*long-rep*</defname>
	  <defsummary>
	    The representation of integers fitting a C long.
	  </defsummary>
	  <deftype>false-or(&lt;c-representation&gt;)</deftype>
	  <defdescription>
	    <para>
	      This variable is set by <dname>seed-representations</dname> and
	      is dependent on the value of <dname>*current-target*</dname>. 
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*int-rep*</defname>
	  <defsummary>
	    The representation of integers that fit in a C int.
	  </defsummary>
	  <deftype>false-or(&lt;c-representation&gt;)</deftype>
	  <defdescription>
	    <para>This variable is set by
<dname>seed-representations</dname> and is dependent on the value of <dname>*current-target*</dname>. 
</para>	    
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*uint-rep*</defname>
	  <defsummary>
	    The representation of integers that fit in a C unsigned int.
	  </defsummary>
	  <deftype>false-or(&lt;c-representation&gt;)</deftype>
	  <defdescription>
	    <para>
	      This variable is set by <dname>seed-representations</dname> and
	      is dependent on the value of <dname>*current-target*</dname>.
	    </para>	    
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*short-rep*</defname>
	  <defsummary>
	    The representation of integers that fit in a C short.
	  </defsummary>
	  <deftype>false-or(&lt;c-representation&gt;)</deftype>
	  <defdescription>
	    <para>
	      This variable is set by <dname>seed-representations</dname> and
	      is dependent on the value of <dname>*current-target*</dname>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*ushort-rep* </defname>
	  <defsummary>The representation of integers that fit in a C
unsigned short.</defsummary>
	  <deftype>false-or(&lt;c-representation&gt;)</deftype>
	  <defdescription>
	    <para>
	      This variable is set by <dname>seed-representations</dname> and
	      is dependent on the value of <dname>*current-target*</dname>.
	    </para>	    
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*byte-rep*</defname>
	  <defsummary>
	    The representation of &dylan; objects that fit in a C char.
	  </defsummary>
	  <deftype>false-or(&lt;c-representation&gt;)</deftype>
	  <defdescription>
	    <para>
	      This type is meant for &dylan; objects that can be stuffed into
	      one byte. Usually it will be used for
	      <dname>limited(&lt;integer&gt;)</dname> types.
	    </para>
	    <para>
	      This variable is set by <dname>seed-representations</dname> and
	      is dependent on the value of <dname>*current-target*</dname>. 
	    </para>	    
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*ubyte-rep*</defname>
	  <defsummary>
	    The representation of &dylan; objects that fit in a C unsigned char.
	  </defsummary>
	  <defdescription>
	    <para>
	      This type is meant for &dylan; objects that can be stuffed into a
	      C short, especially <dname>limited(&lt;integer&gt;)</dname>
	      objects with <dname>min:</dname> and <dname>max:</dname> in the
	      appropriate range.
	    </para>
	    <para>
	      This variable is set by <dname>seed-representations</dname> and
	      is dependent on the value of <dname>*current-target*</dname>. 
	    </para>	    
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*float-rep*</defname>
	  <defsummary>
	    The C representation for <dname>&lt;single-float&gt;</dname> numbers.
	  </defsummary>
	  <deftype>false-or(&lt;c-representation&gt;)</deftype>
	  <defdescription>
	    <para>
	      This variable is set by <dname>seed-representations</dname> and
	      is dependent on the value of <dname>*current-target*</dname>.
	    </para>	    
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*double-rep*</defname>
	  <defsummary>The C representation for
<dname>&lt;double-float&gt;</dname>.</defsummary>
	  <deftype>false-or(&lt;c-representation&gt;)</deftype>
	  <defdescription>
	    <para>
	      This variable is set by <dname>seed-representations</dname> and
	      is dependent on the value of <dname>*current-target*</dname>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>*long-double-rep*</defname>
	  <defsummary>The C representation for
<dname>&lt;extended-float&gt;</dname>.</defsummary>
	  <deftype>false-or</deftype>
	  <defdescription>
	    <para>
	      This variable is set by <dname>seed-representations</dname> and
	      is dependent on the value of <dname>*current-target*</dname>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-method-def>
	  <defname>seed-representaions</defname>
	  <defsummary>
	    This method sets all the nice globals described above.
	  </defsummary>
	  <defparameters>
	  </defparameters>
	  <defreturns>
	  </defreturns>
	  <defdescription>
	    <para>
	      This method will look up <dname>*current-target*</dname> and
	      try to set all the alignment- and representation-related global
	      variables in this module. It is used to set the following
	      variables:
	    </para>
	    <simplelist>
	      <member> <dname> *pointer-alignment* </dname> </member>
	      <member> <dname> *pointer-size* </dname> </member> 
	      <member> <dname> *short-alignment* </dname> </member> 
	      <member> <dname> *short-size* </dname> </member> 
	      <member> <dname> *int-alignment* </dname> </member> 
	      <member> <dname> *int-size* </dname> </member> 
	      <member> <dname> *long-alignment* </dname> </member> 
	      <member> <dname> *long-size* </dname> </member> 
	      <member> <dname> *single-alignment* </dname> </member> 
	      <member> <dname> *single-size* </dname> </member> 
	      <member> <dname> *double-alignment* </dname> </member> 
	      <member> <dname> *double-size* </dname> </member> 
	      <member> <dname> *long-double-alignment* </dname> </member> 
	      <member> <dname> *long-double-size* </dname> </member> 
	      <member> <dname> *data-word-size* </dname> </member> 
	      <member> <dname> *general-rep* </dname> </member> 
	      <member> <dname> *heap-rep* </dname> </member> 
	      <member> <dname> *boolean-rep* </dname> </member> 
	      <member> <dname> *long-rep* </dname> </member> 
	      <member> <dname> *int-rep* </dname> </member> 
	      <member> <dname> *uint-rep* </dname> </member> 
	      <member> <dname> *short-rep* </dname> </member> 
	      <member> <dname> *ushort-rep* </dname> </member> 
	      <member> <dname> *byte-rep* </dname> </member> 
	      <member> <dname> *ubyte-rep* </dname> </member> 
	      <member> <dname> *ptr-rep* </dname> </member> 
	      <member> <dname> *float-rep* </dname> </member> 
	      <member> <dname> *double-rep* </dname> </member> 
	      <member> <dname> *long-double-rep* </dname> </member> 
	    </simplelist>
	  </defdescription>
	</dylan-method-def>
	<dylan-variable-def>
	  <defname>*assigning-representations-for*</defname>
	  <defsummary>Unknown.</defsummary>
	  <deftype>&lt;list&gt;</deftype>
	  <defdescription>
	    <para>
	      As far as I can tell, this is a dead/obsolete binding. There
	      do not seem to be *any* references to this variable anywhere
	      in the <dmodule>c-representation</dmodule> module, and
	      it is not exported from the module. It's just dead code, which
	      should be removed.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-method-def>
	  <defname>assign-representations</defname>
	  <defsummary>
	    Compute the representations for a compile-time class.
	  </defsummary>
	  <defparameters>
	    <param>
	      <param-name>class</param-name>
	      <param-type>&lt;cclass&gt;</param-type>
	    </param>
	  </defparameters>
	  <defreturns>
	  </defreturns>
	  <defdescription>
	    <para>
	      This method computes the representations of
	      <dname>class</dname> by mutating the slots
	      <dname>direct-speed-representation</dname> and
	      <dname>direct-space-representation</dname> of the
	      <dname>class</dname> parameter.
	    </para>
	  </defdescription>
	</dylan-method-def>
	<dylan-method-def>
	  <defname>use-data-word-representation</defname>
	  <defsummary>
	    Compute a <dname>&lt;c-data-word-representation&gt;</dname> for a
	    <dname>&lt;cclass&gt;</dname>.
	  </defsummary>
	  <defparameters>
	    <param>
	      <param-name>class</param-name>
	      <param-type>&lt;cclass&gt;</param-type>
	    </param>
	    <param>
	      <param-name>data-word-type</param-name>
	      <param-type>&lt;ctype&gt;</param-type>
	    </param>
	  </defparameters>
	  <defreturns>
	  </defreturns>
	  <defdescription>
	    <para>
	      Computes a representation for <dname>class</dname>
	      consistent with <dname>data-word-type</dname>. This method
	      mutates the slots <dname>direct-speed-representation</dname>
	      and <dname>direct-speed-representation</dname> of
	      <dname>class</dname>.
	    </para>
	  </defdescription>
	</dylan-method-def>
	<dylan-method-def>
	  <defname>use-general-representation</defname>
	  <defsummary>
	    Compute a <dname>&lt;general-representation&gt;</dname> for a
	    <dname>&lt;cclass&gt;</dname>.
	  </defsummary>
	  <defparameters>
	    <param>
	      <param-name>class</param-name>
	      <param-type>&lt;cclass&gt;</param-type>
	    </param>
	  </defparameters>
	  <defreturns>
	  </defreturns>
	  <defdescription>
	    <para>
	      This method sets the slots
	      <dname>direct-speed-representation</dname> and
	      <dname>direct-speed-representation</dname> of
	      <dname>class</dname> to <dname>*general-rep*</dname>.
	    </para>
	  </defdescription>
	</dylan-method-def>
	<dylan-method-def>
	  <defname>pick-representation</defname>
	  <defsummary>
	    Pick a representation for a compile-time class.
	  </defsummary>
	  <defparameters>
	    <param>
	      <param-name>class</param-name>
	      <param-type>&lt;cclass&gt;</param-type>
	    </param>
	    <param>
	      <param-name>optimize-for</param-name>
	      <param-type>one-of(#"speed", #"space")</param-type>
	    </param>
	  </defparameters>
	  <defreturns>
	    <param>
	      <param-name>rep</param-name>
	      <param-type>&lt;c-representation&gt;</param-type>
	    </param>
	  </defreturns>
	  <defdescription>
	    <para>
	      Based on the value of <dname>optimize-for</dname>,
	      <dname>pick-representation</dname> will set either of the
	      <dname>general-speed-representation</dname> or
	      <dname>general-space-representation</dname> slots of
	      <dname>class</dname>. It uses <dname>general-representation
	      </dname> to select a representation.
	    </para>
	  </defdescription>
	</dylan-method-def>
	<dylan-method-def>
	  <defname>general-representation</defname>
	  <defsummary>
	    Returns a representation for a compile-time class.
	  </defsummary>
	  <defparameters>
	    <param>
	      <param-name>class</param-name>
	      <param-type>&lt;cclass&gt;</param-type>
	    </param>
	    <param>
	      <param-name>optimize-for</param-name>
	      <param-type>one-of(#"speed", #"space")</param-type>
	    </param>
	  </defparameters>
	  <defreturns>
	    <param>
	      <param-name>rep</param-name>
	      <param-type>&lt;c-representation&gt;</param-type>
	    </param>
	  </defreturns>
	  <defdescription>
	    <para>
	      This method returns a general representation for a
	      compile-time class. It does not mutate any of its arguments.
	    </para>
	  </defdescription>
	</dylan-method-def>
	<dylan-method-def>
	  <defname>pick-representation</defname>
	  <defsummary></defsummary>
	  <defparameters>
	    <param>
	      <param-name>type</param-name>
	      <param-type>&lt;direct-instance-type&gt;</param-type>
	    </param>
	    <param>
	      <param-name>optimize-for</param-name>
	      <param-type>one-of(#"speed", #"space")</param-type>
	    </param>
	  </defparameters>
	  <defreturns>
	    <param>
	      <param-name>rep</param-name>
	      <param-type>&lt;c-representation&gt;</param-type>
	    </param>
	  </defreturns>
	  <defdescription>
	    <para>
	      This specialized method returns the direct
	      representation of its <dname>type</dname> argument. It may
	      mutate the slots <dname>direct-speed-representation</dname> and
	      <dname>direct-space-representation</dname> of the object.
	      <dname>type.base-class</dname>.
	    </para>
	  </defdescription>
	</dylan-method-def>
	<dylan-method-def>
	  <defname>direct-representation</defname>
	  <defsummary>
	    Return the representation of the compile-time class.
	  </defsummary>
	  <defparameters>
	    <param>
	      <param-name>class</param-name>
	      <param-type>&lt;cclass&gt;</param-type>
	    </param>
	    <param>
	      <param-name>optimize-for</param-name>
	      <param-type>one-of(#"speed", #"space")</param-type>
	    </param>
	  </defparameters>
	  <defreturns>
	    <param>
	      <param-name>rep</param-name>
	      <param-type>&lt;c-representation&gt;</param-type>
	    </param>
	  </defreturns>
	  <defdescription>
	    <para>
	      This method returns either the
	      <dname>direct-speed-representation</dname> or
	      <dname>direct-space-representation</dname> slots of
	      <dname>class</dname>; if they are unassigned it will set those
	      slots and then return the appropriate value.
	    </para>
	  </defdescription>
	</dylan-method-def>
	<dylan-method-def>
	  <defname>pick-representation</defname>
	  <defsummary>
	    Return the representation of the compile-time class.
	  </defsummary>
	  <defparameters>
	    <param>
	      <param-name>type</param-name>
	      <param-type>&lt;limited-ctype&gt;</param-type>
	    </param>
	    <param>
	      <param-name>optimize-for</param-name>
	      <param-type>one-of(#"speed", #"space")</param-type>
	    </param>
	  </defparameters>
	  <defreturns>
	    <param>
	      <param-name>rep</param-name>
	      <param-type>&lt;c-representation&gt;</param-type>
	    </param>
	  </defreturns>
	  <defdescription>
	    <para>
	      This method reinvokes <dname>pick-representation</dname> on
	      <dname>type.base-class</dname>, and returns that slot's
	      <dname>direct-speed-representation</dname> or
	      <dname>direct-space-representation</dname>; if they are
	      unassigned it may set those slots and then return the
	      appropriate value.
	    </para>
	  </defdescription>
	</dylan-method-def>
	<dylan-variable-def>
	  <defname>*byte-char-rep*</defname>
	  <defsummary>The representation of byte characters.</defsummary>
	  <deftype>
	    &lt;object&gt; &mdash; really
	    false-or(&lt;c-data-word-representation&gt;)
	  </deftype>
	  <defdescription>
	    <para>
	      The representation type of <dname>&lt;byte-character&gt;</dname>s.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-method-def>
	  <defname>pick-representation</defname>
	  <defsummary>
	    Returns the representation of <dname>&lt;byte-character-ctype&gt;</dname>
	  </defsummary>
	  <defparameters>
	    <param>
	      <param-name>type</param-name>
	      <param-type>&lt;byte-character-ctype&gt;</param-type>
	    </param>
	    <param>
	      <param-name>optimize-for</param-name>
	      <param-type>one-of(#"speed", #"space")</param-type>
	    </param>
	  </defparameters>
	  <defreturns>
	    <param>
	      <param-name>rep</param-name>
	      <param-type>&lt;c-representation&gt;</param-type>
	    </param>
	  </defreturns>
	  <defdescription>
	    <para>This method returns <dname>*byte-char-rep*</dname>,
first setting it if it is <dlit>#f</dlit>.</para>
	  </defdescription>
	</dylan-method-def>
	<dylan-method-def>
	  <defname>pick-representation</defname>
	  <defsummary>
	    Returns the representation of compile-time integer types.
	  </defsummary>
	  <defparameters>
	    <param>
	      <param-name>type</param-name>
	      <param-type>&lt;limited-integer-ctype&gt;</param-type>
	    </param>
	    <param>
	      <param-name>optimize-for</param-name>
	      <param-type>one-of(#"speed", #"space")</param-type>
	    </param>
	  </defparameters>
	  <defreturns>
	    <param>
	      <param-name>rep</param-name>
	      <param-type>&lt;c-representation&gt;</param-type>
	    </param>
	  </defreturns>
	  <defdescription>
	    <para>
	      Returns the appropriate representation for limited
	      integer types. Does not mutate any slots.
	    </para>
	  </defdescription>
	</dylan-method-def>
	<dylan-method-def>
	  <defname>pick-representation</defname>
	  <defsummary>Returns a representation of union types.</defsummary>
	  <defparameters>
	    <param>
	      <param-name>type</param-name>
	      <param-type>&lt;union-ctype&gt;</param-type>
	    </param>
	    <param>
	      <param-name>optimize-for</param-name>
	      <param-type>one-of(#"speed", #"space")</param-type>
	    </param>
	  </defparameters>
	  <defreturns>
	    <param>
	      <param-name>rep</param-name>
	      <param-type>&lt;c-representation&gt;</param-type>
	    </param>
	  </defreturns>
	  <defdescription>
	    <para>
	      This function merges all the representations in the
	      <dname>members</dname> slot of <dname>type</dname>, to return
	      the least general representation that can hold all possible
	      legal values.
	    </para>
	    <para>
	      This method may modify the direct-{foo}-representation slots of
	      the root types of the type-union tree.
	    </para>
	  </defdescription>
	</dylan-method-def>
	<dylan-method-def>
	  <defname>merge-representations</defname>
	  <defsummary>
	    Returns the minimal type that can contain any value in either
	    of its arguments.
	  </defsummary>
	  <defparameters>
	    <param>
	      <param-name>rep1</param-name>
	      <param-type>&lt;c-representation&gt;</param-type>
	    </param>
	    <param>
	      <param-name>rep2</param-name>
	      <param-type>&lt;c-representation&gt;</param-type>
	    </param>
	  </defparameters>
	  <defreturns>
	    <param>
	      <param-name>res</param-name>
	      <param-type>&lt;c-representation&gt;</param-type>
	    </param>
	  </defreturns>
	  <defdescription>
	    <para>
	      This method returns a new representation that is
	      more general than either of its arguments. It modifies neither
	      of its arguments.
	    </para>
	  </defdescription>
	</dylan-method-def>
	<dylan-method-def>
	  <defname>pick-representation</defname>
	  <defsummary>
	    Returns a representation for a type not known at compile time.
	  </defsummary>
	  <defparameters>
	    <param>
	      <param-name>type</param-name>
	      <param-type>&lt;unknown-ctype&gt;</param-type>
	    </param>
	    <param>
	      <param-name>optimize-for</param-name>
	      <param-type>one-of(#"speed", #"space")</param-type>
	    </param>
	  </defparameters>
	  <defreturns>
	    <param>
	      <param-name>rep</param-name>
	      <param-type>&lt;c-representation&gt;</param-type>
	    </param>
	  </defreturns>
	  <defdescription>
	    <para>This method mutates none of its arguments.</para>
	  </defdescription>
	</dylan-method-def>
      </sect2>
    </sect1>
    <sect1 id="module-utils">
      <title>Module utils</title>
	<para>
	  Unsurprisingly, this module is a grab-bag of various
	  useful functions and methods the used by modules in the rest of the
	  compiler. Some of this stuff is actually quite useful in contexts
	  beyond writing a compiler, and should probably be moved into some of
	  the common libraries rather than living in compiler base.
      </para>
      <sect2 id="file-utils">
	<title>File compiler/base/utils.dylan</title>
	<dylan-method-def>
	  <defname>pretty-format</defname>
	  <defsummary>Pretty-print error messages.</defsummary>
	  <defparameters>
	    <param>
	      <param-name>stream</param-name>
	      <param-type>&lt;stream&gt;</param-type>
	    </param>
	    <param>
	      <param-name>string</param-name>
	      <param-type>&lt;byte-string&gt;</param-type>
	    </param>
	    <rest-param>
	      <param-name>args</param-name>
	    </rest-param>
	  </defparameters>
	  <defreturns>
	  </defreturns>
	  <defdescription>
	    <para>
	      Used for error message printing. Turns each space in
	      the control string into a conditional newline, and turns literal
	      newlines into a mandatory newline and 2 space indent.
	    </para>
	  </defdescription>
	</dylan-method-def>
	<dylan-method-def>
	  <defname>condition-format</defname>
	  <defsummary>
	    A method that uses <dname>pretty-format</dname>.
	  </defsummary>
	  <defparameters>
	    <param>
	      <param-name>stream</param-name>
	      <param-type>&lt;stream&gt;</param-type>
	    </param>
	    <param>
	      <param-name>control-string</param-name>
	      <param-type>&lt;byte-string&gt;</param-type>
	    </param>
	    <rest-param>
	      <param-name>args</param-name>
	    </rest-param>
	  </defparameters>
	  <defreturns>
	  </defreturns>
	  <defdescription>
	    <para>
	      This method prints error messages using
	      <dname>pretty-format</dname>. It works by shadowing the
	      <dname>condition-format</dname> method defined on
	      <dlit>(&lt;stream&gt;, &lt;string&gt;)</dlit>.
	    </para>
	  </defdescription>
	</dylan-method-def>
	<dylan-method-def>
	  <defname>write-class-name</defname>
	  <defsummary>Print an object's classname to a stream.</defsummary>
	  <defparameters>
	    <param>
	      <param-name>thing</param-name>
	      <param-type>&lt;object&gt;</param-type>
	    </param>
	    <param>
	      <param-name>stream</param-name>
	    </param>
	  </defparameters>
	  <defreturns>
	  </defreturns>
	  <defdescription>
	    <para>
	      This print's <dname>thing</dname>'s
	      <dlit>object-class</dlit>'s name to the stream. If the class is
	      anonymous, the default representation of classes is printed to
	      the stream. (This should never happen until &d2c; learns how to
	      make anonymous classes.)
	    </para>
	  </defdescription>
	</dylan-method-def>
	<dylan-method-def>
	  <defname>write-address</defname>
	  <defsummary>Prints the address of an object</defsummary>
	  <defparameters>
	    <param>
	      <param-name>thing</param-name>
	    </param>
	    <param>
	      <param-name>stream</param-name>
	    </param>
	  </defparameters>
	  <defreturns>
	  </defreturns>
	  <defdescription>
	    <para>
	      Prints the hexadecimal address of <dname>object</dname>
	      to the stream <dname>stream</dname>.
	    </para>
	  </defdescription>
	</dylan-method-def>
	<dylan-method-def>
	  <defname>pprint-fields</defname>
	  <defsummary>Used to print an object and its fields</defsummary>
	  <defparameters>
	    <param>
	      <param-name>thing</param-name>
	    </param>
	    <param>
	      <param-name>stream</param-name>
	    </param>
	    <rest-param>
	      <param-name>fields</param-name>
	      <param-summary>Plist of field names and values.</param-summary>
	    </rest-param>
	  </defparameters>
	  <defreturns>
	  </defreturns>
	  <defdescription>
	    <para>
	      This method is a tool used to print the constituents
	      of an object. The <dlit>#rest</dlit> argument is a list of
	      symbols alternating with values &mdash; the symbols are used
	      as the field names for the values.
	    </para>
	  </defdescription>
	</dylan-method-def>
	<dylan-variable-def>
	  <defname>$thousand-cardinals</defname>
	  <defsummary>Vector of English names for numbers.</defsummary>
	  <deftype>&lt;vector&gt;</deftype>
	  <defdescription>
	    <para>
	      This vector contains the names that are prefixed
	      by numbers less than a hundred &mdash; "thousand", "million",
	      etc.  It is used in the method <dname>integer-to-english</dname>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>$ten-cardinals</defname>
	  <defsummary>Vector of the English tens units.</defsummary>
	  <deftype>&lt;vector&gt;</deftype>
	  <defdescription>
	    <para>
	      This vector contains the names of multiples of
	      ten &mdash; "twenty", "thirty", etc. It is used in the method
	      <dname>integer-to-english</dname>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>$unit-cardinals</defname>
	  <defsummary>Vector of English words for 0 to 20.</defsummary>
	  <deftype>&lt;vector&gt;</deftype>
	  <defdescription>
	    <para>
	      This vector contains strings naming the integers from
	      0 to 20. It is used in the method <dname>integer-to-english
	      </dname>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>$thousand-ordinals</defname>
	  <defsummary>
	    Like <dname>$thousand-cardinals</dname>, except to name positions.
	  </defsummary>
	  <deftype>&lt;vector&gt;</deftype>
	  <defdescription>
	    <para>
	      This vector lists the ordinals for numbers bigger
	      than 1000 &mdash; "millionth", "billionth" and so on. It is
	      used in the method <dname>integer-to-english</dname>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-variable-def>
	  <defname>$ten-ordinals</defname>
	  <defsummary>
	    Like <dname>$ten-cardinals</dname>, except to name positions.
	  </defsummary>
	  <deftype>&lt;vector&gt;</deftype>
	  <defdescription>
	    <para>
	      This vector lists the ordinals for small integers from
	      0 to 20 &mdash; "zeroth", "first", etc. It is used in the method
	      <dname>integer-to-english</dname>.
	    </para>
	  </defdescription>
	</dylan-variable-def>
	<dylan-method-def>
	  <defname>integer-to-english</defname>
	  <defsummary>Convert an integer to an English string.</defsummary>
	  <defparameters>
	    <param>
	      <param-name>int</param-name>
	      <param-type>&lt;integer&gt;</param-type>
	    </param>
	    <key-param>
	      <param-name>as</param-name>
	      <param-type>one-of(#"cardinal", #"ordinal")</param-type>
	      <param-default>#"cardinal"</param-default>
	    </key-param>
	  </defparameters>
	  <defreturns>
	    <param>
	      <param-name>res</param-name>
	      <param-type>&lt;byte-string&gt;</param-type>
	    </param>
	  </defreturns>
	  <defdescription>
	    <para>
	      This method converts an <dname>&lt;integer&gt;</dname>
	      object into the English string for the number it represents.  If
	      the keyword <dlit>as:</dlit> is set to <dlit>#"ordinal"</dlit>,
	      then the English string is the name of the n-th position;
	      otherwise it is just the name of the number.
	    </para>
	  </defdescription>
	</dylan-method-def>
      </sect2>
    </sect1>
  </chapter>
</book>
