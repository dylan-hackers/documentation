#!/usr/local/bin/perl -w

# $Id: doc_html.pl,v 1.1 2004/03/12 00:38:38 cgay Exp $

# This Perl script is used to post process all the HTML files in a Web
# generated by WebMaker. It is intended for use only on Webmaker
# generated HTML files, and its effect on non-WebMaker HTML files is,
# at the moment, unspecified. Try it if you like, but it may not work
# as you intend.

# Note: This script uses in-place editing mode to write files. That
# is, each subroutine that performs an edit creates a backup copy,
# then edits the original version directly. An outstanding problem
# with using in-place editing mode is that you can't really get back
# to your original file if you invoke several such subroutines. At any
# point, foo.html~ contains the version of foo.html that was saved
# after the _previous_ in-place edit was performed. Thus, if you call
# two subroutines that each perform an in-place edit, the ~ file will
# contain the intermediate version of the file, not the original. This
# is really just a minor problem in the early stages; if you're that
# worried about getting to the original file you should be call
# doc_html on a copy of the files anyway.

# color_vals is an associative array that maps color names onto their
# hexadecimals equivalents. The hex number is then used when
# specifying any HTML color resource, and the user can still specify
# the color name. Thus, if you specify -bg peach to doc_html, the
# color FFDAB9 will be used as the background color of each page in
# the web. Hexadecimal values are preferable to color names because
# all web browsers that parse the colors of HTML elements understand
# hex values, whereas not all browsers cope as well with color names
# (e.g. Netscape 1.1 doesn't like many color names). Hex values are,
# of course, slightly less readable, which is why we don't insist that
# the user specifies the hex value on the doc_html command line

# The list of color names here is based on the standard list of UNIX
# colors, available in /usr/lib/X11/rgb.txt. Thus should be enough
# choice for even the most discerning color-lover :-) Note, however,
# that I have only used the "single word" forms of all color names
# (that is, no color like "dark slate gray"), and that I have lower
# cased all color names (darkslategray rather than
# DarkSlateGray). UNIX uses a confusing combination of both. A future
# enhancement would be to allow any case in color names specified in
# the command line, but this isn't urgent.

%color_vals = ("snow", "FFFAFA",
	       "ghostwhite", "F8F8FF",
	       "whitesmoke", "F5F5F5",
	       "gainsboro", "DCDCDC",
	       "floralwhite", "FFFAF0",
	       "oldlace", "FDF5E6",
	       "linen", "FAF0E6",
	       "antiquewhite", "FAEBD7",
	       "papayawhip", "FFEFD5",
	       "blanchedalmond", "FFEBCD",
	       "bisque", "FFE4C4",
	       "peachpuff", "FFDAB9",
	       "navajowhite", "FFDEAD",
	       "moccasin", "FFE4B5",
	       "cornsilk", "FFF8DC",
	       "ivory", "FFFFF0",
	       "lemonchiffon", "FFFACD",
	       "seashell", "FFF5EE",
	       "honeydew", "F0FFF0",
	       "mintcream", "F5FFFA",
	       "azure", "F0FFFF",
	       "aliceblue", "F0F8FF",
	       "lavender", "E6E6FA",
	       "lavenderblush", "FFF0F5",
	       "mistyrose", "FFE4E1",
	       "white", "FFFFFF",
	       "black", "000000",
	       "darkslategray", "2F4F4F",
	       "darkslategrey", "2F4F4F",
	       "dimgray", "696969",
	       "dimgrey", "696969",
	       "slategray", "708090",
	       "slategrey", "708090",
	       "lightslategray", "778899",
	       "lightslategrey", "778899",
	       "gray", "BEBEBE",
	       "grey", "BEBEBE",
	       "lightgrey", "D3D3D3",
	       "lightgray", "D3D3D3",
	       "midnightblue", "191970",
	       "navy", "000080",
	       "navyblue", "000080",
	       "cornflowerblue", "6495ED",
	       "darkslateblue", "483D8B",
	       "slateblue", "6A5ACD",
	       "mediumslateblue", "7B68EE",
	       "lightslateblue", "8470FF",
	       "mediumblue", "0000CD",
	       "royalblue", "4169E1",
	       "blue", "0000FF",
	       "dodgerblue", "1E90FF",
	       "deepskyblue", "00BFFF",
	       "skyblue", "87CEEB",
	       "lightskyblue", "87CEFA",
	       "steelblue", "4682B4",
	       "lightsteelblue", "B0C4DE",
	       "lightblue", "ADD8E6",
	       "powderblue", "B0E0E6",
	       "paleturquoise", "AFEEEE",
	       "darkturquoise", "00CED1",
	       "mediumturquoise", "48D1CC",
	       "turquoise", "40E0D0",
	       "cyan", "00FFFF",
	       "lightcyan", "E0FFFF",
	       "cadetblue", "5F9EA0",
	       "mediumaquamarine", "66CDAA",
	       "aquamarine", "7FFFD4",
	       "darkgreen", "006400",
	       "darkolivegreen", "556B2F",
	       "darkseagreen", "8FBC8F",
	       "seagreen", "2E8B57",
	       "mediumseagreen", "3CB371",
	       "lightseagreen", "20B2AA",
	       "palegreen", "98FB98",
	       "springgreen", "00FF7F",
	       "lawngreen", "7CFC00",
	       "green", "00FF00",
	       "chartreuse", "7FFF00",
	       "mediumspringgreen", "00FA9A",
	       "greenyellow", "ADFF2F",
	       "limegreen", "32CD32",
	       "yellowgreen", "9ACD32",
	       "forestgreen", "228B22",
	       "olivedrab", "6B8E23",
	       "darkkhaki", "BDB76B",
	       "khaki", "F0E68C",
	       "palegoldenrod", "EEE8AA",
	       "lightgoldenrodyellow", "FAFAD2",
	       "lightyellow", "FFFFE0",
	       "yellow", "FFFF00",
	       "gold", "FFD700",
	       "lightgoldenrod", "EEDD82",
	       "goldenrod", "DAA520",
	       "darkgoldenrod", "B8860B",
	       "rosybrown", "BC8F8F",
	       "indianred", "CD5C5C",
	       "saddlebrown", "8B4513",
	       "sienna", "A0522D",
	       "peru", "CD853F",
	       "burlywood", "DEB887",
	       "beige", "F5F5DC",
	       "wheat", "F5DEB3",
	       "sandybrown", "F4A460",
	       "tan", "D2B48C",
	       "chocolate", "D2691E",
	       "firebrick", "B22222",
	       "brown", "A52A2A",
	       "darksalmon", "E9967A",
	       "salmon", "FA8072",
	       "lightsalmon", "FFA07A",
	       "orange", "FFA500",
	       "darkorange", "FF8C00",
	       "coral", "FF7F50",
	       "lightcoral", "F08080",
	       "tomato", "FF6347",
	       "orangered", "FF4500",
	       "red", "FF0000",
	       "hotpink", "FF69B4",
	       "deeppink", "FF1493",
	       "pink", "FFC0CB",
	       "lightpink", "FFB6C1",
	       "palevioletred", "DB7093",
	       "maroon", "B03060",
	       "mediumvioletred", "C71585",
	       "violetred", "D02090",
	       "magenta", "FF00FF",
	       "violet", "EE82EE",
	       "plum", "DDA0DD",
	       "orchid", "DA70D6",
	       "mediumorchid", "BA55D3",
	       "darkorchid", "9932CC",
	       "darkviolet", "9400D3",
	       "blueviolet", "8A2BE2",
	       "purple", "A020F0",
	       "mediumpurple", "9370DB",
	       "thistle", "D8BFD8",
	       "snow1", "FFFAFA",
	       "snow2", "EEE9E9",
	       "snow3", "CDC9C9",
	       "snow4", "8B8989",
	       "seashell1", "FFF5EE",
	       "seashell2", "EEE5DE",
	       "seashell3", "CDC5BF",
	       "seashell4", "8B8682",
	       "antiquewhite1", "FFEFDB",
	       "antiquewhite2", "EEDFCC",
	       "antiquewhite3", "CDC0B0",
	       "antiquewhite4", "8B8378",
	       "bisque1", "FFE4C4",
	       "bisque2", "EED5B7",
	       "bisque3", "CDB79E",
	       "bisque4", "8B7D6B",
	       "peachpuff1", "FFDAB9",
	       "peachpuff2", "EECBAD",
	       "peachpuff3", "CDAF95",
	       "peachpuff4", "8B7765",
	       "navajowhite1", "FFDEAD",
	       "navajowhite2", "EECFA1",
	       "navajowhite3", "CDB38B",
	       "navajowhite4", "8B795E",
	       "lemonchiffon1", "FFFACD",
	       "lemonchiffon2", "EEE9BF",
	       "lemonchiffon3", "CDC9A5",
	       "lemonchiffon4", "8B8970",
	       "cornsilk1", "FFF8DC",
	       "cornsilk2", "EEE8CD",
	       "cornsilk3", "CDC8B1",
	       "cornsilk4", "8B8878",
	       "ivory1", "FFFFF0",
	       "ivory2", "EEEEE0",
	       "ivory3", "CDCDC1",
	       "ivory4", "8B8B83",
	       "honeydew1", "F0FFF0",
	       "honeydew2", "E0EEE0",
	       "honeydew3", "C1CDC1",
	       "honeydew4", "838B83",
	       "lavenderblush1", "FFF0F5",
	       "lavenderblush2", "EEE0E5",
	       "lavenderblush3", "CDC1C5",
	       "lavenderblush4", "8B8386",
	       "mistyrose1", "FFE4E1",
	       "mistyrose2", "EED5D2",
	       "mistyrose3", "CDB7B5",
	       "mistyrose4", "8B7D7B",
	       "azure1", "F0FFFF",
	       "azure2", "E0EEEE",
	       "azure3", "C1CDCD",
	       "azure4", "838B8B",
	       "slateblue1", "836FFF",
	       "slateblue2", "7A67EE",
	       "slateblue3", "6959CD",
	       "slateblue4", "473C8B",
	       "royalblue1", "4876FF",
	       "royalblue2", "436EEE",
	       "royalblue3", "3A5FCD",
	       "royalblue4", "27408B",
	       "blue1", "0000FF",
	       "blue2", "0000EE",
	       "blue3", "0000CD",
	       "blue4", "00008B",
	       "dodgerblue1", "1E90FF",
	       "dodgerblue2", "1C86EE",
	       "dodgerblue3", "1874CD",
	       "dodgerblue4", "104E8B",
	       "steelblue1", "63B8FF",
	       "steelblue2", "5CACEE",
	       "steelblue3", "4F94CD",
	       "steelblue4", "36648B",
	       "deepskyblue1", "00BFFF",
	       "deepskyblue2", "00B2EE",
	       "deepskyblue3", "009ACD",
	       "deepskyblue4", "00688B",
	       "skyblue1", "87CEFF",
	       "skyblue2", "7EC0EE",
	       "skyblue3", "6CA6CD",
	       "skyblue4", "4A708B",
	       "lightskyblue1", "B0E2FF",
	       "lightskyblue2", "A4D3EE",
	       "lightskyblue3", "8DB6CD",
	       "lightskyblue4", "607B8B",
	       "slategray1", "C6E2FF",
	       "slategray2", "B9D3EE",
	       "slategray3", "9FB6CD",
	       "slategray4", "6C7B8B",
	       "lightsteelblue1", "CAE1FF",
	       "lightsteelblue2", "BCD2EE",
	       "lightsteelblue3", "A2B5CD",
	       "lightsteelblue4", "6E7B8B",
	       "lightblue1", "BFEFFF",
	       "lightblue2", "B2DFEE",
	       "lightblue3", "9AC0CD",
	       "lightblue4", "68838B",
	       "lightcyan1", "E0FFFF",
	       "lightcyan2", "D1EEEE",
	       "lightcyan3", "B4CDCD",
	       "lightcyan4", "7A8B8B",
	       "paleturquoise1", "BBFFFF",
	       "paleturquoise2", "AEEEEE",
	       "paleturquoise3", "96CDCD",
	       "paleturquoise4", "668B8B",
	       "cadetblue1", "98F5FF",
	       "cadetblue2", "8EE5EE",
	       "cadetblue3", "7AC5CD",
	       "cadetblue4", "53868B",
	       "turquoise1", "00F5FF",
	       "turquoise2", "00E5EE",
	       "turquoise3", "00C5CD",
	       "turquoise4", "00868B",
	       "cyan1", "00FFFF",
	       "cyan2", "00EEEE",
	       "cyan3", "00CDCD",
	       "cyan4", "008B8B",
	       "darkslategray1", "97FFFF",
	       "darkslategray2", "8DEEEE",
	       "darkslategray3", "79CDCD",
	       "darkslategray4", "528B8B",
	       "aquamarine1", "7FFFD4",
	       "aquamarine2", "76EEC6",
	       "aquamarine3", "66CDAA",
	       "aquamarine4", "458B74",
	       "darkseagreen1", "C1FFC1",
	       "darkseagreen2", "B4EEB4",
	       "darkseagreen3", "9BCD9B",
	       "darkseagreen4", "698B69",
	       "seagreen1", "54FF9F",
	       "seagreen2", "4EEE94",
	       "seagreen3", "43CD80",
	       "seagreen4", "2E8B57",
	       "palegreen1", "9AFF9A",
	       "palegreen2", "90EE90",
	       "palegreen3", "7CCD7C",
	       "palegreen4", "548B54",
	       "springgreen1", "00FF7F",
	       "springgreen2", "00EE76",
	       "springgreen3", "00CD66",
	       "springgreen4", "008B45",
	       "green1", "00FF00",
	       "green2", "00EE00",
	       "green3", "00CD00",
	       "green4", "008B00",
	       "chartreuse1", "7FFF00",
	       "chartreuse2", "76EE00",
	       "chartreuse3", "66CD00",
	       "chartreuse4", "458B00",
	       "olivedrab1", "C0FF3E",
	       "olivedrab2", "B3EE3A",
	       "olivedrab3", "9ACD32",
	       "olivedrab4", "698B22",
	       "darkolivegreen1", "CAFF70",
	       "darkolivegreen2", "BCEE68",
	       "darkolivegreen3", "A2CD5A",
	       "darkolivegreen4", "6E8B3D",
	       "khaki1", "FFF68F",
	       "khaki2", "EEE685",
	       "khaki3", "CDC673",
	       "khaki4", "8B864E",
	       "lightgoldenrod1", "FFEC8B",
	       "lightgoldenrod2", "EEDC82",

	       "lightgoldenrod3", "CDBE70",
	       "lightgoldenrod4", "8B814C",
	       "lightyellow1", "FFFFE0",
	       "lightyellow2", "EEEED1",
	       "lightyellow3", "CDCDB4",
	       "lightyellow4", "8B8B7A",
	       "yellow1", "FFFF00",
	       "yellow2", "EEEE00",
	       "yellow3", "CDCD00",
	       "yellow4", "8B8B00",
	       "gold1", "FFD700",
	       "gold2", "EEC900",
	       "gold3", "CDAD00",
	       "gold4", "8B7500",
	       "goldenrod1", "FFC125",
	       "goldenrod2", "EEB422",
	       "goldenrod3", "CD9B1D",
	       "goldenrod4", "8B6914",
	       "darkgoldenrod1", "FFB90F",
	       "darkgoldenrod2", "EEAD0E",
	       "darkgoldenrod3", "CD950C",
	       "darkgoldenrod4", "8B6508",
	       "rosybrown1", "FFC1C1",
	       "rosybrown2", "EEB4B4",
	       "rosybrown3", "CD9B9B",
	       "rosybrown4", "8B6969",
	       "indianred1", "FF6A6A",
	       "indianred2", "EE6363",
	       "indianred3", "CD5555",
	       "indianred4", "8B3A3A",
	       "sienna1", "FF8247",
	       "sienna2", "EE7942",
	       "sienna3", "CD6839",
	       "sienna4", "8B4726",
	       "burlywood1", "FFD39B",
	       "burlywood2", "EEC591",
	       "burlywood3", "CDAA7D",
	       "burlywood4", "8B7355",
	       "wheat1", "FFE7BA",
	       "wheat2", "EED8AE",
	       "wheat3", "CDBA96",
	       "wheat4", "8B7E66",
	       "tan1", "FFA54F",
	       "tan2", "EE9A49",
	       "tan3", "CD853F",
	       "tan4", "8B5A2B",
	       "chocolate1", "FF7F24",
	       "chocolate2", "EE7621",
	       "chocolate3", "CD661D",
	       "chocolate4", "8B4513",
	       "firebrick1", "FF3030",
	       "firebrick2", "EE2C2C",
	       "firebrick3", "CD2626",
	       "firebrick4", "8B1A1A",
	       "brown1", "FF4040",
	       "brown2", "EE3B3B",
	       "brown3", "CD3333",
	       "brown4", "8B2323",
	       "salmon1", "FF8C69",
	       "salmon2", "EE8262",
	       "salmon3", "CD7054",
	       "salmon4", "8B4C39",
	       "lightsalmon1", "FFA07A",
	       "lightsalmon2", "EE9572",
	       "lightsalmon3", "CD8162",
	       "lightsalmon4", "8B5742",
	       "orange1", "FFA500",
	       "orange2", "EE9A00",
	       "orange3", "CD8500",
	       "orange4", "8B5A00",
	       "darkorange1", "FF7F00",
	       "darkorange2", "EE7600",
	       "darkorange3", "CD6600",
	       "darkorange4", "8B4500",
	       "coral1", "FF7256",
	       "coral2", "EE6A50",
	       "coral3", "CD5B45",
	       "coral4", "8B3E2F",
	       "tomato1", "FF6347",
	       "tomato2", "EE5C42",
	       "tomato3", "CD4F39",
	       "tomato4", "8B3626",
	       "orangered1", "FF4500",
	       "orangered2", "EE4000",
	       "orangered3", "CD3700",
	       "orangered4", "8B2500",
	       "red1", "FF0000",
	       "red2", "EE0000",
	       "red3", "CD0000",
	       "red4", "8B0000",
	       "deeppink1", "FF1493",
	       "deeppink2", "EE1289",
	       "deeppink3", "CD1076",
	       "deeppink4", "8B0A50",
	       "hotpink1", "FF6EB4",
	       "hotpink2", "EE6AA7",
	       "hotpink3", "CD6090",
	       "hotpink4", "8B3A62",
	       "pink1", "FFB5C5",
	       "pink2", "EEA9B8",
	       "pink3", "CD919E",
	       "pink4", "8B636C",
	       "lightpink1", "FFAEB9",
	       "lightpink2", "EEA2AD",
	       "lightpink3", "CD8C95",
	       "lightpink4", "8B5F65",
	       "palevioletred1", "FF82AB",
	       "palevioletred2", "EE799F",
	       "palevioletred3", "CD6889",
	       "palevioletred4", "8B475D",
	       "maroon1", "FF34B3",
	       "maroon2", "EE30A7",
	       "maroon3", "CD2990",
	       "maroon4", "8B1C62",
	       "violetred1", "FF3E96",
	       "violetred2", "EE3A8C",
	       "violetred3", "CD3278",
	       "violetred4", "8B2252",
	       "magenta1", "FF00FF",
	       "magenta2", "EE00EE",
	       "magenta3", "CD00CD",
	       "magenta4", "8B008B",
	       "orchid1", "FF83FA",
	       "orchid2", "EE7AE9",
	       "orchid3", "CD69C9",
	       "orchid4", "8B4789",
	       "plum1", "FFBBFF",
	       "plum2", "EEAEEE",
	       "plum3", "CD96CD",
	       "plum4", "8B668B",
	       "mediumorchid1", "E066FF",
	       "mediumorchid2", "D15FEE",
	       "mediumorchid3", "B452CD",
	       "mediumorchid4", "7A378B",
	       "darkorchid1", "BF3EFF",
	       "darkorchid2", "B23AEE",
	       "darkorchid3", "9A32CD",
	       "darkorchid4", "68228B",
	       "purple1", "9B30FF",
	       "purple2", "912CEE",
	       "purple3", "7D26CD",
	       "purple4", "551A8B",
	       "mediumpurple1", "AB82FF",
	       "mediumpurple2", "9F79EE",
	       "mediumpurple3", "8968CD",
	       "mediumpurple4", "5D478B",
	       "thistle1", "FFE1FF",
	       "thistle2", "EED2EE",
	       "thistle3", "CDB5CD",
	       "thistle4", "8B7B8B",
	       "gray0", "000000",
	       "grey0", "000000",
	       "gray1", "030303",
	       "grey1", "030303",
	       "gray2", "050505",
	       "grey2", "050505",
	       "gray3", "080808",
	       "grey3", "080808",
	       "gray4", "0A0A0A",
	       "grey4", "0A0A0A",
	       "gray5", "0D0D0D",
	       "grey5", "0D0D0D",
	       "gray6", "0F0F0F",
	       "grey6", "0F0F0F",
	       "gray7", "121212",
	       "grey7", "121212",
	       "gray8", "141414",
	       "grey8", "141414",
	       "gray9", "171717",
	       "grey9", "171717",
	       "gray10", "1A1A1A",
	       "grey10", "1A1A1A",
	       "gray11", "1C1C1C",
	       "grey11", "1C1C1C",
	       "gray12", "1F1F1F",
	       "grey12", "1F1F1F",
	       "gray13", "212121",
	       "grey13", "212121",
	       "gray14", "242424",
	       "grey14", "242424",
	       "gray15", "262626",
	       "grey15", "262626",
	       "gray16", "292929",
	       "grey16", "292929",
	       "gray17", "2B2B2B",
	       "grey17", "2B2B2B",
	       "gray18", "2E2E2E",
	       "grey18", "2E2E2E",
	       "gray19", "303030",
	       "grey19", "303030",
	       "gray20", "333333",
	       "grey20", "333333",
	       "gray21", "363636",
	       "grey21", "363636",
	       "gray22", "383838",
	       "grey22", "383838",
	       "gray23", "3B3B3B",
	       "grey23", "3B3B3B",
	       "gray24", "3D3D3D",
	       "grey24", "3D3D3D",
	       "gray25", "404040",
	       "grey25", "404040",
	       "gray26", "424242",
	       "grey26", "424242",
	       "gray27", "454545",
	       "grey27", "454545",
	       "gray28", "474747",
	       "grey28", "474747",
	       "gray29", "4A4A4A",
	       "grey29", "4A4A4A",
	       "gray30", "4D4D4D",
	       "grey30", "4D4D4D",
	       "gray31", "4F4F4F",
	       "grey31", "4F4F4F",
	       "gray32", "525252",
	       "grey32", "525252",
	       "gray33", "545454",
	       "grey33", "545454",
	       "gray34", "575757",
	       "grey34", "575757",
	       "gray35", "595959",
	       "grey35", "595959",
	       "gray36", "5C5C5C",
	       "grey36", "5C5C5C",
	       "gray37", "5E5E5E",
	       "grey37", "5E5E5E",
	       "gray38", "616161",
	       "grey38", "616161",
	       "gray39", "636363",
	       "grey39", "636363",
	       "gray40", "666666",
	       "grey40", "666666",
	       "gray41", "696969",
	       "grey41", "696969",
	       "gray42", "6B6B6B",
	       "grey42", "6B6B6B",
	       "gray43", "6E6E6E",
	       "grey43", "6E6E6E",
	       "gray44", "707070",
	       "grey44", "707070",
	       "gray45", "737373",
	       "grey45", "737373",
	       "gray46", "757575",
	       "grey46", "757575",
	       "gray47", "787878",
	       "grey47", "787878",
	       "gray48", "7A7A7A",
	       "grey48", "7A7A7A",
	       "gray49", "7D7D7D",
	       "grey49", "7D7D7D",
	       "gray50", "7F7F7F",
	       "grey50", "7F7F7F",
	       "gray51", "828282",
	       "grey51", "828282",
	       "gray52", "858585",
	       "grey52", "858585",
	       "gray53", "878787",
	       "grey53", "878787",
	       "gray54", "8A8A8A",
	       "grey54", "8A8A8A",
	       "gray55", "8C8C8C",
	       "grey55", "8C8C8C",
	       "gray56", "8F8F8F",
	       "grey56", "8F8F8F",
	       "gray57", "919191",
	       "grey57", "919191",
	       "gray58", "949494",
	       "grey58", "949494",
	       "gray59", "969696",
	       "grey59", "969696",
	       "gray60", "999999",
	       "grey60", "999999",
	       "gray61", "9C9C9C",
	       "grey61", "9C9C9C",
	       "gray62", "9E9E9E",
	       "grey62", "9E9E9E",
	       "gray63", "A1A1A1",
	       "grey63", "A1A1A1",
	       "gray64", "A3A3A3",
	       "grey64", "A3A3A3",
	       "gray65", "A6A6A6",
	       "grey65", "A6A6A6",
	       "gray66", "A8A8A8",
	       "grey66", "A8A8A8",
	       "gray67", "ABABAB",
	       "grey67", "ABABAB",
	       "gray68", "ADADAD",
	       "grey68", "ADADAD",
	       "gray69", "B0B0B0",
	       "grey69", "B0B0B0",
	       "gray70", "B3B3B3",
	       "grey70", "B3B3B3",
	       "gray71", "B5B5B5",
	       "grey71", "B5B5B5",
	       "gray72", "B8B8B8",
	       "grey72", "B8B8B8",
	       "gray73", "BABABA",
	       "grey73", "BABABA",
	       "gray74", "BDBDBD",
	       "grey74", "BDBDBD",
	       "gray75", "BFBFBF",
	       "grey75", "BFBFBF",
	       "gray76", "C2C2C2",
	       "grey76", "C2C2C2",
	       "gray77", "C4C4C4",
	       "grey77", "C4C4C4",
	       "gray78", "C7C7C7",
	       "grey78", "C7C7C7",
	       "gray79", "C9C9C9",
	       "grey79", "C9C9C9",
	       "gray80", "CCCCCC",
	       "grey80", "CCCCCC",
	       "gray81", "CFCFCF",
	       "grey81", "CFCFCF",
	       "gray82", "D1D1D1",
	       "grey82", "D1D1D1",
	       "gray83", "D4D4D4",
	       "grey83", "D4D4D4",
	       "gray84", "D6D6D6",
	       "grey84", "D6D6D6",
	       "gray85", "D9D9D9",
	       "grey85", "D9D9D9",
	       "gray86", "DBDBDB",
	       "grey86", "DBDBDB",
	       "gray87", "DEDEDE",
	       "grey87", "DEDEDE",
	       "gray88", "E0E0E0",
	       "grey88", "E0E0E0",
	       "gray89", "E3E3E3",
	       "grey89", "E3E3E3",
	       "gray90", "E5E5E5",
	       "grey90", "E5E5E5",
	       "gray91", "E8E8E8",
	       "grey91", "E8E8E8",
	       "gray92", "EBEBEB",
	       "grey92", "EBEBEB",
	       "gray93", "EDEDED",
	       "grey93", "EDEDED",
	       "gray94", "F0F0F0",
	       "grey94", "F0F0F0",
	       "gray95", "F2F2F2",
	       "grey95", "F2F2F2",
	       "gray96", "F5F5F5",
	       "grey96", "F5F5F5",
	       "gray97", "F7F7F7",
	       "grey97", "F7F7F7",
	       "gray98", "FAFAFA",
	       "grey98", "FAFAFA",
	       "gray99", "FCFCFC",
	       "grey99", "FCFCFC",
	       "gray100", "FFFFFF",
	       "grey100", "FFFFFF");

&main;  # Do it!

sub main {
    &parse_args;                    # Parse the argument list
    if ($do_background) {
	if ($bad_color_specified) {
	    &change_background_color_name; # Use color name if it's not contained in %color_vals
	} else {
	    &change_background_color_value;   # Add a background to every page
	}
	print "Finished page backgrounds.\n" if $verbose;
    }
    if ($do_no_hyphen_symbols) {
	&fix_box_chars;             # Get rid of erroneous Ctrl-E characters
	print "Finished Ctrl+E characters.\n" if $verbose;
    }
    if ($do_no_hard_spaces) {
	&fix_hard_spaces;             # Get rid of &nbsp; characters and replace with spaces
	print "Finished hard space (&nbsp;) characters.\n" if $verbose;
    }
    if ($fix_ix) {                   # Always call this last of all. See later for explanation.
	&fix_index_file;             # Rename the index and update the links
	print "Finished fixing the index.\n" if $verbose;
    }
}

# parse_args parses the arguments that are specified on the command
# line. It figures out any switches that have been specified, and sets
# any control variables as appropriate. It then figures out which
# files have been specified (that is, which files are going to be
# editwd). In later subroutines, @ARGVgets re-initialized to these
# files so that we can conveniently use the diamond operator

# Checking out arguments using nested if statements feels clumsy. This
# can probably all be done more neatly with a switch or a label or
# something, but for now, this is it, and it works.

sub parse_args {
    local ($next_arg);
    local (@html_files) = ('html', 'htm', 'HTM', 'HTML'); # List of recognized suffixes
    while (@ARGV) {			     # If there are arguments
	$arg = shift (@ARGV);
	if ($arg eq "-help") {               # Display usage if requested
	    &show_usage;
	    exit (1);
	} elsif ($arg eq "-?") {             # Display usage if requested
	    &show_usage;
	    exit (1);
	} elsif ($arg eq "-verbose") {       # Print out progress information if requested
	    $verbose = 1;
	} elsif ($arg eq "-debug") {
	    print "Printing debug information: If you're not doing development, you'll see a lot of unwanted output!\n";
	    $debug = 1;
	} elsif ($arg eq "-bg") {            # Give files a color background if requested
	    if (defined ($next_arg = &next_arg)) {
		if (-e $next_arg) {          # If the next argument is a filename
		    unshift (@ARGV, $next_arg);
		    undef;		     # ignore it
		    $color_name="white";          # use white instead
		} else {
		    $color_name = $next_arg;
		}
	    } else {
		$color_name="white";              # If no next argument, use white anyway
	    }       
	    $do_background = 1;
	} elsif ($arg eq "-hyp") {           # Fix the suppress-hyphen symbols if requested
	    $do_no_hyphen_symbols = 1;	
	} elsif ($arg eq "-nbsp") {           # Fix nsp characters if requested
	    $do_no_hard_spaces = 1;	
	} elsif ($arg eq "-ix") {
	    if (defined ($next_arg = &next_arg)) {
		if (-e $next_arg) {          # If the next argument is a filename
		    $ix_name=$next_arg;      # Assume it is the name of the index file
		} else {
		    print "Unrecognized argument: $next_arg is not a file.\n";
		    &show_usage;
		    print "Aborting.\n";
		    exit (1);
		}
	    } else {
		print "Argument required for -ix.\n"; # If no next argument to -ix, abort
		&show_usage;
		print "Aborting.\n";
		exit (1);
	    }       
	    $fix_ix = 1;
	} elsif ($arg =~ /^-/) {
	    print "Unrecognized option: $arg\n";
	    &show_usage;
	    print "Aborting.\n";
	    exit (1);
	} else {
	    if (-e $arg) {                   # Check that $arg is a filename, because it should be
	      compare_suffix: foreach $file_ext (@html_files) {
		  $match_failed = 1;
		  # At this point, the arg must be a file that exists. Check to see if
		  # it has a suffix that indicates an HTML file. We
		  # use a label here so that we can jump out of the loop
		  # as soon as we find a successful match. Otherwise,
		  # the verbose messages get printed every time the
		  # match fails.
		  if (&extension ($arg) eq $file_ext) {
		      push (@filenames, $arg);
		      print "Adding $arg to the list of files to process.\n" if $debug;
		      $match_failed = 0;
		      last compare_suffix;
		  } # Check the file extension: if it's a recognized one, add the file to the list
	      } 
		if ($match_failed != 0) {
		    print "Ignoring $arg: Unrecognized file suffix.\n" if $verbose;	
		}
	    } else { # The argument is not a recognised switch, or a file on disk. Ignore it!
		print "Ignoring $arg: Not a file.\n" if $verbose;
	    }
	} # End compound if: Nothing should fall off the end
    } # End while: No more arguments

# Let's print out exactly what we're going to do, and on what files,
# before we do it.

    if ($verbose) {
	print "doc_html preflight check:\n";
	print "\tChange the following files: @filenames\n";
	if ($do_background) {
	    if ($color_vals{$color_name}) { # If the color value is recognised, fine.
		print "\tSet the page background to $color_name (#$color_vals{$color_name}).\n";
	    } else { # Otherwise, use the color name, rather than color value, and warn the user
		print "\tWarning: $color_name not a recognised color name. Using \"$color_name\" rather than a hex value.\n";
		$bad_color_specified = 1; 
	    }
	}
	if ($do_no_hyphen_symbols) {
	    print "\tFix any Ctrl+E characters added by WebMaker.\n";
	}
	if ($do_no_hard_spaces) {
	    print "\tFix any hard space (&nbsp;) characters added by WebMaker.\n";
	}
	if ($fix_ix) {
	    print "\tRename index file generated by WebMaker ($ix_name), and fix links within generated web.\n";
	}
	print "\n";
	print "Perform these actions? (y/n) [y] ";
	if (<STDIN> =~ /^n/i) {
	    exit (1);
	}
	    
    }

} # end parse_args

# The extension subroutine figures out the extension for a given
# file. It is passed a filename, and returns the file extension. Thus,
# passed foo.html, it returns .html. This subroutine is used to figure
# out whether the files passed as arguments to doc_html are actually
# HTML files or not, based on a list of known HTML file
# extensions. (See @html_files, above.)

sub extension {
    local ($ext);
    $_[0] =~ /.*\.(.*)/; # Search for *.*; remember the contents of the second *
    $ext = $+;
    $ext;          # Return the extension.
} # end extension

# WebMaker doesn't let you set the background for a page. This
# subroutine substitutes an empty <BODY> tag for one which adds a
# background color.

# If you specified a color directly after the -bg flag, that color is
# used. Otherwise, white is used.  In the longer term, you should be
# able to specify a foreground color, or even an image.

# Note: This search term allows you to run doc_html on a web that has
# already had the background color changed, allowing you to "fix your
# mistakes". However, you should note that the search term at the
# moment is a bit bull in a china shop! Bascially, it searches for
# "<BODY" followed by _anything_, followed by ">" on the same line,
# and replaces it with the specified BGCOLOR. This means that if you
# run doc_html on a web that has an FGCOLOR defined, for example, the
# FGCOLOR will get blatted. At the time of writing (6 Mar 97) I don't
# see this as a problem, since doc_html only handles BGCOLOR, and this
# is intended for use on WebMaker-generated HTML, but if doc_html is
# updated to allow specification of other BODY attributes, this will
# need to be refined.

sub change_background_color_value { 
    print "Changing the background color to $color_name (#$color_vals{$color_name})...\n" if $verbose;
    @ARGV = @filenames;
    $^I = "~";			# Writes the backup file and invokes inplace editing mode
    while (<>) { 
	s/\<BODY.*\>/\<BODY BGCOLOR="#$color_vals{$color_name}"\>/;
	print;
    }
} # end change_background_color_value

# change_background_color_name is called if the color name specified as an
# argument to -bg is not contained in the %color_vals array. In such cases, doc_html
# cannot substitute a hex value, and so this subroutine substitutes the actual color
# name. I decided to do this, rather than bail out altogether, because it's possible
# that the user might want to use an odd color name. If you use the -verbose option,
# then you have the opportunity to bail out anyway, and if you do make a mistake,
# you can always run doc_html again and specify the correct color.

sub change_background_color_name { 

    print "Changing the background color to $color_name...\n" if $verbose;
    print "Warning: $color_name not a recognised color name. Using color name rather than corresponding hex value.\n" if $verbose;
    @ARGV = @filenames;
    $^I = "~";			# Writes the backup file and invokes inplace editing mode
    while (<>) { 
	s/\<BODY.*\>/\<BODY BGCOLOR="$color_name"\>/;
	print;
    }
} # end change_background_color_value

# There is a problem with output from WebMaker if you are in the habit
# of defining user variables that contains the suppress hyphenation
# symbol (Shift-Meta-Hyphen). This can be quite annoying, suince this
# symbol is useful in variables to, for instance, suppress the
# hyphenation of product names. If you use the suppress hyphenation
# symbol, you will find a Ctrl-E character in the WebMaker
# output. This subroutine removes that control character.

# If you're curious about the name, the Ctrl-E chars often get
# displayed as boxes in the web browser itself.

sub fix_box_chars {
    print "Fixing Ctrl+E characters...\n" if $verbose;
    @ARGV = @filenames;
    $^I = "~";			# Writes the backup file and invokes inplace editing mode
    while (<>) {
	s///g;
	print;
    }
} # end fix_box_chars

# When it comes to hard spaces in FrameMaker documents, WebMaker is usually
# cleverer than we'd like it to be, in that it converts all hard spaces to &nbsp;
# characters. Because code examples are usually formatted with hard spaces, this
# means that code examples in the HTML (which, remember, already have formatting
# preserved by using <pre> tags) have &nbsp; characters in them. Under Windows, at
# least, this is a pain for a user who decides to copy and paste code examples
# directly from the online documentation, since the non-breaking spaces are
# preserved in the application that you paste into. So if you paste code into a
# Dylan interactor or editor, you get a load of (invisible) non-breaking spaces, and
# your code doesn't run. The fix_hard_spaces function changes all occurences of
# &nbsp; in a document to a normal space.

sub fix_hard_spaces {
    print "Fixing non-breaking space (&nbsp;) characters...\n" if $verbose;
    @ARGV = @filenames;
    $^I = "~";			# Writes the backup file and invokes inplace editing mode
    while (<>) {
	s/&nbsp;/ /g;
	print;
    }
} # end fix_hard_spaces

# show_usage is a subroutine that gets called if any of the arguments
# on the command line are not understood.

# fix_index_file is used to fix the index files the WebMaker
# creates. The problem is that, for any web, the index file is the
# last file in the web. This could have any name (depending on the
# number of files in the web). It is useful in general (and
# particularly useful for the Lisp group) to be able to ensure that
# the index file has a known file name. Thus, in a web that contains
# foo-1.html foo-2.html, ..., we want to end up with foo-index.html
# rather than (say) foo-386.html. Up to now, the doc group have been
# _copying_ the index file generated by WebMaker to the know filename
# by hand. This solution works, but isn't particularly neat, since it
# means that there are two copies of the index file present in the
# web. (One, the known filename, and the other, the file that is
# actually linked to from all pages in the web itself.)

# The problem actually consists of two parts. Firstly, you need to
# rename the index file. Secondly, you need to fix the links to the
# index file that exist in every page in the web. fix_index_file is
# actually just a call to two different subroutines that perform each
# of these functions.

# Note that this is not yet a complete solution. We have also agreed
# to copy 8.3 filenames to FOO_IX.HTM or foo_ix.htm, as appropriate
# (where FOO and foo are up to the first five letters of the WebMaker
# prefix). This solution does not yet work for such Webs, and you
# still need to do the manual "fix".

# This subroutine _must_ be called last of all in the main subroutine,
# because it atually works on a subtely different set of files to
# those specified on the command line: the index file generated by
# WebMaker no longer exists, and has been replaced by a new file,
# which must itself be hacked.

sub fix_index_file {
    print "Fixing problems with index filename.\n" if $verbose;
    &rename_ix_file;
    &fix_ix_links;
}

# Rename the index file specified on the command line to a known name
# based on the prefix of the filename common to all files in the
# current web.

sub rename_ix_file {
    local ($web_root); # Root of the current WebMaker web
    print "Renaming index file $ix_name.\n" if $verbose;
    $web_root = &get_web_root ($ix_name);
    print "Debug: web-root is $web_root\n" if $debug;
    $new_ix_name = $web_root . "-index.html";
    print "Debug: New name for index file is $new_ix_name\n" if $debug;
    rename ($ix_name, $new_ix_name);
#    unlink ($ix_name); # Commented out until I'm sure this works!
}

# Fix the links in every page in the web, so that pages point to the
# newly created index file rather than the old file generated by
# WebMaker.

# This subroutine, unlike the other subroutines that hack the HTML,
# works on a copy of @filenames, from which the original index file
# itself is removed, but the new index file is added. Otherwise, it
# tries to hack the (now non-existant) index file generated by
# WebMaker, and doesn't hack the newly created index file (which is
# probably harmless, but not complete).

sub fix_ix_links {
    local ($next_file);
    print "Changing links to index file from $ix_name to $new_ix_name...\n" if $verbose;
    print "Debug: Hacking the list of files so that we provess the right ones\n" if $debug;
    foreach $next_file (@filenames) {
	if ($next_file ne $ix_name) {
	    print "Debug: $next_file is not the original index. " if $debug;
	    push (@new_filenames, $next_file);
	} else {
	    print "\nDebug: $next_file is the original index; chucking it.\n" if $debug;
	}
    }
    print "\nDebug: Adding $new_ix_name to list of files\n" if $debug;
    push (@new_filenames, $new_ix_name); # Add the new index to the list of files to process.
    @ARGV = @new_filenames;
    $^I = "~";			# Writes the backup file and invokes inplace editing mode
    while (<>) { 
	s/$ix_name/$new_ix_name/;
	print;
    }
}

sub show_usage {
    print "doc_html: Post-process WebMaker output.\n";
    print "Usage: doc_html [-help -? -verbose -ix file -bg color -hyp -nbsp] filenames\n";
    print "\t-help, -?: Show this message.\n";
    print "\t-verbose: Print detailed progress information.\n";
    print "\t-ix file: Rename the index file to the standard name, and fix all links within the web.\n\t          File is the name of the index file generated by WebMaker.\n";
    print "\t-bg color: Set the background of each page to the hex value of color.\n\t           If color is omitted, use white.\n\t           Any UNIX color can be specified, but color should be all lower case, and all one word.\n";
    print "\t-hyp: Remove Ctrl+E characters due to suppress-hyphenation markers in Frame variables.\n";
    print "\t-nbsp: Remove hard space (&nbsp;) characters from the sources (e.g. to enable code examples to be copied properly).\n";
    print "\tfilenames: one or more HTML files.\n";
    } # end show_usage

# Return next argument in the arglist if it exists and does not begin
# with "-".  Otherwise, return undef.
#
# Snaffled from doc_add

sub next_arg {
    local ($next_arg);
    if (@ARGV) {
	$next_arg = shift (@ARGV);
	if ($next_arg =~ /^-/) {
	    unshift (@ARGV, $next_arg);
	    undef;
	} else { $next_arg; }
    } else { undef; }
}

# The following snaffled from make_batchfiles

# get_web_root returns the WebMaker prefix of the filename passed to it as an
# argument. Thus, for file foo-123.bar, it returns foo.

sub get_web_root {			
    local ($root);		
    if ($_[0] =~  /(.*)-.*\.*/) { # If the filename has the form "*-*.*"
	$root = $+;		# find the root of the filename
    } else {
	$root = $_[0];		# otherwise, return the whole filename
    }
    $root;
}
