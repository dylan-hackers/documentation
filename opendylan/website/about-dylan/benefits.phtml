<!doctype html public "-//W3C//DTD HTML 3.2//EN">
<!--#config errmsg="There has been an error.  Please notify webmaster@functionalobjects.com" -->
<?php $current_part = "resources";
   $current_sub = "benefits";
   $title = "Functional Objects, Inc.";
   $description = "Functional Objects -- software development tools combining ease of use with power and efficiency.";
   require "../config.php3";
?>

<?php include $top_inc ?>

<center><h2>Dylan Features and Benefits</h2></center>

<TABLE BORDER CELLSPACING=3 CELLPADDING=10 WIDTH="100%">
<TR>
<TH WIDTH="50%" VALIGN="TOP" ALIGN=RIGHT>
  Dylan's clean design and powerful features...</TH>
<TH WIDTH="50%" VALIGN="TOP" ALIGN=LEFT>
  ...deliver a number of important benefits.</TH></TR>

<TR><TD WIDTH="50%" VALIGN="TOP">Dylan is thoroughly
object-oriented. Everything in Dylan is a first-class object,
including classes, functions, methods, and numbers.</TD>
<TD WIDTH="50%" VALIGN="TOP">Source code is simpler and more
consistent.  No more casting between objects and non-objects or
duplicating methods for the object and non-object cases.  Programming
tools are simpler, too.</TD></TR>

<TR><TD WIDTH="50%" VALIGN="TOP">
Dylan supports advanced object-oriented features like multiple
inheritance and multimethods.</TD>
<TD WIDTH="50%" VALIGN="TOP">
Dylan models design patterns directly, saving you the trouble and
complication of coding them explicitly.</TD></TR>

<TR><TD WIDTH="50%" VALIGN="TOP">
Dylan is fully compiled. Sealing declarations and type inference allow
efficient compilation of code, even in the presence of objects. </TD>
<TD WIDTH="50%" VALIGN="TOP">
Dylan programs run as fast as programs written in other compiled
languages, such as C and C++. Even so, they are as clean as Java
programs. </TD></TR>

<TR><TD WIDTH="50%" VALIGN="TOP">
Dylan uses a high-level syntax. Dylan programs are easy to write and
easy to read.</TD>
<TD WIDTH="50%" VALIGN="TOP">
Software maintenance is simplified.  It's easier to understand code, and
bring new programmers onto a project.</TD></TR>

<TR><TD WIDTH="50%" VALIGN="TOP">
Dylan provides automatic memory management (garbage collection).</TD>
<TD WIDTH="50%" VALIGN="TOP">
Programmers do not have to manage storage explicitly. Programs don't
suffer from obscure memory-related bugs. Garbage collection eliminates
a huge amount of implementation and debugging work. </TD></TR>

<TR><TD WIDTH="50%" VALIGN="TOP">
Dylan provides type-safety. All operations are checked for integrity
before being performed. The exception system supports restarting
programs as well as aborting from exceptions. </TD>
<TD WIDTH="50%" VALIGN="TOP">
Programs are more robust.  Errors can more easily be caught and more
flexibly corrected.</TD></TR>

<TR><TD WIDTH="50%" VALIGN="TOP">
Dylan provides a large number of extensible libraries. In addition to
the standard libraries for classes, functions, arithmetic, exceptions,
and collections, Functional Objects provides libraries for GUI,
networking, I/O, ActiveX&trade;, CORBA, and more.</TD>
<TD WIDTH="50%" VALIGN="TOP">
The language tools you need are available at a high-level, consistent with
the rest of the Dylan language.  This saves you time and headaches.</TD></TR>

<TR><TD WIDTH="50%" VALIGN="TOP">
Dylan programs are modular. The module system supports multiple
interfaces with precise control over imports and exports, so clients
are guaranteed to see only those objects which are appropriate.</TD>
<TD WIDTH="50%" VALIGN="TOP">
Your interfaces are cleaner, ensuring that your code can be reused in the future with minimal or no rewriting. </TD></TR>

<TR><TD WIDTH="50%" VALIGN="TOP">
Dylan supports macros. The Dylan macro system lets you create customized embedded languages while ensuring the integrity of your software.</TD>
<TD WIDTH="50%" VALIGN="TOP">
Source code is simplified.  It directly expresses your problem domain, and guarantees that protocols are followed.</TD></TR>
</TABLE>

<P>&nbsp;</P>

<B>These features are combined in a consistent design that minimizes
special cases and maximizes flexibility. The result is a language that
greatly increases programmer productivity and satisfaction and leads
to more maintainable source code.</B>


<?php include $bottom_inc ?>
