%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            true def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 6 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Palatino-Bold FMFONTDEFINE
2 0 /Palatino-Roman FMFONTDEFINE
3 0 /Courier FMFONTDEFINE
4 0 /Palatino-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
-1 (17 May 96) 524 749 P
(1 of 5) 292 20 T
1 14 Q
(Gwydion Print for Dylan) 225.31 710.67 T
1 10 Q
(Designed by the Gwydion Project) 228.51 687.33 T
(V) 254.47 669.33 T
(ersion 1.0 : 17 May 96) 261.14 669.33 T
2 F
(This document describes the) 36 629.33 T
3 F
(Print) 164.71 629.33 T
2 F
( library designed by the Gwydion Project at Carnegie Mellon University. This library) 194.71 629.33 T
(provides an interface that outputs an object in Dylan literal syntax if the object can be represented as a Dylan literal, and) 36 617.33 T
(otherwise, outputs the object in an implementation-dependent manner. There are essentially two functions,) 36 605.33 T
1 F
(print) 512.75 605.33 T
2 F
( and) 535.52 605.33 T
1 F
-0.19 (print-) 36 593.33 P
-0.19 (object) 62.1 593.33 P
2 F
-0.19 (. The) 89.87 593.33 P
1 F
-0.19 (print) 113.74 593.33 P
2 F
-0.19 ( function accepts keyword arguments that form a print request, controlling features such as circular) 136.51 593.33 P
-0.07 (printing, how deep within a data structure to print, how many elements in long sequences to print before using an ellipsis) 36 581.33 P
(notation, whether pretty printing is desired, and so on. Users extend) 36 569.33 T
1 F
(print) 340.72 569.33 T
2 F
(\325s ability to print various objects by adding) 363.49 569.33 T
(methods to the) 36 557.33 T
1 F
(print-object) 104.6 557.33 T
2 F
( function. The) 158.47 557.33 T
1 F
(print) 222.28 557.33 T
2 F
( function handles most of the overhead to satisfy special print requests,) 245.05 557.33 T
(outputting any special notations required, and it only calls) 36 545.33 T
1 F
(print-object) 296.99 545.33 T
2 F
( when it is necessary to print objects. Users should) 350.86 545.33 T
(always call the) 36 533.33 T
1 F
(print) 103.68 533.33 T
2 F
( function to output objects, especially recursively from within) 126.45 533.33 T
1 F
(print-object) 400.76 533.33 T
2 F
( methods to output an) 454.63 533.33 T
(object\325s components. Users should never call) 36 521.33 T
1 F
(print-object) 236.3 521.33 T
2 F
( directly.) 290.17 521.33 T
(The) 36 499.33 T
3 F
(Print) 55.24 499.33 T
2 F
( library exports two modules,) 85.24 499.33 T
3 F
(Print) 218.35 499.33 T
2 F
( and) 248.35 499.33 T
3 F
(Pprint) 270.28 499.33 T
2 F
(. The Gwydion implementation of this library requires the) 306.28 499.33 T
(Gwydion) 36 487.33 T
3 F
(Streams) 80.33 487.33 T
2 F
( library.) 122.33 487.33 T
1 14 Q
(1. Print Functions) 36 454.67 T
2 10 Q
(The) 36 433.33 T
3 F
(Print) 55.24 433.33 T
2 F
( module offers two functions for users to call to print objects,) 85.24 433.33 T
1 F
(print) 356.04 433.33 T
2 F
( and) 378.81 433.33 T
1 F
(print-to-string) 400.74 433.33 T
2 F
(.) 465.72 433.33 T
1 F
(*default-level*) 36 406.33 T
2 F
([Variable]) 532.03 406.33 T
1 F
(*default-length*) 36 394.33 T
2 F
([Variable]) 532.03 394.33 T
1 F
(*default-circle?*) 36 382.33 T
2 F
([Variable]) 532.03 382.33 T
1 F
(*default-pretty?*) 36 370.33 T
2 F
([Variable]) 532.03 370.33 T
(These variables provide default values for calls to the) 86.4 358.33 T
1 F
(print) 324.41 358.33 T
2 F
( function. Their values are implementation-) 347.18 358.33 T
(dependent.) 86.4 346.33 T
1 F
(print) 36 319.33 T
2 F
([Function]) 530.04 319.33 T
(Arguments) 61.2 307.33 T
(object :: <object>) 86.4 295.33 T
(stream :: <stream>) 86.4 283.33 T
(#key level :: false-or\050<fixed-integer>\051 = *default-level*,) 86.4 271.33 T
(length :: false-or\050<fixed-integer>\051 = *default-level*,) 111.6 259.33 T
(circle? :: <boolean> = *default-circle?*,) 111.6 247.33 T
(pretty? :: <boolean> = *default-pretty?*) 111.6 235.33 T
(Values) 61.2 223.33 T
4 F
(none) 86.4 211.33 T
2 F
(Description) 61.2 199.33 T
-0.1 (Prints) 86.4 187.33 P
4 F
-0.1 (object) 115.02 187.33 P
2 F
-0.1 (to) 140.56 187.33 P
4 F
-0.1 (str) 151.68 187.33 P
-0.1 (eam) 162.61 187.33 P
2 F
-0.1 ( according to the print request formed by the keyed arguments. A) 178.72 187.33 P
4 F
-0.1 (\336rst) 470.39 187.33 P
2 F
-0.1 ( call to) 486.79 187.33 P
1 F
-0.1 (print) 517.96 187.33 P
2 F
-0.1 ( creates) 540.73 187.33 P
(a printing stream to represent the print request, and recursive calls to) 86.4 175.33 T
1 F
(print) 394.91 175.33 T
2 F
( on this printing stream process the) 417.68 175.33 T
(keyed arguments differently \050see below\051. There are inspection functions for querying the print request \050see) 86.4 163.33 T
-0.29 (Section) 86.4 151.33 P
4 F
-0.29 (Print Request Inspection Functions) 120.54 151.33 P
2 F
-0.29 (\051. When) 263.3 151.33 P
1 F
-0.29 (print) 299.97 151.33 P
2 F
-0.29 ( actually prints an object, it calls) 322.74 151.33 P
1 F
-0.29 (print-object) 464.31 151.33 P
2 F
-0.29 (. Though the) 518.18 151.33 P
(inspection functions for querying the print request allow you to inspect any parameter of the print request,) 86.4 139.33 T
1 F
-0.51 (print-object) 86.4 127.33 P
2 F
-0.51 ( methods should only need to call) 140.27 127.33 P
1 F
-0.51 (print-length) 288.53 127.33 P
2 F
-0.51 (. All other aspects of the print request are handled by) 344.07 127.33 P
1 F
(print) 86.4 115.33 T
2 F
(. There is one exception which is described in Section) 109.17 115.33 T
4 F
(Pr) 346.02 115.33 T
(etty Printing) 355.84 115.33 T
2 F
(.) 408.9 115.33 T
4 F
(Level) 86.4 93.33 T
2 F
( controls how deep into a nested data structure to print. The value) 107.52 93.33 T
3 F
(#f) 401.95 93.33 T
2 F
( indicates that there is no limit. The) 413.95 93.33 T
(default,) 86.4 81.33 T
1 F
(*default-level*) 122.83 81.33 T
2 F
(, has no effect on recursive calls to) 190.03 81.33 T
1 F
(print) 343.06 81.33 T
2 F
(. Recursive calls to) 365.83 81.33 T
1 F
(print) 450.03 81.33 T
2 F
( may change the value) 472.8 81.33 T
-0.45 (of) 86.4 69.33 P
1 F
-0.45 (print-level) 97.24 69.33 P
2 F
-0.45 ( explicitly, but) 145.56 69.33 P
1 F
-0.45 (print) 209.9 69.33 P
2 F
-0.45 ( always uses a value to ensure the print request formed by the first call to) 232.67 69.33 P
1 F
-0.45 (print) 551.18 69.33 P
2 F
-0.13 (is never exceeded. For example, if a first call to) 86.4 57.33 P
1 F
-0.13 (print) 293.61 57.33 P
2 F
-0.13 ( set the level to 5, and while at a depth of 3, a recursive call) 316.38 57.33 P
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
-1 (17 May 96) 524 749 P
(2 of 5) 292 20 T
2 10 Q
(specified a level of 4, the recursive call would only descend 2 more levels, not 4.) 86.4 713.33 T
4 F
-0.04 (Length) 86.4 691.33 P
2 F
-0.04 ( controls how many elements of a sequence to print before printing ellipsis notation \050) 114.74 691.33 P
3 F
-0.1 (...) 489.22 691.33 P
2 F
-0.04 (\051. The value) 507.22 691.33 P
3 F
-0.1 (#f) 561.54 691.33 P
2 F
-0.65 (indicates that there is no limit. The) 86.4 679.33 P
1 F
-0.65 (print-) 237.29 679.33 P
-0.65 (length) 263.39 679.33 P
2 F
-0.65 ( control can be interpreted loosely by some) 292.83 679.33 P
1 F
-0.65 (print-object) 479.91 679.33 P
2 F
-0.65 ( methods) 533.78 679.33 P
(to control how many) 86.4 667.33 T
4 F
(elements) 181.25 667.33 T
2 F
( of any kind of object to print; for example, the default) 216.26 667.33 T
1 F
(<object>) 457.64 667.33 T
2 F
( method might) 497.53 667.33 T
-0.08 (regard) 86.4 655.33 P
1 F
-0.08 (print-length) 118.18 655.33 P
2 F
-0.08 ( to determine how many slot-name/value pairs to print. The default,) 173.72 655.33 P
1 F
-0.08 (*default-length*) 479.18 655.33 P
2 F
-0.08 (, has) 553.6 655.33 P
-0.25 (no effect on recursive calls to) 86.4 643.33 P
1 F
-0.25 (print) 215.39 643.33 P
2 F
-0.25 (. Recursive calls to) 238.16 643.33 P
1 F
-0.25 (print) 321.37 643.33 P
2 F
-0.25 ( may change the value of) 344.14 643.33 P
1 F
-0.25 (print-length) 455.52 643.33 P
2 F
-0.25 ( explicitly, but) 511.06 643.33 P
(they may only decrease the value, never increase it.) 86.4 631.33 T
4 F
-0.1 (Cir) 86.4 609.33 P
-0.1 (cle?) 99.56 609.33 P
2 F
-0.1 ( indicates whether printing should check all subcomponent references to make sure the printing process) 115.3 609.33 P
-0.5 (does not infinitely recurse through a data structure. Circular printing also tags objects that occur more than once) 86.4 597.33 P
(when they are first printed, and later occurrences are printed as a reference to the previously emitted tag. The) 86.4 585.33 T
(default,) 86.4 573.33 T
1 F
(*default-circle?*) 122.83 573.33 T
2 F
(, has no effect on recursive calls to) 196.68 573.33 T
1 F
(print) 349.71 573.33 T
2 F
(. If) 372.48 573.33 T
1 F
(print-circle?) 386.68 573.33 T
2 F
( is already) 441.65 573.33 T
3 F
(#t) 489.62 573.33 T
2 F
(, then it remains) 501.62 573.33 T
3 F
(#t) 86.4 561.33 T
2 F
( throughout all recursive calls. If) 98.4 561.33 T
1 F
(print-circle?) 244.32 561.33 T
2 F
( is) 299.29 561.33 T
3 F
(#f) 311.44 561.33 T
2 F
(, then recursive calls to) 323.44 561.33 T
1 F
(print) 427.1 561.33 T
2 F
( can change the value to) 449.87 561.33 T
3 F
(#t) 558.53 561.33 T
2 F
(;) 570.53 561.33 T
-0.21 (however, when printing exits the dynamic scope of the call that changed the value to) 86.4 549.33 P
3 F
-0.51 (#t) 460.65 549.33 P
2 F
-0.21 (, the value reverts back) 472.65 549.33 P
(to) 86.4 537.33 T
3 F
(#f) 97.62 537.33 T
2 F
(. If the original call to) 109.62 537.33 T
1 F
(print) 206.19 537.33 T
2 F
( specifies) 228.96 537.33 T
4 F
(cir) 271.62 537.33 T
(cle?) 282.18 537.33 T
2 F
( as) 297.92 537.33 T
3 F
(#f) 312.16 537.33 T
2 F
(, and dynamically distinct recursive calls turn circular) 324.16 537.33 T
-0.33 (printing on and off, all output generated while circular printing was on shares the same tagging space; that is, if) 86.4 525.33 P
3 F
(#1#) 86.4 513.33 T
2 F
( is printed twice, once from each of two distinct recursive calls to print, then each) 104.4 513.33 T
3 F
(#1#) 464.73 513.33 T
2 F
( is guaranteed to) 482.73 513.33 T
(signify the same) 86.4 501.33 T
1 F
(\134==) 160.96 501.33 T
2 F
( object.) 179.14 501.33 T
4 F
(Pr) 86.4 479.33 T
(etty?) 96.22 479.33 T
2 F
( indicates whether printing should attempt to insert line breaks and indentation to) 116.77 479.33 T
4 F
(format) 482.74 479.33 T
2 F
( objects) 509.4 479.33 T
-0.43 (according to how programmers tend to find it easier to) 86.4 467.33 P
4 F
-0.43 (r) 327.11 467.33 P
-0.43 (ead) 330.82 467.33 P
2 F
-0.43 ( data. The default,) 344.15 467.33 P
1 F
-0.43 (*default-pretty?*) 424.96 467.33 P
2 F
-0.43 (, has no effect on) 501.6 467.33 P
(recursive calls to) 86.4 455.33 T
1 F
(print) 162.87 455.33 T
2 F
(. If) 185.64 455.33 T
1 F
(print-pretty?) 199.84 455.33 T
2 F
( is already) 257.6 455.33 T
3 F
(#t) 305.57 455.33 T
2 F
(, then it remains) 317.57 455.33 T
3 F
(#t) 391.47 455.33 T
2 F
( throughout all recursive calls. If) 403.47 455.33 T
1 F
(print-) 86.4 443.33 T
(pretty?) 112.5 443.33 T
2 F
( is) 144.16 443.33 T
3 F
(#f) 156.31 443.33 T
2 F
(, then recursive calls to) 168.31 443.33 T
1 F
(print) 271.97 443.33 T
2 F
( can change the value to) 294.74 443.33 T
3 F
(#t) 403.4 443.33 T
2 F
(; however, when printing exits the) 415.4 443.33 T
(dynamic scope of the call that changed the value to) 86.4 431.33 T
3 F
(#t) 314.78 431.33 T
2 F
(, the value reverts back to) 326.78 431.33 T
3 F
(#f) 442.41 431.33 T
2 F
(.) 454.41 431.33 T
1 F
(print-to-string) 36 404.33 T
2 F
([Function]) 530.04 404.33 T
(Arguments) 61.2 392.33 T
(object :: <object>) 86.4 380.33 T
(#key level :: false-or\050<fixed-integer>\051 = *default-level*,) 86.4 368.33 T
(length :: false-or\050<fixed-integer>\051 = *default-level*,) 111.6 356.33 T
(circle? :: <boolean> = *default-circle?*,) 111.6 344.33 T
(pretty? :: <boolean> = *default-pretty?*) 111.6 332.33 T
(Values) 61.2 320.33 T
(result :: <byte-string>) 86.4 308.33 T
(Description) 61.2 296.33 T
(Calls) 86.4 284.33 T
1 F
(print) 111.05 284.33 T
2 F
( to produce output according to the print request formed by the keyed arguments and returns the) 133.82 284.33 T
(output as a string.) 86.4 272.33 T
1 F
(print-object) 36 245.33 T
2 F
([Generic Function]) 493.21 245.33 T
(Arguments) 61.2 233.33 T
(object :: <object>) 86.4 221.33 T
(stream :: <stream>) 86.4 209.33 T
(Values) 61.2 197.33 T
4 F
(none) 86.4 185.33 T
2 F
(Description) 61.2 173.33 T
-0.35 (Users extend) 86.4 161.33 P
1 F
-0.35 (print) 145.62 161.33 P
2 F
-0.35 (\325s ability to print various objects by adding methods to the) 168.39 161.33 P
1 F
-0.35 (print-object) 424.77 161.33 P
2 F
-0.35 ( function. When) 478.64 161.33 P
1 F
-0.35 (print) 551.08 161.33 P
2 F
(actually prints an object, it calls) 86.4 149.33 T
1 F
(print-object) 227.51 149.33 T
2 F
(. Users should never call) 281.38 149.33 T
1 F
(print-object) 392.21 149.33 T
2 F
( directly.) 446.08 149.33 T
1 14 Q
(2. Print Request Inspection Functions) 36 116.67 T
2 10 Q
(The) 36 95.33 T
3 F
(Print) 55.24 95.33 T
2 F
( module exports the following functions for querying the print request and current print state:) 85.24 95.33 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
-1 (17 May 96) 524 749 P
(3 of 5) 292 20 T
1 10 Q
(print-length) 36 713.33 T
2 F
([Function]) 530.04 713.33 T
(Arguments) 61.2 701.33 T
(stream :: <stream>) 86.4 689.33 T
(Values) 61.2 677.33 T
(length :: false-or\050<fixed-integer>\051) 86.4 665.33 T
(Description) 61.2 653.33 T
(Returns the current value for the print request. See the) 86.4 641.33 T
1 F
(print) 329.08 641.33 T
2 F
( function for details.) 351.85 641.33 T
1 F
(print-level) 36 614.33 T
2 F
([Function]) 530.04 614.33 T
(Arguments) 61.2 602.33 T
(stream :: <stream>) 86.4 590.33 T
(Values) 61.2 578.33 T
(level :: false-or\050<fixed-integer>\051) 86.4 566.33 T
(Description) 61.2 554.33 T
-0.35 (Returns the current value for the print request. See the) 86.4 542.33 P
1 F
-0.35 (print) 325.55 542.33 P
2 F
-0.35 ( function for details. Users should have little use for) 348.33 542.33 P
(this function because) 86.4 530.33 T
1 F
(print) 182.02 530.33 T
2 F
( takes care to call) 204.79 530.33 T
1 F
(print-object) 282.3 530.33 T
2 F
( only when the print level has not been exhausted.) 336.17 530.33 T
1 F
(print-depth) 36 503.33 T
2 F
([Function]) 530.04 503.33 T
(Arguments) 61.2 491.33 T
(stream :: <stream>) 86.4 479.33 T
(Values) 61.2 467.33 T
(depth :: false-or\050<fixed-integer>\051) 86.4 455.33 T
(Description) 61.2 443.33 T
-0.25 (Returns the current depth to which printing has descended into the object on which) 86.4 431.33 P
1 F
-0.25 (print) 455.02 431.33 P
2 F
-0.25 ( was originally called.) 477.79 431.33 P
(Users should have little use for this function because) 86.4 419.33 T
1 F
(print) 321.69 419.33 T
2 F
( takes care to call) 344.46 419.33 T
1 F
(print-object) 421.97 419.33 T
2 F
( only when the print) 475.84 419.33 T
(level has not been exhausted.) 86.4 407.33 T
1 F
(print-circle?) 36 380.33 T
2 F
([Function]) 530.04 380.33 T
(Arguments) 61.2 368.33 T
(stream :: <stream>) 86.4 356.33 T
(Values) 61.2 344.33 T
(circle? :: <boolean>) 86.4 332.33 T
(Description) 61.2 320.33 T
-0.29 (Returns whether circular printing is on. Users should have little use for this function because) 86.4 308.33 P
1 F
-0.29 (print) 494.65 308.33 P
2 F
-0.29 ( takes care to) 517.42 308.33 P
(detect circularities, tag multiply referenced objects, and emit tags rather than descending into objects to) 86.4 296.33 T
(repeatedly print them.) 86.4 284.33 T
1 F
(print-pretty?) 36 257.33 T
2 F
([Function]) 530.04 257.33 T
(Arguments) 61.2 245.33 T
(stream :: <stream>) 86.4 233.33 T
(Values) 61.2 221.33 T
(pretty? :: <boolean>) 86.4 209.33 T
(Description) 61.2 197.33 T
-0.1 (Returns whether pretty printing is on. Users should have little use for this function \050see Section) 86.4 185.33 P
4 F
-0.1 (Pr) 507.39 185.33 P
-0.1 (etty Printing) 517.21 185.33 P
2 F
-0.1 (\051.) 570.17 185.33 P
1 14 Q
(3. Pretty Printing) 36 152.67 T
2 10 Q
-0.02 (The) 36 131.33 P
3 F
-0.05 (Print) 55.22 131.33 P
2 F
-0.02 ( library implements most of the pretty printing technology described by Richard C. Waters in) 85.22 131.33 P
4 F
-0.02 (Common Lisp The) 499.66 131.33 P
-0.46 (Language) 36 119.33 P
2 F
-0.46 (, second edition. The interface is slightly different because Dylan does not currently have macros. This section only) 75.45 119.33 P
-0.53 (summarizes the pretty printing functionality to provide a quick reference for users of the) 36 107.33 P
3 F
-1.27 (Print) 423.5 107.33 P
2 F
-0.53 ( library, and readers should) 453.5 107.33 P
(refer to the Common Lisp manual for more details.) 36 95.33 T
(When writing) 36 73.33 T
1 F
(print-object) 100.18 73.33 T
2 F
( methods, users can ignore whether pretty printing is in effect. If you write your) 154.05 73.33 T
1 F
(print-object) 509.72 73.33 T
2 F
-0.62 (method using pretty printing functions, then when pretty printing is in effect, the output will be pretty printed. When pretty) 36 61.33 P
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
-1 (17 May 96) 524 749 P
(4 of 5) 292 20 T
2 10 Q
(printing is not in effect, your method will produce output as though you had not written it to use pretty printing. All) 36 713.33 T
1 F
-0.48 (print-) 36 701.33 P
-0.48 (object) 62.1 701.33 P
2 F
-0.48 ( methods that are written to do pretty printing must call the pretty printing functions within the dynamic scope) 89.87 701.33 P
(of a call to) 36 689.33 T
1 F
(pprint-logical-block) 83.77 689.33 T
2 F
(; otherwise, the pretty printing functions are no-ops.) 175.41 689.33 T
(The) 36 667.33 T
3 F
(Pprint) 55.24 667.33 T
2 F
( module exports the following variables:) 91.24 667.33 T
1 F
(*default-line-length*) 36 640.33 T
2 F
([Variable]) 532.03 640.33 T
-0.62 (This is the line length used by the pretty printer to determine how much output will fit on a single line. The value) 86.4 628.33 P
(must be an) 86.4 616.33 T
1 F
(<integer>) 137.4 616.33 T
2 F
(, and it defaults to 80.) 181.74 616.33 T
1 F
(*print-miser-width*) 36 589.33 T
2 F
([Variable]) 532.03 589.33 T
(This variable controls) 86.4 577.33 T
4 F
(miser mode) 184.28 577.33 T
2 F
(. Whenever a logical block \050see) 230.12 577.33 T
1 F
(pprint-logical-block) 368.47 577.33 T
2 F
(\051 begins in a column of) 460.11 577.33 T
-0.18 (output that is greater than) 86.4 565.33 P
3 F
-0.42 (*default-line-length* - *print-miser-width*) 203.76 565.33 P
2 F
-0.18 (, then pretty printing is in) 460.92 565.33 P
-0.01 (miser mode. The value must be an integer or) 86.4 553.33 P
3 F
-0.02 (#f) 286.35 553.33 P
2 F
-0.01 ( \050the default\051.) 298.35 553.33 P
3 F
-0.02 (#f) 360.28 553.33 P
2 F
-0.01 ( indicates that the pretty printer should never) 372.28 553.33 P
(enter miser mode.) 86.4 541.33 T
1 F
(pprint-logical-block) 36 514.33 T
2 F
([Function]) 530.04 514.33 T
(Arguments) 61.2 502.33 T
(stream :: <stream>) 86.4 490.33 T
(#key prefix :: false-or\050<byte-string>\051) 86.4 478.33 T
(per-line-prefix :: false-or\050<byte-string>\051) 111.6 466.33 T
(body :: <function>) 111.6 454.33 T
(suffix :: false-or\050<byte-string>\051) 111.6 442.33 T
(column :: limited\050<fixed-integer>, min: 0\051) 111.6 430.33 T
(Values) 61.2 418.33 T
4 F
(none) 86.4 406.33 T
2 F
(Description) 61.2 394.33 T
(This function groups printing into a logical block. The logical block provides boundaries for new levels of) 86.4 382.33 T
(indentation, affects) 86.4 370.33 T
3 F
(#"linear") 173.45 370.33 T
2 F
( newlines, and so on.) 227.45 370.33 T
4 F
(Pr) 322.48 370.33 T
(e\336x) 332.3 370.33 T
2 F
( is a string to print at the beginning of the logical) 346.47 370.33 T
-0.24 (block. The blocks indentation is automatically set to be one character position greater than the column in which) 86.4 358.33 P
4 F
-0.46 (pr) 86.4 346.33 P
-0.46 (e\336x) 95.11 346.33 P
2 F
-0.46 ( ends. Alternatively,) 109.28 346.33 P
4 F
-0.46 (per-line-pr) 199.95 346.33 P
-0.46 (e\336x) 243.1 346.33 P
2 F
-0.46 ( is a string to print on every line of the logical block. This function signals) 257.27 346.33 P
(an error if it is called with both) 86.4 334.33 T
4 F
(pr) 225.44 334.33 T
(e\336x) 234.15 334.33 T
2 F
( and) 248.32 334.33 T
4 F
(per-line-pr) 270.25 334.33 T
(e\336x) 313.41 334.33 T
2 F
( supplied as non-) 327.58 334.33 T
3 F
(#f) 403.76 334.33 T
2 F
(.) 415.76 334.33 T
4 F
(Suf\336x) 420.76 334.33 T
2 F
( is a string to print at the end) 444.94 334.33 T
-0.19 (of the logical block.) 86.4 322.33 P
4 F
-0.19 (Column) 173.88 322.33 P
2 F
-0.19 ( advises the pretty printer as to the current column of the output stream \050defaults to) 206.67 322.33 P
-0.13 (zero\051. The) 86.4 310.33 P
4 F
-0.13 (column) 132.91 310.33 P
2 F
-0.13 ( argument may be ignored entirely by some methods, and it may be ignored in some cases by) 163.1 310.33 P
(methods that can better determine the stream\325s current output column.) 86.4 298.33 T
4 F
-0.52 (Body) 86.4 276.33 P
2 F
-0.52 ( must be a function that can take one argument, and this argument is a stream. The) 106.95 276.33 P
4 F
-0.52 (body) 466.3 276.33 P
2 F
-0.52 ( function should use) 485.37 276.33 P
(the stream argument passed to it; the) 86.4 264.33 T
4 F
(body) 252.73 264.33 T
2 F
( function should not close over the stream argument to) 271.8 264.33 T
1 F
-0.2 (pprint-) 86.4 252.33 P
-0.2 (logical-) 118.61 252.33 P
-0.2 (block) 152.49 252.33 P
2 F
-0.2 (.) 178.04 252.33 P
1 F
-0.2 (Pprint-logical-block) 182.84 252.33 P
2 F
-0.2 ( wraps) 274.48 252.33 P
4 F
-0.2 (str) 306.61 252.33 P
-0.2 (eam) 317.54 252.33 P
2 F
-0.2 ( with a pretty printing stream when) 333.65 252.33 P
4 F
-0.2 (str) 492.96 252.33 P
-0.2 (eam) 503.89 252.33 P
2 F
-0.2 ( is any other) 520 252.33 P
(kind of stream. If) 86.4 240.33 T
4 F
(str) 164.86 240.33 T
(eam) 175.79 240.33 T
2 F
( is already a pretty printing stream, then the) 191.9 240.33 T
4 F
(body) 389.07 240.33 T
2 F
( function is called on) 408.14 240.33 T
4 F
(str) 502.3 240.33 T
(eam) 513.23 240.33 T
2 F
(.) 529.34 240.33 T
(All) 86.4 218.33 T
1 F
(print-) 102.5 218.33 T
(object) 128.6 218.33 T
2 F
( methods that are written to do pretty printing must call the other pretty printing functions) 156.37 218.33 T
(within the dynamic scope of a call to) 86.4 206.33 T
1 F
(pprint-logical-block) 250.71 206.33 T
2 F
(; otherwise, the pretty printing functions are no-ops.) 342.35 206.33 T
1 F
(pprint-newline) 36 179.33 T
2 F
([Function]) 530.04 179.33 T
(Arguments) 61.2 167.33 T
(kind :: one-of\050#"fill", #"linear", #"miser", #"mandatory"\051) 86.4 155.33 T
(stream :: <stream>) 86.4 143.33 T
(Values) 61.2 131.33 T
4 F
(none) 86.4 119.33 T
2 F
(Description) 61.2 107.33 T
(This function announces a conditional newline to the pretty printer. The pretty printer emits a newline) 86.4 95.33 T
-0.5 (depending on the) 86.4 83.33 P
4 F
-0.5 (kind) 165.48 83.33 P
2 F
-0.5 ( and the state of the pretty printer\325s current line buffer. The) 183.26 83.33 P
4 F
-0.5 (kind) 440.74 83.33 P
2 F
-0.5 ( argument has roughly the) 458.52 83.33 P
(following meanings:) 86.4 71.33 T
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
-1 (17 May 96) 524 749 P
(5 of 5) 292 20 T
3 10 Q
(#"fill") 111.6 713.33 T
2 F
(Emit a newline if the current) 136.8 701.33 T
4 F
(section) 265.64 701.33 T
2 F
( of output does not fit on one line.) 293.6 701.33 T
3 F
(#"linear") 111.6 684.33 T
2 F
-0.26 (Emit a newline if any) 136.8 672.33 P
3 F
-0.62 (#"linear") 232.12 672.33 P
2 F
-0.26 ( newline in the current) 286.12 672.33 P
4 F
-0.26 (section) 387.56 672.33 P
2 F
-0.26 ( needs to be emitted. That is, if) 415.52 672.33 P
(a current) 136.8 660.33 T
4 F
(section) 179.04 660.33 T
2 F
( of output cannot fit on one line, and any one of the) 207 660.33 T
3 F
(#"linear") 435.96 660.33 T
2 F
( newlines in) 489.96 660.33 T
(the section needs to be emitted, then emit them all.) 136.8 648.33 T
3 F
(#"miser") 111.6 631.33 T
2 F
-0.3 (Emit a newline as if it were a) 136.8 619.33 P
3 F
-0.73 (#"linear") 264.39 619.33 P
2 F
-0.3 ( newline, but only when) 318.39 619.33 P
4 F
-0.3 (miser) 426.6 619.33 P
-0.3 (mode) 451.03 619.33 P
2 F
-0.3 ( is in effect. Miser) 472.14 619.33 P
(style is in effect when a logical block starts past a particular column of output.) 136.8 607.33 T
3 F
(#"mandatory") 111.6 590.33 T
2 F
-0.35 (Emit a newline always. Establish that any containing) 136.8 578.33 P
4 F
-0.35 (sections) 369.81 578.33 P
2 F
-0.35 ( cannot be printed on a single line) 401.66 578.33 P
(so that) 136.8 566.33 T
3 F
(#"linear") 168.84 566.33 T
2 F
( and) 222.84 566.33 T
3 F
(#"miser") 244.77 566.33 T
2 F
( newlines will be emitted as appropriate.) 292.77 566.33 T
1 F
(pprint-indent) 36 539.33 T
2 F
([Function]) 530.04 539.33 T
(Arguments) 61.2 527.33 T
(relative-to :: one-of\050#"block", #"current"\051) 86.4 515.33 T
(n :: <fixed-integer>) 86.4 503.33 T
(stream :: <stream>) 86.4 491.33 T
(Values) 61.2 479.33 T
4 F
(none) 86.4 467.33 T
2 F
(Description) 61.2 455.33 T
-0.65 (This function specifies the indentation to use within the current logical block. When) 86.4 443.33 P
4 F
-0.65 (r) 450.33 443.33 P
-0.65 (elative-to) 454.04 443.33 P
2 F
-0.65 ( is) 491.25 443.33 P
3 F
-1.55 (#"block") 502.1 443.33 P
2 F
-0.65 (, then) 550.1 443.33 P
1 F
(pprint-indent) 86.4 431.33 T
2 F
( sets the indentation to the column of the first character of the logical block plus) 148.6 431.33 T
4 F
(n) 502.18 431.33 T
2 F
(. When) 507.74 431.33 T
4 F
(r) 541.67 431.33 T
(elative-) 545.38 431.33 T
(to) 86.4 419.33 T
2 F
( is) 94.17 419.33 T
3 F
(#"current") 106.32 419.33 T
2 F
(, then) 166.32 419.33 T
1 F
(pprint-indent) 193.51 419.33 T
2 F
( sets the indentation to the current column plus) 255.71 419.33 T
4 F
(n) 467.28 419.33 T
2 F
(.) 472.84 419.33 T
1 F
(pprint-tab) 36 392.33 T
2 F
([Function]) 530.04 392.33 T
(Arguments) 61.2 380.33 T
(kind :: one-of\050#"line", #"line-relative", #"section", #"section-relative"\051) 86.4 368.33 T
(colnum :: <fixed-integer>) 86.4 356.33 T
(colinc :: <fixed-integer>) 86.4 344.33 T
(stream :: <stream>) 86.4 332.33 T
(Values) 61.2 320.33 T
4 F
(none) 86.4 308.33 T
2 F
(Description) 61.2 296.33 T
-0.03 (This function announces a tab to the pretty printer.) 86.4 284.33 P
4 F
-0.03 (Colnum) 313.62 284.33 P
2 F
-0.03 ( and) 346.41 284.33 P
4 F
-0.03 (colinc) 368.28 284.33 P
2 F
-0.03 ( have meaning based on the value of) 391.98 284.33 P
4 F
-0.03 (kind) 555.72 284.33 P
2 F
-0.03 (:) 573.5 284.33 P
3 F
(#"line") 111.6 262.33 T
2 F
(Tab to output column) 136.8 250.33 T
4 F
(colnum) 235.72 250.33 T
2 F
(. If the output is already at or beyond) 265.91 250.33 T
4 F
(colnum) 432.94 250.33 T
2 F
(, then add) 463.13 250.33 T
4 F
(colinc) 510.04 250.33 T
2 F
( to) 533.74 250.33 T
4 F
-0.61 (colnum) 136.8 238.33 P
2 F
-0.61 ( until printing can continue at a column beyond the end of the output already on the line.) 166.99 238.33 P
3 F
(#"line-relative") 111.6 221.33 T
2 F
-0.5 (Output) 136.8 209.33 P
4 F
-0.5 (colnum) 171.25 209.33 P
2 F
-0.5 ( spaces. Then output enough spaces to tab to a column that is a multiple of) 201.44 209.33 P
4 F
-0.5 (colinc) 525.1 209.33 P
2 F
(from the beginning of the line.) 136.8 197.33 T
3 F
(#"section") 111.6 180.33 T
2 F
(This is similar to) 136.8 168.33 T
3 F
(#"line") 212.52 168.33 T
2 F
(, but column counting is relative to the beginning of the current) 254.52 168.33 T
4 F
(section) 136.8 156.33 T
2 F
( rather than the beginning of the line.) 164.76 156.33 T
3 F
(#"section-relative") 111.6 139.33 T
2 F
-0.38 (This is similar to) 136.8 127.33 P
3 F
-0.91 (#"line-relative") 211 127.33 P
2 F
-0.38 (, but column counting is relative to the beginning of the) 307 127.33 P
(current) 136.8 115.33 T
4 F
(section) 171.54 115.33 T
2 F
( rather than the beginning of the line.) 199.5 115.33 T
FMENDPAGE
%%EndPage: "5" 5
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 5
%%DocumentFonts: Times-Roman
%%+ Palatino-Bold
%%+ Palatino-Roman
%%+ Courier
%%+ Palatino-Italic
%%EOF
