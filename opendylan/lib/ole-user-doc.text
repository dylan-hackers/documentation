
Title:  OLE interface for Dylan -- user description

Author: David N. Gray  <gray@harlequin.com>

Date:	July 27, 1995
	August 3, 1995
	October 12, 1995
	February 5, 1996 - AddRef or Release OK on null, add
			`COM-interface' and `dylan-interface', changed
			interface class hierarchy.
	March 7, 1996 - Clarify the corresponding .LIB and .DLL files.
	March 20, 1997 - Some minor updates and clarifications.
	July 21, 1997 - New function `SubRef'.

Status: This describes what I am currently implementing, although it is
	still a preliminary proposal and subject to change.

Copyright: 1997 Functional Objects, Inc.  All rights reserved.

Hope info: $Header: /scm/cvs/fundev/doc/lib/ole-user-doc.text,v 1.1 2004/03/12 00:12:08 cgay Exp $

--------------

This document is intended to provide a preliminary overview of how
DylanWorks programs will be able to interface with Microsoft's OLE (which
originally stood for "Object Linking and Embedding") from a user's point of
view.  There is a companion document (in "dylan/doc/design/env/")
describing the implementation approach.

By "OLE", I actually mean "OLE2", but I'm following Microsoft's lead in
dropping the "2".  The interface currently supports only the Win32
environment, not Win16.  (Functions found in older documentation that are
now considered obsolete for Win32 include `OleBuildVersion',
`CoBuildVersion', `GetScode', `ResultFromScode', and `PropagateResult'.)

The Dylan interface resides in a library and module named `OLE'.  It uses a
library and module named `COM' which provides interfaces to Microsoft's
"Component Object Model", but it is not expected that users of `OLE' will
also need to use `COM' directly, since the `OLE' module exports the
relevant names from `COM'.

There will also be additional libraries for interfaces to OLE Automation,
OLE common dialogs, and OLE custom controls.  The Dylan libraries and the
corresponding Microsoft files are shown in the following table:

  Dylan library    C header    link library        runtime library
  -------------    --------    ------------        ---------------
   COM             OBJBASE.H   OLE32.LIB,UUID.LIB  OLE32.DLL
   OLE             OLE2.H      OLE32.LIB,UUID.LIB  OLE32.DLL
   OLE-Automation  OLEAUTO.H   OLEAUT32.LIB        OLEAUT32.DLL
   OLE-Dialogs     OLEDLG.H    OLEDLG.LIB          OLEDLG.DLL
   OLE-Controls    OLECTL.H    OLEPRO32.LIB        OLEPRO32.DLL

These libraries enable Dylan programs to use OLE in a manner almost the
same as would be done by a C++ program (assuming that it uses direct OLE
calls rather than MFC).  (Higher-level interfaces are described in the
files "ole-utilities.text" and "ole-duim.text".)  Most of the function,
type, variable, and constant names documented in the OLE specifications are
defined for the Dylan programmer to use.  As with the Win32 libraries (see
file "win32-library.text"), there are a few differences in order to
accommodate Dylan style and coding conventions:

  * Class and type names are enclosed in angle brackets.  For example,
    `HRESULT' becomes `<HRESULT>'.  For Dylan classes that represent C
    pointers, the Dylan `=' operator compares the pointer addresses, and
    `==' is not likely to be useful.  (Comparison of structure contents,
    where applicable, is done by the same functions as in the C API.)

  * Names of constants are prefixed by "$".  For example, `NOERROR'
    becomes `$NOERROR'. 

  * Underscores are replaced by hyphens.  For example, `MAKE_HRESULT'
    becomes `MAKE-HRESULT' and `S_OK' becomes `$S-OK'.  (However, hyphens
    are not inserted between capitalized words.)

  * Functions whose only effect is to return a true-or-false value have a
    "?" appended to their names.  For example: `SUCCEEDED?', `FAILED?',
    and `IsEqualIID?'.

  * Where an interface function is documented under a name such as, for
    example, `IClassFactory::CreateInstance', the corresponding Dylan
    generic function is called `IClassFactory/CreateInstance'.  This means
    that function names generally need to be qualified by their interface
    names in Dylan, although they are not in C or C++.  This is necessary
    because there are several names that are used in different interfaces
    with incompatible argument lists, so that the same generic function
    cannot be used.  However, for convenience, the following alias names
    are defined:
	define constant QueryInterface = IUnknown/QueryInterface;
	define constant AddRef = IUnknown/AddRef;
	define constant Release = IUnknown/Release;

  * Where a C/C++ function takes a pointer argument as a place to store a
    result value (when that value is a pointer or integer, not when filling
    in fields in a structure) , the corresponding Dylan function uses
    multiple return values to return such output parameters following the
    original function return value.  For example, where C++ code says:

      status = obj->QueryInterface(IID_Ifoo, & result);

    the equivalent Dylan code is:

      let ( status :: <SCODE>, result :: <Interface> ) =
        QueryInterface(obj,$IID-Ifoo);

  * The multitude of integer data types in C code (int, long, unsigned,
    ULONG, DWORD, etc.) are all designated as <integer> (or some
    appropriate subrange thereof) in Dylan method argument types.  However,
    in some cases, values that are too large to represented as an <integer>
    will be represented as a <machine-word> instead.

    The names <SCODE> and <HRESULT> are defined as Dylan data types because
    they aren't used as integers even though they are implemented as such
    in C.  (In Dylan, they are actually aliases for `<machine-word>'.)

  * The C type `BOOL' is mapped to `<boolean>' in Dylan.  Use `#t' and `#f'
    instead of `TRUE' and `FALSE'.

  * Because slot names are not in a separate name space in Dylan, the names
    of C structure fields will have the suffix "-value" added to form the
    name of the Dylan accessor function.  For example, the C statement:
	pt->x = x;
    becomes in Dylan:
        pt.x-value := x;

  * The class <Interface> is an abstract class that includes all OLE
    interfaces, regardless of whether they are implemented in C or Dylan.
    Thus this is the appropriate declared type for a variable holding an
    arbitrary interface, such as returned by QueryInterface or
    CreateInstance.  Classes such as <LPUNKNOWN>, <LPOLECONTAINER>,
    <LPOLEOBJECT>, etc., represent specific interfaces which could be
    implemented in either C or Dylan; conceptually these are subclasses of
    <Interface>, but they are currently actually implemented as aliases of
    <Interface> instead of as distinct types.  This may change in the
    future.  The C-FFI function `pointer-cast' can be used to convert
    an <Interface> to one of the more specific types.  The classes
    <IUnknown>, <IOleContainer>, <IOleObject>, etc., are subclasses used
    for interfaces implemented in Dylan.  Thus, the class hierarchy looks
    (conceptually) like:

                <Interface>
                    |
                <LPUNKNOWN>
                  /    \
                 /    <IUnknown>
        <LPOLEOBJECT>  /     \
            /    \    /       \
           /    <IOleObject>   ...
        ...         |
                <my-OleObject>

    where <my-OleObject> represents a user-defined Dylan class that
    provides an implementation of the "IOleObject" interface.  Classes
    <IUnknown> and <IOleObject> do not have any direct instances.

  * The function call `null-pointer(<LP...>)' is used to create a null
    pointer of a particular interface type, where C code would just use
    `NULL'.  The constant `$NULL-interface' is provided as a null instance
    of type <Interface>, which is not otherwise directly instantiable.  The
    function `null?' can be used to test whether an instance of <Interface>
    (or any other C pointer type) is null.  It also returns `#t' if the
    argument is `#f'.  It is not valid to use `null-pointer' on a Dylan
    implementation class (i.e. any subclass of <IUnknown>).

As in C++, an OLE application is written by defining subclasses for the
various interface classes to be supported, and the methods to implement the
prescribed behavior.  Multiple inheritance of interface classes is not
allowed, but <IUnknown> is implicitly included as a superclass of all of
the other interfaces.  The library provides a complete implementation of
the IUnknown interface, so the user is not required to define the methods
`QueryInterface', `AddRef', and `Release', although they may be overridden
if necessary.  When `make' is called to instantiate an interface class, the
optional keyword `controlling-unknown:' may be used to designate the object
handling the IUnknown protocol on behalf of an aggregate object.

Other methods for which default implementations are provided:
`LockServer'


For example, where C++ might say:

  interface myOLEobject : public IOleObject
  {
 ...
  };

the corresponding Dylan code would be:

  define COM-interface <myOLEobject> ( <IOleObject> )
 ...
  end;

`define COM-interface' has the same syntax and semantics as `define class',
but compiler limitations require it to be used to perform special handling
for interface classes.  [Issue: hopefully someday the compiler can be smart
enough to not require this distinction.]

For convenience, it is permissible to call AddRef or Release on a null
interface, so it is not necessary to check first.

<IUnknown> also implements a function called `SubRef', which is like
`Release' in that it undoes the effect of a call to `AddRef', but differs
from `Release' in that it will not terminate the object if the count is
returned to 0.  This is sometimes needed within an `initialize' method to
return the reference count to 0 before the `AddRef' is performed by the
caller of `make'.  (In C/C++ code, this situation is typically handled by
directly incrementing and decrementing the ref count slot, without using
AddRef or Release, but the Dylan implementation does not directly expose
that slot.) 

If the user class is to define a new interface (as opposed to implementing
a pre-defined interface), then for `QueryInterface' to recognize the new
interface, it is sufficient to define an interface ID and a method like:

    define method initialize ( self :: <IFoo> )
      next-method();
      add-interface(self, $IID-IFoo);
    end initialize;

However, the methods of the new interface will not be callable from code in
other languages without the use of additional tools that are not currently
provided.  Such tools are expected to be needed, but are not yet specified.

For defining the interface ID, where C code would do like:
  DEFINE_GUID(GUID_SIMPLE, 0xBCF6D4A0, 0xBE8C, 0x1068, 0xB6, 0xD4, 0x00,
		0xDD, 0x01, 0x0C, 0x05, 0x09);
in Dylan do:
  define constant $GUID-SIMPLE :: <REFGUID> =
    make-GUID(#xBCF6D4A0, #xBE8C, #x1068,
	      #xB6, #xD4, #x00, #xDD, #x01, #x0C, #x05, #x09);

Alternatively, the internal GUID can also be converted from the string
representation like this:
  define constant $GUID-SIMPLE :: <REFGUID> =
    as(<REFGUID>, "{BCF6D4A0-BE8C-1068-B6D4-00DD010C0509}");
There is also an `as' method for converting a GUID to a <string>.

Since Dylan doesn't have destructors, any cleanup code that would have
been done in a C++ destructor will instead need to be done by providing
a method on generic function `terminate'.  The default method for
`Release' will call `terminate' when the object's reference count
is decremented to zero.  It may also be called before the object is
garbage-collected, if GC finalizations are available and enabled.

For example, where a C++ OLE application class might do:

  myApp::~myApp()
  {
    if (IsInitialized())
      OleUninitialize();
    DestroyWindow(m_hAppWnd);
  }

the corresponding Dylan code would look like:

  define method terminate (this :: <my-app>) => ();
      next-method();
      if ( IsInitialized() )
	OleUninitialize();
      end if;
      DestroyWindow(this.m_hAppWnd);
      values();
  end terminate;

[Issue: the name `terminate' was chosen because it was David Moon's name
for the finalization function.  However, since then Harlequin has chosen to
use the name `finalize' for that function.  It isn't clear whether
`terminate' should be changed to `finalize' or whether it is better to
provide a `finalize' method on `<IUnknown>' that calls `terminate'.]

The Dylan function `pointer-value' can be used to convert between a Dylan
integer and a `LARGE_INTEGER' or `ULARGE_INTEGER'.  For example:

  let li :: make( <PLARGE-INTEGER> );
  pointer-value(li) := 0;

allocates a LARGE_INTEGER and sets its value to 0, without needing to be
concerned with the individual fields of the internal representation.
Note that this makes the C macros `LISet32' and `ULISet32' unnecessary in
Dylan. 

When an interface pointer is received from an API call, it could represent
an interface implemented in either C/C++ or Dylan, so any calls to its
methods need to first go through the C/C++ method table, and then through
the Dylan generic function dispatch if it is actually implemented in Dylan.
If the interface is going to be used in a series of method calls, it may be
more efficient to first call function `dylan-interface' on it to obtain a
direct Dylan representation of the interface that uses Dylan dispatch
directly.  The argument is returned unchanged if it is not a Dylan
interface.  For example:
    let interface = dylan-interface( object.foo-interface );
    foo(interface, ...);
    bar(interface, ...);


Some other helper functions provided to make it easier to use Dylan data
types:

  IStream/Write-integer( stream, integer-value ) => ( status, count )

	Calls IStream/Write to output the integer-value in a 4-byte field.

  IStream/Read-integer( stream ) => ( status, integer-value, count )

	Calls IStream/Read to read a value written by IStream/Write-integer.

For convenience, the class `<LPSTGMEDIUM>' has `pointer-value' and
`pointer-value-setter' methods provided which use Dylan's run-time typing
to automatically manage the `tymed' field.
