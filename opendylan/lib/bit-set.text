			       Bit Sets
			       ========

The following are exported from the bit-set module in the bit-set library.


<bit-set>                                      [sealed instantiable class]

 Superclasses: <set>

 Init-keywords:
  upper-bound-hint:  An integer which indicates that all the elements of
                     the set are expected to below this value. This is
                     merely an aid to the implementation when allocating
                     the set, and integers which are greater than or equal
                     to this number can be added at any time. The default
                     is zero.

  members:           If supplied, this gives the initial elements of the
                     set as a sequence of integers.

  all-members-from:  If this is a non-negative integer then the set
                     created will be infinite. All integers greater than
                     or equal to the one supplied will be members of the
                     set. The default is #f.

 Description:
  Represents finite sets and some infinite sets over the non-negative
  integers in an efficient manner using a <bit-vector>. The infinte sets
  which can be represented are those which are the complement of a finite
  set.


make                                                    [Sealed GF Method]

 Signature
    (class == <bit-set>, #key upper-bound-hint, members, all-members-from)
 => (set :: <bit-set>)

 Description
  Returns a general instance of <bit-set>.


forward-iteration-protocol                              [Sealed GF Method]

 Signature
    (set :: <bit-set>)
 => (intial-state, limit, next-state, finished-state?, current-key,
     current-element, current-element-setter, copy-state)

 Description
  Gives a sorted view onto the members of 'set'. It is up to the client to
  ensure that if it tries to iterate over an infinite set then the
  iteration will terminate.


backward-iteration-protocol                             [Sealed GF Method]

 Signature
    (set :: <bit-set>)
 => (initial-state, limit, next-state, finished-state?, current-key,
     current-element, current-element-setter, copy-state)

 Description
  If the set is finite, gives a reversed sorted view onto the members of
  'set'. Otherwise an error is signalled.


member?                                                 [Sealed GF Method]

 Signature
  (set :: <bit-set>, element :: <integer>) => (result :: <boolean>)

 Description
  Returns #t if 'element' is a member of the set, otherwise #f. 'element'
  must be a non-negative integer.


set-add                                                 [Sealed GF Method]

 Signature
  (set :: <bit-set>, element :: <integer>) => (new-set :: <bit-set>)

 Description
  Returns a new bit set which includes all the elements in 'set' and
  'element' which must be a non-negative integer.


set-add!                                                [Sealed GF Method]

 Signature
  (set :: <bit-set>, element :: <integer>) => (new-set :: <bit-set>)

 Description
  Modifies 'set' to include 'element'. The returned set, 'new-set' ==
  'set'. 'element' must be a non-negative integer.


set-remove                                              [Sealed GF Method]

 Signature
  (set :: <bit-set>, element :: <integer>) => (new-set :: <bit-set>)

 Description
  Returns a new bit-set which includes all the elements in 'set' except
  for 'element' which must a non-negative integer.


set-remove!                                             [Sealed GF Method]

 Signature
  (set :: <bit-set>, element :: <integer>) => (new-set :: <bit-set>)

 Description
  Modifies 'set' so that it no longer contains 'element'. The returned
  set, 'new-set' == 'set'. 'element' must be a non-negative integer.


element                                                 [Sealed GF Method]

 Signature
    (set :: <bit-set>, element :: <integer>, #key default)
 => (element :: <integer>)

 Description
  Returns 'element' if it is in the set. Otherwise it returns the
  default value if one was supplied. If no default was supplied, then it
  signals an error. 'element' must be a non-negative integer.


element-setter                                          [Sealed GF Method]

 Signature
  (el1 :: <integer>, set :: <bit-set>, el2 :: <integer>)
 => (el1 :: <integer>)

 Description
  'el1' and 'el2' must be non-negative integers. Given that a set's key-
  sequence is a vector of its elements,
    - element-setter(i, s, i) adds i if not already present,
    - element-setter(i, s, j) replaces j by i if j is already present,
      otherwise adds i.


infinite?                                               [Sealed GF Method]

 Signature
  (set :: <bit-set>) => (result :: <boolean>)

 Description
  Returns #t if the set is infinite, otherwise #f.


size                                                    [Sealed GF Method]

 Signature
  (set :: <bit-set>) => (size :: false-or(<integer>))

 Description
  Returns the cardinality of the set or #f if the set is infinite. This
  operation may be relatively slow.


set-union                                               [Sealed GF Method]

 Signature
  (set1 :: <bit-set>, set2 :: <bit-set>) => (new-set :: <bit-set>)

 Description
  Returns a new bit-set containing every element of set1 and set2. Neither
  'set1' or 'set2' will be altered.


set-union!                                              [Sealed GF Method]

 Signature
  (set1 :: <bit-set>, set2 :: <bit-set>) => (result-set :: <bit-set)

 Description
  Alters 'set1' so that it also contains the elements in 'set2'.
  'result-set' == 'set1'.


set-intersection                                        [Sealed GF Method]

 Signature
  (set1 :: <bit-set>, set2 :: <bit-set>) => (result-set :: <bit-set>)

 Description
  Returns a new bit-set containing only elements which appear in both
  'set1' and 'set2'. Neither 'set1' or 'set2' will be altered.


set-intersection!                                       [Sealed GF Method]

 Signature
  (set1 :: <bit-set>, set2 :: <bit-set>) => (result-set :: <bit-set)

 Description
  Alters 'set1' so that it only contains those elements which are also
  members of 'set2'. 'result-set' == 'set1'.


set-difference                                          [Sealed GF Method]

 Signature
  (set1 :: <bit-set>, set2 :: <bit-set>) => (result :: <bit-set>)

 Description
  Returns a new bit-set whose elements are determined by removing elements
  from 'set1' which are also members of 'set2'. Neither 'set1' or 'set2'
  will be altered.


set-difference!                                         [Sealed GF Method]

 Signature
  (set1 :: <bit-set>, set2 :: <bit-set>) => (result :: <bit-set>)

 Description
  Alters 'set1' by removing those elements which are also members of
  'set2'. 'result-set' == 'set1'.


set-complement                                          [Sealed GF Method]

 Signature
  (set :: <bit-set>) => (new-set :: <bit-set>)

 Description
  Returns a bit-set which represents the complement of the argument set.


set-complement!                                         [Sealed GF Method]

 Signature
  (set :: <bit-set>) => (result-set :: <bit-set>)

 Description
  Alters 'set' so that it contains the complement of the original set.
  'result-set' == 'set'.


copy-bit-set!                                                   [Function]

 Signature
  (set1 :: <bit-set>, set2 :: <bit-set>) => ()

 Description
  Destructively modifies 'set1' so that it contains exactly the same
  elements as 'set2'. After the copy, 'set1' and 'set2' do not share any
  structure.


empty-bit-set!                                                  [Function]

 Signature
  (set :: <bit-set>) => ()

 Description
  Destructively modifies 'set' by removing all its elements.


universal-bit-set!                                              [Function]

 Signature
  (set :: <bit-set>) => ()

 Description
  Destructively modifies 'set' to include all non-negative integers as
  members.

