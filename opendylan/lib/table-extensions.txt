
PROPOSAL NAME: Table-Extensions

PROPOSAL:

Add a new library Table-Extensions which exports a module of the same
name.  The Table-Extensions module exports the following:

<string-table>					[Instantiable Sealed Class]

   This class is a subclass of <table>. It is a table that has
   <string>s for keys (compared with \=) and <object>s for
   elements. It is an error to use a key that is not a <string>.
   It is an error to modify a key once it has been used to add an
   element to a <string-table>.

<hash-state>							[Type]

   Anything the DRM describes as a hash state is an instance of this
   type.  This includes the second return value of merge-hash-codes
   and of all hash functions, and the second and fourth parameters to
   merge-hash-codes.

collection-hash							[Function]
   Arguments
	key-hash-function :: <function>
	elt-hash-function :: <function>
	collection :: <collection>
	#key ordered :: <boolean> = #f
   Values
	hash-id :: <integer>
	hash-state :: <hash-state>
   Description 
	This function hashes every element of collection using
	key-hash-function on the keys and elt-hash-function on the
	elements.  This function is equivalent to the following
	reference implementation:

   define function collection-hash
       (key-hash :: <function>, element-hash :: <function>,
        col :: <collection>, 
	#key ordered :: <boolean> = #f)
    => (id :: <integer>, state :: <hash-state>)
     let (current-id, current-state) = values(0, $permanent-hash-state);
     let (state, limit, next, done?, cur-key, cur-elem)
       = forward-iteration-protocol(col);
     for (st = state then next(col, st),
          until: done?(col, st, limit))
       let elt = cur-elem(col, st);
       let key = cur-key(col, st);

       let (elt-id, elt-state) = element-hash(elt);
       let (key-id, key-state) = key-hash(key);
       let (captured-id1, captured-state1)
	 = merge-hash-codes(elt-id, elt-state, key-id, key-state, ordered: #t);
       let (captured-id2, captured-state2) 
	 = merge-hash-codes(current-id, current-state, 
			    captured-id1, captured-state1, ordered: ordered);
       current-id := captured-id2;
       current-state := captured-state2;
     end for;
     values(current-id, current-state);
   end function collection-hash;


sequence-hash							[Function]
   Arguments
	elt-hash-function :: <function>
	sequence :: <sequence>
   Values
	hash-id :: <integer>
	hash-state :: <hash-state>
   Description
	This function hashes every element of sequence using
	elt-hash-function, merging the resulting hash codes in order.

values-hash                                                     [Function]
   Arguments
	elt-hash-function :: <function>
	#rest values
   Values
	hash-id :: <integer>
	hash-state :: <hash-state>
   Description
	This function hashes each object in the #rest arguments using
	elt-hash-function, merging the resulting hash codes in order. 

string-hash							[Function]
   Arguments
	string :: <string>
   Values
	hash-id :: <integer>
	hash-state :: <hash-state>
   Description
	This function produces hash codes for strings using the
	equality test \=.

case-insensitive-string-hash					[Function]
   Arguments
	string :: <string>
   Values
	hash-id :: <integer>
	hash-state :: <hash-state>
   Description 
	This function produces hash codes for strings using the
	equality test case-insensitive-equal.

case-insensitive-equal						[Function]
   Arguments
	string1 :: <string>
	string2 :: <string>
   Values
	answer :: <boolean>
   Description
	Performs a case insensitve comparison of the strings.

remove-all-keys!					[Generic Function]
   Arguments
	coll :: <mutable-explicit-key-collection>
   Values
	coll :: <mutable-explicit-key-collection>
   Description
	Modifies collection so that the collection no longer contains
	any keys or elements (ie, is empty).

remove-all-keys!					[G.F. Method]
   Arguments
	coll :: <mutable-explicit-key-collection>
   Values
	coll :: <mutable-explicit-key-collection>
   Description
	This method implements remove-all-keys! by repeated calls to
	remove-key!.

remove-all-keys!				[Sealed G.F. Method]
   Arguments
	table :: <table>
   Values
	table :: <table>
   Description
	There is a predefined method on <table> which does not
	necessarily use remove-key!.


Different hash functions are not required to return the same hash code
for equal or even identical objects.  For instance,

	collection-hash(#(), object-hash, object-hash)

is not guarenteed to return the same values as 

	sequence-hash(#(), object-hash)

Furthermore, collection-hash with ordered: #t is not guarenteed to
return the same hash code as collection-hash with ordered: #f.  (Such
a requirement would render the ordered: keyword useless)

RATIONALE:

<string-table> is probably the single most common use of <table> after
<object-table>, and so deserves to be built in.

<hash-state> allows users to better comment their hash functions and
possibly achieve greater efficiency by not throwing away type
information.

The hash functions provide convenient building blocks for users to
create their own tables and hash functions.

COST TO IMPLEMENTORS:

Relatively little.  This library is relatively small and can be
portably implemented with reasonable performance (although a not-so
portable implementation might still be worth doing, particularly for
<string-table>).  CMU would be willing to donate a portable
implementation to other implementors.

RELATED PROPOSALS: 

None.

REVISION HISTORY: 

Version 1; Gwydion; Nick Kramer; 19 June 96.
Version 2; Gwydion; Nick Kramer; 26 June 96.

--------------------------------------------------------------------

