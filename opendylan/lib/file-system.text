The File-System library provides a generic interface to the local
machine's file system.  Remotely mounted file systems may also be
accessible using this interface.  (On Win32, remote file systems are
accessible.)

The library exports a single module, file-system, which exports
the following classes/types and functions.
              

Classes/Types:

  <pathname>                            [Type]
    Equivalent: type-union(<string>, <locator>)
    Synopsis: Identifies a file system entity.
    Notes: Any function below which returns a pathname will return a
           <string> and not a <locator>.  (This may change once we
	   have a new, simpler implementation of <locator>s.)

  <file-type>                           [Type]
    Equivalent: one-of(#"file", #"directory", #"link"):
    Synopsis: The possible types of a file system entity.

  <copy/rename-disposition>             [Type]
    Equivalent: one-of(#"signal", #"replace")
    Synopsis: The acceptable values for the if-exists: argument to the
              copy-file and rename-file functions.


Functions:

  file-exists?                          [Function]
    Signature: (file :: <pathname>) => (exists? :: <boolean>)
    Synopsis: Returns #t if the specified file exists.
    Notes: If <pathname> refers to a link, the target of the link is checked.

  file-type                             [Function]
    Signature: (file :: <pathname>) => (file-type :: <file-type>)
    Synopsis: Returns the type of the specified file system entity.

  delete-file                           [Function]
    Signature: (file :: <pathname>) => ()
    Synopsis: Deletes the specified file system entity.
    Notes: If <pathname> refers to a link, the link is removed.

  copy-file                             [Function]
    Signature: (source :: <pathname>, destination :: <pathname>,
                #key if-exists :: <copy/rename-disposition> = #"signal")
            => ()
    Synopsis: Copies the file specified as source to the destination.
              If the destination already exists, the action of this
              function is controlled by the if-exists: keyword.

  rename-file                           [Function]
    Signature: (source :: <pathname>, destination :: <pathname>,
                #Key if-exists :: <copy/rename-disposition> = #"signal")
            => ()
    Synopsis: Renames the file specified as source to destination.
              If the desintation already exists, the action of this
              function is controlled by the if-exists: keyword.
    Notes: This operation may fail if the source and destination are
           not on the same file system.

  file-property                         [Sealed generic]
    Signature: (file :: <pathname>, key == #"author") => (author :: false-or(<string>))
    Signature: (file :: <pathname>, key == #"size") => (file-size :: <integer>)
    Signature: (file :: <pathname>, key == #"creation-date") => (creation-date :: false-or(<date>))
    Signature: (file :: <pathname>, key == #"access-date") => (access-date :: false-or(<date>))
    Signature: (file :: <pathname>, key == #"modification-date") => (modification-date :: false-or(<date>))
    Signature: (file :: <pathname>, key == #"write-date") => (write-date :: false-or(<date>))
    Signature: (file :: <pathname>, key == #"readable?") => (readable? :: <boolean>)
    Signature: (file :: <pathname>, key == #"writeable?") => (writeable? :: <boolean>)
    Signature: (file :: <pathname>, key == #"executable?") => (executable? :: <boolean>)
    Synopsis: Returns the specified property of the file system entity
              identified by file.  Not all platforms implement all of
              the above keys.  Some platforms may support additional
              keys.  The #"author" key is supported on all platforms
              but may return #f if it's not meaningful on a given
              platform.  The keys #"modification-date" and
              #"write-date" are identical.  Use of an unsupported key
              will signal an error.
    Notes: All keys listed above are implemented by Win32.
           The #"author" key always returns #f on Win32.
           The date keys may return #f on Win32 if that particular
             date wasn't recorded for a file.  (This seems to only
             occur under Win95 and/or FAT filesystems.)

  file-property-setter                  [Sealed generic]
    Signature: (new-author :: false-or(<string>), file :: <pathname>, key == #"author")
            => (new-author :: false-or(<string>))
    Signature: (new-file-size :: <integer>, file :: <pathname>, key == #"size")
            => (new-file-size :: <integer>)
    Signature: (new-creation-date :: false-or(<date>), file :: <pathname>, key == #"creation-date")
            => (new-creation-date :: false-or(<date>))
    Signature: (new-access-date :: false-or(<date>), file :: <pathname>, key == #"access-date")
            => (new-access-date :: false-or(<date>))
    Signature: (new-modification-date :: false-or(<date>), file :: <pathname>, key == #"modification-date")
            => (new-modification-date :: false-or(<date>))
    Signature: (new-write-date :: false-or(<date>), file :: <pathname>, key == #"write-date")
            => (new-write-date :: false-or(<date>))
    Signature: (new-readable? :: <boolean>, file :: <pathname>, key == #"readable?")
            => (new-readable? :: <boolean>)
    Signature: (new-writeable? :: <boolean>, file :: <pathname>, key == #"writeable?")
            => (new-writeable? :: <boolean>)
    Signature: (new-executable? :: <boolean>, file :: <pathname>, key == #"executable?")
            => (new-executable? :: <boolean>)
    Synopsis: Sets the specified property of the file system entity
              identified by file to the given value.  Not all
              platforms implement all of the above keys.  Some
              platforms may support additional keys.  The keys
              #"modification-date" and #"write-date" are identical.
              Use of an unsupported key will signal an error.
    Notes: The only settable property on Win32 is #"writeable?".

  file-properties                       [Function]
    Signature: (file :: <pathname>) => (properties :: <explicit-key-collection>)
    Synopsis: Returns all the properties of the file system entity
              identified by file.  The keys to the properties
              collection are the same as those use by file-property,
              above.  (E.g., file-properties()[#"size"])

  create-directory                      [Function]
    Signature: (parent :: <pathname>, name :: <string>) => (directory :: <pathname>)
    Synopsis: Creates a new directory with the specified name in the
              specified parent directory.
    Notes: The return value of this function can be used with
           concatenate to create pathnames of entities in the new
           directory.

  delete-directory                      [Function]
    Signature: (directory :: <pathname>) => ()
    Synopsis: Deletes the specified directory.
    Notes: Whether or not the directory must be empty before it can be
           deleted is platform dependent.

  ensure-directories-exist              [Function]
    Signature: (file :: <pathname>) => (created? :: <boolean>)
    Synopsis: Ensures that all the directories in the <pathname>
              leading to the file exist, creating any that do not, as
              needed.  The return value indicates whether or not any
              directory was created.
    Notes: The following calls are equivalent
             ensure-directories-exist("C:\users\palter\foo.text")
             ensure-directories-exist("C:\users\palter\")
           as they will both create the directories "users" and
           "palter" if needed.  The call
             ensure-directories-exist("C:\users\palter")
           is not equivalent as it will only create "users" if needed.

  home-directory                        [Function]
    Signature: () => (home-directory :: <pathname>)
    Synopsis: Returns the <pathname> of the user's home directory
              on this machine.
    Notes: The return value of this function can be used with
           concatenate to create pathnames of entities in the
           home directory.

  working-directory                     [Function]
    Signature: () => (home-directory :: <pathname>)
    Synopsis: Returns the <pathname> of the current working directory
              in the current process on this machine.
    Notes: The return value of this function can be used with
           concatenate to create pathnames of entities in the
           working directory.

  working-directory-setter              [Function]
    Signature: (new-working-directory :: <pathname>)
            => (new-working-directory :: <pathname>)
    Synopsis: Sets the working directory for the current process
    Notes: The following calls are equivalent
             working-directory() := "C:\users\palter\foo.text";
             working-directory() := "C:\users\palter\";
           as they will both set the working directory to the
           directory "palter".  The call
             working-directory() := "C:\users\palter";
           is not equivalent as it will set the working directory
           to "users".

  temp-directory                        [Function]
    Signature: () => (temp-directory :: false-or(<pathname>))
    Synopsis: Returns the <pathname> of the temporary directory in use
              on this machine or #f if there's none.
    Notes: The return value of this function can be used with
           concatenate to create pathnames of entities in the
           temporary directory.

  root-directories                      [Function]
    Signature: () => (roots :: <sequence>)
    Synopsis: Returns the <pathname>s of the root directories of the
              file systems on this machine.
    Notes: The return values of this function can be used with
           concatenate to create pathnames of entities in any of the
           root directories.

  do-directory                          [Function]
    Signature: (f :: <function>, directory :: <pathname>) => ()
    Synopsis: Executes the supplied function once for each entity in
              the specified directory.  The signature of f is
                (directory :: <pathname>, name :: <byte-string>, type :: <file-type>) => ()
              Within f, the values of directory and name can be
              concatenated to generate a <pathname> suitable for use
              by the other functions in the library.
    Notes: The following calls are equivalent
             do-directory(my-function, "C:\users\palter\foo.text")
             do-directory(my-function, "C:\users\palter\")
           as they will both operate on the contents of C:\users\palter.
           The call
             do-directory(my-function, "C:\users\palter")
           is not equivalent as it will operate on the contens of C:\users.
