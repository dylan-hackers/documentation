The Operating-System library provides interfaces to some operating
system capabilities as well as constants which can be used to
conditionalize code based on the platform running the application.

The library exports a single module, operating-system, which exports
the following variables and functions.


Variables:

  $architecture-little-endian?          [Constant, <boolean>]
    Synopsis: True if the processor architecture is little-endian.
              (A processor is little-endian if the "rightmost" bit
               in a word is the least-significant bit.)
    Notes: For processors which implement the Intel architecture
           (e.g., Pentium, AMD), this value is #t.

  $os-name                              [Constant, symbol]
    The operating system running on this machine.  (E.g., #"win32", #"osf3")

  $os-variant                           [Constant, symbol]
    Synopsis: Distinguishes between variants of the operating system
              identified by $os-name, when relevant; otherwise, it has
              the same value as $os-name.
    Notes: On Windows, the possible values are #"win3.1", #"win95", #"win98", #"winnt".

  $os-version                           [Constant, <string>]
    Synopsis: Identifies the version of the operating system.
    Notes: For Windows NT, a typical value would be "4.0.1381 Service Pack 3".
           For Windows 95, a typical value would be "4.0.1212 B".

  $machine-name                         [Constant, symbol]
    The type of hardware in use.  (E.g., #"x86", #"alpha")

  $platform-name                        [Constant, symbol]
    A combination of the $machine-name and $os-name variables.
    (E.g., #"x86-win32", #"alpha-osf3")


Functions:

  environment-variable                  [Function]
    Signature: (name :: <byte-string>) => (value :: false-or(<byte-string>))
    Synopsis: Returns the value of the environment variable specified
              by name or #f if there is no such environment variable.

  environment-variable-setter           [Function]
    Signature: (new-value :: false-or(<byte-string>), name :: <byte-string>)
            => (new-value :: false-or(<byte-string>))
    Synopsis: Changes the value of the environment variable specified
              by name to new-value.  If new-value is #f, the
              environment variable will be undefined (or set to "" if
              the system doesn't permit undefining).

  application-name                      [Function]
    Signature: () => (name :: <byte-string>)
    Synopsis: Returns the name of the running application.  This is
              normally the command name as typed on the command line
              and may be a non-absolute pathname.  (E.g., "foo\bar.exe")

  application-filename                  [Function]
    Signature: () => (filename :: false-or(<byte-string>))
    Synopsis: Returns the full filename (i.e., the absolute pathname)
              of the running application or #f if the filename cannot
              be determined.
    Notes: This function is only implemented in the Windows version of
           this library.  All other implementations return #f.

  application-arguments                 [Function]
    Signature: () => (arguments :: <simple-object-vector>)
    Synopsis: Returns the arguments passed to the running application
              as a vector of <byte-string>s.

  exit-application                      [Function]
    Signature: (status :: <integer>) => ()
    Synopsis: Terminates execution of the running application,
              returning the value of status to whatever launched the
              application (e.g., MS-DOS window, Win95/NT shell, etc.)

  login-name                            [Function]
    Signature: () => (name :: false-or(<string>))
    Synopsis: Returns the name of the user logged into this system
              or #f if the name is unavailable.

  login-group                            [Function]
    Signature: () => (group :: false-or(<string>))
    Synopsis: Returns the group (e.g., NT domain, Windows Workgroup)
              of which the user logged into this system is a member
              or #f if the group is unavailable.
    Notes: Currently, this function always returns #f under Windows 95/98.

  owner-name                            [Function]
    Signature: () => (name :: false-or(<string>))
    Synopsis: Returns the name of the user who owns this machine
              (i.e., the name entered when the machine was registered)
              or #f if the name is unavailable.

  owner-organization                    [Function]
    Signature: () => (organization :: false-or(<string>))
    Synopsis: Returns the name of the organization to which the user
              who owns this machine belongs or #f if the name is unavailable.

  run-application                       [Function]
    Signature: (command :: <string> #key under-shell? = #f, 
                                         inherit-console? = #t)
    Synopsis: Launches an application using the name and arguments
              specified in command.  (Using this function is
              equivalent to typing the command in a MS-DOS window.) 
	      If the under-shell?: keyword is #t, an MS-DOS shell is
              created to run the application; otherwise, the
              application is run directly.  If the inherit-console?:
              keyword is #t, the new application uses the same console
              window as the current application; otherwise, the new
              application is created with a separate console window.
              The exit status returned by that application is returned
              as the value of this function.
    Notes: Settings other than the defaults for the under-shell?: and
           inherit-console?: keywords are only implemented by the
           Windows version of this library.

  tokenize-command-string               [Function]
    Signature: (line :: <byte-string>)
            => (command :: <byte-string>, #rest arguments :: <byte-string>)
    Synopsis: Parses the command specified in line into a command name
              and arguments.  The rules used to tokenize the string
              are given in Microsoft's C/C++ reference in the section
              "Parsing C Command-Line Arugments".
