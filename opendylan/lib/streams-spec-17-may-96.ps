%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            true def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 16 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Courier FMFONTDEFINE
3 0 /Times-Italic FMFONTDEFINE
4 0 /Courier-Oblique FMFONTDEFINE
5 0 /Helvetica-BoldOblique FMFONTDEFINE
6 0 /Helvetica-Bold FMFONTDEFINE
7 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(1) 536 42.62 T
0 24 Q
(Dylan Streams Library Proposal) 151.02 704 T
1 12 Q
(Scott McKay) 186.16 662.29 T
(, Mar) 252.49 662.29 T
(c F) 280.93 662.29 T
(er) 296.29 662.29 T
(guson & Eliot Miranda) 306.82 662.29 T
(Harlequin, Inc.) 266.83 644.59 T
1 16 Q
(1.  Intr) 72 600.22 T
(oduction) 119.26 600.22 T
0 12 Q
(The Dylan Streams Library described by this paper has se) 72 571.18 T
(v) 349.31 571.18 T
(eral major goals:) 355.13 571.18 T
1 F
(\245) 85.5 549.47 T
0 F
-0.49 (To provide a generic, easy-to-use interface for streaming over sequences and files. The same) 99 549.47 P
(interface for consuming or producing is available irrespective of the type of stream, or the) 99 535.47 T
(types of the elements being streamed over.) 99 521.47 T
1 F
(\245) 85.5 499.77 T
0 F
(To provide an efficient system, especially for the common case of file I/O.) 99 499.77 T
1 F
(\245) 85.5 478.06 T
0 F
(To provide access to an underlying buffer management protocol.) 99 478.06 T
1 F
(\245) 85.5 456.35 T
0 F
(To provide an extensible framework. Other functionality that sits behind a stream interface) 99 456.35 T
(should be easy to integrate to this stream library.) 99 442.35 T
(The proposal presents the design of a streams library that meets these goals in the conte) 72 414.65 T
(xt of) 492.08 414.65 T
(Dylan\325) 72 400.65 T
(s internal sequences and \050b) 104.66 400.65 T
(uf) 233.72 400.65 T
(fered\051 access to disk \336les. It does not address a number of) 243.42 400.65 T
(related issues, including:) 72 386.65 T
1 F
(\245) 85.5 364.94 T
0 F
(A standard object-printing package such as Smalltalk\325s) 99 364.94 T
2 F
(printOn:) 366.62 364.94 T
0 F
( or Lisp\325s) 424.22 364.94 T
2 F
(print-) 473.22 364.94 T
(object) 99 350.94 T
0 F
(, or a formatted printing facility such as Lisp\325s) 142.2 350.94 T
2 F
(format) 368.17 350.94 T
0 F
(. It is expected that these) 411.37 350.94 T
(facilities will be provided by additional libraries.) 99 336.94 T
1 F
(\245) 85.5 315.23 T
0 F
(General object dumping and loading.) 99 315.23 T
1 F
(\245) 85.5 293.53 T
0 F
(A comprehensive range of I/O facilities for using memory-mapped files, network connec-) 99 293.53 T
(tions, etc., although it is expected that such facilities can be easily added to the Streams) 99 279.53 T
(Library by virtue of its extensible framework.) 99 265.53 T
1 F
(\245) 85.5 243.82 T
0 F
(An interface for naming files. This is addressed by the Dylan Locators Library.) 99 243.82 T
1 F
(\245) 85.5 222.12 T
0 F
(An interface to operating system functionality renaming or deleting files. This is addressed) 99 222.12 T
(by the Dylan File System Library.) 99 208.12 T
(The macros, classes, and functions de\336ned in this document are e) 72 180.41 T
(xported from the) 385.76 180.41 T
1 F
(streams) 469.42 180.41 T
0 F
( mod-) 509.4 180.41 T
(ule of the) 72 166.41 T
1 F
(streams) 120.32 166.41 T
0 F
( library under the names used here.) 160.31 166.41 T
1 16 Q
(2.  Concepts) 72 124.04 T
0 12 Q
(A) 72 95 T
3 F
(str) 83.66 95 T
(eam) 95.89 95 T
0 F
( pro) 115.88 95 T
(vides sequential access to an aggre) 134.7 95 T
(g) 301.48 95 T
(ate of data, such as a Dylan sequence or a disk) 307.42 95 T
(\336le, in a read/write paradigm. An input \050or readable\051 stream consumes elements; an output \050or) 72 81 T
(writable\051 stream produces elements; and an input-output stream does both.) 72 67 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(2) 536 42.62 T
3 12 Q
-0.46 (Input str) 72 712 P
-0.46 (eams) 112.1 712 P
0 F
-0.46 ( return successi) 136.76 712 P
-0.46 (v) 209.52 712 P
-0.46 (e data elements from a source via the function) 215.34 712 P
1 F
-0.46 (r) 435.5 712 P
-0.46 (ead-element) 440.61 712 P
0 F
-0.46 (, which) 502.59 712 P
(hides the details of inde) 72 698 T
(xing, b) 185.81 698 T
(uf) 218.9 698 T
(fering, and so on. F) 228.6 698 T
(or e) 321.74 698 T
(xample, the e) 339.89 698 T
(xpression) 404.03 698 T
2 10 Q
(let stream = make\050<string-stream>,) 144 677.69 T
4 F
(ex. 1) 504 677.69 T
2 F
(                  contents: "hello world"\051) 144 664.05 T
(;) 396 664.05 T
0 12 Q
(binds) 72 637.07 T
1 F
(str) 101 637.07 T
(eam) 114.78 637.07 T
0 F
( to an input stream o) 136.1 637.07 T
(v) 234.25 637.07 T
(er the string) 240.07 637.07 T
2 F
("hello world") 300.4 637.07 T
0 F
(. The \336rst in) 394 637.07 T
(v) 452.18 637.07 T
(ocation of) 457.94 637.07 T
1 F
(r) 509.27 637.07 T
(ead-) 514.38 637.07 T
(element) 72 623.07 T
0 F
( returns the character) 111.98 623.07 T
2 10 Q
(\325h\325) 215.94 623.07 T
0 12 Q
(, the ne) 233.94 623.07 T
(xt) 268.75 623.07 T
2 10 Q
(\325e\325) 281.09 623.07 T
0 12 Q
(, and so on. Once a stream has been used to con-) 299.09 623.07 T
(sume all the elements of the data, the stream is said to be at its end. This condition can be tested) 72 609.07 T
-0.41 (via the function) 72 595.07 P
1 F
-0.41 (str) 149.09 595.07 P
-0.41 (eam-at-end?) 162.87 595.07 P
0 F
-0.41 (. The follo) 226.85 595.07 P
-0.41 (wing code fragment applies) 276.06 595.07 P
1 F
-0.41 (function) 410.39 595.07 P
0 F
-0.41 ( to all elements of) 453.06 595.07 P
(the sequence:) 72 581.07 T
2 10 Q
(let stream = make\050<sequence-stream>, contents: seq\051;) 144 560.76 T
4 F
(ex. 2) 504 560.76 T
2 F
(while \050~stream-at-end?\050stream\051\051) 144 548.76 T
(  function\050read-element\050stream\051\051;) 144 536.76 T
0 12 Q
-0.04 (After all the elements of a stream ha) 72 509.79 P
-0.04 (v) 245.75 509.79 P
-0.04 (e been read, an) 251.57 509.79 P
-0.04 (y further in) 323.23 509.79 P
-0.04 (v) 376.66 509.79 P
-0.04 (ocations of) 382.42 509.79 P
1 F
-0.04 (r) 438.32 509.79 P
-0.04 (ead-element) 443.44 509.79 P
0 F
-0.04 ( signal) 505.42 509.79 P
(an) 72 495.79 T
1 F
(<end-of-str) 86.33 495.79 T
(eam-err) 143.6 495.79 T
(or>) 184.69 495.79 T
0 F
( condition. An alternati) 202.86 495.79 T
(v) 313.88 495.79 T
(e end-of-stream beha) 319.7 495.79 T
(vior is to return a distin-) 420.76 495.79 T
-0.08 (guished end-of-stream v) 72 481.79 P
-0.08 (alue, which can be an) 188.18 481.79 P
-0.08 (y object. The end-of-stream v) 291.32 481.79 P
-0.08 (alue can be gi) 432.99 481.79 P
-0.08 (v) 498.77 481.79 P
-0.08 (en as a) 504.59 481.79 P
-0.17 (k) 72 467.79 P
-0.17 (e) 77.88 467.79 P
-0.17 (yw) 83.03 467.79 P
-0.17 (ord ar) 97.57 467.79 P
-0.17 (gument to the v) 125.51 467.79 P
-0.17 (arious read functions. Supplying an end-of-stream v) 199.71 467.79 P
-0.17 (alue to a read func-) 448.04 467.79 P
(tion may be more ef) 72 453.79 T
(\336cient than asking whether a stream is at its end on e) 168.35 453.79 T
(v) 421.68 453.79 T
(ery iteration of a loop.) 427.5 453.79 T
3 F
-0.33 (Output str) 72 426.14 P
-0.33 (eams) 120.23 426.14 P
0 F
-0.33 ( deli) 144.89 426.14 P
-0.33 (v) 165.26 426.14 P
-0.33 (er data elements to a destination via the) 171.08 426.14 P
1 F
-0.33 (write-element) 361.05 426.14 P
0 F
-0.33 ( function, which hides) 431.68 426.14 P
-0.12 (the details of inde) 72 412.14 P
-0.12 (xing, gro) 157.12 412.14 P
-0.12 (wing an underlying sequence, b) 200.04 412.14 P
-0.12 (uf) 351.64 412.14 P
-0.12 (fering for a \336le, and so on. F) 361.33 412.14 P
-0.12 (or e) 497.31 412.14 P
-0.12 (xam-) 515.34 412.14 P
(ple, the follo) 72 398.14 T
(wing forms bind) 132.7 398.14 T
1 F
(str) 215.03 398.14 T
(eam) 228.8 398.14 T
0 F
( to an output stream o) 250.13 398.14 T
(v) 354.28 398.14 T
(er an empty string and create the) 360.1 398.14 T
(string) 72 384.14 T
2 10 Q
("I see!") 102.34 384.14 T
0 12 Q
(, using the function) 150.34 384.14 T
1 F
(str) 246 384.14 T
(eam-contents) 259.78 384.14 T
0 F
( to access all of the stream\325) 327.76 384.14 T
(s elements.) 457.73 384.14 T
2 10 Q
(let stream = make\050<byte-string-stream>,) 144 363.83 T
4 F
(ex. 3) 504 363.83 T
2 F
(direction: #"output"\051;) 250 350.19 T
(write-element\050stream,\325I\325\051) 144 338.19 T
(;) 294 338.19 T
(write-element\050stream,\325 \325\051;) 144 326.19 T
(write\050stream,"See"\051;) 144 314.19 T
(write-element\050stream,\325!\325\051;) 144 302.19 T
(stream-contents\050stream\051;) 144 290.19 T
0 12 Q
(Calling) 72 263.22 T
1 F
(write) 110.34 263.22 T
0 F
( on a sequence is equi) 136.99 263.22 T
(v) 241.67 263.22 T
(alent to calling) 247.37 263.22 T
1 F
(write-element) 321.7 263.22 T
0 F
( on all the elements of the) 392.33 263.22 T
(sequence. Ho) 72 249.22 T
(we) 136.34 249.22 T
(v) 150.04 249.22 T
(er) 155.86 249.22 T
(,) 164.7 249.22 T
1 F
(write) 170.7 249.22 T
0 F
( may be implemented more ef) 197.35 249.22 T
(\336ciently) 340.69 249.22 T
(, especially for b) 379.25 249.22 T
(uf) 458.99 249.22 T
(fered streams.) 468.68 249.22 T
(Some streams are) 72 221.57 T
1 F
(<positionable-str) 159.65 221.57 T
(eam>) 246.28 221.57 T
0 F
(s \050that is, you can) 274.44 221.57 T
3 F
(r) 361.76 221.57 T
(andomly access) 366.25 221.57 T
0 F
( them\051. The follo) 441.9 221.57 T
(w-) 522.92 221.57 T
(ing e) 72 207.57 T
(xample returns the character) 95.48 207.57 T
2 F
(\324w\325) 234.77 207.57 T
0 F
(:) 256.37 207.57 T
2 10 Q
(let stream = make\050<string-stream>,) 144 187.26 T
4 F
(ex. 4) 504 187.26 T
2 F
(                  contents: "hello world"\051;) 144 173.62 T
(stream-position\050stream\051 := 6;) 144 161.62 T
(read-element\050stream\051;) 144 149.62 T
0 12 Q
(The follo) 72 122.64 T
(wing e) 116.03 122.64 T
(xample returns a string, b) 148.18 122.64 T
(ut the contents of the \336rst ten characters are unde\336ned:) 270.25 122.64 T
2 10 Q
(let stream = make\050<string-stream>, direction: #"output"\051;) 144 102.33 T
4 F
(ex. 5) 504 102.33 T
2 F
(stream-position\050stream\051 := 10;) 144 90.33 T
(write\050stream,"whoa!"\051;) 144 78.33 T
(stream-contents\050stream\051;) 144 66.33 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(3) 536 42.62 T
0 12 Q
-0.12 (Y) 72 712 P
-0.12 (ou can request a sequence containing all of the elements of a) 79.34 712 P
1 F
-0.12 (<positionable-str) 371.89 712 P
-0.12 (eam>) 458.52 712 P
0 F
-0.12 ( by calling) 486.68 712 P
1 F
-0.33 (str) 72 698 P
-0.33 (eam-contents) 85.78 698 P
0 F
-0.33 (. The resulting sequence will ne) 153.76 698 P
-0.33 (v) 304.43 698 P
-0.33 (er share structure with an) 310.25 698 P
-0.33 (y underlying sequence) 430.03 698 P
(that may be used in the future by the stream \050such as a string for an output) 72 684 T
1 F
(<string-str) 430.94 684 T
(eam>) 485.56 684 T
0 F
(\051.) 513.72 684 T
-0.17 (When making an input) 72 656.64 P
1 F
-0.17 (<string-str) 183.98 656.64 P
-0.17 (eam>) 238.6 656.64 P
0 F
-0.17 (, you can cause the stream to produce elements from an) 266.76 656.64 P
-0.17 (y) 531.17 656.64 P
(subsequence of the supplied string, for e) 72 642.64 T
(xample:) 265.45 642.64 T
2 10 Q
(read-to-end\050make\050<string-stream>,) 144 622.62 T
4 F
(ex. 6) 504 622.62 T
2 F
(                 contents: "hello there, world",) 144 609.26 T
(                 start: 6, end: 11\051\051;) 144 595.91 T
0 12 Q
-0.17 (This e) 72 569.21 P
-0.17 (xample e) 101.31 569.21 P
-0.17 (v) 144.49 569.21 P
-0.17 (aluates to) 150.19 569.21 P
2 10 Q
-0.35 ("there") 198.51 569.21 P
0 12 Q
-0.17 (. The interv) 240.51 569.21 P
-0.17 (al [) 295.51 569.21 P
3 F
-0.17 (start) 311 569.21 P
0 F
-0.17 (,) 333.01 569.21 P
3 F
-0.17 (end) 338.83 569.21 P
0 F
-0.17 (\051 includes the inde) 356.16 569.21 P
-0.17 (x) 443.78 569.21 P
3 F
-0.17 (start) 452.61 569.21 P
0 F
-0.17 ( b) 474.62 569.21 P
-0.17 (ut e) 483.2 569.21 P
-0.17 (xcludes) 500.51 569.21 P
(the inde) 72 555.21 T
(x) 110.15 555.21 T
3 F
(end) 119.15 555.21 T
0 F
(. This is consistent with standard Dylan functions o) 136.48 555.21 T
(v) 382.62 555.21 T
(er sequences, such as) 388.44 555.21 T
1 F
(copy-) 493.4 555.21 T
(sequence) 72 541.21 T
0 F
(.) 118 541.21 T
1 F
(Read-to-end) 124 541.21 T
0 F
( is one of a number of con) 187.32 541.21 T
(v) 312.48 541.21 T
(enient utility functions for accessing streams) 318.3 541.21 T
(and returns all the elements up to the end of the stream from the stream\325) 72 527.21 T
(s current position.) 417.28 527.21 T
1 14 Q
(2.1  Str) 72 492.52 T
(eams, Gr) 114.91 492.52 T
(o) 169.09 492.52 T
(wing Sequences, and Object Identity) 175.95 492.52 T
0 12 Q
(The initial empty string in e) 72 464.5 T
(xamples 3 and 5 abo) 205.49 464.5 T
(v) 303.96 464.5 T
(e has to replaced in order to accommodate ne) 309.78 464.5 T
(w) 526.75 464.5 T
(elements. If you w) 72 450.5 T
(ant to supply a sequence to an output) 161.2 450.5 T
1 F
(<sequence-str) 341.84 450.5 T
(eam>) 412.45 450.5 T
0 F
(, and you w) 440.62 450.5 T
(ant alias) 496.49 450.5 T
(references to the sequence to be guranteed access to elements written via the stream, then you) 72 436.5 T
(must supply a) 72 422.5 T
1 F
(<str) 141.67 422.5 T
(etch) 162.29 422.5 T
(y-v) 183.43 422.5 T
(ector>) 199.31 422.5 T
0 F
(.) 232.13 422.5 T
(A stream o) 72 395.14 T
(v) 124.48 395.14 T
(er a stretch) 130.3 395.14 T
(y v) 182.88 395.14 T
(ector will use the same stretch) 197.7 395.14 T
(y v) 342.61 395.14 T
(ector throughout the stream's e) 357.43 395.14 T
(xist-) 504.72 395.14 T
(ence, for e) 72 381.14 T
(xample:) 122.12 381.14 T
2 10 Q
(let sv = make\050<stretchy-vector>\051;) 144 361.12 T
4 F
(ex. 7a) 504 361.12 T
2 F
(let stream = make\050<sequence-stream>,) 144 349.12 T
(                  contents: sv, direction: #"output"\051;) 144 335.76 T
(write\050stream,#\0501, 2, 3, 4, 5, 6, 7, 8, 9\051\051;) 144 323.76 T
(write\050stream,"ABCDEF"\051;) 144 311.76 T
(values\050) 144 299.76 T
(sv, stream-contents\050stream\051\051;) 186 299.76 T
0 12 Q
-0.18 (This e) 72 273.07 P
-0.18 (xample returns tw) 101.31 273.07 P
-0.18 (o v) 187.48 273.07 P
-0.18 (alues; each v) 202 273.07 P
-0.18 (alue is the same stretch) 263.33 273.07 P
-0.18 (y v) 373.87 273.07 P
-0.18 (ector of) 388.51 273.07 P
2 10 Q
-0.36 (\0501, 2, 3, 4, 5, 6,) 428.14 273.07 P
(7, 8, 9, \325A\325, \325B\325, \325C\325, \325D\325, \325E\325, \325F\325\051) 72 259.07 T
0 12 Q
(. Ho) 300 259.07 T
(we) 320.36 259.07 T
(v) 334.06 259.07 T
(er) 339.88 259.07 T
(, consider the follo) 348.72 259.07 T
(wing:) 438.41 259.07 T
2 10 Q
(let v = make\050<vector>, size: 5\051;) 144 239.05 T
4 F
(ex. 7b) 504 239.05 T
2 F
(let stream = make\050<sequence-stream>,) 144 227.05 T
(                  contents: v, direction: #"output"\051;) 144 213.69 T
(write\050stream,#\0501, 2, 3, 4, 5, 6, 7, 8, 9\051\051;) 144 201.69 T
(write\050stream,"ABCDEF"\051;) 144 189.69 T
(values\050v, stream-contents\050stream\051\051;) 144 177.69 T
0 12 Q
(This e) 72 151 T
(xample returns as its \336rst v) 101.48 151 T
(alue the original v) 230.84 151 T
(ector of 5 elements, b) 317.65 151 T
(ut the second v) 421.06 151 T
(alue is a) 493.08 151 T
(ne) 72 137 T
(w v) 83.03 137 T
(ector containing) 100.51 137 T
2 10 Q
(\0501, 2, 3, 4, 5, 6, 7, 8, 9, \325A\325, \325B\325, \325C\325, \325D\325, \325E\325, \325F\325\051) 181.16 137 T
0 12 Q
(.) 523.16 137 T
-0.28 (This is because the output stream in e) 72 123 P
-0.28 (xample 7b needs at least a v) 250.21 123 P
-0.28 (ector of size 15 to accommodate) 383.02 123 P
-0.35 (the elements written to the stream, b) 72 109 P
-0.35 (ut the gi) 243.95 109 P
-0.35 (v) 282.28 109 P
-0.35 (en v) 288.1 109 P
-0.35 (ector can only hold 5 elements. Since the stream) 307.89 109 P
(cannot change) 72 95 T
1 F
(v) 143.98 95 T
0 F
(\325) 149.98 95 T
(s size, it must allocate a ne) 153.31 95 T
(w v) 281.33 95 T
(ector each time it gro) 298.81 95 T
(ws. Output streams to) 400.49 95 T
(sequences gro) 72 81 T
(w the sequences in suf) 139.34 81 T
(\336ciently lar) 247.02 81 T
(ge increments so as to reduce the frequenc) 301.8 81 T
(y of) 505.22 81 T
(e) 72 67 T
(xpensi) 77.15 67 T
(v) 108.18 67 T
(e gro) 114 67 T
(w operations.) 138.02 67 T
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(4) 536 42.62 T
1 16 Q
(3.  Str) 72 709.33 T
(eam Classes) 113.04 709.33 T
0 12 Q
(The e) 72 682 T
(xported streams class heterarch) 98.81 682 T
(y is as follo) 249.04 682 T
(ws:) 304.4 682 T
(Except for the classes) 72 483 T
1 F
(<str) 179.3 483 T
(eam>) 199.92 483 T
0 F
(,) 228.08 483 T
1 F
(<b) 231.08 483 T
(uffer) 244.36 483 T
(ed-str) 269.46 483 T
(eam>) 299.23 483 T
0 F
(, and) 327.4 483 T
1 F
(<positionable-str) 353.72 483 T
(eam>) 440.35 483 T
0 F
(, these are) 468.52 483 T
(instantiable classes.) 72 469 T
1 F
(<stream>) 72 437 T
0 F
([Open abstract class]) 439.37 437 T
(This class is a subclass of) 90 411 T
1 F
(<object>) 215.99 411 T
0 F
(. It is a superclass of all stream classes.) 260.99 411 T
1 F
(<buffered-stream>) 72 379 T
0 F
([Open abstract class]) 439.37 379 T
(This class is a subclass of) 90 353 T
1 F
(<str) 215.99 353 T
(eam>) 236.6 353 T
0 F
(. Streams of this class support the Stream Extension Pro-) 264.77 353 T
(tocol and Buf) 90 339 T
(fer Access Protocol. This class supports the) 155.03 339 T
3 F
(b) 367 339 T
(uf) 372.76 339 T
(fer) 381.88 339 T
(-size:) 394.97 339 T
0 F
( init-k) 420.96 339 T
(e) 449.84 339 T
(yw) 454.99 339 T
(ord, which) 469.54 339 T
(suggests the size of b) 90 325 T
(uf) 191.75 325 T
(fer the stream should use; users must check the size of the b) 201.44 325 T
(uf) 488.48 325 T
(fer) 498.18 325 T
(because the stream might not use the size suggested.) 90 311 T
1 F
(<positionable-stream>) 72 279 T
0 F
([Open abstract class]) 439.37 279 T
-0.27 (This class is a ubclass of) 90 253 P
1 F
-0.27 (<str) 209.68 253 P
-0.27 (eam>) 230.3 253 P
0 F
-0.27 (. Streams of this class support the Positionable Stream Pro-) 258.46 253 P
(tocol.) 90 239 T
1 F
(<file-stream>) 72 207 T
0 F
([Open instantiable class]) 421.36 207 T
-0.26 (This class is a subclass of) 90 181 P
1 F
-0.26 (<b) 214.44 181 P
-0.26 (uffer) 227.71 181 P
-0.26 (-str) 252.59 181 P
-0.26 (eam>) 270.36 181 P
0 F
-0.26 ( and) 298.52 181 P
1 F
-0.26 (<positionable-str) 321.33 181 P
-0.26 (eam>) 407.96 181 P
0 F
-0.26 (. When users instanti-) 436.12 181 P
(ate this class, the) 90 167 T
(y get an implementation-dependent indirect instance of) 171.14 167 T
1 F
(<\336le-str) 438.77 167 T
(eam>) 478.72 167 T
0 F
(. Mak-) 506.88 167 T
(ing one of these streams opens the \336le. This class supports se) 90 153 T
(v) 383 153 T
(eral init-k) 388.82 153 T
(e) 435.7 153 T
(yw) 440.84 153 T
(ords,) 455.39 153 T
3 F
(locator:) 482.05 153 T
0 F
(,) 520.72 153 T
3 F
(dir) 90 139 T
(ection:) 103.56 139 T
0 F
(,) 136.88 139 T
3 F
(if-e) 142.88 139 T
(xists:) 158.64 139 T
0 F
(,) 183.97 139 T
3 F
(if-does-not-e) 189.97 139 T
(xist:) 251.05 139 T
0 F
(,) 271.72 139 T
3 F
(element-type:) 277.72 139 T
0 F
(, and) 343.02 139 T
3 F
(encoding:) 369.35 139 T
0 F
(.) 417.34 139 T
72 63 540 720 C
89.8 505 522.2 678 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
391.55 583.19 391.55 567.19 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
5 10 Q
(<stream>) 260.8 661.71 T
6 F
(<sequence-stream>) 339.64 590.52 T
(<file-stream>) 144.55 590.19 T
(<string-stream>) 349.35 555.33 T
392.35 549.33 319.55 529.19 2 L
N
(<byte-string-stream>) 268.55 518.33 T
(<unicode-string-stream>) 395.55 518.19 T
391.55 549.19 454.55 530.19 2 L
2 Z
N
5 F
(<buffered-stream>) 179.8 625.71 T
(<positionable-stream>) 296.8 625.71 T
280 656 217 638 2 L
N
281 656 359 638 2 L
N
388 602 360 622 2 L
N
218 621 176 601 2 L
N
358 623 177 602 2 L
N
72 63 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(5) 536 42.62 T
1 12 Q
(<sequence-stream>) 72 712 T
0 F
([Open instantiable class]) 421.36 712 T
(This class is a subclass of) 90 685.94 T
1 F
(<positionable-str) 215.99 685.94 T
(eam>) 302.62 685.94 T
0 F
(. There is a generic sequence implementa-) 330.78 685.94 T
(tion, and there are some specialized implementations for strings. This class supports se) 90 671.94 T
(v) 506.32 671.94 T
(eral) 512.14 671.94 T
(init-k) 90 657.94 T
(e) 115.88 657.94 T
(yw) 121.03 657.94 T
(ords,) 135.58 657.94 T
3 F
(contents:) 162.24 657.94 T
0 F
(,) 206.23 657.94 T
3 F
(d) 212.23 657.94 T
(ir) 218.23 657.94 T
(ection:) 225.79 657.94 T
0 F
(,) 259.12 657.94 T
3 F
(start:) 265.12 657.94 T
0 F
(,) 291.12 657.94 T
(and) 297.12 657.94 T
3 F
(e) 317.45 657.94 T
(nd:) 322.78 657.94 T
0 F
(.) 338.77 657.94 T
1 F
(<string-stream>) 72 625.88 T
0 F
([Open instantiable class]) 421.36 625.88 T
-0.19 (This class is a subclass of) 90 599.81 P
1 F
-0.19 (<sequence-str) 214.85 599.81 P
-0.19 (eam>) 285.46 599.81 P
0 F
-0.19 (. This class supports the same init-k) 313.62 599.81 P
-0.19 (e) 484.03 599.81 P
-0.19 (yw) 489.17 599.81 P
-0.19 (ords as) 503.72 599.81 P
(does) 90 585.81 T
1 F
(<sequence-str) 115 585.81 T
(eam>) 185.6 585.81 T
0 F
(.) 213.77 585.81 T
1 F
(<byte-string-stream>) 72 553.75 T
0 F
([Sealed instantiable class]) 415.36 553.75 T
(This class is a subclass of) 90 527.69 T
1 F
(<string-str) 215.99 527.69 T
(eam>) 270.6 527.69 T
0 F
(. This class supports the same init-k) 298.76 527.69 T
(e) 470.3 527.69 T
(yw) 475.45 527.69 T
(ords as) 490 527.69 T
(does) 90 513.69 T
1 F
(<sequence-str) 115 513.69 T
(eam>) 185.6 513.69 T
0 F
(.) 213.77 513.69 T
1 F
(<unicode-string-stream>) 72 481.62 T
0 F
([Sealed instantiable class]) 415.36 481.62 T
(This class is a subclass of) 90 455.56 T
1 F
(<string-str) 215.99 455.56 T
(eam>) 270.6 455.56 T
0 F
(. This class supports the same init-k) 298.76 455.56 T
(e) 470.3 455.56 T
(yw) 475.45 455.56 T
(ords as) 490 455.56 T
(does) 90 441.56 T
1 F
(<sequence-str) 115 441.56 T
(eam>) 185.6 441.56 T
0 F
(.) 213.77 441.56 T
1 14 Q
(3.1  Cr) 72 408.17 T
(eating Str) 112.57 408.17 T
(eams) 171.04 408.17 T
0 12 Q
(The follo) 72 381.44 T
(wing are the basic functions used to create streams.) 116.03 381.44 T
1 F
(make <file-stream>) 72 349.38 T
0 F
( #key) 171.98 349.38 T
3 F
( locator direction if-exists if-does-not-exist element-type encoding) 198.31 349.38 T
(buffer-size) 72 335.38 T
7 F
(\336) 125.66 335.38 T
3 F
(<file-stream>) 140.51 335.38 T
0 F
([G. F. method]) 468.67 335.38 T
-0.07 (Returns a ne) 90 309.31 P
-0.07 (w instance of a concrete subclass of) 149.55 309.31 P
1 F
-0.07 (<\336le-str) 324.02 309.31 P
-0.07 (eam>) 363.96 309.31 P
0 F
-0.07 ( that streams o) 392.13 309.31 P
-0.07 (v) 461.4 309.31 P
-0.07 (er the contents) 467.22 309.31 P
-0.06 (of \050or produces the contents of\051 the \336le referenced by) 90 295.31 P
3 F
-0.06 (locator) 348 295.31 P
0 F
-0.06 (. This method calls) 382 295.31 P
1 F
-0.06 (type-f) 476.1 295.31 P
-0.06 (or) 505.79 295.31 P
-0.06 (-\336le-) 516.67 295.31 P
(str) 90 281.31 T
(eam) 103.78 281.31 T
0 F
( to determine which concrete class to instantiate. If users create a ne) 125.1 281.31 T
(w subclass of) 451.04 281.31 T
1 F
(<\336le-str) 90 267.31 T
(eam>) 129.95 267.31 T
0 F
(, the) 158.11 267.31 T
(y can add a method to) 178.6 267.31 T
1 F
(type-f) 287.24 267.31 T
(or) 316.93 267.31 T
(-\336le-str) 327.82 267.31 T
(eam) 364.92 267.31 T
0 F
( in order to allo) 386.24 267.31 T
(w other users to) 459.94 267.31 T
(create instances of the ne) 90 253.31 T
(w subclass.) 210.32 253.31 T
3 F
(Locator) 90 227.25 T
0 F
( is a string that names a \336le, or) 128 227.25 T
(if the Locators library is being used) 277.99 227.25 T
(,) 448.63 227.25 T
(it can be a) 454.63 227.25 T
1 F
(<loca-) 506.62 227.25 T
(tor>) 90 213.25 T
0 F
( \050or a string that can be coerced to a) 112.16 213.25 T
1 F
(<locator>\051) 286.78 213.25 T
0 F
(.) 340.44 213.25 T
3 F
-0.47 (Dir) 90 187.19 P
-0.47 (ection) 106.22 187.19 P
0 F
-0.47 ( must be one of) 135.55 187.19 P
1 F
-0.47 (#"input") 210.2 187.19 P
0 F
-0.47 (,) 256.87 187.19 P
1 F
-0.47 (#"output") 262.4 187.19 P
0 F
-0.47 (, or) 315.73 187.19 P
1 F
-0.47 (#"input-output") 333.79 187.19 P
0 F
-0.47 (; the def) 418.46 187.19 P
-0.47 (ault is) 456.73 187.19 P
1 F
-0.47 (#"input") 487.8 187.19 P
0 F
-0.47 (.) 534.47 187.19 P
3 F
(If-e) 90 161.12 T
(xists) 106.42 161.12 T
0 F
(and) 130.75 161.12 T
3 F
( if-does-not-e) 148.08 161.12 T
(xist) 212.16 161.12 T
0 F
( are described belo) 228.83 161.12 T
(w) 318.83 161.12 T
(.) 326.71 161.12 T
3 F
(Element-type) 90 135.06 T
0 F
( must be a) 153.31 135.06 T
1 F
(<type>) 205.31 135.06 T
0 F
( or) 240.98 135.06 T
2 F
(#f) 256.98 135.06 T
0 F
(, and is described in a later section. It def) 271.38 135.06 T
(aults to some-) 468.22 135.06 T
(thing useful, potentially based on the properties of the \336le.) 90 121.06 T
1 F
(<byte-character>) 373.31 121.06 T
0 F
( and) 462.29 121.06 T
1 F
(<unicode-) 485.62 121.06 T
(character>) 90 107.06 T
0 F
( are lik) 146.15 107.06 T
(ely choices.) 179.35 107.06 T
3 F
(Encoding) 90 81 T
0 F
( must be a) 136 81 T
1 F
(<symbol>) 187.99 81 T
0 F
( or) 238.34 81 T
2 F
(#f) 254.34 81 T
0 F
(, and is described in a later section. Its def) 268.74 81 T
(ault is depen-) 470.24 81 T
(dent on the v) 90 67 T
(alue of) 152.03 67 T
3 F
(element-type) 188.02 67 T
0 F
( and on other platform-dependent conditions.) 249.32 67 T
52 653.94 54 665.94 R
V
52 509.69 54 521.69 R
V
52 437.56 54 449.56 R
V
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(6) 536 42.62 T
3 12 Q
(Buf) 90 712 T
(fer) 106.45 712 T
(-size) 119.54 712 T
0 F
( is an inte) 141.54 712 T
(ger that suggests the size of the b) 187.69 712 T
(uf) 346.43 712 T
(fer to use for the \336le; it def) 356.12 712 T
(aults to an) 484.98 712 T
(implementation-dependent v) 90 698 T
(alue. Users must check the b) 227.35 698 T
(uf) 364.42 698 T
(fer\325) 374.11 698 T
(s size because specifying this) 390.77 698 T
(init-k) 90 684 T
(e) 115.88 684 T
(yw) 121.03 684 T
(ord is no guarantee that the stream\325) 135.58 684 T
(s b) 304.21 684 T
(uf) 317.64 684 T
(fer will ha) 327.34 684 T
(v) 376.42 684 T
(e the requested size.) 382.24 684 T
1 F
(type-for-file-stream) 72 649.71 T
3 F
(locator element-type encoding #rest all-keys) 175.62 649.71 T
0 F
([Open generic function]) 424.7 649.71 T
7 F
(\336) 108 633.41 T
3 F
(file-stream-type) 122.84 633.41 T
0 F
(Returns a type that) 90 605.12 T
1 F
(mak) 183.32 605.12 T
(e) 205.87 605.12 T
0 F
( of) 211.2 605.12 T
1 F
(<\336le-str) 227.2 605.12 T
(eam>) 267.14 605.12 T
0 F
( defers to when making a \336le stream. See) 295.31 605.12 T
1 F
(mak) 495.94 605.12 T
(e) 518.48 605.12 T
0 F
( of) 523.81 605.12 T
1 F
(<\336le-str) 90 591.12 T
(eam>) 129.95 591.12 T
0 F
( for type restrictions and a description of the ar) 158.11 591.12 T
(guments.) 382.85 591.12 T
1 F
(make <sequence-stream>) 72 556.82 T
0 F
( #key) 201.98 556.82 T
3 F
( contents) 228.31 556.82 T
(d) 274.31 556.82 T
(irection start end) 280.31 556.82 T
0 F
([G. F. method]) 468.67 556.82 T
7 F
(\336) 108 540.53 T
3 F
(<sequence-stream>) 122.84 540.53 T
0 F
(Returns a general instance of) 90 512.24 T
1 F
(<sequence-str) 232.3 512.24 T
(eam>.) 302.9 512.24 T
0 F
(This method calls) 337.07 512.24 T
1 F
(type-f) 425.4 512.24 T
(or) 455.09 512.24 T
(-sequence-) 465.97 512.24 T
(str) 90 498.24 T
(eam) 103.78 498.24 T
0 F
(on) 128.1 498.24 T
3 F
(contents) 143.1 498.24 T
0 F
( to) 183.1 498.24 T
( determine which class to actually instantiate) 195.43 498.24 T
(.) 410.74 498.24 T
3 F
(C) 416.74 498.24 T
(ontents) 424.74 498.24 T
0 F
(is) 462.41 498.24 T
( the input for) 470.41 498.24 T
(an input stream, or it is initial storage for an output stream.) 90 484.24 T
(If) 375.31 484.24 T
3 F
(contents) 386.3 484.24 T
0 F
( is a stretch) 426.3 484.24 T
(y-v) 480.56 484.24 T
(ector) 496.38 484.24 T
(,) 519.89 484.24 T
(then it is the only storage used by the stream) 90 470.24 T
(.) 303.65 470.24 T
3 F
(Dir) 90 441.94 T
(ection) 106.22 441.94 T
0 F
( must be one of) 135.55 441.94 T
2 F
(#"input") 212.54 441.94 T
0 F
(,) 270.14 441.94 T
2 F
(#"output") 276.14 441.94 T
0 F
(, or) 340.94 441.94 T
2 F
(#"input-output") 359.94 441.94 T
0 F
(; the def) 467.94 441.94 T
(ault is) 507.14 441.94 T
2 F
(#"input") 90 427.94 T
0 F
(.) 147.6 427.94 T
3 F
(St) 90 399.65 T
(art) 99.34 399.65 T
0 F
(and) 116.34 399.65 T
3 F
(end) 136.67 399.65 T
0 F
( are inte) 154 399.65 T
(gers that specify what part of the sequence to create a stream o) 192.47 399.65 T
(v) 492.86 399.65 T
(er) 498.68 399.65 T
(.) 507.35 399.65 T
(The) 513.35 399.65 T
-0.16 (d) 90 385.65 P
-0.16 (ef) 96 385.65 P
-0.16 (ault for) 105.2 385.65 P
3 F
-0.16 (start) 142.89 385.65 P
0 F
-0.16 ( is 0) 164.89 385.65 P
-0.16 (, and t) 184.59 385.65 P
-0.16 (he def) 213.94 385.65 P
-0.16 (ault for) 243.32 385.65 P
3 F
-0.16 (end) 281 385.65 P
0 F
-0.16 ( is) 298.33 385.65 P
2 F
-0.37 (contents.size) 312.02 385.65 P
0 F
-0.16 (. These k) 405.62 385.65 P
-0.16 (e) 448.85 385.65 P
-0.16 (yw) 453.99 385.65 P
-0.16 (ord ar) 468.54 385.65 P
-0.16 (guments) 496.49 385.65 P
(are only v) 90 371.65 T
(alid when) 137.69 371.65 T
3 F
(dir) 187.68 371.65 T
(ection) 201.24 371.65 T
0 F
( is) 230.57 371.65 T
2 F
(#\323input\323) 244.57 371.65 T
0 F
(.) 302.17 371.65 T
1 F
(type-for-sequence-stream) 72 337.35 T
3 F
(sequence) 205.62 337.35 T
7 F
(\336) 252.6 337.35 T
3 F
(sequence-stream-type) 267.44 337.35 T
0 F
([Open generic function]) 424.7 337.35 T
(Gi) 90 309.06 T
(v) 101.7 309.06 T
(en a sequence type, returns the type of sequence stream class to create. The method for) 107.52 309.06 T
1 F
(mak) 90 295.06 T
(e) 112.55 295.06 T
0 F
( of) 117.88 295.06 T
1 F
(<sequence-str) 133.87 295.06 T
(eam>) 204.48 295.06 T
0 F
( calls this function.) 232.64 295.06 T
(F) 90 266.77 T
(or e) 96.49 266.77 T
(xample, when the sequence type is) 114.64 266.77 T
1 F
(<byte-string>) 284.27 266.77 T
0 F
(, this will return) 353.94 266.77 T
1 F
(<byte-string-) 433.61 266.77 T
(str) 90 252.77 T
(eam>) 103.78 252.77 T
0 F
(. When the sequence type is) 131.94 252.77 T
1 F
(<unicode-string>) 268.91 252.77 T
0 F
(, this will return) 356.59 252.77 T
1 F
(<unicode-string-) 436.26 252.77 T
(str) 90 238.77 T
(eam>) 103.78 238.77 T
0 F
(.) 131.94 238.77 T
1 F
(make <string-stream>) 72 204.47 T
0 F
( #key) 185.99 204.47 T
3 F
( contents) 212.32 204.47 T
(d) 258.31 204.47 T
(irection start end) 264.31 204.47 T
0 F
([G. F. method]) 468.67 204.47 T
7 F
(\336) 108 188.18 T
3 F
(<string-stream>) 122.84 188.18 T
0 F
(See) 90 159.88 T
1 F
(mak) 110.33 159.88 T
(e) 132.88 159.88 T
0 F
( on) 138.2 159.88 T
1 F
(<sequence-str) 156.2 159.88 T
(eam>) 226.81 159.88 T
0 F
(. If supplied,) 254.98 159.88 T
3 F
(contents) 318.64 159.88 T
0 F
( must be an instance of) 358.63 159.88 T
1 F
( <string>) 468.95 159.88 T
0 F
(.) 515.63 159.88 T
1 F
(make <byte-string-stream>) 72 125.59 T
0 F
( #key) 211.98 125.59 T
3 F
( contents direction start end) 238.31 125.59 T
0 F
([G. F. method]) 468.67 125.59 T
7 F
(\336) 108 109.29 T
3 F
(<byte-string-stream>) 122.84 109.29 T
0 F
(Returns an instance of) 90 81 T
1 F
(<byte-string-str) 199.98 81 T
(eam>.) 280.58 81 T
0 F
( If supplied,) 311.75 81 T
3 F
(contents) 372.41 81 T
0 F
( must be an instance of) 412.4 81 T
1 F
(<byte-string>) 90 67 T
0 F
(.) 159.67 67 T
3 F
(Dir) 165.67 67 T
(ection) 181.9 67 T
0 F
(,) 211.22 67 T
3 F
(start) 217.22 67 T
0 F
(, and) 239.23 67 T
3 F
(end) 265.56 67 T
0 F
( are the same as for) 282.89 67 T
1 F
(mak) 378.85 67 T
(e) 401.4 67 T
0 F
( of) 406.73 67 T
1 F
(<sequence-str) 422.72 67 T
(eam>) 493.33 67 T
0 F
(.) 521.5 67 T
52 552.82 54 564.82 R
V
52 494.24 54 506.24 R
V
52 466.24 54 478.24 R
V
52 333.35 54 407.65 R
V
52 200.47 54 212.47 R
V
52 155.88 54 167.88 R
V
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(7) 536 42.62 T
1 12 Q
(make <unicode-string-stream>) 72 712 T
0 F
( #key) 229.99 712 T
3 F
( contents direction start end) 256.32 712 T
0 F
([G. F. method]) 468.67 712 T
7 F
(\336) 108 691.19 T
3 F
(<unicode-string-stream>) 122.84 691.19 T
0 F
-0.29 (Returns an instance of) 90 664.38 P
1 F
-0.29 (<unicode-string-str) 198.83 664.38 P
-0.29 (eam>.) 297.45 664.38 P
0 F
-0.29 ( If supplied,) 328.61 664.38 P
3 F
-0.29 (contents) 388.41 664.38 P
0 F
-0.29 ( must be an instance of) 428.41 664.38 P
1 F
-0.21 (<unicode-string>) 90 650.38 P
0 F
-0.21 (.) 177.68 650.38 P
3 F
-0.21 (Dir) 183.48 650.38 P
-0.21 (ection) 199.7 650.38 P
0 F
-0.21 (,) 229.03 650.38 P
3 F
-0.21 (start) 234.82 650.38 P
0 F
-0.21 (, and) 256.83 650.38 P
3 F
-0.21 (end) 282.74 650.38 P
0 F
-0.21 ( are the same as for) 300.06 650.38 P
1 F
-0.21 (mak) 394.77 650.38 P
-0.21 (e) 417.32 650.38 P
0 F
-0.21 ( of) 422.65 650.38 P
1 F
-0.21 (<sequence-str) 438.23 650.38 P
-0.21 (eam>) 508.84 650.38 P
0 F
-0.21 (.) 537 650.38 P
1 F
(close) 72 617.56 T
3 F
(stream) 99.66 617.56 T
0 F
( #key #all-keys) 132.32 617.56 T
7 F
(\336) 208.64 617.56 T
3 F
(\050\051) 223.49 617.56 T
0 F
([) 422.04 617.56 T
(Open) 426.04 617.56 T
(Generic function]) 455.03 617.56 T
-0.45 (Closes the stream. Note, when creating ne) 90 590.75 P
-0.45 (w subtypes of) 288.96 590.75 P
1 F
-0.45 (<b) 357.28 590.75 P
-0.45 (uffer) 370.55 590.75 P
-0.45 (ed-str) 395.65 590.75 P
-0.45 (eam>) 425.42 590.75 P
0 F
-0.45 (, you may need to) 453.59 590.75 P
(add a method to this function e) 90 576.75 T
(v) 238.36 576.75 T
(en though it is not part of the Streams Extension Protocol.) 244.18 576.75 T
1 F
(3.1.1  Options when Cr) 72 543.94 T
(eating File Str) 189.79 543.94 T
(eams) 262.24 543.94 T
0 F
(The) 72 517.12 T
3 F
(element-type) 93.66 517.12 T
0 F
(ar) 157.97 517.12 T
(gument controls ho) 167.08 517.12 T
(w the underlying \336le is accessed. Ideally its v) 259.44 517.12 T
(alue is an) 477.44 517.12 T
(y) 522.59 517.12 T
(v) 72 503.12 T
(alid Dylan type such as) 77.7 503.12 T
1 F
( limited\050<integer>, min: 0, max: 255\051) 189.68 503.12 T
0 F
( or) 378.34 503.12 T
1 F
(<unicode-character>) 394.33 503.12 T
0 F
(. This) 501.32 503.12 T
(approach may mak) 72 489.12 T
(e it possible to implement a potentially inef) 163.19 489.12 T
(\336cient b) 371.22 489.12 T
(ut general set of \336le) 409.98 489.12 T
(streams. Ho) 72 475.12 T
(we) 129.02 475.12 T
(v) 142.72 475.12 T
(er) 148.54 475.12 T
(, the current language de\336nition does not include adequate support for this) 157.38 475.12 T
-0.02 (approach. Consequently we specify an interim minimum set of element types, which for the time) 72 461.12 P
(being are e) 72 447.12 T
(xported from the Streams module of the Streams library) 124.46 447.12 T
(.) 392.32 447.12 T
1 F
(\245) 85.5 426.31 T
(<byte-character>) 99 426.31 T
0 F
( \321 file is accessed as 8-bit ASCII characters.) 187.98 426.31 T
1 F
(\245) 85.5 405.5 T
(<unicode-character>) 99 405.5 T
0 F
( \321 file is accessed as 16-bit Unicode characters.) 205.99 405.5 T
1 F
(\245) 85.5 384.69 T
(<byte>) 99 384.69 T
0 F
( \321 file is accessed as unsigned 8-bit integers.) 134.68 384.69 T
(The implementation may pro) 72 357.88 T
(vide more than these types, b) 211.48 357.88 T
(ut the abo) 351.22 357.88 T
(v) 398.36 357.88 T
(e three types are required.) 404.18 357.88 T
(The) 72 331.06 T
3 F
(encoding) 93.66 331.06 T
0 F
( ar) 137.65 331.06 T
(gument controls ho) 149.76 331.06 T
(w the contents of the underlying \336le are encoded in the \336le) 242.12 331.06 T
(system. When) 72 317.06 T
3 F
(element-type) 142.99 317.06 T
0 F
( is) 204.3 317.06 T
1 F
(<byte-character>) 218.3 317.06 T
0 F
(, encoding must be) 307.28 317.06 T
1 F
(#"ANSI") 400.94 317.06 T
0 F
( or) 448.93 317.06 T
1 F
(#"ISO-Latin-) 464.93 317.06 T
(1") 72 303.06 T
0 F
(. When) 84.66 303.06 T
3 F
(element-type) 122.32 303.06 T
0 F
( is) 183.62 303.06 T
1 F
(<unicode-character>) 197.63 303.06 T
0 F
(,) 304.62 303.06 T
(encoding must be) 310.62 303.06 T
1 F
(#"UTF") 398.28 303.06 T
0 F
(,) 441.6 303.06 T
1 F
(#"little-endian") 447.6 303.06 T
0 F
(,) 528.92 303.06 T
(or) 72 289.06 T
1 F
(#"big-endian") 85 289.06 T
0 F
(. Each platform does not need to support e) 159 289.06 T
(v) 361.67 289.06 T
(ery encoding, b) 367.49 289.06 T
(ut each platform) 441.56 289.06 T
(must support at least one encoding for each element type.) 72 275.06 T
(The beha) 72 248.25 T
(vior controlled by the) 116.08 248.25 T
3 F
(if-e) 222.73 248.25 T
(xists) 238.49 248.25 T
0 F
( ar) 259.82 248.25 T
(gument is as follo) 271.93 248.25 T
(ws:) 357.3 248.25 T
1 F
(\245) 85.5 227.44 T
-0.06 (#f) 99 227.44 P
0 F
-0.06 ( \321 no action. This is the default when the stream\325s direction is) 109 227.44 P
1 F
-0.06 (#"input") 412.8 227.44 P
0 F
-0.06 ( or) 459.46 227.44 P
1 F
-0.06 (#"input-out-) 475.33 227.44 P
(put") 99 213.44 T
0 F
(.) 123 213.44 T
1 F
(\245) 85.5 192.62 T
(#"new-version") 99 192.62 T
0 F
( \321 if the underlying file system supports versions, then a new version of) 180.31 192.62 T
(the file will be created. This is the default when the stream\325s direction is) 99 178.62 T
1 F
(#"output") 448.61 178.62 T
0 F
(. If the) 501.94 178.62 T
(underlying file system does) 99 164.62 T
3 F
(not) 234.32 164.62 T
0 F
( support) 249.66 164.62 T
-0.67 (versions, then it is up to the implementation to make) 291.66 164.62 P
(the appropriate) 99 150.62 T
(policy decision, and substitute one of the behaviors below; the) 174.31 150.62 T
1 F
(#"replace") 476.62 150.62 T
0 F
(behavior is a good choice for this.) 99 136.62 T
1 F
(\245) 85.5 115.81 T
(#"overwrite") 99 115.81 T
0 F
( \321 set the stream\325s position to the beginning of the file, but preserve the cur-) 167.63 115.81 T
(rent contents) 99 101.81 T
-0.19 (of the file. This is useful when the direction is) 163.66 101.81 P
1 F
-0.19 (#"input-output") 385.42 101.81 P
0 F
-0.19 ( and you want) 470.09 101.81 P
(to overwrite an existing file.) 99 87.81 T
1 F
(\245) 85.5 67 T
(#"replace") 99 67 T
0 F
(\321 delete or rename any existing file and create a new file.) 158.64 67 T
52 613.56 54 625.56 R
V
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(8) 536 42.62 T
1 12 Q
(\245) 85.5 712 T
(#"append") 99 712 T
0 F
( \321 if the file exists, set the stream\325s initial position to the end of the file so that) 156.34 712 T
(all new output occurs at the end of the file.) 99 698 T
1 F
(\245) 85.5 676.81 T
(#"truncate") 99 676.81 T
0 F
( \321 if the file exists, then truncate its size to 0, otherwise create) 161.64 676.81 T
(a new file.) 466.92 676.81 T
1 F
(\245) 85.5 655.62 T
(#"signal") 99 655.62 T
0 F
( \321 signal a) 148.33 655.62 T
1 F
(<file-exists-error>) 206.33 655.62 T
0 F
( condition if the file exists.) 299.3 655.62 T
(The beha) 72 628.44 T
(vior controlled by the) 116.08 628.44 T
3 F
(if-does-not-e) 222.73 628.44 T
(xist) 283.81 628.44 T
0 F
( ar) 300.48 628.44 T
(gument is as follo) 312.59 628.44 T
(ws:) 397.96 628.44 T
1 F
(\245) 85.5 607.25 T
(#f) 99 607.25 T
0 F
( \321 no action.) 109 607.25 T
1 F
(\245) 85.5 586.06 T
(#"signal") 99 586.06 T
6 10 Q
( \321) 148.33 586.06 T
0 12 Q
(if the file does not exist, signal a) 163.89 586.06 T
1 F
(<file-does-not-exist-error>) 322.88 586.06 T
0 F
( condition. This) 458.52 586.06 T
(is the default when the stream\325s direction is) 99 572.06 T
1 F
(#"input") 310.97 572.06 T
0 F
(.) 357.64 572.06 T
1 F
(\245) 85.5 550.88 T
-0.42 (#"create") 99 550.88 P
0 F
-0.42 ( \321 if the file does not exist, create a new zero-length file. This is the default when) 149.63 550.88 P
(the stream\325s direction is) 99 536.88 T
1 F
(#"output") 216.98 536.88 T
0 F
( or) 270.31 536.88 T
1 F
(#"input-output") 286.31 536.88 T
0 F
(.) 370.98 536.88 T
(Creating a \336le stream) 72 509.69 T
3 F
(always) 177.98 509.69 T
0 F
( in) 211.32 509.69 T
(v) 223.18 509.69 T
(olv) 228.94 509.69 T
(es an attempt to open the underlying \336le, so the aforemen-) 244.09 509.69 T
(tioned errors will occur during \336le stream instance initialization.) 72 495.69 T
(If while opening a \336le stream, the implementation is able to detect an attempt to read a \336le for) 72 468.5 T
(which the user has no read permission, or to write a \336le for which the user has no write permis-) 72 454.5 T
(sion, then an) 72 440.5 T
1 F
(<in) 136 440.5 T
(v) 152.36 440.5 T
(alid-\336le-permission) 158.24 440.5 T
(s) 256.92 440.5 T
(-err) 261.59 440.5 T
(or>) 281.35 440.5 T
0 F
( condition will be signalled at the time the \336le) 299.52 440.5 T
(stream is created.) 72 426.5 T
(File streams are intended only for accessing the contents of \336les, and are) 72 399.31 T
3 F
(not) 423.26 399.31 T
0 F
( intended to pro) 438.6 399.31 T
(vide) 514.08 399.31 T
-0.38 (f) 72 385.31 P
-0.38 (acilities for renaming, deleting, and mo) 75.88 385.31 P
-0.38 (ving \336les, parsing directory names, etc. This functionality) 262.76 385.31 P
(is handled by the Dylan Locators Library) 72 371.31 T
(.) 269.18 371.31 T
1 16 Q
(4.  Reading and Writing fr) 72 329.46 T
(om Str) 253.06 329.46 T
(eams) 299.42 329.46 T
1 14 Q
(4.1  Reading fr) 72 293.6 T
(om Str) 160.41 293.6 T
(eams) 200.98 293.6 T
0 12 Q
(The follo) 72 265.75 T
(wing are the basic functions for reading from streams. It is an error to call an) 116.03 265.75 T
(y of these) 484.43 265.75 T
(functions on a b) 72 251.75 T
(uf) 148.75 251.75 T
(fered stream while its b) 158.45 251.75 T
(uf) 270.85 251.75 T
(fer is held.) 280.55 251.75 T
-0.24 (T) 72 224.56 P
-0.24 (o implement a ne) 78.37 224.56 P
-0.24 (w input stream that is not a) 160.34 224.56 P
1 F
-0.24 (<b) 291.65 224.56 P
-0.24 (uffer) 304.92 224.56 P
-0.24 (ed-str) 330.03 224.56 P
-0.24 (eam>) 359.8 224.56 P
0 F
-0.24 (, you must pro) 387.96 224.56 P
-0.24 (vide methods for) 456.4 224.56 P
1 F
(r) 72 210.56 T
(ead-element) 77.11 210.56 T
0 F
(,) 139.09 210.56 T
1 F
(unr) 145.09 210.56 T
(ead-element) 163.55 210.56 T
0 F
(,) 225.53 210.56 T
1 F
(str) 231.53 210.56 T
(eam-input-a) 245.3 210.56 T
(v) 307.67 210.56 T
(ailable?) 313.55 210.56 T
0 F
(,) 353.56 210.56 T
1 F
(peek) 359.56 210.56 T
0 F
(,) 383.56 210.56 T
1 F
(r) 389.56 210.56 T
(ead) 394.67 210.56 T
0 F
(,) 412.67 210.56 T
1 F
(r) 418.67 210.56 T
(ead-into!) 423.78 210.56 T
0 F
(, and) 469.78 210.56 T
1 F
(discard-) 496.1 210.56 T
(input) 72 196.56 T
0 F
(.) 99.35 196.56 T
1 F
(read-element) 72 163.38 T
3 F
(input-stream) 142.31 163.38 T
0 F
(#key) 206.64 163.38 T
3 F
( on-end-of-stream) 229.97 163.38 T
7 F
(\336) 319.28 163.38 T
3 F
(element-or-eof) 334.13 163.38 T
0 F
([Open generic function]) 424.7 163.38 T
-0.41 (Returns the ne) 90 136.19 P
-0.41 (xt element in the stream. If the stream is not at its end, the stream is adv) 158.33 136.19 P
-0.41 (anced so) 496.16 136.19 P
(that a subsequent call to) 90 122.19 T
1 F
(r) 208.32 122.19 T
(ead-element) 213.43 122.19 T
0 F
( returns the ne) 275.41 122.19 T
(xt element.) 343.55 122.19 T
(If the stream is already at its end when) 90 95 T
1 F
(r) 278.29 95 T
(ead-element) 283.4 95 T
0 F
( is called, the beha) 345.38 95 T
(vior of) 434.12 95 T
1 F
(r) 469.45 95 T
(ead-element) 474.56 95 T
0 F
(is as follo) 90 81 T
(ws. If the) 136.37 81 T
3 F
(on-end-of-str) 184.36 81 T
(eam) 247.24 81 T
0 F
( ar) 267.23 81 T
(gument is supplied, then its v) 279.34 81 T
(alue is returned. Other-) 419.71 81 T
(wise, an) 90 67 T
1 F
(<end-of-str) 132.32 67 T
(eam-err) 189.6 67 T
(or>) 230.69 67 T
0 F
( condition is signalled.) 248.86 67 T
52 436.5 54 448.5 R
V
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(9) 536 42.62 T
0 12 Q
(If no input is a) 90 712 T
(v) 159.76 712 T
(ailable and the stream is not at its end,) 165.46 712 T
1 F
(r) 352.1 712 T
(ead-element) 357.22 712 T
0 F
( will block until input) 419.2 712 T
(becomes a) 90 698 T
(v) 140.08 698 T
(ailable.) 145.78 698 T
1 F
(unread-element) 72 664.79 T
3 F
(positionable-stream element) 155.65 664.79 T
7 F
( \336) 291.97 664.79 T
3 F
(element) 309.82 664.79 T
0 F
([Open generic function]) 424.7 664.79 T
-0.13 (\322Unreads\323 the last element from the stream, that is, returns) 90 637.57 P
3 F
-0.13 (element) 373.95 637.57 P
0 F
-0.13 ( into the stream so that the) 411.27 637.57 P
(ne) 90 623.57 T
(xt call to) 101.15 623.57 T
1 F
(r) 146.15 623.57 T
(ead-element) 151.26 623.57 T
0 F
( will return) 213.24 623.57 T
3 F
(element) 269.57 623.57 T
0 F
(. The stream must be a) 306.89 623.57 T
1 F
(<positionable-str) 418.54 623.57 T
(eam>) 505.16 623.57 T
0 F
(.) 533.33 623.57 T
-0.32 (It is an error to apply) 90 596.36 P
1 F
-0.32 (unr) 192.08 596.36 P
-0.32 (ead-element) 210.53 596.36 P
0 F
-0.32 ( to an element that is not the element most recently read) 272.51 596.36 P
-0.35 (from the stream. It is also an error to call) 90 582.36 P
1 F
-0.35 (unr) 285.43 582.36 P
-0.35 (ead-element) 303.88 582.36 P
0 F
-0.35 ( twice in succession, or to unread an) 365.86 582.36 P
(element if the stream is at its initial position or after e) 90 568.36 T
(xplicitly setting the stream\325) 346.8 568.36 T
(s position.) 477.8 568.36 T
1 F
(peek) 72 535.14 T
3 F
(input-stream) 99 535.14 T
0 F
(#key) 163.33 535.14 T
3 F
( on-end-of-stream) 186.66 535.14 T
7 F
( \336) 272.98 535.14 T
3 F
(element-or-eof) 290.82 535.14 T
0 F
([Open generic function]) 424.7 535.14 T
1 F
(peek) 90 507.93 T
0 F
( is identical to) 114 507.93 T
1 F
(r) 184.67 507.93 T
(ead-element) 189.78 507.93 T
0 F
(, e) 251.76 507.93 T
(xcept that the stream is not adv) 262.91 507.93 T
(anced.) 411.92 507.93 T
1 F
(read) 72 474.71 T
3 F
(input-stream n::<integer>) 98.33 474.71 T
0 F
(#key) 229.85 474.71 T
3 F
( on-end-of-stream) 253.18 474.71 T
0 F
([Open generic function]) 424.7 474.71 T
7 F
(\336) 108 459.5 T
3 F
(sequence-or-eof) 122.84 459.5 T
1 F
(r) 90 432.29 T
(ead) 95.11 432.29 T
0 F
( returns a sequence of the ne) 113.11 432.29 T
(xt) 249.55 432.29 T
3 F
(n) 261.89 432.29 T
0 F
( elements from the stream. The type of resulting) 267.89 432.29 T
(sequence depends on the type of the stream\325) 90 418.29 T
(s underlying aggre) 301.62 418.29 T
(g) 390.76 418.29 T
(ate. F) 396.7 418.29 T
(or instances of) 423.18 418.29 T
1 F
(<sequence-str) 90 404.29 T
(eam>) 160.61 404.29 T
0 F
(, the type of the result is gi) 188.77 404.29 T
(v) 316.46 404.29 T
(en by) 322.28 404.29 T
1 F
(type-f) 351.61 404.29 T
(or) 381.3 404.29 T
(-copy) 392.18 404.29 T
0 F
( of the underlying aggre-) 420.18 404.29 T
(g) 90 390.29 T
(ate. F) 95.94 390.29 T
(or instances of) 122.42 390.29 T
1 F
(<\336le-str) 195.41 390.29 T
(eam>) 235.36 390.29 T
0 F
(, the result is a v) 263.52 390.29 T
(ector that can contain elements whose) 342 390.29 T
(type is gi) 90 376.29 T
(v) 133.7 376.29 T
(en by) 139.52 376.29 T
1 F
(str) 168.85 376.29 T
(eam-element-type) 182.63 376.29 T
0 F
( of the stream.) 273.92 376.29 T
(The stream is adv) 90 349.07 T
(anced so that subsequent reads start after the) 174.68 349.07 T
3 F
(n) 391.3 349.07 T
0 F
( elements.) 397.3 349.07 T
-0.34 (If the end of the stream is reached before all) 90 321.86 P
3 F
-0.34 (n) 301.16 321.86 P
0 F
-0.34 ( elements ha) 307.16 321.86 P
-0.34 (v) 366.22 321.86 P
-0.34 (e been read, then the beha) 372.04 321.86 P
-0.34 (vior is as) 494.7 321.86 P
(follo) 90 307.86 T
(ws. If the) 112.37 307.86 T
3 F
(on-end-of-str) 160.36 307.86 T
(eam) 223.24 307.86 T
0 F
( ar) 243.23 307.86 T
(gument is supplied, then it will be returned as the v) 255.34 307.86 T
(alue of) 500.69 307.86 T
1 F
(r) 90 293.86 T
(ead) 95.11 293.86 T
0 F
(. If the) 113.11 293.86 T
3 F
(on-end-of-str) 147.77 293.86 T
(eam) 210.65 293.86 T
0 F
( ar) 230.64 293.86 T
(gument w) 242.75 293.86 T
(as not supplied, and at least one element w) 290.29 293.86 T
(as read) 495.14 293.86 T
(from the stream, then an) 90 279.86 T
1 F
(<incomplete-r) 209.98 279.86 T
(ead-err) 281.92 279.86 T
(or>) 319.68 279.86 T
0 F
( condition will be signalled. When signal-) 337.85 279.86 T
(ling this condition, this function supplies a sequence of what input w) 90 265.86 T
(as read and) 419.87 265.86 T
3 F
(n) 476.84 265.86 T
0 F
(. If the) 482.84 265.86 T
3 F
(on-) 517.5 265.86 T
-0.36 (end-of-str) 90 251.86 P
-0.36 (eam) 136.88 251.86 P
0 F
-0.36 ( ar) 156.88 251.86 P
-0.36 (gument w) 168.62 251.86 P
-0.36 (as not supplied, and no elements were read from the stream, then an) 215.8 251.86 P
1 F
(<end-of-str) 90 237.86 T
(eam-err) 147.28 237.86 T
(or>) 188.36 237.86 T
0 F
( condition will be signalled.) 206.53 237.86 T
(If the stream is not at its end,) 90 210.64 T
1 F
(r) 232.32 210.64 T
(ead) 237.43 210.64 T
0 F
( will block until input becomes a) 255.43 210.64 T
(v) 412.52 210.64 T
(ailable.) 418.22 210.64 T
(It is intended that b) 90 183.43 T
(uf) 182.42 183.43 T
(fered streams will pro) 192.12 183.43 T
(vide a v) 296.92 183.43 T
(ery ef) 334.73 183.43 T
(\336cient implementation of) 362.08 183.43 T
1 F
(r) 486.41 183.43 T
(ead) 491.52 183.43 T
0 F
(, par-) 509.52 183.43 T
(ticularly when the result is an instance of) 90 169.43 T
1 F
(<byte-string>) 289.97 169.43 T
0 F
(,) 359.64 169.43 T
1 F
(<unicode-string>) 365.64 169.43 T
0 F
(, or) 453.32 169.43 T
1 F
(<byte-v) 472.32 169.43 T
(ec-) 511.03 169.43 T
(tor>) 90 155.43 T
0 F
(.) 112.16 155.43 T
1 F
(read-into!) 72 122.22 T
3 F
(input-stream n::<integer> sequence::<mutable-sequence>) 126.32 122.22 T
0 F
(#key) 415.66 122.22 T
3 F
(start) 441.98 122.22 T
(on-end-of-) 466.99 122.22 T
(stream) 72 108.22 T
7 F
(\336) 107.66 108.22 T
3 F
(count-or-eof) 122.51 108.22 T
0 F
([Open generic function]) 424.7 108.22 T
1 F
(r) 90 81 T
(ead-into!) 95.11 81 T
0 F
( reads the ne) 141.11 81 T
(xt) 201.24 81 T
3 F
(n) 213.58 81 T
0 F
( elements from the stream and inserts them into the mutable) 219.58 81 T
(sequence) 90 67 T
3 F
(sequence) 136.98 67 T
0 F
(starting at) 183.96 67 T
3 F
(start) 234.62 67 T
0 F
(. If the sum of) 256.63 67 T
3 F
(start) 327.29 67 T
0 F
( and) 349.3 67 T
3 F
(n) 372.62 67 T
0 F
( is greater than the size of) 378.62 67 T
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(10) 532 42.62 T
3 12 Q
-0.23 (sequence) 90 712 P
0 F
-0.23 (, only enough elements are read to \336ll in to the end of) 133.98 712 P
3 F
-0.23 (sequence) 390.89 712 P
0 F
-0.23 (. \050That is, if) 434.87 712 P
3 F
-0.23 (sequence) 493.26 712 P
0 F
(is a stretch) 90 698 T
(y v) 141.26 698 T
(ector) 156.08 698 T
(, it is not gro) 179.59 698 T
(wn.\051) 240.3 698 T
(If no end-of-stream occurred, this returns the an inte) 90 671.67 T
(ger gi) 340.75 671.67 T
(ving the number of elements actu-) 368.11 671.67 T
(ally assigned to) 90 657.67 T
3 F
(sequence) 167.66 657.67 T
0 F
(.) 211.64 657.67 T
(The end of stream beha) 90 631.33 T
(vior is as for) 202.39 631.33 T
1 F
(r) 265.72 631.33 T
(ead) 270.83 631.33 T
0 F
(.) 288.83 631.33 T
(If the stream is not at its end,) 90 605 T
1 F
(r) 232.32 605 T
(ead-into!) 237.43 605 T
0 F
( will block until input becomes a) 283.43 605 T
(v) 440.52 605 T
(ailable.) 446.22 605 T
-0.25 (It is intended that b) 90 578.67 P
-0.25 (uf) 181.42 578.67 P
-0.25 (fered streams will pro) 191.12 578.67 P
-0.25 (vide a v) 295.16 578.67 P
-0.25 (ery ef) 332.47 578.67 P
-0.25 (\336cient implementation of) 359.56 578.67 P
1 F
-0.25 (r) 483.14 578.67 P
-0.25 (ead-into!) 488.26 578.67 P
0 F
-0.25 (,) 534.25 578.67 P
(particularly in the cases when) 90 564.67 T
3 F
(sequence) 235.63 564.67 T
0 F
( is an instance of) 279.61 564.67 T
1 F
(<byte-string>) 363.26 564.67 T
0 F
(,) 432.94 564.67 T
1 F
(<unicode-string>) 438.94 564.67 T
0 F
(,) 526.62 564.67 T
1 F
(<byte-v) 90 550.67 T
(ector>) 128.71 550.67 T
0 F
(, or) 161.53 550.67 T
1 F
(<b) 180.53 550.67 T
(uffer>) 193.8 550.67 T
0 F
(.) 225.96 550.67 T
1 F
(discard-input) 72 518.33 T
3 F
(input-stream) 144.35 518.33 T
7 F
(\336) 208.68 518.33 T
3 F
(\050\051) 223.52 518.33 T
0 F
([Open generic function]) 424.7 518.33 T
(Discards an) 90 492 T
(y pending input from the stream, both b) 146.14 492 T
(uf) 336.55 492 T
(fered input and, if possible, an) 346.25 492 T
(y input) 491.71 492 T
(that might be at the stream\325) 90 478 T
(s source.) 220.99 478 T
(This operation is primarily useful on \322interacti) 90 451.67 T
(v) 313.01 451.67 T
(e\323 streams \050such as TTY streams\051 for discard-) 318.83 451.67 T
(ing unw) 90 437.67 T
(anted input after an error condition. There is a def) 128.88 437.67 T
(ault method on) 368.03 437.67 T
1 F
(<str) 443.03 437.67 T
(eam>) 463.64 437.67 T
0 F
( so that) 491.81 437.67 T
(user programs can call this on an) 90 423.67 T
(y sort of stream; this def) 247.79 423.67 T
(ault method does nothing.) 364.66 423.67 T
1 F
(stream-input-available?) 72 391.33 T
3 F
(input-stream) 197.66 391.33 T
7 F
( \336) 259 391.33 T
0 F
( <) 273.84 391.33 T
3 F
(boolean>) 283.61 391.33 T
0 F
([Open generic function]) 424.7 391.33 T
(Returns) 90 365 T
1 F
(#t) 130.33 365 T
0 F
( if the stream w) 140.33 365 T
(ould block on the ne) 214.86 365 T
(xt input operation, otherwise returns) 312.67 365 T
1 F
(#f) 489.98 365 T
0 F
(.) 499.98 365 T
(This function dif) 90 338.67 T
(fers from) 170.36 338.67 T
1 F
(str) 217.68 338.67 T
(eam-at-end?) 231.46 338.67 T
0 F
( because when) 295.44 338.67 T
1 F
(stream-input-available?) 368.41 338.67 T
0 F
( returns) 491.08 338.67 T
2 F
(#t) 90 324.67 T
0 F
(,) 104.4 324.67 T
1 F
(r) 110.4 324.67 T
(ead-element) 115.51 324.67 T
0 F
( may still do end-of-stream error processing.) 177.49 324.67 T
1 F
(Stream-input-available?) 394.12 324.67 T
0 F
(only guarantees that) 90 310.67 T
1 F
(r) 189.65 310.67 T
(ead-element) 194.76 310.67 T
0 F
( w) 256.74 310.67 T
(ould not block.) 268.28 310.67 T
(It is an error to call) 90 284.33 T
1 F
(str) 184.64 284.33 T
(eam-input-a) 198.42 284.33 T
(vilable?) 260.78 284.33 T
0 F
( on a b) 300.79 284.33 T
(uf) 332.88 284.33 T
(fered stream while its b) 342.58 284.33 T
(uf) 454.98 284.33 T
(fers are held.) 464.68 284.33 T
1 14 Q
(4.2  Con) 72 250.67 T
(v) 120.83 250.67 T
(enience Functions f) 127.69 250.67 T
(or Reading fr) 242.45 250.67 T
(om Str) 323.08 250.67 T
(eams) 363.65 250.67 T
0 12 Q
-0.06 (The follo) 72 223.67 P
-0.06 (wing is a small set of con) 115.97 223.67 P
-0.06 (v) 237.12 223.67 P
-0.06 (enient reading functions that search for particular elements in) 242.94 223.67 P
(a stream. These functions are implemented in terms of the more primiti) 72 209.67 T
(v) 413.65 209.67 T
(e functions described in) 419.47 209.67 T
(the pre) 72 195.67 T
(vious section.) 104.69 195.67 T
1 F
(read-to) 72 163.33 T
3 F
(input-stream element) 112.32 163.33 T
0 F
(#key) 216.97 163.33 T
3 F
( on-end-of-stream test) 240.3 163.33 T
7 F
(\336) 349.28 163.33 T
3 F
(sequence-or-eof) 364.13 163.33 T
(found?::<boolean>) 72 149.33 T
0 F
([Function]) 489.34 149.33 T
(Returns a ne) 90 123 T
(w sequence containing the elements of the stream from the stream\325) 149.69 123 T
(s current posi-) 470.29 123 T
-0.08 (tion to the \336rst occurrence of) 90 109 P
3 F
-0.08 (element) 231.51 109 P
0 F
-0.08 (. The result does not contain) 268.83 109 P
3 F
-0.08 (element) 407.35 109 P
0 F
-0.08 (. The second return) 444.67 109 P
(v) 90 95 T
(alue is) 95.7 95 T
2 F
(#t) 129.7 95 T
0 F
( if the read terminated with) 144.1 95 T
3 F
(element) 277.4 95 T
0 F
(, or) 314.72 95 T
2 F
(#f) 333.72 95 T
0 F
( if the read terminated by reaching the) 348.12 95 T
(end of the stream\325) 90 81 T
(s source. The \322boundary\323 element is consumed, that is, the stream is left) 176.32 81 T
(positioned after) 90 67 T
3 F
(element) 167.99 67 T
0 F
(.) 205.31 67 T
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(11) 532 42.62 T
1 12 Q
(Read-to) 90 712 T
0 F
( determines whether the element occurred by calling the test function,) 130.66 712 T
3 F
(test) 468.59 712 T
0 F
(, which) 485.26 712 T
(def) 90 698 T
(aults to) 105.2 698 T
2 F
(\134==) 143.21 698 T
0 F
(. The test function must accept tw) 164.81 698 T
(o ar) 327 698 T
(guments, and it is called on the element) 345.11 698 T
(gotten from the stream and) 90 684 T
3 F
(element) 222.31 684 T
0 F
(, in that order) 259.63 684 T
(.) 323.63 684 T
(The type of the returned sequence is as described for) 90 657.13 T
1 F
(r) 345.92 657.13 T
(ead) 351.04 657.13 T
0 F
(. The end-of-stream beha) 369.04 657.13 T
(vior is as) 489.42 657.13 T
(speci\336ed for) 90 643.13 T
1 F
(r) 152.65 643.13 T
(ead-line) 157.76 643.13 T
0 F
(.) 198.43 643.13 T
1 F
(read-through) 72 610.27 T
3 F
(input-stream element) 143.66 610.27 T
0 F
( #key) 245.32 610.27 T
3 F
( on-end-of-stream test) 271.64 610.27 T
7 F
(\336) 380.63 610.27 T
3 F
(sequence-or-eof) 395.47 610.27 T
(found?::<boolean>) 72 596.27 T
0 F
([Function]) 489.34 596.27 T
-0.25 (Identical to) 90 569.4 P
1 F
-0.25 (r) 146.82 569.4 P
-0.25 (ead-to) 151.93 569.4 P
0 F
-0.25 (, e) 183.93 569.4 P
-0.25 (xcept that the \322boundary\323 element is included in the resulting sequence.) 194.82 569.4 P
-0.25 (If the \322boundary\323 element w) 90 555.4 P
-0.25 (as not found, then the result does not contain it. The stream is left) 226.18 555.4 P
(positioned after) 90 541.4 T
3 F
(element) 167.99 541.4 T
0 F
(.) 205.31 541.4 T
1 F
(read-to-end) 72 508.53 T
3 F
(input-stream) 134.99 508.53 T
7 F
(\336) 199.32 508.53 T
3 F
(<sequence>) 214.16 508.53 T
0 F
([Function]) 489.34 508.53 T
(Returns a sequence of all the elements up to, and including, the last element of the stream,) 90 481.67 T
(starting from the stream\325) 90 467.67 T
(s current position.) 208.32 467.67 T
(The type of the result sequence is as described for) 90 440.8 T
1 F
(r) 332.6 440.8 T
(ead) 337.72 440.8 T
0 F
(. There is no special end-of-stream) 355.72 440.8 T
(beha) 90 426.8 T
(vior; if the stream is already at the end, an empty collection will be returned.) 112.42 426.8 T
1 F
(skip-through) 72 393.93 T
3 F
(input-stream element) 141.68 393.93 T
0 F
(#key) 246.34 393.93 T
3 F
( test) 269.66 393.93 T
7 F
(\336) 292.33 393.93 T
3 F
(found?::<boolean>) 307.18 393.93 T
0 F
([Function]) 489.34 393.93 T
(Positions the stream after the \336rst occurrence of) 90 367.07 T
3 F
(element) 322.62 367.07 T
0 F
(,) 359.94 367.07 T
(starting from the stream\325) 365.94 367.07 T
(s current) 484.26 367.07 T
(position. Returns) 90 353.07 T
1 F
(#t) 175.01 353.07 T
0 F
( if the element w) 185 353.07 T
(as found, or) 265.54 353.07 T
1 F
(#f) 325.52 353.07 T
0 F
( if the end of the stream w) 335.52 353.07 T
(as encountered.) 461.04 353.07 T
1 F
(Skip-thr) 90 326.2 T
(ough) 133.13 326.2 T
0 F
(determines whether the element occurred by calling the test function,) 161.47 326.2 T
3 F
(test) 496.4 326.2 T
0 F
(,) 513.07 326.2 T
(which def) 90 312.2 T
(aults to) 137.53 312.2 T
2 F
(\134==) 175.54 312.2 T
0 F
(. The test function must accept tw) 197.14 312.2 T
(o ar) 359.33 312.2 T
(guments, and it is called on the) 377.44 312.2 T
(element gotten from the stream and) 90 298.2 T
3 F
(element) 263.3 298.2 T
0 F
(, in that order) 300.62 298.2 T
(.) 364.62 298.2 T
1 14 Q
(4.3  Writing to Str) 72 264 T
(eams) 181.02 264 T
0 12 Q
-0.22 (The follo) 72 236.47 P
-0.22 (wing are the basic functions for writing to streams. It is an error to call an) 115.81 236.47 P
-0.22 (y of these func-) 465.67 236.47 P
(tions on a b) 72 222.47 T
(uf) 127.43 222.47 T
(fered stream while its b) 137.12 222.47 T
(uf) 249.53 222.47 T
(fer is held.) 259.22 222.47 T
(T) 72 195.6 T
(o implement a ne) 78.37 195.6 T
(w output stream that is not a) 161.06 195.6 T
1 F
(<b) 300.06 195.6 T
(uffer) 313.33 195.6 T
(ed-str) 338.44 195.6 T
(eam>) 368.21 195.6 T
0 F
(, you must pro) 396.37 195.6 T
(vide methods) 465.53 195.6 T
(for) 72 181.6 T
1 F
(write-element) 88.99 181.6 T
0 F
(,) 159.62 181.6 T
1 F
(write) 165.62 181.6 T
0 F
(,) 192.28 181.6 T
1 F
(f) 198.28 181.6 T
(or) 201.97 181.6 T
(ce-output) 213.08 181.6 T
0 F
(, and) 261.74 181.6 T
1 F
(discard-output) 288.07 181.6 T
0 F
(.) 364.08 181.6 T
1 F
(write-element) 72 148.73 T
3 F
( output-stream) 142.63 148.73 T
( element) 212.96 148.73 T
7 F
(\336) 256.28 148.73 T
3 F
(\050\051) 271.13 148.73 T
0 F
([Open generic function]) 424.7 148.73 T
(Writes) 90 121.87 T
3 F
(element) 124.99 121.87 T
0 F
( to the stream at the stream\325) 162.31 121.87 T
(s current position. A type error may occur if) 294.96 121.87 T
3 F
(ele-) 509.58 121.87 T
(ment) 90 107.87 T
0 F
( does not ha) 113.33 107.87 T
(v) 170.75 107.87 T
(e an appropriate type for the elements of the stream's underlying aggre) 176.57 107.87 T
(g) 514.8 107.87 T
(ate.) 520.74 107.87 T
(If the stream is a positionable stream, and the stream is not positioned at its end,) 90 81 T
1 F
(write-ele-) 477.3 81 T
(ment) 90 67 T
0 F
( will o) 115.99 67 T
(v) 146.48 67 T
(erwrite the element at the current position and then adv) 152.3 67 T
(ance the stream position.) 416.95 67 T
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(12) 532 42.62 T
1 12 Q
(write) 72 712 T
3 F
(output-stream sequence) 101.65 712 T
0 F
(#key) 218.96 712 T
3 F
( start end) 242.29 712 T
7 F
(\336) 290.63 712 T
3 F
(\050\051) 305.47 712 T
0 F
([Open generic function]) 424.7 712 T
(Writes elements in) 90 684.19 T
3 F
(sequence) 182.99 684.19 T
0 F
( to the stream be) 226.97 684.19 T
(ginning at the stream\325) 306.11 684.19 T
(s current position. Ele-) 410.44 684.19 T
(ments are accessed in) 90 670.19 T
3 F
(sequence) 196.63 670.19 T
0 F
( in the order de\336ned by the forw) 240.61 670.19 T
(ard iteration protocol on) 395.46 670.19 T
1 F
(<sequence>) 90 656.19 T
0 F
(. This is ef) 149.68 656.19 T
(fecti) 200.04 656.19 T
(v) 221.06 656.19 T
(ely the same as the follo) 226.88 656.19 T
(wing:) 342.9 656.19 T
2 10 Q
(do\050method \050elt\051 write-element\050stream, elt\051 end, sequence\051;) 144 635.71 T
(sequence;) 144 621.9 T
0 12 Q
(If supplied,) 90 594.75 T
3 F
(start) 147.66 594.75 T
0 F
( and) 169.67 594.75 T
3 F
(end) 193 594.75 T
0 F
( delimit the portion of) 210.32 594.75 T
3 F
(sequence) 318.66 594.75 T
0 F
( to write to the stream. The) 362.64 594.75 T
(y def) 492.11 594.75 T
(ault) 516.31 594.75 T
(to 0 and) 90 580.75 T
2 F
(sequence.size) 131.66 580.75 T
0 F
(, respecti) 225.26 580.75 T
(v) 268.28 580.75 T
(ely) 274.1 580.75 T
(.) 287.99 580.75 T
(If the stream is a positionable stream, and the stream is not positioned at its end,) 90 552.94 T
1 F
(write) 477.3 552.94 T
0 F
( will) 503.95 552.94 T
(o) 90 538.94 T
(v) 95.82 538.94 T
(erwrite elements in the stream and then adv) 101.64 538.94 T
(ance the stream\325) 310.3 538.94 T
(s position to be be) 388.27 538.94 T
(yond the last) 475.43 538.94 T
(element written.) 90 524.94 T
(It is intended that b) 90 497.12 T
(uf) 182.42 497.12 T
(fered streams will pro) 192.12 497.12 T
(vide a v) 296.92 497.12 T
(ery ef) 334.73 497.12 T
(\336cient implementation of) 362.08 497.12 T
1 F
(write) 486.41 497.12 T
0 F
(, par-) 513.06 497.12 T
(ticularly in the cases when) 90 483.12 T
3 F
(sequence) 220.31 483.12 T
0 F
( is an instance of) 264.29 483.12 T
1 F
(<byte-string>) 347.94 483.12 T
0 F
(,) 417.61 483.12 T
1 F
(<unicode-string>) 423.61 483.12 T
0 F
(,) 511.3 483.12 T
1 F
-0.14 (<byte-v) 90 469.12 P
-0.14 (ector>) 128.71 469.12 P
0 F
-0.14 (, or) 161.53 469.12 P
1 F
-0.14 (<b) 180.25 469.12 P
-0.14 (uffer>) 193.52 469.12 P
0 F
-0.14 (, and the stream\325) 225.68 469.12 P
-0.14 (s element type is the same as the element type of) 304.58 469.12 P
3 F
(sequence) 90 455.12 T
0 F
(.) 133.98 455.12 T
1 F
(force-output) 72 421.31 T
3 F
(output-stream) 138.98 421.31 T
7 F
(\336) 209.32 421.31 T
3 F
( \050\051) 221.16 421.31 T
0 F
([Open generic function]) 424.7 421.31 T
(F) 90 393.5 T
(orces an) 96.49 393.5 T
(y pending output from the stream\325) 135.96 393.5 T
(s b) 299.62 393.5 T
(uf) 313.04 393.5 T
(fers to its destination.) 322.74 393.5 T
1 F
(synchronize-output) 72 359.69 T
3 F
(output-stream) 174.34 359.69 T
7 F
(\336) 244.67 359.69 T
3 F
(\050\051) 259.51 359.69 T
0 F
([Open generic function]) 424.7 359.69 T
-0.25 (F) 90 331.88 P
-0.25 (orces an) 96.49 331.88 P
-0.25 (y pending output from the stream\325) 135.71 331.88 P
-0.25 (s b) 298.12 331.88 P
-0.25 (uf) 311.3 331.88 P
-0.25 (fers to its destination. This function also does) 321 331.88 P
(whate) 90 317.88 T
(v) 118.36 317.88 T
(er it can to ensure that the output reaches the stream\325) 124.18 317.88 T
(s destination before returning,) 376.79 317.88 T
(thereby synchronizing the output destination with the application.) 90 303.88 T
1 F
(discard-output) 72 270.06 T
3 F
(output-stream) 151.01 270.06 T
7 F
(\336) 221.34 270.06 T
3 F
(\050\051) 236.18 270.06 T
0 F
([Open generic function]) 424.7 270.06 T
(Attempts to abort an pending output for the stream.) 90 242.25 T
(There is a def) 90 214.44 T
(ault method on) 155.52 214.44 T
1 F
(<str) 230.52 214.44 T
(eam>) 251.14 214.44 T
0 F
( so that user programs can call this on an) 279.3 214.44 T
(y sort of) 474.76 214.44 T
(stream; this def) 90 200.44 T
(ault method does nothing.) 163.87 200.44 T
1 14 Q
(4.4  Reading and Writing by Lines) 72 165.29 T
0 12 Q
(This section presents functions for doing line-oriented input and output.) 72 136.81 T
(The ne) 72 109 T
(wline sequence for string streams is a sequence comprising the single ne) 104.69 109 T
(wline character) 451.99 109 T
2 F
-0.56 (\134n) 72 95 P
0 F
-0.23 (. F) 86.4 95 P
-0.23 (or character \336le streams, the ne) 98.66 95 P
-0.23 (wline sequence is whate) 247.13 95 P
-0.23 (v) 362.43 95 P
-0.23 (er sequence of characters the under-) 368.25 95 P
(lying platform uses to represent a ne) 72 81 T
(wline. F) 246.34 81 T
(or e) 285.49 81 T
(xample, on MSDOS platforms, the sequence) 303.64 81 T
(might comprise the tw) 72 67 T
(o characters carriage return follo) 179.54 67 T
(wed by linefeed.) 335.84 67 T
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(13) 532 42.62 T
0 12 Q
(The functions described in this section are potentially an interim solution to one aspect of the) 72 712 T
(more general problem of encoding and data translation. At some point, these functions may be) 72 698 T
-0.27 (mo) 72 684 P
-0.27 (v) 87.16 684 P
-0.27 (ed into, or subsumed by) 92.98 684 P
-0.27 (, another higher le) 206.11 684 P
-0.27 (v) 292.31 684 P
-0.27 (el library that deals with the encoding problems in) 298.13 684 P
-0.17 (a better w) 72 670 P
-0.17 (ay) 118.86 670 P
-0.17 (. Note that no other functions in the Streams library do an) 129.41 670 P
-0.17 (ything to manage the encod-) 404.02 670 P
-0 (ing of ne) 72 656 P
-0 (wlines; calling) 114.36 656 P
1 F
-0 (write-element) 187.68 656 P
0 F
-0 ( on the character) 258.32 656 P
2 F
-0 (\134n) 340.94 656 P
0 F
-0 ( does not cause the) 355.34 656 P
2 F
-0 (\134n) 448.98 656 P
0 F
-0 ( character to be) 463.38 656 P
(written as the ne) 72 642 T
(wline sequence, e) 150.68 642 T
(xcept by coincidence.) 235.48 642 T
1 F
(read-line) 72 608.3 T
3 F
(input-stream) 121 608.3 T
0 F
(#key) 185.33 608.3 T
3 F
(on-end-of-stream) 211.66 608.3 T
7 F
(\336) 297.97 608.3 T
3 F
(string-or-eof) 312.82 608.3 T
(newline?::<boolean>) 380.15 608.3 T
0 F
-3 ([Open) 510.01 608.3 P
(generic function]) 72 594.3 T
-0.38 (Returns a ne) 90 566.6 P
-0.38 (w string containing all the input up to the ne) 148.92 566.6 P
-0.38 (xt ne) 357.63 566.6 P
-0.38 (wline sequence. The result string) 380.61 566.6 P
(does not contain the ne) 90 552.6 T
(wline sequence. The second v) 200.35 552.6 T
(alue is) 343.68 552.6 T
1 F
(#t) 377.68 552.6 T
0 F
( if the read terminated with a) 387.67 552.6 T
(ne) 90 538.6 T
(wline or) 101.03 538.6 T
1 F
(#f) 143.69 538.6 T
0 F
( if the read completed by getting to the end of the input stream.) 153.68 538.6 T
(The type of the result string is chosen to be able to contain characters of the stream\325) 90 510.9 T
(s element) 491.26 510.9 T
(type \050for e) 90 496.9 T
(xample, if the element type is) 139.8 496.9 T
1 F
(<byte-character>) 284.78 496.9 T
0 F
(, then the string will be of type) 373.76 496.9 T
1 F
(<byte-string>) 90 482.9 T
0 F
(\051.) 159.67 482.9 T
(If the end of the stream is detected immediately upon calling) 90 455.2 T
1 F
(r) 384.29 455.2 T
(ead-line) 389.4 455.2 T
0 F
( \050that is, the end of) 430.07 455.2 T
(stream appears to be at the end of an empty line\051, then the end of stream handling \050and the) 90 441.2 T
(interpretation of) 90 427.2 T
3 F
(on-end-of-str) 170.65 427.2 T
(eam) 233.53 427.2 T
0 F
(\051 is as for) 253.52 427.2 T
1 F
(r) 301.51 427.2 T
(ead-element) 306.62 427.2 T
0 F
(.) 368.6 427.2 T
1 F
(read-line-into!) 72 393.5 T
3 F
(input-stream string) 148.99 393.5 T
0 F
(#key) 244.33 393.5 T
3 F
(start on-end-of-stream grow?) 270.66 393.5 T
7 F
(\336) 415.66 393.5 T
3 F
(string-or-eof) 430.5 393.5 T
(newline?::<boolean>) 72 379.5 T
0 F
([Open generic function]) 424.7 379.5 T
(Fills) 90 351.8 T
3 F
(string) 114.35 351.8 T
0 F
( with all the input up to the ne) 142.36 351.8 T
(xt ne) 286.18 351.8 T
(wline sequence.) 309.54 351.8 T
3 F
(String) 389.18 351.8 T
0 F
( must be an instance of) 418.52 351.8 T
1 F
-0.17 (<string>) 90 337.8 P
0 F
-0.17 ( that can hold elements of the stream\325) 133.68 337.8 P
-0.17 (s element type. The input is inserted into) 312.16 337.8 P
3 F
-0.17 (string) 509.16 337.8 P
0 F
-0 (starting at the position) 90 323.8 P
3 F
-0 (start) 200 323.8 P
0 F
-0 (, which is an inte) 222.01 323.8 P
-0 (ger def) 303.48 323.8 P
-0 (aulting to 0. The second return v) 337.01 323.8 P
-0 (alue is) 493.01 323.8 P
1 F
-0 (#t) 527.01 323.8 P
0 F
(if the read terminated with a ne) 90 309.8 T
(wline or) 239.66 309.8 T
1 F
(#f) 282.32 309.8 T
0 F
( if the read completed by getting to the end of the) 292.32 309.8 T
(input stream.) 90 295.8 T
(If) 90 268.1 T
3 F
(gr) 100.99 268.1 T
(ow?) 111.12 268.1 T
0 F
( is true, and) 131.12 268.1 T
3 F
(string) 190.12 268.1 T
0 F
(is not lar) 221.12 268.1 T
(ge enough to hold all of the input, this function tak) 262.91 268.1 T
(es one) 506.45 268.1 T
(of tw) 90 254.1 T
(o actions. If) 114.88 254.1 T
3 F
(string) 174.86 254.1 T
0 F
( is stretch) 202.87 254.1 T
(y) 248.81 254.1 T
(, then this function gro) 254.03 254.1 T
(ws it enough to hold the input. If) 362.72 254.1 T
3 F
-0.05 (string) 90 240.1 P
0 F
-0.05 ( is not stretch) 118.01 240.1 P
-0.05 (y) 182.14 240.1 P
-0.05 (, then this function creates a ne) 187.36 240.1 P
-0.05 (w string that can hold the current contents) 335.74 240.1 P
(of) 90 226.1 T
3 F
(string) 103 226.1 T
0 F
( and the e) 131 226.1 T
(xtra input that w) 177.14 226.1 T
(ould not \336t into) 256.02 226.1 T
3 F
(string) 333.37 226.1 T
0 F
(.) 361.38 226.1 T
1 F
(Read-line-into!) 367.38 226.1 T
0 F
( returns this ne) 444.71 226.1 T
(w) 515.4 226.1 T
(string in this case. Consistent with the) 90 212.1 T
3 F
(gr) 275.34 212.1 T
(ow?) 285.47 212.1 T
0 F
( intention, when) 305.47 212.1 T
3 F
(gr) 386.14 212.1 T
(ow?) 396.26 212.1 T
0 F
( is true, if) 416.27 212.1 T
3 F
(start) 465.26 212.1 T
0 F
(is greater) 490.27 212.1 T
(than or equal to) 90 198.1 T
2 F
(string.size) 167.99 198.1 T
0 F
(,) 247.19 198.1 T
1 F
(r) 253.19 198.1 T
(ead-line-into!) 258.3 198.1 T
0 F
( gro) 326.96 198.1 T
(ws the string to accomodate the start) 345.66 198.1 T
-0.01 (inde) 90 184.1 P
-0.01 (x and the ne) 110.48 184.1 P
-0.01 (w input. If) 168.46 184.1 P
3 F
-0.01 (gr) 221.75 184.1 P
-0.01 (ow?) 231.88 184.1 P
0 F
-0.01 ( is) 251.88 184.1 P
1 F
-0.01 (#f) 265.86 184.1 P
0 F
-0.01 (\050the def) 278.85 184.1 P
-0.01 (ault\051 and string is not lar) 315.7 184.1 P
-0.01 (ge enough to hold the) 433.07 184.1 P
(input, this function signals an error) 90 170.1 T
(.) 257.33 170.1 T
3 F
(On-end-of-str) 90 142.4 T
(eam) 155.54 142.4 T
0 F
( is as for) 175.54 142.4 T
1 F
(r) 219.53 142.4 T
(ead-line) 224.64 142.4 T
0 F
(.) 265.31 142.4 T
1 F
(write-line) 72 108.7 T
3 F
(output-stream string) 124.32 108.7 T
0 F
(#key) 225.66 108.7 T
3 F
( start end) 248.99 108.7 T
7 F
(\336) 297.32 108.7 T
3 F
(\050\051) 312.17 108.7 T
0 F
([Open generic function]) 424.7 108.7 T
(Writes) 90 81 T
3 F
(string) 124.99 81 T
0 F
( to the stream follo) 153 81 T
(wed by a ne) 243.36 81 T
(wline sequence. The def) 300.71 81 T
(ault method beha) 417.22 81 T
(v) 499.63 81 T
(es as) 505.45 81 T
(though it calls) 90 67 T
1 F
(write) 161 67 T
0 F
( and then calls) 187.66 67 T
1 F
(new-line) 259.64 67 T
0 F
(, with the stream lock) 302.98 67 T
(ed during both calls.) 406.51 67 T
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(14) 532 42.62 T
0 12 Q
(If supplied,) 90 712 T
3 F
(start) 147.66 712 T
0 F
( and) 169.67 712 T
3 F
(end) 193 712 T
0 F
( delimit the portion of sequence to write to the stream. The) 210.32 712 T
(y def) 492.11 712 T
(ault) 516.31 712 T
(to 0 and) 90 698 T
2 F
(string.size) 131.66 698 T
0 F
(, respecti) 210.86 698 T
(v) 253.88 698 T
(ely) 259.7 698 T
(.) 273.59 698 T
1 F
(new-line) 72 664.65 T
3 F
( output-stream) 115.33 664.65 T
7 F
(\336) 188.66 664.65 T
3 F
(\050\051) 203.51 664.65 T
0 F
([Open generic function]) 424.7 664.65 T
(Writes a ne) 90 637.29 T
(wline sequence to the output stream.) 144.35 637.29 T
1 14 Q
(4.5  Querying Str) 72 602.61 T
(eams) 175.19 602.61 T
0 12 Q
(The follo) 72 574.59 T
(wing functions can be used to determine v) 116.03 574.59 T
(arious properties of a stream.) 318.7 574.59 T
(T) 72 547.24 T
(o implement a ne) 78.37 547.24 T
(w stream you must pro) 161.06 547.24 T
(vide methods for) 270.88 547.24 T
1 F
(str) 355.2 547.24 T
(ean-open?) 368.98 547.24 T
0 F
(,) 421.64 547.24 T
1 F
(str) 427.64 547.24 T
(eam-at-end?) 441.42 547.24 T
0 F
(, and) 505.4 547.24 T
1 F
(str) 72 533.24 T
(eam-element-type) 85.78 533.24 T
0 F
(.) 177.07 533.24 T
1 F
(stream-open?) 72 499.88 T
3 F
(stream) 144.98 499.88 T
7 F
(\336) 180.65 499.88 T
3 F
(boolean) 195.49 499.88 T
0 F
([Open generic function]) 424.7 499.88 T
(Returns) 90 472.53 T
1 F
(#t) 130.33 472.53 T
0 F
( if the stream is open, otherwise returns) 140.33 472.53 T
1 F
(#f) 332.63 472.53 T
0 F
(.) 342.62 472.53 T
1 F
(stream-element-type) 72 439.18 T
3 F
(stream) 180.29 439.18 T
7 F
( \336) 212.95 439.18 T
3 F
(element-type) 230.8 439.18 T
0 F
([Open generic function]) 424.7 439.18 T
(Returns the element type of the stream as a Dylan) 90 411.82 T
1 F
(<type>) 331.96 411.82 T
0 F
(.) 367.63 411.82 T
1 F
(stream-at-end?) 72 378.47 T
3 F
(stream) 152.98 378.47 T
7 F
( \336) 185.64 378.47 T
0 F
( <) 200.48 378.47 T
3 F
(boolean>) 210.25 378.47 T
0 F
([Open generic function]) 424.7 378.47 T
(Returns) 90 351.12 T
1 F
(#t) 130.33 351.12 T
0 F
( if the stream is at its end, otherwise returns) 140.33 351.12 T
1 F
(#f) 352.63 351.12 T
0 F
(. F) 362.63 351.12 T
(or input streams, it returns) 375.12 351.12 T
1 F
(#t) 504.44 351.12 T
0 F
( if a) 514.44 351.12 T
(call to) 90 337.12 T
1 F
(r) 122.66 337.12 T
(ead-element) 127.78 337.12 T
0 F
( with no supplied k) 189.76 337.12 T
(e) 281.64 337.12 T
(yw) 286.79 337.12 T
(ord ar) 301.33 337.12 T
(guments w) 329.44 337.12 T
(ould signal an) 381.65 337.12 T
1 F
(<end-of-str) 451.98 337.12 T
(eam-) 509.26 337.12 T
(err) 90 323.12 T
(or>) 105.77 323.12 T
0 F
(. This function dif) 123.94 323.12 T
(fers from) 210.3 323.12 T
1 F
(str) 257.62 323.12 T
(eam-input-a) 271.39 323.12 T
(v) 333.76 323.12 T
(ailable?) 339.64 323.12 T
0 F
( \050see the description of) 379.64 323.12 T
1 F
(str) 491.95 323.12 T
(eam-) 505.73 323.12 T
(input-a) 90 309.12 T
(v) 127.04 309.12 T
(ailable?) 132.92 309.12 T
0 F
(\051.) 172.93 309.12 T
(F) 90 281.77 T
(or output-only streams, this function al) 96.49 281.77 T
(w) 283.03 281.77 T
(ays returns) 291.58 281.77 T
2 F
(#f) 346.9 281.77 T
0 F
(.) 361.3 281.77 T
(It is an error to call) 90 254.41 T
1 F
(str) 184.64 254.41 T
(eam-at-end?) 198.42 254.41 T
0 F
( on a b) 262.4 254.41 T
(uf) 294.49 254.41 T
(fered stream while its b) 304.19 254.41 T
(uf) 416.59 254.41 T
(fers are held.) 426.29 254.41 T
1 14 Q
(4.6  P) 72 219.73 T
(ositionable Str) 104.77 219.73 T
(eam Pr) 191.25 219.73 T
(otocol) 234.15 219.73 T
0 12 Q
(The follo) 72 191.71 T
(wing comprises the protocol for positionable streams.) 116.03 191.71 T
-0.14 (T) 72 164.35 P
-0.14 (o implement a ne) 78.37 164.35 P
-0.14 (w positionable stream you must pro) 160.63 164.35 P
-0.14 (vide methods for) 331.38 164.35 P
1 F
-0.14 (str) 415.27 164.35 P
-0.14 (eam-position) 429.05 164.35 P
0 F
-0.14 (,) 495.05 164.35 P
1 F
-0.14 (str) 500.9 164.35 P
-0.14 (eam-) 514.68 164.35 P
(position-setter) 72 150.35 T
0 F
(, and) 144.84 150.35 T
1 F
(adjust-str) 171.17 150.35 T
(eam-position) 220.94 150.35 T
0 F
(,) 286.94 150.35 T
1 F
(str) 292.94 150.35 T
(eam-size) 306.72 150.35 T
0 F
(, and) 350.7 150.35 T
1 F
(str) 377.03 150.35 T
(eam-contents) 390.8 150.35 T
0 F
(.) 458.78 150.35 T
(A stream position can be thought of as a natural number that indicates ho) 72 123 T
(w man) 422.65 123 T
(y elements into) 454.8 123 T
-0.01 (the stream the stream\325) 72 109 P
-0.01 (s current location is. Ho) 177.61 109 P
-0.01 (we) 292.24 109 P
-0.01 (v) 305.93 109 P
-0.01 (er) 311.75 109 P
-0.01 (, it is not al) 320.6 109 P
-0.01 (w) 374.1 109 P
-0.01 (ays the case that a single inte) 382.64 109 P
-0.01 (ger) 521.69 109 P
-0.16 (contains enough information to reposition a stream. Consider the case of an \322uncompressing\323 \336le) 72 95 P
-0.31 (stream that requires additional state be) 72 81 P
-0.31 (yond simply the \336le position to be able to get the ne) 255.23 81 P
-0.31 (xt input) 500.62 81 P
(character from the compressed \336le.) 72 67 T
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(15) 532 42.62 T
0 12 Q
(The Streams Library addresses this problem by introducing a) 72 712 T
1 F
(<str) 368.29 712 T
(eam-position>) 388.91 712 T
0 F
( class, which is) 461.75 712 T
(subclassed by v) 72 698 T
(arious kinds of streams that need to maintain additional state. A stream may) 147.02 698 T
-0.04 (al) 72 684 P
-0.04 (w) 80.54 684 P
-0.04 (ays be ef) 89.09 684 P
-0.04 (\336ciently repositioned to be at a position pre) 131.36 684 P
-0.04 (viously returned by a call to) 339.13 684 P
1 F
-0.04 (str) 476.23 684 P
-0.04 (eam-posi-) 490.01 684 P
(tion) 72 670 T
0 F
( on the same stream. Furthermore, it is le) 92 670 T
(g) 288.47 670 T
(al to set the position of a stream to an inte) 294.41 670 T
(ger posi-) 494.88 670 T
(tion; ho) 72 656 T
(we) 108.71 656 T
(v) 122.4 656 T
(er) 128.22 656 T
(, for some types of streams, doing this might be arbitrarily slo) 137.06 656 T
(w) 433.08 656 T
(, perhaps requiring) 440.96 656 T
(reading the entire contents of the stream up to that point.) 72 642 T
1 F
(<stream-position>) 72 607.61 T
0 F
([Abstract class]) 465.02 607.61 T
-0.07 (This class is a subclass of) 90 579.23 P
1 F
-0.07 (<object>) 215.56 579.23 P
0 F
-0.07 (. It is used to represent a position within certain classes of) 260.56 579.23 P
(streams for which a natural number is not suf) 90 565.23 T
(\336cient to fully describe the position in the) 307 565.23 T
(stream. F) 90 551.23 T
(or e) 134.48 551.23 T
(xample, a stream that supports encryption or compression will ha) 152.63 551.23 T
(v) 465.68 551.23 T
(e some state) 471.5 551.23 T
(associated with each position in the stream, and a single inte) 90 537.23 T
(ger is not suf) 379.45 537.23 T
(\336cient to store that) 441.48 537.23 T
(state.) 90 523.23 T
(The) 90 494.85 T
1 F
(<str) 111.66 494.85 T
(eam-position>) 132.28 494.85 T
0 F
( class must be disjoint from) 205.12 494.85 T
1 F
(<integer>) 340.45 494.85 T
0 F
(.) 390.12 494.85 T
1 F
(stream-position) 72 460.46 T
3 F
(positionable-stream) 154.99 460.46 T
7 F
(\336) 253.99 460.46 T
3 F
(position::type-union\050<stream-position>,<integer>\051) 268.84 460.46 T
0 F
([Open generic function]) 72 446.46 T
-0.29 (Returns the current position of the stream for reading or writing. When the result is an inte) 90 418.08 P
-0.29 (ger) 519.45 418.08 P
-0.29 (,) 534.29 418.08 P
(it is an of) 90 404.08 T
(fset from position zero, and it is in terms of the stream\325) 134.7 404.08 T
(s element type.) 398.68 404.08 T
1 F
(stream-position-setter) 72 369.69 T
3 F
(position positionable-stream) 187.63 369.69 T
7 F
(\336) 328.31 369.69 T
3 F
(new-position::type-union\050<stream-) 343.15 369.69 T
(position>,<integer>\051) 72 355.69 T
0 F
([Open generic function]) 424.7 355.69 T
(Sets the stream\325) 90 327.31 T
(s position for reading or writing to be) 166 327.31 T
3 F
(position) 348.65 327.31 T
0 F
(.) 387.32 327.31 T
(When) 90 298.92 T
3 F
(position) 121.66 298.92 T
0 F
( is an inte) 160.33 298.92 T
(ger) 206.48 298.92 T
(, if it is less than zero or greater than) 221.33 298.92 T
2 F
(positionable-) 399.62 298.92 T
(stream.stream-size) 90 284.92 T
0 F
(, then this function signals an error) 219.6 284.92 T
(.) 385.92 284.92 T
-0.33 (When) 90 256.54 P
3 F
-0.33 (position) 121.32 256.54 P
0 F
-0.33 ( is a) 160 256.54 P
1 F
-0.33 (<str) 181.33 256.54 P
-0.33 (eam-position>) 201.95 256.54 P
0 F
-0.33 (, if it is in) 274.79 256.54 P
-0.33 (v) 319.32 256.54 P
-0.33 (alid for some reason, this function signals an) 325.02 256.54 P
(error) 90 242.54 T
(. Streams are permitted to restrict the) 112.66 242.54 T
3 F
(position) 293.29 242.54 T
0 F
( to be v) 331.97 242.54 T
(alues that were pre) 367.33 242.54 T
(viously returned) 457.33 242.54 T
(by a call to) 90 228.54 T
1 F
(str) 145.99 228.54 T
(eam-position) 159.77 228.54 T
0 F
( on the same stream.) 225.77 228.54 T
3 F
(P) 90 200.15 T
(osition) 96.37 200.15 T
0 F
( may also be) 129.05 200.15 T
1 F
(#"start") 192.37 200.15 T
0 F
(, meaning that the stream should be positioned at its start,) 235.68 200.15 T
(or) 514.67 200.15 T
1 F
(#"end") 90 186.15 T
0 F
(, meaning that the stream should be positioned at its end.) 127.99 186.15 T
(It is an error to set the position of a b) 90 157.77 T
(uf) 267.07 157.77 T
(fered stream while its b) 276.77 157.77 T
(uf) 389.17 157.77 T
(fers are held.) 398.87 157.77 T
1 F
(adjust-stream-position) 72 123.39 T
3 F
(positionable-stream delta::<integer>) 190.99 123.39 T
0 F
( #key) 372.18 123.39 T
3 F
(from) 401.51 123.39 T
7 F
(\336) 427.18 123.39 T
3 F
(new-position::type-) 442.02 123.39 T
(union\050<stream-position>,<integer>\051) 72 109.39 T
0 F
([Open generic function]) 424.7 109.39 T
-0.29 (Mo) 90 81 P
-0.29 (v) 106.49 81 P
-0.29 (es the position of the stream to) 112.31 81 P
3 F
-0.29 (delta) 260.62 81 P
0 F
-0.29 (from) 287.33 81 P
3 F
-0.29 ( fr) 310.66 81 P
-0.29 (om) 320.83 81 P
0 F
-0.29 (.) 335.5 81 P
3 F
-0.29 (fr) 341.21 81 P
-0.29 (om) 348.67 81 P
0 F
-0.29 (\325) 363.34 81 P
-0.29 (s v) 366.67 81 P
-0.29 (alue is one of the symbols) 379.75 81 P
1 F
-0.29 (#"cur-) 506.02 81 P
(r) 90 67 T
(ent") 95.11 67 T
0 F
(,) 117.77 67 T
1 F
(#"start") 123.77 67 T
0 F
(, and) 167.08 67 T
1 F
(#"end") 193.4 67 T
0 F
(, with the def) 231.4 67 T
(ault being) 294.6 67 T
1 F
(#"curr) 345.26 67 T
(ent") 380.36 67 T
0 F
(. Returns the ne) 403.02 67 T
(w position.) 478.04 67 T
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(16) 532 42.62 T
0 12 Q
-0.21 (When) 90 712 P
3 F
-0.21 (fr) 121.44 712 P
-0.21 (om) 128.91 712 P
0 F
-0.21 ( is) 143.57 712 P
1 F
-0.21 (#"start") 157.15 712 P
0 F
-0.21 (, the stream is positioned relati) 200.46 712 P
-0.21 (v) 346.42 712 P
-0.21 (e to the be) 352.24 712 P
-0.21 (ginning of the stream. When) 401.08 712 P
3 F
(fr) 90 698 T
(om) 97.46 698 T
0 F
( is) 112.13 698 T
1 F
(#"end") 126.13 698 T
0 F
(, the stream is positioned relati) 164.12 698 T
(v) 311.15 698 T
(e to its end.) 316.97 698 T
(Using) 90 672 T
1 F
(adjust-str) 121.67 672 T
(eam-position) 171.44 672 T
0 F
( to set the position of a stream to be be) 237.44 672 T
(yond its current last ele-) 422.58 672 T
(ment will ha) 90 658 T
(v) 149.76 658 T
(e the ef) 155.58 658 T
(fect of gro) 190.6 658 T
(wing the underlying aggre) 240.28 658 T
(g) 366.41 658 T
(ate to the ne) 372.35 658 T
(w size. When e) 430.37 658 T
(xtend-) 503.5 658 T
(ing the underlying aggre) 90 644 T
(g) 207.47 644 T
(ate for a stream, it is unde\336ned what will the unwritten elements of) 213.41 644 T
(the aggre) 90 630 T
(g) 134.14 630 T
(ate will contain.) 140.08 630 T
(It is an error to call) 90 604 T
1 F
(adjust-str) 184.64 604 T
(eam-position) 234.42 604 T
0 F
( on a b) 300.42 604 T
(uf) 332.51 604 T
(fered stream while its b) 342.2 604 T
(uf) 454.61 604 T
(fers are held.) 464.3 604 T
1 F
(as <integer>) 72 572 T
3 F
( stream-position) 135.34 572 T
7 F
(\336) 216.67 572 T
3 F
(<integer>) 231.52 572 T
0 F
([G. F. method]) 468.67 572 T
(Coerces a stream position object \050an object that is a subclass of) 90 546 T
1 F
(<str) 395.95 546 T
(eam-position>) 416.57 546 T
0 F
(\051 to an) 489.41 546 T
(inte) 90 532 T
(ger) 107.82 532 T
(.) 122.48 532 T
1 F
(stream-size) 72 500 T
3 F
(positionable-stream) 132.97 500 T
7 F
( \336) 228.97 500 T
0 F
( size ::) 243.82 500 T
3 F
(<integer>) 278.15 500 T
0 F
([Open generic function]) 424.7 500 T
(Returns the number of elements in) 90 474 T
3 F
(positionable-str) 258.65 474 T
(eam) 334.21 474 T
0 F
(. F) 354.2 474 T
(or input streams, this is the number) 366.7 474 T
(of elements) 90 460 T
(that were) 148.66 460 T
(a) 195.97 460 T
(v) 201.06 460 T
(ailable when the stream w) 206.76 460 T
(as made) 331.94 460 T
(, and this size is unaf) 370.93 460 T
(fected by an) 471.29 460 T
(y) 529.75 460 T
-0.22 (read operations performed on the stream.) 90 446 P
-0.22 ( F) 286.17 446 P
-0.22 (or output) 295.44 446 P
-0.22 (and input-output) 341.66 446 P
-0.22 (streams, this is the num-) 423.89 446 P
(ber of elements that) 90 432 T
( were a) 184.98 432 T
(v) 219.38 432 T
(ailable when the stream w) 225.08 432 T
(as made \050just as with input streams\051) 350.27 432 T
(plus an) 90 418 T
(y elements written past the end of the stream \050re) 124.15 418 T
(g) 354.92 418 T
(ardless of an) 360.86 418 T
(y repositioning opera-) 421.33 418 T
-0.22 (tions\051. These semantics assume there are not multiple streams open on the same source or des-) 90 404 P
(tination, shared references to \336les by other processes, alias references to underlying) 90 390 T
(sequences, or an) 90 376 T
(y other such situations; in these situations, the beha) 168.79 376 T
(vior of stream-size is) 414.88 376 T
(unde\336ned.) 90 362 T
(It is an error to call) 90 336 T
1 F
(str) 184.64 336 T
(eam-size) 198.42 336 T
0 F
( on a b) 242.4 336 T
(uf) 274.49 336 T
(fered stream while its b) 284.18 336 T
(uf) 396.59 336 T
(fers are held.) 406.28 336 T
1 F
(stream-contents) 72 304 T
3 F
( positionable-stream) 153.97 304 T
0 F
( #key) 252.97 304 T
3 F
( clear-contents?) 279.3 304 T
7 F
(\336) 359.95 304 T
0 F
( <) 371.8 304 T
3 F
(sequence) 381.56 304 T
0 F
(>) 425.54 304 T
-1.5 ([Open generic) 471.7 304 P
(function]) 72 290 T
(Returns a sequence that contains all of the stream\325) 90 264 T
(s elements) 330.62 264 T
(f) 383.95 264 T
(rom its start to its end) 387.95 264 T
(,) 492.29 264 T
( re) 495.29 264 T
(g) 507.43 264 T
(ard-) 513.37 264 T
(less of the stream\325) 90 250 T
(s current position.) 176.99 250 T
( T) 263.32 250 T
(he type of the returned sequence is as described for) 273.65 250 T
1 F
(r) 90 236 T
(ead) 95.11 236 T
0 F
(.) 113.11 236 T
(If) 90 210 T
3 F
(clear-contents?) 100.99 210 T
0 F
( is true, this function sets the size of the stream to zero, and the position to) 175.64 210 T
-0.26 (the stream\325) 90 196 P
-0.26 (s start. Thus, the ne) 142.73 196 P
-0.26 (xt call to) 234.84 196 P
1 F
-0.26 (str) 279.07 196 P
-0.26 (eam-contents) 292.85 196 P
0 F
-0.26 ( will return only the elements written) 360.82 196 P
(after the pre) 90 182 T
(vious call to s) 147.67 182 T
1 F
(tr) 214.01 182 T
(eam-contents) 223.12 182 T
0 F
(.) 291.1 182 T
1 14 Q
(4.7  Using File Str) 72 148.67 T
(eams) 178.69 148.67 T
0 12 Q
(The follo) 72 122 T
(wing are operations that pertain to \336le streams.) 116.03 122 T
52 358 54 468 R
V
52 246 54 272 R
V
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(17) 532 42.62 T
1 12 Q
(close) 72 712 T
3 F
(stream::<file-stream>) 99.66 712 T
0 F
( #key) 208.51 712 T
3 F
(abort::<boolean> wait?::<boolean>) 237.84 712 T
0 F
([G. F. method]) 468.67 712 T
(Does whate) 90 684.85 T
(v) 146.02 684.85 T
(er is necessary to \336nish the stream and frees an) 151.84 684.85 T
(y underlying system resources it) 377.27 684.85 T
(can that were held on behalf of the stream.) 90 670.85 T
-0.37 (F) 90 643.69 P
-0.37 (or \336le streams, if) 96.49 643.69 P
3 F
-0.37 (abort) 179.33 643.69 P
0 F
-0.37 ( is f) 205.33 643.69 P
-0.37 (alse \050the def) 222.47 643.69 P
-0.37 (ault\051, an) 280.25 643.69 P
-0.37 (y pending data is forced out and synchronized) 319.02 643.69 P
(with the \336le\325) 90 629.69 T
(s destination. If) 150.67 629.69 T
3 F
(abort) 228 629.69 T
0 F
( is true, then an) 254 629.69 T
(y errors caused by closing the \336le are) 327.48 629.69 T
(ignored. Furthermore, if) 90 615.69 T
3 F
(abort) 208.98 615.69 T
0 F
( is true, the \336le should be restored to its initial state if possible) 234.98 615.69 T
-0.04 (\050for e) 90 601.69 P
-0.04 (xample, on a v) 116.09 601.69 P
-0.04 (ersioned \336le system, the pre) 186.43 601.69 P
-0.04 (vious v) 320.27 601.69 P
-0.04 (ersion of the \336le should be restored as) 355.05 601.69 P
(the latest v) 90 587.69 T
(ersion\051.) 141.82 587.69 T
(It is an error for a user program to call) 90 560.54 T
1 F
(close) 276.61 560.54 T
0 F
( on a b) 301.27 560.54 T
(uf) 333.36 560.54 T
(fered stream while its b) 343.06 560.54 T
(uf) 455.46 560.54 T
(fers are held.) 465.16 560.54 T
1 F
(with-open-file) 72 527.39 T
3 F
(\050stream-var) 146.33 527.39 T
0 F
( =) 202.98 527.39 T
3 F
(locator) 215.75 527.39 T
0 F
(, #rest) 250.42 527.39 T
3 F
(keys) 282.74 527.39 T
0 F
(\051) 303.4 527.39 T
3 F
(body) 310.39 527.39 T
1 F
(end) 336.72 527.39 T
0 F
([Macro]) 500.69 527.39 T
-0.1 (The macro) 90 500.23 P
1 F
-0.1 (with-open-\336le) 144.44 500.23 P
0 F
-0.1 ( is pro) 215.11 500.23 P
-0.1 (vided as a safe mechanism for using \336le streams. It is used to) 244.72 500.23 P
(create the \336le-stream, e) 90 486.23 T
(v) 201.66 486.23 T
(aluate some block of code using the stream, and then close the) 207.36 486.23 T
(stream.) 90 472.23 T
1 F
(with-open-\336le) 127.99 472.23 T
0 F
( ensures that the \336le will be closed on e) 198.66 472.23 T
(xiting the block, if it w) 387.46 472.23 T
(as not) 497.34 472.23 T
(already closed within the block.) 90 458.23 T
3 F
(stream-var) 90 431.08 T
0 F
( is a v) 142.66 431.08 T
(ariable name; it will be bound to the created stream.) 170.69 431.08 T
3 F
(locator) 422.98 431.08 T
0 F
(should e) 460.64 431.08 T
(v) 500.68 431.08 T
(aluate) 506.38 431.08 T
(to a v) 90 417.08 T
(alid ar) 116.36 417.08 T
(gument to) 146.47 417.08 T
1 F
(as\050<locator>,) 197.81 417.08 T
3 F
(locator) 268.14 417.08 T
1 F
(\051) 302.81 417.08 T
0 F
(. The macro e) 306.8 417.08 T
(v) 372.48 417.08 T
(aluates to the v) 378.18 417.08 T
(alues of the last) 450.2 417.08 T
(e) 90 403.08 T
(xpression in) 95.15 403.08 T
3 F
(body) 156.48 403.08 T
0 F
(.) 179.03 403.08 T
(F) 72 375.92 T
(or e) 78.49 375.92 T
(xample, the follo) 96.64 375.92 T
(wing e) 178 375.92 T
(xpression yields the contents of \336le) 210.14 375.92 T
2 F
(foo.text) 382.8 375.92 T
0 F
( as a) 440.4 375.92 T
1 F
(<byte-v) 464.72 375.92 T
(ector>) 503.44 375.92 T
0 F
(:) 536.26 375.92 T
2 10 Q
(with-open-file \050fs = \050"foo.text", element-type: <byte>\051\051) 108 356.1 T
(  read-to-end\050fs\051) 108 344.1 T
(end;) 108 332.1 T
0 12 Q
(and is roughly equi) 72 305.62 T
(v) 164.03 305.62 T
(alent to:) 169.73 305.62 T
2 10 Q
(begin) 108 285.8 T
(let hidden-fs = #f;     // In case the user bashes fs variable) 126 273.79 T
(block \050\051) 126 261.79 T
(hidden-fs := make\050<file-stream>,) 144 249.79 T
(                        locator: "foo.text",) 108 236.64 T
(element-type: <byte>\051;) 378 236.64 T
(let fs = hidden-fs;) 144 224.64 T
(read-to-end\050fs\051;) 144 212.64 T
(cleanup) 126 200.64 T
(if \050hidden-fs\051 close\050hidden-fs\051 end;) 144 188.64 T
(end block;) 126 176.64 T
(end;) 108 164.64 T
1 16 Q
(5.  Locking Str) 72 123.49 T
(eams) 173.06 123.49 T
0 12 Q
(Stream locks are intended to ha) 72 95 T
(v) 222.73 95 T
(e multi-lock semantics. That is, a thread can tak) 228.55 95 T
(e the lock more) 457.73 95 T
-0 (than once, b) 72 81 P
-0 (ut the lock must be released for each time is is tak) 130.07 81 P
-0 (en. Furthermore, it is e) 369.55 81 P
-0 (xpected that) 478.68 81 P
(threads w) 72 67 T
(aiting for a stream lock should do so by blocking, not by \322spinning\323.) 118.2 67 T
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(18) 532 42.62 T
1 12 Q
(stream-locked?) 72 712 T
3 F
( stream) 150.65 712 T
7 F
(\336) 189.31 712 T
3 F
( boolean) 201.16 712 T
0 F
([Function]) 489.34 712 T
(Returns) 90 685.93 T
1 F
(#t) 130.33 685.93 T
0 F
( if the stream is lock) 140.33 685.93 T
(ed, otherwise returns) 237.86 685.93 T
1 F
(#f) 341.17 685.93 T
0 F
(.) 351.17 685.93 T
1 F
(lock-stream) 72 653.86 T
3 F
( stream) 132.65 653.86 T
7 F
(\336) 171.31 653.86 T
3 F
(\050\051) 186.16 653.86 T
0 F
([Function]) 489.34 653.86 T
(T) 90 627.79 T
(ak) 96.37 627.79 T
(es a lock on the stream, returning only after the lock has been tak) 107.58 627.79 T
(en.) 420.06 627.79 T
(In a single-threaded Dylan implementation, this function does nothing.) 90 601.71 T
1 F
(unlock-stream) 72 569.64 T
3 F
( stream) 145.99 569.64 T
7 F
(\336) 184.66 569.64 T
3 F
(\050\051) 199.5 569.64 T
0 F
([Function]) 489.34 569.64 T
(Releases the stream\325) 90 543.57 T
(s lock.  Stream locks can be tak) 187.98 543.57 T
(en more than once by a thread, so the) 339.17 543.57 T
(y) 517.94 543.57 T
(must be unlock) 90 529.57 T
(ed for each time the) 163.21 529.57 T
(y are lock) 258.34 529.57 T
(ed. This will signal an error if it tries to release) 305.53 529.57 T
(the stream\325) 90 515.57 T
(s lock, b) 142.99 515.57 T
(ut the current thread does not actually hold it.) 183.08 515.57 T
(In a single-threaded Dylan implementation, this function does nothing.) 90 489.5 T
1 F
(with-stream-locked) 72 457.43 T
3 F
(\050stream\051) 174.31 457.43 T
(body) 217.97 457.43 T
1 F
(end) 244.3 457.43 T
0 F
([Macro]) 500.69 457.43 T
(Ev) 90 431.36 T
(alutes body in a conte) 103.03 431.36 T
(xt in which the stream is lock) 207.5 431.36 T
(ed. Upon e) 348.71 431.36 T
(xiting the body) 400.85 431.36 T
(, the code) 472.74 431.36 T
(resulting from the macro unlocks the stream once, as a block cleanup.) 90 417.36 T
1 16 Q
(6.  Using Buffer) 72 376.62 T
(ed Str) 179.26 376.62 T
(eams) 220.3 376.62 T
0 12 Q
-0.08 (A goal of the streams library is to pro) 72 349.21 P
-0.08 (vide ef) 251.14 349.21 P
-0.08 (\336cient support for general use of b) 283.75 349.21 P
-0.08 (uf) 448.32 349.21 P
-0.08 (fered I/O. At the) 458.02 349.21 P
(same time, the user should not be need to be concerned with b) 72 335.21 T
(uf) 370.04 335.21 T
(fering for normal use of the) 379.74 335.21 T
(streams library) 72 321.21 T
(. F) 142.87 321.21 T
(or most uses of b) 155.36 321.21 T
(uf) 237.12 321.21 T
(fered streams, the b) 246.82 321.21 T
(uf) 340.55 321.21 T
(fering is transparent, b) 350.24 321.21 T
(ut programs) 457.98 321.21 T
(requiring more control should be able to access this functionality when appropriate.) 72 307.21 T
(A b) 72 281.14 T
(uf) 89.42 281.14 T
(fered stream maintains some sort of b) 99.12 281.14 T
(uf) 279.52 281.14 T
(fer) 289.21 281.14 T
(. All b) 301.87 281.14 T
(uf) 331.97 281.14 T
(fered streams use the sealed class) 341.66 281.14 T
1 F
-0.11 (<b) 72 267.14 P
-0.11 (uffer>) 85.27 267.14 P
0 F
-0.11 ( for their b) 117.43 267.14 P
-0.11 (uf) 167.85 267.14 P
-0.11 (fers. Users can suggest a size when creating b) 177.54 267.14 P
-0.11 (uf) 396.01 267.14 P
-0.11 (fered streams, b) 405.71 267.14 P
-0.11 (ut normally) 481.55 267.14 P
(users do not need to specify a size. The size of b) 72 253.14 T
(uf) 303.71 253.14 T
(fers is e) 313.4 253.14 T
(xpected to be appropriate for the) 350.54 253.14 T
(stream\325) 72 239.14 T
(s source or destination. Instances of the class) 107.33 239.14 T
1 F
(<b) 325.62 239.14 T
(uffer>) 338.89 239.14 T
0 F
( also contain some state informa-) 371.05 239.14 T
-0.38 (tion. This state information includes an inde) 72 225.14 P
-0.38 (x where reading or writing should be) 281.2 225.14 P
-0.38 (gin, and an inde) 456.04 225.14 P
-0.38 (x) 531.38 225.14 P
-0.31 (that is the end of input to be read or the end of a) 72 211.14 P
-0.31 (v) 298.09 211.14 P
-0.31 (ailable space to be written. Buf) 303.79 211.14 P
-0.31 (fered streams also) 451.27 211.14 P
-0.24 (maintain a) 72 197.14 P
3 F
-0.24 (held) 124.85 197.14 P
0 F
-0.24 ( state, indicating whether the application has gotten the b) 145.52 197.14 P
-0.24 (uf) 416.43 197.14 P
-0.24 (fer for a stream and not) 426.13 197.14 P
(released it yet. When a thread already holds the b) 72 183.14 T
(uf) 308.36 183.14 T
(fer for a stream, it cannot get the b) 318.06 183.14 T
(uf) 483.44 183.14 T
(fer ag) 493.14 183.14 T
(ain) 520.73 183.14 T
(\050or an) 72 169.14 T
(y other b) 100.14 169.14 T
(uf) 142.56 169.14 T
(fer for the same stream\051; this property holds for the one thread of a singleth-) 152.26 169.14 T
(readed Dylan implementation as well.) 72 155.14 T
1 14 Q
(6.1  Buffer Access Pr) 72 121.74 T
(otocol) 196.54 121.74 T
0 12 Q
(The functions described in this section are the functions that users of b) 72 95 T
(uf) 410.38 95 T
(fered streams use to) 420.07 95 T
-0 (directly manipulate the b) 72 81 P
-0 (uf) 191.4 81 P
-0 (fers used by the streams. These functions use corresponding functions) 201.1 81 P
(from the Stream Extension Protocol to actually do their w) 72 67 T
(ork. F) 349.52 67 T
(or e) 378.01 67 T
(xample,) 396.16 67 T
1 F
(get-input-b) 437.48 67 T
(uffer) 494.58 67 T
FMENDPAGE
%%EndPage: "18" 18
%%Page: "19" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(19) 532 42.62 T
0 12 Q
(calls) 72 712 T
1 F
(do-get-input-b) 97 712 T
(uffer) 170.76 712 T
0 F
( \050all Stream Extension Protocol functions are named with a) 196.08 712 T
1 F
(do-) 482.71 712 T
0 F
( pre\336x) 499.38 712 T
-0.19 (on the corresponding Buf) 72 698 P
-0.19 (fer Access Protocol function\051. Users should ne) 193.45 698 P
-0.19 (v) 415.63 698 P
-0.19 (er call the Stream Exten-) 421.45 698 P
(sion Protocol directly) 72 684 T
(.) 174.55 684 T
(Threaded Dylan implementations should place system-dependent mutual e) 72 657.79 T
(xclusion calls in the) 430.1 657.79 T
(Buf) 72 643.79 T
(fer Access Protocol functions. All streams implementations check the b) 89.7 643.79 T
(uf) 432.74 643.79 T
(fer held state in the) 442.44 643.79 T
(Buf) 72 629.79 T
(fer Access Protocol functions, and these functions should signal an error if the b) 89.7 629.79 T
(uf) 474.06 629.79 T
(fer is) 483.76 629.79 T
(already held. The separation of the Buf) 72 615.79 T
(fer Access Protocol and the Stream Extension Protocol) 259.32 615.79 T
(allo) 72 601.79 T
(ws users to more portably e) 89.7 601.79 T
(xtend the b) 221.83 601.79 T
(uf) 274.92 601.79 T
(fered stream protocol to ne) 284.62 601.79 T
(w stream types. Users) 413.62 601.79 T
(a) 72 587.79 T
(v) 77.09 587.79 T
(oid the follo) 82.85 587.79 T
(wing design and maintenance hassles:) 141.22 587.79 T
1 F
(\245) 85.5 567.57 T
0 F
(Deciding whether to write for a threaded or non-threaded Dylan implementation.) 99 567.57 T
1 F
(\245) 85.5 547.36 T
0 F
(Rewriting mutual exclusion code for each Dylan implementation.) 99 547.36 T
1 F
(\245) 85.5 527.14 T
0 F
(Having to duplicate mutual exclusion code wherever the application uses stream buffers) 99 527.14 T
(directly.) 99 513.14 T
(When users manipulate b) 72 486.93 T
(uf) 193.4 486.93 T
(fers, the) 203.1 486.93 T
(y are entirely responsible for tracking the b) 241.57 486.93 T
(uf) 448.28 486.93 T
(fer\325) 457.98 486.93 T
(s state and) 474.64 486.93 T
-0.09 (informing the stream of an) 72 472.93 P
-0.09 (y changes to the b) 199.42 472.93 P
-0.09 (uf) 285.45 472.93 P
-0.09 (fer\325) 295.15 472.93 P
-0.09 (s state. The o) 311.81 472.93 P
-0.09 (v) 374.67 472.93 P
-0.09 (erall technique for using a b) 380.49 472.93 P
-0.09 (uf) 514.08 472.93 P
-0.09 (fer) 523.77 472.93 P
(is to get the input or output b) 72 458.93 T
(uf) 210.77 458.93 T
(fer and its bounds, consume or produce data, update the b) 220.46 458.93 T
(uf) 496.84 458.93 T
(fer\325) 506.53 458.93 T
(s) 523.19 458.93 T
-0.18 (state, and then release the b) 72 444.93 P
-0.18 (uf) 202.83 444.93 P
-0.18 (fer) 212.53 444.93 P
-0.18 (. The ne) 225.19 444.93 P
-0.18 (w bounds are indicated by calling) 263.52 444.93 P
1 F
-0.18 (b) 427.09 444.93 P
-0.18 (uffer) 433.52 444.93 P
-0.18 (-next-setter) 458.4 444.93 P
0 F
-0.18 ( and) 517.03 444.93 P
1 F
(b) 72 430.93 T
(uffer) 78.43 430.93 T
(-end-setter) 103.31 430.93 T
0 F
(. Using b) 157.96 430.93 T
(uf) 201.38 430.93 T
(fers directly interoperates with using higher) 211.08 430.93 T
(-le) 420.47 430.93 T
(v) 432.83 430.93 T
(el functions such as) 438.65 430.93 T
1 F
(r) 72 416.93 T
(ead-element) 77.11 416.93 T
0 F
(,) 139.09 416.93 T
1 F
(r) 145.09 416.93 T
(ead) 150.2 416.93 T
0 F
(,) 168.2 416.93 T
1 F
(write-element) 174.2 416.93 T
0 F
(,) 244.84 416.93 T
1 F
(write) 250.84 416.93 T
0 F
(, and so on. This is because higher) 277.49 416.93 T
(-le) 442.22 416.93 T
(v) 454.58 416.93 T
(el stream opera-) 460.4 416.93 T
(tions are implemented in terms of the Buf) 72 402.93 T
(fer Access Protocol for) 272.02 402.93 T
1 F
(<b) 385.98 402.93 T
(uffer) 399.25 402.93 T
(ed-str) 424.36 402.93 T
(eam>) 454.13 402.93 T
0 F
(s. It is an) 482.29 402.93 T
(error to use a b) 72 388.93 T
(uf) 143.74 388.93 T
(fer when it is not held.) 153.43 388.93 T
1 F
(6.1.1  Useful T) 72 356.71 T
(ypes When Using Buffers) 144.78 356.71 T
(<byte>) 72 324.5 T
0 F
([Type]) 507.35 324.5 T
(This type represents limited inte) 90 298.29 T
(gers in the range from 0 to 255 inclusi) 244.48 298.29 T
(v) 427.49 298.29 T
(ely) 433.31 298.29 T
(.) 447.19 298.29 T
1 F
(<byte-vector>) 72 266.07 T
0 F
([Type]) 507.35 266.07 T
(This is a subtype of <v) 90 239.86 T
(ector> whose element-type is <byte>.) 199.58 239.86 T
1 F
(<buffer>) 72 207.64 T
0 F
([Sealed instantiable class]) 415.36 207.64 T
-0.07 (This is a subtype of <v) 90 181.43 P
-0.07 (ector>, with element type <byte>. Instances of <b) 199.23 181.43 P
-0.07 (uf) 437.85 181.43 P
-0.07 (fer> contain a data) 447.55 181.43 P
(v) 90 167.43 T
(ector and tw) 95.82 167.43 T
(o inde) 155.02 167.43 T
(x) 184.5 167.43 T
(es \050the inclusi) 190.32 167.43 T
(v) 256.68 167.43 T
(e start and the e) 262.5 167.43 T
(xclusi) 337.63 167.43 T
(v) 366 167.43 T
(e end of v) 371.82 167.43 T
(alid data in the b) 419.17 167.43 T
(uf) 498.92 167.43 T
(fer\051.) 508.62 167.43 T
-0.48 (The accessors for these inde) 90 153.43 P
-0.48 (x) 223.18 153.43 P
-0.48 (es are called b) 229 153.43 P
-0.48 (uf) 295.61 153.43 P
-0.48 (fer) 305.31 153.43 P
-0.48 (-ne) 318.39 153.43 P
-0.48 (xt and b) 333.53 153.43 P
-0.48 (uf) 370.99 153.43 P
-0.48 (fer) 380.69 153.43 P
-0.48 (-en) 393.77 153.43 P
-0.48 (d. This class supports three) 409.09 153.43 P
(init-k) 90 139.43 T
(e) 115.88 139.43 T
(yw) 121.03 139.43 T
(ords,) 135.58 139.43 T
3 F
(size:) 162.24 139.43 T
0 F
(,) 184.24 139.43 T
3 F
(ne) 190.24 139.43 T
(xt:) 201.32 139.43 T
0 F
( \050def) 213.98 139.43 T
(aults to zero\051, and) 236.18 139.43 T
3 F
(end:) 325.16 139.43 T
0 F
( \050def) 346.49 139.43 T
(aults to zero\051.) 368.69 139.43 T
1 F
(<buffer-index>) 72 107.22 T
0 F
([Type]) 507.35 107.22 T
-0.14 (This is a subtype of <inte) 90 81 P
-0.14 (ger> \050cf: Harlequin\325) 210.88 81 P
-0.14 (s and CMU\325) 306.68 81 P
-0.14 (s proposal for <inte) 365.06 81 P
-0.14 (ger>\051. All b) 458.22 81 P
-0.14 (uf) 514.12 81 P
-0.14 (fer) 523.82 81 P
(inde) 90 67 T
(x return v) 110.48 67 T
(alues and parameters are of this type.) 156.84 67 T
52 135.43 54 161.43 R
V
FMENDPAGE
%%EndPage: "19" 19
%%Page: "20" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(20) 532 42.62 T
1 12 Q
(6.1.2  Using Buffers f) 72 712 T
(or Input) 179.03 712 T
0 F
(get-input-buffer \050<buffered-stream>, #key wait?:, bytes:\051) 72 677.91 T
([Function]) 489.34 677.91 T
(=> \050false-or\050<buffer>\051\051) 108 661.82 T
-0.2 (This is a function. It calls do-get-input-b) 90 633.73 P
-0.2 (uf) 282.89 633.73 P
-0.2 (fer) 292.58 633.73 P
-0.2 (, which users should ne) 305.42 633.73 P
-0.2 (v) 416.65 633.73 P
-0.2 (er call directly) 422.47 633.73 P
-0.2 (, to return) 490.6 633.73 P
(a b) 90 619.73 T
(uf) 104.09 619.73 T
(fer for the stream. The stream e) 113.78 619.73 T
(xtension function signals an error if the stream is an out-) 264.55 619.73 T
(put only stream, or if it cannot return a b) 90 605.73 T
(uf) 284.4 605.73 T
(fer for an) 294.1 605.73 T
(y reason.) 338.56 605.73 T
(W) 90 577.64 T
(ait? is a <boolean> and def) 100.37 577.64 T
(aults to #t. It indicates whether get-input-b) 230.09 577.64 T
(uf) 434.16 577.64 T
(fer should ensure) 443.86 577.64 T
(that there is v) 90 563.64 T
(alid data in the input b) 154.69 563.64 T
(uf) 262.12 563.64 T
(fer) 271.81 563.64 T
(, blocking for input if necessary) 284.65 563.64 T
(. When w) 436.51 563.64 T
(ait? is #f,) 482.71 563.64 T
-0.1 (this function returns the stream\325) 90 549.64 P
-0.1 (s current b) 242.23 549.64 P
-0.1 (uf) 292.43 549.64 P
-0.1 (fer in whate) 302.13 549.64 P
-0.1 (v) 358.93 549.64 P
-0.1 (er state it is in. When w) 364.75 549.64 P
-0.1 (ait? is #t, do-) 477.65 549.64 P
(get-input-b) 90 535.64 T
(uf) 143.09 535.64 T
(fer w) 152.78 535.64 T
(aits until there is some v) 177.65 535.64 T
(alid data in the b) 294.35 535.64 T
(uf) 374.1 535.64 T
(fer) 383.8 535.64 T
(. If do-get-input-b) 396.46 535.64 T
(uf) 482.53 535.64 T
(fer needs) 492.23 535.64 T
(to w) 90 521.64 T
(ait for v) 110.88 521.64 T
(alid data, and it encounters the end of the stream before an) 148.57 521.64 T
(y v) 428.99 521.64 T
(alid data arri) 443.69 521.64 T
(v) 504.04 521.64 T
(es,) 509.86 521.64 T
(then do-get-input-b) 90 507.64 T
(uf) 182.75 507.64 T
(fer returns #f. When the user supplies bytes, w) 192.44 507.64 T
(ait? has no ef) 415.61 507.64 T
(fect.) 478.96 507.64 T
-0.15 (Bytes is an <inte) 90 479.55 P
-0.15 (ger> or #f, and it is the minimum number of bytes that must be present in the) 169.81 479.55 P
-0.04 (b) 90 465.55 P
-0.04 (uf) 95.76 465.55 P
-0.04 (fer when it is returned. If do-get-input-b) 105.46 465.55 P
-0.04 (uf) 297.25 465.55 P
-0.04 (fer cannot return a b) 306.94 465.55 P
-0.04 (uf) 403.83 465.55 P
-0.04 (fer with the speci\336ed min-) 413.52 465.55 P
(imum number of bytes, it signals an <incomplete-read-error>. V) 90 451.55 T
(alues supplied for bytes) 397.49 451.55 T
-0.26 (should be small relati) 90 437.55 P
-0.26 (v) 191.91 437.55 P
-0.26 (e to a b) 197.73 437.55 P
-0.26 (uf) 231.69 437.55 P
-0.26 (fer\325) 241.39 437.55 P
-0.26 (s size. If users need lar) 258.04 437.55 P
-0.26 (ge numbers of bytes read in at once,) 365.81 437.55 P
(the) 90 423.55 T
(y should specify a lar) 104.48 423.55 T
(ge b) 206.92 423.55 T
(uf) 227 423.55 T
(fer size when making a stream and not specify an) 236.7 423.55 T
(y v) 473.46 423.55 T
(alues for) 488.16 423.55 T
(the bytes k) 90 409.55 T
(e) 141.88 409.55 T
(yw) 147.02 409.55 T
(ord parameter) 161.57 409.55 T
(. When bytes is not #f, get-input-b) 227.88 409.55 T
(uf) 392.29 409.55 T
(fer may block for input if) 401.99 409.55 T
(necessary) 90 395.55 T
(.) 135.86 395.55 T
(If an application\325) 90 367.45 T
(s thread calls this function, and another thread already holds an) 171.98 367.45 T
(y b) 474.74 367.45 T
(uf) 489.5 367.45 T
(fer for) 499.2 367.45 T
-0.17 (the stream, then this function might block. Multi-threaded implementations should e) 90 353.45 P
-0.17 (v) 492.68 353.45 P
-0.17 (entually) 498.5 353.45 P
(return. In multi-threaded implementations this function calls lock-stream before calling do-) 90 339.45 T
(get-input-b) 90 325.45 T
(uf) 143.09 325.45 T
(fer) 152.78 325.45 T
(, and it does not release the lock.) 165.62 325.45 T
-0.35 (If an application\325) 90 297.36 P
-0.35 (s thread calls this function, and that same thread already holds the b) 171.29 297.36 P
-0.35 (uf) 491.82 297.36 P
-0.35 (fer) 501.52 297.36 P
-0.35 (, this) 514.36 297.36 P
-0.34 (situation is a re-entranc) 90 283.36 P
-0.34 (y programmer error) 201.1 283.36 P
-0.34 (. The stream cannot return the b) 294.38 283.36 P
-0.34 (uf) 445.04 283.36 P
-0.34 (fer and guarantee) 454.74 283.36 P
(that its state is up to date with input consumption that occurred between the \336rst call to this) 90 269.36 T
(function and the current call. Implementations should detect and signal this error for safety) 90 255.36 T
(.) 525.14 255.36 T
(release-input-buffer \050<buffered-stream>\051 => \050\051) 72 221.27 T
([Function]) 489.34 221.27 T
(This is a function. Users call this to announce that the) 90 193.18 T
(y are done using the stream\325) 347.46 193.18 T
(s current) 482.44 193.18 T
(b) 90 179.18 T
(uf) 95.76 179.18 T
(fer) 105.46 179.18 T
(. There may still be v) 118.12 179.18 T
(alid input in the b) 219.8 179.18 T
(uf) 304.24 179.18 T
(fer e) 313.93 179.18 T
(v) 335.28 179.18 T
(en though the user is done with it. When) 341.1 179.18 T
-0.03 (users ha) 90 165.18 P
-0.03 (v) 128.72 165.18 P
-0.03 (e consumed input from the b) 134.54 165.18 P
-0.03 (uf) 271.81 165.18 P
-0.03 (fer) 281.5 165.18 P
-0.03 (, then the) 294.34 165.18 P
-0.03 (y must update the b) 338.43 165.18 P
-0.03 (uf) 432.07 165.18 P
-0.03 (fer\325) 441.77 165.18 P
-0.03 (s state by assign-) 458.43 165.18 P
-0.28 (ing to b) 90 151.18 P
-0.28 (uf) 125.88 151.18 P
-0.28 (fer) 135.58 151.18 P
-0.28 (-ne) 148.66 151.18 P
-0.28 (xt before releasing the input b) 163.8 151.18 P
-0.28 (uf) 305.82 151.18 P
-0.28 (fer) 315.52 151.18 P
-0.28 (. When a user of the Buf) 328.18 151.18 P
-0.28 (fer Access Protocol) 443.86 151.18 P
(sets b) 90 137.18 T
(uf) 116.76 137.18 T
(fer) 126.46 137.18 T
(-end while holding stream b) 139.54 137.18 T
(uf) 273.95 137.18 T
(fer) 283.64 137.18 T
(, the results are unde\336ned.) 296.48 137.18 T
(If the application does not hold the b) 90 109.09 T
(uf) 266.08 109.09 T
(fer) 275.77 109.09 T
(, then this function signals an error) 288.61 109.09 T
(.) 454.93 109.09 T
(Release-input-b) 90 81 T
(uf) 165.74 81 T
(fer calls do-release-input-b) 175.44 81 T
(uf) 304.49 81 T
(fer) 314.18 81 T
(, which users ne) 327.02 81 T
(v) 404.04 81 T
(er directly call, so that the) 409.86 81 T
(stream can update an) 90 67 T
(y record k) 190.79 67 T
(eeping or management tasks it has.) 239.32 67 T
FMENDPAGE
%%EndPage: "20" 20
%%Page: "21" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(21) 532 42.62 T
0 12 Q
(In multi-threaded implementations, release-input-b) 90 712 T
(uf) 334.39 712 T
(fer releases the lock obtained in get-) 344.09 712 T
(input-b) 90 698 T
(uf) 124.43 698 T
(fer) 134.12 698 T
(.) 146.78 698 T
(with-input-buffer \050buffer-var = <exp>, #key wait?:, bytes:\051 <body> end;) 72 665.79 T
([Macro]) 500.69 665.79 T
(This is a macro. It calls get-input-b) 90 639.57 T
(uf) 258.07 639.57 T
(fer on e) 267.77 639.57 T
(xp, w) 304.24 639.57 T
(ait?, and bytes, binding b) 330.78 639.57 T
(uf) 451.2 639.57 T
(fer) 460.9 639.57 T
(-v) 473.98 639.57 T
(ar to the) 483.67 639.57 T
(result. W) 90 625.57 T
(ith-input-b) 133.51 625.57 T
(uf) 184.61 625.57 T
(fer then e) 194.3 625.57 T
(x) 239.44 625.57 T
(ecutes the body within the scope of this binding. After the) 245.26 625.57 T
-0.06 (body e) 90 611.57 P
-0.06 (x) 122.09 611.57 P
-0.06 (ecutes, with-input-b) 127.91 611.57 P
-0.06 (uf) 223.6 611.57 P
-0.06 (fer calls release-input-b) 233.3 611.57 P
-0.06 (uf) 346.24 611.57 P
-0.06 (fer and returns an) 355.93 611.57 P
-0.06 (y v) 439.88 611.57 P
-0.06 (alues returned by) 454.53 611.57 P
(body) 90 597.57 T
(.) 113.22 597.57 T
(next-input-buffer \050<buffered-stream>, #key wait?:, bytes:\051) 72 565.36 T
([Function]) 489.34 565.36 T
(=> \050false-or\050<buffer>\051\051) 108 551.14 T
-0.12 (This is a function. Users call this function while already holding a stream\325) 90 524.93 P
-0.12 (s b) 443.5 524.93 P
-0.12 (uf) 456.81 524.93 P
-0.12 (fer to get more) 466.51 524.93 P
-0.08 (input. If the application does not hold the stream\325) 90 510.93 P
-0.08 (s b) 325.69 510.93 P
-0.08 (uf) 339.04 510.93 P
-0.08 (fer) 348.73 510.93 P
-0.08 (, this function signals an error) 361.57 510.93 P
-0.08 (. Users) 503.83 510.93 P
-0.03 (must update the b) 90 496.93 P
-0.03 (uf) 174.68 496.93 P
-0.03 (fer\325) 184.38 496.93 P
-0.03 (s state by assigning to b) 201.03 496.93 P
-0.03 (uf) 315 496.93 P
-0.03 (fer) 324.69 496.93 P
-0.03 (-ne) 337.77 496.93 P
-0.03 (xt before getting the ne) 352.92 496.93 P
-0.03 (xt b) 463.95 496.93 P
-0.03 (uf) 482.02 496.93 P
-0.03 (fer; other-) 491.71 496.93 P
-0.18 (wise, it might seem that the current b) 90 482.93 P
-0.18 (uf) 266.46 482.93 P
-0.18 (fer still has v) 276.15 482.93 P
-0.18 (alid input in it. When b) 337.63 482.93 P
-0.18 (uf) 447.81 482.93 P
-0.18 (fer) 457.51 482.93 P
-0.18 (-ne) 470.59 482.93 P
-0.18 (xt = b) 485.73 482.93 P
-0.18 (uf) 513.23 482.93 P
-0.18 (fer) 522.92 482.93 P
-0.18 (-) 536 482.93 P
(end, there is no v) 90 468.93 T
(alid input remaining in the current b) 172.02 468.93 T
(uf) 345.1 468.93 T
(fer) 354.79 468.93 T
(. When a user of the Buf) 367.45 468.93 T
(fer Access) 484.79 468.93 T
(Protocol sets b) 90 454.93 T
(uf) 160.43 454.93 T
(fer) 170.12 454.93 T
(-end while holding stream b) 183.2 454.93 T
(uf) 317.62 454.93 T
(fer) 327.31 454.93 T
(, the results are unde\336ned.) 340.15 454.93 T
-0.48 (Ne) 90 428.71 P
-0.48 (xt-input-b) 103.81 428.71 P
-0.48 (uf) 151.57 428.71 P
-0.48 (fer calls do-ne) 161.27 428.71 P
-0.48 (xt-input-b) 228.77 428.71 P
-0.48 (uf) 276.53 428.71 P
-0.48 (fer) 286.23 428.71 P
-0.48 (, which users ne) 299.07 428.71 P
-0.48 (v) 374.65 428.71 P
-0.48 (er call directly) 380.48 428.71 P
-0.48 (, to get more input.) 448.05 428.71 P
(The stream e) 90 414.71 T
(xtension function may return a ne) 151.8 414.71 T
(w <b) 313.14 414.71 T
(uf) 337.33 414.71 T
(fer> object or the current one with) 347.03 414.71 T
(b) 90 400.71 T
(uf) 95.76 400.71 T
(fer) 105.46 400.71 T
(-ne) 118.54 400.71 T
(xt and b) 133.68 400.71 T
(uf) 172.1 400.71 T
(fer) 181.8 400.71 T
(-end updated to re\337ect the location of the ne) 194.88 400.71 T
(w input data. Users should) 406.54 400.71 T
-0.08 (not mak) 90 386.71 P
-0.08 (e an) 128.8 386.71 P
-0.08 (y assumptions about which option a stream\325) 148.21 386.71 P
-0.08 (s implementation uses. do-ne) 358.41 386.71 P
-0.08 (xt-input-) 498 386.71 P
(b) 90 372.71 T
(uf) 95.76 372.71 T
(fer signals an error when the current b) 105.46 372.71 T
(uf) 288.16 372.71 T
(fer is not held for input.) 297.85 372.71 T
(W) 90 346.5 T
(ait? and bytes are the same as for get-input-b) 100.37 346.5 T
(uf) 315.41 346.5 T
(fer) 325.1 346.5 T
(.) 337.76 346.5 T
(input-a) 72 320.29 T
(v) 105.76 320.29 T
(ailable-at-source? \050<b) 111.46 320.29 T
(uf) 216.28 320.29 T
(fered-stream>\051 => \050<boolean>\051) 225.97 320.29 T
(This is a function. It returns #t when the b) 90 294.07 T
(uf) 291.07 294.07 T
(fered stream\325) 300.77 294.07 T
(s source has an) 363.74 294.07 T
(y a) 435.88 294.07 T
(v) 449.96 294.07 T
(ailable input or) 455.66 294.07 T
-0.25 (when the stream is at the end of its source. If this function returns #t, then the ne) 90 280.07 P
-0.25 (xt call to ne) 471.26 280.07 P
-0.25 (xt-) 526.67 280.07 P
(input-b) 90 266.07 T
(uf) 124.43 266.07 T
(fer will not block.) 134.12 266.07 T
(Users call this function while holding a stream\325) 90 239.86 T
(s b) 316.98 239.86 T
(uf) 330.41 239.86 T
(fer) 340.1 239.86 T
(. If the application does not hold the) 352.76 239.86 T
(stream\325) 90 225.86 T
(s b) 125.33 225.86 T
(uf) 138.76 225.86 T
(fer) 148.45 225.86 T
(, this function signals an error) 161.29 225.86 T
(.) 303.95 225.86 T
-0.06 (This function calls do-input-a) 90 199.64 P
-0.06 (v) 231.89 199.64 P
-0.06 (ailable-at-source?, which users ne) 237.59 199.64 P
-0.06 (v) 399.71 199.64 P
-0.06 (er call directly) 405.53 199.64 P
-0.06 (, to check for) 473.94 199.64 P
(input. The stream e) 90 185.64 T
(xtension function signals an error when the current b) 182.47 185.64 T
(uf) 435.52 185.64 T
(fer is not held for) 445.21 185.64 T
(input.) 90 171.64 T
1 F
(6.1.3  Using Buffers f) 72 139.43 T
(or Output) 179.03 139.43 T
0 F
(get-output-buffer \050<buffered-stream>, #key bytes:\051 => \050<buffer>\051) 72 107.22 T
([Function]) 489.34 107.22 T
(This is a function. It calls do-get-output-b) 90 81 T
(uf) 290.08 81 T
(fer) 299.77 81 T
(, which users should ne) 312.61 81 T
(v) 424.63 81 T
(er call directly) 430.45 81 T
(, to) 498.98 81 T
(return a b) 90 67 T
(uf) 135.74 67 T
(fer for the stream. The stream e) 145.44 67 T
(xtension function signals an error if the stream is) 296.21 67 T
FMENDPAGE
%%EndPage: "21" 21
%%Page: "22" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(22) 532 42.62 T
0 12 Q
-0.38 (an input only stream, or if it cannot return a b) 90 712 P
-0.38 (uf) 304.3 712 P
-0.38 (fer for an) 314 712 P
-0.38 (y reason. The resulting b) 357.7 712 P
-0.38 (uf) 474.94 712 P
-0.38 (fer is ne) 484.63 712 P
-0.38 (v) 522.23 712 P
-0.38 (er) 528.05 712 P
(completely full of pending output.) 90 698 T
(Bytes is an <inte) 90 671.42 T
(ger>, and it is the minimum number of bytes that must be a) 170.26 671.42 T
(v) 454.44 671.42 T
(ailable for writ-) 460.14 671.42 T
-0 (ing in the b) 90 657.42 P
-0 (uf) 144.09 657.42 P
-0 (fer when it is returned. Bytes def) 153.78 657.42 P
-0 (aults to 1. If do-get-output-b) 311.28 657.42 P
-0 (uf) 447.34 657.42 P
-0 (fer cannot return) 457.04 657.42 P
(a b) 90 643.42 T
(uf) 104.09 643.42 T
(fer with the speci\336ed minimum number of bytes, it signals an error) 113.78 643.42 T
(. V) 434.42 643.42 T
(alues supplied for) 447.76 643.42 T
(bytes should be small relati) 90 629.42 T
(v) 221.03 629.42 T
(e to a b) 226.85 629.42 T
(uf) 261.6 629.42 T
(fer\325) 271.3 629.42 T
(s size. If users need to write lar) 287.95 629.42 T
(ge numbers of bytes) 437.03 629.42 T
-0.07 (at once, the) 90 615.42 P
-0.07 (y should specify a lar) 144.67 615.42 P
-0.07 (ge b) 246.83 615.42 P
-0.07 (uf) 266.85 615.42 P
-0.07 (fer size when making a stream and not specify an) 276.55 615.42 P
-0.07 (y v) 512.71 615.42 P
-0.07 (al-) 527.34 615.42 P
(ues for the bytes k) 90 601.42 T
(e) 177.86 601.42 T
(yw) 183.01 601.42 T
(ord parameter) 197.56 601.42 T
(.) 263.87 601.42 T
(If an application\325) 90 574.83 T
(s thread calls this function, and another thread already holds an) 171.98 574.83 T
(y b) 474.74 574.83 T
(uf) 489.5 574.83 T
(fer for) 499.2 574.83 T
-0.17 (the stream, then this function might block. Multi-threaded implementations should e) 90 560.83 P
-0.17 (v) 492.68 560.83 P
-0.17 (entually) 498.5 560.83 P
(return. In multi-threaded implementations this function calls lock-stream before calling do-) 90 546.83 T
(get-input-b) 90 532.83 T
(uf) 143.09 532.83 T
(fer) 152.78 532.83 T
(, and it does not release the lock.) 165.62 532.83 T
-0.35 (If an application\325) 90 506.25 P
-0.35 (s thread calls this function, and that same thread already holds the b) 171.29 506.25 P
-0.35 (uf) 491.82 506.25 P
-0.35 (fer) 501.52 506.25 P
-0.35 (, this) 514.36 506.25 P
-0.34 (situation is a re-entranc) 90 492.25 P
-0.34 (y programmer error) 201.1 492.25 P
-0.34 (. The stream cannot return the b) 294.38 492.25 P
-0.34 (uf) 445.04 492.25 P
-0.34 (fer and guarantee) 454.74 492.25 P
-0.12 (that its state is up to date with output written between the \336rst call to this function and the cur-) 90 478.25 P
(rent call. Implementations should detect and signal this error) 90 464.25 T
(.) 380.3 464.25 T
(release-output-buffer \050<buffered-stream>\051 => \050\051) 72 431.67 T
([Function]) 489.34 431.67 T
(This is a function. Users call this to announce that the) 90 405.08 T
(y are done using the stream\325) 347.46 405.08 T
(s current) 482.44 405.08 T
(b) 90 391.08 T
(uf) 95.76 391.08 T
(fer) 105.46 391.08 T
(. When users ha) 118.12 391.08 T
(v) 194.52 391.08 T
(e written output to the b) 200.34 391.08 T
(uf) 315.1 391.08 T
(fer) 324.79 391.08 T
(, then the) 337.63 391.08 T
(y must update the b) 381.78 391.08 T
(uf) 475.54 391.08 T
(fer\325) 485.23 391.08 T
(s state) 501.89 391.08 T
(by assigning to b) 90 377.08 T
(uf) 171.43 377.08 T
(fer) 181.13 377.08 T
(-ne) 194.21 377.08 T
(xt before releasing the b) 209.35 377.08 T
(uf) 325.08 377.08 T
(fer) 334.78 377.08 T
(. When a user of the Buf) 347.44 377.08 T
(fer Access Pro-) 464.77 377.08 T
(tocol sets b) 90 363.08 T
(uf) 143.76 363.08 T
(fer) 153.46 363.08 T
(-end while holding stream b) 166.54 363.08 T
(uf) 300.95 363.08 T
(fer) 310.64 363.08 T
(, the results are unde\336ned.) 323.48 363.08 T
(If the application does not hold the b) 90 336.5 T
(uf) 266.08 336.5 T
(fer) 275.77 336.5 T
(, then this function signals an error) 288.61 336.5 T
(.) 454.93 336.5 T
(Release-output-b) 90 309.92 T
(uf) 171.74 309.92 T
(fer calls do-release-output-b) 181.44 309.92 T
(uf) 316.49 309.92 T
(fer) 326.18 309.92 T
(, which users ne) 339.02 309.92 T
(v) 416.04 309.92 T
(er directly call, so that) 421.86 309.92 T
(the stream can update an) 90 295.92 T
(y record k) 208.45 295.92 T
(eeping or management tasks it has.) 256.98 295.92 T
(In multi-threaded implementations, release-output-b) 90 269.33 T
(uf) 340.39 269.33 T
(fer releases the lock obtained in get-) 350.09 269.33 T
(output-b) 90 255.33 T
(uf) 130.43 255.33 T
(fer) 140.12 255.33 T
(.) 152.78 255.33 T
(with-output-buffer \050buffer-var = <exp>, #key bytes:\051 <body> end) 72 222.75 T
([Macro]) 500.69 222.75 T
(This is a macro. It calls get-output-b) 90 196.17 T
(uf) 264.07 196.17 T
(fer on e) 273.77 196.17 T
(xp and bytes, binding b) 310.24 196.17 T
(uf) 422.33 196.17 T
(fer) 432.02 196.17 T
(-v) 445.1 196.17 T
(ar to the result,) 454.8 196.17 T
(and e) 90 182.17 T
(x) 115.48 182.17 T
(ecutes the body within the scope of this binding. After the body e) 121.3 182.17 T
(x) 434.75 182.17 T
(ecutes, with-output-) 440.57 182.17 T
(b) 90 168.17 T
(uf) 95.76 168.17 T
(fer calls release-output-b) 105.46 168.17 T
(uf) 224.51 168.17 T
(fer and returns an) 234.2 168.17 T
(y v) 318.32 168.17 T
(alues returned by body) 333.02 168.17 T
(.) 441.89 168.17 T
(next-output-buffer \050<buffered-stream>, #key bytes:\051 => \050<buffer>\051) 72 135.58 T
([Function]) 489.34 135.58 T
(This is a function. Users call this function while already holding a stream\325) 90 109 T
(s b) 444.96 109 T
(uf) 458.39 109 T
(fer to get the) 468.08 109 T
(ne) 90 95 T
(xt b) 101.15 95 T
(uf) 119.24 95 T
(fer for writing output. If the application does not hold the stream\325) 128.94 95 T
(s b) 442.24 95 T
(uf) 455.66 95 T
(fer) 465.36 95 T
(, this func-) 478.2 95 T
(tion signals an error) 90 81 T
(. Users must update the b) 184.99 81 T
(uf) 306.07 81 T
(fer\325) 315.77 81 T
(s state by assigning to b) 332.42 81 T
(uf) 446.52 81 T
(fer) 456.22 81 T
(-ne) 469.3 81 T
(xt before) 484.44 81 T
(getting the ne) 90 67 T
(xt b) 155.15 67 T
(uf) 173.24 67 T
(fer; otherwise, it might seem that the current b) 182.94 67 T
(uf) 405 67 T
(fer is empty \050or has no) 414.7 67 T
FMENDPAGE
%%EndPage: "22" 22
%%Page: "23" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(23) 532 42.62 T
0 12 Q
(ne) 90 712 T
(w output in it\051. When b) 101.03 712 T
(uf) 212.78 712 T
(fer) 222.48 712 T
(-ne) 235.56 712 T
(xt = b) 250.7 712 T
(uf) 278.57 712 T
(fer) 288.26 712 T
(-end, there is no pending output in the current) 301.34 712 T
-0.33 (b) 90 698 P
-0.33 (uf) 95.76 698 P
-0.33 (fer) 105.46 698 P
-0.33 (. When a user of the Buf) 118.12 698 P
-0.33 (fer Access Protocol sets b) 233.49 698 P
-0.33 (uf) 355.91 698 P
-0.33 (fer) 365.61 698 P
-0.33 (-end while holding stream b) 378.69 698 P
-0.33 (uf) 511.79 698 P
-0.33 (fer) 521.49 698 P
-0.33 (,) 534.33 698 P
(the results are unde\336ned.) 90 684 T
(This function calls do-ne) 90 657.31 T
(xt-output-b) 209.47 657.31 T
(uf) 263.23 657.31 T
(fer) 272.93 657.31 T
(, which users ne) 285.77 657.31 T
(v) 362.78 657.31 T
(er call directly) 368.6 657.31 T
(, to get the ne) 437.14 657.31 T
(xt) 501.95 657.31 T
(b) 90 643.31 T
(uf) 95.76 643.31 T
(fer) 105.46 643.31 T
(. The stream e) 118.12 643.31 T
(xtension function may return a ne) 185.92 643.31 T
(w <b) 347.26 643.31 T
(uf) 371.45 643.31 T
(fer> object or the current one) 381.14 643.31 T
-0.02 (with b) 90 629.31 P
-0.02 (uf) 120.08 629.31 P
-0.02 (fer) 129.78 629.31 P
-0.02 (-ne) 142.86 629.31 P
-0.02 (xt updated to indicate the ne) 158 629.31 P
-0.02 (xt a) 293.39 629.31 P
-0.02 (v) 310.8 629.31 P
-0.02 (ailable element to be written for output. Users) 316.5 629.31 P
(should not mak) 90 615.31 T
(e an) 163.88 615.31 T
(y assumptions about which option a stream\325) 183.36 615.31 T
(s implementation uses. do-) 394.02 615.31 T
(ne) 90 601.31 T
(xt-output-b) 101.15 601.31 T
(uf) 154.91 601.31 T
(fer signals an error when the current b) 164.6 601.31 T
(uf) 347.3 601.31 T
(fer is not held for input.) 357 601.31 T
(do-ne) 90 574.61 T
(xt-output-b) 117.14 574.61 T
(uf) 170.9 574.61 T
(fer may force output to a stream\325) 180.6 574.61 T
(s destination, b) 337.9 574.61 T
(ut it is not required to do) 409.99 574.61 T
-0.35 (so. It might empty the current b) 90 560.61 P
-0.35 (uf) 239.31 560.61 P
-0.35 (fer into secondary b) 249.01 560.61 P
-0.35 (uf) 343.35 560.61 P
-0.35 (fers \050or processing\051 or get a ne) 353.05 560.61 P
-0.35 (w b) 497.26 560.61 P
-0.35 (uf) 514.33 560.61 P
-0.35 (fer) 524.03 560.61 P
(from a queue, while not forcing an) 90 546.61 T
(y output.) 256.12 546.61 T
-0.17 (Bytes are the same as for get-output-b) 90 519.92 P
-0.17 (uf) 271.36 519.92 P
-0.17 (fer) 281.05 519.92 P
-0.17 (, b) 293.89 519.92 P
-0.17 (ut do-ne) 305.48 519.92 P
-0.17 (xt-output-b) 344.79 519.92 P
-0.17 (uf) 398.55 519.92 P
-0.17 (fer signals an) 408.24 519.92 P
-0.17 (y error associ-) 471.7 519.92 P
(ated with this parameter) 90 505.92 T
(.) 204.98 505.92 T
(force-output-buffers \050<buffered-stream>\051 => \050\051) 72 473.23 T
([Function]) 489.34 473.23 T
(This is a function. It forces out the contents of an) 90 446.54 T
(y output b) 325.45 446.54 T
(uf) 373.88 446.54 T
(fers held by the stream. Before) 383.58 446.54 T
(calling this function, users must update the current b) 90 432.54 T
(uf) 341.4 432.54 T
(fer\325) 351.1 432.54 T
(s state by assigning to b) 367.75 432.54 T
(uf) 481.85 432.54 T
(fer) 491.54 432.54 T
(-ne) 504.62 432.54 T
(xt;) 519.77 432.54 T
(otherwise, it might seem that the b) 90 418.54 T
(uf) 255.42 418.54 T
(fer is empty \050or has no ne) 265.12 418.54 T
(w output in it\051. When b) 387.46 418.54 T
(uf) 499.21 418.54 T
(fer) 508.91 418.54 T
(-) 521.99 418.54 T
(ne) 90 404.54 T
(xt = b) 101.15 404.54 T
(uf) 129.01 404.54 T
(fer) 138.71 404.54 T
(-end, there is no pending output in the current b) 151.79 404.54 T
(uf) 380.18 404.54 T
(fer) 389.88 404.54 T
(. When a user of the Buf) 402.54 404.54 T
(fer) 519.88 404.54 T
(Access Protocol sets b) 90 390.54 T
(uf) 197.41 390.54 T
(fer) 207.11 390.54 T
(-end while holding stream b) 220.19 390.54 T
(uf) 354.6 390.54 T
(fer) 364.3 390.54 T
(, the results are unde\336ned.) 377.14 390.54 T
(Users call this function while holding a stream\325) 90 363.85 T
(s b) 316.98 363.85 T
(uf) 330.41 363.85 T
(fer) 340.1 363.85 T
(. If the application does not hold the) 352.76 363.85 T
(stream\325) 90 349.85 T
(s b) 125.33 349.85 T
(uf) 138.76 349.85 T
(fer) 148.45 349.85 T
(, this function signals an error) 161.29 349.85 T
(.) 303.95 349.85 T
(This function calls do-force-output-b) 90 323.15 T
(uf) 267.4 323.15 T
(fers, which users ne) 277.09 323.15 T
(v) 372.1 323.15 T
(er call directly) 377.92 323.15 T
(, to force output.) 446.45 323.15 T
(The stream e) 90 309.15 T
(xtension function signals an error when the current b) 151.8 309.15 T
(uf) 404.84 309.15 T
(fer is not held for output.) 414.54 309.15 T
(synchronize \050<buffered-stream>\051 => \050\051) 72 276.46 T
([Function]) 489.34 276.46 T
(This is a function. It does whate) 90 249.77 T
(v) 243.35 249.77 T
(er it can to ensure that forced output reaches the stream\325) 249.17 249.77 T
(s) 517.76 249.77 T
(destination. Before calling this function, users may w) 90 235.77 T
(ant to call force-output-b) 346.19 235.77 T
(uf) 465.59 235.77 T
(fers.) 475.28 235.77 T
(Users call this function while holding a stream\325) 90 209.08 T
(s b) 316.98 209.08 T
(uf) 330.41 209.08 T
(fer) 340.1 209.08 T
(. If the application does not hold the) 352.76 209.08 T
(stream\325) 90 195.08 T
(s b) 125.33 195.08 T
(uf) 138.76 195.08 T
(fer) 148.45 195.08 T
(, this function signals an error) 161.29 195.08 T
(.) 303.95 195.08 T
-0.41 (This function calls do-synchronize, which users ne) 90 168.39 P
-0.41 (v) 330.86 168.39 P
-0.41 (er call directly) 336.68 168.39 P
-0.41 (, to synchronize output. The) 404.4 168.39 P
(stream e) 90 154.39 T
(xtension function signals an error when the current b) 130.14 154.39 T
(uf) 383.18 154.39 T
(fer is not held for output.) 392.88 154.39 T
1 F
(6.1.4  Copying to and fr) 72 121.69 T
(om Buffers) 192.79 121.69 T
0 F
(All generic sequence operations w) 72 95 T
(ork on b) 237.17 95 T
(uf) 276.92 95 T
(fers. The Streams Library pro) 286.62 95 T
(vides some additional) 428.74 95 T
-0.45 (functions to compensate for lacking functionality in Dylan\325) 72 81 P
-0.45 (s sequence operations. There are also a) 353.18 81 P
(fe) 72 67 T
(w functions for updating b) 81.02 67 T
(uf) 208.1 67 T
(fer state.) 217.8 67 T
FMENDPAGE
%%EndPage: "23" 23
%%Page: "24" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(24) 532 42.62 T
0 12 Q
(buffer-next \050<buffer>\051 => \050<buffer-index>\051) 72 712 T
([Function]) 489.34 712 T
-0.38 (This is a function. F) 90 684.56 P
-0.38 (or b) 184.65 684.56 P
-0.38 (uf) 203.04 684.56 P
-0.38 (fers held for input, this function returns the location of the ne) 212.73 684.56 P
-0.38 (xt v) 501.71 684.56 P
-0.38 (alid) 519.38 684.56 P
-0.21 (byte of input to be read, and when it equals b) 90 670.56 P
-0.21 (uf) 303.97 670.56 P
-0.21 (fer) 313.67 670.56 P
-0.21 (-end, there is no more v) 326.75 670.56 P
-0.21 (alid input data in the) 439.38 670.56 P
(b) 90 656.56 T
(uf) 95.76 656.56 T
(fer) 105.46 656.56 T
(.) 118.12 656.56 T
(F) 90 629.12 T
(or b) 96.49 629.12 T
(uf) 115.25 629.12 T
(fers held for output, this function returns the location of the ne) 124.94 629.12 T
(xt free byte that should) 424.06 629.12 T
(be written in the b) 90 615.12 T
(uf) 177.08 615.12 T
(fer) 186.78 615.12 T
(, and when it equals b) 199.62 615.12 T
(uf) 304.03 615.12 T
(fer) 313.73 615.12 T
(-end, the b) 326.81 615.12 T
(uf) 377.56 615.12 T
(fer is full of pending output.) 387.25 615.12 T
(This accessor function is set\325able.) 90 587.69 T
(buffer-end \050<buffer>\051 => \050<buffer-index>\051) 72 554.25 T
([Function]) 489.34 554.25 T
(This is a function. F) 90 526.81 T
(or b) 186.16 526.81 T
(uf) 204.91 526.81 T
(fers held for input, this function returns the inde) 214.61 526.81 T
(x of the e) 444.73 526.81 T
(xclusi) 489.54 526.81 T
(v) 517.91 526.81 T
(e) 523.73 526.81 T
(end of data to be read.) 90 512.81 T
(F) 90 485.38 T
(or b) 96.49 485.38 T
(uf) 115.25 485.38 T
(fers held for output, this function returns the size of the b) 124.94 485.38 T
(uf) 398.66 485.38 T
(fer) 408.36 485.38 T
(.) 421.02 485.38 T
(This accessor function is set\325able.) 90 457.94 T
([) 90 430.5 T
3 F
(Implementor\325) 94 430.5 T
(s Note: user) 158.83 430.5 T
(s of the Buf) 216.71 430.5 T
(fer Access Pr) 270.83 430.5 T
(otocol functions should not set this acces-) 334.27 430.5 T
(sor because the r) 90 416.5 T
(esults ar) 171.88 416.5 T
(e unde\336ned; howe) 212.44 416.5 T
(ver) 299.57 416.5 T
(, str) 313.56 416.5 T
(eam implementor) 331.79 416.5 T
(s may need to set this) 415.32 416.5 T
(accessor inside Str) 90 402.5 T
(eam Extension Pr) 180.22 402.5 T
(otocol methods, whic) 265 402.5 T
(h e) 366.48 402.5 T
(xecute while user) 380.57 402.5 T
(s ar) 463.76 402.5 T
(e holding a) 481.66 402.5 T
(str) 90 388.5 T
(eam b) 102.23 388.5 T
(uf) 130.98 388.5 T
(fer) 140.1 388.5 T
(.) 152.1 388.5 T
0 F
(]) 155.1 388.5 T
1 F
(buffer-subsequence) 72 355.06 T
3 F
(buffer result-class start end) 175 355.06 T
7 F
(\336) 310.33 355.06 T
3 F
(<sequence>) 325.18 355.06 T
0 F
([Open generic function) 424.7 355.06 T
(]) 536 355.06 T
(Returns an instance of the class) 90 327.62 T
3 F
(r) 243.97 327.62 T
(esult-class) 248.2 327.62 T
0 F
(, which will be \336lled with the elements from the) 298.86 327.62 T
(b) 90 313.62 T
(uf) 95.76 313.62 T
(fer from) 105.46 313.62 T
3 F
(start) 148.1 313.62 T
0 F
( up to) 170.11 313.62 T
3 F
(end) 200.45 313.62 T
0 F
( \050which are both) 217.78 313.62 T
1 F
(<b) 299.09 313.62 T
(uffer) 312.36 313.62 T
(-index>) 337.24 313.62 T
0 F
(\325es\051.) 376.08 313.62 T
(This should be implemented as ef) 90 286.19 T
(\336ciently as possible, and there should be sealed methods) 251.35 286.19 T
(when) 90 272.19 T
3 F
(r) 118.99 272.19 T
(esult-class) 123.22 272.19 T
0 F
( is) 173.88 272.19 T
1 F
(<byte-string>) 187.88 272.19 T
0 F
(,) 257.56 272.19 T
1 F
(<byte-v) 263.56 272.19 T
(ector>) 302.27 272.19 T
0 F
(, and) 335.09 272.19 T
1 F
(<b) 361.42 272.19 T
(uffer>) 374.69 272.19 T
0 F
(.) 406.85 272.19 T
1 F
(copy-into-buffer!) 72 238.75 T
3 F
(buffer buffer-start sequence) 162.98 238.75 T
0 F
( #key) 296.3 238.75 T
3 F
(start end) 325.63 238.75 T
7 F
(\336) 370.97 238.75 T
3 F
(\050\051) 385.81 238.75 T
0 F
([Open generic function]) 424.7 238.75 T
(Copies the portion of) 90 211.31 T
3 F
(sequence) 194.66 211.31 T
0 F
( gi) 238.64 211.31 T
(v) 250.68 211.31 T
(en by) 256.5 211.31 T
3 F
(start) 285.83 211.31 T
0 F
( and) 307.84 211.31 T
3 F
(end) 331.16 211.31 T
0 F
( into) 348.49 211.31 T
3 F
(b) 373.16 211.31 T
(uf) 378.92 211.31 T
(fer) 388.04 211.31 T
0 F
(. The b) 400.72 211.31 T
(uf) 434.14 211.31 T
(fer is \336lled starting) 443.83 211.31 T
-0.38 (at) 90 197.31 P
3 F
-0.38 (b) 101.28 197.31 P
-0.38 (uf) 107.04 197.31 P
-0.38 (fer) 116.16 197.31 P
-0.38 (-start) 129.26 197.31 P
0 F
-0.38 (.) 155.26 197.31 P
3 F
-0.38 (start) 160.88 197.31 P
0 F
-0.38 ( def) 182.89 197.31 P
-0.38 (aults to 0, and) 200.71 197.31 P
3 F
-0.38 (end) 269.52 197.31 P
0 F
-0.38 ( def) 286.85 197.31 P
-0.38 (aults to the end of) 304.67 197.31 P
3 F
-0.38 (sequence) 391.76 197.31 P
0 F
-0.38 (.) 435.74 197.31 P
-0.38 (If) 441.36 197.31 P
3 F
-0.38 (b) 451.97 197.31 P
-0.38 (uf) 457.73 197.31 P
-0.38 (fer) 466.85 197.31 P
0 F
-0.38 ( is too small) 480.18 197.31 P
(to hold the data, an error is signalled.) 90 183.31 T
(This should be implemented as ef) 90 155.88 T
(\336ciently as possible, and there should be sealed methods) 251.35 155.88 T
(when) 90 141.88 T
3 F
(sequence) 118.99 141.88 T
0 F
(is an instance of) 165.97 141.88 T
1 F
(<byte-string>) 246.62 141.88 T
0 F
(,) 316.3 141.88 T
1 F
(<byte-v) 322.3 141.88 T
(ector>) 361.01 141.88 T
0 F
(, or) 393.83 141.88 T
1 F
(<b) 412.82 141.88 T
(uffer>) 426.1 141.88 T
0 F
(.) 458.26 141.88 T
1 F
(copy-from-buffer!) 72 108.44 T
3 F
(buffer buffer-start sequence) 168.3 108.44 T
0 F
(key) 304.62 108.44 T
3 F
(start end) 324.95 108.44 T
7 F
(\336) 370.28 108.44 T
3 F
(\050\051) 385.13 108.44 T
0 F
([Open generic function]) 424.7 108.44 T
(Copies a portion of) 90 81 T
3 F
(b) 185.33 81 T
(uf) 191.09 81 T
(fer) 200.21 81 T
0 F
( starting at) 213.54 81 T
3 F
(b) 267.2 81 T
(uf) 272.96 81 T
(fer) 282.08 81 T
(-start) 295.18 81 T
0 F
(. The number of elements copied is deter-) 321.18 81 T
(mined by) 90 67 T
3 F
(start) 138 67 T
0 F
( and) 160.01 67 T
3 F
(end) 183.34 67 T
0 F
(, which are inde) 200.66 67 T
(x) 277.13 67 T
(es into) 282.95 67 T
3 F
(sequence) 317.62 67 T
0 F
(. The sequence is \336lled starting at) 361.6 67 T
FMENDPAGE
%%EndPage: "24" 24
%%Page: "25" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(25) 532 42.62 T
3 12 Q
(start) 90 712 T
0 F
(, which def) 112.01 712 T
(aults to 0, and ending at) 165.54 712 T
3 F
(end) 283.2 712 T
0 F
(, which def) 300.53 712 T
(aults to) 354.06 712 T
2 F
(sequence.size) 392.06 712 T
0 F
(.) 485.66 712 T
(If) 491.66 712 T
3 F
(sequence) 90 698 T
0 F
( is too small to hold the data, an error is signalled.) 133.98 698 T
(This should be implemented as ef) 90 672 T
(\336ciently as possible, and there should be sealed methods) 251.35 672 T
(when) 90 658 T
3 F
(sequence) 118.99 658 T
0 F
(is an instance of) 165.97 658 T
1 F
(<byte-string>) 246.62 658 T
0 F
(,) 316.3 658 T
1 F
(<byte-v) 322.3 658 T
(ector>) 361.01 658 T
0 F
(, or) 393.83 658 T
1 F
(<b) 412.82 658 T
(uffer>) 426.1 658 T
0 F
(.) 458.26 658 T
1 14 Q
(6.2  Str) 72 624.67 T
(eam Extension Pr) 114.91 624.67 T
(otocol) 220.43 624.67 T
0 12 Q
(These are the generic functions to which implementors of streams add methods when e) 72 598 T
(xtending) 489.41 598 T
(the stream protocol to ne) 72 584 T
(w subclasses of <b) 191.02 584 T
(uf) 281.2 584 T
(fered-stream>. Note, though the close function is) 290.89 584 T
(not described here, you might need to add a method to it when implementing a ne) 72 570 T
(w stream.) 463.66 570 T
1 F
(6.2.1  Cr) 72 538 T
(eating new Input or Input-output Str) 115.78 538 T
(eams) 305.24 538 T
0 F
(do-get-input-buffer \050<buffered-stream>, #key wait?:, bytes:\051) 72 506 T
([Open Generic Function]) 419.36 506 T
(=> \050false-or\050<buffer>\051\051) 108 492 T
(This is a generic function. Its methods implement get-input-b) 90 466 T
(uf) 384.07 466 T
(fer for ne) 393.77 466 T
(w streams. These) 438.11 466 T
-0.05 (methods can assume that the stream is lock) 90 452 P
-0.05 (ed, so no other thread can access it. Methods must) 296.52 452 P
(signal an error if the stream is an output only stream, or if the) 90 438 T
(y cannot return a b) 384.44 438 T
(uf) 474.18 438 T
(fer for an) 483.88 438 T
(y) 528.34 438 T
(reason. If this function\325) 90 424 T
(s methods cannot return a b) 201.98 424 T
(uf) 334.06 424 T
(fer with the speci\336ed minimum number) 343.75 424 T
(of bytes, the) 90 410 T
(y signals an <incomplete-read-error>.) 148.81 410 T
(do-release-input-buffer \050<buffered-stream>\051 => \050\051) 72 378 T
([Open Generic Function]) 419.36 378 T
-0.21 (This is a generic function. Its methods implement release-input-b) 90 352 P
-0.21 (uf) 401.04 352 P
-0.21 (fer for ne) 410.73 352 P
-0.21 (w streams. These) 454.65 352 P
(methods can assume that the stream is lock) 90 338 T
(ed, so no other thread can access it.) 296.86 338 T
(do-next-input-buffer \050<buffered-stream>, #key wait?:, bytes:\051) 72 306 T
([Open Generic Function]) 419.36 306 T
(=> \050false-or\050<buffer>\051\051) 108 292 T
(This is a generic function. Its methods implement ne) 90 266 T
(xt-input-b) 342.13 266 T
(uf) 389.89 266 T
(fer for ne) 399.59 266 T
(w streams. These) 443.93 266 T
-0.05 (methods can assume that the stream is lock) 90 252 P
-0.05 (ed, so no other thread can access it. Methods must) 296.52 252 P
-0.26 (signal an error when the) 90 238 P
-0.26 (y cannot return a b) 204.73 238 P
-0.26 (uf) 293.41 238 P
-0.26 (fer for an) 303.11 238 P
-0.26 (y reason, cannot return a b) 347.04 238 P
-0.26 (uf) 472.78 238 P
-0.26 (fer with the) 482.47 238 P
-0.16 (minimum number of bytes speci\336ed by bytes \050<incomplete-read-error>\051, or the current b) 90 224 P
-0.16 (uf) 514.14 224 P
-0.16 (fer) 523.84 224 P
(is not held for input.) 90 210 T
(do-input-available-at-source? \050<buffered-stream>\051 => \050<boolean>\051) 72 178 T
([Open Generic Function]) 419.36 178 T
-0.09 (This is a generic function. Its methods implement input-a) 90 152 P
-0.09 (v) 364.02 152 P
-0.09 (ailable-at-source? for ne) 369.72 152 P
-0.09 (w streams.) 485.86 152 P
-0.36 (These methods can assume that the stream is lock) 90 138 P
-0.36 (ed, so no other thread can access it. Methods) 325.63 138 P
(must signal an error when the current b) 90 124 T
(uf) 278.05 124 T
(fer is not held for input.) 287.75 124 T
FMENDPAGE
%%EndPage: "25" 25
%%Page: "26" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(26) 532 42.62 T
1 12 Q
(6.2.2  Cr) 72 712 T
(eating new Output or Input-output Str) 115.78 712 T
(eams) 313.91 712 T
0 F
(do-get-output-buffer \050<buffered-stream>, #key bytes:\051) 72 678.47 T
([Open Generic Function]) 419.36 678.47 T
(=> \050<buffer>\051) 108 662.93 T
(This is a generic function. Its methods implement get-output-b) 90 635.4 T
(uf) 390.07 635.4 T
(fer for ne) 399.77 635.4 T
(w streams. These) 444.11 635.4 T
-0.05 (methods can assume that the stream is lock) 90 621.4 P
-0.05 (ed, so no other thread can access it. Methods must) 296.52 621.4 P
(signal an error if the stream is an input only stream, or if the) 90 607.4 T
(y cannot return a b) 378.44 607.4 T
(uf) 468.18 607.4 T
(fer for an) 477.88 607.4 T
(y) 522.34 607.4 T
-0.26 (reason. The resulting b) 90 593.4 P
-0.26 (uf) 198.97 593.4 P
-0.26 (fer is ne) 208.67 593.4 P
-0.26 (v) 246.51 593.4 P
-0.26 (er completely full of pending output. If this function\325) 252.33 593.4 P
-0.26 (s meth-) 504.59 593.4 P
(ods cannot return a b) 90 579.4 T
(uf) 190.4 579.4 T
(fer with the speci\336ed minimum number of bytes, the) 200.1 579.4 T
(y must signal an) 452.23 579.4 T
(error) 90 565.4 T
(.) 112.66 565.4 T
(do-release-output-buffer \050<buffered-stream>\051 => \050\051) 72 531.87 T
([Open Generic Function]) 419.36 531.87 T
(This is a generic function. Its methods implement release-output-b) 90 504.33 T
(uf) 408.72 504.33 T
(fer for ne) 418.42 504.33 T
(w streams.) 462.76 504.33 T
(These methods can assume that the stream is lock) 90 490.33 T
(ed, so no other thread can access it.) 328.51 490.33 T
(do-next-output-buffer \050<buffered-stream>, #key bytes:\051) 72 456.8 T
([Open Generic Function]) 419.36 456.8 T
(=> \050<buffer>\051) 108 441.27 T
(This is a generic function. Its methods implement ne) 90 413.73 T
(xt-output-b) 342.13 413.73 T
(uf) 395.89 413.73 T
(fer for ne) 405.59 413.73 T
(w streams. These) 449.93 413.73 T
(methods must signal an error when the) 90 399.73 T
(y cannot return a b) 275.8 399.73 T
(uf) 365.53 399.73 T
(fer for an) 375.23 399.73 T
(y reason, or the current) 419.69 399.73 T
(b) 90 385.73 T
(uf) 95.76 385.73 T
(fer is not held for output. If this function\325) 105.46 385.73 T
(s methods cannot return a b) 303.11 385.73 T
(uf) 435.18 385.73 T
(fer with the speci-) 444.88 385.73 T
(\336ed minimum number of bytes, the) 90 371.73 T
(y must signal an error) 259.15 371.73 T
(.) 363.14 371.73 T
(Methods may force output to a stream\325) 90 344.2 T
(s destination, b) 275.98 344.2 T
(ut the) 348.07 344.2 T
(y are not required to do so. The) 374.89 344.2 T
(y) 525.35 344.2 T
-0.33 (might empty the current b) 90 330.2 P
-0.33 (uf) 213.09 330.2 P
-0.33 (fer into secondary b) 222.79 330.2 P
-0.33 (uf) 317.2 330.2 P
-0.33 (fers \050or processing\051 or get a ne) 326.89 330.2 P
-0.33 (w b) 471.22 330.2 P
-0.33 (uf) 488.32 330.2 P
-0.33 (fer from) 498.01 330.2 P
(a queue, while not forcing an) 90 316.2 T
(y output.) 229.79 316.2 T
(do-force-output-buffers \050<buffered-stream>\051 => \050\051) 72 282.67 T
([Open Generic Function]) 419.36 282.67 T
-0.2 (This is a generic function. Its methods implement force-output-b) 90 255.13 P
-0.2 (uf) 398.45 255.13 P
-0.2 (fers for ne) 408.14 255.13 P
-0.2 (w streams. Meth-) 456.75 255.13 P
(ods must signal an error when the current b) 90 241.13 T
(uf) 297.72 241.13 T
(fer is not held for output.) 307.42 241.13 T
(do-synchronize \050<buffered-stream>\051 => \050\051) 72 207.6 T
([Open Generic Function]) 419.36 207.6 T
(This is a generic function. Its methods implement synchronize for ne) 90 180.07 T
(w streams. These meth-) 419.99 180.07 T
(ods must signal an error when the current b) 90 166.07 T
(uf) 297.72 166.07 T
(fer is not held for output.) 307.42 166.07 T
1 16 Q
(7.  Conditions) 72 123.87 T
0 12 Q
-0.18 (The class de\336nitions for the error conditions are as follo) 72 95 P
-0.18 (ws. There is no reco) 339.02 95 P
-0.18 (v) 435.08 95 P
-0.18 (ery protocol de\336ned) 440.9 95 P
(for an) 72 81 T
(y of these errors. Ev) 100.14 81 T
(ery condition described in this section that tak) 196.93 81 T
(es an init-k) 417.79 81 T
(e) 471 81 T
(yw) 476.15 81 T
(ord has a) 490.69 81 T
(slot accessor for the v) 72 67 T
(alue supplied, and the name of the accessor function is the name of the con-) 176.34 67 T
FMENDPAGE
%%EndPage: "26" 26
%%Page: "27" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(27) 532 42.62 T
0 12 Q
(dition class \050without the angle brack) 72 712 T
(ets\051 appended with a h) 246.19 712 T
(yphen and the name of the init-k) 354.11 712 T
(e) 509.96 712 T
(y-) 515.11 712 T
(w) 72 698 T
(ord.) 80.54 698 T
1 F
(<end-of-stream-error>) 72 663.64 T
0 F
([Error]) 506.69 663.64 T
-0.21 (This error is signalled when one of the read functions reaches the end of the input stream. It is) 90 635.29 P
(a subclass of) 90 621.29 T
1 F
(<err) 154.32 621.29 T
(or>) 176.93 621.29 T
0 F
(. It tak) 195.1 621.29 T
(es one init k) 225.97 621.29 T
(e) 284.18 621.29 T
(yw) 289.33 621.29 T
(ord,) 303.88 621.29 T
1 F
(str) 325.87 621.29 T
(eam:) 339.65 621.29 T
0 F
(.) 364.97 621.29 T
1 F
(<incomplete-read-error>) 72 586.93 T
0 F
([Error]) 506.69 586.93 T
(This class is a subclass of) 90 558.57 T
1 F
(<end-of-str) 215.99 558.57 T
(eam-err) 273.26 558.57 T
(or>) 314.35 558.57 T
0 F
(. This error is signalled when input func-) 332.52 558.57 T
(tions are reading a required number of elements b) 90 544.57 T
(ut the) 328.37 544.57 T
(y read the end of the stream before) 355.19 544.57 T
-0.3 (completing the reqired read. It tak) 90 530.57 P
-0.3 (es tw) 251.66 530.57 P
-0.3 (o additional init-k) 276.23 530.57 P
-0.3 (e) 361.51 530.57 P
-0.3 (yw) 366.66 530.57 P
-0.3 (ords,) 381.21 530.57 P
1 F
-0.3 (sequence:) 407.57 530.57 P
0 F
-0.3 ( and) 457.56 530.57 P
1 F
-0.3 (count:) 480.28 530.57 P
0 F
-0.3 (. The) 512.95 530.57 P
(sequence is whate) 90 516.57 T
(v) 176.34 516.57 T
(er input w) 182.16 516.57 T
(as read before reaching the end of the stream. The count is the) 230.7 516.57 T
(number of elements the user requested to be read.) 90 502.57 T
1 F
(<file-error>) 72 468.21 T
0 F
([Error]) 506.69 468.21 T
-0.16 (This is the base class for all \336le I/O-related errors. It is a subclass of) 90 439.86 P
1 F
-0.16 (<err) 416.83 439.86 P
-0.16 (or>) 439.44 439.86 P
0 F
-0.16 (. It tak) 457.61 439.86 P
-0.16 (es one init) 488.15 439.86 P
(k) 90 425.86 T
(e) 95.88 425.86 T
(yw) 101.03 425.86 T
(ord,) 115.57 425.86 T
1 F
(locator:) 137.57 425.86 T
0 F
(.) 177.55 425.86 T
1 F
(<file-exists-error>) 72 391.5 T
0 F
([Error]) 506.69 391.5 T
(This error is signalled when an output \336le stream creation function tries to create a \336le that) 90 363.14 T
(already e) 90 349.14 T
(xists. It is a subclass of) 133.46 349.14 T
1 F
(<\336le-err) 247.13 349.14 T
(or>) 289.07 349.14 T
0 F
(.) 307.24 349.14 T
1 F
(<file-does-not-exist-error>) 72 314.79 T
0 F
([Error]) 506.69 314.79 T
(This error is signalled when an input \336le stream creation function tries to read a \336le that does) 90 286.43 T
(not e) 90 272.43 T
(xist. It is a subclass of) 113.48 272.43 T
1 F
(<\336le-err) 222.48 272.43 T
(or>) 264.42 272.43 T
0 F
(.) 282.59 272.43 T
1 F
(<invalid-file-permissions-error>) 72 238.07 T
0 F
([Error]) 506.69 238.07 T
(This error is signalled when one of the \336le stream creation functions tries to access a \336le in a) 90 209.72 T
(manner for which the user does not ha) 90 195.72 T
(v) 273.38 195.72 T
(e permission. It is a subclass of) 279.2 195.72 T
1 F
(<\336le-err) 431.86 195.72 T
(or>) 473.8 195.72 T
0 F
(.) 491.96 195.72 T
1 16 Q
(8.  Wrapper Str) 72 152.69 T
(eams) 180.14 152.69 T
0 12 Q
(One common programming problem is of con) 72 123 T
(v) 292.16 123 T
(ersions applied to streams, such as accessing the) 297.98 123 T
-0.05 (characters in an EBCDIC \336le as their ASCII equi) 72 109 P
-0.05 (v) 307.95 109 P
-0.05 (alents or encrypting/decrypting the contents of) 313.65 109 P
(a \336le. One w) 72 95 T
(ay to handle such tasks is via) 133.2 95 T
3 F
(wr) 275.52 95 T
(apper str) 288.01 95 T
(eams) 331.24 95 T
0 F
(. Wrapper streams hold on to some) 355.9 95 T
-0.17 (underlying stream, dele) 72 81 P
-0.17 (g) 184.46 81 P
-0.17 (ating to it most of the operations that implement streaming. The wrapper) 190.4 81 P
(stream then carries out appropriate processing in its o) 72 67 T
(wn implementations of the streaming proto-) 328.32 67 T
FMENDPAGE
%%EndPage: "27" 27
%%Page: "28" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(28) 532 42.62 T
0 12 Q
(col. The Dylan Streams Library includes a base class called) 72 712 T
1 F
(<wrapper) 360.94 712 T
(-str) 411.32 712 T
(eam>) 429.1 712 T
0 F
( upon which) 457.26 712 T
(other wrapping streams can be implemented.) 72 698 T
2 10 Q
(define class <wrapper-stream> \050<stream>\051) 108 676.55 T
(slot inner-stream :: <stream>, required-init-keyword:) 126 664.55 T
(inner-stream:) 450 664.55 T
(;) 528 664.55 T
(end class;) 108 652.55 T
0 12 Q
(A subclass of) 72 624.43 T
1 F
(<wrapper) 139.66 624.43 T
(-str) 190.04 624.43 T
(eam>) 207.82 624.43 T
0 F
( can \322pass on\323 functions such as) 235.98 624.43 T
1 F
(r) 393.61 624.43 T
(ead-element) 398.72 624.43 T
0 F
( and) 460.7 624.43 T
1 F
(write-ele-) 484.03 624.43 T
(ment) 72 610.43 T
0 F
( by simply dele) 97.99 610.43 T
(g) 171.48 610.43 T
(ating these operations to the inner stream:) 177.42 610.43 T
2 10 Q
(define method read-element \050ws :: <io-wrapper-stream>\051;) 108 588.98 T
(read-element\050ws.inner-stream\051) 126 576.98 T
(end;) 108 564.98 T
(define method write-element \050ws :: <io-wrapper-stream>, element\051;) 108 538.19 T
(write-element\050ws.inner-stream,element\051) 126 526.19 T
(end;) 108 514.19 T
0 12 Q
(Assuming that) 72 486.07 T
1 F
(<io-wrapper) 144.67 486.07 T
(-str) 208.39 486.07 T
(eam>) 226.16 486.07 T
0 F
( dele) 254.33 486.07 T
(g) 277.14 486.07 T
(ates all other operations to its inner stream, the fol-) 283.08 486.07 T
-0.23 (lo) 72 472.07 P
-0.23 (wing w) 81.04 472.07 P
-0.23 (ould suf) 116.35 472.07 P
-0.23 (\336ce to implement a 16-bit Unicode character stream wrapping an 8-bit character) 154.83 472.07 P
(stream.) 72 458.07 T
2 10 Q
(define class <unicode-stream> \050<io-wrapper-stream>\051 end;) 108 436.62 T
(define method read-element) 108 412.62 T
(    \050s :: <unicode-stream>\051 => ch :: <unicode-character>;) 108 397.83 T
(  with-stream-locked \050s\051) 108 385.83 T
(    let first-char = read-element\050s.inner-stream\051;) 108 371.05 T
(    let second-char = read-element\050s.inner-stream\051) 108 359.05 T
(  end;) 108 347.05 T
(  convert-ascii-pair-to-unicode\050first-char, second-char\051) 108 332.26 T
(end;) 108 320.26 T
(define method write-element) 108 296.26 T
(    \050s :: <unicode-stream>, c :: <character>\051;) 108 281.48 T
(  let \050first-char, second-char\051 = convert-unicode-to-ascii-pair\050c\051;) 108 269.48 T
(  with-stream-locked \050s\051) 108 257.48 T
(    write-element\050s.inner-stream, first-char\051;) 108 242.69 T
(    write-element\050s.inner-stream, second-char\051) 108 230.69 T
(  end;) 108 218.69 T
(  c) 108 203.91 T
(end;) 108 191.91 T
(define method stream-position) 108 167.91 T
(    \050s :: <unicode-stream>\051 =>) 108 153.12 T
(p :: <integer>;) 296.5 153.12 T
(  truncate/\050stream-position\050s.inner-stream\051, 2\051) 108 141.12 T
(end;) 108 129.12 T
(define method stream-position-setter) 108 105.12 T
(    \050p :: <integer>,s :: <unicode-stream>\051;) 108 90.33 T
(  stream-position\050s.inner-stream\051 := p * 2) 108 78.33 T
(end;) 108 66.33 T
52 661.21 54 671.21 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "28" 28
%%Page: "29" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(29) 532 42.62 T
1 14 Q
(8.1  Wrapper Str) 72 710.67 T
(eams and Delegation) 173.63 710.67 T
0 12 Q
-0.19 (One problem with wrapper streams is the need for a wrapper stream to intercept methods in) 72 683.8 P
-0.19 (v) 508.22 683.8 P
-0.19 (ok) 513.98 683.8 P
-0.19 (ed) 525.86 683.8 P
(by its inner stream. F) 72 669.8 T
(or e) 173.48 669.8 T
(xample, consider tw) 191.63 669.8 T
(o h) 288.49 669.8 T
(ypothetical streams,) 303.43 669.8 T
1 F
(<interacti) 402.42 669.8 T
(v) 452.46 669.8 T
(e-str) 458.34 669.8 T
(eam>) 481.44 669.8 T
0 F
( and) 509.6 669.8 T
1 F
(<dialog-str) 72 655.8 T
(eam>) 127.96 655.8 T
0 F
( \050which is a subclass of) 156.12 655.8 T
1 F
(<wrapper) 270.77 655.8 T
(-str) 321.16 655.8 T
(eam>) 338.93 655.8 T
0 F
(\051. Both of these classes ha) 367.09 655.8 T
(v) 491.5 655.8 T
(e a) 497.32 655.8 T
(method called prompt.) 72 641.8 T
1 F
(<interacti) 183.32 641.8 T
(v) 233.36 641.8 T
(e-str) 239.24 641.8 T
(eam>) 262.34 641.8 T
0 F
( specializes) 290.51 641.8 T
1 F
(r) 348.49 641.8 T
(ead) 353.6 641.8 T
0 F
( thus:) 371.6 641.8 T
2 10 Q
(define method read \050s :: <interactive-stream>, n :: <integer>,) 108 622.93 T
(                    #key on-end-of-stream\051;) 108 610.93 T
(  prompt\050s\051;) 108 598.93 T
(  next-method\050\051) 108 586.93 T
(end;) 108 574.93 T
0 12 Q
-0.05 (If a) 72 549.4 P
1 F
-0.05 (<dialog-str) 91.22 549.4 P
-0.05 (eam>) 147.18 549.4 P
0 F
-0.05 (is used to wrap an) 178.08 549.4 P
1 F
-0.05 (<interacti) 267.49 549.4 P
-0.05 (v) 317.53 549.4 P
-0.05 (e-str) 323.41 549.4 P
-0.05 (eam>) 346.51 549.4 P
0 F
-0.05 ( then an in) 374.67 549.4 P
-0.05 (v) 424.38 549.4 P
-0.05 (ocation of) 430.14 549.4 P
1 F
-0.05 (r) 481.37 549.4 P
-0.05 (ead) 486.48 549.4 P
0 F
-0.05 (on the) 507.43 549.4 P
1 F
(<dialog-str) 72 535.4 T
(eam>) 127.96 535.4 T
0 F
( will call prompt on the inner) 156.12 535.4 T
1 F
(<interacti) 299.11 535.4 T
(v) 349.15 535.4 T
(e-str) 355.03 535.4 T
(eam>) 378.13 535.4 T
0 F
(, not on the) 406.3 535.4 T
1 F
(<dialog-) 463.3 535.4 T
-0.19 (str) 72 521.4 P
-0.19 (eam>) 85.78 521.4 P
0 F
-0.19 (, as desired. The problem is that the) 113.94 521.4 P
1 F
-0.19 (<dialog-str) 286.42 521.4 P
-0.19 (eam>) 342.37 521.4 P
0 F
-0.19 ( w) 370.54 521.4 P
-0.19 (ants to dele) 381.89 521.4 P
-0.19 (g) 436 521.4 P
-0.19 (ate some tasks to its) 441.94 521.4 P
(inner stream, b) 72 507.4 T
(ut handle some other tasks itself.) 143.41 507.4 T
(Some languages, notably Self, support such dele) 72 481.2 T
(g) 304.46 481.2 T
(ation in the language. Dylan, in k) 310.4 481.2 T
(eeping with) 470.27 481.2 T
-0.29 (other generic-function-based languages, does not, b) 72 467.2 P
-0.29 (ut e) 317.92 467.2 P
-0.29 (xperience with streams packages in a num-) 335.12 467.2 P
(ber of other generic-function-based languages has sho) 72 453.2 T
(wn that it is) 330.96 453.2 T
3 F
(very) 390.3 453.2 T
0 F
( useful to pro) 410.95 453.2 T
(vide dele) 474.43 453.2 T
(g) 517.91 453.2 T
(a-) 523.85 453.2 T
(tion for wrapper streams. So we pro) 72 439.2 T
(vide an e) 244.12 439.2 T
(xplicit implementation of dele) 287.26 439.2 T
(g) 432.07 439.2 T
(ation in the streams) 438.01 439.2 T
(system.) 72 425.2 T
-0.06 (Dele) 72 399 P
-0.06 (g) 94.48 399 P
-0.06 (ation is implemented by the use of the) 100.42 399 P
1 F
-0.06 (outer) 285.92 399 P
-0.06 (-str) 312.8 399 P
-0.06 (eam) 330.57 399 P
0 F
-0.06 ( slot, which is de\336ned in the base class) 351.89 399 P
1 F
(<str) 72 385 T
(eam>) 92.62 385 T
0 F
(.) 120.78 385 T
2 10 Q
(define abstract class <stream> \050<object>\051) 108 366.13 T
(slot outer-stream :: <stream>, init-keyword: outer-stream:;) 126 354.13 T
(end class;) 108 342.13 T
1 12 Q
(outer) 72 316.6 T
(-str) 98.88 316.6 T
(eam) 116.65 316.6 T
0 F
( is used instead of the stream itself whene) 137.98 316.6 T
(v) 337.64 316.6 T
(er a stream in) 343.46 316.6 T
(v) 407.96 316.6 T
(ok) 413.72 316.6 T
(es one of its other) 425.6 316.6 T
0 9.6 Q
(1) 510.92 321.4 T
0 12 Q
( pro-) 515.72 316.6 T
(tocol methods. F) 72 302.6 T
(or e) 152.16 302.6 T
(xample, a correct implementation of the) 170.3 302.6 T
1 F
(r) 365.27 302.6 T
(ead) 370.38 302.6 T
0 F
( method in the e) 388.38 302.6 T
(xample abo) 465.53 302.6 T
(v) 521 302.6 T
(e) 526.82 302.6 T
(w) 72 288.6 T
(ould be as follo) 80.54 288.6 T
(ws:) 154.57 288.6 T
2 10 Q
(define method read \050stream :: <interactive-stream>, n :: <integer>) 108 269.73 T
(                    #key on-end-of-stream\051) 108 257.73 T
(  prompt\050s.outer-stream\051;) 108 245.73 T
(  next-method\050\051) 108 233.73 T
(end method;) 108 221.73 T
0 12 Q
-0.04 (The) 72 196.2 P
1 F
-0.04 (initialize) 93.62 196.2 P
0 F
-0.04 ( method on) 137.62 196.2 P
1 F
-0.04 (<str) 194.49 196.2 P
-0.04 (eam>) 215.1 196.2 P
0 F
-0.04 ( is de\336ned to set the) 243.27 196.2 P
1 F
-0.04 (outer) 341.67 196.2 P
-0.04 (-str) 368.55 196.2 P
-0.04 (eam) 386.32 196.2 P
0 F
-0.04 ( slot to be the stream itself.) 407.65 196.2 P
-0.09 (The) 72 182.2 P
1 F
-0.09 (initialize) 93.57 182.2 P
0 F
-0.09 ( method on) 137.58 182.2 P
1 F
-0.09 (<wrapper) 194.32 182.2 P
-0.09 (-str) 244.71 182.2 P
-0.09 (eam>) 262.48 182.2 P
0 F
-0.09 ( is specialized to set the) 290.64 182.2 P
1 F
-0.09 (outer) 406.78 182.2 P
-0.09 (-str) 433.66 182.2 P
-0.09 (eam) 451.44 182.2 P
0 F
-0.09 ( slot to be the) 472.76 182.2 P
(\322parent\323 stream:) 72 168.2 T
2 10 Q
(define method initialize \050stream :: <wrapper-stream>,) 108 149.33 T
( #key on, #rest all-keys\051;) 252 137.33 T
(  an-inner-stream.outer-stream := stream;) 108 125.33 T
(  next-method\050\051) 108 113.33 T
72 90 540 110 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 98 204 98 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(1.  A stream) 72 83.33 T
3 F
(must not) 123.38 83.33 T
0 F
( use inner) 157.55 83.33 T
(-stream if recursing since this w) 196.23 83.33 T
(ould cause an in\336nite re) 324.16 83.33 T
(gress. No such recursion) 419.55 83.33 T
(occurs in the prototype streams implementation.) 72 71.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "29" 29
%%Page: "30" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Streams Library Proposal) 72 42.62 T
(May 15, 1996) 283.67 42.62 T
(30) 532 42.62 T
2 10 Q
(end;) 108 713.33 T
0 12 Q
-0.2 ([) 72 686.19 P
3 F
-0.2 (Implementor\325) 76 686.19 P
-0.2 (s note: One disadvanta) 140.83 686.19 P
-0.2 (g) 251.11 686.19 P
-0.2 (e of this sc) 256.99 686.19 P
-0.2 (heme is that it may pr) 307.21 686.19 P
-0.2 (e) 410.11 686.19 P
-0.2 (vent useful optimizations,) 415.25 686.19 P
(suc) 72 672.19 T
(h as inlining) 87.82 672.19 T
(. If this is an important performance issue in cir) 147.65 672.19 T
(cumstances wher) 377.21 672.19 T
(e wr) 459.08 672.19 T
(apper) 479.9 672.19 T
(str) 72 658.19 T
(eams ar) 84.23 658.19 T
(e not needed then it is r) 122.11 658.19 T
(elatively simple to pr) 234.32 658.19 T
(o) 334.78 658.19 T
(vide an implementation of the str) 340.66 658.19 T
(eams) 498.54 658.19 T
(module that omits the dele) 72 644.19 T
(gation mec) 198.18 644.19 T
(hanism.) 250.99 644.19 T
0 F
(]) 288.66 644.19 T
1 16 Q
(9.  Wrapper Str) 72 601.71 T
(eam Pr) 180.14 601.71 T
(otocol) 229.17 601.71 T
1 12 Q
(<wrapper-stream>) 72 566.56 T
0 F
([Open instantiable class]) 421.36 566.56 T
(The class that implements the basic wrapper stream functionality) 90 538.75 T
(.) 401.17 538.75 T
(If tak) 90 510.94 T
(es a) 115.54 510.94 T
(required i) 136.86 510.94 T
(nit) 183.18 510.94 T
(-k) 195.85 510.94 T
(e) 205.73 510.94 T
(yw) 210.88 510.94 T
(ord,) 225.42 510.94 T
1 F
(inner) 247.42 510.94 T
(-str) 274.31 510.94 T
(eam:) 292.08 510.94 T
0 F
(, which is used to specify) 317.4 510.94 T
(wrapaped s) 441.72 510.94 T
(tream) 496.03 510.94 T
(.) 523.36 510.94 T
-0.17 (The <) 90 483.12 P
1 F
-0.17 (wrapper) 118.25 483.12 P
-0.17 (-str) 161.8 483.12 P
-0.17 (eam>) 179.57 483.12 P
0 F
-0.17 ( class implements def) 207.74 483.12 P
-0.17 (ault methods for all of the stream protocol func-) 310.76 483.12 P
(tions described in this document. Each def) 90 469.12 T
(ault method on) 293.52 469.12 T
1 F
(<wrapper) 368.52 469.12 T
(-str) 418.91 469.12 T
(eam>) 436.68 469.12 T
0 F
( simply \322tram-) 464.84 469.12 T
(polines\323 to its inner stream.) 90 455.12 T
1 F
(inner-stream) 72 421.31 T
3 F
(wrapper-stream) 141.65 421.31 T
7 F
(\336) 221.98 421.31 T
3 F
(type-union\050<stream>, singleton\050#f\051\051) 236.82 421.31 T
0 F
([Open generic function]) 424.7 421.31 T
(Returns the stream \322wrapped\323 by) 90 393.5 T
3 F
(wr) 252.96 393.5 T
(apper) 265.45 393.5 T
(-str) 293.21 393.5 T
(eam) 309.43 393.5 T
0 F
(, or) 329.42 393.5 T
1 F
(#f) 348.42 393.5 T
0 F
( if no stream is currently wrapped.) 358.42 393.5 T
1 F
(inner-stream-setter) 72 359.69 T
3 F
(stream wrapper-stream) 174.29 359.69 T
7 F
(\336) 290.28 359.69 T
3 F
(type-union\050<stream>, singleton\050#f\051\051) 305.12 359.69 T
0 F
-3 ([Open) 510.01 359.69 P
(generic function]) 72 345.69 T
(Sets the \322wrapped\323 stream of) 90 317.88 T
3 F
(wr) 233.63 317.88 T
(apper) 246.12 317.88 T
(-str) 273.88 317.88 T
(eam) 290.1 317.88 T
0 F
( to) 310.09 317.88 T
3 F
(str) 325.43 317.88 T
(eam) 337.66 317.88 T
0 F
(, and sets the) 357.65 317.88 T
1 F
(outer) 422.64 317.88 T
(-str) 449.52 317.88 T
(eam) 467.29 317.88 T
0 F
( slot of) 488.62 317.88 T
3 F
(str) 90 303.88 T
(eam) 102.23 303.88 T
0 F
( to) 122.22 303.88 T
3 F
(wr) 137.56 303.88 T
(apper) 150.05 303.88 T
(-str) 177.8 303.88 T
(eam) 194.03 303.88 T
0 F
(.) 214.02 303.88 T
1 F
(outer-stream) 72 270.06 T
3 F
(stream) 141.64 270.06 T
7 F
(\336) 177.3 270.06 T
3 F
(type-union\050<stream>,singleton\050#f\051\051) 192.14 270.06 T
0 F
([Open generic function]) 424.7 270.06 T
(Returns the stream wrapping) 90 242.25 T
3 F
(str) 231.31 242.25 T
(eam) 243.54 242.25 T
0 F
(, or) 263.53 242.25 T
1 F
(#f) 282.53 242.25 T
0 F
( if) 292.52 242.25 T
3 F
(str) 305.86 242.25 T
(eam) 318.08 242.25 T
0 F
( is not currently wrapped by an) 338.08 242.25 T
(ything.) 487.2 242.25 T
1 F
(outer-stream-setter) 72 208.44 T
3 F
(wrapper-stream stream) 174.28 208.44 T
7 F
(\336) 290.27 208.44 T
3 F
(type-union\050<stream>, singleton\050#f\051\051) 305.11 208.44 T
0 F
-3 ([Open) 510.01 208.44 P
(generic function]) 72 194.44 T
(Sets the) 90 166.62 T
1 F
(outer) 130.67 166.62 T
(-str) 157.55 166.62 T
(eam) 175.32 166.62 T
0 F
( slot of) 196.64 166.62 T
3 F
(str) 232.98 166.62 T
(eam) 245.21 166.62 T
0 F
( to) 265.2 166.62 T
3 F
(wr) 280.54 166.62 T
(apper) 293.03 166.62 T
(-str) 320.78 166.62 T
(eam) 337.01 166.62 T
0 F
(.) 357 166.62 T
1 16 Q
(10.  Ackno) 72 124.15 T
(wledgments) 144.29 124.15 T
0 12 Q
-0.4 (W) 72 95 P
-0.4 (e\325) 82.37 95 P
-0.4 (d lik) 91.09 95 P
-0.4 (e to thank the other people who ha) 112.24 95 P
-0.4 (v) 274.82 95 P
-0.4 (e been instrumental in the production of this proposal:) 280.64 95 P
(Jonathan Bachrach, Da) 72 81 T
(v) 182.72 81 T
(e Berry) 188.54 81 T
(, Bill Chiles, John Dunning, Chris Fry) 223.42 81 T
(, P) 405.66 81 T
(aul Haahr) 418.15 81 T
(, W) 464.65 81 T
(illiam Lott,) 481.5 81 T
(Rob Maclachlan, T) 72 67 T
(im McNerne) 163.9 67 T
(y) 224.7 67 T
(, T) 229.92 67 T
(on) 242.29 67 T
(y Mann, K) 254.11 67 T
(eith Playford, and T) 305.47 67 T
(uck) 400.92 67 T
(er W) 418.13 67 T
(ithington.) 441.3 67 T
52 506.94 54 518.94 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "30" 30
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 30
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Courier
%%+ Times-Italic
%%+ Courier-Oblique
%%+ Helvetica-BoldOblique
%%+ Helvetica-Bold
%%+ Symbol
%%EOF
