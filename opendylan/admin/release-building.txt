
		-=-=-=-=-=-=-=-=-=-=-=-=-=-
		PC Dylan Release Management
		-=-=-=-=-=-=-=-=-=-=-=-=-=-

		Andy Armstrong
		24 August 1997

* HISTORY

  24 Aug 1997, Andy Armstrong
    - initial version
  12 Sep 1997, Andy Armstrong
    - first revision, adding comments on bootstrapping and QA.
  22 Mar 2006, Peter Robisch
    - the script 'kan-env' has been renamed to 'set-build-variables'.
      Open ToDo replacing all HOPE entry through Subversion ones.
      (Hope was the source control system at Harlequin, the opendylan.org
       uses source control system Subversion.)
      o

* INTRODUCTION

Now that the compiler can build itself, we have the opportunity to
rewrite all of the build scripts, this time with a number of goals in
mind:

 - we should have a one-shot build script that can create the compiler
   and/or environment from scratch without human intervention.

 - we also need incremental scripts so that we can make changes to
   just parts of a built release and not have to go through a complete
   build process again.

 - we need to make the scripts general purpose enough that all
   developers can use them to build directly from their own versions
   of the sources.

 - we need to make the scripts simple so that they can be easily
   used and maintained.

Here is a description of the first attempt at such a set of
scripts. Hopefully we can evolve them quickly so that they meet
everybody's needs.

* PREREQUISITES

In order to build on your PC, you'll need the following:

 Windows NT:
   Currently these scripts have only been tested on Windows NT so
   there will inevitably be problems using Windows 95.

 128 MB of RAM:
   Hopefully this will be greatly reduced in the long term, but for
   now you will need at least 100MB of free memory to run the entire
   build process.

 300 MB of free disk space:
   This is the maximum that is needed to build a complete release from
   scratch. You can probably get away with less than 200MB if you only
   want to build the compiler, or libraries like DUIM or OLE.

 Functional Developer:
   It is possible to build using a Dylan release on Unix, but it is so
   much faster to build with a local compiler that we recommend you
   install a relatively recent version of Functional Developer. These are
   stored in ~dylan/releases/internal at each site, just pick the
   latest one and install it (it uses InstallShield so will walk you
   through the installation).

 Visual C++:
   Currently we use Visual C++ both as a linker and for 'nmake'. Our
   long term aim should be to remove the need for this, but that may
   be a way off.

 Hope: /** Harlequin source control system, now replace by subversion 
        ** This paragraph needs be to be updated.    
        **/
   The scripts verify the existence of the necessary source files in
   your build area, and if they aren't found then the scripts will use
   Hope to check them out for you. It is possible to get the sources
   onto your PC using some other route, and to only use the
   compilation phases of the process, but it is probably best to get
   Hope installed anyway. Speak to your local sysadmins about how to
   do this.

* BUILD SCRIPTS

The first decision we made was to make building be a two step
process. The first step is to set up environment variables to describe
everything there is to know about the release, and the second step is
to invoke some simple scripts which use these environment
variables. This removes the need for making every script have to
process large numbers of command line arguments to customize aspects
of the release.

** PREPARING TO BUILD

In order to run the build scripts, it is possible to use either an
ordinary Windows Command Prompt, or to use an Emacs shell buffer.
Before you do run anything though, you need to have invoked the script
'set-build-variables' within the shell window that you will be using. This script
can be found in the subversion repository under 
 /trunk/fundev/admin/builds/set-build-variables.bat, 
which is checked out into ~dylan/admin/scripts on Unix.

The arguments you supply should be as follows:

  set-build-variables -sp <source-root> -d <dylan-system-root> -branch <branch>

where '-sp' sets both your system root and your personal root to point
to the directory from which you will be building, where '-d' specifies
where to find the Dylan release containing the compiler and build
scripts to bootstrap from, and where '-branch' specifies the Hope
branch to use (defaults to trunk). So a typical invocation would be:

  set-build-variables -sp c:\users\andrewa\dylan -d c:\Progra~1\Functi~1\Dylan\System

Note that there are currently problems using spaces in names, so we
use the Windows abbreviation 'Progra~1' for 'Program Files'.

** ONE-SHOT BUILDS

Once you have run the set-build-variables script, you can now invoke any of the
following one-shot scripts, which live in the Subversion repository under 
  trunk/fundev/admin/builds, 
and which can be found in Unix in ~dylan/admin/builds. 
Each one of these scripts checks out the admin area into your release area, so 
from then on you can also find these scripts there.

The scripts are as follows:

  build-console-debugger	- builds DUIM and everything it requires
  build-dfmc			- builds the standalone compiler (pentium-dw)
  build-duim			- builds DUIM and everything it requires
  build-environment		- builds the environment (win32-environment)
  build-ole			- builds all of the OLE libraries
  build-win32-libraries		- builds all of the Win32 libraries

These scripts will check out from Hope everything that is missing from
your release area, and will then compile and link everything as
necessary. In fact, if your release area is empty or doesn't even
exist yet then these scripts will create everything that is needed. So
to do a completely fresh build, remove your old build directory and
then run the script again.

** RUNNING THE NEW RELEASE

The shell from which you have been doing the builds is set up so that
you can run your new build products immediately. So if you have just
built the compiler, try:

  pentium-dw

and see what happens. If you have problems you will need to run your
new program under a debugger, one of the console debugger
(devel-dbg-ui), the batch debugger (batch-debug) or windbg.

[ISSUE: need pointers to documents describing these].

** INCREMENTAL BUILDS

Using the one-shot scripts is usually not enough to produce a working
release, so the next phase is to incrementally recompile any pieces of
the release that need fixing. In order to do this, you need to know
how the one-shot scripts get things built, which is currently by using
a makefile. 

For the moment we have decided to keep everything in one giant
makefile called 'Makefile', since this is the default name and hence
doesn't need to be supplied when called interactively. So to run
incremental builds you should just cd to the admin\builds directory in
your release area, and then you can invoke any of the targets defined
by the makefile. For a complete list you should edit the file itself,
but some useful targets include:

  nmake pentium-dw
  nmake win32-enviroment
  nmake console-debugger
  nmake batch-debug
  nmake duim
  nmake ole-libraries
  nmake win32-libraries
  nmake dylan
  nmake pentium-run-time

Each of these targets will rebuild any other targets that it requires,
which may or may not be what you want. We need to add more flexibility
to this process, but it is hard to do using makefiles as the
technology.

* QA

There is a similar Makefile created for building QA products (both
test suites and examples), in D-qa-admin-builds!Makefile. It should
now contain a separate target for every test application and example
that has been written, if it is missing any then please send mail to
dylan-admin. Some targets include:

  nmake dylan-test-suite-app
  nmake libraries-test-suite-app
  nmake duim-test-suite-app
  nmake ole-test-suites

  nmake hello-world
  nmake othello
  nmake duim-examples
  nmake ole-examples

Note that it is advised to create a fresh build area for the QA
products rather than building them directly into the release
itself. The main reason for this is to not corrupt the release in any
way, but it also forces the QA code to behave more like an end user
which is a good thing.

** BOOTSTRAPPING THE COMPILER

Most of the time it should be possible to build the compiler using
itself. However, occasionally changes will be made (probably to
compiler primitives) which mean that the new versions of some of the
basic libraries (dylan, c-ffi, machine-word etc) won't be compilable
using an old compiler, and hence building a new compiler from scratch
isn't possible.

If it gets to this, then you should use the script
D-admin-builds!build-bootstrap-compiler.bat. This will build all of
the core libraries from an old Hope branch, but will then build the
compiler itself from a different branch. This script takes one
optional argument which is the old branch to use - it defaults to
D-kan which contains the last frozen compiler. Once you have this
bootstrapped compiler then you can build a new release as normal using
the root of the bootstrapped compiler as your Dylan release (the '-d'
argument to set-build-variables).

Here's an example that creates a new compiler from the trunk sources,
but bootstrapping using an old compiler in D-kan. It puts the
bootstrap compiler into a release area c:\dylan\bootstrap, and then
builds the new compiler into c:\dylan\release:

  cd <admin-scripts>
  set-build-variables -sp c:\dylan\bootstrap -d c:\Progra~1\Functi~1\Dylan\System
  cd <admin-builds>
  build-bootstrap-compiler
  cd <admin-scripts>
  set-build-variables -sp c:\dylan\release -d c:\dylan\bootstrap
  cd <admin-builds>
  build-dfmc

* CREATING AN INSTALLATION

All external releases will be produced using InstallShield, so only
licensed users can produce installations. Currently Gary Palter will
be building all installations, using the scripts checked into the
compound D-admin-installer.

* FEEDBACK/BUG REPORTS

If you have any problem with these build scripts, please submit a
standard bug report, preferably including a backtrace if you
experience a crash in the compiler. If you have any feedback to give,
please send mail to dylan-admin.

* ISSUES

There are still some issues that need to be resolved.

** REMOVING THE DEPENCENCY ON MAKEFILES

There are a number of reasons for using a makefile rather than a bat
file for the main build script:

 - writing bat files is a tedious and error prone task that produces
   scripts which are hard to understand.

 - very few of us are experts in writing bat files, so makefiles are
   simpler to read and maintain.

 - in order to make our scripts flexible we need to provide a huge number of
   targets, which is much simpler to do with a makefile than with a
   bat script.

However, having a dependency on makefiles may not be the correct
solution for us in the long term. Probably the best thing to do is to
write a general purpose Dylan program that can do builds for us based
on scripts, in much the same way as our current 'build' script works.

