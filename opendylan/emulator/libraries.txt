LIBRARIES IN THE EMULATOR

  keith playford
  jonathan bachrach

This document explains a new way of working in the dylan world,
addressing issues concerning multi-site development, componentization,
and dylan purification.  

The dylan system has now been split into components called (you
guessed it) libraries.  The HOPE structure reflects this and is
organized as several collections of libraries (e.g., compiler and
lib).  

In order to support libraries in the emulator there is now a library
registry (e.g., `~dylan/emulator/registry') which tells the emulator
where the libraries live.  Specifically, the registry contains files
whose names correspond to the library names.  These registry files
contain logical pathnames to the libraries' lid files.  

The emulator supports demand compile / loading of libraries through
the following process.  This is a ``Makefile'' mechanism and is an
attempt to depart from our earlier dependency on ``defsys''.  It is
based solely on lid files.  Currently, our mechanism only supports
serial order compile / loading of files in a library.

During library definition evaluation, library use clauses cause the
emulator to consult its internal registry to find out whether that
library has already been loaded.  If the required library is
undefined, then the emulator consults the registry and finds the
required library's lid file.  The emulator then compile / loads the
files described in the lid file.  The first filename in the lid file
must point to the file that contains the required library's
definition.  This library definition might contain further library use
clauses that demand load more libraries until all required libraries
are demand loaded.

Our idea for multi-site development is to have a shared directory of
sources (i.e., `~dylan') at each site that contains the latest stable
release of the dylan system.  The user then maintains a personal
directory (i.e., `~/dylan') of sources containing those libraries in
which the user is actively developing.  These libraries then shadow
the shared / stable libraries.  These libraries would be checked into
the shared sources when they mature.  The following description of
registries explains this mechanism more fully.


LISTENER COMMANDS

The listener commands:

  require: library-name
  reload:  library-name

are available for loading libraries into your emulator image. See the
listener commands documentation for a more detailed description. 


CREATING DEMAND LOADED LIBRARIES

Here's the todo list for creating a demand loaded library.  Suppose
you want to make a gap-list library.

first you've got to create the hope compound

  hope create -compound D-lib-gap-list -dir dylan/lib/gap-list

notice that the top directory is `dylan' not `D'.  then you've got to
link it to its parent.

  hope add -compound D-lib-gap-list -parent D-lib

create the directory `dylan/lib/gap-list'.

you've got to create three files: `gap-list.lid' `library.dylan', and
`module.dylan'.  Of course you've also got your `gap-list.dylan'.

`gap-list.lid' is loaded upon demand loading.  it contains

  library:   gap-list
  files:     library
	     module
	     gap-list

the first file member must be the name of the file containing the
library definition.  if by chance you need to compile/load lisp files
then just add the lisp suffix (i.e., the default suffix is `.dylan').

The `library.dylan' file contains:

  module: dylan-user

  define library gap-list
    use functional-dylan;
    export gap-list;
  end module;

Finally, `module.dylan' contains:

  module: dylan-user

  define module gap-list
    use dylan;
    use functional-extensions;
    export <gap-list>;
  end module;

Note that the module definition can actually be placed after the the
library definition in `library.dylan' if you prefer.

These files must be added to your D-lib-gap-list compound with

  hope add -compound D-lib-gap-list -unit gap-list.lid
  ...


Now you must make the emulator aware of your new library by adding it
to the registry.  create a file / unit with the name of the library in
`dylan/emulator/registry'/ D-emulator-registry.  this file will
contain logical pathname to the `gap-list.lid' file:

  DYLAN:lib;gap-list;gap-list.lid


Now when you write an application which uses the gap-list library, the
gap-list library will be automatically loaded.

  define library plug-it-up
    use dylan;
    use gap-list;
  end;


PERSONAL REGISTRIES

It is possible to set up your own local registries to be searched
before the default system registry when a library load is requested.
Using this facility, you can arrange for the emulator to
automatically load a local development copy of a particular library
while still using the published versions of all the others.

To do this, first create a directory to be used as your registry.
The emulator reads local registry information from the shell
environment variable EMULATOR_LIBRARY_PATH [*] so set this to point
to your registry directory like this:

  export EMULATOR_LIBRARY_PATH=/usr/users/xxx/registry

or the equivalent for your shell. It only reads this value on
loading (on restart if you are using a saved image).

To shadow a library, simply put a file into your registry directory
with the same name as the library. It should contain the path of the
corresponding library load file. Remove the file from the registry
when you no longer want to shadow the published version of the
library. 

[*] This is an environment variable rather than a lisp variable so
that the value can accessed by checkout scripts which we hope to
make set up a registry entry automatically for you.


