%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 15 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /Times-Italic FMFONTDEFINE
4 0 /Courier-Oblique FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
(TDF Suppor) 418.74 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
1 12 Q
(CHANGE HIST) 63.65 716.95 T
(OR) 147.78 716.95 T
(Y) 165.36 716.95 T
(This is the \336rst v) 63.65 676.95 T
(ersion.) 148.87 676.95 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
(TDF Suppor) 418.74 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
FMENDPAGE
%%EndPage: "2" 2
%%Page: "i" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
(TDF Suppor) 418.74 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(i) 528.87 84.9 T
1 12 Q
(T) 63.65 736.95 T
(ABLE OF CONTENTS) 70.57 736.95 T
(1.) 63.65 696.95 T
(Pur) 90.65 696.95 T
(pose) 109.86 696.95 T
(1) 144.53 696.95 T
(2.) 63.65 676.95 T
(Relationship with other w) 90.65 676.95 T
(ork) 222.86 676.95 T
(1) 252.86 676.95 T
(3.) 63.65 656.95 T
(Summary) 90.65 656.95 T
(1) 153.31 656.95 T
(4.) 63.65 636.95 T
(T) 90.65 636.95 T
(ype system) 97.76 636.95 T
(2) 165.42 636.95 T
2 11 Q
(4.1) 90.65 623.62 T
(T) 117.65 623.62 T
(agging) 123.49 623.62 T
(2) 164.43 623.62 T
(4.2) 90.65 610.62 T
(Bignums) 117.65 610.62 T
(2) 168.38 610.62 T
(4.3) 90.65 597.62 T
(Float types) 117.65 597.62 T
(3) 177.24 597.62 T
(4.4) 90.65 584.62 T
(Dynamic creation of types) 117.65 584.62 T
(3) 245.04 584.62 T
1 12 Q
(5.) 63.65 564.95 T
(Garbage Collection) 90.65 564.95 T
(3) 202.31 564.95 T
2 11 Q
(5.1) 90.65 551.62 T
(Finding li) 117.65 551.62 T
(v) 160.47 551.62 T
(e objects) 165.81 551.62 T
(4) 215.6 551.62 T
2 10 Q
(5.1.1) 117.65 539.29 T
(Harlequin\325) 144.65 539.29 T
(s stack frame implementation) 187.42 539.29 T
(4) 315.46 539.29 T
2 11 Q
(5.2) 90.65 526.62 T
(Reclaiming dead space) 117.65 526.62 T
(5) 230.07 526.62 T
(5.3) 90.65 513.62 T
(Compaction) 117.65 513.62 T
(5) 182.43 513.62 T
1 12 Q
(6.) 63.65 493.95 T
(Functions) 90.65 493.95 T
(6) 153.32 493.95 T
2 11 Q
(6.1) 90.65 480.62 T
(P) 117.65 480.62 T
(arameter passing) 123.6 480.62 T
(6) 208.83 480.62 T
2 10 Q
(6.1.1) 117.65 468.29 T
(RISC calling mechanism) 144.65 468.29 T
(7) 254.65 468.29 T
(6.1.2) 117.65 456.29 T
(CISC calling mechanism) 144.65 456.29 T
(8) 254.65 456.29 T
(6.1.3) 117.65 444.29 T
(Architecture neutral calling mechanism) 144.65 444.29 T
(9) 312.67 444.29 T
2 11 Q
(6.2) 90.65 431.62 T
(Apply) 117.65 431.62 T
(9) 156.15 431.62 T
(6.3) 90.65 418.62 T
(Returning v) 117.65 418.62 T
(alues) 169.62 418.62 T
(10) 203.23 418.62 T
(6.4) 90.65 405.62 T
(Closures) 117.65 405.62 T
(11) 167.15 405.62 T
(6.5) 90.65 392.62 T
(T) 117.65 392.62 T
(ail recursion) 123.49 392.62 T
(12) 189.17 392.62 T
(6.6) 90.65 379.62 T
(Conclusion) 117.65 379.62 T
(12) 178.76 379.62 T
1 12 Q
(7.) 63.65 359.95 T
(Interacti) 90.65 359.95 T
(vity) 135.18 359.95 T
(12) 166.51 359.95 T
2 11 Q
(7.1) 90.65 346.62 T
(Compilation) 117.65 346.62 T
(12) 183.66 346.62 T
2 10 Q
(7.1.1) 117.65 334.29 T
(Compile-\336le) 144.65 334.29 T
(12) 205.21 334.29 T
(7.1.2) 117.65 322.29 T
(Compile) 144.65 322.29 T
(14) 189.1 322.29 T
2 11 Q
(7.2) 90.65 309.62 T
(Deb) 117.65 309.62 T
(ugging) 135.75 309.62 T
(14) 177.31 309.62 T
(7.3) 90.65 296.62 T
(T) 117.65 296.62 T
(racing and Stepping) 123.98 296.62 T
(14) 222.97 296.62 T
1 12 Q
(8.) 63.65 276.95 T
(Miscellaneous Language F) 90.65 276.95 T
(eatur) 226.36 276.95 T
(es) 253.46 276.95 T
(15) 275.46 276.95 T
2 11 Q
(8.1) 90.65 263.62 T
(Catch and thro) 117.65 263.62 T
(w) 182.14 263.62 T
(15) 201.08 263.62 T
(8.2) 90.65 250.62 T
(Unwind-protect) 117.65 250.62 T
(15) 198.3 250.62 T
(8.3) 90.65 237.62 T
(Special binding) 117.65 237.62 T
(16) 197.4 237.62 T
(8.4) 90.65 224.62 T
(Ev) 117.65 224.62 T
(aluation order) 129.59 224.62 T
(18) 202 224.62 T
(8.5) 90.65 211.62 T
(Inlining) 117.65 211.62 T
(18) 163.49 211.62 T
(8.6) 90.65 198.62 T
(P) 117.65 198.62 T
(ackages) 123.6 198.62 T
(18) 169.41 198.62 T
1 12 Q
(9.) 63.65 178.95 T
(Pr) 90.65 178.95 T
(ogram Err) 103.09 178.95 T
(ors) 157.86 178.95 T
(19) 185.86 178.95 T
2 11 Q
(9.1) 90.65 165.62 T
(Conditions) 117.65 165.62 T
(19) 176.94 165.62 T
(9.2) 90.65 152.62 T
(Stack bounds check) 117.65 152.62 T
(19) 216.02 152.62 T
(9.3) 90.65 139.62 T
(T) 117.65 139.62 T
(raps) 123.98 139.62 T
(20) 153.31 139.62 T
1 12 Q
(10.) 63.65 119.95 T
(Common Language Extensions) 90.65 119.95 T
(20) 262 119.95 T
FMENDPAGE
%%EndPage: "i" 3
%%Page: "ii" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
(TDF Suppor) 418.74 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(ii) 63.65 84.9 T
2 11 Q
(10.1) 90.65 737.62 T
(Multiple threads) 117.65 737.62 T
(20) 201.06 737.62 T
(10.2) 90.65 724.62 T
(Sa) 117.65 724.62 T
(ving images) 128.43 724.62 T
(20) 192.9 724.62 T
1 12 Q
(11.) 63.65 704.95 T
(Bootstrapping) 90.65 704.95 T
(21) 175.99 704.95 T
(12.) 63.65 684.95 T
(Optimisations) 90.65 684.95 T
(21) 174.66 684.95 T
2 11 Q
(12.1) 90.65 671.62 T
(Stack allocation) 117.65 671.62 T
(21) 199.22 671.62 T
1 12 Q
(13.) 63.65 651.95 T
(P) 90.65 651.95 T
(ortability Issues) 97.74 651.95 T
(22) 191.41 651.95 T
2 11 Q
(13.1) 90.65 638.62 T
(Constants at compile time) 117.65 638.62 T
(22) 243.24 638.62 T
1 12 Q
(14.) 63.65 618.95 T
(Conclusions) 90.65 618.95 T
(23) 164.66 618.95 T
(15.) 63.65 598.95 T
(Refer) 90.65 598.95 T
(ences) 119.08 598.95 T
(23) 158.4 598.95 T
FMENDPAGE
%%EndPage: "ii" 4
%%Page: "1" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
( TDF Suppor) 416.52 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(1) 526.09 84.9 T
0 15 Q
(1.) 63.65 734.95 T
(Purpose) 90.65 734.95 T
2 11 Q
0.12 (As part of its in) 63.65 712.62 P
0.12 (v) 132.13 712.62 P
0.12 (olv) 137.41 712.62 P
0.12 (ement with ESPRIT project 6062 OMI/GLUE, Harlequin Ltd. has undertak) 151.3 712.62 P
0.12 (en to dem-) 484.36 712.62 P
0.28 0.08 (onstrate that TDF is po) 63.65 699.62 B
0.28 0.08 (werful enough to support Lisp - a f) 167.64 699.62 B
0.28 0.08 (amily of languages with dynamic features not) 325.75 699.62 B
-0.06 (found in Algol deri) 63.65 686.62 P
-0.06 (v) 147.84 686.62 P
-0.06 (ed languages such as C. Ultimately) 153.17 686.62 P
-0.06 (, this w) 306.77 686.62 P
-0.06 (ork will lead to an implementation of Dylan) 338.64 686.62 P
(\050a Lisp dialect designed by Apple Computer Inc.\051 including a Dylan to TDF producer) 63.65 673.62 T
(.) 439.43 673.62 T
0.28 0.15 (Harlequin has e) 63.65 648.62 B
0.28 0.15 (xperience in implementing Common Lisp using nati) 135.35 648.62 B
0.28 0.15 (v) 373.79 648.62 B
0.28 0.15 (e code compilers for a number of) 379.28 648.62 B
0.28 0.19 (architectures. The initial part of Harlequin\325) 63.65 635.62 B
0.28 0.19 (s w) 262.41 635.62 B
0.28 0.19 (ork with OMI/GLUE has been to learn about TDF) 278.12 635.62 B
0.28 0.19 (, and) 509.22 635.62 B
0.28 0.05 (determine which nati) 63.65 622.62 B
0.28 0.05 (v) 157.69 622.62 B
0.28 0.05 (e code implementation techniques do not map directly onto TDF) 163.07 622.62 B
0.28 0.05 (. This process has) 451.85 622.62 B
0.19 (been intermingled with discussions with DRA \050the originators of TDF\051 about the most appropriate w) 63.65 609.62 P
0.19 (ay to) 509.77 609.62 P
-0.23 (impro) 63.65 596.62 P
-0.23 (v) 89.76 596.62 P
-0.23 (e the mapping - either by making changes to the Lisp compiler technology) 95.1 596.62 P
-0.23 (, or by making changes to) 419.14 596.62 P
(TDF itself.) 63.65 583.62 T
0.27 (This document is deli) 63.65 558.62 P
0.27 (v) 159.22 558.62 P
0.27 (erable number 4.2.1 for the OMI/GLUE project. It contains the results of the study) 164.55 558.62 P
0.23 (of those features of Lisp which are not present in static languages and might need support from TDF) 63.65 545.62 P
0.23 (. The) 508.81 545.62 P
0.28 0.01 (w) 63.65 532.62 B
0.28 0.01 (ork describes ho) 71.49 532.62 B
0.28 0.01 (w Harlequin\325) 143.97 532.62 B
0.28 0.01 (s e) 202.08 532.62 B
0.28 0.01 (xisting Common Lisp implementations allo) 214.12 532.62 B
0.28 0.01 (w both ef) 406.54 532.62 B
0.28 0.01 (f) 448.43 532.62 B
0.28 0.01 (icient compilation) 451.5 532.62 B
(and an ef) 63.65 519.62 T
(\336cient implementation of the runtime system.) 103.69 519.62 T
-0.02 (The study is an essential prerequisite for the ultimate goal of a Dylan to TDF producer) 63.65 494.62 P
-0.02 (. It is designed to be) 443.13 494.62 P
0.28 0.07 (useful to both DRA and Harlequin, and will inf) 63.65 481.62 B
0.28 0.07 (luence a future enhanced specif) 276.45 481.62 B
0.28 0.07 (ication of TDF as well as) 417.73 481.62 B
(modi\336cations to Harlequin\325) 63.65 468.62 T
(s implementation techniques.) 184.65 468.62 T
(This w) 63.65 443.62 T
(ork w) 93.79 443.62 T
(as sponsored by the Commission of European Communities.) 119.03 443.62 T
0 15 Q
(2.) 63.65 404.95 T
(Relationship with other w) 90.65 404.95 T
(ork) 272.04 404.95 T
2 11 Q
-0.16 (This study has pro) 63.65 382.62 P
-0.16 (v) 143.97 382.62 P
-0.16 (ok) 149.25 382.62 P
-0.16 (ed a number of interesting discussions with DRA about ho) 160.14 382.62 P
-0.16 (w to compile Lisp to TDF) 415.99 382.62 P
-0.16 (,) 528.9 382.62 P
(and discussions are continuing in this area.) 63.65 369.62 T
0.28 0.17 (The w) 63.65 344.62 B
0.28 0.17 (ork has directly contrib) 92.47 344.62 B
0.28 0.17 (uted to the ne) 199.53 344.62 B
0.28 0.17 (w v) 262.06 344.62 B
0.28 0.17 (ersion of the TDF specif) 278.87 344.62 B
0.28 0.17 (ication document \050which DRA) 391.02 344.62 B
0.28 0.15 (e) 63.65 331.62 B
0.28 0.15 (xpect to mak) 68.52 331.62 B
0.28 0.15 (e a) 127.6 331.62 B
0.28 0.15 (v) 140.62 331.62 B
0.28 0.15 (ailable in April 1993\051. This specif) 146 331.62 B
0.28 0.15 (ication will include some ne) 301.14 331.62 B
0.28 0.15 (w ideas presented in a) 430.24 331.62 B
-0.21 (paper) 63.65 318.62 P
3 F
-0.21 (P) 90.62 318.62 P
-0.21 (ar) 96.46 318.62 P
-0.21 (ameter Mec) 106.08 318.62 P
-0.21 (hanisms) 157.93 318.62 P
2 F
-0.21 (by Ian Currie, which addresses man) 196.53 318.62 P
-0.21 (y of the problems described in this w) 352.96 318.62 P
-0.21 (ork.) 514.23 318.62 P
0.28 0.01 (This paper is an e) 63.65 305.62 B
0.28 0.01 (v) 142.3 305.62 B
0.28 0.01 (olving document, and Harlequin will e) 147.59 305.62 B
0.28 0.01 (v) 319.04 305.62 B
0.28 0.01 (entually embellish it with a description of ho) 324.39 305.62 B
0.28 0.01 (w) 523.71 305.62 B
(the) 63.65 292.62 T
(y intend to use the ne) 76.93 292.62 T
(w features of TDF for a Dylan producer) 170.45 292.62 T
(.) 345.48 292.62 T
0 15 Q
(3.) 63.65 253.95 T
(Summar) 90.65 253.95 T
(y) 150.81 253.95 T
2 11 Q
0.08 (W) 63.65 227.62 P
0.08 (e describe here the features of the Lisp f) 73.15 227.62 P
0.08 (amily of languages which will not ha) 250.21 227.62 P
0.08 (v) 413.6 227.62 P
0.08 (e been encountered in the) 418.93 227.62 P
0.28 0.1 (design of other TDF producers. T) 63.65 214.62 B
0.28 0.1 (echniques for implementing these features in Harlequin\325) 215.42 214.62 B
0.28 0.1 (s) 470.21 214.62 B
3 F
0.28 0.1 (ar) 477.72 214.62 B
0.28 0.1 (c) 487.3 214.62 B
0.28 0.1 (hitectur) 492.12 214.62 B
0.28 0.1 (e) 526.76 214.62 B
-0.19 (speci\336c) 63.65 201.62 P
2 F
-0.19 ( \050AS\051 Common Lisp compilers are gi) 96.64 201.62 P
-0.19 (v) 259 201.62 P
-0.19 (en. Where possible,) 264.33 201.62 P
3 F
-0.19 (ar) 353.28 201.62 P
-0.19 (c) 362.65 201.62 P
-0.19 (hitectur) 367.37 201.62 P
-0.19 (e neutr) 401.18 201.62 P
-0.19 (al) 431.68 201.62 P
2 F
-0.19 ( \050AN\051 TDF solutions) 440.24 201.62 P
0.03 (are also gi) 63.65 188.62 P
0.03 (v) 108.64 188.62 P
0.03 (en, with comments on their e) 113.98 188.62 P
0.03 (xpected ef) 241.68 188.62 P
0.03 (\336cienc) 286.94 188.62 P
0.03 (y) 316.1 188.62 P
0.03 (. Some AS solution cannot be described in TDF) 320.89 188.62 P
0.28 0.05 (as it stands. W) 63.65 175.62 B
0.28 0.05 (e do not attempt to come to an) 128.51 175.62 B
0.28 0.05 (y conclusions here about what features TDF must pro) 265.3 175.62 B
0.28 0.05 (vide -) 505.77 175.62 B
(that is left to other discussions.) 63.65 162.62 T
0.28 0.16 (The dynamic features of Lisp can be di) 63.65 137.62 B
0.28 0.16 (vided into a number of cate) 243.21 137.62 B
0.28 0.16 (gories. These include dynamic type) 369.29 137.62 B
0.28 0.09 (checking, g) 63.65 124.62 B
0.28 0.09 (arbage collection, dynamically sized parameters during function calls, closures of functions,) 115.53 124.62 B
FMENDPAGE
%%EndPage: "1" 5
%%Page: "2" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
(TDF Suppor) 418.74 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(2) 63.65 84.9 T
2 11 Q
-0.18 (language interacti) 63.65 737.62 P
-0.18 (vity) 141.7 737.62 P
-0.18 (, and dynamic loading of code and data. None of these will ha) 158.1 737.62 P
-0.18 (v) 428.2 737.62 P
-0.18 (e been encountered by) 433.53 737.62 P
(implementors of C to TDF producers, and all present some potential dif) 63.65 724.62 T
(\336culty for mapping onto TDF) 378.68 724.62 T
(.) 508.58 724.62 T
-0.26 (Harlequin\325) 63.65 699.62 P
-0.26 (s Lisp implementations rely on carefully chosen function calling con) 110.69 699.62 P
-0.26 (v) 410.06 699.62 P
-0.26 (entions to implement most) 415.39 699.62 P
0.28 0.02 (of these features ef) 63.65 686.62 B
0.28 0.02 (f) 148 686.62 B
0.28 0.02 (iciently) 151.08 686.62 B
0.28 0.02 (. It is e) 183.53 686.62 B
0.28 0.02 (xpected that a suitable le) 214.33 686.62 B
0.28 0.02 (v) 324.46 686.62 B
0.28 0.02 (el of support for tailoring calling con) 329.81 686.62 B
0.28 0.02 (v) 494.39 686.62 B
0.28 0.02 (entions) 499.74 686.62 B
0.28 0.25 (within TDF will enable most of the dynamic capabilities. In addition there will be a requirement for) 63.65 673.62 B
(dynamically loading and relocating code and data.) 63.65 660.62 T
0 15 Q
(4.) 63.65 621.95 T
(T) 90.65 621.95 T
(ype system) 98.91 621.95 T
0 12 Q
(4.1) 63.65 586.95 T
(T) 90.65 586.95 T
(a) 97.02 586.95 T
(g) 103.57 586.95 T
(ging) 110.78 586.95 T
2 11 Q
0.28 0.03 (Lisp is dynamically typed, which means that type information must be carried with each object. Con) 63.65 562.62 B
0.28 0.03 (v) 512.21 562.62 B
0.28 0.03 (en-) 517.57 562.62 B
-0.08 (tionally in Lisp systems, this has been done by) 63.65 549.62 P
3 F
-0.08 (ta) 270.67 549.62 P
-0.08 (g) 279.12 549.62 P
-0.08 (ging) 284.51 549.62 P
2 F
-0.08 ( pointers to objects. This in) 304.07 549.62 P
-0.08 (v) 422.98 549.62 P
-0.08 (olv) 428.27 549.62 P
-0.08 (es using some of the) 442.16 549.62 P
0.21 (bits of the pointer to contain information about the type of object. Further type information may be stored) 63.65 536.62 P
0.26 (inside the object itself. Since tagging is so widespread in Lisp implementations, and TDF no) 63.65 523.62 P
0.26 (w of) 473.37 523.62 P
0.26 (fers sup-) 493.21 523.62 P
(port, I will not attempt to describe an) 63.65 510.62 T
(y other possible dynamic typing mechanism.) 226.63 510.62 T
0.28 0.12 (From an ef) 63.65 485.62 B
0.28 0.12 (f) 113.39 485.62 B
0.28 0.12 (icienc) 116.57 485.62 B
0.28 0.12 (y point of vie) 143.39 485.62 B
0.28 0.12 (w) 204.58 485.62 B
0.28 0.12 (, the type of tagging scheme used can be e) 211.93 485.62 B
0.28 0.12 (xtremely important. A good) 405 485.62 B
0.28 0.04 (illustration of this is the implementation of small inte) 63.65 472.62 B
0.28 0.04 (gers in one of Harlequin\325) 302.15 472.62 B
0.28 0.04 (s tagging schemes: here, a) 414.3 472.62 B
0.1 (small inte) 63.65 459.62 P
0.1 (ger is not represented as a pointer to an object; instead it is represented as an immediate v) 106.67 459.62 P
0.1 (alue in) 501.91 459.62 P
-0.14 (tw) 63.65 446.62 P
-0.14 (os-complement form, with the bottom tw) 74.54 446.62 P
-0.14 (o bits \050the tag bits\051 al) 254.62 446.62 P
-0.14 (w) 347 446.62 P
-0.14 (ays zero. Hence the Lisp inte) 354.83 446.62 P
-0.14 (ger) 481.66 446.62 P
3 F
-0.14 (i) 498.32 446.62 P
2 F
-0.14 ( is rep-) 501.38 446.62 P
(resented in the same w) 63.65 433.62 T
(ay as the C inte) 163.74 433.62 T
(ger) 231.4 433.62 T
3 F
(4xi) 248.2 433.62 T
2 F
(.) 261.64 433.62 T
0.28 0.06 (Using hardw) 63.65 408.62 B
0.28 0.06 (are add or subtract instructions on 2 tagged inte) 121.04 408.62 B
0.28 0.06 (gers yields a tagged inte) 335.22 408.62 B
0.28 0.06 (ger) 444.09 408.62 B
0.28 0.06 (. Hence addition) 457.72 408.62 B
0.28 0.08 (and subtraction of small Lisp inte) 63.65 395.62 B
0.28 0.08 (gers may be performed by using the appropriate hardw) 215.13 395.62 B
0.28 0.08 (are instructions) 462.67 395.62 B
0.28 0.16 (directly) 63.65 382.62 B
0.28 0.16 (, with no speed penalty compared with a C implementation. This is true for all the standard bit) 97.78 382.62 B
(operations too \050or) 63.65 369.62 T
(, and, xor etc.\051) 141.42 369.62 T
0.28 0.08 (Multiplication and di) 63.65 344.62 B
0.28 0.08 (vision are not quite so simple. Simple hardw) 158.43 344.62 B
0.28 0.08 (are multiplication of 2 tagged inte) 359.79 344.62 B
0.28 0.08 (gers) 513.09 344.62 B
-0.16 (yields a result with the bottom four bits all zeros. It is easy to see that the correct results can be obtained by) 63.65 331.62 P
-0.26 (untagging either one of the inte) 63.65 318.62 P
-0.26 (gers for multiplication, or untagging the di) 199.95 318.62 P
-0.26 (visor for di) 385.38 318.62 P
-0.26 (vision. Hence the pen-) 433.46 318.62 P
(alty for tagged inte) 63.65 305.62 T
(ger multiplication or di) 146.88 305.62 T
(vision is one untagging operation \050shift\051.) 248.36 305.62 T
0.19 (If the only operations allo) 63.65 280.62 P
0.19 (wed on architecture neutral tagged operations are tag and untag, then the simple) 177.78 280.62 P
-0.25 (arithmetic operations require both operands to be untagged before the operation, and the result to be tagged) 63.65 267.62 P
0.28 0 (after the operation. On a RISC machine an addition w) 63.65 254.62 B
0.28 0 (ould no) 303.11 254.62 B
0.28 0 (w tak) 336.42 254.62 B
0.28 0 (e 4 instructions compared to 1 instruc-) 360.72 254.62 B
(tion for an AS implementation.) 63.65 241.62 T
0.28 0.04 (Since arithmetic operations on inte) 63.65 216.62 B
0.28 0.04 (gers are among the most common of operations in an) 219.17 216.62 B
0.28 0.04 (y computation, a) 456.94 216.62 B
0.28 0.05 (f) 63.65 203.62 B
0.28 0.05 (actor of 4 ef) 67.25 203.62 B
0.28 0.05 (f) 121.96 203.62 B
0.28 0.05 (icienc) 125.07 203.62 B
0.28 0.05 (y loss for both code size and speed w) 151.5 203.62 B
0.28 0.05 (ould ha) 319.35 203.62 B
0.28 0.05 (v) 352.48 203.62 B
0.28 0.05 (e a major impact on the o) 357.87 203.62 B
0.28 0.05 (v) 472.53 203.62 B
0.28 0.05 (erall system) 477.92 203.62 B
(ef) 63.65 190.62 T
(\336cienc) 71.92 190.62 T
(y) 101.08 190.62 T
(.) 105.87 190.62 T
0 12 Q
(4.2) 63.65 156.95 T
(Bign) 90.65 156.95 T
(ums) 117.19 156.95 T
2 11 Q
-0 (Man) 63.65 132.62 P
-0 (y Lisp dialects \050including Common Lisp\051 support arbitrary precision inte) 83.65 132.62 P
-0 (gers in a seamless manner) 403.96 132.62 P
-0 (. A) 518.21 132.62 P
0.28 0 (common implementation technique is to represent small inte) 63.65 119.62 B
0.28 0 (gers \050) 331.69 119.62 B
4 F
0.66 0 (fixnum) 356.73 119.62 B
2 F
0.28 0 (s\051 as immediate v) 396.34 119.62 B
0.28 0 (alues using a) 474.24 119.62 B
-0.17 (tagging scheme similar to the one described abo) 63.65 106.62 P
-0.17 (v) 273.97 106.62 P
-0.17 (e. Inte) 279.31 106.62 P
-0.17 (gers which are too lar) 306.46 106.62 P
-0.17 (ge to be represented as imme-) 400.86 106.62 P
FMENDPAGE
%%EndPage: "2" 6
%%Page: "3" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
( TDF Suppor) 416.52 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(3) 526.09 84.9 T
2 11 Q
0.28 0.15 (diate v) 63.65 737.62 B
0.28 0.15 (alues \050) 94.36 737.62 B
4 F
0.66 0.15 (bignum) 124.73 737.62 B
2 F
0.28 0.15 (s\051 are instead represented as a pointer to a block of memory containing as man) 165.25 737.62 B
0.28 0.15 (y) 526.15 737.62 B
0.28 0 (w) 63.65 724.62 B
0.28 0 (ords as are necessary to describe the inte) 71.48 724.62 B
0.28 0 (ger) 252.07 724.62 B
0.28 0 (. This h) 265.52 724.62 B
0.28 0 (ybrid approach has the adv) 299.35 724.62 B
0.28 0 (antage that small inte) 418.78 724.62 B
0.28 0 (gers) 513.31 724.62 B
-0.17 (\050which are by f) 63.65 711.62 P
-0.17 (ar the most common\051 require no heap storage and can be manipulated ef) 129.92 711.62 P
-0.17 (\336ciently) 445.33 711.62 P
-0.17 (. Of course,) 480.67 711.62 P
0.28 0.08 (manipulation of bignums can be much slo) 63.65 698.62 B
0.28 0.08 (wer than corresponding operations on f) 252.7 698.62 B
0.28 0.08 (ixnums, b) 429.12 698.62 B
0.28 0.08 (ut this seems) 473.3 698.62 B
(una) 63.65 685.62 T
(v) 79.31 685.62 T
(oidable.) 84.59 685.62 T
0.28 0.03 (The problems of small inte) 63.65 660.62 B
0.28 0.03 (ger arithmetic are made e) 184.02 660.62 B
0.28 0.03 (v) 297.49 660.62 B
0.28 0.03 (en w) 302.86 660.62 B
0.28 0.03 (orse when we start considering o) 324.24 660.62 B
0.28 0.03 (v) 471.05 660.62 B
0.28 0.03 (erf) 476.41 660.62 B
0.28 0.03 (lo) 488.12 660.62 B
0.28 0.03 (w) 496.47 660.62 B
0.28 0.03 (. Con-) 503.73 660.62 B
0.28 0.1 (sider) 63.65 647.62 B
0.28 0.1 (, for instance, the addition of tw) 85.1 647.62 B
0.28 0.1 (o f) 230.59 647.62 B
0.28 0.1 (ixnums. It is normal for a Lisp compiler to generate code for an) 242.48 647.62 B
0.17 (o) 63.65 634.62 P
0.17 (v) 68.98 634.62 P
0.17 (er\337o) 74.32 634.62 P
0.17 (w test, because o) 94.21 634.62 P
0.17 (v) 169.1 634.62 P
0.17 (er\337o) 174.43 634.62 P
0.17 (w is not an error in Lisp - instead it indicates that a bignum must be created.) 194.32 634.62 P
0.28 0.15 (In the AS scheme sho) 63.65 621.62 B
0.28 0.15 (wn abo) 163.43 621.62 B
0.28 0.15 (v) 196.52 621.62 B
0.28 0.15 (e, the normal processor f) 202.01 621.62 B
0.28 0.15 (lags may be tested to determine if o) 315.34 621.62 B
0.28 0.15 (v) 479.28 621.62 B
0.28 0.15 (erf) 484.77 621.62 B
0.28 0.15 (lo) 496.83 621.62 B
0.28 0.15 (w has) 505.41 621.62 B
0.28 0.01 (occurred \050with an o) 63.65 608.62 B
0.28 0.01 (v) 150.35 608.62 B
0.28 0.01 (erhead of one conditional branch in the common no-o) 155.7 608.62 B
0.28 0.01 (v) 394.75 608.62 B
0.28 0.01 (erf) 400.1 608.62 B
0.28 0.01 (lo) 411.73 608.62 B
0.28 0.01 (w case\051. This may not be) 420.04 608.62 B
0.28 0.03 (true for the AN solution, where the arithmetic operation is applied to untagged numbers. In the AN case,) 63.65 595.62 B
-0.17 (an o) 63.65 582.62 P
-0.17 (v) 81.94 582.62 P
-0.17 (er\337o) 87.28 582.62 P
-0.17 (w test w) 107.17 582.62 P
-0.17 (ould presumably be implemented as a range test \050with an o) 143.37 582.62 P
-0.17 (v) 400.54 582.62 P
-0.17 (erhead of 2 comparisons and) 405.88 582.62 P
(2 conditional branches for the common case\051.) 63.65 569.62 T
0 12 Q
(4.3) 63.65 535.95 T
(Float types) 90.65 535.95 T
2 11 Q
0.28 0.11 (Some Lisp dialects \050notably Dylan) 63.65 518.62 B
2 8.8 Q
0.22 0.11 (1) 221.01 523.02 B
2 11 Q
0.28 0.11 (\051 require that the implementation of f) 225.51 518.62 B
0.28 0.11 (loating-point numbers is IEEE) 393.72 518.62 B
0.28 0.07 (compliant. Dylan actually def) 63.65 505.62 B
0.28 0.07 (ines 3 classes of f) 196.77 505.62 B
0.28 0.07 (loating-point numbers:) 276.26 505.62 B
5 F
0.66 0.07 (<single-float>) 381.8 505.62 B
0.66 0.07 (<double-) 478.33 505.62 B
0.66 0.18 (float>) 63.65 492.62 B
2 F
0.28 0.18 ( and) 104.32 492.62 B
5 F
0.66 0.18 (<extended-float>) 127.14 492.62 B
2 F
0.28 0.18 (which) 243.02 492.62 B
0.28 0.18 (are def) 278.23 492.62 B
0.28 0.18 (ined in) 309.38 492.62 B
3 F
0.28 0.18 ([Dylan]) 344.35 492.62 B
2 F
0.28 0.18 ( to implement the IEEE standard) 381.04 492.62 B
0.28 0.02 (f) 63.65 479.62 B
0.28 0.02 (loating-point formats. Inherently) 66.73 479.62 B
0.28 0.02 (, this is an architecture specif) 211.25 479.62 B
0.28 0.02 (ic def) 341.08 479.62 B
0.28 0.02 (inition, and will require specif) 365.63 479.62 B
0.28 0.02 (ic TDF) 499.78 479.62 B
(support.) 63.65 466.62 T
0 12 Q
(4.4) 63.65 432.95 T
(Dynamic creation of types) 90.65 432.95 T
2 11 Q
0.28 0.04 (Common Lisp contains a po) 63.65 415.62 B
0.28 0.04 (werful type def) 189.44 415.62 B
0.28 0.04 (inition language, and includes features for creating ne) 257.14 415.62 B
0.28 0.04 (w types) 497.24 415.62 B
-0.24 (dynamically) 63.65 402.62 P
-0.24 (. It should be possible to implement this mechanism in terms of simpler Lisp primiti) 117.32 402.62 P
-0.24 (v) 483.72 402.62 P
-0.24 (es, and so) 489.05 402.62 P
(there is no requirement for an) 63.65 389.62 T
(y e) 193.92 389.62 T
(xtra TDF features to support this.) 206.89 389.62 T
0 15 Q
(5.) 63.65 350.95 T
(Garba) 90.65 350.95 T
(g) 133.85 350.95 T
(e Collection) 143.16 350.95 T
2 11 Q
0.28 0.04 (There are man) 63.65 328.62 B
0.28 0.04 (y w) 128.02 328.62 B
0.28 0.04 (ays to implement g) 144.49 328.62 B
0.28 0.04 (arbage collection \050) 229.93 328.62 B
3 F
0.28 0.04 (GC) 313.02 328.62 B
2 F
0.28 0.04 (\051, and the specif) 328.37 328.62 B
0.28 0.04 (ication of TDF has left GC to) 399.45 328.62 B
0.28 0.31 (the language implementor) 63.65 315.62 B
0.28 0.31 (. The e) 185.97 315.62 B
0.28 0.31 (xact design of GC may ha) 218.78 315.62 B
0.28 0.31 (v) 342.01 315.62 B
0.28 0.31 (e an inf) 347.65 315.62 B
0.28 0.31 (luence on the e) 383.09 315.62 B
0.28 0.31 (xtra TDF tok) 454.73 315.62 B
0.28 0.31 (ens) 516.36 315.62 B
0.27 (required to implement the language.) 63.65 302.62 P
2 8.8 Q
0.22 (2) 223.91 307.02 P
2 11 Q
0.27 ( Some ideas are central to all GC strate) 228.31 302.62 P
0.27 (gies, and hence there are cer-) 402.01 302.62 P
(tain primiti) 63.65 289.62 T
(v) 112.58 289.62 T
(e ideas which it must be possible to e) 117.91 289.62 T
(xpress in TDF) 281.51 289.62 T
(.) 343.58 289.62 T
0.08 (The purpose of GC is to reclaim the space used by objects which a program no longer requires, so that the) 63.65 264.62 P
-0.08 (space can be reused. Normally) 63.65 251.62 P
-0.08 (, GC is in) 197.34 251.62 P
-0.08 (v) 238.85 251.62 P
-0.08 (ok) 244.12 251.62 P
-0.08 (ed automatically when an attempt has been made to allocate an) 255.01 251.62 P
-0.24 (object and there is insuf) 63.65 238.62 P
-0.24 (\336cient space in the allocation area. The assumption made by most GC algorithms is) 167.51 238.62 P
-0.22 (that if a program has no means of accessing an object without breaking the language model, then the object) 63.65 225.62 P
-0.13 (can be treated as g) 63.65 212.62 P
-0.13 (arbage, and its space reclaimed. Hence a central part of an) 144.33 212.62 P
-0.13 (y g) 398.85 212.62 P
-0.13 (arbage collector is the abil-) 412.41 212.62 P
(ity to \336nd all) 63.65 199.62 T
3 F
(live) 122.94 199.62 T
2 F
( objects so that e) 138.82 199.62 T
(v) 211.87 199.62 T
(erything else can be reclaimed.) 217.21 199.62 T
63.65 161.95 531.65 174.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 169.95 171.65 169.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
-0.22 (1.  Dylan is still not a fully de\336ned language, and there is still ongoing discussion amongst interested parties about whether \337oating) 63.65 155.95 P
(point numbers should be made optional in the language.) 63.65 145.95 T
-0.06 (2.  E.g. a generational g) 63.65 132.95 P
-0.06 (arbage collector may require a special tok) 148.8 132.95 P
-0.06 (en to be used at each store into memory) 298.82 132.95 P
-0.06 (. This w) 440.75 132.95 P
-0.06 (ould \337ag the ne) 469.8 132.95 P
-0.06 (w) 525.15 132.95 P
0.41 (pointer location as an e) 63.65 122.95 P
0.41 (xtra GC root, so that the possibility of ha) 148.64 122.95 P
0.41 (ving created a pointer from an old to a ne) 298.99 122.95 P
0.41 (w generation does not) 451.18 122.95 P
(break the generational model.) 63.65 112.95 T
FMENDPAGE
%%EndPage: "3" 7
%%Page: "4" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
(TDF Suppor) 418.74 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(4) 63.65 84.9 T
0 12 Q
(5.1) 63.65 736.95 T
(Finding live objects) 90.65 736.95 T
2 11 Q
-0.27 (Most recognized GC techniques \336nd all li) 63.65 719.62 P
-0.27 (v) 245.66 719.62 P
-0.27 (e objects by looking \336rst at a carefully selected set of) 250.99 719.62 P
3 F
-0.27 (r) 484.74 719.62 P
-0.27 (oot) 488.53 719.62 P
2 F
-0.27 (s. This) 502.58 719.62 P
0.28 0.02 (set is chosen by the language implementor so that it references the same set of objects as the program. In) 63.65 706.62 B
0.28 0.11 (the case of Common Lisp, the roots w) 63.65 693.62 B
0.28 0.11 (ould normally include v) 236.97 693.62 B
0.28 0.11 (ariables on the Lisp stack) 345.54 693.62 B
2 8.8 Q
0.22 0.11 (1) 461.39 698.02 B
2 11 Q
0.28 0.11 ( and the list of) 465.91 693.62 B
(symbol packages.) 63.65 680.62 T
0.28 0.12 (Once an object has been encountered during GC, the processing which must be performed is algorithm) 63.65 655.62 B
0.28 0.27 (dependant. A common requirement, though, is to identify all the references from the object to other) 63.65 642.62 B
0.28 0.08 (objects, so that the other objects can also be processed. T) 63.65 629.62 B
0.28 0.08 (o do this, the g) 321.05 629.62 B
0.28 0.08 (arbage collector must recognize) 388.37 629.62 B
0.28 0.09 (which f) 63.65 616.62 B
0.28 0.09 (ields inside an object refer to other objects. F) 97.27 616.62 B
0.28 0.09 (or e) 302.04 616.62 B
0.28 0.09 (xample, if an array is encountered, the g) 319.32 616.62 B
0.28 0.09 (arbage) 501.87 616.62 B
0.28 0.02 (collector must determine both the size and the type of the array before identifying what it refers to; if the) 63.65 603.62 B
-0.05 (array is an array of bits, the binary numbers in the array will not be v) 63.65 590.62 P
-0.05 (alid pointers, b) 365.73 590.62 P
-0.05 (ut if it is a general pur-) 431.11 590.62 P
(pose array then each array cell may reference another object.) 63.65 577.62 T
0.28 0.1 (W) 63.65 552.62 B
0.28 0.1 (ith the e) 73.69 552.62 B
0.28 0.1 (xception of the stack, it seems that this should not pose an) 110.4 552.62 B
0.28 0.1 (y particular problems for TDF; the) 374.58 552.62 B
-0.15 (requirement for dynamic typing means that we must already be able to identify the type of an) 63.65 539.62 P
-0.15 (y Lisp object.) 471.75 539.62 P
(Finding all other references from a stack, ho) 63.65 526.62 T
(we) 258.27 526.62 T
(v) 270.82 526.62 T
(er) 276.16 526.62 T
(, is a much harder problem.) 284.26 526.62 T
0.28 0 (The stack is a record of the current state of the program, and includes information such as function return) 63.65 501.62 B
0.28 0.14 (addresses, ar) 63.65 488.62 B
0.28 0.14 (guments to functions, local v) 121.68 488.62 B
0.28 0.14 (ariables \050some of which should be processed during GC, and) 253.84 488.62 B
0.02 (some of which should not\051, and dynamic information associated with the Lisp language features described) 63.65 475.62 P
0.26 (belo) 63.65 462.62 P
0.26 (w \050e.g.) 82.32 462.62 P
5 F
0.63 (unwind-protect) 115.83 462.62 P
2 F
0.26 (,) 208.23 462.62 P
5 F
0.63 (catch) 214 462.62 P
2 F
0.26 (, and) 247 462.62 P
5 F
0.63 (special) 271.66 462.62 P
2 F
0.26 ( binding\051. Man) 317.86 462.62 P
0.26 (y Lisp implementations will allo-) 383.92 462.62 P
(cate objects on the stack, too; these objects require special processing during GC.) 63.65 449.62 T
0 10 Q
(5.1.1) 63.65 425.29 T
(Harlequin\325) 90.65 425.29 T
(s stac) 138.95 425.29 T
(k frame implementation) 167.1 425.29 T
2 11 Q
-0.27 (Harlequin\325) 63.65 399.62 P
-0.27 (s Lisp implementations rely on scanning the stack from top to bottom during GC and identifying) 110.69 399.62 P
-0.22 (what type of data is found at each location. The stack space associated with each function in) 63.65 386.62 P
-0.22 (v) 465.08 386.62 P
-0.22 (ocation is dis-) 470.36 386.62 P
0.28 0.03 (tinguished by means of a sa) 63.65 373.62 B
0.28 0.03 (v) 187.48 373.62 B
0.28 0.03 (ed frame pointer) 192.85 373.62 B
0.28 0.03 (, linking each function frame together) 266.12 373.62 B
0.28 0.03 (. F) 434.17 373.62 B
0.28 0.03 (or some languages,) 445.98 373.62 B
0.28 0.13 (b) 63.65 360.62 B
0.28 0.13 (uilding a stack frame in this w) 69.06 360.62 B
0.28 0.13 (ay may be necessary for particular types of function only) 207.9 360.62 B
0.28 0.13 (. In Harlequin) 467.98 360.62 B
0.14 (Lisp, it is oblig) 63.65 347.62 P
0.14 (atory for e) 130.63 347.62 P
0.14 (v) 176.44 347.62 P
0.14 (ery function unless the compiler can be certain that the function can ne) 181.77 347.62 P
0.14 (v) 494.72 347.62 P
0.14 (er allo-) 500.05 347.62 P
0.25 (cate memory) 63.65 334.62 P
0.25 (, e) 120.31 334.62 P
0.25 (v) 130.66 334.62 P
0.25 (en in an error situation) 136 334.62 P
2 8.8 Q
0.2 (2) 236.6 339.02 P
2 11 Q
0.25 (. This normally means that the stack frame can only be a) 240.99 334.62 P
0.25 (v) 492.2 334.62 P
0.25 (oided if) 497.48 334.62 P
(the function is a) 63.65 321.62 T
3 F
(leaf case) 136.97 321.62 T
2 F
( \050i.e. it calls no other function\051.) 175.77 321.62 T
0.28 0.21 (While processing each frame, Harlequin\325) 63.65 296.62 B
0.28 0.21 (s g) 253.31 296.62 B
0.28 0.21 (arbage collector f) 266.68 296.62 B
0.28 0.21 (irst looks at the data at kno) 347.3 296.62 B
0.28 0.21 (wn locations) 473.19 296.62 B
0.28 0.05 (within the frame to get information about the called functions. The intention is to f) 63.65 283.62 B
0.28 0.05 (ind all the acti) 434.53 283.62 B
0.28 0.05 (v) 498.54 283.62 B
0.28 0.05 (e Lisp) 503.92 283.62 B
-0.04 (function objects, since these are clearly li) 63.65 270.62 P
-0.04 (v) 244.88 270.62 P
-0.04 (e data, and should not be treated as g) 250.21 270.62 P
-0.04 (arbage. In our implementa-) 412.03 270.62 P
0.28 0.12 (tion) 63.65 257.62 B
2 8.8 Q
0.22 0.12 (3) 81.24 262.02 B
2 11 Q
0.28 0.12 (, part of the con) 85.76 257.62 B
0.28 0.12 (v) 157.78 257.62 B
0.28 0.12 (ention of b) 163.23 257.62 B
0.28 0.12 (uilding a stack frame is to push the calling function\325) 212.53 257.62 B
0.28 0.12 (s) 450.25 257.62 B
3 F
0.28 0.12 (constants vector) 457.8 257.62 B
2 F
0.28 0.09 (onto the stack; this contains all the function\325) 63.65 244.62 B
0.28 0.09 (s static references to other Lisp objects, including a pointer) 264.25 244.62 B
-0.2 (back to the function object itself. The return address is at another \336x) 63.65 231.62 P
-0.2 (ed of) 361.43 231.62 P
-0.2 (fset from the frame pointer) 383.26 231.62 P
-0.2 (, this is) 500.56 231.62 P
0.28 0.08 (ignored during GC \050e) 63.65 218.62 B
0.28 0.08 (xcept in the case where the function is mo) 160.32 218.62 B
0.28 0.08 (v) 350.86 218.62 B
0.28 0.08 (ed during GC, in which case the return) 356.28 218.62 B
(address must be \336x) 63.65 205.62 T
(ed up\051.) 148.12 205.62 T
63.65 155.95 531.65 168.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 163.95 171.65 163.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
(1.  Or stacks, since man) 63.65 149.95 T
(y Lisp implementations of) 149.25 149.95 T
(fer a multiple thread implementation.) 243.77 149.95 T
0.24 (2.  Note that calling) 63.65 136.95 P
5 F
0.58 (error) 138.36 136.95 P
2 F
0.24 ( is v) 165.36 136.95 P
0.24 (ery lik) 180.71 136.95 P
0.24 (ely to allocate, since this will in) 204.11 136.95 P
0.24 (v) 319.45 136.95 P
0.24 (ok) 323.77 136.95 P
0.24 (e the deb) 332.68 136.95 P
0.24 (ugger unless the error is handled. Once inside) 365.48 136.95 P
(the deb) 63.65 126.95 T
(ugger) 89.71 126.95 T
(, an) 109.85 126.95 T
(y Lisp function may be in) 122.71 126.95 T
(v) 215.09 126.95 T
(ok) 219.41 126.95 T
(ed,) 228.32 126.95 T
-0.12 (3.  I am actually describing a h) 63.65 113.95 P
-0.12 (ybrid of our CISC and RISC implementations, choosing the most AN features of both. This mixture) 173.73 113.95 P
(might be confusing to those f) 63.65 103.95 T
(amiliar with Harlequin\325) 168.8 103.95 T
(s implementations, b) 253.3 103.95 T
(ut is hopefully clearer otherwise.) 327.87 103.95 T
FMENDPAGE
%%EndPage: "4" 8
%%Page: "5" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
( TDF Suppor) 416.52 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(5) 526.09 84.9 T
2 11 Q
0.27 (The constants v) 63.65 737.62 P
0.27 (ector contains more than just the constants referenced by the function - it also gi) 133.07 737.62 P
0.27 (v) 489.08 737.62 P
0.27 (es infor-) 494.42 737.62 P
0.12 (mation to the g) 63.65 724.62 P
0.12 (arbage collector about ho) 130.27 724.62 P
0.12 (w the function uses the stack. This data includes ho) 241.87 724.62 P
0.12 (w man) 468.8 724.62 P
0.12 (y re) 498.39 724.62 P
0.12 (gis-) 515.15 724.62 P
-0 (ters ha) 63.65 711.62 P
-0 (v) 92.44 711.62 P
-0 (e been sa) 97.78 711.62 P
-0 (v) 137.87 711.62 P
-0 (ed in the stack \050since these must be processed during GC\051, ho) 143.2 711.62 P
-0 (w man) 413.58 711.62 P
-0 (y v) 443.05 711.62 P
-0 (ariables there are) 456.52 711.62 P
0.28 0.06 (which need processing, and ho) 63.65 698.62 B
0.28 0.06 (w man) 201.6 698.62 B
0.28 0.06 (y v) 231.65 698.62 B
0.28 0.06 (ariables must not be processed) 245.59 698.62 B
2 8.8 Q
0.22 0.06 (1) 382.97 703.02 B
2 11 Q
0.28 0.06 (. An) 387.43 698.62 B
0.28 0.06 (y data on the stack which is) 406.73 698.62 B
0.28 0 (not in a location described by the constants v) 63.65 685.62 B
0.28 0 (ector must be scanned. An) 263.89 685.62 B
0.28 0 (y data which requires special pro-) 381.35 685.62 B
0.28 0.03 (cessing \050e.g. catch or binding frames\051 is mark) 63.65 672.62 B
0.28 0.03 (ed by a stack v) 267.39 672.62 B
0.28 0.03 (alue which is tagged to represent the type of) 333.99 672.62 B
0.28 0.04 (processing required; the tag is chosen so that it cannot be confused with a normal Lisp object. If the g) 63.65 659.62 B
0.28 0.04 (ar-) 519.4 659.62 B
-0.17 (bage collector encounters such a tagged v) 63.65 646.62 P
-0.17 (alue while scanning the stack, then the data is processed in a suit-) 245.62 646.62 P
0.28 0.24 (able manner before resuming the scan. F) 63.65 633.62 B
0.28 0.24 (or e) 253.07 633.62 B
0.28 0.24 (xample, a binding frame comprises a pointer to the ne) 270.92 633.62 B
0.28 0.24 (xt) 522.85 633.62 B
0.28 0.02 (binding frame \050ignored by GC\051, a Lisp symbol and its pre) 63.65 620.62 B
0.28 0.02 (vious v) 321.31 620.62 B
0.28 0.02 (alue \050both processed by GC\051. If the g) 353.56 620.62 B
0.28 0.02 (ar-) 519.41 620.62 B
0.28 0.13 (bage collector encounters a pointer object which is not tagged for special processing, the object is pro-) 63.65 607.62 B
(cessed normally lik) 63.65 594.62 T
(e general Lisp pointers.) 149.09 594.62 T
0 12 Q
(5.2) 63.65 560.95 T
(Rec) 90.65 560.95 T
(laiming dead space) 112.42 560.95 T
2 11 Q
0.28 0.01 (The mechanism for reclaiming the space of objects which are no longer li) 63.65 543.62 B
0.28 0.01 (v) 391.3 543.62 B
0.28 0.01 (e is v) 396.65 543.62 B
0.28 0.01 (ery dependant on the GC) 420.32 543.62 B
0.28 0.08 (algorithm.) 63.65 530.62 B
3 F
0.28 0.08 ([B92]) 113.07 530.62 B
2 F
0.28 0.08 ( describes some of these techniques, and the problems of implementing them in an AN) 139.74 530.62 B
(manner) 63.65 517.62 T
(.) 96.03 517.62 T
0 12 Q
(5.3) 63.65 483.95 T
(Compaction) 90.65 483.95 T
2 11 Q
0.26 (One important requirement of GC is to compact data. An) 63.65 466.62 P
0.26 (y algorithm which does not do this is doomed to) 316.95 466.62 P
0.05 (f) 63.65 453.62 P
0.05 (ailure from fragmentation problems, unless objects are of \336x) 67.2 453.62 P
0.05 (ed sizes \050not true in Lisp!\051. A necessary con-) 334.18 453.62 P
(sequence of compaction is that objects mo) 63.65 440.62 T
(v) 249.85 440.62 T
(e in memory) 255.18 440.62 T
(, and references between them must be \336x) 310.07 440.62 T
(ed up.) 495.02 440.62 T
0.14 (The mechanics of locating the addresses to be \336x) 63.65 415.62 P
0.14 (ed up because an object has mo) 280.89 415.62 P
0.14 (v) 420.24 415.62 P
0.14 (ed are a problem for the) 425.58 415.62 P
0.28 0.02 (g) 63.65 402.62 B
0.28 0.02 (arbage collector) 69.11 402.62 B
0.28 0.02 (, and I w) 139.79 402.62 B
0.28 0.02 (on\325) 179.16 402.62 B
0.28 0.02 (t discuss them here. But the code produced to implement the language itself) 193.68 402.62 B
0.28 0.01 (must mak) 63.65 389.62 B
0.28 0.01 (e it possible for GC to f) 106.95 389.62 B
0.28 0.01 (ix up references after compaction, and TDF must pro) 212.03 389.62 B
0.28 0.01 (vide an) 448.08 389.62 B
0.28 0.01 (y necessary) 480.3 389.62 B
(primiti) 63.65 376.62 T
(v) 93.33 376.62 T
(es.) 98.66 376.62 T
0.28 0.1 (One such primiti) 63.65 351.62 B
0.28 0.1 (v) 139.55 351.62 B
0.28 0.1 (e concerns position independence of code. Since code may be dynamically created in) 144.99 351.62 B
0.28 0.13 (Lisp, it must be g) 63.65 338.62 B
0.28 0.13 (arbage collectable \050and hence compactible\051 too. Hence TDF must be able to generate) 143.71 338.62 B
-0.02 (code which is either relocatable or contains enough information that the g) 63.65 325.62 P
-0.02 (arbage collector can locate abso-) 387.55 325.62 P
0.28 0.01 (lute pointers within the code or relati) 63.65 312.62 B
0.28 0.01 (v) 228.01 312.62 B
0.28 0.01 (e pointers to outside the code. Note that there are also pointers into) 233.35 312.62 B
0.28 0.15 (code from the stack, which contains return addresses. W) 63.65 299.62 B
0.28 0.15 (e ha) 321.3 299.62 B
0.28 0.15 (v) 339.98 299.62 B
0.28 0.15 (e already seen ho) 345.46 299.62 B
0.28 0.15 (w the g) 424.63 299.62 B
0.28 0.15 (arbage collector) 458.56 299.62 B
0.28 0.07 (must be able to locate return addresses and function objects, so this should not cause an) 63.65 286.62 B
0.28 0.07 (y particular ne) 458.84 286.62 B
0.28 0.07 (w) 523.71 286.62 B
(problems.) 63.65 273.62 T
0.28 0 (Another problem associated with the relationship between GC and code is that the constants might mo) 63.65 248.62 B
0.28 0 (v) 518.67 248.62 B
0.28 0 (e.) 524.01 248.62 B
0.28 0.05 (As has already been seen, Harlequin\325) 63.65 235.62 B
0.28 0.05 (s Lisp implementation considers functions to be a tuple of the code) 230.13 235.62 B
0.28 0.05 (and the constants of the function, ef) 63.65 222.62 B
0.28 0.05 (fecti) 224.09 222.62 B
0.28 0.05 (v) 243.6 222.62 B
0.28 0.05 (ely making a static closure. This technique mak) 248.98 222.62 B
0.28 0.05 (es relocation of) 462.58 222.62 B
0.17 (the objects v) 63.65 209.62 P
0.17 (ery easy) 119.43 209.62 P
0.17 (, as the code references the constants indirectly through a re) 155.22 209.62 P
0.17 (gister which points to the) 419.75 209.62 P
-0.19 (constants v) 63.65 196.62 P
-0.19 (ector) 112.49 196.62 P
-0.19 (. I see no particular reason wh) 133.87 196.62 P
-0.19 (y this cannot be true for a TDF implementation too, although) 264.96 196.62 P
-0.15 (a pre-requisite is that there must be some control o) 63.65 183.62 P
-0.15 (v) 284.86 183.62 P
-0.15 (er the calling sequence so that the code can al) 290.19 183.62 P
-0.15 (w) 489.44 183.62 P
-0.15 (ays \336nd) 497.27 183.62 P
(its constants.) 63.65 170.62 T
63.65 138.95 531.65 151.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 146.95 171.65 146.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
-0.17 (1.  Sometimes a function can be compiled more ef) 63.65 132.95 P
-0.17 (\336ciently if it uses temporary v) 242.89 132.95 P
-0.17 (ariables which are not v) 350.08 132.95 P
-0.17 (alid tagged pointers. These) 435.16 132.95 P
0.41 (v) 63.65 122.95 P
0.41 (ariables w) 67.92 122.95 P
0.41 (ould not normally be li) 104.98 122.95 P
0.41 (v) 188.9 122.95 P
0.41 (e o) 193.26 122.95 P
0.41 (v) 204.28 122.95 P
0.41 (er an) 208.65 122.95 P
0.41 (y part of the function which might pro) 226.66 122.95 P
0.41 (v) 367.13 122.95 P
0.41 (ok) 371.45 122.95 P
0.41 (e a g) 380.36 122.95 P
0.41 (arbage collection. There may still be) 398.13 122.95 P
(space reserv) 63.65 112.95 T
(ed on the stack for the v) 107.74 112.95 T
(ariable e) 193.99 112.95 T
(v) 224.51 112.95 T
(en when the v) 228.87 112.95 T
(ariable is not li) 278.88 112.95 T
(v) 332.41 112.95 T
(e, and this data must not be processed by GC.) 336.77 112.95 T
FMENDPAGE
%%EndPage: "5" 9
%%Page: "6" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
(TDF Suppor) 418.74 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(6) 63.65 84.9 T
0 15 Q
(6.) 63.65 734.95 T
(Functions) 90.65 734.95 T
2 11 Q
0.21 (Inte) 63.65 712.62 P
0.21 (ger arithmetic and GC ha) 80.59 712.62 P
0.21 (v) 192.4 712.62 P
0.21 (e already been mentioned as important f) 197.74 712.62 P
0.21 (actors in determining the ef) 375.45 712.62 P
0.21 (\336cienc) 496.99 712.62 P
0.21 (y) 526.15 712.62 P
-0.22 (of a Lisp implementation. Of these, GC is most lik) 63.65 699.62 P
-0.22 (ely to af) 284.34 699.62 P
-0.22 (fect the run-time performance. Ho) 319.68 699.62 P
-0.22 (we) 469.13 699.62 P
-0.22 (v) 481.68 699.62 P
-0.22 (er) 487.01 699.62 P
-0.22 (, if there) 495.12 699.62 P
-0.14 (is one single feature that is lik) 63.65 686.62 P
-0.14 (ely to ha) 194.71 686.62 P
-0.14 (v) 232.1 686.62 P
-0.14 (e the most in\337uence on the o) 237.44 686.62 P
-0.14 (v) 362.95 686.62 P
-0.14 (erall ef) 368.28 686.62 P
-0.14 (\336cienc) 398.72 686.62 P
-0.14 (y of an) 427.88 686.62 P
-0.14 (y language \050both) 457.99 686.62 P
(speed and code size\051, then it must be the o) 63.65 673.62 T
(v) 249.23 673.62 T
(erhead of a function call.) 254.56 673.62 T
0.02 (As we will see belo) 63.65 648.62 P
0.02 (w) 149.61 648.62 P
0.02 (, function calling and returning in Lisp ha) 156.84 648.62 P
0.02 (v) 340.08 648.62 P
0.02 (e properties not found in C. The quality of) 345.41 648.62 P
0.28 0.16 (implementation of these properties will ha) 63.65 635.62 B
0.28 0.16 (v) 257.62 635.62 B
0.28 0.16 (e a major impact on the quality of the implementation as a) 263.12 635.62 B
(whole.) 63.65 622.62 T
0 12 Q
(6.1) 63.65 588.95 T
(P) 90.65 588.95 T
(arameter passing) 98.29 588.95 T
2 11 Q
0.28 0.01 (As a dynamic language, the number of ar) 63.65 571.62 B
0.28 0.01 (guments passed to a Lisp function may be decided dynamically) 247.37 571.62 B
0.28 0.01 (.) 528.9 571.62 B
0.28 0.02 (Language features \050such as) 63.65 558.62 B
5 F
0.66 0.02 (funcall) 187.54 558.62 B
2 F
0.28 0.02 (,) 233.9 558.62 B
5 F
0.66 0.02 (apply) 239.73 558.62 B
2 F
0.28 0.02 ( and the ability to dynamically redef) 272.84 558.62 B
0.28 0.02 (ine functions\051 mak) 434.21 558.62 B
0.28 0.02 (e it) 517.55 558.62 B
-0.08 (impossible for a compiler to check that a function is called with an appropriate number of ar) 63.65 545.62 P
-0.08 (guments) 467.83 545.62 P
2 8.8 Q
-0.07 (1) 505.11 550.02 P
2 11 Q
-0.08 (. It is) 509.51 545.62 P
-0.22 (the responsibility of the called function to check the v) 63.65 532.62 P
-0.22 (alidity of the ar) 298.15 532.62 P
-0.22 (guments passed, and to \337ag an) 364.81 532.62 P
-0.22 (y errors) 497.97 532.62 P
0.28 0.01 (by using the standard mechanisms \050e.g. by signalling a condition with the function) 63.65 519.62 B
5 F
0.66 0.01 (error) 433.91 519.62 B
2 F
0.28 0.01 (, in the case of) 466.53 519.62 B
(Common Lisp\051.) 63.65 506.62 T
0.28 0.03 (A lisp function describes its ar) 63.65 481.62 B
0.28 0.03 (gument interf) 199.85 481.62 B
0.28 0.03 (ace by means of a) 259.95 481.62 B
3 F
0.28 0.03 (lambda list) 343.39 481.62 B
2 F
0.28 0.03 (. Special syntax for the lambda) 393.17 481.62 B
(list allo) 63.65 468.62 T
(ws the function to handle ar) 96.08 468.62 T
(guments in a v) 218.38 468.62 T
(ariety of w) 282.58 468.62 T
(ays, both positional and by k) 330.12 468.62 T
(e) 456.51 468.62 T
(yw) 461.23 468.62 T
(ord.) 474.56 468.62 T
0.22 (Common Lisp pro) 63.65 443.62 P
0.22 (vides the follo) 144.6 443.62 P
0.22 (wing as lambda list quali\336ers:) 207.71 443.62 P
5 F
0.53 (&optional) 343.57 443.62 P
2 F
0.22 (,) 402.96 443.62 P
5 F
0.53 (&rest) 408.69 443.62 P
2 F
0.22 ( and) 441.69 443.62 P
5 F
0.53 (&key) 463.51 443.62 P
2 8.8 Q
0.18 (2) 489.91 448.02 P
2 11 Q
0.22 (. F) 494.31 443.62 P
0.22 (ormal) 505.98 443.62 P
0.28 0.06 (parameters which are not qualif) 63.65 430.62 B
0.28 0.06 (ied are mapped to ar) 205.3 430.62 B
0.28 0.06 (guments in a positional manner) 297.21 430.62 B
0.28 0.06 (, lik) 437.78 430.62 B
0.28 0.06 (e in C. These are) 455.36 430.62 B
0.03 (called) 63.65 417.62 P
3 F
0.03 (r) 92.7 417.62 P
0.03 (equir) 96.57 417.62 P
0.03 (ed) 119.39 417.62 P
2 F
0.03 ( parameters, and it is an error if an ar) 129.77 417.62 P
0.03 (gument is not supplied for them.) 292.37 417.62 P
5 F
0.08 (&optional) 438.31 417.62 P
2 F
0.03 ( param-) 497.71 417.62 P
0.28 0.12 (eters are also mapped positionally) 63.65 404.62 B
0.28 0.12 (, b) 217.76 404.62 B
0.28 0.12 (ut as the name implies, it is not oblig) 229.17 404.62 B
0.28 0.12 (atory to supply the ar) 398.19 404.62 B
0.28 0.12 (gument.) 495.19 404.62 B
0.28 0.31 (Only one) 63.65 391.62 B
5 F
0.66 0.31 (&rest) 110.39 391.62 B
2 F
0.28 0.31 ( parameter is allo) 144.94 391.62 B
0.28 0.31 (wed; if it is gi) 227.17 391.62 B
0.28 0.31 (v) 294.09 391.62 B
0.28 0.31 (en, then an) 299.74 391.62 B
0.28 0.31 (y ar) 351.51 391.62 B
0.28 0.31 (guments passed from that position) 369.63 391.62 B
-0.14 (onw) 63.65 378.62 P
-0.14 (ards are collected together to form a list) 82.48 378.62 P
2 8.8 Q
-0.11 (3) 256.53 383.02 P
2 11 Q
-0.14 (. The) 260.93 378.62 P
5 F
-0.34 (&rest) 286.01 378.62 P
2 F
-0.14 ( parameter is initialized to this list. Lik) 319.01 378.62 P
-0.14 (e) 488.4 378.62 P
5 F
-0.34 (&rest) 495.9 378.62 P
2 F
-0.14 (,) 528.9 378.62 P
0.28 0.04 (the) 63.65 365.62 B
5 F
0.66 0.04 (&key) 80.28 365.62 B
2 F
0.28 0.04 ( qualif) 106.84 365.62 B
0.28 0.04 (ier also allo) 135.2 365.62 B
0.28 0.04 (ws an arbitrary number of ar) 187.33 365.62 B
0.28 0.04 (guments to follo) 315.18 365.62 B
0.28 0.04 (w) 388.21 365.62 B
2 8.8 Q
0.22 0.04 (4) 396.19 370.02 B
2 11 Q
0.28 0.04 (. An) 400.63 365.62 B
0.28 0.04 (y ar) 419.85 365.62 B
0.28 0.04 (guments passed from) 436.88 365.62 B
0.28 0.01 (the position of the) 63.65 352.62 B
5 F
0.66 0.01 (&key) 147.36 352.62 B
2 F
0.28 0.01 ( onw) 173.78 352.62 B
0.28 0.01 (ards are processed as k) 195.66 352.62 B
0.28 0.01 (e) 297.57 352.62 B
0.28 0.01 (yw) 302.3 352.62 B
0.28 0.01 (ord-v) 315.64 352.62 B
0.28 0.01 (alue pairs. If, during processing, a k) 339.22 352.62 B
0.28 0.01 (e) 498.91 352.62 B
0.28 0.01 (yw) 503.63 352.62 B
0.28 0.01 (ord) 516.97 352.62 B
-0.04 (is found which matches an) 63.65 339.62 P
-0.04 (y of the parameters quali\336ed with) 180.65 339.62 P
5 F
-0.09 (&key) 331.34 339.62 P
2 F
-0.04 ( then the corresponding v) 357.74 339.62 P
-0.04 (alue is used to) 469.13 339.62 P
0.28 0.12 (initialize the parameter) 63.65 326.62 B
0.28 0.12 (. If ar) 167.86 326.62 B
0.28 0.12 (guments are not supplied for) 193.16 326.62 B
5 F
0.66 0.12 (&optional) 326.6 326.62 B
2 F
0.28 0.12 ( and) 387.07 326.62 B
5 F
0.66 0.12 (&key) 409.59 326.62 B
2 F
0.28 0.12 ( qualif) 436.47 326.62 B
0.28 0.12 (ied parameters) 465.38 326.62 B
0.28 0.1 (then a def) 63.65 313.62 B
0.28 0.1 (ault initialization will be performed \050usually this means setting the v) 108.51 313.62 B
0.28 0.1 (alue to) 419.07 313.62 B
5 F
0.66 0.1 (nil) 452.85 313.62 B
2 F
0.28 0.1 (, b) 472.96 313.62 B
0.28 0.1 (ut the pro-) 484.33 313.62 B
(grammer may specify an) 63.65 300.62 T
(y initialization\051.) 172.54 300.62 T
0.28 0.04 (So some functions e) 63.65 275.62 B
0.28 0.04 (xpect a f) 153.97 275.62 B
0.28 0.04 (ix) 192.14 275.62 B
0.28 0.04 (ed number of ar) 200.61 275.62 B
0.28 0.04 (guments, while other functions can do comple) 271.78 275.62 B
0.28 0.04 (x manipula-) 478.16 275.62 B
0.28 0.02 (tions with an arbitrary number of ar) 63.65 262.62 B
0.28 0.02 (guments. Ho) 222.82 262.62 B
0.28 0.02 (w can this be implemented in an ef) 279.25 262.62 B
0.28 0.02 (f) 435.23 262.62 B
0.28 0.02 (icient w) 438.31 262.62 B
0.28 0.02 (ay? W) 473.76 262.62 B
0.28 0.02 (e actu-) 501.65 262.62 B
(ally ha) 63.65 249.62 T
(v) 93.06 249.62 T
(e tw) 98.4 249.62 T
(o schemes in Harlequin, b) 116.92 249.62 T
(ut the) 231.27 249.62 T
(y share man) 255.85 249.62 T
(y features.) 308.84 249.62 T
63.65 198.95 531.65 211.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 206.95 171.65 206.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
0.2 (1.  Ho) 63.65 192.95 P
0.2 (we) 86.07 192.95 P
0.2 (v) 96.34 192.95 P
0.2 (er) 100.71 192.95 P
0.2 (, a compiler may assume that certain lo) 107.34 192.95 P
0.2 (w-le) 249.5 192.95 P
0.2 (v) 265.27 192.95 P
0.2 (el functions speci\336c to the implementation are only e) 269.64 192.95 P
0.2 (v) 462 192.95 P
0.2 (er called in a con-) 466.37 192.95 P
-0.09 (trolled manner) 63.65 182.95 P
-0.09 (. In this case it may be acceptable to optimise a) 115.81 182.95 P
-0.09 (w) 284.55 182.95 P
-0.09 (ay the error checking inside the function. It may also be possible to) 290.95 182.95 P
(optimise the call.) 63.65 172.95 T
0.77 (2.  Common Lisp also accepts the quali\336ers) 63.65 159.95 P
5 F
1.85 (&aux) 229.54 159.95 P
2 F
0.77 ( and) 251.14 159.95 P
5 F
1.85 (&allow-other-keys) 270.18 159.95 P
2 F
0.77 (. Since these do not af) 361.98 159.95 P
0.77 (fect the mapping of the) 445.09 159.95 P
(ar) 63.65 149.95 T
(guments passed to the function, the) 70.48 149.95 T
(y are not described here.) 197.33 149.95 T
-0.16 (3.  Dylan pro) 63.65 136.95 P
-0.16 (vides a similar f) 110.51 136.95 P
-0.16 (acility with the quali\336er) 167.67 136.95 P
5 F
-0.4 (#rest) 255.51 136.95 P
2 F
-0.16 (, b) 282.51 136.95 P
-0.16 (ut de\336nes that the ar) 291.17 136.95 P
-0.16 (guments are collected to form a sequence. This) 363.34 136.95 P
(gi) 63.65 126.95 T
(v) 70.43 126.95 T
(es implementors more freedom than with Common Lisp, as it allo) 74.79 126.95 T
(ws the collection to be either a list or a v) 311.8 126.95 T
(ector) 457.65 126.95 T
(.) 475.15 126.95 T
0.41 (4.) 63.65 113.95 P
5 F
0.98 (&rest) 75.71 113.95 P
2 F
0.41 ( and) 102.71 113.95 P
5 F
0.98 (&key) 121.03 113.95 P
2 F
0.41 (may both be supplied. In this case, the collection to form a list and the k) 149.01 113.95 P
0.41 (e) 414.27 113.95 P
0.41 (yw) 418.14 113.95 P
0.41 (ord processing are both per-) 429.04 113.95 P
(formed on the same set of supplied ar) 63.65 103.95 T
(guments.) 198.71 103.95 T
FMENDPAGE
%%EndPage: "6" 10
%%Page: "7" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
( TDF Suppor) 416.52 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(7) 526.09 84.9 T
(6.1.1) 63.65 738.29 T
(RISC calling mec) 90.65 738.29 T
(hanism) 171.69 738.29 T
2 11 Q
0.28 0.18 (Harlequin\325) 63.65 724.62 B
0.28 0.18 (s Common Lisp for RISC processors adopts a calling sequence which is optimised to) 112.51 724.62 B
0.28 0.18 (w) 504.77 724.62 B
0.28 0.18 (ards) 512.78 724.62 B
(k) 63.65 711.62 T
(eeping information in re) 69.04 711.62 T
(gisters.) 175.5 711.62 T
-0.21 (The \336rst fe) 63.65 686.62 P
-0.21 (w ar) 111.23 686.62 P
-0.21 (guments are mo) 130.06 686.62 P
-0.21 (v) 199.75 686.62 P
-0.21 (ed into re) 205.09 686.62 P
-0.21 (gisters) 246.05 686.62 P
2 8.8 Q
-0.17 (1) 274.78 691.02 P
2 11 Q
-0.21 (. If an) 279.17 686.62 P
-0.21 (y more ar) 304.56 686.62 P
-0.21 (guments are required the) 346.1 686.62 P
-0.21 (y are pushed onto) 454.37 686.62 P
0.28 0.09 (the stack in e) 63.65 673.62 B
0.28 0.09 (v) 123.25 673.62 B
0.28 0.09 (aluation order \050i.e. left to right\051. Note that this ordering reduces the number of temporary) 128.56 673.62 B
0.28 0.07 (v) 63.65 660.62 B
0.28 0.07 (ariables which are necessary to construct the call, since each ar) 68.94 660.62 B
0.28 0.07 (gument can be pushed onto the stack as) 353.23 660.62 B
0.28 0.05 (soon as it is e) 63.65 647.62 B
0.28 0.05 (v) 124.49 647.62 B
0.28 0.05 (aluated) 129.76 647.62 B
2 8.8 Q
0.22 0.05 (2) 161.87 652.02 B
2 11 Q
0.28 0.05 (. When all the ar) 166.32 647.62 B
0.28 0.05 (guments ha) 241.06 647.62 B
0.28 0.05 (v) 292.02 647.62 B
0.28 0.05 (e been initialized, the caller puts the total number of) 297.4 647.62 B
0.28 0.12 (supplied ar) 63.65 634.62 B
0.28 0.12 (guments into the) 113.59 634.62 B
3 F
0.28 0.12 (ar) 192.49 634.62 B
0.28 0.12 (g-count) 202.09 634.62 B
2 F
0.28 0.12 ( re) 236.51 634.62 B
0.28 0.12 (gister) 248.27 634.62 B
0.28 0.12 (, as an untagged inte) 272.97 634.62 B
0.28 0.12 (ger) 366.49 634.62 B
0.28 0.12 (. Finally) 380.28 634.62 B
0.28 0.12 (, before the call, the Lisp) 417.56 634.62 B
0.28 0.16 (object representing the destination function is mo) 63.65 621.62 B
0.28 0.16 (v) 290.59 621.62 B
0.28 0.16 (ed into the) 296.09 621.62 B
3 F
0.28 0.16 (function r) 348.01 621.62 B
0.28 0.16 (e) 392.55 621.62 B
0.28 0.16 (gister) 397.15 621.62 B
2 F
0.28 0.16 (. This function object is) 422.55 621.62 B
-0.01 (composed of tw) 63.65 608.62 P
-0.01 (o parts:) 133.78 608.62 P
3 F
-0.01 (code) 169.2 608.62 P
2 F
-0.01 ( and) 189.96 608.62 P
3 F
-0.01 (constants) 211.32 608.62 P
2 F
-0.01 (. The code is a tagged Lisp object containing the binary code to) 252.88 608.62 P
0.13 (implement the function. The constants are a Lisp v) 63.65 595.62 P
0.13 (ector of the non-parameterised data manipulated by the) 287.87 595.62 P
0.28 0.18 (code.) 63.65 582.62 B
2 8.8 Q
0.22 0.18 (3) 88.05 587.02 B
2 11 Q
0.28 0.18 ( The call itself then in) 92.63 582.62 B
0.28 0.18 (v) 194.06 582.62 B
0.28 0.18 (olv) 199.52 582.62 B
0.28 0.18 (es loading the code from the function object, and jumping to the f) 213.94 582.62 B
0.28 0.18 (irst) 517.06 582.62 B
(instruction. On return from the call, the caller pops an) 63.65 569.62 T
(y ar) 300.25 569.62 T
(guments it may ha) 316.85 569.62 T
(v) 397.6 569.62 T
(e pushed onto the stack.) 402.93 569.62 T
-0.11 (The called function processes ar) 63.65 544.62 P
-0.11 (guments depending on its lambda list. If the function has required parame-) 204.74 544.62 P
0.28 0.17 (ters, then a check is made to ensure that enough ar) 63.65 531.62 B
0.28 0.17 (guments were supplied. Unless there are) 296.31 531.62 B
5 F
0.66 0.17 (&rest) 485.27 531.62 B
2 F
0.28 0.17 ( or) 519.12 531.62 B
5 F
0.66 0.03 (&key) 63.65 518.62 B
2 F
0.28 0.03 ( parameters, a check is also made that there were not too man) 90.15 518.62 B
0.28 0.03 (y ar) 365.2 518.62 B
0.28 0.03 (guments passed. If either of these) 382.18 518.62 B
-0.06 (tests f) 63.65 505.62 P
-0.06 (ails, then a tail-call is made to a function which will signal the error) 89.45 505.62 P
-0.06 (. This tail-call uses a special con-) 385.66 505.62 P
0.28 0.04 (v) 63.65 492.62 B
0.28 0.04 (ention in order to reduce space \050since almost all functions will ha) 69.02 492.62 B
0.28 0.04 (v) 361.05 492.62 B
0.28 0.04 (e to contain code for this) 366.42 492.62 B
2 8.8 Q
0.22 0.04 (4) 477.78 497.02 B
2 11 Q
0.28 0.04 (\051. The con-) 482.21 492.62 B
0.09 (v) 63.65 479.62 P
0.09 (ention is simply the bare minimum of a jump to the code of the handler) 68.98 479.62 P
2 8.8 Q
0.07 (5) 383.73 484.02 P
2 11 Q
0.09 ( since the rest of the information) 388.13 479.62 P
-0.13 (\050the number of ar) 63.65 466.62 P
-0.13 (guments, the ar) 139.73 466.62 P
-0.13 (guments themselv) 206.79 466.62 P
-0.13 (es and the destination function\051 may all be found in re) 286.25 466.62 P
-0.13 (g-) 522.48 466.62 P
(isters.) 63.65 453.62 T
0.28 0.07 (The processing of optional parameters requires testing the ar) 63.65 428.62 B
0.28 0.07 (g-count to see if an ar) 336.03 428.62 B
0.28 0.07 (gument w) 434.33 428.62 B
0.28 0.07 (as supplied.) 478.71 428.62 B
-0.15 (The parameter is initialized to the ar) 63.65 415.62 P
-0.15 (gument if applicable, otherwise it is initialized by code in the function.) 222 415.62 P
-0.23 (Where there is more than one optional ar) 63.65 402.62 P
-0.23 (gument, it is not necessary to test the ar) 241.75 402.62 P
-0.23 (g-count for each parameter) 413.53 402.62 P
(once the limit of supplied ar) 63.65 389.62 T
(guments has been reached.) 187.19 389.62 T
0.28 0.02 (Processing of an) 63.65 364.62 B
0.28 0.02 (y) 137.1 364.62 B
5 F
0.66 0.02 (&rest) 145.67 364.62 B
2 F
0.28 0.02 ( parameter potentially requires a lar) 178.79 364.62 B
0.28 0.02 (ge amount of computation to create the list.) 337.5 364.62 B
0.28 0.15 (This is therefore performed out of line by calling a dedicated function. This dedicated function is then) 63.65 351.62 B
(required to map o) 63.65 338.62 T
(v) 141.38 338.62 T
(er the ar) 146.72 338.62 T
(guments of its caller to create a list of the appropriate v) 182.56 338.62 T
(alues.) 425.15 338.62 T
0.22 (K) 63.65 313.62 P
0.22 (e) 71.32 313.62 P
0.22 (yw) 76.03 313.62 P
0.22 (ord processing is handled by al) 89.37 313.62 P
0.22 (w) 226.92 313.62 P
0.22 (ays creating the collection of e) 234.75 313.62 P
0.22 (xtra ar) 370.4 313.62 P
0.22 (guments \050e) 398.83 313.62 P
0.22 (v) 447.35 313.62 P
0.22 (en if there w) 452.68 313.62 P
0.22 (as no) 508.52 313.62 P
5 F
(&rest) 63.65 300.62 T
2 F
( parameter\051, and searching for each k) 96.65 300.62 T
(e) 259.94 300.62 T
(y parameter in the collection list.) 264.66 300.62 T
0.02 (Certain lo) 63.65 275.62 P
0.02 (w-le) 107.08 275.62 P
0.02 (v) 126.36 275.62 P
0.02 (el functions are compiled at a lo) 131.69 275.62 P
0.02 (w safety le) 272.67 275.62 P
0.02 (v) 320.08 275.62 P
0.02 (el, and do not e) 325.42 275.62 P
0.02 (v) 392.73 275.62 P
0.02 (er check the number of passed) 398.07 275.62 P
0.12 (ar) 63.65 262.62 P
0.12 (guments. If the compiler kno) 72 262.62 P
0.12 (ws that a called function is unsafe in this w) 199.62 262.62 P
0.12 (ay) 390.35 262.62 P
0.12 (, then it may compile a call to) 400.02 262.62 P
-0.24 (the function without setting the ar) 63.65 249.62 P
-0.24 (g-count re) 211.07 249.62 P
-0.24 (gister) 255.57 249.62 P
-0.24 (. Note that this optimisation is a simple subset of the stan-) 279.41 249.62 P
0.28 0.08 (dard calling con) 63.65 236.62 B
0.28 0.08 (v) 135.94 236.62 B
0.28 0.08 (ention. An unsafe function called in the normal w) 141.36 236.62 B
0.28 0.08 (ay w) 365.91 236.62 B
0.28 0.08 (ould still interpret its ar) 387.48 236.62 B
0.28 0.08 (guments) 493.88 236.62 B
(correctly) 63.65 223.62 T
(.) 102.03 223.62 T
63.65 200.95 531.65 213.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 208.95 171.65 208.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
(1.  T) 63.65 194.95 T
(ypically 4 re) 79.68 194.95 T
(gisters are used for ar) 124.53 194.95 T
(gument passing, depending on the processor) 201.84 194.95 T
(.) 360.83 194.95 T
(2.  A re) 63.65 181.95 T
(v) 90.41 181.95 T
(erse ordering might possibly ha) 94.78 181.95 T
(v) 208.09 181.95 T
(e some adv) 212.45 181.95 T
(antages for the callee, b) 252.72 181.95 T
(ut w) 337.76 181.95 T
(ould be a disadv) 353.42 181.95 T
(antage for the caller) 411.94 181.95 T
2 10 Q
(.) 483.11 181.95 T
2 9 Q
0.03 (3.  This includes Lisp objects which appear as constants in the function. It also includes information such as the name and lambda) 63.65 168.95 P
(list of the function for deb) 63.65 158.95 T
(ugging purposes.) 157.71 158.95 T
0.47 (4.  Man) 63.65 145.95 P
0.47 (y functions also check for stack o) 92.2 145.95 P
0.47 (v) 215.35 145.95 P
0.47 (er\337o) 219.72 145.95 P
0.47 (w) 235.99 145.95 P
0.47 (. T) 241.9 145.95 P
0.47 (o reduce code size, the same error handler is called in this case. The handler) 251.65 145.95 P
(will check ag) 63.65 135.95 T
(ain for stack o) 111.59 135.95 T
(v) 162.69 135.95 T
(er\337o) 167.06 135.95 T
(w to determine wh) 183.33 135.95 T
(y it w) 250.52 135.95 T
(as in) 270.94 135.95 T
(v) 287.33 135.95 T
(ok) 291.64 135.95 T
(ed.) 300.55 135.95 T
0.38 (5.  This jump must be before the stack frame of the function has been b) 63.65 122.95 P
0.38 (uilt for it to be most ef) 325.55 122.95 P
0.38 (\336cient. Hence the ar) 408.58 122.95 P
0.38 (gument count) 482.02 122.95 P
(checking must also be before b) 63.65 112.95 T
(uilding a stack frame.) 175.19 112.95 T
FMENDPAGE
%%EndPage: "7" 11
%%Page: "8" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
(TDF Suppor) 418.74 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(8) 63.65 84.9 T
2 11 Q
-0.1 (At an) 63.65 737.62 P
-0.1 (y point in the compiled code of a function, the compiler may choose to b) 87.51 737.62 P
-0.1 (uild a stack frame. The com-) 405.7 737.62 P
0.28 0.02 (piler will normally optimize this so that a conditional branch of the program which can operate without a) 63.65 724.62 B
-0.04 (stack frame is able to do so without the e) 63.65 711.62 P
-0.04 (xpense of creating one. The stack frame will ne) 243.11 711.62 P
-0.04 (v) 451.19 711.62 P
-0.04 (er be b) 456.52 711.62 P
-0.04 (uilt before) 486.17 711.62 P
0.28 0.07 (the ar) 63.65 698.62 B
0.28 0.07 (gument count check and stack o) 88.86 698.62 B
0.28 0.07 (v) 232.87 698.62 B
0.28 0.07 (erf) 238.27 698.62 B
0.28 0.07 (lo) 250.07 698.62 B
0.28 0.07 (w check. Building a stack frame in) 258.49 698.62 B
0.28 0.07 (v) 414.99 698.62 B
0.28 0.07 (olv) 420.33 698.62 B
0.28 0.07 (es: pushing the return) 434.42 698.62 B
0.26 (address onto the stack; pushing the caller\325) 63.65 685.62 P
0.26 (s frame pointer re) 249.12 685.62 P
0.26 (gister and setting the ne) 327.61 685.62 P
0.26 (w frame pointer to the) 432.86 685.62 P
-0.19 (stack pointer; pushing the caller\325) 63.65 672.62 P
-0.19 (s constants v) 206.49 672.62 P
-0.19 (ector \050in the constants re) 262.18 672.62 P
-0.19 (gister\051 and loading the ne) 369.41 672.62 P
-0.19 (w constants) 480.2 672.62 P
-0.15 (v) 63.65 659.62 P
-0.15 (ector into the constants re) 68.98 659.62 P
-0.15 (gister with an indirection from the contents of the function re) 181.24 659.62 P
-0.15 (gister; pushing an) 448.4 659.62 P
-0.15 (y) 526.15 659.62 P
0.28 0.04 (callee-sa) 63.65 646.62 B
0.28 0.04 (v) 102.28 646.62 B
0.28 0.04 (e re) 107.65 646.62 B
0.28 0.04 (gisters which are used in the function; pushing and initializing \050with a safe v) 124.11 646.62 B
0.28 0.04 (alue for GC\051 a) 467.06 646.62 B
(spill area for those temporary v) 63.65 633.62 T
(ariables which cannot be located in machine re) 201.15 633.62 T
(gisters.) 407.18 633.62 T
0 10 Q
(6.1.2) 63.65 609.29 T
(CISC calling mec) 90.65 609.29 T
(hanism) 171.69 609.29 T
2 11 Q
0.12 (The CISC calling mechanism is currently only used for PCs with Intel 386 and 486 processors. It is w) 63.65 595.62 P
0.12 (orth) 513.93 595.62 P
-0.04 (e) 63.65 582.62 P
-0.04 (xamining this mechanism both for its similarities and its dif) 68.37 582.62 P
-0.04 (ferences. The dif) 330.22 582.62 P
-0.04 (ferences are partly historical,) 404.09 582.62 P
-0.17 (partly because the 386 has fe) 63.65 569.62 P
-0.17 (w re) 189.88 569.62 P
-0.17 (gisters, and partly because some good ideas ha) 208.78 569.62 P
-0.17 (v) 412.62 569.62 P
-0.17 (e not yet \336ltered from one) 417.96 569.62 P
(implementation to the other) 63.65 556.62 T
(.) 184.96 556.62 T
-0.19 (The mechanism of the call itself is v) 63.65 531.62 P
-0.19 (ery similar to the RISC implementation. First, all the ar) 221.95 531.62 P
-0.19 (guments are set) 463.59 531.62 P
0.06 (up: in this case all the ar) 63.65 518.62 P
0.06 (guments b) 170.72 518.62 P
0.06 (ut the last are pushed on the stack in e) 216.08 518.62 P
0.06 (v) 383.42 518.62 P
0.06 (aluation order; the last ar) 388.64 518.62 P
0.06 (gument) 498.65 518.62 P
0.15 (is al) 63.65 505.62 P
0.15 (w) 81.72 505.62 P
0.15 (ays passed in the) 89.55 505.62 P
3 F
0.15 (ar) 167.15 505.62 P
0.15 (gument r) 176.52 505.62 P
0.15 (e) 215.68 505.62 P
0.15 (gister) 220.13 505.62 P
2 F
0.15 (. Ne) 244.58 505.62 P
0.15 (xt, the) 262.89 505.62 P
3 F
0.15 (ar) 293.45 505.62 P
0.15 (g-count) 302.82 505.62 P
2 F
0.15 ( re) 336.43 505.62 P
0.15 (gister is initialized as for RISC machines,) 347.71 505.62 P
0.08 (e) 63.65 492.62 P
0.08 (xcept that here the ar) 68.37 492.62 P
0.08 (g-count re) 160.75 492.62 P
0.08 (gister is only a byte) 205.57 492.62 P
2 8.8 Q
0.07 (1) 292.06 497.02 P
2 11 Q
0.08 (, which is ef) 296.46 492.62 P
0.08 (\336cient to set on a 386. Finally) 350.2 492.62 P
0.08 (, the details) 481.07 492.62 P
0.19 (of the call itself depend on the type of function being called: If the function is a symbol \050i.e. a normal call) 63.65 479.62 P
0.28 0.08 (of a named function\051, then the symbol appears as an in-line constant in the code and the call instruction) 63.65 466.62 B
0.18 (jumps to an address stored at a \336x) 63.65 453.62 P
0.18 (ed of) 214.12 453.62 P
0.18 (fset from the symbol pointer) 236.32 453.62 P
0.18 (. If the function is kno) 361.69 453.62 P
0.18 (wn to be a com-) 460.07 453.62 P
0.28 0.19 (piled function object \050) 63.65 440.62 B
3 F
0.28 0.19 (CFO) 166.2 440.62 B
2 F
0.28 0.19 (\051, then the tagged pointer to the CFO actually gi) 188.76 440.62 B
0.28 0.19 (v) 410.86 440.62 B
0.28 0.19 (es the address of the f) 416.38 440.62 B
0.28 0.19 (irst) 517.03 440.62 B
0.28 0.03 (instruction which can be called directly) 63.65 427.62 B
0.28 0.03 (. If the function type is not kno) 238.79 427.62 B
0.28 0.03 (wn at compile time, then the func-) 377.76 427.62 B
-0.05 (tion object is mo) 63.65 414.62 P
-0.05 (v) 136.98 414.62 P
-0.05 (ed into the) 142.32 414.62 P
3 F
-0.05 (dispatc) 191.36 414.62 P
-0.05 (h) 222.98 414.62 P
2 F
-0.05 ( re) 228.48 414.62 P
-0.05 (gister) 239.56 414.62 P
-0.05 (, and a dedicated dispatcher function is called, which decides) 263.56 414.62 P
0.28 0.12 (ho) 63.65 401.62 B
0.28 0.12 (w to call the intended function from its type and jumps to the appropriate address. After the call, the) 74.61 401.62 B
(stack ar) 63.65 388.62 T
(guments do not ha) 97.35 388.62 T
(v) 178.1 388.62 T
(e to be popped from the stack - this is done by the called function.) 183.44 388.62 T
2 8.8 Q
(2) 473.98 393.02 T
2 11 Q
0.05 (If there are only required parameters, the callee checks the ar) 63.65 363.62 P
0.05 (g-count as for the RISC implementation. The) 332.44 363.62 P
0.2 (important dif) 63.65 350.62 P
0.2 (ference is in ho) 121.32 350.62 P
0.2 (w the specialized parameters are processed. Since the callee has the responsi-) 189.16 350.62 P
-0.04 (bility for remo) 63.65 337.62 P
-0.04 (ving its ar) 127.57 337.62 P
-0.04 (guments from the stack there is no restriction on the callee to preserv) 171.29 337.62 P
-0.04 (e the number) 474.3 337.62 P
(of ar) 63.65 324.62 T
(guments on the stack during the call.) 83.91 324.62 T
0.28 0.01 (Consider a lambda list which ends with a single optional parameter) 63.65 299.62 B
0.28 0.01 (. If the caller does not supply an ar) 362.18 299.62 B
0.28 0.01 (gu-) 516.97 299.62 B
-0.1 (ment for this parameter) 63.65 286.62 P
-0.1 (, then the callee can insert the v) 165.85 286.62 P
-0.1 (alue of the ar) 303.53 286.62 P
-0.1 (gument re) 360.75 286.62 P
-0.1 (gister onto the stack after the) 404.78 286.62 P
0.19 (other stack ar) 63.65 273.62 P
0.19 (guments, and mo) 123.09 273.62 P
0.19 (v) 198.77 273.62 P
0.19 (e) 204.11 273.62 P
5 F
0.46 (nil) 211.93 273.62 P
2 F
0.19 ( into the ar) 231.73 273.62 P
0.19 (gument re) 279.45 273.62 P
0.19 (gister) 323.78 273.62 P
0.19 (. Apart from the ar) 347.61 273.62 P
0.19 (g-count, the ar) 430.34 273.62 P
0.19 (guments) 494.37 273.62 P
0.28 0.06 (no) 63.65 260.62 B
0.28 0.06 (w are arranged as if) 74.49 260.62 B
5 F
0.66 0.06 (nil) 166.57 260.62 B
2 F
0.28 0.06 ( had been supplied, and all ar) 186.54 260.62 B
0.28 0.06 (guments can no) 318.35 260.62 B
0.28 0.06 (w be treated in the same w) 388.49 260.62 B
0.28 0.06 (ay as) 508.84 260.62 B
0.28 0.08 (required ar) 63.65 247.62 B
0.28 0.08 (guments, already initialized, and in a kno) 112.52 247.62 B
0.28 0.08 (wn position in the function frame. The technique of) 298.6 247.62 B
(adding) 63.65 234.62 T
5 F
(nil) 96.34 234.62 T
2 F
(s scales up to an) 116.14 234.62 T
(y number of optional ar) 187.46 234.62 T
(guments.) 291.14 234.62 T
0.28 0.06 (Similarly) 63.65 209.62 B
0.28 0.06 (, an) 104.47 209.62 B
0.28 0.06 (y rest ar) 120.73 209.62 B
0.28 0.06 (guments can be collected up and the original supplied ar) 157.1 209.62 B
0.28 0.06 (guments remo) 410.8 209.62 B
0.28 0.06 (v) 474.33 209.62 B
0.28 0.06 (ed from the) 479.73 209.62 B
-0.12 (stack, lea) 63.65 196.62 P
-0.12 (ving the collection list in the ar) 104.24 196.62 P
-0.12 (gument re) 240.18 196.62 P
-0.12 (gister) 284.18 196.62 P
-0.12 (. Ag) 308.02 196.62 P
-0.12 (ain, apart from the ar) 326.78 196.62 P
-0.12 (g-count, the function no) 418.64 196.62 P
-0.12 (w) 523.71 196.62 P
-0.13 (appears to ha) 63.65 183.62 P
-0.13 (v) 121.2 183.62 P
-0.13 (e been called as if the rest parameter were directly passed a list, and all parameters including) 126.54 183.62 P
(the rest parameter can be treated as required parameters.) 63.65 170.62 T
63.65 152.95 531.65 165.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 160.95 171.65 160.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
0.09 (1.  This imposes a restriction of 255 on the total number of ar) 63.65 146.95 P
0.09 (guments which may be passed to a function. The de\336nition of Com-) 285.66 146.95 P
(mon Lisp allo) 63.65 136.95 T
(ws for such a restriction pro) 113.43 136.95 T
(vided that the limit is not less than 50.) 214.02 136.95 T
0.77 (2.  Rationale: there are more calls to functions than there are functions. Since, in general, a function will only ha) 63.65 123.95 P
0.77 (v) 482.76 123.95 P
0.77 (e one return) 487.13 123.95 P
0.02 (sequence, less code will be required to pop stack ar) 63.65 113.95 P
0.02 (guments if this is done in the return sequence, than if done after the call. There) 248.13 113.95 P
(are other adv) 63.65 103.95 T
(antages too, from the callee\325) 110.4 103.95 T
(s vie) 212.13 103.95 T
(wpoint; these are described belo) 228.65 103.95 T
(w) 344.4 103.95 T
(.) 350.32 103.95 T
FMENDPAGE
%%EndPage: "8" 12
%%Page: "9" 13
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
( TDF Suppor) 416.52 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(9) 526.09 84.9 T
2 11 Q
-0.09 (Ev) 63.65 737.62 P
-0.09 (en k) 75.7 737.62 P
-0.09 (e) 94.14 737.62 P
-0.09 (yw) 98.86 737.62 P
-0.09 (ords can be treated in this w) 112.19 737.62 P
-0.09 (ay) 234.97 737.62 P
-0.09 (, after some rearrangement on the stack. In this case, the k) 244.64 737.62 P
-0.09 (e) 498.93 737.62 P
-0.09 (yw) 503.65 737.62 P
-0.09 (ord) 516.98 737.62 P
-0.1 (v) 63.65 724.62 P
-0.1 (alue pairs must be shuf) 68.87 724.62 P
-0.1 (\337ed do) 169.62 724.62 P
-0.1 (wn the stack, to mak) 199.49 724.62 P
-0.1 (e room for v) 289.71 724.62 P
-0.1 (alues for the each k) 343.81 724.62 P
-0.1 (e) 428.82 724.62 P
-0.1 (yw) 433.54 724.62 P
-0.1 (ord parameter) 446.87 724.62 P
-0.1 (, as if) 507.72 724.62 P
-0.25 (it were a required parameter) 63.65 711.62 P
-0.25 (. The space so created is \336lled with) 186.04 711.62 P
5 F
-0.61 (nil) 341.35 711.62 P
2 F
-0.25 (s since this is the def) 361.15 711.62 P
-0.25 (ault v) 451.13 711.62 P
-0.25 (alue for each) 475.35 711.62 P
-0.24 (k) 63.65 698.62 P
-0.24 (e) 69.04 698.62 P
-0.24 (yw) 73.76 698.62 P
-0.24 (ord parameter) 87.09 698.62 P
-0.24 (. Ne) 147.63 698.62 P
-0.24 (xt, a search is made through the k) 165.55 698.62 P
-0.24 (e) 311.61 698.62 P
-0.24 (yw) 316.33 698.62 P
-0.24 (ord v) 329.66 698.62 P
-0.24 (alue pairs for each k) 352.05 698.62 P
-0.24 (e) 440.16 698.62 P
-0.24 (yw) 444.88 698.62 P
-0.24 (ord parameter; if) 458.21 698.62 P
0.28 0.02 (it is found, the v) 63.65 685.62 B
0.28 0.02 (alue is put into the appropriate place for the parameter in the ne) 136.64 685.62 B
0.28 0.02 (w area. Finally) 420.19 685.62 B
0.28 0.02 (, all of the) 486 685.62 B
(shuf) 63.65 672.62 T
(\337ed ar) 82.32 672.62 T
(guments are remo) 109.91 672.62 T
(v) 188.56 672.62 T
(ed from the stack, lea) 193.9 672.62 T
(ving the required set of pre-initialized ar) 288.07 672.62 T
(guments) 465.67 672.62 T
2 8.8 Q
(1) 502.94 677.02 T
2 11 Q
(.) 507.34 672.62 T
-0.13 (The adv) 63.65 647.62 P
-0.13 (antage of treating ar) 98.98 647.62 P
-0.13 (guments in this w) 186.67 647.62 P
-0.13 (ay is that all the manipulations described can actually be per-) 264.1 647.62 P
0.28 0.03 (formed in a handful of dedicated functions, which can then be called as required in the prologue of func-) 63.65 634.62 B
0.28 0.05 (tions which ha) 63.65 621.62 B
0.28 0.05 (v) 128.77 621.62 B
0.28 0.05 (e comple) 134.15 621.62 B
0.28 0.05 (x lambda lists to process. F) 174.64 621.62 B
0.28 0.05 (or functions with k) 296.88 621.62 B
0.28 0.05 (e) 381.86 621.62 B
0.28 0.05 (yw) 386.63 621.62 B
0.28 0.05 (ord parameters, the dedicated) 400.05 621.62 B
0.02 (function must be passed a v) 63.65 608.62 P
0.02 (ector of the k) 185.48 608.62 P
0.02 (e) 243.78 608.62 P
0.02 (yw) 248.5 608.62 P
0.02 (ord parameters so that the rele) 261.83 608.62 P
0.02 (v) 394.53 608.62 P
0.02 (ant searches can be made. F) 399.76 608.62 P
0.02 (or) 522.48 608.62 P
0.28 0.08 (all parameter processing, the dedicated function must be passed the number of required parameters, and) 63.65 595.62 B
-0.03 (the number of optional parameters. Note that the dedicated functions can e) 63.65 582.62 P
-0.03 (v) 391.14 582.62 P
-0.03 (en call the error function when) 396.48 582.62 P
0.28 0.03 (the number of supplied ar) 63.65 569.62 B
0.28 0.03 (guments is inappropriate. This reduces the code size of functions with comple) 178.3 569.62 B
0.28 0.03 (x) 526.15 569.62 B
0.28 0.02 (lambda lists so dramatically that I e) 63.65 556.62 B
0.28 0.02 (xpect that we will e) 222.36 556.62 B
0.28 0.02 (v) 309.77 556.62 B
0.28 0.02 (entually adopt this technique for RISC machines) 315.13 556.62 B
(too \050along with the necessary change that the callee remo) 63.65 543.62 T
(v) 315.5 543.62 T
(es the stack ar) 320.84 543.62 T
(guments\051.) 382.65 543.62 T
-0.07 (F) 63.65 518.62 P
-0.07 (or this technique to w) 69.6 518.62 P
-0.07 (ork, a special calling con) 164.55 518.62 P
-0.07 (v) 273.51 518.62 P
-0.07 (ention for the dedicated functions is required, so that the) 278.84 518.62 P
-0.07 (y) 526.15 518.62 P
0.28 0.08 (preserv) 63.65 505.62 B
0.28 0.08 (e the ar) 96.41 505.62 B
0.28 0.08 (gument and ar) 129.76 505.62 B
0.28 0.08 (g-count re) 194.07 505.62 B
0.28 0.08 (gisters. The tw) 239.87 505.62 B
0.28 0.08 (o inte) 306.57 505.62 B
0.28 0.08 (ger ar) 331.91 505.62 B
0.28 0.08 (guments to the dedicated functions are) 357.8 505.62 B
0.18 (carefully encoded into a single re) 63.65 492.62 P
0.18 (gister; the k) 210.69 492.62 P
0.18 (e) 262.87 492.62 P
0.18 (yw) 267.59 492.62 P
0.18 (ord v) 280.92 492.62 P
0.18 (ector is passed in another re) 303.85 492.62 P
0.18 (gister which is not used) 427.06 492.62 P
0.28 0.08 (in the normal con) 63.65 479.62 B
0.28 0.08 (v) 142.67 479.62 B
0.28 0.08 (ention. Note that the dedicated functions must actually manipulate the stack frame of) 148.09 479.62 B
(their caller) 63.65 466.62 T
(, which mak) 110.55 466.62 T
(es them v) 164.52 466.62 T
(ery unusual functions indeed) 206.52 466.62 T
2 8.8 Q
(2) 333.3 471.02 T
2 11 Q
(.) 337.7 466.62 T
0 10 Q
(6.1.3) 63.65 442.29 T
(Ar) 90.65 442.29 T
(c) 101.56 442.29 T
(hitecture neutral calling mec) 107.02 442.29 T
(hanism) 242.52 442.29 T
2 11 Q
0.28 0.19 (It may be possible to call standard Lisp functions with TDF constructs using the standard mechanism) 63.65 428.62 B
5 F
0.66 0.07 (apply_proc) 63.65 415.62 B
2 F
0.28 0.07 (. One possibility w) 130.34 415.62 B
0.28 0.07 (ould be to pass the count of the number of ar) 215.48 415.62 B
0.28 0.07 (guments as the f) 417.88 415.62 B
0.28 0.07 (irst ar) 491 415.62 B
0.28 0.07 (gu-) 516.91 415.62 B
0.28 0.09 (ment. This gi) 63.65 402.62 B
0.28 0.09 (v) 123.45 402.62 B
0.28 0.09 (es the functionality required for a standard call, although there are some minor ef) 128.87 402.62 B
0.28 0.09 (f) 496.36 402.62 B
0.28 0.09 (icienc) 499.51 402.62 B
0.28 0.09 (y) 526.15 402.62 B
0.28 0.07 (concerns about the order of pushing ar) 63.65 389.62 B
0.28 0.07 (guments onto the stack \050this is lik) 237.01 389.62 B
0.28 0.07 (ely to be the re) 388.91 389.62 B
0.28 0.07 (v) 456.24 389.62 B
0.28 0.07 (erse of the Lisp) 461.64 389.62 B
(e) 63.65 376.62 T
(v) 68.26 376.62 T
(aluation order\051.) 73.48 376.62 T
0.28 0.03 (Unfortunately) 63.65 351.62 B
0.28 0.03 (, it is dif) 125 351.62 B
0.28 0.03 (f) 162.53 351.62 B
0.28 0.03 (icult to manipulate stack ar) 165.62 351.62 B
0.28 0.03 (guments in an AN f) 286.45 351.62 B
0.28 0.03 (ashion, so the techniques described) 374.71 351.62 B
0.28 0.14 (abo) 63.65 338.62 B
0.28 0.14 (v) 79.8 338.62 B
0.28 0.14 (e which use special calling con) 85.28 338.62 B
0.28 0.14 (v) 227.26 338.62 B
0.28 0.14 (entions to call dedicated functions may not be possible. The code) 232.74 338.62 B
(increase because of this could be substantial.) 63.65 325.62 T
0 12 Q
(6.2) 63.65 291.95 T
(Appl) 90.65 291.95 T
(y) 117.13 291.95 T
2 11 Q
-0.03 (In section 6.1 we sa) 63.65 274.62 P
-0.03 (w that for called functions ar) 150.45 274.62 P
-0.03 (gument handling is more po) 276.89 274.62 P
-0.03 (werful than in C. W) 399.96 274.62 P
-0.03 (e also sa) 486.65 274.62 P
-0.03 (w) 523.71 274.62 P
0.28 0.01 (that all functions must be able to be called with an) 63.65 261.62 B
0.28 0.01 (y number of ar) 287.93 261.62 B
0.28 0.01 (guments. The function calls themselv) 353.76 261.62 B
0.28 0.01 (es,) 519.72 261.62 B
-0.06 (ho) 63.65 248.62 P
-0.06 (we) 74.37 248.62 P
-0.06 (v) 86.92 248.62 P
-0.06 (er) 92.26 248.62 P
-0.06 (, all used a statically determined number of ar) 100.37 248.62 P
-0.06 (guments in a similar w) 300.98 248.62 P
-0.06 (ay to a C function call. In f) 400.84 248.62 P
-0.06 (act) 518.82 248.62 P
(Lisp does allo) 63.65 235.62 T
(w a dynamic call too; in Common Lisp) 125.09 235.62 T
2 8.8 Q
(3) 297.12 240.02 T
2 11 Q
( this is called) 301.52 235.62 T
4 F
(apply) 362.02 235.62 T
2 F
(.) 394.31 235.62 T
5 F
0.55 (Apply) 63.65 210.62 P
2 F
0.23 ( is Common Lisp function which tak) 96.65 210.62 P
0.23 (es as ar) 259.26 210.62 P
0.23 (guments a function to be called, and the parameters to) 291.89 210.62 P
0.28 0.01 (be passed to the function \050an) 63.65 197.62 B
5 F
0.66 0.01 (&rest) 194.52 197.62 B
2 F
0.28 0.01 ( parameter is used for this\051. The last ar) 227.57 197.62 B
0.28 0.01 (gument to) 399.54 197.62 B
5 F
0.66 0.01 (apply) 447.25 197.62 B
2 F
0.28 0.01 ( is a treated) 480.3 197.62 B
0.28 0.11 (as a list) 63.65 184.62 B
2 8.8 Q
0.22 0.11 (4) 98.17 189.02 B
2 11 Q
0.28 0.11 ( of further ar) 102.67 184.62 B
0.28 0.11 (guments for the function, so that the ar) 160.7 184.62 B
0.28 0.11 (guments for the function consist of the last) 337.2 184.62 B
63.65 167.95 531.65 180.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 175.95 171.65 175.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
0.6 (1.  F) 63.65 161.95 P
0.6 (or simplicity) 80.96 161.95 P
0.6 (, I ha) 126.73 161.95 P
0.6 (v) 145.99 161.95 P
0.6 (e omitted some details here, lik) 150.35 161.95 P
0.6 (e ho) 265.74 161.95 P
0.6 (w k) 281.36 161.95 P
0.6 (e) 295.11 161.95 P
0.6 (yw) 298.97 161.95 P
0.6 (ord and optional parameters are initialized to non-nil v) 309.88 161.95 P
0.6 (alues.) 510.9 161.95 P
(This is actually straight-forw) 63.65 151.95 T
(ard, as is the problem of handling an) 167.8 151.95 T
(y combination of optional, k) 299.14 151.95 T
(e) 401.3 151.95 T
(yw) 405.16 151.95 T
(ord and rest parameters.) 416.07 151.95 T
(2.  It is not possible to code these functions in Common Lisp.) 63.65 138.95 T
(3.  Also for man) 63.65 125.95 T
(y other Lisps.) 122.26 125.95 T
(4.  In Dylan the last ar) 63.65 112.95 T
(gument may be an) 143.72 112.95 T
(y sequence, e.g. a list, a v) 209.83 112.95 T
(ector) 301.67 112.95 T
(, a string, a double ended queue etc.) 319.3 112.95 T
FMENDPAGE
%%EndPage: "9" 13
%%Page: "10" 14
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
(TDF Suppor) 418.74 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(10) 63.65 84.9 T
2 11 Q
0.28 0.19 (ar) 63.65 737.62 B
0.28 0.19 (gument to) 72.38 737.62 B
5 F
0.66 0.19 (apply) 121.88 737.62 B
2 F
0.28 0.19 ( appended to all the other ar) 155.83 737.62 B
0.28 0.19 (guments to) 285.59 737.62 B
5 F
0.66 0.19 (apply) 339.57 737.62 B
2 F
0.28 0.19 ( apart from the function itself. F) 373.51 737.62 B
0.28 0.19 (or) 522.29 737.62 B
(e) 63.65 724.62 T
(xample:) 68.37 724.62 T
5 10 Q
(\050apply \325some-function 1 2 \325\0503 4 5\051\051) 63.65 706.29 T
2 11 Q
(is equi) 63.65 681.62 T
(v) 92.4 681.62 T
(alent to the static function call) 97.63 681.62 T
5 10 Q
(\050some-function 1 2 3 4 5\051) 63.65 663.29 T
2 11 Q
-0.09 (In this e) 63.65 638.62 P
-0.09 (xample, the \336nal list is of static size, so that the compiler could transform the dynamic call into the) 98.75 638.62 P
(static call. In the general case, though, the \336nal list will not be kno) 63.65 625.62 T
(wn at compile time.) 355.46 625.62 T
0.26 (It appears that this causes problems for TDF) 63.65 600.62 P
0.26 (, since there is currently no primiti) 259.82 600.62 P
0.26 (v) 412.97 600.62 P
0.26 (e in TDF for a call with a) 418.3 600.62 P
(dynamically sized number of ar) 63.65 587.62 T
(guments.) 202.75 587.62 T
0 12 Q
(6.3) 63.65 553.95 T
(Returning v) 90.65 553.95 T
(alues) 157.08 553.95 T
2 11 Q
-0.23 (Common Lisp \050and Dylan\051 allo) 63.65 536.62 P
-0.23 (w functions to return) 200.55 536.62 P
3 F
-0.23 (multiple values) 294.34 536.62 P
2 F
-0.23 (. This mechanism has been designed to) 361.02 536.62 P
(be both po) 63.65 523.62 T
(werful for the programmer and ine) 109.82 523.62 T
(xpensi) 262.08 523.62 T
(v) 290.52 523.62 T
(e for the implementor) 295.86 523.62 T
(.) 390.88 523.62 T
-0.24 (The only w) 63.65 498.62 P
-0.24 (ay of creating multiple v) 113.15 498.62 P
-0.24 (alues is to call the function) 220.05 498.62 P
5 F
-0.59 (values) 339.58 498.62 P
2 8.8 Q
-0.19 (1) 379.18 503.02 P
2 11 Q
-0.24 (. Ho) 383.58 498.62 P
-0.24 (we) 402 498.62 P
-0.24 (v) 414.55 498.62 P
-0.24 (er) 419.89 498.62 P
-0.24 (, man) 427.99 498.62 P
-0.24 (y constructs in the) 452.02 498.62 P
0.26 (language return all the v) 63.65 485.62 P
0.26 (alues returned by a nested construct. This includes the) 171.34 485.62 P
5 F
0.63 (progn) 414.42 485.62 P
2 F
0.26 ( construct \050roughly) 447.42 485.62 P
0.16 (equi) 63.65 472.62 P
0.16 (v) 82.32 472.62 P
0.16 (alent to { ... } in C\051, and also the return from a function. There is no reason wh) 87.54 472.62 P
0.16 (y tail-calls should not) 436.13 472.62 P
(be optimized because of this feature, since functions return all the v) 63.65 459.62 T
(alues of a tail called function.) 360.92 459.62 T
0.28 0 (V) 63.65 434.62 B
0.28 0 (ery often, all b) 70.37 434.62 B
0.28 0 (ut the f) 135.15 434.62 B
0.28 0 (irst of the multiple v) 166.27 434.62 B
0.28 0 (alues returned by a called function are ignored. In this case, if) 256.96 434.62 B
0.07 (zero v) 63.65 421.62 P
0.07 (alues were actually returned, the single required v) 90.63 421.62 P
0.07 (alue w) 310.2 421.62 P
0.07 (ould def) 339.18 421.62 P
0.07 (ault to) 375.49 421.62 P
5 F
0.18 (nil.) 406.2 421.62 P
2 F
0.07 ( When it is required to) 432.6 421.62 P
0.28 0.11 (use all the multiple v) 63.65 408.62 B
0.28 0.11 (alues returned by an e) 159.07 408.62 B
0.28 0.11 (xpression, features such as) 258.86 408.62 B
5 F
0.66 0.11 (multiple-value-bind) 382.96 408.62 B
2 8.8 Q
0.22 0.11 (2) 510.37 413.02 B
2 11 Q
0.28 0.11 ( are) 514.88 408.62 B
(pro) 63.65 395.62 T
(vided in the language.) 78.15 395.62 T
0.24 (The majority of Common Lisp functions return a single v) 63.65 370.62 P
0.24 (alue, and the majority of calls e) 318.23 370.62 P
0.24 (xpect only a sin-) 457.9 370.62 P
0.12 (gle v) 63.65 357.62 P
0.12 (alue to be returned. From an ef) 85.18 357.62 P
0.12 (\336cienc) 221.55 357.62 P
0.12 (y vie) 250.71 357.62 P
0.12 (wpoint, these cases must be slo) 272.24 357.62 P
0.12 (wed do) 410.04 357.62 P
0.12 (wn as little as possi-) 441.96 357.62 P
(ble to support those fe) 63.65 344.62 T
(w cases where multiple v) 161.14 344.62 T
(alues are useful.) 272.07 344.62 T
-0.21 (In Harlequin\325) 63.65 319.62 P
-0.21 (s implementation, if a function returns a single v) 122.39 319.62 P
-0.21 (alue, this v) 333.98 319.62 P
-0.21 (alue will be put into the) 381.25 319.62 P
3 F
-0.21 (r) 486.92 319.62 P
-0.21 (esult) 490.79 319.62 P
2 F
-0.21 ( re) 511.57 319.62 P
-0.21 (g-) 522.48 319.62 P
0.28 0.07 (ister before the return. F) 63.65 306.62 B
0.28 0.07 (or those cases where multiple v) 173 306.62 B
0.28 0.07 (alues are generated, the v) 314.64 306.62 B
0.28 0.07 (alues will be put into a) 428.76 306.62 B
0.28 0.01 (static multiple v) 63.65 293.62 B
0.28 0.01 (alues v) 135.03 293.62 B
0.28 0.01 (ector; in addition, the frequently e) 166.08 293.62 B
0.28 0.01 (xpected single v) 317.43 293.62 B
0.28 0.01 (alue will also be mo) 389.4 293.62 B
0.28 0.01 (v) 479.18 293.62 B
0.28 0.01 (ed into the) 484.53 293.62 B
(result re) 63.65 280.62 T
(gister \050) 99.22 280.62 T
5 F
(nil) 130.08 280.62 T
2 F
( will be e) 149.88 280.62 T
(xplicitly used for the zero v) 190.35 280.62 T
(alues case\051.) 311.36 280.62 T
0.28 0.08 (The common case of ignoring the multiple v) 63.65 255.62 B
0.28 0.08 (alues after a call is handled ef) 264.38 255.62 B
0.28 0.08 (f) 398.95 255.62 B
0.28 0.08 (iciently using this technique,) 402.09 255.62 B
0.28 0.3 (since the v) 63.65 242.62 B
0.28 0.3 (alue is al) 114.3 242.62 B
0.28 0.3 (w) 156.88 242.62 B
0.28 0.3 (ays in the result re) 165.01 242.62 B
0.28 0.3 (gister) 252.66 242.62 B
0.28 0.3 (. When the multiple v) 278.31 242.62 B
0.28 0.3 (alues are required, the) 381.14 242.62 B
0.28 0.3 (y must be) 485.89 242.62 B
(retrie) 63.65 229.62 T
(v) 86.58 229.62 T
(ed form the static v) 91.92 229.62 T
(ector) 176.68 229.62 T
(.) 198.07 229.62 T
0.28 0.19 (There is an o) 63.65 204.62 B
0.28 0.19 (v) 123.87 204.62 B
0.28 0.19 (erhead at function return time, since a function must indicate the number of v) 129.39 204.62 B
0.28 0.19 (alues it is) 487.66 204.62 B
-0.1 (returning, e) 63.65 191.62 P
-0.1 (v) 113.98 191.62 P
-0.1 (en if this v) 119.32 191.62 P
-0.1 (alue is 1. Harlequin\325) 165.48 191.62 P
-0.1 (s RISC implementation does this by setting the) 254.38 191.62 P
3 F
-0.1 (mv-count) 463.19 191.62 P
2 F
-0.1 (re) 506.77 191.62 P
-0.1 (gis-) 515.15 191.62 P
0.28 0.05 (ter to the number of v) 63.65 178.62 B
0.28 0.05 (alues. Note that this does not need to be done when a function returns the result of) 161.51 178.62 B
(another function call, since it will ha) 63.65 165.62 T
(v) 224.43 165.62 T
(e been done in the innermost call.) 229.77 165.62 T
63.65 122.95 531.65 135.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 130.95 171.65 130.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
(1.  Compilers w) 63.65 116.95 T
(ould normally in-line a call to) 121.06 116.95 T
5 F
(values) 230.55 116.95 T
2 F
(.) 262.95 116.95 T
(2.  In Dylan, the normal binding construct) 63.65 103.95 T
5 F
(bind) 217.13 103.95 T
2 F
( pro) 238.73 103.95 T
(vides the syntax for a multiple v) 252.85 103.95 T
(alue bind too.) 368.61 103.95 T
FMENDPAGE
%%EndPage: "10" 14
%%Page: "11" 15
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
( TDF Suppor) 416.52 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(11) 520.53 84.9 T
2 11 Q
0.28 0.02 (Harlequin\325) 63.65 737.62 B
0.28 0.02 (s CISC implementation stores the number of v) 110.91 737.62 B
0.28 0.02 (alues in a static location \050which is slo) 317.9 737.62 B
0.28 0.02 (wer to ini-) 485.08 737.62 B
-0.26 (tialize as it is in heap memory\051. In addition, the presence of multiple v) 63.65 724.62 P
-0.26 (alues is indicated by setting a proces-) 368.85 724.62 P
0.28 0.01 (sor f) 63.65 711.62 B
0.28 0.01 (lag: when set, a single v) 83.21 711.62 B
0.28 0.01 (alue has been returned, when unset there are multiple v) 190.2 711.62 B
0.28 0.01 (alues. This is actually) 435.34 711.62 B
0.28 0.01 (more ef) 63.65 698.62 B
0.28 0.01 (f) 97.6 698.62 B
0.28 0.01 (icient on the Intel 386, since \050un\051setting the f) 100.66 698.62 B
0.28 0.01 (lag is a single byte instruction, and it is unnecessary) 300.26 698.62 B
(to set the static v) 63.65 685.62 T
(alue count for the common single v) 137.32 685.62 T
(alue case.) 292.86 685.62 T
0.28 0.08 (I belie) 63.65 660.62 B
0.28 0.08 (v) 91.97 660.62 B
0.28 0.08 (e it w) 97.38 660.62 B
0.28 0.08 (ould be possible to implement multiple v) 122.71 660.62 B
0.28 0.08 (alues in TDF in a similar w) 307.39 660.62 B
0.28 0.08 (ay to our RISC imple-) 431.34 660.62 B
0.28 0.04 (mentation. Functions can return a pair of v) 63.65 647.62 B
0.28 0.04 (alues: the single v) 254.55 647.62 B
0.28 0.04 (alue, and the count of the number of v) 334.98 647.62 B
0.28 0.04 (alues.) 506.1 647.62 B
(Multiple v) 63.65 634.62 T
(alues can be stored in a static v) 109.52 634.62 T
(ector for later retrie) 245.91 634.62 T
(v) 331.45 634.62 T
(al when required.) 336.68 634.62 T
0.03 (TDF allo) 63.65 609.62 P
0.03 (ws functions to return v) 103.43 609.62 P
0.03 (alues of arbitrary SHAPE, so returning the pair is possible within the cur-) 207.76 609.62 P
-0.25 (rent de\336nition. I am not clear of the mechanism by which the pair of v) 63.65 596.62 P
-0.25 (alues is returned. This will be the k) 368.71 596.62 P
-0.25 (e) 521.43 596.62 P
-0.25 (y) 526.15 596.62 P
0.28 0.04 (to whether TDF can be ef) 63.65 583.62 B
0.28 0.04 (f) 178.53 583.62 B
0.28 0.04 (icient here. If the 2 v) 181.63 583.62 B
0.28 0.04 (alues can be returned in re) 275.39 583.62 B
0.28 0.04 (gisters \050assuming an optimised) 393.57 583.62 B
-0.17 (installer\051 then there is no reason wh) 63.65 570.62 P
-0.17 (y TDF should not be able to implement multiple v) 219.57 570.62 P
-0.17 (alues as ef) 438.66 570.62 P
-0.17 (\336ciently as) 483.85 570.62 P
0.28 0.06 (Harlequin\325) 63.65 557.62 B
0.28 0.06 (s o) 111.34 557.62 B
0.28 0.06 (wn implementations. If not, the o) 124.07 557.62 B
0.28 0.06 (v) 273.77 557.62 B
0.28 0.06 (erhead of e) 279.17 557.62 B
0.28 0.06 (v) 329.02 557.62 B
0.28 0.06 (ery function call will increase, with a corre-) 334.42 557.62 B
(sponding impact on o) 63.65 544.62 T
(v) 158.51 544.62 T
(erall ef) 163.85 544.62 T
(\336cienc) 194.42 544.62 T
(y) 223.58 544.62 T
(.) 228.36 544.62 T
0 12 Q
(6.4) 63.65 510.95 T
(Closures) 90.65 510.95 T
2 11 Q
0.28 0.04 (Man) 63.65 493.62 B
0.28 0.04 (y languages \050including P) 83.76 493.62 B
0.28 0.04 (ascal for instance\051 allo) 194.46 493.62 B
0.28 0.04 (w le) 295.24 493.62 B
0.28 0.04 (xically nested function def) 314.14 493.62 B
0.28 0.04 (initions, and allo) 432.44 493.62 B
0.28 0.04 (w the) 507.08 493.62 B
0.28 0 (innermost function to access the v) 63.65 480.62 B
0.28 0 (ariables of the parent. In Lisp \050and other languages where functions are) 214.9 480.62 B
0.18 (\336rst class objects\051, it is possible to refer to the innermost function e) 63.65 467.62 P
0.18 (v) 361.01 467.62 P
0.18 (en after the calling frame of the outer) 366.34 467.62 P
0.11 (function has been unw) 63.65 454.62 P
0.11 (ound) 163.16 454.62 P
2 8.8 Q
0.09 (1) 185.16 459.02 P
2 11 Q
0.11 ( \050i.e. the inner function has inde\336nite e) 189.56 454.62 P
0.11 (xtent\051. Since it is possible for the inner) 360.36 454.62 P
0.28 0.03 (function to refer to the v) 63.65 441.62 B
0.28 0.03 (ariables of the parent, these v) 172.79 441.62 B
0.28 0.03 (ariables must also ha) 303.77 441.62 B
0.28 0.03 (v) 396.99 441.62 B
0.28 0.03 (e indef) 402.36 441.62 B
0.28 0.03 (inite e) 432.49 441.62 B
0.28 0.03 (xtent. Functions) 460.01 441.62 B
0.1 (which refer to the v) 63.65 428.62 P
0.1 (ariables of their le) 149.9 428.62 P
0.1 (xical parents in this w) 229.75 428.62 P
0.1 (ay are called) 326.57 428.62 P
3 F
0.1 (closur) 385.18 428.62 P
0.1 (es) 412.28 428.62 P
2 F
0.1 (. The v) 421.44 428.62 P
0.1 (ariables the) 452.21 428.62 P
0.1 (y refer) 502.55 428.62 P
(to with inde\336nite e) 63.65 415.62 T
(xtent are called) 146.29 415.62 T
3 F
(closed o) 216.24 415.62 T
(ver variables) 252.49 415.62 T
2 F
(.) 310.22 415.62 T
0.28 0.03 (Normally function v) 63.65 390.62 B
0.28 0.03 (ariables are either stored on the stack or in re) 154.28 390.62 B
0.28 0.03 (gisters. Closed o) 355.56 390.62 B
0.28 0.03 (v) 429.45 390.62 B
0.28 0.03 (er v) 434.81 390.62 B
0.28 0.03 (ariables, ho) 451.72 390.62 B
0.28 0.03 (we) 502.77 390.62 B
0.28 0.03 (v) 515.37 390.62 B
0.28 0.03 (er) 520.73 390.62 B
0.28 0.03 (,) 528.9 390.62 B
-0.22 (must be stored on the heap. In Harlequin\325) 63.65 377.62 P
-0.22 (s implementations of lisp, these v) 244.22 377.62 P
-0.22 (ariables are stored in a Lisp v) 390.15 377.62 P
-0.22 (ec-) 518.22 377.62 P
(tor which is created by the parent function.) 63.65 364.62 T
-0.03 (In the RISC Lisp implementation, the closure is associated with the v) 63.65 339.62 P
-0.03 (ector by means of the function\325) 368.08 339.62 P
-0.03 (s) 505.1 339.62 P
3 F
-0.03 (con-) 512.1 339.62 P
0.28 0.01 (stants) 63.65 326.62 B
2 F
0.28 0.01 (, which in this special case are actually implemented as a cons cell containing both the normal con-) 89.4 326.62 B
0.28 0.09 (stants v) 63.65 313.62 B
0.28 0.09 (ector and the closed o) 97.83 313.62 B
0.28 0.09 (v) 196.77 313.62 B
0.28 0.09 (er v) 202.21 313.62 B
0.28 0.09 (ariables v) 219.38 313.62 B
0.28 0.09 (ector) 262.9 313.62 B
0.28 0.09 (. Making a ne) 284.76 313.62 B
0.28 0.09 (w closure requires making a ne) 347.04 313.62 B
0.28 0.09 (w closure) 488.15 313.62 B
-0.17 (object, setting the code \336eld to the code of the inner function, and setting the constants \336eld to a ne) 63.65 300.62 P
-0.17 (wly cre-) 495.48 300.62 P
(ated cons of the constants v) 63.65 287.62 T
(ector and the closed o) 184.77 287.62 T
(v) 280.52 287.62 T
(er v) 285.86 287.62 T
(ariables.) 302.38 287.62 T
0.03 (In the CISC implementation, the closure is associated with the v) 63.65 262.62 P
0.03 (ector by representing the closure object as) 346.37 262.62 P
0.28 0.11 (a special calling function stub) 63.65 249.62 B
0.28 0.11 (. This stub is a function which when called puts the closed o) 199.14 249.62 B
0.28 0.11 (v) 473.97 249.62 B
0.28 0.11 (er v) 479.41 249.62 B
0.28 0.11 (ariables) 496.66 249.62 B
0.28 0.14 (v) 63.65 236.62 B
0.28 0.14 (ector into the) 69.12 236.62 B
3 F
0.28 0.14 (closur) 132.84 236.62 B
0.28 0.14 (e r) 160.77 236.62 B
0.28 0.14 (e) 172.97 236.62 B
0.28 0.14 (gister) 177.56 236.62 B
2 F
0.28 0.14 ( and then jumps to the inner function. The inner function is compiled to) 203.45 236.62 B
-0.05 (e) 63.65 223.62 P
-0.05 (xpect to \336nd the v) 68.37 223.62 P
-0.05 (ector in this re) 147.46 223.62 P
-0.05 (gister) 210.39 223.62 P
-0.05 (. Making a ne) 234.23 223.62 P
-0.05 (w closure requires making this ne) 294.3 223.62 P
-0.05 (w function stub, and) 441.96 223.62 P
(initializing the real function and the closed o) 63.65 210.62 T
(v) 259.93 210.62 T
(er v) 265.27 210.62 T
(ariable v) 281.79 210.62 T
(ector as the tw) 319.8 210.62 T
(o constants of the stub) 383.54 210.62 T
(.) 481.48 210.62 T
0.16 (The AN implementation of this may turn out to be straightforw) 63.65 185.62 P
0.16 (ard in TDF) 343.2 185.62 P
0.16 (, once the problems of associat-) 391.53 185.62 P
-0.25 (ing constants with \336rst class functions ha) 63.65 172.62 P
-0.25 (v) 242.84 172.62 P
-0.25 (e been sorted out. Ho) 248.18 172.62 P
-0.25 (we) 340.71 172.62 P
-0.25 (v) 353.26 172.62 P
-0.25 (er I am concerned that it may pro) 358.6 172.62 P
-0.25 (v) 503.04 172.62 P
-0.25 (e dif-) 508.38 172.62 P
(\336cult to describe ho) 63.65 159.62 T
(w to b) 150.45 159.62 T
(uild a closure object in an AN manner) 177.73 159.62 T
(.) 344.84 159.62 T
63.65 138.95 531.65 151.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 146.95 171.65 146.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
-0.08 (1.  P) 63.65 132.95 P
-0.08 (ascal does allo) 79.61 132.95 P
-0.08 (w inde\336nite scope references to procedures through procedure v) 131.72 132.95 P
-0.08 (ariables, b) 361.79 132.95 P
-0.08 (ut disallo) 398.52 132.95 P
-0.08 (ws assignment of inner pro-) 431.48 132.95 P
0.17 (cedures to v) 63.65 122.95 P
0.17 (ariables. This restriction stops inner procedures from accessing parameters which are not in the dynamic scope of the) 107.26 122.95 P
(parent.) 63.65 112.95 T
FMENDPAGE
%%EndPage: "11" 15
%%Page: "12" 16
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
(TDF Suppor) 418.74 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(12) 63.65 84.9 T
0 12 Q
(6.5) 63.65 736.95 T
(T) 90.65 736.95 T
(ail recur) 97.02 736.95 T
(sion) 143.53 736.95 T
2 11 Q
0.01 (W) 63.65 719.62 P
0.01 (e ha) 73.15 719.62 P
0.01 (v) 90.96 719.62 P
0.01 (e seen abo) 96.29 719.62 P
0.01 (v) 141.96 719.62 P
0.01 (e that language features such as multiple v) 147.29 719.62 P
0.01 (alues do not pre) 333.73 719.62 P
0.01 (v) 403.44 719.62 P
0.01 (ent optimisation of tail calls) 408.78 719.62 P
0.28 0.02 (as jumps. Indeed Harlequin\325) 63.65 706.62 B
0.28 0.02 (s Lisp implementations will optimise tail calls in this w) 189.14 706.62 B
0.28 0.02 (ay whene) 436.39 706.62 B
0.28 0.02 (v) 478.42 706.62 B
0.28 0.02 (er possible) 483.78 706.62 B
(\050including tail calls to self\051.) 63.65 693.62 T
0.04 (In Common Lisp, this is re) 63.65 668.62 P
0.04 (g) 181.66 668.62 P
0.04 (arded as an optimisation \050albeit a v) 187.1 668.62 P
0.04 (ery important one\051. Ho) 341.18 668.62 P
0.04 (we) 441.85 668.62 P
0.04 (v) 454.4 668.62 P
0.04 (er there are Lisp) 459.74 668.62 P
-0.02 (dialects where the language de\336nition indicates that tail calls must be optimised as jumps rather than calls.) 63.65 655.62 P
0.26 (Scheme is de\336ned in this w) 63.65 642.62 P
0.26 (ay) 185.52 642.62 P
0.26 (, and Apple ha) 195.18 642.62 P
0.26 (v) 259.89 642.62 P
0.26 (e recently indicated that the) 265.22 642.62 P
0.26 (y will be changing the de\336nition) 387.67 642.62 P
(of Dylan to include the Scheme de\336nition of proper tail recursion.) 63.65 629.62 T
0.28 0.04 (As f) 63.65 604.62 B
0.28 0.04 (ar as I can see, it is not possible to guarantee optimisation of tail calls in TDF) 82.61 604.62 B
0.28 0.04 (. Of course, one w) 429.59 604.62 B
0.28 0.04 (ould) 511.96 604.62 B
0.28 0.03 (hope that a suitably optimised installer w) 63.65 591.62 B
0.28 0.03 (ould use a jump where) 247.24 591.62 B
0.28 0.03 (v) 348.24 591.62 B
0.28 0.03 (er possible, b) 353.61 591.62 B
0.28 0.03 (ut this must be) 412.68 591.62 B
3 F
0.28 0.03 (guar) 481.46 591.62 B
0.28 0.03 (anteed) 502.18 591.62 B
2 F
(for a Scheme or Dylan implementation.) 63.65 578.62 T
-0.17 (A further problem is that TDF installers are currently constrained to use the C calling con) 63.65 553.62 P
-0.17 (v) 454.4 553.62 P
-0.17 (ention. F) 459.74 553.62 P
-0.17 (or most) 498.51 553.62 P
0.28 0.14 (C implementations, the calling con) 63.65 540.62 B
0.28 0.14 (v) 222.81 540.62 B
0.28 0.14 (ention lea) 228.29 540.62 B
0.28 0.14 (v) 272.83 540.62 B
0.28 0.14 (es it to the caller to pop an) 278.31 540.62 B
0.28 0.14 (y ar) 400.58 540.62 B
0.28 0.14 (guments pushed onto the) 418.02 540.62 B
-0.17 (stack, since this allo) 63.65 527.62 P
-0.17 (ws a v) 151.47 527.62 P
-0.17 (ariable number of ar) 178.96 527.62 P
-0.17 (guments to be passed to a function without the callee ha) 267.75 527.62 P
-0.17 (ving) 512.09 527.62 P
0.19 (to kno) 63.65 514.62 P
0.19 (w ho) 91.37 514.62 P
0.19 (w man) 112.98 514.62 P
0.19 (y ar) 142.65 514.62 P
0.19 (guments it has recei) 159.44 514.62 P
0.19 (v) 247.42 514.62 P
0.19 (ed) 252.76 514.62 P
2 8.8 Q
0.16 (1) 263.14 519.02 P
2 11 Q
0.19 (. Unfortunately) 267.54 514.62 P
0.19 (, this probably mak) 334.23 514.62 P
0.19 (es it impossible to imple-) 419.64 514.62 P
0.23 (ment a tail call as a jump. Consider the case where the tail call requires adding more stack ar) 63.65 501.62 P
0.23 (guments; the) 474.88 501.62 P
0.28 0.06 (original caller will not be e) 63.65 488.62 B
0.28 0.06 (xpecting to remo) 185.49 488.62 B
0.28 0.06 (v) 261.4 488.62 B
0.28 0.06 (e these e) 266.8 488.62 B
0.28 0.06 (xtra ar) 305.61 488.62 B
0.28 0.06 (guments, so stack inte) 334.52 488.62 B
0.28 0.06 (grity is not preserv) 433.7 488.62 B
0.28 0.06 (ed.) 518.39 488.62 B
-0 (Hence Scheme and Dylan) 63.65 475.62 P
1 F
-0 (cannot) 180.32 475.62 P
2 F
-0 ( be implemented with function calls using only the C calling con) 212.1 475.62 P
-0 (v) 496.06 475.62 P
-0 (ention.) 501.4 475.62 P
0 12 Q
(6.6) 63.65 441.95 T
(Conc) 90.65 441.95 T
(lusion) 120.41 441.95 T
2 11 Q
0.04 (W) 63.65 424.62 P
0.04 (e ha) 73.15 424.62 P
0.04 (v) 90.99 424.62 P
0.04 (e seen that Lisp function calling requires a dif) 96.32 424.62 P
0.04 (ferent function calling mechanism from C in order to) 297.96 424.62 P
-0.11 (implement tail calls properly) 63.65 411.62 P
-0.11 (. W) 189.41 411.62 P
-0.11 (e ha) 204.3 411.62 P
-0.11 (v) 221.99 411.62 P
-0.11 (e also seen that AS implementations of Lisp mak) 227.33 411.62 P
-0.11 (e use of a number of) 442.07 411.62 P
(special calling mechanisms to implement parameter mapping, closure calling, multiple v) 63.65 398.62 T
(alues etc.) 453.22 398.62 T
-0.14 (It w) 63.65 373.62 P
-0.14 (ould appear that an ef) 80.81 373.62 P
-0.14 (\336cient TDF Lisp implementation must ha) 175.25 373.62 P
-0.14 (v) 356.73 373.62 P
-0.14 (e access to the function calling mecha-) 362.06 373.62 P
(nism at a much \336ner grain than is currently possible.) 63.65 360.62 T
0 15 Q
(7.) 63.65 321.95 T
(Interactivity) 90.65 321.95 T
0 12 Q
(7.1) 63.65 286.95 T
(Compilation) 90.65 286.95 T
2 11 Q
0.28 0.07 (Common Lisp def) 63.65 269.62 B
0.28 0.07 (ines tw) 144.64 269.62 B
0.28 0.07 (o entry points into the compiler:) 176.73 269.62 B
5 F
0.66 0.07 (compile) 324.84 269.62 B
2 F
0.28 0.07 ( and) 371.5 269.62 B
5 F
0.66 0.07 (compile-file) 393.76 269.62 B
2 F
0.28 0.07 ( \050in Dylan, it) 473.75 269.62 B
(has not yet been de\336ned what standard entry points there will be - if an) 63.65 256.62 T
(y\051.) 375.71 256.62 T
0 10 Q
(7.1.1) 63.65 232.29 T
(Compile-\336le) 90.65 232.29 T
2 11 Q
-0.02 (As the name suggests,) 63.65 206.62 P
5 F
-0.06 (compile-file) 164.07 206.62 P
2 F
-0.02 ( is the \336le compiler: it reads in ASCII data from a \336le stream, and) 243.27 206.62 P
0.28 0.07 (generates a binary representation in a f) 63.65 193.62 B
0.28 0.07 (ile which may be loaded at an) 237.86 193.62 B
0.28 0.07 (y time. Lisp users often refer to the) 372.69 193.62 B
0.28 0.08 (binary f) 63.65 180.62 B
0.28 0.08 (ile as a) 98.51 180.62 B
3 F
0.28 0.08 (F) 133.38 180.62 B
0.28 0.08 (ASL) 138.92 180.62 B
2 F
0.28 0.08 ( f) 157.51 180.62 B
0.28 0.08 (ile; this is short for F) 163.76 180.62 B
0.28 0.08 (ASt Load, so called because loading it should ha) 258.32 180.62 B
0.28 0.08 (v) 478.49 180.62 B
0.28 0.08 (e the same) 483.91 180.62 B
(ef) 63.65 167.62 T
(fect as loading the original, uncompiled, ASCII \336le b) 71.92 167.62 T
(ut the results should be f) 305.74 167.62 T
(aster to load.) 413.48 167.62 T
63.65 129.95 531.65 142.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 137.95 171.65 137.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
0.01 (1.  The C calling con) 63.65 123.95 P
0.01 (v) 138.82 123.95 P
0.01 (ention seems to be designed to support) 143.19 123.95 P
5 F
0.02 (printf) 284.99 123.95 P
2 F
0.01 (, which is one of the fe) 317.39 123.95 P
0.01 (w functions in the language to tak) 399.45 123.95 P
0.01 (e a) 521.4 123.95 P
1.26 (v) 63.65 113.95 P
1.26 (ariable number of ar) 67.92 113.95 P
1.26 (guments. Lisp has its o) 144.78 113.95 P
1.26 (wn mechanism for v) 232.37 113.95 P
1.26 (ariable ar) 309.67 113.95 P
1.26 (guments, and does not need to be tied do) 344.51 113.95 P
1.26 (wn with) 501.13 113.95 P
5 F
(printf.) 63.65 103.95 T
FMENDPAGE
%%EndPage: "12" 16
%%Page: "13" 17
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
( TDF Suppor) 416.52 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(13) 520.53 84.9 T
2 11 Q
0.28 0 (The semantics of reading the source f) 63.65 737.62 B
0.28 0 (ile and con) 229.82 737.62 B
0.28 0 (v) 278.25 737.62 B
0.28 0 (erting it to compiled code are carefully def) 283.59 737.62 B
0.28 0 (ined in Com-) 472.99 737.62 B
-0.2 (mon Lisp. The source code is read with the normal Lisp reader function) 63.65 724.62 P
5 F
-0.49 (read) 379.33 724.62 P
2 F
-0.2 (, which con) 405.73 724.62 P
-0.2 (v) 455.9 724.62 P
-0.2 (erts the te) 461.23 724.62 P
-0.2 (xt into) 503.43 724.62 P
-0.02 (a Lisp object representation. This Lisp representation is called a) 63.65 711.62 P
3 F
-0.02 (form) 347.25 711.62 P
2 F
-0.02 (. As the compiler processes the form,) 368.03 711.62 P
0.28 0.06 (it must e) 63.65 698.62 B
0.28 0.06 (xpand an) 102.43 698.62 B
0.28 0.06 (y) 143 698.62 B
3 F
0.28 0.06 (macr) 151.64 698.62 B
0.28 0.06 (os) 173.97 698.62 B
2 F
0.28 0.06 ( in the form. Macros are syntactically similar to functions in Lisp, b) 183.86 698.62 B
0.28 0.06 (ut uses of) 488.43 698.62 B
0.28 0.18 (macros are e) 63.65 685.62 B
0.28 0.18 (xpanded at compile time, whereas functions are called at run time. If a form is a use of a) 121.82 685.62 B
0.28 0.16 (macro \050i.e. the f) 63.65 672.62 B
0.28 0.16 (irst object in the form names a macro\051, then the form is passed to the macro e) 136.46 672.62 B
0.28 0.16 (xpander) 492.82 672.62 B
0.28 0.16 (,) 528.9 672.62 B
0.03 (which con) 63.65 659.62 P
0.03 (v) 108.75 659.62 P
0.03 (erts it to a ne) 114.09 659.62 P
0.03 (w form which is then used instead. This ne) 170.75 659.62 P
0.03 (w form may then require further macro) 359.2 659.62 P
0.28 0.06 (e) 63.65 646.62 B
0.28 0.06 (xpansion. This macro f) 68.43 646.62 B
0.28 0.06 (acility is v) 171.99 646.62 B
0.28 0.06 (ery po) 218.99 646.62 B
0.28 0.06 (werful, b) 247.17 646.62 B
0.28 0.06 (ut it obscures the deb) 287.52 646.62 B
0.28 0.06 (ugger mapping between program) 383.3 646.62 B
-0.18 (statements and source code line number) 63.65 633.62 P
-0.18 (, since the compiler does not actually process the same source code) 237.95 633.62 P
(as written in the \336le.) 63.65 620.62 T
0.28 0.12 (F) 63.65 595.62 B
0.28 0.12 (ASL f) 69.07 595.62 B
0.28 0.12 (iles ha) 96.53 595.62 B
0.28 0.12 (v) 125.83 595.62 B
0.28 0.12 (e some subtle dif) 131.28 595.62 B
0.28 0.12 (ferences from the object f) 208.71 595.62 B
0.28 0.12 (iles produced by C compilers. A C object f) 325.31 595.62 B
0.28 0.12 (ile) 520.41 595.62 B
0.17 (contains compiled code for each named function in the \336le; this information is later resolv) 63.65 582.62 P
0.17 (ed by the link) 462.49 582.62 P
0.17 (er) 523.1 582.62 P
0.28 0.01 (to mak) 63.65 569.62 B
0.28 0.01 (e a static program. A Lisp F) 94.13 569.62 B
0.28 0.01 (ASL f) 218.39 569.62 B
0.28 0.01 (ile typically contains man) 245.31 569.62 B
0.28 0.01 (y) 359.6 569.62 B
3 F
0.28 0.01 (one shot functions) 368.15 569.62 B
2 F
0.28 0.01 (, which are anon) 448.95 569.62 B
0.28 0.01 (y-) 522.48 569.62 B
0.06 (mous functions requiring no ar) 63.65 556.62 P
0.06 (guments, and are e) 199.35 556.62 P
0.06 (x) 281.84 556.62 P
0.06 (ecuted only once at the time the \336le is loaded. One shot) 287.17 556.62 P
0.28 0.12 (functions ha) 63.65 543.62 B
0.28 0.12 (v) 119.18 543.62 B
0.28 0.12 (e the side ef) 124.63 543.62 B
0.28 0.12 (fects corresponding to the) 179.53 543.62 B
3 F
0.28 0.12 (top le) 300.48 543.62 B
0.28 0.12 (vel forms) 326.03 543.62 B
2 F
0.28 0.12 ( of the Lisp source f) 367.99 543.62 B
0.28 0.12 (ile \050i.e. the Lisp) 459.49 543.62 B
0.28 0.04 (statements at the outermost te) 63.65 530.62 B
0.28 0.04 (xtual le) 196.68 530.62 B
0.28 0.04 (v) 229.73 530.62 B
0.28 0.04 (el\051. These top le) 235.1 530.62 B
0.28 0.04 (v) 307.28 530.62 B
0.28 0.04 (el forms can contain arbitrary Lisp code. A com-) 312.66 530.62 B
0.28 0.11 (mon constituent of a top le) 63.65 517.62 B
0.28 0.11 (v) 185.29 517.62 B
0.28 0.11 (el form is) 190.74 517.62 B
5 F
0.66 0.11 (defun) 237.66 517.62 B
2 F
0.28 0.11 ( which has the side ef) 271.2 517.62 B
0.28 0.11 (fect of associating a function object) 369.67 517.62 B
(with a symbol) 63.65 504.62 T
2 8.8 Q
(1) 125.99 509.02 T
2 11 Q
(.) 130.38 504.62 T
0.16 (Linking of these F) 63.65 479.62 P
0.16 (ASL \336les is implicit and automatic, since F) 144.29 479.62 P
0.16 (ASL \336les must preserv) 335.3 479.62 P
0.16 (e semantics about the) 436.76 479.62 P
0.22 (similarity of multiple references to certain types of object. One fundamental rule is that all references to a) 63.65 466.62 P
0.28 0.15 (symbol with a particular) 63.65 453.62 B
3 F
0.28 0.15 (pac) 178.47 453.62 B
0.28 0.15 (ka) 194.59 453.62 B
0.28 0.15 (g) 205.16 453.62 B
0.28 0.15 (e) 210.7 453.62 B
2 F
0.28 0.15 ( \050i.e. module\051 and) 215.73 453.62 B
3 F
0.28 0.15 (name) 300.32 453.62 B
2 F
0.28 0.15 ( are guaranteed to correspond to the identical) 324.74 453.62 B
0.04 (symbol object e) 63.65 440.62 P
0.04 (v) 133.12 440.62 P
0.04 (en if the references are from dif) 138.46 440.62 P
0.04 (ferent \336les. Since most functions and v) 277.71 440.62 P
0.04 (ariables are named) 449.1 440.62 P
-0.07 (by symbols, this ensures that tw) 63.65 427.62 P
-0.07 (o portions of a program which ha) 203.76 427.62 P
-0.07 (v) 349.78 427.62 P
-0.07 (e been separately compiled can commu-) 355.11 427.62 P
(nicate with each other) 63.65 414.62 T
(.) 159.88 414.62 T
0.21 (F) 63.65 389.62 P
0.21 (ASL \336les are not only used to load compiled code into a Lisp image. Since it is possible to de\336ne a Lisp) 68.95 389.62 P
-0.04 (function to return an) 63.65 376.62 P
-0.04 (y Lisp v) 153.5 376.62 P
-0.04 (alue, F) 189.21 376.62 P
-0.04 (ASL \336les must be able to record arbitrary Lisp data structures too. This) 218.31 376.62 P
0.28 0.04 (mak) 63.65 363.62 B
0.28 0.04 (es them suitable for sa) 82.6 363.62 B
0.28 0.04 (ving data in a form that can be loaded into another image. This is often useful) 182.79 363.62 B
0.28 0.07 (for sa) 63.65 350.62 B
0.28 0.07 (ving comple) 88.87 350.62 B
0.28 0.07 (x structures such as hash-tables, or sa) 144.45 350.62 B
0.28 0.07 (ving data structures containing objects of a class) 313.31 350.62 B
0.28 0.11 (def) 63.65 337.62 B
0.28 0.11 (ined using the Common Lisp Object System \050) 77.42 337.62 B
3 F
0.28 0.11 (CLOS) 285.33 337.62 B
2 F
0.28 0.11 (\051. The function) 312.66 337.62 B
5 F
0.66 0.11 (make-load-form) 383.68 337.62 B
2 F
0.28 0.11 ( allo) 477.62 337.62 B
0.28 0.11 (ws user) 497.42 337.62 B
0.28 0.02 (e) 63.65 324.62 B
0.28 0.02 (xtensibility to the semantics of constant similarity; this means that F) 68.39 324.62 B
0.28 0.02 (ASL f) 371.72 324.62 B
0.28 0.02 (iles must be manipulated by a) 398.67 324.62 B
(Lisp program, and not by TDF directly) 63.65 311.62 T
(.) 234.34 311.62 T
0.15 (I e) 63.65 286.62 P
0.15 (xpect that the choice of F) 74.93 286.62 P
0.15 (ASL format will be irrele) 186.37 286.62 P
0.15 (v) 298.5 286.62 P
0.15 (ant to TDF) 303.73 286.62 P
0.15 (. Our Lisp compiler will probably gener-) 351.42 286.62 P
0.28 0.03 (ate TDF function and constant descriptions in place of nati) 63.65 273.62 B
0.28 0.03 (v) 325.55 273.62 B
0.28 0.03 (e descriptions, b) 330.92 273.62 B
0.28 0.03 (ut otherwise use our e) 403.49 273.62 B
0.28 0.03 (xisting) 501.54 273.62 B
0.28 0.2 (format. The interaction with TDF must occur at load time, which we ha) 63.65 260.62 B
0.28 0.2 (v) 395.2 260.62 B
0.28 0.2 (e seen must be performed in) 400.74 260.62 B
0.28 0.2 (Lisp,) 63.65 247.62 B
2 8.8 Q
0.22 0.2 (2) 86.96 252.02 B
2 11 Q
0.28 0.2 ( so the TDF interf) 91.57 247.62 B
0.28 0.2 (ace need not be concerned with ho) 175.01 247.62 B
0.28 0.2 (w TDF descriptions are e) 335.15 247.62 B
0.28 0.2 (xtracted from the) 452.12 247.62 B
(F) 63.65 234.62 T
(ASL \336le.) 68.95 234.62 T
0.28 0.26 (At present TDF pro) 63.65 209.62 B
0.28 0.26 (vides no f) 155.46 209.62 B
0.28 0.26 (acilities for dynamic translation of TDF to nati) 201.88 209.62 B
0.28 0.26 (v) 421.66 209.62 B
0.28 0.26 (e code. The remaining) 427.25 209.62 B
-0.04 (requirement appears to be a function which can be called from Lisp which tak) 63.65 196.62 P
-0.04 (es a pointer to a TDF encod-) 406.04 196.62 P
0.28 0.03 (ing and returns a pointer to the corresponding compiled code, or constant, suitably allocated for GC. The) 63.65 183.62 B
0.06 (ef) 63.65 170.62 P
0.06 (\336cienc) 71.92 170.62 P
0.06 (y of this function is not of paramount importance. It might be acceptable for the function to dump) 101.08 170.62 P
63.65 151.95 531.65 164.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 159.95 171.65 159.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
-0.13 (1.  This one is such a common case that Harlequin\325) 63.65 145.95 P
-0.13 (s F) 246.11 145.95 P
-0.13 (ASL format has an optimisation for it. An anon) 256.07 145.95 P
-0.13 (ymous function is not present) 425.66 145.95 P
0.72 (in the F) 63.65 135.95 P
0.72 (ASL \336le for top le) 91.92 135.95 P
0.72 (v) 160.57 135.95 P
0.72 (el forms such as) 164.93 135.95 P
5 F
1.73 (defun) 228.3 135.95 P
2 F
0.72 ( or) 255.3 135.95 P
5 F
1.73 (defmacro) 268.73 135.95 P
2 F
0.72 (. Other optimisations are also performed, such as collecting) 311.93 135.95 P
(together top le) 63.65 125.95 T
(v) 115.42 125.95 T
(el forms to create fe) 119.78 125.95 T
(wer one shot functions.) 191.53 125.95 T
(2.  This leads to some interesting bootstrap problems, which are discussed in Section 10 belo) 63.65 112.95 T
(w) 397.65 112.95 T
(.) 403.56 112.95 T
FMENDPAGE
%%EndPage: "13" 17
%%Page: "14" 18
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
(TDF Suppor) 418.74 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(14) 63.65 84.9 T
2 11 Q
0.28 0.04 (the TDF encoding to a temporary f) 63.65 737.62 B
0.28 0.04 (ile and then fork the TDF installer to generate an object f) 219.5 737.62 B
0.28 0.04 (ile. A means) 475.32 737.62 B
(must then be found for loading the contents of this \336le into freshly allocated memory) 63.65 724.62 T
(.) 436.9 724.62 T
0 10 Q
(7.1.2) 63.65 700.29 T
(Compile) 90.65 700.29 T
2 11 Q
0.28 0.08 (The other compiler entry point,) 63.65 686.62 B
5 F
0.66 0.08 (compile) 208.23 686.62 B
2 F
0.28 0.08 (, manipulates Lisp forms rather than source code. This object) 255.01 686.62 B
0.2 (compiler is often used interacti) 63.65 673.62 P
0.2 (v) 200.44 673.62 P
0.2 (ely to compile interpreted function de\336nitions \050e.g. after \336rst testing them) 205.77 673.62 P
(interacti) 63.65 660.62 T
(v) 99.42 660.62 T
(ely\051.) 104.75 660.62 T
5 F
0.28 (Compile) 63.65 641.62 P
2 F
0.12 ( may also be called dynamically \050lik) 109.85 641.62 P
0.12 (e an) 269.93 641.62 P
0.12 (y other function\051. As an e) 287.9 641.62 P
0.12 (xample, when a generic func-) 400.75 641.62 P
0.28 0.01 (tion is called for the f) 63.65 628.62 B
0.28 0.01 (irst time with ar) 159.03 628.62 B
0.28 0.01 (guments of particular classes, the mechanism which implements the) 229.78 628.62 B
0.28 0.13 (beha) 63.65 615.62 B
0.28 0.13 (viour of the generic function may choose to create and compile a ne) 84.72 615.62 B
0.28 0.13 (w function to call the rele) 395.24 615.62 B
0.28 0.13 (v) 512.59 615.62 B
0.28 0.13 (ant) 517.94 615.62 B
(methods in the appropriate order) 63.65 602.62 T
(.) 206.63 602.62 T
0.02 (It is concei) 63.65 577.62 P
0.02 (v) 111.69 577.62 P
0.02 (able that) 116.91 577.62 P
5 F
0.06 (compile) 157.29 577.62 P
2 F
0.02 ( might be used to implement the interpreter itself. It is permitted for a Lisp) 203.49 577.62 P
-0.09 (implementation to compile Lisp forms before e) 63.65 564.62 P
-0.09 (v) 270.57 564.62 P
-0.09 (aluating them. While the o) 275.79 564.62 P
-0.09 (v) 392.27 564.62 P
-0.09 (erhead of the compilation may) 397.6 564.62 P
(slo) 63.65 551.62 T
(w do) 76.21 551.62 T
(wn the e) 97.63 551.62 T
(v) 134.62 551.62 T
(aluation, there may be a useful adv) 139.85 551.62 T
(antage in not needing a separate interpreter) 293.23 551.62 T
(.) 482.01 551.62 T
0.28 0.02 (It should be possible to implement) 63.65 526.62 B
5 F
0.66 0.02 (compile) 220.51 526.62 B
2 F
0.28 0.02 ( using the same TDF interf) 266.83 526.62 B
0.28 0.02 (ace function described abo) 386.79 526.62 B
0.28 0.02 (v) 505.49 526.62 B
0.28 0.02 (e for) 510.84 526.62 B
(loading F) 63.65 513.62 T
(ASL \336les.) 104.7 513.62 T
0 12 Q
(7.2) 63.65 479.95 T
(Deb) 90.65 479.95 T
(ug) 113.08 479.95 T
(ging) 127.62 479.95 T
2 11 Q
0.09 (The de\336nition of Common Lisp includes the notion of a deb) 63.65 462.62 P
0.09 (ugger) 328.97 462.62 P
0.09 (. The meaning of the term \322deb) 353.42 462.62 P
0.09 (ugger\323 is) 491.54 462.62 P
0.28 0.12 (actually quite loosely specif) 63.65 449.62 B
0.28 0.12 (ied, and is simply described as an \322interacti) 190.63 449.62 B
0.28 0.12 (v) 389.17 449.62 B
0.28 0.12 (e condition handler\323) 394.62 449.62 B
3 F
0.28 0.12 ([S90]) 490.65 449.62 B
2 F
0.28 0.12 (. In) 516.33 449.62 B
0.28 0.09 (practice, all Common Lisp deb) 63.65 436.62 B
0.28 0.09 (uggers of) 202.99 436.62 B
0.28 0.09 (fer a minimum functionality that I w) 245.01 436.62 B
0.28 0.09 (ould lik) 410.37 436.62 B
0.28 0.09 (e to treat as a basic) 445.15 436.62 B
0.28 0.09 (specif) 63.65 423.62 B
0.28 0.09 (ication for a \322reasonable\323 Lisp implementation. This functionality includes full access to the Lisp) 89.88 423.62 B
0.28 0.02 (interpreter) 63.65 410.62 B
0.28 0.02 (, a w) 109.26 410.62 B
0.28 0.02 (ay of displaying and in) 130.89 410.62 B
0.28 0.02 (v) 232.88 410.62 B
0.28 0.02 (oking an) 238.19 410.62 B
0.28 0.02 (y) 276.67 410.62 B
3 F
0.28 0.02 (r) 285.23 410.62 B
0.28 0.02 (estarts) 289.13 410.62 B
2 8.8 Q
0.22 0.02 (1) 318.62 415.02 B
2 11 Q
0.28 0.02 ( which are currently acti) 323.04 410.62 B
0.28 0.02 (v) 431.33 410.62 B
0.28 0.02 (e and a means of dis-) 436.68 410.62 B
0.28 0.04 (playing a function call backtrace. In addition, the follo) 63.65 397.62 B
0.28 0.04 (wing features are desirable: a means of displaying) 307.44 397.62 B
0.02 (the ar) 63.65 384.62 P
0.02 (guments of acti) 88.21 384.62 P
0.02 (v) 155.81 384.62 P
0.02 (e functions, a means of displaying the local v) 161.15 384.62 P
0.02 (ariables of acti) 359.96 384.62 P
0.02 (v) 424.49 384.62 P
0.02 (e functions, a means of) 429.82 384.62 P
0.28 0.1 (displaying special v) 63.65 371.62 B
0.28 0.1 (ariable bindings and catch frames which are acti) 153.4 371.62 B
0.28 0.1 (v) 372.37 371.62 B
0.28 0.1 (e, and a means of returning a user) 377.81 371.62 B
(supplied v) 63.65 358.62 T
(alue from an) 108.9 358.62 T
(y acti) 164.33 358.62 T
(v) 188.19 358.62 T
(e function.) 193.52 358.62 T
0.28 0.19 (Harlequin\325) 63.65 333.62 B
0.28 0.19 (s deb) 112.63 333.62 B
0.28 0.19 (ugger implementation relies on the deb) 136.57 333.62 B
0.28 0.19 (ugger being able to scan the stack for function) 317.09 333.62 B
0.28 0.04 (frames and other language constructs. This is also a requirement for GC, and so does not further compli-) 63.65 320.62 B
0.28 0.12 (cate the use of the stack. Symbolic information about function names and v) 63.65 307.62 B
0.28 0.12 (ariable names is stored in a) 407.44 307.62 B
0.28 0.02 (f) 63.65 294.62 B
0.28 0.02 (ix) 66.72 294.62 B
0.28 0.02 (ed place on the constants v) 75.16 294.62 B
0.28 0.02 (ector of e) 195.1 294.62 B
0.28 0.02 (v) 237.1 294.62 B
0.28 0.02 (ery function. Ag) 242.46 294.62 B
0.28 0.02 (ain, it is a requirement that GC can f) 315.66 294.62 B
0.28 0.02 (ind the con-) 478.36 294.62 B
(stants v) 63.65 281.62 T
(ector for each acti) 96.79 281.62 T
(v) 175.62 281.62 T
(e function\325) 180.95 281.62 T
(s stack frame.) 228.31 281.62 T
-0.17 (At \336rst sight, it w) 63.65 256.62 P
-0.17 (ould appear that no e) 140.17 256.62 P
-0.17 (xtra TDF primiti) 231.57 256.62 P
-0.17 (v) 304.29 256.62 P
-0.17 (es are required to implement a deb) 309.62 256.62 P
-0.17 (ugger) 460.5 256.62 P
-0.17 (, since it is) 485.11 256.62 P
-0.01 (already a requirement that all the information on the stack is a) 63.65 243.62 P
-0.01 (v) 336.15 243.62 P
-0.01 (ailable to GC too. I am still unsure whether) 341.37 243.62 P
0.28 0.01 (this stack information can be represented in an AN f) 63.65 230.62 B
0.28 0.01 (ashion. If not, then presumably both the g) 296.38 230.62 B
0.28 0.01 (arbage col-) 482.14 230.62 B
0.1 (lector and the deb) 63.65 217.62 P
0.1 (ugger will ha) 142.23 217.62 P
0.1 (v) 200.26 217.62 P
0.1 (e to be written in AS code, which w) 205.6 217.62 P
0.1 (ould reduce the \336nal portability of the) 364.23 217.62 P
(TDF solution.) 63.65 204.62 T
0 12 Q
(7.3) 63.65 170.95 T
(T) 90.65 170.95 T
(racing and Stepping) 97.02 170.95 T
2 11 Q
0.04 (The macros) 63.65 153.62 P
5 F
0.11 (trace) 118.11 153.62 P
2 F
0.04 ( and) 151.11 153.62 P
5 F
0.11 (step) 172.58 153.62 P
2 F
0.04 ( are included in the de\336nition of Common Lisp.) 198.98 153.62 P
5 F
0.11 (Trace) 412.04 153.62 P
2 F
0.04 ( is loosely speci\336ed) 445.04 153.62 P
0.28 0.25 (to print the function name and ar) 63.65 140.62 B
0.28 0.25 (guments passed when a traced function is called.) 217.39 140.62 B
5 F
0.66 0.25 (Step) 448.82 140.62 B
2 F
0.28 0.25 ( is similarly) 476.2 140.62 B
(loosely speci\336ed to allo) 63.65 127.62 T
(w an interacti) 167.57 127.62 T
(v) 227.16 127.62 T
(e \322single step\323 f) 232.5 127.62 T
(acility as a form is e) 302.95 127.62 T
(v) 391.58 127.62 T
(aluated.) 396.8 127.62 T
63.65 109.95 531.65 122.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 117.95 171.65 117.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
(1.  Restarts are described later in section 9.1, on Conditions.) 63.65 103.95 T
FMENDPAGE
%%EndPage: "14" 18
%%Page: "15" 19
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
( TDF Suppor) 416.52 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(15) 520.53 84.9 T
2 11 Q
0.28 0.02 (It is possible to implement both) 63.65 737.62 B
5 F
0.66 0.02 (trace) 207.71 737.62 B
2 F
0.28 0.02 ( and) 240.81 737.62 B
5 F
0.66 0.02 (step) 262.83 737.62 B
2 F
0.28 0.02 ( in portable Common Lisp, so there should be no need) 289.31 737.62 B
(for an) 63.65 724.62 T
(y TDF e) 89.44 724.62 T
(xtensions to support these features.) 125.94 724.62 T
0 15 Q
(8.) 63.65 685.95 T
(Miscellaneous Langua) 90.65 685.95 T
(g) 250.55 685.95 T
(e Features) 259.86 685.95 T
0 12 Q
(8.1) 63.65 650.95 T
(Catc) 90.65 650.95 T
(h and thr) 116.53 650.95 T
(o) 167.63 650.95 T
(w) 174.78 650.95 T
2 11 Q
0.03 (Common Lisp pro) 63.65 633.62 P
0.03 (vides an associated pair of language constructs for transfer of control called) 144.22 633.62 P
5 F
0.07 (catch) 479.98 633.62 P
2 F
0.03 ( and) 512.98 633.62 P
5 F
0.66 0.14 (throw) 63.65 620.62 B
2 8.8 Q
0.22 0.14 (1) 97.35 625.02 B
2 11 Q
0.28 0.14 (.) 101.89 620.62 B
5 F
0.66 0.14 (Catch) 107.95 620.62 B
2 F
0.28 0.14 ( is a special form which uses the result of e) 141.66 620.62 B
0.28 0.14 (v) 339.89 620.62 B
0.28 0.14 (aluating its f) 345.26 620.62 B
0.28 0.14 (irst ar) 402.18 620.62 B
0.28 0.14 (gument as an object to) 428.6 620.62 B
0.28 0.02 (name a) 63.65 607.62 B
3 F
0.28 0.02 (catc) 98.54 607.62 B
0.28 0.02 (her) 116.78 607.62 B
2 F
0.28 0.02 (. The remaining forms inside the) 130.9 607.62 B
5 F
0.66 0.02 (catch) 279.54 607.62 B
2 F
0.28 0.02 ( form are e) 312.64 607.62 B
0.28 0.02 (v) 361.35 607.62 B
0.28 0.02 (aluated in order in an en) 366.59 607.62 B
0.28 0.02 (vironment in) 474.63 607.62 B
(which the catcher is a) 63.65 594.62 T
(v) 158.73 594.62 T
(ailable as a tar) 163.96 594.62 T
(get for a control transfer using the) 226.99 594.62 T
5 F
(throw) 379.42 594.62 T
2 F
( special form.) 412.42 594.62 T
5 F
-0.35 (Throw) 63.65 569.62 P
2 F
-0.15 ( e) 96.65 569.62 P
-0.15 (v) 103.86 569.62 P
-0.15 (aluates its \336rst ar) 109.08 569.62 P
-0.15 (gument which is used to name the catcher for the transfer of control. If multiple) 183.3 569.62 P
0.28 0.01 (catchers e) 63.65 556.62 B
0.28 0.01 (xist with the same name, then the most recent will be used. The second ar) 107.57 556.62 B
0.28 0.01 (gument is then e) 436.09 556.62 B
0.28 0.01 (v) 509.27 556.62 B
0.28 0.01 (alu-) 514.51 556.62 B
0.28 0.16 (ated, and the resulting v) 63.65 543.62 B
0.28 0.16 (alue\050s\051 are returned from the named) 173.94 543.62 B
5 F
0.66 0.16 (catch) 342.1 543.62 B
2 F
0.28 0.16 ( form. It is an error to use) 375.92 543.62 B
5 F
0.66 0.16 (throw) 498 543.62 B
2 F
0.28 0 (when there is no suitable catcher) 63.65 530.62 B
0.28 0 (, and an) 208.62 530.62 B
0.28 0 (y implementation is required to detect this, and signal an error in) 243.56 530.62 B
0.28 0 (the conte) 63.65 517.62 B
0.28 0 (xt of the thro) 103.78 517.62 B
0.28 0 (wer - i.e. the tar) 161.48 517.62 B
0.28 0 (get must be found before and not during the thro) 232.04 517.62 B
0.28 0 (w) 447.83 517.62 B
0.28 0 (. If) 455.06 517.62 B
5 F
0.66 0 (throw) 471.19 517.62 B
2 F
0.28 0 ( is not) 504.2 517.62 B
0.05 (used to transfer control during the e) 63.65 504.62 P
0.05 (x) 220.78 504.62 P
0.05 (ecution of) 226.11 504.62 P
5 F
0.11 (catch) 273.25 504.62 P
2 F
0.05 (, then the result of the catch is the result of e) 306.25 504.62 P
0.05 (v) 501.38 504.62 P
0.05 (aluat-) 506.6 504.62 P
(ing the last form inside the) 63.65 491.62 T
5 F
(catch) 184.03 491.62 T
2 F
(. The catcher is disabled when the) 217.03 491.62 T
5 F
(catch) 369.16 491.62 T
2 F
( form returns its v) 402.16 491.62 T
(alues.) 480.71 491.62 T
0.21 (Harlequin\325) 63.65 466.62 P
0.21 (s Common Lisp implements) 110.69 466.62 P
5 F
0.5 (catch) 238.65 466.62 P
2 F
0.21 ( by pushing all the information rele) 271.65 466.62 P
0.21 (v) 427.83 466.62 P
0.21 (ant to the catcher onto) 433.06 466.62 P
0.19 (the stack to create a) 63.65 453.62 P
3 F
0.19 (catc) 154.08 453.62 P
0.19 (h fr) 172.24 453.62 P
0.19 (ame) 187.85 453.62 P
2 F
0.19 (. The catch frame encodes the address of the code for the control transfer) 206.18 453.62 P
0.19 (,) 528.9 453.62 P
-0.18 (the catcher object, and a uniquely tagged catch frame mark) 63.65 440.62 P
-0.18 (er which is recognised by GC, the deb) 321.58 440.62 P
-0.18 (ugger and) 488.14 440.62 P
-0.23 (the thro) 63.65 427.62 P
-0.23 (w mechanism. \050The RISC implementation actually contains four other \336elds: one of these holds the) 97.06 427.62 P
-0.06 (constants v) 63.65 414.62 P
-0.06 (ector of the function containing the) 112.61 414.62 P
5 F
-0.15 (catch) 269.87 414.62 P
2 F
-0.06 ( form, the rest are used to link catch frames together) 302.87 414.62 P
0.09 (so that) 63.65 401.62 P
5 F
0.22 (throw) 95.61 401.62 P
2 F
0.09 ( can be implemented quickly\051. After the code to create the catch frame, the compiler gener-) 128.61 401.62 P
0.28 0.06 (ates code for the body of the catcher as normal, follo) 63.65 388.62 B
0.28 0.06 (wed by code to pop the catch frame from the stack.) 301.01 388.62 B
(Hence, if no) 63.65 375.62 T
5 F
(throw) 120.46 375.62 T
2 F
( occurs the o) 153.46 375.62 T
(v) 209.2 375.62 T
(erhead of a) 214.54 375.62 T
5 F
(catch) 266.15 375.62 T
2 F
( is just the pushing and popping of the catch frame.) 299.15 375.62 T
5 F
0.25 (Throw) 63.65 350.62 P
2 F
0.1 ( is implemented by calling a lo) 96.65 350.62 P
0.1 (w-le) 232.67 350.62 P
0.1 (v) 251.94 350.62 P
0.1 (el function to transfer control to the catcher) 257.28 350.62 P
2 8.8 Q
0.08 (2) 448.94 355.02 P
2 11 Q
0.1 (, after ha) 453.34 350.62 P
0.1 (ving \336rst) 492.12 350.62 P
0.28 0.04 (e) 63.65 337.62 B
0.28 0.04 (v) 68.3 337.62 B
0.28 0.04 (aluated the result v) 73.56 337.62 B
0.28 0.04 (alues. This lo) 158.29 337.62 B
0.28 0.04 (w le) 218.09 337.62 B
0.28 0.04 (v) 236.88 337.62 B
0.28 0.04 (el function scans the stack looking for the nearest catcher for the) 242.25 337.62 B
0.28 0.11 (specif) 63.65 324.62 B
0.28 0.11 (ied object. When this catcher has been found, an) 90 324.62 B
0.28 0.11 (y interv) 310.75 324.62 B
0.28 0.11 (ening unwind-protect forms are e) 345.69 324.62 B
0.28 0.11 (x) 496.92 324.62 B
0.28 0.11 (ecuted) 502.36 324.62 B
0.28 0.02 (\050see section 8.2\051, and an) 63.65 311.62 B
0.28 0.02 (y dynamic bindings are undone \050see section 8.3\051. Finally control is transferred to) 171.47 311.62 B
(the address stored in the catch frame.) 63.65 298.62 T
0.28 0.04 (This implementation relies on a detailed kno) 63.65 273.62 B
0.28 0.04 (wledge of the structure of the stack. As with the deb) 263.07 273.62 B
0.28 0.04 (ugger) 497.3 273.62 B
0.28 0.04 (, I) 522.12 273.62 B
(don\325) 63.65 260.62 T
(t kno) 83.61 260.62 T
(w if it is possible to use this mechanism in an AN manner) 105.65 260.62 T
(.) 359.25 260.62 T
0 12 Q
(8.2) 63.65 226.95 T
(Unwind-pr) 90.65 226.95 T
(otect) 149.74 226.95 T
2 11 Q
0.09 (It is sometimes useful to guarantee that a piece of code will be e) 63.65 209.62 P
0.09 (x) 346.69 209.62 P
0.09 (ecuted in a program, e) 352.03 209.62 P
0.09 (v) 450.19 209.62 P
0.09 (en if a transfer of) 455.52 209.62 P
0.28 0.15 (control \050such as) 63.65 196.62 B
5 F
0.66 0.15 (throw) 139.48 196.62 B
2 8.8 Q
0.22 0.15 (3) 173.24 201.02 B
2 11 Q
0.28 0.15 (\051 occurs. Common Lisp and Dylan both pro) 177.79 196.62 B
0.28 0.15 (vide a special form for this called) 377.55 196.62 B
5 F
0.66 0.31 (unwind-protect) 63.65 183.62 B
2 F
0.28 0.31 (. This is commonly used when processing f) 160.43 183.62 B
0.28 0.31 (iles, for e) 365.22 183.62 B
0.28 0.31 (xample: a f) 410.29 183.62 B
0.28 0.31 (ile is normally) 463.16 183.62 B
63.65 151.95 531.65 164.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 159.95 171.65 159.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
0.06 (1.  Dylan has a f) 63.65 145.95 P
0.06 (acility called) 122.85 145.95 P
5 F
0.15 (bind-exit) 171.46 145.95 P
2 F
0.06 (, which has similar capabilities.) 220.06 145.95 P
5 F
0.15 (Bind-exit) 336.11 145.95 P
2 F
0.06 ( is analogous to) 384.71 145.95 P
5 F
0.15 (catch) 443.45 145.95 P
2 F
0.06 (, b) 470.45 145.95 P
0.06 (ut additionally) 479.33 145.95 P
(binds a v) 63.65 135.95 T
(ariable to an e) 95.92 135.95 T
(xit function. The thro) 146.52 135.95 T
(w is performed by calling this function, rather than with another language construct.) 223.29 135.95 T
-0.05 (2.  Thro) 63.65 122.95 P
-0.05 (w is a Common Lisp special form, not a function, e) 92.07 122.95 P
-0.05 (v) 276.31 122.95 P
-0.05 (en though it is syntactically v) 280.67 122.95 P
-0.05 (ery similar to a function. This is because) 386.03 122.95 P
5 F
(throw) 63.65 112.95 T
2 F
( passes all the v) 90.65 112.95 T
(alues of its second form to the catcher) 146.92 112.95 T
(. A normal function call w) 283.14 112.95 T
(ould discard all b) 378.04 112.95 T
(ut the \336rst v) 440.1 112.95 T
(alue.) 483.13 112.95 T
FMENDPAGE
%%EndPage: "15" 19
%%Page: "16" 20
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
(TDF Suppor) 418.74 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(16) 63.65 84.9 T
2 11 Q
-0.04 (opened, processed and then closed, b) 63.65 737.62 P
-0.04 (ut closing the \336le should al) 226.04 737.62 P
-0.04 (w) 344.59 737.62 P
-0.04 (ays happen e) 352.42 737.62 P
-0.04 (v) 408.88 737.62 P
-0.04 (en if a thro) 414.21 737.62 P
-0.04 (w occurs. Com-) 461.77 737.62 P
(mon Lisp actually pro) 63.65 724.62 T
(vides a macro to do this, which e) 160.34 724.62 T
(xpands into code similar to the follo) 304.99 724.62 T
(wing:) 463.6 724.62 T
5 10 Q
(\050let \050\050stream \050open \322file\323\051\051\051) 63.65 706.29 T
(  \050unwind-protect) 63.65 694.29 T
(     \050process stream\051) 63.65 682.29 T
(    \050close stream\051\051\051) 63.65 670.29 T
2 11 Q
0.05 (The \336rst form inside the) 63.65 645.62 P
5 F
0.12 (unwind-protect) 172.98 645.62 P
2 F
0.05 ( \050the) 265.38 645.62 P
3 F
0.05 (pr) 288.09 645.62 P
0.05 (otected form) 297.37 645.62 P
2 F
0.05 (\051 is e) 352.72 645.62 P
0.05 (x) 374.05 645.62 P
0.05 (ecuted in an en) 379.38 645.62 P
0.05 (vironment in which) 445.38 645.62 P
0.28 0.02 (the remaining forms \050the) 63.65 632.62 B
3 F
0.28 0.02 (cleanup forms) 176.97 632.62 B
2 F
0.28 0.02 (\051 are mark) 240.1 632.62 B
0.28 0.02 (ed for e) 285.9 632.62 B
0.28 0.02 (x) 320.01 632.62 B
0.28 0.02 (ecution e) 325.36 632.62 B
0.28 0.02 (v) 365.53 632.62 B
0.28 0.02 (en during a transfer of control. If no) 370.88 632.62 B
0.28 0.11 (such transfer occurs, the) 63.65 619.62 B
5 F
0.66 0.11 (unwind-protect) 177.34 619.62 B
2 F
0.28 0.11 ( form returns the v) 271.31 619.62 B
0.28 0.11 (alue\050s\051 returned by the protected form,) 356.15 619.62 B
0.11 (after \336rst e) 63.65 606.62 P
0.11 (x) 111.35 606.62 P
0.11 (ecuting the cleanup forms. One of the cleanup forms may itself transfer control, in which case) 116.69 606.62 P
0.28 0.26 (there are def) 63.65 593.62 B
0.28 0.26 (ined semantics about which catchers are still visible. In this case, an) 122.01 593.62 B
0.28 0.26 (y other interv) 442.78 593.62 B
0.28 0.26 (ening) 506.14 593.62 B
0.28 0.15 (cleanup forms must still be e) 63.65 580.62 B
0.28 0.15 (x) 195.99 580.62 B
0.28 0.15 (ecuted. In all cases, the cleanup forms are e) 201.48 580.62 B
0.28 0.15 (x) 401.46 580.62 B
0.28 0.15 (ecuted in the conte) 406.95 580.62 B
0.28 0.15 (xt of the) 493.24 580.62 B
5 F
(unwind-protect) 63.65 567.62 T
2 F
( form, and not in the conte) 156.05 567.62 T
(xt of the thro) 272.29 567.62 T
(wer) 329.14 567.62 T
(.) 345.03 567.62 T
5 F
0.66 0.05 (Unwind-protect) 63.65 542.62 B
2 F
0.28 0.05 ( is implemented in terms of a specially modif) 156.81 542.62 B
0.28 0.05 (ied catcher in Harlequin\325) 360.07 542.62 B
0.28 0.05 (s RISC Com-) 471.32 542.62 B
0.28 0.03 (mon Lisp) 63.65 529.62 B
2 8.8 Q
0.22 0.03 (1) 106 534.02 B
2 11 Q
0.28 0.03 (. The protected form is e) 110.42 529.62 B
0.28 0.03 (x) 220.43 529.62 B
0.28 0.03 (ecuted in the conte) 225.79 529.62 B
0.28 0.03 (xt of a catcher which will catch) 309.73 529.62 B
1 F
0.28 0.03 (any) 453.33 529.62 B
2 F
0.28 0.03 ( thro) 470.53 529.62 B
0.28 0.03 (w; this is) 491.13 529.62 B
0.13 (called a) 63.65 516.62 P
3 F
0.13 (catc) 100.56 516.62 P
0.13 (h all) 118.72 516.62 P
2 F
0.13 (. The compiler inserts an implicit thro) 138.71 516.62 P
0.13 (w of) 305.72 516.62 P
5 F
0.31 (nil) 328.58 516.62 P
2 F
0.13 ( to this catcher immediately after the pro-) 348.38 516.62 P
0.28 0.11 (tected form for the case when there is no control transfer) 63.65 503.62 B
0.28 0.11 (. The cleanup forms are e) 321.67 503.62 B
0.28 0.11 (x) 437.52 503.62 B
0.28 0.11 (ecuted immediately) 442.97 503.62 B
0.28 0.02 (after the catch all, and hence are al) 63.65 490.62 B
0.28 0.02 (w) 218.8 490.62 B
0.28 0.02 (ays e) 226.65 490.62 B
0.28 0.02 (x) 249.14 490.62 B
0.28 0.02 (ecuted. After e) 254.5 490.62 B
0.28 0.02 (x) 320.19 490.62 B
0.28 0.02 (ecution of the cleanup forms, a test is made of) 325.54 490.62 B
0.28 0.02 (the tar) 63.65 477.62 B
0.28 0.02 (get object for the thro) 91.63 477.62 B
0.28 0.02 (w) 188.14 477.62 B
0.28 0.02 (. If this w) 195.38 477.62 B
0.28 0.02 (as not the compiler) 238.43 477.62 B
0.28 0.02 (-generated thro) 323.36 477.62 B
0.28 0.02 (w then the thro) 390.48 477.62 B
0.28 0.02 (w is redone with) 457.57 477.62 B
0.28 0.08 (the original tar) 63.65 464.62 B
0.28 0.08 (get and v) 130.1 464.62 B
0.28 0.08 (alue\050s\051, so that a \322real\323 thro) 171.45 464.62 B
0.28 0.08 (w can transfer to a point before the) 296.62 464.62 B
5 F
0.66 0.08 (unwind-pro-) 458.3 464.62 B
(tect) 63.65 451.62 T
2 F
(.) 90.05 451.62 T
0.19 (This implementation may also be possible for use with TDF) 63.65 426.62 P
0.19 (, \050once a mechanism has been found for catch) 328.8 426.62 P
(and thro) 63.65 413.62 T
(w\051, since it mak) 99.73 413.62 T
(es use of other primiti) 169.89 413.62 T
(v) 266.16 413.62 T
(es, and adds little e) 271.49 413.62 T
(xtra complication.) 355.35 413.62 T
0 12 Q
(8.3) 63.65 379.95 T
(Special binding) 90.65 379.95 T
2 11 Q
0.28 0.02 (When v) 63.65 362.62 B
0.28 0.02 (ariables are introduced, or) 98.29 362.62 B
3 F
0.28 0.02 (bound) 217.57 362.62 B
2 F
0.28 0.02 (, in Common Lisp \050with the) 245.18 362.62 B
5 F
0.66 0.02 (let) 372.37 362.62 B
2 F
0.28 0.02 ( and) 392.23 362.62 B
5 F
0.66 0.02 (let*) 414.27 362.62 B
2 F
0.28 0.02 ( special forms\051, the) 440.76 362.62 B
0.28 0.02 (y) 526.15 362.62 B
0.28 0.04 (are normally le) 63.65 349.62 B
0.28 0.04 (xically scoped, as is often the case with static languages such as C. The programmer may) 131.26 349.62 B
0.28 0.16 (instead specify that the v) 63.65 336.62 B
0.28 0.16 (ariables are to be introduced with) 178.1 336.62 B
3 F
0.28 0.16 (special binding) 335.17 336.62 B
2 8.8 Q
0.22 0.16 (2) 405.43 341.02 B
2 11 Q
0.28 0.16 (, which gi) 410 336.62 B
0.28 0.16 (v) 455.6 336.62 B
0.28 0.16 (es the v) 461.1 336.62 B
0.28 0.16 (ariables) 496.29 336.62 B
-0.23 (dynamic scope - i.e. the v) 63.65 323.62 P
-0.23 (ariables are visible to an) 174.97 323.62 P
-0.23 (y function called while the binding is acti) 280.82 323.62 P
-0.23 (v) 461.37 323.62 P
-0.23 (e. The v) 466.7 323.62 P
-0.23 (ariable) 501.72 323.62 P
-0.24 (v) 63.65 310.62 P
-0.24 (alues must re) 68.87 310.62 P
-0.24 (v) 126.16 310.62 P
-0.24 (ert to their pre) 131.49 310.62 P
-0.24 (vious v) 193.11 310.62 P
-0.24 (alues, either at the end of a binding form, if a transfer of control termi-) 224.68 310.62 P
(nates a binding form prematurely) 63.65 297.62 T
(.) 209.57 297.62 T
0.28 0.01 (It is possible to implement special binding using either a) 63.65 272.62 B
3 F
0.28 0.01 (shallow binding) 318.14 272.62 B
2 F
0.28 0.01 ( or) 389.17 272.62 B
3 F
0.28 0.01 (deep binding) 404.42 272.62 B
2 F
0.28 0.01 ( technique \050or a) 461.95 272.62 B
-0.17 (mixture of the tw) 63.65 259.62 P
-0.17 (o\051. If deep binding is used, a ne) 139.09 259.62 P
-0.17 (w location is created for the v) 275.99 259.62 P
-0.17 (ariable each time it is bound,) 405.42 259.62 P
0.28 0.01 (\050often this location will be on the stack\051 and the most recent location must be searched for when the v) 63.65 246.62 B
0.28 0.01 (ari-) 516.36 246.62 B
0.28 0.05 (able is referenced. If shallo) 63.65 233.62 B
0.28 0.05 (w binding is used, the same location is al) 185.26 233.62 B
0.28 0.05 (w) 369.91 233.62 B
0.28 0.05 (ays used for the v) 377.79 233.62 B
0.28 0.05 (ariable \050so refer-) 457.05 233.62 B
0.28 0.08 (ences are f) 63.65 220.62 B
0.28 0.08 (aster\051, b) 111.98 220.62 B
0.28 0.08 (ut the old v) 148.17 220.62 B
0.28 0.08 (alue must be stored some) 199.47 220.62 B
0.28 0.08 (where just before the binding \050ag) 313.38 220.62 B
0.28 0.08 (ain, usually the) 463.01 220.62 B
(stack\051, and restored just after the binding.) 63.65 207.62 T
63.65 165.95 531.65 178.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 173.95 171.65 173.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
-0.17 (3.  Other Common Lisp control transfer mechanisms such as) 63.65 159.95 P
5 F
-0.4 (go) 282.72 159.95 P
2 F
-0.17 (and) 298.53 159.95 P
5 F
-0.4 (return-from) 313.61 159.95 P
2 F
-0.17 ( are also required to respect the semantics of) 373.01 159.95 P
5 F
-0.02 (unwind-protect) 63.65 149.95 P
2 F
-0.01 (. These mechanisms are le) 139.25 149.95 P
-0.01 (xically scoped, b) 233.8 149.95 P
-0.01 (ut may ha) 294.34 149.95 P
-0.01 (v) 329.64 149.95 P
-0.01 (e similar dynamic properties to) 334 149.95 P
5 F
-0.02 (throw) 448.19 149.95 P
2 F
-0.01 ( if used inside a) 475.19 149.95 P
(closure. Harlequin\325) 63.65 139.95 T
(s compiler will detect these cases, and use the same mechanism as) 132.63 139.95 T
5 F
(throw) 373.34 139.95 T
2 F
( for the transfer when necessary) 400.34 139.95 T
(.) 514.46 139.95 T
0.58 (1.  The CISC implementation actually uses a more speci\336c mechanism, b) 63.65 126.95 P
0.58 (ut I see no point in describing an) 333.54 126.95 P
0.58 (ything other than the) 455.17 126.95 P
(most general solution.) 63.65 116.95 T
(2.  Special binding is not pro) 63.65 103.95 T
(vided in Dylan.) 167.26 103.95 T
FMENDPAGE
%%EndPage: "16" 20
%%Page: "17" 21
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
( TDF Suppor) 416.52 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(17) 520.53 84.9 T
2 11 Q
0.28 0.1 (It is possible to implement shallo) 63.65 737.62 B
0.28 0.1 (w binding with the) 213.86 737.62 B
5 F
0.66 0.1 (unwind-protect) 302.39 737.62 B
2 F
0.28 0.1 ( primiti) 396.17 737.62 B
0.28 0.1 (v) 429.66 737.62 B
0.28 0.1 (e described abo) 435.1 737.62 B
0.28 0.1 (v) 505.38 737.62 B
0.28 0.1 (e, so) 510.81 737.62 B
0.28 0 (special binding may not add an) 63.65 724.62 B
0.28 0 (y comple) 202.13 724.62 B
0.28 0 (xity to the requirements for TDF) 242.9 724.62 B
0.28 0 (. Ho) 387.4 724.62 B
0.28 0 (we) 406.36 724.62 B
0.28 0 (v) 418.91 724.62 B
0.28 0 (er) 424.25 724.62 B
0.28 0 (, special binding starts) 432.36 724.62 B
0.28 0.18 (to become more comple) 63.65 711.62 B
0.28 0.18 (x when the notion of) 174.14 711.62 B
3 F
0.28 0.18 (thr) 273.14 711.62 B
0.28 0.18 (eads) 286.12 711.62 B
2 F
0.28 0.18 ( is introduced. Threads are not a standard part of) 307.01 711.62 B
-0.02 (Common Lisp, b) 63.65 698.62 P
-0.02 (ut most implementations pro) 137.65 698.62 P
-0.02 (vide them. Where threads are pro) 263.62 698.62 P
-0.02 (vided, it is intuiti) 409.97 698.62 P
-0.02 (v) 484.82 698.62 P
-0.02 (e for spe-) 490.15 698.62 P
-0.26 (cial bindings to be local to the thread in which the) 63.65 685.62 P
-0.26 (y were bound. If deep binding is used, a conte) 280.83 685.62 P
-0.26 (xt switch to) 480.84 685.62 P
0.06 (another thread does not require an) 63.65 672.62 P
0.06 (y w) 213.78 672.62 P
0.06 (ork to adjust the bindings, since the v) 229.93 672.62 P
0.06 (ariables are found on the stack,) 394.48 672.62 P
-0.12 (which must be switched an) 63.65 659.62 P
-0.12 (yw) 182.15 659.62 P
-0.12 (ay) 195.48 659.62 P
-0.12 (. Ho) 205.15 659.62 P
-0.12 (we) 223.7 659.62 P
-0.12 (v) 236.25 659.62 P
-0.12 (er) 241.59 659.62 P
-0.12 (, if shallo) 249.69 659.62 P
-0.12 (w binding is used, the central v) 290.43 659.62 P
-0.12 (ariable location must be) 426.61 659.62 P
0.23 (k) 63.65 646.62 P
0.23 (ept up to date each time a conte) 69.04 646.62 P
0.23 (xt switch occurs, in case a special binding must be done or undone. Nor-) 209.45 646.62 P
0.28 0.3 (mal) 63.65 633.62 B
5 F
0.66 0.3 (unwind-protect) 84.37 633.62 B
2 F
0.28 0.3 ( cleanup forms should not be e) 180.96 633.62 B
0.28 0.3 (x) 326.45 633.62 B
0.28 0.3 (ecuted at conte) 332.09 633.62 B
0.28 0.3 (xt switch time, ho) 402.94 633.62 B
0.28 0.3 (we) 487.71 633.62 B
0.28 0.3 (v) 500.86 633.62 B
0.28 0.3 (er) 506.49 633.62 B
0.28 0.3 (, so) 515.2 633.62 B
(another mechanism must be used to implement special binding if threads are pro) 63.65 620.62 T
(vided.) 417.88 620.62 T
-0.06 (Harlequin uses a shallo) 63.65 595.62 P
-0.06 (w binding scheme to implement special binding) 165.55 595.62 P
2 8.8 Q
-0.05 (1) 376.04 600.02 P
2 11 Q
-0.06 (. The location of a special v) 380.44 595.62 P
-0.06 (ariable) 501.72 595.62 P
-0.22 (is al) 63.65 582.62 P
-0.22 (w) 81.35 582.62 P
-0.22 (ays in the) 89.18 582.62 P
3 F
-0.22 (symbol value) 133.44 582.62 P
2 F
-0.22 ( \336eld of the symbol used to name the v) 190.96 582.62 P
-0.22 (ariable. When a special binding occurs,) 359.53 582.62 P
0.06 (the information for each symbol being specially bound is pushed onto the stack, to create a) 63.65 569.62 P
3 F
0.06 (binding fr) 466.97 569.62 P
0.06 (ame) 510.57 569.62 P
2 F
0.06 (.) 528.9 569.62 P
0.28 0.12 (All binding frames are link) 63.65 556.62 B
0.28 0.12 (ed together on the stack for ease of chaining along the frames when conte) 187.1 556.62 B
0.28 0.12 (xt) 522.97 556.62 B
0.28 0.01 (switching. A global location in memory called the) 63.65 543.62 B
3 F
0.28 0.01 (dynamic en) 289.69 543.62 B
0.28 0.01 (vir) 340.03 543.62 B
0.28 0.01 (onment pointer) 351.78 543.62 B
2 F
0.28 0.01 ( points to the most recent) 419.11 543.62 B
(binding frame.) 63.65 530.62 T
-0.16 (When a binding frame is created, the contents of the dynamic en) 63.65 505.62 P
-0.16 (vironment pointer are \336rst pushed onto the) 344.99 505.62 P
0.09 (stack. Ne) 63.65 492.62 P
0.09 (xt, for each v) 104.5 492.62 P
0.09 (ariable being specially bound, the old v) 162.52 492.62 P
0.09 (alue of the v) 336 492.62 P
0.09 (ariable is pushed onto the stack,) 390.67 492.62 P
0.28 0.07 (follo) 63.65 479.62 B
0.28 0.07 (wed by the name of the v) 84.51 479.62 B
0.28 0.07 (ariable \050a Lisp symbol\051; the ne) 198.8 479.62 B
0.28 0.07 (w v) 336.85 479.62 B
0.28 0.07 (alue of the v) 353.26 479.62 B
0.28 0.07 (ariable is then stored in the) 409.42 479.62 B
0.28 0.04 (symbol v) 63.65 466.62 B
0.28 0.04 (alue f) 104.57 466.62 B
0.28 0.04 (ield. Finally) 129.19 466.62 B
0.28 0.04 (, the stack pointer is copied into the dynamic en) 182.38 466.62 B
0.28 0.04 (vironment pointer to complete) 396.33 466.62 B
(the link of binding frames.) 63.65 453.62 T
0.06 (On e) 63.65 428.62 P
0.06 (xit from the binding form, the bound v) 84.62 428.62 P
0.06 (ariables ha) 254.66 428.62 P
0.06 (v) 301.85 428.62 P
0.06 (e their old v) 307.18 428.62 P
0.06 (alues restored by popping each symbol) 359.95 428.62 P
0.28 0.22 (from the stack, and using this popped v) 63.65 415.62 B
0.28 0.22 (alue to point to the symbol v) 246.76 415.62 B
0.28 0.22 (alue f) 380.38 415.62 B
0.28 0.22 (ield, where the old v) 406.1 415.62 B
0.28 0.22 (alue is) 501.65 415.62 B
0.28 0.01 (popped. After all the symbols ha) 63.65 402.62 B
0.28 0.01 (v) 208.61 402.62 B
0.28 0.01 (e been popped, the binding frame link is popped into the dynamic en) 213.95 402.62 B
0.28 0.01 (vi-) 519.42 402.62 B
(ronment pointer) 63.65 389.62 T
(.) 133.62 389.62 T
-0.17 (If a control transfer occurs from inside to outside the binding form, the thro) 63.65 364.62 P
-0.17 (w mechanism is responsible for) 393 364.62 P
-0.04 (undoing the special bindings. All the information to do this is stored on the stack, so the implementation is) 63.65 351.62 P
-0.2 (straightforw) 63.65 338.62 P
-0.2 (ard. Similarly) 117.31 338.62 P
-0.2 (, during a conte) 176.89 338.62 P
-0.2 (xt switch, special bindings must be undone for the old thread, and) 244.55 338.62 P
0.28 0.03 (redone for the ne) 63.65 325.62 B
0.28 0.03 (w thread. These tw) 139.59 325.62 B
0.28 0.03 (o operations are actually performed by the same function, which fol-) 224.6 325.62 B
0.28 0.02 (lo) 63.65 312.62 B
0.28 0.02 (ws the chain of binding frames on the stack, re) 71.97 312.62 B
0.28 0.02 (v) 280.36 312.62 B
0.28 0.02 (erting an) 285.72 312.62 B
0.28 0.02 (y bindings in the process. As the function pro-) 324.8 312.62 B
-0.05 (cesses each binding frame, it sw) 63.65 299.62 P
-0.05 (aps the linking pointers, so that instead of a chain of bindings from ne) 205.04 299.62 P
-0.05 (west) 511.48 299.62 P
0.28 0.06 (to oldest, the stack contains a chain from oldest to ne) 63.65 286.62 B
0.28 0.06 (west. When the bindings are processed for the ne) 302.74 286.62 B
0.28 0.06 (w) 523.71 286.62 B
0.28 0.1 (thread, the binding chain starts with the oldest f) 63.65 273.62 B
0.28 0.1 (irst, so bindings are recreated in the correct order) 279.42 273.62 B
0.28 0.1 (. After) 502.08 273.62 B
(processing, the chain ag) 63.65 260.62 T
(ain has the most recent binding \336rst.) 169.29 260.62 T
-0.04 (It is unclear what TDF primiti) 63.65 235.62 P
-0.04 (v) 195.46 235.62 P
-0.04 (es, if an) 200.8 235.62 P
-0.04 (y) 235.07 235.62 P
-0.04 (, are needed for special binding. Extra primiti) 239.85 235.62 P
-0.04 (v) 439.38 235.62 P
-0.04 (es are only required) 444.72 235.62 P
0.28 0.05 (for a language which supports both special binding and multiple threads, which is not true for an) 63.65 222.62 B
0.28 0.05 (y of the) 497.18 222.62 B
0.18 (standard Lisp language de\336nitions. I hope that TDF will be able to support this type of binding scheme as) 63.65 209.62 P
0.28 0.03 (it may become important with a future language implementation. Hopefully) 63.65 196.62 B
0.28 0.03 (, whate) 401.02 196.62 B
0.28 0.03 (v) 432.99 196.62 B
0.28 0.03 (er scheme is adopted) 438.35 196.62 B
-0.23 (to support other operations with dynamic scope \050such as) 63.65 183.62 P
5 F
-0.56 (unwind-protect) 311.78 183.62 P
2 F
-0.23 (\051 will be suitably general that) 404.18 183.62 P
(special binding can be implemented too.) 63.65 170.62 T
63.65 118.95 531.65 131.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 126.95 171.65 126.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
(1.  Although a h) 63.65 112.95 T
(ybrid shallo) 121.85 112.95 T
(w and deep binding mechanism is under de) 164.38 112.95 T
(v) 319.88 112.95 T
(elopment for a parallel Lisp.) 324.24 112.95 T
FMENDPAGE
%%EndPage: "17" 21
%%Page: "18" 22
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
(TDF Suppor) 418.74 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(18) 63.65 84.9 T
0 12 Q
(8.4) 63.65 736.95 T
(Ev) 90.65 736.95 T
(aluation or) 105.08 736.95 T
(der) 166.19 736.95 T
2 11 Q
0.28 0.03 (Most Lisp languages \050including Common Lisp and Dylan\051 def) 63.65 719.62 B
0.28 0.03 (ine the order of e) 341.33 719.62 B
0.28 0.03 (v) 417.83 719.62 B
0.28 0.03 (aluation or ar) 423.09 719.62 B
0.28 0.03 (guments to) 482.51 719.62 B
0.28 0.07 (function calls and for special forms. Normally the ordering is simply le) 63.65 706.62 B
0.28 0.07 (xical from left to right. Unlik) 384.47 706.62 B
0.28 0.07 (e C) 516.26 706.62 B
0.28 0.09 (and man) 63.65 693.62 B
0.28 0.09 (y other languages, Lisp compilers are not permitted to optimise this e) 101.93 693.62 B
0.28 0.09 (v) 415.61 693.62 B
0.28 0.09 (aluation order unless the) 420.92 693.62 B
(compiler can be certain that it will not af) 63.65 680.62 T
(fect program e) 242.4 680.62 T
(x) 306.37 680.62 T
(ecution.) 311.71 680.62 T
-0.12 (This requirement appears to be well supported already in TDF) 63.65 655.62 P
-0.12 (. The) 335.71 655.62 P
5 F
-0.29 (sequence) 360.82 655.62 P
2 F
-0.12 ( primiti) 413.62 655.62 P
-0.12 (v) 445.92 655.62 P
-0.12 (e guarantees order) 451.26 655.62 P
(of e) 63.65 642.62 T
(v) 80.17 642.62 T
(aluation.) 85.39 642.62 T
0 12 Q
(8.5) 63.65 608.95 T
(Inlining) 90.65 608.95 T
2 11 Q
0.28 0.03 (Common Lisp pro) 63.65 591.62 B
0.28 0.03 (vides tw) 145.14 591.62 B
0.28 0.03 (o declaration mechanisms which af) 182.51 591.62 B
0.28 0.03 (fect the inlining of function calls:) 339.47 591.62 B
5 F
0.66 0.03 (inline) 491.9 591.62 B
2 F
0.28 0.1 (and) 63.65 578.62 B
5 F
0.66 0.1 (notinline) 82.96 578.62 B
2 F
0.28 0.1 (.) 143.25 578.62 B
5 F
0.66 0.1 (Inline) 149.23 578.62 B
2 F
0.28 0.1 ( suggests to the compiler that the programmer w) 189.42 578.62 B
0.28 0.1 (ould lik) 408.84 578.62 B
0.28 0.1 (e the function to be) 443.72 578.62 B
0.01 (inlined. It is free to be ignored. This causes no problems with TDF: the producer can generate TDF for the) 63.65 565.62 P
(called function inline without w) 63.65 552.62 T
(orrying about whether a call is actually performed.) 204.09 552.62 T
0.28 0.03 (The compiler is) 63.65 527.62 B
1 F
0.28 0.03 (not) 136.68 527.62 B
2 F
0.28 0.03 ( free to ignore the) 152.04 527.62 B
5 F
0.66 0.03 (notinline) 234.87 527.62 B
2 F
0.28 0.03 ( declaration.) 294.5 527.62 B
3 F
0.28 0.03 ([B92]) 352.53 527.62 B
2 F
0.28 0.03 ( points out that there is no e) 378.94 527.62 B
0.28 0.03 (xplicit) 503.38 527.62 B
0.28 0.14 (w) 63.65 514.62 B
0.28 0.14 (ay to forbid a TDF producer from inlining a function, b) 71.62 514.62 B
0.28 0.14 (ut since all named Lisp function calls will be) 325.58 514.62 B
0.28 0.06 (through procedure v) 63.65 501.62 B
0.28 0.06 (ariables, this is an implicit mechanism for forbidding the inlining, since the v) 154.28 501.62 B
0.28 0.06 (ariable) 501.35 501.62 B
0.28 0.15 (v) 63.65 488.62 B
0.28 0.15 (alue can only be resolv) 69.02 488.62 B
0.28 0.15 (ed at run time. Hence there should be no requirement to e) 174.83 488.62 B
0.28 0.15 (xtend TDF to forbid) 439.2 488.62 B
(inlining.) 63.65 475.62 T
0 12 Q
(8.6) 63.65 441.95 T
(P) 90.65 441.95 T
(ac) 98.29 441.95 T
(ka) 111.4 441.95 T
(g) 124.62 441.95 T
(es) 132.07 441.95 T
2 11 Q
-0.18 (Common Lisp has a module system which allo) 63.65 424.62 P
-0.18 (ws separate namespaces for symbols. These namespaces are) 268.37 424.62 P
0.02 (called) 63.65 411.62 P
3 F
0.02 (pac) 92.69 411.62 P
0.02 (ka) 108.35 411.62 P
0.02 (g) 118.63 411.62 P
0.02 (es) 124.02 411.62 P
2 F
0.02 (. P) 133.18 411.62 P
0.02 (ackages are \336rst class objects in Common Lisp, and are named by strings. V) 144.65 411.62 P
0.02 (arious f) 478.89 411.62 P
0.02 (acil-) 512.1 411.62 P
-0 (ities are pro) 63.65 398.62 P
-0 (vided to manipulate them. The main purpose of packages is to pro) 115.41 398.62 P
-0 (vide a modularized mapping) 406.09 398.62 P
0.2 (between symbols \050which are objects\051 and their ASCII printed represented representation, as seen and pro-) 63.65 385.62 P
(duced by the Lisp reader and writer respecti) 63.65 372.62 T
(v) 256.73 372.62 T
(ely) 262.07 372.62 T
(.) 274.79 372.62 T
0.28 0.06 (Each Common Lisp symbol has a package associated with it \050its) 63.65 347.62 B
3 F
0.28 0.06 (home) 356.37 347.62 B
2 F
0.28 0.06 ( package\051; this may be) 380.45 347.62 B
5 F
0.66 0.06 (nil) 485.05 347.62 B
2 F
0.28 0.06 ( if the) 505.04 347.62 B
0.28 0.17 (symbol has no package, in which case it is not possible to f) 63.65 334.62 B
0.28 0.17 (ind the symbol from its name by using the) 336.74 334.62 B
(reader) 63.65 321.62 T
(.) 90.52 321.62 T
0.28 0.08 (Each package may e) 63.65 296.62 B
0.28 0.08 (xport symbols so that the) 155.81 296.62 B
0.28 0.08 (y may be accessed from other packages; such symbols are) 269.3 296.62 B
0.05 (said to be the) 63.65 283.62 P
3 F
0.05 (e) 124.97 283.62 P
0.05 (xternal) 129.63 283.62 P
2 F
0.05 (symbols of the package, while other visible symbols are) 163.6 283.62 P
3 F
0.05 (internal) 413.39 283.62 P
2 F
0.05 (. P) 448.23 283.62 P
0.05 (ackage \322) 459.73 283.62 P
0.05 (A\323 may) 497.08 283.62 P
3 F
-0.15 (use) 63.65 270.62 P
2 F
-0.15 ( package \322B\323, so that all the e) 78.31 270.62 P
-0.15 (xternal symbols of \322B\323 are visible inside \322) 207.85 270.62 P
-0.15 (A\323. A) 392.61 270.62 P
3 F
-0.15 (shadowing) 421.33 270.62 P
2 F
-0.15 ( mechanism is) 469 270.62 P
-0.13 (pro) 63.65 257.62 P
-0.13 (vided so that a package can import all the e) 78.15 257.62 P
-0.13 (xternal symbols of another package apart from the e) 267.1 257.62 P
-0.13 (xplicitly) 494.97 257.62 P
-0.11 (shado) 63.65 244.62 P
-0.11 (wed ones. Symbols from other packages may also be made visible to a package on a symbol by sym-) 89.04 244.62 P
0.28 0.08 (bol basis by e) 63.65 231.62 B
0.28 0.08 (xplicitly importing them. A symbol need only be visible from a package to be e) 125.57 231.62 B
0.28 0.08 (xported; it) 485.08 231.62 B
(need not ha) 63.65 218.62 T
(v) 114.14 218.62 T
(e that package as its home.) 119.47 218.62 T
-0.14 (Harlequin\325) 63.65 193.62 P
-0.14 (s Lisp implements packages as composite structure objects containing the package name, a hash) 110.69 193.62 P
0.28 0.04 (table of internal symbols, a hash table of e) 63.65 180.62 B
0.28 0.04 (xternal symbols and a list of used packages. This implementa-) 253.31 180.62 B
0.28 0.04 (tion is ef) 63.65 167.62 B
0.28 0.04 (fecti) 102.86 167.62 B
0.28 0.04 (v) 122.36 167.62 B
0.28 0.04 (ely def) 127.74 167.62 B
0.28 0.04 (ined in portable Common Lisp, and should require no e) 157.95 167.62 B
0.28 0.04 (xtra TDF features. Ho) 406.42 167.62 B
0.28 0.04 (we) 505.04 167.62 B
0.28 0.04 (v) 517.68 167.62 B
0.28 0.04 (er) 523.06 167.62 B
0.28 0.07 (there are some interesting bootstrap issues, since packages are required to resolv) 63.65 154.62 B
0.28 0.07 (e the names of symbols) 425.85 154.62 B
0.17 (stored in F) 63.65 141.62 P
0.17 (ASL \336les, and hence that the code required to create the \336rst packages cannot be loaded from a) 110.23 141.62 P
(F) 63.65 128.62 T
(ASL \336le itself. Bootstrapping is described in more detail in Section10 belo) 68.95 128.62 T
(w) 397.44 128.62 T
(.) 404.67 128.62 T
FMENDPAGE
%%EndPage: "18" 22
%%Page: "19" 23
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
( TDF Suppor) 416.52 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(19) 520.53 84.9 T
0 15 Q
(9.) 63.65 734.95 T
(Pr) 90.65 734.95 T
(ogram Err) 106.19 734.95 T
(or) 177.57 734.95 T
(s) 192.35 734.95 T
0 12 Q
(9.1) 63.65 699.95 T
(Conditions) 90.65 699.95 T
2 11 Q
0.28 0.12 (The Common Lisp Condition System gi) 63.65 682.62 B
0.28 0.12 (v) 245.09 682.62 B
0.28 0.12 (es the language an object oriented e) 250.54 682.62 B
0.28 0.12 (xception handling system.) 413.16 682.62 B
3 F
0.28 0.02 (Conditions) 63.65 669.62 B
2 F
0.28 0.02 ( are a means of describing e) 112.1 669.62 B
0.28 0.02 (xceptions. The) 236.84 669.62 B
0.28 0.02 (y are def) 301.95 669.62 B
0.28 0.02 (ined in terms of objects which inherit from) 340.52 669.62 B
-0.2 (the class) 63.65 656.62 P
5 F
-0.49 (condition) 103.57 656.62 P
2 F
-0.2 (. Some common condition classes are) 162.97 656.62 P
5 F
-0.49 (warning) 330.09 656.62 P
2 F
-0.2 ( and) 376.29 656.62 P
5 F
-0.49 (error) 397.27 656.62 P
2 F
-0.2 (, b) 429.83 656.62 P
-0.2 (ut programmers may) 440.4 656.62 P
(de\336ne their o) 63.65 643.62 T
(wn classes.) 121.42 643.62 T
0.28 0.02 (A condition is raised by passing a condition object to the function) 63.65 618.62 B
5 F
0.66 0.02 (signal) 360.11 618.62 B
2 8.8 Q
0.22 0.02 (1) 399.81 623.02 B
2 11 Q
0.28 0.02 (. A f) 404.22 618.62 B
0.28 0.02 (acility is pro) 424.6 618.62 B
0.28 0.02 (vided to set) 480.2 618.62 B
0.05 (up) 63.65 605.62 P
3 F
0.05 (handler) 77.44 605.62 P
0.05 (s) 111.55 605.62 P
2 F
0.05 ( for conditions.) 115.83 605.62 P
5 F
0.11 (Signal) 185.63 605.62 P
2 F
0.05 ( will in) 225.23 605.62 P
0.05 (v) 256.06 605.62 P
0.05 (ok) 261.34 605.62 P
0.05 (e the most recently established handler which matches \050i.e.) 272.23 605.62 P
-0.26 (is a superclass of\051 the condition object. After e) 63.65 592.62 P
-0.26 (xamining the condition object, this handler may cause a con-) 266.37 592.62 P
0.23 (trol transfer to some code which is designed to handle the error; alternati) 63.65 579.62 P
0.23 (v) 385.66 579.62 P
0.23 (ely) 390.99 579.62 P
0.23 (, the handler may just return,) 403.72 579.62 P
0.01 (in which case the ne) 63.65 566.62 P
0.01 (xt handler is found. If no handler transfers control,) 152.74 566.62 P
5 F
0.04 (signal) 378.03 566.62 P
2 F
0.01 ( just returns. The function) 417.63 566.62 P
5 F
(error) 63.65 553.62 T
2 F
( is de\336ned to call) 96.65 553.62 T
5 F
(signal) 174.56 553.62 T
2 F
(, and then to enter the deb) 214.16 553.62 T
(ugger if nothing handles the condition.) 327.89 553.62 T
0.16 (In addition to condition handlers, it is possible to set up) 63.65 528.62 P
3 F
0.16 (r) 312.33 528.62 P
0.16 (estarts) 316.21 528.62 P
2 F
0.16 (. Each restart is a function which pro) 345.54 528.62 P
0.16 (vides) 508.43 528.62 P
0.28 0.29 (some means of continuing from an e) 63.65 515.62 B
0.28 0.29 (xception. Restarts may be in) 235.67 515.62 B
0.28 0.29 (v) 369.4 515.62 B
0.28 0.29 (ok) 374.97 515.62 B
0.28 0.29 (ed by handlers, or the) 386.43 515.62 B
0.28 0.29 (y may be) 488.74 515.62 B
0.28 0.2 (in) 63.65 502.62 B
0.28 0.2 (v) 72.17 502.62 B
0.28 0.2 (ok) 77.65 502.62 B
0.28 0.2 (ed interacti) 88.95 502.62 B
0.28 0.2 (v) 140.55 502.62 B
0.28 0.2 (ely by the deb) 146.09 502.62 B
0.28 0.2 (ugger) 211.54 502.62 B
0.28 0.2 (. Functions are pro) 237 502.62 B
0.28 0.2 (vided to f) 323.99 502.62 B
0.28 0.2 (ind all the restarts which ha) 368.12 502.62 B
0.28 0.2 (v) 496.42 502.62 B
0.28 0.2 (e been) 501.96 502.62 B
(established, and to \336nd if there is a restart with a gi) 63.65 489.62 T
(v) 288.23 489.62 T
(en name.) 293.57 489.62 T
0.28 0.2 (Harlequin\325) 63.65 464.62 B
0.28 0.2 (s condition system is implemented using more primiti) 112.66 464.62 B
0.28 0.2 (v) 361.32 464.62 B
0.28 0.2 (e control transfer mechanisms \050ulti-) 366.85 464.62 B
0.28 0.13 (mately catch and thro) 63.65 451.62 B
0.28 0.13 (w\051, and special binding. It\325) 161.89 451.62 B
0.28 0.13 (s implementation does require the addition of a condi-) 284.5 451.62 B
-0.22 (tional thro) 63.65 438.62 P
-0.22 (w mechanism, which w) 108.68 438.62 P
-0.22 (orks lik) 211.78 438.62 P
-0.22 (e) 244.76 438.62 P
5 F
-0.53 (throw) 252.17 438.62 P
2 F
-0.22 ( if a catcher e) 285.17 438.62 P
-0.22 (xists, b) 343.36 438.62 P
-0.22 (ut returns) 374.1 438.62 P
5 F
-0.53 (nil) 418.26 438.62 P
2 F
-0.22 ( if there is no catcher) 438.06 438.62 P
-0.22 (.) 528.9 438.62 P
0.1 (Implementation of the condition system in TDF should cause no special problems, since it is entirely b) 63.65 425.62 P
0.1 (uilt) 516.97 425.62 P
(on these lo) 63.65 412.62 T
(wer le) 111.04 412.62 T
(v) 137.94 412.62 T
(el primiti) 143.28 412.62 T
(v) 183.65 412.62 T
(es.) 188.98 412.62 T
0 12 Q
(9.2) 63.65 378.95 T
(Stac) 90.65 378.95 T
(k bounds c) 115.75 378.95 T
(hec) 178.98 378.95 T
(k) 199.42 378.95 T
2 11 Q
-0.15 (The design of the language of Common Lisp is ideally suited for de) 63.65 361.62 P
-0.15 (v) 359.13 361.62 P
-0.15 (eloping ne) 364.46 361.62 P
-0.15 (w softw) 410.17 361.62 P
-0.15 (are. The interpreter) 445.04 361.62 P
-0.15 (,) 528.9 361.62 P
0.28 0.03 (interacti) 63.65 348.62 B
0.28 0.03 (v) 99.64 348.62 B
0.28 0.03 (e deb) 105 348.62 B
0.28 0.03 (ugger and the dynamic updating f) 128.7 348.62 B
0.28 0.03 (acilities mak) 278.92 348.62 B
0.28 0.03 (e it simple to e) 335.32 348.62 B
0.28 0.03 (xperiment. This is a v) 401.43 348.62 B
0.28 0.03 (ery dif-) 498.54 348.62 B
-0.14 (ferent w) 63.65 335.62 P
-0.14 (ay of w) 99.74 335.62 P
-0.14 (orking from a C language programmer) 132.34 335.62 P
-0.14 (, who w) 301.37 335.62 P
-0.14 (ould normally ha) 336.11 335.62 P
-0.14 (v) 410.77 335.62 P
-0.14 (e to edit, recompile, relink) 416.11 335.62 P
-0.27 (and restart a whole program after the results of a deb) 63.65 322.62 P
-0.27 (ug session. One consequence of this w) 292.92 322.62 P
-0.27 (ay of w) 460.76 322.62 P
-0.27 (orking is) 493.11 322.62 P
0.28 0.02 (that Lisp systems must be error tolerant. If the Lisp en) 63.65 309.62 B
0.28 0.02 (vironment crashes because of a programmer\325) 305.51 309.62 B
0.28 0.02 (s b) 505.23 309.62 B
0.28 0.02 (ug,) 517.86 309.62 B
(then all the bene\336ts of dynamic updating are lost.) 63.65 296.62 T
0.28 0.03 (A common problem with untested softw) 63.65 271.62 B
0.28 0.03 (are is stack o) 243.45 271.62 B
0.28 0.03 (v) 301.62 271.62 B
0.28 0.03 (erf) 306.98 271.62 B
0.28 0.03 (lo) 318.67 271.62 B
0.28 0.03 (w) 327.01 271.62 B
0.28 0.03 (. There is no stated requirement that a Com-) 334.27 271.62 B
0.01 (mon Lisp system should be able to reco) 63.65 258.62 P
0.01 (v) 238.03 258.62 P
0.01 (er from this, although reco) 243.36 258.62 P
0.01 (v) 360.25 258.62 P
0.01 (ery is standard in commercially a) 365.59 258.62 P
0.01 (v) 511.76 258.62 P
0.01 (ail-) 516.98 258.62 P
(able Lisps.) 63.65 245.62 T
0.28 0.03 (Harlequin\325) 63.65 220.62 B
0.28 0.03 (s Lisp compiler inserts code for a stack check on entry to each function) 111 220.62 B
2 8.8 Q
0.22 0.03 (2) 429.89 225.02 B
2 11 Q
0.28 0.03 (. This does not neces-) 434.32 220.62 B
0.28 0.09 (sarily increase the code size, since the stack check can be performed out of line by one of the dedicated) 63.65 207.62 B
0.28 0.04 (parameter processing functions. If a stack o) 63.65 194.62 B
0.28 0.04 (v) 258.25 194.62 B
0.28 0.04 (erf) 263.62 194.62 B
0.28 0.04 (lo) 275.33 194.62 B
0.28 0.04 (w is detected, an error is signalled, and restarts are pro-) 283.69 194.62 B
(vided to increase the size of the stack in case the programmer wishes to continue with the computation.) 63.65 181.62 T
63.65 141.95 531.65 154.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 149.95 171.65 149.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
(1.  This is a slight simpli\336cation as) 63.65 135.95 T
5 F
(signal) 191.41 135.95 T
2 F
( can create the condition object itself if it is passed more primiti) 223.81 135.95 T
(v) 453.06 135.95 T
(e ar) 457.42 135.95 T
(guments.) 470.5 135.95 T
0.29 (2.  It is possible to disable this check, by setting the) 63.65 122.95 P
5 F
0.7 (safety) 254.65 122.95 P
2 F
0.29 (le) 293.16 122.95 P
0.29 (v) 299.43 122.95 P
0.29 (el suf) 303.8 122.95 P
0.29 (\336ciently lo) 323.61 122.95 P
0.29 (w with a declaration. Of necessity) 362.43 122.95 P
0.29 (, parts of the) 485.78 122.95 P
(error system itself must do this.) 63.65 112.95 T
FMENDPAGE
%%EndPage: "19" 23
%%Page: "20" 24
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
(TDF Suppor) 418.74 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(20) 63.65 84.9 T
2 11 Q
0.28 0.1 (There are other adv) 63.65 737.62 B
0.28 0.1 (antages of this stack checking. The entry to a function is kno) 151.98 737.62 B
0.28 0.1 (wn to be a safe time to) 428.14 737.62 B
0.28 0.12 (interrupt Lisp; there are guaranteed to be no spurious v) 63.65 724.62 B
0.28 0.12 (alues around to confuse GC. Hence, by suitably) 314.34 724.62 B
0.28 0.05 (modifying the stack limit v) 63.65 711.62 B
0.28 0.05 (ariable, a Lisp computation will be forced to interrupt itself and call the error) 185.14 711.62 B
0.28 0.06 (handler) 63.65 698.62 B
0.28 0.06 (. If the error handler is suf) 96.46 698.62 B
0.28 0.06 (f) 214.74 698.62 B
0.28 0.06 (iciently smart it can detect whether there w) 217.86 698.62 B
0.28 0.06 (as a real stack o) 412.05 698.62 B
0.28 0.06 (v) 483.65 698.62 B
0.28 0.06 (erf) 489.05 698.62 B
0.28 0.06 (lo) 500.84 698.62 B
0.28 0.06 (w) 509.24 698.62 B
0.28 0.06 (, or) 516.53 698.62 B
0.02 (whether there w) 63.65 685.62 P
0.02 (as an interruption for another reason. This mechanism is used by Harlequin Lisp to handle) 134.45 685.62 P
-0.25 (interrupts from the operating system timer so that threads only conte) 63.65 672.62 P
-0.25 (xt switch at GC safe times. Similarly it) 362.26 672.62 P
(is used to enter the deb) 63.65 659.62 T
(ugger at a GC safe time when a k) 164.55 659.62 T
(e) 311.07 659.62 T
(yboard break \050e.g. Control C\051 occurs.) 315.79 659.62 T
-0.09 (This stack checking technique is important to the rob) 63.65 634.62 P
-0.09 (ustness of the Lisp implementation as a programming) 296.11 634.62 P
0.28 0.14 (en) 63.65 621.62 B
0.28 0.14 (vironment. Ho) 73.86 621.62 B
0.28 0.14 (we) 139.78 621.62 B
0.28 0.14 (v) 152.6 621.62 B
0.28 0.14 (er) 158.07 621.62 B
0.28 0.14 (, there w) 166.45 621.62 B
0.28 0.14 (ould appear to be no w) 206.28 621.62 B
0.28 0.14 (ay to specify this beha) 311.02 621.62 B
0.28 0.14 (viour in an AN manner) 413.38 621.62 B
0.28 0.14 (. It) 518.75 621.62 B
0.28 0.04 (might be possible to use these techniques if tok) 63.65 608.62 B
0.28 0.04 (ens are pro) 275.55 608.62 B
0.28 0.04 (vided in TDF for setting and reading the stack) 324.67 608.62 B
0.28 0.02 (limit and stack pointer) 63.65 595.62 B
0.28 0.02 (, b) 163.12 595.62 B
0.28 0.02 (ut this w) 174.22 595.62 B
0.28 0.02 (ould mean that the TDF must conf) 212.71 595.62 B
0.28 0.02 (irm the e) 365.84 595.62 B
0.28 0.02 (xistence of a stack in its AN) 405.49 595.62 B
0.05 (model. The restart mechanism for gro) 63.65 582.62 P
0.05 (wing the stack is not a vital part of stack checking, b) 229.83 582.62 P
0.05 (ut is useful ne) 461.18 582.62 P
0.05 (v-) 522.48 582.62 P
0.24 (ertheless. Presumably this w) 63.65 569.62 P
0.24 (ould require other TDF e) 189.53 569.62 P
0.24 (xtensions to create a ne) 300.31 569.62 P
0.24 (w stack - although this could) 403.64 569.62 P
(possibly be handled by the GC code, since addresses on the stack w) 63.65 556.62 T
(ould ha) 361.41 556.62 T
(v) 393.88 556.62 T
(e to be \336x) 399.21 556.62 T
(ed up an) 442.74 556.62 T
(yw) 479.84 556.62 T
(ay) 493.18 556.62 T
(.) 502.85 556.62 T
0 12 Q
(9.3) 63.65 522.95 T
(T) 90.65 522.95 T
(raps) 97.02 522.95 T
2 11 Q
-0 (Another common error caused by an incorrect program is di) 63.65 505.62 P
-0 (vision by zero. This normally causes a proces-) 327.59 505.62 P
0.28 0.18 (sor trap which is handled in an operating system def) 63.65 492.62 B
0.28 0.18 (ined manner) 304.32 492.62 B
0.28 0.18 (. Other processor traps might include) 360.65 492.62 B
0.28 0.02 (memory access violations in a virtual memory en) 63.65 479.62 B
0.28 0.02 (vironment; these are possible if a programmer has com-) 282.73 479.62 B
(piled erroneous code using a lo) 63.65 466.62 T
(w safety declaration.) 200.54 466.62 T
0.28 0.04 (A good Lisp implementation will handle these errors. This is done by using an operating system specif) 63.65 441.62 B
0.28 0.04 (ic) 523.66 441.62 B
(mechanism to initialize a trap handler) 63.65 428.62 T
(, which e) 229.1 428.62 T
(v) 268.84 428.62 T
(entually calls the Lisp) 274.18 428.62 T
5 F
(error) 373.78 428.62 T
2 F
( function.) 406.78 428.62 T
0.28 0.1 (Since the initialization of the trap handler is inherently operating system specif) 63.65 409.62 B
0.28 0.1 (ic, this problem is really) 421.33 409.62 B
(outside of the domain of TDF) 63.65 396.62 T
(.) 193.84 396.62 T
0 15 Q
(10.) 63.65 357.95 T
(Common Langua) 90.65 357.95 T
(g) 213 357.95 T
(e Extensions) 222.32 357.95 T
0 12 Q
(10.1) 63.65 322.95 T
(Multiple threads) 90.65 322.95 T
2 11 Q
0.28 0.08 (W) 63.65 305.62 B
0.28 0.08 (e ha) 73.23 305.62 B
0.28 0.08 (v) 91.6 305.62 B
0.28 0.08 (e already seen some of the implementation details of Harlequin\325) 97.01 305.62 B
0.28 0.08 (s threads e) 385.55 305.62 B
0.28 0.08 (xtensions to Common) 433.19 305.62 B
-0.01 (Lisp, and some of the stack manipulation f) 63.65 292.62 P
-0.01 (acilities required. P) 251.04 292.62 P
-0.01 (art of the implementation of a threads e) 336.08 292.62 P
-0.01 (xten-) 509.04 292.62 P
0.03 (sion concerns the operating system interf) 63.65 279.62 P
0.03 (ace \050e.g. to request timer interrupts\051, which is therefore out of the) 244.22 279.62 P
(scope of TDF) 63.65 266.62 T
(.) 123.26 266.62 T
0.28 0.04 (One further point is w) 63.65 241.62 B
0.28 0.04 (orth mentioning. Since threads may be dynamically created and destro) 162.72 241.62 B
0.28 0.04 (yed, storage) 477.75 241.62 B
-0.14 (for the threads should be handled by the g) 63.65 228.62 P
-0.14 (arbage collector) 246.98 228.62 P
-0.14 (. This storage may include some data structure to) 316.79 228.62 P
0.28 0.03 (describe the status of the thread, and it will also include a stack for the thread. Hence stacks become f) 63.65 215.62 B
0.28 0.03 (irst) 517.51 215.62 B
(class objects in their o) 63.65 202.62 T
(wn right, and their presence can no longer be \322hidden under the carpet\323.) 161.14 202.62 T
0 12 Q
(10.2) 63.65 168.95 T
(Sa) 90.65 168.95 T
(ving ima) 105.14 168.95 T
(g) 153.71 168.95 T
(es) 161.16 168.95 T
2 11 Q
0.28 0.05 (Since Lisp programs are created by dynamically loading code and data into a smaller Lisp program, it is) 63.65 151.62 B
-0.05 (normal to be able to sa) 63.65 138.62 P
-0.05 (v) 163.07 138.62 P
-0.05 (e the current state of the program \050or) 168.4 138.62 P
3 F
-0.05 (ima) 332.32 138.62 P
-0.05 (g) 348.71 138.62 P
-0.05 (e) 354.1 138.62 P
2 F
-0.05 (\051. The language de\336nition for Common) 358.98 138.62 P
0.03 (Lisp does not describe ho) 63.65 125.62 P
0.03 (w this should be done, b) 175.94 125.62 P
0.03 (ut normally a function is pro) 282.84 125.62 P
0.03 (vided which does a full g) 408.42 125.62 P
0.03 (ar-) 519.44 125.62 P
0.14 (bage collection, before sa) 63.65 112.62 P
0.14 (ving the current state as an e) 176.25 112.62 P
0.14 (x) 302.17 112.62 P
0.14 (ecutable program to a \336le. An alternati) 307.51 112.62 P
0.14 (v) 478.22 112.62 P
0.14 (e approach) 483.56 112.62 P
FMENDPAGE
%%EndPage: "20" 24
%%Page: "21" 25
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
( TDF Suppor) 416.52 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(21) 520.53 84.9 T
2 11 Q
0.11 (w) 63.65 737.62 P
0.11 (ould be to sa) 71.48 737.62 P
0.11 (v) 127.5 737.62 P
0.11 (e the heap data of the image only) 132.84 737.62 P
2 8.8 Q
0.09 (1) 279.33 742.02 P
2 11 Q
0.11 (, so that a small, static e) 283.73 737.62 P
0.11 (x) 389.33 737.62 P
0.11 (ecutable program can reload it.) 394.66 737.62 P
0.28 0.16 (This technique has the adv) 63.65 724.62 B
0.28 0.16 (antage that it is less operating system specif) 186.06 724.62 B
0.28 0.16 (ic, since it does not require an) 387.73 724.62 B
0.28 0.16 (y) 526.15 724.62 B
(kno) 63.65 711.62 T
(wledge of the object \336le format.) 79.87 711.62 T
-0.02 (At \336rst sight, it w) 63.65 686.62 P
-0.02 (ould seem that it should be possible to specify sa) 140.79 686.62 P
-0.02 (ving the entire heap area in an AN man-) 355.22 686.62 P
0.03 (ner) 63.65 673.62 P
0.03 (. Ho) 77.09 673.62 P
0.03 (we) 95.78 673.62 P
0.03 (v) 108.33 673.62 P
0.03 (er) 113.67 673.62 P
0.03 (, this will presumably require an e) 121.78 673.62 P
0.03 (xplicit TDF tok) 271.78 673.62 P
0.03 (en, since TDF abstracts a) 340.18 673.62 P
0.03 (w) 451.01 673.62 P
0.03 (ay the idea of an) 458.84 673.62 P
0.28 0.19 (area of memory called a heap. The TDF requirements for sa) 63.65 660.62 B
0.28 0.19 (ving images are probably shared with the) 340.92 660.62 B
(requirements of the g) 63.65 647.62 T
(arbage collector) 157.38 647.62 T
(, which also must consider memory as an addressable area.) 227.49 647.62 T
0 15 Q
(11.) 63.65 608.95 T
(Bootstrapping) 90.65 608.95 T
2 11 Q
0.19 (In section 7.1 we sa) 63.65 586.62 P
0.19 (w that Lisp programs are b) 151.33 586.62 P
0.19 (uilt up from top le) 270.31 586.62 P
0.19 (v) 350.87 586.62 P
0.19 (el forms, which ha) 356.21 586.62 P
0.19 (v) 438.45 586.62 P
0.19 (e side ef) 443.78 586.62 P
0.19 (fects on the) 480.55 586.62 P
-0.14 (Lisp en) 63.65 573.62 P
-0.14 (vironment, such as setting the v) 95.76 573.62 P
-0.14 (alue of a symbol, or associating a symbol with a function. Normally) 234.1 573.62 P
-0.21 (these top le) 63.65 560.62 P
-0.21 (v) 113.06 560.62 P
-0.21 (el forms are compiled as anon) 118.39 560.62 P
-0.21 (ymous functions requiring no ar) 249.45 560.62 P
-0.21 (guments, and are e) 389.56 560.62 P
-0.21 (x) 471.24 560.62 P
-0.21 (ecuted when) 476.57 560.62 P
(a F) 63.65 547.62 T
(ASL \336le is loaded.) 76.58 547.62 T
0.22 (The F) 63.65 522.62 P
0.22 (ASL loader code can ob) 89.02 522.62 P
0.22 (viously not be loaded by the F) 196.02 522.62 P
0.22 (ASL loader itself, so ho) 329.73 522.62 P
0.22 (w is it initialized? W) 435.12 522.62 P
0.22 (e) 526.76 522.62 P
0.28 0.05 (ha) 63.65 509.62 B
0.28 0.05 (v) 73.91 509.62 B
0.28 0.05 (e seen that the F) 79.3 509.62 B
0.28 0.05 (ASL loader is user e) 151.92 509.62 B
0.28 0.05 (xtensible, and so it must directly interact with the Lisp language) 243.66 509.62 B
0.15 (model. It w) 63.65 496.62 P
0.15 (ould seem to mak) 114.24 496.62 P
0.15 (e sense to implement the F) 192.49 496.62 P
0.15 (ASL loader in Lisp \050although this is not a require-) 310.04 496.62 P
0.28 0.1 (ment\051. If the Lisp compiler is used to generate this bootstrap code, it must generate output in pure TDF) 63.65 483.62 B
0.28 0.07 (form for direct manipulation by the TDF link) 63.65 470.62 B
0.28 0.07 (er and installer) 267.49 470.62 B
0.28 0.07 (. It must be possible to specify initialization) 333.95 470.62 B
0.28 0.11 (code in a TDF stream, in order to create Lisp compatible functions, and call them during the bootstrap.) 63.65 457.62 B
0.2 (Presumably a tok) 63.65 444.62 P
0.2 (en will be required to e) 140.32 444.62 P
0.2 (xpress this in TDF) 242.88 444.62 P
0.2 (. Such a tok) 324.18 444.62 P
0.2 (en w) 376.61 444.62 P
0.2 (ould be required for other lan-) 397.77 444.62 P
(guages with local \336le or module initialization too.) 63.65 431.62 T
0 15 Q
(12.) 63.65 392.95 T
(Optimisations) 90.65 392.95 T
0 12 Q
(12.1) 63.65 357.95 T
(Stac) 90.65 357.95 T
(k allocation) 115.75 357.95 T
2 11 Q
0.28 0.14 (The design of Lisp type languages imply that an) 63.65 340.62 B
0.28 0.14 (y implementation must pro) 284.34 340.62 B
0.28 0.14 (vide a storage management) 407.39 340.62 B
0.28 0.18 (mechanism \050allocator and GC\051. There are def) 63.65 327.62 B
0.28 0.18 (ined functions in the language for allocating objects, b) 271.78 327.62 B
0.28 0.18 (ut) 522.91 327.62 B
0.03 (unlik) 63.65 314.62 P
0.03 (e C or P) 86.15 314.62 P
0.03 (ascal, there is no w) 121.82 314.62 P
0.03 (ay of e) 205.82 314.62 P
0.03 (xplicit deallocating. In general, this is a good idea since calculating) 235.64 314.62 P
0.09 (when an object is no longer required is a comple) 63.65 301.62 P
0.09 (x problem and has been the source of man) 277.88 301.62 P
0.09 (y b) 464.22 301.62 P
0.09 (ugs in man) 477.84 301.62 P
0.09 (y) 526.15 301.62 P
-0.14 (programs. In Lisp, when an object is allocated, it is assumed that it will ha) 63.65 288.62 P
-0.14 (v) 388.07 288.62 P
-0.14 (e an inde\336nite lifetime; the g) 393.4 288.62 P
-0.14 (ar-) 519.44 288.62 P
0.28 0.16 (bage collector guarantees that objects will be freed when the) 63.65 275.62 B
0.28 0.16 (y are no longer needed. W) 342.02 275.62 B
0.28 0.16 (ith modern GC) 463.13 275.62 B
(design the penalty for this can be lo) 63.65 262.62 T
(w) 220.1 262.62 T
(.) 227.33 262.62 T
-0.02 (Of course, there are times when it is easy to kno) 63.65 237.62 P
-0.02 (w an object can be deallocated, and deallocating it as soon) 274.9 237.62 P
0.28 0.14 (as possible reduces memory requirements and possibly GC time. The most common e) 63.65 224.62 B
0.28 0.14 (xample of this is) 455.59 224.62 B
0.28 0.14 (when an object has dynamic e) 63.65 211.62 B
0.28 0.14 (xtent. F) 201.19 211.62 B
0.28 0.14 (or e) 236.08 211.62 B
0.28 0.14 (xample, the object is created on entry to a function, it is pro-) 253.57 211.62 B
0.22 (cessed, and then the object is no longer required at the end of the function. This situation is v) 63.65 198.62 P
0.22 (ery common) 476.14 198.62 P
0.28 0 (in most programming languages and most programs. Sometimes, the compiler can detect that the lifetime) 63.65 185.62 B
0.28 0.13 (of an object has dynamic e) 63.65 172.62 B
0.28 0.13 (xtent) 185.87 172.62 B
2 8.8 Q
0.22 0.13 (2) 208.53 177.02 B
2 11 Q
0.28 0.13 (. In the general case, only the programmer can kno) 213.06 172.62 B
0.28 0.13 (w) 445.11 172.62 B
0.28 0.13 (. T) 452.46 172.62 B
0.28 0.13 (o optimise this) 464.47 172.62 B
63.65 141.95 531.65 154.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 149.95 171.65 149.95 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
(1.  Note that most Lisp code is lik) 63.65 135.95 T
(ely to be in the heap area.) 185.31 135.95 T
0.17 (2.  F) 63.65 122.95 P
0.17 (or e) 80.1 122.95 P
0.17 (xample, the list of ar) 93.87 122.95 P
0.17 (guments created for the &rest parameter will ha) 168.61 122.95 P
0.17 (v) 341.79 122.95 P
0.17 (e dynamic e) 346.15 122.95 P
0.17 (xtent unless the list is passed to a func-) 389.84 122.95 P
(tion which might assign the list to a data structure with a more permanent lifetime.) 63.65 112.95 T
FMENDPAGE
%%EndPage: "21" 25
%%Page: "22" 26
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
(TDF Suppor) 418.74 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
N
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(22) 63.65 84.9 T
2 11 Q
-0.2 (common case, Common Lisp de\336nes a) 63.65 737.62 P
5 F
-0.48 (dynamic-extent) 235.68 737.62 P
2 F
-0.2 ( declaration which the programmer may use to) 328.08 737.62 P
(inform the compiler that the object can be deallocated e) 63.65 724.62 T
(xplicitly if the optimization is a) 308.18 724.62 T
(v) 446.38 724.62 T
(ailable.) 451.61 724.62 T
-0.07 (Harlequin\325) 63.65 699.62 P
-0.07 (s Lisp optimizes allocation which is declared to ha) 110.69 699.62 P
-0.07 (v) 332.35 699.62 P
-0.07 (e dynamic e) 337.68 699.62 P
-0.07 (xtent by allocating the object on) 390.53 699.62 P
0.28 0 (the stack rather than on the heap. All objects on the stack inherently ha) 63.65 686.62 B
0.28 0 (v) 378.73 686.62 B
0.28 0 (e dynamic e) 384.06 686.62 B
0.28 0 (xtent, so this is a lo) 437.62 686.62 B
0.28 0 (w) 523.71 686.62 B
0.28 0 (cost mechanism. The implementation requires the compiler to generate stack allocation code, which must) 63.65 673.62 B
0.28 0.01 (respect an) 63.65 660.62 B
0.28 0.01 (y tagging con) 108.14 660.62 B
0.28 0.01 (v) 168.25 660.62 B
0.28 0.01 (entions for type checking and GC. The g) 173.59 660.62 B
0.28 0.01 (arbage collector must also kno) 354.85 660.62 B
0.28 0.01 (w ho) 490.37 660.62 B
0.28 0.01 (w to) 512.09 660.62 B
0.28 0.08 (handle objects which are encountered on the stack since the) 63.65 647.62 B
0.28 0.08 (y cannot be relocated. In addition, compiled) 332.96 647.62 B
0.19 (code for functions which stack allocate must be able to correctly pop the stack afterw) 63.65 634.62 P
0.19 (ards. Since the stack) 441.27 634.62 P
0.17 (allocated objects can include v) 63.65 621.62 P
0.17 (ariably sized arrays and lists, this is normally a matter of sa) 199.08 621.62 P
0.17 (ving and restor-) 461.65 621.62 P
0.28 0.22 (ing the stack pointer) 63.65 608.62 B
0.28 0.22 (. But if the stack is itself a g) 158.05 608.62 B
0.28 0.22 (arbage collectable object which can mo) 290.45 608.62 B
0.28 0.22 (v) 473.91 608.62 B
0.28 0.22 (e, the stack) 479.47 608.62 B
0.28 0 (pointer must be sa) 63.65 595.62 B
0.28 0 (v) 144.63 595.62 B
0.28 0 (ed as a relati) 149.97 595.62 B
0.28 0 (v) 205.82 595.62 B
0.28 0 (e of) 211.16 595.62 B
0.28 0 (fset from the frame pointer) 227.96 595.62 B
0.28 0 (, since the g) 347.19 595.62 B
0.28 0 (arbage collector will preserv) 400.52 595.62 B
0.28 0 (e) 526.76 595.62 B
0.28 0.01 (the inte) 63.65 582.62 B
0.28 0.01 (grity of the frame pointer) 96.5 582.62 B
0.28 0.01 (. Note that a frame pointer is al) 208.34 582.62 B
0.28 0.01 (w) 347.2 582.62 B
0.28 0.01 (ays used for functions which stack allo-) 355.04 582.62 B
0.28 0.01 (cate, as indeed it is used for all b) 63.65 569.62 B
0.28 0.01 (ut leaf-case functions. This means that v) 209.95 569.62 B
0.28 0.01 (ariables on the stack can al) 389.3 569.62 B
0.28 0.01 (w) 509.12 569.62 B
0.28 0.01 (ays) 516.96 569.62 B
(be addressed e) 63.65 556.62 T
(v) 127.51 556.62 T
(en after allocation on the stack.) 132.85 556.62 T
0.28 0.21 (Stack allocation mak) 63.65 531.62 B
0.28 0.21 (es a v) 160.53 531.62 B
0.28 0.21 (ery dramatic dif) 187.21 531.62 B
0.28 0.21 (ference to the performance of most Lisp programs. A Lisp) 261.08 531.62 B
0.28 0.06 (implementation is free to ignore the) 63.65 518.62 B
5 F
0.66 0.06 (dynamic-extent) 227.46 518.62 B
2 F
0.28 0.06 ( declaration, b) 320.64 518.62 B
0.28 0.06 (ut if optimizations are ne) 384.43 518.62 B
0.28 0.06 (v) 496.7 518.62 B
0.28 0.06 (er per-) 502.09 518.62 B
0.17 (formed for dynamic allocation then the implementation will ne) 63.65 505.62 P
0.17 (v) 341.52 505.62 P
0.17 (er be w) 346.86 505.62 P
0.17 (orth) 379.45 505.62 P
0.17 (y of serious use. Note that this) 397.12 505.62 P
0.12 (is not an optimisation that can be detected automatically in the installer - the producer must indicate when) 63.65 492.62 P
0.07 (dynamic allocation is possible. Ag) 63.65 479.62 P
0.07 (ain, coding this in TDF may be dif) 215.73 479.62 P
0.07 (\336cult since there are no de\336ned stack) 368.1 479.62 P
0.08 (operations. If stack allocation is impossible, it may still be useful to heap allocate the objects b) 63.65 466.62 P
0.08 (ut to ha) 480.78 466.62 P
0.08 (v) 513.72 466.62 P
0.08 (e a) 519.05 466.62 P
0.28 0.19 (specif) 63.65 453.62 B
0.28 0.19 (ic deallocation function, called implicitly from compiled code. This w) 90.42 453.62 B
0.28 0.19 (ould not require an) 414.02 453.62 B
0.28 0.19 (y TDF) 501.6 453.62 B
(e) 63.65 440.62 T
(xtensions, b) 68.37 440.62 T
(ut w) 120.71 440.62 T
(ould lose some of the bene\336ts of stack allocation, as deallocation w) 139.85 440.62 T
(ould be slo) 436.09 440.62 T
(wer) 484.09 440.62 T
(.) 499.97 440.62 T
0 15 Q
(13.) 63.65 401.95 T
(P) 90.65 401.95 T
(or) 100.05 401.95 T
(tability Issues) 115.35 401.95 T
0 12 Q
(13.1) 63.65 366.95 T
(Constants at compile time) 90.65 366.95 T
2 11 Q
0.28 0.14 (TDF can potentially mak) 63.65 349.62 B
0.28 0.14 (e Lisp compiler output portable in a w) 177.81 349.62 B
0.28 0.14 (ay which is impossible using dedicated) 353.18 349.62 B
0.28 0.03 (compilers for each architecture. As with other languages, there is no w) 63.65 336.62 B
0.28 0.03 (ay that TDF can guarantee that all) 379.33 336.62 B
(programs will be portable, and some interesting portability problems arise in Lisp.) 63.65 323.62 T
0.04 (Mostly these problems are also encountered when cross-compiling to a dif) 63.65 298.62 P
0.04 (ferent tar) 391.23 298.62 P
0.04 (get architecture, which) 431.08 298.62 P
0.1 (is an area f) 63.65 285.62 P
0.1 (airly well understood by Harlequin. Compiler technology can help to reduce these problems by) 111.79 285.62 P
0.21 (maintaining a separate en) 63.65 272.62 P
0.21 (vironment for the tar) 175.96 272.62 P
0.21 (get architecture - called the) 267.75 272.62 P
3 F
0.21 (r) 391.31 272.62 P
0.21 (emote en) 395.18 272.62 P
0.21 (vir) 434.36 272.62 P
0.21 (onment) 446.08 272.62 P
2 F
0.21 (. In the case) 478.47 272.62 P
0.28 0.08 (of compilation to TDF) 63.65 259.62 B
0.28 0.08 (, the remote en) 164.51 259.62 B
0.28 0.08 (vironment should contain AN descriptions of constants and an AN) 231.42 259.62 B
0.28 0.22 (object representation, whereas the local en) 63.65 246.62 B
0.28 0.22 (vironment will hold AS descriptions, resolv) 261.06 246.62 B
0.28 0.22 (ed by the TDF) 464.31 246.62 B
(installer itself at load time.) 63.65 233.62 T
0.28 0.12 (The design of Common Lisp mak) 63.65 208.62 B
0.28 0.12 (es it impossible to ensure that the correct en) 216.53 208.62 B
0.28 0.12 (vironment will al) 416.81 208.62 B
0.28 0.12 (w) 495.03 208.62 B
0.28 0.12 (ays be) 502.98 208.62 B
0.14 (used. F) 63.65 195.62 P
0.14 (or e) 95.4 195.62 P
0.14 (xample, consider Common Lisp macro functions, which tak) 112.18 195.62 P
0.14 (e the original form as an ar) 376.72 195.62 P
0.14 (gument,) 495.9 195.62 P
0.25 (and return a modi\336ed form as a result, performing an arbitrary computation in-between. The remote en) 63.65 182.62 P
0.25 (vi-) 519.43 182.62 P
0.28 0.1 (ronment may ha) 63.65 169.62 B
0.28 0.1 (v) 136.92 169.62 B
0.28 0.1 (e a specif) 142.36 169.62 B
0.28 0.1 (ic cop) 184.88 169.62 B
0.28 0.1 (y of a macro function which is designed to produce code for the tar) 212.25 169.62 B
0.28 0.1 (get) 518 169.62 B
-0.21 (en) 63.65 156.62 P
-0.21 (vironment, b) 73.59 156.62 P
-0.21 (ut unfortunately) 129.38 156.62 P
-0.21 (, the macro function itself must run in the host en) 199.03 156.62 P
-0.21 (vironment. This may intro-) 413.11 156.62 P
-0.16 (duce portability problems if the non-portable results of the macro function are inserted into the tar) 63.65 143.62 P
-0.16 (get code.) 492.1 143.62 P
(Harlequin has de) 63.65 130.62 T
(v) 137.91 130.62 T
(eloped a set of guidelines for programmers who wish to a) 143.24 130.62 T
(v) 395.98 130.62 T
(oid these problems.) 401.26 130.62 T
FMENDPAGE
%%EndPage: "22" 26
%%Page: "23" 27
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 780.95 531.65 780.95 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(ESPRIT Pr) 63.65 766.62 T
(oject 6062 OMI/GLUE - D4.2.1) 103.06 766.62 T
( TDF Suppor) 416.52 766.62 T
(t required b) 464.68 766.62 T
(y Lisp) 508.53 766.62 T
63.65 96.95 531.65 96.95 2 L
2 Z
N
0 10 Q
(23) 520.53 84.9 T
2 11 Q
0.15 (There some further problems which may be encountered when the remote machine is architecture neutral.) 63.65 737.62 P
-0.17 (Consider the compilation of a function which contains as a constant a lar) 63.65 724.62 P
-0.17 (ge inte) 381.62 724.62 P
-0.17 (ger) 410.92 724.62 P
-0.17 (. The inte) 424.37 724.62 P
-0.17 (ger is of such a) 465.72 724.62 P
0.28 0.11 (size that on some platforms it w) 63.65 711.62 B
0.28 0.11 (ould appear as an immediate quantity \050i.e. a f) 209.35 711.62 B
0.28 0.11 (ixnum\051, b) 414.7 711.62 B
0.28 0.11 (ut on other plat-) 458.55 711.62 B
0.28 0.12 (forms it must be represented as a pointer \050i.e. a bignum\051. If we assume a function representation where) 63.65 698.62 B
0.01 (constants are stored in a constants v) 63.65 685.62 P
0.01 (ector) 221.21 685.62 P
0.01 (, it seems reasonable to assume that the TDF installer will be able) 242.76 685.62 P
0.28 0 (to determine if a f) 63.65 672.62 B
0.28 0 (ixnum representation is suitable or not, and insert either the inte) 143.02 672.62 B
0.28 0 (ger or a bignum pointer) 426.6 672.62 B
0.28 0.19 (into the constants v) 63.65 659.62 B
0.28 0.19 (ector) 153.33 659.62 B
0.28 0.19 (. Ho) 175.66 659.62 B
0.28 0.19 (we) 195.35 659.62 B
0.28 0.19 (v) 208.28 659.62 B
0.28 0.19 (er) 213.8 659.62 B
0.28 0.19 (, on some architectures it may be appropriate to represent a f) 222.29 659.62 B
0.28 0.19 (ixnum) 502.78 659.62 B
0.28 0.04 (directly in the code stream as an instruction operand. In this case, the inte) 63.65 646.62 B
0.28 0.04 (ger should be omitted from the) 393.13 646.62 B
0.16 (constants v) 63.65 633.62 P
0.16 (ector) 112.83 633.62 P
0.16 (, and the location of all constants located later in the v) 134.38 633.62 P
0.16 (ector should be shuf) 373.63 633.62 P
0.16 (\337ed along by 1.) 462.73 633.62 P
(It may be possible to code this operation in TDF) 63.65 620.62 T
(, b) 275.73 620.62 T
(ut it sounds as though the coding is v) 286.51 620.62 T
(ery comple) 449.52 620.62 T
(x.) 498.53 620.62 T
0 15 Q
(14.) 63.65 581.95 T
(Conc) 90.65 581.95 T
(lusions) 127.85 581.95 T
2 11 Q
0.28 0.06 (W) 63.65 559.62 B
0.28 0.06 (e ha) 73.21 559.62 B
0.28 0.06 (v) 91.52 559.62 B
0.28 0.06 (e seen that the dynamic properties of Lisp require implementation techniques which are not used) 96.92 559.62 B
-0.08 (for compiling static languages lik) 63.65 546.62 P
-0.08 (e C or P) 210.5 546.62 P
-0.08 (ascal. The interaction with the program and the g) 245.85 546.62 P
-0.08 (arbage collector) 461.17 546.62 P
0.28 0.05 (requires that function frames can be found easily on the stack. The requirement for run time checking of) 63.65 533.62 B
0.28 0.13 (ar) 63.65 520.62 B
0.28 0.13 (guments passed to a function suggests a dif) 72.25 520.62 B
0.28 0.13 (ferent calling con) 269.7 520.62 B
0.28 0.13 (v) 349.07 520.62 B
0.28 0.13 (ention from C, and the requirement for) 354.53 520.62 B
0.16 (proper tail recursion optimization probably rules out the use of the C con) 63.65 507.62 P
0.16 (v) 385.89 507.62 P
0.16 (ention. In addition, Lisp has the) 391.23 507.62 P
(ability to dynamically compile and load code, and for code and constants to be independently relocatable.) 63.65 494.62 T
-0.04 (Support for these features will require e) 63.65 469.62 P
-0.04 (xtensions to TDF) 237.97 469.62 P
-0.04 (, either in the form of ne) 313.41 469.62 P
-0.04 (w primiti) 420.12 469.62 P
-0.04 (v) 460.45 469.62 P
-0.04 (es, or by de\336n-) 465.78 469.62 P
-0.16 (ing ne) 63.65 456.62 P
-0.16 (w tok) 90.4 456.62 P
-0.16 (ens. It is hoped that the information in this document will help with deciding e) 114.88 456.62 P
-0.16 (xactly what TDF) 457.42 456.62 P
(e) 63.65 443.62 T
(xtensions are required.) 68.37 443.62 T
0 15 Q
(15.) 63.65 404.95 T
(Ref) 90.65 404.95 T
(erences) 114.66 404.95 T
2 10 Q
([B 92]) 63.65 383.29 T
-0.08 (Da) 117.65 383.29 P
-0.08 (vid Bruce, \322) 129.11 383.29 P
-0.08 (Architecture Neutral Compilation of Common Lisp\323, COO) 176.74 383.29 P
-0.08 (TS w) 412.22 383.29 P
-0.08 (orking paper) 433.42 383.29 P
-0.08 (, DRA Mal-) 483.76 383.29 P
(v) 117.65 371.29 T
(ern, April 1992.) 122.5 371.29 T
([Dylan]) 63.65 353.29 T
(Apple Computer) 117.65 353.29 T
(, \322Dylan an object oriented dynamic language\323, April 1992.) 184.19 353.29 T
([S 90]) 63.65 335.29 T
(Guy L. Steele Jr) 117.65 335.29 T
(., \322Common Lisp The Language, second edition\323, Digital Press, 1990.) 182.09 335.29 T
([TDFspec]) 63.65 317.29 T
(DRA Malv) 117.65 317.29 T
(ern, \322TDF Speci\336cation\323, September 1992) 162.22 317.29 T
FMENDPAGE
%%EndPage: "23" 27
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 27
%%DocumentFonts: Helvetica-Bold
%%+ Times-Bold
%%+ Times-Roman
%%+ Times-Italic
%%+ Courier-Oblique
%%+ Courier
%%EOF
