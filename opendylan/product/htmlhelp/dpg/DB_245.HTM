<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_243.HTM">
<LINK REL=PREV HREF="DB_244.HTM">
<LINK REL=NEXT HREF="DB_246.HTM">
<TITLE>15.2   Objects that model an airport</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING245></A>

<DIV>
<P><A HREF="DB_246.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_244.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING245-0></A>
<H1>15.2   Objects that model an airport</H1>
<P> We need to define classes that represent the objects in Figures <A HREF="DB_244.HTM#MARKER-9-673">15.1</A> and <A HREF="DB_244.HTM#MARKER-9-674">15.2</A>. Note that the application displays information about the path of an aircraft from gate to sky and sky to gate; the aircraft stops at the gate and does not enter the terminal itself. Therefore, we do not need to define a terminal class. Our design includes these airport classes: </P>
<PRE>
&lt;airport&gt;<EM>,</EM> &lt;gate&gt;<EM>,</EM> &lt;taxiway&gt;<EM>,</EM> &lt;runway&gt;<EM>,</EM> &lt;sky&gt;<EM>,</EM> &lt;vehicle&gt;<EM>,</EM> &lt;aircraft&gt;
</PRE>
<P> A vehicle is any object that is self-propelled. Aircraft are vehicles that are capable of flying. In our design, the sky around the airport, the gates, the taxiways, and the runways each keep track of each aircraft as the latter moves from the sky to the gate and back to the sky again. One common attribute of the sky, gates, taxiways, and runways is that each of them can hold an aircraft, or more than one aircraft. Because these objects can hold vehicles, we can think of them as containers. Our design uses this class to represent all types of containers: </P>
<PRE>
&lt;vehicle-storage&gt;
</PRE>
<P> In our design, containers are connected to other containers. In the airport diagram in <A HREF="DB_244.HTM#MARKER-9-673">Figure 15.1</A>, gate A1 is connected to taxiway Echo, which is connected to runway 11R-29L. We can use a slot in the <CODE>&lt;vehicle-storage&gt;</CODE> class to model these connections. </P>
<P>Since some containers can hold only one aircraft, whereas other containers have more complex behavior, our design includes two subclasses of <CODE>&lt;vehicle-storage&gt;</CODE>:</P>
<PRE>
&lt;single-storage&gt;<EM>,</EM> &lt;multiple-storage&gt;
</PRE>
<P> Instances of <CODE>&lt;single-storage&gt;</CODE> may hold a single aircraft regardless of the direction of travel. Instances of <CODE>&lt;multiple-storage&gt;</CODE> may hold more than one aircraft, and each direction is treated separately. For example, <CODE>&lt;gate&gt;</CODE> is a subclass of <CODE>&lt;single-storage&gt;</CODE>, and <CODE>&lt;sky&gt;</CODE> is a subclass of <CODE>&lt;multiple-storage&gt;</CODE>.</P>
<P>All subclasses of <CODE>&lt;vehicle-storage&gt;</CODE> must comply with the vehicle-storage protocol. In particular, designers of <CODE>&lt;vehicle-storage&gt;</CODE> subclasses must ensure that the subclasses either inherit or define methods for all the key vehicle-storage generic functions.</P>
<P>Certain classes -- such as the time and position classes -- represent intangible concepts. Other classes -- such as airports, gates, runways, and aircraft -- represent physical objects. It may be useful to make that distinction in our classes, so we define a class from which all physical objects inherit:</P>
<PRE>
&lt;physical-object&gt;
</PRE>
<P> </P>
<TABLE BORDER=1><CAPTION><P>Figure 15.3   <A NAME=MARKER-9-675></A>Inheritance relationships among classes that represent physical objects.</P>
</CAPTION><TR VALIGN=TOP><TD><P> <IMG ALIGN=TOP SRC=DB24IM28.GIF></P>
</TD></TR></TABLE><P> Figure <A HREF="#MARKER-9-675">15.3</A> shows the inheritance relationships among the classes that represent physical objects. </P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_246.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_244.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
