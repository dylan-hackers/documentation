<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_285.HTM">
<LINK REL=PREV HREF="DB_286.HTM">
<LINK REL=NEXT HREF="DB_288.HTM">
<TITLE>18.3.2   More complicated class precedence lists</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING287></A>

<DIV>
<P><A HREF="DB_288.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_286.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING287-0></A>
<H1>18.3.2   More complicated class precedence lists</H1>
<P> </P>
<P> Sometimes, more than one class precedence list is consistent with the procedure that we have outlined so far. Suppose, for example, that we had defined two additional classes, <CODE>&lt;wheeled-vehicle&gt;</CODE> and <CODE>&lt;winged-vehicle&gt;</CODE>, with the class relations illustrated in <A HREF="#MARKER-9-724">Figure 18.3</A>.</P>
<TABLE BORDER=1><CAPTION><P>Figure 18.3   <A NAME=MARKER-9-724></A>Expanded graph of vehicle classes that use multiple inheritance.</P>
</CAPTION><TR VALIGN=TOP><TD><PRE>
<IMG ALIGN=TOP SRC=DB28IM31.GIF>
</TD></TR></TABLE></PRE>
<P> </P>
<P> Let's assume that the <CODE>define class</CODE> form for <CODE>&lt;aircraft&gt;</CODE> lists <CODE>&lt;winged-vehicle&gt;</CODE> before <CODE>&lt;wheeled-vehicle&gt;</CODE> in its list of direct superclasses. Now, three class precedence lists for <CODE>&lt;B707&gt;</CODE> are consistent with the procedures that we have discussed so far:</P>
<PRE>
&lt;B707&gt;, &lt;commercial-aircraft&gt;, &lt;aircraft&gt;, &lt;winged-vehicle&gt;,
  &lt;flying-vehicle&gt;, &lt;wheeled-vehicle&gt;, &lt;ground-vehicle&gt;, &lt;vehicle&gt;,   &lt;physical-object&gt;, &lt;object&gt;
&lt;B707&gt;, &lt;commercial-aircraft&gt;, &lt;aircraft&gt;, &lt;winged-vehicle&gt;,
  &lt;wheeled-vehicle&gt;, &lt;flying-vehicle&gt;, &lt;ground-vehicle&gt;, &lt;vehicle&gt;,   &lt;physical-object&gt;, &lt;object&gt;
&lt;B707&gt;, &lt;commercial-aircraft&gt;, &lt;aircraft&gt;, &lt;winged-vehicle&gt;,
  &lt;wheeled-vehicle&gt;, &lt;ground-vehicle&gt;, &lt;flying-vehicle&gt;, &lt;vehicle&gt;,   &lt;physical-object&gt;, &lt;object&gt;
</PRE>
<P> In this case, Dylan uses an algorithm that tends to keep together, in the class precedence list, nonoverlapping superclass-to-subclass chains.</P>
<P>Look at this situation another way: The algorithm Dylan uses to construct the class precedence list in effect builds the list one class at a time, from highest to lowest precedence. The class precedence list under construction for <CODE>&lt;B707&gt;</CODE> is unambiguous from <CODE>&lt;B707&gt;</CODE> through <CODE>&lt;winged-vehicle&gt;</CODE>. At that point, Dylan could insert either <CODE>&lt;flying-vehicle&gt;</CODE> or <CODE>&lt;wheeled-vehicle&gt;</CODE> into the list. It chooses the class that has a <I>direct subclass rightmost</I> in the partial class precedence list that it has already constructed. In this case, <CODE>&lt;flying-vehicle&gt;</CODE> has a direct subclass <CODE>&lt;winged-vehicle&gt;</CODE>, and <CODE>&lt;wheeled-vehicle&gt;</CODE> has a direct subclass <CODE>&lt;aircraft&gt;</CODE>. Because <CODE>&lt;winged-vehicle&gt;</CODE> is rightmost in the partial list already constructed, Dylan chooses <CODE>&lt;flying-vehicle&gt;</CODE> as the next entry in the list. Once that decision has been made, the resulting class precedence list must be the first of the three possible orderings that we listed:</P>
<PRE>
&lt;B707&gt;, &lt;commercial-aircraft&gt;, &lt;aircraft&gt;, &lt;winged-vehicle&gt;,
  &lt;flying-vehicle&gt;, &lt;wheeled-vehicle&gt;, &lt;ground-vehicle&gt;, &lt;vehicle&gt;,   &lt;physical-object&gt;, &lt;object&gt;
</PRE>
<P> Note that it is not always possible to compute a class precedence list. Consider the three classes defined as follows:</P>
<PRE>
define class &lt;a&gt; (&lt;object&gt;)
  ...
end class &lt;a&gt;;
define class &lt;b&gt; (&lt;a&gt;)
  ...
end class &lt;b&gt;;
define class &lt;c&gt; (&lt;a&gt;, &lt;b&gt;)
  ...
end class &lt;c&gt;;
</PRE>
<P> No class precedence list is possible for class <CODE>&lt;c&gt;</CODE> in this example, because the ordering of classes <CODE>&lt;a&gt;</CODE> and <CODE>&lt;b&gt;</CODE> conflicts in the local precedence lists for classes <CODE>&lt;b&gt;</CODE> and <CODE>&lt;c&gt;</CODE>. Dylan signals an error when it tries to compute a class precedence list and finds that it cannot do so.</P>
<P>To examine the class precedence list for a class, we use the <A NAME=MARKER-2-738></A><CODE>all-superclasses</CODE> function, which returns the class and its superclasses in the same order as they appear in the class precedence list:</P>
<PRE>
<I>? </I>all-superclasses (&lt;B707&gt;)
<I>#[{class &lt;B707&gt;}, {class &lt;commercial-aircraft&gt;}, {class &lt;aircraft&gt;},
  {class &lt;winged-vehicle&gt;}, {class &lt;flying-vehicle&gt;},
  {class &lt;wheeled-vehicle&gt;},{class &lt;ground-vehicle&gt;}, {class &lt;vehicle&gt;},   {class &lt;physical-object&gt;}, {class &lt;object&gt;}]</I>
</PRE>
<P> The details of the algorithm that Dylan uses to construct class precedence lists are complicated, and are beyond the scope of this book. For most uncomplicated uses of simple inheritance, the most important points to remember about the class precedence list are that the list of direct superclasses in a <CODE>define class</CODE> form is ordered, and each direct superclass in the list takes precedence over all direct superclasses that appear later in the list. In general, if more than one superclass defines a behavior, the subclass behaves most like the first superclass in its class precedence list that defines that behavior.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_288.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_286.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
