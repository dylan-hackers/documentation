<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_217.HTM">
<LINK REL=PREV HREF="DB_218.HTM">
<LINK REL=NEXT HREF="DB_220.HTM">
<TITLE>13.9.2   The say implementation file</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING219></A>

<DIV>
<P><A HREF="DB_220.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_218.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING219-0></A>
<H1>13.9.2   The <EM>say</EM> implementation file</H1>
<P> </P>
<TABLE BORDER=1><TR VALIGN=TOP><TH><P> The <CODE>say</CODE> implementation file: <CODE>say.dylan</CODE>.</P>
</TH></TR><TR VALIGN=TOP><TD><PRE>
Module: say-implementation
define open generic say (object :: &lt;object&gt;) =&gt; ();
</TD></TR></TABLE></PRE>
<P> </P>
<P> Here, we have created the recommended interface and implementation structure, having learned our lesson with the <CODE>sixty-unit</CODE> module. Even though it looks like overkill to have a separate implementation module for a single generic function definition, we have planned for future expansion. </P>
<P>The <CODE>say</CODE> protocol library is an example of the multiple-interface capability of Dylan libraries. The <CODE>say</CODE> library has two interfaces that it makes available: <CODE>say</CODE> defines the <CODE>say</CODE> protocol, and <CODE>say-implementor</CODE> provides the substrate for protocol implementors. This interface is cleaner than the one that we used for <CODE>sixty-unit</CODE>, where <CODE>encode-total-seconds</CODE> played more of an interface role, and <CODE>&lt;sixty-unit&gt;</CODE> and <CODE>decode-total-seconds</CODE> played more of a substrate role. The result is seen in the clients of the <CODE>sixty-unit</CODE> library, who must split out these roles for themselves.</P>
<P>Note that the <CODE>say-implementor</CODE> module is both a client and an interface module. It is the interface of the <CODE>say</CODE> protocol for clients who will implement <CODE>say</CODE> methods, and it is a client of the <CODE>format-out</CODE> module. Because most <CODE>say</CODE> methods use <CODE>format-out</CODE> in their implementations, it makes sense to re-export all of the <CODE>format-out</CODE> module for <CODE>say-implementor</CODE> clients. </P>
<P>The explicit definition of the <CODE>say</CODE> generic function is good protocol documentation. It is also required: All module variables must have a definition for a library to be complete. (An alternative would have been to define a default method for <CODE>say</CODE>, which would also create an implicit generic-function definition. However, implicit generic-function definitions are <B>sealed</B>, and, for a protocol, we need an <B>open</B> generic function, because we intend clients to add methods to it. The exact implications of this declaration are discussed in <A HREF="DB_295.HTM#MARKER-9-761">Chapter 19</A>, <BR><I>Performance and Flexibility</I>.) The designer of the <CODE>say</CODE> protocol still has to choose whether to require each type to define its own <CODE>say</CODE> method, or to provide a universal default. In this case, we choose not to provide a default, so that an error will be signaled if <CODE>say</CODE> is called on a type that does not either provide or inherit a <CODE>say</CODE> method.</P>
<P> </P>
<TABLE BORDER=1><TR VALIGN=TOP><TD><P> <B>Comparison wit<A NAME=MARKER-2-584></A>h C++:</B> Dylan modules enforce a structured design of protocols. To create a shared protocol, to which methods can be added from independent libraries, we must ensure that the module defining the protocol (the module defining the generic function) is defined first, in a separate, common library. The common library defines the protocol in one place, easing documentation and maintenance.</P>
<P>In C++ however, a <CODE>using</CODE> directive can create a local alias to overload a function in any other library, even if it is in another namespace.</P>
<P>The library-use relationships of Dylan modules form a directed graph, centralizing shared functionality, whereas C++ namespaces can be interconnected arbitrarily, making documentation and maintenance of shared protocols difficult.</P>
</TD></TR></TABLE><P> </P>
<P> </P>
<P> To complete our restructuring, we must reorganize the <CODE>time</CODE> library and module files to use the <CODE>say</CODE> protocol, so that the <CODE>say</CODE> protocol is shared with the <CODE>angle</CODE> library that we intend to build.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_220.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_218.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
