<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_24.HTM">
<LINK REL=PREV HREF="DB_25.HTM">
<LINK REL=NEXT HREF="DB_27.HTM">
<TITLE>2.3.2   Variables that have type constraints</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING26></A>

<DIV>
<P><A HREF="DB_27.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_25.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING26-0></A>
<H1>2.3.2   Variables that have type constraints</H1>
<P> We defined the variables <CODE>*my-number*</CODE> and <CODE>*your-number*</CODE> without giving a <A NAME=MARKER-2-76></A><B>type constraint</B> on the variables. Thus, we can store any type of value in these variables. For example, here we use the <A NAME=MARKER-2-77></A>assignment operator, <A NAME=MARKER-2-78></A><CODE>:=</CODE> , to store strings in these variables:</P>
<PRE>
<I>? </I>*my-number* := &quot;seven&quot;;
<I>&quot;seven&quot;</I>
<I>? </I>*your-number* := &quot;twelve&quot;;
<I>&quot;twelve&quot;</I>
</PRE>
<P> What happens if we try to add the string values stored in these variables?</P>
<PRE>
<I>? </I>*my-number* + *your-number*;
<I>ERROR: No applicable method for + with arguments (&quot;seven&quot;, &quot;twelve&quot;)</I>
</PRE>
<P> Dylan signals an error because the <CODE>+</CODE> function does not know how to operate on string arguments. </P>
<P> </P>
<TABLE BORDER=1><TR VALIGN=TOP><TD><P> <B>Environment note: </B>The Dylan implementation defines the exact wording of error messages, and what happens when an error is signaled. If your implementation opens a Dylan debugger when an error is signaled, you now have an opportunity to experiment with the debugger!</P>
</TD></TR></TABLE><P> </P>
<P> We can redefine the variables to include a type constraint, which ensures that the variables can hold only numbers. We specify that <CODE>*my-number*</CODE> can hold any integer, and that <CODE>*your-number*</CODE> can hold a single-precision floating-point number: </P>
<PRE>
<I>?</I> define variable *my-number* :: &lt;integer&gt; = 7;
<I>?</I> define variable *your-number* :: &lt;single-float&gt; = 12.01;
</PRE>
<P> What happens if we try to store a string in one of the variables?</P>
<PRE>
<I>? </I>*my-number* := &quot;seven&quot;;
<I>ERROR: The value assigned to *my-number* must be of type &lt;integer&gt;</I>
</PRE>
<P> Both <CODE>&lt;integer&gt;</CODE> and <CODE>&lt;single-float&gt;</CODE> are <B>classes. </B>For now, you can think of a class as being like a datatype in another language. Dylan provides a set of built-in classes, and you can also define new classes.</P>
<P> </P>
<TABLE BORDER=1><TR VALIGN=TOP><TD><P> <B><A NAME=MARKER-2-36></A>Convention: </B>Class names start with an open angle bracket and end with a close angle bracket -- for example, <CODE>&lt;integer&gt;</CODE>. The angle brackets are part of the name, and do not have any special behavior.</P>
</TD></TR></TABLE><P> </P>
<P> The <CODE>+</CODE> function can operate on numbers of different types:</P>
<PRE>
<I>? </I>*my-number* + *your-number*;
<I>19.01</I>
</PRE>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_27.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_25.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
