<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_84.HTM">
<LINK REL=PREV HREF="DB_84.HTM">
<LINK REL=NEXT HREF="DB_86.HTM">
<TITLE>6.1   Methods for the + generic function</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING85></A>

<DIV>
<P><A HREF="DB_86.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_84.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING85-0></A>
<H1>6.1   <A NAME=MARKER-9-243></A>Methods fo<A NAME=MARKER-2-244></A>r the <CODE>+</CODE> generic function</H1>
<P> We need to make it possible to add one time to another. We could define a method with a name such as <CODE>add</CODE> or <CODE>plus</CODE>. However, the concept of adding times is the same as the concept of adding numbers. Dylan already provides the + generic function for adding numbers. Instead of inventing a new name for the addition operation, we define new methods on the built-in generic function <CODE>+</CODE>. We can extend <CODE>+</CODE> by defining new methods for it. In certain languages, this technique is called <A NAME=MARKER-2-245></A><B>operator overloading</B>.</P>
<P> </P>
<TABLE BORDER=1><TR VALIGN=TOP><TD><P> <B>Comparison with <A NAME=MARKER-2-235></A>C++ and Java:</B> In C++, operator overloading means customizing the action of any built-in operator for classes that you define. In Dylan, operators are just generic functions, and you can add methods to those generic functions for your classes. In C++, the meaning of an overloaded operator is resolved at compile time -- the types of the operands must be known at compile time. Because Dylan operators are generic functions, the method is chosen dynamically according to the argument types --at run time, if the types may vary at run time.</P>
<P>Java does not allow operator overloading. The Java designers believe that overloading of operators results in inscrutable code (because the meaning of the operator can vary). Dylan and C++ designers believe that, judiciously used, operator overloading permits clearer, more concise code. </P>
</TD></TR></TABLE><P> </P>

</DIV>

<DIV>

<DIV>

<!-- TOC --><DL>
<DL>
<DT><A REL=BELOW HREF="DB_86.HTM#HEADING86-0"><B>6.1.1  </B> - Method for adding two time offsets</A>
<DD>
<DT><A REL=BELOW HREF="DB_87.HTM#HEADING87-0"><B>6.1.2  </B> - Methods for adding a time of day to a time offset</A>
<DD>
<DT><A REL=BELOW HREF="DB_88.HTM#HEADING88-0"><B>6.1.3  </B> - Method for adding other kinds of times</A>
<DD>
</DL>
</DL>


</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_86.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_84.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
