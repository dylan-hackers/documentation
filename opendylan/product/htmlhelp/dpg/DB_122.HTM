<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_120.HTM">
<LINK REL=PREV HREF="DB_121.HTM">
<LINK REL=NEXT HREF="DB_123.HTM">
<TITLE>10.2   Getters and setters for slots</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING122></A>

<DIV>
<P><A HREF="DB_123.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_121.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING122-0></A>
<H1>10.2   <A NAME=MARKER-9-324></A>Gett<A NAME=MARKER-2-325></A>ers and setters for slots</H1>
<P> As shown in <A HREF="DB_51.HTM#MARKER-9-167">Section 4.4, page 42</A>, when you define a class, Dylan automatically defines a getter method to return the value of a slot, and defines a setter method to change the value of a slot.</P>
<TABLE BORDER=1><TR VALIGN=TOP><TD><P> <B>Performance note:</B> <A NAME=MARKER-2-316></A>For slot accesses, given accurate type declarations, the compiler can typically optimize away not only the method dispatch, but also the function call, making the executed code just as efficient as it would be in a language such as C, where structure or record slots are accessed directly. See <A HREF="DB_295.HTM#MARKER-9-761">Chapter 19,  <I>Performance and Flexibility</I></A>.</P>
</TD></TR></TABLE><P> </P>
<P> The name of the getter is always the name of the slot. Thus, the getter for the <CODE>total-seconds</CODE> slot is <CODE>total-seconds</CODE>. Let's look at an example of calling a getter. The first expression is an abbreviation for the second expression:</P>
<PRE>
*my-time-of-day*.total-seconds;
total-seconds(*my-time-of-day*);
</PRE>
<P> The preceding expressions are calls to the getter function named <CODE>total-seconds</CODE>. The choice of which syntax to use is purely a matter of personal style. The first syntax is provided for those people who prefer the slightly more concise dot syntax. The second syntax is provided for those people who prefer slot accesses to look like function calls. In this book, we use the dot syntax.</P>
<P>By default, the name of the setter is the slot's name followed by <CODE>-setter</CODE>. Thus, the setter for the <CODE>total-seconds</CODE> slot is <CODE>total-seconds-setter</CODE>. You can use the <CODE>:setter</CODE> slot option to specify a different name for the setter. </P>
<P>The dot-syntax abbreviation for assignment enables you to invoke the setter by using assignment with the name of the getter. For example, the first two expressions are abbreviations for the third expression:</P>
<PRE>
*my-time-of-day*.total-seconds := 180;
total-seconds(*my-time-of-day*) := 180;
total-seconds-setter(180, *my-time-of-day*);
</PRE>
<P> Each of these expressions stores the value <CODE>180</CODE> in the slot named <CODE>total-seconds</CODE> of the object that is the value of the <CODE>*my-time-of-day*</CODE> variable. </P>
<P>Most Dylan programmers do not use the syntax of the third expression to call a setter, because it is more verbose than the first and second expressions. However, it is important to know the name of the setter, so that you can define setter methods. For example, to define a method on the setter for the <CODE>total-<BR>seconds</CODE> slot, you define it on <CODE>total-seconds-setter</CODE>. For an example of a setter method, see <A HREF="DB_124.HTM#MARKER-9-327">Section 10.2.2</A>.</P>
<P>If you do not want Dylan to define a setter method for a slot, you can define the slot to be constant, using the <CODE>constant</CODE> slot adjective, or you can give the <CODE>:setter #f</CODE> slot option. </P>
<P>For more information about accessing slots, see <A HREF="DB_169.HTM#MARKER-9-452">Section 12.1.2, page 163</A>, and <A HREF="DB_173.HTM#MARKER-9-492">Section 12.1.6, page 166</A>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC --><DL>
<DL>
<DT><A REL=BELOW HREF="DB_123.HTM#HEADING123-0"><B>10.2.1  </B> - Advantages of accessing slots via generic functions</A>
<DD>
<DT><A REL=BELOW HREF="DB_124.HTM#HEADING124-0"><B>10.2.2  </B> - Setter methods</A>
<DD>
<DT><A REL=BELOW HREF="DB_125.HTM#HEADING125-0"><B>10.2.3  </B> - Considerations for naming slots and other objects</A>
<DD>
</DL>
</DL>


</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_123.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_121.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
