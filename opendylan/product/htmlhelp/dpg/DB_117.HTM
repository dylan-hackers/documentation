<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_113.HTM">
<LINK REL=PREV HREF="DB_116.HTM">
<LINK REL=NEXT HREF="DB_118.HTM">
<TITLE>9.3.4   Method dispatch and limited integers</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING117></A>

<DIV>
<P><A HREF="DB_118.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_116.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING117-0></A>
<H1>9.3.4   <A NAME=MARKER-9-306></A>Method <A NAME=MARKER-2-307></A>dispatch and limited integers</H1>
<P> When a type is a limited-integer<A NAME=MARKER-2-308></A> type, Dylan uses the following rules:</P>
<P>1.  An object is an instance of a limited-integer type if it is an instance of <BR><CODE>&lt;integer&gt;</CODE> and if it is (inclusively) within the specified range.</P>
<P>2.  A limited-integer type is a proper subtype of <CODE>&lt;integer&gt;</CODE>, as long as it is not equivalent to <CODE>&lt;integer&gt;</CODE>.</P>
<P>One limited-integer type is a proper subtype of another limited-integer type if the range of the first type is entirely within the range of the second type, and if the two types are not equivalent.</P>
<P> For example, suppose that we have these definitions:</P>
<PRE>
define constant &lt;nonnegative-integer&gt; = limited(&lt;integer&gt;, min: 0);
<I>// Method 1
</I>define method say (x :: &lt;integer&gt;) ... end method say;
<I>// Method 2
</I>define method say (x :: &lt;nonnegative-integer&gt;) ... end method say;
</PRE>
<P> Now, if <CODE>say</CODE> is called with an argument of <CODE>1</CODE>, both methods are applicable, and method 2 is more specific than method 1. If <CODE>say</CODE> is called with an argument of <CODE>-1</CODE>, only method 1 is applicable.</P>
<P>Now suppose that, instead, we have the following definitions:</P>
<PRE>
define constant &lt;limited-integer-1&gt; = limited(&lt;integer&gt;, min: -2, max: 2);
define constant &lt;limited-integer-2&gt; = limited(&lt;integer&gt;, min: 0, max: 4);
<I>// Method 1
</I>define method say (x :: &lt;limited-integer-1&gt;) ... end method say;
<I>// Method 2
</I>define method say (x :: &lt;limited-integer-2&gt;) ... end method say;
</PRE>
<P> Now, if <CODE>say</CODE> is called with an argument of <CODE>1</CODE>, both methods are applicable, and neither method is more specific than the other; the two methods are <B>ambiguous</B>. If no more specific method exists, Dylan signals an error when we call <CODE>say</CODE> with an argument of <CODE>1</CODE>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_118.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_116.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
