<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_182.HTM">
<LINK REL=PREV HREF="DB_186.HTM">
<LINK REL=NEXT HREF="DB_188.HTM">
<TITLE>12.3.5   Operations on functions</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING187></A>

<DIV>
<P><A HREF="DB_188.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_186.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING187-0></A>
<H1>12.3.5   Operations on functions</H1>
<P> Dylan has several functions<A NAME=MARKER-2-565></A> that take functions as arguments, and return new functions that are transformations of those arguments. These operations permit many kinds of composition of functions and other objects to generate new <BR>functions.</P>
<P>Three of these functions take predicates as arguments, and return the complement, disjunction, or conjunction of the predicates. For example, <CODE>complement<A NAME=MARKER-2-566></A></CODE> takes a predicate and returns the latter's complement -- a function that returns <CODE>#t</CODE> when the original predicate would have returned <CODE>#f</CODE>, and otherwise returns <CODE>#f</CODE>.</P>
<P>The <CODE>curry<A NAME=MARKER-2-567></A></CODE> function takes a function and any number of additional arguments. It returns a new function that applies the original function, first to the additional arguments to <CODE>curry</CODE>, then to the arguments to the new function. In <A HREF="DB_152.HTM#MARKER-9-410">Section 11.3.7, page 147</A>, we call <CODE>curry</CODE> with <CODE>\*</CODE> and a number to return a function that multiplies that function's argument by the given number. We then map this new function over the elements of a vector to perform a scalar multiplication of the vector.</P>
<P>In fact, Dylan has a set of functions that map other functions over the elements of collections in different ways. We used one of these, <CODE>choose</CODE>, in <A HREF="DB_185.HTM#MARKER-9-554">Section 12.3.3, page 181</A>. Some of these functions return new collections; others return single values. For more examples, see <A HREF="DB_145.HTM#MARKER-9-394">Section 11.3, page 142</A>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_188.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_186.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
