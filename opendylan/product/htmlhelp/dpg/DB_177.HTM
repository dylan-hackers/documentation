<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_174.HTM">
<LINK REL=PREV HREF="DB_176.HTM">
<LINK REL=NEXT HREF="DB_178.HTM">
<TITLE>12.2.3   Parameter lists</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING177></A>

<DIV>
<P><A HREF="DB_178.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_176.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING177-0></A>
<H1>12.2.3   <A NAME=MARKER-9-514></A>Parameter lists</H1>
<P> A function's parameter list<A NAME=MARKER-2-515></A> is specified in the function definition. (If Dylan implicitly defines a function, such as the getter and setter functions for a slot, Dylan also defines the parameter list for that function.) In a function definition, the parameter list follows the function name and consists of zero or more parameter specifications, separated by commas and enclosed in parentheses. A parameter list can have three kinds of parameters:</P>
<P>1.  <B>Required parameters<A NAME=MARKER-2-516></A></B> specify required arguments, or arguments that must be supplied when the function is called. All required parameters appear before other kinds of parameters in the parameter list.</P>
<P>2.  A function can have at most one <B>rest parameter<A NAME=MARKER-2-517></A></B>, which allows the function to accept a variable number of arguments. The rest parameter is identified in the parameter list by <CODE>#r<A NAME=MARKER-2-518></A>est</CODE> followed by the name of the parameter. When the function is called, all arguments that follow the required arguments are put into a sequence. This sequence is the initial value of the rest parameter in the function body.</P>
<P>3.  <B>Keyword parameters<A NAME=MARKER-2-519></A></B> specify optional keyword arguments. In the parameter list, keyword parameters are identified by <CODE>#k<A NAME=MARKER-2-520></A>ey</CODE> followed by the names of the parameters (and possibly by other information). Keyword parameters must follow all required parameters and the rest parameter (if any). When the function is called, the caller can supply any or none of the specified keyword arguments, in any order, after supplying all required arguments. The caller supplies each keyword argument as a symbol (usually in the form of the parameter name followed by a colon), followed by the argument value. This argument is the initial value of the corresponding keyword parameter in the function body.</P>
<P> </P>
<P> The specification for each parameter in the parameter list includes the name of the parameter. In addition, a required parameter (or, for a method, a keyword parameter) can be <B>specialized<A NAME=MARKER-2-521></A></B> to correspond to an argument of a given type. The type specializer follows the parameter name and is identified by <CODE>::</CODE> followed by a type. When the function is called, the argument that corresponds to the parameter must be of the specified type, or Dylan signals an error. The default argument type is <CODE>&lt;object&gt;</CODE>.</P>
<P>The specification for a keyword parameter can have two additional pieces of information:</P>
<P>1.  It may include a keyword for the caller to use in its argument list, if this keyword must be different from the parameter name. The keyword precedes the parameter name in the parameter list.</P>
<P>2.  It may include a default value for the keyword argument, which is used if the caller does not supply that argument. The default expression appears <BR>at the end of the parameter specification, followed by <CODE>=</CODE>. If no default <BR>expression is supplied and the caller does not supply the keyword argument, the argument's value is <CODE>#f</CODE>.</P>
<P> The following example shows how we could use a rest parameter to implement a function to sum an arbitrary number of values:</P>
<PRE>
<I>// Sum one or more values
</I>define method sum (value, #rest more-values)
  for (next in more-values)
    value := value + next;
  end for;
  value;
end method sum;
<I>? </I>sum(3);
<I>3</I>
<I>? </I>sum(1, 2, 3, 4, 5);
<I>15</I>
</PRE>
<P> In the preceding example, the <CODE>for</CODE> iteration statement performs the addition once for every element of <CODE>more-values</CODE>.</P>
<P>The following example shows how we could use keyword parameters in defining a method similar to <CODE>encode-total-seconds</CODE>:</P>
<PRE>
<I>// Convert days, hours, minutes, and seconds to seconds.
// Named (keyword) arguments are optional
</I>define method convert-to-seconds 
    (#key hours :: &lt;integer&gt; = 0, minutes :: &lt;integer&gt; = 0,
     seconds :: &lt;integer&gt; = 0) =&gt; (seconds :: &lt;integer&gt;)
  ((hours * 60) + minutes) * 60 + seconds;
end method convert-to-seconds;
<I>? </I>convert-to-seconds(minutes: 3, seconds: 9);
<I>189</I>
<I>? </I>convert-to-seconds(minutes: 1, hours: 2);
<I>7260</I>
</PRE>
<P> Note from the preceding example that we can supply keyword arguments in any order. Note also that all keyword arguments are optional; however, if we try to call a function with a keyword argument that the function does not accept -- such as <CODE>days:</CODE>, in this example -- Dylan signals an error. For more information on function calls and keyword arguments, see <A HREF="DB_181.HTM#MARKER-9-536">Section 12.2.7, page 178</A>.</P>
<P>Following are additional features and restrictions of keyword arguments<A NAME=MARKER-2-522></A>:</P>
<UL>
<LI><P>If a parameter list ends with <CODE>#all-keys<A NAME=MARKER-2-523></A></CODE> following <CODE>#key</CODE>, the function accepts (but ignores) any keyword argument. A parameter list can have specific keyword parameters and also end with <CODE>#all-keys</CODE>. In this case, the function accepts any keyword argument, and also has local variables whose values are the keyword-argument values (or their defaults) that correspond to the keyword parameters.</P>
<LI><P>If the parameter list of a method contains both <CODE>#rest<A NAME=MARKER-2-524></A></CODE> and <CODE>#key<A NAME=MARKER-2-525></A></CODE>, the sequence that is the value of the rest parameter contains alternating symbols and argument values representing the keyword arguments passed to the function. In this case, <I>all</I> optional arguments must be keyword arguments. A generic function's parameter list can have either <CODE>#rest</CODE> or <CODE>#key</CODE>, but cannot have both.</P>
<LI><P>Keyword parameters for a generic function cannot be specialized.</P>
</UL>
<P> The restrictions on a generic function's parameter list have to do with parameter-list congruency and keyword-argument checking in generic function calls. For more information, see Sections <A HREF="DB_179.HTM#MARKER-9-529">12.2.5</A> and <A HREF="DB_181.HTM#MARKER-9-536">12.2.7</A>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_178.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_176.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
