<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=PREV HREF="DB_347.HTM">
<LINK REL=NEXT HREF="DB_349.HTM">
<TITLE>Glossary </TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING348></A>

<DIV>
<P><A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_347.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>Dylan Programming</P>

</DIV>
<A NAME=LINK-glossary-firstpage></A><A NAME=HEADING348-0></A>
<H1> </H1>
<DL>
<DL>
<DT><B>abstract class</B><DD>
<P>A class that cannot have direct instances. To define an abstract class, you provide the <CODE>abstract</CODE> class adjective in the <CODE>define class</CODE> form. All superclasses of an abstract class must also be abstract.</P>
<DT><B>allocation</B><DD>
<P>The allocation of a slot determines where the storage for the slot's value is allocated, and determines which instances share the value of the slot. There are four kinds of allocation: instance, class, each-subclass, and virtual.</P>
<DT><B>ambiguous methods</B><DD>
<P>Methods that cannot be ordered as more specific or less specific than one another, in the method dispatch.</P>
<DT><B>assignment</B><DD>
<P>The act of setting the value of an existing variable or slot, or of setting an element of a collection. The assignment operator is <CODE>:=</CODE>.</P>
<DT><B>binding</B><DD>
<P>An association between a name and an object. For example, there is a binding that associates the name of a constant and the object that is the value of the constant. The names of functions, module variables, and local variables are also bindings. </P>
<DT><B>body</B><DD>
<P>A region of program code that delimits the scope of all local variables declared inside it. Bodies can be nested. An body is begun implicitly with <CODE>define method</CODE>, and is ended by the corresponding <CODE>end</CODE>. You can define a body explicitly by using <CODE>begin</CODE> to start it and <CODE>end</CODE> to finish it. A local variable has scope extending from its declaration to the end of the smallest body that surrounds it.</P>
<DT><B>built-in class</B><DD>
<P>A class provided by Dylan, such as <CODE>&lt;object&gt;</CODE>, <CODE>&lt;integer&gt;</CODE>, or <CODE>&lt;string&gt;</CODE>.</P>
<DT><B>class</B><DD>
<P>A definition of a type of other objects, which are called its instances. A class defines the slots of its instances. Dylan provides built-in classes, and users can define new classes. When you define a class, you specify its name, its direct superclasses, and its slots.</P>
<DT><B>class precedence list</B><DD>
<P>For a particular class, a list of the class and all its superclasses, ordered from most specific (the class itself) to least specific (the <CODE>&lt;object&gt;</CODE> class).</P>
<DT><B>closure</B><DD>
<P>A method that closes over some local variables. The closure can access the local variables which existed when the closure was created. The ability to dynamically create and return closures that can access lexical state is one of the important dynamic aspects of Dylan. </P>
<DT><B>collection</B><DD>
<P>A kind of container that can hold zero or more objects. Dylan provides the usual kinds of collections, including arrays, vectors, strings, singly linked lists, queues, hash tables, and so on. In Dylan, a collection is an instance of a class. For example, the <CODE>&lt;array&gt;</CODE> class represents arrays, and the <CODE>&lt;vector&gt;</CODE> class represents vectors. </P>
<DT><B>concrete class</B><DD>
<P>A class that can have direct instances. By default, a class is concrete. </P>
<DT><B>condition</B><DD>
<P>An instance (direct or indirect) of the <CODE>&lt;condition&gt;</CODE> class, that represents a problem or unusual situation encountered during program execution. </P>
<DT><B>const</B>ant<EM> (also called <B>module constant)</B></EM><DD>
<P>An unchanging binding whose scope is its module. You define a constant explicitly with <CODE>define constant</CODE>, and implicitly with <CODE>define class</CODE>, <CODE>define generic</CODE>, <CODE>define macro</CODE>, or possibly <CODE>define method</CODE>. You must initialize the value of a constant, and you cannot assign another value to a constant during the execution of a Dylan program. </P>
<DT><B>constituent</B><DD>
<P>A definition, a local declaration, or an expression.</P>
<DT><B>constructor</B><DD>
<P>A function that creates an instance. A constructor provides a shorthand means for calling <CODE>make</CODE>. For example, you can call the constructor function <A NAME=MARKER-2-932></A><CODE>vector</CODE> to create a vector, and to initialize that vector with data.</P>
<DT><B>contract</B><DD>
<P>An agreement between a generic function and its methods. The generic function defines the terms of the contract, and the methods must obey the contract; particularly, the methods' parameters and value declarations must be congruent with the generic function's parameters and value declarations.</P>
<DT><B>definition</B><DD>
<P>A declaration of a piece of program structure, such as a library, module, class, generic function, or method. A definition usually establishes a module variable or constant. Definitions include <CODE>define variable</CODE>, <CODE>define class</CODE>, and <CODE>define method</CODE>.</P>
<DT><B>development</B> <B>environment</B><DD>
<P>A collection of tools for Dylan programmers that can include an editor custom-tailored for Dylan code, a browser, a compiler, a debugger, and a listener that enables you to enter expressions and to see their values. The features of any development environment are defined by the implementation, rather than by Dylan itself.</P>
<DT><B>direct</B> <B>instance</B><DD>
<P>An object is a direct instance of class A if the object's class is class A. You can use <CODE>object-class</CODE> to find out the class of which an object is a direct instance.</P>
<DT><B>direct subclass</B><DD>
<P>A class is the direct subclass of all its direct superclasses. "Direct" means there is no class intervening between the class and its subclass in the inheritance graph.</P>
<DT><B>direct superclass</B><DD>
<P>The direct superclasses of a class appear in the <CODE>define class</CODE> form for that class. Direct means that there is no class intervening between the class and its superclass in the inheritance graph.</P>
<DT><B>dylan library</B><DD>
<P>A library that contains modules that contain the elements of the core Dylan language.</P>
<DT><B>dylan module</B><DD>
<P>A module that contains the elements of the core Dylan language.</P>
<DT><B>dylan-user module</B><DD>
<P>The special bootstrapping module in which you define the modules and libraries that make up your program. </P>
<DT><B>exception</B><DD>
<P>An unexpected event that occurs during program execution. </P>
<DT><B>expression</B><DD>
<P>A piece of code that, when executed, can return (zero or more) values and can have side effects. Expressions include (among others) literals, references to variables or constants, function calls, and statements (such as <CODE>if</CODE>, <CODE>while</CODE>, and <CODE>case</CODE>).</P>
<DT><CODE>#f</CODE><DD>
<P>The canonical false value. This object is the only object that represents false in Dylan. </P>
<DT><B>general instance</B><DD>
<P>A member of a class. An object is a general instance of a class if it is either a direct or an indirect instance of that class. The term <I>instance</I> is equivalent to the term <I>general instance</I>.</P>
<DT><B>generic function</B><DD>
<P>A kind of function. A generic function defines an interface, and contains methods that implement that generic function. When a generic function is called, it chooses the method to call based on the types of its required <BR>arguments.</P>
<DT><B>getter</B><DD>
<P>A method that retrieves the current value of a slot in an object. Each slot in a class automatically has a getter defined for it. The getter's name is the same as the name of the slot.</P>
<DT><B>handler</B><DD>
<P>A function that can potentially resolve an exceptional situation. </P>
<DT><B>implicit generic function</B><DD>
<P>A generic function created by Dylan if a method is defined by <CODE>define method</CODE> or (for a slot getter or setter) by <CODE>define class</CODE> and if no generic function of the same name exists. An implicit generic function has the most general parameter and result types that are compatible with the method.</P>
<DT><B>indirect instance</B><DD>
<P>An object is an indirect instance of class A if the object's class has class A as a superclass. </P>
<DT><B>infix function</B><DD>
<P>A function whose calling syntax has the function appearing between the arguments. The arithmetic functions <CODE>+</CODE>, <CODE>-</CODE>, <CODE>*</CODE>, <CODE>/</CODE>, <CODE>&lt;</CODE>, <CODE>&gt;</CODE>, and so on are infix functions, as is the assignment operator, <CODE>:=</CODE>. An example of the calling syntax is: <CODE>3 + 2</CODE>.</P>
<DT><B>information hiding</B><DD>
<P>A principle of minimizing the information that is passed among components in a system; it reduces the interdependencies of components.</P>
<DT>i<B>nheritance</B><DD>
<P>The ability to arrange for classes that are logically related to one another to share the behaviors and data attributes that they have in common. Each class inherits from one or more other classes, called its superclasses. If no other class is an appropriate superclass, the class inherits from the class <CODE>&lt;object&gt;</CODE>. </P>
<DT><B>init expression</B><DD>
<P>A technique for initializing slots. An init expression provides an expression that yields a default value. Every time that an instance is made and the slot needs a default value, this expression is evaluated, and its value is used as the default. The slot receives its default initial value when no init keyword is defined, or when the caller does not supply the init-keyword argument to <CODE>make</CODE>.</P>
<DT><B>init function</B><DD>
<P>A function of zero arguments that is to be called to return a default initial value for the slot. The function is called every time that an instance is created if no init keyword is defined, or if the caller does not supply the init keyword argument to <CODE>make</CODE>. To define an init function for a slot, use the <CODE>init-function:</CODE> slot option in the class definition.</P>
<DT><B>init keyword</B><DD>
<P>A keyword that can be given to <CODE>make</CODE> to provide an initial value for a slot. To define an init keyword for a slot, you use the <CODE>init-keyword:</CODE> or <CODE>required-init-keyword:</CODE> slot option in the class definition.</P>
<DT><B>init value</B><DD>
<P>A default initial value for a slot, obtained by evaluating an expression once, before the first instance of the class is made. To define an init value for a slot, use the <CODE>init-value:</CODE> slot option in the class definition.</P>
<DT><B>initialize</B><DD>
<P>To provide an initial value for something that you are creating, such as a slot or a variable. </P>
<DT><B>initialize method</B><DD>
<P>A method for the <CODE>initialize</CODE> generic function. The purpose of initialize methods is to initialize an instance before that instance is returned by <CODE>make</CODE>.</P>
<DT><B>instance</B><DD>
<P>A member of a class. An object is an instance of a class if it is either a direct or an indirect instance of that class. The term <I>instance</I> is equivalent to the term <I>general instance</I>.</P>
<DT><B>instantiable class</B><DD>
<P>A class that can be used as the first argument to <CODE>make</CODE>. All concrete classes are instantiable. You can make an abstract class be instantiable by defining a <CODE>make</CODE> method for the class; the <CODE>make</CODE> method must return an instance of a concrete subclass of the abstract class.</P>
<DT>i<B>nterchange format</B><DD>
<P>A format that all Dylan implementations accept for publishing and exchanging source code by means of files. In this format, each file contains a single source record. The file must have a header at the front, consisting of pairs of keywords and values. One required keyword is <CODE>module:</CODE>; its value is the name of the module in which the source record of the file resides.</P>
<DT><B>keyword</B><DD>
<P>A symbol name followed by a colon, such as <CODE>total-seconds:</CODE>. </P>
<DT><B>keyword argument</B><DD>
<P>An optional argument to a function consisting of a keyword followed by that keyword's value. You can give keyword arguments in any order. Keyword arguments can be useful for functions that take many arguments -- when you call the function, you do not need to remember the order of the arguments. Keyword parameters enable a method to accept optional arguments that are keyed to a name. Keyword parameters appear after <CODE>#key</CODE> in the parameter list. </P>
<DT><B>library</B><DD>
<P>A Dylan library defines a software component, which is a separately compilable unit that can be either a stand-alone program or a component (library) of a larger program. A library contains modules.</P>
<DT><B>library-interchange definition (LID) file</B><DD>
<P>A file that enumerates all the files that make up a library. Most Dylan implementations support LID files, but these files are not required to by the core language.</P>
<DT><B>limited type</B><DD>
<P>A type that is a more restricted version of its base type. For example, a limited-integer type is based on <CODE>&lt;integer&gt;</CODE>, but has a given minimum or maximum value. Another example of a limited type is a limited-collection type, which is a collection type that specifies the type of elements, and/or the size of the collection. Limited types are created via <CODE>limited</CODE>.</P>
<DT><B><A NAME=MARKER-10-933></A>listener</B><DD>
<P>A tool that enables you to enter Dylan expressions, executes the expressions, and displays any values and output produced by them.</P>
<DT><B>literal constant</B><DD>
<P>An object whose contents are known completely at compile time.</P>
<DT><B>local declaration</B><DD>
<P>A declaration that establishes a local variable, local method, or local condition handler. Local declarations include <CODE>let</CODE>, <CODE>local</CODE>, and <CODE>let handler</CODE>.</P>
<DT><B>local variable</B><DD>
<P>A binding whose scope extends from its definition to the end of the smallest body that surrounds it. You establish and use local variables within a body. Once the program exits the body, the local variables are no longer defined, and an attempt to access them is an error.</P>
<DT><B>macro</B><DD>
<P>A word or phrase that stands for another phrase (usually longer, but built of simpler components). Macros can be used for abbreviation, abstraction, simplification, or structuring. The primary use of macros in programming is to extend or adapt the language to allow a more concise or readable solution for a particular problem domain.</P>
<DT><B>method</B><DD>
<P>A kind of function that can belong to a generic function. Although methods are independent of classes, they operate on instances of classes. A method states the kinds of objects that it handles by the types of its required <BR>arguments. </P>
<DT><B>module</B><DD>
<P>A unit that contains a portion of the definitions of a library. Each module specifies an independent namespace for Dylan constants and variables, and controls the visibility of the names within a module from outside the module. You can use modules both to do information hiding and to prevent name clashes between constants and variables.</P>
<DT><B>module constant<EM> (see constant)</EM></B><DD>
<DT><B>module variable</B><DD>
<P>A binding whose scope is its module. A module variable is much like a global variable in other languages. You define a module variable with <CODE>define variable</CODE>. When you define a module variable, you must initialize it (that is, provide an initial value for it). If a module variable is not exported from the module that defines it, then it is accessible only within the module. If the module variable is exported by the module that defines it, and is imported or used by another module, then it is accessible within that other module as well.</P>
<DT><B>multiple inheritance</B><DD>
<P>Inheritance of a class from more than one direct superclass.</P>
<DT><CODE>&lt;object&gt;</CODE> <B>class</B><DD>
<P>The class from which all classes inherit, either directly or indirectly.</P>
<DT><B>object</B><DD>
<P>An individual datum. Also called an <I>instance</I>.</P>
<DT><B>parameter list</B><DD>
<P>A list of specifications for the arguments to a function. A parameter list can specify required and optional arguments. The optional arguments can be keyword arguments, each of which is passed to the function as a keyword followed by a value. Each parameter has a name, which is bound to the corresponding argument within the function's body when the function is called. Required parameters and a method's keyword parameters can include type constraints. The parameter lists of a generic function and all its methods must be congruent.</P>
<DT><B><A NAME=MARKER-10-934></A>parameter specializer</B><DD>
<P>The type of a required parameter of a method.</P>
<DT><B>predicate </B><DD>
<P>A function that returns true or false. False is always represented as <CODE>#f</CODE>. True is represented by the canonical true value, <CODE>#t</CODE>, and by any value other than <CODE>#f</CODE>.</P>
<DT><B>protocol</B><DD>
<P>The interface definition of a software component. The purpose of establishing protocols is to define a uniform interface that clients can use, even if the implementation of a component is enhanced or modified.</P>
<DT><B>recursion</B><DD>
<P>A technique in which a function calls itself.</P>
<DT><B>required parameter</B><DD>
<P>A parameter corresponding to an argument that must be provided in the call to the function. Required parameters appear before any rest or keyword parameters in a parameter list. Required parameters are ordered, and the required arguments must be given in the same order.</P>
<DT><B>rest parameter </B><DD>
<P>Parameters that enable a method to accept any number of optional arguments. Any arguments provided in the call after the required arguments are collected in a sequence, which is the value of the rest parameter. A rest parameter, if one exists, appears after <CODE>#rest</CODE> in the parameter list. </P>
<DT><B>restart</B><DD>
<P>A special condition that represents an opportunity to recover from an <BR>exception. </P>
<DT><B>restart handler</B><DD>
<P>A function used to implement the particular recovery action for a restart condition.</P>
<DT><B>root</B><DD>
<P>The starting point of Dylan class inheritance -- the class <CODE>&lt;object&gt;</CODE>, from which all Dylan classes inherit, either directly or indirectly.</P>
<DT><B>setter</B><DD>
<P>A method that stores a value in a slot. By default, each slot in a class has a setter defined for it automatically. </P>
<DT><B>signature</B><DD>
<P>The parameter list and the values declaration of a function.</P>
<DT><B>singleton type</B><DD>
<P>A type whose only member is one particular instance. Singleton types are created via <CODE>singleton</CODE>.</P>
<DT><B>single inheritance</B><DD>
<P>Inheritance in a class that has only one direct superclass.</P>
<DT><B>slot</B><DD>
<P>A unit of data associated with an instance. A slot is like a structure member or a field in other languages. Information about a slot is specified in the definition of the instance's class. The location of storage for the slot is determined by the slot's allocation. A program retrieves the value of a slot by calling that slot's getter generic function, and, unless the slot is constant, it sets the value by calling the slot's setter generic function.</P>
<DT><B>slot option</B><DD>
<P>An option that specifies a characteristic of a slot, such as the default initial value or the init keyword. Slot options appear in the <CODE>define class</CODE> form.</P>
<DT><B>source record</B><DD>
<P>A unit that organizes a portion of the Dylan source code for a program. Different Dylan implementations divide code into source records differently, and store the source records differently. For example, an implementation might store source records in a database. Many implementations store source records in files, and typically each file contains one source record.</P>
<DT><B>subclass</B><DD>
<P>The subclasses of a class include the class itself, and all classes that inherit from the class (all the class's direct subclasses, and all their direct subclasses, and so on). </P>
<DT><B>subtype</B><DD>
<P>The subtypes of a type include the type itself, and all types that inherit from the type, directly or indirectly.</P>
<DT><B>superclass</B><DD>
<P>The superclasses of a class include all that class's direct superclasses, and all their direct superclasses, and so on, all the way to the root of class inheritance, which is the <CODE>&lt;object&gt;</CODE> class. You can use <CODE>all-superclasses</CODE> to find all the superclasses of a class.</P>
<DT><B>supertype</B><DD>
<P>The supertypes of a type include all the types from which the type inherits, directly or indirectly.</P>
<DT><B>symbol</B><DD>
<P>An instance of the <CODE>&lt;symbol&gt;</CODE> type. Symbols are much like strings. There are two reasons to use symbols in certain cases where you might consider strings. First, symbol comparison is not case sensitive. Second, comparison of two symbols is much faster than is comparison of two strings, because symbols are compared by identity, and strings are usually compared element by element., There are two equivalent syntaxes for referring to symbols: <CODE>north:</CODE> is an example of the keyword syntax, whereas <CODE>#&quot;north&quot;</CODE> is an example of the hash syntax.</P>
<DT><CODE>#t</CODE><DD>
<P>The canonical value of true. Note that any value other than <CODE>#f</CODE> is considered a value of true.</P>
<DT><B>type</B><DD>
<P>An object that describes the structure and behavior of its members. All classes are types, but not all types are classes. You can define new nonclass types with <CODE>limited</CODE>, <CODE>singleton</CODE>, and <CODE>type-union</CODE>.</P>
<DT><B>type constraint</B><DD>
<P>A type associated with a binding or slot that ensures that the value of that binding or slot can hold only objects of that type. </P>
<DT><B>union type</B><DD>
<P>A type whose members include all the members of one or more base types. Union types are created via <CODE>type-union</CODE>.</P>
<DT><B>user-defined class</B><DD>
<P>A class defined by a Dylan user, and not provided by Dylan itself.</P>
<DT><B>value declaration</B><DD>
<P>A list of the values returned by a function, and of the types of the values. The name of a return value is used purely for documentation purposes. When you provide a value declaration for a function, Dylan signals an error if the function tries to return a value of the wrong type. The compiler can check receivers of the results of the method for correct type, and can usually produce more efficient code. The value declarations of a generic function and all that function's methods must be congruent.</P>
<DT><A NAME=MARKER-10-935></A><B>virtual slot</B><DD>
<P>A slot that does not occupy storage; instead, its value is computed. When you define a virtual slot, you need to define a getter method to return the value of the virtual slot, and you can optionally define a setter method to set the value of the virtual slot. </P>
<A NAME=LINK-glossary-lastpage></A><A NAME=LINK-dylanIX-firstpage></A></DL>
</DL>
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->
<!-- FM pgf ignored -->

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_347.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
