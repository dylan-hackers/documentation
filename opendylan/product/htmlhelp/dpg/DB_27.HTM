<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_24.HTM">
<LINK REL=PREV HREF="DB_26.HTM">
<LINK REL=NEXT HREF="DB_28.HTM">
<TITLE>2.3.3   Module constants</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING27></A>

<DIV>
<P><A HREF="DB_28.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_26.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING27-0></A>
<H1>2.3.3   Module <A NAME=MARKER-2-79></A>constants</H1>
<P> A <A NAME=MARKER-2-80></A><B>module constant</B> is much like a module variable, except that it is an error to assign a different value to a constant. Although you cannot assign a different value to a constant, you may be able to change the elements of the value, such as assigning a different value to an element of an array. </P>
<P>You use <A NAME=MARKER-2-81></A><CODE>define constant</CODE> to define a module constant, in the same way that you use <CODE>define variable</CODE> to define a variable. You must initialize the value of the constant, and you cannot change that value throughout the execution of a Dylan program. Here is an example:</P>
<PRE>
<I>?</I> define constant $pi = 3.14159;
<TABLE BORDER=1><TR VALIGN=TOP><TD></PRE>
<P> <B><A NAME=MARKER-2-38></A>Convention: </B>Module constant names start with the dollar sign, <CODE>$ </CODE>-- for example, <CODE>$pi</CODE>. The dollar sign is part of the name, and does not have any special behavior.</P>
</TD></TR></TABLE><P> </P>
<P> Both module variables and module constants are accessible within a <B>module</B>.</P>
<P> (See <A HREF="DB_192.HTM#MARKER-9-618">Section 13.2, page 189</A>, for information about modules.) Dylan also offers variables that are accessible within a smaller area, called <B>local variables</B>. There is no concept of a local constant; all constants are module constants. Therefore, throughout the rest of this book, we use the word <I>constant</I> as shorthand for module constant.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_28.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_26.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
