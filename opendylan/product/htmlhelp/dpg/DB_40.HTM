<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_38.HTM">
<LINK REL=PREV HREF="DB_39.HTM">
<LINK REL=NEXT HREF="DB_41.HTM">
<TITLE>3.2.2   Relationship between classes and methods</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING40></A>

<DIV>
<P><A HREF="DB_41.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_39.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING40-0></A>
<H1>3.2.2   <A NAME=MARKER-2-128></A>Relationship between classes and methods</H1>
<P> The relationship between classes and methods in Dylan is different from that in C++ and Smalltalk, among other languages.</P>
<P> </P>
<TABLE BORDER=1><TR VALIGN=TOP><TD><P> <B>Compari<A NAME=MARKER-2-102></A>son to C++ and Sm<A NAME=MARKER-2-103></A>alltalk:</B> In C++ and Smalltalk, a class contains the equivalent of methods. In Dylan, a class does not contain methods; instead, a method belongs to a generic function. This design decision enables these powerful features of Dylan: </P>
<UL>
<LI><P>Yo<B><A NAME=MARKER-2-104></A></B>u can define methods on built-in classes (because you do not have to modify the class definition to define a method intended for use on the class). For an example, see <A HREF="DB_85.HTM#MARKER-9-243">Section 6.1, page 75</A>. More generally, you can define a method for a class that you did not define. </P>
<LI><P>You can write multimethods. In a <B>multimethod</B>, the method dispatch is based on the classes of more than one argument to a generic function. For an introduction to method dispatch, see <A HREF="DB_75.HTM#MARKER-9-224">Section 5.5, page 63</A>. For information about multimethods, see <A HREF="DB_84.HTM#MARKER-9-241">Chapter 6,  <I>Multimethods</I></A>.</P>
<LI><P>You can restrict generic functions to operate on specific classes of objects.</P>
</TD></TR></TABLE></UL>
<P> </P>
<P> In Dylan, a method belongs to a generic function, as shown in <A HREF="DB_37.HTM#MARKER-9-99">Figure 3.1, page 30</A>. Although methods are independent of classes, methods operate on instances of classes. A method states the types of objects for which it is applicable by the type constraint of each of its required parameters. Consider the <CODE>say-greeting</CODE> method defined earlier:</P>
<PRE>
define method say-greeting (greeting :: &lt;integer&gt;);
  format-out(&quot;Your lucky number is %s.\n&quot;, greeting);
end;
</PRE>
<P> This method operates on instances of the <CODE>&lt;integer&gt;</CODE> class. Notice how easy <BR>and convenient it is to define a method intended for use on the built-in class <CODE>&lt;integer&gt;</CODE>. </P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_41.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_39.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
