<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_92.HTM">
<LINK REL=PREV HREF="DB_96.HTM">
<LINK REL=NEXT HREF="DB_98.HTM">
<TITLE>7.5   Relative position</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING97></A>

<DIV>
<P><A HREF="DB_98.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_96.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING97-0></A>
<H1>7.5   Relative position</H1>
<P> We define the <CODE>&lt;relative-position&gt;</CODE> class as follows:</P>
<PRE>
define class &lt;relative-position&gt; (&lt;position&gt;) 
<I>  // distance is in miles
</I>  slot distance :: &lt;single-float&gt;, init-keyword: distance:;
  slot angle :: &lt;relative-angle&gt;, init-keyword: angle:;
end class &lt;relative-position&gt;; 
</PRE>
<P> The <CODE>distance</CODE> slot stores the distance to the other object, and the <CODE>angle</CODE> slot stores the direction to the other object. Unfortunately, the angle needed here is different from the <CODE>&lt;directed-angle&gt;</CODE> class, because the <CODE>&lt;directed-angle&gt;</CODE> class has a direction, such as south, which is not needed for the angle of <CODE>&lt;relative-<BR>position&gt;</CODE>. </P>
<P>We need to provide a class of angle without direction, which we can use for the <CODE>angle</CODE> slot of the <CODE>&lt;relative-position&gt;</CODE> class). Therefore, we define two new classes, and redefine <CODE>&lt;directed-angle&gt;</CODE>:</P>
<PRE>
<I>// Superclass of all angle classes
</I>define abstract class &lt;angle&gt; (&lt;object&gt;)
  slot total-seconds :: &lt;integer&gt;, init-keyword: total-seconds:;
end class &lt;angle&gt;;
define class &lt;relative-angle&gt; (&lt;angle&gt;)
end class &lt;relative-angle&gt;;
define abstract class &lt;directed-angle&gt; (&lt;angle&gt;)
  slot direction :: &lt;string&gt;, init-keyword: direction:;
end class &lt;directed-angle&gt;;
<TABLE BORDER=1><TR VALIGN=TOP><TD></PRE>
<P> <B>Modularity note:</B> Why provide both the classes <CODE>&lt;angle&gt;</CODE> and <CODE>&lt;relative-angle&gt;</CODE>, when the <CODE>&lt;relative-angle&gt;</CODE> class has no additional slots? We need a class that has only the <CODE>total-seconds</CODE> slot, and no others. We need to use such a class as the type of the <CODE>angle</CODE> slot of <CODE>&lt;relative-angle&gt;</CODE>. We might consider making the <CODE>&lt;angle&gt;</CODE> class concrete, and using that class, which has only the <CODE>total-seconds</CODE> slot. However, that approach would not prevent someone from storing a <CODE>&lt;directed-angle&gt;</CODE> instance in the <CODE>angle</CODE> slot of <CODE>&lt;relative-angle&gt;</CODE>, because <CODE>&lt;directed-angle&gt;</CODE> instances are also instances of <CODE>&lt;angle&gt;</CODE>. </P>
<P>In Dylan, by defining classes as specifically as possible, you enhance the reliability of your program, because the compiler (or run-time system) can verify that only correct values are used. In contrast, you could write a program in Dylan or C in which you represented everything as an integer -- in that style of program, someone could far too easily introduce a programming error in which a time was stored where a latitude was needed. </P>
</TD></TR></TABLE><P> </P>
<P> The <CODE>&lt;angle&gt;</CODE> class looks remarkably similar to the <CODE>&lt;time&gt;</CODE> class defined earlier:</P>
<PRE>
<I>// Superclass of all angle classes
</I>define abstract class &lt;angle&gt; (&lt;object&gt;)
  slot total-seconds :: &lt;integer&gt;, init-keyword: total-seconds:;
end class &lt;angle&gt;;
<I>// Superclass of all time classes
</I>define abstract class &lt;time&gt; (&lt;object&gt;)
  slot total-seconds :: &lt;integer&gt;, init-keyword: total-seconds:;
end class &lt;time&gt;; 
</PRE>
<P> We would like to call <CODE>decode-total-seconds</CODE> on instances of <CODE>&lt;angle&gt;</CODE>, but currently the method is defined to work on <CODE>&lt;time&gt;</CODE>. The next step is to take advantage of the similarity between <CODE>&lt;angle&gt;</CODE> and <CODE>&lt;time&gt;</CODE>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_98.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_96.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
