<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_18.HTM">
<LINK REL=PREV HREF="DB_32.HTM">
<LINK REL=NEXT HREF="DB_34.HTM">
<TITLE>2.6   Summary</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING33></A>

<DIV>
<P><A HREF="DB_34.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_32.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING33-0></A>
<H1>2.6   Summ<A NAME=MARKER-2-96></A>ary</H1>
<P> In this chapter, we covered the following: </P>
<UL>
<LI><P>We entered Dylan expressions to a listener and saw their values or output.</P>
<LI><P>We used simple arithmetic functions: <CODE>+</CODE>, <CODE>*</CODE>, <CODE>-</CODE>. We used predicates: <CODE>=</CODE>, <CODE>&lt;</CODE>, <CODE>&gt;</CODE>, <CODE>even?</CODE>, and <CODE>zero?</CODE>.</P>
<LI><P>We described certain naming conventions in Dylan; see <A HREF="#MARKER-9-50">Table 2.1</A>.</P>
</UL>
<P> </P>
<TABLE BORDER=1><CAPTION><P>Table 2.1   <A NAME=MARKER-9-50></A>Dylan naming conventions shown in this chapter.</P>
</CAPTION><TR VALIGN=TOP><TH><P>Dylan element</P>
</TH><TH><P>Example of name</P>
</TH></TR><TR VALIGN=TOP><TD><P> module variable</P>
</TD><TD><P> <CODE>*my-number*</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P> constant</P>
</TD><TD><P> <CODE>$pi</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P> class</P>
</TD><TD><P> <CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P> predicate</P>
</TD><TD><P> <CODE>positive?</CODE></P>
</TD></TR></TABLE><P> </P>
<TABLE BORDER=1><CAPTION><P>Table 2.2   <A NAME=MARKER-9-37></A>Syntax of Dylan elements.</P>
</CAPTION><TR VALIGN=TOP><TH><P>Dylan element</P>
</TH><TH><P>Syntax example</P>
</TH></TR><TR VALIGN=TOP><TD><P> string</P>
</TD><TD><PRE>
&quot;Runway&quot;
</TD></TR><TR VALIGN=TOP><TD></PRE>
<P> true</P>
</TD><TD><P> any value that is not <CODE>#f</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P> canonical true value</P>
</TD><TD><PRE>
#t
</TD></TR><TR VALIGN=TOP><TD></PRE>
<P> false</P>
</TD><TD><PRE>
#f
</TD></TR><TR VALIGN=TOP><TD></PRE>
<P> infix syntax function call</P>
</TD><TD><PRE>
2 + 3;
</TD></TR><TR VALIGN=TOP><TD></PRE>
<P> function call</P>
</TD><TD><PRE>
<CODE>max(2, 3);</CODE>
</TD></TR></TABLE></PRE>
<UL>
<LI><P>We described the syntax of some commonly used elements of Dylan; see <A HREF="#MARKER-9-37">Table 2.2</A>.</P>
<LI><P>We defined module variables (with <CODE>define variable</CODE>), constants (with <CODE>define constant</CODE>), and local variables (with <CODE>let</CODE>).</P>
<LI><P>We set the value of variables by using <CODE>:=</CODE>, the assignment operator.</P>
<LI><P>We defined a simple but complete Dylan program, consisting of a LID file, a library file, and a program file.</P>
</UL>
<P> Here, we summarize the most basic information about libraries and modules:</P>
<UL>
<LI><P>A Dylan library defines a software component -- a separately compilable unit that can be either a stand-alone program or a component of a larger program. Thus, when we talk about creating a Dylan program, we are really talking about creating a library. </P>
<LI><P>Each Dylan expression and definition must be in a module. Each module is in a library. </P>
<LI><P>One module uses another module to allow its definitions to use the other module's exported definitions. Most modules need to use the <CODE>dylan</CODE> module in the <CODE>dylan</CODE> library, because it contains the definitions of the core Dylan language. </P>
<LI><P>One library uses another library to allow its modules to use the other library's exported modules. Most libraries need to use the <CODE>dylan</CODE> library, because it contains the <CODE>dylan</CODE> module. </P>
<A NAME=LINK-start-lastpage></A><A NAME=LINK-oo-1-firstpage></A></UL>
<!-- FM pgf ignored -->

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_34.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_32.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
