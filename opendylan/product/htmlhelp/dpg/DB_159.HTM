<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_158.HTM">
<LINK REL=PREV HREF="DB_158.HTM">
<LINK REL=NEXT HREF="DB_160.HTM">
<TITLE>11.5.1   if, else, and elseif</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING159></A>

<DIV>
<P><A HREF="DB_160.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_158.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING159-0></A>
<H1>11.5.1   <EM><A NAME=MARKER-9-423></A>if</EM>, <EM>else</EM>, and <EM>elseif</EM></H1>
<P> We showed the simplest use of <A NAME=MARKER-2-424></A><CODE>if</CODE> in <A HREF="DB_67.HTM#MARKER-9-206">Section 5.1.3, page 54</A>. Consider the case where there is more than one test involved. Suppose that we want to write a method that describes a vote. Here are sample calls to <CODE>interpret-votes</CODE>: </P>
<PRE>
<I>? </I>interpret-votes(yes: 4, no: 0);
<I>&quot;unanimously approved&quot;</I>
<I>? </I>interpret-votes(yes: 3, no: 1);
<I>&quot;approved&quot;</I>
<I>? </I>interpret-votes(yes: 2, no: 2);
<I>&quot;tie&quot;</I>
<I>? </I>interpret-votes(yes: 1, no: 3);
<I>&quot;not approved&quot;</I>
</PRE>
<P> We can define the <CODE>interpret-votes</CODE> method using the <CODE>if</CODE> control structure and the <CODE>else</CODE> clause:</P>
<PRE>
define method interpret-votes 
    (#key yes :: &lt;nonnegative-integer&gt; = 0, no :: &lt;nonnegative-integer&gt; = 0) 
 =&gt; (interpretation :: &lt;string&gt;)
  if (yes &gt; 0 &amp; no = 0) 
    &quot;unanimously approved&quot;;
  else if (yes &gt; no) 
    &quot;approved&quot;;
  else if (yes = no) 
    &quot;tie&quot;; 
  else
    &quot;not approved&quot;;
  end if;
  end if;
  end if;
end method interpret-votes;
</PRE>
<P> We defined the <CODE>&lt;nonnegative-integer&gt;</CODE> type in <A HREF="DB_112.HTM#MARKER-9-295">Section 9.2, page 110</A>, using <CODE>limited</CODE>. Only positive integers and the integer 0 are instances of <CODE>&lt;nonnegative-integer&gt;</CODE>. We use this type in the <CODE>interpret-votes</CODE> method parameter list to ensure that no negative vote counts are accepted.</P>
<P> </P>
<TABLE BORDER=1><TR VALIGN=TOP><TD><P> <B>Quick summary of </B><A NAME=MARKER-2-364></A><CODE>&amp;</CODE> <B>infix operator</B>: <I>arg1</I> <CODE>&amp;</CODE> <I>arg2</I></P>
<P>The infix operator <CODE>&amp;</CODE> does the <EM>and</EM> <A NAME=MARKER-2-365></A>logical operation. If either or both of the arguments to the <CODE>&amp;</CODE> operator are false, then <CODE>&amp;</CODE> returns false. </P>
<P>Note that the <CODE>&amp;</CODE> operator is actually a control-flow operator. If the first argument to the <CODE>&amp;</CODE> operator is false, then the value of the second argument is never computed, and false is returned. If the value of the first argument is true, then the value of the second argument is computed and returned. </P>
<P>The <CODE>|</CODE> <A NAME=MARKER-2-366></A>operator (logical <EM>or</EM>) behaves in a similar manner, except that its second argument is computed and returned only if the first argument is false.</P>
</TD></TR></TABLE><P> </P>
<P> The syntax for the <CODE>if</CODE> control structure allows <CODE>elseif</CODE> clauses, which makes this style of conditionalization slightly more compact:</P>
<PRE>
define method interpret-votes 
    (#key yes :: &lt;nonnegative-integer&gt; = 0, no :: &lt;nonnegative-integer&gt; = 0)
 =&gt; (interpretation :: &lt;string&gt;)
  if (yes &gt; 0 &amp; no = 0) 
    &quot;unanimously approved&quot;;
  elseif (yes &gt; no) 
    &quot;approved&quot;;
  elseif (yes = no) 
    &quot;tie&quot;;
  else 
    &quot;not approved&quot;;
  end if;
end method interpret-votes;
</PRE>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_160.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_158.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
