<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_260.HTM">
<LINK REL=PREV HREF="DB_260.HTM">
<LINK REL=NEXT HREF="DB_262.HTM">
<TITLE>17.1   The definitions.dylan file</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING261></A>

<DIV>
<P><A HREF="DB_262.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_260.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING261-0></A>
<H1>17.1   <A NAME=MARKER-9-708></A>The <CODE>definitions.dylan</CODE> file</H1>
<P> This file contains common definitions that are used throughout several libraries in the airport example.</P>
<P> </P>
<TABLE BORDER=1><TR VALIGN=TOP><TH><P> The <CODE>definitions.dylan</CODE> file.  </P>
</TH></TR><TR VALIGN=TOP><TD><PRE>
module: definitions
<I>// This file contains constants and other definitions used in common with
// the other parts of the airport example</I>
</TD></TR><TR VALIGN=TOP><TD><I>// The capital letters of the alphabet
</I>define constant $letters = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;
</TD></TR><TR VALIGN=TOP><TD><I>// This type represents positive integers
</I>define constant &lt;positive-integer&gt; = limited(&lt;integer&gt;, min: 1);
</TD></TR><TR VALIGN=TOP><TD>define constant $hours-per-day = 24; 
</TD></TR><TR VALIGN=TOP><TD>define constant $minutes-per-hour = 60;
</TD></TR><TR VALIGN=TOP><TD>define constant $seconds-per-minute = 60; 
</TD></TR><TR VALIGN=TOP><TD>define constant $seconds-per-hour 
  = $minutes-per-hour * $seconds-per-minute; 
</TD></TR><TR VALIGN=TOP><TD><I>// This method returns the union of the false type and a type you specify,
// as a simple shorthand
// This method may already be provided by your Dylan implementation
</I>define method false-or (other-type :: &lt;type&gt;) =&gt; (combined-type :: &lt;type&gt;)
  type-union(singleton(#f), other-type);
end method false-or; 
</TD></TR></TABLE></PRE>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_262.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_260.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
