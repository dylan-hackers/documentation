<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_41.HTM">
<LINK REL=PREV HREF="DB_42.HTM">
<LINK REL=NEXT HREF="DB_44.HTM">
<TITLE>3.3.2   Bindings: Mappings between objects and names</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING43></A>

<DIV>
<P><A HREF="DB_44.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_42.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING43-0></A>
<H1>3.3.2   Bindings: <A NAME=MARKER-9-133></A>Mappings between objects and names</H1>
<P> A <A NAME=MARKER-2-134></A><B>binding</B> is a mapping between an object and a name. The name can be a module variable, module constant, or local variable. </P>
<P>Here, we give the object <CODE>3.14159</CODE> the name <CODE>$pi</CODE>, where <CODE>$pi</CODE> is a module <BR>constant:</P>
<PRE>
<I>?</I> define constant $pi = 3.14159; 
</PRE>
<P> Here, we give the object <CODE>&quot;apple&quot;</CODE> the name <CODE>*my-favorite-pie*</CODE>, where <CODE>*my-favorite-pie*</CODE> is a module variable:</P>
<PRE>
<I>?</I> define variable *my-favorite-pie* = &quot;apple&quot;;
</PRE>
<P> More than one variable can contain a particular object, so, in effect, an object can have many names. Here, we define a new variable that contains the very same pie:</P>
<PRE>
<I>?</I> define variable *your-favorite-pie* = *my-favorite-pie*;
<I>? </I>*your-favorite-pie* == *my-favorite-pie*;
<I>#t</I>
</PRE>
<P> When you define a method, <CODE>define method</CODE> creates a binding between a name and a method object:</P>
<PRE>
<I>? </I>define method say-greeting (greeting :: &lt;object&gt;);
   format-out(&quot;%s\n&quot;, greeting);
  end;
</PRE>
<P> All the bindings that we have created in this section so far are accessible within a module. (For information about modules, see <A HREF="DB_190.HTM#MARKER-9-610">Chapter 13,  <I>Libraries and Modules</I></A>.) <A HREF="#MARKER-9-101">Figure 3.3</A> shows how you can picture each binding as a link between a name and another object. </P>
<P>Local variables are also bindings, but they are accessible only within a certain body of code; for example, </P>
<PRE>
<I>? </I>begin
    let radius = 5.0;
    let circumference = 2.0 * $pi * radius;
    circumference;
  end; 
</PRE>
<P> Bindings can be constant or variable. You can use the assignment operator to change a variable binding, but you cannot change a constant binding. Module constants are constant bindings; module variables and local variables are variable bindings.</P>
<TABLE BORDER=1><CAPTION><P>Figure 3.3   Bindings as links (shown as arrows) between names (enclosed in ovals) and objects (enclosed in rectangles) within a module. <A NAME=MARKER-9-101></A></P>
</CAPTION><TR VALIGN=TOP><TD><P> <IMG ALIGN=TOP SRC=DB43IMA6.GIF></P>
</TD></TR></TABLE>
</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_44.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_42.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
