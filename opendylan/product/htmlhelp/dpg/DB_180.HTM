<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_174.HTM">
<LINK REL=PREV HREF="DB_179.HTM">
<LINK REL=NEXT HREF="DB_181.HTM">
<TITLE>12.2.6   Return-value congruence</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING180></A>

<DIV>
<P><A HREF="DB_181.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_179.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING180-0></A>
<H1>12.2.6   Return-value congruence</H1>
<P> Like parameter lists, the value declarations of a generic function and that function's methods must be congruent<A NAME=MARKER-2-534></A>. The rules depend on whether the generic function returns a fixed or a variable number of values:</P>
<UL>
<LI><P>If the generic function returns a fixed number of values -- that is, it does not have <CODE>#re<A NAME=MARKER-2-535></A>st</CODE> in its value declaration -- then its methods cannot have <CODE>#rest</CODE>, and must return the same number of required values as the generic function. For each method, the type of each returned value must be a subtype of the same returned value in the generic function.</P>
<LI><P>If the generic function returns a variable number of values -- that is, it has <CODE>#rest</CODE> in its value declaration -- then its methods can (but are not required to) have <CODE>#rest</CODE>, and must return at least as many required values as the generic function. For each method, the type of each returned value must be a subtype of the same returned value in the generic function. If the method has more required returned values than the generic function, their types must all be subtypes of the generic function's <CODE>#rest</CODE> value.</P>
</UL>
<P> The following value declarations are congruent, because the generic function implicitly returns any number of values of any type:</P>
<PRE>
define generic g (arg1 :: &lt;complex&gt;, arg2 :: &lt;integer&gt;);
define method g
    (arg1 :: &lt;real&gt;, arg2 :: &lt;integer&gt;) =&gt; (result :: &lt;real&gt;)
  ...
end method g;
</PRE>
<P> The following value declarations are not congruent, because the type of the method's returned value is not a subtype of the generic function's returned value:</P>
<PRE>
define generic g
    (arg1 :: &lt;complex&gt;, arg2 :: &lt;integer&gt;) =&gt; (result :: &lt;integer&gt;);
define method g
    (arg1 :: &lt;real&gt;, arg2 :: &lt;integer&gt;) =&gt; (result :: &lt;real&gt;)
  ...
end method g;
</PRE>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_181.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_179.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
