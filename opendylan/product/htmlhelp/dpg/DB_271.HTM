<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_260.HTM">
<LINK REL=PREV HREF="DB_270.HTM">
<LINK REL=NEXT HREF="DB_272.HTM">
<TITLE>17.5   The airport-test.dylan file</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING271></A>

<DIV>
<P><A HREF="DB_272.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_270.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING271-0></A>
<H1>17.5   <A NAME=MARKER-9-712></A>The <CODE>airport-test.dylan</CODE> file</H1>
<P> The <CODE>airport-test.dylan</CODE> file contains test data, and the code that constructs a model of the simple airport described in <A HREF="DB_244.HTM#MARKER-9-681">Section 15.1, page 237</A>. The final method is a top-level testing function that builds the airport model and executes the main aircraft scheduling function. After defining the test, we show the results of running it. </P>
<P> </P>
<TABLE BORDER=1><TR VALIGN=TOP><TH><P> The <CODE>airport-test.dylan</CODE> file.  </P>
</TH></TR><TR VALIGN=TOP><TD><PRE>
module: airport-test
<I>// To keep the example relatively simple, we will use variables to hold
// test data for the flights and aircraft 
// Ordinarily, this information would be read from a file or database </I>
define variable *flight-numbers* = #[62, 7, 29, 12, 18, 44]; 
</TD></TR><TR VALIGN=TOP><TD>define variable *aircraft-distances* 
  = #[3.0, 10.0, 175.0, 450.0, 475.0, 477.0];       <I>// Miles</I>
</TD></TR><TR VALIGN=TOP><TD>define variable *aircraft-headings* 
  = #[82, 191, 49, 112, 27, 269];       <I>// Degrees </I>
</TD></TR><TR VALIGN=TOP><TD>define variable *aircraft-altitudes*
  = #[7000, 15000, 22000, 22500, 22000, 21000];    <I>// Feet </I>
</TD></TR><TR VALIGN=TOP><TD>define variable *aircraft-ids*
  = #[&quot;72914&quot;, &quot;82290&quot;, &quot;18317&quot;, &quot;26630&quot;, &quot;43651&quot;, &quot;40819&quot;]; 
</TD></TR><TR VALIGN=TOP><TD>define constant $default-runway-size
  = make(&lt;size&gt;, length: 10000, width: 200, height: 100);    <I>// Feet </I>
</TD></TR><TR VALIGN=TOP><TD>define constant $default-taxiway-size
  = make(&lt;size&gt;, length: 900, width: 200, height: 100);    <I>// Feet </I>
</TD></TR><TR VALIGN=TOP><TD><I><A NAME=MARKER-9-703></A>// Assumes that there is only one runway, and one taxiway 
// The taxiway-count variable will determine how many aircraft can wait 
// in line for each direction of the taxiway
</I>define method build-simple-airport
    (#key gates-per-terminal :: &lt;vector&gt; = #[2],
     capacity :: &lt;size&gt; = $default-capacity,
     runway-size :: &lt;size&gt; = $default-runway-size,
     taxiway-size :: &lt;size&gt; = $default-taxiway-size,
     taxiway-count :: &lt;positive-integer&gt; = 5,
     position-report-time :: &lt;time-of-day&gt;
       = make(&lt;time-of-day&gt;, 
           total-seconds: encode-total-seconds(6, 0, 0)))
 =&gt; (airport :: &lt;airport&gt;) 
</TD></TR><TR VALIGN=TOP><TD>  let gates = generate-gates(gates-per-terminal, capacity);
  let taxiway
    = make(&lt;taxiway&gt;, id: &quot;Echo&quot;, directions: #[#&quot;inbound&quot;, #&quot;outbound&quot;],
           maxima: vector(taxiway-count, taxiway-count),
           capacity: capacity, physical-size: taxiway-size);
  let runway = make(&lt;runway&gt;, id: &quot;11R-29L&quot;, capacity: capacity,
                    physical-size: runway-size);
  let keystone-air = make(&lt;airline&gt;, name: &quot;Keystone Air&quot;, code: &quot;KN&quot;);
  let flights
    = map(method (fn) 
          make(&lt;flight&gt;, airline: keystone-air, number: fn) end,
          *flight-numbers*); 
</TD></TR><TR VALIGN=TOP><TD>  let aircraft
    = map(method (aircraft-flight, aircraft-distance, aircraft-heading,
                  aircraft-altitude, aircraft-id)
            make(&lt;b707&gt;, 
                 flight: aircraft-flight,
                 current-position:
                   make(&lt;relative-position&gt;,
                        distance: aircraft-distance,
                        angle: 
                          make(&lt;relative-angle&gt;,
                               total-seconds: 
                                 encode-total-seconds
                                   (aircraft-heading, 0, 0))),
                 altitude: aircraft-altitude,
                 id: aircraft-id,
                 transition: make(&lt;aircraft-transition&gt;,
                                  arrival: position-report-time));
          end,
</TD></TR><TR VALIGN=TOP><TD>          flights, *aircraft-distances*, *aircraft-headings*,
          *aircraft-altitudes*, *aircraft-ids*); 
</TD></TR><TR VALIGN=TOP><TD>  let airport
    = make(&lt;airport&gt;,
           name: &quot;Belefonte Airport&quot;,
           code: &quot;BLA&quot;,
           current-position:
             make(&lt;absolute-position&gt;,
                  latitude:
                    make(&lt;latitude&gt;,
                         total-seconds: encode-total-seconds(40, 57, 43),
                         direction: #&quot;north&quot;),
                  longitude:
                    make(&lt;longitude&gt;,
                         total-seconds: encode-total-seconds(77, 40, 24),
                         direction: #&quot;west&quot;))); 
</TD></TR><TR VALIGN=TOP><TD>  let sky = make(&lt;sky&gt;, inbound-aircraft: aircraft, airport: airport,
                 id: concatenate(&quot;over &quot;, airport.code));
  airport.sky-above := sky;
  runway.connected-to := vector(taxiway, sky);
  let taxiway-vector = vector(taxiway);
  for (gate in gates)
    gate.connected-to := taxiway-vector;
  end for;
  let runway-vector = vector(runway);
  taxiway.connected-to := concatenate(runway-vector, gates);
  sky.connected-to := runway-vector;
  airport;
end method build-simple-airport; 
</TD></TR><TR VALIGN=TOP><TD>define method test-airport () =&gt; (last-transition :: &lt;time-of-day&gt;)
  process-aircraft(build-simple-airport());
end method test-airport; 
</TD></TR></TABLE></PRE>
<P> Now, we show the result of running <CODE>test-airport</CODE>:</P>
<PRE>
<I>? </I>test-airport():
<I>Detailed aircraft schedule for Airport BLA
6:00: Flight KN 62 at Runway 11R-29L
6:02: Flight KN 62 at Taxiway Echo
6:02: Flight KN 7 at Runway 11R-29L
6:03: Flight KN 62 at Gate A1
6:04: Flight KN 7 at Taxiway Echo
6:05: Flight KN 7 at Gate A2
6:28: Flight KN 29 at Runway 11R-29L
6:30: Flight KN 29 at Taxiway Echo
6:37: Flight KN 62 at Taxiway Echo
6:37: Flight KN 29 at Gate A1
6:38: Flight KN 62 at Runway 11R-29L
6:39: Flight KN 7 at Taxiway Echo
6:42: Flight KN 62 at Sky over BLA
6:42: Flight KN 7 at Runway 11R-29L
6:46: Flight KN 7 at Sky over BLA
7:11: Flight KN 29 at Taxiway Echo
7:12: Flight KN 29 at Runway 11R-29L
7:16: Flight KN 29 at Sky over BLA
7:16: Flight KN 12 at Runway 11R-29L
7:18: Flight KN 12 at Taxiway Echo
7:18: Flight KN 18 at Runway 11R-29L</I>
<I>7:19: Flight KN 12 at Gate A1
7:20: Flight KN 18 at Taxiway Echo
7:20: Flight KN 44 at Runway 11R-29L
7:21: Flight KN 18 at Gate A2
7:22: Flight KN 44 at Taxiway Echo
7:53: Flight KN 12 at Taxiway Echo
7:53: Flight KN 44 at Gate A1
7:54: Flight KN 12 at Runway 11R-29L
7:55: Flight KN 18 at Taxiway Echo
7:58: Flight KN 12 at Sky over BLA
7:58: Flight KN 18 at Runway 11R-29L
8:02: Flight KN 18 at Sky over BLA
8:27: Flight KN 44 at Taxiway Echo
8:28: Flight KN 44 at Runway 11R-29L
8:32: Flight KN 44 at Sky over BLA
{class &lt;TIME-OF-DAY&gt;}</I>
</PRE>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_272.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_270.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
