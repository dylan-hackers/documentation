<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_145.HTM">
<LINK REL=PREV HREF="DB_152.HTM">
<LINK REL=NEXT HREF="DB_154.HTM">
<TITLE>11.3.8   A sequence copier that can copy a portion of a sequence</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING153></A>

<DIV>
<P><A HREF="DB_154.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_152.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING153-0></A>
<H1>11.3.8   <A NAME=MARKER-9-415></A>A sequence copier that can copy a portion of a sequence</H1>
<P> The <A NAME=MARKER-2-416></A><CODE>copy-sequence</CODE> generic function provided by Dylan actually takes keyword arguments that allow only a portion of the sequence to be copied. Here is an example:</P>
<PRE>
<I>?</I> copy-sequence(&quot;airport&quot;, start: 3);
<I>&quot;port&quot;</I>
<I>?</I> copy-sequence(&quot;snow&quot;, start: 1, end: 3);
<I>&quot;no&quot;</I>
</PRE>
<P> In the following, we use a <CODE>for</CODE> loop with two iteration clauses to implement the more flexible version of the general purpose <CODE>my-copy-sequence</CODE>:</P>
<PRE>
define method my-copy-sequence 
    (old-sequence :: &lt;sequence&gt;, 
     #key start = 0, end: limit = old-sequence.size)
 =&gt; (new-sequence :: &lt;sequence&gt;)
  let new-sequence = make(type-for-copy(old-sequence), size: limit - start);
  for (source-index from start below limit,
       destination-index from 0)
    new-sequence[destination-index] := old-sequence[source-index];
  end for;
  new-sequence;
end method my-copy-sequence;
</PRE>
<P> In the preceding example, we force the keyword parameter <CODE>end:</CODE> to bind the variable <CODE>limit</CODE>, rather than binding <CODE>end</CODE>. It is illegal to use <CODE>end</CODE> as a variable name, because <CODE>end</CODE> is one of a few reserved words in Dylan. In the body of the <CODE>for</CODE> loop, <CODE>source-index</CODE> will range from <CODE>start</CODE> to 1 less than <CODE>limit</CODE>, and <CODE>destination-index</CODE> will range from 0 to 1 less then <CODE>limit</CODE> minus <CODE>start</CODE>, which is the length of the new sequence being created.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_154.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_152.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
