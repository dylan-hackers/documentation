<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_252.HTM">
<LINK REL=PREV HREF="DB_254.HTM">
<LINK REL=NEXT HREF="DB_256.HTM">
<TITLE>16.1.3   Adding and removing elements</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING255></A>

<DIV>
<P><A HREF="DB_256.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_254.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING255-0></A>
<H1>16.1.3   <A NAME=MARKER-9-694></A>Adding and removing elements</H1>
<P> </P>
<TABLE BORDER=1><TR VALIGN=TOP><TH><P> The <CODE>sorted-sequence.dylan</CODE> file. <I>(continued)</I></P>
</TH></TR><TR VALIGN=TOP><TD><PRE>
<I>// Add an element to the sorted sequence
</I>define method add! 
    (sorted-sequence :: &lt;sorted-sequence&gt;, new-element :: &lt;object&gt;) 
 =&gt; (sorted-sequence :: &lt;sorted-sequence&gt;)
  let element-value = sorted-sequence.value-function;
  let compare = sorted-sequence.comparison-function;
  add!(sorted-sequence.data, new-element);
  sorted-sequence.data 
    := sort!(sorted-sequence.data, 
             test: method (e1, e2) 
                     compare(element-value(e1), element-value(e2))
                   end);
  sorted-sequence;
end method add!; 
</TD></TR><TR VALIGN=TOP><TD><I>// Remove the item at the top of the sorted sequence
</I>define method pop (sorted-sequence :: &lt;sorted-sequence&gt;) 
    =&gt; (top-of-sorted-sequence :: &lt;object&gt;)
  let data-vector = sorted-sequence.data;
  let top-of-sorted-sequence = data-vector[0];
  let sorted-sequence-size = data-vector.size;
  if (empty?(sorted-sequence))
    error(&quot;Trying to pop empty sorted-sequence %=.&quot;, sorted-sequence); 
</TD></TR><TR VALIGN=TOP><TD>  else
<I>    // Shuffle up existing data, removing the top element from the 
    // sorted sequence
</I>    for (i from 0 below sorted-sequence-size - 1)
      data-vector[i] := data-vector[i + 1];
    end for;
<I>    // Decrease the size of the data vector, and return the top element
</I>    data-vector.size := sorted-sequence-size - 1;
    top-of-sorted-sequence;
  end if;
end method pop; 
</TD></TR><TR VALIGN=TOP><TD><I>// Remove a particular element from the sorted sequence
</I>define method remove!
    (sorted-sequence :: &lt;sorted-sequence&gt;, value :: &lt;object&gt;, 
     #key test = \==, count = #f)
 =&gt; (sorted-sequence :: &lt;sorted-sequence&gt;)
  let data-vector = sorted-sequence.data;
  let sorted-sequence-size = data-vector.size;
  for (deletion-point from 0,
<I>        // If we have reached the end of the sequence, or we have reached
        // the user-specified limit, we are done
        // Note that specifying a bound in the preceding clause for
        //deletion-point does not work, because bounds are computed only
        // once, and we change sorted-sequence-size in the body
</I>       until: (deletion-point &gt;= sorted-sequence-size) 
              | (count &amp; count = 0)) 
<I>    // Otherwise, if we found a matching element, remove it from the 
    // sorted sequence.
</I>    if (test(data-vector[deletion-point], value))
      for (i from deletion-point below sorted-sequence-size - 1)
        data-vector[i] := data-vector[i + 1]
      end for;
      sorted-sequence-size 
         := (data-vector.size := sorted-sequence-size - 1);
      if (count) count := count - 1 end;
    end if;
  end for;
  sorted-sequence;
end method remove!; 
</TD></TR></TABLE></PRE>
<P> The <CODE>remove!</CODE> method uses a form of the <CODE>for</CODE> loop that includes an <CODE>until:</CODE> clause, much like the <CODE>my-copy-sequence</CODE> method defined in <A HREF="DB_148.HTM#MARKER-9-402">Section 11.3.3, page 144</A>. Note that all termination checks are tested prior to the execution of the body.</P>
<P>Although the <CODE>pop</CODE> method is not used in the airport application, it is included for completeness. We could make the <CODE>pop</CODE> method faster by storing the data elements in reverse order; however, that would lead to either odd behavior or odd implementation of the <CODE>element</CODE> function on sorted sequences.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_256.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_254.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
