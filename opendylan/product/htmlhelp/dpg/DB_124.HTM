<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_122.HTM">
<LINK REL=PREV HREF="DB_123.HTM">
<LINK REL=NEXT HREF="DB_125.HTM">
<TITLE>10.2.2   Setter methods</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING124></A>

<DIV>
<P><A HREF="DB_125.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_123.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING124-0></A>
<H1>10.2.2   <A NAME=MARKER-9-327></A>Setter methods</H1>
<P> In most cases, the getter and setter methods that Dylan defines for each slot are perfectly adequate. In certain cases, however, you might want to change the way a getter or setter works. </P>
<P>For example, we can define a setter method to solve a problem in our time library. The class <CODE>&lt;time-of-day&gt;</CODE> inherits the <CODE>total-seconds</CODE> slot from the class <CODE>&lt;sixty-unit&gt;</CODE>. The type of the slot is <CODE>&lt;integer&gt;</CODE>. However, the semantics of <CODE>&lt;time-of-day&gt;</CODE> state that the <CODE>total-seconds</CODE> should not be less than 0. We can define a setter method for <CODE>&lt;time-of-day&gt;</CODE> to ensure that the new value for the total-seconds slot is 0 or greater. </P>
<P>In our setter method, we will use the type defined in <A HREF="DB_112.HTM#MARKER-9-295">Section 9.2, page 110</A>, and repeated here:</P>
<PRE>
<I>// Define nonnegative integers as integers that are &gt;= zero
</I>define constant &lt;nonnegative-integer&gt; = limited(&lt;integer&gt;, min: 0);
</PRE>
<P> The setter method is as follows:</P>
<PRE>
define method total-seconds-setter
    (total-seconds :: &lt;integer&gt;, time :: &lt;time-of-day&gt;)
 =&gt; (total-seconds :: &lt;nonnegative-integer&gt;)
  if (total-seconds &gt;= 0)
    next-method();
  else
    error(&quot;%d is invalid. total-seconds cannot be negative.&quot;, total-seconds);
  end if;
end method total-seconds-setter;
</PRE>
<P> When the setter for the <CODE>total-seconds</CODE> slot is called with an instance of <CODE>&lt;time-of-day&gt;</CODE>, the preceding method will be invoked, because it is more specific than the method that Dylan generated on the <CODE>&lt;sixty-unit&gt;</CODE> class. If the new value for the <CODE>total-seconds</CODE> slot is valid (that is, is greater than or equal to 0), then this method calls <CODE>next-method</CODE>, which invokes the setter method on <CODE>&lt;sixty-unit&gt;</CODE>. If the new value is less than 0, an error is signaled. </P>
<P>The following example show what happens when you call <CODE>total-seconds-setter</CODE> with a negative value for <CODE>total-seconds</CODE>:</P>
<PRE>
<I>? </I>begin
    let test-time-of-day = make(&lt;time-of-day&gt;);
    test-time-of-day.total-seconds := -15;
  end;
<I>ERROR: -15 is invalid. total-seconds cannot be negative.</I>
</PRE>
<P> This setter method ensures that no one can assign an invalid value to the slot. For completeness, we must also ensure that no one can initialize the slot to an invalid value. The way to do that is to define an <CODE>initialize</CODE> method, as shown in <A HREF="DB_126.HTM#MARKER-9-331">Section 10.3</A>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_125.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_123.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
