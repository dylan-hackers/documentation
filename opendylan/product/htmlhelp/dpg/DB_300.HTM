<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_295.HTM">
<LINK REL=PREV HREF="DB_299.HTM">
<LINK REL=NEXT HREF="DB_301.HTM">
<TITLE>19.5   Enumerations</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING300></A>

<DIV>
<P><A HREF="DB_301.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_299.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING300-0></A>
<H1>19.5   <A NAME=MARKER-9-773></A>Enu<A NAME=MARKER-2-774></A>merations</H1>
<P> Many languages provide enumeration types both to enforce program correctness and to provide more compact representation of multiple-choice values. Dylan does not have a built-in enumeration type, but you can easily construct enumerations using the <A NAME=MARKER-2-775></A><CODE>type-union</CODE> and <A NAME=MARKER-2-776></A><CODE>singleton</CODE> type constructors.</P>
<P>For example, consider the <CODE>&lt;latitude&gt;</CODE> and <CODE>&lt;longitude&gt;</CODE> classes, where there are only two valid values for the <CODE>direction</CODE> slot in each class. Rather than enforcing the restrictions programmatically, as we did in <A HREF="DB_134.HTM#MARKER-9-352">Section 10.6, page 128</A>, we can create types that do the job for us:</P>
<PRE>
define abstract class &lt;directed-angle&gt; (&lt;sixty-unit&gt;)
  slot direction :: &lt;symbol&gt;, required-init-keyword: direction:;
end class &lt;directed-angle&gt;;
define constant &lt;latitude-direction&gt; 
  = type-union(singleton(#&quot;north&quot;), singleton(#&quot;south&quot;));
define class &lt;latitude&gt; (&lt;directed-angle&gt;)
  keyword direction:, type: &lt;latitude-direction&gt;;
end class &lt;latitude&gt;;
define constant &lt;longitude-direction&gt; 
  = type-union(singleton(#&quot;east&quot;), singleton(#&quot;west&quot;));
define class &lt;longitude&gt; (&lt;directed-angle&gt;)
  keyword direction:, type: &lt;longitude-direction&gt;;
end class &lt;longitude&gt;;
</PRE>
<P> Here, the abstract superclass specifies that the read-only slot <CODE>direction</CODE> must be a <CODE>&lt;symbol&gt;</CODE>, and that it must be initialized when an instance is created with the keyword <CODE>direction:</CODE>. The constant <CODE>&lt;latitude-direction&gt;</CODE> is a type specification that permits only the symbol <CODE>#&quot;north&quot;</CODE> or the symbol <CODE>#&quot;south&quot;</CODE>. The class <CODE>&lt;latitude&gt;</CODE> specifies that, when an instance of <CODE>&lt;latitude&gt;</CODE> is made, the initial value must be of the <CODE>&lt;latitude-direction&gt;</CODE> type. We handled the longitude case similarly.</P>
<P>The use of <CODE>type-union</CODE> and <CODE>singleton</CODE> to create enumeration types in this fashion is common enough that the function <A NAME=MARKER-2-777></A><CODE>one-of</CODE> is usually available in a utility library as a shorthand:</P>
<PRE>
define constant one-of 
  = method (#rest objects)
     apply(type-union, map(singleton, objects))
    end method;
</PRE>
<P> With this abbreviation, the direction types can be written more compactly:</P>
<PRE>
define constant &lt;latitude-direction&gt; = one-of(#&quot;north&quot;, #&quot;south&quot;);
define constant &lt;longitude-direction&gt; = one-of(#&quot;east&quot;, #&quot;west&quot;);
</PRE>
<P> Some Dylan compilers will recognize the idiomatic use of <CODE>type-union</CODE> and <BR><CODE>singleton</CODE> to represent such enumerations more compactly. For instance, a compiler could represent the direction slot of a latitude or longitude as a single bit, using the getter and setter functions to translate back and forth to the appropriate symbol.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_301.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_299.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
