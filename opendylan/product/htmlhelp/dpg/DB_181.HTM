<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_174.HTM">
<LINK REL=PREV HREF="DB_180.HTM">
<LINK REL=NEXT HREF="DB_182.HTM">
<TITLE>12.2.7   Keyword-argument checking</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING181></A>

<DIV>
<P><A HREF="DB_182.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_180.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING181-0></A>
<H1>12.2.7   <A NAME=MARKER-9-536></A>Keyword-argument checking</H1>
<P> When a function is called, Dylan determines which keyword arguments<A NAME=MARKER-2-537></A>, if any, are permitted for that function call. The set of permitted keyword arguments depends on whether or not a generic function is being called:</P>
<UL>
<LI><P>If a method is called directly, rather than through a generic function, the specific keywords in the method's parameter list are permitted. If the parameter list includes <CODE>#all-k<A NAME=MARKER-2-538></A>eys</CODE>, any keyword argument is permitted.</P>
<LI><P>If a generic function is called, all the specific keywords in the parameter lists of all <B>applicable<A NAME=MARKER-2-539></A></B> methods are permitted. If the parameter list of the generic function or of <I>any</I> applicable method includes <CODE>#all-keys</CODE>, any keyword argument is permitted.</P>
</UL>
<P> When a generic function is called, one of its methods is <B>applicable</B> if every required argument is an instance of the type of the corresponding parameter of the method. For more information on applicable methods, see <A HREF="DB_75.HTM#MARKER-9-224">Section 5.5, page 63</A>.</P>
<P>Consider the following definitions:</P>
<PRE>
define generic g (arg1 :: &lt;real&gt;, #key);
<I>// Method 1
</I>define method g (arg1 :: &lt;real&gt;, #key real-key)
  ...
end method g;
<I>// Method 2
</I>define method g (arg1 :: &lt;float&gt;, #key float-key)
  ...
end method g;
<I>// Method 3
</I>define method g (arg1 :: &lt;integer&gt;, #key integer-key)
  ...
end method g;
</PRE>
<P> Now, if we call the generic function <CODE>g</CODE> with an instance of <CODE>&lt;float&gt;</CODE>, we can supply the keyword arguments <CODE>real-key:</CODE> and <CODE>float-key:</CODE>, because the methods that have those keyword parameters are both applicable. If we call <CODE>g</CODE> with an instance of <CODE>&lt;integer&gt;</CODE>, we can supply the keyword arguments <CODE>real-key:</CODE> and <CODE>integer-key:</CODE>.</P>
<P>Suppose that, in this same example, we call the generic function <CODE>g</CODE> with an instance of <CODE>&lt;float&gt;</CODE>, and supply the keyword arguments <CODE>real-key:</CODE> and <CODE>float-key:</CODE>. Method 2 is most specific, and is called as a result of Dylan's method dispatch. But method 2 does not have a <CODE>real-key:</CODE> parameter. If we were calling this method directly, Dylan would signal an error. In this case, method 2 simply ignores the <CODE>real-key:</CODE> argument, because Dylan checks keyword arguments for a generic function call as a whole, rather than for a particular method chosen as a result of method dispatch.</P>
<P>There is an important subtlety of keyword-parameter specifications to note in this example. Because of the rules for parameter-list congruence, the generic function and all its methods must accept keyword arguments -- that is, they must all have <CODE>#k<A NAME=MARKER-2-540></A>ey</CODE> in their parameter lists. Notice that we terminated the generic function's parameter list with <CODE>#key</CODE>. This use indicates that the generic function permits -- but does not require -- individual methods to specify keyword parameters.</P>
<P>Suppose that we had instead terminated the generic function's parameter list with <CODE>#key, #all-k<A NAME=MARKER-2-541></A>eys</CODE>. This use also would have permitted, but would not have required, individual methods to specify keyword parameters. But it also would have allowed a caller of the generic function to supply <I>any</I> keyword argument. In the earlier example, only a small set of keyword arguments was permitted, and the members of the set varied with the applicable methods.</P>
<P>In general, when you define a generic function or a method that accepts keyword arguments, it is advisable not to specify <CODE>#all-keys</CODE> unnecessarily, because doing so defeats Dylan's keyword-argument checking. If a method needs to accept keyword arguments because of the rules of parameter-list congruence, but does not need to recognize any keywords itself, you should terminate its parameter list with <CODE>#key</CODE>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_182.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_180.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
