<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_329.HTM">
<LINK REL=PREV HREF="DB_336.HTM">
<LINK REL=NEXT HREF="DB_338.HTM">
<TITLE>21.8   Summary</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING337></A>

<DIV>
<P><A HREF="DB_338.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_336.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING337-0></A>
<H1>21.8   Summary</H1>
<P> In this chapter, we introduced macros by explaining their purpose as a language-extension tool, and by showing a range of Dylan macros. Macros can be useful when you want to tailor the language to express a particular problem domain more concisely. </P>
<P><A HREF="#MARKER-9-856">Table 21.1</A> summarizes how constraints control pattern-variable matches. </P>
<TABLE BORDER=1><CAPTION><P>Table 21.1   <A NAME=MARKER-9-856></A>Pattern <A NAME=MARKER-2-857></A>const<A NAME=MARKER-2-858></A>raints.</P>
</CAPTION><TR VALIGN=TOP><TH><P>Constraint</P>
</TH><TH><P>Matches</P>
</TH></TR><TR VALIGN=TOP><TD><P> <CODE>token</CODE></P>
</TD><TD><P> a lexeme (a Dylan word), including literal strings, symbols, and numbers and punctuation</P>
</TD></TR><TR VALIGN=TOP><TD><P> <CODE>name</CODE></P>
</TD><TD><P> a Dylan identifier, including reserved identifiers, such as <CODE>define</CODE>, <CODE>end</CODE>, and operators such as <CODE>+</CODE>, or <CODE>*</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P> <CODE>variable</CODE></P>
</TD><TD><P> either <CODE>variable</CODE> or <CODE>variable :: &lt;type&gt;</CODE>, useful for macros that mimic variable binding (automatically drops the <CODE>:: &lt;type&gt;</CODE>, as appropriate on substitution)</P>
</TD></TR><TR VALIGN=TOP><TD><P> <CODE>expression</CODE></P>
</TD><TD><P> a well-formed Dylan expression -- a constant, such as <CODE>37</CODE>; a variable, such as <CODE>*my-position*</CODE>; a function call, such as <CODE>get-current-time()</CODE>; a statement, such as <CODE>if (test) 12 else try() end</CODE>; or a binary operand series, such as <CODE>x + y * z</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P> <CODE>body</CODE></P>
</TD><TD><P> a well-formed Dylan body -- a sequence of semicolon-separated constituents, each constituent being either a definition, local declaration, or expression</P>
</TD></TR><TR VALIGN=TOP><TD><P> <CODE>case-body</CODE></P>
</TD><TD><P> a Dylan <CODE>case</CODE> statement body</P>
</TD></TR><TR VALIGN=TOP><TD><P> <CODE>*</CODE></P>
</TD><TD><P> any sequence of Dylan tokens and parsed forms</P>
</TD></TR></TABLE><A NAME=LINK-macros-lastpage></A>
</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_338.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_336.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
