<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_232.HTM">
<LINK REL=PREV HREF="DB_233.HTM">
<LINK REL=NEXT HREF="DB_235.HTM">
<TITLE>14.3.2   The time implementation file</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING234></A>

<DIV>
<P><A HREF="DB_235.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_233.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING234-0></A>
<H1>14.3.2   The <EM><A NAME=MARKER-9-668></A>time</EM> implementation file</H1>
<P> </P>
<TABLE BORDER=1><TR VALIGN=TOP><TH><P> The <CODE>time</CODE> implementation file: <CODE>time.dylan</CODE>.  </P>
</TH></TR><TR VALIGN=TOP><TD><PRE>
Module: time-implementation
<I>// Define nonnegative integers as integers that are &gt;= zero
</I>define constant &lt;nonnegative-integer&gt; = limited(&lt;integer&gt;, min: 0);
define abstract class &lt;time&gt; (&lt;sixty-unit&gt;)
end class &lt;time&gt;;
</TD></TR><TR VALIGN=TOP><TD>define method say (time :: &lt;time&gt;) =&gt; ()
  let (hours, minutes) = decode-total-seconds(time); 
  format-out(&quot;%d:%s%d&quot;, 
             hours, if (minutes &lt; 10) &quot;0&quot; else &quot; &quot; end, minutes);
end method say;
</TD></TR><TR VALIGN=TOP><TD><I>// A specific time of day from 00:00 (midnight) to before 24:00 (tomorrow)
</I>define class &lt;time-of-day&gt; (&lt;time&gt;)
end class &lt;time-of-day&gt;;
</TD></TR><TR VALIGN=TOP><TD>define method total-seconds-setter
    (total-seconds :: &lt;integer&gt;, time :: &lt;time-of-day&gt;)
 =&gt; (total-seconds :: &lt;nonnegative-integer&gt;)
  if (total-seconds &gt;= 0)
    next-method();
  else
    error(&quot;%d cannot be negative&quot;, total-seconds);
  end if;
end method total-seconds-setter; 
</TD></TR><TR VALIGN=TOP><TD>define method initialize (time :: &lt;time-of-day&gt;, #key) 
  next-method();
  if (time.total-seconds &lt; 0)
    error(&quot;%d cannot be negative&quot;, time.total-seconds);
  end if;
end method initialize; 
</TD></TR><TR VALIGN=TOP><TD><I>// A relative time between -24:00 and +24:00
</I>define class &lt;time-offset&gt; (&lt;time&gt;)
end class &lt;time-offset&gt;;
</TD></TR><TR VALIGN=TOP><TD>define method past? (time :: &lt;time-offset&gt;) =&gt; (past? :: &lt;boolean&gt;)
  time.total-seconds &lt; 0;
end method past?;
</TD></TR><TR VALIGN=TOP><TD>define method say (time :: &lt;time-offset&gt;) =&gt; ()
  format-out(&quot;%s &quot;, if (time.past?) &quot;minus&quot; else &quot;plus&quot; end);
  next-method();
end method say; 
</TD></TR><TR VALIGN=TOP><TD>define method \+ 
    (offset1 :: &lt;time-offset&gt;, offset2 :: &lt;time-offset&gt;) 
 =&gt; (sum :: &lt;time-offset&gt;)	<I> 
</I>  let sum = offset1.total-seconds + offset2.total-seconds; 
  make(&lt;time-offset&gt;, total-seconds: sum); 
end method \+;	<I> </I>
</TD></TR><TR VALIGN=TOP><TD><A NAME=MARKER-9-663></A>define method \+ 
    (offset :: &lt;time-offset&gt;, time-of-day :: &lt;time-of-day&gt;)
 =&gt; (sum :: &lt;time-of-day&gt;)
  make(&lt;time-of-day&gt;, 
       total-seconds: offset.total-seconds + time-of-day.total-seconds);
end method \+;
</TD></TR><TR VALIGN=TOP><TD>define method \+ (time-of-day :: &lt;time-of-day&gt;, offset :: &lt;time-offset&gt;)
 =&gt; (sum :: &lt;time-of-day&gt;)
  offset + time-of-day;
end method \+;
</TD></TR><TR VALIGN=TOP><TD>define method \&lt; (time1 :: &lt;time-of-day&gt;, time2 :: &lt;time-of-day&gt;)
  time1.total-seconds &lt; time2.total-seconds;
end method \&lt;; 
</TD></TR><TR VALIGN=TOP><TD>define method \&lt; (time1 :: &lt;time-offset&gt;, time2 :: &lt;time-offset&gt;)
  time1.total-seconds &lt; time2.total-seconds;
end method \&lt;; 
</TD></TR><TR VALIGN=TOP><TD>define method \= (time1 :: &lt;time-of-day&gt;, time2 :: &lt;time-of-day&gt;)
  time1.total-seconds = time2.total-seconds;
end method \=; 
</TD></TR><TR VALIGN=TOP><TD>define method \= (time1 :: &lt;time-offset&gt;, time2 :: &lt;time-offset&gt;)
  time1.total-seconds = time2.total-seconds;
end method \=; 
</TD></TR><TR VALIGN=TOP><TD><I>// Two useful time constants
</I>define constant $midnight
  = make(&lt;time-of-day&gt;, total-seconds: encode-total-seconds(0, 0, 0)); 
</TD></TR><TR VALIGN=TOP><TD>define constant $tomorrow
  = make(&lt;time-of-day&gt;,
         total-seconds: encode-total-seconds(24, 0, 0)); 
</TD></TR></TABLE></PRE>
<P> </P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_235.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_233.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
