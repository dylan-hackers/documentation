<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_192.HTM">
<LINK REL=PREV HREF="DB_196.HTM">
<LINK REL=NEXT HREF="DB_198.HTM">
<TITLE>13.2.5   Simple example of libraries and modules</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING197></A>

<DIV>
<P><A HREF="DB_198.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_196.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING197-0></A>
<H1>13.2.5   Simple example of libraries and modules</H1>
<P> To illustrate these concepts, we repeat the definition of the <CODE>library.dylan</CODE> file, first shown in <A HREF="DB_18.HTM#MARKER-9-53">Chapter 2,  <I>Quick Start</I></A>. Here, we have used a more verbose, but also more precise, format.</P>
<P> </P>
<TABLE BORDER=1><TR VALIGN=TOP><TH><P> The library file: <CODE>library.dylan</CODE>.</P>
</TH></TR><TR VALIGN=TOP><TD><PRE>
module: dylan-user
define library hello
  use dylan, import: { dylan }; 
  use format-out, import: { format-out };
end library hello;
define module hello
  use dylan, import: all; 
  use format-out, import: all;
end module hello; 
</TD></TR></TABLE></PRE>
<P> </P>
<P> The first line of <CODE>library.dylan</CODE> states that the expressions and definitions in this file are in the <A NAME=MARKER-2-624></A><CODE>dylan-user</CODE> module. In this predefined module, you define the modules and library that make up your component or program. Every library has a unique <CODE>dylan-user</CODE> module. In the file <CODE>library.dylan</CODE>, we define a library named <CODE>hello</CODE> and a module named <CODE>hello</CODE>.</P>
<P>The module definition names the other modules whose names the <CODE>hello</CODE> module will use. In this case, the <CODE>hello</CODE> module uses the <CODE>dylan</CODE> and <CODE>format-out</CODE> modules. Here, we have explicitly stated that we are importing all the names from the modules that we use -- using the <CODE>import: all</CODE> clause is not strictly necessary, because it is the default that is used if we do not specify what to import. By using another module, we import the names exported from that module, making them available in our namespace. For example, <CODE>format-out</CODE> is exported from the <CODE>format-out</CODE> module, so the <CODE>use format-out</CODE> clause enables our program to call the <CODE>format-out</CODE> function. The <CODE>use dylan</CODE> clause in the module definition makes available all the built-in Dylan language elements exported from the <CODE>dylan</CODE> module. When we define a module, it must <CODE>use</CODE> all the modules that export the definitions used by the definitions in our module.</P>
<P>The library definition tells the compiler which other libraries our program uses. Here, we have explicitly stated that we are interested in only the <CODE>dylan</CODE> and <CODE>format-out</CODE> modules from these other libraries. This clause is not strictly necessary, since the module definition tells the compiler which modules it uses; but it is good practice to document our intent. For example, the <CODE>format-out</CODE> module is in the <CODE>format-out</CODE> library. Therefore, our <CODE>hello</CODE> library must use the <CODE>format-out</CODE> library, and must import the <CODE>format-out</CODE> module for the <CODE>hello</CODE> module to use the <CODE>format-out</CODE> module. Similarly, the <CODE>dylan</CODE> module is in the <CODE>dylan</CODE> library, and therefore our <CODE>hello</CODE> library must use the <CODE>dylan</CODE> library and import the <CODE>dylan</CODE> module in order for the <CODE>hello</CODE> module to use the <CODE>dylan</CODE> module. When we define a library, it must <CODE>use</CODE> all the libraries that export the modules used by the modules in our library.</P>
<P>The module definition also specifies which variables and constants are exported from the module for use by other modules. The library definition specifies which modules are exported from the library for use by other libraries. In our simple example, the <CODE>hello</CODE> module exports no variables or constants, and the <CODE>hello</CODE> library exports no modules.</P>
<P><A HREF="#MARKER-9-580">Figure 13.1</A> illustrates the relationships between libraries and modules in our example program. In <A HREF="#MARKER-9-580">Figure 13.1</A>, and in the other figures in this chapter, we draw libraries as heavy bold boxes and modules as light boxes. We have tried to illustrate how libraries and modules build on one another through their "use" relationships. A library that uses another library is shown above the library that it uses, so we show the <CODE>hello</CODE> library above the <CODE>format-out</CODE> and <CODE>dylan</CODE> libraries. An exported module is illustrated as being on top of (overlapping) the library that </P>
<P> </P>
<TABLE BORDER=1><CAPTION><P>Figure 13.1   <A NAME=MARKER-9-580></A>Libraries (heavy boxes) and modules (light boxes) in "Hello, world". </P>
</CAPTION><TR VALIGN=TOP><TD><P> <A NAME=MARKER-10-581></A><IMG ALIGN=TOP SRC=DB19IM21.GIF></P>
</TD></TR></TABLE><P> exports it (we have also shaded them, to illustrate this overlap). And a module that uses another module is illustrated as being on top of (overlapping) the used module. Try to envision the modules as semitransparent overlays, layered up from the surface of the paper. Thus, the <CODE>hello</CODE> module overlays the <CODE>format-out</CODE> and <CODE>dylan</CODE> modules that it uses.</P>
<P>Note that we intentionally do not show all the modules in the <CODE>format-out</CODE> and <CODE>dylan</CODE> libraries in <A HREF="#MARKER-9-580">Figure 13.1</A>. The <CODE>format-out</CODE> and <CODE>dylan</CODE> libraries might well have other modules, but either those modules are not exported or our program does not use them. </P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_198.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_196.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
