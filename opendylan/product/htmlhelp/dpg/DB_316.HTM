<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=PREV HREF="DB_315.HTM">
<LINK REL=NEXT HREF="DB_317.HTM">
<TITLE>20 Exceptions</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING316></A>

<DIV>
<P><A HREF="DB_317.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_315.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>Dylan Programming</P>

</DIV>
<A NAME=HEADING316-0></A>
<H1>20 <A NAME=MARKER-9-818></A>Excep<A NAME=MARKER-2-819></A>tions</H1>
<P> An <B>exception</B> is an unexpected event that occurs during program execution (as opposed to problems detected during program compilation). One common type of exception is a violation of the contract of a function, such as attempting to divide a number by zero. Another example is an attempt to access an uninitialized slot, or certain cases of an attempt to violate the type constraint on a slot or variable (those that cannot be detected at compile time). Dylan detects all these exceptions itself. Sometimes, an application detects a violation of a contract that it defines. For example, in <A HREF="DB_134.HTM#MARKER-9-352">Section 10.6, page 128</A>, we defined methods that detected attempts to specify a longitude direction of anything other than east or west. (In <A HREF="DB_300.HTM#MARKER-9-773">Section 19.5, page 318</A>, we changed the application such that this particular application-detected exception was transformed into one that is detected by Dylan.)</P>
<P>When an an unusual event occurs in an application, there are many options available for responding to that event. The application can try to handle the situation in its own particular way, or it can use the <B>exception protocol</B> defined by Dylan. In this chapter, we explore several approaches to providing an exception protocol between parts of an application.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC --><DL>
<DL>
<DT><A REL=BELOW HREF="DB_317.HTM#HEADING317-0"><B>20.1  </B> - An informal exception protocol</A>
<DD>
<DT><A REL=BELOW HREF="DB_320.HTM#HEADING320-0"><B>20.2  </B> - A simple Dylan exception protocol</A>
<DD>
<DT><A REL=BELOW HREF="DB_325.HTM#HEADING325-0"><B>20.3  </B> - Additional exception mechanisms</A>
<DD>
<DT><A REL=BELOW HREF="DB_326.HTM#HEADING326-0"><B>20.4  </B> - Protected operations and the block construct</A>
<DD>
<DT><A REL=BELOW HREF="DB_328.HTM#HEADING328-0"><B>20.5  </B> - Summary</A>
<DD>
</DL>
</DL>


</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_317.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_315.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
