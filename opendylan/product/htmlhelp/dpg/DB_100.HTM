<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_99.HTM">
<LINK REL=PREV HREF="DB_99.HTM">
<LINK REL=NEXT HREF="DB_101.HTM">
<TITLE>7.7.1   Instantiable classes</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING100></A>

<DIV>
<P><A HREF="DB_101.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_99.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING100-0></A>
<H1>7.7.1   Instantiable classes</H1>
<P> A class that can be used as the first argument to <CODE>make</CODE> is an <B>instantiable</B> class. All concrete classes are instantiable. When you define an abstract class, Dylan does not provide a method for <CODE>make</CODE> that enables you to create direct instances of that class. Thus, if you call <CODE>make</CODE> on an abstract class, you get an error.</P>
<P>Even though an abstract class does not have direct instances, it is sometimes possible to use an abstract class as the first argument to <CODE>make</CODE>. In this case, the <CODE>make</CODE> function creates and returns a direct instance of a concrete subclass of the abstract class. In other words, <CODE>make</CODE> can return either a direct or an indirect instance of its first argument. </P>
<P>To make it possible for an abstract class to be provided as the first argument to <CODE>make</CODE>, you define the abstract class, and define one or more concrete subclasses of it. You then define a method for <CODE>make</CODE> that specializes its first parameter on the abstract class, and that returns an instance of one of its concrete subclasses. To define <CODE>make</CODE> methods, you need to use the <CODE>singleton</CODE> function to create a type whose only instance is the class itself; see <A HREF="DB_110.HTM#MARKER-9-288">Chapter 9,  <I>Nonclass Types</I></A>. Definition of <CODE>make</CODE> methods is an advanced topic that we do not cover in this book. </P>
<P>What is the reason for enabling users to call <CODE>make</CODE> on an abstract class? This flexibility allows a program that needs a general kind of object, represented by a superclass, to ask for an instance of the superclass without specifying the direct class of the instance. For example, a program might need to store data in a vector, but might not be concerned about the specific implementation of the vector that it uses. Such a program can create a vector by calling <CODE>make</CODE> with the argument <BR><CODE>&lt;vector&gt;</CODE>, and <CODE>make</CODE> will create an instance of a concrete subclass. The built-in <CODE>&lt;vector&gt;</CODE> class is abstract, but is instantiable. </P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_101.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_99.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
