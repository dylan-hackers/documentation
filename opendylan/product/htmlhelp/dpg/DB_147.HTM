<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_145.HTM">
<LINK REL=PREV HREF="DB_146.HTM">
<LINK REL=NEXT HREF="DB_148.HTM">
<TITLE>11.3.2   Iteration with for</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING147></A>

<DIV>
<P><A HREF="DB_148.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_146.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING147-0></A>
<H1>11.3.2   <A NAME=MARKER-9-400></A>Iteration with <A NAME=MARKER-2-401></A><EM>for</EM></H1>
<P> We can use the <CODE>for</CODE> to express concisely ia loop that increments a variable until a limit is reached.</P>
<PRE>
define method my-copy-sequence 
    (old-sequence :: &lt;sequence&gt;) =&gt; (new-sequence :: &lt;sequence&gt;)
  let new-sequence 
    = make(type-for-copy(old-sequence), size: old-sequence.size);
  for (index from 0 below old-sequence.size)             <I>// Iteration clause
</I>    new-sequence[index] := old-sequence[index];          <I>// Body
</I>  end for;                                               <I>// End of body
</I>  new-sequence;
end method my-copy-sequence;
</PRE>
<P> In the preceding example, the body is executed <CODE>old-sequence.size</CODE> times, with <CODE>index</CODE> bound to zero first, then rebound to one more than the previous value of <CODE>index</CODE> each time through the loop. The variable <CODE>index</CODE> is defined only within the body of the <CODE>for</CODE> iteration construct. The body of the <CODE>for</CODE> iteration construct begins after the iteration clause(s), and finishes with the matching <CODE>end</CODE>. For the <CODE>while</CODE> iteration construct shown in <A HREF="DB_146.HTM#MARKER-9-395">Section 11.3.1</A>, the body starts after the predicate and finishes with the matching <CODE>end</CODE>.</P>
<P>The <CODE>for</CODE> loop can have many different kinds of iteration clauses. In this section, we have shown a simple iteration over a series of numbers. In <A HREF="DB_148.HTM#MARKER-9-402">Section 11.3.3</A>, we use clauses that bind variables to initial values for the first time through a loop, and use expressions to rebind the variables for the second and subsequent times through the loop. We also demonstrate a clause that permits iteration to continue until an expression is true, both in <A HREF="DB_148.HTM#MARKER-9-402">Section 11.3.3</A> and <A HREF="DB_255.HTM#MARKER-9-694">Section 16.1.3, page 248</A>.</P>
<P>The <CODE>for</CODE> loop has a simple type of iteration clause that we can use to iterate over any Dylan collection. The airport example in <A HREF="DB_264.HTM#MARKER-9-710">Section 17.2.2, page 257</A>, demonstrates iteration over vectors using this kind of iteration clause.</P>
<P> </P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_148.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_146.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
