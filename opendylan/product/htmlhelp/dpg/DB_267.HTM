<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_260.HTM">
<LINK REL=PREV HREF="DB_266.HTM">
<LINK REL=NEXT HREF="DB_268.HTM">
<TITLE>17.3   The vehicle-dynamics.dylan file</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING267></A>

<DIV>
<P><A HREF="DB_268.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_266.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING267-0></A>
<H1>17.3   The <CODE>vehicle-dynamics.dylan</CODE> file</H1>
<P> The <CODE>vehicle-dynamics.dylan</CODE> file contains stubs for calculations that predict the behavior of the aircraft involved in the example. True aeronautical calculations are beyond the scope of this book.</P>
<P> </P>
<TABLE BORDER=1><TR VALIGN=TOP><TH><P> The <CODE>vehicle-dynamics.dylan</CODE> file.  </P>
</TH></TR><TR VALIGN=TOP><TD><PRE>
module: airport
<I>// We do not need to type these constants strongly, because the Dylan
// compiler will figure them out for us</I>
define constant $average-b707-brake-speed = 60.0;<I> // Miles per hour </I>
</TD></TR><TR VALIGN=TOP><TD>define constant $feet-per-mile = 5280.0;
</TD></TR><TR VALIGN=TOP><TD>define constant $average-b707-takeoff-speed = 60.0; <I>// Miles per hour</I> 
</TD></TR><TR VALIGN=TOP><TD>define constant $takeoff-pause-time = 120; <I>// Seconds</I>
</TD></TR><TR VALIGN=TOP><TD>define constant $average-b707-taxi-speed = 10.0;
</TD></TR><TR VALIGN=TOP><TD>define constant $average-b707-gate-turnaround-time
  = 34 * $seconds-per-minute; <I>// Seconds </I>
</TD></TR><TR VALIGN=TOP><TD><I>// Computes how long it will take an aircraft to reach an airport
</I>define method flying-time
    (aircraft :: &lt;aircraft&gt;, destination :: &lt;airport&gt;)
 =&gt; (duration :: &lt;time-offset&gt;)
<I>  // A simplistic calculation that assumes that the aircraft will
  // average a particular cruising speed for the trip
</I>  make(&lt;time-offset&gt;,
       total-seconds:
         ceiling/(distance-3d(aircraft, destination), 
                  aircraft.cruising-speed
                    / as(&lt;single-float&gt;, $seconds-per-hour)));
end method flying-time; 
</TD></TR><TR VALIGN=TOP><TD><I>// Computes the distance between an aircraft and an airport, 
// taking into account the altitude of the aircraft 
// Assumes the altitude of the aircraft is the height 
// above the ground level of the airport
</I>define method distance-3d
    (aircraft :: &lt;aircraft&gt;, destination :: &lt;airport&gt;)
 =&gt; (distance :: &lt;single-float&gt;)  <I>// Miles
  // Here, a squared plus b squared is equals to c squared, where c is the
  // hypotenuse, and a and b are the other sides of a right triangle
</I>  sqrt((aircraft.altitude / $feet-per-mile) ^ 2
       + distance-2d(aircraft.current-position,
                     destination.current-position) ^ 2);
end method distance-3d; 
</TD></TR><TR VALIGN=TOP><TD><I>// The distance between two positions, ignoring altitude
</I>define method distance-2d
    (position1 :: &lt;relative-position&gt;, position2 :: &lt;absolute-position&gt;)
 =&gt; (distance :: &lt;single-float&gt;) <I>// Miles
  // When we have a relative position for the first argument (the
  // aircraft), we assume the relative position is relative to the second
  // argument (the airport)
</I>  position1.distance;
end method distance-2d;
</TD></TR><TR VALIGN=TOP><TD><I>// It would be sensible to provide a distance-2d method that computed 
// the great-circle distance between two absolute positions
// Our example does not need this computation, which is
// beyond the scope of this book </I>
</TD></TR><TR VALIGN=TOP><TD><I>// The time it takes to go from the point of touchdown to the entrance
// to the taxiway
</I>define method brake-time 
    (aircraft :: &lt;b707&gt;, runway :: &lt;runway&gt;)
 =&gt; (duration :: &lt;time-offset&gt;)
  make(&lt;time-offset&gt;,
       total-seconds:
         ceiling/(runway.physical-size.length / $feet-per-mile,
                  $average-b707-brake-speed / $seconds-per-hour));
end method brake-time; 
</TD></TR><TR VALIGN=TOP><TD><I>// The time it takes to go from the entrance of the taxiway to the point
// of takeoff
</I>define method takeoff-time 
    (aircraft :: &lt;b707&gt;, runway :: &lt;runway&gt;)
 =&gt; (duration :: &lt;time-offset&gt;)
  make(&lt;time-offset&gt;,
       total-seconds:
         ceiling/(runway.physical-size.length / $feet-per-mile,
                  $average-b707-takeoff-speed / $seconds-per-hour)
           + $takeoff-pause-time);
end method takeoff-time; 
</TD></TR><TR VALIGN=TOP><TD><I>// The time it takes to taxi from the runway entrance across the taxiway
// to the gate
</I>define method gate-time 
    (aircraft :: &lt;b707&gt;, taxiway :: &lt;taxiway&gt;)
 =&gt; (duration :: &lt;time-offset&gt;)
  make(&lt;time-offset&gt;,
       total-seconds:
         ceiling/(taxiway.physical-size.length / $feet-per-mile,
                  $average-b707-taxi-speed / $seconds-per-hour));
end method gate-time; 
</TD></TR><TR VALIGN=TOP><TD><I>// The time it takes to taxi from the gate across the taxiway to the
// entrance of the runway
</I>define method runway-time 
    (aircraft :: &lt;b707&gt;, taxiway :: &lt;taxiway&gt;)
 =&gt; (duration :: &lt;time-offset&gt;)
  gate-time(aircraft, taxiway);
end method runway-time; 
</TD></TR><TR VALIGN=TOP><TD><I>// The time it takes to unload, service, and load an aircraft.
</I>define method gate-turnaround 
    (aircraft :: &lt;b707&gt;, gate :: &lt;gate&gt;) =&gt; (duration :: &lt;time-offset&gt;)
  make(&lt;time-offset&gt;, total-seconds: $average-b707-gate-turnaround-time);
end method gate-turnaround; 
</TD></TR></TABLE></PRE>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_268.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_266.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
