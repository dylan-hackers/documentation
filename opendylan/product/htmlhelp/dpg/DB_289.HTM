<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_288.HTM">
<LINK REL=PREV HREF="DB_288.HTM">
<LINK REL=NEXT HREF="DB_290.HTM">
<TITLE>18.4.1   Class precedence and method dispatch</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING289></A>

<DIV>
<P><A HREF="DB_290.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_288.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING289-0></A>
<H1>18.4.1   Class precedence and method dispatch</H1>
<P> To see how this problem for method dispatch can arise, we return to our airport example. Recall that we now have two slots representing vehicle cruising speed: <CODE>ground-cruising-speed</CODE> for <CODE>&lt;ground-vehicle&gt;</CODE> and <CODE>flying-cruising-speed</CODE> for <CODE>&lt;flying-vehicle&gt;</CODE>. Let's define a generic function, <CODE>say-cruising-speed</CODE>, to report the applicable cruising speed for each class:</P>
<PRE>
define generic say-cruising-speed (vehicle :: &lt;vehicle&gt;);
<I>// Method 1
</I>define method say-cruising-speed (vehicle :: &lt;flying-vehicle&gt;)
  format-out(&quot;Flying cruising speed: %d\n&quot;, vehicle.flying-cruising-speed);
end method say-cruising-speed;
<I>// Method 2
</I>define method say-cruising-speed (vehicle :: &lt;ground-vehicle&gt;)
  format-out(&quot;Ground cruising speed: %d\n&quot;, vehicle.ground-cruising-speed);
end method say-cruising-speed;
<I>// Method 3
</I>define method say-cruising-speed (vehicle :: &lt;vehicle&gt;)
  format-out(&quot;No cruising speed defined for type &lt;vehicle&gt;\n&quot;);
end method say-cruising-speed;
</PRE>
<P> Now, suppose that we call <CODE>say-cruising-speed</CODE> on an instance of <CODE>&lt;B707&gt;</CODE>. Which method does Dylan call? All three methods are applicable. Both method 1 and method 2 are more specific than is method 3. But Dylan cannot order methods 1 and 2 by specificity.</P>
<P>In this case, Dylan consults the class precedence list for the class of the argument. In our example, the class of the argument is <CODE>&lt;B707&gt;</CODE>. The <CODE>&lt;flying-vehicle&gt;</CODE> class takes precedence over the <CODE>&lt;ground-vehicle&gt;</CODE> class, because <CODE>&lt;flying-vehicle&gt;</CODE> precedes <CODE>&lt;ground-vehicle&gt;</CODE> in the list of direct superclasses for <CODE>&lt;aircraft&gt;</CODE>. Dylan calls method 1, which produces the following output:</P>
<PRE>
<I>Flying cruising speed: 368</I>
</PRE>
<P> Note that, if we had happened to list <CODE>&lt;ground-vehicle&gt;</CODE> before <CODE>&lt;flying-vehicle&gt;</CODE> in the list of direct superclasses for <CODE>&lt;aircraft&gt;</CODE>, Dylan would have called method 2, and we would have seen the following output:</P>
<PRE>
<I>Ground cruising speed: 45</I>
</PRE>
<P> In defining classes of aircraft, we did not intend for <CODE>&lt;flying-vehicle&gt;</CODE> characteristics to override <CODE>&lt;ground-vehicle&gt;</CODE> characteristics. But for method dispatch to work in the presence of multiple inheritance, Dylan must order subclasses and superclasses whenever it can.</P>
<P>How can we change our example to make <CODE>&lt;flying-vehicle&gt;</CODE> behavior add to, rather than override, <CODE>&lt;ground-vehicle&gt;</CODE> behavior? By using <CODE>next-method</CODE> in our <CODE>say-cruising-speed</CODE> methods for <CODE>&lt;flying-vehicle&gt;</CODE> and <CODE>&lt;ground-vehicle&gt;</CODE>, we can report all applicable kinds of cruising speed for any combination of either or both of those classes<CODE>.</CODE> To make this behavior work, we also change the <CODE>say-cruising-speed</CODE> method for <CODE>&lt;vehicle&gt;</CODE>, which will always be called last, to have no effect:</P>
<PRE>
<I>// Method 1
</I>define method say-cruising-speed (vehicle :: &lt;flying-vehicle&gt;)
  format-out(&quot;Flying cruising speed: %d\n&quot;, vehicle.flying-cruising-speed);
  next-method();
end method say-cruising-speed;
<I>// Method 2
</I>define method say-cruising-speed (vehicle :: &lt;ground-vehicle&gt;)
  format-out(&quot;Ground cruising speed: %d\n&quot;, vehicle.ground-cruising-speed);
  next-method();
end method say-cruising-speed;
<I>// Method 3
</I>define method say-cruising-speed (vehicle :: &lt;vehicle&gt;)
end method say-cruising-speed;
</PRE>
<P> Recall that, when Dylan decides which method to call, the result is a list of methods, sorted by specificity. When <CODE>say-cruising-speed</CODE> is called on an instance of <CODE>&lt;B707&gt;</CODE>, the list of methods is sorted in the following order: method 1, method 2, method 3. Dylan calls method 1. Then, as a result of the call to <CODE>next-method</CODE> in method 1, Dylan calls method 2. Finally, as a result of the call to <CODE>next-method</CODE> in method 1, Dylan calls method 3. The output we see is as follows:</P>
<PRE>
<I>Flying cruising speed: 368
Ground cruising speed: 45</I>
</PRE>
<P> Note that, if we called <CODE>say-cruising-speed</CODE> on an instance of <CODE>&lt;fuel-truck&gt;</CODE>, we would see the following output:</P>
<PRE>
<I>Ground cruising speed: 25</I>
</PRE>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_290.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_288.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
