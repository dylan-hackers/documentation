<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_167.HTM">
<LINK REL=PREV HREF="DB_171.HTM">
<LINK REL=NEXT HREF="DB_173.HTM">
<TITLE>12.1.5   Binary-operator calls</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING172></A>

<DIV>
<P><A HREF="DB_173.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_171.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING172-0></A>
<H1>12.1.5   <A NAME=MARKER-9-468></A>Binary-operator calls</H1>
<P> Dylan has 16 built-in binary operators<A NAME=MARKER-2-469></A>, of the following kinds:</P>
<UL>
<LI><P>Arithmetic operations<A NAME=MARKER-2-470></A>: <CODE>+<A NAME=MARKER-2-471></A></CODE>, <CODE>-<A NAME=MARKER-2-472></A></CODE>, <CODE>*<A NAME=MARKER-2-473></A></CODE>, <CODE>/</CODE><A NAME=MARKER-2-474></A>, and <CODE>^<A NAME=MARKER-2-475></A></CODE></P>
<LI><P>Comparisons<A NAME=MARKER-2-476></A>: <CODE>=<A NAME=MARKER-2-477></A></CODE>, <CODE>==<A NAME=MARKER-2-478></A></CODE>, <CODE>&lt;</CODE><A NAME=MARKER-2-479></A>, <CODE>&gt;<A NAME=MARKER-2-480></A></CODE>, <CODE>&lt;=<A NAME=MARKER-2-481></A></CODE>, <CODE>&gt;=<A NAME=MARKER-2-482></A></CODE>, <CODE>~=<A NAME=MARKER-2-483></A></CODE>, and <CODE>~==<A NAME=MARKER-2-484></A></CODE></P>
<LI><P>Logical operations<A NAME=MARKER-2-485></A>: <CODE>&amp;<A NAME=MARKER-2-486></A></CODE> and <CODE>|<A NAME=MARKER-2-487></A></CODE></P>
<LI><P>Assignment<A NAME=MARKER-2-488></A>: <CODE>:=<A NAME=MARKER-2-489></A></CODE></P>
</UL>
<P> The syntax for a binary-operator call has three parts:</P>
<P>1.  An expression that serves as the first operand</P>
<P>2.  The operator</P>
<P>3.  An expression that serves as the second operand</P>
<P> All binary-operator calls, except those to the logical and assignment operators, are abbreviations for calls to functions that have the same names as do the operators. Except for the order of evaluation, the following examples are equivalent:</P>
<PRE>
a + b;
\+(a, b);
</PRE>
<P> The <CODE>&amp;<A NAME=MARKER-2-490></A></CODE> and <CODE>|<A NAME=MARKER-2-491></A></CODE> operators are implemented as <B>macros</B>. (For information on macros, see <A HREF="DB_329.HTM#MARKER-9-863">Chapter 21,  <I>Macros</I></A>.) In an expression that includes the <CODE>&amp;</CODE> operator, if the first operand has a false value, the second operand is not evaluated. In an expression that includes the <CODE>|</CODE> operator, if the first operand has a true value, the second operand is not evaluated.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_173.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_171.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
