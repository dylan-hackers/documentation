<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=PREV HREF="DB_165.HTM">
<LINK REL=NEXT HREF="DB_167.HTM">
<TITLE>12 Functions</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING166></A>

<DIV>
<P><A HREF="DB_167.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_165.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>Dylan Programming</P>

</DIV>
<A NAME=HEADING166-0></A>
<H1>12 <A NAME=MARKER-9-446></A>Fun<A NAME=MARKER-2-447></A>ctions</H1>
<P> Functions are ubiquitous in Dylan. Generic functions and methods -- the two kinds of function -- are the primary means of specialization. Many common operations, such as slot references and arithmetic operations, are accomplished through function calls. In Dylan, unlike in many languages, functions are first-class objects. They can be the values of variables or slots, arguments to other functions, or values returned by functions. Dylan has functions that build new functions out of existing functions. Much of the power of Dylan arises through its sophisticated treatment of functions.</P>
<P>This chapter discusses general aspects of the operation of functions in Dylan. It does not describe all aspects of functions. In particular, we discuss the process of method dispatch within generic functions elsewhere (see Sections <A HREF="DB_75.HTM#MARKER-9-224">5.5</A>, <A HREF="DB_89.HTM#MARKER-9-250">6.2</A>, <A HREF="DB_113.HTM#MARKER-9-297">9.3</A>, and <A HREF="DB_288.HTM#MARKER-9-739">18.4</A>). This chapter covers three main topics:</P>
<P>1.  The syntax of function calls, including abbreviations for function calls</P>
<P>2.  The function-calling protocol, and particularly the interaction between a function and its caller</P>
<P>3.  The uses of functions as objects, including ways of creating and operating on functions</P>

</DIV>

<DIV>

<DIV>

<!-- TOC --><DL>
<DL>
<DT><A REL=BELOW HREF="DB_167.HTM#HEADING167-0"><B>12.1  </B> - Function-calling syntax</A>
<DD>
<DT><A REL=BELOW HREF="DB_174.HTM#HEADING174-0"><B>12.2  </B> - The function-calling protocol</A>
<DD>
<DT><A REL=BELOW HREF="DB_182.HTM#HEADING182-0"><B>12.3  </B> - Functions as objects</A>
<DD>
<DT><A REL=BELOW HREF="DB_189.HTM#HEADING189-0"><B>12.4  </B> - Summary</A>
<DD>
</DL>
</DL>


</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_167.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_165.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
