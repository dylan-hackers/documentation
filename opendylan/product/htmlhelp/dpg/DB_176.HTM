<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_174.HTM">
<LINK REL=PREV HREF="DB_175.HTM">
<LINK REL=NEXT HREF="DB_177.HTM">
<TITLE>12.2.2   Return and reception of multiple values</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING176></A>

<DIV>
<P><A HREF="DB_177.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_175.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING176-0></A>
<H1>12.2.2   Return and reception of multiple values</H1>
<P> A Dylan function call -- and, in general, a Dylan expression -- can return any number of values, including none. The <CODE>values<A NAME=MARKER-2-509></A></CODE> function is the means of returning multiple values<A NAME=MARKER-2-510></A>. This function takes zero or more arguments, and returns them as separate values.</P>
<P>Multiple values can be received as the initial values of local variables in a <CODE>let<A NAME=MARKER-2-511></A></CODE> declaration. If a <CODE>let</CODE> declaration contains multiple variables, they are matched with the values returned by the initialization expression, and each variable is bound to the corresponding value. The following example initializes <CODE>a</CODE> to <CODE>1</CODE> and <CODE>b</CODE> to <CODE>2:</CODE></P>
<PRE>
let (a, b) = values(1, 2);
</PRE>
<P> The following example initializes <CODE>ans</CODE> to <CODE>2</CODE> and <CODE>rem</CODE> to <CODE>1</CODE> -- the two values returned by this call to <CODE>truncate/</CODE>:</P>
<PRE>
let (ans, rem) = truncate/(5, 2);
</PRE>
<P> The variable list can also end with <CODE>#rest</CODE> followed by the name of a variable. In this case, the variable is initialized to a sequence. This sequence contains all the remaining values returned by the initialization expression. If there is no <CODE>#rest</CODE>, any excess values are discarded. If the number of variables in the <CODE>let</CODE> declaration is greater than the number of values returned, the remaining variables are initialized to <CODE>#f</CODE>. (But if the <CODE>let</CODE> declaration specifies a type for any of these variables, and if <CODE>#f</CODE> is not an instance of that type, then Dylan signals an error.)</P>
<P>Module variables and constants can also be initialized to multiple values. The variable list of a <CODE>define variable<A NAME=MARKER-2-512></A></CODE> or <CODE>define constan<A NAME=MARKER-2-513></A>t</CODE> definition can contain multiple variables, and can receive multiple values from its initialization expression in the same way as a <CODE>let</CODE> declaration.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_177.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_175.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
