<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_280.HTM">
<LINK REL=PREV HREF="DB_283.HTM">
<LINK REL=NEXT HREF="DB_285.HTM">
<TITLE>18.2   Multiple inheritance and slots</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING284></A>

<DIV>
<P><A HREF="DB_285.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_283.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING284-0></A>
<H1>18.2   <A NAME=MARKER-9-730></A>Multiple inheritance and <A NAME=MARKER-2-731></A>slots</H1>
<P> For the most part, using multiple inheritance does not present special problems in using slots. Recall that a class inherits all the slots of its superclasses. A subclass can also add slots of its own, but it cannot remove or replace any slots defined by its superclasses. A slot can appear only once in a class and in all that class's superclasses. Thus, a class's slots are the union of its slots and those of all its superclasses, and duplicate slot definitions are not permitted. This rule holds, regardless of whether a class has one direct superclass or more than one.</P>
<P> </P>
<TABLE BORDER=1><TR VALIGN=TOP><TD><P> <B>Comparison with <A NAME=MARKER-2-719></A>C++</B>: In C++, a data member of the same name can appear in both a base class and a derived class. The name in the scope of the derived class hides the same name in the base class, but the base class slot can be accessed by qualifying its name.</P>
<P>All access to Dylan class slots is through getter and setter methods, which are similar to C++ virtual functions. In Dylan, you can override access to an inherited slot by defining a getter or setter method specialized on the subclass (derived class).</P>
<P>For more information on inheritance in C++, see <A HREF="DB_347.HTM#MARKER-9-930">Section B.2, page 390</A>.</P>
</TD></TR></TABLE><P> </P>
<P> There are ways, however, in which subclasses and superclasses can have distinct effects on the same slot. One way is by providing default values for the slot. Even though duplicate slots are not permitted, a class can provide its own default value for a slot that it inherits from a superclass. The subclass can provide this default by supplying in its class definition an <A NAME=MARKER-2-732></A><CODE>inherited slot</CODE> option that includes an <CODE>init-value:</CODE> or <CODE>init-function:</CODE> specification, or an init expression.</P>
<P>Suppose that more than one class defines a default value for the same slot. Which default takes precedence? When each class has only one direct superclass, the answer is easy: the default value provided by the <B>most specific</B> class takes precedence. A default value for a subclass overrides a default value for a superclass.</P>
<P>But what if a class has more than one direct superclass, and each superclass provides a different default value for the same slot? Imagine, for example, that our <CODE>&lt;vehicle&gt;</CODE> class had a slot named <CODE>fuel-remaining</CODE>, and our <CODE>&lt;ground-vehicle&gt;</CODE> and <CODE>&lt;flying-vehicle&gt;</CODE> classes each had a different default value for the <CODE>fuel-remaining</CODE> slot, which they inherit from the common superclass <CODE>&lt;vehicle&gt;</CODE>:</P>
<PRE>
define abstract class &lt;vehicle&gt; (&lt;physical-object&gt;)
  slot fuel-remaining :: &lt;integer&gt;;
  ...
end class &lt;vehicle&gt;;
define abstract class &lt;ground-vehicle&gt; (&lt;vehicle&gt;)
  inherited-slot fuel-remaining, init-value: 30;
  ...
end class &lt;ground-vehicle&gt;;
define abstract class &lt;flying-vehicle&gt; (&lt;vehicle&gt;)
  inherited-slot fuel-remaining, init-value: 3000;
  ...
end class &lt;flying-vehicle&gt;;
define abstract class &lt;aircraft&gt; (&lt;flying-vehicle&gt;, &lt;ground-vehicle&gt;)
  ...
end class &lt;aircraft&gt;;
</PRE>
<P> Now neither the class <CODE>&lt;ground-vehicle&gt;</CODE> nor the class <CODE>&lt;flying-vehicle&gt;</CODE> is more specific than the other with respect to <CODE>&lt;aircraft&gt;</CODE>. So when we create an instance of <CODE>&lt;aircraft&gt;</CODE> that has both <CODE>&lt;ground-vehicle&gt;</CODE> and <CODE>&lt;flying-vehicle&gt;</CODE> as direct superclasses, what is the default initial value for the <CODE>fuel-remaining</CODE> slot: <CODE>30</CODE> or <CODE>3000</CODE>?</P>
<P>To answer this question, Dylan needs an additional way of ordering classes, called a <B>class precedence list</B>. In <A HREF="DB_285.HTM#MARKER-9-733">Section 18.3</A>, we describe how Dylan constructs the class precedence list. The short answer to our question about default initial slot values is that Dylan uses the default value provided by the class that appears earlier in the class precedence list.</P>
<P>We shall see that the class precedence list is also important for method dispatch in the presence of multiple inheritance. Suppose, for example, that we had defined two getter or two setter methods for the <CODE>fuel-remaining</CODE> slot: one specialized on the <CODE>&lt;flying-vehicle&gt;</CODE> class, and the other specialized on the <CODE>&lt;ground-vehicle&gt;</CODE> class. Which method would be selected to get or set the slot value of an instance of <CODE>&lt;aircraft&gt;</CODE>? We return to the issue of method dispatch after we see how Dylan constructs the class precedence list.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_285.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_283.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
