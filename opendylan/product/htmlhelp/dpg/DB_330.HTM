<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_329.HTM">
<LINK REL=PREV HREF="DB_329.HTM">
<LINK REL=NEXT HREF="DB_331.HTM">
<TITLE>21.1   Patterns and templates</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING330></A>

<DIV>
<P><A HREF="DB_331.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_329.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING330-0></A>
<H1>21.1   Patterns <A NAME=MARKER-2-865></A>and templates</H1>
<P> A Dylan macro consists of a set of <B>rules<A NAME=MARKER-2-866></A></B>. Each rule has two basic parts: a <B>pattern</B> that is matched against a fragment of code, and a <B>template</B> that is substituted for the matched fragment, perhaps including pieces of the original fragment. When a macro is invoked, each rule is tried in order until a matching pattern is found. When a match is found, the macro is replaced by the matching template. If no match can be found, an error occurs.</P>
<P>Dylan macros are recognized by the compiler because they fit one of three possible formats: the function macro, the statement macro, and the defining macro. The macro format determines the overall fragment that is matched against the macro's rules at each macro invocation.</P>
<P>The simplest macro format that the compiler can match is that of a function call. A <A NAME=MARKER-2-867></A><B>function macro</B> is invoked in exactly the same way that a function is invoked. The name of the macro is a module variable that can be used anywhere a function call can occur. Typically, it is simply the name followed by a parenthesized list of arguments, but recall that slot-style abbreviations and unary and binary operators are also function calls.</P>
<P>The most important use of function macros is to rearrange or <A NAME=MARKER-2-868></A>delay evaluation of arguments. The fragment that is matched against the function macro's rules is the phrase that represents a function's arguments. The function macro can then rearrange the function arguments, perhaps adding code. When a macro rearranges its arguments, its action has the effect of delaying the evaluation of the arguments (as opposed to a function call, where the argument expressions are evaluated and then passed to the function).</P>
<P>One simple use of delaying evaluation is to write a functionlike construct similar in spirit to C's <CODE>?:</CODE> operator:</P>
<PRE>
define macro if-else
  { if-else (?test:expression, ?true:expression, ?false:expression) }
 =&gt; { if (?test) ?true else ?false end }
end macro if-else;
</PRE>
<P> We could not write <CODE>if-else</CODE> as a function, because both the true and false expressions would be evaluated before the function was even called:</P>
<PRE>
<I>? </I>define variable *x* = 0;
<I>? </I>define variable *y* = 0;
<I>? </I>*y* := if-else(*y* == 0, *x* := 1, *x* := -1);
<I>1</I>
<I>? </I>*y*;
<I>1</I>
<I>? </I>*x*;
<I>1</I>
</PRE>
<P> If we had defined <CODE>if-else</CODE> as a function, *x* would have been <CODE>-1</CODE>, rather than <CODE>1</CODE>, because both assignments to *x* would have been evaluated, before <CODE>if-else</CODE> was called. When a macro is used, the assignments are just substituted into the template <CODE>if</CODE>, which evaluates the first clause only when the condition is true.</P>
<P>Looking at the macro definition of <CODE>if-else</CODE>, we can infer basic ideas about macros. A macro is introduced by <A NAME=MARKER-2-869></A><CODE>define macro</CODE>, followed by the <B>macro name</B> --<B> </B>in this case, <CODE>if-else</CODE>. The definition of the macro is a <B>rule</B> that has two parts: a <B>pattern</B> enclosed in braces, <CODE>{}</CODE>, that mimics the fragment that it is to match, and a <B>replacement</B>. Macro parameters, called <A NAME=MARKER-2-870></A><B>pattern variables</B>, are introduced in the pattern by <CODE>?</CODE>. They match fragments with particular <B>constraints</B> -- in this case, <CODE>:expression</CODE>. They are delimited by punctuation -- in this case, the open and close parentheses, <CODE>()</CODE>, and the comma, <CODE>,</CODE>.</P>
<P>The replacement part of the rule, the <B>expansion</B>, is indicated by <CODE>=&gt;</CODE> and is defined by a <B>template</B>, also enclosed in braces. The template is in the form of a code fragment, where pattern variables are used to substitute in the fragments they matched in the pattern. Note that matching and replacement are language based, so required and optional whitespace is treated exactly as in Dylan. We have used optional whitespace to improve the legibility of the macro definitions presented here.</P>
<P>Most Dylan development environments provide a way to view code after all macros have been expanded. This view can be helpful in debugging macros that you write. For example, showing the expanded view of an expression like</P>
<PRE>
*y* := if-else(*y* == 0, *x* := 1, *x* := -1);;
</PRE>
<P> might yield</P>
<PRE>
*y*<CODE> := <EM>if (</EM></CODE>*y* == 0<EM>)<CODE> </CODE></EM>*x*<CODE> := 1 <EM>else </EM></CODE>*x*<CODE> := -1 <EM>end;</EM></CODE>
</PRE>
<P> The exact format of the expanded view of the macro depends on the particular development environment. Here, we show the code that comes from the macro template in <EM>underlined italic</EM>, whereas the fragments matched by the pattern variables and substituted into the template are presented in our conventional <CODE>code font</CODE>. Note that the <CODE>if-else</CODE> macro we have defined is just syntactic sugar -- Dylan's built-in <CODE>if</CODE> statement is perfectly sufficient for the job.</P>
<P>Another reason to <A NAME=MARKER-2-871></A>delay evaluation is to change the value of an argument -- for example, to implement an operator similar in spirit to C's <CODE>++</CODE> and <CODE>+=</CODE> operators:</P>
<PRE>
define macro inc!
  { inc! (?place:expression, ?by:expression) }
 =&gt; { ?place := ?place + ?by; }
  { inc! (?place:expression) }
 =&gt; { ?place := ?place + 1; }
end macro inc!;
</PRE>
<P> This macro might be used as follows:</P>
<PRE>
<I>?</I> define variable *x* = 0;
<I>?</I> inc!(*x*, 3);
<I>3</I>
<I>?</I> *x*;
<I>3</I>
<I>?</I> inc!(*x*);
<I>4</I>
<I>?</I> *x*;
<I>4</I>
</PRE>
<P> In this macro, it is important to delay the evaluation of the first argument because we want to be able to assign to the variable or slot it is stored in, rather than simply to manipulate the value of the variable or slot.</P>
<P>The <CODE>inc!</CODE> macro demonstrates the use of multiple rules in a macro. They are tried in order until an appropriate match is found. This allows the <CODE>inc!</CODE> macro to have two forms. The one-argument form increments the argument by 1. The two-argument form allows the increment amount to be specified.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_331.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_329.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
