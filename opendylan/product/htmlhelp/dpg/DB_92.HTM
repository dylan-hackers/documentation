<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=PREV HREF="DB_91.HTM">
<LINK REL=NEXT HREF="DB_93.HTM">
<TITLE>7 Modularity</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING92></A>

<DIV>
<P><A HREF="DB_93.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_91.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>Dylan Programming</P>

</DIV>
<A NAME=HEADING92-0></A>
<H1>7 <A NAME=MARKER-9-264></A>Mod<A NAME=MARKER-2-265></A>ularity</H1>
<P> Object-oriented programming can lead to modular code. When you are experienced with an object-oriented programming style, you might be able to define classes and methods with the right modularity from the start. Novices, however -- and even experienced object-oriented programmers who are attacking large problems -- may find that they discover opportunities for sharing as they begin to implement classes and methods. The dynamic aspects of Dylan support an evolutionary approach to programming, so it is easy to continue to refine your implementation and to design as you go.</P>
<P>In this chapter, we show an evolutionary approach to programming, as we define classes that represent different kinds of positions. We start out with one approach, and gradually refine it to achieve greater modularity. We illustrate one new Dylan feature: abstract classes.</P>
<P>Starting in this chapter, and continuing throughout the rest of the book, we take the approach of editing and compiling source code. Now and then, we use a listener to call a function and show the function's output. Whenever we use a listener, we show the <I>?</I> prompt. </P>

</DIV>

<DIV>

<DIV>

<!-- TOC --><DL>
<DL>
<DT><A REL=BELOW HREF="DB_93.HTM#HEADING93-0"><B>7.1  </B> - Requirements of the position classes</A>
<DD>
<DT><A REL=BELOW HREF="DB_94.HTM#HEADING94-0"><B>7.2  </B> - Initial class definitions</A>
<DD>
<DT><A REL=BELOW HREF="DB_95.HTM#HEADING95-0"><B>7.3  </B> - Abstract classes</A>
<DD>
<DT><A REL=BELOW HREF="DB_96.HTM#HEADING96-0"><B>7.4  </B> - Absolute position</A>
<DD>
<DT><A REL=BELOW HREF="DB_97.HTM#HEADING97-0"><B>7.5  </B> - Relative position</A>
<DD>
<DT><A REL=BELOW HREF="DB_98.HTM#HEADING98-0"><B>7.6  </B> - Meeting of angles and times</A>
<DD>
<DT><A REL=BELOW HREF="DB_99.HTM#HEADING99-0"><B>7.7  </B> - Abstract, concrete, and instantiable classes</A>
<DD>
<DT><A REL=BELOW HREF="DB_102.HTM#HEADING102-0"><B>7.8  </B> - Summary</A>
<DD>
</DL>
</DL>


</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_93.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_91.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
