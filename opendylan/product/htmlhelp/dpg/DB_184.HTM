<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_182.HTM">
<LINK REL=PREV HREF="DB_183.HTM">
<LINK REL=NEXT HREF="DB_185.HTM">
<TITLE>12.3.2   Creation of generic functions</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING184></A>

<DIV>
<P><A HREF="DB_185.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_183.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING184-0></A>
<H1>12.3.2   Creation of generic functions</H1>
<P> You can create a generic function<A NAME=MARKER-2-547></A> in the following ways:</P>
<UL>
<LI><P>You can create one explicitly by <CODE>define generic<A NAME=MARKER-2-548></A></CODE>.</P>
<LI><P>You can create one explicitly by calling <CODE>make<A NAME=MARKER-2-549></A></CODE> on the <CODE>&lt;generic-function&gt;</CODE> class. You rarely need to create a generic function this way.</P>
<LI><P>You can create one implicitly by <CODE>define method<A NAME=MARKER-2-550></A></CODE>. If the generic function named by this definition does not yet exist, Dylan creates it.</P>
<LI><P>You can create one implicitly by defining a slot in <CODE>define class<A NAME=MARKER-2-551></A></CODE>. If a getter generic function for the slot does not yet exist, Dylan creates it.</P>
<LI><P>You can create one implicitly by defining a slot (other than a constant slot) in <CODE>define class<A NAME=MARKER-2-552></A></CODE>. If a setter generic function for the slot does not yet exist, Dylan creates it.</P>
</UL>
<P> Each of these procedures, except a call to <CODE>make</CODE>, defines a module constant whose value is the generic function created.</P>
<P>When Dylan creates a generic function implicitly<A NAME=MARKER-2-553></A>, it creates a parameter list and a value declaration for the generic function that are designed to restrict the addition of subsequent methods to the generic function as little as possible. All required arguments to the generic function have type specializers of <CODE>&lt;object&gt;</CODE>, and the generic function can return any number of values of any type. The generic function's parameter list is congruent with that of the method being defined. If the generic function accepts keyword arguments, the parameter list ends with <CODE>#key</CODE>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_185.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_183.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
