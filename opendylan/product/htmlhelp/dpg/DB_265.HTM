<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_262.HTM">
<LINK REL=PREV HREF="DB_264.HTM">
<LINK REL=NEXT HREF="DB_266.HTM">
<TITLE>17.2.3   Vehicles</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING265></A>

<DIV>
<P><A HREF="DB_266.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_264.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING265-0></A>
<H1>17.2.3   Vehicles</H1>
<P> </P>
<TABLE BORDER=1><TR VALIGN=TOP><TH><P> The <CODE>airport-classes.dylan</CODE> file. <I>(continued)</I></P>
</TH></TR><TR VALIGN=TOP><TD><PRE>
<I>// VEHICLES</I>
<I>// The class that represents all self-propelled devices
</I>define abstract class &lt;vehicle&gt; (&lt;physical-object&gt;)
<I>  // Every vehicle has a unique identification code
</I>  slot vehicle-id :: &lt;string&gt;, required-init-keyword: id:;
<I>  // The normal operating speed of this class of vehicle in miles per hour
</I>  each-subclass slot cruising-speed :: &lt;positive-integer&gt;;
<I>  // Allow individual differences in the size of particular aircraft,
  // while providing a suitable default for each class of aircraft
</I>  each-subclass slot standard-size :: &lt;size&gt;;
end class &lt;vehicle&gt;; 
</TD></TR><TR VALIGN=TOP><TD>define method initialize (vehicle :: &lt;vehicle&gt;, #key)
  next-method();
  unless (slot-initialized?(vehicle, physical-size))
    vehicle.physical-size := vehicle.standard-size;
  end unless;
end method initialize; 
</TD></TR><TR VALIGN=TOP><TD>define method say (object :: &lt;vehicle&gt;) =&gt; ()
  format-out(&quot;Vehicle %s&quot;, object.vehicle-id);
end method say; 
</TD></TR><TR VALIGN=TOP><TD><I>// This class represents companies that fly commercial aircraft
</I>define class &lt;airline&gt; (&lt;object&gt;)
  slot name :: &lt;string&gt;, required-init-keyword: name:;
  slot code :: &lt;string&gt;, required-init-keyword: code:;
end class &lt;airline&gt;; 
</TD></TR><TR VALIGN=TOP><TD>define method say (object :: &lt;airline&gt;) =&gt; ()
  format-out(&quot;Airline %s&quot;, object.name);
end method say; 
</TD></TR><TR VALIGN=TOP><TD><I>// This class represents a regularly scheduled trip for a commercial 
// airline
</I>define class &lt;flight&gt; (&lt;object&gt;)
  slot airline :: &lt;airline&gt;, required-init-keyword: airline:;
  slot number :: &lt;nonnegative-integer&gt;,
    required-init-keyword: number:;
end class &lt;flight&gt;; 
</TD></TR><TR VALIGN=TOP><TD>define method say (object :: &lt;flight&gt;) =&gt; ()
  format-out(&quot;Flight %s %d&quot;, object.airline.code, object.number);
end method say; 
</TD></TR><TR VALIGN=TOP><TD><I>// This class represents vehicles that normally fly for a portion of
// their trip
</I>define abstract class &lt;aircraft&gt; (&lt;vehicle&gt;)
  slot altitude :: &lt;integer&gt;, init-keyword: altitude:;
<I>  // Direction here is either #&quot;inbound&quot; or #&quot;outbound&quot;
</I>  slot direction :: &lt;symbol&gt;;
  <I>// The next step this aircraft might be able to make
</I>  slot next-transition :: &lt;aircraft-transition&gt;,
    required-init-keyword: transition:, setter: #f;
end class &lt;aircraft&gt;; 
</TD></TR><TR VALIGN=TOP><TD>define method initialize (vehicle :: &lt;aircraft&gt;, #key)
  next-method();
<I>  // There is a one-to-one correspondance between aircraft instances and
  // transition instances
  // An aircraft can only make one transition at a time
  // Connect the aircraft to its transition
</I>  vehicle.next-transition.transition-aircraft := vehicle;
end method initialize; 
</TD></TR><TR VALIGN=TOP><TD><I>// The next step an aircraft might be able to make
</I>define class &lt;aircraft-transition&gt; (&lt;object&gt;)
  slot transition-aircraft :: &lt;aircraft&gt;, init-keyword: aircraft:;
  slot from-container :: &lt;vehicle-storage&gt;, init-keyword: from:;
  slot to-container :: &lt;vehicle-storage&gt;, init-keyword: to:;
<I>  // The earliest possible time that the transition could take place
</I>  slot earliest-arrival :: &lt;time-of-day&gt;, init-keyword: arrival:;
<I>  // Has this transition already been entered in the sorted sequence? 
  // This flag saves searching the sorted sequence
</I>  slot pending? :: &lt;boolean&gt; = #f, init-keyword: pending?:;
end class &lt;aircraft-transition&gt;; 
</TD></TR><TR VALIGN=TOP><TD><I>// Describes one step of an aircraft's movements
</I>define method say (transition :: &lt;aircraft-transition&gt;) =&gt; ()
  say(transition.earliest-arrival);
  format-out(&quot;: &quot;);
  say(transition.transition-aircraft);
  format-out(&quot; at &quot;);
  say(transition.to-container);
end method say; 
</TD></TR><TR VALIGN=TOP><TD><I>// Commercial aircraft are aircraft that may have a flight
// assigned to them
</I>define abstract class &lt;commercial-aircraft&gt; (&lt;aircraft&gt;)
  slot aircraft-flight :: false-or(&lt;flight&gt;) = #f, init-keyword: flight:;
end class &lt;commercial-aircraft&gt;; 
</TD></TR><TR VALIGN=TOP><TD>define method say (object :: &lt;commercial-aircraft&gt;) =&gt; ()
  let flight = object.aircraft-flight;
  if (flight)
    say(flight);
  else
    format-out(&quot;Unscheduled Aircraft %s&quot;, object.vehicle-id);
  end if;
end method say; 
</TD></TR><TR VALIGN=TOP><TD><I>// The class that represents all commericial Boeing 707 aircraft
</I>define class &lt;B707&gt; (&lt;commercial-aircraft&gt;)
  inherited slot cruising-speed, init-value: 368;
  inherited slot standard-size,
    init-value: make(&lt;size&gt;, length: 153, width: 146, height: 42);
end class &lt;B707&gt;; 
</TD></TR><TR VALIGN=TOP><TD>define method say (aircraft :: &lt;B707&gt;) =&gt; ()
  if (aircraft.aircraft-flight)
    next-method();
  else
    format-out(&quot;Unscheduled B707 %s&quot;, aircraft.vehicle-id);
  end if;
end method say; 
</TD></TR></TABLE></PRE>
<P> In the preceding code, we model everything from the most general class of vehicle down to the specific class that represents the Boeing 707. We also model the transition steps that an aircraft may take as it travels throughout the airport, and the airlines and flights associated with commercial aircraft.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_266.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_264.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
