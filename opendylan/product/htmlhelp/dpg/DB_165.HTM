<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_139.HTM">
<LINK REL=PREV HREF="DB_164.HTM">
<LINK REL=NEXT HREF="DB_166.HTM">
<TITLE>11.6   Summary</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING165></A>

<DIV>
<P><A HREF="DB_166.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_164.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING165-0></A>
<H1>11.6   Summary</H1>
<P> In this chapter, we covered the following: </P>
<UL>
<LI><P>We showed a selection of built-in collection classes, including strings, lists, vectors, tables, and arrays. </P>
<LI><P>We showed various iteration facilities and control structures, including <CODE>for</CODE>, <CODE>do</CODE>, <CODE>map</CODE>, <CODE>while</CODE>, <CODE>if</CODE>, <CODE>case</CODE>, <CODE>select</CODE>, <CODE>block</CODE>, <CODE>&amp;</CODE>, and <CODE>|</CODE>. </P>
<LI><P>We showed a simple example of recursion. </P>
<LI><P>We showed some basic collection functions: <CODE>element</CODE>, <CODE>size</CODE>, and <CODE>find-key</CODE>. </P>
<LI><P>We showed some basic sequence functions: <CODE>copy-sequence</CODE>, and <CODE>reverse</CODE>. </P>
<LI><P>We showed additional collection functions: <CODE>head</CODE>, <CODE>tail</CODE>, <CODE>pair</CODE>, <CODE>list</CODE>, and <CODE>vector</CODE>.</P>
<LI><P>We explored basic sequence algorithms, and found that, although the various sequence classes are related, algorithms that are efficient for one class of sequence may not be appropriate for a different class of sequence.</P>
<LI><P>We discussed destructive versus nondestructive functions. </P>
<LI><P>We demonstrated the <CODE>curry</CODE> function, which generates functions.</P>
<LI><P>We showed several ex<A NAME=MARKER-2-437></A>amples of the use of closures as arguments to <BR>iterators.</P>
<A NAME=LINK-collect-lastpage></A><A NAME=LINK-func-firstpage></A></UL>
<!-- FM pgf ignored -->

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_166.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_164.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
