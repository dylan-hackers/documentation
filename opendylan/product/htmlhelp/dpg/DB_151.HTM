<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_145.HTM">
<LINK REL=PREV HREF="DB_150.HTM">
<LINK REL=NEXT HREF="DB_152.HTM">
<TITLE>11.3.6   A recursive list copier</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING151></A>

<DIV>
<P><A HREF="DB_152.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_150.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING151-0></A>
<H1>11.3.6   <A NAME=MARKER-9-408></A>A recursive list copier</H1>
<P> In many situations, the most concise way to manipulate lists (and other treelike structures) is to use <A NAME=MARKER-2-409></A>recursion. In <B>recursion</B>, a function calls itself, directly or indirectly. In the following example, we redefine the <CODE>my-copy-sequence</CODE> method for lists to use recursion instead of iteration.</P>
<PRE>
define method my-copy-sequence (old-list :: &lt;list&gt;) =&gt; (new-list :: &lt;list&gt;)
  if (empty?(old-list))
    #();
  else
    pair(old-list.head, my-copy-sequence(old-list.tail));
  end if;
end method my-copy-sequence;
</PRE>
<P> Note that recursion can be just as efficient as iteration. For example, consider the function <CODE>my-reverse</CODE>, which creates a new list with elements in the reverse order from the list you supply.</P>
<PRE>
define method my-reverse (old-list :: &lt;list&gt;) =&gt; (reversed-list :: &lt;list&gt;)
  local method rev (old :: &lt;list&gt;, results :: &lt;list&gt;)
    if (empty?(old)) results else rev(old.tail, pair(old.head, results)) end;
  end method;
  rev(old-list, #());
end method my-reverse;
</PRE>
<P> The <CODE>local</CODE> <CODE>method</CODE> declaration inside the <CODE>my-reverse</CODE> method defines a function that is bound to the name <CODE>rev</CODE> only within a scope of the body of <CODE>my-reverse</CODE>. This declaration is different from <CODE>define</CODE> <CODE>method</CODE>, which creates module bindings that can be accessed outside the lexical scope of where they are defined. </P>
<P>The local method <CODE>rev</CODE> calls itself as the last expression in its body. Thus, the <CODE>rev</CODE> method can be optimized by the Dylan compiler into code that is exactly as efficient as if it was written with iteration.</P>
<P>Alternative ways of defining the <CODE>my-reverse</CODE> function are discussed in <A HREF="DB_156.HTM#MARKER-9-419">Section 11.4.1</A>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_152.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_150.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
