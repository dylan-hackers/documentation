<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_182.HTM">
<LINK REL=PREV HREF="DB_184.HTM">
<LINK REL=NEXT HREF="DB_186.HTM">
<TITLE>12.3.3   Creation of methods</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING185></A>

<DIV>
<P><A HREF="DB_186.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_184.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING185-0></A>
<H1>12.3.3   <A NAME=MARKER-9-554></A>Creation of methods</H1>
<P> You can create a method<A NAME=MARKER-2-555></A> in the following ways:</P>
<UL>
<LI><P>You can create one explicitly by <CODE>define method<A NAME=MARKER-2-556></A></CODE>. This definition also adds the method to a generic function, creating the generic function if the latter does not already exist.</P>
<LI><P>You can create one explicitly by a <CODE>method<A NAME=MARKER-2-557></A></CODE> statement. This statement does not add the method to a generic function.</P>
<LI><P>You can create one explicitly by a <CODE>local method<A NAME=MARKER-2-558></A></CODE> declaration. This declaration creates one or more methods, and assigns each to a local variable such that the binding is visible to all other methods defined in the same <CODE>local</CODE> declaration. This declaration does not add the method to a generic function.</P>
<LI><P>You can create one implicitly by defining a slot (other than a virtual slot) in <CODE>define class<A NAME=MARKER-2-559></A></CODE>. Dylan defines a getter method for the slot, and adds it to a generic function, creating the generic function if that function does not already exist.</P>
<LI><P>You can create one implicitly by defining a slot (other than a virtual or a constant slot) in <CODE>define class<A NAME=MARKER-2-560></A></CODE>. Dylan defines a setter method for the slot, and adds it to a generic function, creating the generic function if that function does not already exist.</P>
</UL>
<P> Creating a method by using <CODE>method<A NAME=MARKER-2-561></A></CODE> is useful when the method does not need to be part of a generic function. For instance, various Dylan functions take as arguments other functions that act as predicates, or test functions. One of these is <CODE>choose</CODE>, which selects members of a sequence that satisfy a test function, and returns those members as a new sequence. We might pick all the strings out of a mixed sequence as follows:</P>
<PRE>
define method choose-strings
    (sequence :: &lt;sequence&gt;) =&gt; (new-seq :: &lt;sequence&gt;)
  <I>// choose takes two arguments: a function and a sequence
</I>  choose(method (object) instance?(object, &lt;string&gt;) end method, sequence);
  end method choose-strings;
</PRE>
<P> Creating a method by using <CODE>local method<A NAME=MARKER-2-562></A></CODE> is useful for a method that does not need to be part of a generic function, but does need to be given a name so that it can call itself recursively, or so that other code in the enclosing body can refer to it. For an example, see <A HREF="DB_151.HTM#MARKER-9-408">Section 11.3.6, page 147</A>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_186.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_184.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
