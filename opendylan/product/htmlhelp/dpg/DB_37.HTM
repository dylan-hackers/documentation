<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_35.HTM">
<LINK REL=PREV HREF="DB_36.HTM">
<LINK REL=NEXT HREF="DB_38.HTM">
<TITLE>3.1.2   Two methods with the same name</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING37></A>

<DIV>
<P><A HREF="DB_38.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_36.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING37-0></A>
<H1>3.1.2   Two methods with the same name</H1>
<P> For fun, we can change <CODE>say-greeting</CODE> to take a different action for integers, such as to print a message:</P>
<PRE>
<I>Your lucky number is 7.</I>
</PRE>
<P> To make this change, we define another method, also called <CODE>say-greeting</CODE>. This method has one required parameter named <CODE>greeting</CODE>, which has the type constraint <CODE>&lt;integer&gt;</CODE>. </P>
<PRE>
define method say-greeting (greeting :: &lt;integer&gt;)
  format-out(&quot;Your lucky number is %s.\n&quot;, greeting);
end;
<I>? </I>say-greeting(*my-number*);
<I>Your lucky number is 7.</I>
</PRE>
<P> A Dylan method is similar to a procedure or subroutine in other languages, but there is an important difference. You can define more than one method with the same name. Each one is a method for the same <A NAME=MARKER-2-117></A><B>generic function</B>. <A HREF="#MARKER-9-99">Figure 3.1</A> shows how you can picture a generic function.</P>
<P>When a generic function is called, it chooses the most appropriate method to call for the arguments. For example, when we call the <CODE>say-greeting</CODE> generic function with an integer, the method whose parameter is of the type <CODE>&lt;integer&gt;</CODE> is called: </P>
<PRE>
<I>? </I>say-greeting(1000);
<I>Your lucky number is 1000.</I>
</PRE>
<P> When we call the <CODE>say-greeting</CODE> generic function with an argument that is not an integer, the method whose parameter is of the type <CODE>&lt;object&gt;</CODE> is called: </P>
<PRE>
<I>? </I>say-greeting(&quot;Buenos Dias&quot;);
<I>Buenos Dias</I>
<TABLE BORDER=1><CAPTION></PRE>
<P>Figure 3.1   <A NAME=MARKER-9-99></A>The <CODE>say-greeting</CODE> generic function and its methods.</P>
</CAPTION><TR VALIGN=TOP><TD><P> <IMG ALIGN=TOP SRC=DB37IMA4.GIF></P>
</TD></TR></TABLE>
</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_38.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_36.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
