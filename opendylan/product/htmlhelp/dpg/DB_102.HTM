<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_92.HTM">
<LINK REL=PREV HREF="DB_101.HTM">
<LINK REL=NEXT HREF="DB_103.HTM">
<TITLE>7.8   Summary</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING102></A>

<DIV>
<P><A HREF="DB_103.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_101.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING102-0></A>
<H1>7.8   Summary</H1>
<P> In this chapter, we covered the following:</P>
<UL>
<LI><P>A class can represent characteristics and behavior in common across other classes. For example, the <CODE>&lt;directed-angle&gt;</CODE> class represents the degrees-minutes-seconds aspects that are common to latitude and longitude. Also, the <CODE>&lt;sixty-unit&gt;</CODE> class represents the <CODE>total-seconds</CODE> that are common to <CODE>&lt;time&gt;</CODE> and <CODE>&lt;angle&gt;</CODE>.</P>
<LI><P>Classes can be used to represent differences between two similar kinds of objects. For example, the <CODE>&lt;latitude&gt;</CODE> and <CODE>&lt;longitude&gt;</CODE> classes are similar in that both classes inherit from <CODE>&lt;directed-angle&gt;</CODE>, and neither class defines additional slots. However, by providing the two classes, <BR><CODE>&lt;latitude&gt;</CODE> and <CODE>&lt;longitude&gt;</CODE>, we make it possible to identify objects as being of type <CODE>&lt;latitude&gt;</CODE> or <CODE>&lt;longitude&gt;</CODE>, and we make it possible to customize the behavior of operations on <CODE>&lt;latitude&gt;</CODE> and <CODE>&lt;longitude&gt;</CODE> as needed.</P>
<LI><P>In many object-oriented libraries and programs, certain classes are not intended to have direct instances. You can define those classes as abstract classes to document their purpose.</P>
<LI><P>When you have two related classes and both will have direct instances, it is good practice to define a third class to be the superclass of the two other classes. The superclass is abstract, and the other two classes are concrete. We used this style in the time classes, the angle classes, and the position classes. People can use the abstract superclasses, such as <CODE>&lt;position&gt;</CODE>, as the type of objects that can be any kind of position.</P>
<LI><P>In proper modularity, a method on a particular class should not depend on information that is private to second class. If someone changes the representation of the second class, the method could break. We showed an <BR>example of breaking this rule when one version of the <CODE>say</CODE> method on <CODE>&lt;absolute-position&gt;</CODE> printed "latitude" and "longitude" after calling <CODE>say</CODE> on the directed angles stored in its two slots. The method on <CODE>&lt;absolute-position&gt;</CODE> acted on the knowledge that the method on <CODE>&lt;directed-angle&gt;</CODE> does not print "latitude" or "longitude." </P>
</UL>
<P> One of the challenges of modular design is for you to decide which attributes to generalize (by moving them up to higher, or more general, classes in the inheritance graph), and which attributes to specialize (by moving them down the inheritance graph into more specific classes). Another challenge is deciding when to split a class into multiple behaviors, and when to introduce more abstract classes to hold shared behavior. No computer language can make these decisions for you, but dynamic languages typically allow more freedom to explore these relationships. Generic functions and multimethods allow more freedom in defining behavior than does attac<A NAME=MARKER-2-275></A>hing a method to a single class. </P>
<A NAME=LINK-pos-lastpage></A><A NAME=LINK-time-code-firstpage></A><!-- FM pgf ignored -->

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_103.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_101.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
