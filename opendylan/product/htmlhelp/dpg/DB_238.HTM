<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_236.HTM">
<LINK REL=PREV HREF="DB_237.HTM">
<LINK REL=NEXT HREF="DB_239.HTM">
<TITLE>14.4.2   The angle implementation file</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING238></A>

<DIV>
<P><A HREF="DB_239.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_237.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING238-0></A>
<H1>14.4.2   The <EM>angle</EM> implementation file</H1>
<P> The <CODE>angle</CODE> implementation file is simply a collection of the source records that we developed earlier for creating and saying angles, latitudes, and longitudes.</P>
<P> </P>
<TABLE BORDER=1><TR VALIGN=TOP><TH><P> The <CODE>angle</CODE> implementation file: <CODE>angle.dylan</CODE>.  </P>
</TH></TR><TR VALIGN=TOP><TD><PRE>
Module: angle-implementation
define abstract class &lt;angle&gt; (&lt;sixty-unit&gt;)
end class &lt;angle&gt;;
</TD></TR><TR VALIGN=TOP><TD>define method say (angle :: &lt;angle&gt;) =&gt; ()
  let(degrees, minutes, seconds) = decode-total-seconds(angle);
  format-out(&quot;%d degrees %d minutes %d seconds&quot;,
             degrees, minutes, seconds);
end method say; 
</TD></TR><TR VALIGN=TOP><TD>define class &lt;relative-angle&gt; (&lt;angle&gt;)
end class &lt;relative-angle&gt;; 
</TD></TR><TR VALIGN=TOP><TD>define method say (angle :: &lt;relative-angle&gt;) =&gt; ()
  format-out(&quot; %d degrees&quot;, decode-total-seconds(angle));
end method say; 
</TD></TR><TR VALIGN=TOP><TD>define abstract class &lt;directed-angle&gt; (&lt;angle&gt;)
  virtual slot direction :: &lt;symbol&gt;;
  slot internal-direction :: &lt;symbol&gt;;
  keyword direction:;
end class &lt;directed-angle&gt;; 
</TD></TR><TR VALIGN=TOP><TD>define method initialize (angle :: &lt;directed-angle&gt;, #key direction: dir)
  next-method();
  angle.direction := dir;
end method initialize;
</TD></TR><TR VALIGN=TOP><TD>define method direction (angle :: &lt;directed-angle&gt;) =&gt; (dir :: &lt;symbol&gt;)
  angle.internal-direction;
end method direction;
</TD></TR><TR VALIGN=TOP><TD>define method direction-setter 
    (dir :: &lt;symbol&gt;, angle :: &lt;directed-angle&gt;) =&gt; (new-dir :: &lt;symbol&gt;)
  angle.internal-direction := dir;
end method direction-setter; 
</TD></TR><TR VALIGN=TOP><TD>define method say (angle :: &lt;directed-angle&gt;) =&gt; ()
  next-method();
  format-out(&quot; %s&quot;, angle.direction);
end method say; 
</TD></TR><TR VALIGN=TOP><TD>define class &lt;latitude&gt; (&lt;directed-angle&gt;)
end class &lt;latitude&gt;;
</TD></TR><TR VALIGN=TOP><TD>define method say (latitude :: &lt;latitude&gt;) =&gt; ()
  next-method();
  format-out(&quot; latitude\n&quot;);
end method say;
</TD></TR><TR VALIGN=TOP><TD>define method direction-setter 
    (dir :: &lt;symbol&gt;, latitude :: &lt;latitude&gt;) =&gt; (new-dir :: &lt;symbol&gt;)
  if (dir == #&quot;north&quot; | dir == #&quot;south&quot;)
    next-method();
  else
    error(&quot;%= is not north or south&quot;, dir);
  end if;
end method direction-setter; 
</TD></TR><TR VALIGN=TOP><TD>define class &lt;longitude&gt; (&lt;directed-angle&gt;)
end class &lt;longitude&gt;;
</TD></TR><TR VALIGN=TOP><TD>define method say (longitude :: &lt;longitude&gt;) =&gt; ()
  next-method();
  format-out(&quot; longitude\n&quot;);
end method say;
</TD></TR><TR VALIGN=TOP><TD>define method direction-setter 
    (dir :: &lt;symbol&gt;, longitude :: &lt;longitude&gt;) =&gt; (new-dir :: &lt;symbol&gt;)
  if (dir == #&quot;east&quot; | dir == #&quot;west&quot;)
    next-method();
  else
    error(&quot;%= is not east or west&quot;, dir);
  end if;
end method direction-setter; 
</TD></TR></TABLE></PRE>
<P> </P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_239.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_237.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
