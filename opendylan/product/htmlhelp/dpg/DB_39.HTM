<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="DB_1.HTM">
<LINK REL=UP HREF="DB_38.HTM">
<LINK REL=PREV HREF="DB_38.HTM">
<LINK REL=NEXT HREF="DB_40.HTM">
<TITLE>3.2.1   Class inheritance</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING39></A>

<DIV>
<P><A HREF="DB_40.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_38.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
<A NAME=HEADING39-0></A>
<H1>3.2.1   <A NAME=MARKER-2-121></A>Class inheritance</H1>
<P> One important aspect of classes is that they are related to one another by <BR><B>inheritance</B>. Inheritance enables classes that are logically related to one another to share the behaviors and attributes that they have in common. Each class inherits from one or more classes, called its <A NAME=MARKER-2-122></A><B>superclasses</B>. If no other class is appropriate, then the class inherits from the class <A NAME=MARKER-2-123></A><CODE>&lt;object&gt;</CODE>. This class is the <A NAME=MARKER-2-124></A><B>root</B> of all classes: All classes inherit from it, either directly or indirectly, and it does not have any direct superclasses.  </P>
<TABLE BORDER=1><TR VALIGN=TOP><TD><P> <B>Comparison with <A NAME=MARKER-2-106></A>C++: </B>If you are familiar with the class concepts of C++, you might initially be confused by Dylan's class model. In Dylan, all base classes are effectively virtual base classes with "virtual" data members. When a class inherits another class more than once (because of multiple inheritance), only a single copy of that base class is included. Each of the multiple-inheritance paths can contribute to the implementation of the derived class. The Dylan class model favors this mix-in style of programming. For more information, see <A HREF="DB_347.HTM#MARKER-9-930">Section B.2</A> in <A HREF="DB_345.HTM#MARKER-9-926">Appendix B,  <I>Dylan Object Model for C and C++ Programmers</I></A>.</P>
</TD></TR></TABLE><P> </P>
<P> In Dylan, we distinguish between two terms: <I>direct instance</I> and <I>general instance</I>. An object is a <B>direct instance</B> of exactly one class: the class that <CODE>object-class</CODE> returns for that object. An object is a <B>general instance</B> of its direct class, and of all classes from which its direct class inherits. The term <I>instance</I> is equivalent to <BR><I>general instance</I>. You can use the <CODE>instance?</CODE> predicate to ask whether an object is an instance of a given class: </P>
<PRE>
<I>?</I> <A NAME=MARKER-2-125></A>instance?(1000, &lt;integer&gt;);
<I>#t</I>
<I>?</I> instance?(&quot;hello, world&quot;, &lt;integer&gt;); 
<I>#f</I>
</PRE>
<P> All objects are instances of the class <CODE>&lt;object&gt;</CODE>: </P>
<PRE>
<I>?</I> instance?(1000, &lt;object&gt;);
<I>#t</I>
<I>?</I> instance?(&quot;hello, world&quot;, &lt;object&gt;);
<I>#t</I>
</PRE>
<P> <A HREF="#MARKER-9-100">Figure 3.2</A> shows the inheritance relationships among several of the built-in classes. If class A is a superclass of class B, then class B is a <B>subclass</B> of class A. For example, <CODE>&lt;object&gt;</CODE> is a superclass of <CODE>&lt;string&gt;</CODE>, and <CODE>&lt;string&gt;</CODE> is a subclass of <CODE>&lt;object&gt;</CODE>. For simplicity, <A HREF="#MARKER-9-100">Figure 3.2</A> omits certain classes that intervene between the classes shown.</P>
<TABLE BORDER=1><CAPTION><P>Figure 3.2   Classes and subclasses. Each arrow points from a class to a subclass.<A NAME=MARKER-9-100></A></P>
</CAPTION><TR VALIGN=TOP><TD><P> <IMG ALIGN=TOP SRC=DB39IMA5.GIF></P>
<P> </P>
</TD></TR></TABLE><P> A typical Dylan environment provides a browser to explore inheritance relationships among classes; certain environments show the relationships graphically. </P>
<P>The Dylan language includes functions that provide information about the inheritance relationships among classes. We can use <CODE>subtype?</CODE> to ask whether one class inherits from another class:</P>
<PRE>
<I>?</I> <A NAME=MARKER-2-126></A>subtype?(&lt;integer&gt;, &lt;number&gt;);
<I>#t</I>
<I>?</I> subtype?(&lt;integer&gt;, &lt;object&gt;);
<I>#t</I>
<I>?</I> subtype?(&lt;single-float&gt;, &lt;object&gt;);
<I>#t</I>
<I>?</I> subtype?(&lt;string&gt;, &lt;integer&gt;);
<I>#f</I>
</PRE>
<P> It may be confusing that we use a function called <CODE>subtype?</CODE> here, but Dylan does not provide a function called <CODE>subclass?</CODE>. Every class is a <B>type</B>, but certain types are not classes (see <A HREF="DB_111.HTM#MARKER-9-290">Section 9.1, page 109</A>). The <CODE>subtype?</CODE> function works for both classes and other types. </P>
<P>We can ask for all the superclasses of a given class:</P>
<PRE>
<I>?</I> <A NAME=MARKER-2-127></A>all-superclasses(&lt;string&gt;);
<I>#[{class &lt;string&gt;}, {class &lt;mutable-sequence&gt;}, {class &lt;sequence&gt;}, 
{class &lt;mutable-collection&gt;}, {class &lt;collection&gt;}, {class &lt;object&gt;}]</I>
<I>?</I> all-superclasses(&lt;integer&gt;);
<I>#[{class &lt;integer&gt;}, {class &lt;rational&gt;}, {class &lt;real&gt;}, {class &lt;number&gt;}, {class &lt;object&gt;}]</I>
<I>?</I> all-superclasses(&lt;single-float&gt;);
<I>#[{class &lt;single-float&gt;}, {class &lt;float&gt;}, {class &lt;real&gt;}, {class &lt;number&gt;}, {class &lt;object&gt;}]</I>
</PRE>
<P> The <CODE>all-superclasses</CODE> function returns a vector containing the class itself and all that class's superclasses. The <CODE>#[<I>...]</I></CODE> syntax represents a <B>vector</B>, which is a one-dimensional array. (For information about vectors, see <A HREF="DB_139.HTM#MARKER-9-374">Chapter 11,  <I>Collections and Control Flow</I></A>.) </P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Dylan Programming - 9 Apr 1999</ADDRESS>
<P><A HREF="DB_40.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="DB_38.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="DB_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="DB_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="DB_349.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>N Feinberg/S E Keene/R Mathews/P Tucker Withington, DYLAN PROGRAMMING, (c) 1997 Harlequin Inc. Reproduced by permission of Addison-Wesley Longman Publishing Company, Inc.  All rights reserved. No further copying, downloading or transmitting of this material is allowed without the prior written permission of the publisher.</P>

</DIV>
</BODY>
</HTML>
