<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML Experimental 19960712//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="drm_1.htm">
<LINK REL=UP HREF="drm_96.htm">
<LINK REL=PREV HREF="drm_103.htm">
<LINK REL=NEXT HREF="drm_105.htm">
<LINK TITLE="WebMaker generated style" REL=stylesheet HREF=drm.css TYPE="text/css">
<TITLE> Functional Operations</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV CLASS=WM-DIV-BODY>
<A NAME=HEADING104></A>

<DIV CLASS=WM-DIV-HEADERS>
<P CLASS=HEADER><A HREF="drm_105.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=next.gif CLASS=HEADER></A> <A HREF="drm_103.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=prev.gif CLASS=HEADER></A> <A HREF="drm_96.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=up.gif CLASS=HEADER></A> <A HREF="drm_1.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=top.gif CLASS=HEADER></A> <A HREF="drm_2.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=content.gif CLASS=HEADER></A> <A HREF="drm_127.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=index.gif CLASS=HEADER></A></P>
<P CLASS=HEADER>12 The Built-In Functions</P>

</DIV>
<A NAME=HEADING104-0></A>
<A NAME="UID-Built-In_Functions-420"></A>
<H1 CLASS=H1.Heading1> <A NAME=MARKER-9-1873></A>Functional Operations</H1>
<P CLASS=T1.Text1><A NAME=MARKER-2-1874></A>The following operations are used to create new functions from other functions or objects. Often the Dylan compiler will have special knowledge of these operations to allow for efficient in-line compilation.</P>
<A NAME=HEADING104-2></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1875></A>compose</CODE> [Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-2-1755></A>Returns the composition of one or more functions.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="cv Cliche">compose <I CLASS="Parameter cv Cliche">function1<B CLASS="Parameter cv Cliche"> #rest more-functions   =>  function</B></I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">function1</I> An instance of <CODE CLASS="cv Cliche">&lt;function&gt;</CODE>.</P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">more-functions</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> Instances of <CODE CLASS="cv RP.RoutineParam">&lt;function&gt;</CODE>.</P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">function</I> An instance of <CODE CLASS="cv Cliche">&lt;function&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> When called with just a single argument, <CODE CLASS=Cliche>compose</CODE> returns that argument.</P>
<P CLASS=T1.Text1>When called with two arguments, <CODE CLASS=T1.Text1>compose</CODE> returns a function that applies the second function to its arguments and then applies the first function to the (single) result value.</P>
<P CLASS=T1.Text1>With three or more arguments, <CODE CLASS=T1.Text1>compose</CODE> composes pairs of argument functions, until a single composite function is obtained. (It doesn't matter if the pairings are done from the left or from the right, as long as the order of application is preserved.)</P>
</DL>
<PRE CLASS=Cv.Code>
define constant number-of-methods =
  compose(size, generic-function-methods)
define constant root-position = compose(position, root-view) 
</PRE>
<A NAME=HEADING104-13></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1877></A>complement</CODE> [Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-9-1878></A>Returns a function that expresses the complement of a predicate.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="cv Cliche">complement <I CLASS="Parameter cv Cliche">predicate<B CLASS="Parameter cv Cliche">   =>  function</B></I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">predicate</I> An instance of <CODE CLASS="cv Cliche">&lt;function&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">function</I> An instance of <CODE CLASS="cv Cliche">&lt;function&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns a function that applies <I CLASS=Cliche>predicate </I> to its arguments. If the <I CLASS=Cliche>predicate </I>returns <CODE CLASS=Cliche>#f</CODE>, the complement returns <CODE CLASS=Cliche>#t</CODE>; otherwise, the complement returns <CODE CLASS=Cliche>#f</CODE>. For example, <CODE CLASS=Cliche>odd?</CODE> could be defined as <CODE CLASS=Cliche>complement(even?)</CODE>.</P>
</DL>
<PRE CLASS=Cv.Code>
choose(complement(zero?), #(1, 3, 0, 4, 0, 0, 3))
  =>  #(1, 3, 4, 3)
</PRE>
<A NAME=HEADING104-20></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1879></A>disjoin</CODE> [Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-9-1880></A>Returns a function that expresses the disjunction of one or more predicates.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="cv Cliche">disjoin <I CLASS="Parameter cv Cliche">predicate1<B CLASS="Parameter cv Cliche"> #rest more-predicates   =>  function</B></I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">predicate1</I> An instance of <CODE CLASS="cv Cliche">&lt;function&gt;</CODE>.</P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">more-predicates</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam>  Functions.</P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">function</I> An instance of <CODE CLASS="cv Cliche">&lt;function&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns a single function, termed the disjunction of its argument functions. The disjunction accepts any number of arguments and operates by applying the predicates, in order, to the arguments. If any of the predicates returns true, the remaining predicates (if any) are not applied, and the true result is returned. Otherwise, all the predicates will be applied, and <CODE CLASS=Cliche>#f</CODE> returned.</P>
<P CLASS=T1.Text1>A disjunction is similar to an <CODE CLASS=T1.Text1>|</CODE> expression of calls to the predicates.</P>
</DL>
<PRE CLASS=Cv.Code>
define constant nonzero? = disjoin(positive?, negative?);
nonzero?(4)
<CODE CLASS="cv Cv.Code"> fi</CODE>  #t
</PRE>
<A NAME=HEADING104-29></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1881></A>conjoin</CODE> [Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-9-1882></A>Returns a function that expresses the conjunction of one or more predicates.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="cv Cliche">conjoin <I CLASS="Parameter cv Cliche">predicate1<B CLASS="Parameter cv Cliche"> #rest more-predicates   =>  function</B></I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">predicate1</I> An instance of <CODE CLASS="cv Cliche">&lt;function&gt;</CODE>.</P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">more-predicates</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> Instances of <CODE CLASS="cv RP.RoutineParam">&lt;function&gt;</CODE>.</P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">function</I> An instance of <CODE CLASS="cv Cliche">&lt;function&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns a single function, termed the conjunction of its argument functions. The conjunction accepts any number of arguments and operates by applying the predicates, in order, to the arguments. If any of the predicates returns <CODE CLASS=Cliche>#f</CODE>, the remaining predicates (if any) are not applied and <CODE CLASS=Cliche>#f</CODE> is immediately returned. Otherwise, all the predicates will be applied, and the result of the last application is returned.</P>
<P CLASS=T1.Text1>A conjunction is similar to an <CODE CLASS=T1.Text1>&amp;</CODE> expression of calls to the predicates.</P>
</DL>
<PRE CLASS=Cv.Code>
choose(conjoin(positive?, integral?), #(-1, -3, 5, -3.7, 3.5, 7))
  => #(5, 7)
</PRE>
<A NAME=HEADING104-38></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1883></A>curry</CODE> [Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-9-1884></A>Returns a function based on an existing function and a number of default initial arguments.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="cv Cliche">curry <I CLASS="Parameter cv Cliche">function<B CLASS="Parameter cv Cliche"> #rest curried-args   =>  new-function</B></I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">function</I> An instance of <CODE CLASS="cv Cliche">&lt;function&gt;</CODE>.</P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">curried-args</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> Instances of <CODE CLASS="cv RP.RoutineParam">&lt;object&gt;</CODE>.</P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">new-function</I> An instance of <CODE CLASS="cv Cliche">&lt;function&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns a function that applies <I CLASS=Cliche>function</I> to <I CLASS=Cliche>curried-args</I> plus its own arguments, in that order. For example <CODE CLASS=Cliche>curry (\&gt;, 6)</CODE> is a predicate that returns true for values less than 6; <CODE CLASS=Cliche>curry (\=, &quot;x&quot;)</CODE> is a predicate that tests for equality with the string <CODE CLASS=Cliche>&quot;x&quot;</CODE>; <CODE CLASS=Cliche>curry (\+, 1)</CODE> is an incrementing function; <CODE CLASS=Cliche>curry (concatenate, &quot;set-&quot;)</CODE> is a function that concatenates the string <CODE CLASS=Cliche>&quot;set-&quot;</CODE> to any additional sequences it is passed.</P>
</DL>
<PRE CLASS=Cv.Code>
define constant all-odd? = curry(every?, odd?)
all-odd?(list(1, 3, 5))
<CODE CLASS="cv Cv.Code"> fi</CODE> #t
define constant less-than-10? = curry(\&gt;, 10)
less-than-10?(4)
<CODE CLASS="cv Cv.Code"> fi</CODE> #t
</PRE>
<A NAME=HEADING104-47></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1885></A>rcurry</CODE> [Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-9-1886></A>Returns a function based on an existing function and a number of default final arguments.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="cv Cliche">rcurry <I CLASS="Parameter cv Cliche">function<B CLASS="Parameter cv Cliche"> #rest curried-args   =>  new-function</B></I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">function</I> An instance of <CODE CLASS="cv Cliche">&lt;function&gt;</CODE>.</P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">curried-args</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> Instances of <CODE CLASS="cv RP.RoutineParam">&lt;object&gt;</CODE>.</P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">new-function</I> An instance of <CODE CLASS="cv Cliche">&lt;function&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns a function that applies <I CLASS=Cliche>function</I> to <I CLASS=Cliche>curried-args</I> plus its own arguments, with the <I CLASS="Parameter Cliche">curried-args</I> occurring last.</P>
<P CLASS=T1.Text1><CODE CLASS=T1.Text1>rcurry</CODE> ("right" curry) operates just like <CODE CLASS=T1.Text1>curry</CODE>, except it allows the rightmost arguments of <I CLASS=T1.Text1>function </I>to be specified in advance, rather than the leftmost arguments. For example, <CODE CLASS=T1.Text1>rcurry (\&gt;, 6)</CODE> is a predicate that returns true for values greater than 6.</P>
</DL>
<PRE CLASS=Cv.Code>
define constant number? = rcurry(instance?, &lt;number&gt;)
number?(4) 
<CODE CLASS="cv Cv.Code"> fi</CODE> #t
number?(&quot;string&quot;)
<CODE CLASS="cv Cv.Code"> fi</CODE> #f
define constant greater-than-10? = rcurry(\&gt;, 10)
greater-than-10?(4)
<CODE CLASS="cv Cv.Code"> fi</CODE> #f
</PRE>
<A NAME=HEADING104-57></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1887></A>always</CODE> [Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription>Returns a function that always returns a particular object<A NAME=MARKER-9-1888></A>.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="cv Cliche">always <I CLASS="Parameter cv Cliche">object<B CLASS="Parameter cv Cliche">   =>  function</B></I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">function</I> An instance of <CODE CLASS="cv Cliche">&lt;function&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns a function that can be called with any number of arguments. The function ignores its arguments and always returns <I CLASS=Cliche>object</I>.</P>
</DL>
<PRE CLASS=Cv.Code>
define constant menu = always(&quot;spam!&quot;)
menu(&quot;today&quot;) 
<CODE CLASS="cv Cv.Code"> fi</CODE> &quot;spam!&quot;
menu(&quot;tomorrow&quot;)  
<CODE CLASS="cv Cv.Code"> fi</CODE> &quot;spam!&quot;
menu(4, 5, 6)
<CODE CLASS="cv Cv.Code"> fi</CODE> &quot;spam!&quot;
</PRE>

</DIV>

<DIV CLASS=WM-DIV-FOOTERS>

<DIV CLASS=WM-DIV-TOC>

<!-- TOC --><DL CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_104.htm#HEADING104-2" CLASS=FOOTER><B CLASS=FOOTER></B>compose [Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_104.htm#HEADING104-13" CLASS=FOOTER><B CLASS=FOOTER></B>complement [Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_104.htm#HEADING104-20" CLASS=FOOTER><B CLASS=FOOTER></B>disjoin [Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_104.htm#HEADING104-29" CLASS=FOOTER><B CLASS=FOOTER></B>conjoin [Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_104.htm#HEADING104-38" CLASS=FOOTER><B CLASS=FOOTER></B>curry [Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_104.htm#HEADING104-47" CLASS=FOOTER><B CLASS=FOOTER></B>rcurry [Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_104.htm#HEADING104-57" CLASS=FOOTER><B CLASS=FOOTER></B>always [Function]</A>
<DD CLASS=FOOTER>
</DL>


</DIV>

<HR CLASS=FOOTER>
<ADDRESS CLASS=FOOTER>The Dylan Reference Manual - 7 Apr 1998</ADDRESS>
<P CLASS=FOOTER><A HREF="drm_105.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=next.gif CLASS=HEADER></A> <A HREF="drm_103.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=prev.gif CLASS=HEADER></A> <A HREF="drm_96.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=up.gif CLASS=HEADER></A> <A HREF="drm_1.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=top.gif CLASS=HEADER></A> <A HREF="drm_2.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=content.gif CLASS=HEADER></A> <A HREF="drm_127.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=index.gif CLASS=HEADER></A></P>
<P CLASS=FOOTER>Copyright Apple Computer, Inc. 1996. Apple&#174; and the Apple logo are registered trademarks of Apple Computer, Inc. Used with permission. All Rights Reserved.</P>
<P CLASS=FOOTER>You can order a <A HREF="http://www.harlequin.com/products/ads/dylan/purchase.shtml" CLASS=FOOTER>bound copy</A> of this book from Harlequin.</P>
<P CLASS=FOOTER>Generated with <A HREF="http://www.harlequin.com/webmaker" CLASS=FOOTER>Harlequin WebMaker&#174;</A></P>

</DIV>
</BODY>
</HTML>
