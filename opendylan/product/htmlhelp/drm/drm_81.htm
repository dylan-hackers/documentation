<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML Experimental 19960712//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="drm_1.htm">
<LINK REL=UP HREF="drm_76.htm">
<LINK REL=PREV HREF="drm_80.htm">
<LINK REL=NEXT HREF="drm_82.htm">
<LINK TITLE="WebMaker generated style" REL=stylesheet HREF=drm.css TYPE="text/css">
<TITLE> Patterns</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV CLASS=WM-DIV-BODY>
<A NAME=HEADING81></A>

<DIV CLASS=WM-DIV-HEADERS>
<P CLASS=HEADER><A HREF="drm_82.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=next.gif CLASS=HEADER></A> <A HREF="drm_80.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=prev.gif CLASS=HEADER></A> <A HREF="drm_76.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=up.gif CLASS=HEADER></A> <A HREF="drm_1.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=top.gif CLASS=HEADER></A> <A HREF="drm_2.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=content.gif CLASS=HEADER></A> <A HREF="drm_127.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=index.gif CLASS=HEADER></A></P>
<P CLASS=HEADER>10 Macros</P>

</DIV>
<A NAME=HEADING81-0></A>
<A NAME=UID-Macros-1648></A>
<H1 CLASS=H1.Heading1> Patterns</H1>
<P CLASS=T1.Text1><A NAME=MARKER-2-1237></A>Approximately speaking, a pattern looks like the construct that it matches, but contains pattern variables that bind to portions of the construct. Hence, a left-hand side in the <I CLASS="Parameter T1.Text1">main-rule-set</I> looks like a macro call. However, the grammar of patterns is not the same as the grammar of programs, but contains just what is required to match the portions of the Dylan grammar that are extensible by macros. Patterns have a simple nested grammar, with semicolons, commas, and brackets used to indicate levels of nesting. See the definition of <I CLASS="Parameter T1.Text1">pattern</I> in <A HREF="drm_116.htm#MARKER-9-2090" CLASS=T1.Text1>Appendix A, "BNF."</A></P>
<P CLASS=T1.Text1>A pattern matches a fragment (a sequence of elementary fragments) by executing the following algorithm from left to right. It is easy to create patterns that are ambiguous when considered as grammars. This ambiguity is resolved by the left to right processing order and the specified try-shortest-first order for matching wildcards. Pattern matching succeeds only if all sub-patterns match. If pattern matching fails, the current rule fails and control passes to the next rule in the current rule set. If all patterns in a rule set fail to match, the macro call is invalid.</P>
<P CLASS=T1.Text1>Multiple occurrences of the same pattern variable name in a single rule's left-hand side are not valid.</P>
<P CLASS=T1.Text1>A <I CLASS="Parameter T1.Text1">pattern</I>  matches a fragment as follows:</P>
<UL CLASS=B1.Bullet1>
<LI CLASS=B1.Bullet1>If the pattern consists of just one pattern-list, go to the next step. Otherwise, divide the pattern into subpatterns and the fragment into subfragments at semicolons, and match subpatterns to subfragments individually in order. The subpatterns and subfragments do not include the semicolons that separate them. Suppose the pattern consists of N + 1 pattern-lists separated by N semicolons. Locate the first N semicolons in the fragment (without looking inside of elementary fragments) and divide up the fragment into subfragments accordingly. The match fails if the fragment contains fewer than N - 1 semicolons. As a special case, if the fragment contains N - 1 semicolons, the match still succeeds and the last subfragment is empty. If the fragment contains more than N semicolons, the extra semicolons will be in the last subfragment.
<P CLASS=T1.Text1>A <A NAME=MARKER-2-1238></A><I CLASS=T1.Text1>pattern-list</I>  matches a fragment as follows:</P>
<LI CLASS=B1.Bullet1>If the pattern-list consists of just a pattern-sequence, go to the next step. If the pattern-list consists of just a property-list-pattern, go to that step. Otherwise divide the pattern-list into subpatterns and the fragment into subfragments at commas, and match subpatterns to subfragments individually in order. The subpatterns and subfragments do not include the commas that separate them. Suppose the pattern consists of N + 1 subpatterns separated by N commas. Locate the first N commas in the fragment (without looking inside of elementary fragments) and divide up the fragment into subfragments accordingly. The match fails if the fragment contains fewer than N - 1 commas. As a special case, if the fragment contains N - 1 commas, the match still succeeds and the last subfragment is empty. If the fragment contains more than N commas, the extra commas will be in the last subfragment. Note that the subdivision algorithms for commas and semicolons are identical.
<P CLASS=T1.Text1>A <A NAME=MARKER-2-1239></A><I CLASS="Parameter T1.Text1">pattern-sequence</I>  matches a fragment as follows:</P>
<LI CLASS=B1.Bullet1>Consider each simple-pattern in the pattern-sequence in turn from left to right. Each simple-pattern matches an initial subsequence of the fragment and consumes that subsequence, or fails. The entire pattern match fails if any simple-pattern fails, if the fragment is empty and the simple-pattern requires one or more elementary fragments, or if the fragment is not entirely consumed after all simple-patterns have been matched. There is a special backup and retry rule for wildcards, described below.
<P CLASS=T1.Text1>A <I CLASS=T1.Text1><A NAME=MARKER-2-1240></A>simple-pattern  </I>matches a fragment as follows:</P>
<LI CLASS=B1.Bullet1>A <EM CLASS=B1.Bullet1>name</EM> or <CODE CLASS="cv B1.Bullet1">=&gt;</CODE> consumes one elementary fragment, which must be identical to the <I CLASS="Parameter B1.Bullet1">simple-pattern</I>. A <EM CLASS=B1.Bullet1>name</EM> matches a name that is spelled the same, independent of modules, lexical scoping issues, alphabetic case, and backslash quoting. As a special case, after the word <CODE CLASS="cv B1.Bullet1">otherwise</CODE>, an <CODE CLASS="cv B1.Bullet1">=&gt;</CODE> is optional in both the pattern and the fragment. Presence or absence of the arrow in either place makes no difference to matching. 
<LI CLASS=B1.Bullet1>A <A NAME=MARKER-2-1241></A><I CLASS="Parameter B1.Bullet1">bracketed-pattern<CODE CLASS="Parameter B1.Bullet1"> </CODE></I>matches and consumes a <I CLASS="Parameter B1.Bullet1">bracketed-fragment</I>. If the enclosed <I CLASS="Parameter B1.Bullet1">pattern</I> is omitted, the enclosed <I CLASS="Parameter B1.Bullet1">body-fragment</I> must be empty, otherwise the enclosed <I CLASS="Parameter B1.Bullet1">pattern</I> must match the enclosed <I CLASS="Parameter B1.Bullet1">body-fragment</I>  (which can be empty). The type of brackets ( <CODE CLASS="cv B1.Bullet1">()</CODE>, <CODE CLASS="cv B1.Bullet1">[]</CODE>, or <CODE CLASS="cv B1.Bullet1">{}</CODE> ) in the <I CLASS="Parameter B1.Bullet1">bracketed-fragment  </I>must be the same as the type of brackets in the <I CLASS="Parameter B1.Bullet1">bracketed-pattern</I>.
<P CLASS=T1.Text1>A <A NAME=MARKER-2-1242></A><I CLASS="Parameter T1.Text1">binding-pattern</I>  matches a fragment as follows:</P>
<LI CLASS=B1.Bullet1><I CLASS="Parameter B1.Bullet1">pattern-variable <CODE CLASS="Parameter B1.Bullet1"> :: pattern-variable  </CODE></I>consumes as much of the fragment as can be parsed by the grammar for <I CLASS="Parameter B1.Bullet1">variable. </I>It matches the first pattern-variable to the <I CLASS="Parameter B1.Bullet1">variable-name</I> and the second to the <I CLASS="Parameter B1.Bullet1">type</I>, a parsed expression fragment. If no specializer is present, it matches the second pattern-variable to a parsed expression fragment that is a named value reference to <CODE CLASS="cv B1.Bullet1">&lt;object&gt;</CODE> in the Dylan module. This matching checks the constraints on the pattern variable, fails if the constraint is not satisfied, and binds the pattern variable to the fragment.
<LI CLASS=B1.Bullet1><I CLASS="Parameter B1.Bullet1">pattern-variable<CODE CLASS="Parameter B1.Bullet1"> = pattern-variable  </CODE></I>consumes as much of the fragment as can be parsed by the grammar for <I CLASS="Parameter B1.Bullet1">variable</I> <CODE CLASS="cv B1.Bullet1">=</CODE> <I CLASS="Parameter B1.Bullet1">expression. </I>It matches the first pattern-variable to the <I CLASS="Parameter B1.Bullet1">variable,</I> a fragment, and the second to the <I CLASS="Parameter B1.Bullet1">expression</I>, a parsed expression fragment.
<LI CLASS=B1.Bullet1><I CLASS="Parameter B1.Bullet1">pattern-variable<CODE CLASS="Parameter B1.Bullet1"> :: pattern-variable = pattern-variable  </CODE></I>consumes as much of the fragment as can be parsed by the grammar for <I CLASS="Parameter B1.Bullet1">variable</I> <CODE CLASS="cv B1.Bullet1">=</CODE> <I CLASS="Parameter B1.Bullet1">expression. </I>It matches the first two pattern-variables the same as the first kind of <I CLASS="Parameter B1.Bullet1">binding-pattern</I> and it matches the third pattern-variable the same as the second kind of <I CLASS="Parameter B1.Bullet1">binding-pattern.</I>
<P CLASS=T1.Text1>A <I CLASS="Parameter T1.Text1"><A NAME=MARKER-2-1243></A>pattern-variable  </I>matches a fragment as follows:</P>
<LI CLASS=B1.Bullet1>When the constraint is a wildcard constraint (see <A HREF="drm_82.htm#MARKER-9-1256" CLASS=B1.Bullet1>"Pattern Variable Constraints" on page 157</A>), the pattern variable<I CLASS=B1.Bullet1> </I>consumes some initial subsequence of the fragment, using a backup and retry algorithm. First, the wildcard consumes no elementary fragments, and matching continues with the next <I CLASS="Parameter B1.Bullet1">simple-pattern</I> in the <I CLASS="Parameter B1.Bullet1">pattern-sequence</I>. If any <I CLASS="Parameter B1.Bullet1">simple-pattern</I> in the current <I CLASS="Parameter B1.Bullet1">pattern-sequence</I> fails to match, back up to the wildcard, consume one more elementary fragment than before, and retry matching the rest of the <I CLASS="Parameter B1.Bullet1">pattern-sequence</I>, starting one elementary fragment to the right of the previous start point. Once the entire <I CLASS="Parameter B1.Bullet1">pattern-sequence</I> has successfully matched, the pattern variable binds to a fragment consisting of the sequence of elementary fragments that it consumed.
<LI CLASS=B1.Bullet1>It is an error for more than one of the <I CLASS="Parameter B1.Bullet1">simple-patterns</I> directly contained in a <I CLASS="Parameter B1.Bullet1">pattern-sequence</I> to be a wildcard.
<LI CLASS=B1.Bullet1>When the constraint is other than a wildcard constraint, the pattern variable consumes as much of the fragment as can be parsed by the grammar specified for the constraint in <A HREF="drm_82.htm#MARKER-9-1256" CLASS=B1.Bullet1>"Pattern Variable Constraints" on page 157</A>. If the parsing fails, the pattern match fails. The pattern variable binds to the fragment specified in <A HREF="drm_82.htm#MARKER-9-1256" CLASS=B1.Bullet1>"Pattern Variable Constraints."</A>  This can be a parsed fragment rather than the original sequence of elementary fragments.
<LI CLASS=B1.Bullet1>The ellipsis <I CLASS="Parameter B1.Bullet1">pattern-variable</I>, <CODE CLASS="cv B1.Bullet1">...</CODE>, can only be used in an auxiliary rule set. It represents a pattern variable with the same name as the current rule set and a wildcard constraint.
<P CLASS=T1.Text1>A <A NAME=MARKER-2-1244></A><I CLASS="Parameter T1.Text1">property-list-pattern</I>  matches a fragment as follows:</P>
<LI CLASS=B1.Bullet1>Parse the fragment using the grammar for <I CLASS="Parameter B1.Bullet1">property-list<EM CLASS="Subscript Parameter B1.Bullet1">opt</EM></I> . If the parsing fails or does not consume the entire fragment, the pattern match fails.
<LI CLASS=B1.Bullet1>If the <I CLASS="Parameter B1.Bullet1">property-list-pattern</I> contains <CODE CLASS="cv B1.Bullet1"><A NAME=MARKER-2-1245></A>#key</CODE> and does not contain <CODE CLASS="cv B1.Bullet1">#all-keys</CODE>, the match fails if the <EM CLASS=B1.Bullet1>symbol</EM> part of any property is not the <EM CLASS=B1.Bullet1>name</EM> in some <I CLASS="Parameter B1.Bullet1">pattern-keyword</I>  in the <I CLASS="Parameter B1.Bullet1">property-list-pattern</I>. Comparison of a <EM CLASS=B1.Bullet1>symbol</EM> to a <EM CLASS=B1.Bullet1>name</EM> is case-insensitive, ignores backslash quoting, and is unaffected by the lexical context of the <EM CLASS=B1.Bullet1>name</EM>.
<LI CLASS=B1.Bullet1>If the <I CLASS="Parameter B1.Bullet1">property-list-pattern</I> contains <A NAME=MARKER-2-1246></A><CODE CLASS="cv B1.Bullet1">#rest</CODE>, bind the pattern variable immediately following <CODE CLASS="cv B1.Bullet1">#rest</CODE> to the entire fragment. If the pattern variable has a non-wildcard constraint, parse the <I CLASS="Parameter B1.Bullet1">value</I> part of each property according to this constraint, fail if the parsing fails or does not consume the entire <I CLASS="Parameter B1.Bullet1">value</I> part, and substitute the fragment specified in <A HREF="drm_82.htm#MARKER-9-1256" CLASS=B1.Bullet1>"Pattern Variable Constraints" on page 157</A> for the <I CLASS="Parameter B1.Bullet1">value</I> part.
<LI CLASS=B1.Bullet1>Each <I CLASS="Parameter B1.Bullet1">pattern-keyword</I> in the <I CLASS="Parameter B1.Bullet1">property-list-pattern</I> binds a pattern variable as follows: 
<UL CLASS=B2.Bullet2>
<LI CLASS=B2.Bullet2>A single <A NAME=MARKER-2-1247></A>question mark finds the first property whose <EM CLASS=B2.Bullet2>symbol</EM> is the <EM CLASS=B2.Bullet2>name</EM> of the <I CLASS="Parameter B2.Bullet2">pattern-keyword</I>. Comparison of a <EM CLASS=B2.Bullet2>symbol</EM> to a <EM CLASS=B2.Bullet2>name</EM> is case-insensitive, ignores backslash quoting, and is unaffected by the lexical context of the <EM CLASS=B2.Bullet2>name</EM>. If the <I CLASS="Parameter B2.Bullet2">pattern-keyword</I>  has a non-wildcard constraint, parse the property's <I CLASS="Parameter B2.Bullet2">value</I>  according to this constraint, fail if the parsing fails or does not consume the entire <I CLASS="Parameter B2.Bullet2">value</I> , and bind the pattern variable to the fragment specified in <A HREF="drm_82.htm#MARKER-9-1256" CLASS=B2.Bullet2>"Pattern Variable Constraints" on page 157</A>. If the <I CLASS="Parameter B2.Bullet2">pattern-keyword</I>  has a wildcard constraint, bind the pattern variable to the property's <I CLASS="Parameter B2.Bullet2">value</I>.
<LI CLASS=B2.Bullet2>A double <A NAME=MARKER-2-1248></A>question mark finds every property with a matching <EM CLASS=B2.Bullet2>symbol</EM>, processes each property's <I CLASS="Parameter B2.Bullet2">value</I> as for a single question mark, and binds the pattern variable to a sequence of the values, preserving the order of properties in the input fragment. This sequence can only be used with double question mark in a template. Constraint-directed parsing applies to each property <I CLASS="Parameter B2.Bullet2">value</I> individually.
</UL>
<LI CLASS=B1.Bullet1>If a single question mark <I CLASS="Parameter B1.Bullet1">pattern-keyword</I> does not find any matching property, then if a <I CLASS="Parameter B1.Bullet1">default</I> is present, the pattern variable binds to the default expression, otherwise the property is required so the pattern match fails.
<LI CLASS=B1.Bullet1>If a double question mark <I CLASS="Parameter B1.Bullet1">pattern-keyword</I>  does not find any matching property, then if a <I CLASS="Parameter B1.Bullet1">default</I> is present, the pattern variable binds to a sequence of one element, the default expression, otherwise the pattern variable binds to an empty sequence. 
<LI CLASS=B1.Bullet1>Note: the default expression in a <I CLASS="Parameter B1.Bullet1">pattern-keyword</I>  is not evaluated during macro expansion; it is a parsed expression fragment that is used instead of a fragment from the macro call. The default is not subject to a pattern variable constraint.
</UL>
<A NAME=HEADING81-32></A>
<A NAME=UID-Macros-1752></A>
<H2 CLASS=H2.Heading2> Special Rules for Definitions</H2>
<P CLASS=T1.Text1><A NAME=MARKER-2-1249></A>A list-style definition parses as the core reserved word <CODE CLASS="cv T1.Text1">define</CODE>, an optional sequence of modifiers, a <EM CLASS=T1.Text1>define-list-word</EM>, and a possibly-empty <I CLASS="Parameter T1.Text1">list-fragment. </I>The left-hand side of a <I CLASS="Parameter T1.Text1">list-style-definition-rule </I> matches this by treating the <I CLASS="Parameter T1.Text1">definition-head</I> as a <I CLASS="Parameter T1.Text1">pattern-sequence</I> and matching it to the sequence of modifiers, and then matching the <I CLASS="Parameter T1.Text1">pattern</I> to the <I CLASS="Parameter T1.Text1">list-fragment. </I>If no <I CLASS="Parameter T1.Text1">definition-head</I> is present, the sequence of modifiers must be empty. If no <I CLASS="Parameter T1.Text1">pattern  </I>is present, the <I CLASS="Parameter T1.Text1">list-fragment </I>must be empty. The word <CODE CLASS="cv T1.Text1">define</CODE> and the <EM CLASS=T1.Text1>define-list-word</EM> do not participate in the pattern match because they were already used to identify the macro being called and because the spelling of the <EM CLASS=T1.Text1>define-list-word</EM> might have been changed by renaming the macro during module importing.</P>
<P CLASS=T1.Text1>A body-style definition parses as the core reserved word <CODE CLASS="cv T1.Text1">define</CODE>, an optional sequence of modifiers, a <EM CLASS=T1.Text1>define-body-word</EM>, a possibly-empty <I CLASS="Parameter T1.Text1">body-fragment,</I> the core reserved word <CODE CLASS="cv T1.Text1">end</CODE>, and optional repetitions of the <EM CLASS=T1.Text1>define-body-word</EM> and the <EM CLASS=T1.Text1>name</EM> (if any) that is the first token of the <I CLASS="Parameter T1.Text1">body-fragment. </I>The left-hand side of a <I CLASS="Parameter T1.Text1">body-style-definition-rule</I> matches this by treating the <I CLASS="Parameter T1.Text1">definition-head</I> as a <I CLASS="Parameter T1.Text1">pattern-sequence</I> and matching it to the sequence of modifiers, and then matching the <I CLASS="Parameter T1.Text1">pattern</I> to the <I CLASS="Parameter T1.Text1">body-fragment. </I>If no <I CLASS="Parameter T1.Text1">definition-head</I> is present, the sequence of modifiers must be empty. If no <I CLASS="Parameter T1.Text1">pattern </I>is present, the <I CLASS="Parameter T1.Text1">body-fragment </I>must be empty. If the <I CLASS="Parameter T1.Text1">body-fragment </I>ends in a semicolon, this semicolon is removed before matching. The optional semicolon in the rule is just decoration and does not participate in the pattern match. The word <CODE CLASS="cv T1.Text1">define</CODE> and the <EM CLASS=T1.Text1>define-body-word</EM> do not participate in the pattern match because they were already used to identify the macro being called and because the spelling of the <EM CLASS=T1.Text1>define-body-word</EM> might have been changed by renaming the macro during module importing. The word <CODE CLASS="cv T1.Text1">end</CODE> and the two optional items following it in the macro call are checked during parsing, and so do not participate in the pattern match.</P>
<P CLASS=T1.Text1>It is an error for a <I CLASS="Parameter T1.Text1">definition-head</I>  to contain more than one wildcard.<A NAME=MARKER-2-1250></A></P>
<A NAME=HEADING81-36></A>
<A NAME=UID-Macros-1760></A>
<H2 CLASS=H2.Heading2> Special Rules for Statements</H2>
<P CLASS=T1.Text1><A NAME=MARKER-2-1251></A>A statement parses as a <EM CLASS=T1.Text1>begin-word</EM>, a possibly-empty <I CLASS="Parameter T1.Text1">body-fragment,</I> the core reserved word <CODE CLASS="cv T1.Text1">end</CODE>, and an optional repetition of the <EM CLASS=T1.Text1>begin-word</EM>. The left-hand side of a <I CLASS="Parameter T1.Text1">statement-rule</I> matches this by matching the <I CLASS="Parameter T1.Text1">pattern</I> to the <I CLASS="Parameter T1.Text1">body-fragment. </I>If the rule does not contain a <I CLASS="Parameter T1.Text1">pattern,</I> the <I CLASS="Parameter T1.Text1">body-fragment</I>  must be empty. If the <I CLASS="Parameter T1.Text1">body-fragment</I> ends in a semicolon, this semicolon is removed before matching. The optional semicolon in the rule is just decoration and does not participate in the pattern match. The <EM CLASS=T1.Text1>begin-word</EM> does not participate in the pattern match because it was already used to identify the macro being called and because its spelling might have been changed by renaming the macro during module importing. The word <CODE CLASS="cv T1.Text1">end</CODE> and the optional item following it in the macro call are checked during parsing, and so do not participate in the pattern match.<A NAME=MARKER-2-1252></A></P>
<A NAME=HEADING81-38></A>
<A NAME=UID-Macros-1764></A>
<H2 CLASS=H2.Heading2> Special Rules for Function Macros</H2>
<P CLASS=T1.Text1><A NAME=MARKER-2-1253></A>A call to a function macro parses as a <EM CLASS=T1.Text1>function-word</EM> followed by a parenthesized, possibly-empty <I CLASS="Parameter T1.Text1">body-fragment</I>. The left-hand side of a <I CLASS="Parameter T1.Text1">function-rule</I> matches this by matching the <I CLASS="Parameter T1.Text1">pattern</I> to the <I CLASS="Parameter T1.Text1">body-fragment. </I>If the rule does not contain a <I CLASS="Parameter T1.Text1">pattern,</I> the <I CLASS="Parameter T1.Text1">body-fragment</I> must be empty. The <EM CLASS=T1.Text1>function-word</EM> does not participate in the pattern match because it was already used to identify the macro being called and because its spelling might have been changed by renaming the macro during module importing. The parentheses in the rule are just decoration and do not participate in the pattern match.</P>
<P CLASS=T1.Text1>A function macro can also be invoked by any of the shorthand syntax constructs available for invoking functions. In this case, the arguments are always parsed expression fragments, as described on <A HREF="drm_77.htm#MARKER-9-1199" CLASS=T1.Text1>page 146</A>. However, the left-hand side of a function-rule has to use function-macro-call syntax even if the macro is intended to be called by operator, slot reference, or element reference syntax.<A NAME=MARKER-2-1254></A><A NAME=MARKER-2-1255></A></P>

</DIV>

<DIV CLASS=WM-DIV-FOOTERS>

<DIV CLASS=WM-DIV-TOC>

<!-- TOC --><DL CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_81.htm#HEADING81-32" CLASS=FOOTER><B CLASS=FOOTER></B>Special Rules for Definitions</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_81.htm#HEADING81-36" CLASS=FOOTER><B CLASS=FOOTER></B>Special Rules for Statements</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_81.htm#HEADING81-38" CLASS=FOOTER><B CLASS=FOOTER></B>Special Rules for Function Macros</A>
<DD CLASS=FOOTER>
</DL>


</DIV>

<HR CLASS=FOOTER>
<ADDRESS CLASS=FOOTER>The Dylan Reference Manual - 7 Apr 1998</ADDRESS>
<P CLASS=FOOTER><A HREF="drm_82.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=next.gif CLASS=HEADER></A> <A HREF="drm_80.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=prev.gif CLASS=HEADER></A> <A HREF="drm_76.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=up.gif CLASS=HEADER></A> <A HREF="drm_1.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=top.gif CLASS=HEADER></A> <A HREF="drm_2.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=content.gif CLASS=HEADER></A> <A HREF="drm_127.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=index.gif CLASS=HEADER></A></P>
<P CLASS=FOOTER>Copyright Apple Computer, Inc. 1996. Apple&#174; and the Apple logo are registered trademarks of Apple Computer, Inc. Used with permission. All Rights Reserved.</P>
<P CLASS=FOOTER>You can order a <A HREF="http://www.harlequin.com/products/ads/dylan/purchase.shtml" CLASS=FOOTER>bound copy</A> of this book from Harlequin.</P>
<P CLASS=FOOTER>Generated with <A HREF="http://www.harlequin.com/webmaker" CLASS=FOOTER>Harlequin WebMaker&#174;</A></P>

</DIV>
</BODY>
</HTML>
