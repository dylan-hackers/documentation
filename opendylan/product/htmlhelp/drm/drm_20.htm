<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML Experimental 19960712//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="drm_1.htm">
<LINK REL=UP HREF="drm_9.htm">
<LINK REL=PREV HREF="drm_19.htm">
<LINK REL=NEXT HREF="drm_21.htm">
<LINK TITLE="WebMaker generated style" REL=stylesheet HREF=drm.css TYPE="text/css">
<TITLE> Lexical Syntax</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV CLASS=WM-DIV-BODY>
<A NAME=HEADING20></A>

<DIV CLASS=WM-DIV-HEADERS>
<P CLASS=HEADER><A HREF="drm_21.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=next.gif CLASS=HEADER></A> <A HREF="drm_19.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=prev.gif CLASS=HEADER></A> <A HREF="drm_9.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=up.gif CLASS=HEADER></A> <A HREF="drm_1.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=top.gif CLASS=HEADER></A> <A HREF="drm_2.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=content.gif CLASS=HEADER></A> <A HREF="drm_127.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=index.gif CLASS=HEADER></A></P>
<P CLASS=HEADER>2 Syntax</P>

</DIV>
<A NAME=HEADING20-0></A>
<A NAME=UID-Syntax-1520></A>
<H1 CLASS=H1.Heading1> <A NAME=MARKER-2-275></A>Lexical Syntax</H1>
<P CLASS=T1.Text1>Dylan source code is a sequence of tokens. <A NAME=MARKER-2-276></A>Whitespace is required between tokens if the tokens would otherwise blend together. Whitespace is optional between self-delimiting tokens. Alphabetic case is not significant except within character and string literals.</P>
<P CLASS=T1.Text1><B CLASS="Bold T1.Text1"><A NAME=MARKER-2-277></A>Whitespace</B> can be a space character, a tab character, a newline character, or a comment. Implementations can define additional whitespace characters.</P>
<P CLASS=T1.Text1>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-278></A>comment</B> can be single-line or delimited. Although comments count as whitespace, the beginning of a comment can blend with a preceding token, so in general comments should be surrounded by genuine whitespace.</P>
<P CLASS=T1.Text1>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-279></A>single-line comment</B> consists of two slash characters in a row, followed by any number of characters up to and including the first newline character or the end of the source record. For example, <CODE CLASS="Code T1.Text1"><A NAME=MARKER-2-280></A>// This line is a kludge!</CODE></P>
<P CLASS=T1.Text1>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-281></A>delimited comment</B> consists of a slash character immediately followed by a star character, any number of characters (including complete single-line and complete delimited comments), and finally a star character immediately followed by a slash character. For example, <CODE CLASS="Code T1.Text1"><A NAME=MARKER-2-282></A>/* set x to 3 */</CODE>.</P>
<P CLASS=T1.Text1>A single-line comment may appear within a delimited comment; occurrences of slash-star or star-slash within the single line comment are ignored.<A NAME=MARKER-2-283></A></P>
<P CLASS=T1.Text1>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-284></A>token</B> is a name, a #-word, an operator, a number, a character literal, a string literal, a symbol literal, or punctuation.</P>
<P CLASS=T1.Text1>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-285></A>name</B> is one of the following four possibilities:</P>
<UL CLASS=B1.Bullet1>
<LI CLASS=B1.Bullet1>An alphabetic character followed by zero or more name characters.
<LI CLASS=B1.Bullet1>A numeric character followed by two or more name characters including at least two alphabetic characters in a row.
<LI CLASS=B1.Bullet1>A graphic character followed by one or more name characters including at least one alphabetic character.
<LI CLASS=B1.Bullet1>A "\" (backslash) followed by a function operator or another name. 
</UL>
<P CLASS=Default> <A NAME=MARKER-2-286></A>An <B CLASS="Bold Default"><A NAME=MARKER-2-287></A>alphabetic character</B> is any of the 26 letters of the Roman alphabet in upper and lower case.</P>
<P CLASS=T1.Text1>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-288></A>numeric character</B> is any of the 10 digits.</P>
<P CLASS=T1.Text1>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-289></A>graphic character</B> is one of the following:</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">!</CODE> <CODE CLASS="Code T1.Text1">&amp;</CODE> <CODE CLASS="Code T1.Text1">*</CODE> <CODE CLASS="Code T1.Text1">&lt;</CODE> <CODE CLASS="Code T1.Text1">=</CODE> <CODE CLASS="Code T1.Text1">&gt;</CODE> <CODE CLASS="Code T1.Text1">|</CODE> <CODE CLASS="Code T1.Text1">^</CODE> <CODE CLASS="Code T1.Text1">$</CODE> <CODE CLASS="Code T1.Text1">%</CODE> <CODE CLASS="Code T1.Text1">@</CODE> <CODE CLASS="Code T1.Text1">_</CODE></P>
<P CLASS=T1.Text1>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-290></A>name character</B> is an alphabetic character, a numeric character, a graphic character, or one of the following:</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">-</CODE> <CODE CLASS="Code T1.Text1">+</CODE> <CODE CLASS="Code T1.Text1">~</CODE> <CODE CLASS="Code T1.Text1">?</CODE> <CODE CLASS="Code T1.Text1">/</CODE></P>
<P CLASS=T1.Text1>The rich set of name characters means that name and operator tokens can blend. Thus Dylan programs usually set off operators with whitespace.</P>
<P CLASS=T1.Text1>Implementations can add additional characters but programs using them will not be portable.<A NAME=MARKER-2-291></A></P>
<P CLASS=T1.Text1>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-292></A>#-word</B> is one of <CODE CLASS="Code T1.Text1">#t</CODE>, <CODE CLASS="Code T1.Text1">#f</CODE>, <CODE CLASS="Code T1.Text1">#next</CODE>, <CODE CLASS="Code T1.Text1">#rest</CODE>, <CODE CLASS="Code T1.Text1">#key</CODE>, or <CODE CLASS="Code T1.Text1">#all-keys</CODE>. The first two are literal constants, the others are used in parameter lists. Implementations can add additional implementation-defined #-words, but programmers cannot add their own #-words.</P>
<P CLASS=T1.Text1>An <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-293></A>operator</B> is one of the following:</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">+</CODE> addition</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">-</CODE> subtraction and negation</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">*</CODE> multiplication</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">/</CODE> division</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">^</CODE> exponentiation</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">=</CODE> equality</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">==</CODE> identity</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">&lt;</CODE> less than</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">&gt;</CODE> greater than</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">&lt;=</CODE> less than or equal</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">&gt;=</CODE> greater than or equal</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">~=</CODE> not equal</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">~==</CODE> not identical</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">&amp;</CODE> logical and</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">|</CODE> logical or</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">:=</CODE> assignment</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">~</CODE> logical negation</P>
<P CLASS=T1.Text1>Programmers cannot add their own operators.</P>
<P CLASS=T1.Text1>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-294></A>number</B> is a decimal integer with an optional leading sign, a binary integer, an octal integer, a hexadecimal integer, a ratio of two decimal integers with an optional leading sign, or a floating-point number. The complete syntax of numbers is given in <A HREF="drm_117.htm#MARKER-9-2105" CLASS=T1.Text1>"Numbers" on page 418</A>. Note that the ratios are not included in the Dylan language. The ratio syntax is reserved for future expansion and for implementation-specific extensions.</P>
<P CLASS=T1.Text1>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-295></A>character literal</B> is a printing character (including space, but not <CODE CLASS="cv T1.Text1">'</CODE> or <CODE CLASS="cv T1.Text1">\</CODE>) or a backslash escape sequence enclosed in a pair of single-quote characters '.</P>
<P CLASS=T1.Text1>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-296></A>string literal</B> is a sequence of printing characters (including space, but not <CODE CLASS="cv T1.Text1">&quot;</CODE> or <CODE CLASS="cv T1.Text1">\</CODE>) and backslash escape sequences enclosed in a pair of double-quote characters &quot;.</P>
<P CLASS=T1.Text1>A <B CLASS="bold T1.Text1"><A NAME=MARKER-2-297></A>backslash escape sequence</B> is a backslash followed by a character or character code. A backslash escape sequence in character and string literals allows quoting of the special characters ', &quot;, and \, provides names for control characters, and allows Unicode characters to be specified by their hexadecimal codes.</P>
<P CLASS=T1.Text1>The <A NAME=MARKER-2-298></A>control characters are:</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">a</CODE> alarm</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">b</CODE> backspace</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">e</CODE> escape</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">f</CODE> form feed</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">n</CODE> newline</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">r</CODE> carriage return</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">t</CODE> tab</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">0</CODE> null</P>
<P CLASS=T1.Text1><A NAME=MARKER-2-299></A>Unicode characters are represented by a series of hexadecimal digits enclosed in angle brackets. If Unicode does not explicitly define the character represented by the hexadecimal digits, the meaning in Dylan is undefined. If an implementation is not able to represent the entire Unicode character set, and the number specifies a character that is not representable in the implementation, an error must be signaled.</P>
<P CLASS=T1.Text1>For example:   <CODE CLASS="cv T1.Text1">&quot;\&lt;44&gt;\&lt;79&gt;\&lt;6c&gt;\&lt;61&gt;\&lt;6e&gt;&quot; = &quot;Dylan&quot;</CODE></P>
<P CLASS=T1.Text1>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-300></A>symbol literal</B> is a keyword or a unique string. A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-301></A>keyword</B> is a name followed immediately by a colon character ":". A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-302></A>unique string</B> is a sharp sign "#" followed immediately by a string literal.</P>
<P CLASS=T1.Text1><B CLASS="Bold T1.Text1"><A NAME=MARKER-2-303></A>Punctuation</B> is one of the following:</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">(</CODE> <CODE CLASS="Code T1.Text1">)</CODE>  parentheses</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">[</CODE> <CODE CLASS="Code T1.Text1">]</CODE> square brackets</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">{</CODE> <CODE CLASS="Code T1.Text1">}</CODE>  curly brackets</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">,</CODE>  comma</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">.</CODE>  period</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">;</CODE>  semicolon</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">=</CODE>  defaulting/initialization</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">::</CODE>  type specialization</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">==</CODE>  singleton specialization</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">=&gt;</CODE>  arrow</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">#(</CODE>  list/pair literal</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">#[</CODE>  vector literal</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">?</CODE>, <CODE CLASS="Code T1.Text1">??</CODE>  macro pattern variables</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">...</CODE>  macro ellipsis</P>
<P CLASS=T1.Text1>Note that some tokens are both punctuation and operators. This ambiguity is resolved by grammatical context.</P>
<P CLASS=T1.Text1><A NAME=MARKER-2-304></A>Note also that some punctuation tokens (for example, period and equal sign) are capable of blending into some other tokens. Where this can occur, whitespace must be inserted to delimit the token boundary.<A NAME=MARKER-2-305></A></P>

</DIV>

<DIV CLASS=WM-DIV-FOOTERS>

<DIV CLASS=WM-DIV-TOC>

<!-- TOC -->

</DIV>

<HR CLASS=FOOTER>
<ADDRESS CLASS=FOOTER>The Dylan Reference Manual - 7 Apr 1998</ADDRESS>
<P CLASS=FOOTER><A HREF="drm_21.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=next.gif CLASS=HEADER></A> <A HREF="drm_19.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=prev.gif CLASS=HEADER></A> <A HREF="drm_9.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=up.gif CLASS=HEADER></A> <A HREF="drm_1.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=top.gif CLASS=HEADER></A> <A HREF="drm_2.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=content.gif CLASS=HEADER></A> <A HREF="drm_127.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=index.gif CLASS=HEADER></A></P>
<P CLASS=FOOTER>Copyright Apple Computer, Inc. 1996. Apple&#174; and the Apple logo are registered trademarks of Apple Computer, Inc. Used with permission. All Rights Reserved.</P>
<P CLASS=FOOTER>You can order a <A HREF="http://www.harlequin.com/products/ads/dylan/purchase.shtml" CLASS=FOOTER>bound copy</A> of this book from Harlequin.</P>
<P CLASS=FOOTER>Generated with <A HREF="http://www.harlequin.com/webmaker" CLASS=FOOTER>Harlequin WebMaker&#174;</A></P>

</DIV>
</BODY>
</HTML>
