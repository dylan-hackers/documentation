<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML Experimental 19960712//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="drm_1.htm">
<LINK REL=UP HREF="drm_96.htm">
<LINK REL=PREV HREF="drm_100.htm">
<LINK REL=NEXT HREF="drm_102.htm">
<LINK TITLE="WebMaker generated style" REL=stylesheet HREF=drm.css TYPE="text/css">
<TITLE> Coercing and Copying Objects</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV CLASS=WM-DIV-BODY>
<A NAME=HEADING101></A>

<DIV CLASS=WM-DIV-HEADERS>
<P CLASS=HEADER><A HREF="drm_102.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=next.gif CLASS=HEADER></A> <A HREF="drm_100.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=prev.gif CLASS=HEADER></A> <A HREF="drm_96.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=up.gif CLASS=HEADER></A> <A HREF="drm_1.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=top.gif CLASS=HEADER></A> <A HREF="drm_2.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=content.gif CLASS=HEADER></A> <A HREF="drm_127.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=index.gif CLASS=HEADER></A></P>
<P CLASS=HEADER>12 The Built-In Functions</P>

</DIV>
<A NAME=HEADING101-0></A>
<A NAME="UID-Built-In_Functions-19913"></A>
<H1 CLASS=H1.Heading1> <A NAME=MARKER-2-1674></A>Coercing and Copying Objects</H1>
<P CLASS=T0.Text0>The following functions are used to coerce, copy, or simply return objects.</P>
<A NAME=HEADING101-2></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1675></A>identity</CODE> [Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><CODE CLASS=SD.ShortDescription><A NAME=MARKER-9-1676></A></CODE>Returns its argument.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="cv Cliche">identity <I CLASS="Parameter cv Cliche">object<B CLASS="Parameter cv Cliche">   =>  object</B></I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DT CLASS=Cliche2><B CLASS="IMPORTANT Cliche2">Values:</B><DD CLASS=Cliche2><P CLASS=Cliche2> <I CLASS="Parameter Cliche2">object</I> An instance of <CODE CLASS="cv Cliche2">&lt;object&gt;</CODE>; the same object that was passed in as an argument.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns <I CLASS=Cliche>object</I> unaltered.</P>
</DL>
<A NAME=HEADING101-8></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1677></A>values</CODE> [Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-2-1678></A>Returns its arguments as multiple values.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="cv Cliche">values #rest <I CLASS="Parameter cv Cliche">the-values <EM CLASS="Symbol Parameter cv Cliche">=>  #rest the-values</EM></I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">the-values</I> Zero or more instances of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DT CLASS=Cliche2><B CLASS="IMPORTANT Cliche2">Values:</B><DD CLASS=Cliche2><P CLASS=Cliche2> <I CLASS="Parameter Cliche2">the-values</I> Zero or more instances of <CODE CLASS="cv Cliche2">&lt;object&gt;</CODE>; the objects that were passed as arguments.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns <I CLASS=Cliche>the-values</I> as multiple values.</P>
</DL>
<PRE CLASS=Cv.Code>
values(1, 2, 3);
<CODE CLASS="cv Cv.Code"> => 1    </CODE>// first value returned
    2    // second value returned
    3    // third value returned
</PRE>
<A NAME=HEADING101-15></A>
<A NAME="UID-Built-In_Functions-25384"></A>
<H2 CLASS=H2.Heading2> General Coercion Function</H2>
<A NAME=HEADING101-16></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1679></A>as</CODE> [Open Generic Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><CODE CLASS=SD.ShortDescription><A NAME=MARKER-9-1680></A></CODE>Coerces an object to a type.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="cv Cliche">as <I CLASS="Parameter cv Cliche">type object<B CLASS="Parameter cv Cliche">   =>  instance</B></I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">type</I> An instance of <CODE CLASS="cv Cliche">&lt;type&gt;</CODE>.</P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">object</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> An instance of <CODE CLASS="cv RP.RoutineParam">&lt;object&gt;</CODE>.</P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">instance</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>. It must be an instance of <I CLASS="Parameter Cliche">type</I>. </P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Coerces <I CLASS=Cliche>object</I> to <I CLASS=Cliche>type</I>. That is, it returns an instance of <I CLASS=Cliche>type</I> that has the same contents as <I CLASS=Cliche>object</I>. If <I CLASS=Cliche>object</I> is already an instance of <I CLASS=Cliche>type</I>, it is returned unchanged. In general, the value returned may or may not be freshly allocated.</P>
<P CLASS=T1.Text1>Predefined methods allow coercion between integers and characters, between strings and symbols, and between collection types. No methods are predefined for other classes. Programs may define additional methods.</P>
</DL>
<A NAME=HEADING101-24></A>
<H4 CLASS=H5.Heading5> <CODE CLASS=H5.Heading5>as</CODE>  collection-type collection   =>  instance-of-collection-type [G.F. Method]</H4>
<P CLASS=T1.Text1>When converting between collection types, the return value will have the same number of elements as <I CLASS="Parameter T1.Text1">collection</I>. If the <I CLASS="Parameter T1.Text1">collection</I> is an instance of <CODE CLASS=T1.Text1>&lt;sequence&gt;</CODE> and the <I CLASS="Parameter T1.Text1">collection-type</I> is a subtype of <CODE CLASS="cv T1.Text1">&lt;sequence&gt;</CODE>, the elements will be in the same order. The individual elements may also undergo some conversion. The specific collection types for which <CODE CLASS="cv T1.Text1">as</CODE> is defined is implementation defined.</P>
<A NAME=HEADING101-26></A>
<H4 CLASS=H5.Heading5> <CODE CLASS=H5.Heading5>as</CODE>   <CODE CLASS="Code H5.Heading5">(singleton (&lt;integer&gt;)) character</CODE>   =>  integer [Sealed G.F. Method]</H4>
<P CLASS=T1.Text1>This method on <CODE CLASS=T1.Text1>as</CODE> returns a numeric equivalent for <I CLASS=T1.Text1>character</I>. The integer returned is implementation dependent.</P>
<A NAME=HEADING101-28></A>
<H4 CLASS=H5.Heading5> <CODE CLASS=H5.Heading5>as</CODE>   <CODE CLASS="Code H5.Heading5">(singleton (&lt;character&gt;)) integer</CODE>   =>  character [Sealed G.F. Method]</H4>
<P CLASS=T1.Text1>This method on <CODE CLASS=T1.Text1>as</CODE> returns the character equivalent to <I CLASS=T1.Text1>integer</I>. The meaning of <I CLASS=T1.Text1>integer</I> is implementation dependent.</P>
<A NAME=HEADING101-30></A>
<H4 CLASS=H5.Heading5> <CODE CLASS=H5.Heading5>as</CODE>   <CODE CLASS="Code H5.Heading5">(singleton (&lt;symbol&gt;)) string</CODE>   =>  symbol [Sealed G.F. Method]</H4>
<P CLASS=T1.Text1>This method on <CODE CLASS=T1.Text1>as</CODE> returns the symbol that has the name <I CLASS=T1.Text1>string</I>. If the symbol does not yet exist, it is created. This method on <CODE CLASS="cv T1.Text1">as</CODE> will always return the same symbol for strings of the same characters, without regard to alphabetic case.</P>
<PRE CLASS=Cv.Code>
as (&lt;symbol&gt;, &quot;foo&quot;)
<CODE CLASS="cv Cv.Code"> fi</CODE>  #&quot;foo&quot;
#&quot;FOO&quot; == as (&lt;symbol&gt;, &quot;foo&quot;)
<CODE CLASS="cv Cv.Code"> fi</CODE>  #t
#&quot;Foo&quot;
<CODE CLASS="cv Cv.Code"> fi</CODE>  #&quot;foo&quot;
</PRE>
<A NAME=HEADING101-33></A>
<H4 CLASS=H5.Heading5> <CODE CLASS=H5.Heading5>as</CODE>   <CODE CLASS="Code H5.Heading5">(singleton (&lt;string&gt;)) symbol</CODE>   =>  string [Sealed G.F. Method]</H4>
<P CLASS=T1.Text1>This method on <CODE CLASS="cv T1.Text1">as</CODE> returns the name of the symbol, which will be a string.</P>
<PRE CLASS=Cv.Code>
as (&lt;string&gt;, #&quot;Foo&quot;)
<CODE CLASS="cv Cv.Code"> fi</CODE>  &quot;Foo&quot;
</PRE>
<A NAME=HEADING101-36></A>
<A NAME="UID-Built-In_Functions-2983"></A>
<H2 CLASS=H2.Heading2> Coercing Case</H2>
<A NAME=HEADING101-37></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1681></A><A NAME=MARKER-2-1682></A>as-uppercase</CODE> [Open Generic Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-9-1683></A>Coerces an object to uppercase.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="cv Cliche">as-uppercase <I CLASS="Parameter cv Cliche">object1<B CLASS="Parameter cv Cliche">   => object2</B></I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object2</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Coerces an object to uppercase and returns the resulting new object.</P>
<P CLASS=T1.Text1><I CLASS="Parameter T1.Text1">object1</I> is not modified by this operation.</P>
</DL>
<A NAME=HEADING101-44></A>
<H4 CLASS=H5.Heading5> <CODE CLASS=H5.Heading5>as-uppercase</CODE>   character   =>  uppercase-character [Sealed G.F. Method]</H4>
<P CLASS=T1.Text1>This method returns the uppercase equivalent for <I CLASS=T1.Text1>character</I>. If <I CLASS=T1.Text1>character</I> already is uppercase or does not exist in two cases, it is returned unchanged.</P>
<A NAME=HEADING101-46></A>
<H4 CLASS=H5.Heading5> <CODE CLASS=H5.Heading5>as-uppercase   string fi</CODE>  new-string [G.F. Method]</H4>
<P CLASS=T1.Text1>This method is equivalent to <CODE CLASS=T1.Text1>map</CODE> (<CODE CLASS=T1.Text1>as-uppercase,</CODE> <I CLASS=T1.Text1>string<CODE CLASS=T1.Text1>)</CODE></I>.</P>
<A NAME=HEADING101-48></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1684></A>as-uppercase!</CODE> [Open Generic Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-9-1685></A>Coerces an object to uppercase in place.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="cv Cliche">as-uppercase! <I CLASS="Parameter cv Cliche">object<B CLASS="Parameter cv Cliche">  => object</B></I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DT CLASS=Cliche2><B CLASS="IMPORTANT Cliche2">Values:</B><DD CLASS=Cliche2><P CLASS=Cliche2> <I CLASS="Parameter Cliche2">object</I> An instance of <CODE CLASS="cv Cliche2">&lt;object&gt;</CODE>; the same object that was passed in as an argument.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Coerces an object to uppercase in place and returns the modified object.</P>
<P CLASS=T1.Text1><I CLASS="Parameter T1.Text1">object</I> may be modified by this operation, and the result will be <CODE CLASS="cv T1.Text1">==</CODE> to the <I CLASS="Parameter T1.Text1">object</I>.</P>
</DL>
<A NAME=HEADING101-55></A>
<H4 CLASS=H5.Heading5> <CODE CLASS=H5.Heading5>as-uppercase!   string fi</CODE>  string [G.F. Method]</H4>
<P CLASS=T1.Text1>This method is equivalent to <CODE CLASS=T1.Text1>map-into(<I CLASS=T1.Text1>string , as-uppercase</I></CODE> , <I CLASS=T1.Text1>string<CODE CLASS=T1.Text1>)</CODE></I>.</P>
<A NAME=HEADING101-57></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1686></A>as-lowercase</CODE> [Open Generic Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-9-1687></A>Coerces an object to lowercase.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="cv Cliche">as-lowercase <I CLASS="Parameter cv Cliche">object1<B CLASS="Parameter cv Cliche">   =>  object2</B></I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object2</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Coerces an object to lowercase and returns the resulting new object.</P>
<P CLASS=T1.Text1><I CLASS="Parameter T1.Text1">object1</I> will not be modified by this operation.</P>
</DL>
<A NAME=HEADING101-64></A>
<H4 CLASS=H5.Heading5> <CODE CLASS=H5.Heading5>as-lowercase</CODE>   character   =>  lowercase-character [Sealed G.F. Method]</H4>
<P CLASS=T1.Text1>The <CODE CLASS=T1.Text1>&lt;character&gt;</CODE> method on <CODE CLASS=T1.Text1>as-lowercase</CODE> returns the lowercase equivalent for <I CLASS=T1.Text1>character</I>. If <I CLASS=T1.Text1>character</I> already is lowercase or does not exist in two cases, it is returned unchanged.</P>
<A NAME=HEADING101-66></A>
<H4 CLASS=H5.Heading5> <CODE CLASS=H5.Heading5>as-lowercase   string fi</CODE>  new-string [G.F. Method]</H4>
<P CLASS=T1.Text1>This method is equivalent to <CODE CLASS=T1.Text1>map(as-lowercase, </CODE> <I CLASS=T1.Text1>string<CODE CLASS=T1.Text1>)</CODE></I>.</P>
<A NAME=HEADING101-68></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1688></A>as-lowercase!</CODE> [Open Generic Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-2-1671></A>Coerces an object to lowercase in place.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="cv Cliche">as-lowercase! <I CLASS="Parameter cv Cliche">object<B CLASS="Parameter cv Cliche">   => object</B></I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DT CLASS=Cliche2><B CLASS="IMPORTANT Cliche2">Values:</B><DD CLASS=Cliche2><P CLASS=Cliche2> <I CLASS="Parameter Cliche2">object</I> An instance of <CODE CLASS="cv Cliche2">&lt;object&gt;</CODE>; the same object that was passed in as an argument.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Coerces an object to lowercase in place and returns the modified object.</P>
<P CLASS=T1.Text1><I CLASS="Parameter T1.Text1">object</I> may be modified by this operation, and the result will be <CODE CLASS="cv T1.Text1">==</CODE> to the <I CLASS="Parameter T1.Text1">object</I>.</P>
</DL>
<A NAME=HEADING101-75></A>
<H4 CLASS=H5.Heading5> <CODE CLASS=H5.Heading5>as-lowercase!   string fi</CODE>  string [G.F. Method]</H4>
<P CLASS=T1.Text1>This method is equivalent to <CODE CLASS=T1.Text1>map-into(<I CLASS=T1.Text1>string</I></CODE> <CODE CLASS=T1.Text1>, as-lowercase, </CODE> <I CLASS=T1.Text1>string<CODE CLASS=T1.Text1>)</CODE></I>.<A NAME=MARKER-2-1690></A></P>
<A NAME=HEADING101-77></A>
<A NAME="UID-Built-In_Functions-2996"></A>
<H2 CLASS=H2.Heading2> Copying Objects</H2>
<A NAME=HEADING101-78></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1691></A>shallow-copy</CODE> [Open Generic Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><CODE CLASS=SD.ShortDescription><A NAME=MARKER-9-1692></A></CODE>Returns a copy of its argument.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="cv Cliche">shallow-copy <I CLASS="Parameter cv Cliche">object1<B CLASS="Parameter cv Cliche">   =>  #rest objects</B></I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">objects</I> Instances of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns a new object that has the same contents as  <I CLASS=Cliche>object1</I>. The contents are not copied but are the same objects contained in <I CLASS=Cliche>object1</I>.</P>
<P CLASS=T1.Text1>There is a predefined method for instances of <CODE CLASS="cv T1.Text1">&lt;collection&gt;</CODE>. For other classes, the programmer must provide a method.</P>
</DL>
<A NAME=HEADING101-85></A>
<H4 CLASS=H5.Heading5> <CODE CLASS=H5.Heading5>shallow-copy   collection  fi</CODE>  new-collection [G.F. Method]</H4>
<P CLASS=T1.Text1>The method for <CODE CLASS=T1.Text1>&lt;collection&gt;</CODE> creates a new object by calling <CODE CLASS=T1.Text1>make</CODE> on the <CODE CLASS=T1.Text1>type-for-copy</CODE> of  <I CLASS=T1.Text1>collection</I> and filling it with the same elements as <I CLASS="Parameter T1.Text1">collection</I>.</P>
<A NAME=HEADING101-87></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1693></A>type-for-copy</CODE> [Open Generic Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><CODE CLASS=SD.ShortDescription><A NAME=MARKER-9-1694></A></CODE>Returns an appropriate type for creating mutable copies of its argument.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="cv Cliche">type-for-copy <I CLASS="Parameter cv Cliche">object<B CLASS="Parameter cv Cliche">   =>  type</B></I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DT CLASS=Cliche2><B CLASS="IMPORTANT Cliche2">Values:</B><DD CLASS=Cliche2><P CLASS=Cliche2> <I CLASS="Parameter Cliche2">type</I> An instance of <CODE CLASS="cv Cliche2">&lt;type&gt;.</CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns an appropriate type for creating mutable copies of <I CLASS="Parameter Cliche">object</I>. </P>
<P CLASS=T1.Text1>The <CODE CLASS="cv T1.Text1">type-for-copy</CODE> value of a collection must be an instantiable subtype of <CODE CLASS="cv T1.Text1">&lt;mutable-collection&gt;</CODE>. For collections that are themselves mutable, the collection's actual class is generally the most appropriate (assuming it is instantiable). The <CODE CLASS="cv T1.Text1">type-for-copy</CODE> value for a sequence should be a subtype of <CODE CLASS="cv T1.Text1">&lt;sequence&gt;</CODE>, and the <CODE CLASS="cv T1.Text1">type-for-copy</CODE> value of an explicit-key-collection should be a subtype of <CODE CLASS="cv T1.Text1">&lt;explicit-key-collection&gt;</CODE>.</P>
</DL>
<A NAME=HEADING101-94></A>
<H4 CLASS=H5.Heading5> <CODE CLASS=H5.Heading5>type-for-copy</CODE>   object =>  type [G.F. Method]</H4>
<P CLASS=T1.Text1>The method on <CODE CLASS="cv T1.Text1">&lt;object&gt;</CODE> returns the result of calling <CODE CLASS="cv T1.Text1">object-class</CODE> on the <I CLASS="Parameter T1.Text1">object</I>.</P>
<A NAME=HEADING101-96></A>
<H4 CLASS=H5.Heading5> <CODE CLASS=H5.Heading5>type-for-copy</CODE>   mutable-collection =>  type [G.F. Method]</H4>
<P CLASS=T1.Text1>The method on <CODE CLASS="cv T1.Text1">&lt;mutable-collection&gt;</CODE> returns the result of calling <CODE CLASS="cv T1.Text1">object-class</CODE> on the <I CLASS="Parameter T1.Text1">mutable-collection</I>.</P>
<A NAME=HEADING101-98></A>
<H4 CLASS=H5.Heading5> <CODE CLASS=H5.Heading5>type-for-copy</CODE>   limited-collection =>  type [Sealed G.F. Method]</H4>
<P CLASS=T1.Text1>For a type <I CLASS="Parameter T1.Text1">L<EM CLASS="Subscript Parameter T1.Text1">1</EM></I> created by  <CODE CLASS="cv T1.Text1">limited(<I CLASS="Parameter cv T1.Text1">C, of: T, size: S)</I></CODE> where <I CLASS="Parameter T1.Text1">C</I> is not <CODE CLASS="cv T1.Text1">&lt;range&gt;</CODE>, <CODE CLASS="cv T1.Text1">type-for-copy</CODE> of an object made by instantiating <I CLASS="Parameter T1.Text1">L<EM CLASS="Subscript Parameter T1.Text1">1</EM></I>  returns a type <I CLASS="Parameter T1.Text1">L<EM CLASS="Subscript Parameter T1.Text1">2</EM></I> that satisfies each of the following:</P>
<UL CLASS=B1.Bullet1>
<LI CLASS=B1.Bullet1><I CLASS="Parameter B1.Bullet1">L<EM CLASS="Subscript Parameter B1.Bullet1">2</EM></I> is either a class or a limited collection type.
<LI CLASS=B1.Bullet1><I CLASS="Parameter B1.Bullet1">L<EM CLASS="Subscript Parameter B1.Bullet1">2</EM></I> is a subtype of <I CLASS="Parameter B1.Bullet1">C</I>.
<LI CLASS=B1.Bullet1><I CLASS="Parameter B1.Bullet1">L<EM CLASS="Subscript Parameter B1.Bullet1">2</EM></I>'s element type is equivalent to <I CLASS="Parameter B1.Bullet1">T</I>.
<LI CLASS=B1.Bullet1>If <I CLASS="Parameter B1.Bullet1">L<EM CLASS="Subscript Parameter B1.Bullet1">2</EM></I> is a limited collection type, its size attribute is <CODE CLASS="cv B1.Bullet1">#f</CODE>.
</UL>
<A NAME=HEADING101-104></A>
<H4 CLASS=H5.Heading5> <CODE CLASS=H5.Heading5>type-for-copy</CODE>   range =>  <CODE CLASS=H5.Heading5>&lt;list&gt;</CODE> [Sealed G.F. Method]</H4>
<P CLASS=T1.Text1>The method on <CODE CLASS="cv T1.Text1">&lt;range&gt;</CODE> returns <CODE CLASS="cv T1.Text1">&lt;list&gt;</CODE>.</P>
<A NAME=HEADING101-106></A>
<H4 CLASS=H5.Heading5> <CODE CLASS=H5.Heading5>type-for-copy</CODE>   limited-range =>  <CODE CLASS=H5.Heading5>&lt;list&gt;</CODE> [Sealed G.F. Method]</H4>
<P CLASS=T1.Text1>The method on instances of <CODE CLASS="cv T1.Text1">limited(singleton(&lt;range&gt;)</CODE>...<CODE CLASS="cv T1.Text1">)</CODE>  returns <CODE CLASS="cv T1.Text1">&lt;list&gt;</CODE>, the same as for any instance of <CODE CLASS="cv T1.Text1">&lt;range&gt;</CODE>.<A NAME=MARKER-2-1695></A></P>

</DIV>

<DIV CLASS=WM-DIV-FOOTERS>

<DIV CLASS=WM-DIV-TOC>

<!-- TOC --><DL CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-2" CLASS=FOOTER><B CLASS=FOOTER></B>identity [Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-8" CLASS=FOOTER><B CLASS=FOOTER></B>values [Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-15" CLASS=FOOTER><B CLASS=FOOTER></B>General Coercion Function</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-16" CLASS=FOOTER><B CLASS=FOOTER></B>as [Open Generic Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-24" CLASS=FOOTER><B CLASS=FOOTER></B>as  collection-type collection   =>  instance-of-collection-type [G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-26" CLASS=FOOTER><B CLASS=FOOTER></B>as   (singleton (&lt;integer&gt;)) character   =>  integer [Sealed G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-28" CLASS=FOOTER><B CLASS=FOOTER></B>as   (singleton (&lt;character&gt;)) integer   =>  character [Sealed G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-30" CLASS=FOOTER><B CLASS=FOOTER></B>as   (singleton (&lt;symbol&gt;)) string   =>  symbol [Sealed G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-33" CLASS=FOOTER><B CLASS=FOOTER></B>as   (singleton (&lt;string&gt;)) symbol   =>  string [Sealed G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-36" CLASS=FOOTER><B CLASS=FOOTER></B>Coercing Case</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-37" CLASS=FOOTER><B CLASS=FOOTER></B>as-uppercase [Open Generic Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-44" CLASS=FOOTER><B CLASS=FOOTER></B>as-uppercase   character   =>  uppercase-character [Sealed G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-46" CLASS=FOOTER><B CLASS=FOOTER></B>as-uppercase   string =>  new-string [G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-48" CLASS=FOOTER><B CLASS=FOOTER></B>as-uppercase! [Open Generic Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-55" CLASS=FOOTER><B CLASS=FOOTER></B>as-uppercase!   string =>  string [G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-57" CLASS=FOOTER><B CLASS=FOOTER></B>as-lowercase [Open Generic Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-64" CLASS=FOOTER><B CLASS=FOOTER></B>as-lowercase   character   =>  lowercase-character [Sealed G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-66" CLASS=FOOTER><B CLASS=FOOTER></B>as-lowercase   string =>  new-string [G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-68" CLASS=FOOTER><B CLASS=FOOTER></B>as-lowercase! [Open Generic Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-75" CLASS=FOOTER><B CLASS=FOOTER></B>as-lowercase!   string =>  string [G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-77" CLASS=FOOTER><B CLASS=FOOTER></B>Copying Objects</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-78" CLASS=FOOTER><B CLASS=FOOTER></B>shallow-copy [Open Generic Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-85" CLASS=FOOTER><B CLASS=FOOTER></B>shallow-copy   collection  =>  new-collection [G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-87" CLASS=FOOTER><B CLASS=FOOTER></B>type-for-copy [Open Generic Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-94" CLASS=FOOTER><B CLASS=FOOTER></B>type-for-copy   object =>  type [G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-96" CLASS=FOOTER><B CLASS=FOOTER></B>type-for-copy   mutable-collection =>  type [G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-98" CLASS=FOOTER><B CLASS=FOOTER></B>type-for-copy   limited-collection =>  type [Sealed G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-104" CLASS=FOOTER><B CLASS=FOOTER></B>type-for-copy   range =>  &lt;list&gt; [Sealed G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_101.htm#HEADING101-106" CLASS=FOOTER><B CLASS=FOOTER></B>type-for-copy   limited-range =>  &lt;list&gt; [Sealed G.F. Method]</A>
<DD CLASS=FOOTER>
</DL>


</DIV>

<HR CLASS=FOOTER>
<ADDRESS CLASS=FOOTER>The Dylan Reference Manual - 7 Apr 1998</ADDRESS>
<P CLASS=FOOTER><A HREF="drm_102.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=next.gif CLASS=HEADER></A> <A HREF="drm_100.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=prev.gif CLASS=HEADER></A> <A HREF="drm_96.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=up.gif CLASS=HEADER></A> <A HREF="drm_1.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=top.gif CLASS=HEADER></A> <A HREF="drm_2.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=content.gif CLASS=HEADER></A> <A HREF="drm_127.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=index.gif CLASS=HEADER></A></P>
<P CLASS=FOOTER>Copyright Apple Computer, Inc. 1996. Apple&#174; and the Apple logo are registered trademarks of Apple Computer, Inc. Used with permission. All Rights Reserved.</P>
<P CLASS=FOOTER>You can order a <A HREF="http://www.harlequin.com/products/ads/dylan/purchase.shtml" CLASS=FOOTER>bound copy</A> of this book from Harlequin.</P>
<P CLASS=FOOTER>Generated with <A HREF="http://www.harlequin.com/webmaker" CLASS=FOOTER>Harlequin WebMaker&#174;</A></P>

</DIV>
</BODY>
</HTML>
