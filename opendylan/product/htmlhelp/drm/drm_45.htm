<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML Experimental 19960712//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="drm_1.htm">
<LINK REL=UP HREF="drm_38.htm">
<LINK REL=PREV HREF="drm_44.htm">
<LINK REL=NEXT HREF="drm_46.htm">
<LINK TITLE="WebMaker generated style" REL=stylesheet HREF=drm.css TYPE="text/css">
<TITLE> Union Types</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV CLASS=WM-DIV-BODY>
<A NAME=HEADING45></A>

<DIV CLASS=WM-DIV-HEADERS>
<P CLASS=HEADER><A HREF="drm_46.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=next.gif CLASS=HEADER></A> <A HREF="drm_44.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=prev.gif CLASS=HEADER></A> <A HREF="drm_38.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=up.gif CLASS=HEADER></A> <A HREF="drm_1.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=top.gif CLASS=HEADER></A> <A HREF="drm_2.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=content.gif CLASS=HEADER></A> <A HREF="drm_127.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=index.gif CLASS=HEADER></A></P>
<P CLASS=HEADER>5 Types and Classes</P>

</DIV>
<A NAME=HEADING45-0></A>
<A NAME="UID-Types_and_Classes-1556"></A>
<H1 CLASS=H1.Heading1> <A NAME=MARKER-2-700></A><A NAME=MARKER-9-701></A>Union Types</H1>
<P CLASS=T1.Text1>Union types represent the union of the instances of two or more other types. Union types are created with the function <CODE CLASS="Code T1.Text1"><A NAME=MARKER-2-702></A>type-union</CODE>. They are not classes.</P>
<P CLASS=T1.Text1>Union types are useful as slot specializers, and describe the return types of many common functions. For example, the return type of the collection method on <CODE CLASS="Code T1.Text1">size</CODE> could be expressed as <CODE CLASS="Code T1.Text1">type-union(&lt;integer&gt;, singleton(#f))</CODE>.</P>
<PRE CLASS=Cv.Code>
define constant &lt;green-thing&gt; = type-union(&lt;frog&gt;, &lt;broccoli&gt;);
define constant kermit = make(&lt;frog&gt;);
define method red? (x :: &lt;green-thing&gt;)
  #f
end method;
red?(kermit)
  =>  #f
</PRE>
<P CLASS=T1.Text1>The following rules govern <CODE CLASS="Code T1.Text1"><A NAME=MARKER-2-703></A>subtype?</CODE> and <A NAME=MARKER-2-704></A><CODE CLASS="Code T1.Text1">instance?</CODE> for union types.</P>
<P CLASS=T1.Text1>Given</P>
<UL CLASS=B1.Bullet1>
<LI CLASS=B1.Bullet1><I CLASS="Parameter B1.Bullet1">x</I> is an object.
<LI CLASS=B1.Bullet1><I CLASS="Parameter B1.Bullet1">s<EM CLASS="Subscript Parameter B1.Bullet1">1...sm</EM></I> and <I CLASS="Parameter B1.Bullet1">t<EM CLASS="Subscript Parameter B1.Bullet1">1...tn</EM></I> are nonunion types.
<LI CLASS=B1.Bullet1>The notation <CODE CLASS="Code B1.Bullet1">type-union*(<I CLASS="Parameter Code B1.Bullet1">t<EM CLASS="Subscript Parameter Code B1.Bullet1">1...tn)</EM></I></CODE> stands for any arrangement of nested calls to <CODE CLASS="Code B1.Bullet1">type-union</CODE>, where none of the arguments is a subtype of any other, and none of the arguments forms an exhaustive partition of any other type.
<P CLASS=T1.Text1>Then</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">type-union(<I CLASS="Parameter Code T1.Text1">t<EM CLASS="Subscript Parameter Code T1.Text1">1, t1)</EM></I></CODE> is type equivalent to <I CLASS="Parameter T1.Text1">t<EM CLASS="Subscript Parameter T1.Text1">1</EM></I>.<EM CLASS="Subscript T1.Text1"><I CLASS="Subscript T1.Text1"></I></EM></P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">type-union(<I CLASS="Parameter Code T1.Text1">t<EM CLASS="Subscript Parameter Code T1.Text1">1, t2)</EM></I></CODE> is type equivalent to <CODE CLASS="Code T1.Text1">type-union(<I CLASS="Parameter Code T1.Text1">t<EM CLASS="Subscript Parameter Code T1.Text1">2, t1)</EM></I></CODE>.<CODE CLASS="Code T1.Text1"></CODE></P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">type-union(<I CLASS="Parameter Code T1.Text1">t<EM CLASS="Subscript Parameter Code T1.Text1">1, type-union(t2, t3))</EM></I></CODE> is type equivalent to <CODE CLASS="Code T1.Text1">type-union(type-union(<I CLASS="Parameter Code T1.Text1">t<EM CLASS="Subscript Parameter Code T1.Text1">1, t2), t3)</EM></I></CODE>.<CODE CLASS="Code T1.Text1"></CODE></P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">type-union(<I CLASS="Parameter Code T1.Text1">t<EM CLASS="Subscript Parameter Code T1.Text1">1, t2)</EM></I></CODE> is type equivalent to <I CLASS="Parameter T1.Text1">t<EM CLASS="Subscript Parameter T1.Text1">2</EM></I> when <CODE CLASS="Code T1.Text1">subtype?(<I CLASS="Parameter Code T1.Text1">t<EM CLASS="Subscript Parameter Code T1.Text1">1, t2)</EM></I></CODE>.<CODE CLASS="Code T1.Text1"></CODE></P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">instance?(x, type-union*(<I CLASS="Parameter Code T1.Text1">t<EM CLASS="Subscript Parameter Code T1.Text1">1...tn))</EM></I></CODE> will be true if and only if <CODE CLASS="Code T1.Text1">instance?(<I CLASS="Parameter Code T1.Text1">x, t)</I></CODE> is true for some <I CLASS="Parameter T1.Text1">t</I> in <I CLASS="Parameter T1.Text1">t<EM CLASS="Subscript Parameter T1.Text1">1...tn</EM></I>.</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">subtype?(type-union*(<I CLASS="Parameter Code T1.Text1">t<EM CLASS="Subscript Parameter Code T1.Text1">1...tn), s1)</EM></I></CODE> will be true if and only if <CODE CLASS="Code T1.Text1">subtype?(<I CLASS="Parameter Code T1.Text1">t, s<EM CLASS="Subscript Parameter Code T1.Text1">1)</EM></I></CODE> is true for every <I CLASS="Parameter T1.Text1">t</I> in <I CLASS="Parameter T1.Text1">t<EM CLASS="Subscript Parameter T1.Text1">1...tn</EM></I>.</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">subtype?(<I CLASS="Parameter Code T1.Text1">s<EM CLASS="Subscript Parameter Code T1.Text1">1, type-union*(t1...tn))</EM></I></CODE> will be true if and only if <CODE CLASS="Code T1.Text1">subtype?(<I CLASS="Parameter Code T1.Text1">s<EM CLASS="Subscript Parameter Code T1.Text1">1, t)</EM></I></CODE> is true for some <I CLASS="Parameter T1.Text1">t</I> in <I CLASS="Parameter T1.Text1">t<EM CLASS="Subscript Parameter T1.Text1">1...tn</EM></I>.</P>
<P CLASS=T1.Text1><CODE CLASS="Code T1.Text1">subtype?(type-union*(<I CLASS="Parameter Code T1.Text1">s<EM CLASS="Subscript Parameter Code T1.Text1">1...sm) type-union*(t1...tn))</EM></I></CODE> will be true if and only if every <I CLASS="Parameter T1.Text1">s</I> in <I CLASS="Parameter T1.Text1">s<EM CLASS="Subscript Parameter T1.Text1">1...sm</EM></I> is a subtype of some <I CLASS="Parameter T1.Text1">t</I> in <I CLASS="Parameter T1.Text1">t<EM CLASS="Subscript Parameter T1.Text1">1...tn</EM></I>.<A NAME=MARKER-2-705></A></P>
</UL>

</DIV>

<DIV CLASS=WM-DIV-FOOTERS>

<DIV CLASS=WM-DIV-TOC>

<!-- TOC -->

</DIV>

<HR CLASS=FOOTER>
<ADDRESS CLASS=FOOTER>The Dylan Reference Manual - 7 Apr 1998</ADDRESS>
<P CLASS=FOOTER><A HREF="drm_46.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=next.gif CLASS=HEADER></A> <A HREF="drm_44.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=prev.gif CLASS=HEADER></A> <A HREF="drm_38.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=up.gif CLASS=HEADER></A> <A HREF="drm_1.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=top.gif CLASS=HEADER></A> <A HREF="drm_2.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=content.gif CLASS=HEADER></A> <A HREF="drm_127.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=index.gif CLASS=HEADER></A></P>
<P CLASS=FOOTER>Copyright Apple Computer, Inc. 1996. Apple&#174; and the Apple logo are registered trademarks of Apple Computer, Inc. Used with permission. All Rights Reserved.</P>
<P CLASS=FOOTER>You can order a <A HREF="http://www.harlequin.com/products/ads/dylan/purchase.shtml" CLASS=FOOTER>bound copy</A> of this book from Harlequin.</P>
<P CLASS=FOOTER>Generated with <A HREF="http://www.harlequin.com/webmaker" CLASS=FOOTER>Harlequin WebMaker&#174;</A></P>

</DIV>
</BODY>
</HTML>
