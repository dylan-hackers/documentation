<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML Experimental 19960712//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="drm_1.htm">
<LINK REL=UP HREF="drm_96.htm">
<LINK REL=PREV HREF="drm_98.htm">
<LINK REL=NEXT HREF="drm_100.htm">
<LINK TITLE="WebMaker generated style" REL=stylesheet HREF=drm.css TYPE="text/css">
<TITLE> Equality and Comparison</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV CLASS=WM-DIV-BODY>
<A NAME=HEADING99></A>

<DIV CLASS=WM-DIV-HEADERS>
<P CLASS=HEADER><A HREF="drm_100.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=next.gif CLASS=HEADER></A> <A HREF="drm_98.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=prev.gif CLASS=HEADER></A> <A HREF="drm_96.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=up.gif CLASS=HEADER></A> <A HREF="drm_1.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=top.gif CLASS=HEADER></A> <A HREF="drm_2.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=content.gif CLASS=HEADER></A> <A HREF="drm_127.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=index.gif CLASS=HEADER></A></P>
<P CLASS=HEADER>12 The Built-In Functions</P>

</DIV>
<A NAME=HEADING99-0></A>
<A NAME="UID-Built-In_Functions-2295"></A>
<H1 CLASS=H1.Heading1> Equality and Comparison</H1>
<P CLASS=T1.Text1><A NAME=MARKER-2-1570></A>Dylan provides an identity function, as well as a group of equality and magnitude comparison functions that can be extended for user classes. The functions <CODE CLASS=T1.Text1>~</CODE>=, ~==, <CODE CLASS=T1.Text1>&gt;</CODE>, <CODE CLASS=T1.Text1>&lt;</CODE>=, <CODE CLASS=T1.Text1>&gt;</CODE>=, <CODE CLASS="cv T1.Text1">min</CODE> and <CODE CLASS="cv T1.Text1">max</CODE> are defined in terms of <CODE CLASS=T1.Text1>==</CODE> or <CODE CLASS=T1.Text1>=</CODE> and <CODE CLASS=T1.Text1>&lt;</CODE>. By extending the behavior of <CODE CLASS=T1.Text1>=</CODE> and <CODE CLASS=T1.Text1>&lt;</CODE>, programs can extend the behavior of the other functions.</P>
<P CLASS=T1.Text1>For the protocol to work, user-defined methods on <CODE CLASS=T1.Text1>=</CODE> and <CODE CLASS=T1.Text1>&lt;</CODE> must preserve the following properties:</P>
<DL CLASS=RP.RoutineParam>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><A NAME=MARKER-2-1571></A>Identity:<DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> If (a <CODE CLASS=RP.RoutineParam>=</CODE> b), then (b <CODE CLASS=RP.RoutineParam>=</CODE> a).</P>
<DT CLASS=RP.RoutineParam><A NAME=MARKER-2-1572></A>Transitivity: <DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> If (a <CODE CLASS=RP.RoutineParam>&lt;</CODE>  b) and (b <CODE CLASS=RP.RoutineParam>&lt;</CODE> c), then (a <CODE CLASS=RP.RoutineParam>&lt;</CODE>  c).</P>
<DT CLASS=RP.RoutineParam><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> If (a <CODE CLASS=RP.RoutineParam>=</CODE>  b) and (b <CODE CLASS=RP.RoutineParam>=</CODE>  c), then (a <CODE CLASS=RP.RoutineParam>=</CODE> c).</P>
<DT CLASS=RP.RoutineParam><A NAME=MARKER-2-1573></A>Trichotomy: <DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> Exactly one of: (a <CODE CLASS=RP.RoutineParam>&lt;</CODE>  b), (a <CODE CLASS=RP.RoutineParam>=</CODE> b), (b <CODE CLASS=RP.RoutineParam>&lt;</CODE>  a) always holds <BR>(on the assumption that these two operations are defined for the objects in question).</P>
<P CLASS=T1.Text1>In the general case, the behavior of comparison operators when applied to instances of <CODE CLASS="cv T1.Text1">&lt;complex&gt;</CODE> is implementation defined. This is to allow implementations to support <A NAME=MARKER-2-1574></A>IEEE floating point when comparing NaNs. However, when instances of <CODE CLASS="cv T1.Text1">&lt;rational&gt;</CODE> and instances of <CODE CLASS="cv T1.Text1">&lt;float&gt;</CODE> are compared, it is defined that  the instance of <CODE CLASS="cv T1.Text1">&lt;float&gt;</CODE> is first converted to a rational and then an exact comparison is performed.</P>
</DL>
</DL>
<A NAME=HEADING99-8></A>
<A NAME="UID-Built-In_Functions-2809"></A>
<H2 CLASS=H2.Heading2> <A NAME=MARKER-2-1575></A>Logical Negation</H2>
<A NAME=HEADING99-9></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4">~</CODE> [Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-9-1576></A>Returns true if its argument is false; otherwise returns false.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="Code Cliche">~ <I CLASS="Parameter Code Cliche">thing => boolean</I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">thing</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">boolean</I> An instance of <CODE CLASS="cv Cliche">&lt;boolean&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns <CODE CLASS="cv Cliche">#t</CODE> if <I CLASS="Parameter Cliche">thing</I> is false. Returns <CODE CLASS="cv Cliche">#f</CODE> if <I CLASS="Parameter Cliche">thing</I> is true.</P>
</DL>
<A NAME=HEADING99-15></A>
<A NAME="UID-Built-In_Functions-2806"></A>
<H2 CLASS=H2.Heading2> Equality Comparisons</H2>
<A NAME=HEADING99-16></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1577></A>==</CODE> [Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-9-1578></A>Compares two objects for identity.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1<CODE CLASS="cv Parameter Cliche"> == object2 => boolean</CODE></I></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">object2</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> An instance of <CODE CLASS="cv RP.RoutineParam">&lt;object&gt;</CODE>.</P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">boolean</I> An instance of <CODE CLASS="cv Cliche">&lt;boolean&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns true if <I CLASS=Cliche>object1</I> and<I CLASS=Cliche> object2</I>  are identical. Otherwise, it returns false.</P>
<P CLASS=T1.Text1><A NAME=MARKER-2-1579></A><A NAME=MARKER-2-1580></A>Objects are considered identical if they are computationally equivalent. That is, there is no way for any possible Dylan program to distinguish them.</P>
<P CLASS=T1.Text1>At an implementation level, this will usually mean that the objects are pointers to the same storage or are the same immediate value. An extension is made for built-in number classes and characters. Because these objects are not mutable (i.e., cannot be changed), two of the same class with the same value will always be the same (and will thus be indistinguishable to programs).</P>
</DL>
<A NAME=HEADING99-25></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1581></A>~==</CODE> [Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-9-1582></A>Compares two objects for nonidentity.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1<CODE CLASS="cv Parameter Cliche"> ~== object2 => boolean</CODE></I></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">object2</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> An instance of <CODE CLASS="cv RP.RoutineParam">&lt;object&gt;</CODE>.</P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">boolean</I> An instance of <CODE CLASS="cv Cliche">&lt;boolean&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns true if <I CLASS=Cliche>object1</I> and<I CLASS=Cliche> object2</I>  are not identical. It returns false if they are identical.</P>
<P CLASS=T1.Text1>If both arguments are instances of <CODE CLASS="cv T1.Text1">&lt;complex&gt;</CODE> then the result is computed in an implementation-defined way. Otherwise, the result is computed by <CODE CLASS="cv T1.Text1">~(object1 == object2)</CODE>.</P>
</DL>
<A NAME=HEADING99-33></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1583></A>=</CODE> [Open Generic Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-9-1584></A>Compares two objects for <A NAME=MARKER-2-1585></A>equality.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1<CODE CLASS="Code Parameter Cliche"> = object2 => boolean</CODE></I></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">object2</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> An instance of <CODE CLASS="cv RP.RoutineParam">&lt;object&gt;</CODE>.</P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">boolean</I> An instance of <CODE CLASS="cv Cliche">&lt;boolean&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns true if <I CLASS=Cliche>object1</I> and<I CLASS=Cliche> object2</I>  are equal. Otherwise, it returns false.</P>
<P CLASS=T1.Text1>Programmers may define methods for <CODE CLASS=T1.Text1>=</CODE> specialized on classes they define. A programmer may be required to provide an <CODE CLASS=T1.Text1>=</CODE> method when defining subclasses of some predefined classes in order to fullfill the protocol of the class, as described below. For objects that do not have a more specific = method, =  returns the same as ==.</P>
<P CLASS=T1.Text1>= is not guaranteed to return. For example, it may not return when called on circular structures or otherwise unbounded structures.</P>
<P CLASS=T1.Text1>In addition to the sealed domains specified by the methods below, <CODE CLASS="cv T1.Text1">=</CODE> is sealed over the following domains:</P>
<P CLASS=T1.Text1><CODE CLASS=T1.Text1>     &lt;object&gt;, &lt;symbol&gt;<BR>     &lt;symbol&gt;, &lt;object&gt;<BR>     &lt;object&gt;, &lt;character&gt;<BR>     &lt;character&gt;, &lt;object&gt;<BR>     &lt;object&gt;, &lt;boolean&gt;<BR>     &lt;boolean&gt;, &lt;object&gt;</CODE></P>
</DL>
<A NAME=HEADING99-44></A>
<H4 CLASS=H5.Heading5> object1 <CODE CLASS=H5.Heading5>= object2 </CODE> =>  boolean [G.F. Method]</H4>
<P CLASS=T1.Text1>The default method on <CODE CLASS="cv T1.Text1">=</CODE> calls <CODE CLASS="cv T1.Text1">==</CODE> and returns the result returned by <CODE CLASS="cv T1.Text1">==</CODE>.</P>
<A NAME=HEADING99-46></A>
<H4 CLASS=H5.Heading5> complex1 <CODE CLASS=H5.Heading5>= complex2 </CODE> =>  boolean [Sealed G.F. Method]</H4>
<P CLASS=T1.Text1>Complex numbers are equal if they have the same mathematical value.</P>
<A NAME=HEADING99-48></A>
<H4 CLASS=H5.Heading5> collection1 <CODE CLASS=H5.Heading5>= collection2 </CODE> =>  boolean [G.F. Method]</H4>
<P CLASS=T1.Text1>Two collections are equal if they have identical <CODE CLASS=T1.Text1>key-test</CODE> functions, they have the same keys (as determined by their <CODE CLASS=T1.Text1>key-test</CODE> functions), the elements at corresponding keys are =,  and neither collection is a dotted list.</P>
<A NAME=HEADING99-50></A>
<H4 CLASS=H5.Heading5> sequence1  <CODE CLASS=H5.Heading5>= sequence2 </CODE> =>  boolean [G.F. Method]</H4>
<P CLASS=T1.Text1>For sequences, <CODE CLASS=T1.Text1>=</CODE>  returns true if <I CLASS=T1.Text1>sequence1</I> and <I CLASS=T1.Text1>sequence2</I> have the same size and elements with = keys are =, and returns false otherwise.</P>
<A NAME=HEADING99-52></A>
<H4 CLASS=H5.Heading5> list1 <CODE CLASS=H5.Heading5>=</CODE> list2 =>  boolean  [Sealed G.F. Method]</H4>
<P CLASS=T1.Text1>For lists, <CODE CLASS=T1.Text1>=</CODE>  returns true if the two lists are the same size, corresponding elements of <I CLASS=T1.Text1>list1</I> and <I CLASS=T1.Text1>list2</I> are <CODE CLASS=T1.Text1>=</CODE> and the final tails are <CODE CLASS=T1.Text1>=</CODE>. It returns false otherwise.</P>
<A NAME=HEADING99-54></A>
<H4 CLASS=H5.Heading5> list  <CODE CLASS=H5.Heading5>=</CODE> sequence  =>  boolean [G.F. Method]<BR>sequence  <CODE CLASS=H5.Heading5>=</CODE>  list  =>  boolean [G.F. Method]</H4>
<P CLASS=T1.Text1>For mixed lists and sequences, <CODE CLASS=T1.Text1>=</CODE> returns true if the <I CLASS=T1.Text1>list</I> is not a dotted list, both have the same size, and elements with <CODE CLASS=T1.Text1>=</CODE> keys are <CODE CLASS=T1.Text1>=</CODE>. It returns false otherwise.</P>
<A NAME=HEADING99-56></A>
<H4 CLASS=H5.Heading5> range1 <CODE CLASS=H5.Heading5>= range2 fi</CODE>  boolean [Sealed G.F. Method]</H4>
<P CLASS=T1.Text1>When called with two ranges, <CODE CLASS=T1.Text1>=</CODE> always terminates, even if one or both ranges are unbounded in size.</P>
<A NAME=HEADING99-58></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1586></A>~=</CODE> [Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription>Compares two objects for <A NAME=MARKER-2-1587></A>inequality.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1<CODE CLASS="Code Parameter Cliche"> ~= object2 => boolean</CODE></I></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">object2</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> An instance of <CODE CLASS="cv RP.RoutineParam">&lt;object&gt;</CODE>.</P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">boolean</I> An instance of <CODE CLASS="cv Cliche">&lt;boolean&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns true if <I CLASS=Cliche>object1</I> and<I CLASS=Cliche> object2</I>  are not equal. It returns false if they are equal.</P>
<P CLASS=T1.Text1>If both arguments are instances of <CODE CLASS="cv T1.Text1">&lt;complex&gt;</CODE> then the result is computed in an implementation-defined way. Otherwise, the result is computed by the expression <CODE CLASS="cv T1.Text1">~(<I CLASS="Parameter cv T1.Text1">object1 = object2)</I></CODE>.</P>
</DL>
<A NAME=HEADING99-66></A>
<A NAME="UID-Built-In_Functions-1309"></A>
<H2 CLASS=H2.Heading2> Magnitude Comparisons</H2>
<A NAME=HEADING99-67></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1588></A>&lt;</CODE> [Open Generic Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-9-1589></A>Returns true if its first operand is <A NAME=MARKER-2-1590></A>less than its second operand.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1  <CODE CLASS="cv Parameter Cliche">&lt;   object2 <B CLASS="cv Parameter Cliche">  =>  boolean</B></CODE></I></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">object2</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> An instance of <CODE CLASS="cv RP.RoutineParam">&lt;object&gt;</CODE>.</P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">boolean</I> An instance of <CODE CLASS="cv Cliche">&lt;boolean&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns true if <I CLASS="Parameter Cliche">object1</I> is less than <I CLASS="Parameter Cliche">object2</I>.</P>
<P CLASS=T1.Text1>The generic function <CODE CLASS="cv T1.Text1">&lt;</CODE> is sealed over the domain <CODE CLASS="cv T1.Text1">(&lt;complex&gt;, &lt;complex&gt;)</CODE>.</P>
</DL>
<A NAME=HEADING99-75></A>
<H4 CLASS=H5.Heading5> real1  <CODE CLASS=H5.Heading5>&lt;</CODE> real2  =>  boolean [Sealed G.F. Method]</H4>
<P CLASS=T1.Text1>Built-in real numbers are compared by mathematical value.</P>
<A NAME=HEADING99-77></A>
<H4 CLASS=H5.Heading5> character1  <CODE CLASS=H5.Heading5>&lt;</CODE> character2  =>  boolean [Sealed G.F. Method]</H4>
<P CLASS=T1.Text1>Characters are compared by the ordinal value of the underlying character set. Character case is significant.</P>
<A NAME=HEADING99-79></A>
<H4 CLASS=H5.Heading5> string1<CODE CLASS="cv H5.Heading5"> <B CLASS="cv H5.Heading5">&lt; string2  fi</B></CODE>  <I CLASS="Parameter H5.Heading5">boolean</I> [G.F. Method]</H4>
<P CLASS=T1.Text1>When both arguments are strings, <CODE CLASS=T1.Text1>&lt;</CODE> compares strings by comparing elements from left to right, using <CODE CLASS=T1.Text1>&lt;</CODE> and <CODE CLASS="cv T1.Text1">=</CODE> on corresponding elements, and stopping when the elements are not <CODE CLASS="cv T1.Text1">=</CODE>. If one string is a strict prefix of the other, the shorter string is considered the "smaller" one. </P>
<P CLASS=T1.Text1>For variations on string comparison (such as comparisons that ignore case), different comparison operators must be used.</P>
<A NAME=HEADING99-82></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1591></A>&gt;</CODE> [Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription>Returns true if its first operand is <A NAME=MARKER-2-1592></A>greater than its second operand.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1<B CLASS="Parameter Cliche">  <CODE CLASS="Code Parameter Cliche">&gt; object2   =>  boolean</CODE></B></I></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">object2</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> An instance of <CODE CLASS="cv RP.RoutineParam">&lt;object&gt;</CODE>.</P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">boolean</I> An instance of <CODE CLASS="cv Cliche">&lt;boolean&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns true if <I CLASS="Parameter Cliche">object1</I> is greater than <I CLASS="Parameter Cliche">object2</I>.</P>
<P CLASS=T1.Text1>If both arguments are instances of <CODE CLASS="cv T1.Text1">&lt;complex&gt;</CODE> then the result is computed in an implementation-defined way. Otherwise, the result is computed by the expression <CODE CLASS="cv T1.Text1">(<I CLASS="Parameter cv T1.Text1">object2 &lt; object1)</I></CODE>.</P>
</DL>
<A NAME=HEADING99-90></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1593></A>&lt;=</CODE> [Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription>Returns true if its first operand is <A NAME=MARKER-2-1594></A>less than or equal to its second operand.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1 <B CLASS="Parameter Cliche"> <CODE CLASS="Code Parameter Cliche">&lt;=   object2   =>  boolean</CODE></B></I></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">object2</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> An instance of <CODE CLASS="cv RP.RoutineParam">&lt;object&gt;</CODE>.</P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">boolean</I> An instance of <CODE CLASS="cv Cliche">&lt;boolean&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns true if <I CLASS="Parameter Cliche">object1</I> is less than or equal to <I CLASS="Parameter Cliche">object2</I>.</P>
<P CLASS=T1.Text1>If both arguments are instances of <CODE CLASS="cv T1.Text1">&lt;complex&gt;</CODE> then the result is computed in an implementation-defined way. Otherwise, the result is computed by the expression <CODE CLASS="cv T1.Text1">~(<I CLASS="Parameter cv T1.Text1">object2 &lt; object1)</I></CODE>.</P>
</DL>
<A NAME=HEADING99-98></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1595></A>&gt;=</CODE> [Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription>Returns true if its first operand is <A NAME=MARKER-2-1596></A>greater than or equal to its second operand.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1 <B CLASS="Parameter Cliche">  <CODE CLASS="Code Parameter Cliche">&gt;=   object2   =>  boolean</CODE></B></I></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">object2</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> An instance of <CODE CLASS="cv RP.RoutineParam">&lt;object&gt;</CODE>.</P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">boolean</I> An instance of <CODE CLASS="cv Cliche">&lt;boolean&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns true if <I CLASS="Parameter Cliche">object1</I> is greater than or equal to <I CLASS="Parameter Cliche">object2</I>.</P>
<P CLASS=T1.Text1>If both arguments are instances of <CODE CLASS="cv T1.Text1">&lt;complex&gt;</CODE> then the result is computed in an implementation-defined way. Otherwise, the result is computed by the expression <CODE CLASS="cv T1.Text1">~(<I CLASS="Parameter cv T1.Text1">object1 &lt; object2)</I></CODE>.</P>
</DL>
<A NAME=HEADING99-106></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1597></A>min</CODE> [Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-9-1598></A>Returns the least of its arguments.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="cv Cliche">min <I CLASS="Parameter cv Cliche">object1<B CLASS="Parameter cv Cliche"> #rest objects  =>  object2</B></I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">objects</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> Zero or more instances of <CODE CLASS="cv RP.RoutineParam">&lt;object&gt;</CODE>.</P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object2</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns the least of its arguments.</P>
<P CLASS=T1.Text1><CODE CLASS="cv T1.Text1">min</CODE> operates by calling <CODE CLASS="cv T1.Text1">&lt;</CODE>, and therefore is applicable to any objects for which <CODE CLASS="cv T1.Text1">&lt;</CODE> is defined.</P>
</DL>
<A NAME=HEADING99-114></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-1599></A>max</CODE> [Function]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-9-1600></A>Returns the greatest of its arguments.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Signature:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="cv Cliche">max <I CLASS="Parameter cv Cliche">object1<B CLASS="Parameter cv Cliche"> #rest objects  =>  object2</B></I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object1</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">objects</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> Zero or more instances of <CODE CLASS="cv RP.RoutineParam">&lt;object&gt;</CODE>.</P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">object2</I> An instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> Returns the greatest of its arguments.</P>
<P CLASS=T1.Text1><CODE CLASS="cv T1.Text1">max</CODE> operates by calling <CODE CLASS="cv T1.Text1">&lt;</CODE>, and therefore is applicable to any objects for which <CODE CLASS="cv T1.Text1">&lt;</CODE> is defined.<A NAME=MARKER-2-1601></A></P>
</DL>

</DIV>

<DIV CLASS=WM-DIV-FOOTERS>

<DIV CLASS=WM-DIV-TOC>

<!-- TOC --><DL CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-8" CLASS=FOOTER><B CLASS=FOOTER></B>Logical Negation</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-9" CLASS=FOOTER><B CLASS=FOOTER></B>~ [Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-15" CLASS=FOOTER><B CLASS=FOOTER></B>Equality Comparisons</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-16" CLASS=FOOTER><B CLASS=FOOTER></B>== [Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-25" CLASS=FOOTER><B CLASS=FOOTER></B>~== [Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-33" CLASS=FOOTER><B CLASS=FOOTER></B>= [Open Generic Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-44" CLASS=FOOTER><B CLASS=FOOTER></B>object1 = object2  =>  boolean [G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-46" CLASS=FOOTER><B CLASS=FOOTER></B>complex1 = complex2  =>  boolean [Sealed G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-48" CLASS=FOOTER><B CLASS=FOOTER></B>collection1 = collection2  =>  boolean [G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-50" CLASS=FOOTER><B CLASS=FOOTER></B>sequence1  = sequence2  =>  boolean [G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-52" CLASS=FOOTER><B CLASS=FOOTER></B>list1 = list2 =>  boolean  [Sealed G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-54" CLASS=FOOTER><B CLASS=FOOTER></B>list  = sequence  =>  boolean [G.F. Method] sequence  =  list  =>  boolean [G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-56" CLASS=FOOTER><B CLASS=FOOTER></B>range1 = range2 =>  boolean [Sealed G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-58" CLASS=FOOTER><B CLASS=FOOTER></B>~= [Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-66" CLASS=FOOTER><B CLASS=FOOTER></B>Magnitude Comparisons</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-67" CLASS=FOOTER><B CLASS=FOOTER></B>&lt; [Open Generic Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-75" CLASS=FOOTER><B CLASS=FOOTER></B>real1  &lt; real2  =>  boolean [Sealed G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-77" CLASS=FOOTER><B CLASS=FOOTER></B>character1  &lt; character2  =>  boolean [Sealed G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-79" CLASS=FOOTER><B CLASS=FOOTER></B>string1 &lt; string2  =>  boolean [G.F. Method]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-82" CLASS=FOOTER><B CLASS=FOOTER></B>&gt; [Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-90" CLASS=FOOTER><B CLASS=FOOTER></B>&lt;= [Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-98" CLASS=FOOTER><B CLASS=FOOTER></B>&gt;= [Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-106" CLASS=FOOTER><B CLASS=FOOTER></B>min [Function]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_99.htm#HEADING99-114" CLASS=FOOTER><B CLASS=FOOTER></B>max [Function]</A>
<DD CLASS=FOOTER>
</DL>


</DIV>

<HR CLASS=FOOTER>
<ADDRESS CLASS=FOOTER>The Dylan Reference Manual - 7 Apr 1998</ADDRESS>
<P CLASS=FOOTER><A HREF="drm_100.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=next.gif CLASS=HEADER></A> <A HREF="drm_98.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=prev.gif CLASS=HEADER></A> <A HREF="drm_96.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=up.gif CLASS=HEADER></A> <A HREF="drm_1.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=top.gif CLASS=HEADER></A> <A HREF="drm_2.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=content.gif CLASS=HEADER></A> <A HREF="drm_127.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=index.gif CLASS=HEADER></A></P>
<P CLASS=FOOTER>Copyright Apple Computer, Inc. 1996. Apple&#174; and the Apple logo are registered trademarks of Apple Computer, Inc. Used with permission. All Rights Reserved.</P>
<P CLASS=FOOTER>You can order a <A HREF="http://www.harlequin.com/products/ads/dylan/purchase.shtml" CLASS=FOOTER>bound copy</A> of this book from Harlequin.</P>
<P CLASS=FOOTER>Generated with <A HREF="http://www.harlequin.com/webmaker" CLASS=FOOTER>Harlequin WebMaker&#174;</A></P>

</DIV>
</BODY>
</HTML>
