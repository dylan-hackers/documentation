<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML Experimental 19960712//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="drm_1.htm">
<LINK REL=UP HREF="drm_9.htm">
<LINK REL=PREV HREF="drm_16.htm">
<LINK REL=NEXT HREF="drm_18.htm">
<LINK TITLE="WebMaker generated style" REL=stylesheet HREF=drm.css TYPE="text/css">
<TITLE> Expressions</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV CLASS=WM-DIV-BODY>
<A NAME=HEADING17></A>

<DIV CLASS=WM-DIV-HEADERS>
<P CLASS=HEADER><A HREF="drm_18.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=next.gif CLASS=HEADER></A> <A HREF="drm_16.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=prev.gif CLASS=HEADER></A> <A HREF="drm_9.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=up.gif CLASS=HEADER></A> <A HREF="drm_1.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=top.gif CLASS=HEADER></A> <A HREF="drm_2.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=content.gif CLASS=HEADER></A> <A HREF="drm_127.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=index.gif CLASS=HEADER></A></P>
<P CLASS=HEADER>2 Syntax</P>

</DIV>
<A NAME=HEADING17-0></A>
<A NAME=UID-Syntax-1456></A>
<H1 CLASS=H1.Heading1> Expressions</H1>
<P CLASS=T1.Text1>An <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-245></A>expression</B> is a construct that is executed for the values it returns and/or the side-effects that it performs. The "active" portions of a Dylan program are expressions. An expression is either a literal constant, a named value reference, a function call, a unary operator call, a binary operator call, an element reference, a slot reference, a parenthesized expression, or a statement.</P>
<P CLASS=T1.Text1>An <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-246></A>operand</B> is a restricted expression: it cannot be a unary or binary operator call nor a symbol literal. The other seven forms of expression are allowed. Operands appear in situations in the grammar where an expression is desirable but the full generality of expressions would make the grammar ambiguous.</P>
<P CLASS=T1.Text1>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-247></A>literal constant</B> directly represents an object. Literal constants are available for numbers, characters, strings, symbols, boolean values, pairs, lists, and vectors. For example:</P>
<TABLE BORDER=1><TR VALIGN=TOP><TD><P CLASS=TbT.TblText> <A NAME=MARKER-2-207></A>number</P>
</TD><TD><P CLASS=TbCv.TblCode> <CODE CLASS="Code TbCv.TblCode">123, 1.5, -4.0, #x1f4e</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P CLASS=TbT.TblText> <A NAME=MARKER-2-208></A>character</P>
</TD><TD><P CLASS=TbCv.TblCode> <CODE CLASS="Code TbCv.TblCode">'a', '\n'</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P CLASS=TbT.TblText> <A NAME=MARKER-2-209></A>string</P>
</TD><TD><P CLASS=TbCv.TblCode> <CODE CLASS="Code TbCv.TblCode">&quot;foo&quot;, &quot;line 1\nline 2&quot;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P CLASS=TbT.TblText> <A NAME=MARKER-2-210></A>symbol</P>
</TD><TD><P CLASS=TbCv.TblCode> <CODE CLASS="Code TbCv.TblCode">test:, #&quot;red&quot;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P CLASS=TbT.TblText> <A NAME=MARKER-2-211></A>boolean value</P>
</TD><TD><P CLASS=TbCv.TblCode> <CODE CLASS="Code TbCv.TblCode"><A NAME=MARKER-2-212></A>#t, <A NAME=MARKER-2-213></A>#f</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P CLASS=TbT.TblText> <A NAME=MARKER-2-214></A>pair</P>
</TD><TD><P CLASS=TbCv.TblCode> <CODE CLASS="Code TbCv.TblCode">#(1 . &quot;one&quot;)</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P CLASS=TbT.TblText> <A NAME=MARKER-2-215></A>list</P>
</TD><TD><P CLASS=TbCv.TblCode> <CODE CLASS="Code TbCv.TblCode"><A NAME=MARKER-2-216></A>#(1, 2, 3)</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P CLASS=TbT.TblText> <A NAME=MARKER-2-217></A>vector</P>
</TD><TD><P CLASS=TbCv.TblCode> <CODE CLASS="Code TbCv.TblCode"><A NAME=MARKER-2-218></A>#[1, 2, 3]</CODE></P>
</TD></TR></TABLE><P CLASS=T1.Text1>Literal constants are <A NAME=MARKER-2-248></A>immutable. Attempting to modify an immutable object has undefined consequences. Immutable objects may share structure. Literal constants that are equal may or may not be identical.</P>
<P CLASS=T1.Text1>A symbol can be indicated in two ways: as a <A NAME=MARKER-2-249></A>keyword (for example, <CODE CLASS="Code T1.Text1">test:</CODE>) or as a <A NAME=MARKER-2-250></A>unique string (for example, <CODE CLASS="Code T1.Text1">#&quot;red&quot;</CODE>). The difference is purely syntactic; the choice is provided to promote program readability.</P>
<P CLASS=T1.Text1>A string literal can be broken across lines by writing two string literals in a row, separated only by whitespace; they are automatically concatenated (without a newline character).<A NAME=MARKER-2-251></A></P>
<P CLASS=T1.Text1>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-252></A>named value reference</B> returns the value of a visible binding given its name; for example, <CODE CLASS="cv T1.Text1">foo</CODE>. The referenced binding can be a module binding (either constant or variable) or a local binding established by a local declaration or by a parameter list. The value of the binding must not be a macro.</P>
<P CLASS=T1.Text1>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-253></A>reserved word</B> is a syntactic token that has the form of a name but is reserved by the Dylan language and so cannot be given a binding and cannot be used as a named value reference. There are seven reserved words in Dylan: <CODE CLASS="Code T1.Text1"><A NAME=MARKER-2-254></A>define</CODE>, <CODE CLASS="Code T1.Text1"><A NAME=MARKER-2-255></A>end</CODE>, <CODE CLASS="Code T1.Text1"><A NAME=MARKER-2-256></A>handler</CODE>, <CODE CLASS="Code T1.Text1"><A NAME=MARKER-2-257></A>let</CODE>, <CODE CLASS="Code T1.Text1"><A NAME=MARKER-2-258></A>local</CODE>, <CODE CLASS="Code T1.Text1"><A NAME=MARKER-2-259></A>macro</CODE>, and <CODE CLASS="Code T1.Text1"><A NAME=MARKER-2-260></A>otherwise</CODE>.</P>
<P CLASS=T1.Text1>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-261></A>function call</B> applies a function to arguments, and returns whatever values the function returns. The function is indicated by an operand and can be a generic function, a method, or a function macro. The arguments are separated by commas and enclosed in parentheses. For example, <CODE CLASS="Code T1.Text1">f(x, y)</CODE>. For readability, the comma can be omitted between the two arguments in a keyword/value pair, for example <CODE CLASS="Code T1.Text1">element(c, k, default: d)</CODE> is a function call with four arguments.</P>
<P CLASS=T1.Text1><A NAME=MARKER-2-262></A>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-263></A>unary operator call</B> consists of an operand preceded by one of the two unary operators: <CODE CLASS="Code T1.Text1">-</CODE> (arithmetic negation) or <CODE CLASS="Code T1.Text1">~</CODE> (logical negation); for example, <CODE CLASS="Code T1.Text1">- x</CODE>. A unary operator call is actually an abbreviated notation for a function call.</P>
<P CLASS=T1.Text1>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-264></A>binary operator call</B> consists of two expressions separated by one of the binary operators: <CODE CLASS="Code T1.Text1">+</CODE> (addition), <CODE CLASS="Code T1.Text1">-</CODE> (subtraction), <CODE CLASS="Code T1.Text1">*</CODE> (multiplication), <CODE CLASS="Code T1.Text1">/</CODE> (division), <CODE CLASS="Code T1.Text1">^</CODE> (exponentiation), <CODE CLASS="Code T1.Text1">=</CODE> (equality), <CODE CLASS="Code T1.Text1">==</CODE> (identity), <CODE CLASS="Code T1.Text1">&lt;</CODE> (less than), <CODE CLASS="Code T1.Text1">&gt;</CODE> (greater than), <CODE CLASS="Code T1.Text1">&lt;=</CODE> (less than or equal), <CODE CLASS="Code T1.Text1">&gt;=</CODE> (greater than or equal), <CODE CLASS="Code T1.Text1">~=</CODE> (not equal), <CODE CLASS="Code T1.Text1">~==</CODE> (not identical), <CODE CLASS="Code T1.Text1">&amp;</CODE> (logical and), <CODE CLASS="Code T1.Text1">|</CODE> (logical or), or <CODE CLASS="Code T1.Text1">:=</CODE> (assignment). When binary operator calls are chained together, they are grouped by rules of precedence and associativity and by parentheses--for example, <CODE CLASS="Code T1.Text1">(a - b) * x + c * x ^ 2</CODE>. A  binary operator call is actually an abbreviated notation for a function call or function-macro call. The rules of precedence are given in <A HREF="drm_31.htm#MARKER-9-427" CLASS=T1.Text1>Table 4-1, "Operators," on page 37</A>.<A NAME=MARKER-2-265></A></P>
<P CLASS=T1.Text1>An <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-266></A>element reference</B> consists of an operand that indicates a collection and an expression in square brackets that indicates a key. Instead of a key, there can be multiple expressions separated by commas that indicate array indices; for example, <CODE CLASS="Code T1.Text1">c[k]</CODE> or <CODE CLASS="Code T1.Text1">a[i, j]</CODE>. This is actually an abbreviated notation for a function call.</P>
<P CLASS=T1.Text1>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-267></A>slot reference</B> is another abbreviated notation for a function call. It consists of an operand that indicates an object, a period, and a named value reference that indicates a one-argument function to apply to the object. Typically the function is a slot getter but this is not required, as in <CODE CLASS="Code T1.Text1">airplane.wingspan</CODE>.</P>
<P CLASS=T1.Text1>A <B CLASS="Bold T1.Text1"><A NAME=MARKER-2-268></A>parenthesized expression</B> is any expression inside parentheses. The parentheses have no significance except to group the arguments of an operator or to turn a general expression into an operand; for example, <CODE CLASS="Code T1.Text1">(a + b) * c</CODE>.</P>

</DIV>

<DIV CLASS=WM-DIV-FOOTERS>

<DIV CLASS=WM-DIV-TOC>

<!-- TOC -->

</DIV>

<HR CLASS=FOOTER>
<ADDRESS CLASS=FOOTER>The Dylan Reference Manual - 7 Apr 1998</ADDRESS>
<P CLASS=FOOTER><A HREF="drm_18.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=next.gif CLASS=HEADER></A> <A HREF="drm_16.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=prev.gif CLASS=HEADER></A> <A HREF="drm_9.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=up.gif CLASS=HEADER></A> <A HREF="drm_1.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=top.gif CLASS=HEADER></A> <A HREF="drm_2.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=content.gif CLASS=HEADER></A> <A HREF="drm_127.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=index.gif CLASS=HEADER></A></P>
<P CLASS=FOOTER>Copyright Apple Computer, Inc. 1996. Apple&#174; and the Apple logo are registered trademarks of Apple Computer, Inc. Used with permission. All Rights Reserved.</P>
<P CLASS=FOOTER>You can order a <A HREF="http://www.harlequin.com/products/ads/dylan/purchase.shtml" CLASS=FOOTER>bound copy</A> of this book from Harlequin.</P>
<P CLASS=FOOTER>Generated with <A HREF="http://www.harlequin.com/webmaker" CLASS=FOOTER>Harlequin WebMaker&#174;</A></P>

</DIV>
</BODY>
</HTML>
