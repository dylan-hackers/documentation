<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML Experimental 19960712//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="drm_1.htm">
<LINK REL=UP HREF="drm_110.htm">
<LINK REL=PREV HREF="drm_114.htm">
<LINK REL=NEXT HREF="drm_116.htm">
<LINK TITLE="WebMaker generated style" REL=stylesheet HREF=drm.css TYPE="text/css">
<TITLE> Function Macros</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV CLASS=WM-DIV-BODY>
<A NAME=HEADING115></A>

<DIV CLASS=WM-DIV-HEADERS>
<P CLASS=HEADER><A HREF="drm_116.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=next.gif CLASS=HEADER></A> <A HREF="drm_114.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=prev.gif CLASS=HEADER></A> <A HREF="drm_110.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=up.gif CLASS=HEADER></A> <A HREF="drm_1.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=top.gif CLASS=HEADER></A> <A HREF="drm_2.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=content.gif CLASS=HEADER></A> <A HREF="drm_127.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=index.gif CLASS=HEADER></A></P>
<P CLASS=HEADER>14 The Built-In Macros and Special Definitions</P>

</DIV>
<A NAME=HEADING115-0></A>
<A NAME="UID-Built-In_Macros-5344"></A>
<H1 CLASS=H1.Heading1> <A NAME=MARKER-9-2068></A>Function Macros</H1>
<P CLASS=T1.Text1><A NAME=MARKER-2-2069></A>Function macros provide syntax for assignment and for conditional execution. These three built-in function macros may be called using function-call syntax or operator syntax.</P>
<TABLE BORDER=1><CAPTION><P CLASS=Tb.Table>Table 14-4  Function Macros</P>
</CAPTION><TR VALIGN=TOP><TH><P CLASS=TbH.TblHd> Macro</P>
</TH><TH><P CLASS=TbH.TblHd> </P>
</TH><TH><P CLASS=TbH.TblHd> Description</P>
</TH><TH><P CLASS=TbH.TblHd> Page</P>
</TH></TR><TR VALIGN=TOP><TD><P CLASS=TbT.TblText> <CODE CLASS=TbT.TblText>:=</CODE></P>
</TD><TD><P CLASS=TbT.TblText> </P>
</TD><TD><P CLASS=TbT.TblText> <A HREF="#MARKER-9-2072" CLASS=TbT.TblText>Stores a new value in a location.</A></P>
</TD><TD><P CLASS=TbT.TblText> <A HREF="#MARKER-9-2072" CLASS=TbT.TblText>409</A></P>
</TD></TR><TR VALIGN=TOP><TD><P CLASS=TbT.TblText> <CODE CLASS=TbT.TblText>|</CODE></P>
</TD><TD><P CLASS=TbT.TblText> </P>
</TD><TD><P CLASS=TbT.TblText> <A HREF="#MARKER-9-2076" CLASS=TbT.TblText>Returns the value of the first of two operands that is true.</A></P>
</TD><TD><P CLASS=TbT.TblText> <A HREF="#MARKER-9-2075" CLASS=TbT.TblText>412</A></P>
</TD></TR><TR VALIGN=TOP><TD><P CLASS=TbT.TblText> <CODE CLASS=TbT.TblText>&amp;</CODE></P>
</TD><TD><P CLASS=TbT.TblText> </P>
</TD><TD><P CLASS=TbT.TblText> <A HREF="#MARKER-9-2079" CLASS=TbT.TblText>If the value of a first operand is true, executes a second operand and returns its values.</A></P>
</TD><TD><P CLASS=TbT.TblText> <A HREF="#MARKER-9-2079" CLASS=TbT.TblText>412</A></P>
</TD></TR></TABLE><A NAME=HEADING115-63></A>
<A NAME="UID-Built-In_Macros-5569"></A>
<H2 CLASS=H2.Heading2> <A NAME=MARKER-2-2070></A>Assignment</H2>
<A NAME=HEADING115-64></A>
<H3 CLASS=H4.Heading4> <A NAME=MARKER-2-2071></A> <CODE CLASS="Code H4.Heading4">:=</CODE> [Function Macro]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-9-2072></A>Stores a new value in a location.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Macro Call:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">place<CODE CLASS="Code Parameter Cliche"> := new-value</CODE></I></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">place</I> <CODE CLASS="BNF Cliche">expression<EM CLASS="BNF Cliche">bnf</EM></CODE></P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">new-value</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> <CODE CLASS="BNF RP.RoutineParam">expression<EM CLASS="BNF RP.RoutineParam">bnf</EM></CODE></P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">new-value</I>, an instance of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="Code Cliche">:=</CODE> stores <I CLASS="Parameter Cliche">new-value</I> in <I CLASS="Parameter Cliche">place</I> and returns <I CLASS="Parameter Cliche">new-value</I>.</P>
<P CLASS=T1.Text1><I CLASS="Parameter T1.Text1">place</I> may be a variable, a getter function or macro call with a corresponding setter, a slot access, or an element reference.</P>
<P CLASS=T1.Text1><I CLASS="Parameter T1.Text1">new-value</I> may be any operand. It is executed, and its value is stored in <I CLASS="Parameter T1.Text1">place</I>.</P>
<P CLASS=T1.Text1>In all cases, <I CLASS="Parameter T1.Text1">new-value</I> must be an appropriate type for <I CLASS="Parameter T1.Text1">place</I> or an error is signaled.</P>
<P CLASS=T1.Text1>The <I CLASS="Parameter T1.Text1">new-value</I> of an assignment statement is executed first, followed by the <I CLASS="Parameter T1.Text1">place</I> (assuming the <I CLASS="Parameter T1.Text1">place</I> requires any execution, which will only be true if it is not a binding name).</P>
</DL>
<A NAME=HEADING115-75></A>
<H4 CLASS=H5.Heading5> Assignment to a binding</H4>
<P CLASS=T1.Text1>If <I CLASS="Parameter T1.Text1">place</I> is a binding name, then <I CLASS="Parameter T1.Text1">new-value</I> is stored in the binding. It is an error if there is no binding corresponding to <I CLASS="Parameter T1.Text1">place</I>. (<CODE CLASS="Code T1.Text1">:=</CODE> cannot be used to create bindings, only to change their values.)  An error is also signaled if <I CLASS="Parameter T1.Text1">place</I> is a binding specialized to a type and the <I CLASS="Parameter T1.Text1">new-value</I> is not of that type.</P>
<PRE CLASS=Cv.Code>
define variable *number* = 10;
*number*
<CODE CLASS="cv Cv.Code"> fi</CODE>  10
*number* := *number* + 10;
<CODE CLASS="cv Cv.Code"> fi</CODE>  20
*number*
<CODE CLASS="cv Cv.Code"> fi</CODE>  20
</PRE>
<A NAME=HEADING115-78></A>
<H4 CLASS=H5.Heading5> Assignment to a function or function macro</H4>
<P CLASS=T1.Text1>If <I CLASS="Parameter T1.Text1">place</I> has the syntax of a function call, then <CODE CLASS="Code T1.Text1">:=</CODE> will invoke the corresponding setter function. Given a binding named <I CLASS="Parameter T1.Text1">fun</I>, the corresponding setter is the binding named <I CLASS="Parameter T1.Text1">fun<CODE CLASS="cv Parameter T1.Text1">-setter</CODE></I> in the current environment.</P>
<P CLASS=T1.Text1><CODE CLASS="cv T1.Text1">:=</CODE> maps <I CLASS="Parameter T1.Text1">place</I> to <I CLASS="Parameter T1.Text1">place<CODE CLASS="cv Parameter T1.Text1">-setter</CODE></I> without regard for whether <I CLASS="Parameter T1.Text1">place</I> is a function or a macro. It does not expand a macro call on the left-hand side before determining the setter.</P>
<P CLASS=T1.Text1>With the exception of the order of execution and a guaranteed return value, the following three expressions are equivalent:</P>
<PRE CLASS=Cv.Code>
*top-view*.subviews := generate-subviews()
subviews(*top-view*) := generate-subviews()
subviews-setter(generate-subviews(), *top-view*)
</PRE>
<P CLASS=T1.Text1>(The differences are as follows: the execution time of <CODE CLASS="cv T1.Text1">subviews-setter</CODE> is undefined in the first two expressions but defined in the last; the first two expressions will return the value of the call to <CODE CLASS="cv T1.Text1">generate-subviews</CODE> while the last will return the value of the call to <CODE CLASS="cv T1.Text1">subviews-setter</CODE>.)</P>
<PRE CLASS=Cv.Code>
name(arg1,...argn ) := new-value
</PRE>
<P CLASS=T1.Text1>behaves exactly the same as</P>
<PRE CLASS=Cv.Code>
begin
  let <I CLASS="Parameter Cv.Code">temp</I> = new-value;
  name-setter(temp, arg1,...argn );
  <I CLASS="Parameter Cv.Code">temp
</I>end
</PRE>
<P CLASS=T1.Text1>This is true regardless of whether <CODE CLASS="cv T1.Text1">name</CODE> and <CODE CLASS="cv T1.Text1">name-setter</CODE> are functions or macros. Here <I CLASS="Parameter T1.Text1">temp</I> stands for a variable with a unique name. If <CODE CLASS="cv T1.Text1">name-setter</CODE> is a macro, it  is responsible for the order of executation of <CODE CLASS="cv T1.Text1">arg1,...argn</CODE>.</P>
<P CLASS=T1.Text1>The same considerations apply to <CODE CLASS="cv T1.Text1">arg.name := new-value</CODE>.</P>
<A NAME=HEADING115-89></A>
<H4 CLASS=H5.Heading5> Assignment to element references</H4>
<P CLASS=T1.Text1>Just as <CODE CLASS="Code T1.Text1">[]</CODE> can be used as syntax for <CODE CLASS="Code T1.Text1">element</CODE> and <CODE CLASS="Code T1.Text1">aref</CODE>, <CODE CLASS="Code T1.Text1">[]</CODE> and <CODE CLASS="Code T1.Text1">:=</CODE> can be used as syntax for <CODE CLASS="Code T1.Text1">element-setter</CODE> and <CODE CLASS="Code T1.Text1">aref-setter</CODE>. For example, the following three expressions are equivalent:</P>
<PRE CLASS=Cv.Code>
foo[2] := &quot;quux&quot;
element (foo, 2) := &quot;quux&quot;
element-setter (&quot;quux&quot;, foo, 2).<A NAME=MARKER-2-2073></A>
</PRE>
<A NAME=HEADING115-92></A>
<A NAME="UID-Built-In_Macros-5614"></A>
<H2 CLASS=H2.Heading2> Conditional Execution</H2>
<A NAME=HEADING115-93></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-2074></A>|</CODE> [Function Macro]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-9-2075></A>Returns the value of the first of two operands that is true.<A NAME=MARKER-9-2076></A></P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Macro Call:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">one<CODE CLASS="MetaSyntax Parameter Cliche">  | another</CODE></I></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">one</I> <CODE CLASS="BNF Cliche">expression<EM CLASS="BNF Cliche">bnf</EM></CODE></P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">another</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> <CODE CLASS="BNF RP.RoutineParam">expression<EM CLASS="BNF RP.RoutineParam">bnf<I CLASS="Parameter BNF RP.RoutineParam"></I></EM></CODE></P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> Zero or more instances of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="Code Cliche">|</CODE> (<A NAME=MARKER-2-2077></A>logical or) executes <I CLASS="Parameter Cliche">one</I>. If the first value of <I CLASS="Parameter Cliche">one</I> is true, that value is returned and <I CLASS="Parameter Cliche">another</I> is not executed. Otherwise <I CLASS="Parameter Cliche">another</I> is executed and its values are returned.</P>
</DL>
<A NAME=HEADING115-100></A>
<H3 CLASS=H4.Heading4> <CODE CLASS="Code H4.Heading4"><A NAME=MARKER-2-2078></A>&amp;</CODE>  [Function Macro]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-9-2079></A>If the value of a first operand is true, executes a second operand and returns its values.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Macro Call:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">one<CODE CLASS="Code Parameter Cliche"> &amp; another</CODE></I>  fi<B CLASS=Cliche>  <I CLASS="Parameter Cliche">values</I></B></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">one</I> <CODE CLASS="BNF Cliche">expression<EM CLASS="BNF Cliche">bnf</EM></CODE></P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">another</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> <CODE CLASS="BNF RP.RoutineParam">expression<EM CLASS="BNF RP.RoutineParam">bnf</EM></CODE></P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Values:</B><DD CLASS=Cliche><P CLASS=Cliche> Zero or more instances of <CODE CLASS="cv Cliche">&lt;object&gt;</CODE>.</P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="Code Cliche">&amp;</CODE> (<A NAME=MARKER-2-2080></A>logical and) executes <I CLASS="Parameter Cliche">one</I>. If the first value returned by <I CLASS="Parameter Cliche">one</I> is false, <CODE CLASS="Code Cliche">#f</CODE> is returned and <I CLASS="Parameter Cliche">another</I> is not executed. Otherwise, <I CLASS="Parameter Cliche">another</I> is executed and its values are returned.<A NAME=MARKER-2-2081></A></P>
<A NAME="LINK-Built-In_Macros-lastpage"></A></DL>

</DIV>

<DIV CLASS=WM-DIV-FOOTERS>

<DIV CLASS=WM-DIV-TOC>

<!-- TOC --><DL CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_115.htm#HEADING115-63" CLASS=FOOTER><B CLASS=FOOTER></B>Assignment</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_115.htm#HEADING115-64" CLASS=FOOTER><B CLASS=FOOTER></B> := [Function Macro]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_115.htm#HEADING115-75" CLASS=FOOTER><B CLASS=FOOTER></B>Assignment to a binding</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_115.htm#HEADING115-78" CLASS=FOOTER><B CLASS=FOOTER></B>Assignment to a function or function macro</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_115.htm#HEADING115-89" CLASS=FOOTER><B CLASS=FOOTER></B>Assignment to element references</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_115.htm#HEADING115-92" CLASS=FOOTER><B CLASS=FOOTER></B>Conditional Execution</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_115.htm#HEADING115-93" CLASS=FOOTER><B CLASS=FOOTER></B>| [Function Macro]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_115.htm#HEADING115-100" CLASS=FOOTER><B CLASS=FOOTER></B>&amp;  [Function Macro]</A>
<DD CLASS=FOOTER>
</DL>


</DIV>

<HR CLASS=FOOTER>
<ADDRESS CLASS=FOOTER>The Dylan Reference Manual - 7 Apr 1998</ADDRESS>
<P CLASS=FOOTER><A HREF="drm_116.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=next.gif CLASS=HEADER></A> <A HREF="drm_114.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=prev.gif CLASS=HEADER></A> <A HREF="drm_110.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=up.gif CLASS=HEADER></A> <A HREF="drm_1.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=top.gif CLASS=HEADER></A> <A HREF="drm_2.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=content.gif CLASS=HEADER></A> <A HREF="drm_127.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=index.gif CLASS=HEADER></A></P>
<P CLASS=FOOTER>Copyright Apple Computer, Inc. 1996. Apple&#174; and the Apple logo are registered trademarks of Apple Computer, Inc. Used with permission. All Rights Reserved.</P>
<P CLASS=FOOTER>You can order a <A HREF="http://www.harlequin.com/products/ads/dylan/purchase.shtml" CLASS=FOOTER>bound copy</A> of this book from Harlequin.</P>
<P CLASS=FOOTER>Generated with <A HREF="http://www.harlequin.com/webmaker" CLASS=FOOTER>Harlequin WebMaker&#174;</A></P>

</DIV>
</BODY>
</HTML>
