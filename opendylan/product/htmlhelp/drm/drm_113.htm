<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML Experimental 19960712//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="drm_1.htm">
<LINK REL=UP HREF="drm_110.htm">
<LINK REL=PREV HREF="drm_112.htm">
<LINK REL=NEXT HREF="drm_114.htm">
<LINK TITLE="WebMaker generated style" REL=stylesheet HREF=drm.css TYPE="text/css">
<TITLE> Local Declarations</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997 experimental)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV CLASS=WM-DIV-BODY>
<A NAME=HEADING113></A>

<DIV CLASS=WM-DIV-HEADERS>
<P CLASS=HEADER><A HREF="drm_114.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=next.gif CLASS=HEADER></A> <A HREF="drm_112.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=prev.gif CLASS=HEADER></A> <A HREF="drm_110.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=up.gif CLASS=HEADER></A> <A HREF="drm_1.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=top.gif CLASS=HEADER></A> <A HREF="drm_2.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=content.gif CLASS=HEADER></A> <A HREF="drm_127.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=index.gif CLASS=HEADER></A></P>
<P CLASS=HEADER>14 The Built-In Macros and Special Definitions</P>

</DIV>
<A NAME=HEADING113-0></A>
<A NAME="UID-Built-In_Macros-7985"></A>
<H1 CLASS=H1.Heading1> Local Declarations</H1>
<P CLASS=T1.Text1><A NAME=MARKER-2-2029></A>Local declarations are used to create bindings or install handlers that are active for the remainder of the innermost body containing the declaration. Bindings created by local declarations can be referenced only in the remaining program text of the body. Handlers installed are active while the execution of the remainder of the body is active, which includes the time during which any functions called from the remainder of the body are active.</P>
<TABLE BORDER=1><CAPTION><P CLASS=Tb.Table>Table 14-2  Local Declarations (continued)</P>
</CAPTION><TR VALIGN=TOP><TH><P CLASS=TbH.TblHd> Macro</P>
</TH><TH><P CLASS=TbH.TblHd> </P>
</TH><TH><P CLASS=TbH.TblHd> Description</P>
</TH><TH><P CLASS=TbH.TblHd> Page</P>
</TH></TR><TR VALIGN=TOP><TD><P CLASS=TbT.TblText> <CODE CLASS=TbT.TblText>let</CODE></P>
</TD><TD><P CLASS=TbT.TblText> </P>
</TD><TD><P CLASS=TbT.TblText> <A HREF="#MARKER-9-2031" CLASS=TbT.TblText>Creates and initializes new local bindings within the smallest enclosing implicit body.</A></P>
</TD><TD><P CLASS=TbT.TblText> <A HREF="#MARKER-9-2031" CLASS=TbT.TblText>390</A></P>
</TD></TR><TR VALIGN=TOP><TD><P CLASS=TbT.TblText> <CODE CLASS=TbT.TblText>local</CODE></P>
</TD><TD><P CLASS=TbT.TblText> </P>
</TD><TD><P CLASS=TbT.TblText> <A HREF="#MARKER-9-2035" CLASS=TbT.TblText>Creates new local bindings within the smallest enclosing implicit body and initializes them to local methods that can be self-recursive and mutually recursive.</A></P>
</TD><TD><P CLASS=TbT.TblText> <A HREF="#MARKER-9-2035" CLASS=TbT.TblText>391</A></P>
</TD></TR><TR VALIGN=TOP><TD><P CLASS=TbT.TblText> <CODE CLASS=TbT.TblText>let handler</CODE></P>
</TD><TD><P CLASS=TbT.TblText> </P>
</TD><TD><P CLASS=TbT.TblText> <A HREF="#MARKER-9-2038" CLASS=TbT.TblText>Establishes a condition handler for the duration of the execution of smallest enclosing implicit body.</A></P>
</TD><TD><P CLASS=TbT.TblText> <A HREF="#MARKER-9-2038" CLASS=TbT.TblText>392</A></P>
</TD></TR></TABLE><A NAME=HEADING113-63></A>
<H3 CLASS=H4.Heading4> <CODE CLASS=H4.Heading4><A NAME=MARKER-2-2030></A>let</CODE> [Local Declaration]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-9-2031></A>Creates and initializes new local bindings within the smallest enclosing implicit body. </P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Macro Call:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="Code Cliche">let<I CLASS="Code Cliche"> variables = init ;</I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">variables <CODE CLASS="BNF Parameter Cliche">variable<EM CLASS="BNF Parameter Cliche">bnf | ( variable-listbnf )</EM></CODE></I></P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">init</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> <CODE CLASS="BNF RP.RoutineParam">expression<EM CLASS="BNF RP.RoutineParam">bnf</EM></CODE></P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="Code Cliche">let</CODE> creates local bindings for the <I CLASS="Parameter Cliche">variables</I>, and initializes them to the values returned by <I CLASS="Parameter Cliche">init</I>. The bindings are visible for the remainder of the smallest enclosing implicit body.</P>
<P CLASS=T1.Text1><A NAME=MARKER-2-2032></A>The first value returned by the <I CLASS="Parameter T1.Text1">init</I> is bound to the first <I CLASS="Parameter T1.Text1">variable</I>, the second value to the second <I CLASS="Parameter T1.Text1">variable</I>, etc. The last <I CLASS="Parameter T1.Text1">variable</I> may be preceded by <CODE CLASS="Code T1.Text1">#rest</CODE>, in which case it is bound to a sequence containing all the remaining values.</P>
<P CLASS=T1.Text1>Each <I CLASS="Parameter T1.Text1">variable</I> is a variable-name or a variable-name followed by a specializer.</P>
<P CLASS=T1.Text1>If more than one binding is defined, the <I CLASS="Parameter T1.Text1">variables</I> are enclosed in parentheses and separated by commas.</P>
</DL>
<PRE CLASS=Cv.Code>
let start = 0;
let (whole-part, remainder) = truncate(amount);
let (first-value, #rest rest-values) = get-initial-values();
</PRE>
<P CLASS=T1.Text1><A NAME=MARKER-2-2033></A>Local variables may be specialized. This ensures that their value will always be of a given type. An attempt to initialize or assign the variable to a value not of that type will signal an error of type <CODE CLASS="Code T1.Text1">&lt;type-error&gt;</CODE>.</P>
<PRE CLASS=Cv.Code>
let elapsed-time :: &lt;integer&gt; = 0;
let the-front-window :: &lt;window&gt; = front-window();
let(whole-part :: &lt;integer&gt;, remainder :: &lt;real&gt;) = truncate(amount);
</PRE>
<A NAME=HEADING113-79></A>
<H3 CLASS=H4.Heading4> <CODE CLASS=H4.Heading4><A NAME=MARKER-2-2034></A>local</CODE> [Local Declaration]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><A NAME=MARKER-9-2035></A><A NAME=MARKER-2-2036></A>Creates new local bindings within the smallest enclosing implicit body and initializes them to local methods that can be self-recursive and mutually recursive.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Macro Call:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="Code Cliche">local { [ method ] <I CLASS="Parameter Code Cliche">name parameter-list  [ body ]  end [ method ] [ name ] } ,<EM CLASS="Superscript Parameter Code Cliche"><B CLASS="Superscript Parameter Code Cliche">+</B></EM></I></CODE></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">name <CODE CLASS="BNF Parameter Cliche">variable-name<EM CLASS="BNF Parameter Cliche">bnf</EM></CODE></I></P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">parameter-list<CODE CLASS="BNF Parameter RP.RoutineParam"></CODE></I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> parameter-list<EM CLASS=RP.RoutineParam>bnf</EM></P>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">body</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> <CODE CLASS="BNF RP.RoutineParam">body<EM CLASS="BNF RP.RoutineParam">bnf</EM></CODE></P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="cv Cliche">local</CODE> creates local methods that may be mutually recursive and self-recursive.</P>
<P CLASS=T1.Text1>Each <I CLASS="Parameter T1.Text1">name</I> creates a new local binding. The binding is initialized to a new method specified by the <I CLASS="Parameter T1.Text1">parameter-list</I> and <I CLASS="Parameter T1.Text1">body</I>. In addition to being visible for the remainder of the smallest enclosing implicit body, the bindings created for the <I CLASS="Parameter T1.Text1">names</I> are visible to the <I CLASS="Parameter T1.Text1">parameter-lists</I> and <I CLASS="Parameter T1.Text1">bodies</I> of all the methods created by the <CODE CLASS="Code T1.Text1">local</CODE> declaration.</P>
<P CLASS=T1.Text1>The <I CLASS="Parameter T1.Text1">parameter-list</I> is a standard method parameter list. A complete description of parameter lists is given in <A HREF="drm_49.htm#MARKER-9-782" CLASS=T1.Text1>"Parameter Lists" on page 84</A>.</P>
<P CLASS=T1.Text1>The <I CLASS="Parameter T1.Text1">body</I> is an implicit body.</P>
</DL>
<A NAME=HEADING113-89></A>
<H3 CLASS=H4.Heading4> <CODE CLASS=H4.Heading4><A NAME=MARKER-2-2037></A>let handler</CODE> [Local Declaration]</H3>
<HR CLASS=H4.Heading4>
<P CLASS=SD.ShortDescription><CODE CLASS=SD.ShortDescription><A NAME=MARKER-9-2038></A><A NAME=MARKER-2-2039></A></CODE>Establishes a condition handler for the duration of the execution of smallest enclosing implicit body.</P>
<DL CLASS=Cliche>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Macro Call:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="Code Cliche">let handler</CODE> <I CLASS="Parameter Cliche">condition<CODE CLASS="Code Parameter Cliche"> = handler</CODE></I></P>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Arguments:</B><DD CLASS=Cliche><P CLASS=Cliche> <I CLASS="Parameter Cliche">condition</I> <I CLASS="Parameter Cliche">type<CODE CLASS="MetaSyntax Parameter Cliche"> | ( type  { ,option  }*)</CODE></I></P>
<DL CLASS=RP.RoutineParam>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">type</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> <CODE CLASS="BNF RP.RoutineParam">expression<EM CLASS="BNF RP.RoutineParam">bnf</EM></CODE></P>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">option</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> test-option<CODE CLASS="MetaSyntax RP.RoutineParam">  | <I CLASS="Parameter MetaSyntax RP.RoutineParam">init-option</I></CODE></P>
<DT CLASS=RP.RoutineParam>test-option<DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> <CODE CLASS="Code RP.RoutineParam">test: expression<EM CLASS="Code RP.RoutineParam">bnf</EM></CODE></P>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">init-option</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> <CODE CLASS="Code RP.RoutineParam">init-arguments: expression<EM CLASS="Code RP.RoutineParam">bnf</EM></CODE></P>
<DT CLASS=RP.RoutineParam><I CLASS="Parameter RP.RoutineParam">handler</I><DD CLASS=RP.RoutineParam><P CLASS=RP.RoutineParam> <CODE CLASS="BNF RP.RoutineParam">expression<EM CLASS="BNF RP.RoutineParam">bnf</EM></CODE></P>
</DL>
<DT CLASS=Cliche><B CLASS="IMPORTANT Cliche">Description:</B><DD CLASS=Cliche><P CLASS=Cliche> <CODE CLASS="Code Cliche">let handler</CODE> establishes a new condition handler that is in effect for the duration of the execution of the remainder of the smallest enclosing implicit body. Unlike the local declarations <CODE CLASS="Code Cliche">let</CODE> and <CODE CLASS="Code Cliche">local</CODE>, <CODE CLASS="Code Cliche">let handler</CODE> does not create any bindings.</P>
</DL>
<UL CLASS=B1.Bullet1>
<LI CLASS=B1.Bullet1>The <I CLASS="Parameter B1.Bullet1">condition</I> describes the conditions for which the handler is applicable.
<UL CLASS=B2.Bullet2>
<LI CLASS=B2.Bullet2>The <I CLASS="Parameter B2.Bullet2">type</I> is the type of the applicable conditions. The handler will be applicable to conditions that are general instances of <I CLASS="Parameter B2.Bullet2">type</I>.
<LI CLASS=B2.Bullet2>The <I CLASS="Parameter B2.Bullet2">test-option </I> is a function that is called to further test the applicability of the handler. When a condition of type <I CLASS="Parameter B2.Bullet2">type</I> is signaled, the test function will be called with that condition as an argument. If the test returns true, the handler is considered applicable to the condition. If the test returns false, the handler is considered to be inapplicable to the condition. The default value of this option is a function that always returns true. There can be at most one <I CLASS="Parameter B2.Bullet2">test-option</I>.<BR><BR>An example use for this feature is a restart handler for restarting only from a particular condition object, for example restarting from an unbound-slot error by setting the slot and retrying the invocation of the accessor. The <CODE CLASS="Code B2.Bullet2">&lt;set-and-continue&gt;</CODE> restart condition will have the signaled <CODE CLASS="Code B2.Bullet2">&lt;unbound-slot&gt;</CODE> condition in a slot, and the handler's test will check for it. (These class names are invented for this example and are not part of the specification.) 
<LI CLASS=B2.Bullet2>The <I CLASS="Parameter B2.Bullet2">init-option</I> is a sequence of alternating keywords and objects that can be used as initialization arguments to construct a condition to which the handler is applicable. For example, if the handler is a restart handler, a program could retrieve the <I CLASS="Parameter B2.Bullet2">init-option</I> by calling <CODE CLASS="cv B2.Bullet2">do-handlers</CODE>, and could then use them to construct a corresponding restart. There can be at most one <I CLASS="Parameter B2.Bullet2">init-option</I>. <I CLASS="Parameter B2.Bullet2">init-option</I> defaults to an empty sequence.
</UL>
<LI CLASS=B1.Bullet1>The<I CLASS=B1.Bullet1> handler</I> is function called to handle a condition that matches <I CLASS="Parameter B1.Bullet1">type</I> and passes <I CLASS="Parameter B1.Bullet1">test-option</I>. The function should accept two arguments. The first argument will be the condition being signaled, and the second argument will be a next-handler function. The handler handles the condition by taking a nonlocal exit, returning values according to the condition's recovery protocol, or tail-recursively calling <CODE CLASS="Code B1.Bullet1">signal</CODE> of a restart. The function can decline to handle the condition by tail-recursively calling the next-handler function with no arguments. 
<P CLASS=T1.Text1><I CLASS="Parameter T1.Text1">test-option</I> and <I CLASS="Parameter T1.Text1">handler</I>  are distinct so that handler applicability can be tested without actually handling (which might take a nonlocal exit). One use for this is constructing a list of available restart handlers.</P>
<P CLASS=T1.Text1>There is no "condition wall," i.e., when executing <I CLASS="Parameter T1.Text1">handler </I> the set of available handlers is not reset to the handlers that were in effect when the <CODE CLASS="Code T1.Text1">let handler</CODE> was entered.</P>
<P CLASS=T1.Text1> Implementations are encouraged to implement <CODE CLASS="Code T1.Text1">let handler</CODE> in a way that optimizes establishing a handler for both speed and space, even if that increases the cost of signaling. The assumption is that most of the time a handler will never be used, because the exception it is looking for will never occur.</P>
<P CLASS=T1.Text1><I CLASS="Parameter T1.Text1">type</I>, <I CLASS="Parameter T1.Text1">handler</I>, <I CLASS="Parameter T1.Text1">test-option</I>, and <I CLASS="Parameter T1.Text1">init-option</I> are executed before execution of the rest of the enclosing body begins.<A NAME=MARKER-2-2040></A></P>
</UL>

</DIV>

<DIV CLASS=WM-DIV-FOOTERS>

<DIV CLASS=WM-DIV-TOC>

<!-- TOC --><DL CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_113.htm#HEADING113-63" CLASS=FOOTER><B CLASS=FOOTER></B>let [Local Declaration]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_113.htm#HEADING113-79" CLASS=FOOTER><B CLASS=FOOTER></B>local [Local Declaration]</A>
<DD CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="drm_113.htm#HEADING113-89" CLASS=FOOTER><B CLASS=FOOTER></B>let handler [Local Declaration]</A>
<DD CLASS=FOOTER>
</DL>


</DIV>

<HR CLASS=FOOTER>
<ADDRESS CLASS=FOOTER>The Dylan Reference Manual - 7 Apr 1998</ADDRESS>
<P CLASS=FOOTER><A HREF="drm_114.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=next.gif CLASS=HEADER></A> <A HREF="drm_112.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=prev.gif CLASS=HEADER></A> <A HREF="drm_110.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=up.gif CLASS=HEADER></A> <A HREF="drm_1.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=top.gif CLASS=HEADER></A> <A HREF="drm_2.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=content.gif CLASS=HEADER></A> <A HREF="drm_127.htm" CLASS=HEADER><IMG ALIGN=BOTTOM BORDER=0 SRC=index.gif CLASS=HEADER></A></P>
<P CLASS=FOOTER>Copyright Apple Computer, Inc. 1996. Apple&#174; and the Apple logo are registered trademarks of Apple Computer, Inc. Used with permission. All Rights Reserved.</P>
<P CLASS=FOOTER>You can order a <A HREF="http://www.harlequin.com/products/ads/dylan/purchase.shtml" CLASS=FOOTER>bound copy</A> of this book from Harlequin.</P>
<P CLASS=FOOTER>Generated with <A HREF="http://www.harlequin.com/webmaker" CLASS=FOOTER>Harlequin WebMaker&#174;</A></P>

</DIV>
</BODY>
</HTML>
