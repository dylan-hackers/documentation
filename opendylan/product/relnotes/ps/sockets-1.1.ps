%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.1
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%-
%- Frame ps_prolog 5.0, for use with Frame 5.0 products
%- This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
%- All rights reserved.  This ps_prolog file may be freely copied and 
%- distributed in conjunction with documents created using FrameMaker, 
%- FrameMaker/SGML FrameReader and FrameViewer as long as this 
%- copyright notice is preserved.
%-
%- FrameMaker users specify the proper paper size for each print job in the
%- "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
%- printer that the PS file is sent to does not support the requested paper
%- size, or if there is no paper tray of the proper size currently installed, 
%- then the job will not be printed.  The following flag, if set to true, will
%- cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            true def
%-
%- Frame products normally print colors as their true color on a color printer
%- or as shades of gray, based on luminance, on a black-and white printer. The
%- following flag, if set to true, forces all non-white colors to print as pure
%- black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%-
%- Frame products can either set their own line screens or use a printer's 
%- default settings. Three flags below control this separately for no 
%- separations, spot separations and process separations. If a flag
%- is true, then the default printer settings will not be changed. If it is
%- false, Frame products will use their own settings from a table based on
%- the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%-
%- For any given PostScript printer resolution, Frame products have two sets of 
%- screen angles and frequencies for printing process separations, which are 
%- recomended by Adobe. The following variable chooses the higher frequencies
%- when set to true or the lower frequencies when set to false. This is only
%- effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%-
%- The following is a set of predefined optimal frequencies and angles for various
%- common dpi settings. This is taken from "Advances in Color Separation Using
%- PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
%- and corrolated with information which is in various PPD (4.0) files.
%-
%- The "dpiranges" figure is the minimum dots per inch device resolution which
%- can support this setting. The "low" and "high" values are controlled by the
%- setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
%- the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
%- three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%-
%- PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
%- to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
%- (too badly) against the screen frequencies of any separations for that DPI.
% This is computed by taking dpi/9 as the ideal pixels per repetition, and then
% computing a tiling size in printer pixels for each of the four separations as 
% (dpi/screenFreq)*(cos(screenAngle)+sin(screenAngle)) Actually, this is the same 
% for Cyan and Magenta). Then, we take a "nice" LCM of the tile sizes close to
% the desired pattern tile where the beat factor is not more than 2 or 3.
%
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def

/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def

/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%-
%- PostScript Level 2 printers contain an "Accurate Screens" feature which can
%- improve process separation rendering at the expense of compute time. This 
%- flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%-
%- The following PostScript procedure defines the spot function that Frame
%- products will use for process separations. You may un-comment-out one of
%- the alternative functions below, or use your own.
%-
%- Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%-
%- Line function
%- /FMSpotFunction { pop } def
%-
%- Elipse function
%- /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%-		sqrt 1 exch sub } def
%-
%-

/FMversion (5.0) def % matches PS_VERSION in fmprintdriver

% PostScript Level 1 = true, 2 = false
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def

% Set up Color vs. Black-and-White
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
%		statusdict /processcolors known {
%			statusdict /processcolors get exec
%		} {1} ifelse
%		1 gt
		true
	} ifelse
def

/FrameDict 400 dict def % should check this value each time changes made

%
% For NeWS we add a fake errordict, so we can psh files
%
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if

%- The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put % save old rangecheck
errordict /rangecheck {FrameDict /bug true put} put % will flag bug found
FrameDict /bug false put % flag bug not found
mark % since we're not sure what will happen next
%- Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark % junk from readline and rangecheck
errordict /rangecheck FrameDict /tmprangecheck get put % restore rangecheck
FrameDict /bug get { % redefine readline if last one got a rangecheck
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop % get a char
			dup 10 eq {exit} if % exit if LF
			dup 13 eq {exit} if % exit if CR
			gstring exch gindex exch put % store it away
			/gindex gindex 1 add def % bump index
		} loop
		pop % eol character
		gstring 0 gindex getinterval true % simulate real readline
		} bind def
	} if

% outer-world defs

/FMshowpage /showpage load def
/FMquit /quit load def

/FMFAILURE { % enter with two error strings on the stack
	dup = flush % send a copy of the message to the console
	FMshowpage % msg on a page by itself, so it can't be, say, black on black
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage % we might be in the middle of some EPS, where "showpage"
	FMquit % and "quit" are redefined
	} def % only used once at most, so no bind

/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def % only used at startup, so no bind

/FMBADEPSF { % Call with bad operator name on stack (as a string)
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length % parmstr errstr errstr indx
	5 -1 roll % errstr errstr index parmstr
	putinterval % errstr
	FMFAILURE
	} def

% standard concatprocs routine
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def

% Put all local variables here in alphabetical order.
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall

% Start of PDF/Acrobat support

% Bind def
/FmBD {bind def} bind def

systemdict /pdfmark known {
	/fMAcrobat true def

	% FmPD is a conditional PDFMark
	/FmPD /pdfmark load def
	
	% FmPT is a show text operator which only show up when distiller is active
	/FmPT /show load def
	
	% FmPD2 and FmPA are Acrobat 2.0-specific
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		% FmPD2 is like FmPD but for Acrobat 2.0-specific PDF
		/FmPD2 /pdfmark load def
		
		% x y/name FmPA
		% 	is equivalent to
		% [/Dest/name/View[/FitH x y FmDC exch pop]/DEST FmPD
		% It is a shortcut for pagragraph Uinique ID designators whic occurr commonly.
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		% These are No-Ops for Distiller 1.0
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	% these are the No-Ops for regular PostScript
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse

% This convert a set of X Y coordinates from the current user space to the default
% PostScript coordinates needed by some pdfmark variants. We also convert to 
% integer because the distiller doesn't always like floats!
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD

% This converts four numbers into a bounding box making sure the first two are maller than the last two
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD

% End of PDF/Acrobat support

%
% Color separation code
%

% Constants.

/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def

/fMNegative false def % we are inverting the page

% Variables.

/FrameSepIs FMnone def % separation we are printing
% If FrameSepIs is FMcustom, this is the custom color
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def

/FrameCurColors [ 0 0 0 1 0 0 0 ] def % c m y k r g b

% Utility routines

/FrameColorEpsilon .001 def	% epsilon by which values can differ and sill be equal
/eqepsilon {		% v1 v2 eqeps bool
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def

% are the cmyk and cmykrgb arrays on the stack the same color?
/FrameCmpColorsCMYK { % [ c1 m1 y1 k1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
% are the rgb and cmykrgb arrays on the stack the same color?
/FrameCmpColorsRGB { % [ r1 g1 b1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def

% convert r g b to c m y k
/RGBtoCMYK { % r g b
	1 exch sub % r g y
	3 1 roll % y r g
	1 exch sub % y r m
	3 1 roll % m y r
	1 exch sub % m y c
	3 1 roll % c m y
	3 copy % c m y c m y
	2 copy % c m y c m y m y
	le { pop } { exch pop } ifelse % c m y c min(m,y)
	2 copy % c m y c min(m,y) c min(m,y)
	le { pop } { exch pop } ifelse % c m y min(c, min(m,y))
	dup dup dup % c m y k k k k
	6 1 roll % c k m y k k k
	4 1 roll % c k m k y k k
	7 1 roll % k c k m k y k
	sub % k c k m k y
	6 1 roll % y k c k m k
	sub % y k c k m
	5 1 roll % m y k c k
	sub % m y k c
	4 1 roll % c m y k 
} bind def
/CMYKtoRGB { % c m y k CMYKtoRGB r g b
	dup dup 4 -1 roll add 						  % c m k k y+k
	5 1 roll 3 -1 roll add 						  % y+k c k m+k
	4 1 roll add 								  % m+k y+k c+k
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  % r m+k y+k
	1 exch sub dup 0 lt {pop 0} if exch 	      % r b m+k
	1 exch sub dup 0 lt {pop 0} if exch	  		  % r g b
} bind def

% Public routines


% Happens at the top of each page that is a separation
/FrameSepInit {
	1.0 RealSetgray
} bind def
% Tell the separation code that this separation is for a custom color
/FrameSetSepColor { % c m y k r g b
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
% Tell the separation code that this separation is Cyan
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
% Tell the separation code that this separation is Magenta
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Yellow
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Black
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
% Tell the separation code we are not doing a separation
/FrameNoSep { %
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def

% Initialize the separation code with all the custom colors we are
% separating (not process colors)
/FrameSetSepColors { % list of arrays of [c m y k r g b] count 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  % array of arrays of colors we are separating
	exch def end
	} bind def

% is this color array in the array of custom color separations?
/FrameColorInSepListCMYK { % [ c m y k ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsCMYK % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { % [ r g b ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsRGB % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def

% Level 1 color operators saved and redefined
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 

% Setgray patch
/setgray { % num
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ % go to white unless the current sep color is black
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { % r g b
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] % r g b [ r g b ]
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor % safe since we will overwrite the color state
		currentrgbcolor  % r g b - Let PostsCript to the conversion.
		setrgbcolor % call our version
	} 
	ifelse
	end
} bind def
FrameDict begin

/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { % c m y k
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put

% Set up a prototype pattern for PostScript Level 2
fMLevel1 { 
	% set up screen functions for the patterns in PS level 1
	% each entry contains an angle, spot function, flipped spot function,
	% gray level and frequency multiplier.
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { % prototype level 2 pattern dictionary
	% define some PostScript procedures for known jaggy patterns.
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		% Always 1 for PS Level 2
		/PaintType 2 def		% Uncolored pattern
		/TilingType 3 def		% constant spacing and faster tiling
		/BBox [ 0 0 8 8 ] def 	% bounding box
		/XStep 8 def			% X offset
		/YStep 8 def			% Y offset
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse

%combineColor puts together the current gray value (which could also be
%a fraction of on bits for a fill pattern and the current color and calls
%the appropriate function
%
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { % separation case
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				% Level 1 patterns are either all there or not there at all
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def

/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
% freq and sangle are used for ps Level 1 pattern building.
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def

%
% screen index depending on dpi
%	- screenIndex smallint
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def

%
% These routines get the standard Adobe frequencies, angles, and spot functions
% depending on the DPI
%
% - getCyanScreen freq angle spotfunction
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getMagentaScreen freq angle spotFunction
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getYellowScreen freq angle spotFunction
% note that some of these use a "tripple dot" function at 1/3 the frequency
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def

%
% - getBlackScreen freq angle spotFunction
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def

%
% - getSpotScreen freq angle spotFunction
/getSpotScreen {
	getBlackScreen
} bind def

%
% - getCompositeScreen freq angle spotFunction
/getCompositeScreen {
	getBlackScreen
} bind def

% FmSetScreen sets the screen for either PostScript Level 1 or Level 2 and optionally
% sets the accuratescreens flag in the latter case
% freq angle spotfunction FMSetScreen -
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def

% This sets the default screen as was set at the beginning of the job
% - setDefaultScreen -
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def

% This sets the current screen depending on FrameSepIs
% - setCurrentScreen -
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def


end

% End of Color separation code
%
	
/FMDOCUMENT { % xscale yscale edown negative paperwidth paperheight manfeed numcopies numfonts
	array /FMfonts exch def % Why isn't this in FrameDict???
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def % invert page
	0 ne /edown exch def % flip page along y axis
	/yscale exch def
	/xscale exch def

	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def % some PS's leave junk on dict ...
		/FMoptop count def % ...or on operand stack...
		setpapername % This stuff may alter the transfer/screen/angle
		manualfeed {true} {papersize} ifelse % true->more work to do
		{manualpapersize} {false} ifelse % true->more work to do
		{desperatepapersize} {false} ifelse % true->failed completely
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for %...if tray not installed
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse % fMLevel1
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def

			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse

	end % FrameDict
} def % only used at startup, so no bind

/FMBEGINPAGE { % pagewidth pageheight landscape color-arrays count
	FrameDict begin % for the whole page...
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { % check for landscape
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
% paint the whole page in "white".  If the page is inverted, then
% this will actually paint our black background
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave % for CLIP
} def % only used infrequently, so no bind

/FMENDPAGE {
	grestore % for CLIP
	pagesave restore
	end % FrameDict
	showpage
	} def % only used infrequently, so no bind

/FMFONTDEFINE { % fontindex nonstd_encoding fontname -- 
	FrameDict begin
	findfont % fontindex nonstd_encoding font
	ReEncode % fontindex font'
	1 index exch % fontindex fontindex font'
	definefont % fontindex font"
	FMfonts 3 1 roll %  FMfonts fontindex font"
	put
	end % FrameDict
	} def % only used infrequently, so no bind

/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end % framedict
	} def % Only called once, so no bind

/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end % FrameDict
	} def % only used infrequently, so no bind

% Set things to a known, quiescent state, for when we switch to another writer
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray % Not FMsetgray; only called outside of our environment!
	} bind def

/FMBEGINEPSF { % <theta> llx lly urx ury fw fh fx fy
	end % FrameDict
	/FMEPSF save def % in userdict
	/showpage {} def % this def is in userdict
%- See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
%- "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def % FMBADEPSF knows this is the longest!
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
%	/initmatrix {(initmatrix) FMBADEPSF} def	% Aldus Freehand 4.0 epsf uses this harmlessly <Gus 4/26/95>
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall % neat trick
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale % then scale
	llx neg lly neg translate % then compensate for LL offset 
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count def % tricky! "/FMoptop" on stack
	} bind def

/FMENDEPSF {
	count -1 FMoptop {pop pop} for % clear EPS junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMEPSF restore
	FrameDict begin % for the whole page...
	} bind def

FrameDict begin % put most defs here

/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def

/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def

/pagedimen { % name width height
	paperheight sub abs 16 lt exch % 16pt is an arbitrary slop amount
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def

/setpapername { % Already set up: paperwidth paperheight and manualfeed
	/papersizedict 14 dict def % one for /papername, one for /unknown
	papersizedict begin
	/papername /unknown def % in case no match
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def

/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end % return true if more work to do
	} bind def

/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped % return true if more work to do
	} bind def

/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped % return true iff failed
		end
		} {true} ifelse % return true iff failed
	} bind def

/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def

%
% Font re-encoding to include diacritics
% 
/DiacriticEncoding [

/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron

] def

/ReEncode { % nonstd_encoding font -- reencodedfont
	dup % nonstd_encoding font font
	length % nonstd_encoding font dictlength
	dict begin % nonstd_encoding font % currentdict = newdict
	{% forall % forall is over font to be copied
	1 index /FID ne % skip FID
		{def} % defs go into newfontdict which is currentdict
		{pop pop} ifelse % copy all keys including /Encoding
	} forall % nonstd_encoding
	0 eq {/Encoding DiacriticEncoding def} if % --
	currentdict % push a copy of the copied font dict onto operand stack
	end % font' % before popping it off dictionary stack
	} bind def

FMPColor 
	% setup procs for color printing
	{

	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	% setup procs for B&W printing
	{
	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse

/K { % c m y k r g b SEPARATION
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
%
% graymode is true if we are just doing gray fills, this way do not keep calling
% setscreen. I don't know what the cost is on calling setscreen with defaults, but
% this is easy to keep track of, and we know for sure we aren't wasting cycles.
% if graymode is false and fMLevel1 is false, then we are using Level 2 patterns.
%
/graymode true def

% used by level 1 patterns
% defaultflip matrixentry fmGetFlit -> eith -1 or 1
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if

/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop % angle spot fspot gray mult
			freq 								% freq
			mul									% times multiplier
			5 2 roll							% angle spot fspot gray mult freq -> gray freq angle spot fspot
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		% landscape
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								% portrait     
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		% take regular or flipped spot function
			fMNegative { 
				{neg} fmConcatProcs 			% invert spot function
			} if
			bind
			% we need to bypass any screen filter and go directly to systemdict
			% to avoid problems with Kodak Precision calibration software
			% <Gus 9/13/93>
			systemdict /setscreen get exec		% leave graylevel on stack
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { % Level 2 version
		pop pop
		dup patCache exch known {
			patCache exch get
		} { % not in cache
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
%			9 orgfreq 
%				organgle sin abs organgle cos abs add div
%				dup 16 div round dup 0 le {pop 1} if  % Unix pattern size
%			    dup  9 div round dup 0 le {pop 1} if  % Mac larger (WYSIWYG) size
%					div div dup matrix scale % This gives Unix pattern size.
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def

/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def

/normalize {
	transform round exch round exch itransform
	} bind def

/dnormalize {
	dtransform round exch round exch idtransform
	} bind def

/lnormalize { % line widths are always odd so that arrow heads work
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def

/H { % THICK
	lnormalize setlinewidth
	} bind def

/Z {
	setlinecap
	} bind def
	
% This is used to fill or stroke white behind a Level 2 pattern
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def

/X { % TEXTURE
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} % Silly to pass parameters here
	{setGrayScaleMode}
	ifelse
	} bind def

/V { % FILL
	PFill gsave eofill grestore
	} bind def

/Vclip {
	clip
	} bind def

/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/N { % PEN
	PStroke
	} bind def

/Nclip {
	strokepath clip newpath
	} bind def

/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def

/L { % POLYLINE
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def

/Y { % POLYGON !!!
	L % POLYLINE
	closepath
	} bind def

/R { % RECT x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y % POLYGON
	} bind def

/rarc % Leaves all sorts of junk on the operand stack for caller to clear off
	{rad % arcto might fail if we're scaled way down
	 arcto
	} bind def

/RR { % ROUNDRECT x1 y1 x2 y2 r
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if % in case rarc failed for degenerate arcs
	cleartomark
	} bind def

/RRR { % ROUNDRECT ROTATED xs ys x1 y1 x2 y2 x3 y3 x4 y4 r
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto % eats xs ys
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def

/C { % CLIP
	grestore
	gsave
	R % RECT
	clip
	setCurrentScreen
} bind def

/CP { % CLIPPOLY p1x p1y p2x p2y ... n 
	grestore
	gsave
	Y % POLYGON
	clip
	setCurrentScreen
} bind def

/F { % FONT
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def

/Q { % POINTSIZE (& font)
	/FMpointsize exch def
	F % could be slightly optimized here
	} bind def

/T { % TEXT <string> <x> <y>
	moveto show
	} bind def

% Callers of RF (rotate/flip) must gsave (or save) first; (g)restore when done
/RF { % <flip> <theta>
	rotate
	0 ne {-1 1 scale} if
	} bind def

/TF { % TEXTFLIPROTATE <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	show
	grestore
	} bind def

/P { % PADTEXT <pad> <string> <x> <y>
	moveto
	0 32 3 2 roll widthshow
	} bind def

/PF { % PADTEXTFLIPROTATE <pad> <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def

/S { % SPREADTEXT <spread> <string> <x> <y>
	moveto
	0 exch ashow
	} bind def

/SF { % SPREADTEXTFLIPROTATE <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def

/B { % PADSPREADTEXT <pad> <spread> <string> <x> <y>
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def

/BF { % PADSPREADTEXTFLIPROTATE <pad> <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def

/G { % ARCFILL theta1 theta2 width height x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	PFill fill
	grestore
	} bind def

/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
    normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
    translate
    scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def

/Gclip { % ARCFILL theta1 theta2 width height x y swid
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	clip newpath
	restorematrix
	} bind def

/GG { % ARCFILL ROTATED theta1 theta2 width height angle x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	rotate % eats angle
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath
	PFill
	fill
	grestore
	} bind def

/GGclip { % ARCFILL ROTATED theta1 theta2 width height angle x y
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	clip newpath
	restorematrix
	} bind def

/GGstrk { % ARCFILL ROTATED swid theta1 theta2 width height angle x y
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/A { % ARCPEN theta1 theta2 width height x y
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
	normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
	translate 
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	strokepath clip newpath
	restorematrix
} bind def

/Astrk {
	Gstrk
} bind def

/AA { % ARCPEN ROTATED theta1 theta2 width height angle x y
	gsave
	savematrix
	newpath
	% theta1 theta2 width height angle x y
	3 index 2 div add exch 4 index 2 div sub exch 
	% theta1 theta2 width height angle x y
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate % eats x y
	rotate % eats angle
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	strokepath clip newpath
	restorematrix
} bind def

/AAstrk {
	GGstrk
} bind def

/BEGINPRINTCODE { % -x -y width height
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count 7 sub def % tricky! 7 params on stack, plus "/FMoptop"
	/FMsaveobject save def
	userdict begin % insulate user from FrameDict; not in /FMdicttop count
	/showpage {} def % this def is in userdict
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	3 index neg 3 index neg translate
	} bind def

/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for % clear user junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMsaveobject restore % this is now safe, unless user very malicious
	} bind def

/gn { % get a number in a funny encoding scheme
	0 % result on stack
	{	46 mul % shift old digits
		cf read pop % get next character
		32 sub % zero is the space character
		dup 46 lt {exit} if % quit if we're the last digit
		46 sub add % add in this digit and loop around for next
		} loop
	add % result on stack
	} bind def

/cfs { % create a string of length "sl" filled with "val"s
	/str sl string def % create string as "str"
	0 1 sl 1 sub {str exch val put} for % fill array
	str def % define real array name, too; name is on stack from caller
	} bind def

/ic [ % "case" stmt list of procedures that the image commands should call
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def

/ms { % make all the strings
	/sl exch def % remember length of currently existing strings
	/val 255 def % that's white
	/ws cfs % make "ws" a string filled with white
	/im cfs % and "im" is a complete image scanline
	/val 0 def % that's black
	/bs cfs % make "bs" a string filled with black
	/cs cfs % here's where we'll put complete command lines
	} bind def

400 ms % make strings that will be plenty long for most applications

/ip { % image procedure; reads and executes commands to make scanlines
	is % leave image string and...
	0 % ...image position on stack all through this procedure
	cf cs readline pop % get a string of commands
	{	ic exch get exec % execute next command
		add % all commands leave a length on the stack; update pos
		} forall % step through all commands
	pop % get rid of image position pointer
	% image string left on stack, so it's returned to image primitive
	} bind def
/rip { % this is similar to ip above, except for 24 bit images
	   % this takes an extra argument, the width of the image
	  % do red
	  bis ris copy pop % copy blue to red
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  ris gis copy pop % copy red to green
	  dup is exch % position of green is width bytes into is
	  % do green
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop % copy green to blue
	  dup add is exch % position of blue is 2*width bytes into is
	  % do blue
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def

/rip4 { % this is similar to ip above, except for 32 bit images
	   % this takes an extra argument, the width of the image
	  % do cyan
	  kis cis copy pop % copy black to cyan
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  cis mis copy pop % copy cyan to magenta
	  dup is exch % position of magenta is width bytes into is
	  % do magenta
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop % copy magenta to yellow
	  dup dup add is exch % position of yellow is 2*width bytes into is
	  % do yellow
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop % copy yellow to black
	  3 mul is exch % position of black is 3*width bytes into is
	  % do black
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def


/wh { % fill a number of bytes with "white"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	ws 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/bl { % fill a number of bytes with "black"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	bs 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/s1 1 string def

/fl { % fill a number of bytes with a specific hex value
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len % remember where we got to
	} bind def

/hx { % read hex bytes directly; on entry, stack has <str> <pos> <len>
	3 copy getinterval % stack has <str> <pos> <len> <substr>
	cf exch readhexstring pop pop % stack back to <str> <pos> <len>
	} bind def

/wbytes { % width depth -> wb      find width in bytes  given 1, 2, 8 or 24 or 32
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAPc
	} bind def
%
% Common routine for imaging compressed images
%
/COMMONBITMAPc { % iw, ih, width, height, theta, x y depth proc
		 % (x,y) is the lower left corner of the image
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc                % run the desired proc after save has occurred
	/is im 0 lb getinterval def % image substring
	ws 0 lb getinterval is copy pop % whiten it
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{ip} image % zap!
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def
/BEGINBITMAPBW { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAP
	} bind def
%
% Common routine for uncompressed images
%
/COMMONBITMAP { % iw, ih, width, height, theta, x y depth proc
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc              % run the desired proc after save has occurred
	/is width depth wbytes string def
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{cf is readhexstring pop} image
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def

%
% All this hairy color setup stuff gus wrote on the mac, I just copied and
% changed the variable names to be humanly readable.

/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def

fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
% The HP PaintJet XL300 ignores the gray transfer curve but still sets its
% default black generation and undercolor removal functions as if it is
% used. This causes black colors not to work. Bug#56844 <Gus 2/22/93>
% - We go back to the old (correct?) way of doing this since this code
% is now bypassed for PS Level 2 printers in favor of colorSetup2 which
% uses PS Level 2 indexed color, which is much cleaner. <Gus 3/3/93>
		/u kk currentundercolorremoval exec def
%-		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
% Here, we set up indexed color for imaging on PS Level 2 without mucking around
% with the transfer functions.

/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse

%
% Setup a transfer function to convert psuedo color values into grayscale
% values based on the color lookup tables.
%
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
%
% image a color image
%
/BITMAPCOLOR { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
%
% Compressed color image rendering
%
/BITMAPCOLORc { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
%
% image a color image to a b&width device
%
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { % c m y k width
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { % r g b width
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end % of FrameDict definitions

% OPI stuff
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def

% Dashed lines stuff
/I { setdash } bind def
/J { [] 0 setdash } bind def

%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 19 FMDOCUMENT
0 0 /Palatino-Roman FMFONTDEFINE
1 0 /Palatino-Bold FMFONTDEFINE
2 0 /Palatino-Italic FMFONTDEFINE
3 0 /Helvetica-Narrow-Bold FMFONTDEFINE
4 0 /Courier-Bold FMFONTDEFINE
5 0 /Palatino-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "i" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
108 117 486 612 R
7 X
0 0 0 1 0 0 0 K
V
108 570.45 486 612 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 570.45 486 612 R
7 X
0 0 0 1 0 0 0 K
V
108 605.14 270 605.14 2 L
V
3 H
2 Z
0 X
N
108 596.14 270 596.14 2 L
7 X
V
1 H
0 X
N
36 72 576 720 C
0 0 0 0 1 1 1 K
0 2 Q
7 X
(0) 108 546.45 T
0 0 0 1 0 0 0 K
0 36 Q
0 X
0 0 0 1 0 0 0 K
(Harlequin Dylan) 109 546.45 T
0 24 Q
(Network Library Documentation) 108 503.45 T
0 14 Q
(V) 108 471.12 T
(ersion 1.1) 116.55 471.12 T
108 117 486 612 C
248.06 117 345.94 225 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
%%BeginBinary:  22571    
329 413 78.96 99.12 0 257.52 121.44
/red <
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000055595C5C60606364676A6B6B6E7272757679
797D808081848787888A8B8F8F9596969D9DA0A4A4AAABABB2B2B4B9BABFC0C1
C7C8CACBCECFD2D2D4D5D6D9DCDDDFE0E3E3E4E7EAEAEAEAEEF1F1F4F5F8F8FF
> store
/green <
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000008F939496969A999EA19D9DA5A8A2ACA4B0A7
B3B7ABACBBBEB0BAC2B2C5B5C9B9BACCBFD0C0C3D3C7C8D7CDDACEDDD2D5E1D6
E4DBDCDDE7E0E2E2E3EBE4E6EEE9EAEBF1F2EDEFF1F2F5F5F4F6F8F8F8FBFCFF
> store
/blue <
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000AFB1B3B3B4B6B6B8BAB9BABCBEBDC1BEC3C1
C5C7C3C4C9CBC8CBCEC8D0CBD2CDCFD5D2D8D2D6DAD7D9DDDDE0DCE3E0E1E6E4
E9E7E6E9EBEAEBECEBEEEDEFF1F0F0F2F4F4F3F5F5F6F6F7F8F9F9FAFBFCFCFF
> store
 BEGINBITMAPCOLORc









@z&J.J(J2J)u
BCCCFD7E0E9F7O%FEF1E0D9D4CCCCD1D7DEE4F1FEO/F1ECE0CFD4ECF1O#F7F1E9E0DBD7D1CCCCCCCCCCCCD1D9E4F7O(FAF1ECE0E0D7D7CFCCJ,J+8-J1JS*JT)
LCCCCCCCCCCCCD7DBE4F1FEHF7ECE0D7CFCCCCCCCCCCCCCCCCCCCCCCCFD7DEE0F1FAO'F7E4DBD4CCCCCCCCCCCCCFD7DBE0ECF7JECD7CCCFDEF1F7FFFFO(FAF1ECE0E0D7D7CFJ+J+Cr&J*<r'J%s(JT
O$CCCCCCCCCCD1D7E0ECF7>F1E4DED7CCCCCCCCCCCCCCD7DBE0ECF7JFAE9DED7CCCCCCCCCCCCD1D7DEE0F1FAGF1E0D7CFCCCFD7D9E0E4F1F7O+J+I+J,J*Hr'J)>s(
O)CCCCCCCCCCCCD7DEE4F1FEF1E0DBD4CCCCCCCCCC:CCCCCCCCCCCCD4D9E0ECF1?FEECE0D7CFCCCCCCCCCCD4D7E0E4F1FE<F1E0D7CCCCCCCCCCCCCFD7D9E0E4F1F7J+>+J,J+Jr'F)Js(
O/CCCCCCCCCCD1D9E0ECFAFAECE0D7D1CCCCCCCCCCECCCCCCCCCCCCD1D7E0E9F14FEF1E0D9D1CCCCCCCCCC=CCD7D9E0E9F1FEFEECDED4CCCCCCCC5CCCFD7D9E0E4F1F7J)8)J-?*J-<)Js(J$
O4CCCCCCCCCCCCDBF1F7E0CCCCCCCCCCCCO"CCCCCCCCCCCCCFD7DEE4F1FEF1E4DBD4CCCCCCCCCCICCCCCCCCCCCCCFD7DBE0ECF1FAECDED4CCCCCCCCACCCFD7D9E0E4F1F7GFEECDEJ(8*J):(J)9&Js(J(
O5D7DEE4F1FFFFFFFFFFFFFAF1E4DED7CFO'CCCCCCCCCFD7E0FEF1DECCCCCCCCCCO&CCCCCCCCCCD1D9E9FAE9E0D9D7MCCCFD7D9E0E4F1F7;FAE9DBD4CCCCCCJ&P>R&J*:*J)9Q(Js(E)
O/D1D7E0ECF7F1E9E0D7D4O CFD7E0ECFAFFFFFFFFFFFFFFFAF1E0DED7CFO$CFD7E0ECFEFFFFFFFEF1E9E0DBD7CFMCCCFD7D9E0E4F1F7FAE9DBD1CCCCCCCCJ&PJQ&J%PAR&J&PBS'Js(9)
O*D7DBE4F1FE4F7ECE0D9D7DD7DEE9FAF1ECE0D9D7GCFD7E0ECFAF1ECE0DED7D1O CCCFD7D9E0E4F1F7F7E4DBD1CCCCCCCC@%J&QJQ'J%PJQ'J%PJR'J)8(
F1E0D9D4DD1D7E0ECF7?FAF1E0DED7CF8D7DEE9F77FAF1E4E0D7D1<D7DEECFA9F7F1E0DED7D4O!CCCCCCCCD4DBE4F7FEF1ECE0DBD7CF@P&J&PJQ'C%PJR'F%PJR'J*8S'
F7ECE0D7D19D4DBE0F1FEKFEF1E9E0D7D1D4DBE9F7BF7ECE0DBD7CFD7DEE9F7EFAF1E4E0D7D7GD1D9E0F1FEFFFFFFFFF1ECE0DED7D1EQ&C&QJR&8%PJQ';%PJR'J&PDR
F1E9DED7CFCFD7E0E9F7O(F7ECE0D9D7D4DBE4F1O FEF1E9E0D7D4D4DEE9F7O#FEF1E9E0D9D7;CFD7E0ECFAJP&9&PJ,JR)JS'E%P
5FEF1E4DBD7D4DBE0F1FEO5FFFFFEF1E0D7D1DEE4F1FFO+F7E0CCD1DEE4F1FEO/F1ECE0DBD7CFD7DEE9F7J.J&t&J%t&JR'9%P
:FFFFFFF7E9DECCD7E0F1FAFFFFO7FEF1E0D9D1CCD1D7E0ECF7O)F1E4DBD1CCD7DBE0ECF7O1F7F1E0DED7D1D4DBE4F1J%u&J+?,J*?-J.
8F1E4DBD4CCD7DEE4F1FEO.FEF1E0D9D1CCCCCCCCCCCCCCCCCCCCCCD4DBE0F1FALFAECDED7CCCCCCCCCCCCCCCCCCCCCCD4D7E0E9F1FEO1FFFFFFFFFEF1E0CFD9E0E9F1F7H+@+J+J,J*J-J%u(
FEF1E0D9D4CCCCCCCCCCCCCCCCCCCCD1D7E0E9F7O$FEF1E0D9D1CCCCCCCCCC4CCCCCCCCCCCCD7DEE4F1FEAFEF1E0D9CFCCCCCCCC4CCCCCCCCCCCCCFD7DEE0F1FAO+F7E9DBD4CCCFD7D9E0E4F1F1C+J,J+J+J*Jr&J*@t(
FAF1E0D9D1CCCCCCCCCC4CCCCCCCCCCCCD4D9E0F1FAGFEF1E0D9D1CCCCCCCCCC?CCCCCCCCCCD1D7E0E9F18F7E4DBD4CCCCCCCCCC>CCD4D9E0ECF1O FEECE0D7CFCCCCCCCCCCD7D7E0E0F1F1FE@)J,J+J,C*J-J*Js(
E0D7CFCCCCCCCCCC?CCCCCCCCCCCCD7DEE4F1FE<FAECE0D7CFCCCCCCCCCCICCCCCCCCCCCCD4D9E0ECFAFAECE0D7CCCCCCCCCCJCCCCCCCCCCCCD1D7DEE4F1FECF7E4DBD1CCCCCCCCCC7CCD4D7DEE0ECF1FA@$J+H+J,9)Jr&J*Js(
CCCCCCJCCCCCCCCCCD1D7E0E9F7FAECE0D7CFCCCCCCCCCCO&CCCCCCCCCCCCD7DBE4F1FEF1E0D9D1CCCCCCCCO'CCD7DBE0ECF78FEECE0D7CCCCCCCCCCDCCD1D7DBE0E9F1F7J,=+J*8"J-C)Js#
O.CCCCCCCCCCCCD4D9E0F1FAFAECE0D7CFCCCCCCCCCCO1CCCFD7E0ECFEFFFAECD4O2CCCCCCCCCCCCD1D7E0E9F1FEF7E4DBD1CCCCCCCCO#CCCFD7J)8(J%W&J-8*J#
O4CCCCCCCCCCCFE0FEECD9CCCCCCCCCCO3D7DEE9FAF1E9E0D7CFO2CCCCCCCCCCCCCFD7DBE0F1FEFEECE0D7CCCCCCCCCCO/CCCCJ)8)J%PBP&J,
O4D1D9E0F1FAFFFFFFFFFFFFFAF1E0DBD7O-D4DBE4F7FEF1E4DBD7O4D9E0F1FFFFF7DBD4CCCCCC@$J%Q>Q&J%PJQ&J)8+J$
E0D7CFO"D4DBE4F1FAF1E0DBD7O"D1D9E0F16FAECE0D9D4O)D4DEE9FAFFFFFFFFFFFFFFFFFAF1E9E0D9D7O/D7E0F1@)J&PJQ&J*JQ&J%P@R(J(
FFFFFFFAECE0D7CFECFD7DEE9F74FAF1E0DBD7ECFD7E0ECFEFFFFFFFFAF1E9E0D7CFLCFD9E0F1FEF1ECE0DBD7CFO#D4DEECFEFFFFFFCP%J&PJQ&J%PJP&J)JS'J)
F7E9DED7<D1D7E0ECFA?FAF1E0D9D4;D7DEE9FAKFEF1E4DBD7CD4DEE9FAFFFFFFFF6F1F1E0DED7D1FD1DBE9FAFFFFFFFFHP%H&PJQ&F%PJQ&J%PJR'J)
F7E4DBD4D4DBE0F1FEJF7ECE0D9D4D4DBE4F7O'FAECE0D9D48CFD7E0F1BF7F1E4E0D7D4;CFD9E4F7FFFFFFFFJP%>%QJQ&;%PJQ&D)JR'G(
7F1E4DBD1D7DEE4F1O'F7ECE0D9D4D1D9E0F1O2F1E9E0D7CFD4DBE9F7FFFFFFFFO FAF1E9E0D9D7D7E0F1FFFFFFFFJ,PJP*JP&:*JR(;(
<FFFFFFFFFEF1E0D1E0ECF7O3FAE0CCD1E9F7FFFFFFO=FEF1E4DBD7CFD7E0F1FEFFFFFFFFO+FEF1ECE0DBD7CFD4DEECFEFFFFFFJ,J&r&JQ)JS)
>F7E9DED7CCCCCCD4DBE4F1O6FEF1E0D7CFCCD4D9E0ECF7O?E9D4CCD4DEE9F1FFO6E9D4CFE9F7FFFFFFJ*9*J*=,J%t&J1
9F1E9DED7CCCCCCCCCCCCCCCCCCCCD4DBE4F1O-F1E4D9D1CCCCCCCCCCCCCCCCCCCCCCD7DBE0F1FAO:F7E9DED4CCD4DBE0F1FEO5FEECDED1CCCCCCCCCCCCD4D7E0E9F1FEJ*C*J*H,J*?+J(<-
4F1E4DBD4CCCCCCCCCCCCCCCCCCCCD4DBE4F1O#F7E9DBD4CCCCCCCCCCCCCCCCCCCCCCD7DBE0F1FAO/FAECDED7CCCCCCCCCCCCCCCCCCCCCFD7E0E9F7O-F7E4D7CCCCCCCCCCCCCCCCCCCCCFD7DBE0ECF7E*J*J*F$@,J*I,J(Fr'
F1E4DBD4CCCCCCCCCC7CCCCCCCCCCD4DBE4F1GFAECDED7CCCCCCCCCCDBF1D1CCCCCCCCCCCCD7DBE0F1FAO$FEECE0D7CFCCCCCCCCCCCCCCCCCCCCD7DBE4F1FEO#FAE9DBCFCCCCCCCCD1D7E0E4F1FE@*J*J*J&D,J+J+J(Jr
F1E4DBD4CCCCCCCCCCACCCCCCCCCCD4DBE4F1=FEF1E0D9CFCCCCCCCC5D1FFFFE9D1CCCCCCCCCCCCD7DBE0F1FAGFEF1E0D9D1CCCCCCCCCC=CCCCCCCCCCD1D7E0ECFAIF1DED4CCCCCCCC:CC@%J*J*J(H,J*J+J(
CCCCCCCCKCCCCCCCCCCD4DBE4F14F1E4DBD1CCCCCCCCCC9CCFAFFFFFFE9D1CCCCCCCCCCCCD7DBE0F1FA=F1E4DBD4CCCCCCCCCCGCCCCCCCCCCCCD7DEE4F1@FAE4D9CCCCCCCCJ*@*J"9%J,H*J+J(
O0CCCCCCCCCCD4DBE4F1F7E9DED4CCCCCCCCCC?E9FFFFE9D16CCCCCCCCCCCCD7DBE0F1FAF7E9DED4CCCCCCCCCCO$CCCCCCCCCCD1D9E0F1FA6FEECDBD1CCCCCCJ)8)J";%J,=*J+D(
O5CCCCCCCCCCD4DBE9FEECD7CCCCCCCCCCDDEFFFEE0CF:CCCCCCCCCCCCD7DBE0F1FAFAECE0D7CCCCCCCCCCO.CCCCCCCCCCCFD7DEE9F1F7E0D7CCCCCCCCJ&8(J"<&J)8'J,:(
O8D7DEECFAFFFFFFFFF1E4D9D1ED4FFFFFEE0CF>CCCCCCCCCCCFE0FAE9D9CCCCCCCCO8CCCCCCCCCCCCD4DBE0F1FEFAE9DBCFCCCCCCJ%P<*J#=&J(8)J'9&
O3D4DBE9F7FFFFFFFFFEF1E0D9D1@CCFEFFFFFEE0CF=D4DBE9F7FFFFFFFFFFFFFAF1E0DBD7O<CCCCCCD9E4F7F1E9DED7CFJ%PEP&J"?%J*>Q&J(9P&
O.D1D9E0F1FEF1E0D9D1<ECFFFFFEDB7CFD7E0F1FEFFFFFFFFFAECE0D9D4O5D7E0F1FFFFFFFFFEF1E0DBD4J*JP&J"A%G%PHQ&J(BQ&
O)CFD7E0ECFEFFFFFFFF9FEF1E0D9D17E0FFFFFADBD4DBE9F7F7ECE0D9D4O+D4DEECFFFFFFFFF7E9E0D7D1@$J%PJP&H"C%@*JQ&J(JP&
E0D9D1FD4DEE9F7BFEF1E0D9D1D7FFFFFADBCFD7E0F1FEFFFFFFFF=F7ECE0D9D4O!D1DEECFEFFFFFF6FEF1E4DBD7@)J%PJP&C"E%:%PJQ&J)JQ&
FFFFFFFEECE0D7CF<D1DBE4F1LFEF1E0D9D1CCFFFFFAD9D4DBE9F7GF7ECE0D9D4ED1DBE9FAFFFFFFFF>FAECE0D9D1CP%I*JP&?"F+JQ&J)JQ&
FAECDED7CFD7E0F1FEFFFFFFFFO(FEF1E0D9D1F1FFFFF1E0F1FEFFFFFFFFO$F7ECE0D9D1;CFD9E9FAFFFFFFFFHF1E9DED7CFHP%@%PJP&:"H%JQ&G)JP&
F7E9DED4D7DEECFAO1FEECE0D7CFE0FFFFFFFFO.F1E9E0D7D1CFD9E4F7FFFFFFFFO$FAF1E0DBD4JP)PJP&JQ&>(JQ&
7F1E4DBD4D4DBE4F7O;FAECE0D7DBOJF1E9E0D7D1D7E0F1FFFFFFFFO-F7E9E0D7CFJ)JPJQ+JP&
<FFF1E4DBDBE9FAFFOEP"F1E9E0CFDEF1FFFFFFFFO7FEF1E4DBD7J%r%J$J,JQ&
8FAE9DED7CCCFD9E4F7OEFEECFAP&FAE9DBD1CCCCD4D9E0F1FAO<F7ECE0D9D1I*=)J(J)8,J&
FEF1E0D7CFCCCCCCCCCCCCCCCCCFD7E0F1O=F1E0D9D1CCCCE4P"FEECDED1CCCCCCCCCCCCCCCCCCCCD7DEE4F1FEO<FFFFFFFEE9E*E*J*8"J(B+J&
F1E4DBD1CCCCCCCCCCCCCCCCCCCCD7E0ECFEO3F7E9DBD4CCCCCCCCCCDBOMF1DED4CCCCCCCCCCCCCCCCCCCFD7E0E9F1O7FAE4D7CCCC@*J)J*="J(J,J'
FAE9DED7CCCCCCCCCC9CCCCCCCCD4DEECFEO*FAECDED7CCCCCCCCCCD1OIF7E0D7CCCCCCCC5CCCCCCCCCCCCD4D9E0ECF7O.F7E0D4CCCCCC@%J)J*B#J(J,J'
CCCCCCCCBCCCCCCCCD1DBE9FAO!FEF1E0D7CFCCCCCCCCCCFAODFAE4D9CFCCCCCC?CCCCCCCCCCCCD7DBE0F1FEO%F7DED1CCCCCCJ)J*G"J)J+J'
O&CCCCCCCCD1D9E4F7GF1E4D9D1CCCCCCCCCCECO@FAE9DBD1CCCCCCCCHCCCCCCCCCCCFD7DEE9F1KECDBCFCCCCCCJ)J*J"J)J,J(
O*CCCCCCCCCFD9E0F1>F7E9DED4CCCCCCCCCC6DEO<FEECDED4CCCCCCCCO#CCCCCCCCCCCCD1D7E0ECF7AFEE9D9CFCCCCCCJ*J*J"J"J(J,J(
O.CCCCCCCCCCD7E0F1FE4FAECE0D7CCCCCCCCCC;D4GFE?F1E0D4CCCCCCCCO-CCCCCCCCCCCCD4DBE0F1FA8FAE4D9CCCCCCCCJ)A*J#J'J(J,E'
O3CCCCCCCCD4DEECFEFEF1E0D9CFCCCCCCCC@CCFEFFADED7E0ECFA6F7E4D7CCCCCCCCO7CCCCCCCCCCCCD7DEE4F1FEFAE4D4CCCCCCJ):)J"J,C(J+='
O7CCCCCCCCD4DBE9FAE4DBD1CCCCCCCCCCEF1FFFFFF1D7CCCCCCD7DEE9F7FAE4D9CFCCCCCCOACCCCCCCCCCD1D7E0E9F1F7DED1CCCCCCJ&9%J"J/:)J0
O;CCD1D9E0FAFFF1E0D7IE0HFFFFF1D7CCCCCCCCCCCCD7DBE4F1FEE9DBD1CCCCCCCCOICCCCCCCCCCCCD4D9F7FFFADBD1CCCCJ*:)J"J%:-J%Q&
O7CFD7E0ECFEFFFFFFFFFFFFFFFFF7E4D9CFDD7JFFFFF1D7CCCCCCCFDBF7FFFEE4DBD4CCP#CFDBECFEF1E9E0D7D1J%PB)J"J%8$T%J(<Q&
O3D7DEECFAFFFFFFFFF7E9DBD1@CCLFFFFF1D1D7E4F7F1E4DBD4OJD1DBECFFFFFFFFF1E9E0D7D1J%PJ)J"J(?P%J'FQ&
O.D4DBE9F75FFFFFFFFFAECDED4=F1MFFFFF1FFFFFFFFF1E4DBD4OBD1DEF7FFFFFFF7ECE0D9D4J%PJ)J"J"HP%J'JQ&
O)D1DBE4F1>FFFFFFFFFEECE0D79E4O!FFF1E4DBD4O:D4E4FAFFFFFF9F7ECE0D9D4J*JP%J"JP%J'JQ"
O$CFD9E0F1FEFFFFFFFFGF1E0D9CF4D9O9F1E4DBD4O2D9E9FAFFFFFFBF7J&PJ)F"JP%J(J"
MCFD7E0ECFAO"FFFFFFFFF7E4D9D1CFO>F1E4DBD4O)CFD9E9FEFFFFFFKFFJ%PJ)B#JP%J(
ID7DEE9F7O+FFFFFFFFFAE9DBD1CCF7OBF1E4DBD4O!CFDBECFFFFFFFFJ%PJ)?"JP%J'
DD4DBE4F1O4FFFFFFFFFEECDED4E9OGF1E4DBD7GD1DEF7FFFFFF@"J*JP$;"JP%J'
D44D1D9E0F1FEFFFFFFFFO=F1E0D7DBOLF7E9DED7?D4E4F7FFFFFF@&A&PJ*JP%J'
FFFEECDED1CFD7E0ECFEOFFFFFFFFFF1E4D9CFD1P#F7E9DED77D7E4FAFFFFFFA)9%PJ&JP%E'
FFFFFFFFFAE9DBCFD7DEE9FAP!FFFFFFFFF7P(F7E9DED7D9E9FEFFFFFFE,J"JP%<(
FFFFFEECD4D4F1FFFFFFFFP*FFP-F7E9DED7CFDBECFFFFFFFFC.JP)
F7E9DBD4CCCCCCCCCCCCD9E4F7R=F7E9D9D7F1FFFFFF@(<(J+
E0D7CFCCCCCCCCCCCCCCCFDBE9FAR=FAE4D4CCCCCFD7E0ECFA@$C)J$J'8+
CCCCCCCCCCCCCCD1DEECFEP"FAE9FEP1FAE4D4CCCCCCCCCCCCCCCCD1D9E0F1FEJ(J(J'@*
>CCCCCCCCD7E0F1OIFEECDBD1CCCCF1P.FAE4D4CCCCCCCCCCCCCCCCD1D9E4F1J(J(8"J'H*
BCCCCCCCFD9E4F7OBF1E0D4CCCCCCCCE0P+F7DED1CCCCCCCCCCCCCCCCD4DBE4F1J)J(<"J'J*
ECCCCCCCCD1DBE9FAO:F7E4D9CCCCCCCCD7P(F7DED1CCCCCC:CCCCCCCCCCD7DEE9F7J)J(@"J'J*
ICCCCCCCCD4DEECFEO2FAE9DBD1CCCCCCCCP%F7DED1CCCCCCBCCCCCCCCCCD7DEECFAJ(J(D"J'J*
MCCCCCCCCD7E0F1O,ECDED4CCCCCCCCF1P!F7DED1CCCCCCJCCCCCCCCCFD7E0ECFAJ(J(H"J'J+
O#CCCCCCCFD9E4F7O$F7E4D7CCCCCCCCE4OLF7DED1CCCCCCO#CCCCCCCCCCD1D9E0F1FEJ)J(J"J'J*
O&CCCCCCCCD1DBE9FAJFAE9D9CFCCCCCC6D9OIECDBCFCCCCCCO+CCCCCCCCCCD1D9E4F1J(J)J"J'J*
O*CCCCCCCCD4DEECCFEECDED1CCCCCCCC9CFOFECDBCFCCCCCCO3CCCCCCCCCCD4DBE4F1J(J(J#J'J*
O.CCCCCCCCD7E0F7<F1E0D4CCCCCCCC=CCFAOBECDBCFCCCCCCO;CCCCCCCCCCD7DEE9F7J(J(J"J'J*
O2CCCCCCCFD9E4FA4F7E4D9CFCCCCCCBE9O?ECDBCFCCCCCCOCCCCCCCCCCCD7DEECFAJ)B)J"J&J*
O5CCCCCCCCD1DBE9FEFEE9DBD1CCCCCCCCEDBO=DBCFCCCCCCOKCCCCCCCCCFD7E0ECFAJ(<(J"J#J+
O9CCCCCCCCD4DEECECDED4CCCCCCCCID1O=D9CCP$CCCCCCCCCCD1D9E0F1FEJ&8&J#J"J&
O=CCCCD1DEFEF7D9CFCCCCMCCFEO<E9P*CCCCCFE0FAJ(8'J"J&J&
O;D1DBE9FAFFFFFFFFFFFFF1E0D7MECO<FFF1E4D9D1P&D4E9FFFFFFJ)>(J"J)J%
O7CFD9E4FAFFFFFFFFFFFFFFFFECDED4IDEO=FFFFFFFFFAECDED7P DBF1FFFFJ(F(J"JP%J&
O4D9E4F7FFFFFFFFFFFFFFFEECDED1ED4OAF1E0D9CFOFCFE0FAFFFFJ(J)J"J)J&
O0D7E0F1FFFFFFFF7FFFFFFFFFAE9DBD1ACCOFFFFFFFFFFAE9DED4O@D4E9FFFFFFJ(J)J"JP%J%
O,D4DEECFEFFFFFF?FFFFFFFFF7E4D9CF>F1OIF1E0D9CFO9DBF1FFFFJ)J(J"J)J&
O(D1DBECFEFFFFFFFFFFFFFFFFFF7E4D7;E0P FFFFFFFFFAE9DBD4O2CFE0FAFFFFJ)J(J"J*J&
O$D1DBE9FAFFFFFFFFO FFFFFFFFF1E0D47D7P$FFFFFFFFFEF1E0D7CFO+D4E9FFFFFFJ)J(I"JP%J%
O CFD9E4F7FFFFFFFFO(FFFFFFFEECDED4CCP(F7E9DBD4O%DBF1FFFFJ(J)F"J)J&
KD7E0F7FFFFFFFFO/FFFFFFFFFEE9DBD1F7P,FFFFFFFFFEF1E0D7LCFE0FAFFFFJ(J)B"JP%J&
GD4E0F1FFFFFFFFO7FFFFFFFFFAE9D9CFE4P0F7E4DBD1ED4E9FFFFFFJ(J)>"J)J%
CD4DEECFEFFFFFFO?FFFFFFFFF7E4D9CFD9P5FFFFFFFFFEECE0D7?DBF1FFFF@#I)J(;"JP%J&
E9D9D1DBE9FEFFFFFFFFOFFFFFFFFFF1E0D7CFP9F7E4DBD17CFE0FAFFFF@&B)J+J)G&
FFFFFEE9D9CFDBE9FAFFFFFFFFP FFFFFFFFECDED4CCCCFAP=FFFFFFFFFAECDED7D4E9FFFFFFB';)J&JP%@%
FFFFFFFEE9D9CFD9E4F7FFFFFFFFP(FFFFFFFEECPBF1E4D9D1DBF1FFFFE-J$J)9&
FFFFFFFEE9D9E0F1FFFFFFFFP/FFFFFFPFFFFFFFFFFAECDED7CFE0FAFFFFH&JP&
ECDBD1DBECS2F1DEFFFFFFD-J*
FEE9D9CCCCCCCCCCCCCFDBECS2FEE9D1CCCCD7DEECFAA'<'J&8)
FAE4D4CCCCCCCCCCCCCFDBECS-FADBCFCCCCCCCCCCCCD1DBE4F7@%B'J&>*
D1CCCCCCCCCCCCCFDBECS(ECD7CCCCCCCCCCCCCCCCD7E0ECFE@"H'J$J&F)
CCCCCCCCCFDBECP(FAE4DBPEFEE4D1CCCCCCCCCCCCD4DBE9F7J'J'J&J)
@CCCCCCCFDBECP"F7E4D4CCCCCCPCFADBCFCCCC6CCCCCCCCCFD7E0F1J'J'9"J&J*
CCCCCCCCFDBECOJF7DED1CCCCCCF1P@ECD7CCCCCC<CCCCCCCCCCD4DEE9FAJ'J'<"J&J)
FCCCCCCCFDBECODF1DED1CCCCCCE0P=FEE0D1CCCCDCCCCCCCCD1D9E4F1J(J'?"J&J*
ICCCCCCCFDBECFEO=ECDBCFCCCCCCD7P;F7DBCCCCCCJCCCCCCCCCCD7DEECFEJ(J(B"J%J)
LCCCCCCCCD9E9FEO6FEECDBCFCCCCCCCFP9E9D7CCCCO$CCCCCCCCD1DBE4F7J'J(E#J&J&
O"CCCCCCD9E9FEO0FEE9D9CCCCCCCCCCF7P5FEE0D1CCCCO*CCCCCCCCCCJ'J'J"J&
O%CCCCCCD9E9FEO*FAE9D9CCCCCC4E4P3F7DBCCCCCCJ'J'J"J%
O(CCCCCCD9E9FEO$FAE4D4CCCCCC7D9P1E9D4CCCCJ'J'J"J&
O+CCCCCCD9E9FELF7E4D4CCCCCC:D1P.FAE0CFCCCCJ'J'J#J&
O.CCCCCCD9E9FEFF7DED1CCCCCC=CCFAP+F1DBCCCCCCJ'J'J"J%
O1CCCCCCD9E9FE@F1DED1CCCCCCAE9P)E9D4CCCCJ'J'J"J&
O4CCCCCCD9E9FE:ECDBCFCCCCCCDDBP&FADECFCCCCJ'I(J"J&
O7CCCCCCD9E9FEFEECDBCFCCCCCCGD4P$F1D9CCCCCCJ'C(J#J&
O:CCCCCCD9E9FEFEE9D9CCCCCCCCJCCFEP FEE9D1CCCCJ'='J"J&
O=CCCCCCD9E9FEFAE9D9CCCCCCO!ECOLFADECFCCCCJ.J"J&
O@CCCCCCD9E9FEFFFAE4D4CCCCCCO$DEOJF1D9CCCCCCJ(J"J$9&
OCD4E4F7FFECDBCFO'D7OAECE4F7FEE4D1CCCCJ$R$J"J*
O@D7E4FAECDBCFO$CCOAFACCCCD4FAFADBCFCCJ'='J"J-
O=D9E9FEFFFFFFFFFFFFECDBCFO"F1O@FFD9E4FEFFFFFFFFF7E4D9CFJ(C'J"J$:(
O9CFDBECFEFFFFFFFFFFFFECDBCFME0OAFFFFFFFFFFFFFFF1E0D7J(I'J"J(
O6D1DBECFFFFFFFFFFFFFFECDBCFJD7OLFFFFFFFFF1DED4J'J'J"J(
O3D1DEF7FFFFFF:FFFFFFECDBCFGCFP"FFFFFFFEECDED4J'J'J#J)
O0D4E4F7FFFFFF@FFFFFFECDBCFDCCF7P$FFFFFFFFFEE9DBD1J'J'J"J)
O-D9E4FAFFFFFFFFFFFFFECDBCFBE4P(FFFFFFFFFAE9DBD1J'J'J"J)
O*D9E9FEFFFFFFLFFFFFFECDBCF?D9P,FFFFFFFFF7E4D9CFJ(J'J"J(
O&CFDBECFFFFFFFFO$FFFFFFECDBCF<D1P0FFFFFFFFF7E4D7J'J'J#J(
O#D1DEECFFFFFFO+FFFFFFECDBCF9CCFAP3FFFFFFFFF1E0D7J'J'J"J(
O D1DEF7FFFFFFO1FFFFFFECDBCF7E9P7FFFFFFFFECDED4J'J'J"J(
KD4E4FAFFFFFFO7FFFFFFECDBCF4DBP;FFFFFFFEECDED1J'J'G"J)
HD9E4FAFFFFFFO=FFFFFFECDBCFD4P>FFFFFFFFFAE9DBD1J'J'D#J)
ED9E9FEFFFFFFOCFFFFFFECDBCFCCFEPAFFFFFFFFFAE9D9CFJ(J'B"J)
ACFDBECFFFFFFFFOIFFFFFFECDBCFECPEFFFFFFFFF7E4D9CFJ'J'?"J(
>D1DEF1FFFFFFP"FFFFFFECDBCFDEPIFFFFFFFFF1E0D7J'J'<"J(
;D4DEF7FFFFFFP(FFFFFFECDBCFD7PMFFFFFFFFF1E0D4J'J'9"J(
8D4E4FAFFFFFFP.FFFFFFECDBCFCCQ#FFFFFFFEECDED4J'J)J)
5D9E9FAFFFFFFP4FFFFFFECDBCFCCF1Q%FFFFFFFFFEECDBD1G(J%J)
CFD9E9FEFFFFFFP:FFFFFFECQ*FFFFFFFFFAE9DBD1D(J#J)
CFDBECFFFFFFFFP@FFFFQ-FFFFFFFFF7E4D9CFA'J(
D1DEF1FFFFFFT)FFFFFFFFF7E4D9@%J(
F7FFFFFFT0FFFFFFFFF1E0D7@"J(
FFT7FFFFFFFFECDED4J&
TFFFFFFFFEEC@"J#
E9T>FFFF@%J"
CCCFE0FAT<E9A&J$
CCCCCCDBF1T8F7D7CCD&J%
CCCCD1E9FET3FEDECCCCF&J$
CCCCCFDEFAT0E9CFCCH&J%
CCCCCCD7ECT,F7D7CCCCJ&J%
5CCCCD1E4FET'FEDBCCCCJ&J$
7CCCCCFDBF7T$E4CFCCJ&J$J%
9CCCCCCD7E9P9FAE0D9Q2F1D4CCCCJ&J&J%
<CCCCD1E0FAP4F1DBCCCCCCQ0FEDBCCCCJ&J%9"J$
>CCCCCCDBF1P0E9D4CCCCF1Q.E4CFCCJ%J&;"J%
ACCCCD4E9P+FAE0CFCCCCE0Q,F1D4CCCCJ&J&="J%
CCCCCCFDEFAP&F1DBCCCCCCD9Q*FEDBCCCCJ&J%@"J$
ECCCCCCD9F1P"E9D4CCCCCFQ)E0CFCCJ&J&B#J%
HCCCCD1E4FEOJFAE0CFCCCCCCF7Q&F1D1CCCCJ&J&E"J%
JCCCCCFDBFAOFF1DBCCCCCCE4Q$FAD9CCCCJ&J%H"J$
LCCCCCCD7ECOBE9D4CCCCDBQ#E0CFCCJ&J&J"J%
O!CCCCD1E0FEO<FAE0CFCCCC4D1Q!F1D1CCCCJ&J&J#J%
O#CCCCCCDBF7O8F1DBCCCCCC6CCFAPLFAD9CCCCJ%J%J"J$
O&CCCCD4E9O4E9D4CCCC:E9PKE0CFCCJ&J&J"J%
O(CCCCCFE0FAO.FAE0CFCCCC<DEPIF1D1CCCCJ&J&J"J%
O*CCCCCCDBF1O*F1DBCCCCCC>D4PGFAD7CCCCJ&J%J#J%
O-CCCCD1E9FEO%E9D4CCCCACCFEPDFEE0CCCCJ&J&J"J$
O/CCCCCFDEFAO FAE0CFCCCCDF1PCECD1CCJ&J&J"J%
O1CCCCCCD7ECJF1DBCCCCCCFE0PAFAD7CCCCJ&J%J"J$J%
O4CCCCD1E4FEEE9D4CCCCID7OGE4E9FECFEE0CCCCJ&J&J"J'J$
O6CCCCCFDBF7@FEE0CFCCCCKCCOGE9CCCCD9E9FE?ECD1CCJ&J&J"J*J%
O8CCCCCCD7E9<F7DBCCCCCCO F1OFFFCFCCCCCCCCD7E4FA:FAD7CCCCJ&J%J#J":'J%
O;CCCCD1E0FE7E9D7CCCCO#D9F1OFDBCCCCCCD4E4FA5FEDECCCCJ&H&J(J"='G$
O=CCCCCCDBF1FEE0D1CCCCO%CCCCCCD7DEECFEOAECCCCCCCD4E4FAE9CFCCJ%D&J)J#?'B%
O@CCCCD4E9F7DBCCCCCCO*CCCCCCCCD4DEE9FAO=FFCFCCCCCCD4DEF7F7D7CCCCJ&?%J)J"B'=%
OBCCCCCFDEFAE9D7CCCCO1CCCCCCCCD1DBE9F7O:DBCCCCCCD1DEF7FEDECCCCJ&:&J)J"E'9$
ODCCCCCCD9F1FEE0D1CCCCO7CCCCCCCCCFD9E4F7O6F1CCCCCCD1DEF7E9CFCCJ*J)J#G)
OGCCCCD1F1FFDBCCCCCCO=CCCCCCCCCCD7E0F1O2FFD1CCCCCCCFDBD7CCCCJ(J)J"J$
OHD7ECFFFFFEE0D1OCCCCCCCCCD7DEECFEO.DE4CCCCCCJ&8&J)J"
OECFDBFAFFFFFFFFFFE9D7OECCCCCCCCD4DEE9FAO*F7J&=&J)J#
OCD1E4FEFFFFFFFFF7DBCFOFCCCCCCCCD1DBE9F7O&FFD1J&A&J)J"
OAD7ECFFFFFFFFFFFEE4D1OHCCCCCCCCCFD9E4F1O#E0J&F&J)J"
O>CFDBFAFFFFFFFFFFECD7OJCCCCCCCCCCD7E0F1MFAJ&J&J)J#
O<D1E4FEFFFF5FFFFFADBCFOLCCCCCCCCD4DEECFEHFFD4J&J&J)J"
O:D7ECFFFFFF9FFFFFEE9D1P CCCCCCCCD4DBE9FAEE4J&J&J)J"
O7CFDBFAFFFF>FFFFFFF1D9P"CCCCCCCCD1DBE4F7AFAJ&J&J)J#
O5D1E4FEFFFFCFFFFFADECFP#CCCCCCCCCFD9E4F1=FFD4J&J&J)J"
O3D7ECFFFFFFGFFFFFEE9D4P%CCCCCCCCCCD7E0F1:E9J&J&J)J"
O0CFDBFAFFFFLFFFFFFF1DBP(CCCCCCCCD4DEECFE5FEJ&J&J)G#
O.D1E4FEFFFFO#FFFFFAE0CFP)CCCCCCCCD4DBE9FAFFD9J&J&J)D"
O,D7E9FFFFFFO'FFFFFFE9D4P+CCCCCCCCD1DBE4F7E9J%J%J)@"
O*DBF7FFFFO-FFFFF7DBP-CCCCCCCCCFD9E4F1FEJ&J&J)<#
O'D1E0FEFFFFO1FFFFFEE0D1P.CCCCCCCCCCD7E0F1FFDBJ&J&J)8"
O%D7E9FFFFFFO5FFFFFFE9D7P1CCCCCCCCD4DEECFEECJ%J&J(
O#DBF7FFFFO;FFFFF7DBCFP2CCCCCCCCD4DBE9J&J&J$
O D1E0FEFFFFO?FFFFFEE4D1P4CCCCCCJ&J&
LD7E9FFFFFFOCFFFFFFECD7J%J&
JDBF7FFFFOIFFFFFADBCFJ&J&
GD1E0FEFFFFOMFFFFFEE9D1J&J&
ED7E9FFFFFFP#FFFFFFF1D9J%J&
CDBF7FFFFP)FFFFFADECFJ&J&
@D1E0FEFFFFP-FFFFFEE9D4J&J&
>D7E9FFFFFFP1FFFFFFF1DBJ%J&
<DBF7FFFFP7FFFFFAE0CFJ&J&
9D1E0FEFFFFP;FFFFFFE9D4J&J%J,
7D4E9FFFFFFP@FFFFF7DBO)C4C4C4C1BCBCBCB9B5B5C1J%J&J.x#
5DBF1FFFFPEFFFFFEE0D1DCAC4C4C4C1BCBCBCB9B5B5B5AFAEAFC5H&J&I-zC$
CFE0FAFFFFPIFFFFFFE9D7CAC4C4C4C0BCBCBCB6B5B5B50AEAEB1CAF&J3zJ#
D4E9FFFFFFQ FFFFF7DBCFCCC8C4C4C4BEBCBCBCB5B5B5B3/AE>AEB5D%J0wJ#
DBF1FFFFPHFCF9F9F9F2F2F2F2EAEAEAE7DCC6B0AEO AEBAA&J-z$J#
CFE0FAFFFFP;FCF9F9F9F2F2F2EFEAEAEAE51E1DFD0B8O+AEC0@%J-zG&J#
E9FFFFFFP.F9F9F9F8F2F2F2EDEAEAEAE3/E1E1E1E1D8C3O*AEC5@"J"wJ&J#
FFP0FDE1CE1E1DFCEB4O(AFCAJ#J&J#
P;FFEBO"E1E1E1D3BFO&AEB3J"J&J#
P<F5O%E1E1DCC6B0O$AEB9J#J&J#
P<FFE3O&E1E1E1D0BBO#AEBEJ"J&J#
P=EDO)E1E1D8C3B0O!AEC4J"J&J#
P=FCO+E1E1DFCEB4O AFC8@"J#J&J$
F7P2FFE5O,E1E1E1D6C3LAEB3CA@$J"J&J#
CCDEFEP1F3O/E1E1DCCBB4JAEB6A$J"J&J#
CCCFE9P0FDO1E1E1E1D0B8IAEBCB%J#J"J#
CCCCD4F1P.FFEBO4B0JAEC1D%J"J%J#
CCCCDBFAP-F5O1D8BBAEAEKAFC5F$J#J%J$
CCCFE0P,FFE3O.DFC6AEAEMAEB3CAG%J"J$J#
CCCCD1F1P+EDO-D0B0AEO"AEB5I%J"J%J#
CCCCD7FAP)FCO+D8BBAEAEO$AEBAJ%J#J%J#
5CCCCE0FEP'FFE5O(DFC6AEAEO'AEC0J$J"J$J#
7CCCFE9P'F3O'D0B0AEO*AFC5J%J"J%J$
8CCCCD7F7P%FDO%D8BBAEAEO+AEAFCAJ%J#J%J#
:CCCCDBFEP#FFEBO"DFC6AEAEO.AEB3J$J"J$J#
<CCCFE4P#F5O!D0B0AEO1AEB9J%J#J%J#
=CCCCD1F1P!FFE3LD8BBAEAEO3AEC0J%J"J%J#
?CCCCD9FAP EDJDFC6AEAEO6AEC4J%J"J$J#
ACCCFE0FEOLFCID0B0AEO9AFC8J%J#J%J$
BCCCCD1ECOKFFE5FD8BBAEAEO:AEB3CAJ%J"J%J#
DCCCCD7F7OJF3DDFC6AEAEO=AEB9J%J"J$J#
FCCCCDEFEOHFDCD0B0AEO@AEBCJ$J#J%J#
HCCCFE9OGFFEB@D8BBAEAEOBAEC1J%J"J%J#
ICCCCD4F1OFF5>DFC6AEAEOEAFC5J%J#J$J$
KCCCCDBFAODFFE3<D0B0AEOGAEB3CAJ$J"J%J#
MCCCFE0ODED:D8BBAEAEOIAEB5J%J"J%J#
O CCCCD1F1OBFC8DFC6AEAEOLAEBAJ%J#J$J#
O"CCCCD7FAO@FFE56D0B0AEP!AEC0J%J"J%J#
O$CCCCE0FEO?F34D8BBAEAEP#AFC5J$J"H%J$
O&CCCFE9O>FDDFC6AEAEP%AEB1CAJ%J#F$J#
O'CCCCD7F7O<FFEBD0B0AEP(AEB3J%J"D%J#
O)CCCCDBFEO;F5D8BBAEAEP*AEB9J$J#A%J#
O+CCCFE4O:FFE3DFC6AEAEP-AEC0J%J"@$J#
O,CCCCD1F1O9EDD0B0AEP0AEC5J%J">%J#
O.CCCCD9FAO7FCD8BBAEAEP2AFC8J%J#;%J$
O0CCCFE0FEO5FFE5DFC6AEAEP4AEB3CAJ%J":$J#
O1CCCCD1ECO5F3D0B0AEP7AEB9J%J"8%J#
O3CCCCD7F7O3FDD8BBAEAEP9AEBEJ%J&J#
O5CCCCDEFEO1FFE6C6AEAEP<AEC1J$J$J#
O7CCCFE9O0ECC7AEP?AFC5J%J&J'
O8CCCCD4F1O,FAD7CCCCAFP;B3B5B5BABCC1J%J%8"J*t
O:CCCCDBFAO(FEDECCCCB9P/B5B5B5BCBCBCC4C4C4CCJ$J$:"J+w
O<CCCFE0O&E4CFCCC5P"AFB5B5B6BCBCBCC4C4C4CCJ%J%;#J+w
O=CCCCD1F1O"F1D4CCCCCCB1OCAFB5B5B6BCBCBEC4C4C5CCJ%J%>"J+w
O?CCCCD7FALFAD9CCCCBEO7B1B5B5B9BCBCC0C4C4C8CCJ%J%@"J+w
OACCCCE0FEHFEE0CFCCC8O+B3B5B5BABCBCC1C4C4C8CCJ$J%A#J+w
OCCCCFE9FE9D1CCCCCCB6LB5B5B5BABCBCC1C4C4CACCJ%J%D"J*x
ODCCCCD7F1BF7D7CCCCC0@B5B5B5BCBCBCC4C4C4CCJ%J%F#H+w
OFCCCCDBFE>FEDBCCCCCCAFAFB5B5B6BCBCBEC4C4C4CCJ$J$I"<+w
OHCCCFE4<E4CFCCB9B1B5B5B9BCBCBEC4C4C5CCJ%J%J&w
OICCCCD1F18F1D1CCCC4C8C0C4C4C8CCJ%J%J&
OKCCCCD9FA4FAD7CCCC6CCCCCCCCCCJ%F%
OMCCCCE0FEFEE0CCCCJ$D$
P!CCD1ECE9CFCCJ%@%
P"CCCCD7F7F1D7CCCCJ%<%
P$CCCCDEFEFEDBCCCCJ$:$
P&CCCFE4E0CFCCJ)
P'CCCCD4F7ECD1CCCCJ&
P(CFE0FFFEDEJ)
P'DBFAFFFFFFFFF7D4J%:%
P%D4F1FFFFFFFFE4CFJ%>$
P#CFE4FFFFFFFED9J$A%
P"DEFEFFFFFFF1D1J%D%
P D7F7FFFFFFFFE0CFJ%H$
OLCFE9FFFFFFFAD7J$J%
OKE0FEFF5FFFFECD1J%J$
OID7FAFFFF8FFFEDEJ%J%
OGD1ECFFFF;FFFFF7D7J%J%
OECFE0FFFF?FFFFE4CFJ$J$
ODD9FAFFCFFFEDBJ%J%
OBD1F1FFFFEFFFFF1D4J%J%
O@CFE4FFFFIFFFFE0CFJ$J$
O?DBFEFFMFFFAD9J%J%
O=D7F1FFFFO!FFFFECD1J%J$
O;CFE9FFFFO%FFFEE0J$J%
O:DEFEFFO(FFFFF7D7J%J%
O8D7F7FFFFO+FFFFE9CFJ%J$
O6D1ECFFFFO/FFFEDEJ$J%
O5E0FEFFO2FFFFF1D4J%J%
O3D9FAFFFFO5FFFFE4CFJ%J$
O1D1F1FFFFO9FFFAD9J%J%
O/CFE0FFFFO<FFFFF1D1J$J$
O.DBFAFFO@FFFFE0J%J$
O,D4F1FFFFOCFFFAD7J%J%
O*CFE4FFFFOFFFFFECCFJ$J$
O)DEFEFFOJFFFEDEJ%J%
O'D7F7FFFFOLFFFFF7D4J%J%
O%CFE9FFFFP"FFFFE4CFJ$J$
O$E0FEFFP&FFFEDBJ%J%
O"D7FAFFFFP(FFFFF1D1J%J%
O D1ECFFFFP,FFFFE0CFJ%J$
LCFE0FFFFP0FFFAD7@z#J$z
BF0FAFFP3FFFFF6Q5F0@ZJZ
CP6Q6












J$
SIFBCDFB@"t"J"uJ&
DDC2D2P/D2C2PGFBBDAEBDFB@"t"J"uJ(J,9#
D5AEC2P/C2AEPFFBBDAEAEAEBDFB;D2C2C2B2BDC2C2EEC2AEFBBDAEJ$9$J,8#
SFFBBDAEAEBDFB:FFFFFFC2E8FFFFFFC2C2DDF4C9J$;$J#8#
SEFBBDAEAEBDFBBDACDDADDJ#=#J#8#
SEE2AEB2F4BE8BDBDF4J#<$J&
SEFFDAB2EEFFCCDE2F4BDFFJ#:$J%
SFFFCDB2EEFFDE2D2DADAJ#8$J%
SGFFCDB2EEFFEFFB7C9F4J&J$
SHFBBDB2EEFFGC9BDFFJ%J#9&8"
SHFFFBF4FF@D2EED2EEFFE2DDC2J#J#9P8"
SIFFFFAFFFFFF


Jv"
SED5F4J"z#D"z"?"u>.J#z$?$z";"uD"u":v"9"z#
4B73D5E2F4EE9E8F4F4D5F4E8E8E8E8E8E2D5D5D5D5D5D57DDCD:C2C9D5F4F4CDB2>AEC2C2AED2C2EEAEE8E8>D5DDFBJz#B"z$<"u'zJ#z"=%J"u"I"z#
46AEC2E8C2:AEB7CDF4E8AEFBE8D5CDC2B7/AE5FBBD?AED2DDAEAEAEO/C2AEE8D5@AED2FBJ$J%F'J#J#;#J#
JAEAEDDFAEAEB2DDAEAEAEAEAEAEDBDAE?AED5E8AEPDAEBDJ#S$?#@"z#?$J+J#?#T$@#:"A%T"J"V#?#
6CDE8FBDDB2B2F4EE1E8DDBDAEAEDD:C2CDD5DDE8E8E8FFFFFF4DDAEDAFBFBDAB2B2FBC2C2E2E8FBD5ODD5E2B7AED5J$>$?#@Z"@"J$SJ"?$?$@#9#@&J$?#
5DAFFFFFFFFE8AED24C9B26C9DAEE7C2DAFFFFFFFFEEAEE2FBAEC2FFFFFFFFP,FFFBB2AEFBJ#B#?"J"@#H'J"?"C#@"9"A"J#@"
4B7FFFFBDB7>EEAEE8B2D5F4FFFFFF?AEFBFFC9D5E8E2P1FFD2E2J"D"?"J"J%J"D"J"J"@"
4C2C2AE>FF=D5FBFFFFLFFD5:E8P2E8D5J%
P,B2E8FFFFJ#
P,E8FFJ#
P+CDFFJ"
P+EEJ"Jz"
P+FFO$/E8CDJz
Q00AE

J#z
O)F4D54C2J"z
O(D56AEJ#?"v"
O'D5AEB7C2BDJ#?"W"J"z"
O&FBAED5E8O?CD9D5E8J"@"J"Z
O&DDFBOLE8:J"@"
O&D5FF










J"
S'FBJ"J"?"J"J"@"
O1FBOBC9D2IDA=D2E2J"@"J"?#J"A#J"@"
O&E8DAOBDDB2EE<F4B2F4<E8C2J#?$J#>%J#@$v"E#?$
O&FFB7B2DDFBO@FFBDAEB2D5F4:FFC2AEB2D2E8CDFFC2AEC9F4J"?yJ#>z">#@yF#?y
O'E8AEO6EEB25AED5EEB2AEF4B2AEJ$J#J$J$J$
O'FFEEB7?B2FBO*FFEEBDEFFEEB7GFFF4C2@"t"D"u>%z#9"uJ"u=%z"?%z"G%z":v"9"u"
DDC2D2D2C2FFFFE2D2=C2E2FFEEC29DDD5FFFFE2CD:C2DDFFFFDDCD4C2B7FFFFEEDA>D5F4C2EEDDC2DD@VDV@Z:VJV?ZAZ"IZ:W9WC$T
@9=6D5AFBE8FBJ$
T?FFFFFF












JV
R:








ENDBITMAP
%%EndBinary
0 0 0 1 0 0 0 K
108 117 486 612 C
36 72 576 720 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "i" 1
%%Page: "ii" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 81 540 117 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 126 504 684 R
V
1 9 Q
0 X
(Copyright and T) 72 678 T
(rademarks) 139.01 678 T
2 F
(Harlequin Dylan: Network Library Documentation) 72 663 T
0 F
(V) 72 648 T
(ersion 1.1) 77.5 648 T
(September 1998) 72 633 T
(Copyright \251 1998 Harlequin Gr) 72 618 T
(oup plc.) 197.84 618 T
(Companies, names and data used in examples her) 72 603 T
(ein ar) 271.03 603 T
(e \336ctitious unless otherwise noted.) 293.34 603 T
-0.04 (All Rights Reserved. No part of this publication may be r) 72 588 P
-0.04 (epr) 297.85 588 P
-0.04 (oduced, stor) 310.96 588 P
-0.04 (ed in a r) 360.13 588 P
-0.04 (etrieval system, or transmit-) 392.33 588 P
-0.16 (ted, in any form or by any means, electr) 72 578 P
-0.16 (onic, mechanical, photocopying, r) 228.58 578 P
-0.16 (ecor) 362.33 578 P
-0.16 (ding, or otherwise, without the) 378.94 578 P
(prior written permission of The Harlequin Gr) 72 568 T
(oup Limited.) 252.93 568 T
-0.05 (The information in this publication is pr) 72 553 P
-0.05 (ovided for information only) 230.7 553 P
-0.05 (, is subject to change without notice, and) 340.94 553 P
(should not be constr) 72 543 T
(ued as a commitment by Harlequin Limited, Harlequin Incorporated, Harlequin) 153.02 543 T
-0.17 (Australia Pty) 72 533 P
-0.17 (. Limited, or The Harlequin Gr) 123.43 533 P
-0.17 (oup Limited. The Harlequin Gr) 244.34 533 P
-0.17 (oup Limited assumes no r) 368.21 533 P
-0.17 (esponsi-) 470.88 533 P
-0.09 (bility or liability for any err) 72 523 P
-0.09 (ors or inaccuracies that may appear in this publication. The softwar) 180.01 523 P
-0.09 (e described in) 446.77 523 P
(this book is furnished under license and may only be used or copied in accor) 72 513 T
(dance with the terms of that) 376.67 513 T
(license.) 72 503 T
(Dylan is a trademark of Apple Computer) 72 488 T
(, Inc.) 235.44 488 T
(Other brand or pr) 72 473 T
(oduct names ar) 142.9 473 T
(e the r) 203.88 473 T
(egister) 228.56 473 T
(ed trademarks or trademarks of their r) 254.95 473 T
(espective holders.) 407.93 473 T
(US Government Use) 72 458 T
(The Harlequin Dylan Softwar) 72 443 T
(e is a computer softwar) 189.91 443 T
(e pr) 282.71 443 T
(ogram developed at private expense and is subject) 298.07 443 T
-0.05 (to the following Restricted Rights Legend: \322Use, duplication, or disclosur) 72 433 P
-0.05 (e by the United States Government) 362.78 433 P
(is subject to r) 72 423 T
(estrictions as set forth in \050i\051 F) 123.99 423 T
(AR 52.227-14 Alt III or \050ii\051 F) 238.07 423 T
(AR 52.227-19, as applicable.  Use by) 347.02 423 T
-0.04 (agencies of the Department of Defense \050DOD\051 is subject to Harlequin\325s customary commer) 72 413 P
-0.04 (cial license as con-) 431.26 413 P
(tained in the accompanying license agr) 72 403 T
(eement, in accor) 226.86 403 T
(dance with DF) 291.32 403 T
(AR 227.7202-1\050a\051.  For purposes of the) 348.97 403 T
(F) 72 393 T
(AR, the Softwar) 76.34 393 T
(e shall be deemed to be `unpublished\325 and licensed with disclosur) 139.55 393 T
(e pr) 401.58 393 T
(ohibitions, rights) 416.94 393 T
(r) 72 383 T
(eserved under the copyright laws of the United States.  Harlequin Incorporated, One Cambridge Center) 75.39 383 T
(,) 487.26 383 T
(Cambridge, Massachusetts 02142.\323) 72 373 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Eur) 72 254 T
(ope:) 86.32 254 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Harlequin Limited) 72 239 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Barrington Hall) 72 229 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Barrington) 72 219 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Cambridge CB2 5RG) 72 209 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(U.K.) 72 199 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(telephone +44 1223 873 800) 72 184 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fax +44 1223 873 873) 72 174 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(North America:) 216 254 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Harlequin Incorporated) 216 239 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(One Cambridge Center) 216 229 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Cambridge, MA 02142) 216 219 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(U.S.A.) 216 209 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(telephone +1 617 374 2400) 216 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fax +1 617 252 6505) 216 184 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Electr) 360 254 T
(onic Access:) 382.75 254 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(http://www) 360 239 T
(.harlequin.co.uk/) 411.36 239 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(http://www) 360 229 T
(.harlequin.com/) 411.36 229 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "ii" 2
%%Page: "iii" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 540 117 R
7 X
0 0 0 1 0 0 0 K
V
1 11 Q
0 X
(iii) 529.01 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 586.8 522 618.26 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 586.8 522 618.26 R
7 X
0 0 0 1 0 0 0 K
V
108 611.41 270 611.41 2 L
3 H
2 Z
0 X
N
108 602.41 270 602.41 2 L
1 H
N
36 72 576 720 C
0 30 Q
0 X
0 0 0 1 0 0 0 K
(Contents) 108 566.8 T
108 126 486 468 R
7 X
V
3 13 Q
0 X
(1) 108 459.33 T
(Overview) 135 459.33 T
(1) 195.41 459.33 T
(2) 108 436.33 T
(Internet addresses) 135 436.33 T
(1) 242.8 436.33 T
0 10.5 Q
(Basic Internet addr) 135 417 T
(ess pr) 222.94 417 T
(otocol) 249.76 417 T
(1) 288.6 417 T
(The <IPV6-ADDRESS> class) 135 402.5 T
(4) 278.01 402.5 T
(The <NUMERIC-ADDRESS> class) 135 388 T
(4) 306.54 388 T
3 13 Q
(3) 108 365.83 T
(Sockets) 135 365.83 T
(6) 188.88 365.83 T
0 10.5 Q
(The <ABSTRACT) 135 346.5 T
(-SOCKET> class) 216.59 346.5 T
(6) 303.13 346.5 T
(The <SER) 135 332 T
(VER-SOCKET> class) 179.93 332 T
(8) 287.48 332 T
(The <TCP-SER) 135 317.5 T
(VER-SOCKET> class) 203.65 317.5 T
(9) 311.2 317.5 T
(The <SOCKET> class) 135 303 T
(10) 244.61 303 T
(The <BUFFERED-SOCKET> class) 135 288.5 T
(1) 302.34 288.5 T
(1) 307.01 288.5 T
(The <TCP-SOCKET> class) 135 274 T
(12) 268.33 274 T
3 13 Q
(4) 108 251.83 T
(Socket conditions) 135 251.83 T
(13) 239.82 251.83 T
0 10.5 Q
(<socket-condition>) 135 232.5 T
(13) 235.16 232.5 T
(<socket-err) 135 218 T
(or>) 187.13 218 T
(14) 213.88 218 T
(<r) 135 203.5 T
(ecoverable-socket-condition>) 145.32 203.5 T
(15) 292.29 203.5 T
(<socket-accessor) 135 189 T
(-err) 212.2 189 T
(or>) 228.83 189 T
(18) 255.57 189 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "iii" 3
%%Page: "iv" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
72 81 504 117 R
V
1 11 Q
0 X
(iv) 72 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "iv" 4
%%Page: "1" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 540 117 R
7 X
0 0 0 1 0 0 0 K
V
1 9 Q
0 X
(1) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 483.26 522 618.26 R
7 X
V
108 586.8 522 618.26 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 586.8 522 618.26 R
7 X
0 0 0 1 0 0 0 K
V
108 611.41 270 611.41 2 L
3 H
2 Z
0 X
N
108 602.41 270 602.41 2 L
1 H
N
36 72 576 720 C
0 30 Q
0 X
0 0 0 1 0 0 0 K
(Network Library Refer) 108 566.8 T
(ence) 411.12 566.8 T
(Documentation) 108 528.8 T
108 126 486 432 R
7 X
V
3 16 Q
0 X
(1  Over) 108 421.33 T
(vie) 152.62 421.33 T
(w) 170.69 421.33 T
0 11 Q
(This document covers the Network library) 108 400.67 T
(. The Network library pr) 313.82 400.67 T
(ovides) 433.17 400.67 T
(Internet addr) 108 386.67 T
(ess pr) 172.4 386.67 T
(otocols and TCP/IP server and client sockets. It exports a) 200.51 386.67 T
(single module, Network.) 108 372.67 T
(The Network library is only available in the Pr) 108 352.67 T
(ofessional and Enterprise edi-) 333.75 352.67 T
(tions of Harlequin Dylan.) 108 338.67 T
3 16 Q
(2  Internet ad) 108 303.33 T
(dresses) 189.55 303.33 T
0 11 Q
(This section covers Internet addr) 108 282.67 T
(ess pr) 267.06 282.67 T
(otocols.) 295.17 282.67 T
3 13 Q
(2.1  Basic Internet ad) 108 249.33 T
(dress pr) 214.56 249.33 T
(otocol) 256.43 249.33 T
0 11 Q
(This section covers the class) 108 229.67 T
4 9.5 Q
(<internet-address>) 246.32 229.67 T
0 11 Q
( and r) 348.92 229.67 T
(elated generic func-) 377.2 229.67 T
(tions and constants.) 108 215.67 T
3 12 Q
(<internet-ad) 108 181 T
(dress>) 164.51 181 T
2 11 Q
(Open abstract primary instantiable class) 306.14 181.67 T
0 F
(Super) 135 159.67 T
(classes:) 163.43 159.67 T
4 9.5 Q
(<object>) 201.78 159.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 5
%%Page: "2" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(Network Library Reference Documentation) 72 695.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(2) 72 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 11 Q
0 X
(The class of objects r) 153 640.67 T
(epr) 252.21 640.67 T
(esenting Internet addr) 268.24 640.67 T
(esses used as endpoints) 376.3 640.67 T
(for peer) 153 626.67 T
(-to-peer socket connections.) 191.06 626.67 T
(T) 153 606.67 T
(o constr) 158.73 606.67 T
(uct an) 197.29 606.67 T
4 9.5 Q
(<internet-address>) 229.79 606.67 T
0 11 Q
( object you must supply either the) 332.39 606.67 T
4 9.5 Q
(name:) 153 592.67 T
0 11 Q
( or) 181.5 592.67 T
4 9.5 Q
(address:) 197.35 592.67 T
0 11 Q
( keywor) 242.95 592.67 T
(d. For example:) 282.53 592.67 T
4 9 Q
(make \050<internet-address>, name: "www.whatever.com"\051) 163.8 572 T
0 11 Q
(or) 153 551.67 T
4 9 Q
(make \050<internet-address>,  address: "9.74.122.0"\051) 163.8 531 T
4 9.5 Q
(make) 153 510.67 T
0 11 Q
( on) 175.8 510.67 T
4 9.5 Q
(<internet-address>) 193.71 510.67 T
0 11 Q
( r) 296.31 510.67 T
(eturns an instance of) 303.2 510.67 T
4 9.5 Q
(<ipv4-address>) 406.58 510.67 T
0 11 Q
(.) 486.38 510.67 T
(Keywor) 153 490.67 T
(ds:) 191.7 490.67 T
4 9.5 Q
(name:) 153 464.67 T
0 11 Q
(An instance of) 234 464.67 T
4 9.5 Q
(<string>) 306.79 464.67 T
0 11 Q
( r) 352.39 464.67 T
(epr) 359.28 464.67 T
(esenting a symbolic inter-) 375.31 464.67 T
(net addr) 234 450.67 T
(ess.) 275.1 450.67 T
4 9.5 Q
(address:) 153 424.67 T
0 11 Q
(An instance of) 234 424.67 T
4 9.5 Q
(<string>) 306.79 424.67 T
0 11 Q
( r) 352.39 424.67 T
(epr) 359.28 424.67 T
(esenting a pr) 375.31 424.67 T
(esentation) 437.98 424.67 T
(\050dotted\051 form Internet addr) 234 410.67 T
(ess or an instance of) 366.85 410.67 T
4 9.5 Q
(<numeric-address>) 234 396.67 T
0 11 Q
( \050see below\051.) 330.9 396.67 T
3 12 Q
(host-name) 126 362 T
2 11 Q
(Open generic function) 404.57 362.67 T
4 9 Q
(host-name) 153 342 T
5 F
(internet-addr) 207 342 T
(ess) 260.35 342 T
4 F
( =>) 272.34 342 T
5 F
(name) 293.94 342 T
0 11 Q
(Returns an instance of) 153 321.67 T
4 9.5 Q
(<string>) 263.73 321.67 T
0 11 Q
( containing a symbolic host name. The) 309.33 321.67 T
2 F
(internet-addr) 153 307.67 T
(ess) 212.08 307.67 T
0 F
( ar) 224.92 307.67 T
(gument must be an instance of) 237.32 307.67 T
4 9.5 Q
(<internet-address>) 388.96 307.67 T
0 11 Q
(.) 491.56 307.67 T
(Usually the name r) 153 287.67 T
(eturned is the canonical host name. Note, however) 245.41 287.67 T
(,) 490.9 287.67 T
(that the implementation is conservative about making DNS calls. Sup-) 153 273.67 T
(pose that the) 153 259.67 T
4 9.5 Q
(<internet-address>) 218.13 259.67 T
0 11 Q
( instance was cr) 320.73 259.67 T
(eated with the) 397.26 259.67 T
4 9.5 Q
(name:) 469.47 259.67 T
0 11 Q
(keywor) 153 245.67 T
(d and no other information. If the application has not made any) 189.83 245.67 T
-0.46 (other r) 153 231.67 P
-0.46 (equests that would r) 185.05 231.67 P
-0.46 (equir) 283.13 231.67 P
-0.46 (e a DNS call, such as to) 308.54 231.67 P
4 9.5 Q
-0.95 (host-address) 420.66 231.67 P
0 11 Q
-0.46 ( or) 489.06 231.67 P
4 9.5 Q
(aliases) 153 217.67 T
0 11 Q
( \050see below\051, the name that this function r) 192.9 217.67 T
(eturns will be the one) 393.9 217.67 T
(speci\336ed with the) 153 203.67 T
4 9.5 Q
(name:) 242.14 203.67 T
0 11 Q
( keywor) 270.64 203.67 T
(d, r) 310.22 203.67 T
(egar) 326.59 203.67 T
(dless of whether that is the) 347.62 203.67 T
(canonical name or not.) 153 189.67 T
3 12 Q
(host-ad) 126 155 T
(dress) 161.45 155 T
2 11 Q
(Open generic function) 404.57 155.67 T
4 9 Q
(host-address) 153 135 T
5 F
(internet-addr) 223.2 135 T
(ess) 276.55 135 T
4 F
( =>) 288.54 135 T
5 F
(addr) 310.14 135 T
(ess) 328.49 135 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 6
%%Page: "3" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 675 540 702 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(2) 456.34 695.67 T
(Internet addresses) 470.59 695.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(3) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
-0.08 (Returns an instance of) 135 640.67 P
4 9.5 Q
-0.16 (<string>) 245.42 640.67 P
0 11 Q
-0.08 ( containing the pr) 291.02 640.67 P
-0.08 (esentation form of the) 376.76 640.67 P
(host addr) 135 626.67 T
(ess. In the case of multi-homed hosts this will usually be the) 181.5 626.67 T
(same as:) 135 612.67 T
4 9 Q
(multi-homed-internet-address.all-addresses.first.host-address) 135 592 T
0 11 Q
-0.14 (In the case of an Internet addr) 135 571.67 P
-0.14 (ess cr) 279.56 571.67 P
-0.14 (eated using the) 305.8 571.67 P
4 9.5 Q
-0.29 (address:) 382.24 571.67 P
0 11 Q
-0.14 ( keywor) 427.84 571.67 P
-0.14 (d it) 467.27 571.67 P
(will be either the keywor) 135 557.67 T
(d value or) 256.29 557.67 T
4 9.5 Q
(all-addresses.first.host-) 308.43 557.67 T
(address) 135 543.67 T
0 11 Q
(.) 174.9 543.67 T
3 12 Q
(n) 108 509 T
(umeric-host-ad) 113.93 509 T
(dress) 184.92 509 T
2 11 Q
(Open generic function) 386.57 509.67 T
4 9 Q
(numeric-host-address) 135 489 T
5 F
(internet-addr) 248.4 489 T
(ess) 301.75 489 T
4 F
( =>) 313.74 489 T
5 F
(numeric-addr) 335.34 489 T
(ess) 389.19 489 T
0 11 Q
(Returns the host addr) 135 468.67 T
(ess as a) 240.5 468.67 T
4 9.5 Q
(<numeric-address>) 279.01 468.67 T
0 11 Q
(.) 375.91 468.67 T
3 12 Q
(all-ad) 108 434 T
(dresses) 133.62 434 T
2 11 Q
(Open generic function) 386.57 434.67 T
4 9 Q
(all-addresses) 135 414 T
5 F
(internet-addr) 210.6 414 T
(ess) 263.95 414 T
4 F
( =>) 275.94 414 T
5 F
(sequence) 297.54 414 T
0 11 Q
(Returns an instance of) 135 393.67 T
4 9.5 Q
(<sequence>) 245.73 393.67 T
0 11 Q
( whose elements ar) 302.73 393.67 T
(e) 395.51 393.67 T
4 9.5 Q
(<internet-) 403.53 393.67 T
(address>) 135 379.67 T
0 11 Q
( objects containing all known addr) 180.6 379.67 T
(esses for the host.) 348.21 379.67 T
3 12 Q
(aliases) 108 345 T
2 11 Q
(Open generic function) 386.57 345.67 T
4 9 Q
(aliases) 135 325 T
5 F
(internet-addr) 178.2 325 T
(ess) 231.55 325 T
4 F
( =>) 243.54 325 T
5 F
(sequence) 265.14 325 T
0 11 Q
(Returns an instance of) 135 304.67 T
4 9.5 Q
(<sequence>) 245.73 304.67 T
0 11 Q
( whose elements ar) 302.73 304.67 T
(e instances of) 395.51 304.67 T
4 9.5 Q
(<string>) 135 290.67 T
0 11 Q
( r) 180.6 290.67 T
(epr) 187.5 290.67 T
(esenting alternative names for the host.) 203.52 290.67 T
3 12 Q
($loopbac) 108 256 T
(k-ad) 151.02 256 T
(dress) 171.17 256 T
2 11 Q
(Constant) 445.06 256.67 T
0 F
(An instance of) 135 234.67 T
4 9.5 Q
(<internet-address>) 207.79 234.67 T
0 11 Q
( r) 310.39 234.67 T
(epr) 317.28 234.67 T
(esenting the loopback addr) 333.31 234.67 T
(ess:) 465.22 234.67 T
4 9.5 Q
("127.0.0.1") 135 220.67 T
0 11 Q
(.) 197.7 220.67 T
3 12 Q
($local-host) 108 186 T
2 11 Q
(Constant) 445.06 186.67 T
0 F
(An instance of) 135 164.67 T
4 9.5 Q
(<internet-address>) 207.79 164.67 T
0 11 Q
( r) 310.39 164.67 T
(epr) 317.28 164.67 T
(esenting the host on which the) 333.31 164.67 T
(application using sockets is corr) 135 150.67 T
(ectly r) 290.15 150.67 T
(unning.) 320.22 150.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 7
%%Page: "4" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(Network Library Reference Documentation) 72 695.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(4) 72 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 11 Q
0 X
(Note that this value is not necessarily the same as would be cr) 153 640.67 T
(eated by) 453.81 640.67 T
(the expr) 153 626.67 T
(ession) 192.71 626.67 T
4 9 Q
(make \050<internet-address>, name: "localhost"\051) 163.8 606 T
0 11 Q
(The addr) 153 585.67 T
(ess assigned to the symbolic name) 197.25 585.67 T
4 9.5 Q
(localhost) 366.49 585.67 T
0 11 Q
( is dependent on) 417.79 585.67 T
-0.33 (the con\336guration of DNS. In some cases this may be con\336gur) 153 571.67 P
-0.33 (ed to be the) 446.14 571.67 P
(loopback addr) 153 557.67 T
(ess rather than a r) 223.25 557.67 T
(eal addr) 309.83 557.67 T
(ess for the local host.) 349.64 557.67 T
3 13 Q
(2.2  The <IPV6-ADDRESS> c) 126 524.33 T
(lass) 268.6 524.33 T
0 11 Q
(This name is r) 126 504.67 T
(eserved for futur) 194.16 504.67 T
(e development.) 276.08 504.67 T
3 13 Q
(2.3  The <NUMERIC-ADDRESS> c) 126 471.33 T
(lass) 295.22 471.33 T
0 11 Q
(This section describes numeric Internet r) 126 451.67 T
(epr) 323.03 451.67 T
(esentation and associated pr) 339.06 451.67 T
(oto-) 476.57 451.67 T
(cols.) 126 437.67 T
3 12 Q
(<n) 126 403 T
(umeric-ad) 137.68 403 T
(dress>) 184.62 403 T
2 11 Q
(Sealed abstract primary class) 375.38 403.67 T
0 F
(Super) 153 381.67 T
(classes:) 181.43 381.67 T
4 9.5 Q
(<object>) 219.78 381.67 T
0 11 Q
(The class of objects r) 153 361.67 T
(epr) 252.21 361.67 T
(esenting the numeric form of an Internet) 268.24 361.67 T
(addr) 153 347.67 T
(esses.) 176.09 347.67 T
(Curr) 153 327.67 T
(ently only ipv4 \05032-bit\051 addr) 175.92 327.67 T
(esses ar) 312.7 327.67 T
(e supported. Ipv6 addr) 349.62 327.67 T
(esses) 461.46 327.67 T
(will be added when they ar) 153 313.67 T
(e supported by W) 286.08 313.67 T
(insock2. In general) 372.64 313.67 T
4 9.5 Q
-0.63 (<numeric-address>) 153 299.67 P
0 11 Q
-0.31 ( objects ar) 249.9 299.67 P
-0.31 (e accessed using the functions) 297.5 299.67 P
4 9.5 Q
-0.63 (host-order) 444.56 299.67 P
0 11 Q
(or) 153 285.67 T
4 9.5 Q
(network-order) 166.1 285.67 T
0 11 Q
(, depending on the context in which they ar) 239.39 285.67 T
(e) 450.61 285.67 T
(employed.) 153 271.67 T
3 12 Q
(netw) 126 237 T
(ork-or) 148.24 237 T
(der) 176.48 237 T
2 11 Q
(Sealed generic function) 400.91 237.67 T
4 9 Q
(network-order) 153 217 T
5 F
(addr) 228.6 217 T
(ess) 246.95 217 T
4 F
( =>) 258.94 217 T
5 F
(network-order-addr) 280.54 217 T
(ess) 360.4 217 T
0 11 Q
(Returns the value of the numeric addr) 153 196.67 T
(ess in network or) 338.28 196.67 T
(der) 421.79 196.67 T
(. The ar) 437.31 196.67 T
(gu-) 473.62 196.67 T
-0.03 (ment is a general instance of) 153 182.67 P
4 9.5 Q
-0.05 (<numeric-address>) 293.35 182.67 P
0 11 Q
-0.03 (. The class of the object) 390.25 182.67 P
(r) 153 168.67 T
(eturned depends upon the particular subclass of the ar) 157.15 168.67 T
(gument; the) 422.61 168.67 T
4 9.5 Q
(network-order) 153 154.67 T
0 11 Q
( method for) 227.1 154.67 T
4 9.5 Q
(<ipv4-numeric-address>) 287.06 154.67 T
0 11 Q
( r) 412.46 154.67 T
(eturns an) 419.36 154.67 T
(instance of) 153 140.67 T
4 9.5 Q
(<machine-word>) 208.08 140.67 T
0 11 Q
(.) 287.88 140.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 8
%%Page: "5" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 675 540 702 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(2) 456.34 695.67 T
(Internet addresses) 470.59 695.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(5) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(Network order) 135 640.67 T
0 F
( is big-endian byte or) 199.46 640.67 T
(der) 302.09 640.67 T
(.) 317.61 640.67 T
3 12 Q
(host-or) 108 606 T
(der) 141.71 606 T
2 11 Q
(Sealed generic function) 382.91 606.67 T
4 9 Q
(host-order) 135 586 T
5 F
(addr) 194.4 586 T
(ess) 212.75 586 T
4 F
( =>) 224.74 586 T
5 F
(host-order-addr) 246.34 586 T
(ess) 310.2 586 T
0 11 Q
(Like) 135 565.67 T
4 9.5 Q
(network-order) 159.06 565.67 T
0 11 Q
( but r) 233.16 565.67 T
(eturns the value in host or) 259.11 565.67 T
(der) 386.24 565.67 T
(.) 401.77 565.67 T
2 F
(Host order) 135 545.67 T
0 F
( is either big-endian byte or) 182.35 545.67 T
(der on a big-endian host machine) 315.81 545.67 T
(and little-endian on a little-endian host machine.) 135 531.67 T
3 13 Q
(2.3.1  IPV4 ad) 108 498.33 T
(dresses) 176.07 498.33 T
3 12 Q
(<ipv4-n) 108 464 T
(umeric-ad) 142.64 464 T
(dress>) 189.59 464 T
2 11 Q
(Open abstract primary instantiable class) 306.14 464.67 T
0 F
(Super) 135 442.67 T
(classes:) 163.43 442.67 T
4 9.5 Q
(<numeric-address>) 201.78 442.67 T
0 11 Q
(The single slot of this class contains a 32-bit value r) 135 422.67 T
(epr) 382.3 422.67 T
(esenting a ipv4) 398.33 422.67 T
(addr) 135 408.67 T
(ess. This slot is accessed by the generic functions) 158.09 408.67 T
4 9.5 Q
(network-order) 396.76 408.67 T
0 11 Q
(and) 135 394.67 T
4 9.5 Q
(host-order) 156.37 394.67 T
0 11 Q
( described above.) 213.37 394.67 T
4 9.5 Q
(<ipv4-numeric-address>) 300.6 394.67 T
0 11 Q
( has two) 426 394.67 T
(concr) 135 380.67 T
(ete subclasses) 161.32 380.67 T
4 9.5 Q
(<ipv4-network-order-address>) 231.17 380.67 T
0 11 Q
( and) 390.77 380.67 T
4 9.5 Q
(<ipv4-host-) 414.9 380.67 T
(order-address>) 135 366.67 T
0 11 Q
(. Make) 214.8 366.67 T
4 9.5 Q
(<ipv4-numeric-address>) 250.34 366.67 T
0 11 Q
( r) 375.74 366.67 T
(eturns one or the) 382.64 366.67 T
(other of these depending upon the value of the) 135 352.67 T
4 9.5 Q
(order:) 365.58 352.67 T
0 11 Q
( keywor) 399.78 352.67 T
(d.) 439.36 352.67 T
(Keywor) 135 332.67 T
(ds:) 173.7 332.67 T
4 9.5 Q
(value:) 135 306.67 T
0 11 Q
(An instance of) 216 306.67 T
4 9.5 Q
(<machine-word>) 288.79 306.67 T
0 11 Q
(. Requir) 368.59 306.67 T
(ed.) 406.85 306.67 T
4 9.5 Q
(order:) 135 280.67 T
0 11 Q
(One of) 216 280.67 T
4 9.5 Q
(#"network-order") 251.49 280.67 T
0 11 Q
( or) 342.69 280.67 T
4 9.5 Q
(#"host-order") 358.54 280.67 T
0 11 Q
(. Requir) 432.64 280.67 T
(ed.) 470.89 280.67 T
3 12 Q
(host-or) 108 246 T
(der) 141.71 246 T
2 11 Q
(G.f. method) 434.37 246.67 T
4 9 Q
(host-order) 135 226 T
5 F
(ip4-numeric-addr) 194.4 226 T
(ess) 264.25 226 T
4 F
( =>) 276.24 226 T
5 F
(machine-word) 297.84 226 T
0 11 Q
(Returns the numeric addr) 135 205.67 T
(ess in host or) 260.29 205.67 T
(der as an instance of) 323.55 205.67 T
4 9.5 Q
(<machine-) 425.28 205.67 T
(word>) 135 191.67 T
0 11 Q
(. The ar) 163.5 191.67 T
(gument is an instance of) 199.81 191.67 T
4 9.5 Q
(<ip4-numeric-address>) 320.62 191.67 T
0 11 Q
(.) 440.32 191.67 T
3 12 Q
(netw) 108 157 T
(ork-or) 130.24 157 T
(der) 158.48 157 T
2 11 Q
(G.f. method) 434.37 157.67 T
4 9 Q
(network-order <ipv4-numeric-address> => <machine-word>) 135 137 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 9
%%Page: "6" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(Network Library Reference Documentation) 72 695.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(6) 72 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 11 Q
0 X
(Returns the numeric addr) 153 640.67 T
(ess in network or) 278.29 640.67 T
(der as an instance of) 361.79 640.67 T
4 9.5 Q
(<machine-word>) 153 626.67 T
0 11 Q
(. The ar) 232.8 626.67 T
(gument is an instance of) 269.11 626.67 T
4 9.5 Q
(<ip4-numeric-) 389.92 626.67 T
(address>) 153 612.67 T
0 11 Q
(.) 198.6 612.67 T
3 12 Q
(as) 126 578 T
2 11 Q
(G.f. method) 452.37 578.67 T
4 9 Q
(as) 153 558 T
5 F
(string) 169.2 558 T
(ipv4-numeric-addr) 198.1 558 T
(ess) 272.95 558 T
4 F
( =>) 284.94 558 T
5 F
(string) 306.54 558 T
0 11 Q
(Returns the pr) 153 537.67 T
(esentation \050dotted string\051 form of an instance of) 222.76 537.67 T
4 9.5 Q
(<ip4-) 457.05 537.67 T
(numeric-address>) 153 523.67 T
0 11 Q
(.) 244.2 523.67 T
3 12 Q
(<ipv4-netw) 126 489 T
(ork-or) 176.95 489 T
(der) 205.2 489 T
(-ad) 220.33 489 T
(dress>) 235.01 489 T
2 11 Q
(Sealed concr) 413.15 489.67 T
(ete class) 468.05 489.67 T
0 F
(Super) 153 467.67 T
(classes:) 181.43 467.67 T
4 9.5 Q
(<ipv4-numeric-address>) 219.78 467.67 T
0 11 Q
(Concr) 153 447.67 T
(ete subclass for network-or) 182.24 447.67 T
(der numeric addr) 313.63 447.67 T
(esses.) 399 447.67 T
4 9 Q
(make\050<ipv4-network-order-address>\051) 163.8 427 T
0 11 Q
(is equivalent to) 153 406.67 T
4 9 Q
(make\050<ipv4-numeric-address>, order: network-order\051) 163.8 386 T
3 12 Q
(<ipv4-host-or) 126 353 T
(der) 188.42 353 T
(-ad) 203.56 353 T
(dress>) 218.23 353 T
2 11 Q
(Sealed concr) 413.15 353.67 T
(ete class) 468.05 353.67 T
0 F
(Super) 153 331.67 T
(classes:) 181.43 331.67 T
4 9.5 Q
(<ipv4-numeric-address>) 219.78 331.67 T
0 11 Q
(Concr) 153 311.67 T
(ete subclass for host or) 182.24 311.67 T
(der numeric addr) 292.48 311.67 T
(esses.) 377.85 311.67 T
3 16 Q
(3  Soc) 126 276.33 T
(kets) 164.42 276.33 T
0 11 Q
(This section describes socket classes and pr) 126 255.67 T
(otocols.) 335.37 255.67 T
3 13 Q
(3.1  The <ABSTRA) 126 222.33 T
(CT) 218.88 222.33 T
(-SOCKET> c) 231.83 222.33 T
(lass) 294.73 222.33 T
3 12 Q
(<abstract-soc) 126 188 T
(ket>) 190.08 188 T
2 11 Q
(Open abstract uninstantiable fr) 332.27 188.67 T
(ee class) 471.71 188.67 T
0 F
(Super) 153 166.67 T
(classes:) 181.43 166.67 T
4 9.5 Q
(<object>) 219.78 166.67 T
0 11 Q
(The common super) 153 146.67 T
(class of all socket objects including) 246.96 146.67 T
4 9.5 Q
(<socket>) 418.3 146.67 T
0 11 Q
( \050IP) 463.9 146.67 T
(client socket\051,) 153 132.67 T
4 9.5 Q
(<server-socket>) 221.98 132.67 T
0 11 Q
( and) 307.48 132.67 T
4 9.5 Q
(<socket-accessor>) 331.6 132.67 T
0 11 Q
(.) 428.5 132.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 10
%%Page: "7" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 675 540 702 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(3) 497.61 695.67 T
(Sockets) 511.86 695.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(7) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
0 11 Q
0 X
(Keywor) 135 640.67 T
(ds:) 173.7 640.67 T
4 9.5 Q
(socket-descriptor:) 135 614.67 T
0 11 Q
(A W) 216 596.67 T
(indows handle or UNIX fd \050\336le descriptor\051 for the) 237.7 596.67 T
(socket. In general users of the sockets API should not) 216 582.67 T
(need to use this keywor) 216 568.67 T
(d. Only implementors of new) 331.5 568.67 T
(socket classes should be inter) 216 554.67 T
(ested.) 357.95 554.67 T
-0.26 (Each subclass of) 108 534.67 P
4 9.5 Q
-0.55 (<abstract-socket>) 188.93 534.67 P
0 11 Q
-0.26 ( must pr) 285.83 534.67 P
-0.26 (ovide methods for) 326.16 534.67 P
4 9.5 Q
-0.55 (close) 417.4 534.67 P
0 11 Q
-0.26 ( and for) 445.9 534.67 P
(the following generic functions:) 108 520.67 T
3 12 Q
(local-por) 108 486 T
(t) 149.75 486 T
2 11 Q
(Open generic function) 386.57 486.67 T
4 9 Q
(local-port) 135 466 T
5 F
(socket) 194.4 466 T
4 F
( =>) 219.9 466 T
5 F
(port-number) 241.5 466 T
0 11 Q
(Returns the local port number for an instance of) 135 445.67 T
4 9.5 Q
(<socket>) 370.53 445.67 T
0 11 Q
(,) 416.13 445.67 T
4 9.5 Q
(<datagram-) 421.63 445.67 T
(socket>) 135 431.67 T
0 11 Q
( or) 174.9 431.67 T
4 9.5 Q
(<server-socket>) 190.75 431.67 T
0 11 Q
(. The r) 276.25 431.67 T
(eturn value is an instance of) 307.06 431.67 T
4 9.5 Q
(<integer>) 135 417.67 T
0 11 Q
(.) 186.3 417.67 T
3 12 Q
(soc) 108 383 T
(ket-descriptor) 124.78 383 T
2 11 Q
(Open generic function) 386.57 383.67 T
4 9 Q
(socket-descriptor) 135 363 T
5 F
(socket) 232.2 363 T
4 F
( => descriptor) 257.7 363 T
0 11 Q
(Returns the descriptor \050handle or fd\051 for the socket. The ar) 135 342.67 T
(gument is an) 417.8 342.67 T
(instance of) 135 328.67 T
4 9.5 Q
(<abstract-socket>) 190.08 328.67 T
0 11 Q
( and the r) 286.98 328.67 T
(eturn value an instance of) 333.25 328.67 T
4 9.5 Q
(<accessor-socket-descriptor>) 135 314.67 T
0 11 Q
(.) 294.6 314.67 T
3 12 Q
(local-host) 108 280 T
2 11 Q
(Open generic function) 386.57 280.67 T
4 9 Q
(local-host) 135 260 T
5 F
(socket) 194.4 260 T
4 F
( =>) 219.9 260 T
5 F
(host-addr) 241.5 260 T
(ess) 280.85 260 T
0 11 Q
(Returns the addr) 135 239.67 T
(ess of the local host. The ar) 217.09 239.67 T
(gument is an instance of) 347.38 239.67 T
4 9.5 Q
(<abstract-socket>) 135 225.67 T
0 11 Q
( and the r) 231.9 225.67 T
(eturn value an instance of) 278.18 225.67 T
4 9.5 Q
(<internet-) 406.46 225.67 T
(address>) 135 211.67 T
0 11 Q
(.) 180.6 211.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 11
%%Page: "8" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(Network Library Reference Documentation) 72 695.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(8) 72 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 13 Q
0 X
(3.2  The <SER) 126 639.33 T
(VER-SOCKET> c) 196.29 639.33 T
(lass) 281.1 639.33 T
3 12 Q
(<ser) 126 605 T
(ver) 146.62 605 T
(-soc) 161.21 605 T
(ket>) 181.26 605 T
2 11 Q
(Open abstract primary instantiable class) 324.14 605.67 T
0 F
(Super) 153 583.67 T
(classes:) 181.43 583.67 T
4 9.5 Q
(<abstract-socket>) 219.78 583.67 T
0 11 Q
(Server) 153 563.67 T
(-sockets listen on a speci\336ed port for connection r) 184.02 563.67 T
(equests which) 424.13 563.67 T
(come in over the network. Either the) 153 549.67 T
4 9.5 Q
(port:) 333.25 549.67 T
0 11 Q
( or) 361.75 549.67 T
4 9.5 Q
(service:) 377.6 549.67 T
0 11 Q
( keywor) 423.2 549.67 T
(d must) 462.77 549.67 T
(be supplied.) 153 535.67 T
(Keywor) 153 509.67 T
(ds:) 191.7 509.67 T
4 9.5 Q
(service:) 153 483.67 T
0 11 Q
(An instance of) 234 483.67 T
4 9.5 Q
(<string>) 306.79 483.67 T
0 11 Q
( containing an abstract name) 352.39 483.67 T
(for a service with a \322well-known\323 port, such as) 234 469.67 T
4 9.5 Q
("ftp") 465.63 469.67 T
0 11 Q
-0.49 (or) 234 455.67 P
4 9.5 Q
-1.01 ("daytime") 246.61 455.67 P
0 11 Q
-0.49 (. V) 297.91 455.67 P
-0.49 (alid names depend on the con\336guration) 309.86 455.67 P
(of the DNS. Requir) 234 441.67 T
(ed unless) 326.11 441.67 T
4 9.5 Q
(port:) 374.44 441.67 T
0 11 Q
( is supplied.) 402.94 441.67 T
4 9.5 Q
(port:) 153 415.67 T
0 11 Q
-0.31 (An instance of) 234 415.67 P
4 9.5 Q
-0.63 (<integer>) 305.87 415.67 P
0 11 Q
-0.31 ( identifying the port on which) 357.17 415.67 P
(the) 234 401.67 T
4 9.5 Q
(<server-socket>) 252.01 401.67 T
0 11 Q
( should listen for connection) 337.51 401.67 T
(r) 234 387.67 T
(equests. Requir) 238.15 387.67 T
(ed unless) 312.65 387.67 T
4 9.5 Q
(service:) 360.97 387.67 T
0 11 Q
( is supplied.) 406.57 387.67 T
4 9.5 Q
(protocol:) 153 361.67 T
0 11 Q
(An instance of) 234 361.67 T
4 9.5 Q
(<string>) 306.79 361.67 T
0 11 Q
( naming the pr) 352.39 361.67 T
(otocol. Cur-) 423.99 361.67 T
(r) 234 347.67 T
(ently) 238.15 347.67 T
4 9.5 Q
("tcp") 265.47 347.67 T
0 11 Q
( is the only supported pr) 293.97 347.67 T
(otocol. Y) 413.77 347.67 T
(ou can) 455.29 347.67 T
(cr) 234 333.67 T
(eate instances of pr) 243.03 333.67 T
(otocol-speci\336c subclasses as an) 335.9 333.67 T
(alternative to using the) 234 319.67 T
4 9.5 Q
(protocol:) 348.94 319.67 T
0 11 Q
( keywor) 400.24 319.67 T
(d. For exam-) 439.82 319.67 T
(ple,) 234 305.67 T
4 9.5 Q
(make\050<server-socket>, protocol: "tcp",) 254.58 305.67 T
0 11 Q
( \311) 471.18 305.67 T
4 9.5 Q
(\051) 484.93 305.67 T
0 11 Q
( is) 490.63 305.67 T
(equivalent to) 234 291.67 T
4 9.5 Q
(make\050<TCP-server-socket>,) 300.53 291.67 T
0 11 Q
( \311) 443.03 291.67 T
4 9.5 Q
(\051) 456.78 291.67 T
0 11 Q
(.) 462.48 291.67 T
4 9.5 Q
(make) 234 273.67 T
0 11 Q
( on) 256.8 273.67 T
4 9.5 Q
(\050<server-socket>\051) 274.71 273.67 T
0 11 Q
( r) 371.61 273.67 T
(eturns an instance of) 378.51 273.67 T
4 9.5 Q
(<tcp-server-socket>) 234 259.67 T
0 11 Q
( by default.) 342.3 259.67 T
3 12 Q
(accept) 126 225 T
2 11 Q
(Open generic function) 404.57 225.67 T
4 9 Q
(accept) 153 205 T
5 F
(server-socket) 190.8 205 T
4 F
( #key =>) 243.79 205 T
5 F
(r) 292.39 205 T
(esult) 295.73 205 T
0 11 Q
(Blocks until a connect r) 153 184.67 T
(equest is r) 265.7 184.67 T
(eceived. Returns a connected instance) 314.79 184.67 T
(of) 153 170.67 T
4 9.5 Q
(<socket>) 165.42 170.67 T
0 11 Q
(. The particular subclass of) 211.02 170.67 T
4 9.5 Q
(<socket>) 343.7 170.67 T
0 11 Q
( r) 389.3 170.67 T
(eturned depends on) 396.2 170.67 T
(the actual class of the ar) 153 156.67 T
(gument, which must be a general instance of) 268.8 156.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 12
%%Page: "9" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 675 540 702 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(3) 497.61 695.67 T
(Sockets) 511.86 695.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(9) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 9.5 Q
0 X
(<server-socket>) 135 640.67 T
0 11 Q
(. Calling) 220.5 640.67 T
4 9.5 Q
(accept) 264.17 640.67 T
0 11 Q
( on) 298.37 640.67 T
4 9.5 Q
(<tcp-server-socket>) 316.28 640.67 T
0 11 Q
( r) 424.58 640.67 T
(eturns a) 431.48 640.67 T
(connected) 135 626.67 T
4 9.5 Q
(<tcp-socket>) 187.17 626.67 T
0 11 Q
(.) 255.57 626.67 T
3 12 Q
(with-ser) 108 592 T
(ver) 145.82 592 T
(-soc) 160.42 592 T
(ket) 180.47 592 T
2 11 Q
(Macr) 457.29 592.67 T
(o) 481.12 592.67 T
4 9 Q
(with-server-socket \050) 135 572 T
5 F
(server-var) 243 572 T
4 F
( [::) 284 572 T
5 F
(server-class) 311 572 T
4 F
(],) 358.49 572 T
5 F
(keywords) 374.69 572 T
4 F
(\051) 413.69 572 T
5 F
(body) 145.8 561 T
4 F
(end;) 135 550 T
0 11 Q
-0.15 (Cr) 135 529.67 P
-0.15 (eates an instance of) 146.95 529.67 P
4 9.5 Q
-0.31 (<server-socket>) 243.11 529.67 P
0 11 Q
-0.15 (, using the \050optional\051) 328.61 529.67 P
2 F
-0.15 (server-class) 431.87 529.67 P
0 F
(ar) 135 515.67 T
(gument and keywor) 144.65 515.67 T
(d ar) 243.32 515.67 T
(guments to make the) 262.43 515.67 T
4 9.5 Q
(<server-socket>) 367.27 515.67 T
0 11 Q
(, and) 452.77 515.67 T
-0.43 (binds it to the local variable named by) 135 501.67 P
2 F
-0.43 (server-var) 320.17 501.67 P
0 F
-0.43 (. The) 364.58 501.67 P
2 F
-0.43 (body) 390.38 501.67 P
0 F
-0.43 ( is evaluated in) 411.36 501.67 P
(the context of the binding and the) 135 487.67 T
4 9.5 Q
(<server-socket>) 301.85 487.67 T
0 11 Q
( is closed after the) 387.35 487.67 T
(body is executed.) 135 473.67 T
3 12 Q
(star) 108 439 T
(t-ser) 126.24 439 T
(ver) 147.66 439 T
2 11 Q
(Macr) 457.29 439.67 T
(o) 481.12 439.67 T
4 9 Q
(start-server \050[) 135 419 T
5 F
(server-var) 216 419 T
4 F
( = ]) 257 419 T
5 F
(socket-server-instance) 278.6 419 T
4 F
(,) 368.6 419 T
5 F
(socket-var) 210.6 408 T
4 F
( [,) 253.11 408 T
5 F
(keywords) 274.71 408 T
4 F
(]\051) 313.71 408 T
5 F
(body) 145.8 397 T
4 F
(end;) 135 386 T
0 11 Q
-0.27 (Enters an in\336nite) 135 365.67 P
4 9.5 Q
-0.56 (while\050#t\051) 220.04 365.67 P
-0.56 (accept) 273.82 365.67 P
0 11 Q
-0.27 ( loop on the server socket. Each time) 308.02 365.67 P
-0.41 (accept succeeds the) 135 351.67 P
4 9.5 Q
-0.86 (<socket>) 230.99 351.67 P
0 11 Q
-0.41 ( r) 276.59 351.67 P
-0.41 (eturned fr) 283.07 351.67 P
-0.41 (om accept is bound to) 331.44 351.67 P
2 F
-0.41 (socket-var) 438.87 351.67 P
0 F
(and the) 135 337.67 T
2 F
(body) 174.38 337.67 T
0 F
( is evaluated in the context of the binding. When) 195.36 337.67 T
2 F
(body) 433.76 337.67 T
0 F
( exits,) 454.74 337.67 T
4 9.5 Q
(accept) 135 323.67 T
0 11 Q
( is called again pr) 169.2 323.67 T
(oducing a new binding for) 254.32 323.67 T
2 F
(socket-var) 386.52 323.67 T
0 F
(. The) 430.49 323.67 T
(optional keywor) 135 309.67 T
(ds ar) 215.09 309.67 T
(e passed to the call to) 238.87 309.67 T
4 9.5 Q
(accept) 345.3 309.67 T
0 11 Q
(.) 379.5 309.67 T
3 13 Q
(3.3  The <TCP-SER) 108 276.33 T
(VER-SOCKET> c) 203.16 276.33 T
(lass) 287.97 276.33 T
3 12 Q
(<tcp-ser) 108 242 T
(ver) 146.65 242 T
(-soc) 161.24 242 T
(ket>) 181.3 242 T
2 11 Q
(Class) 462.16 242.67 T
0 F
(Super) 135 220.67 T
(class:) 163.43 220.67 T
4 9.5 Q
(<server-socket>) 191.85 220.67 T
0 11 Q
-0.44 (The class of TCP server sockets. A server socket is an object which listens) 135 200.67 P
(for r) 135 186.67 T
(equests for connections fr) 155.91 186.67 T
(om the network. When accept is called on) 279.94 186.67 T
-0.21 (the server socket and a r) 135 172.67 P
-0.21 (equest for connection is detected, accept r) 251.87 172.67 P
-0.21 (eturns) 452.56 172.67 P
(a connected) 135 158.67 T
4 9.5 Q
(<socket>) 195.42 158.67 T
0 11 Q
(.) 241.02 158.67 T
(Keywor) 135 138.67 T
(ds:) 173.7 138.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 13
%%Page: "10" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(Network Library Reference Documentation) 72 695.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(10) 72 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 9.5 Q
0 X
(element-type:) 153 640.67 T
0 11 Q
(Establishes a new default for the) 234 640.67 T
4 9.5 Q
(element-type) 394.64 640.67 T
0 11 Q
( of) 463.04 640.67 T
4 9.5 Q
(<TCP-socket>) 234 626.67 T
0 11 Q
( instances r) 302.4 626.67 T
(eturned by calling) 356.62 626.67 T
4 9.5 Q
(accept) 447.8 626.67 T
0 11 Q
(with this server socket as the ar) 234 612.67 T
(gument to) 386.42 612.67 T
4 9.5 Q
(accept) 439.23 612.67 T
0 11 Q
(. This) 473.43 612.67 T
(default) 234 598.67 T
4 9.5 Q
(element-type) 271.32 598.67 T
0 11 Q
( may be overridden for any par-) 339.72 598.67 T
(ticular call to) 234 584.67 T
4 9.5 Q
(accept) 299.98 584.67 T
0 11 Q
( by using the) 334.18 584.67 T
4 9.5 Q
(element-type:) 399.65 584.67 T
0 11 Q
( key-) 473.75 584.67 T
(wor) 234 570.67 T
(d to) 253.33 570.67 T
4 9.5 Q
(accept) 275.14 570.67 T
0 11 Q
(. If no) 309.34 570.67 T
4 9.5 Q
(element-type:) 340.12 570.67 T
0 11 Q
( is speci\336ed when) 414.22 570.67 T
(the server socket is cr) 234 556.67 T
(eated,) 337.79 556.67 T
4 9.5 Q
(<byte-character>) 369.63 556.67 T
0 11 Q
( is used) 460.83 556.67 T
(as the default) 234 542.67 T
4 9.5 Q
(element-type) 302.24 542.67 T
0 11 Q
(.) 370.64 542.67 T
3 12 Q
(accept) 126 508 T
2 11 Q
(G.f. method) 452.37 508.67 T
4 9 Q
(accept) 153 488 T
5 F
(server-socket) 190.8 488 T
4 F
( :: <tcp-server-socket>, #key) 243.79 488 T
5 F
(element-type) 405.79 488 T
4 F
( =>) 457.79 488 T
5 F
(connected-socket) 153 477 T
0 11 Q
(This method on) 153 456.67 T
4 9.5 Q
(accept) 232.37 456.67 T
0 11 Q
( r) 266.57 456.67 T
(eturns a connected instance of) 273.46 456.67 T
4 9.5 Q
(<tcp-socket>) 422.61 456.67 T
0 11 Q
(.) 491.01 456.67 T
(The) 153 442.67 T
4 9.5 Q
(element-type:) 174.16 442.67 T
0 11 Q
( keywor) 248.26 442.67 T
(d contr) 287.84 442.67 T
(ols the element type of the) 322.34 442.67 T
4 9.5 Q
(<tcp-) 453.18 442.67 T
(socket>) 153 428.67 T
0 11 Q
( \050str) 192.9 428.67 T
(eam\051 r) 211.71 428.67 T
(eturned fr) 242.75 428.67 T
(om) 291.54 428.67 T
4 9.5 Q
(accept) 310.01 428.67 T
0 11 Q
(. If the keywor) 344.21 428.67 T
(d is not supplied,) 414.66 428.67 T
(the default value used is) 153 414.67 T
4 9.5 Q
(#f) 274.55 414.67 T
0 11 Q
(.) 285.95 414.67 T
3 13 Q
(3.4  The <SOCKET> c) 126 381.33 T
(lass) 234.24 381.33 T
3 12 Q
(soc) 126 347 T
(ket) 142.78 347 T
2 11 Q
(Open abstract fr) 344.5 347.67 T
(ee instantiable class) 416.81 347.67 T
0 F
(Super) 153 325.67 T
(classes:) 181.43 325.67 T
4 9.5 Q
(<abstract-socket>) 219.78 325.67 T
0 11 Q
(,) 316.68 325.67 T
4 9.5 Q
(<external-stream>) 322.18 325.67 T
0 11 Q
(The class of general client sockets. All client sockets ar) 153 305.67 T
(e str) 415.67 305.67 T
(eams.) 436.08 305.67 T
(Keywor) 153 285.67 T
(ds:) 191.7 285.67 T
4 9.5 Q
(direction:) 153 259.67 T
0 11 Q
(Speci\336es the dir) 234 259.67 T
(ection of the str) 311.15 259.67 T
(eam. It must be one of) 386.08 259.67 T
4 9.5 Q
(#"input") 234 245.67 T
0 11 Q
(,) 279.6 245.67 T
4 9.5 Q
(#"output") 285.1 245.67 T
0 11 Q
(, and) 336.4 245.67 T
4 9.5 Q
("#input-output") 363.27 245.67 T
0 11 Q
(. This key-) 448.77 245.67 T
(wor) 234 231.67 T
(d is an inherited str) 253.33 231.67 T
(eams class keywor) 347.61 231.67 T
(d. See the) 437.99 231.67 T
(Str) 234 217.67 T
(eams library documentation in the) 247.51 217.67 T
2 F
(System and I/O) 417.96 217.67 T
0 F
(library r) 234 203.67 T
(efer) 273.69 203.67 T
(ence for a full description.) 292.04 203.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 14
%%Page: "11" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 675 540 702 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(3) 497.61 695.67 T
(Sockets) 511.86 695.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(1) 531.33 100 T
(1) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 9.5 Q
0 X
(element-type:) 135 640.67 T
0 11 Q
(An instance of) 216 640.67 T
4 9.5 Q
(<class>) 288.79 640.67 T
0 11 Q
(. Useful values ar) 328.69 640.67 T
(e) 412.8 640.67 T
4 9.5 Q
(<byte-) 420.82 640.67 T
(character>) 216 626.67 T
0 11 Q
( and) 273 626.67 T
4 9.5 Q
(<byte>) 297.12 626.67 T
0 11 Q
(. This keywor) 331.32 626.67 T
(d is an inherited) 397.41 626.67 T
(str) 216 612.67 T
(eams class keywor) 228.4 612.67 T
(d. See the Str) 318.78 612.67 T
(eams library docu-) 381.58 612.67 T
(mentation in the) 216 598.67 T
2 F
(System and I/O) 298.77 598.67 T
0 F
( library r) 368.65 598.67 T
(efer) 411.08 598.67 T
(ence for a) 429.43 598.67 T
(full description.) 216 584.67 T
3 13 Q
(3.5) 108 551.33 T
(The <B) 128.75 551.33 T
(UFFERED-SOCKET> c) 164.5 551.33 T
(lass) 277.73 551.33 T
3 12 Q
(<b) 108 517 T
(uff) 119.58 517 T
(ered-soc) 132.06 517 T
(ket>) 172.9 517 T
2 11 Q
(Class) 462.16 517.67 T
0 F
(Super) 135 495.67 T
(classes:) 163.43 495.67 T
4 9.5 Q
(<socket>) 201.78 495.67 T
0 11 Q
(,) 247.38 495.67 T
4 9.5 Q
(<double-buffered-stream>) 252.88 495.67 T
0 11 Q
(Socket str) 135 475.67 T
(eams whose elements ar) 181.78 475.67 T
(e bytes or characters. These inherit) 299.71 475.67 T
(buf) 135 461.67 T
(fering pr) 151.18 461.67 T
(otocols and the implications of) 193.68 461.67 T
4 9.5 Q
(read) 345.51 461.67 T
0 11 Q
(,) 368.31 461.67 T
4 9.5 Q
(write) 373.81 461.67 T
0 11 Q
(,) 402.31 461.67 T
4 9.5 Q
(read-element) 407.81 461.67 T
0 11 Q
(,) 476.21 461.67 T
4 9.5 Q
(write-element) 135 447.67 T
0 11 Q
(,) 209.1 447.67 T
4 9.5 Q
(force-output) 214.6 447.67 T
0 11 Q
( and suchlike methods fr) 283 447.67 T
(om) 403.16 447.67 T
4 9.5 Q
(<double-) 421.63 447.67 T
(buffered-stream>) 135 433.67 T
0 11 Q
(.) 226.2 433.67 T
(Keywor) 135 413.67 T
(ds:) 173.7 413.67 T
4 9.5 Q
(force-output-before-read?:) 135 387.67 T
0 11 Q
(An instance of) 216 369.67 T
4 9.5 Q
(<boolean>) 288.79 369.67 T
0 11 Q
(. Defaults value:) 340.09 369.67 T
4 9.5 Q
(#t) 421.68 369.67 T
0 11 Q
(. The) 433.08 369.67 T
(methods which implement the str) 216 355.67 T
(eam r) 380.04 355.67 T
(eading pr) 407.42 355.67 T
(oto-) 454.14 355.67 T
(cols \050) 216 341.67 T
4 9.5 Q
(read) 241.17 341.67 T
0 11 Q
(,) 263.97 341.67 T
4 9.5 Q
(read-line) 269.47 341.67 T
0 11 Q
(,) 320.77 341.67 T
4 9.5 Q
(read-element) 326.27 341.67 T
0 11 Q
( and so on\051 for) 394.67 341.67 T
(instances of) 216 327.67 T
4 9.5 Q
(<socket>) 275.74 327.67 T
0 11 Q
( call) 321.34 327.67 T
4 9.5 Q
(force-output) 343.63 327.67 T
0 11 Q
( by default) 412.03 327.67 T
(befor) 216 313.67 T
(e blocking. This is to ensur) 241.17 313.67 T
(e that any pending) 370.53 313.67 T
(output has been sent to the peer befor) 216 299.67 T
(e the socket) 399.33 299.67 T
(blocks waiting to r) 216 285.67 T
(ead data sent by the peer) 306.12 285.67 T
(. This corr) 426.73 285.67 T
(e-) 475.37 285.67 T
(sponds to the expected, usual behavior of single-) 216 271.67 T
(thr) 216 257.67 T
(eaded client sockets and avoids deadlock in usual) 230.13 257.67 T
(cases. Multi-thr) 216 243.67 T
(eaded applications, particularly appli-) 291.31 243.67 T
-0.17 (cations wher) 216 229.67 P
-0.17 (e one thr) 277.81 229.67 P
-0.17 (ead is r) 320.05 229.67 P
-0.17 (eading and another thr) 354.71 229.67 P
-0.17 (ead) 465.93 229.67 P
(is writing to the same socket, may wish to inhibit the) 216 215.67 T
(default) 216 201.67 T
4 9.5 Q
(force-output) 253.32 201.67 T
0 11 Q
(. If the socket is cr) 321.72 201.67 T
(eated with) 408.27 201.67 T
4 9.5 Q
-1.43 (force-output-before-read?:) 216 187.67 P
0 11 Q
-0.69 ( as) 364.2 187.67 P
4 9.5 Q
-1.43 (#f) 378.49 187.67 P
0 11 Q
-0.69 (,) 389.89 187.67 P
4 9.5 Q
-1.43 (force-output) 394.7 187.67 P
0 11 Q
-0.69 ( will) 463.1 187.67 P
(not be called befor) 216 173.67 T
(e the r) 305.54 173.67 T
(ead functions block.) 335.71 173.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 15
%%Page: "12" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(Network Library Reference Documentation) 72 695.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(12) 72 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 13 Q
0 X
(3.6  The <TCP-SOCKET> c) 126 639.33 T
(lass) 259.11 639.33 T
0 11 Q
(The class of TCP client sockets.) 126 619.67 T
3 12 Q
(<tcp-soc) 126 585 T
(ket>) 166.56 585 T
2 11 Q
(Class) 480.16 585.67 T
0 F
(Super) 153 563.67 T
(classes:) 181.43 563.67 T
4 9.5 Q
(<buffered-socket>) 219.78 563.67 T
0 11 Q
(The class of TCP client sockets.) 153 543.67 T
(Keywor) 153 517.67 T
(ds:) 191.7 517.67 T
(Of the keywor) 153 497.67 T
(ds below) 222.89 497.67 T
(,) 265.75 497.67 T
4 9.5 Q
(host:) 271.25 497.67 T
0 11 Q
( and one of either) 299.75 497.67 T
4 9.5 Q
(service:) 387.54 497.67 T
0 11 Q
( or) 433.14 497.67 T
4 9.5 Q
(port:) 448.99 497.67 T
0 11 Q
( ar) 477.49 497.67 T
(e) 489.89 497.67 T
(r) 153 483.67 T
(equir) 157.15 483.67 T
(ed.) 182.56 483.67 T
4 9.5 Q
(host:) 153 457.67 T
0 11 Q
(An instance of) 234 457.67 T
4 9.5 Q
(<internet-address>) 306.79 457.67 T
0 11 Q
( or) 409.39 457.67 T
4 9.5 Q
(<string>) 425.24 457.67 T
0 11 Q
(. The) 470.84 457.67 T
-0.41 (r) 234 443.67 P
-0.41 (emote host to connect to. The) 238.15 443.67 P
4 9.5 Q
-0.85 (<string>) 380.46 443.67 P
0 11 Q
-0.41 ( may be either a) 426.06 443.67 P
(host name or a pr) 234 429.67 T
(esentation-form Internet addr) 319.15 429.67 T
(ess.) 463.58 429.67 T
(Requir) 234 415.67 T
(ed.) 266.76 415.67 T
4 9.5 Q
(service:) 153 389.67 T
0 11 Q
(An instance of) 234 389.67 T
4 9.5 Q
(<string>) 306.79 389.67 T
0 11 Q
(. A) 352.39 389.67 T
4 9.5 Q
(<string>) 369.2 389.67 T
0 11 Q
( containing an) 414.8 389.67 T
(abstract name for a service with a \322well-known\322 port,) 234 375.67 T
-0.49 (such as) 234 361.67 P
4 9.5 Q
-1.02 ("ftp") 271.27 361.67 P
0 11 Q
-0.49 ( or) 299.77 361.67 P
4 9.5 Q
-1.02 ("daytime") 314.64 361.67 P
0 11 Q
-0.49 (. V) 365.93 361.67 P
-0.49 (alid names depend on the) 377.87 361.67 P
(con\336guration of the DNS. Requir) 234 347.67 T
(ed unless) 394.6 347.67 T
4 9.5 Q
(port:) 442.92 347.67 T
0 11 Q
( is) 471.42 347.67 T
(supplied.) 234 333.67 T
4 9.5 Q
(protocol:) 153 307.67 T
0 11 Q
(An instance of) 234 307.67 T
4 9.5 Q
(<string>) 306.79 307.67 T
0 11 Q
( naming the pr) 352.39 307.67 T
(otocol. Cur-) 423.99 307.67 T
(r) 234 293.67 T
(ently) 238.15 293.67 T
4 9.5 Q
("tcp") 265.47 293.67 T
0 11 Q
( is the only supported pr) 293.97 293.67 T
(otocol. Y) 413.77 293.67 T
(ou can) 455.29 293.67 T
(cr) 234 279.67 T
(eate instances of pr) 243.03 279.67 T
(otocol-speci\336c subclasses as an) 335.9 279.67 T
(alternative to using the) 234 265.67 T
4 9.5 Q
(protocol:) 348.94 265.67 T
0 11 Q
( keywor) 400.24 265.67 T
(d. For exam-) 439.82 265.67 T
(ple) 234 251.67 T
4 9.5 Q
(make\050<socket>, protocol: "tcp",) 251.83 251.67 T
0 11 Q
( \311) 428.53 251.67 T
4 9.5 Q
(\051) 442.28 251.67 T
0 11 Q
( is equiva-) 447.98 251.67 T
(lent to) 234 237.67 T
4 9.5 Q
(make\050<TCP-socket>,) 267.55 237.67 T
0 11 Q
( \311) 370.15 237.67 T
4 9.5 Q
(\051) 383.9 237.67 T
0 11 Q
(.) 389.6 237.67 T
4 9.5 Q
(make) 397.85 237.67 T
0 11 Q
( on) 420.65 237.67 T
4 9.5 Q
(<socket>) 438.56 237.67 T
0 11 Q
-0.14 (r) 234 223.67 P
-0.14 (eturns an instance of) 238.15 223.67 P
4 9.5 Q
-0.29 (<tcp-server-socket>) 340.96 223.67 P
0 11 Q
-0.14 ( by default.) 449.26 223.67 P
4 9.5 Q
(port:) 153 197.67 T
0 11 Q
(An instance of) 234 197.67 T
4 9.5 Q
(<integer>) 306.79 197.67 T
0 11 Q
( r) 358.09 197.67 T
(epr) 364.98 197.67 T
(esenting the r) 381.01 197.67 T
(emote port) 446.82 197.67 T
(to connect to. Requir) 234 183.67 T
(ed unless) 334.38 183.67 T
4 9.5 Q
(service:) 382.7 183.67 T
0 11 Q
( is supplied.) 428.3 183.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 16
%%Page: "13" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 675 540 702 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(4) 459.17 695.67 T
(Socket conditions) 473.42 695.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(13) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 9.5 Q
0 X
(element-type:) 135 640.67 T
0 11 Q
(An instance of) 216 640.67 T
4 9.5 Q
(<class>) 288.79 640.67 T
0 11 Q
(. Useful values for) 328.69 640.67 T
4 9.5 Q
(<tcp-) 419.92 640.67 T
(streams>) 216 626.67 T
0 11 Q
( ar) 261.6 626.67 T
(e) 274 626.67 T
4 9.5 Q
(<byte-character>) 282.02 626.67 T
0 11 Q
( and) 373.22 626.67 T
4 9.5 Q
(<byte>) 397.34 626.67 T
0 11 Q
(. This key-) 431.54 626.67 T
(wor) 216 612.67 T
(d is an inherited str) 235.33 612.67 T
(eams class keywor) 329.61 612.67 T
(d. See the) 419.99 612.67 T
(Str) 216 598.67 T
(eams library documentation in the) 229.51 598.67 T
2 F
(System and I/O) 399.96 598.67 T
0 F
(library r) 216 584.67 T
(efer) 255.69 584.67 T
(ence for a full description.) 274.04 584.67 T
3 12 Q
(remote-por) 108 550 T
(t) 160.13 550 T
2 11 Q
(Open generic function) 386.57 550.67 T
4 9 Q
(remote-port) 135 530 T
5 F
(socket) 199.8 530 T
4 F
( =>) 225.3 530 T
5 F
(port-number) 246.9 530 T
0 11 Q
(Returns the r) 135 509.67 T
(emote port number for a) 198.15 509.67 T
4 9.5 Q
(<socket>) 320.25 509.67 T
0 11 Q
(. The value r) 365.85 509.67 T
(eturned is) 426.23 509.67 T
(an instance of) 135 495.67 T
4 9.5 Q
(<integer>) 204.73 495.67 T
0 11 Q
(.) 256.03 495.67 T
3 12 Q
(remote-host) 108 461 T
2 11 Q
(Open generic function) 386.57 461.67 T
4 9 Q
(remote-host) 135 441 T
5 F
(socket) 199.8 441 T
4 F
( =>) 225.3 441 T
5 F
(r) 246.9 441 T
(emote-host-addr) 250.24 441 T
(ess) 317.09 441 T
0 11 Q
(Returns the r) 135 420.67 T
(emote host for a) 198.15 420.67 T
4 9.5 Q
(<socket>) 279.17 420.67 T
0 11 Q
(. The value r) 324.77 420.67 T
(eturned is an) 385.14 420.67 T
(instance of) 135 406.67 T
4 9.5 Q
(<internet-address>) 190.08 406.67 T
0 11 Q
(.) 292.68 406.67 T
3 16 Q
(4) 108 371.33 T
(Soc) 122.59 371.33 T
(ket conditions) 146.42 371.33 T
0 11 Q
(This section lists the socket condition classes in the Network library) 108 350.67 T
(.) 434.94 350.67 T
3 13 Q
(4.1  <soc) 108 317.33 T
(ket-condition>) 153.15 317.33 T
0 11 Q
(All socket conditions ar) 108 297.67 T
(e packaged into general instances of) 222.46 297.67 T
4 9.5 Q
(<socket-condi-) 400.48 297.67 T
(tion>) 108 283.67 T
0 11 Q
(. Some conditions ar) 136.5 283.67 T
(e consider) 234.98 283.67 T
(ed r) 284.3 283.67 T
(ecoverable and others not.) 303.18 283.67 T
3 12 Q
(<soc) 108 249 T
(ket-condition>) 130.52 249 T
2 11 Q
(Condition) 441.38 249.67 T
0 F
(Super) 135 227.67 T
(classes:) 163.43 227.67 T
4 9.5 Q
(<simple-condition>) 201.78 227.67 T
0 11 Q
(The class of socket conditions. It inherits the) 135 207.67 T
4 9.5 Q
(format-string:) 351.96 207.67 T
0 11 Q
( and) 431.76 207.67 T
4 9.5 Q
(format-arguments:) 135 193.67 T
0 11 Q
( keywor) 231.9 193.67 T
(ds fr) 271.48 193.67 T
(om) 293.42 193.67 T
4 9.5 Q
(<simple-condition>) 311.89 193.67 T
0 11 Q
(.) 414.49 193.67 T
(Slots:) 135 173.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 17
%%Page: "14" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(Network Library Reference Documentation) 72 695.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(14) 72 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 9.5 Q
0 X
(socket-condition-details) 153 640.67 T
0 11 Q
(Most socket conditions originate in err) 234 622.67 T
(or r) 421 622.67 T
(eturn codes) 438.25 622.67 T
(fr) 234 608.67 T
(om Harlequin Dylan\325s W) 241.81 608.67 T
(insock2 library) 363.49 608.67 T
(, an FFI inter-) 434.58 608.67 T
(face to the native socket library W) 234 594.67 T
(insock2.) 398.55 594.67 T
(The) 234 576.67 T
4 9.5 Q
(socket-condition-details) 255.16 576.67 T
0 11 Q
( slot pr) 391.96 576.67 T
(ovides informa-) 425.68 576.67 T
(tion about the low-level failur) 234 562.67 T
(e which was the sour) 378.8 562.67 T
(ce) 481.18 562.67 T
(for the condition. In most cases this slot will hold an) 234 548.67 T
(instance of) 234 534.67 T
4 9.5 Q
(<socket-accessor-condition>) 289.08 534.67 T
0 11 Q
(, below) 442.98 534.67 T
(.) 477.2 534.67 T
(When cr) 234 516.67 T
(eating general instances of) 274.85 516.67 T
4 9.5 Q
(<socket-) 406.27 516.67 T
(condition>) 234 502.67 T
0 11 Q
(, you can use the) 291 502.67 T
4 9.5 Q
(details:) 374.86 502.67 T
0 11 Q
( keywor) 420.46 502.67 T
(d to set) 460.04 502.67 T
(the value for this slot.) 234 488.67 T
3 13 Q
(4.2  <soc) 126 455.33 T
(ket-err) 171.15 455.33 T
(or>) 204.13 455.33 T
0 11 Q
(The class) 126 435.67 T
4 9.5 Q
(<socket-error>) 172.83 435.67 T
0 11 Q
( is the super) 252.63 435.67 T
(class of all unr) 311.32 435.67 T
(ecoverable socket condi-) 381.24 435.67 T
(tions.) 126 421.67 T
3 12 Q
(<soc) 126 387 T
(ket-err) 148.52 387 T
(or>) 178.97 387 T
2 11 Q
(Condition) 459.38 387.67 T
0 F
(Super) 153 365.67 T
(classes:) 181.43 365.67 T
4 9.5 Q
(<socket-condition>) 219.78 365.67 T
0 11 Q
(The class of socket conditions fr) 153 345.67 T
(om which no r) 307.15 345.67 T
(ecovery is possible.) 377.74 345.67 T
3 13 Q
(4.2.1  <internal-soc) 126 312.33 T
(ket-err) 222.1 312.33 T
(or>) 255.08 312.33 T
0 11 Q
(The class) 126 292.67 T
4 9.5 Q
(<internal-socket-error>) 172.83 292.67 T
0 11 Q
( is the class of unexpected socket err) 303.93 292.67 T
(ors.) 479.49 292.67 T
3 12 Q
(<internal-soc) 126 258 T
(ket-err) 187.34 258 T
(or>) 217.79 258 T
2 11 Q
(Condition) 459.38 258.67 T
0 F
(Super) 153 236.67 T
(classes:) 181.43 236.67 T
4 9.5 Q
(<socket-error>) 219.78 236.67 T
0 11 Q
-0.49 (The class of unexpected err) 153 216.67 P
-0.49 (ors fr) 283.11 216.67 P
-0.49 (om Harlequin Dylan\325s W) 308.19 216.67 P
-0.49 (insock2 library) 428.39 216.67 P
-0.49 (,) 498.99 216.67 P
(an FFI interface to the native socket library W) 153 202.67 T
(insock2.) 373.69 202.67 T
(Inspect the contents of the) 153 182.67 T
4 9.5 Q
(socket-) 282.86 182.67 T
(condition-details) 322.76 182.67 T
0 11 Q
( slot for mor) 419.65 182.67 T
(e) 479.24 182.67 T
(information.) 153 168.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 18
%%Page: "15" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 675 540 702 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(4) 459.17 695.67 T
(Socket conditions) 473.42 695.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(15) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 13 Q
0 X
(4.3  <reco) 108 639.33 T
(verab) 157.3 639.33 T
(le-soc) 185.65 639.33 T
(ket-condition>) 216.26 639.33 T
0 11 Q
-0.26 (The) 108 619.67 P
4 9.5 Q
-0.54 (<recoverable-socket-condition>) 128.9 619.67 P
0 11 Q
-0.26 ( class is the general class of socket con-) 299.9 619.67 P
(ditions for which an application may be able to take some r) 108 605.67 T
(emedial action.) 395.31 605.67 T
3 12 Q
(<reco) 108 571 T
(verab) 134.35 571 T
(le-soc) 160.52 571 T
(ket-condition>) 188.78 571 T
2 11 Q
(Condition) 441.38 571.67 T
0 F
(Super) 135 549.67 T
(classes:) 163.43 549.67 T
4 9.5 Q
(<socket-condition>) 201.78 549.67 T
0 11 Q
(The general class of socket conditions for which an application may be) 135 529.67 T
(able to take some r) 135 515.67 T
(emedial action.) 225.91 515.67 T
(For instance, a web br) 135 495.67 T
(owser r) 241.38 495.67 T
(eceiving such conditions as) 277.74 495.67 T
4 9.5 Q
(<connection-) 413.11 495.67 T
(refused>) 135 481.67 T
0 11 Q
( or) 180.6 481.67 T
4 9.5 Q
(<host-not-found>) 196.45 481.67 T
0 11 Q
( \050see below\051 would normally expect to) 287.65 481.67 T
(r) 135 467.67 T
(eport those conditions to the user and continue with some other con-) 139.15 467.67 T
(nection r) 135 453.67 T
(equest fr) 177.65 453.67 T
(om the user) 219.79 453.67 T
(, while a server r) 276.36 453.67 T
(eceiving a) 357.11 453.67 T
4 9.5 Q
(<connection-) 408.67 453.67 T
-0.34 (closed>) 135 439.67 P
0 11 Q
-0.16 ( condition fr) 174.9 439.67 P
-0.16 (om a connected) 234.29 439.67 P
4 9.5 Q
-0.34 (<socket>) 312.7 439.67 P
0 11 Q
-0.16 ( would pr) 358.3 439.67 P
-0.16 (obably close the) 405.97 439.67 P
4 9.5 Q
(<socket>) 135 425.67 T
0 11 Q
( and continue to handle other r) 180.6 425.67 T
(equests for connections.) 330.95 425.67 T
3 13 Q
(4.3.1  <netw) 108 392.33 T
(ork-not-responding>) 167.96 392.33 T
3 12 Q
(<netw) 108 358 T
(ork-not-responding>) 135.98 358 T
2 11 Q
(Condition) 441.38 358.67 T
0 F
(Super) 135 336.67 T
(classes:) 163.43 336.67 T
4 9.5 Q
(<recoverable-socket-condition>) 201.78 336.67 T
0 11 Q
(The network \321 pr) 135 316.67 T
(obably a local network \321 is down. T) 224.32 316.67 T
(ry again later) 401.42 316.67 T
(.) 465.19 316.67 T
3 13 Q
(4.3.2  <in) 108 283.33 T
(v) 152.93 283.33 T
(alid-ad) 158.66 283.33 T
(dress>) 192.93 283.33 T
3 12 Q
(<in) 108 249 T
(v) 122.11 249 T
(alid-ad) 127.4 249 T
(dress>) 159.04 249 T
2 11 Q
(Condition) 441.38 249.67 T
0 F
(Super) 135 227.67 T
(classes:) 163.43 227.67 T
4 9.5 Q
(<recoverable-socket-condition>) 201.78 227.67 T
0 11 Q
(A badly formed addr) 135 207.67 T
(ess string has been passed to a function trying to) 238.24 207.67 T
(make an) 135 193.67 T
4 9.5 Q
(<internet-address>) 179 193.67 T
0 11 Q
(.) 281.6 193.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 19
%%Page: "16" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(Network Library Reference Documentation) 72 695.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(16) 72 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 13 Q
0 X
(4.3.3  <host-not-f) 126 639.33 T
(ound>) 211.4 639.33 T
3 12 Q
(<host-not-f) 126 605 T
(ound>) 177.47 605 T
2 11 Q
(Condition) 459.38 605.67 T
0 F
(Super) 153 583.67 T
(classes:) 181.43 583.67 T
4 9.5 Q
(<recoverable-socket-condition>) 219.78 583.67 T
0 11 Q
-0.23 (The Domain Name Server \050DNS\051 cannot r) 153 563.67 P
-0.23 (esolve the named host or inter-) 354.42 563.67 P
(net addr) 153 549.67 T
(ess. T) 194.1 549.67 T
(ry again with a dif) 219.95 549.67 T
(fer) 309.38 549.67 T
(ent \050corr) 322.45 549.67 T
(ect\051 name or addr) 363.51 549.67 T
(ess.) 449.48 549.67 T
3 13 Q
(4.3.4  <ser) 126 516.33 T
(ver) 177.97 516.33 T
(-not-responding>) 193.78 516.33 T
3 12 Q
(<ser) 126 482 T
(ver) 146.62 482 T
(-not-responding>) 161.21 482 T
2 11 Q
(Condition) 459.38 482.67 T
0 F
(Super) 153 460.67 T
(classes:) 181.43 460.67 T
4 9.5 Q
(<recoverable-socket-condition>) 219.78 460.67 T
0 11 Q
(The Domain Name Server \050DNS\051 did not r) 153 440.67 T
(espond or r) 358.38 440.67 T
(eturned an ambig-) 414.05 440.67 T
(uous r) 153 426.67 T
(esult. T) 183.83 426.67 T
(ry again.) 218.44 426.67 T
3 13 Q
(4.3.5  <host-unreac) 126 393.33 T
(hab) 222.79 393.33 T
(le>) 241.65 393.33 T
3 12 Q
(<host-unreac) 126 359 T
(hab) 187.98 359 T
(le>) 205.39 359 T
2 11 Q
(Condition) 459.38 359.67 T
0 F
(Super) 153 337.67 T
(classes:) 181.43 337.67 T
4 9.5 Q
(<recoverable-socket-condition>) 219.78 337.67 T
0 11 Q
(The r) 153 317.67 T
(emote host cannot be r) 178.31 317.67 T
(eached fr) 288.09 317.67 T
(om this host at this time.) 332.7 317.67 T
3 13 Q
(4.3.6  <soc) 126 284.33 T
(ket-c) 180.04 284.33 T
(losed>) 204.73 284.33 T
3 12 Q
(<soc) 126 250 T
(ket-c) 148.52 250 T
(losed>) 171.31 250 T
2 11 Q
(Condition) 459.38 250.67 T
0 F
(Super) 153 228.67 T
(classes:) 181.43 228.67 T
4 9.5 Q
(<recoverable-socket-condition>) 219.78 228.67 T
0 11 Q
(The socket or server socket has been closed.) 153 208.67 T
-0.32 (Most operations on closed instances of) 153 188.67 P
4 9.5 Q
-0.66 (<TCP-socket>) 341.24 188.67 P
0 11 Q
-0.32 ( r) 409.64 188.67 P
-0.32 (eturn instances of) 416.22 188.67 P
4 9.5 Q
-1.08 (<stream-closed-error>) 153 174.67 P
0 11 Q
-0.52 ( \050fr) 272.7 174.67 P
-0.52 (om the Str) 286.4 174.67 P
-0.52 (eams library\051 rather than instances) 335.35 174.67 P
(of) 153 160.67 T
4 9.5 Q
(<socket-closed>) 165.42 160.67 T
0 11 Q
(.) 250.92 160.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 20
%%Page: "17" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 675 540 702 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(4) 459.17 695.67 T
(Socket conditions) 473.42 695.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(17) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 13 Q
0 X
(4.3.7  <connection-failed>) 108 639.33 T
3 12 Q
(<connection-failed>) 108 605 T
2 11 Q
(Condition) 441.38 605.67 T
0 F
(Super) 135 583.67 T
(classes:) 163.43 583.67 T
4 9.5 Q
(<recoverable-socket-condition>) 201.78 583.67 T
0 11 Q
(The attempt to connect to the r) 135 563.67 T
(emote host was not successful. Connec-) 283.79 563.67 T
(tion failed for one of the following r) 135 549.67 T
(easons: because the connect r) 308.73 549.67 T
(equest) 450.13 549.67 T
(timed out or because it was r) 135 535.67 T
(efused, or because the r) 275.14 535.67 T
(emote host could) 389.17 535.67 T
(not be r) 135 521.67 T
(eached.) 171.99 521.67 T
3 13 Q
(4.3.8  <connection-c) 108 488.33 T
(losed>) 210.01 488.33 T
3 12 Q
(<connection-c) 108 454 T
(losed>) 174.8 454 T
2 11 Q
(Condition) 441.38 454.67 T
0 F
(Super) 135 432.67 T
(classes:) 163.43 432.67 T
4 9.5 Q
(<recoverable-socket-condition>) 201.78 432.67 T
0 11 Q
-0.46 (The connection to the r) 135 412.67 P
-0.46 (emote host has been br) 244.61 412.67 P
-0.46 (oken. The socket should be) 354.09 412.67 P
(closed. T) 135 398.67 T
(o try again, open a new socket.) 176.98 398.67 T
3 13 Q
(4.3.9  <ad) 108 365.33 T
(dress-in-use>) 156.22 365.33 T
3 12 Q
(<ad) 108 331 T
(dress-in-use>) 125.15 331 T
2 11 Q
(Condition) 441.38 331.67 T
0 F
(Super) 135 309.67 T
(classes:) 163.43 309.67 T
4 9.5 Q
(<recoverable-socket-condition>) 201.78 309.67 T
0 11 Q
(A pr) 135 289.67 T
(ocess on the machine is alr) 157.07 289.67 T
(eady bound to the same fully quali\336ed) 286.05 289.67 T
(addr) 135 275.67 T
(ess. This condition pr) 158.09 275.67 T
(obably occurr) 261.86 275.67 T
(ed because you wer) 328.5 275.67 T
(e trying to) 424.39 275.67 T
(use a port with an active server alr) 135 261.67 T
(eady installed, or a pr) 302.74 261.67 T
(ocess crashed) 408.45 261.67 T
(without closing a socket.) 135 247.67 T
3 13 Q
(4.3.10  <b) 108 214.33 T
(loc) 156.22 214.33 T
(king-call-interrupted>) 171.43 214.33 T
3 12 Q
(<b) 108 180 T
(loc) 119.68 180 T
(king-call-interrupted>) 133.72 180 T
2 11 Q
(Condition) 441.38 180.67 T
0 F
(Super) 135 158.67 T
(classes:) 163.43 158.67 T
4 9.5 Q
(<recoverable-socket-condition>) 201.78 158.67 T
0 11 Q
(A blocking socket call, like) 135 138.67 T
4 9.5 Q
(read) 267.17 138.67 T
0 11 Q
(,) 289.96 138.67 T
4 9.5 Q
(write) 295.46 138.67 T
0 11 Q
( or) 323.96 138.67 T
4 9.5 Q
(accept) 339.82 138.67 T
0 11 Q
(, was interr) 374.02 138.67 T
(upted.) 428.66 138.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 21
%%Page: "18" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(Network Library Reference Documentation) 72 695.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(18) 72 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 13 Q
0 X
(4.3.11  <out-of-resour) 126 639.33 T
(ces>) 234.51 639.33 T
3 12 Q
(<out-of-resour) 126 605 T
(ces>) 193.33 605 T
2 11 Q
(Condition) 459.38 605.67 T
0 F
(Super) 153 583.67 T
(classes:) 181.43 583.67 T
4 9.5 Q
(<recoverable-socket-condition>) 219.78 583.67 T
0 11 Q
-0.32 (The implementation-dependent limit on the number of open sockets has) 153 563.67 P
(been r) 153 549.67 T
(eached. Y) 182.92 549.67 T
(ou must close some sockets befor) 228.79 549.67 T
(e you can open any) 389.81 549.67 T
(mor) 153 535.67 T
(e. The limits for W) 172.87 535.67 T
(indows NT \050non-server machines\051 and W) 262.27 535.67 T
(indows) 463.04 535.67 T
(95 ar) 153 521.67 T
(e particularly small.) 176.4 521.67 T
3 13 Q
(4.4  <soc) 126 488.33 T
(ket-accessor) 171.15 488.33 T
(-err) 236.14 488.33 T
(or>) 253.71 488.33 T
3 12 Q
(<soc) 126 454 T
(ket-accessor) 148.52 454 T
(-err) 208.51 454 T
(or>) 224.74 454 T
2 11 Q
(Condition) 459.38 454.67 T
0 F
(Super) 153 432.67 T
(classes:) 181.43 432.67 T
4 9.5 Q
(<socket-error>) 219.78 432.67 T
0 11 Q
(An implementation-speci\336c err) 153 412.67 T
(or fr) 304.71 412.67 T
(om the C-FFI interface to the native) 325.62 412.67 T
-0.07 (socket library) 153 398.67 P
-0.07 (. Usually instances of this class these appear in the) 217.78 398.67 P
4 9.5 Q
-0.14 (socket-) 464.1 398.67 P
(condition-details) 153 384.67 T
0 11 Q
( slot of another) 249.9 384.67 T
4 9.5 Q
(<socket-condition>) 325.54 384.67 T
0 11 Q
(.) 428.14 384.67 T
3 13 Q
(4.4.1  <win32-soc) 126 351.33 T
(ket-err) 213.22 351.33 T
(or>) 246.2 351.33 T
3 12 Q
(<win32-soc) 126 317 T
(ket-err) 179.15 317 T
(or>) 209.59 317 T
2 11 Q
(Condition) 459.38 317.67 T
0 F
(Super) 153 295.67 T
(classes:) 181.43 295.67 T
4 9.5 Q
(<socket-accessor-error>) 219.78 295.67 T
0 11 Q
-0.47 (A W) 153 275.67 P
-0.47 (in32-speci\336c err) 174.23 275.67 P
-0.47 (or fr) 250.71 275.67 P
-0.47 (om the W) 271.15 275.67 P
-0.47 (insock2 library) 317.08 275.67 P
-0.47 (, a C-FFI interface to the) 387.7 275.67 P
(native socket library W) 153 261.67 T
(insock2. A function in the FFI library has) 265.13 261.67 T
(r) 153 247.67 T
(eturned an err) 157.15 247.67 T
(or r) 226.54 247.67 T
(eturn code.) 243.78 247.67 T
(Slots:) 153 227.67 T
4 9.5 Q
(WSA-numeric-error-code) 153 201.67 T
0 11 Q
(Contains the numeric err) 234 183.67 T
(or code that was r) 355.27 183.67 T
(eturned. An) 442.07 183.67 T
(instance of) 234 169.67 T
4 9.5 Q
(<integer>) 289.08 169.67 T
0 11 Q
(.) 340.38 169.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 22
%%Page: "19" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 675 540 702 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(4) 459.17 695.67 T
(Socket conditions) 473.42 695.67 T
108 81 540 117 R
7 X
V
1 9 Q
0 X
(19) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 9.5 Q
0 X
(WSA-symbolic-error-code) 135 640.67 T
0 11 Q
(Contains an instance of) 216 622.67 T
4 9.5 Q
(<string>) 332.04 622.67 T
0 11 Q
( giving the symbolic) 377.64 622.67 T
(\050human-r) 216 608.67 T
(eadable\051 form of the err) 262.12 608.67 T
(or code. For example,) 376.74 608.67 T
(the string might be) 216 594.67 T
4 9.5 Q
("wsanotsock") 310.94 594.67 T
0 11 Q
(.) 379.34 594.67 T
4 9.5 Q
(explanation) 135 568.67 T
0 11 Q
(An explanation if any of the err) 216 568.67 T
(or) 368.38 568.67 T
(. An instance of) 377.92 568.67 T
4 9.5 Q
(<string>) 216 554.67 T
0 11 Q
(.) 261.6 554.67 T
4 9.5 Q
(calling-function) 135 528.67 T
0 11 Q
(The name of W) 216 510.67 T
(insock2 FFI interface function which) 289.61 510.67 T
(r) 216 496.67 T
(eturned the err) 220.15 496.67 T
(or code. An instance of) 292.89 496.67 T
4 9.5 Q
(<string>) 407.16 496.67 T
0 11 Q
(.) 452.76 496.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 23
%%Page: "20" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0 1 1 1]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
[ 0.51 0 0.18 0 0.49 1 0.82]
[ 0.6 0 0 0.3 0.1 0.7 0.7]
 12 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(Network Library Reference Documentation) 72 695.67 T
72 81 504 117 R
7 X
V
1 9 Q
0 X
(20) 72 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 24
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 24
%%DocumentFonts: Palatino-Roman
%%+ Palatino-Bold
%%+ Palatino-Italic
%%+ Helvetica-Narrow-Bold
%%+ Courier-Bold
%%+ Palatino-BoldItalic
%%EOF
