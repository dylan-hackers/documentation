From haahr Fri Sep  8 12:57:42 1995
From: Paul Haahr <haahr>
Subject: DFM block constructs
Date: Fri, 8 Sep 95 12:57:38 +0100

It became clear during our DFM discussions at 1cc last month that the
DFM structures for unwind-protect and bind-exit weren't very well
understood by anyone but Jonathan.  I thought that setting down how
they worked, even crudely, would be a good idea.  This is basically a
rehash of what Jonathan did for me and Steve a few weeks ago.

In the process, I cleaned up the DFM representations of unwind-protect
and bind-exit.  I'll be the first to admit I put some pretty strange
stuff in there, notably a <merge> node following an <unwind-protect>,
which shouldn't have had it.  The revised versions are now in the
reorg'ed dfmc tree.  They are still generating correct code through
the c-back-end;  in fact, the C code (as opposed to the DFM code) is
identical, except for an extra emitted comment.

The important thing that changed is that the data flow and control
flow in the DFM now make sense for the block constructs.

I also got rid of <bail> and <stopper> in favor of the less terse but
easier to understand <end-exit-block>, <end-protected-block>, and
<end-cleanup-block>.  Sue me or go and change the names if you don't
like them.

Paul

----

First, let's look at an example of bind-exit.

  block (exit) exit(42); 13 end; =>
    [BIND]
    t2 := [BIND-EXIT entry-state: &t1 body: L1 exit-to: L0]
    L1:
    t4 := ^42
    t12 := exit entry-state: &t1 value: t4
    t6 := ^13
    end-exit-block entry-state: &t1
    L0:
    t7 := [MERGE t2 t6]
    return t7

(That's before register assignment, to make the difference in the
temporaries used in the merge node clear.)

The <bind-exit> node establishes the place the exit jumps to, an
<entry-state>.  This is communicated to <exit> and <end-exit-block>
through the temporary t1.  The temporary returned by the <bind-exit>
is set by the exit procedure.

(The printing code shows up one inconsistency:  the temporary geneated
by the <bind-exit> node is actually not live after that point.  It's
live only if the exit procedure is taken.  On the other hand, the
entry-state is live after that point.  Perhaps which temporary is the
generated one from a <bind-exit> node should be exchanged.)

The merge node combines the two temporaries that could contain the
result of the <merge> node -- t2 by exiting, t6 by falling through.
The <end-exit-block> node exists for at least two purposes:  to
possibly bash the exit procedure or entry state in order to prevent
calls outside of its dynamic scope and to stop a thread in the
execution engine.  It references the entry state in order that it can
be found from the <bind-exit> node.

Before we see the compiled code, here's the DFM code after register
allocation:

  block (exit) exit(42); 13 end; =>
    [BIND]
    t2 := [BIND-EXIT entry-state: &t0 body: L1 exit-to: L0]
    L1:
    t1 := ^42
    t3 := exit entry-state: &t0 value: t1
    t2 := ^13
    end-exit-block entry-state: &t0
    L0:
    t2 := [MERGE t2 t2]
    return t2

And this is the C code:

  block (exit) exit(42); 13 end; =>
    D L4988I () {
      D T0;
      D T2;
      D T1;
      D T3;
    
      T0 = dNprimitive_make_bind_exit_frame();
      if (setjmp(dNprimitive_frame_destination(T0))) {
        T2 = dNprimitive_frame_return_value(T0);
        goto L0;
      }
    L1:
      T1 = I(42);
      dNprimitive_nlx(T0, T1);
    L0:
      return(T2);
    }

The only gotcha (other than how C's setjmp works) is that the emission
engine knows that there's no point in generating code for the stuff
that follows an <exit> node;  it's a primitive form of dead code
elimination.  So that's why the ``t2 := ^13'' and <end-exit-block>
nodes are not emitted.

The call to dNprimitive_nlx unwinds all <unwind-protect> frames on the
way back to the entry state marked by T0.  Eventually, (unless some
cleanup calls another exit procedure) it will longjmp to the site of
the setjmp.  The second argument to dNprimitive_nlx is shoved into the
dNprimitive_frame_return_value of the entry state.

On the other hand, if we omit the call to the exit procedure (or if
there's some control flow path which falls through, or if it isn't
inlined, as it was above), the generated code is:

  block (exit) 13 end; =>
    D L1502I () {
      D T0;
      D T1;
    
      T0 = dNprimitive_make_bind_exit_frame();
      if (setjmp(dNprimitive_frame_destination(T0))) {
        T1 = dNprimitive_frame_return_value(T0);
        goto L0;
      }
    L1:
      T1 = I(13);
      /* invalidate T0 */
    L0:
      return(T1);
    }

Note that the call just falls through from the assignment to T1 to the
return;  no jump need take place.

The comment about invalidating reflects something I think we should
do, but haven't done yet, which is ensure that the exit procedure is
bashed when we leave the block.  Bashing a single slot should be
sufficient.

----

Now, let's consider the DFM code for an unwind-protect:

  block () xxx() cleanup yyy() end; =>
    [BIND]
    [UNWIND-PROTECT entry-state: t0 body: L1 cleanup: L2 next: L0]
    L1:
    t1 := ^xxx
    t2 := [CALLx t1()]
    end-protected-block entry-state: t0
    L0:
    return t2
    L2:
    t3 := ^yyy
    [CALLx t3()]
    end-cleanup-block entry-state: t0

I think this code is pretty straight-forward, at least in terms of the
data flow graph.  Note that t2 is live in the code outside the block
statement.

  block () xxx() cleanup yyy() end; =>
    D L2437I () {
      D T0;
      D T1;
      D T2;
      D T3;
    
      T0 = dNprimitive_make_unwind_protect_frame();
      if (setjmp(dNprimitive_frame_destination(T0)))
        goto L2;
    L1:
      T1 = dNxxx;
      T2 = CALL0(T1);
    L2:
      T3 = dNyyy;
      CALL0(T3);
      dNprimitive_continue_unwind();
    L0:
      return(T2);
    }

The dNprimitive_continue_unwind just returns in this case.  If the
cleanup clause were invoked by an exit procedure, it would have set a
flag in the frame indicating that it continues non-local-exiting.  The
important thing to see is that the decision about whether to fall
through from the cleanup clause into the code outside the block is
made by dNprimitive_continue_unwind, based on dynamic information.

----

Finally, note that a block with both an exit procedure (bind-exit) and
a cleanup clause (unwind-protect) is simply a bind-exit wrapped around
an unwind-protect.

----

Lots of optimizations can be done.  Off the top of my head:

  - Code following an <exit> is dead;  it should be dead-code
    eliminated in the DFM.

  - If an <exit> is inlined and there are no <unwind-protect>s between
    it and the <bind-exit>, it can be turned into a control transfer.

  - If there are no <exit>s for a given <entry-state>, the <bind-exit>
    node can be removed.

An invalid optimization that had been suggested was to merge nested
<unwind-protect>s without intervening <bind-exit>s with a test in the
merged cleanup to determine whether the inner cleanup is still active.
This isn't valid because then the inner cleanup is no longer protected
by the outer cleanup.

