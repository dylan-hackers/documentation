%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 10 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
3 1 /Symbol FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Derived Information Database) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(1) 536 42.62 T
0 24 Q
(Derived Information Database) 160.04 704 T
(Access Protocol) 228.35 655.91 T
1 12 Q
(Scott McKay) 272.51 615.82 T
1 16 Q
(1.  Intr) 72 573.06 T
(oduction) 119.26 573.06 T
0 12 Q
(This paper describes the protocol for accessing the derived information database. It is not) 72 545.64 T
(intended to describe any particular representation for this information, nor is it intended to) 72 531.64 T
(describe a particular compiler implementation for producing the information.) 72 517.64 T
(Each of the classes in the derived information database is equivalent to one of the compile-time) 72 491.55 T
(metaclasses used by the compiler to describe the standard Dylan classes. For example, the class) 72 477.55 T
1 F
(<&class>) 72 463.55 T
0 F
( corresponds to the compile-time metaclass used by the compiler to describe) 119.68 463.55 T
1 F
(<class>) 488.95 463.55 T
0 F
(objects in the application.) 72 449.55 T
(Each of these classes is \322persistent\323, in that the compiler dumps objects \050using DOSS, for) 72 423.45 T
-0.07 (instance\051 of these classes into the derived database. The DylanW) 72 409.45 P
-0.07 (orks environment recovers these) 381.66 409.45 P
(objects and can then use them in its own tools, such as browsers.) 72 395.45 T
(Each of these classes has an) 72 369.36 T
2 F
(access-path) 209.29 369.36 T
0 F
( slot in it that describes how to get to the \322environment\323) 265.94 369.36 T
(from which the object came, for example, a static derived database or a running image. Since the) 72 355.36 T
(\322same\323 object might come from multiple places, a predicate is provided to test whether two) 72 341.36 T
(objects are the same in all but their access path.) 72 327.36 T
1 F
-0 (Issue) 72 301.27 P
0 F
-0 (: I don\325) 98 301.27 P
-0 (t know if it\325) 133.11 301.27 P
-0 (s really a good idea to con\337ate access to the derived DB with access to a) 189.44 301.27 P
(running application If we do include access path functionality here, then there are some issues of) 72 287.27 T
(marshalling, because these functions pass real Dylan objects and return real Dylan objects.) 72 273.27 T
-0.33 (Note that this paper does not describe the protocol related to dependency tracking \050which answers) 72 247.18 P
-0.33 (such questions as, \322what should be recompiled if this class gets changed?\323\051. Dependency tracking) 72 233.18 P
-0.42 (operates on the web of data maintained in the derived database, but it is implemented as a separate) 72 219.18 P
(layer of functionality) 72 205.18 T
(.) 172.54 205.18 T
1 16 Q
(2.  Query pr) 72 164.42 T
(otocol) 155.26 164.42 T
0 12 Q
-0.45 (Many of the functions described in the following sections take a) 72 137 P
2 F
-0.45 (client) 378.02 137 P
0 F
-0.45 ( ar) 404.69 137 P
-0.45 (gument. This ar) 416.35 137 P
-0.45 (gument is) 490.89 137 P
(intended to serve as a hook for a \322query registry\323 maintained by the derived database. For exam-) 72 123 T
(ple, if a browser tool calls a function \050such as) 72 109 T
1 F
(&class-dir) 292.96 109 T
(ect-subclasses) 346.07 109 T
0 F
(\051 on some class \050say) 416.72 109 T
(,) 512.59 109 T
1 F
-0.11 (<number>) 72 95 P
0 F
-0.11 (\051, a \322query\323 is registered indicating that the browser is interested in tracking the direct) 126.35 95 P
(subclasses of) 72 81 T
1 F
(<number>) 137.99 81 T
0 F
(. If another tool, such as the compiler) 192.34 81 T
(, is used to add a new subclass to) 370.82 81 T
1 F
(<number>) 72 67 T
0 F
(, the setter for) 126.35 67 T
1 F
(&class-dir) 196 67 T
(ect-subclasses) 249.11 67 T
0 F
( will notice that there is an outstanding sub-) 319.76 67 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Access Protocol) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(2) 536 42.62 T
0 12 Q
(classes query for) 72 712 T
1 F
(<number>) 155.64 712 T
0 F
( and notify the browser) 209.99 712 T
(. The) 320.64 712 T
2 F
(client) 348.3 712 T
0 F
( ar) 374.96 712 T
(gument can be) 387.07 712 T
1 F
(#f) 460.06 712 T
0 F
(, indicating) 470.05 712 T
(that no query will be registered. Otherwise the type of) 72 698 T
2 F
(client) 334.28 698 T
0 F
( is unspeci\336ed; it can be anything) 360.95 698 T
(meaningful to the client in question.) 72 684 T
-0.3 (All of the functions that take a) 72 656.56 P
2 F
-0.3 (client) 218.87 656.56 P
0 F
-0.3 ( ar) 245.54 656.56 P
-0.3 (gument return an additional, \336nal value) 257.34 656.56 P
-0.3 (\321) 447.85 656.56 P
-0.3 ( an object that is) 459.85 656.56 P
(an instance of the class) 72 642.56 T
1 F
(<query>) 185.64 642.56 T
0 F
(.) 229.32 642.56 T
1 F
(<query>) 72 609.12 T
0 F
([Abstract class]) 465.02 609.12 T
(The class that represents a query into the derived database. A query object is returned as the) 90 581.69 T
(\336nal value for all the functions that take a) 90 567.69 T
2 F
(client) 292.97 567.69 T
0 F
( ar) 319.63 567.69 T
(gument.) 331.74 567.69 T
1 F
(query-client) 72 534.25 T
2 F
(query) 136.99 534.25 T
3 F
(\336) 167.32 534.25 T
2 F
(client) 182.16 534.25 T
0 F
([Generic function]) 451.03 534.25 T
(Returns the client that \322owns\323 the query; it is the same object as the) 90 506.81 T
2 F
(client) 417.96 506.81 T
0 F
( ar) 444.62 506.81 T
(gument that was) 456.73 506.81 T
(passed to the querying function.) 90 492.81 T
1 F
(query-r) 72 459.38 T
(esult) 111.11 459.38 T
2 F
(query) 138.11 459.38 T
3 F
(\336) 168.43 459.38 T
2 F
(results...) 183.28 459.38 T
0 F
([Generic function]) 451.03 459.38 T
(Returns one or more values that are the values produced by the query) 90 431.94 T
(.) 421.81 431.94 T
-0.05 (For example,) 90 404.5 P
1 F
-0.05 (&class-dir) 156.22 404.5 P
-0.05 (ect-subclasses) 209.33 404.5 P
0 F
-0.05 ( returns two values, a sequence of classes and a query) 279.99 404.5 P
-0.06 (object. The value of) 90 390.5 P
1 F
-0.06 (query-r) 188.72 390.5 P
-0.06 (esult) 227.83 390.5 P
0 F
-0.06 ( for the query object will be the same, identical sequence of) 251.83 390.5 P
(classes as the \336rst value returned by) 90 376.5 T
1 F
(&class-dir) 265.63 376.5 T
(ect-subclasses) 318.74 376.5 T
0 F
(.) 389.4 376.5 T
1 F
(r) 72 343.06 T
(elease-query) 77.11 343.06 T
2 F
(query) 144.1 343.06 T
0 F
([Generic function]) 451.03 343.06 T
(Informs that derived database that it can stop tracking the query) 90 315.62 T
(.) 395.16 315.62 T
1 F
(note-query-r) 72 282.19 T
(esult-changed) 137.1 282.19 T
2 F
( client query) 207.77 282.19 T
0 F
([Generic function]) 451.03 282.19 T
-0.38 (When the derived database makes a change that af) 90 254.75 P
-0.38 (fects the result of some outstanding queries,) 328.68 254.75 P
(all the clients are noti\336ed by having) 90 240.75 T
1 F
(note-query-r) 264.98 240.75 T
(esult-changed) 330.08 240.75 T
0 F
( called on them.) 400.75 240.75 T
2 F
(client) 480.41 240.75 T
0 F
( is the) 507.07 240.75 T
(client, and) 90 226.75 T
2 F
(query) 142.99 226.75 T
0 F
( is the updated query) 170.32 226.75 T
(. Calling) 269.52 226.75 T
1 F
(query-r) 313.86 226.75 T
(esult) 352.97 226.75 T
0 F
( on the new updated query will) 376.97 226.75 T
(return the new result values for the query) 90 212.75 T
(.) 286.84 212.75 T
1 16 Q
(3.  The de\336nition entity and pr) 72 170.65 T
(otocol) 280.19 170.65 T
0 12 Q
(A) 72 141.88 T
2 F
(de\336nition) 83.66 141.88 T
0 F
( corresponds to anything de\336ned with one of Dylan\325) 129 141.88 T
(s de\336ning forms, such as) 378.97 141.88 T
1 F
(de\336ne) 500.96 141.88 T
(class) 72 127.88 T
0 F
( or) 96 127.88 T
1 F
(de\336ne method) 112 127.88 T
0 F
(. The class) 184.33 127.88 T
1 F
(<&de\336nition>) 238.32 127.88 T
0 F
(is the abstract superclass of all such objects.) 313.68 127.88 T
1 F
(<&de\336nition>) 72 94.44 T
0 F
([Abstract class]) 465.02 94.44 T
(The class that all de\336nitional entities are based on.) 90 67 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Access Protocol) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(3) 536 42.62 T
1 12 Q
(&de\336nition-access-path) 72 712 T
2 F
(de\336nition) 196.33 712 T
3 F
(\336) 244.67 712 T
2 F
(access-path) 259.51 712 T
0 F
([Generic function]) 451.03 712 T
(Returns the access path associated with the de\336nition.) 90 685.23 T
1 F
(Issue) 72 658.47 T
0 F
(: Should we punt the access path stuf) 98 658.47 T
(f here?) 275.44 658.47 T
1 F
(&de\336nition-variable) 72 625.71 T
2 F
(de\336nition) 179.68 625.71 T
3 F
(\336) 228.01 625.71 T
2 F
(variable) 242.86 625.71 T
0 F
(or) 285.85 625.71 T
1 F
(#f) 298.85 625.71 T
0 F
([Generic function]) 451.03 625.71 T
(Returns the name of the de\336nition as a) 90 598.94 T
1 F
(<&variable>) 277.98 598.94 T
0 F
(. When the de\336nition is a method \050and) 343.66 598.94 T
(hence has a name that is more complex than can be represented as a simple variable\051, the) 90 584.94 T
(name will be a) 90 570.94 T
2 F
(method spec) 163.32 570.94 T
0 F
(, which is a subclass of) 222.97 570.94 T
1 F
(<&variable>) 336.62 570.94 T
0 F
( that names methods.) 402.3 570.94 T
(Note that during the process of debugging a running application, the debugging access path) 90 544.18 T
(might return some kind of de\336nition object that is not recorded in the derived information) 90 530.18 T
(database. \050For example, the application might create a new class via a call to) 90 516.18 T
4 F
(make\050<class>\051) 90 502.18 T
0 F
(.\051 In this case,) 183.6 502.18 T
1 F
(&de\336nition-variable) 253.58 502.18 T
0 F
( will return) 358.26 502.18 T
1 F
(#f) 414.59 502.18 T
0 F
(.) 424.58 502.18 T
1 F
(&de\336nition-kind) 72 469.41 T
2 F
(de\336nition) 161.03 469.41 T
3 F
(\336) 209.36 469.41 T
2 F
(keyword) 224.21 469.41 T
0 F
(or) 267.86 469.41 T
1 F
(#f) 280.86 469.41 T
0 F
([Generic function]) 451.03 469.41 T
(Returns the kind of the de\336nition as a keyword. The keywords can be:) 90 442.65 T
1 F
(#"class") 429.95 442.65 T
0 F
(,) 473.27 442.65 T
1 F
(#"generic-) 479.27 442.65 T
(function") 90 428.65 T
0 F
(,) 139.33 428.65 T
1 F
(#"method") 145.33 428.65 T
0 F
(,) 203.32 428.65 T
1 F
(#"variable") 209.32 428.65 T
0 F
(,) 270.64 428.65 T
1 F
(#"constant") 276.64 428.65 T
0 F
(, or) 339.29 428.65 T
1 F
(#"macr) 358.28 428.65 T
(o") 397.38 428.65 T
0 F
(. If the kind of de\336nition) 410.04 428.65 T
(cannot be determined, this will return) 90 414.65 T
1 F
(#f) 272.98 414.65 T
0 F
(.) 282.97 414.65 T
1 F
(Issue) 72 387.88 T
0 F
(: This needs to be extensible by programmers, for example,) 98 387.88 T
1 F
(#"pr) 385.96 387.88 T
(esentation-type") 410.4 387.88 T
0 F
(.) 495.05 387.88 T
1 F
(Issue) 72 361.12 T
0 F
(: Should the) 98 361.12 T
2 F
(kind) 159.01 361.12 T
0 F
( be class-based instead of just using keywords?) 179.68 361.12 T
1 F
(&de\336nition-attributes) 72 328.35 T
2 F
(de\336nition) 187.67 328.35 T
0 F
( #key) 233 328.35 T
2 F
(client) 262.33 328.35 T
3 F
(\336) 292 328.35 T
2 F
(keywords query) 306.84 328.35 T
0 F
([Generic function]) 451.03 328.35 T
(Returns a sequence of other attributes of the de\336nition. What these other attributes are) 90 301.59 T
(depends on the kind of the de\336nition.) 90 287.59 T
1 F
(&de\336nition-attributes-setter) 72 254.82 T
2 F
( attributes de\336nition) 217.31 254.82 T
0 F
([Generic function]) 451.03 254.82 T
(Changes the attributes for the de\336nitions to) 90 228.06 T
2 F
(attributes) 300.32 228.06 T
0 F
(, and noti\336es any existing clients of the) 346.33 228.06 T
(change.) 90 214.06 T
1 F
(&de\336nition-par) 72 181.29 T
(ent) 152.46 181.29 T
2 F
( de\336nition) 168.46 181.29 T
3 F
(\336) 219.79 181.29 T
2 F
(definition) 234.64 181.29 T
0 F
(or) 283.64 181.29 T
1 F
(#f) 296.64 181.29 T
0 F
([Generic function]) 451.03 181.29 T
(Some de\336nitions can be nested; for example, the slots of a class are nested within the class) 90 154.53 T
-0.41 (de\336nition.) 90 140.53 P
1 F
-0.41 (&de\336nition-par) 141.6 140.53 P
-0.41 (ent) 222.06 140.53 P
0 F
-0.41 ( returns the parent de\336nition of) 238.05 140.53 P
2 F
-0.41 (de\336nition) 387.56 140.53 P
0 F
-0.41 (, or) 432.89 140.53 P
1 F
-0.41 (#f) 451.07 140.53 P
0 F
-0.41 ( if) 461.06 140.53 P
2 F
-0.41 (de\336nition) 473.57 140.53 P
0 F
-0.41 ( is a) 518.91 140.53 P
(top-level de\336nition.) 90 126.53 T
1 F
(&de\336nition-explicitly-known?) 72 93.77 T
2 F
( de\336nition library) 226.02 93.77 T
3 F
(\336) 313.69 93.77 T
2 F
(boolean) 328.54 93.77 T
0 F
([Generic function]) 451.03 93.77 T
(Returns) 90 67 T
1 F
(#t) 130.33 67 T
0 F
( if) 140.33 67 T
2 F
(de\336nition) 153.66 67 T
0 F
( is explicitly known in) 199 67 T
2 F
(library) 309.34 67 T
0 F
(, otherwise it returns) 341.89 67 T
1 F
(#f) 443.54 67 T
0 F
(.) 453.54 67 T
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Access Protocol) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(4) 536 42.62 T
0 12 Q
(A de\336nition is said to be) 90 712 T
2 F
(explicitly known) 210.67 712 T
0 F
( under the following circumstances:) 289 712 T
1 F
(\245) 99 691.19 T
0 F
-0.05 (A class is explicitly known if it is defined by an explicit) 117 691.19 P
1 F
-0.05 (define class) 387.67 691.19 P
0 F
-0.05 ( form in the library) 445.95 691.19 P
(or in one of the libraries it uses.) 117 677.19 T
1 F
(\245) 99 656.38 T
0 F
-0.27 (A generic function is explicitly known if it is defined by an explicit) 117 656.38 P
1 F
-0.27 (define generic) 439.82 656.38 P
0 F
-0.27 ( form) 511.21 656.38 P
(in the library or in one of the libraries it uses, or if it is implicitly defined by the defini-) 117 642.38 T
(tion of a method explicitly known in the library or by a slot specification for a class) 117 628.38 T
(explicitly known in the library.) 117 614.38 T
1 F
(\245) 99 593.56 T
0 F
(A method is explicitly known if it is defined by an explicit) 117 593.56 T
1 F
(define method) 400.99 593.56 T
0 F
( form in the) 473.99 593.56 T
(library or in one of the libraries it uses, or it is implicitly defined by a slot specification) 117 579.56 T
(for a class explicitly known in the library.) 117 565.56 T
1 F
(&de\336nition-locator) 72 532.75 T
2 F
( de\336nition) 170.66 532.75 T
3 F
(\336) 222 532.75 T
2 F
(source-locator) 236.84 532.75 T
0 F
(or) 310.5 532.75 T
1 F
(#f) 323.5 532.75 T
0 F
([Generic function]) 451.03 532.75 T
-0.47 (Returns a source locator \050as a) 90 505.94 P
1 F
-0.47 (<sour) 231.81 505.94 P
-0.47 (ce-locator>) 261.1 505.94 P
0 F
-0.47 ( object\051 that points to where the de\336nition was) 318.58 505.94 P
(de\336ned.) 90 491.94 T
1 14 Q
(3.1  Sour) 72 457.79 T
(ce Locators) 125.03 457.79 T
0 12 Q
(A) 72 430.31 T
2 F
(sour) 83.66 430.31 T
(ce locator) 104.56 430.31 T
0 F
( is an aggregate object that contains a Dylan) 152.88 430.31 T
1 F
(<locator>) 367.84 430.31 T
0 F
( \050or locator name string\051) 417.5 430.31 T
(and some additional information, such as start and end line numbers.) 72 416.31 T
-0.24 (The locator might point to a traditional \050\337at\051 source \336le, or it be some sort of database \322entity han-) 72 389.5 P
(dle\323. The \322additional information\323 might be line number\050s\051 or more precise information that) 72 375.5 T
(exactly delimits a fragment of source code. The important property of a source locator is that it) 72 361.5 T
-0.39 (can be used as an ar) 72 347.5 P
-0.39 (gument to) 165.46 347.5 P
4 F
-0.94 (make\050<f) 216.01 347.5 P
-0.94 (ile-stream>\051) 266.42 347.5 P
0 F
-0.39 (, so that the source \336le information can) 352.82 347.5 P
(be read from a stream.) 72 333.5 T
1 F
(<sour) 72 300.69 T
(ce-locator>) 101.29 300.69 T
0 F
([Class]) 506 300.69 T
(The class that represents the location for some source code.) 90 273.88 T
1 F
(sour) 72 241.06 T
(ce-\336le-locator) 94.45 241.06 T
2 F
( sour) 164.42 241.06 T
(ce-locator) 188.32 241.06 T
3 F
(\336) 240.64 241.06 T
2 F
(locator) 255.48 241.06 T
0 F
([Generic function]) 451.03 241.06 T
(Returns a) 90 214.25 T
1 F
(<locator>) 138.66 214.25 T
0 F
( object that indicates what \322\336le\323 the de\336nition was de\336ned in. Note that) 188.33 214.25 T
(the \322\336le\323 might not really be a traditional \336le; the locator might actually be a handle to an) 90 200.25 T
(object in a source database.) 90 186.25 T
1 F
(sour) 72 153.44 T
(ce-\336le-start-line) 94.45 153.44 T
2 F
( sour) 175.09 153.44 T
(ce-locator) 198.98 153.44 T
3 F
(\336) 251.3 153.44 T
2 F
(integer) 266.15 153.44 T
0 F
([Generic function]) 451.03 153.44 T
(Returns the line number at which the de\336nition starts.) 90 126.62 T
1 F
(sour) 72 93.81 T
(ce-\336le-start-line) 94.45 93.81 T
2 F
( sour) 175.09 93.81 T
(ce-locator) 198.98 93.81 T
3 F
(\336) 251.3 93.81 T
2 F
(integer) 266.15 93.81 T
0 F
([Generic function]) 451.03 93.81 T
(Returns the line number at which the de\336nition ends.) 90 67 T
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Access Protocol) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(5) 536 42.62 T
1 16 Q
(4.  The pr) 72 709.33 T
(oject entity and pr) 138.38 709.33 T
(otocol) 263.86 709.33 T
0 12 Q
(A project serves as a description of a set of libraries. A project records the libraries and source) 72 680.77 T
(units) 72 666.77 T
(that it is created from, and records the \322destination\323 units \050such as object \336les\051 that it pro-) 98.34 666.77 T
(duces.) 72 652.77 T
1 F
(Issue) 72 625.53 T
0 F
(: How do we get our hands on the \322\336rst\323 project object? Presumably there is some kind of) 98 625.53 T
-0.27 (per) 72 611.53 P
-0.27 (-site registry \050like) 87.08 611.53 P
4 F
-0.64 (.lid) 174.6 611.53 P
0 F
-0.27 ( \336les\051 that can map project names to project objects. Or we just open a) 203.4 611.53 P
(project description the same way V) 72 597.53 T
(isual C++ does.) 240.91 597.53 T
1 F
(<&pr) 72 564.29 T
(oject>) 100.62 564.29 T
0 F
([Instantiable class]) 449.69 564.29 T
(The class that represents a project) 90 537.06 T
1 F
(compiler) 72 503.82 T
(-warnings) 116.88 503.82 T
2 F
(pr) 171.22 503.82 T
(oject) 181.44 503.82 T
0 F
( #key) 204.77 503.82 T
2 F
(status) 234.1 503.82 T
3 F
(\336) 265.1 503.82 T
2 F
(warnings) 279.95 503.82 T
(query) 327.62 503.82 T
0 F
([G.F. method]) 471.67 503.82 T
(Returns a \050possibly empty\051 sequence of) 90 476.59 T
1 F
(<compiler) 282.64 476.59 T
(-warning>) 334.36 476.59 T
0 F
( objects that resulted from the) 387.86 476.59 T
(compilation of the project.) 90 462.59 T
(If) 90 435.35 T
2 F
(status) 100.99 435.35 T
0 F
( is supplied, it must be one of the keywords) 129 435.35 T
1 F
(#"\336xed") 340.66 435.35 T
0 F
( or) 384.65 435.35 T
1 F
(#"untouched") 400.64 435.35 T
0 F
(. Only the) 473.98 435.35 T
(compiler warnings whose status matches) 90 421.35 T
2 F
(status) 288.97 421.35 T
0 F
( are returned when) 316.98 421.35 T
2 F
(status) 409.61 421.35 T
0 F
( is supplied.) 437.62 421.35 T
1 F
(Issue) 72 394.12 T
0 F
(: This is where we include journals and patches, and so forth. Fill the rest of this in...) 98 394.12 T
1 16 Q
(5.  The library entity and pr) 72 352.22 T
(otocol) 263.28 352.22 T
1 12 Q
(<&library>) 72 317.65 T
0 F
([Instantiable class]) 449.69 317.65 T
(The class that represents a Dylan library) 90 290.41 T
(. This is a subclass of) 282.5 290.41 T
1 F
(<&de\336nition>) 388.16 290.41 T
0 F
(.) 460.52 290.41 T
1 F
(Issue) 72 263.18 T
0 F
(: How do we initially get an instance of a library? There needs to be a function that, given) 98 263.18 T
(the name of a library) 72 249.18 T
(, opens up the appropriate \322database\323 and creates the library instance.) 171.19 249.18 T
1 F
(&library-uses) 72 215.94 T
2 F
(library) 146.33 215.94 T
0 F
( #key) 179.66 215.94 T
2 F
(client) 208.99 215.94 T
3 F
(\336) 238.66 215.94 T
2 F
(use-specs) 253.5 215.94 T
( query) 299.48 215.94 T
0 F
([Generic function]) 451.03 215.94 T
(Returns a sequence of all of the use specs for the library) 90 188.71 T
(.) 358.15 188.71 T
1 F
-0.54 (Issue) 72 155.47 P
0 F
-0.54 (: A) 98 155.47 P
2 F
-0.54 (library use spec) 114.92 155.47 P
0 F
-0.54 ( is object that names the used library) 190.5 155.47 P
-0.54 (, what gets imported from the library) 361.58 155.47 P
-0.54 (,) 534.54 155.47 P
(what gets excluded,) 72 141.47 T
2 F
(etc) 169.98 141.47 T
0 F
(.) 183.97 141.47 T
1 F
(&library-uses-setter) 72 108.23 T
2 F
( use-specs library) 175.97 108.23 T
0 F
([Generic function]) 451.03 108.23 T
(Changes the use specs for the library to) 90 81 T
2 F
(use-specs) 281.96 81 T
0 F
(, and noti\336es any existing clients of the) 327.95 81 T
(change.) 90 67 T
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Access Protocol) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(6) 536 42.62 T
1 12 Q
(&library-exports) 72 712 T
2 F
(library) 162.98 712 T
0 F
( #key) 196.32 712 T
2 F
(client) 225.65 712 T
3 F
(\336) 255.31 712 T
2 F
(export-specs) 270.16 712 T
( query) 330.8 712 T
0 F
([Generic function]) 451.03 712 T
(Returns a sequence of all of the export specs for the library) 90 685.83 T
(.) 372.82 685.83 T
1 F
(Issue) 72 659.67 T
0 F
(: A) 98 659.67 T
2 F
(library export spec) 116 659.67 T
0 F
( looks like what?) 207.32 659.67 T
1 F
(&library-exports-setter) 72 627.5 T
2 F
( export-specs library) 192.62 627.5 T
0 F
([Generic function]) 451.03 627.5 T
(Changes the export specs for the library to) 90 601.33 T
2 F
(export-specs) 296.63 601.33 T
0 F
(, and noti\336es any existing clients of) 357.28 601.33 T
(the change.) 90 587.33 T
1 F
(&library-modules) 72 555.17 T
2 F
(library) 167.66 555.17 T
0 F
( #key) 201 555.17 T
2 F
(client) 230.33 555.17 T
3 F
(\336) 259.99 555.17 T
2 F
(modules query) 274.84 555.17 T
0 F
([Generic function]) 451.03 555.17 T
(Returns a sequence of all of the modules de\336ned by the library) 90 529 T
(. Each module will be an) 390.17 529 T
(instance of) 90 515 T
1 F
(<&module>) 145.32 515 T
0 F
(.) 207 515 T
1 F
(&library-modules-setter) 72 482.83 T
2 F
( modules library) 197.3 482.83 T
0 F
([Generic function]) 451.03 482.83 T
(Changes the modules for the library to) 90 456.67 T
2 F
(modules) 277.64 456.67 T
0 F
(, and noti\336es any existing clients of the) 317.64 456.67 T
(change.) 90 442.67 T
1 F
(&library-exported-modules) 72 410.5 T
2 F
(library) 216.98 410.5 T
0 F
( #key) 250.32 410.5 T
2 F
(client) 279.65 410.5 T
3 F
(\336) 309.31 410.5 T
2 F
(modules query) 324.16 410.5 T
0 F
([Generic function]) 451.03 410.5 T
-0.12 (Returns a sequence of all of the exported from the library) 90 384.33 P
-0.12 (. Each module will be an instance of) 363.31 384.33 P
1 F
(<&module>) 90 370.33 T
0 F
(.) 151.68 370.33 T
1 F
(&library-internal-modules) 72 338.17 T
2 F
(library) 212.33 338.17 T
0 F
( #key) 245.66 338.17 T
2 F
(client) 274.99 338.17 T
3 F
(\336) 304.66 338.17 T
2 F
(modules query) 319.5 338.17 T
0 F
([Generic function]) 451.03 338.17 T
(Returns a sequence of all of the internal modules of the library) 90 312 T
(. Each module will be an) 389.5 312 T
(instance of) 90 298 T
1 F
(<&module>) 145.32 298 T
0 F
(.) 207 298 T
1 F
(&library-sour) 72 265.83 T
(ces) 144.44 265.83 T
2 F
(library) 162.77 265.83 T
0 F
( #key) 196.1 265.83 T
2 F
(client) 225.43 265.83 T
3 F
(\336) 255.1 265.83 T
2 F
(source-locators query) 269.94 265.83 T
0 F
([Generic function]) 451.03 265.83 T
(Returns a sequence of source locators that point to all of the source code in the library) 90 239.67 T
(. The) 501.8 239.67 T
-0.04 (locators in this sequence will generally point to entire source \336les, rather than to single de\336ni-) 90 225.67 P
(tions.) 90 211.67 T
1 F
(&library-sour) 72 179.5 T
(ces-setter) 144.44 179.5 T
2 F
( sour) 192.41 179.5 T
(ce-locators library) 216.3 179.5 T
0 F
([Generic function]) 451.03 179.5 T
(Changes the set of source locators for the library to) 90 153.33 T
2 F
(sour) 338.62 153.33 T
(ce-locators) 359.51 153.33 T
0 F
(, and noti\336es any existing) 413.5 153.33 T
(clients of the change.) 90 139.33 T
1 F
(\336nd-variables) 72 107.17 T
2 F
(library string) 145.68 107.17 T
0 F
(#key) 213.02 107.17 T
2 F
( modules kinds client) 236.35 107.17 T
3 F
(\336) 337.34 107.17 T
2 F
(variables query) 352.19 107.17 T
0 F
([Generic function]) 451.03 107.17 T
-0.14 (Returns a sequence of all of the variables \050as) 90 81 P
1 F
-0.14 (<&variable>) 306.33 81 P
0 F
-0.14 ( objects\051 de\336ned in the modules of) 372.01 81 P
(the library that contain the speci\336ed substring.) 90 67 T
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Access Protocol) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(7) 536 42.62 T
0 12 Q
(If) 90 712 T
2 F
(modules) 100.99 712 T
0 F
( is supplied, it must be a sequence of modules or module names. When it is sup-) 140.99 712 T
(plied, only those variables whose home module is one of the speci\336ed modules are returned.) 90 698 T
(If) 90 669.71 T
2 F
(kinds) 100.99 669.71 T
0 F
( is supplied, it must be a sequence of keywords that describe what \322kind\323 of variables) 126.32 669.71 T
-0.44 (to look for) 90 655.71 P
-0.44 (. For example, if) 139.12 655.71 P
2 F
-0.44 (kinds) 220.01 655.71 P
0 F
-0.44 ( includes only) 245.35 655.71 P
1 F
-0.44 (#"class") 314.36 655.71 P
0 F
-0.44 (, only variables whose top-level value) 357.68 655.71 P
(is bound to a class are returned. The keywords can be:) 90 641.71 T
1 F
(#"class") 353.27 641.71 T
0 F
(,) 396.59 641.71 T
1 F
(#"generic-function") 402.59 641.71 T
0 F
(,) 505.9 641.71 T
1 F
(#"method") 90 627.71 T
0 F
(,) 147.98 627.71 T
1 F
(#"variable") 153.98 627.71 T
0 F
(,) 215.3 627.71 T
1 F
(#"constant") 221.3 627.71 T
0 F
(, or) 283.96 627.71 T
1 F
(#"macr) 302.95 627.71 T
(o") 342.05 627.71 T
0 F
(.) 354.71 627.71 T
1 F
(\336nd-de\336nitions) 72 593.41 T
2 F
(library string) 152.36 593.41 T
0 F
(#key) 219.71 593.41 T
2 F
( modules kinds client) 243.04 593.41 T
3 F
( \336) 344.03 593.41 T
2 F
(de\336nitions query) 361.87 593.41 T
0 F
([Generic function]) 451.03 593.41 T
(Returns a sequence of all of the de\336nitions de\336ned in the modules of the library that contain) 90 565.12 T
(the speci\336ed substring. This is similar to) 90 551.12 T
1 F
(&\336nd-variables) 287.34 551.12 T
0 F
(, except that it returns) 368.02 551.12 T
1 F
(<&de\336ni-) 475.33 551.12 T
(tion>) 90 537.12 T
0 F
( objects instead of) 116.84 537.12 T
1 F
(<&variable>) 206.83 537.12 T
0 F
( objects.) 272.51 537.12 T
2 F
(modules) 90 508.82 T
0 F
( and) 130 508.82 T
2 F
(kinds) 153.32 508.82 T
0 F
( are as for) 178.66 508.82 T
1 F
(&\336nd-variables) 229.3 508.82 T
0 F
(.) 309.97 508.82 T
1 16 Q
(6.  The module entity and pr) 72 465.86 T
(otocol) 265.95 465.86 T
1 12 Q
(Issue) 72 436.23 T
0 F
(: What do we do about rename-on-import and conc-name?) 98 436.23 T
1 F
(<&module>) 72 401.94 T
0 F
([Instantiable class]) 449.69 401.94 T
(The class that represents a Dylan module. This is a subclass of) 90 373.65 T
1 F
(<&de\336nition>) 392.95 373.65 T
0 F
(.) 465.31 373.65 T
1 F
(&module-library) 72 339.35 T
2 F
(module) 163 339.35 T
0 F
( #key) 198.32 339.35 T
2 F
(client) 227.65 339.35 T
3 F
(\336) 257.32 339.35 T
2 F
(library query) 272.16 339.35 T
0 F
([Generic function]) 451.03 339.35 T
(Returns a) 90 311.06 T
1 F
(<&library>) 138.66 311.06 T
0 F
( object of which) 198.34 311.06 T
2 F
(module) 278.99 311.06 T
0 F
( is a module.) 314.32 311.06 T
1 F
(&module-library-setter) 72 276.77 T
2 F
( library module) 192.64 276.77 T
0 F
([Generic function]) 451.03 276.77 T
(Changes the library for the module to) 90 248.47 T
2 F
(library) 272.98 248.47 T
0 F
(, and noti\336es any existing clients of the change.) 305.53 248.47 T
1 F
(&module-uses) 72 214.18 T
2 F
(module) 148.33 214.18 T
0 F
( #key) 183.66 214.18 T
2 F
(client) 212.99 214.18 T
3 F
(\336) 242.65 214.18 T
2 F
(use-specs) 257.5 214.18 T
( query) 303.48 214.18 T
0 F
([Generic function]) 451.03 214.18 T
(Returns a sequence of all of the use specs for the module.) 90 185.88 T
1 F
-0.27 (Issue) 72 157.59 P
0 F
-0.27 (: A) 98 157.59 P
2 F
-0.27 (module use spec) 115.46 157.59 P
0 F
-0.27 ( is object that names the used module, what gets imported from the mod-) 193.57 157.59 P
(ule, what gets excluded, etc.) 72 143.59 T
1 F
(&module-uses-setter) 72 109.29 T
2 F
( use-specs module) 177.97 109.29 T
0 F
([Generic function]) 451.03 109.29 T
(Changes the use specs for the module to) 90 81 T
2 F
(use-specs) 285.97 81 T
0 F
(, and noti\336es any existing clients of the) 331.96 81 T
(change.) 90 67 T
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Access Protocol) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(8) 536 42.62 T
1 12 Q
(&module-exports) 72 712 T
2 F
(module) 164.99 712 T
0 F
( #key) 200.32 712 T
2 F
(client) 229.64 712 T
3 F
(\336) 259.31 712 T
2 F
(export-specs query) 274.15 712 T
0 F
([Generic function]) 451.03 712 T
(Returns a sequence of all of the export specs for the module.) 90 683.71 T
1 F
(Issue) 72 649.41 T
0 F
(: A) 98 649.41 T
2 F
(module export spec) 116 649.41 T
0 F
( looks like what?) 209.32 649.41 T
1 F
(&module-exports-setter) 72 615.12 T
2 F
( export-specs module) 194.63 615.12 T
0 F
([Generic function]) 451.03 615.12 T
(Changes the export specs for the module to) 90 586.82 T
2 F
(export-specs) 300.64 586.82 T
0 F
(, and noti\336es any existing clients of) 361.28 586.82 T
(the change.) 90 572.82 T
1 F
(&module-all-variables) 72 538.53 T
2 F
(module) 190.33 538.53 T
0 F
(#key) 228.66 538.53 T
2 F
( matching client) 251.99 538.53 T
3 F
( \336) 329.32 538.53 T
2 F
(variables query) 347.16 538.53 T
0 F
([Generic function]) 451.03 538.53 T
(Returns a sequence of all of the variables \050as) 90 510.23 T
1 F
(<&variable>) 307.61 510.23 T
0 F
( objects\051 in the module.) 373.28 510.23 T
-0.07 (If) 90 481.94 P
2 F
-0.07 (matching) 100.92 481.94 P
0 F
-0.07 ( is supplied, only those variables whose names contain the matching substring are) 145.59 481.94 P
(returned.) 90 467.94 T
1 F
(&module-exported-variables) 72 433.65 T
2 F
(module) 222.98 433.65 T
0 F
(#key) 261.31 433.65 T
2 F
( matching client) 284.64 433.65 T
3 F
(\336) 364.97 433.65 T
2 F
(variables query) 379.81 433.65 T
0 F
-3 ([Generic) 498.02 433.65 P
(function]) 72 419.65 T
-0.31 (Returns a sequence of all of the variables \050as) 90 391.35 P
1 F
-0.31 (<&variable>) 304.85 391.35 P
0 F
-0.31 ( objects\051 that are exported from the) 370.52 391.35 P
(module.) 90 377.35 T
-0.07 (If) 90 349.06 P
2 F
-0.07 (matching) 100.92 349.06 P
0 F
-0.07 ( is supplied, only those variables whose names contain the matching substring are) 145.59 349.06 P
(returned.) 90 335.06 T
1 F
(&module-internal-variables) 72 300.77 T
2 F
(module) 218.33 300.77 T
0 F
(#key) 256.66 300.77 T
2 F
( matching client) 279.98 300.77 T
3 F
(\336) 360.31 300.77 T
2 F
(variables query) 375.16 300.77 T
0 F
-3 ([Generic) 498.02 300.77 P
(function]) 72 286.77 T
(Returns a sequence of all of the internal variables \050as) 90 258.47 T
1 F
(<&variable>) 347.27 258.47 T
0 F
( objects\051 in the module.) 412.94 258.47 T
-0.07 (If) 90 230.18 P
2 F
-0.07 (matching) 100.92 230.18 P
0 F
-0.07 ( is supplied, only those variables whose names contain the matching substring are) 145.59 230.18 P
(returned.) 90 216.18 T
1 F
(\336nd-variable) 72 181.88 T
2 F
( module symbol) 138.01 181.88 T
3 F
(\336) 216.34 181.88 T
2 F
(variable) 231.18 181.88 T
0 F
([Generic function]) 451.03 181.88 T
(Returns the variable in the module having the given symbol as its name.) 90 153.59 T
1 16 Q
(7.  The variable entity and pr) 72 110.63 T
(otocol) 271.28 110.63 T
0 12 Q
-0.1 (A variable is the basic named entity within a project \050or compilation unit\051. The triple of {variable) 72 81 P
(name, module name, library name} suf) 72 67 T
(\336ces to uniquely identify every variable.) 259.18 67 T
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Access Protocol) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(9) 536 42.62 T
0 12 Q
(Note that, in DylanW) 72 712 T
(orks, methods are named by an object that is more complex than a simple) 174.36 712 T
(variable. For this reason, there is a subclass of) 72 698 T
1 F
(<&variable>) 296.29 698 T
0 F
(,) 361.97 698 T
1 F
(<&method-variable>) 367.97 698 T
0 F
(, that is used) 476.3 698 T
(to name methods.) 72 684 T
1 F
(<&variable>) 72 651.61 T
0 F
([Instantiable class]) 449.69 651.61 T
(The class that represents a variable in a module.) 90 625.22 T
(The init keywords for this class are) 90 598.83 T
1 F
(name:) 261.64 598.83 T
0 F
(,) 293.63 598.83 T
1 F
(module:) 299.63 598.83 T
0 F
(, and) 341.63 598.83 T
1 F
(library:) 367.96 598.83 T
0 F
(.) 407.95 598.83 T
1 F
(&variable-name) 72 566.44 T
2 F
(variable) 158.99 566.44 T
3 F
(\336) 201.98 566.44 T
2 F
(symbol) 216.83 566.44 T
0 F
([Generic function]) 451.03 566.44 T
(Returns the name of the variable, as a) 90 540.06 T
1 F
(<symbol>) 273.62 540.06 T
0 F
(.) 323.98 540.06 T
1 F
(&variable-module) 72 507.67 T
2 F
(variable) 169 507.67 T
3 F
(\336) 211.99 507.67 T
2 F
(module) 226.84 507.67 T
0 F
([Generic function]) 451.03 507.67 T
(Returns the \322home\323 module of the variable, as a) 90 481.28 T
1 F
(<&module>) 323.95 481.28 T
0 F
( object.) 385.63 481.28 T
1 F
(&variable-library) 72 448.89 T
2 F
(variable) 166.99 448.89 T
3 F
(\336) 209.99 448.89 T
2 F
(library) 224.83 448.89 T
0 F
([Generic function]) 451.03 448.89 T
(Returns the \322home\323 library of the variable, as a) 90 422.5 T
1 F
(<&library>) 319.94 422.5 T
0 F
( object.) 379.62 422.5 T
1 F
(&variable-de\336nitions) 72 390.11 T
2 F
(variable) 184.34 390.11 T
0 F
( #key) 224.34 390.11 T
2 F
(client) 253.67 390.11 T
3 F
(\336) 283.33 390.11 T
2 F
(definitions) 298.18 390.11 T
( query) 348.85 390.11 T
0 F
([Generic function]) 451.03 390.11 T
(Returns a sequence of) 90 363.72 T
1 F
(<&de\336nition>) 198.64 363.72 T
0 F
( objects that correspond to all of the known de\336nitions) 271 363.72 T
(for this variable. A variable can have more than one associated de\336nition in the following cir-) 90 349.72 T
(cumstances:) 90 335.72 T
1 F
(\245) 90 315.33 T
0 F
(When the variable names a generic function,) 99 315.33 T
1 F
(&variable-de\336nitions) 316.27 315.33 T
0 F
( will return the) 425.62 315.33 T
1 F
(<&defi-) 499.61 315.33 T
(nition>) 99 301.33 T
0 F
( objects for the generic function and all of the methods.) 135.85 301.33 T
1 F
(\245) 90 280.94 T
0 F
(When a definition has been \322patched\323,) 99 280.94 T
1 F
(&variable-de\336nitions) 287.28 280.94 T
0 F
( will return the) 396.62 280.94 T
1 F
(<&defini-) 470.62 280.94 T
(tion>) 99 266.94 T
0 F
( objects for the current definition as well as the previous definitions. The order of this) 125.84 266.94 T
(sequence is such the most recent definition is at the head of the sequence, and each succes-) 99 252.94 T
(sive element is less recent.) 99 238.94 T
1 F
(&variable-value) 72 206.56 T
2 F
(variable) 158.33 206.56 T
0 F
( #key) 198.32 206.56 T
2 F
(client) 227.65 206.56 T
3 F
(\336) 257.32 206.56 T
2 F
(expression query) 272.16 206.56 T
0 F
([Generic function]) 451.03 206.56 T
(Returns the \322global\323 value of the variable as an) 90 180.17 T
1 F
(<&expr) 320.28 180.17 T
(ession>) 360.23 180.17 T
0 F
(.) 397.74 180.17 T
(Note that this does not return a \322proxy object\323 \050that is, a handle to an object in a running) 90 153.78 T
(Dylan application\051. Getting the values of \322live\323 application objects is address by the Remote) 90 139.78 T
(Evaluation library) 90 125.78 T
(.) 176.21 125.78 T
1 F
(&variable-value-setter) 72 93.39 T
2 F
( value variable) 187.97 93.39 T
0 F
([Generic function]) 451.03 93.39 T
(Changes the value for the variable to) 90 67 T
2 F
(value) 269.63 67 T
0 F
(, and noti\336es any existing clients of the change.) 295.62 67 T
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Access Protocol) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(10) 532 42.62 T
1 12 Q
(&variable-type) 72 712 T
2 F
(variable) 152.99 712 T
0 F
( #key) 192.98 712 T
2 F
(client) 222.31 712 T
3 F
(\336) 251.98 712 T
2 F
(type) 266.82 712 T
( query) 286.81 712 T
0 F
([Generic function]) 451.03 712 T
(Returns the declared type of the variable as a) 90 683.71 T
1 F
(<&type>) 308.94 683.71 T
0 F
(.) 354.61 683.71 T
(Note that this does not return a \322proxy object\323 \050that is, a handle to an object in a running) 90 655.41 T
(Dylan application\051. Getting the types of \322live\323 application objects is address by the Remote) 90 641.41 T
(Evaluation library) 90 627.41 T
(.) 176.21 627.41 T
1 F
(&variable-type-setter) 72 593.12 T
2 F
( type variable) 182.63 593.12 T
0 F
([Generic function]) 451.03 593.12 T
(Changes the value for the variable to) 90 564.82 T
2 F
(value) 269.63 564.82 T
0 F
(, and noti\336es any existing clients of the change.) 295.62 564.82 T
1 F
(&r) 72 530.53 T
(efer) 87.11 530.53 T
(ences) 106.87 530.53 T
2 F
(variable) 137.2 530.53 T
0 F
( #key) 177.19 530.53 T
2 F
(modules libraries kinds client) 206.52 530.53 T
3 F
(\336) 351.85 530.53 T
2 F
(definitions query) 366.7 530.53 T
0 F
([Generic function]) 451.03 530.53 T
(Returns a sequence of all of the de\336nitions that refer to the speci\336ed variable.) 90 502.23 T
(If) 90 473.94 T
2 F
(modules) 100.99 473.94 T
0 F
( is supplied, it must be a sequence of modules or module names. When it is sup-) 140.99 473.94 T
(plied, only those callers de\336ned in the given modules are returned.) 90 459.94 T
-0.42 (If) 90 431.65 P
2 F
-0.42 (libraries) 100.57 431.65 P
0 F
-0.42 ( is supplied, it must be a sequence of libraries or library names. When it is supplied,) 141.91 431.65 P
(only those callers de\336ned in the given libraries are returned.) 90 417.65 T
-0.43 (If) 90 389.35 P
2 F
-0.43 (kinds) 100.56 389.35 P
0 F
-0.43 ( is supplied, it must be a sequence of keywords that describe what \322kind\323 of de\336nitions) 125.9 389.35 P
(to look for) 90 375.35 T
(. For example, if) 140 375.35 T
2 F
(kinds) 222.66 375.35 T
0 F
( includes only) 247.99 375.35 T
1 F
(#"class") 318.32 375.35 T
0 F
(, only de\336nitions used \322as a class\323) 361.64 375.35 T
-0.05 (will be returned. The keywords can be:) 90 361.35 P
1 F
-0.05 (#"class") 280.23 361.35 P
0 F
-0.05 (,) 323.55 361.35 P
1 F
-0.05 (#"generic-function") 329.5 361.35 P
0 F
-0.05 (,) 432.81 361.35 P
1 F
-0.05 (#"method") 438.75 361.35 P
0 F
-0.05 (,) 496.73 361.35 P
1 F
-0.05 (#"vari-) 502.68 361.35 P
(able-r) 90 347.35 T
(ead") 120.44 347.35 T
0 F
(,) 145.1 347.35 T
1 F
(#"variable-write") 151.1 347.35 T
0 F
(,) 243.07 347.35 T
1 F
(#"variable") 249.07 347.35 T
0 F
( \050that is, either a read or a write\051,) 310.39 347.35 T
1 F
(#"constant") 470.68 347.35 T
0 F
(,) 533.33 347.35 T
(or) 90 333.35 T
1 F
(#"macr) 103 333.35 T
(o") 142.09 333.35 T
0 F
(.) 154.75 333.35 T
1 F
(&r) 72 299.06 T
(efer) 87.11 299.06 T
(ences-setter) 106.87 299.06 T
2 F
( de\336nitions variable) 166.84 299.06 T
0 F
([Generic function]) 451.03 299.06 T
-0.35 (Changes the set of references for the variable to) 90 270.77 P
2 F
-0.35 (de\336nitions) 319.11 270.77 P
0 F
-0.35 (, and noti\336es any existing clients of) 369.12 270.77 P
(the change.) 90 256.77 T
1 14 Q
(7.1  Method specs) 72 221.14 T
0 12 Q
(A) 72 192.18 T
2 F
(method spec) 83.66 192.18 T
0 F
( is a subclass of) 143.32 192.18 T
1 F
(<&variable>) 221.64 192.18 T
0 F
( that represents the name of a method.) 287.32 192.18 T
1 F
(<&method-variable>) 72 157.88 T
0 F
([Instantiable class]) 449.69 157.88 T
(The class that represents the name of a method.) 90 129.59 T
1 F
(&variable-name) 72 95.29 T
2 F
(method-variable) 158.99 95.29 T
3 F
(\336) 241.31 95.29 T
2 F
(<symbol>) 256.15 95.29 T
0 F
([G.F. method]) 471.67 95.29 T
(Returns the name of the method variable, as a symbol naming the method\325) 90 67 T
(s generic function.) 446.96 67 T
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Access Protocol) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(1) 532.3 42.62 T
(1) 536 42.62 T
1 12 Q
(&method-variable-specializers) 72 712 T
2 F
( method-variable) 229.31 712 T
3 F
(\336) 314.63 712 T
2 F
(types) 329.47 712 T
0 F
([Generic function]) 451.03 712 T
-0.35 (Returns a list of specializers for the method variable. Each of the specializers is represented as) 90 685.83 P
(a) 90 671.83 T
1 F
(<&type>) 98.33 671.83 T
0 F
(.) 144 671.83 T
1 16 Q
(8.  The expr) 72 631 T
(ession entity and pr) 153.49 631 T
(otocol) 286.99 631 T
0 12 Q
(An expression object is a representation of a source code fragment that can be evaluated. The) 72 603.5 T
-0.02 (derived database does not store many Dylan objects directly mainly because doing so would lose) 72 589.5 P
(useful information. For example, the expression \322) 72 575.5 T
4 F
($page-size * 4) 310.63 575.5 T
0 F
(\323 is generally a lot more) 411.43 575.5 T
(useful than value \322) 72 561.5 T
4 F
(1024) 162.31 561.5 T
0 F
(\323.) 191.11 561.5 T
1 F
(<&expr) 72 529.33 T
(ession>) 111.95 529.33 T
0 F
([Abstract class]) 465.02 529.33 T
(The class that represents a Dylan expression.) 90 503.17 T
1 F
(Issue) 72 477 T
0 F
(: Fill in the rest of the expression protocol.) 98 477 T
1 16 Q
(9.  The pr) 72 436.17 T
(otocol entity and pr) 138.38 436.17 T
(otocol) 271.87 436.17 T
1 12 Q
(<&pr) 72 402.67 T
(otocol>) 100.62 402.67 T
0 F
([Instantiable class]) 449.69 402.67 T
(The class that represents a protocol. This is a subclass of) 90 376.5 T
1 F
(<&de\336nition>) 364.62 376.5 T
0 F
(.) 436.98 376.5 T
(The init keywords for this class are) 90 350.33 T
1 F
(variable:) 261.64 350.33 T
0 F
(,) 307.63 350.33 T
1 F
(superpr) 313.63 350.33 T
(otocols:) 354.08 350.33 T
0 F
(, and) 393.41 350.33 T
1 F
(functions:) 419.74 350.33 T
0 F
(.) 471.07 350.33 T
1 F
(&pr) 72 318.17 T
(otocol-subpr) 93.78 318.17 T
(otocols) 158.23 318.17 T
2 F
(pr) 196.56 318.17 T
(otocol) 206.78 318.17 T
0 F
(#key) 239.78 318.17 T
2 F
(libraries client) 266.11 318.17 T
3 F
(\336) 340.12 318.17 T
2 F
(protocols query) 354.96 318.17 T
0 F
([Generic function]) 451.03 318.17 T
(Returns a sequence of all of the direct subprotocols \050as) 90 292 T
1 F
(<&pr) 355.94 292 T
(otocol>) 384.56 292 T
0 F
( objects\051 of the protocol.) 422.06 292 T
-0.42 (If) 90 265.83 P
2 F
-0.42 (libraries) 100.57 265.83 P
0 F
-0.42 ( is supplied, it must be a sequence of libraries or library names. When it is supplied,) 141.91 265.83 P
(only those subprotocols de\336ned in the given libraries are returned.) 90 251.83 T
1 F
(&pr) 72 219.67 T
(otocol-subpr) 93.78 219.67 T
(otocols-setter) 158.23 219.67 T
2 F
( pr) 226.2 219.67 T
(otocols pr) 239.42 219.67 T
(otocol) 287.32 219.67 T
0 F
([Generic function]) 451.03 219.67 T
-0.15 (Changes the subprotocols for the protocol to) 90 193.5 P
2 F
-0.15 (pr) 305.29 193.5 P
-0.15 (otocols) 315.51 193.5 P
0 F
-0.15 (, and noti\336es any existing clients of the) 350.18 193.5 P
(change.) 90 179.5 T
1 F
(&pr) 72 147.33 T
(otocol-superpr) 93.78 147.33 T
(otocols) 168.89 147.33 T
2 F
(pr) 207.22 147.33 T
(otocol) 217.44 147.33 T
0 F
(#key) 250.44 147.33 T
2 F
(libraries client) 276.77 147.33 T
3 F
(\336) 350.77 147.33 T
2 F
(protocols) 365.62 147.33 T
( query) 410.95 147.33 T
0 F
([Generic function]) 451.03 147.33 T
(Returns a sequence of all of the direct superprotocols \050as) 90 121.17 T
1 F
(<&pr) 365.27 121.17 T
(otocol>) 393.89 121.17 T
0 F
( objects\051 of the proto-) 431.39 121.17 T
(col.) 90 107.17 T
-0.42 (If) 90 81 P
2 F
-0.42 (libraries) 100.57 81 P
0 F
-0.42 ( is supplied, it must be a sequence of libraries or library names. When it is supplied,) 141.91 81 P
(only those superprotocols de\336ned in the given libraries are returned.) 90 67 T
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Access Protocol) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(12) 532 42.62 T
1 12 Q
(&pr) 72 712 T
(otocol-superpr) 93.78 712 T
(otocols-setter) 168.89 712 T
2 F
( pr) 236.86 712 T
(otocols pr) 250.08 712 T
(otocol) 297.97 712 T
0 F
([Generic function]) 451.03 712 T
(Changes the superprotocols for the protocol to) 90 685.95 T
2 F
(superpr) 315.64 685.95 T
(otocols) 352.52 685.95 T
0 F
(, and noti\336es any existing cli-) 387.19 685.95 T
(ents of the change.) 90 671.95 T
1 F
(&pr) 72 639.9 T
(otocol-classes) 93.78 639.9 T
2 F
(pr) 165.43 639.9 T
(otocol) 175.66 639.9 T
0 F
(#key) 208.66 639.9 T
2 F
(libraries client) 234.98 639.9 T
3 F
(\336) 308.99 639.9 T
2 F
(classes) 323.83 639.9 T
( query) 357.83 639.9 T
0 F
([Generic function]) 451.03 639.9 T
(Returns a sequence of all of the classes \050as) 90 613.84 T
1 F
(<&class>) 297.61 613.84 T
0 F
( objects\051 that participate in the protocol) 345.29 613.84 T
2 F
(.) 533.93 613.84 T
0 F
-0.42 (If) 90 587.79 P
2 F
-0.42 (libraries) 100.57 587.79 P
0 F
-0.42 ( is supplied, it must be a sequence of libraries or library names. When it is supplied,) 141.91 587.79 P
(only those classes de\336ned in the given libraries are returned.) 90 573.79 T
1 F
(&pr) 72 541.74 T
(otocol-classes-setter) 93.78 541.74 T
2 F
( pr) 195.07 541.74 T
(otocols pr) 208.3 541.74 T
(otocol) 256.19 541.74 T
0 F
([Generic function]) 451.03 541.74 T
-0.02 (Changes the classes for the protocol to) 90 515.68 P
2 F
-0.02 (classes) 278.17 515.68 P
0 F
-0.02 (, and noti\336es any existing clients of the change.) 312.17 515.68 P
1 F
(&pr) 72 483.63 T
(otocol-functions) 93.78 483.63 T
2 F
(pr) 178.78 483.63 T
(otocol) 189 483.63 T
0 F
(#key) 222 483.63 T
2 F
(libraries client) 248.33 483.63 T
3 F
(\336) 322.33 483.63 T
2 F
(generic-functions query) 337.18 483.63 T
0 F
-0.46 ([Generic function]) 451.49 483.63 P
(Returns a sequence of all of the generic functions \050as) 90 457.58 T
1 F
(<&generic-function>) 347.27 457.58 T
0 F
( objects\051 that par-) 454.93 457.58 T
(ticipate in the protocol) 90 443.58 T
2 F
(.) 198.32 443.58 T
0 F
-0.42 (If) 90 417.53 P
2 F
-0.42 (libraries) 100.57 417.53 P
0 F
-0.42 ( is supplied, it must be a sequence of libraries or library names. When it is supplied,) 141.91 417.53 P
(only those generic functions de\336ned in the given libraries are returned.) 90 403.53 T
1 F
(&pr) 72 371.47 T
(otocol-functions-setter) 93.78 371.47 T
2 F
( functions pr) 208.42 371.47 T
(otocol) 268.64 371.47 T
0 F
([Generic function]) 451.03 371.47 T
(Changes the functions for the protocol to) 90 345.42 T
2 F
(functions) 289.64 345.42 T
0 F
(, and noti\336es any existing clients of the) 333.65 345.42 T
(change.) 90 331.42 T
1 F
(&pr) 72 299.37 T
(otocol) 93.78 299.37 T
2 F
(de\336nition) 127.44 299.37 T
0 F
( #key) 172.78 299.37 T
2 F
(client) 202.1 299.37 T
3 F
(\336) 231.77 299.37 T
2 F
(protocols) 246.61 299.37 T
( query) 291.95 299.37 T
0 F
([Generic function]) 451.03 299.37 T
(Returns a sequence of) 90 273.32 T
1 F
(<&pr) 198.64 273.32 T
(otocol>) 227.26 273.32 T
0 F
( objects that describe which protocols this de\336nition par-) 264.76 273.32 T
(ticipates in.) 90 259.32 T
1 F
(&pr) 72 227.26 T
(otocol-setter) 93.78 227.26 T
2 F
( pr) 157.08 227.26 T
(otocol de\336nition) 170.3 227.26 T
0 F
([Generic function]) 451.03 227.26 T
(Changes the protocol for the de\336nition to) 90 201.21 T
2 F
(pr) 290.99 201.21 T
(otocol) 301.21 201.21 T
0 F
(, and noti\336es any existing clients of the) 331.21 201.21 T
(change.) 90 187.21 T
1 16 Q
(10.  The type entity and pr) 72 146.49 T
(otocol) 252.61 146.49 T
1 12 Q
(<&type>) 72 113.1 T
0 F
([Instantiable class]) 449.69 113.1 T
(The class that represents a Dylan type. This is a subclass of) 90 87.05 T
1 F
(<&de\336nition>) 377.62 87.05 T
0 F
(.) 449.98 87.05 T
1 F
(\245) 99 67 T
0 F
(For a class type, the type will be a) 108 67 T
1 F
(<&class>) 274.64 67 T
0 F
( object.) 322.32 67 T
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Access Protocol) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(13) 532 42.62 T
1 12 Q
(\245) 99 712 T
0 F
(For a subclass type, the type will be a) 108 712 T
1 F
(<&subclass>) 291.31 712 T
0 F
( object.) 357 712 T
1 F
(\245) 99 690.45 T
0 F
(For a singleton type, the type will be a) 108 690.45 T
1 F
(<&singleton>) 295.32 690.45 T
0 F
(.) 365 690.45 T
1 F
(Issue) 72 662.9 T
0 F
(: Fill in the rest of the type protocol.) 98 662.9 T
1 16 Q
(1) 72 620.68 T
(1.  The class entity and pr) 79.12 620.68 T
(otocol) 254.4 620.68 T
1 12 Q
(<&class>) 72 585.8 T
0 F
([Instantiable class]) 449.69 585.8 T
(The class that represents a class. This is a subclass of) 90 558.25 T
1 F
(<&type>) 347.95 558.25 T
0 F
(.) 393.62 558.25 T
(The init keywords for this class are) 90 530.7 T
1 F
(variable:) 261.64 530.7 T
0 F
(,) 307.63 530.7 T
1 F
(super) 313.63 530.7 T
(classes:) 342.08 530.7 T
0 F
(, and) 380.08 530.7 T
1 F
(slots:) 406.4 530.7 T
0 F
(.) 433.07 530.7 T
(For a class de\336ned using the following idiom,) 90 503.15 T
1 F
(&de\336nition-explicitly-known?) 313 503.15 T
0 F
( will return) 467.02 503.15 T
1 F
(#f) 523.34 503.15 T
0 F
(.) 533.34 503.15 T
4 10 Q
(define constant <a-class> = make\050<class>,...\051;) 144 482.93 T
1 12 Q
(&class-dir) 72 450.05 T
(ect-subclasses) 125.11 450.05 T
2 F
(class) 198.77 450.05 T
0 F
(#key) 225.77 450.05 T
2 F
(libraries client) 252.1 450.05 T
3 F
(\336) 326.1 450.05 T
2 F
(classes) 340.94 450.05 T
( query) 374.94 450.05 T
0 F
([Generic function]) 451.03 450.05 T
(Returns a sequence of all of the direct subclasses \050as) 90 422.5 T
1 F
(<&class>) 344.6 422.5 T
0 F
( objects\051 of the class.) 392.28 422.5 T
-0.42 (If) 90 394.95 P
2 F
-0.42 (libraries) 100.57 394.95 P
0 F
-0.42 ( is supplied, it must be a sequence of libraries or library names. When it is supplied,) 141.91 394.95 P
(only those subclasses de\336ned in the given libraries are returned.) 90 380.95 T
1 F
(&class-dir) 72 347.4 T
(ect-subclasses-setter) 125.11 347.4 T
2 F
( classes class) 228.41 347.4 T
0 F
([Generic function]) 451.03 347.4 T
(Changes the direct subclasses for the class to) 90 319.85 T
2 F
(classes) 308.63 319.85 T
0 F
(, and noti\336es any existing clients of the) 342.62 319.85 T
(change.) 90 305.85 T
1 F
(&class-dir) 72 272.3 T
(ect-super) 125.11 272.3 T
(classes) 172.21 272.3 T
2 F
(class) 209.21 272.3 T
0 F
(#key) 236.21 272.3 T
2 F
(libraries) 262.54 272.3 T
( client) 303.88 272.3 T
3 F
(\336) 336.54 272.3 T
2 F
(classes query) 351.38 272.3 T
0 F
([Generic function]) 451.03 272.3 T
(Returns a sequence of all of the direct superclasses \050as) 90 244.75 T
1 F
(<&class>) 353.93 244.75 T
0 F
( objects\051 of the class.) 401.6 244.75 T
-0.42 (If) 90 217.2 P
2 F
-0.42 (libraries) 100.57 217.2 P
0 F
-0.42 ( is supplied, it must be a sequence of libraries or library names. When it is supplied,) 141.91 217.2 P
(only those superclasses de\336ned in the given libraries are returned.) 90 203.2 T
1 F
(&class-dir) 72 169.65 T
(ect-super) 125.11 169.65 T
(classes-setter) 172.21 169.65 T
2 F
( classes class) 238.85 169.65 T
0 F
([Generic function]) 451.03 169.65 T
-0.18 (Changes the direct superclasses for the class to) 90 142.1 P
2 F
-0.18 (classes) 316.48 142.1 P
0 F
-0.18 (, and noti\336es any existing clients of the) 350.48 142.1 P
(change.) 90 128.1 T
1 F
(&class-dir) 72 94.55 T
(ect-slots) 125.11 94.55 T
2 F
(class) 169.43 94.55 T
0 F
(#key) 196.43 94.55 T
2 F
(client) 222.76 94.55 T
3 F
(\336) 252.42 94.55 T
2 F
(slots) 267.26 94.55 T
( query) 289.27 94.55 T
0 F
([Generic function]) 451.03 94.55 T
(Returns a sequence of all of the direct slots \050as) 90 67 T
1 F
(<&slot-descriptor>) 316.62 67 T
0 F
( objects\051 of the class.) 414.95 67 T
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Access Protocol) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(14) 532 42.62 T
1 12 Q
(&class-dir) 72 712 T
(ect-slots-setter) 125.11 712 T
2 F
( slots class) 199.07 712 T
0 F
([Generic function]) 451.03 712 T
(Changes the direct slots for the class to) 90 685.74 T
2 F
(slots) 280.64 685.74 T
0 F
(, and noti\336es any existing clients of the change.) 302.65 685.74 T
1 F
(&class-dir) 72 653.47 T
(ect-methods) 125.11 653.47 T
2 F
(class) 190.09 653.47 T
0 F
(#key) 217.09 653.47 T
2 F
(libraries) 243.42 653.47 T
( matching client) 284.76 653.47 T
3 F
(\336) 365.09 653.47 T
2 F
(methods query) 379.93 653.47 T
0 F
([Generic function]) 451.03 653.47 T
(Returns a sequence of all of the direct methods \050as) 90 627.21 T
1 F
(<&method>) 335.28 627.21 T
0 F
( objects\051 of the class.) 397.62 627.21 T
-0.42 (If) 90 600.95 P
2 F
-0.42 (libraries) 100.57 600.95 P
0 F
-0.42 ( is supplied, it must be a sequence of libraries or library names. When it is supplied,) 141.91 600.95 P
(only those methods de\336ned in the given libraries are returned.) 90 586.95 T
-0.05 (If) 90 560.68 P
2 F
-0.05 (matching) 100.94 560.68 P
0 F
-0.05 ( is supplied, only those methods whose generic function name contains the match-) 145.61 560.68 P
(ing substring are returned.) 90 546.68 T
1 F
(&class-dir) 72 514.42 T
(ect-methods-setter) 125.11 514.42 T
2 F
( methods class) 219.73 514.42 T
0 F
([Generic function]) 451.03 514.42 T
(Changes the direct methods for the class to) 90 488.16 T
2 F
(methods) 299.3 488.16 T
0 F
(, and noti\336es any existing clients of the) 339.3 488.16 T
(change.) 90 474.16 T
1 F
(&class-all-super) 72 441.89 T
(classes) 155.11 441.89 T
2 F
(class) 192.11 441.89 T
0 F
( #key) 216.11 441.89 T
2 F
(client) 245.44 441.89 T
3 F
(\336) 275.1 441.89 T
2 F
(classes) 289.94 441.89 T
( query) 323.94 441.89 T
0 F
([Generic function]) 451.03 441.89 T
-0.17 (Returns a sequence of all of the direct superclasses \050as) 90 415.63 P
1 F
-0.17 (<&class>) 352.21 415.63 P
0 F
-0.17 ( objects\051 of the class, in their) 399.89 415.63 P
(class precedence ordering.) 90 401.63 T
1 F
(&class-all-slots) 72 369.37 T
2 F
(class) 152.33 369.37 T
0 F
( #key) 176.33 369.37 T
2 F
(client) 205.66 369.37 T
3 F
(\336) 235.32 369.37 T
2 F
(slots) 250.16 369.37 T
( query) 272.17 369.37 T
0 F
([Generic function]) 451.03 369.37 T
(Returns a sequence of all of the slots \050as) 90 343.11 T
1 F
(<&slot-descriptor>) 286.3 343.11 T
0 F
( objects\051 of the class.) 384.62 343.11 T
1 F
(&class-r) 72 310.84 T
(equir) 115.1 310.84 T
(ed-keywords) 142.22 310.84 T
2 F
(class) 210.55 310.84 T
0 F
( #key) 234.55 310.84 T
2 F
(client) 263.88 310.84 T
3 F
(\336) 293.54 310.84 T
2 F
(keywords query) 308.39 310.84 T
0 F
([Generic function]) 451.03 310.84 T
(Returns a sequence of all of the required init keywords.) 90 284.58 T
1 F
(&class-r) 72 252.32 T
(equir) 115.1 252.32 T
(ed-keywords-setter) 142.22 252.32 T
2 F
( keywor) 240.19 252.32 T
(ds class) 277.4 252.32 T
0 F
([Generic function]) 451.03 252.32 T
(Changes the required keywords for the class to) 90 226.05 T
2 F
(keywor) 317.95 226.05 T
(ds) 352.16 226.05 T
0 F
(, and noti\336es any existing clients of) 362.83 226.05 T
(the change.) 90 212.05 T
1 F
(&de\336nition-attributes) 72 179.79 T
2 F
(class) 187.67 179.79 T
0 F
( #key) 211.67 179.79 T
2 F
(client) 241 179.79 T
3 F
(\336) 270.66 179.79 T
2 F
(keywords query) 285.5 179.79 T
0 F
([G.F. method]) 471.67 179.79 T
(Returns a sequence of other attributes of the class, such as) 90 153.53 T
1 F
(#"primary") 371.94 153.53 T
0 F
(,) 433.92 153.53 T
1 F
(#"open") 439.92 153.53 T
0 F
( or) 483.91 153.53 T
1 F
(#"sealed") 90 139.53 T
0 F
(, and so forth.) 140.65 139.53 T
1 F
(&pr) 72 107.26 T
(otocol) 93.78 107.26 T
2 F
(class) 127.44 107.26 T
0 F
( #key) 151.44 107.26 T
2 F
(client) 180.77 107.26 T
3 F
(\336) 210.43 107.26 T
2 F
(protocols query) 225.28 107.26 T
0 F
([G.F. method]) 471.67 107.26 T
(Returns a sequence of) 90 81 T
1 F
(<&pr) 198.64 81 T
(otocol>) 227.26 81 T
0 F
( objects that describe which protocols this class partici-) 264.76 81 T
(pates in.) 90 67 T
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Access Protocol) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(15) 532 42.62 T
1 14 Q
(1) 72 710.67 T
(1.1  The slot descriptor entity and pr) 78.23 710.67 T
(otocol) 296.53 710.67 T
1 12 Q
(Issue) 72 682.65 T
0 F
(: Do we want to track whether there are \322overriding\323 getter/setter functions on the sub-) 98 682.65 T
(classes of a class that de\336nes a slot?) 72 668.65 T
1 F
(<&slot-descriptor>) 72 635.3 T
0 F
([Instantiable class]) 449.69 635.3 T
(The class that represents a slot. This is a subclass of) 90 607.95 T
1 F
(<&de\336nition>) 341.96 607.95 T
0 F
(.) 414.32 607.95 T
(The init keywords for this class are) 90 580.6 T
1 F
(getter:) 261.64 580.6 T
0 F
(,) 295.61 580.6 T
1 F
(setter:) 301.61 580.6 T
0 F
(,) 334.25 580.6 T
1 F
( type:) 337.25 580.6 T
0 F
(,) 366.24 580.6 T
1 F
( init-value:) 369.24 580.6 T
0 F
(,) 424.91 580.6 T
1 F
( init-function:) 427.91 580.6 T
0 F
(, and) 498.91 580.6 T
1 F
(allocation:) 90 566.6 T
0 F
(.) 144 566.6 T
1 F
(&slot-class) 72 533.25 T
2 F
(slot) 130.99 533.25 T
0 F
( #key) 148.33 533.25 T
2 F
(client) 177.66 533.25 T
3 F
(\336) 207.32 533.25 T
2 F
(class query) 222.17 533.25 T
0 F
([Generic function]) 451.03 533.25 T
(Returns the class in which the slot resides, as a) 90 505.9 T
1 F
(<&class>) 317.64 505.9 T
0 F
(.) 365.32 505.9 T
1 F
(&slot-getter) 72 472.55 T
2 F
(slot) 136.97 472.55 T
0 F
( #key) 154.31 472.55 T
2 F
(client) 183.64 472.55 T
3 F
(\336) 213.3 472.55 T
2 F
(variable query) 228.14 472.55 T
0 F
([Generic function]) 451.03 472.55 T
(Returns the name of the getter for the slot as a) 90 445.2 T
1 F
(<&variable>) 314.29 445.2 T
0 F
(. Note that the name of the slot) 379.97 445.2 T
(getter is also returned by) 90 431.2 T
1 F
(&de\336nition-variable) 211.64 431.2 T
0 F
(.) 316.32 431.2 T
1 F
(&slot-getter) 72 397.85 T
(-setter) 133.52 397.85 T
2 F
( getter slot) 166.16 397.85 T
0 F
([Generic function]) 451.03 397.85 T
(Changes the getter for the slot to) 90 370.5 T
2 F
(getter) 249.65 370.5 T
0 F
(, and noti\336es any existing clients of the change.) 277.16 370.5 T
1 F
(&slot-setter) 72 337.15 T
2 F
(slot) 135.64 337.15 T
0 F
( #key) 152.98 337.15 T
2 F
(client) 182.3 337.15 T
3 F
(\336) 211.97 337.15 T
2 F
(variable query) 226.81 337.15 T
0 F
([Generic function]) 451.03 337.15 T
(Returns the name of the setter for the slot as a) 90 309.8 T
1 F
(<&variable>) 312.96 309.8 T
0 F
(.) 378.64 309.8 T
1 F
(&slot-setter) 72 276.45 T
(-setter) 132.19 276.45 T
2 F
( setter slot) 164.83 276.45 T
0 F
([Generic function]) 451.03 276.45 T
(Changes the setter for the slot to) 90 249.1 T
2 F
(setter) 248.32 249.1 T
0 F
(, and noti\336es any existing clients of the change.) 274.5 249.1 T
1 F
(&slot-type) 72 215.75 T
2 F
(slot) 128.99 215.75 T
0 F
( #key) 146.33 215.75 T
2 F
(client) 175.66 215.75 T
3 F
(\336) 205.32 215.75 T
2 F
(type query) 220.16 215.75 T
0 F
([Generic function]) 451.03 215.75 T
(Returns the type of the slot as a) 90 188.4 T
1 F
(<&type>) 243.98 188.4 T
0 F
(.) 289.66 188.4 T
1 F
(&slot-type-setter) 72 155.05 T
2 F
( type slot) 158.63 155.05 T
0 F
([Generic function]) 451.03 155.05 T
(Changes the type for the slot to) 90 127.7 T
2 F
(type) 242.99 127.7 T
0 F
(, and noti\336es any existing clients of the change.) 262.98 127.7 T
1 F
(&slot-init-value) 72 94.35 T
2 F
(slot) 155.66 94.35 T
0 F
( #key) 173 94.35 T
2 F
(client) 202.33 94.35 T
3 F
(\336) 232 94.35 T
2 F
(expression) 246.84 94.35 T
( query) 298.16 94.35 T
0 F
([Generic function]) 451.03 94.35 T
(Returns the init value of the slot as an) 90 67 T
1 F
(<&expr) 274.32 67 T
(ession>) 314.27 67 T
0 F
(.) 351.78 67 T
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Access Protocol) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(16) 532 42.62 T
1 12 Q
(&slot-init-value-setter) 72 712 T
2 F
( expr) 185.3 712 T
(ession slot) 209.18 712 T
0 F
([Generic function]) 451.03 712 T
(Changes the init value for the slot to) 90 686 T
2 F
(expr) 267.32 686 T
(ession) 288.2 686 T
0 F
(, and noti\336es any existing clients of the) 318.2 686 T
(change.) 90 672 T
1 F
(&slot-init-function) 72 640 T
2 F
(slot) 171 640 T
0 F
( #key) 188.34 640 T
2 F
(client) 217.67 640 T
3 F
(\336) 247.33 640 T
2 F
(expression query) 262.18 640 T
0 F
([Generic function]) 451.03 640 T
(Returns the init function of the slot as an) 90 614 T
1 F
(<&expr) 288.32 614 T
(ession>) 328.27 614 T
0 F
(.) 365.78 614 T
1 F
(&slot-init-function-setter) 72 582 T
2 F
( expr) 200.64 582 T
(ession slot) 224.52 582 T
0 F
([Generic function]) 451.03 582 T
(Changes the init function for the slot to) 90 556 T
2 F
(expr) 281.33 556 T
(ession) 302.21 556 T
0 F
(, and noti\336es any existing clients of the) 332.21 556 T
(change.) 90 542 T
1 F
(&slot-init-keyword) 72 510 T
2 F
(slot) 172.99 510 T
0 F
( #key) 190.33 510 T
2 F
(client) 219.66 510 T
3 F
(\336) 249.32 510 T
2 F
(keyword query) 264.17 510 T
0 F
([Generic function]) 451.03 510 T
(Returns the init keyword of the slot.) 90 484 T
1 F
(&slot-init-keyword-setter) 72 452 T
2 F
( keywor) 202.63 452 T
(d slot) 239.84 452 T
0 F
([Generic function]) 451.03 452 T
(Changes the init keyword for the slot to) 90 426 T
2 F
(expr) 283.32 426 T
(ession) 304.2 426 T
0 F
(, and noti\336es any existing clients of the) 334.2 426 T
(change.) 90 412 T
1 F
(&slot-allocation) 72 380 T
2 F
(slot) 157 380 T
0 F
( #key) 174.34 380 T
2 F
(client) 203.66 380 T
3 F
(\336) 233.33 380 T
2 F
(keyword query) 248.17 380 T
0 F
([Generic function]) 451.03 380 T
(Returns the allocation of the slot, such as) 90 354 T
1 F
(#"virtual") 290.32 354 T
0 F
(,) 344.3 354 T
1 F
(#"class") 350.3 354 T
0 F
(,) 393.62 354 T
1 F
(#"constant") 399.62 354 T
0 F
(,) 462.28 354 T
1 F
(#"instance") 468.28 354 T
0 F
(,) 529.6 354 T
(and) 90 340 T
1 F
(#"each-subclass") 110.33 340 T
0 F
(.) 198.98 340 T
1 F
(&slot-allocation-setter) 72 308 T
2 F
( allocation slot) 186.64 308 T
0 F
([Generic function]) 451.03 308 T
(Changes the allocation for the slot to) 90 282 T
2 F
(allocation) 269.65 282 T
0 F
(, and noti\336es any existing clients of the) 318.32 282 T
(change.) 90 268 T
1 F
(&de\336nition-attributes) 72 236 T
2 F
(slot) 187.67 236 T
0 F
( #key) 205.01 236 T
2 F
(client) 234.34 236 T
3 F
(\336) 264 236 T
2 F
(keywords query) 278.84 236 T
0 F
([G.F. method]) 471.67 236 T
(Returns a sequence of other attributes of the slot, such as) 90 210 T
1 F
(#"inherited") 365.95 210 T
0 F
(,) 431.94 210 T
1 F
(#"open") 437.94 210 T
0 F
( or) 481.93 210 T
1 F
(#"sealed") 90 196 T
0 F
(, and so forth.) 140.65 196 T
1 F
(&de\336nition-par) 72 164 T
(ent) 152.46 164 T
2 F
(slot) 171.46 164 T
0 F
( #key) 188.8 164 T
2 F
(client) 218.12 164 T
3 F
(\336) 247.79 164 T
2 F
(definition query) 262.63 164 T
0 F
([G.F. method]) 471.67 164 T
(For a slot, this will always return the de\336nition of the containing) 90 138 T
1 F
(de\336ne class.) 402.32 138 T
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Access Protocol) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(17) 532 42.62 T
1 12 Q
(&pr) 72 712 T
(otocol) 93.78 712 T
2 F
(slot) 127.44 712 T
0 F
( #key) 144.78 712 T
2 F
(client) 174.11 712 T
3 F
(\336) 203.77 712 T
2 F
(protocols query) 218.62 712 T
0 F
([G.F. method]) 471.67 712 T
-0.43 (Returns a sequence of) 90 683.71 P
1 F
-0.43 (<&pr) 196.91 683.71 P
-0.43 (otocol>) 225.53 683.71 P
0 F
-0.43 ( objects that describe which protocols the getter and setter) 263.03 683.71 P
(of this slot participate in.) 90 669.71 T
1 16 Q
(12.  The generic function entity and pr) 72 626.74 T
(otocol) 333.94 626.74 T
1 12 Q
(<&function>) 72 591.12 T
0 F
([Abstract class]) 465.02 591.12 T
(The class that represents a Dylan function. This is a subclass of) 90 562.82 T
1 F
(<&de\336nition>) 396.95 562.82 T
0 F
(.) 469.31 562.82 T
(The init keywords for this class are) 90 534.53 T
1 F
(variable:) 261.64 534.53 T
0 F
(,) 307.63 534.53 T
1 F
(r) 313.63 534.53 T
(equir) 318.74 534.53 T
(ed:) 345.86 534.53 T
0 F
(,) 361.86 534.53 T
1 F
(r) 367.86 534.53 T
(est?:) 372.97 534.53 T
0 F
(,) 396.96 534.53 T
1 F
( key:) 399.96 534.53 T
0 F
(,) 424.96 534.53 T
(and) 430.96 534.53 T
1 F
( all-keys?:) 448.28 534.53 T
0 F
(.) 500.62 534.53 T
1 F
(<&generic-function>) 72 500.23 T
0 F
([Instantiable class]) 449.69 500.23 T
(The class that represents a generic function. This is a subclass of) 90 471.94 T
1 F
(<&function>) 402.94 471.94 T
0 F
(.) 469.28 471.94 T
(For a generic function de\336ned using the following idiom,) 90 443.65 T
1 F
(&de\336nition-explicitly-known?) 367.98 443.65 T
0 F
(will return) 90 429.65 T
1 F
(#f) 143.33 429.65 T
0 F
(:) 153.32 429.65 T
4 10 Q
(define constant a-generic = make\050<generic-function>,...\051;) 144 408.69 T
1 12 Q
(&generic-function-methods) 72 375.06 T
2 F
(generic-function) 216.31 375.06 T
0 F
(#key) 298.63 375.06 T
2 F
(libraries) 324.96 375.06 T
(class client) 369.3 375.06 T
3 F
(\336) 425.96 375.06 T
2 F
(methods) 440.81 375.06 T
( query) 480.8 375.06 T
0 F
([Generic function]) 72 361.06 T
(Returns a sequence of all of the methods \050as) 90 332.77 T
1 F
(<&method>) 304.96 332.77 T
0 F
( objects\051 on the generic function) 367.3 332.77 T
2 F
(generic-function) 90 318.77 T
0 F
(.) 169.32 318.77 T
-0.42 (If) 90 290.47 P
2 F
-0.42 (libraries) 100.57 290.47 P
0 F
-0.42 ( is supplied, it must be a sequence of libraries or library names. When it is supplied,) 141.91 290.47 P
(only those methods de\336ned in the given libraries are returned.) 90 276.47 T
-0.02 (If) 90 248.18 P
2 F
-0.02 (class) 100.97 248.18 P
0 F
-0.02 ( is supplied, it must be a class. When it is supplied, only those methods that specialize) 124.97 248.18 P
(at least one ar) 90 234.18 T
(gument on the given class are returned.) 156.1 234.18 T
1 F
(&generic-function-methods-setter) 72 199.88 T
2 F
( methods generic-function) 245.95 199.88 T
0 F
([Generic function]) 451.03 199.88 T
(Changes the set of methods for the generic function to) 90 171.59 T
2 F
(method) 353.29 171.59 T
0 F
(, and noti\336es any existing cli-) 388.62 171.59 T
(ents of the change.) 90 157.59 T
1 F
(&generic-function-kind) 72 123.29 T
2 F
(generic-function) 196.33 123.29 T
0 F
( #key) 275.65 123.29 T
2 F
(client) 304.98 123.29 T
3 F
(\336) 334.64 123.29 T
2 F
(keyword query) 349.49 123.29 T
0 F
([Generic function]) 451.03 123.29 T
-0.38 (Returns the kind of the generic function:) 90 95 P
1 F
-0.38 (#"explicit") 285.01 95 P
0 F
-0.38 ( when the generic function was explicitly) 341.66 95 P
(de\336ned,) 90 81 T
1 F
(#"implicit") 131.33 81 T
0 F
( when it was implicitly de\336ned via a call to) 189.98 81 T
1 F
(de\336ne method) 399.97 81 T
0 F
(, or) 472.31 81 T
1 F
(#"slot") 491.3 81 T
0 F
(when it was implicitly de\336ned as a slot getter or setter by) 90 67 T
1 F
(de\336ne class) 367.31 67 T
0 F
(.) 424.98 67 T
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Access Protocol) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(18) 532 42.62 T
1 12 Q
(&generic-function-kind-setter) 72 712 T
2 F
( keywor) 225.97 712 T
(d generic-function) 263.18 712 T
0 F
([Generic function]) 451.03 712 T
(Changes the kind of the generic function to) 90 685.84 T
2 F
(keywor) 300.64 685.84 T
(d) 334.85 685.84 T
0 F
(, and noti\336es any existing clients of the) 340.85 685.84 T
(change.) 90 671.84 T
1 F
(&function-parameters) 72 639.68 T
2 F
(generic-function) 190.31 639.68 T
0 F
( #key) 269.63 639.68 T
2 F
(client) 298.96 639.68 T
3 F
(\336) 328.62 639.68 T
2 F
(required rest keys query) 343.46 639.68 T
0 F
([G.F. method]) 471.67 639.68 T
-0.1 (Returns three values: a sequence of the required ar) 90 613.53 P
-0.1 (guments \050as symbols\051, the rest ar) 331.6 613.53 P
-0.1 (gument \050a) 488.87 613.53 P
(symbol, or) 90 599.53 T
1 F
(#f) 144.34 599.53 T
0 F
( if there is none\051, and a sequence of the keyword ar) 154.33 599.53 T
(guments \050as symbols\051.) 399.37 599.53 T
1 F
(&function-parameters-setter) 72 567.37 T
2 F
( r) 219.95 567.37 T
(equir) 227.17 567.37 T
(ed r) 252.06 567.37 T
(est keys generic-function) 270.61 567.37 T
0 F
([G.F. method]) 471.67 567.37 T
(Changes the parameters of the generic function, and noti\336es any existing clients of the) 90 541.21 T
(change.) 90 527.21 T
1 F
(&function-values) 72 495.05 T
2 F
(generic-function) 163.67 495.05 T
0 F
( #key) 242.99 495.05 T
2 F
(client) 272.32 495.05 T
3 F
(\336) 301.98 495.05 T
2 F
(values) 316.82 495.05 T
( query) 347.48 495.05 T
0 F
([G.F. method]) 471.67 495.05 T
(Returns a sequence, each element of which is a pair consisting of the name of the value and) 90 468.89 T
(the value\325) 90 454.89 T
(s type.) 136.99 454.89 T
1 F
(&function-values-setter) 72 422.74 T
2 F
( values generic-function) 193.31 422.74 T
0 F
([G.F. method]) 471.67 422.74 T
(Changes the values of the generic function, and noti\336es any existing clients of the change.) 90 396.58 T
1 F
(&de\336nition-attributes) 72 364.42 T
2 F
(generic-function) 187.67 364.42 T
0 F
( #key) 266.99 364.42 T
2 F
(client) 296.32 364.42 T
3 F
(\336) 325.98 364.42 T
2 F
(keywords query) 340.82 364.42 T
0 F
([G.F. method]) 471.67 364.42 T
-0.24 (Returns a sequence of other attributes of the generic function, such as) 90 338.26 P
1 F
-0.24 (#"open") 424.07 338.26 P
0 F
-0.24 ( or) 468.07 338.26 P
1 F
-0.24 (#"sealed") 483.59 338.26 P
0 F
-0.24 (,) 534.24 338.26 P
(and so forth.) 90 324.26 T
1 F
(&pr) 72 292.11 T
(otocol) 93.78 292.11 T
2 F
(generic-function) 127.44 292.11 T
0 F
( #key) 206.76 292.11 T
2 F
(client) 236.09 292.11 T
3 F
(\336) 265.75 292.11 T
2 F
(protocols query) 280.6 292.11 T
0 F
([G.F. method]) 471.67 292.11 T
(Returns a sequence of) 90 265.95 T
1 F
(<&pr) 198.64 265.95 T
(otocol>) 227.26 265.95 T
0 F
( objects that describe which protocols this generic func-) 264.76 265.95 T
(tion participates in.) 90 251.95 T
1 16 Q
(13.  The function and method entities and pr) 72 211.12 T
(otocol) 375.3 211.12 T
1 12 Q
(<&method>) 72 177.63 T
0 F
([Instantiable class]) 449.69 177.63 T
(The class that represents a method. This is a subclass of) 90 151.47 T
1 F
(<&function>) 360.62 151.47 T
0 F
(.) 426.97 151.47 T
(This class also supports the) 90 125.32 T
1 F
(specializers:) 224.33 125.32 T
0 F
( init keyword.) 286.98 125.32 T
(For a method de\336ned using the following idiom,) 90 99.16 T
1 F
(&de\336nition-explicitly-known?) 325.67 99.16 T
0 F
( will return) 479.69 99.16 T
1 F
(#f) 90 85.16 T
0 F
(:) 100 85.16 T
4 10 Q
(define constant a-method = method \050...\051 ... end;) 144 66.33 T
FMENDPAGE
%%EndPage: "18" 18
%%Page: "19" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Access Protocol) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(19) 532 42.62 T
1 12 Q
(&function-parameters) 72 712 T
2 F
(method) 190.31 712 T
0 F
( #key) 225.64 712 T
2 F
(client) 254.96 712 T
3 F
(\336) 284.63 712 T
2 F
(required rest keys query) 299.47 712 T
0 F
([G.F. method]) 471.67 712 T
-0.1 (Returns three values: a sequence of the required ar) 90 683.94 P
-0.1 (guments \050as symbols\051, the rest ar) 331.6 683.94 P
-0.1 (gument \050a) 488.87 683.94 P
(symbol, or) 90 669.94 T
1 F
(#f) 144.34 669.94 T
0 F
( if there is none\051, and a sequence of the keyword ar) 154.33 669.94 T
(guments \050as pairs consisting) 399.37 669.94 T
(of the ar) 90 655.94 T
(gument name as a symbol and its default value as a Dylan expression\051.) 129.77 655.94 T
(This dif) 90 627.88 T
(fers from) 127.45 627.88 T
1 F
(&function-arguments) 174.77 627.88 T
0 F
( on) 286.09 627.88 T
1 F
(<&generic-function>) 304.09 627.88 T
0 F
( in that the returned ar) 411.76 627.88 T
(gu-) 517.85 627.88 T
(ment list will include default values for keyword ar) 90 613.88 T
(guments.) 335.75 613.88 T
1 F
(&function-parameters-setter) 72 579.81 T
2 F
( r) 219.95 579.81 T
(equir) 227.17 579.81 T
(ed r) 252.06 579.81 T
(est keys method) 270.61 579.81 T
0 F
([G.F. method]) 471.67 579.81 T
(Changes the parameters of the generic function, and noti\336es any existing clients of the) 90 551.75 T
(change.) 90 537.75 T
1 F
(&function-values) 72 503.69 T
2 F
(method) 163.67 503.69 T
0 F
( #key) 199 503.69 T
2 F
(client) 228.32 503.69 T
3 F
(\336) 257.99 503.69 T
2 F
(values) 272.83 503.69 T
( query) 303.49 503.69 T
0 F
([G.F. method]) 471.67 503.69 T
(Returns a sequence, each element of which is a pair consisting of the name of the value and) 90 475.62 T
(the value\325) 90 461.62 T
(s type.) 136.99 461.62 T
1 F
(&function-values) 72 427.56 T
2 F
(method) 163.67 427.56 T
0 F
( #key) 199 427.56 T
2 F
(client) 228.32 427.56 T
3 F
(\336) 257.99 427.56 T
2 F
(values) 272.83 427.56 T
( query) 303.49 427.56 T
0 F
([G.F. method]) 471.67 427.56 T
(Returns a sequence, each element of which is a pair consisting of the name of the value and) 90 399.5 T
(the value\325) 90 385.5 T
(s type.) 136.99 385.5 T
1 F
(&method-specializers) 72 351.44 T
2 F
(method) 186.31 351.44 T
0 F
( #key) 221.64 351.44 T
2 F
(client) 250.97 351.44 T
3 F
(\336) 280.63 351.44 T
2 F
(specializers query) 295.48 351.44 T
0 F
([Generic function]) 451.03 351.44 T
-0.38 (Returns a list of specializers for the method. The length of the sequence is equal to the number) 90 323.38 P
(of required ar) 90 309.38 T
(guments for the method. Each of the specializers is represented as a) 155.09 309.38 T
1 F
(<&type>) 482.68 309.38 T
0 F
(,) 528.35 309.38 T
1 F
(&method-specializers-setter) 72 275.31 T
2 F
( specializers method) 215.95 275.31 T
0 F
([Generic function]) 451.03 275.31 T
-0.31 (Changes the specializers for the method to) 90 247.25 P
2 F
-0.31 (specializers) 294.81 247.25 P
0 F
-0.31 (, and noti\336es any existing clients of the) 351.47 247.25 P
(change.) 90 233.25 T
1 F
(&method-generic-functions) 72 199.19 T
2 F
(method) 216.31 199.19 T
0 F
( #key) 251.64 199.19 T
2 F
(client) 280.97 199.19 T
3 F
(\336) 310.63 199.19 T
2 F
(generic-functions) 325.48 199.19 T
( query) 409.46 199.19 T
0 F
([Generic function]) 451.03 199.19 T
(Returns a sequence of all the generic functions for which this is a method. \050This returns a) 90 171.12 T
(sequence of generic functions because the same method can be added to more than one) 90 157.12 T
(generic function.\051) 90 143.12 T
1 F
(&method-kind) 72 109.06 T
2 F
(method) 151.01 109.06 T
0 F
( #key) 186.34 109.06 T
2 F
(client) 215.66 109.06 T
3 F
(\336) 245.33 109.06 T
2 F
(keyword) 260.17 109.06 T
( query) 300.83 109.06 T
0 F
([Generic function]) 451.03 109.06 T
(Returns the kind of the method:) 90 81 T
1 F
(#"explicit") 245.33 81 T
0 F
( when the method was explicitly de\336ned, or) 301.98 81 T
1 F
(#"slot") 90 67 T
0 F
( when it was implicitly de\336ned as a slot getter or setter by) 127.32 67 T
1 F
(de\336ne class) 407.63 67 T
0 F
(.) 465.3 67 T
FMENDPAGE
%%EndPage: "19" 19
%%Page: "20" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Access Protocol) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(20) 532 42.62 T
1 12 Q
(&method-kind-setter) 72 712 T
2 F
( kind method) 180.65 712 T
0 F
([Generic function]) 451.03 712 T
(Changes the kind of the method to) 90 683.56 T
2 F
(kind) 258.32 683.56 T
0 F
(, and noti\336es any existing clients of the change.) 278.99 683.56 T
1 F
(&de\336nition-attributes) 72 649.12 T
2 F
(method) 187.67 649.12 T
0 F
( #key) 223 649.12 T
2 F
(client) 252.32 649.12 T
3 F
(\336) 281.99 649.12 T
2 F
(keywords query) 296.83 649.12 T
0 F
([G.F. method]) 471.67 649.12 T
(Returns a sequence of other attributes of the method, such as) 90 620.69 T
1 F
(#"open") 384.61 620.69 T
0 F
( or) 428.6 620.69 T
1 F
(#"sealed") 444.6 620.69 T
0 F
(, and so) 495.25 620.69 T
(forth.) 90 606.69 T
1 F
(&internal-functions) 72 572.25 T
2 F
(method) 177 572.25 T
0 F
( #key) 212.33 572.25 T
2 F
(client) 241.66 572.25 T
3 F
(\336) 271.32 572.25 T
2 F
(functions query) 286.16 572.25 T
0 F
([Generic function]) 451.03 572.25 T
-0.09 (Returns a sequence of all of the methods that are de\336ned as internal functions of the speci\336ed) 90 543.81 P
(method.) 90 529.81 T
1 F
(&callees) 72 495.38 T
2 F
(method) 118.32 495.38 T
0 F
( #key) 153.65 495.38 T
2 F
( modules libraries kinds client) 179.98 495.38 T
3 F
(\336) 328.31 495.38 T
2 F
(definitions query) 343.15 495.38 T
0 F
([Generic function]) 451.03 495.38 T
(Returns a sequence of all of the de\336nitions used by the speci\336ed method) 90 466.94 T
(If) 90 438.5 T
2 F
(modules) 100.99 438.5 T
0 F
( is supplied, it must be a sequence of modules or module names. When it is sup-) 140.99 438.5 T
(plied, only those callees de\336ned in the given modules are returned.) 90 424.5 T
-0.42 (If) 90 396.06 P
2 F
-0.42 (libraries) 100.57 396.06 P
0 F
-0.42 ( is supplied, it must be a sequence of libraries or library names. When it is supplied,) 141.91 396.06 P
(only those callees de\336ned in the given libraries are returned.) 90 382.06 T
-0.43 (If) 90 353.62 P
2 F
-0.43 (kinds) 100.56 353.62 P
0 F
-0.43 ( is supplied, it must be a sequence of keywords that describe what \322kind\323 of de\336nitions) 125.9 353.62 P
(to look for) 90 339.62 T
(. For example, if) 140 339.62 T
2 F
(kinds) 222.66 339.62 T
0 F
( includes only) 247.99 339.62 T
1 F
(#"class") 318.32 339.62 T
0 F
(, only de\336nitions used \322as a class\323) 361.64 339.62 T
-0.05 (will be returned. The keywords can be:) 90 325.62 P
1 F
-0.05 (#"class") 280.23 325.62 P
0 F
-0.05 (,) 323.55 325.62 P
1 F
-0.05 (#"generic-function") 329.5 325.62 P
0 F
-0.05 (,) 432.81 325.62 P
1 F
-0.05 (#"method") 438.75 325.62 P
0 F
-0.05 (,) 496.73 325.62 P
1 F
-0.05 (#"vari-) 502.68 325.62 P
(able-r) 90 311.62 T
(ead") 120.44 311.62 T
0 F
(,) 145.1 311.62 T
1 F
(#"variable-write") 151.1 311.62 T
0 F
(,) 243.07 311.62 T
1 F
(#"variable") 249.07 311.62 T
0 F
( \050that is, either a read or a write\051,) 310.39 311.62 T
1 F
(#"constant") 470.68 311.62 T
0 F
(,) 533.33 311.62 T
(or) 90 297.62 T
1 F
(#"macr) 103 297.62 T
(o") 142.09 297.62 T
0 F
(.) 154.75 297.62 T
1 F
(&callees-setter) 72 263.19 T
2 F
( de\336nitions method) 147.96 263.19 T
0 F
([Generic function]) 451.03 263.19 T
(Changes the callees of method to) 90 234.75 T
2 F
(de\336nitions) 251.98 234.75 T
0 F
(, and noti\336es any existing clients of the change.) 301.98 234.75 T
1 F
(&pc-map) 72 200.31 T
2 F
(method) 123.66 200.31 T
( pc) 158.99 200.31 T
0 F
( #key) 173.32 200.31 T
2 F
(client) 202.64 200.31 T
3 F
(\336) 232.31 200.31 T
2 F
(source-locator) 247.15 200.31 T
( query) 317.81 200.31 T
0 F
([Generic function]) 451.03 200.31 T
-0.33 (Returns a mapping from program counter\050s\051 to detailed source location information \050such as a) 90 171.88 P
-0.02 (source line number\051. The PC is zero-relative, that is, it is an of) 90 157.88 P
-0.02 (fset from the starting PC of the) 388.49 157.88 P
(method.) 90 143.88 T
1 F
(&local-map) 72 109.44 T
2 F
(method) 135.66 109.44 T
( pc) 170.99 109.44 T
0 F
( #key) 185.32 109.44 T
2 F
(client) 214.64 109.44 T
3 F
(\336) 244.31 109.44 T
2 F
(local-variables) 259.15 109.44 T
( query) 331.81 109.44 T
0 F
([Generic function]) 451.03 109.44 T
-0.01 (Returns a mapping from program counter\050s\051 to the set of local variables that are active at that) 90 81 P
(PC. The PC is zero-relative, that is, it is an of) 90 67 T
(fset from the starting PC of the method.) 307.44 67 T
FMENDPAGE
%%EndPage: "20" 20
%%Page: "21" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Access Protocol) 72 42.62 T
(September 5, 1995) 275.89 42.62 T
(21) 532 42.62 T
1 16 Q
(14.  The compiler warning entity and pr) 72 709.33 T
(otocol) 344.61 709.33 T
1 12 Q
(<compiler) 72 672.26 T
(-warning>) 123.72 672.26 T
0 F
([Abstract class]) 465.02 672.26 T
(The class that all compiler warnings are based on.) 90 642.53 T
1 F
(warning-text) 72 606.79 T
2 F
(warning) 140.99 606.79 T
3 F
(\336) 184 606.79 T
2 F
(string) 198.84 606.79 T
0 F
([Generic function]) 451.03 606.79 T
(Returns a string that describes what the compiler warning is.) 90 577.05 T
1 F
(warning-kind) 72 541.32 T
2 F
(warning) 145.02 541.32 T
3 F
(\336) 188.03 541.32 T
2 F
(keyword) 202.87 541.32 T
0 F
([Generic function]) 451.03 541.32 T
(Returns a keyword giving the \322kind\323 of the compiler warning.) 90 511.58 T
1 F
(Issue) 72 481.84 T
0 F
(: What does this mean, the \322kind\323 of the warning?) 98 481.84 T
1 F
(warning-de\336nition) 72 446.11 T
2 F
(warning) 170.35 446.11 T
3 F
(\336) 213.36 446.11 T
2 F
(definition) 228.2 446.11 T
0 F
([Generic function]) 451.03 446.11 T
(Returns the de\336nition with which the warning is associated.) 90 416.37 T
1 F
(warning-locator) 72 380.63 T
2 F
(warning) 157.66 380.63 T
3 F
(\336) 200.66 380.63 T
2 F
(source-locator) 215.51 380.63 T
0 F
([Generic function]) 451.03 380.63 T
-0.29 (Returns a source locator that points to the exact place in the de\336nition that caused the warning) 90 350.89 P
(to be issued.) 90 336.89 T
1 F
(warning-status) 72 301.16 T
2 F
(warning) 151.67 301.16 T
3 F
(\336) 194.68 301.16 T
2 F
(keyword) 209.52 301.16 T
0 F
([Generic function]) 451.03 301.16 T
(Returns a keyword indicating the status of the warning, one of) 90 271.42 T
1 F
(#"\336xed") 391.96 271.42 T
0 F
( or) 435.95 271.42 T
1 F
(#"untouched") 451.94 271.42 T
0 F
(.) 525.28 271.42 T
1 F
(compiler) 72 235.68 T
(-warnings) 116.88 235.68 T
2 F
(de\336nition) 171.22 235.68 T
0 F
( #key) 216.55 235.68 T
2 F
(client) 245.88 235.68 T
3 F
(\336) 275.54 235.68 T
2 F
(warnings) 290.39 235.68 T
( query) 335.06 235.68 T
0 F
([G.F. method]) 471.67 235.68 T
(Returns a sequence of all of the warnings associated with the de\336nition.) 90 205.95 T
1 F
(compiler) 72 170.21 T
(-warnings) 116.88 170.21 T
2 F
(locator) 171.22 170.21 T
0 F
( #key) 205.88 170.21 T
2 F
(client) 235.21 170.21 T
3 F
(\336) 264.88 170.21 T
2 F
(warnings) 279.72 170.21 T
( query) 324.4 170.21 T
0 F
([G.F. method]) 471.67 170.21 T
(Returns a sequence of all of the warnings that were produced while compiling the source \336le) 90 140.47 T
(name by) 90 126.47 T
2 F
(locator) 133.99 126.47 T
0 F
(.) 168 126.47 T
FMENDPAGE
%%EndPage: "21" 21
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 21
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Times-Italic
%%+ Symbol
%%+ Courier
%%EOF
