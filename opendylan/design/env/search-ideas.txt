Author:    Hugh Greene.
Synopsis:  Ideas on search requirements and tools in DylanWorks.
Copyright: 1997 Functional Objects, Inc.  All rights reserved.


"SEARCH TOOL" IDEAS


* Introduction

This document is a sketch of some ideas I've had about handling
searches for named objects in the DylanWorks environment.  I'm
concerned that the current UI (in the Object Browser, for example) is
a little inadequate to cover all possibilities, and I'm also
interested in describing useful future additions to functionality.  I
recognise that the environment is still, obviously, under development
and that others may already have looked at these issues.  I also
realise that some of my ideas should probably not be goals for Kansas --
I've put these in a separate section at the end.

The ideas here were originally prompted by thinking about editor
operations such as "find definition" and "complete name" but have gone
a bit further than that, in case I turn out to get more involved with
the design when I come to implement those.

Credit should also go to Jason Trenouth for some of these ideas, as we
started hacking them out together some time in Autumn 1996.


* Background

** Current Problems

First, there is the apparent small hole in the current Object Browser
implementation.  It allows a user to enter a binding or module name,
and it will then look for a corresponding <definition-object> for
which to display information.  I am unclear, in which space(s) it
searches for these names.  To say "the current project" would seem
inadequate (even if we leave aside the existence of multiple Project
Browsers), because the same binding might occur in separate modules
within the same library.  (I have yet to test what the Browser's
behaviour is in such a situation, due to alternate lack of memory or
of environment images able to display an Object Browser!)  In some
earlier design discussions (in Autumn 1996 at 1CC), I seem to recall a
suggestion that the Object Browsers would display gadgets for
selecting the library and module context, as well as the name of the
browsed object, but I haven't seen this implemented.

** Editor Requirements

Secondly, proposed editor support includes lookup of names from the
editor.  This might be performed in contexts where more than one match
exists.  For example, the name provided could actually be a partial
name (which would be an initial substring of matches).  I assume that
the user will want to be able to choose one (or more?) of the
alternatives and it is quite important that it be possible to do so
quickly, for operations such as "complete name" or "describe" (which
is intended, for functions, to allow easy insertion of function
parameters).

A simple "popup" list of alternatives would probably be suitable,
provided it gave enough information to distinguish them and a way to
easily perform the original operation (e.g., copy a method's parameter
list to the clipboard, for pasting into the editor).  There would also
have to be some way to set the context and scope of such searches,
perhaps in some configuration option, separately from the popup.  See
the "Simple Search Dialog" below for a more detailed idea.

** Other Desirable Features

For a given module, an Object Browser will currently only show
bindings *defined* within the module, not all those *visible* (i.e.,
including imported names).  It might be useful to have some way to see
all visible bindings.


* Simple Search Dialog

A simple "search results" dialog for a (possibly partial) name could
include the following fields.

  - The (partial) name being sought.
  - The "type" of bindings to display ("all", "constants", "variables", 
    "classes", "functions" -- especially the last).
  - A list of matching (">=") names.

[So far this is just like a cut-down Object Browser showing the
"Bindings" page for a module.]

  - [Probably should be in Object Browser already] Names of the
    project (probably can't be edited), library and module (probably
    can) in which the search is based.  (Something like a Win32 "Combo
    Box".  Library and module, maybe even project, can probably also
    be "all".)  Maybe also an option to search only within a specific
    source file (which would override project, library and module --
    but we might still need to know which project the file belonged
    to?).

  - More details on the currently selected match.  (At least library and
    module, and parameter list for functions.  Probably just the same
    content as the "General" page, though it must be visible
    simultaneously with the list of bindings.)
    
  - [Probably] An option to search "use"d modules and libraries also.  If 
    selected, there might additionally be options to follow the
    "use-chain" (i.e., transitive closure of "use") and/or to bypass
    the "export" lists altogether (in case you're searching for a name
    but it turns out you forgot to export it from wherever it's
    defined).
    
  - An option to find only definitions, only references, or both.
    (This is required for one editor operation.)
    
  - [Maybe] An option to display either only bindings defined in the
    given module(s), or all bindings visible there.  It should be
    possible to set the default values for some of the fields,
    independently of actually searching:

      - The "type" of binding.
      - The project, library and module (probably not filename) scope.
      - Options for "use"d modules.
      - [Maybe] The option to find definitions, references or both.
      - [Maybe] The option to display only-defined or all-visible bindings.

It should be possible to have the editor set some of them for a particular 
search:

  - The name being sought.
  - The project, library and module (and/or filename) scope.
  - The option to find definitions, references or both.
  - Whether to show the "More details" (this isn't needed for
    "complete name", for example).


* Souped-up Search Tool

This section describes enhanced search functionality which we may not
want for Kansas, but might want to design ahead for in some places.

** More Search Spaces

For large projects, it might be useful to be able to define subsets of
the libraries and modules to search, and to store named subset
descriptions for later use.  (This is like the "Subset of contents"
option in the "Query" dialog of the MS InfoViewer.)  If file-based
searching is available, we might similarly want to allow (possibly
recursive) searching of an arbitrary set of directories (maybe not
necessarily within the project source hierarchy).

** More Kinds of Objects

While trying to phrase some of my ideas in terms of the environment
protocols document, it dawned on me that it might be very useful to be
able to search for other sorts of <environment-object>.  For example,
<binding-object>s (to lookup any bindings by name, within the
application), <thread-object>s (this would provide the thread viewer
discussed at one point) and (if we can think of a way of "naming"
them, e.g., by file and line/column) <breakpoint-object>s.  We could
also search for "Resources" and "Connections" within a project ... and
maybe even "Saved Searches" (see below)!

** Integrate with Existing Browsers?

Since the Object Browser (at least for modules) already contains the
basics of this functionality, it might be desirable to have a "search
mode" or "search dialog" within the Browsers, rather than have a
separate "Search Tool".  Then again, if we eventually get tool linking
together (where selecting an object in one tool display its
information in another), a separate search window might be useful.
Also, if we have the ability to store, retrieve and re-run searches,
it might be good to keep "search management" separate from Object
Browsers -- see the "Open ..." dialog of Word7 for an example.

** Pop-down vs. Keep Window

Whether or not we make "Search Tools" really be "Object Browsers", I
think it's quite possible that (if only for screen real-estate
reasons) a user may want to dismiss the tool as soon as the desired
object is found.  One way to make this easy is to have a "Keep window"
checkbox in the search tool.  Double-clicking an object in the search
matches would, say, launch a browser on the object and, unless "Keep
window" is checked, close the "Search Tool".

** Re-running Searches

I assume that our query mechanism won't be "hot"; i.e., if the world
changes after the matches are found, the match list won't be updated.
So, there should be an explicit "Run Search" button, to allow the user
to refresh things.  Also, if the user tries to operate on some match
and the environment finds that the match object has changed (or the
place it came from is out of date, e.g.  the compiler derived
database), it would be good to offer at that point the option to
re-run the search.  (I'd want it also to be possible to get the tool
instead never to offer, and to either never or always re-run the
search, in case the "Shall I re-run the search?" dialog got
irritating.)  It might even be handy to have the option to perform
some kind of "quick search" of the source of derived data, if that
data is out of date; for example, searching textually through source
files without recompiling.  It might be irritating to have to
recompile your project any time you want to find anything in it, but
such searching would necessarily be inaccurate.

** Storing and Retrieving Searches

If we make use of all these complex search facilities, it's likely
we'll want to run similar searches several times, so it would be good
to be able to save sets of search parameters.  I'd suggest that they
be saved as named objects attached to a project (like "Resources", but
under a different branch).  It would also be handy to be able to copy
them between projects, and perhaps to export them as external files.

