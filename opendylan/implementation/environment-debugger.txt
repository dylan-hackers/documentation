-*-outline-minor; rcs-header: "$Header: /scm/cvs/fundev/doc/implementation/environment-debugger.txt,v 1.1 2004/03/12 00:11:41 cgay Exp $"-*-
Title: Environment Debugger Implementation Details
Author: Jason Trenouth
Version: $HopeName: D-doc-implementation!environment-debugger.txt(trunk.1) $

* -= INTRODUCTION =-

This file describes the current implementation of the environment
debugger Functional Developer.

(This file is in Emacs outline-mode format. This allows you to expand
and collapse sections to aid browsing.)


* -= DESIGN =-

The original design is described in a companion file called
"debugger-design". This was initially written by Bill Chiles, but I
later tweaked it a bit. I haven't looked at it for a while so it may
be out of date.


* -= LIBRARIES AND MODULES =-

The environment-debugger consists of a single eponymous library and
module pair.

The environment-debugger library sits quite high in the library use
graph of the product. Bascially, it uses all of the rest of the
environment:

	environment-protocols
	environment-framework
	environment-manager
	environment-tools
	environment-deuce	(for message and interactor panes)

plus it also uses:

	debugger-manager	(for stop-reason stuff)

which sucks in all the runtime-manager (and more recently all the
compiler via the runtime-manager).

The debugger also directly uses some DUIM and some more DEUCE
stuff. The latter perhaps could be cleaned up a bit.

A problem for development has been that the debugger now uses all the
runtime-manager and, via this, the compiler. There are at least two
ways around this:

(1) Define new environment-protocols for all the debugger-manager and
access-path stuff that the debugger needs.

(2) Define a new debugger-protocols library that can be used by both
the debugger-manager and the environment-debugger. This is the simpler
option and Paul agreed to investigate this in a quiet moment.

Actually environment-debugger development isn't so bad now that we
have working databases and regular internal releases.


* -= FILES AND DIRECTORIES =-

The implementation of the environment-debugger all resides in one
directory and compound:

	D-environment-debugger

There is a subdirectory and compound for testing:

	D-environment-debugger-tests-checkmate

but that is described in later section. The files that implement the
debugger UI are as follows.


** -= OVERVIEW =-

The debugger has one main frame and three subordinate dialog frames
defined in the following files:

	debugger
		notifier
		postmortem
		options

The main debugger frame is built out of a main frame class and panes
defined in mixins from the following files:

	debugger
		context-pane
		stack-pane
		interactor
		message-logs
		status-pane

The options dialog frame is built out of a main frame class and panes
defined in the following files:

	options
		stack-pane
		stop-reasons

The debugger is unusual in that it gets "events" from two sources: the
user and the tethered application. The management of these two kinds
of "events" is split into two files:

	debugger
		commands
		stop-reasons

Bill initially designed the debugger so that it had explicit locking
and the two event loops -- DUIM and Debugger-Manager -- locked the
debugger before strutting their stuff. This was clunky and awkward and
I changed it so that the DUIM event loop is basically "in charge" of
the debugger's data structures.

Now when the Debugger-Manager causes changes to the debugger the work is
posted for the DUIM event-loop to carry out.

** -= LIBRARY.DYLAN =-

The library definition. Not much to add here, except to repeat that
the deuce stuff could perhaps be cleanup up now that the message and
interactor panes are more stable.

The PPML library is used for the backtrace output.

The STANDARD-IO library is used for a console output option which
could be excised if it was deemed important.


** -= MODULE.DYLAN =-

The module definition. The DUIM and DEUCE stuff look as if they could
do with a cleanup.

The only exports are some variables for toolbar bitmaps.


** -= UTILITIES.DYLAN =-

Some miscellaneous functions and macros. None of them are espcially
noteworthy.


** -= CONTEXT-PANE.DYLAN =-

The main defintions:

	<DEBUGGER-CONTEXT-PANE-MIXIN>

		A mixin class for the <DEBUGGER> frame that provides
		the pane and label title for the context area.

	UPDATE-DEBUGGER-CONTEXT-PANE

		Recomputes and redisplays the contents of the context
		area. Called from UPDATE-DEBUGGER.

	COMPOSE-APPLICATION-MESSAGE

		Used as part of UPDATE-DEBUGGER-CONTEXT-PANE and also
		by other parts of the debugger to put the same
		information into the message logs and the notifier's
		context area. The other parts of the debugger that use
		this are:
			notifier's INITIALIZE method
			POSTMORTEM-WRITE-STOP-REASON
			STOP-REASON-REPORT

The other functions in this file are part of the implementation of
COMPOSE-APPLICATION-MESSAGE.

There is a big table of all the known stop-reason classes (see
stop-reason-handlers.dylan) and this is used to drive the
messages. The way it bascially works is this:

	Is the stop-reason in the table?
	Does it have a simple format-string?
		If so then pull it out and call any function that's
		been defined to get some piece of info out of the stop reason.
	Or is it one of the complex types of messages?
		The only complex kind at the moment are breakpoints.
		The reason is that breakpoints are used for several
		overlapping kinds of application event.

For breakpoint messages we build up the context string bit by
bit. There are some query functions like APPLICATION-JUST-INTERACTED? that
determine some of the special cases.

User defined breakpoints are broken down into:

	<FUNCTION-BREAKPOINT>
	<SOURCE-LOCATION-BREAKPOINT>

The message code for function breakpoints former tries to deal with
entry and exit and indentation, while the code for source-location
breakpoints is fairly trivial.


** -= STACK-PANE.DYLAN =-

The main definitions:

	<DEBUGGER-STACK-PANE-MIXIN>

		A mixin class for the <DEBUGGER> frame that provides
		the pane and label title for the stack area.

	UPDATE-DEBUGGER-STACK-PANE

		Recomputes and redisplays the contents of the stack
		area. Called from UPDATE-DEBUGGER.

	<OPTIONS-STACK-PAGE>

		A pane for the debugger options dialog that allows the
		user to control the filtering.

The remainder of the file is divided between support for basic stack
pane display and the options dialog. An overlap between the two parts
occurs concerning the stack filtering.

So how does it work? Well, the basic stack pane display is just a
tree-control will lots of callbacks to compute the nodes, labels,
icons, etc. 

The options page works by writing some data into some UI gadgets and
reading them back out after the dialog exits. The tree control is also
updated to show the new nodes after the filtering has been changed.

Updating works by:

	rebuild stack by calling THREAD-COMPLETE-STACK-TRACE
	refilter stack
	rebuild tree-control
		replace root node
		reexpand root node

There is some stuff that tries to maintain selection across refreshes
but I don't think it works.

A fair chunk of the code has to do with filtering the stack. This
filtering takes three forms:

	by stack frame type (eg dylan vrs foreign)
	by module (eg module of project vrs all used modules)	
		[not sure this works]
	by text match


** -= INTERACTOR.DYLAN =-

The main definitions are:

	<INTERACTOR-FRAME-MIXIN>

		A mixin class for the <DEBUGGER> frame that provides
		the pane and label title for the interaction area.

	UPDATE-DEBUGGER-INTERACTOR-PANE

		Recomputes and redisplays the contents of the
		interaction area. In particular it displays the return
		results of evaluations. Called from UPDATE-DEBUGGER.

There are also some methods on various protocols to glue the
interactor into the rest of the environment. Eg the interactor-control
defined in the environment-deuce library needs to know what thread
it's concerned with.

NB There is a subtlety here concerning how the interactor handles return
values associated with evaluations.

Basically, the evaluation happens asynchronously at the
moment. INTERACTOR-EXECUTE-CODE ends up downloading code into the
tethered application and letting it run. The debugger UI is then
happily left in its normal event loop waiting for something to happen.

Eventually, the tethered application trips over a breakpoint
instruction that the runtime-manager laid down to denote the end of
the evaluation. This is signalled to the debugger UI via the
HANDLE-INTERACTOR-RESULTS and HANDLE-STOP-REASON callbacks. The former
currently just sets up some flags and state, while the latter ends up
refreshing the debugger associated with that thread (the stop reason
type is a <BREAKPOINT-STOP-REASON>). And it is this refreshing that
ultimately runs UPDATE-DEBUGGER-INTERACTOR-PANE.

NB There is potentially some redundancy here. The
environment-protocols function APPLICATION-JUST-INTERACTED?  and the
piece of state INTERACTOR-RESULTS-PENDING? maintained by the debugger
seem to duplicate information. The pattern is similar to the
APPLICATION-JUST-INITIALIZED? state that is maintained by the
debugger.

** -= MESSAGE-LOGS.DYLAN =-

The main definitions are:

	<THREAD-MESSAGE-LOG>

		Basically a DEUCE buffer and associated stream. These
		objects get made, and stashed away in a table, per
		thread. The buffer is displayed in the <DEUCE-GADGET>
		that is part of the <DEBUGGER-MESSAGE-PANE-MIXIN>, and
		the stream is written to by PRINT-APPLICATION-MESSAGE.

	PRINT-APPLICATION-MESSAGE

		Called from STOP-REASON-REPORT. This is passed the
		message built by
		COMPOSE-APPLICATION-MESSAGE. Basically, it looks up
		the stream associated with the thread and writes to
		it. One complication is that some messages don't have
		threads (eg if the user presses the pause button) and
		so in this case we write the message to every thread's
		stream (if they have one).

		Also, rather over-energetically it tries to support
		print to *STANDARD-OUTPUT* for debugging as well as
		its normal operation. Since separate threads do not
		have separate streams in this case the thread name is
		prefixed to the message. This support is really
		vestigal from when we didn't have DEUCE logging panes
		in the environment and could reasonably be removed
		now. Then the use of the STANDARD-IO library could be
		removed as well, I think.
		
	<DEBUGGER-MESSAGE-PANE-MIXIN>

		A mixin class for the <DEBUGGER> frame that provides
		the pane and label title for the messages area.

** -= STATUS-PANE.DYLAN =-

The main definitions are:

	<DEBUGGER-STATUS-BAR-MIXIN>

		A mixin class for the <DEBUGGER> frame that provides
		several label panes for the status area.

	MAKE-DEBUGGER-STATUS-BAR

		Unlike the other mixins whose panes get built using
		MAKE, the status bar uses this separate constructor.
		It makes a DUIM status bar from the panes in a fairly
		straightforward fashion. 

	UPDATE-DEBUGGER-STATUS-BAR

		Fills in labels based on various bits of state. Called
		from UPDATE-DEBUGGER.

		A debugger window is marked as "Outdated" if the
		information it is displaying is out of date. This can
		happen if the debugger window was already open and an
		error then happened on another thread.

		A debugger window is marked as "Disabled" if the
		application is running.
	

** -= DEBUGGER.DYLAN =-
		
The principal file. The main definitions are:

	<DEBUGGER>

		This is the DUIM frame class into which the five frame
		mixin classes are mixed:
		
			<DEBUGGER-CONTEXT-PANE-MIXIN>
			<DEBUGGER-STATUS-BAR-MIXIN>
			<INTERACTOR-FRAME-MIXIN>
			<DEBUGGER-MESSAGE-PANE-MIXIN>
			<DEBUGGER-STATUS-BAR-MIXIN>
		
		Ideally, I would have liked these parts of the
		debugger to be built using panes rather than frames,
		but I had an initialization problem. Basically,
		several of the panes needed to know the thread, and
		unfortunately due to a combination of circumstances
		that slot was not initialized until later. However, I
		now dynamically bind a variable so this should be
		possible now. See details on initialization.

		In addition to its component panes, the debugger
		maintains state for updatedness, enabledness, zoom
		(aka view) and its thread.

	FIND-DEBUGGER-FROM-ENVIRONMENT

		This is the main entry point from the
		environment. Called from BROWSE-OBJECT and
		FIND-INTERACTOR. The former happens when you
		double-click on a thread in the "Threads" tab of the
		Browser. The latter happens when you select "Interact"
		and the application has already been started (it may
		be paused or running).

		Basically, it just calls into the frame reuse protocol
		to make or find a debugger window.

		Ultimately, this is called when the user has
		explicitly asked for a debugger.

	FIND-DEBUGGER-FROM-APPLICATION

		This is the main entry point to the debugger from the
		tethered application. Called from START-DEBUGGING.
		Ultimately, this is called when the application trips
		over an error, hits a breakpoint, or has finished an
		interaction, etc. This also happens when the user hits
		the Pause or Interact buttons.

		If there is no associated thread then the user has
		probably hit the Pause button, and the code optionally
		calls FIND-DEBUGGER-FROM-ENVIRONMENT to get a debugger
		window.

*** DEBUGGER AS THREAD BROWSER

The architectural shape of the debugger UI is largely driven from the
fact that there is one debugger window per application thread.

Overall the debugger is currently really a "thread browser", and could
potentially have been written as a set of thread-specific properties
tabs that sat in an ordinary browser.

*** DEBUGGER REUSE

The frame reuse protocol is used to build a new debugger window for a
given thread or find an existing one that has already been made for
that thread. The search could have looped over the known DUIM frames
and tested the thread slot of each debugger, but instead each project
maintains a table of debuggers keyed on their thread.

Debuggers frames are always available for reuse, regardless of any
user preference (there shouldn't be any for the debugger anyway).

Existing debuggers are reinitialized by reseting their zoom (aka
view), re-enabling them, and updating their contents.

*** DEBUGGER THREADS

The debugger's thread slot is slightly messy at the moment and is the
source of some initialization headaches. Originally, the
DEBUGGER-THREAD slot was particular to the debugger, but when we were
adding the interactor pane I put the thread in the
FRAME-PRIMARY-OBJECT slot so that an independent interactor could
access it easily. However, the interactor doesn't get the thread this
way (see INTERACTOR.DYLAN) and so the move wasn't justified on that
account.

However, the move to FRAME-PRIMARY-OBJECT introduced an initialization
problem. Because the client code still uses the REMOTE-THREAD:
keyword, to pass in the thread during initialization, the
FRAME-PRIMARY-OBJECT slot doesn't get set until rather late in whole
initialization process. That means that the subordinate panes,
e.g. the message-pane, couldn't access the thread while they were
being made. I ended up having to warp the subordinate panes in frame
mixins so the thread could be passed in as a init argument.

Worse still, this wasn't good enough for some pane (I can't remember
which now) and I had to dynamically bind the thread around the earlier
initialization so the code could access it.

A naive solution would be to move the call to DEBUGGER-THREAD-SETTER
before the call to NEXT-METHOD in the debugger's INITIALIZE method,
but since breaks since it calls FRAME-PRIMARY-OBJECT-SETTER before the
<PRIMARY-OBJECT-MIXIN>'s INITIALIZE method has run.

The best solutions to remove all this confusion would be:

(1) Use OBJECT: initarg to pass in thread instead of
REMOTE-THREAD:. This would mean that the slot got set at the right
time. Perhaps there is some way of setting up an alias initarg?
However, I think that sticking point here is that the underlying slot
for FRAME-PRIMARY-OBJECT is not exported.

(2) Forget about trying to make the thread be the primary
object. However, I think that we should hold off doing this because
there may be some benefits to this further down the road.

In any case, the introduction of the new dynamic binding of the
virtual thread slot means that we could problably move many of the
frame mixins to be ordinary panes now.

*** DEBUGGER REFRESH 

Some debugger initialization is performed on the HANDLE-EVENT method
of a <FRAME-MAPPED-EVENT>. This should make debugger windows appear
faster so the user can see what is going on, at the expense of having
an unresponse updating debugger window poncing about on your screen.

Unfortunately, debugger windows still seem to be slow to materialize,
especially the very first time one is created. I think that this may
in part be to do with the slowness of FRAME-DEFAULT-CURRENT-MODULE
which searches around for some module to use and causes a not
inconsiderable amount of DOOD activity.

*** DEBUGGER ZOOMING

The debugger has a number of different arrangements of its subordinate
panes that it supports. These allow one of three panes -- stack,
interactor, or messages -- to expand and take up more of the top level
debugger window. Partly, This started out as a stopgap measure in the
absence of interactive resizing dividers in DUIM, but it was also
required to support a interactor-focused view.

The main function is DEBUGGER-ZOOM-SETTER. This tries to avoid
changing the view when interactive results are signalled by the
runtime-manager. Otherwise it works out which pane should be
maximized and have the focus, then calls FRAME-LAYOUT-SETTER and
FRAME-INPUT-FOCUS-SETTER to make the alterations.

In an ideal world DUIM's default method on FRAME-LAYOUT-SETTER would
just work. However, it currently doesn't in complex cases like this so
the debugger defines it's own kludge, which withdraws, maps, and
relaysout the subordinate panes in order to fullfil the
request. Unfortunately, there are still some redisplay bugs as a
result, but its better than it used to be.

NB The DEBUGGER-AUTO-ZOOM function is their to maximize the message
pane when browsing a thread while the app is running. The assumption
is that you're interested in some progress the thread may be
making. You can stop the app explicitly if you want to do some
actually debugging.

*** DEBUGGER FINALIZATION

NB Debuggers can be deactivated or destroyed in a variety of ways:

	application is resumed		-> debugger disabled
	thread terminates		-> debugger disconnected
	process terminates		-> all debuggers disconnected
	user closes debugger window	-> debugger disconnected
	application is restarted	-> all debuggers destroyed


** -= NOTIFIER.DYLAN =-

A notifier is just an options dialog that can be requested before a
debugger window is opened or updated. It shows the reason for the
debugger invocation, the current restarts, and offers buttons for
quitting the app, ignoring the error, and so on.

The notifier is the environment-side counterpart of the Yes-No-Cancel
dialog that we currently get from the application. So, why should we
want one of these notifiers given that we already have the
application-side dialog? Well:

(1) The application's dialog only comes with use of the WIN32-USER
library, and soon will need further setup in the application.

(2) The application's dialog can't show the current restarts.

So why do we need the application-side dialog? Well:

(1) You don't always run under a debugger.

The main definitions in the notifier.dylan file are:

	<NOTIFER>

		The dialog frame class for the notifier. Nothing much
		special here except that the dialog tries to enable
		and disable its buttons according to app state and
		user selection in the restart area.

	CHOOSE-DEBUG?

		This is the main entry point for deciding whether to
		invoke the dialog and if so, whether to invoke the
		debugger.  The code makes sure that the notifier isn't
		used for application events like the return of
		interactive evaluations.

The remaining definitions are mainly to do with servicing UI gestures
in the dialog.

** -= OPTIONS.DYLAN =-
		
This is the home of the options dialog. The main definitions are:

	<OPTIONS-MISC-PAGE>

		This is the pane for the "Misc" tab in the options
		dialog. It is just a bunch of check boxes.

	<OPTIONS-DIALOG>

		This is the main frame for the options dialog. 

		The dialog is basically just a tab control with three
		pages: stack, exceptions, and misc.  This should
		probably be done with a properties frame, but I
		haven't got around to switching over from this ad
		hoc'ery yet.

		There are two sides to the dialog. One is writing the
		the current settings into the dialog and the other is
		reading the new settings out of it.

	INITIALIZE-PAGE
		
		This protocol function does whatever initialization is
		required by each page, filling the dialog in any
		existing values. The methods for the stack and
		exceptions pages are in the stack-pane and stop-reason
		files respectively.

	UPDATE-FROM-DIALOG
	UPDATE-FROM-PAGE

		This pair of protocol functions is concerned with
		extracting the new values from the dialog and updating
		the corresponding bits of the debugger. The methods
		for the stack and exceptions pages are in the same
		files mentioned above.

Chris wants to move the debugger options to the primary window. Or at
least he wants the debugger options to be available there. This
presents a problem at the moment since the implmenation wants to have
a debugger to operate on. However, the problems should not be
insurmountable. The dialog would just have to apply to all open
debuggers or something.

An unreported bug is that the debugger parts are updated unnecessarily
even if the user doesn't dicker with the associated options. Just need
to put some intelligence into some of the specific methods.

** -= POSTMORTEM.DYLAN =-

This file defines the bug report dumping mechanism and user
interface. The main definitions are:

	<POSTMORTEM-DIALOG>

		The bug report dumping dialog. Nothing very complex.

	POSTMORTEM-INSERT-TEMPLATE

		Arranges for the reading of a text file and the
		insertion of it into the dialog's text area.

	DEBUGGER-SAVE-POSTMORTEM

		This is the main entry point for the bug report
		dumping following user's choices in the dialog.

		The main subtlety here is that PPML is used to format
		a thread's stack backtrace output. Basically, a large
		PPML structure is built that indents a bit for stack
		frames plus a bit more for local variables.

The output could do with more convergence with the batch-debugger's
output.

** -= STOP-REASON-HANDLERS.DYLAN =-

This file is concerned with the events coming from the tether
application. The main definitions are:

	<STOP-REASON-ACTION>

		This is the class of actions that should be taken when
		a stop reason occurs. BTW for the uninitiated a stop
		reason is an object signlled by the runtime-manager to
		indicate some new event in or concerning the
		tethered application.

		There is some clumsy inheritence going on here just so
		that "debug" actions can inherit reporting from
		"report" actions.

	<STOP-REASON-TYPE>
		
		The debugger maintains a table of these objects in
		$DEBUGGER-STOP-REASON-TYPES. Basically it allows the
		debugger to associate actions and messages etc to the
		particular stop-reason classes. The table is filled
		via a whole bunch of macros.

	START-DEBUGGING
		
		This is the main entry point into the debugger from
		the application. At this point the debugger has
		already indicated that the application should be
		paused by returning #T from HANDLE-STOP-REASON. One
		subtlety here is that this may in fact be a lie! The
		debugger may have slyly asked for the application to
		be paused temporarily because there is some
		administrative work that it wants to do with respect
		to the application, but can't do it within
		HANDLE-STOP-REASON because the <TARGET-APPLICATION>
		object is locked at that point. 

		STOP-REASON-TRANSACTION-ADMIN does any
		transaction-sensitive house keeping and
		STOP-REASON-TRANSACTION-DEBUG? decides whether to
		really open a debugger window.

		In the straightforward case the debugger calls
		FIND-DEBUGGER-FROM-APPLICATION to open a debugger
		window.

		The creation of a temporary thread to carry out the
		work of START-DEBUGGING a subtlety here. By creating
		the thread we allow START-DEBUGGING to return which
		then properly allows the Debugger-Manager to enter a
		debugger transaction. This lets the
		transaction-sensitive bits of admin to be carried out
		and also lets the Notifier dialog query the restarts,
		etc. Without this thread things get all locked up.

	FINISH-DEBUGGING
		
		This function is called when the application resumes
		execution, and it deactivates the associated debuggers.

	HANDLE-INTERACTOR-RESULTS
		
		As mentioned before (in INTERACTOR.DYLAN), this
		function just sets up some state so that a later
		debugger refresh fetches the interactor results and
		inserts them into the pane.

	HANDLE-LIBRARY-INITIALIZATION
		
		This is called every time a library starts and
		finishes its Dylan initialization. It is used by the
		debugger to notice when the top library starts
		initialization because at the moment it pauses the
		application for early interaction to take place.

		Later on the idea is that this point will just be used
		internally to set a function breakpoint on the main
		application entry point. The application will then by
		continued and the function breakpoint will be hit
		providing a better early interaction point.

	HANDLE-STOP-REASON
		
		This is called for every application event for the
		debugger to decide if it is interested. Of course,
		part of the decision is based on whether the user
		expressed an interest. 

		DETERMINE-STOP-REASON-ACTION is called to lookup the
		stop-reason class in the table to find out what to do.
		Then STOP-REASON-ADMIN does some house keeping,
		STOP-REASON-REPORT possibly writes out a log message,
		and STOP-REASON-DEBUG? possibly asks for the
		application to pause.

	REGISTER-APPLICATION-CALLBACKS

		This is a clumsy bit of setup code that is posted onto
		a channel that is notified when a new <APPLICATION>
		object is created -- basically when RUN-APPLICATION is
		called. At this point this function tells the
		application server about all the functions to call in
		the various circumstances.

		A simpler means to this end would be to have a
		protocol function eg NOTE-APPLICATION-CREATED called
		by either RUN-APPLICATION or from the INITIALIZE
		method on <APPLICATION>.

	<OPTIONS-STOP-REASON-PAGE>

		The "Exceptions" tab for the options dialog. This is
		just slightly tricksy. The table of stop reason types
		is copied so that the user can meddle with it and
		cancel the dialog without affecting anything. If the
		user okays the changes then they are copied back into
		the table used by the debugger.

** -= COMMANDS.DYLAN =-

This file is concerned with "events" coming from the user. In fact
since many of the commands are shared across Functional Developer windows
this file is principally the implementation of the debugger's "Thread"
menu and associated toolbar buttons.

The main definitions are:

	<DEBUGGER-COMMAND>

		I went for a command-as-user-object approach in the
		debugger when I found that DUIM could support
		that. The alternative command-as-function approach is
		used by most of the rest of the environment.

		The command objects let me decaratively specify
		progress notes, enableness criteria, etc. However,
		one gotchas is:

		[-] Our Dylan implementation can't yet specialize on
		singletons of user-objects so I have to introduce a
		spurious extra layer of leaf classes. Keith is going
		to fix this for final I think.

		NB My DEBUGGER-COMMAND-DEFINER could be better. It
		could also define the body of the method which is
		currently done separately. This might also be a way of
		hiding the spurious leaf classes mentioned above.

		On the enabling front there is a subclass
		<DEBUGGER-ENABLED-COMMAND> that lets me enable and
		disable all the instances according to the debugger's
		state.

	FRAME-EDIT-OPTIONS

		Just creates the options dialog and processes the results.
	
	*DEBUGGER-COMMAND-TABLE*

		This is the debugger's menu bar. The debugger has
		special versions of several of the subordinate command
		tables in order to add or remove items.

		The trickiest is the *DEBUGGER-VIEW-COMMAND-TABLE*
		which has a check-box component for maximizing some of
		the subordinate panes in the debugger window. In my
		builds the UPDATE-CALLBACK: isn't working because it
		is a recent addition to DUIM.

	EXECUTE-COMMAND

		The debugger specializes this DUIM protocol so that it
		can do some uniform enabling, busy cursors, and
		progress noting. It does this via a separate function
		EXECUTE-DEBUGGER-FUNCTION because this lets me add the
		uniform stuff to shared commands like "Refresh".

	ABORT-APPLICATION

		Implements the "Abort" and "Abort All"
		commands. Basically, both search the known
		restarts for the first abort restart but they search
		from different ends. Hence "Abort" finds the latest
		abort restart and "Abort All" finds the earliest.

	<DEBUGGER-SET-BREAKPOINT-COMMAND>
	<DEBUGGER-CLEAR-BREAKPOINT-COMMAND>

		These two are really just kludges until function
		objects have right button menu items that allow
		setting of breakpoints.

	<DEBUGGER-CHOOSE-RESTART-COMMAND>

		Fairly obvious.

	// Stack navigation commands

		I don't think DUIM tree-control selection is working
		well enough to know whether these commands truly work
		yet.

	WALK-NODES

		The expand and contract items use this basic
		walker. It's a simple mechanism that uses a <DEQUE> to
		schedule the nodes depth-first at the moment.

	UPDATE-DEBUGGER-COMMAND-TABLE
	UPDATE-DEBUGGER-COMMAND
	
		These use the fact that the commands know whether they
		should be enabled or not via their class. There may be
		some overlap with the more eager enabling done by
		FRAME-NOTE-APPLICATION-STATE-CHANGED.

	MAKE-ENVIRONMENT-TOOL-BAR-BUTTONS

		Long winded but simple.

	// Edit and Find stuff.
		
		Hugh wrote all the Edit and Find stuff so he's best
		placed to add the outline here.

There are some dead/unwritten commands in the file like
<DEBUGGER-DISPLAY-MEMORY-COMMAND> which were just placeholders for
adding quickie UI pieces to mirror commands in the console
debugger. Pay them no heed.


* -= TEST SUITES =-

The debugger doesn't have any full automated test suites per se. I
have tended to use various modified forms of hello-world (usually just
adding and error) quite a bit during development and debugging.

However, there is also a special DUIM-based test application that I
wrote that can generate all kinds of Dylan and out-of-language
errors on multiple threads.


* -= CODING CONVENTIONS =-

Much the same as every one else. Some peculiarities are:

	// ---*** <AREA>: <TEXT>

		This is a note about some future thing to be worked on or
		checked or fixed.

	// <DEFINITION-NAME> (<LIBRARY-NAME> or "internal")

		I introduce most definitions with comment lines that
		say where the binding originates.

	define function

		I use define function for everything that isn't a
		protocol and has a single method. Since the debugger
		is not a construction kit for debuggers and sits near
		the top of the tree it doesn't define many protocols
		and so there are lots of "define functions".

	define sealed method

		I seal all the methods I define on my classes since,
		again, no one uses the debugger as a toolkit.

	define sealed domain

		I seal the domains of the MAKE and INITIALIZE methods
		for the itty bitty classes I introduce in the
		debugger. Again, no need to extend these outside the
		debugger.

	sealed slot

		I seal slot getter and setter domains this way.

	constant slot

		I use constant slot to get rid of spurious setters
		where possible.

	end foo

		I always use end words like "end if", "end method". I
		never use the extended naming form like "end method
		foo".

	=> ()

		I nearly always fully declare return types.

	let foo :: <bar>

		I nearly always fully declare let binding types, but I
		beginning to care less about this.

	"Small is beautiful"

		I nearly always try to write small functions, and
		break up larger functions even though there are no
		other users of the inards. I feel this helps me
		understand the structure of the top function and helps
		me maintain it.

	"Repetition is hateful"

		I hate it when I have to copy the same code fragments
		to multiple places and nearly always try to create or
		rework functions or macros until they can be shared.


