-*-outline-minor; rcs-header: "$Header: /scm/cvs/fundev/doc/implementation/scepter.txt,v 1.1 2004/03/12 00:11:41 cgay Exp $"-*-
Title: Scepter IDL Parser Implementation Details
Author: Jason Trenouth
Version: $HopeName: D-doc-implementation!scepter.txt(trunk.1) $

* INTRODUCTION

This is a brief overview of how the IDL compiler front-end called
"scepter" works.


* DESIGN

Hah! Well, there is sort of a design: copy Sun's IDL compiler front
end, which was written on C++. The code for the Sun compiler is in:

	propos:~jason/interop/idl/

and the Dylan version follows a similar structure as the C++ version.


* LIBRARIES AND MODULES

There is only one main "scepter" library and module at the
moment. This is a sore point. The current project/compiler/linker
system cannot cope with subdirectories in the LID/HDP file. We will
probably need to bite the bullet and introduce subordinate libraries
for the subdirectories. Unfortunately (or fortunately?) this will
involve figuring out what exactly is used between the
directories. Perhaps some Perl scripts could help?

Having said that there is only one library, I can now reveal that was
a deliberate falsehood. The true picture of libraries is:

	console-scepter-tests
		This is a thin veneer over "scepter-tests" that
		simply calls into the other library to get things
		started. The result is a console application that runs
		all the test suites to completion.

	console-scepter
		This is a thin veneer over "scepter" that simply calls
		into the other library to get things started. The
		result is a console application that can compile an
		IDL file into the selected back-end language. Only IDL
		is supported at the moment.

	scepter-tests
		This implements all the test-suites for "scepter"
		using "testworks".

	scepter
		This is the main library for the parser-front end. It
		implements a command-line interface that you can call
		via the function RUN-SCEPTER. Scepter uses "c-lexer"
		to get its lexing done. Scepter uses "parser-runtime"
		to gets its parsing done.

	c-lexer
		This implements basic lexing and also CPP processing
		for things like "#include".

	t-lists
		A general utility for managing double-ended lists (NB
		not double-linked, but double-ended so you can easily
		add to both ends.)

	parser-runtime

		This is control code for the tables of nodes output by
		the parser generator from the "parser.input" grammar
		file. This library is shared with the Dylan compiler
		itself.


* FILES AND DIRECTORIES

This file only describes the "scepter" family of libraries and doesn't
cover "c-lexer", "t-lists", or "parser-runtime".

Here is the current directory structure for "scepter" itself:

scepter/
	scepter.dylan				library and module defns
	console-scepter-library.dylan		library and module defns
	scepter.lid				lid
	console-scepter.lid			lid

	abstract-syntax-tree/			various AST class defns
		argument.dylan
		array.dylan
		attribute.dylan
		constant.dylan
		declarator.dylan
		enum.dylan
		exception.dylan
		expression.dylan
		field.dylan
		interface-forward.dylan
		interface.dylan
		module.dylan
		operation.dylan
		recursive.dylan
		root.dylan
		sequence.dylan
		string.dylan
		struct.dylan
		type.dylan
		typedef.dylan
		union-branch.dylan
		union-label.dylan
		union.dylan

	back-end/			
		back-end.dylan			
		dump.dylan			IDL emitter
		dylan-back-end.dylan		proto Dylan emitter

	driver/
		args.dylan			command line arg processing
		console.dylan			entry point caller
		main.dylan			entry point defn

	front-end/
		build.txt			instructions for parser.input
		idl-lexer.dylan			c-lexer interface
		idl-parser.dylan		parser-runtime interface
		interface-header.dylan		scaffolding objects
		parser-state.dylan		to help error reporting
		parser.dylan			generated from parser.input
		parser.input			IDL grammar
		temporary-declarator.dylan	scaffolding objects

	utilities/
		debug.dylan			to help debugging
		debug.lisp			ditto in emulator
		error.dylan			error defns
		identifiers.dylan		special string handling
		indenting.dylan			indenting stream
		misc.dylan			
		resolve.dylan			lookups up strings in node tree
		scope.dylan			compound node defn
		variables.dylan			misc control vars


* OVERALL CONTROL FLOW

The main processing flow across implementation directories is:

	driver ->
		front-end ->
			abstract-syntax-tree
			and utilities ->
				back-end

The main sequence of events is:

	lexing ->
		parsing ->
			AST construction ->
				dumping


* HOW TO BUILD AND RUN SCEPTER


** CONSOLE SCEPTER

Console-Scepter is a command-line compiler (see
D-lib-scepter-driver!args.dylan for command-line arguments). It can be
built using registries as follows.

	cd ~/dylan/sources/lib				// or whereever
	checkout -rec -comp D-lib-scepter
	checkout -rec -comp D-lib-c-lexer
	checkout -rec -comp D-lib-t-lists

	cd ~/dylan/sources/registry/generic
	checkout scepter -a console-scepter -a c-lexer -a t-lists

("parser-runtime" is used by DFMC and so should be around already.)

followed by

	compile-changes console-scepter

You can then run console scepter on an IDL file as follows:

	console-scepter -ldump -v -t -o foo.idl

-ldump -- means the back end 'Language' to emit is the "dump" format
which is a regurgitation of the original IDL for testing purposes.

-v -- means print the 'Version' banner.

-t -- means print a 'Trace' of the compilation stages

-o -- means send the 'Output' to stdout rather than the back-end's
normal file extension, which is ".new" in the case of the "dump"
back-end.

Use "-h" to get usage info.
Use "-z" to force debugger entry on error.


** CONSOLE SCEPTER TESTS

Console-Scepter-Tests is a simple console-application that contains
all the scepter test suites. It accepts no command line arguments and
simply runs to completion, writing out the test files into the current
directory, reading them in through the parser, writing new files out
into the current directory, comparing the results. It uses TestWorks.

Console-Scepter-Tests can be built as follows:

	cd ~/dylan/sources/lib
	checkout -rec -comp D-lib-scepter
	checkout -rec -comp D-lib-c-lexer
	checkout -rec -comp D-lib-t-lists

	cd ~/dylan/sources/registry/generic
	checkout console-scepter-tests -a scepter-tests -a scepter -a console-scepter -a c-lexer -a t-lists

("parser-runtime" is used by DFMC and so should be around already.)

followed by

	compile-changes console-scepter-tests

You can then run console-scepter-tests by doing:

	console-scepter-tests

[This should really allow the -z option to be passed down for
debugging. It doesn't at the moment.]


** INTERACTIVE WORK

Both Scepter and Scepter-Tests can be run interactively given a
suitable programming environment.

Scepter itself actually contains the command-line interpreter that you
see in console-scepter. The latter just jump-starts it. So you can use
the command-line from within an interactive session (say console-debug
or Functional Developer interactor), by doing:

	RUN-SCEPTER(COMMAND: "command string");

where the "command string" is what you would normally type in to the
console scepter command line.

Scepter-Tests uses TestWorks, so you can run individual suites and
tests using the normal TestWorks functions. E.g.

	PERFORM-SUITE(NEO-IDL-SUITE);


* MAIN DEFINITIONS


** DRIVER

	RUN-SCEPTER

	This is the main entry point to the IDL compiler. You can
	either explicitly pass it a command-line (useful when
	debugging interactively) or you can let it get the
	command-line from the OS (the normal case when running in
	console-scepter).

	*IDL-OUTPUT*

	Is a special stream that helps with indenting in the IDL
	reemitter. Basically it overrides NEW-LINE on the streams
	protocol so that after writing out the newline it writes out
	some leading spaces as far as the current indentation level.
	
	DRIVE-COMPILATION

	Calls PARSE-IDL to convert the given flat IDL file to an IDL
	AST structure, and RUN-BACK-END-EMITTER to flatten this AST
	structure to back into some stubs for a particular language.
	Some initialization and finalization protocol functions are
	also called in case the back end cares.

	PARSE-ARGUMENTS

	Converts command line arguments into function calls that set
	up some module variables. E.g. "-z" sets the variable
	*BREAK-ON-ERRORS?*. I'll gloss over the command line parser
	since such things are never pretty. However, some
	issues are:

	[1] The command string could be passed directly to
	PARSE-ARGUMENTS or it could have to be read from the OS.
	And the latter has already been broken on whitespace.
	
	[2] "-ldump" could be written "-l dump" as well, and there is
	canonicalization of the former to the latter.


** FRONT-END
	
	PARSE-IDL

	Calls POPULATE-GLOBAL-SCOPE to set up some AST nodes for
	built-in types and stuff that are already in the AST at the
	beginning of the parse (for name lookup). Then calls
	RUN-PARSER to enter the parser's state machine for reading
	tokens and calling actions. The tokens are read by
	READ-ELEMENT on the token stream. When the parser can't
	interpret the next token in its current context it calls
	RECOVER-IDL which sets up a restart and signals an ERROR. The
	handler reports it and invokes the restart to return control
	to the parser.  I don't remember why PARSE-IDL calls CALL-ADD.

	<IDL-LEXER>

	Just an extra layer of stream on the token stream from the
	lexer that interposes a READ-ELEMENT method that converts
	between the token representations used by the c-lexer and the
	parser generator. It also serves as a convenient place to add
	in support for a test suite that checks for the effects of
	parsing incorrect IDL. Basically, at a predefined token
	position, you can remove a token, add a token, or terminate
	the file.

	<IDL-PARSER-STATE>

	A class that represents the "high-water mark" of parsing. It
	is convenient to associate an error message with this so that
	if the parser fails at that point it can moan more precisely
	about the failure.


** UTILITES

	<SCOPE>

	The class of every AST node that introduces new
	scope. Bascially, that means a node that has child definitions
	like an "Interface" or a "Struct".

	ADD-DECLARATOR

	Adds a new AST node into the tree. ADD-DECLARATOR is
	specialized by the various node types.

	CHECK-BEFORE-ADD

	Validates the semantics of adding a new node into AST
	tree. Basically it checks that you're not redefining it
	etc. This protocol function is also specialized by the various
	AST node types.

	ADD-TO-SCOPE

	Just puts the node into the scope's tables.

	ADD-TO-LOCAL-TYPES

	Only does something for some specialized AST node types.

	ADD-TO-REFERENCED

	I think this maintains a cross-reference structure in addition
	to the main definition node tree structure.


** ABSTRACT-SYNTAX-TREE

	<AST-DECLARATOR>

	This is the superclass of every node in the AST tree.

The main complication here is expression parsing, which I don't think
is properly tested in the test suite at the moment. I copied this
rather blindly from the C++ code and it could probably do with some
simplication.

When writing the expression code I discovered rather late that our
implementation could not specialize methods on constants defined as
FOO-1 = MAKE(<FOO>) where <FOO> is a user defined class. KeithP is
tasked to fix this sometime. In the interim I've introduced extra leaf
classes, e.g. <FOO-1>, to specialize on.

Another issue is that of numeric types. I've rather fudged them at the
moment because Dylan can't do some of the larger arithmetic that is required.

Also there are some bodies of code in the "parser.input" that ought to
be abstracted out into functions in this directory. I started on this
with BUILD-INTERFACE, but there are many other functions that could be
teased out of the parser. This would make fixing bugs easier since one
would not need to rebuild the "parser.dylan" file so often.

A perversion of the AST tree occurs with enums. A enum definition
introduces a scope, however the items introduced by the enum are meant
to be visible in the surrounding scope. The compiler could presumably
achieve this by specially searching down into an enum when resolving a
name to a node using the AST. However, at the moment enum items are in
fact copied into the surrounding scope so that the normal upward
search through scopes can see them.

There is currently a commented out function CHECK-FORWARD-INTERFACES
that could be used to signal and error for interfaces that are still
undefined when parsing has finished, just like Clive's Lisp IDL
compiler does.

Many of the original C++ files for the AST types were very large, and
have shrunk a great deal in the conversion to Dylan. Some of them now
seem a little trivial. Even so there is stil some obvious replication
that judicious mixin classes might remove.

The original C++ compiler allowed back-end writers to subclass the AST
node classes in case they wanted insert behvaviour at that point. This
can still be done in Dylan, but I'm not sure how this squares with
allowing more than one back-end implementation.


** BACK-END

	BACK-END-EMIT

	This is really the main entry point into the selected back-end.
	It is given the object representing the back-end, the root
	node in AST tree, and a stream.
	
	DUMP-DEFINITION

	This is the main template function for writing out IDL from
	the "dump" back end. The two main functions that it calls are
	DUMP-NAME to write out the name of the thing being defined,
	and DUMP-BODY which recursively dumps out any child
	definitions of the thing being defined. All the functions
	called by DUMP-DEFINITION can be specialized by AST node
	classes.


* OPTIMIZATION

I used the emulator's metering tools on on version of Scepter and that
cause me to introduce the extra tables into the scope to more
efficiently lookup names.

However, the code could do with optimization coloring and more
profiling now that it is native.


* TEST SUITES

The scepter test suites come from various sources. Two ORB
distributions, NEO:

	neo/

and Orbix:

	orbix/demo/
	orbix/include/

and the OMG itself:

	corba/core/
	corba/services/

The test suites uses TestWorks. Unfortunately, I don't think that
TestWorks has a notion of auxilliary files that can be attached to
tests and written out in preparation for running a test. It would be
convenient to have such a mechanism for the IDL files that are part of
scepter-tests.

Instead the IDL files are implemented in Dylan source files as string
literals. These are put into tables and written out into file in the
current directory as part of the setup and cleanup methods for the
test suites.

It is entirely conceivable that some more macrology would make this
slightly less clunky.

Also, there is now a small problem in that it is slightly hard to
extract the IDL files to play with them outside of
scepter-tests. Currently, you have to use an interactive debugger to
run a testworks setup function on the chosen suite. A better method
might be to add a command line option to (console-)scepter-tests so
that you could ask for some or all of its IDL files to be setup
(without running the remainder of the test suite).


* CODING CONVENTIONS

Scepter was the first Dylan code I wrote, and as such it contains some
pecularities. Also, I was heavily influenced by Sun's IDL parser which
was written in C++ and some idiosyncracies from the other language and
implementation remain.

In the main the code is written WITHOUT:

	sealing anything

	using "define function"

	introducing multiple modules or libraries

	creating well-defined protocols

	or applying too many type declarations

That isn't my style anymore.

When we come to optimize the code a bit more, that might be a good
opportunity to introduce some more source structure.
