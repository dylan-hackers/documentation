%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 7 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Editor) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(1) 536 42.62 T
0 24 Q
(DylanW) 212.64 704 T
(orks Editor) 292.03 704 T
1 12 Q
(Scott McKay) 272.51 662.6 T
1 16 Q
(1. Intr) 72 618.53 T
(oduction) 115.26 618.53 T
0 12 Q
-0.25 (This paper describes the requirements for the editor to be used for DylanW) 72 589.8 P
-0.25 (orks. This editor might) 427.99 589.8 P
(be implemented in-house, or it might be gotten from another source, but it needs to satisfy the) 72 575.8 T
(requirements outlined in this paper) 72 561.8 T
(.) 238.66 561.8 T
1 16 Q
(2. Editor Requir) 72 519.73 T
(ements) 184.16 519.73 T
0 12 Q
(Any editor we buy or build must satisfy at least the following requirements:) 72 491 T
1 F
(\245) 85.5 469.6 T
0 F
(It must be able to integrate smoothly with the other tools in the environment, for instance,) 99 469.6 T
(the compiler, the debugger, browsers, and the source database. Secondarily, it must inte-) 99 455.6 T
(grate with the \322outside world\323 \050that is, it should have a reasonably standard look and feel,) 99 441.6 T
(and potentially integrate with embedded document protocols such as OpenDoc or Ole\051.) 99 427.6 T
1 F
(\245) 85.5 406.2 T
0 F
(It must be possible to tailor the display so that we can display more than just raw text. For) 99 406.2 T
-0.11 (example, we want to be able to embed icons in a buffer\325s display, and we want to be able to) 99 392.2 P
(implement contracting/expanding regions in the buffer.) 99 378.2 T
1 F
(\245) 85.5 356.8 T
0 F
(It must be able to compose a \322buffer\323 out of a set of first-class section nodes. It is not suffi-) 99 356.8 T
(cient to have a buffer filled with raw text gotten by read the contents of a file. Rather, we) 99 342.8 T
(need to be able to fill in a buffer\325s section nodes by calling a generating function.) 99 328.8 T
1 F
(\245) 85.5 307.4 T
0 F
(It needs \322mode hooks\323 that allow the contents of a buffer to be processed in interesting) 99 307.4 T
(ways, so that we can implement intelligent language support.) 99 293.4 T
1 F
(\245) 85.5 272 T
0 F
(It needs good support for undo and redo.) 99 272 T
1 F
(\245) 85.5 250.6 T
0 F
-0.08 (It needs good support for the use of the mouse. It is not adequate to use the mouse only as a) 99 250.6 P
(way of positioning a cursor within the buffer. Instead, the mouse should be usable as a) 99 236.6 T
(device to accelerate common interactions, for instance, being able to use drag-and-drop) 99 222.6 T
(techniques for composing programs, having the contents of buffers be mouse-sensitive in a) 99 208.6 T
(context-dependent fashion, and so on.) 99 194.6 T
1 F
(\245) 85.5 173.2 T
0 F
(It should be possible to embed an editor \322pane\323 in other tools.) 99 173.2 T
1 F
(\245) 85.5 151.8 T
0 F
(It should be customizable and reasonably extensible.) 99 151.8 T
1 16 Q
(3. \322If we buy the editor\323) 72 109.73 T
0 12 Q
(All of the pre-existing editors we might buy fall into two major categories: Gnu Emacs and not) 72 81 T
-0.08 (Gnu Emacs. Gnu Emacs \050and its descendent, Xemacs \321 also known as Lucid Emacs\051 are unique) 72 67 P
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Editor) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(2) 536 42.62 T
0 12 Q
(in that they are truly open, since their source code is freely available. All other non-Gnu Emacs) 72 712 T
(editors are substantially less open.) 72 698 T
(The issue of openness is important because it is a good way of achieving the goal of integration.) 72 672 T
(Another way of achieving this is via a scripting architecture \050such as Apple Events, OSA, or Ole) 72 658 T
-0.33 (Automation\051; a pure scripting approach is somewhat more work because the \322pipe\323 between tools) 72 644 P
(is narrower) 72 630 T
(.) 125.65 630 T
(The goal of tailoring display in a non-Gnu Emacs editor might be achieved via a pure \322part\323) 72 604 T
(architecture \050in the OpenDoc or Ole\051 sense of the word, although doing this properly is by no) 72 590 T
(means simple. Xemacs already has a reasonable level support for this, which was done at great) 72 576 T
(expense to Lucid. Gnu Emacs does not have any reasonable support for this, at least not for the) 72 562 T
(foreseeable future. Unfortunately) 72 548 T
(, FSF is not adopting Xemacs, so although it is being actively) 230.83 548 T
(maintained now) 72 534 T
(, the ultimate fate of Xemacs is not entirely clear) 148.21 534 T
(.) 381.5 534 T
(Composing buf) 72 508 T
(fers from \336rst-class sections is something that has to be built in from the outset,) 146.12 508 T
(since there are subtle policy decisions with respect to many things \050such as, what does mean to) 72 494 T
(save something that might be modi\336ed in multiple buf) 72 480 T
(fers\051. The Gnu Emacs editors could be) 332.46 480 T
(extended in this way) 72 466 T
(. It is not clear yet what could be done with non-Gnu Emacs editors.) 170.21 466 T
(Gnu Emacs editors have clearly demonstrated their ability to be tailored to support particular lan-) 72 440 T
(guages. It is not clear how well of) 72 426 T
(f-the-shelf non-Gnu Emacs editors will do.) 234.42 426 T
-0.11 (The support for undo/redo in both Gnu Emacs and non-Gnu Emacs editors alike is not as good as) 72 400 P
(it could be. Many non-Gnu Emacs editors support only very short undo histories. Most editors) 72 386 T
(provide no way to browse the undo history) 72 372 T
(. Gnu Emacs is adequate, but it could bene\336t from) 276.86 372 T
(some work in this area.) 72 358 T
-0.04 (Gnu Emacs editors, on the whole, use the mouse only in the simplest ways. Xemacs is somewhat) 72 332 P
-0.08 (better than straight Gnu Emacs in this regard. Most non-Gnu Emacs editors are also quite poor in) 72 318 P
(this area, supporting mostly conventional GUI mouse operations.) 72 304 T
1 16 Q
(4. \322If we build the editor\323) 72 263.33 T
0 12 Q
(The only reason to build our own editor is for the express purpose of meeting all the goals above) 72 236 T
(W) 72 222 T
(e therefore assume that we will succeed in meeting the goals, and concern ourselves with) 82.37 222 T
2 F
(how) 512.94 222 T
0 F
(we can meet the goals.) 72 208 T
-0.28 (Integrating with the other tools in the environment requires establishing an \322editing protocol\323 and) 72 182 P
(obeying the protocols of the other tools. This is no dif) 72 168 T
(ferent from what we would have to do to) 330.11 168 T
(integrate with an of) 72 154 T
(f-the-shelf editor) 165.43 154 T
(. The dif) 245.75 154 T
(ference is that, with our own editor) 286.52 154 T
(, we can commu-) 454.34 154 T
(nicate at the object level rather than by using a more primitive scripting architecture. Past experi-) 72 140 T
-0.19 (ence seems to show that communicating at the object level is simpler to implement, and results in) 72 126 P
(a higher level of integration in which serendipitous occurrences are more likely) 72 112 T
(.) 452.14 112 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Editor) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(3) 536 42.62 T
0 12 Q
-0.27 (W) 72 712 P
-0.27 (e believe that, for the initial release, integrating our editor with the outside world is of lower pri-) 82.37 712 P
(ority than integrating it with our own tools. W) 72 698 T
(e anticipate that our own editor would be able to) 292.7 698 T
(integrate with the outside world via OpenDoc or Ole.) 72 684 T
-0.07 (The goals of tailoring the display) 72 656.42 P
-0.07 (, piecewise composition of buf) 229.87 656.42 P
-0.07 (fers, and intelligent processing of) 377.03 656.42 P
(the buf) 72 642.42 T
(fer contents are all straightforward. Some of the details are outlined below) 105.44 642.42 T
(.) 461.26 642.42 T
(W) 72 614.83 T
(e plan for the user interface substrate to support undo and redo, and semantically-based mouse) 82.37 614.83 T
(handling. Our own editor will be built on top of this.) 72 600.83 T
1 14 Q
(4.1  Details of the Quattr) 72 565.92 T
(o Editor) 219.5 565.92 T
0 12 Q
(This section describes a possible editor implementation. For historical reasons, we refer to this) 72 537.67 T
(editor as \322Quattro\323.) 72 523.67 T
(A) 72 496.08 T
2 F
(buffer) 83.66 496.08 T
0 F
( is used to group some set of data in Quattro. A buf) 112.33 496.08 T
(fer may be displayed in zero or more) 357.76 496.08 T
2 F
(windows) 72 482.08 T
0 F
(. A buf) 114.01 482.08 T
(fer is \336lled in by some sort of a) 147.46 482.08 T
2 F
(generating function) 300.44 482.08 T
0 F
( that creates a linked list of) 394.78 482.08 T
2 F
-0.13 (nodes) 72 468.08 P
0 F
-0.13 (; each node contains some data. Some nodes contain a) 100 468.08 P
2 F
-0.13 (section) 361.63 468.08 P
0 F
-0.13 (, which is represented as a set) 395.63 468.08 P
(of) 72 454.08 T
2 F
(lines) 85 454.08 T
0 F
(. For example, reading a \336le into Quattro creates a buf) 107.66 454.08 T
(fer that contains nodes, each of) 367.39 454.08 T
(which contains one section full of lines from the \336le.) 72 440.08 T
1 F
(4.1.1  Lines) 72 406.5 T
0 F
(The line is the basic unit of storage in Quattro. The) 72 378.92 T
1 F
(<basic-line>) 319.97 378.92 T
0 F
( class has slots to store the fol-) 382.32 378.92 T
(lowing state: next line, previous line, modi\336cation tick, its owning section, properties, etc.) 72 364.92 T
-0.18 (The) 72 337.33 P
1 F
-0.18 (<line>) 93.48 337.33 P
0 F
-0.18 ( subclass of) 125.83 337.33 P
1 F
-0.18 (<basic-line>) 184.29 337.33 P
0 F
-0.18 ( is used to store ordinary textual lines. It supports high-speed) 246.65 337.33 P
-0.22 (textual display in a single, default font. A simple specialization of) 72 323.33 P
1 F
-0.22 (<line>) 388.53 323.33 P
0 F
-0.22 ( supports textual display) 420.89 323.33 P
(in multiple fonts, perhaps having dif) 72 309.33 T
(ferent pitch and height.) 246.44 309.33 T
(The) 72 281.75 T
1 F
(<diagram-line>) 93.66 281.75 T
0 F
( subclass of) 173.34 281.75 T
1 F
(<basic-line>) 232.33 281.75 T
0 F
( supports the display of diagrams, icons, or other) 294.68 281.75 T
-0.37 (embedded structures \050such as dialogs or even other embedded applications in the OpenDoc or Ole) 72 267.75 P
-0.2 (sense of the word\051. Lines that include both text and diagrams are stored using an instance of) 72 253.75 P
1 F
-0.2 (<dia-) 513.16 253.75 P
(gram-line>) 72 239.75 T
0 F
(.) 128.83 239.75 T
(Note that this or) 72 212.17 T
(ganization of lines does not support true \322line \337ow\323. That is, a line extends hori-) 149.45 212.17 T
(zontally the entire width of a buf) 72 198.17 T
(fer) 229.09 198.17 T
(. W) 241.75 198.17 T
(e do not believe that this restriction will overly limit the) 258.12 198.17 T
-0.02 (usefulness of the editor \050in fact, almost all editors, including many in commercial text formatting) 72 184.17 P
(systems, have this restriction\051.) 72 170.17 T
1 F
(4.1.2  Buffer pointers) 72 136.58 T
0 F
(A buf) 72 109 T
(fer pointer \050a \322BP\323\051 is an object that represents a location in a buf) 99.44 109 T
(fer) 414.16 109 T
(. It stores a line and an) 426.82 109 T
(index within the line. There are two classes of buf) 72 95 T
(fer pointers:) 311.74 95 T
1 F
(<simple-bp>) 373.06 95 T
0 F
(\325) 437.41 95 T
(s \050which do not) 440.75 95 T
-0.45 (move when text is inserted or deleted in their vicinity\051, and slightly heavier) 72 81 P
-0.45 (-weight) 427.33 81 P
1 F
-0.45 (<bp>) 466.55 81 P
0 F
-0.45 (\325) 493.57 81 P
-0.45 (s \050which) 496.9 81 P
(do move when text is inserted or deleted in their vicinity\051.) 72 67 T
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Editor) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(4) 536 42.62 T
1 12 Q
(4.1.3  Sections) 72 712 T
0 F
(A section is simply a set of lines. The line linkage in a section does not extend outside of the sec-) 72 685.07 T
-0.39 (tion \050that is, the previous-line slot in the \336rst line of a section is empty) 72 671.07 P
-0.39 (, and the next-line slot in the) 402.74 671.07 P
(last line of a section is empty\051. Each section remembers what nodes it is being used in. Sections) 72 657.07 T
(are represented by the) 72 643.07 T
1 F
(<section>) 180.62 643.07 T
0 F
( class.) 229.63 643.07 T
(W) 72 616.14 T
(e use this design so that sections can be stored in multiple nodes, each of which might be in a) 82.37 616.14 T
-0.21 (distinct buf) 72 602.14 P
-0.21 (fer) 125.91 602.14 P
-0.21 (. This allows us to compose buf) 138.57 602.14 P
-0.21 (fers from arbitrary section, and allow changes made) 289.42 602.14 P
(to a section in one node or buf) 72 588.14 T
(fer to be re\337ected in other nodes and buf) 217.43 588.14 T
(fers.) 411.83 588.14 T
1 F
(4.1.4  Nodes) 72 555.21 T
0 F
-0.2 (An) 72 528.29 P
2 F
-0.2 (interval) 89.46 528.29 P
0 F
-0.2 ( is a range in a buf) 126.79 528.29 P
-0.2 (fer) 214.01 528.29 P
-0.2 (, and is represented by a start BP and an end BP) 226.85 528.29 P
-0.2 (. Simple intervals) 453.27 528.29 P
(are represented by the) 72 514.29 T
1 F
(<interval>) 180.62 514.29 T
0 F
( class.) 234.3 514.29 T
-0.04 (The) 72 487.36 P
1 F
-0.04 (<node>) 93.62 487.36 P
0 F
-0.04 ( class is a subclass of) 131.97 487.36 P
1 F
-0.04 (<interval>) 236.36 487.36 P
0 F
-0.04 ( that maintains additional state: next node, previous) 290.03 487.36 P
(node, parent node, children nodes, modi\336cation tick, etc. A buf) 72 473.36 T
(fer is built from a sequence of) 375.07 473.36 T
(nodes, and most nodes contain a section \050which itself consists of lines\051.) 72 459.36 T
-0.33 (There are a number of subclasses of) 72 432.43 P
1 F
-0.33 (<node>) 245.31 432.43 P
0 F
-0.33 ( that are used to represent additional information. For) 283.66 432.43 P
-0.34 (example, source code buf) 72 418.43 P
-0.34 (fers might contain \322de\336nition nodes\323, and directory editing buf) 193.38 418.43 P
-0.34 (fer might) 493.36 418.43 P
(contain \322pathname nodes\323. A \322de\336nition node\323 might contain information that describes what) 72 404.43 T
(module or package the de\336nition came from, and so on.) 72 390.43 T
(Each node also has a slot containing the \322displayer\323 for the node. Usually) 72 363.5 T
(, the node\325) 424.82 363.5 T
(s displayer) 475.15 363.5 T
(simply calls the normal line-based display function on each line in the node, requesting it to dis-) 72 349.5 T
(play itself. However) 72 335.5 T
(, the node\325) 169.16 335.5 T
(s displayer might be something dif) 219.49 335.5 T
(ferent, such as a function that) 385.61 335.5 T
(displays only a marker for the node\325) 72 321.5 T
(s contents; this can be used to implement \322opening\323 and) 245.3 321.5 T
(\322closing\323 of nodes in a buf) 72 307.5 T
(fer) 200.76 307.5 T
(. Sometimes the displayer for a section might add some output, for) 213.42 307.5 T
(example, a little \322tool bar\323 of interesting operations on the section.) 72 293.5 T
(As we pointed out above, the line linkage of a section in a node does not extend outside the sec-) 72 266.57 T
(tion. Thus, to map over all the lines in a buf) 72 252.57 T
(fer) 281.77 252.57 T
(, a program must map over all the nodes in the) 294.61 252.57 T
(buf) 72 238.57 T
(fer) 87.78 238.57 T
(, and map over the lines in each node\325) 100.62 238.57 T
(s section.) 282.25 238.57 T
1 F
(4.1.5  Buffers) 72 205.64 T
0 F
(A buf) 72 178.71 T
(fer is composed of a sequence of nodes. Buf) 99.44 178.71 T
(fers can be \336lled in any number of dif) 311.51 178.71 T
(ferent) 492.59 178.71 T
(ways:) 72 164.71 T
1 F
(\245) 85.5 143.79 T
0 F
-0.01 (Fill the buffer with the contents of a source file \050which might be a database source file, or a) 99 143.79 P
(traditional flat file\051.) 99 129.79 T
1 F
(\245) 85.5 108.86 T
0 F
(Find a single definition \050meta-point\051.) 99 108.86 T
1 F
(\245) 85.5 87.93 T
0 F
(Create nodes containing all the callers of some function.) 99 87.93 T
1 F
(\245) 85.5 67 T
0 F
(Create nodes containing a class and all its subclasses,) 99 67 T
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Editor) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(5) 536 42.62 T
1 12 Q
(\245) 85.5 712 T
0 F
(Create nodes containing all the direct methods of a class.) 99 712 T
1 F
(\245) 85.5 689.8 T
0 F
(Create nodes containing all the methods of a class having \322-setter\323 in their name.) 99 689.8 T
1 F
(\245) 85.5 667.6 T
0 F
(Fill the buffer with a directory listing.) 99 667.6 T
(There are a number of buf) 72 639.4 T
(fer classes. T) 197.4 639.4 T
(wo common ones are the class) 259.54 639.4 T
1 F
(<\336le-buffer>) 408.84 639.4 T
0 F
( \050which con-) 473.84 639.4 T
(tains the contents of a source \336le\051 and the class) 72 625.4 T
1 F
( <generated-buffer>) 297.62 625.4 T
0 F
( \050which contains a set of) 400.94 625.4 T
(nodes created by some sort of \322generating function\323, such as \322all callers\323 or \322direct subclasses\323\051.) 72 611.4 T
-0.15 (Buf) 72 583.2 P
-0.15 (fers maintain some additional state, such as a current text style, the default module \050or default) 89.78 583.2 P
(package for Lisp buf) 72 569.2 T
(fers\051, and so on.) 171.42 569.2 T
1 F
(4.1.6  Major Modes and Minor Modes) 72 535 T
0 F
(The) 72 506.8 T
2 F
(major mode) 93.66 506.8 T
0 F
( of a buf) 151.32 506.8 T
(fer controls the overall behavior of the buf) 191.42 506.8 T
(fer) 394.82 506.8 T
(, including how the data in) 407.66 506.8 T
(the buf) 72 492.8 T
(fer is interpreted. For example, the Dylan major mode is responsible for parsing the con-) 105.44 492.8 T
(tents of the buf) 72 478.8 T
(fer as Dylan source code.) 144.11 478.8 T
(The) 72 450.6 T
2 F
(minor mode) 93.66 450.6 T
0 F
( of a buf) 151.32 450.6 T
(fer controls other bits of behavior) 191.42 450.6 T
(. For example, there might be a minor) 351.73 450.6 T
-0.2 (mode in a Dylan major mode buf) 72 436.6 P
-0.2 (fer that displays all Dylan reserved words in bold and comments) 229.9 436.6 P
(in italics.) 72 422.6 T
1 F
(4.1.7  W) 72 388.4 T
(indows) 113.78 388.4 T
0 F
-0.08 (A window is a view into a buf) 72 360.2 P
-0.08 (fer) 216.24 360.2 P
-0.08 (. A window displays one buf) 228.9 360.2 P
-0.08 (fer at a time, but a buf) 366.29 360.2 P
-0.08 (fer can be dis-) 471.92 360.2 P
(played simultaneously in many windows. W) 72 346.2 T
(indows maintain the state that drives Quattro\325) 284.84 346.2 T
(s redis-) 503.5 346.2 T
(play) 72 332.2 T
(.) 91.88 332.2 T
(Note that much of Quattro\325) 72 304 T
(s redisplay is driven by its own undo substrate. That is, the undo sub-) 201.98 304 T
(strate tracks the changes made by a user command, and arranges for the appropriate redisplay to) 72 290 T
(happen. Individual editor commands will only rarely have to advise Quattro what to redisplay) 72 276 T
(.) 521.16 276 T
1 F
(4.1.8  Editors and Editor Frames) 72 241.8 T
0 F
(An) 72 213.6 T
2 F
(editor) 89.66 213.6 T
0 F
( is an object that maintains overall editor state. This state is not kept in the editor appli-) 118.33 213.6 T
(cation itself, since we expect that Quattro will support simple editing gadgets and panes.) 72 199.6 T
(An) 72 171.4 T
2 F
(editor frame) 89.66 171.4 T
0 F
( is an application frame that has an editor object, plus a command loop and per-) 149.33 171.4 T
(haps a thread of its own.) 72 157.4 T
1 F
(4.1.9  Integration with User Interface Substrate) 72 123.2 T
0 F
(Quattro\325) 72 95 T
(s user interface will be built on the user interface substrate provided by \322DUIM\323,) 112 95 T
(although in certain critical areas, Quattro will use customized implementations of the DUIM pro-) 72 81 T
(tocol.) 72 67 T
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Editor) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(6) 536 42.62 T
0 12 Q
(In particular) 72 712 T
(, Quattro\325) 130.5 712 T
(s output will not be implemented using ordinary DUIM output recording.) 176.5 712 T
(Instead, Quattro will have a custom redisplay algorithm optimized for displaying a \050relatively) 72 698 T
-0.42 (small number of\051 lines of data from a \050potentially much\051 lar) 72 684 P
-0.42 (ger number of lines. Presentations will) 354.2 684 P
(be generated on the \337y by language-speci\336c methods on the buf) 72 670 T
(fer) 378.4 670 T
(\325) 392.16 670 T
(s major mode.) 395.5 670 T
(Quattro will use CLIM presentation-based input model, so that the power of this model can be) 72 643.85 T
(brought to bear on the contents of a buf) 72 629.85 T
(fer) 261.08 629.85 T
(. This will allow a substantial amount of integration to) 273.74 629.85 T
(be done with other DylanW) 72 615.85 T
(orks tools, with useful operations being directly available on the) 204.35 615.85 T
(things displayed in buf) 72 601.85 T
(fers.) 181.45 601.85 T
1 F
(4.1.10  Files and Str) 72 569.7 T
(eams) 173.12 569.7 T
0 F
-0.09 (W) 72 543.55 P
-0.09 (e expect that Quattro intervals will support the DylanW) 82.37 543.55 P
-0.09 (orks streams library protocol, at least to) 347.32 543.55 P
(the extent that ordinary ASCII character streams can be read from and written to buf) 72 529.55 T
(fers.) 477.01 529.55 T
(W) 72 503.4 T
(e also intend to be able to read directly from the source database, creating \322hard\323 sections in) 82.37 503.4 T
(buf) 72 489.4 T
(fers that correspond to the section entities in the source database. When we read in \322\337at\323 \336les) 87.78 489.4 T
(of program source, the sections will be generated on the \337y by a language-speci\336c sectionizer) 72 475.4 T
(.) 520.91 475.4 T
1 F
(4.1.1) 72 443.25 T
(1  Other functionality) 95.34 443.25 T
0 F
(In addition to the basic Emacs-like functionality that users expect, Quattro will support the fol-) 72 417.1 T
(lowing editor functionality as well:) 72 403.1 T
1 F
(\245) 85.5 382.95 T
0 F
(Variable pitch, variable height fonts; embedded diagrams and gadgets.) 99 382.95 T
1 F
(\245) 85.5 362.8 T
0 F
(Full context-sensitive use of the mouse in editor buffers.) 99 362.8 T
1 F
(\245) 85.5 342.65 T
0 F
(Tags Tables, which are integrated with the DylanWorks system configuration substrate.) 99 342.65 T
1 F
(\245) 85.5 322.5 T
0 F
(Multiple \322possibilities\323 buffers, for example, multiple Tags Searches or Edit Callers active) 99 322.5 T
(simultaneously.) 99 308.5 T
1 F
(\245) 85.5 288.35 T
0 F
(String searching and simple regular-expression searching.) 99 288.35 T
1 F
(\245) 85.5 268.2 T
0 F
(Patching tools.) 99 268.2 T
1 F
(\245) 85.5 248.05 T
0 F
(Keyboard macros, and being able to customize key bindings for commands.) 99 248.05 T
(In addition, Quattro will import functionality from other DylanW) 72 221.9 T
(orks tools, such as:) 384.68 221.9 T
1 F
(\245) 85.5 201.75 T
0 F
(Class browsing functionality.) 99 201.75 T
1 F
(\245) 85.5 181.6 T
0 F
(Generic function and method browsing functionality.) 99 181.6 T
1 F
(\245) 85.5 161.45 T
0 F
(Cross-reference browsing functionality.) 99 161.45 T
1 F
(\245) 85.5 141.3 T
0 F
(Interface to incremental compilation and dynamic linking.) 99 141.3 T
1 14 Q
(4.2  Open Issues in the Quattr) 72 107.82 T
(o Design) 250.26 107.82 T
0 12 Q
(Zmacs and Gnu Emacs maintain their undo history on a per) 72 81 T
(-buf) 357.72 81 T
(fer basis. In Quattro, a single sec-) 377.5 81 T
-0.04 (tion can be in more than one buf) 72 67 P
-0.04 (fer) 227.18 67 P
-0.04 (. This can confuse things \321 changes to a section in more than) 239.84 67 P
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Editor) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(7) 536 42.62 T
0 12 Q
(one buf) 72 712 T
(fer will get recorded in dif) 108.11 712 T
(ferent undo histories. Do we stick with per) 234.19 712 T
(-buf) 438.59 712 T
(fer undo histo-) 458.36 712 T
(ries, or do we do per) 72 698 T
(-section, or do we have \050as T) 170.4 698 T
(ucker W) 308.94 698 T
(ithington suggests\051 a global undo his-) 349.44 698 T
(tory that gets managed on a section-by-section basis?) 72 684 T
(Gnu Emacs is powerful in lar) 72 658 T
(ge part because of its extensibility) 212.76 658 T
(. What can we do about this?) 375.62 658 T
(Zmacs has 10,000 parameters. What should be parameterizable in Quattro?) 72 632 T
1 16 Q
(5. Open Issues) 72 591.33 T
0 12 Q
(Is it an accurate conclusion to say the if we \322buy\323 an editor) 72 564 T
(, it should be either Gnu Emacs or) 355.45 564 T
(Xemacs \050probably the latter\051?) 72 550 T
-0.25 (W) 72 524 P
-0.25 (e need to investigate the exact state of Xemacs, and \336gure out what its disposition is \050especially) 82.37 524 P
(with respect to Gnu Emacs\051. One thing to note here is that these editors are \322copylefted\323, which) 72 510 T
(might possibly restrict just how ef) 72 496 T
(fectively we can use and extend them.) 235.45 496 T
(W) 72 470 T
(e need to investigate other editors for use under W) 82.37 470 T
(indows, and whether we realistically think) 324.17 470 T
(they are powerful enough for use with a programming environment.) 72 456 T
-0.16 (W) 72 430 P
-0.16 (e need to see what other W) 82.37 430 P
-0.16 (indows programming environments use as their code editors, that is,) 210.92 430 P
(what other editors are commonly used under W) 72 416 T
(indows? How attached do people get to them?) 299.81 416 T
(W) 72 390 T
(e need to realistically estimate how much it would cost to build an editor) 82.37 390 T
(. A good estimate is) 430.68 390 T
(that it would take about 1 man-year to build something rather good, which could then be grown) 72 376 T
(over time.) 72 362 T
(W) 72 336 T
(e need to realistically estimate how much it will cost us to integrate our environment with an) 82.37 336 T
-0.13 (existing editor) 72 322 P
-0.13 (. Lucid, for one, spent a very long time building Xemacs for their Ener) 140.21 322 P
-0.13 (gize product) 477.6 322 P
(\0502 full time people for nearly 2 years\051. Note that integrating with an exisiting editor is in many) 72 308 T
(was less predictable than building our own \321 we don\325) 72 294 T
(t really know how good a job we can do,) 334.08 294 T
(nor how long it will really take.) 72 280 T
(How does a user extend Quattro? That is, Quattro is written in Dylan and runs in DylanW) 72 254 T
(orks.) 501.97 254 T
(Presumably the user writes some new Dylan code that is intended to be loaded into DylanW) 72 240 T
(orks) 513.31 240 T
(itself. Can we make this work?) 72 226 T
(How much do we care about what the extension language is? If we build Quatro, the extension) 72 200 T
(language will be Dylan; with Gnu Emacs, it is Elisp. Is this important?) 72 186 T
FMENDPAGE
%%EndPage: "7" 7
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 7
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Times-Italic
%%EOF
