%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 7 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Requirements) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(1) 536 42.62 T
0 24 Q
(DylanW) 175.98 704 T
(orks Requirements) 255.37 704 T
1 12 Q
(Roman Budzianowski, Chris Fry & Scott McKay) 180.17 663.3 T
1 16 Q
(1.  Intr) 72 619.93 T
(oduction) 119.26 619.93 T
0 12 Q
(This paper outlines the basic goals we hope to achieve with DylanW) 72 591.9 T
(orks. It describes a set of) 399.98 591.9 T
(models that describe our tar) 72 577.9 T
(get market, users and or) 205.09 577.9 T
(ganizations, the types of applications they) 319.85 577.9 T
(might develop, and what sort of hardware they are likely to use. For each of these models, we) 72 563.9 T
(describe some requirements dictated by the model. W) 72 549.9 T
(e then go on to describe a \322feature space\323,) 328.99 549.9 T
(that is, a set of technologies we might implement to address each possible tar) 72 535.9 T
(get.) 441.74 535.9 T
(Finally) 72 509.2 T
(, we describe a plausible single product we can build that addresses a likely set of tar) 105.23 509.2 T
(gets.) 511.93 509.2 T
(More detailed discussion of all the technologies found in that product are described in the other) 72 495.2 T
(DylanW) 72 481.2 T
(orks white papers.) 111.7 481.2 T
(Note that this paper is far from the ultimate market analysis and requirements document. How-) 72 454.5 T
-0.03 (ever) 72 440.5 P
-0.03 (, it does serve to provide the DylanW) 92.17 440.5 P
-0.03 (orks development team with a starting point and a basis) 270.31 440.5 P
(for making technical decisions. It is our intention that management and marketing people will) 72 426.5 T
(read this document so that they can understand why we are making certain decisions; we hope) 72 412.5 T
(that these people will also do some market research to either back up these decisions, or help) 72 398.5 T
(change them if need be.) 72 384.5 T
(Note that, even more than the other white papers, this is an evolving document re\337ecting our) 72 357.8 T
(model of the current state of af) 72 343.8 T
(fairs.) 219.74 343.8 T
1 16 Q
(2.  V) 72 302.43 T
(ision for DylanW) 102.96 302.43 T
(orks) 219.42 302.43 T
0 12 Q
(DylanW) 72 274.4 T
(orks consists of a set of tools that assist developers in writing software systems, starting) 111.7 274.4 T
(by building a small prototype, cycling through further requirements analysis and prototypes, and) 72 260.4 T
(\336nally resulting in a delivered application. The \322\336nal\323 application itself will be maintained using) 72 246.4 T
(these same tools. The application) 72 232.4 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
234.65 231.09 231.65 231.09 2 L
0 1 1 0 1 0 0 K
V
0.59 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(might be a self-contained free-standing Dylan application, or it) 234.65 232.4 T
(might be a modular component \050either a library or an entire application\051 that integrates well with) 72 218.4 T
(other tools and languages.) 72 204.4 T
(W) 72 177.7 T
(e envision that DylanW) 82.37 177.7 T
(orks will aid the entire development and maintenance cycle, in part by) 195.06 177.7 T
(providing \322hypertext\323 links between all aspects of a project, eventually including such things as) 72 163.7 T
-0.2 (design rationale capture. The initial release will support source version control and system con\336g-) 72 149.7 P
(uration management, both batch and incremental compilation, and patching. Later releases of) 72 135.7 T
(DylanW) 72 121.7 T
(orks will model speci\336cations and documents as well as code, will track bug reports and) 111.7 121.7 T
(test suites, and so on.) 72 107.7 T
(The intent is to make the transition from developing the prototype\050s\051 to delivering the \336nished) 72 81 T
-0.3 (product is intended to be as smooth as possible. In DylanW) 72 67 P
-0.3 (orks, there will be no huge ef) 352.98 67 P
-0.3 (fort at the) 491.25 67 P
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Requirements) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(2) 536 42.62 T
0 12 Q
-0.12 (end of the development process required to deliver a product. Furthermore, ongoing maintenance) 72 712 P
(will not be an \322afterthought\323 process supported by out-of-band tools, but will instead be an inte-) 72 698 T
(grally support part of DylanW) 72 684 T
(orks.) 216.35 684 T
-0.4 (Note that experience in the Lisp community should serve as a warning that it is not enough for our) 72 656.08 P
(development environment to be very good only at assisting developers in producing excellent) 72 642.08 T
(\322prototypes\323, without being equally good at \336nishing the job. It needs to be the case Dylan as a) 72 628.08 T
(language is a viable solution for delivering shrink-wrapped applications. In addition, these appli-) 72 614.08 T
(cations need to interoperate very well with existing software \050such libraries written in C, Open-) 72 600.08 T
(Doc/OLE,) 72 586.08 T
2 F
(etc) 124.66 586.08 T
0 F
(.\051.) 138.65 586.08 T
1 14 Q
(2.1  DylanW) 72 550.82 T
(orks Goals) 145.51 550.82 T
0 12 Q
(Put another way) 72 522.23 T
(, DylanW) 149.21 522.23 T
(orks has to be very good at three things:) 194.9 522.23 T
1 F
(\245) 85.5 500.31 T
0 F
(Be powerful enough to make both individual programmers and teams of programmers very) 99 500.31 T
(productive.) 99 486.31 T
1 F
(\245) 85.5 464.39 T
0 F
(Deliver small, fast, reliable shrink-wrapped components.) 99 464.39 T
1 F
(\245) 85.5 442.46 T
0 F
(Deliver applications that integrate very well with existing software and standards.) 99 442.46 T
(In addition, DylanW) 72 414.54 T
(orks needs to be fairly good at this:) 170.03 414.54 T
1 F
(\245) 85.5 392.61 T
0 F
(Integrates well with the platform it is running on.) 99 392.61 T
1 16 Q
(3.  First Release of Pr) 72 350.03 T
(oduct - executive summary of choices) 218.34 350.03 T
0 12 Q
(This is not carved in stone, but here is a vague de\336nition of the \336rst release. V) 72 320.77 T
(ague - because we) 445.28 320.77 T
(presented here some alternative directions. V) 72 306.77 T
(arious options are discussed in \322Models\323 section on) 287.28 306.77 T
(page) 72 292.77 T
(2 and \322Feature Space\323 section on page) 97.66 292.77 T
(9.) 285.94 292.77 T
1 14 Q
(3.1  Overall dir) 72 257.51 T
(ection) 162.75 257.51 T
0 12 Q
(W) 72 228.92 T
(e have to decide what is going to be the selling point of DylanW) 82.37 228.92 T
(orks \050maybe we can \336nd a bet-) 390.37 228.92 T
(ter name\051. Due to resource and time limitations we probably have to prioritize our development) 72 214.92 T
(strategy) 72 200.92 T
(. The following areas are potentially important for the success of the product.) 109.21 200.92 T
1 F
(\245) 85.5 179 T
0 F
(Development UI \050browsing, editing, debugging\051) 99 179 T
(The conservative approach would be to develop a traditional Lisp-style environment. It is) 99 151 T
-0.16 (powerfull but probably inaccessible to our target audience. It is not novel by any means and) 99 137 P
(probably looses, even if it\325s very good, with the likes of Visual C++.) 99 123 T
(More aggressive approach is to develop a graphical, interactive environment which would) 99 95 T
(help manage the complexity of programs. This would attract attention to our environment) 99 81 T
(and lower the learning curve for novice programmers.) 99 67 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Requirements) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(3) 536 42.62 T
1 12 Q
(\245) 85.5 712 T
0 F
(UI Runtime Support) 99 712 T
(Support for developing GUIs in Dylan.) 99 684 T
-0.13 (Conservative approach is to interface with a GUI builder on Windows and provide a library) 99 656 P
(to hook up the code to the GUI.) 99 642 T
(More ambitious approach would require better integration of the GUI builder with the) 99 614 T
(development environment, probably necessitating development of our own GUI builder.) 99 600 T
-0.08 (The integration would involve a novel approach for interactive, direct manipulation, maybe) 99 586 P
(prototype-based building of User Interfaces.) 99 572 T
(Another ambitious project in this area is to provide a total UI portability solution.) 99 544 T
1 F
(\245) 85.5 522.43 T
0 F
(Application Embedding and Distribution Standards) 99 522.43 T
(The conservative approach is to provide good interface with OLE 2.) 99 494.43 T
(The ambitious approach is to attempt to interface with OpenDoc, D/SOM, CORBA. Note) 99 466.43 T
(that those standards are still in flux.) 99 452.43 T
1 F
(\245) 85.5 430.86 T
0 F
(Interoperability) 99 430.86 T
(The ambitious approach is to develop a full FFI to C and C++, with subclassing between) 99 402.86 T
-0.25 (C++ and Dylan both ways. Less ambitious approach would allow for limitations in the inter-) 99 388.86 P
(face to C++.) 99 374.86 T
1 F
(\245) 85.5 353.29 T
0 F
(Tools) 99 353.29 T
(GUI builder is part of the UI runtime solution. Other potentially useful tools are: schema) 99 325.29 T
(editor and form generator for relational databases, various libraries.) 99 311.29 T
(W) 72 256.14 T
(e probably cannot take the ambitious approach in each area. W) 82.37 256.14 T
(e suggest that the development) 382.99 256.14 T
(UI is very important in view of the success of V) 72 242.14 T
(isual Basic, etc. W) 301.91 242.14 T
(e have to provide a standard) 390.6 242.14 T
-0.18 (support for runtime UI, but developing our own GUI builder which is signi\336cantly better than the) 72 228.14 P
-0.13 (existing ones is a big project. A complete portability solution is a big project too. W) 72 214.14 P
-0.13 (e suggest that) 472.06 214.14 P
-0.29 (these projects be included in the next releases of DylanW) 72 200.14 P
-0.29 (orks. Another area that is very important) 344.05 200.14 P
-0.17 (for the success in the tar) 72 186.14 P
-0.17 (get market is interoperability: we need a complete FFI to C++. This has a) 187.23 186.14 P
(very high priority and requires a lot of resources. Since we feel that OpenDoc and CORBA stan-) 72 172.14 T
(dards are still evolving we should limit our work to full support of OLE 2.) 72 158.14 T
(One approach follows a focused approach in terms of market coverage. W) 72 130.57 T
(e don\325) 427.6 130.57 T
(t provide in the) 457.7 130.57 T
(\336rst release a broad range of functionality and platforms. Rather we concentrate on \322Microsoft\323) 72 116.57 T
(platform and provide:) 72 102.57 T
(1.) 84.85 81 T
(A novel interactive graphical development environment which includes GUI and relational) 99 81 T
(DB access tools;) 99 67 T
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Requirements) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(4) 536 42.62 T
0 12 Q
(2.) 85.5 712 T
(V) 99 712 T
(ery good integration: full C++ FFI;) 106.33 712 T
(Another approach would be to provide a traditional environment, but try to cover multiple plat-) 72 684.33 T
(forms and broad functionality) 72 670.33 T
(. Portability would be a very important element of this strategy) 214.2 670.33 T
(.) 515.06 670.33 T
1 14 Q
(3.2  Platform) 72 635.33 T
0 12 Q
(W) 72 607 T
(e aim at Chicago and W) 82.37 607 T
(indows NT) 197.53 607 T
(. Hence portability layers are of lesser priority) 250.31 607 T
(. Instead we) 470.81 607 T
(interface well with \322Microsoft platform\323. That\325) 72 593 T
(s the approach we favour now) 298.62 593 T
(.) 442.13 593 T
1 14 Q
(3.3  Market) 72 558 T
0 12 Q
(W) 72 529.67 T
(e tar) 82.37 529.67 T
(get V) 103.14 529.67 T
(isual C++ and Smalltalk markets. W) 128.75 529.67 T
(e compete with Smalltalk by having better deliv-) 302.65 529.67 T
(ery and interoperability story) 72 515.67 T
(, and with V) 210.86 515.67 T
(isual C++ by supporting dynamic development environ-) 269.47 515.67 T
(ment with rapid prototyping and better time to market times.) 72 501.67 T
(W) 72 474 T
(e will aim initially at the \336nancial and general MIS custom development in small teams \0502-5\051.) 82.37 474 T
(The environment may be also attractive to certain shrink-wrapped applications.) 72 460 T
-0.38 (In this approach we want to levarage the dynamic nature of our environment. If we concentrate on) 72 432.33 P
-0.33 (the graphical, directly maniupulated development environment, we will make the Dylan language) 72 418.33 P
(accessible to developers with a broad range of skill levels.) 72 404.33 T
1 14 Q
(3.4  User) 72 369.33 T
0 12 Q
-0.01 (The user typically will be either novice or experienced MIS programmer with exposure to V) 72 341 P
-0.01 (isual) 514.34 341 P
(C++, V) 72 327 T
(isual Basic, COBOL, maybe Smalltalk. W) 107.48 327 T
(e will not support lar) 309.85 327 T
(ge team programming.) 409.63 327 T
1 14 Q
(3.5  Development Envir) 72 292 T
(onment) 212.52 292 T
0 12 Q
(The development environment is very graphical and interactive. It features a set of graphical) 72 263.67 T
(browsers, an editor) 72 249.67 T
(, interactive debugger) 163.16 249.67 T
(, and a set of tools for non-programmatic development:) 266.99 249.67 T
(GUI builder) 72 235.67 T
(, schema designer) 129.84 235.67 T
(.) 214.82 235.67 T
1 14 Q
(3.6  GUI builder) 72 200.67 T
0 12 Q
-0.18 (W) 72 172.33 P
-0.18 (e interface with a GUI builder) 82.37 172.33 P
-0.18 (. This might be of) 225.09 172.33 P
-0.18 (f the shelf one like AppStudio from V) 309.82 172.33 P
-0.18 (isual C++) 490.15 172.33 P
(\050this assumes that the user already has V) 72 158.33 T
(isual C++\051, or we might OEM one with source and) 266.24 158.33 T
(deliver with the environment. One such tool from Soft Bridge includes Basic interpreter) 72 144.33 T
(.) 493.62 144.33 T
1 14 Q
(3.7  Editor) 72 109.33 T
0 12 Q
(W) 72 81 T
(e build our own editor \050though we might use an emacs as a base\051 but we don\325) 82.37 81 T
(t interface with) 453.42 81 T
-0.27 (commercial editors. This is because the editor is an intrinsic part of the environment and the avail-) 72 67 P
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Requirements) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(5) 536 42.62 T
0 12 Q
-0.2 (able mechanisms \050like OLE 2\051 are not satisfactory for interfacing with third party editors. W) 72 712 P
-0.2 (e pro-) 511.88 712 P
(vide bindings for various editors though.) 72 698 T
1 14 Q
(3.8  Database) 72 663.26 T
0 12 Q
(At this point we are planning to use ObjectStore. It would probably be bene\336cial to be able to) 72 635.18 T
(interface to any PC based database, through ODBC.) 72 621.18 T
1 14 Q
(3.9  Inter) 72 586.44 T
(operability of applications) 126.57 586.44 T
0 12 Q
(W) 72 558.36 T
(e interface with OLE 2. W) 82.37 558.36 T
(e don\325) 208.7 558.36 T
(t plan in the \336rst release to integrate with OpenDoc D/SOM,) 238.81 558.36 T
(CORBA. W) 72 544.36 T
(e will support OCX\325) 129.71 544.36 T
(s. Dylan will be able to deliver libraries \050DLLs\051.) 227.38 544.36 T
(Our FFI provides very good interface to C++. W) 72 516.95 T
(e will support subclassing of C++ classes, spe-) 304.87 516.95 T
(cializing on C++ classes. W) 72 502.95 T
(e will also support exporting Dylan libraries as C++ interfaces.) 205.56 502.95 T
1 14 Q
(3.10  Libraries) 72 468.21 T
0 12 Q
(The product will contain the following libraries or interfaces to libraries: ODBC, UI layer \050W) 72 440.14 T
(in-) 520.44 440.14 T
(dows 32\051, threads.) 72 426.14 T
1 14 Q
(3.1) 72 391.39 T
(1  Platforms) 88.73 391.39 T
1 12 Q
(3.1) 72 357.32 T
(1.1  For Developing Dylan Pr) 86.34 357.32 T
(ograms) 235.45 357.32 T
(\245) 85.5 335.91 T
0 F
(Minimum processor speed is 486DX4@ 66 Mhz) 99 335.91 T
1 F
(\245) 85.5 314.5 T
0 F
(Minimum RAM 24 to 32 Mbytes) 99 314.5 T
1 F
(\245) 85.5 293.09 T
0 F
(Minimum disk is 500 Mbytes) 99 293.09 T
1 F
(\245) 85.5 271.68 T
0 F
(Screen size should be 1024 x 768 x 8 \050color\051) 99 271.68 T
1 F
(\245) 85.5 250.27 T
0 F
(Pointing device and keyboard) 99 250.27 T
1 F
(\245) 85.5 228.86 T
0 F
(OS uses Win32 API \050both Chicago and Windows/NT\051) 99 228.86 T
1 F
(3.1) 72 195.46 T
(1.2  For Running Dylan Applications on Desktops) 86.34 195.46 T
(\245) 85.5 174.05 T
0 F
(Minimum processor speed is 486DX4@ 66 Mhz) 99 174.05 T
1 F
(\245) 85.5 152.64 T
0 F
(Minimum RAM 8 Mbytes) 99 152.64 T
1 F
(\245) 85.5 131.23 T
0 F
(Minimum disk is 100 Mbytes) 99 131.23 T
1 F
(\245) 85.5 109.82 T
0 F
(Screen size should be 680 x 480 x 1) 99 109.82 T
1 F
(\245) 85.5 88.41 T
0 F
(Pointing device and keyboard) 99 88.41 T
1 F
(\245) 85.5 67 T
0 F
(OS uses Win32 API \050both Chicago and Windows/NT\051) 99 67 T
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Requirements) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(6) 536 42.62 T
1 12 Q
(3.1) 72 712 T
(1.3  For Running Dylan Applications on Embedded Computers) 86.34 712 T
0 F
(The requirements for embedded platforms are signi\336cantly less in terms of processor speed,) 72 685.25 T
-0.44 (amount of RAM, and peripherals than they are for PCs. Our goal is to make such applications able) 72 671.25 P
(to run on very small machines.) 72 657.25 T
1 16 Q
(4.  Models) 72 615.83 T
1 14 Q
(4.1  The Market) 72 580.42 T
0 12 Q
-0.08 (Our initial tar) 72 553 P
-0.08 (get market is the set of programmers who are using Chicago and W) 136.94 553 P
-0.08 (indows/NT) 459.4 553 P
-0.08 (. The) 512.51 553 P
(majority of these people are programming in C++ or Basic, using tools such as V) 72 539 T
(isual C++ or) 461.11 539 T
(V) 72 525 T
(isual Basic. It appears to be the case that the numbers of such programmers is growing.) 79.94 525 T
(The popularity of the Power Builder and similar environments seems to be growing, too.) 72 498.25 T
(In this market, there is a growing number of \322standards\323 being widely used or developed, includ-) 72 471.5 T
(ing OLE \050and OpenDoc\051, COM \050and CORBA/DSOM\051.) 72 457.5 T
(By attempting to enter this market, we are operating on the assumption that Dylan and Dylan-) 72 430.75 T
(W) 72 416.75 T
(orks will of) 82.37 416.75 T
(fer programmers a better way of doing things than they have with their current lan-) 137.48 416.75 T
(guages and tools. However) 72 402.75 T
(, it is clear that this alone is not enough to cause a project to switch to) 201.49 402.75 T
(Dylan. First of all, the choice of language is frequently a management decision based on both) 72 388.75 T
(technical and non-technical ar) 72 374.75 T
(guments. More importantly) 216.07 374.75 T
(, the features of a programming lan-) 346.96 374.75 T
(guage are only a part of the overall picture of productivity) 72 360.75 T
(. A) 349.82 360.75 T
(vailability of various libraries and) 363.6 360.75 T
(tools, the programmer) 72 346.75 T
(\325) 178.76 346.75 T
(s own experience, and interoperability with other systems all play a major) 182.1 346.75 T
(role.) 72 332.75 T
-0.4 (OO programming is already a prevailing paradigm in the markets we are tar) 72 306 P
-0.4 (geting. W) 431.58 306 P
-0.4 (e expect that) 477.55 306 P
(many programmers in this community will be looking for a new language and environement that) 72 292 T
(better meets their requirements than either C++ or V) 72 278 T
(isualBasic. In the dyanmic object-oriented) 323.44 278 T
(corner) 72 264 T
(, we expect that Dylan and Smalltalk will be competing for this market, but only if they) 102.17 264 T
(meet the other non-language requirements.) 72 250 T
(W) 72 223.25 T
(e therefore need to emphasize the things \321 both in the language and in the environment \321 in) 82.37 223.25 T
(DylanW) 72 209.25 T
(orks that better meet a programmer) 111.7 209.25 T
(\325) 281.1 209.25 T
(s needs than any other programming language and) 284.44 209.25 T
(environment: dynamic nature of the language and the graphical style of the environment.) 72 195.25 T
(W) 72 168.5 T
(e can safely assume that Dylan programmers shouldn\325) 82.37 168.5 T
(t be forced to rely exclusively on Dylan) 342.43 168.5 T
(for any aspect of their work. T) 72 154.5 T
(o the contrary) 217.45 154.5 T
(, they should be able to freely mix and match Dylan) 283.32 154.5 T
(with other pieces of software.) 72 140.5 T
1 F
(4.1.1  Competition) 72 107.75 T
0 F
-0.46 (The main competition in this market comes from C++ \050probably using V) 72 81 P
-0.46 (isual C++\051, and there will) 416.1 81 P
-0.08 (probably be competition from some Smalltalk vendors. Depending on the type of user) 72 67 P
-0.08 (, there may) 483.57 67 P
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Requirements) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(7) 536 42.62 T
0 12 Q
(also be competition from V) 72 712 T
(isual Basic. There also may be competition from Power Builder and) 203.27 712 T
(similar such systems \050GUI builder + database access + scripting + report generation\051.) 72 698 T
(This competition sets a certain baseline constraint: people need to be able to use DylanW) 72 670.27 T
(orks at) 498.97 670.27 T
(least as ef) 72 656.27 T
(fectively as expert users now use V) 119.1 656.27 T
(isual C++ or V) 288.34 656.27 T
(isual Basic. Dylan applications need) 359.48 656.27 T
(to integrate at least as well as applications written using those tools.) 72 642.27 T
1 F
(4.1.2) 72 608.54 T
(Legacy Softwar) 105 608.54 T
(e) 185.1 608.54 T
0 F
-0.16 (Some or) 72 580.82 P
-0.16 (ganizations have [vast] amounts of legacy software. Do we intend to address such legacy) 111.96 580.82 P
(code? W) 72 566.82 T
(ill DylanW) 113.83 566.82 T
(orks directly address the needs of people who have a huge old system that) 166.54 566.82 T
-0.28 (they want to convert to Dylan? What if the old system is written in C/C++? What if it is written in) 72 552.82 P
-0.11 (Lisp? What if they just want to extend a legacy system? Is it enough to use FFI to interface to old) 72 538.82 P
-0.22 (code, or will there be a requirement that the tools supplied by DylanW) 72 524.82 P
-0.22 (orks can be turned loose on) 406.68 524.82 P
(legacy code?) 72 510.82 T
1 14 Q
(4.2  Users) 72 475.76 T
0 12 Q
(In the \322T) 72 447.36 T
(ypes of Users\323 section on page) 114.48 447.36 T
(1) 265.78 447.36 T
(1 and \322Or) 271.33 447.36 T
(ganizations\323 section on page) 318.43 447.36 T
(14 we list types) 459.07 447.36 T
-0.4 (of users and types of or) 72 433.36 P
-0.4 (ganizational contexts \050limited to team sizes at this point\051. T) 182.07 433.36 P
-0.4 (o achieve broad) 462.24 433.36 P
(appeal we will have to assume that the users are not \322high end\323 programmers with experience) 72 419.36 T
(with dynamic functional languages. W) 72 405.36 T
(e have to \322enable\323 programmers with various skill levels.) 256.68 405.36 T
(T) 72 391.36 T
(o address the needs of those users we need to provide inter) 78.49 391.36 T
(grated tools \050GUI, DB access\051 and) 359.88 391.36 T
(very graphical and integrated and intuitive environment.) 72 377.36 T
(W) 72 349.64 T
(e will not be able to address the problem of lar) 82.37 349.64 T
(ge project management in the \336rst release. Our) 305.45 349.64 T
(database based environment will provide some support for team programming for teams of 2-5) 72 335.64 T
(people.) 72 321.64 T
1 14 Q
(4.3  Applications) 72 286.58 T
0 12 Q
(In the \322Applications\323 section on page) 72 258.18 T
(15 we list categories of applications which DylanW) 255.3 258.18 T
(orks) 502.63 258.18 T
(might be used for) 72 244.18 T
(. The custom application market of \336nancial and traditional MIS applications is) 155.66 244.18 T
(very attractive and Dylan is well suited for it. W) 72 230.18 T
(e want to levarage the dynamic nature of the lan-) 303 230.18 T
(guage itself and the incremental style of development in our environment. The programmers in) 72 216.18 T
(those or) 72 202.18 T
(ganizations \336t the model described above. Interoperability will be a strong point in this) 110.11 202.18 T
(market when competing with Smalltalk. In future releases we would have to provide support for) 72 188.18 T
(lar) 72 174.18 T
(ge scale project development.) 84.44 174.18 T
1 16 Q
(5.  Featur) 72 131.79 T
(e Space) 137.92 131.79 T
1 14 Q
(5.1  Base Requir) 72 95.39 T
(ements) 169.75 95.39 T
0 12 Q
(T) 72 67 T
(o get into the market at all, we need to perform well in the following areas:) 78.49 67 T
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Requirements) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(8) 536 42.62 T
1 12 Q
(\245) 85.5 712 T
0 F
(Dylan has to feel like a true, general purpose programming language.) 99 712 T
1 F
(\245) 85.5 691.41 T
0 F
(Delivered applications must have a suitably small footprint.) 99 691.41 T
1 F
(\245) 85.5 670.82 T
0 F
-0.26 (Delivered applications should have naturally good performance. The programmer shouldn\325t) 99 670.82 P
(be required to recode any part of an application in C to get acceptable performance.) 99 656.82 T
1 F
(\245) 85.5 636.23 T
0 F
-0.4 (Ability to deliver linkable libraries that can be integrated with other libraries written in other) 99 636.23 P
(languages \050C, C++, Visual Basic\051 to form an application.) 99 622.23 T
1 F
(\245) 85.5 601.64 T
0 F
(We need to support the creation of OCX\325s.) 99 601.64 T
1 F
(\245) 85.5 581.05 T
0 F
-0.14 (Dylan applications need to be as indistinguishable from applications written in standard lan-) 99 581.05 P
(guages like Visual Basic and Visual C++ from the standpoint of end-users and other pro-) 99 567.05 T
(grams that might communicate with them.) 99 553.05 T
1 F
(\245) 85.5 532.45 T
0 F
-0.26 (Availability, either in Dylan or through other languages, of a rich set of libraries and compo-) 99 532.45 P
(nents, including UI, graphics, database access, etc.) 99 518.45 T
1 F
(\245) 85.5 497.86 T
0 F
(Must support both mouse and keyboard for majority of operations.) 99 497.86 T
1 F
(\245) 85.5 477.27 T
0 F
(Reliability.) 99 477.27 T
(In order to really compete, we need to do exceptionally well in the following areas:) 72 450.68 T
1 F
(\245) 85.5 430.09 T
0 F
(Powerful, productive programming environment for developing complex systems.) 99 430.09 T
1 F
(\245) 85.5 409.5 T
0 F
(Support for both small and efficient applications, and for large complex systems.) 99 409.5 T
1 F
(\245) 85.5 388.91 T
0 F
(Dynamic language that supports true incremental development.) 99 388.91 T
1 F
(\245) 85.5 368.32 T
0 F
(Automatic memory management.) 99 368.32 T
1 F
(\245) 85.5 347.73 T
0 F
(Flexible, customizable programming environment which empowers an experienced user.) 99 347.73 T
1 F
(\245) 85.5 327.14 T
0 F
(Easy to learn environment which, with the on-line help, allows a novice user to be produc-) 99 327.14 T
(tive after even a single day. Inspires confidence in user abilities from the beginning.) 99 313.14 T
1 F
(\245) 85.5 292.55 T
0 F
(Fun to use \050interesting, unusual\051.) 99 292.55 T
(It is also necessary to do the following well, but it probably suf) 72 265.96 T
(\336ces to interface to of) 374.76 265.96 T
(f-the-shelf) 479.18 265.96 T
(tools that provide this functionality:) 72 251.96 T
1 F
(\245) 85.5 231.36 T
0 F
(GUI builder.) 99 231.36 T
1 F
(\245) 85.5 210.77 T
0 F
(Mail reader.) 99 210.77 T
1 14 Q
(5.2  Functionality vs. Inter) 72 176.85 T
(operability) 229.64 176.85 T
0 12 Q
-0.41 (There is a tension between being \322standard\323 and breaking new ground. That is, in order to achieve) 72 149.59 P
(a high level of functionality) 72 135.59 T
(, a piece of software may be perceived as non-standard or even less) 204.54 135.59 T
(than fully interoperable. This \322functionality) 72 121.59 T
2 F
(vs) 284.64 121.59 T
0 F
(. interoperability\323 trade-of) 294.64 121.59 T
(f needs to be considered) 420.72 121.59 T
(carefully) 72 107.59 T
(.) 113.87 107.59 T
-0.31 (W) 72 81 P
-0.31 (e believe there are three goals in the area of functionality and interoperability; these goals apply) 82.37 81 P
(both to DylanW) 72 67 T
(orks and to software built using DylanW) 148.37 67 T
(orks, although the exactly what the) 342.72 67 T
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Requirements) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(9) 536 42.62 T
0 12 Q
(requirements are for meeting the goals may be dif) 72 712 T
(ferent for DylanW) 311.06 712 T
(orks and for Dylan compo-) 398.74 712 T
(nents. The goals are:) 72 698 T
1 F
(\245) 85.5 675.36 T
0 F
(Achieving a minimum level of functionality and a minimum level interoperability. These) 99 675.36 T
(cannot be traded off against each other.) 99 661.36 T
1 F
(\245) 85.5 638.73 T
0 F
(Achieving additional functionality.) 99 638.73 T
1 F
(\245) 85.5 616.09 T
0 F
(Achieving additional interoperability.) 99 616.09 T
(Failure to meet the minimum level of functionality and interoperability is a \322killer\323 for both) 72 587.46 T
(DylanW) 72 573.46 T
(orks and Dylan components. What needs to be done is to de\336ne the minimum levels for) 111.7 573.46 T
(both of these goals, both for DylanW) 72 559.46 T
(orks and for Dylan components. In contrast, the second and) 249.35 559.46 T
(third goals may be traded of) 72 545.46 T
(f against each other) 206.76 545.46 T
(, and the trade-of) 299.92 545.46 T
(fs may vary considerably from) 381.67 545.46 T
-0.33 (one component to another) 72 531.45 P
-0.33 (. In particular) 195.32 531.45 P
-0.33 (, the trade-of) 259.15 531.45 P
-0.33 (f may be much dif) 319.91 531.45 P
-0.33 (ferent for DylanW) 406.34 531.45 P
-0.33 (orks than) 493.34 531.45 P
(it is for any components produced by DylanW) 72 517.45 T
(orks.) 293.34 517.45 T
-0.33 (Note well that the interoperability requirement might put some limitations on the functionality we) 72 488.82 P
(can deliver) 72 474.82 T
(. However) 124.32 474.82 T
(, the minimum levels of both must be met, and the remaining question is,) 173.82 474.82 T
(how much can we compromise additional functionality to achieve additional interoperability \050or) 72 460.82 T
(vice-versa\051? These compromises might be driven both by available resources, and by technical) 72 446.82 T
(con\337icts between functionality and interoperability) 72 432.82 T
(.) 316.52 432.82 T
1 F
(5.2.1  Requir) 72 398.18 T
(ements for DylanW) 137.78 398.18 T
(orks) 237.11 398.18 T
0 F
(Ideally) 72 369.55 T
(, DylanW) 104.54 369.55 T
(orks should be designed in a modular fashion so that programmers can use the) 150.24 369.55 T
(tools they are used to. There are compromises to be made here. On the one hand, our own tools) 72 355.55 T
(will have better access to the information captured by the environment, and as such may provide) 72 341.55 T
(better functionality) 72 327.55 T
(. Thus, integrating with third party tools may mean some degradation of func-) 162.88 327.55 T
(tionality) 72 313.55 T
(. On the other hand, there are some standard tools that people become very attached to;) 111.23 313.55 T
(allowing integration with these tools can provide substantial bene\336t to DylanW) 72 299.55 T
(orks users.) 451.68 299.55 T
(T) 72 270.91 T
(o support \322external\323 tools, we will need to have a solid, published protocol that describes how) 78.49 270.91 T
-0.2 (the DylanW) 72 256.91 P
-0.2 (orks tools communicate with each other) 129.16 256.91 P
-0.2 (. This would allow us, and others, to integrate) 319.14 256.91 P
(external tools with DylanW) 72 242.91 T
(orks. The protocol should be designed to enable graceful degradation) 204.02 242.91 T
(if external tools are not as functional as they might be. But it must be remembered that this) 72 228.91 T
(approach can be quite costly to us in terms of the amount of design, implementation, and docu-) 72 214.91 T
(mentation work we have to do. It is more work still if we ourselves do the work of \322plugging in\323) 72 200.91 T
(a lot of external tools.) 72 186.91 T
(It is certainly the case that we do not have the resources to compete with every potentially useful) 72 158.27 T
(tool. But some third party tools will provide more functionality than we could deliver directly) 72 144.27 T
(ourselves. In particular) 72 130.27 T
(, a GUI builder is one tool that we can productively integrate with.) 181.82 130.27 T
1 F
(5.2.2  Requir) 72 95.64 T
(ements for Dylan Applications) 137.78 95.64 T
0 F
(1. W) 72 67 T
(e must be able to interoperate with other components on equal terms.) 94.37 67 T
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Requirements) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(10) 532 42.62 T
0 12 Q
(W) 72 712 T
(e want to be able to make Dylan components that can be used with other components which) 82.37 712 T
(may or may not be written in Dylan. In no sense can we make any assumptions that the Dylan) 72 698 T
(components are \322in char) 72 684 T
(ge\323 of any operating system resources \050such as memory) 188.75 684 T
(, threads, event) 455.9 684 T
(queues, etc.\051. Equally) 72 670 T
(, we cannot assume that Dylan components get control before other compo-) 174.86 670 T
-0.35 (nents, since Dylan may be called from other components. W) 72 656 P
-0.35 (e cannot expect the other components) 358.15 656 P
(to be recompiled or relinked. Nor can we expect to limit their use of OS API calls.) 72 642 T
(2. W) 72 614.94 T
(e must not prevent the sharing of operating system resources.) 94.37 614.94 T
-0.26 (W) 72 587.88 P
-0.26 (e should not make any assumptions that operating system resources might be limited by compo-) 82.37 587.88 P
-0.19 (nent boundaries. For example, any component can create a thread which may then execute within) 72 573.88 P
(other components. Threads created in Dylan must be usable by foreign components and vice-) 72 559.88 T
(versa.) 72 545.88 T
(Again, there is a trade-of) 72 518.81 T
(f, this time involving ef) 191.41 518.81 T
(\336ciency as well. W) 304.2 518.81 T
(e to produce applications that) 395.22 518.81 T
(are interoperable, but they also need to operate ef) 72 504.81 T
(\336ciently) 308.71 504.81 T
(. On the one hand, applications will be) 347.27 504.81 T
-0.14 (judged in lar) 72 490.81 P
-0.14 (ge part based on how well they \322\336t in\323. On the other hand, if the applications happen) 132.16 490.81 P
(to work poorly because some part of a Dylan library is slow or inef) 72 476.81 T
(\336cient, then the application) 394.06 476.81 T
(will still judged un\336t.) 72 462.81 T
1 F
(5.2.3  Speci\336c Issues) 72 429.75 T
0 F
(Here are some speci\336c places where we need to trade of) 72 402.69 T
(f interoperability with functionality and) 341.02 402.69 T
(ef) 72 388.69 T
(\336ciency:) 81.11 388.69 T
1 F
(\245) 85.5 367.62 T
0 F
(Use of local window system API \050such as MFC\051) 99 367.62 T
2 F
(vs) 334.64 367.62 T
0 F
(. a higher level UIMS.) 344.64 367.62 T
1 F
(\245) 85.5 346.56 T
0 F
(In general, use of local API) 99 346.56 T
2 F
(vs) 233.96 346.56 T
0 F
(. more portable Dylan bindings to various bits of useful func-) 243.96 346.56 T
(tionality.) 99 332.56 T
1 F
(\245) 85.5 311.5 T
0 F
(Threads) 99 311.5 T
2 F
(vs) 140.65 311.5 T
0 F
(. implementation of the memory management module.) 150.65 311.5 T
1 F
(\245) 85.5 290.44 T
0 F
(The FFI and Creole in general. We need to integrate smoothly with C and C++ for call-in,) 99 290.44 T
(call-out, subclassing C++ in Dylan, and maybe even subclassing Dylan in C++.) 99 276.44 T
1 F
(\245) 85.5 255.38 T
0 F
(OpenDoc and Ole, and how they fit in with the UIMS.) 99 255.38 T
1 F
(\245) 85.5 234.31 T
0 F
(CORBA/SOM, and COM.) 99 234.31 T
1 F
(\245) 85.5 213.25 T
0 F
(We need to be able to produce OCX\325s.) 99 213.25 T
1 F
(\245) 85.5 192.19 T
0 F
(We need to be able to produce DLL\325s.) 99 192.19 T
1 F
(\245) 85.5 171.12 T
0 F
(DylanWorks should integrate with a good, off-the-shelf GUI builder.) 99 171.12 T
1 14 Q
(5.3  Portability) 72 136.73 T
0 12 Q
(If we can do a good job at it, a good portability solution could well be a strong selling point of) 72 109 T
(Dylan. It is not the case that portability must necessarily compromise integration, but we need to) 72 95 T
(be very careful that the quest for portability does not compromise interoperability) 72 81 T
(, especially in) 462.83 81 T
(the area of the user interface of delivered applications.) 72 67 T
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Requirements) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(1) 532.3 42.62 T
(1) 536 42.62 T
0 12 Q
-0.06 (Note that we again have to concern ourselves with the portability of both DylanW) 72 712 P
-0.06 (orks and Dylan) 463.86 712 P
(components. These need to be considered separately) 72 698 T
(.) 322.82 698 T
(W) 72 671.92 T
(e think that making DylanW) 82.37 671.92 T
(orks as portable as possible may be a good move in the long run.) 218.06 671.92 T
-0.06 (W) 72 657.92 P
-0.06 (e plan to try to make DylanW) 82.37 657.92 P
-0.06 (orks portable, but the highest priority is the quality of the product) 223.71 657.92 P
(on the W) 72 643.92 T
(indows platform.) 115.51 643.92 T
(W) 72 617.85 T
(e also plan to make Dylan applications as portable as possible. The principle way of doing this) 82.37 617.85 T
(is to ensure that we develop API\325) 72 603.85 T
(s for libraries that will themselves be portable. Again, it is not) 231.31 603.85 T
(the highest priority to port these libraries to every conceivable platform, but it is a priority to) 72 589.85 T
-0.04 (cooperate with other or) 72 575.85 P
-0.04 (ganizations who might do this. That is, it is an explicit goal to standardize) 183.29 575.85 P
(on core libraries across dif) 72 561.85 T
(ferent Dylan implementations, such as Apple\325) 199.08 561.85 T
(s and CMU\325) 419.05 561.85 T
(s.) 477.72 561.85 T
1 14 Q
(5.4  Style) 72 528.44 T
0 12 Q
(Software environments can range in style from the mostly text-based \050Gnu Emacs and gcc\051,) 72 501.69 T
(through hybrid environments \050like LispW) 72 487.69 T
(orks or V) 271.69 487.69 T
(isual Basic\051, to more pure visual languages) 316.3 487.69 T
(\050like Prograph\051.) 72 473.69 T
(W) 72 447.61 T
(e intend to make DylanW) 82.37 447.61 T
(orks be a hybrid environment. Many of the browsing tools will be) 204.72 447.61 T
-0.14 (very graphical in nature, but will often \322bottom out\323 in a textual source code editor) 72 433.61 P
-0.14 (. There will be) 467.59 433.61 P
(a graphical GUI builder \050either bought or built\051, but when the GUI is connected to the rest of the) 72 419.61 T
(application, it will probably also be done by editing program source text. The key here is to use) 72 405.61 T
(the style appropriate to the task.) 72 391.61 T
1 14 Q
(5.5  User Interface Substrate) 72 358.2 T
0 12 Q
-0.46 (W) 72 331.46 P
-0.46 (e are presently planning a \322three pronged\323 strategy for dealing with the User Interface substrate.) 82.37 331.46 P
(This is described in more detail in the UI Substrate white paper) 72 305.39 T
(, but the summary is this:) 375.14 305.39 T
1 F
(\245) 85.5 285.31 T
0 F
(There will be a non-portable low-level Dylan binding to the native UI tools, for instance, a) 99 285.31 T
(binding to the Win32 UI tools.) 99 271.31 T
1 F
(\245) 85.5 251.23 T
0 F
-0.04 (There will a portable, higher-level layer built on top of this. This layer corresponds roughly) 99 251.23 P
(to CAPI, the Silica layer of CLIM, or to Fresco, and implements a fairly traditional events) 99 237.23 T
(and gadgets toolkit \050although it will also support OpenDoc-like embedding\051.) 99 223.23 T
1 F
(\245) 85.5 203.15 T
0 F
-0.09 (There will be a portable, very high level layer built on top of that. This layer corresponds to) 99 203.15 P
(the presentation-based style of CLIM.) 99 189.15 T
-0.13 (Interfacing to non-standard, third-party widgets will be provided at the lowest level of the UI sub-) 72 163.08 P
-0.09 (strate. If some of these widgets become widely used, then they can be supported at the higher lay-) 72 149.08 P
(ers of the UI substrate as well.) 72 135.08 T
-0.11 (The standard GUI toolkits typically provide only a base UI functionality) 72 109 P
-0.11 (. Some applications need) 417.44 109 P
(to develop custom interactive user interface elements, such as graphers. Having a powerful tool) 72 95 T
(\050CLIM-like\051 that accommodates this need and seamlessly integrates with the native toolkits) 72 81 T
(would be a strong selling point of our environment.) 72 67 T
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Requirements) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(12) 532 42.62 T
1 12 Q
(5.5.1  GUI Builder) 72 712 T
0 F
(There is also the issue of a GUI builder) 72 684.53 T
(. Most people are used to building GUI\325) 259.97 684.53 T
(s in a composi-) 451.28 684.53 T
(tional, modular fashion. There are good reasons for people to use GUI builders. Some interfaces) 72 670.53 T
(can be created faster and in an interactive way) 72 656.53 T
(. This is often better than doing the same thing pro-) 293.14 656.53 T
-0.42 (grammatically) 72 642.53 P
-0.42 (,and is almost always better than trying to do \322programming\323 by hacking resources.) 140.54 642.53 P
(It is also the case that non-programmers can design a UI using a GUI builder) 72 628.53 T
(.) 439.93 628.53 T
-0.18 (For the initial release of DylanW) 72 601.06 P
-0.18 (orks, we plan to interface our own UI substrate with one or more) 228.43 601.06 P
-0.33 (GUI tool available on the market, since building our own GUI builder is not trivial. An open issue) 72 587.06 P
(here is how to interface the output of a third-party GUI builder to the high-level layers of the UI) 72 573.06 T
(substrate \050for example, CLIM commands\051.) 72 559.06 T
(Later releases of DylanW) 72 531.59 T
(orks may have a GUI builder written by us that supports building inter-) 193.99 531.59 T
(faces that use the higher level functionality provided by CLIM.) 72 517.59 T
1 14 Q
(5.6  Editors) 72 482.78 T
0 12 Q
(The editor for DylanW) 72 454.65 T
(orks is a dif) 181.34 454.65 T
(\336cult issue. On the one hand, it is a very important tool for a) 237.46 454.65 T
(developer and frequently re\337ects strong personal preferences. On the other hand, it is a central) 72 440.65 T
(part of any development environment.) 72 426.65 T
(W) 72 399.18 T
(e would like to add some sophisticated features to our editor) 82.37 399.18 T
(, but unfortunately there are no) 371.18 399.18 T
(standard ways to interface with most editors. The OpenDoc/Ole framework may eventually be) 72 385.18 T
-0.27 (suf) 72 371.18 P
-0.27 (\336cient, but we do not know when \050and we are not sure\051. So, although it may be bene\336cial to do) 86.45 371.18 P
(so, it is not clear how well we can interface with third-party editors.) 72 357.18 T
-0.35 (Even assuming we implement our own editor) 72 329.71 P
-0.35 (, we do plan to provide dif) 287.41 329.71 P
-0.35 (ferent sets of key bindings) 412.09 329.71 P
(to accommodate users of dif) 72 315.71 T
(ferent editors.) 207.76 315.71 T
1 14 Q
(5.7  Other functionality ar) 72 280.9 T
(eas) 228.46 280.9 T
0 12 Q
(There are other places where functionality versus interoperability \050and often, buy versus build\051) 72 252.77 T
(comes up. These issues are addressed in the other white papers.) 72 238.77 T
1 F
(\245) 85.5 217.29 T
0 F
(Source version control and system configuration management tools.) 99 217.29 T
1 F
(\245) 85.5 195.82 T
0 F
(Debuggers.) 99 195.82 T
1 F
(\245) 85.5 174.35 T
0 F
(On-line help \050that is, we should use Microsoft Help system\051.) 99 174.35 T
1 F
(\245) 85.5 152.88 T
0 F
(Ability to use local resource model.) 99 152.88 T
1 F
(\245) 85.5 131.41 T
0 F
(Relational database access library.) 99 131.41 T
1 F
(\245) 85.5 109.94 T
0 F
(Object-oriented database access library.) 99 109.94 T
1 F
(\245) 85.5 88.47 T
0 F
(3d graphics, such as Open GL.) 99 88.47 T
1 F
(\245) 85.5 67 T
0 F
(Multi-media, such as QuickTime.) 99 67 T
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Requirements) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(13) 532 42.62 T
1 16 Q
(Appendix A.  T) 72 709.33 T
(ypes of Users) 175.73 709.33 T
0 12 Q
(When describing potential DylanW) 72 681.35 T
(orks users, we considered the following questions:) 241.34 681.35 T
1 F
(\245) 85.5 660.69 T
0 F
(What programming languages and environments have they used \050C/C++, Visual Basic,) 99 660.69 T
(Lisp, Smalltalk\051? Since Dylan is new, we can assume that most such users don\325t already) 99 646.69 T
(know Dylan.) 99 632.69 T
1 F
(\245) 85.5 612.04 T
0 F
(What do they know about object-oriented programming?) 99 612.04 T
1 F
(\245) 85.5 591.39 T
0 F
(What operating systems have they used? On what platforms?) 99 591.39 T
1 F
(\245) 85.5 570.73 T
0 F
(How many years of programming experience?) 99 570.73 T
1 F
(\245) 85.5 550.08 T
0 F
(What is their capacity to understanding large complex systems?) 99 550.08 T
1 14 Q
(A.1  High-school Student) 72 516.09 T
1 12 Q
(\245) 85.5 494.77 T
0 F
(High-schools students are not likely to know much of anything about writing software.) 99 494.77 T
1 F
(\245) 85.5 474.11 T
0 F
(Shorter attention span than other types of users.) 99 474.11 T
1 F
(\245) 85.5 453.46 T
0 F
(Will not be writing complex software.) 99 453.46 T
1 F
(\245) 85.5 432.81 T
0 F
(Would like DylanWorks to be fun to use.) 99 432.81 T
1 F
(\245) 85.5 412.15 T
0 F
(Would like to do things with a flashy user interfaces and multi-media.) 99 412.15 T
1 14 Q
(A.2  College or Grad Student) 72 378.17 T
1 12 Q
(\245) 85.5 356.85 T
0 F
(Will probably already know one or two programming languages.) 99 356.85 T
1 F
(\245) 85.5 336.19 T
0 F
(Short attention span due to pressure from other courses.) 99 336.19 T
1 F
(\245) 85.5 315.54 T
0 F
(Will not write complex software, unless it\325s a thesis.) 99 315.54 T
1 14 Q
(A.3  Novice Pr) 72 281.55 T
(ofessional Pr) 158.06 281.55 T
(ogrammer \050fr) 234.41 281.55 T
(esh out of college with CS degr) 316.17 281.55 T
(ee\051) 499.46 281.55 T
1 12 Q
(\245) 85.5 260.23 T
0 F
(Knows algorithms and C, but not Dylan or advanced programming environments.) 99 260.23 T
1 F
(\245) 85.5 239.58 T
0 F
(Does not know real-world software engineering techniques. Might or might not know any-) 99 239.58 T
(thing about object-oriented programming.) 99 225.58 T
1 F
(\245) 85.5 204.92 T
0 F
(Will be starting to write complex systems.) 99 204.92 T
1 14 Q
(A.4  Experienced Basement Hacker) 72 170.94 T
1 12 Q
(\245) 85.5 149.62 T
0 F
(Probably knows C/C++ and Basic) 99 149.62 T
1 F
(\245) 85.5 128.96 T
0 F
(Has experience mostly on Windows or the Mac.) 99 128.96 T
1 F
(\245) 85.5 108.31 T
0 F
(Has probably used something like Visual C++ or Visual Basic.) 99 108.31 T
1 F
(\245) 85.5 87.65 T
0 F
(Works alone.) 99 87.65 T
1 F
(\245) 85.5 67 T
0 F
(Strongly motivated, probably willing to learn new things.) 99 67 T
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Requirements) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(14) 532 42.62 T
1 12 Q
(\245) 85.5 712 T
0 F
(Doesn\325t have much money to spend.) 99 712 T
1 F
(\245) 85.5 691.46 T
0 F
(Small applications, often distributed as shareware.) 99 691.46 T
1 F
(\245) 85.5 670.93 T
0 F
(Definitely wants the language and environment to be fun to use.) 99 670.93 T
1 F
(\245) 85.5 650.39 T
0 F
(Probably wants to be able to write cool-looking programs.) 99 650.39 T
1 14 Q
(A.5  Experienced Pr) 72 616.52 T
(ofessional Developer \050C/C++\051) 192.29 616.52 T
1 12 Q
(\245) 85.5 595.32 T
0 F
(Knows C/C++, but unfamiliar with dynamic languages.) 99 595.32 T
1 F
(\245) 85.5 574.79 T
0 F
(Significant fraction probably have a Unix background.) 99 574.79 T
1 F
(\245) 85.5 554.25 T
0 F
(Older such developers may have never used any real programming environment, but) 99 554.25 T
(younger ones probably will have.) 99 540.25 T
1 F
(\245) 85.5 519.71 T
0 F
(Works with teams. Size of team can vary widely.) 99 519.71 T
1 F
(\245) 85.5 499.18 T
0 F
(Not willing to spend lots of time learning, especially completely new ideas.) 99 499.18 T
1 F
(\245) 85.5 478.64 T
0 F
(Medium to large applications.) 99 478.64 T
1 14 Q
(A.6  Experienced Pr) 72 444.77 T
(ofessional Developer \050VB\051) 192.29 444.77 T
1 12 Q
(\245) 85.5 423.57 T
0 F
(Knows Visual Basic, but unfamiliar with dynamic languages.) 99 423.57 T
1 F
(\245) 85.5 403.04 T
0 F
(Small teams, or works alone?) 99 403.04 T
1 F
(\245) 85.5 382.5 T
0 F
(Maybe willing to spend some time learning new things.) 99 382.5 T
1 F
(\245) 85.5 361.96 T
0 F
(Small to medium applications?) 99 361.96 T
1 F
(\245) 85.5 341.43 T
0 F
(Used to simple languages and a very structured model of program development.) 99 341.43 T
1 14 Q
(A.7  Experienced Pr) 72 307.56 T
(ofessional Developer \050Smalltalk, Lisp\051) 192.29 307.56 T
1 12 Q
(\245) 85.5 286.36 T
0 F
(Knows object-oriented techniques and dynamic languages very well.) 99 286.36 T
1 F
(\245) 85.5 265.82 T
0 F
(Used to working with large software systems.) 99 265.82 T
1 F
(\245) 85.5 245.29 T
0 F
(Not necessarily good at delivering a tight, finished product.) 99 245.29 T
1 F
(\245) 85.5 224.75 T
0 F
(Works alone or in teams.) 99 224.75 T
1 F
(\245) 85.5 204.22 T
0 F
(Unemployed, hence receptive to new ideas.) 99 204.22 T
1 F
(\245) 85.5 183.68 T
0 F
(Wants the environment to be fun.) 99 183.68 T
1 14 Q
(A.8  Experienced Pr) 72 149.81 T
(ofessional Developer \050Cobol\051) 192.29 149.81 T
1 12 Q
(\245) 85.5 128.61 T
0 F
(Unfamiliar with object oriented techniques.) 99 128.61 T
1 F
(\245) 85.5 108.07 T
0 F
(Unfamiliar with GUI.) 99 108.07 T
1 F
(\245) 85.5 87.54 T
0 F
(Unfamiliar with dynamic programming environments.) 99 87.54 T
1 F
(\245) 85.5 67 T
0 F
(Has a lot of legacy code.) 99 67 T
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Requirements) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(15) 532 42.62 T
1 14 Q
(A.9  Engineering Pr) 72 710.67 T
(ofessional or Scientist \050Fortran\051) 190.75 710.67 T
1 12 Q
(\245) 85.5 689.88 T
0 F
(Unfamiliar with modern languages.) 99 689.88 T
1 F
(\245) 85.5 669.76 T
0 F
(Needs access to extensive, high-performance math libraries.) 99 669.76 T
1 F
(\245) 85.5 649.64 T
0 F
(May have a lot of legacy code.) 99 649.64 T
1 14 Q
(A.10  Domain Expert \050not a computer scientist\051) 72 616.19 T
1 12 Q
(\245) 85.5 595.4 T
0 F
(Spends a lot of time programming, but their real expertise and training is in some other) 99 595.4 T
(field.) 99 581.4 T
1 F
(\245) 85.5 561.28 T
0 F
(Works alone or in small teams.) 99 561.28 T
1 F
(\245) 85.5 541.16 T
0 F
(Needs to be able to build software that does a domain-specific task well.) 99 541.16 T
1 F
(\245) 85.5 521.04 T
0 F
(Needs to be able to program \322experimentally\323.) 99 521.04 T
1 F
(\245) 85.5 500.92 T
0 F
(Software is often highly complex, since it reflects some complex real-world structure.) 99 500.92 T
1 14 Q
(A.1) 72 467.47 T
(1  Commer) 91.84 467.47 T
(cial pr) 158.45 467.47 T
(oject manager) 196.7 467.47 T
1 12 Q
(\245) 85.5 446.68 T
0 F
(Very conservative.) 99 446.68 T
1 F
(\245) 85.5 426.56 T
0 F
(Risk averse.) 99 426.56 T
1 F
(\245) 85.5 406.44 T
0 F
-0.1 (Concern for software maintenance, customer support both from Harlequin, and how he will) 99 406.44 P
(support his own customers.) 99 392.44 T
1 16 Q
(Appendix B.  Organizations) 72 351.65 T
0 12 Q
-0.2 (In the following sections, we describe the needs that are of particular importance to a kind of user) 72 324.2 P
(or or) 72 310.2 T
(ganization.) 94.78 310.2 T
1 14 Q
(B.1  Single User) 72 276.75 T
1 12 Q
(\245) 85.5 255.96 T
0 F
(Needs tools that highly leverage an individual.) 99 255.96 T
1 F
(\245) 85.5 235.84 T
0 F
(No need for groupware.) 99 235.84 T
1 F
(\245) 85.5 215.72 T
0 F
(Will need organizational tools to help maintain software over time.) 99 215.72 T
1 14 Q
(B.2  Classr) 72 182.27 T
(oom \050pr) 136.69 182.27 T
(ogramming\051) 184.27 182.27 T
1 12 Q
(\245) 85.5 161.48 T
0 F
(Good on-line help and tutorial.) 99 161.48 T
1 F
(\245) 85.5 141.36 T
0 F
(Novice-friendly environment.) 99 141.36 T
1 F
(\245) 85.5 121.24 T
0 F
(Remote execution and debugging \050for the teacher to control student\325s workstation\051.) 99 121.24 T
1 14 Q
(B.3  Small T) 72 87.79 T
(eam \0502-5\051) 144.62 87.79 T
1 12 Q
(\245) 85.5 67 T
0 F
(Needs tools that highly leverage an individual.) 99 67 T
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Requirements) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(16) 532 42.62 T
1 12 Q
(\245) 85.5 712 T
0 F
(Some need for groupware.) 99 712 T
1 14 Q
(B.4  Medium T) 72 678.37 T
(eam \0505-20\051) 160.94 678.37 T
1 12 Q
(\245) 85.5 657.41 T
0 F
(Groupware is more important than highest possible productivity for individuals.) 99 657.41 T
1 14 Q
(B.5  Large T) 72 623.78 T
(eam \05020-100\051) 146.16 623.78 T
0 12 Q
(Note: Release 1 of Dylanworks will not support lar) 72 596.82 T
(ge teams.) 317.09 596.82 T
1 F
(\245) 85.5 576.52 T
0 F
(Groupware is the most important consideration.) 99 576.52 T
1 F
(\245) 85.5 556.22 T
0 F
(Support for formal procedures: baseline and release builds.) 99 556.22 T
1 F
(\245) 85.5 535.93 T
0 F
(ISO-9000 support?) 99 535.93 T
1 16 Q
(Appendix C.  Applications) 72 494.96 T
1 14 Q
(C.1  Custom In-house Corporate Applications) 72 460 T
1 12 Q
(Financial) 72 430.04 T
(\245) 85.5 409.74 T
0 F
(Might be \322soft\323 real time.) 99 409.74 T
1 F
(\245) 85.5 389.45 T
0 F
(PC and UNIX.) 99 389.45 T
1 F
(\245) 85.5 369.15 T
0 F
(Numerical.) 99 369.15 T
1 F
(\245) 85.5 348.85 T
0 F
(Relational and OODB access.) 99 348.85 T
1 F
(\245) 85.5 328.56 T
0 F
(Presentational graphics \050pie charts\051.) 99 328.56 T
1 F
(\245) 85.5 308.26 T
0 F
(Constantly ongoing development to meet changing requirements.) 99 308.26 T
1 F
(Engineering) 72 278.96 T
(\245) 85.5 258.67 T
0 F
(Might be \322hard\323 real time.) 99 258.67 T
1 F
(\245) 85.5 238.37 T
0 F
(UNIX.) 99 238.37 T
1 F
(\245) 85.5 218.07 T
0 F
(Might be numerical.) 99 218.07 T
1 F
(\245) 85.5 197.78 T
0 F
(3-d graphics \050CAD systems and visualization\051.) 99 197.78 T
1 F
(General MIS) 72 168.48 T
(\245) 85.5 148.18 T
0 F
(PC plus server \050mainframe, too?\051.) 99 148.18 T
1 F
(\245) 85.5 127.89 T
0 F
(Relational DB access.) 99 127.89 T
1 F
(\245) 85.5 107.59 T
0 F
(Form filling interfaces.) 99 107.59 T
1 F
(\245) 85.5 87.3 T
0 F
(Printing) 99 87.3 T
1 F
(\245) 85.5 67 T
0 F
(Software is frequently modified to meet new specifications.) 99 67 T
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Requirements) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(17) 532 42.62 T
1 14 Q
(C.2  Contract Jobs) 72 710.67 T
1 12 Q
(\245) 85.5 689.52 T
0 F
(Integration) 99 689.52 T
1 F
(\245) 85.5 669.04 T
0 F
(Networking) 99 669.04 T
1 14 Q
(C.3  Shrink-wrapped Applications) 72 635.22 T
0 12 Q
(All of these applications require the following:) 72 608.07 T
1 F
(\245) 85.5 587.59 T
0 F
-0.18 (Customer support utilities: patching, bug reporting, bug tracking and remote debugging util-) 99 587.59 P
(ities.) 99 573.59 T
1 F
(\245) 85.5 553.11 T
0 F
(Communication paths between end user and the software vendor.) 99 553.11 T
1 F
(\245) 85.5 532.63 T
0 F
(Portability \050Macs and PCs\051.) 99 532.63 T
1 F
(\245) 85.5 512.15 T
0 F
(Maintenance tools for keeping customers up-to-date.) 99 512.15 T
1 F
(Games) 72 482.67 T
(\245) 85.5 462.18 T
0 F
(Fast.) 99 462.18 T
1 F
(\245) 85.5 441.7 T
0 F
(Small \050more or less\051.) 99 441.7 T
1 F
(\245) 85.5 421.22 T
0 F
(Multimedia, animation.) 99 421.22 T
1 F
(\245) 85.5 400.74 T
0 F
(Portability \050Macs and PCs\051.) 99 400.74 T
1 F
(Device Drivers/Embedded Controllers/ Low Level Tools) 72 371.26 T
(\245) 85.5 350.78 T
0 F
(Efficient access to low level OS functionality.) 99 350.78 T
1 F
(Complex Tools and Utilities \050data bases, programming environments, etc.\051) 72 321.3 T
0 F
(This kind of projects can often be characterized as complex systems that have evolving require-) 72 294.82 T
(ments because the problem itself is not well understood \050yet\051.) 72 280.82 T
1 F
(\245) 85.5 260.33 T
0 F
(Team development.) 99 260.33 T
1 F
(\245) 85.5 239.85 T
0 F
(Version control.) 99 239.85 T
1 F
(\245) 85.5 219.37 T
0 F
(System configuration management and build utilities.) 99 219.37 T
1 F
(\245) 85.5 198.89 T
0 F
(Fast compile times, incremental compilation and dynamic linking.) 99 198.89 T
1 F
(\245) 85.5 178.41 T
0 F
(Efficient compiled code in the final application.) 99 178.41 T
1 F
(\245) 85.5 157.93 T
0 F
(Portability?) 99 157.93 T
1 F
(\245) 85.5 137.45 T
0 F
(Support for browsing complex software structures is critical.) 99 137.45 T
1 F
(Others \050word processors, spreadsheets, etc.\051) 72 107.96 T
(\245) 85.5 87.48 T
0 F
(UI intensive.) 99 87.48 T
1 F
(\245) 85.5 67 T
0 F
(Portability \050Macs and PCs\051.) 99 67 T
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(DylanW) 72 42.62 T
(orks Requirements) 98.46 42.62 T
(November 1) 274.26 42.62 T
(1, 1994) 313.74 42.62 T
(18) 532 42.62 T
FMENDPAGE
%%EndPage: "18" 18
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 18
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Times-Italic
%%EOF
