%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            true def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 11 FMDOCUMENT
0 0 /Palatino-Italic FMFONTDEFINE
1 0 /Palatino-Bold FMFONTDEFINE
2 0 /Palatino-Roman FMFONTDEFINE
3 0 /Helvetica-Narrow-Bold FMFONTDEFINE
4 0 /Courier-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
108 81 540 117 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(1) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 513 504 648 R
7 X
V
108 620.45 504 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 620.45 504 648 R
7 X
0 0 0 1 0 0 0 K
V
108 641.14 270 641.14 2 L
3 H
2 Z
0 X
N
108 632.14 270 632.14 2 L
1 H
N
36 72 576 720 C
2 30 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Coding Style) 108 600.45 T
1 14 Q
(See ~dylan/doc/misc/style-guide.txt.) 135 533.12 T
108 126 486 432 R
7 X
V
3 16 Q
0 X
(1  Purpose of this document) 108 421.33 T
2 11 Q
(This document describes a coding style that the Dylan gr) 108 400.67 T
(oup r) 384.07 400.67 T
(ecommends.) 410.21 400.67 T
(Ther) 108 386.67 T
(e ar) 130.56 386.67 T
(e style some ar) 148.23 386.67 T
(eas of disagr) 219.88 386.67 T
(eement, and ther) 280.83 386.67 T
(e is still r) 362.62 386.67 T
(oom to change) 406 386.67 T
(this style guide. In some places the Dylan book gr) 108 372.67 T
(oup decided to use a dif) 349.48 372.67 T
(fer-) 466.31 372.67 T
(ent style, which is noted in this guide.) 108 358.67 T
(The topics in the book ar) 108 338.67 T
(e:) 227.83 338.67 T
(2:  \322Contr) 135 318.67 T
(oversial comments\323 on page 2) 182.19 318.67 T
(3:  \32280 columns law\323 on page 3) 135 304.67 T
(4:  \322Consistency\323 on page 3) 135 290.67 T
(5:  \322Naming\323 on page 4) 135 276.67 T
(6:  \322Dot notation\323 on page 4) 135 262.67 T
(7:  \322Symbols versus keywor) 135 248.67 T
(ds\323 on page 5) 269.93 248.67 T
(8:  \322End wor) 135 234.67 T
(ds\323 on page 5) 196.17 234.67 T
(9:  \322Semicolons\323 on page 5) 135 220.67 T
(10:  \322General indentation\323 on page 6) 135 206.67 T
(12:  \322Par) 135 192.67 T
(entheses\323 on page 6) 176.04 192.67 T
(13:  \322if then else\323 on page 7) 135 178.67 T
(14:  \322let\323 on page 7) 135 164.67 T
(15:  \322select and case\323 on page 8) 135 150.67 T
(16:  \322Macr) 135 136.67 T
(os\323 on page 9) 184.69 136.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Coding Style) 72 695.67 T
72 81 504 118 R
7 X
V
1 9 Q
0 X
(2) 72 101 T
0 F
(DRAFT) 473.99 101 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(17:  \322Assignments br) 153 640.67 T
(oken over two lines\323 on page 9) 253.97 640.67 T
(18:  \322De\336nitions br) 153 626.67 T
(oken over two lines\323 on page 9) 244.63 626.67 T
(19:  \322for loop\323 on page 9) 153 612.67 T
(20:  \322Local methods\323 on page 10) 153 598.67 T
(21:  \322Parameter lists \050style A\051\323 on page 1) 153 584.67 T
(1) 348.76 584.67 T
(22:  \322Return values \050style A\051\323 on page 1) 153 570.67 T
(1) 344.33 570.67 T
(23:  \322Parameters and r) 153 556.67 T
(eturn values, Dylan book style\323 on page 13) 260.86 556.67 T
(24:  \322Non generic function methods\323 on page 15) 153 542.67 T
(25:  \322Generic function de\336nitions\323 on page 15) 153 528.67 T
(26:  \322Class de\336nitions\323 on page 15) 153 514.67 T
3 16 Q
(2  Contr) 126 485.33 T
(o) 175.33 485.33 T
(ver) 183.1 485.33 T
(sial comments) 202.62 485.33 T
2 11 Q
(\245) 135 464.67 T
(r) 153 464.67 T
(eturn values indented two spaces like case \050pr) 157.15 464.67 T
(esent in this guide, but) 380.57 464.67 T
(not used in Dylan book style.\051) 153 450.67 T
(\245) 135 430.67 T
(#key indented two spaces like binary operators \050pr) 153 430.67 T
(esent in this guide,) 399.37 430.67 T
(but not used in Dylan book style.) 153 416.67 T
(\245) 135 396.67 T
(keith likes a shorter local methods style than jonathan is willing to) 153 396.67 T
(accept.) 153 382.67 T
(\245) 135 362.67 T
(scott thinks that matching de\336nition names \050e.g.,) 153 362.67 T
4 9.5 Q
(end class <bolt>) 392.51 362.67 T
2 11 Q
(\051) 483.71 362.67 T
(ar) 153 348.67 T
(e a bad idea because they ar) 162.65 348.67 T
(e har) 298.23 348.67 T
(d to maintain in the face of name) 322.3 348.67 T
(changes.) 153 334.67 T
(\245) 135 314.67 T
-0.13 (keith likes long case slot speci\336cations always, but jonathan is willing to) 153 314.67 P
(abbr) 153 300.67 T
(eviate in gr) 174.81 300.67 T
(oups.) 229.22 300.67 T
(\245) 135 280.67 T
(keith thinks its ok to have parameters on same line as function name) 153 280.67 T
-0.09 (with r) 153 266.67 P
-0.09 (eturn values on the next line \050but jonathan disagr) 182.16 266.67 P
-0.09 (ees\051. Dylan book) 420.48 266.67 P
(does not split a line between the parameter list and r) 153 252.67 T
(eturn values.) 407.86 252.67 T
(\245) 135 232.67 T
(haahr claims that ther) 153 232.67 T
(e is no space after function name in a function) 259.04 232.67 T
(de\336nition.  we need to chase this up. Dylan book has a space after func-) 153 218.67 T
(tion name in a function de\336nition.) 153 204.67 T
(\245) 135 184.67 T
(scott uses '%' pr) 153 184.67 T
(e\336xes on slot accessors that have short \050or "unquali\336ed") 229.78 184.67 T
(names\051 that ar) 153 170.67 T
(e not part of the exported API.  Dylan book does not do) 222.43 170.67 T
(this.) 153 156.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 675 540 702 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3) 465.41 695.67 T
(80 columns law) 479.66 695.67 T
108 82.17 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(3) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
2 11 Q
0 X
(\245) 117 640.67 T
-0.15 (6 character r) 135 640.67 P
-0.15 (ule seems like overkill \050but jonathan thinks that it does help) 194.67 640.67 P
(in practice but is willing to get rid of it to simplify the pr) 135 626.67 T
(etty printing) 408.56 626.67 T
(r) 135 612.67 T
(ules\051.) 139.26 612.67 T
(\245) 117 592.67 T
(_ is a weir) 135 592.67 T
(d notation, but does have pr) 183.91 592.67 T
(ecendent in syntax-case and pr) 320.92 592.67 T
(o-) 470.63 592.67 T
(log for dont car) 135 578.67 T
(e.  keith likes the r) 209.83 578.67 T
(eturn values to be named for better) 298.03 578.67 T
(documentation. Dylan book names r) 135 564.67 T
(eturn values.) 312.3 564.67 T
(\245) 117 544.67 T
(tucker disagr) 135 544.67 T
(ees with consistency r) 198.93 544.67 T
(ule.  he thinks that ther) 305.08 544.67 T
(e should be a) 417.2 544.67 T
(consistent style on wher) 135 530.67 T
(e you br) 252.15 530.67 T
(eak and how you indent, but he dis-) 291.9 530.67 T
(agr) 135 516.67 T
(ees that that means you have to br) 150.76 516.67 T
(eak ther) 316.87 516.67 T
(e on all the similar nearby) 355.91 516.67 T
(statements, even when they don't need it.) 135 502.67 T
3 16 Q
(3  80 columns la) 108 467.33 T
(w) 209.2 467.33 T
2 11 Q
(lines should not exceed 80 columns in length) 108 446.67 T
3 16 Q
(4  Consistenc) 108 411.33 T
(y) 193.2 411.33 T
2 11 Q
(Formatting style should be consistent) 108 390.67 T
-0.23 (A br) 108 370.67 P
-0.23 (oader pattern I tend to go for is consistency of indentation within a gr) 129.31 370.67 P
-0.23 (oup) 464.23 370.67 P
(of forms. If the shape of one or two forms in a gr) 108 356.67 T
(oup for) 343.1 356.67 T
(ce a long-form inden-) 378.92 356.67 T
(tation I'll often r) 108 342.67 T
(eformat the r) 186 342.67 T
(est to give them a consistent look. For example,) 248.99 342.67 T
(her) 108 328.67 T
(e is a sequence of) 123.82 328.67 T
4 9.5 Q
(let) 210.42 328.67 T
2 11 Q
( bindings.) 227.52 328.67 T
4 9 Q
(let abigmobynamewithabiginitialization) 108 308 T
(= 123456789 * 123456789 * 123456789 * 123456789;) 118.8 297 T
(let a-tiny-name) 108 278 T
(= 123456789;) 118.8 267 T
2 11 Q
(Her) 108 246.67 T
(e is another examples of a gr) 126.57 246.67 T
(oup, a bunch of generic function de\336nitions) 265.05 246.67 T
(forming a pr) 108 232.67 T
(otocol:) 169.2 232.67 T
4 9 Q
(//// Match protocol.) 108 212 T
(define generic match) 108 201 T
(\050pattern, fragment, more-patterns, more-fragments, env, fail\051) 118.8 190 T
(=> \050\051;) 453.6 190 T
(define generic match-empty) 108 171 T
(\050pattern, more-patterns, env, fail\051 => \050\051;) 118.8 160 T
(define generic folds-separator?) 108 141 T
(\050pattern\051 => \050\051;) 118.8 130 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Coding Style) 72 695.67 T
72 81 504 118 R
7 X
V
1 9 Q
0 X
(4) 72 101 T
0 F
(DRAFT) 473.99 101 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 16 Q
0 X
(5  Naming) 126 637.33 T
2 11 Q
(\245) 135 616.67 T
(full names) 153 616.67 T
(\245) 135 596.67 T
(lower) 153 596.67 T
(case) 180.8 596.67 T
(\245) 135 576.67 T
(angle bracket notation for types) 153 576.67 T
(\245) 135 556.67 T
(slot-names \050keith\051) 153 556.67 T
(Ther) 153 538.67 T
(e isn't a r) 175.56 538.67 T
(ecommended Dylan style, although the majority of Dylan) 218.87 538.67 T
-0.03 (code I've seen fr) 153 524.67 P
-0.03 (om outside Harlequin just uses the unquali\336ed name of) 230.95 524.67 P
(the pr) 153 510.67 T
(operty as the slot name.) 181.76 510.67 T
(However) 153 492.67 T
(, pr) 197.62 492.67 T
(evious discussions her) 213.87 492.67 T
(e, apart fr) 322.88 492.67 T
(om pr) 369.76 492.67 T
(ovoking complaints) 398.98 492.67 T
(about the way Dylan works in this ar) 153 478.67 T
(ea, seem to have suggested that) 333.25 478.67 T
(qualifying slot names is the right thing in most cases in or) 153 464.67 T
(der to avoid) 433.24 464.67 T
(widespr) 153 450.67 T
(ead pr) 192.79 450.67 T
(oblems with name clashes later on \050at least for exported) 223.79 450.67 T
(names\051. That's not to say it's caught on yet...) 153 436.67 T
(I do think the pur) 153 418.67 T
(e Lisp appr) 238.79 418.67 T
(oach is very bad indeed though, and) 293.62 418.67 T
(shouldn't be used. I disagr) 153 404.67 T
(ee that it makes the uses of accessors mor) 281.35 404.67 T
(e) 481.91 404.67 T
(intelligible, particularly if you'r) 153 390.67 T
(e calling accessors fr) 305.11 390.67 T
(om dif) 403.82 390.67 T
(fer) 435.68 390.67 T
(ent super-) 448.76 390.67 T
(classes on the same object in a block of code. And, as you say) 153 376.67 T
(, it rather) 447.91 376.67 T
(br) 153 362.67 T
(eaks abstraction of implementation.) 163.23 362.67 T
(One possible compr) 153 344.67 T
(omise is to choose a pr) 249.88 344.67 T
(e\336x for a whole gr) 359.43 344.67 T
(oup of) 447.86 344.67 T
(classes beneath a given r) 153 330.67 T
(oot. For example, the compiler's intermediate) 272.21 330.67 T
(r) 153 316.67 T
(epr) 157.15 316.67 T
(esentation consists of a number of dif) 173.17 316.67 T
(fer) 354.3 316.67 T
(ent graph nodes and we) 367.38 316.67 T
(could choose a blanket pr) 153 302.67 T
(e\336x for slots of classes in that heterar) 277.09 302.67 T
(chy such) 455.79 302.67 T
(as "dfm-" \050our IR is known as the DFM\051.) 153 288.67 T
1 F
(Dylan book style:) 153 270.67 T
2 F
( W) 241.91 270.67 T
(e will discuss this issue in book, but use shorter) 254.65 270.67 T
(names.  They won't be exported, generally) 153 256.67 T
(, so it won't be an issue.) 357.57 256.67 T
3 16 Q
(6  Dot notation) 126 221.33 T
2 11 Q
(use for stateless pr) 126 200.67 T
(operty accessors that r) 215.99 200.67 T
(eturn a single value) 324.27 200.67 T
(I now tend to use dot notation quite widely for any logical "pr) 126 180.67 T
(operty access",) 426.94 180.67 T
-0.15 (even if computed. That is,) 126 166.67 P
4 9.5 Q
-0.3 (foo.size) 254.06 166.67 P
2 11 Q
-0.15 ( is acceptable but the imperative) 299.66 166.67 P
4 9.5 Q
-0.3 (foo.ini-) 458.4 166.67 P
(tialize) 126 152.67 T
2 11 Q
( and) 165.9 152.67 T
4 9.5 Q
(foo.close) 190.02 152.67 T
2 11 Q
( ar) 241.32 152.67 T
(en't for me.) 253.72 152.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 675 540 702 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7) 427.93 695.67 T
(Symbols versus keywords) 442.18 695.67 T
108 82.17 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(5) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 16 Q
0 X
(7  Symbols ver) 108 637.33 T
(sus ke) 200.45 637.33 T
(yw) 241.12 637.33 T
(or) 258.38 637.33 T
(ds) 271.26 637.33 T
2 11 Q
(Use keywor) 108 616.67 T
(ds only for keywor) 166.07 616.67 T
(d parameters. Do this:) 258.27 616.67 T
4 9 Q
(make\050<file-stream>, direction: #"input"\051;) 108 596 T
2 11 Q
(instead of this:) 108 575.67 T
4 9 Q
(make\050<file-stream>, direction: input:\051;) 108 555 T
2 11 Q
(It's r) 108 534.67 T
(easonable to use keywor) 129.14 534.67 T
(d syntax to specify a r) 248.27 534.67 T
(eceived keywor) 354.33 534.67 T
(d, for) 430.74 534.67 T
(example in a slot speci\336cation or in a parameter list:) 108 520.67 T
4 9 Q
(slot point-x, init-keyword: x:;) 108 500 T
3 16 Q
(8  End w) 108 466.33 T
(or) 160.99 466.33 T
(ds) 173.87 466.33 T
2 11 Q
(Use end wor) 108 445.67 T
(ds for everything \050e.g.,) 169.71 445.67 T
4 9.5 Q
(if) 282.33 445.67 T
2 11 Q
(,) 293.73 445.67 T
4 9.5 Q
(block) 299.23 445.67 T
2 11 Q
(, ...\051) 327.73 445.67 T
(Use name as well \050e.g., method, class, ...\051 except you can abbr) 108 425.67 T
(eviate both to) 404.6 425.67 T
(allow for inlined expr) 108 411.67 T
(essions.) 213.45 411.67 T
3 16 Q
(9  Semicolons) 108 376.33 T
2 11 Q
(Last expr) 108 355.67 T
(ession can go without semicolon only wher) 152.92 355.67 T
(e the value is used.  This) 363.19 355.67 T
(is actually a useful little practice since if you want to add a form to the end of) 108 341.67 T
(a body whose value is signi\336cant you'r) 108 327.67 T
(e for) 296.92 327.67 T
(ced to think a little mor) 318.76 327.67 T
(e.) 432.09 327.67 T
4 9 Q
(define method empty? \050vector :: <vector>\051) 108 307 T
(vector.size = 0) 118.8 296 T
(end method empty?;) 108 285 T
(define method add \050vector :: <vector>, object\051) 108 266 T
(let new-vector :: <vector>) 118.8 255 T
(= make\050vector.class-for-copy, size: vector.size + 1\051;) 129.6 244 T
(replace-subsequence!\050new-vector, vector\051;) 118.8 233 T
(new-vector[vector.size] := object;) 118.8 222 T
(new-vector) 118.8 211 T
(end method add;) 108 200 T
1 11 Q
(Dylan book) 108 179.67 T
2 F
( gr) 167.59 179.67 T
(oup is still discussing semicolons.) 180.6 179.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Coding Style) 72 695.67 T
72 81 504 118 R
7 X
V
1 9 Q
0 X
(6) 72 101 T
0 F
(DRAFT) 473.99 101 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 16 Q
0 X
(10  General indentation) 126 637.33 T
2 11 Q
(A) 126 616.67 T
(void boxing your code and having big right column:) 133.55 616.67 T
4 9 Q
(define method yukyukyukyukyukyukyuk \050blahblahblahblahblah :: <foo>,) 126 596 T
(tolosetrack :: <bar>,) 325.8 585 T
(concerned? :: <boolean>\051) 325.8 574 T
(end method yukyukyukyukyukyukyuk;) 126 563 T
2 11 Q
(Use two space indentation:) 126 542.67 T
4 9 Q
(begin) 126 522 T
(tell-da-world\050bigfish, smallpond\051;) 136.8 511 T
(world) 136.8 500 T
(end) 126 489 T
3 16 Q
(11  Operator) 126 455.33 T
(s on ne) 203.12 455.33 T
(wline) 248.88 455.33 T
4 9 Q
(a | b) 126 434 T
2 11 Q
(Put operator on new line and indent two spaces:) 126 413.67 T
4 9 Q
(supercalifragilisticexpealidocious) 126 393 T
(| wasthatashovelfull) 136.8 382 T
(| ofraisensorsyrup) 136.8 371 T
3 16 Q
(12  P) 126 337.33 T
(arentheses) 156.26 337.33 T
3 13 Q
(12.1  Indent past parenthesis + operator rule:) 126 303.33 T
4 9 Q
(\050x + y + z) 126 283 T
(+ a + b + c\051) 142.2 272 T
3 13 Q
(12.2  Calls) 126 240.33 T
2 11 Q
-0.26 (Usual is on same line with ar) 126 220.67 P
-0.26 (guments single spaced and no space between the) 264.97 220.67 P
(function and its ar) 126 206.67 T
(gument list:) 214.75 206.67 T
4 9 Q
(funkie\050a, b, c\051;) 126 186 T
(longfunkiefunctionnamesuperfraligistic\050a, b, c\051;) 126 167 T
2 11 Q
(Function name up to 6 characters keep par) 126 146.67 T
(ens on same line:) 332.6 146.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 675 540 702 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13) 480.35 695.67 T
(if then else) 499.35 695.67 T
108 82.17 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(7) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 F
0 X
(values\0500,) 108 642 T
(sequence.size,) 145.8 631 T
(sequence-next-state,) 145.8 620 T
( sequence-finished-state?,) 140.4 609 T
(sequence-current-key,) 145.8 598 T
(stretchy-vector-current-element,) 145.8 587 T
(stretchy-vector-current-element-setter,) 145.8 576 T
(identity-copy-state\051) 145.8 565 T
2 11 Q
(Function name mor) 108 544.67 T
(e than 6 characters br) 203.48 544.67 T
(eak to newline:) 306.75 544.67 T
4 9 Q
(redirect-computations!) 108 524 T
(\050old-c, new-c, previous-computations, next-computations\051;) 118.8 513 T
2 11 Q
(Mor) 108 492.67 T
(e ar) 128.56 492.67 T
(guments:) 146.23 492.67 T
4 9 Q
(redirect-computations!) 108 472 T
(\050old-c, new-c, previous-computations, next-computations,) 118.8 461 T
(areallylongidthatrequireswrappingtheargs\051;) 124.2 450 T
3 16 Q
(13  if then else) 108 416.33 T
2 11 Q
(General case:) 108 395.67 T
4 9 Q
(if \050expr\051) 108 375 T
(then statements ...) 118.8 364 T
(else) 108 353 T
(else statements ...) 118.8 342 T
(end if;) 108 331 T
2 11 Q
(Abbr) 108 310.67 T
(eviated use:) 132.87 310.67 T
4 9 Q
(if \050expr\051 x else y end;) 108 298 T
3 16 Q
(14  let) 108 264.33 T
2 11 Q
(Same indentation level:) 108 243.67 T
4 9 Q
(let x = xxxxx;) 108 223 T
(let y = yyyyy;) 108 212 T
(inc!\050x, z\051;) 108 201 T
(let z = f!\050x, y\051;) 108 190 T
(z + z;) 108 179 T
2 11 Q
(Big names and initialization:) 108 158.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Coding Style) 72 695.67 T
72 81 504 118 R
7 X
V
1 9 Q
0 X
(8) 72 101 T
0 F
(DRAFT) 473.99 101 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 F
0 X
(let superfragilisticespealidoscious) 126 642 T
(= someexpressionthatclearlydoesnotfitabove;) 136.8 631 T
3 16 Q
(15  select and case) 126 597.33 T
2 11 Q
(The aligned) 126 576.67 T
4 9.5 Q
(=>) 186.32 576.67 T
2 11 Q
('s help make the cases stand out:) 197.72 576.67 T
4 9 Q
(case) 126 556 T
(count > 0 & test\050item, target\051) 136.8 545 T
(=> grovel\050count - 1, src-index + 1, dst-index\051;) 147.6 534 T
(otherwise) 136.8 523 T
(=> vector[dst-index] := item;) 147.6 512 T
(grovel\050count, src-index + 1, dst-index + 1\051) 163.8 501 T
(end case;) 126 490 T
2 11 Q
(Abbr) 126 469.67 T
(eviated use:) 150.87 469.67 T
4 9 Q
(case) 126 449 T
(*blue?*) 136.8 438 T
( => 2;) 185.4 438 T
(*yellow?* => 3;) 136.8 427 T
(end case;) 126 416 T
2 11 Q
(Long expr) 126 395.67 T
(ession:) 175.7 395.67 T
4 9 Q
(select) 126 375 T
(\050supercalifragilisticexbealidocious) 147.6 364 T
(+ someexpressionthatclearlydoesnotfitabove\051) 163.8 353 T
(1 => 2;) 136.8 342 T
(2 => 3;) 136.8 331 T
(end select;) 126 320 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 675 540 702 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(16) 492.34 695.67 T
(Macros) 511.34 695.67 T
108 82.17 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(9) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 16 Q
0 X
(16  Macr) 108 637.33 T
(os) 160.27 637.33 T
4 9 Q
(define macro collecting) 108 616 T
({ collecting \050\051 ?body end }) 118.8 605 T
(=> { collecting \050_collector\051) 129.6 594 T
(?body;) 167.4 583 T
(collected\050_collector\051) 167.4 572 T
(end }) 156.6 561 T
({ collecting \050as ?expression\051 ?body end }) 118.8 550 T
(=> { collecting \050_collector as ?expression\051) 129.6 539 T
(?body;) 167.4 528 T
(collected\050_collector\051) 167.4 517 T
(end }) 156.6 506 T
({ collecting \050?vars\051 ?body end }) 118.8 495 T
(=> { ?vars;) 135 484 T
(?body }) 162 473 T
(vars:) 108 462 T
({ ?var, ... }) 118.8 451 T
(=> { ?var; ... }) 129.6 440 T
({ }) 118.8 429 T
(=> { }) 129.6 418 T
(end macro;) 108 407 T
3 16 Q
(17  Assignments br) 108 373.33 T
(oken o) 228.8 373.33 T
(ver tw) 270.85 373.33 T
(o lines) 308.53 373.33 T
4 9 Q
(superfragilisticespealidoscious) 108 352 T
(:= somereallylongexpressionthatdoesnotfitabove;) 118.8 341 T
3 16 Q
(18  De\336nitions br) 108 307.33 T
(oken o) 214.21 307.33 T
(ver tw) 256.26 307.33 T
(o lines) 293.94 307.33 T
4 9 Q
(define variable lilgirlscryalldatime) 108 286 T
(= bigboysdontcry;) 118.8 275 T
3 16 Q
(19  f) 108 241.33 T
(or loop) 134.02 241.33 T
4 9 Q
(for \050elementincollectionnumberone in collection1,) 108 220 T
(elementincollectionnumbertwo in collection2\051) 135 209 T
(...) 118.8 198 T
(end for) 108 187 T
2 11 Q
(Abbr) 108 166.67 T
(eviated use:) 132.87 166.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Coding Style) 72 695.67 T
72 81 504 118 R
7 X
V
1 9 Q
0 X
(10) 72 101 T
0 F
(DRAFT) 473.99 101 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 486 648 R
7 X
V
4 F
0 X
(for \050f in foo, b in bar) 126 642 T
(...) 136.8 631 T
(end for) 126 620 T
3 16 Q
(20  Local methods) 126 586.33 T
4 9 Q
(method \050y\051) 126 565 T
(local method strip \050x\051) 136.8 554 T
(...) 180 543 T
(end method strip,) 169.2 532 T
(method chars \050x\051) 169.2 521 T
(...) 180 510 T
(end method chars;) 169.2 499 T
(strip\050chars\050y\051\051) 136.8 488 T
(end method;) 126 477 T
2 11 Q
(T) 126 456.67 T
(ight for space:) 132.14 456.67 T
4 9 Q
(method \050y\051) 126 436 T
(local) 136.8 425 T
(method strip \050x\051) 147.6 414 T
(...) 147.6 403 T
(end method strip,) 147.6 392 T
(method chars \050x\051) 147.6 381 T
(...) 147.6 370 T
(end method chars;) 147.6 359 T
(strip\050chars\050y\051\051) 136.8 348 T
(end method;) 126 337 T
2 11 Q
(Abbr) 126 316.67 T
(eviated use:) 150.87 316.67 T
4 9 Q
(method \050y\051) 126 296 T
(local strip \050x\051 ... end,) 136.8 285 T
(chars \050x\051 ... end;) 169.2 274 T
(strip\050chars\050y\051\051) 136.8 263 T
(end method;) 126 252 T
2 11 Q
(A single r) 126 231.67 T
(ecursive method:) 173.06 231.67 T
4 9 Q
(method \050y\051) 126 211 T
(local stripchars \050x\051) 136.8 200 T
(...) 158.4 189 T
(end;) 136.8 178 T
(stripchars\050y\051) 136.8 167 T
(end method;) 126 156 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 675 540 702 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(21) 427.33 695.67 T
(Parameter lists \050style A\051) 446.33 695.67 T
108 82.17 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(1) 531.33 100 T
(1) 535.5 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
3 16 Q
0 X
(21  P) 108 637.33 T
(arameter lists \050style A\051) 138.26 637.33 T
2 11 Q
(The) 108 616.67 T
1 F
(Dylan book style) 129.16 616.67 T
2 F
( dif) 215.33 616.67 T
(fers for parameters lists and r) 231.46 616.67 T
(eturn values. See Sec-) 374.06 616.67 T
(tion 23.) 108 602.67 T
(Right after function name:) 108 582.67 T
4 9 Q
(define method vector \050#rest rest\051) 108 562 T
(rest) 118.8 551 T
(end method vector;) 108 540 T
2 11 Q
(Indentation, style A:) 108 519.67 T
4 9 Q
(define method union) 108 499 T
(\050seq-1 :: <sequence>, seq-2 :: <sequence>, #key test = \134==\051) 129.6 488 T
(remove-duplicates\050concatenate\050seq-1, seq-2\051, test: test\051) 118.8 477 T
(end method union;) 108 466 T
(define method f01234567890123456789) 108 447 T
(\050a0123456789, b0123456789, c0123456789, d0123456789,) 129.6 436 T
(e0123456789, f0123456789, g0123456789\051) 135 425 T
(body-starts-here) 118.8 414 T
(end method f01234567890123456789;) 108 403 T
2 11 Q
(Optional parameters: Use the same aesthetic applied to indenting binary) 108 382.67 T
(operators continued acr) 108 368.67 T
(oss lines, indent # names as follows:) 223.47 368.67 T
4 9 Q
(define method print) 108 348 T
(\050object :: <multiple-value-combination>,) 129.6 337 T
(#key stream = *standard-output*, verbose?\051) 140.4 326 T
(...) 118.8 315 T
(end method print;) 108 304 T
3 16 Q
(22  Return v) 108 270.33 T
(alues \050style A\051) 182.86 270.33 T
2 11 Q
(The) 108 249.67 T
1 F
(Dylan book style) 129.16 249.67 T
2 F
( dif) 215.33 249.67 T
(fers for parameters lists and r) 231.46 249.67 T
(eturn values. See Sec-) 374.06 249.67 T
(tion 23.) 108 235.67 T
(No semicolon) 108 215.67 T
(Par) 108 195.67 T
(enthesis notation.) 124.29 195.67 T
(If both parameter list and r) 108 175.67 T
(eturn values \336t on the \336rst line:) 238.76 175.67 T
4 9 Q
(define method past? \050time :: <offset>\051 => \050result :: <boolean>\051) 108 155 T
(time.total-seconds < 0;) 129.6 144 T
(end method past?;) 108 133 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Coding Style) 72 695.67 T
72 81 504 118 R
7 X
V
1 9 Q
0 X
(12) 72 101 T
0 F
(DRAFT) 473.99 101 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
2 11 Q
0 X
(If parameter list and r) 126 640.67 T
(eturn values do not both \336t on the \336rst line:) 231.93 640.67 T
4 9 Q
(define method element-setter) 126 620 T
(\050new-value, list :: <list>, key :: <small-integer>\051 => \050new-value\051) 147.6 609 T
(end method element-setter;) 126 598 T
2 11 Q
(If parameter list and r) 126 577.67 T
(eturn values do not both \336t on the same line:) 231.93 577.67 T
4 9 Q
(define method decode-total-seconds) 126 557 T
(\050time :: <time-of-day>\051) 147.6 546 T
(=> \050hour :: <integer>, min :: <integer>, sec :: <integer>\051) 163.8 535 T
(decode-total-seconds\050time.total-seconds\051;) 136.8 524 T
(end method decode-total-seconds;) 126 513 T
(define method convert-expressions) 126 494 T
(\050env :: <environment>, argument-forms\051) 147.6 483 T
(=> \050first :: <computation>, last :: <computation>, temporaries\051) 158.4 472 T
(end method convert-expressions;) 126 461 T
2 11 Q
(Optional parameters split acr) 126 440.67 T
(oss a line:) 268 440.67 T
4 9 Q
(define method fill!) 126 420 T
(\050sequence :: <mutable-sequence>, value :: <object>,) 147.6 409 T
(#key start: first = 0, end: last\051) 163.8 398 T
(=> \050sequence :: <mutable-sequence>\051) 180 387 T
(end method fill!;) 126 376 T
2 11 Q
(Complicated cases) 126 355.67 T
(The following is pr) 126 335.67 T
(eferr) 218.26 335.67 T
(ed:) 240.95 335.67 T
4 9 Q
(define method \134<) 126 315 T
(\050a :: <double-float>, b :: <ratio>\051 => \050res :: <boolean>\051) 147.6 304 T
(a < as\050<double-float>, b\051) 136.8 293 T
(end method \134<;) 126 282 T
2 11 Q
(Over this:) 126 261.67 T
4 9 Q
(define method \134< \050a :: <double-float>, b :: <ratio>\051) 126 241 T
(=> \050res :: <boolean>\051) 147.6 230 T
(a < as\050<double-float>, b\051) 136.8 219 T
(end method \134<;) 126 208 T
2 11 Q
(Use other r) 126 187.67 T
(eturn value name to convey mor) 179.75 187.67 T
(e meaning if possible.) 337.78 187.67 T
4 9 Q
(define method reverse! \050list :: <list>\051 => \050list :: <list>\051) 126 167 T
(...) 136.8 156 T
(end method reverse!;) 126 145 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 675 540 702 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(23) 338.48 695.67 T
(Parameters and return values, Dylan book style) 357.48 695.67 T
108 82.17 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(13) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 F
0 X
(define generic munge \050list :: <list>\051 => \050new-list :: <list>\051;) 108 642 T
(define generic munge! \050list :: <list>\051 => \050list :: <list>\051;) 108 631 T
2 11 Q
(Use _ for poetry impair) 108 610.67 T
(ed or wher) 221.31 610.67 T
(e the function name corr) 274.14 610.67 T
(esponds exactly to) 392.71 610.67 T
(the r) 108 596.67 T
(eturn value name) 130.15 596.67 T
4 9 Q
(define method first \050s :: <sequence>, #rest keys, #key default\051 => \050_\051) 108 576 T
(...) 118.8 565 T
(end method first;) 108 554 T
3 16 Q
(23  P) 108 520.33 T
(arameter) 138.26 520.33 T
(s and return v) 193.5 520.33 T
(alues, Dylan book style) 280.03 520.33 T
2 11 Q
(The Dylan book style diver) 108 499.67 T
(ges on indentation of parameter lists and r) 239.75 499.67 T
(eturn) 445.62 499.67 T
(values.) 108 485.67 T
3 13 Q
(23.1  P) 108 452.33 T
(arameter lists, Dylan book style) 141.48 452.33 T
2 11 Q
(Right after function name:) 108 432.67 T
4 9 Q
(define method vector \050#rest rest\051) 108 412 T
(rest) 118.8 401 T
(end method vector;) 108 390 T
2 11 Q
(Indentation, style A:) 108 369.67 T
4 9 Q
(define method union) 108 349 T
(\050seq-1 :: <sequence>, seq-2 :: <sequence>, #key test = \134==\051) 129.6 338 T
(remove-duplicates\050concatenate\050seq-1, seq-2\051, test: test\051) 118.8 327 T
(end method union;) 108 316 T
(define method f01234567890123456789) 108 297 T
(\050a0123456789, b0123456789, c0123456789, d0123456789,) 129.6 286 T
(e0123456789, f0123456789, g0123456789\051) 135 275 T
(body-starts-here) 118.8 264 T
(end method f01234567890123456789;) 108 253 T
2 11 Q
(Optional parameters: T) 108 232.67 T
(r) 219.96 232.67 T
(eat as a stacked list.) 224.1 232.67 T
4 9 Q
(define method print) 108 212 T
(\050object :: <multiple-value-combination>,) 129.6 201 T
(#key stream = *standard-output*, verbose?\051) 135 190 T
(...) 118.8 179 T
(end method print;) 108 168 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Coding Style) 72 695.67 T
72 81 504 118 R
7 X
V
1 9 Q
0 X
(14) 72 101 T
0 F
(DRAFT) 473.99 101 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
3 13 Q
0 X
(23.2  Return v) 126 639.33 T
(alues, Dylan book style) 195.72 639.33 T
2 11 Q
(No semicolon) 126 619.67 T
(Par) 126 599.67 T
(enthesis notation.) 142.29 599.67 T
(If both parameter list and r) 126 579.67 T
(eturn values \336t on the \336rst line:) 256.76 579.67 T
4 9 Q
(define method past? \050time :: <offset>\051 => \050result :: <boolean>\051) 126 559 T
(time.total-seconds < 0;) 136.8 548 T
(end method past?;) 126 537 T
2 11 Q
(If parameter list and r) 126 516.67 T
(eturn values do not both \336t on the \336rst line:) 231.93 516.67 T
4 9 Q
(define method element-setter) 126 496 T
(\050new-value, list :: <list>, key :: <small-integer>\051 => \050new-value\051) 136.8 485 T
(end method element-setter;) 126 474 T
2 11 Q
(If parameter list and r) 126 453.67 T
(eturn values do not both \336t on the same line:) 231.93 453.67 T
4 9 Q
(define method decode-total-seconds) 126 433 T
(\050time :: <time-of-day>\051) 147.6 422 T
(=> \050hour :: <integer>, min :: <integer>, sec :: <integer>\051) 131.4 411 T
(decode-total-seconds\050time.total-seconds\051;) 136.8 400 T
(end method decode-total-seconds;) 126 389 T
(define method convert-expressions) 126 370 T
(\050env :: <environment>, argument-forms\051) 147.6 359 T
(=> \050first :: <computation>, last :: <computation>, temporaries\051) 131.4 348 T
(end method convert-expressions;) 126 337 T
2 11 Q
(Optional parameters split acr) 126 316.67 T
(oss a line:) 268 316.67 T
4 9 Q
(define method fill!) 126 296 T
(\050sequence :: <mutable-sequence>, value :: <object>,) 147.6 285 T
(#key start: first = 0, end: last\051) 153 274 T
(=> \050sequence :: <mutable-sequence>\051) 131.4 263 T
(end method fill!;) 126 252 T
2 11 Q
(Complicated cases) 126 231.67 T
(The following is pr) 126 211.67 T
(eferr) 218.26 211.67 T
(ed:) 240.95 211.67 T
4 9 Q
(define method \134<) 126 191 T
(\050a :: <double-float>, b :: <ratio>\051 => \050res :: <boolean>\051) 147.6 180 T
(a < as\050<double-float>, b\051) 136.8 169 T
(end method \134<;) 126 158 T
2 11 Q
(Over this, which we do not do in the book:) 126 137.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 675 540 702 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(24) 405.32 695.67 T
(Non generic function methods) 424.32 695.67 T
108 82.17 540 117 R
7 X
V
0 9 Q
0 X
(DRAFT) 108 100 T
1 F
(15) 531 100 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
7 X
V
4 F
0 X
(define method \134< \050a :: <double-float>, b :: <ratio>\051) 108 642 T
(=> \050res :: <boolean>\051) 129.6 631 T
(a < as\050<double-float>, b\051) 118.8 620 T
(end method \134<;) 108 609 T
2 11 Q
(Use other r) 108 588.67 T
(eturn value name to convey mor) 161.75 588.67 T
(e meaning if possible.) 319.78 588.67 T
4 9 Q
(define method reverse! \050list :: <list>\051 => \050list :: <list>\051) 108 568 T
(...) 118.8 557 T
(end method reverse!;) 108 546 T
(define generic munge \050list :: <list>\051 => \050new-list :: <list>\051;) 108 527 T
(define generic munge! \050list :: <list>\051 => \050list :: <list>\051;) 108 516 T
2 11 Q
-0.01 (In the Dylan book, we do not use _ for poetry impair) 108 495.67 P
-0.01 (ed or wher) 363.69 495.67 P
-0.01 (e the function) 416.49 495.67 P
(name corr) 108 481.67 T
(esponds exactly to the r) 157.02 481.67 T
(eturn value name) 271.58 481.67 T
3 16 Q
(24  Non g) 108 446.33 T
(eneric function methods) 167.18 446.33 T
4 9 Q
(define constant curry) 108 425 T
(= method \050...\051 => \050...\051) 118.8 414 T
(...) 129.6 403 T
(end method curry;) 108 392 T
2 11 Q
(Abbr) 108 371.67 T
(eviated use:) 132.87 371.67 T
4 9 Q
(define constant make-region-union = method \050#rest regions\051) 108 351 T
(make\050<region-union>, regions: concatenate-as\050<vector>, regions\051\051) 118.8 340 T
(end method make-region-union;) 108 329 T
3 16 Q
(25  Generic function de\336nitions) 108 295.33 T
4 9 Q
(define open generic choose) 108 274 T
(\050pred :: <function>, seq :: <sequence>\051 => \050elts :: <sequence>\051;) 118.8 263 T
(define open generic choose-by) 108 244 T
(\050pred :: <function>, test-seq :: <sequence>, val-seq :: sequence>\051) 129.6 233 T
(=> \050_ :: <sequence>\051;) 113.4 222 T
3 16 Q
(26  Class de\336nitions) 108 188.33 T
2 11 Q
(Lots of dir) 108 167.67 T
(ect super) 158.21 167.67 T
(classes:) 202.03 167.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Dylan Coding Style) 72 695.67 T
72 81 504 118 R
7 X
V
1 9 Q
0 X
(16) 72 101 T
0 F
(DRAFT) 473.99 101 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 504 648 R
7 X
V
4 F
0 X
(define class <z>) 126 642 T
(\050<a>, <b>, <c>\051) 147.6 631 T
(...) 136.8 620 T
(end class <z>;) 126 609 T
2 11 Q
(Long slot initializations:) 126 588.67 T
4 9 Q
(define class <entry-state> \050<temporary>\051) 126 568 T
(slot name, init-keyword: name:;) 136.8 557 T
(slot me-block, init-keyword: block:;) 136.8 546 T
(slot exits :: <stretchy-vector>,) 136.8 535 T
(init-function: curry\050make, <stretchy-vector>\051,) 147.6 524 T
(init-keyword: exits:;) 147.6 513 T
(end class;) 126 502 T
2 11 Q
(Or even better:) 126 481.67 T
4 9 Q
(define class <entry-state> \050<temporary>\051) 126 461 T
(slot name, init-keyword: name:;) 136.8 450 T
(slot me-block, init-keyword: block:;) 136.8 439 T
(slot exits :: <stretchy-vector> = make\050<stretchy-vector>\051,) 136.8 428 T
(init-keyword: exits:;) 147.6 417 T
(end class;) 126 406 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 16
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 16
%%DocumentFonts: Palatino-Italic
%%+ Palatino-Bold
%%+ Palatino-Roman
%%+ Helvetica-Narrow-Bold
%%+ Courier-Bold
%%EOF
