
		-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
		Using the Dylan batch compiler
		-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

		Andy Armstrong
		10 November 1997

* HISTORY

  12 Nov 1997, Andy Armstrong
    - initial version
  11 Mar 1998, Andy Armstrong
    - removed COMPILE-ALL and COMPILE-CHANGES, and described new
      options for BUILD and for batch mode.

* INTRODUCTION

Functional Developer provides two options for compiling Dylan code, the
interactive development environment and the batch compiler. The batch
compiler is primarily included as a separate application to support
build scripting (such as makefiles), but it also provides a command
line interface that some developers might find preferable.

* BATCH MODE

The simplest mode of operation of the Dylan compiler is batch mode,
where it is invoked with some command line options and a list of
projects and it performs the requested operations and then exits.
This mode is most useful for doing one-off compiles, or for use in
build scripts.

The projects can be specified either as a pathname to a Dylan .HDP or
.LID file, or as a library name in which case the compiler will use
its standard library searching procedures to find the library's
definition.

The default operation in batch mode is to compile only the libraries
that have changed in a project. So:

  dylan-compile c:\dylan\my-project\my-project.hdp

will incrementally compile as needed. Similary:

  dylan-compile my-first-library my-second-library

will compile the two specified libraries if it can find them (it will
exit with an error code if it cannot).

The following useful options can be specified as command line
arguments to dylan-compile (note that for UNIX users the options can
also be specified starting with a hyphen, such as -help).

  /help, /?	 - give some brief help on using dylan-compile
  /logo		 - display the copyright banner (the default)
  /nologo	 - suppress the copyright banner

  /not-recursive - don't process the subprojects of this project
  /clean	 - force a clean compile of the project
  /save		 - save the compiler database

  /nolink	 - don't link the project
  /dll		 - force the project to be linked as a DLL
  /exe		 - force the project to be linked as an executable

  /microsoft	 - link the project using the Microsoft linker (the default)
  /gnu		 - link the project using the GNU linker

  /debug	 - enter the debugger if the compiler crashes

The /debug option is only provided to simplify the process of
reporting bugs. Instead of aborting the compilation in the face of an
internal compiler error, it will instead crash which will allow a
debugger to get a backtrace. See the section on reporting bugs.

Some useful scenarios:

1. Compile and link a library as an executable

  dylan-compile /link my-executable

2. Compile and save a library, and link it with the GNU linker

  dylan-compile /save /gnu my-dll

3. Recompile a project from scratch and link it as an executable

  dylan-compile /all /exe c:/dylan/my-project.hdp

* CONSOLE MODE

The console mode for dylan-compile is provided to allow you to perform
multiple compiles over a period of time without having to restart the
compiler everytime. To start the compiler up in console mode, just run
it without any arguments.

When dylan-compile starts up in console mode, you will be presented
with the copyright banner and then a command prompt. You can
now issue commands to the compiler one at a time, and it will perform
them for you.

** BUILD

Usage: BUILD {options} project

The command build is equivalent to the environment's 'Build' menu,
along with all of the options available in the 'Advanced Build'
menu. This operation by default performs an incremental compilation,
that is it recompiles the specified project only enough to take into
account any changes that have been made. Thus simple changes to one
line of a file should be much faster than if almost every file in the
project has changed.

By default, BUILD doesn't save a compiler database since it may take
longer than the incremental compile itself. If you'd like to save a
database, just specify the /save option.

The available options are:

  /not-recursive - only build this project, not its subprojects
  /clean         - force a clean build of the project
  /save          - save the project's compiler database

  /dll           - force the project to be linked as a DLL
  /exe           - force the project to be linked as an executable

  /gnu           - force link using the GNU linker
  /microsoft     - force link using the Microsoft linker

** OPEN

Usage: OPEN project

Opens a project but does not build it. Once a project is opened, then
building of any projects that use the library in question will use
the version that has just been opened.

** IMPORT

Usage: IMPORT filename

Creates a project file for a given Library Interchange Definition
file.

** CLOSE

Usage: CLOSE project

The close command removes all knowledge of a project from the Dylan
compiler, so for example you can compile a different version of that
project.

** CLOSE-ALL

Usage: CLOSE-ALL

The close-all command will close all open projects, which is primarily
useful when you have finished with one set of projects and want to
start compiling a completely different set.

** HELP

Usage: HELP
       HELP command

If you can't remember what commands are available to you, the help
command will display them all along with a brief description of how to
use them. If you specify a command then instead you will get
documentation on how to use the command.

** EXIT

Usage: EXIT

The EXIT command exits the compiler, and there is also an alias QUIT
provided for convenience.

* INTERNAL COMMANDS

ISSUE: to be filled in...

** HELP-ALL

Usage: HELP-ALL

The internal command help-all is the internal equivalent of the help
command, in that it will list all commands available to you, internal
and external.

* RECOVERING FROM ERRORS

** ABORT

When the compiler has crashed, this command will allow you to abort
that operation so that you can continue without having to restart the
compiler from scratch. If you'd like to report the problem, you should
use the DEBUG command while you are running the compiler inside a
debugger (see the batch-debug application that is provided to help you
to generate bug reports).

** CONTINUE

When the compiler has crashed, this operation will allow you to choose
between one of the available restarts by specifying the restarts
number. Typically you will just want to abort the operation for which
the command ABORT is provided (use HELP for more details).

** DEBUG

When the compiler has crashed, this command will allow you to enter a
debugger so that you can determine what is happening. Generally
speaking, you should use the batch-debug application as your debugger,
as this will produce a bug report that you can send to Functional
Objects. See the documentation for more details.

* REPORTING BUGS

The application batch-debug provided with Functional Developer is
particularly useful for producing bug reports. If running in
batch-mode, replace your usual call to dylan-compiler as follows:

  dylan-compile [options] [projects]
  batch-debug dylan-compile -debug [options] [projects] > compiler.log

If you are running in console mode then if the compiler crashes you
will be offered the choice of either aborting the compilation or
entering the debugger. So to make sure that you are in a position to
report potential bugs you should also run dylan-compile using
batch-debug, but note that you shouldn't pipe the output directly into
a file as you will then be unable to interact with
batch-debug. Alternatively use an application such as 'tee' which can
direct the output both to the console and a log file.

* ISSUES
