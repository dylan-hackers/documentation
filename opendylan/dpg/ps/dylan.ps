%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            true def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 30 FMDOCUMENT
0 0 /Palatino-Italic FMFONTDEFINE
1 0 /Palatino-Roman FMFONTDEFINE
2 0 /Palatino-Bold FMFONTDEFINE
3 0 /Helvetica-Narrow-Bold FMFONTDEFINE
4 0 /Courier-Bold FMFONTDEFINE
5 0 /Courier-Oblique FMFONTDEFINE
6 0 /Courier-BoldOblique FMFONTDEFINE
7 0 /Helvetica-Bold FMFONTDEFINE
8 0 /Helvetica FMFONTDEFINE
9 0 /Helvetica-Oblique FMFONTDEFINE
10 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 30 Q
0 X
0 0 0 1 0 0 0 K
-1.1 (Dylan Pr) 108 592 S
-1.1 (ogramming) 212.81 592 S
1 13 Q
(Neal Feinber) 108 427.33 T
(g) 181.68 427.33 T
(Sonya E. Keene) 108 408.33 T
(Robert O. Mathews) 108 389.33 T
(P) 108 370.33 T
(. T) 114.18 370.33 T
(ucker W) 127.47 370.33 T
(ithington) 175.21 370.33 T
2 12 Q
(Harlequin) 108 338 T
(The Late-Binding Company\252) 108 324 T
1 13 Q
(Draft June 25, 1996) 108 239.33 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(Copyright 1994, 1995, 1996 by The Harlequin Gr) 117 528.33 T
(oup Limited.) 329.68 528.33 T
(All rights r) 117 506.33 T
(eserved.) 165.11 506.33 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "v" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
107.17 546.83 503.17 642.33 R
7 X
0 0 0 1 0 0 0 K
V
1 30 Q
0 X
(Contents) 107.17 566.17 T
107.17 546.83 503.17 642.33 C
0 0 0 1 0 0 0 K
107.17 601.17 404.17 631.33 C
0 0 0 1 0 0 0 K
103.83 616.17 265.83 616.17 2 L
3 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
103.83 607.17 265.83 607.17 2 L
1 H
N
0 0 0 1 0 0 0 K
107.17 546.83 503.17 642.33 C
36 72 576 720 C
0 0 0 1 0 0 0 K
108 126 486 432 R
7 X
0 0 0 1 0 0 0 K
V
108 90 504 108 R
V
2 9.5 Q
0 X
(v) 303.36 101.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 504 432 R
7 X
V
1 11 Q
0 X
(Preface) 135 424.67 T
(xi) 181.57 424.67 T
3 13 Q
(Part I.) 238.49 394.33 T
(Basic Concepts) 274.61 394.33 T
(1) 367.59 394.33 T
(1) 108 369.33 T
(Introduction) 135 369.33 T
(3) 210.18 369.33 T
1 11 Q
(1.1) 135 349.67 T
(Modular) 171 349.67 T
(, r) 213 349.67 T
(eusable, component-oriented pr) 222.65 349.67 T
(ograms  6) 377.61 349.67 T
(1.2) 135 335.67 T
(Powerful and familiar pr) 171 335.67 T
(ocedural pr) 291.89 335.67 T
(ogramming  7) 347.96 335.67 T
(1.3) 135 321.67 T
(Rapid and pr) 171 321.67 T
(oductive development of pr) 235.26 321.67 T
(ograms  8) 370.72 321.67 T
(1.4) 135 307.67 T
(Delivery of safe, ef) 171 307.67 T
(\336cient, compact applications  9) 261.63 307.67 T
3 13 Q
(2) 108 285.33 T
(Quick Start) 135 285.33 T
(11) 204.88 285.33 T
1 11 Q
(2.1) 135 265.67 T
(Dialog with a Dylan listener  1) 171 265.67 T
(1) 318.47 265.67 T
(2.2) 135 251.67 T
(Simple arithmetic operations  12) 171 251.67 T
(2.3) 135 237.67 T
(V) 171 237.67 T
(ariables and constants  14) 177.93 237.67 T
(2.4) 135 223.67 T
(Formatted output  19) 171 223.67 T
(2.5) 135 209.67 T
(A complete Dylan pr) 171 209.67 T
(ogram  20) 272.84 209.67 T
(2.6) 135 195.67 T
(Summary  24) 171 195.67 T
3 13 Q
(3) 108 173.33 T
(Methods, Classes, and Objects) 135 173.33 T
(27) 305 173.33 T
1 11 Q
(3.1) 135 153.67 T
(Method de\336nitions  27) 171 153.67 T
(3.2) 135 139.67 T
(Classes  30) 171 139.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "v" 3
%%Page: "vi" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(vi) 72 677.67 T
0 F
(Contents) 89.94 677.67 T
72 81 504 108 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 118.14 504 648 R
V
1 11 Q
0 X
(3.3) 135 640.67 T
(Objects  34) 171 640.67 T
(3.4) 135 626.67 T
(Summary  38) 171 626.67 T
3 13 Q
(4) 108 604.33 T
(User-Defined Classes and Methods) 135 604.33 T
(39) 326.31 604.33 T
1 11 Q
(4.1) 135 584.67 T
(Requir) 171 584.67 T
(ements of the time and position classes and methods  39) 203.76 584.67 T
(4.2) 135 570.67 T
(User) 171 570.67 T
(-de\336ned classes  40) 193.64 570.67 T
(4.3) 135 556.67 T
(Use of) 171 556.67 T
4 10 Q
(make) 204.66 556.67 T
1 11 Q
( to cr) 228.66 556.67 T
(eate an instance  41) 252.78 556.67 T
(4.4) 135 542.67 T
(Getters and setters of slot values  42) 171 542.67 T
(4.5) 135 528.67 T
(Initialization of slots when instances ar) 171 528.67 T
(e made  42) 360.2 528.67 T
(4.6) 135 514.67 T
(Methods for handling time  45) 171 514.67 T
(4.7) 135 500.67 T
(Summary  51) 171 500.67 T
3 13 Q
(5) 108 478.33 T
(Class Inheritance) 135 478.33 T
(53) 236.28 478.33 T
1 11 Q
(5.1) 135 458.67 T
(The) 171 458.67 T
4 10 Q
(<time-offset>) 192.16 458.67 T
1 11 Q
( class and methods  53) 270.16 458.67 T
(5.2) 135 444.67 T
(Class inheritance  57) 171 444.67 T
(5.3) 135 430.67 T
(Methods for classes that use inheritance  60) 171 430.67 T
(5.4) 135 416.67 T
(Rede\336nition of a method  61) 171 416.67 T
(5.5) 135 402.67 T
(Method dispatch  63) 171 402.67 T
(5.6) 135 388.67 T
(De\336nition of a generic function  66) 171 388.67 T
(5.7) 135 374.67 T
(Use of) 171 374.67 T
4 10 Q
(next-method) 204.66 374.67 T
1 11 Q
( to call another method  69) 270.66 374.67 T
(5.8) 135 360.67 T
(The time library \050so far\051  71) 171 360.67 T
(5.9) 135 346.67 T
(Summary  74) 171 346.67 T
3 13 Q
(6) 108 324.33 T
(Multimethods) 135 324.33 T
(75) 217.29 324.33 T
1 11 Q
(6.1) 135 304.67 T
(Methods for the) 171 304.67 T
4 10 Q
(+) 251.57 304.67 T
1 11 Q
( generic function  75) 257.58 304.67 T
(6.2) 135 290.67 T
(Method dispatch for multimethods  79) 171 290.67 T
(6.3) 135 276.67 T
(Methods for comparison of times  81) 171 276.67 T
(6.4) 135 262.67 T
(Summary  81) 171 262.67 T
3 13 Q
(7) 108 240.33 T
(Modularity) 135 240.33 T
(83) 201.9 240.33 T
1 11 Q
(7.1) 135 220.67 T
(Requir) 171 220.67 T
(ements of the position classes  83) 203.76 220.67 T
(7.2) 135 206.67 T
(Initial class de\336nitions  84) 171 206.67 T
(7.3) 135 192.67 T
(Abstract classes  85) 171 192.67 T
(7.4) 135 178.67 T
(Absolute position  86) 171 178.67 T
(7.5) 135 164.67 T
(Relative position  90) 171 164.67 T
(7.6) 135 150.67 T
(Meeting of angles and times  92) 171 150.67 T
(7.7) 135 136.67 T
(Abstract, concrete, and instantiable classes  95) 171 136.67 T
(7.8) 135 122.67 T
(Summary  96) 171 122.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "vi" 4
%%Page: "vii" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Contents) 484.05 677.67 T
2 F
(vii) 528.39 677.67 T
108 82.17 540 108 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 121.71 504 648 R
V
3 13 Q
0 X
(8) 108 639.33 T
(A Simple Library) 135 639.33 T
(99) 232.72 639.33 T
1 11 Q
(8.1) 135 619.67 T
(The LID \336le  100) 171 619.67 T
(8.2) 135 605.67 T
(The library \336le  100) 171 605.67 T
(8.3) 135 591.67 T
(The implementation \336le  100) 171 591.67 T
(8.4) 135 577.67 T
(The test \336le  105) 171 577.67 T
(8.5) 135 563.67 T
(Summary  106) 171 563.67 T
3 13 Q
(Part II.) 220.71 535.33 T
(Intermediate Topics) 259.8 535.33 T
(107) 373.51 535.33 T
(9) 108 510.33 T
(Nonclass Types) 135 510.33 T
(109) 229.17 510.33 T
1 11 Q
(9.1) 135 490.67 T
(Functions that cr) 171 490.67 T
(eate nonclass types  109) 252.5 490.67 T
(9.2) 135 476.67 T
(Examples of types that ar) 171 476.67 T
(e not classes  1) 293.99 476.67 T
(10) 363.99 476.67 T
(9.3) 135 462.67 T
(Method dispatch and nonclass types  1) 171 462.67 T
(1) 358.95 462.67 T
(1) 363.84 462.67 T
(9.4) 135 448.67 T
(Summary  1) 171 448.67 T
(16) 229.19 448.67 T
3 13 Q
(10) 108 426.33 T
(Slots) 135 426.33 T
(117) 174.07 426.33 T
1 11 Q
(10.1) 135 406.67 T
(Dot-syntax abbr) 171 406.67 T
(eviation for simple function calls  1) 249.28 406.67 T
(17) 418.95 406.67 T
(10.2) 135 392.67 T
(Getters and setters for slots  1) 171 392.67 T
(18) 313.65 392.67 T
(10.3) 135 378.67 T
(Initialize methods  123) 171 378.67 T
(10.4) 135 364.67 T
(Slot options for initialization of slots  124) 171 364.67 T
(10.5) 135 350.67 T
(Allocation of slots  127) 171 350.67 T
(10.6) 135 336.67 T
(V) 171 336.67 T
(irtual slots  128) 178.34 336.67 T
(10.7) 135 322.67 T
(Summary  133) 171 322.67 T
3 13 Q
(11) 108 300.33 T
(Collections and Control Flow) 135 300.33 T
(137) 295.48 300.33 T
1 11 Q
(1) 135 280.67 T
(1.1) 139.9 280.67 T
(Built-in collection classes  137) 171 280.67 T
(1) 135 266.67 T
(1.2) 139.9 266.67 T
(Basic use of collections  138) 171 266.67 T
(1) 135 252.67 T
(1.3) 139.9 252.67 T
(Iteration over a sequence  142) 171 252.67 T
(1) 135 238.67 T
(1.4) 139.9 238.67 T
(Manipulation of collections  150) 171 238.67 T
(1) 135 224.67 T
(1.5) 139.9 224.67 T
(Conditional execution  154) 171 224.67 T
(1) 135 210.67 T
(1.6) 139.9 210.67 T
(Summary  159) 171 210.67 T
3 13 Q
(12) 108 188.33 T
(Functions) 135 188.33 T
(161) 198.93 188.33 T
1 11 Q
(12.1) 135 168.67 T
(Function-calling syntax  162) 171 168.67 T
(12.2) 135 154.67 T
(The function-calling pr) 171 154.67 T
(otocol  167) 282.62 154.67 T
(12.3) 135 140.67 T
(Functions as objects  180) 171 140.67 T
(12.4) 135 126.67 T
(Summary  185) 171 126.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "vii" 5
%%Page: "viii" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(viii) 72 677.67 T
0 F
(Contents) 96.27 677.67 T
72 81 504 108 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 504 648 R
V
3 13 Q
0 X
(13) 108 639.33 T
(Libraries and Modules) 135 639.33 T
(187) 261.15 639.33 T
1 11 Q
(13.1) 135 619.67 T
(Libraries  188) 171 619.67 T
(13.2) 135 605.67 T
(Modules  189) 171 605.67 T
(13.3) 135 591.67 T
(Sour) 171 591.67 T
(ce code, modules, and libraries  194) 193.56 591.67 T
(13.4) 135 577.67 T
(Module de\336nition  196) 171 577.67 T
(13.5) 135 563.67 T
(Library de\336nition  202) 171 563.67 T
(13.6) 135 549.67 T
(Inter) 171 549.67 T
(change \336les  203) 194.11 549.67 T
(13.7) 135 535.67 T
(The) 171 535.67 T
4 10 Q
(time-library) 192.16 535.67 T
1 11 Q
( \336le  204) 264.16 535.67 T
(13.8) 135 521.67 T
(Component library  209) 171 521.67 T
(13.9) 135 507.67 T
(Pr) 171 507.67 T
(otocol design  214) 181.79 507.67 T
(13.10) 135 493.67 T
(Summary  218) 171 493.67 T
3 13 Q
(14) 108 471.33 T
(Four Complete Libraries) 135 471.33 T
(221) 271.21 471.33 T
1 11 Q
(14.1) 135 451.67 T
(The) 171 451.67 T
4 10 Q
(sixty-unit) 192.16 451.67 T
1 11 Q
( library  221) 252.16 451.67 T
(14.2) 135 437.67 T
(The) 171 437.67 T
4 10 Q
(say) 192.16 437.67 T
1 11 Q
( library  223) 210.16 437.67 T
(14.3) 135 423.67 T
(The) 171 423.67 T
4 10 Q
(time) 192.16 423.67 T
1 11 Q
( library  225) 216.16 423.67 T
(14.4) 135 409.67 T
(The) 171 409.67 T
4 10 Q
(angle) 192.16 409.67 T
1 11 Q
( library  229) 222.16 409.67 T
(14.5) 135 395.67 T
(Summary  234) 171 395.67 T
3 13 Q
(Part III.) 220.12 367.33 T
(Sample Application) 262.17 367.33 T
(235) 374.1 367.33 T
(15) 108 342.33 T
(Design of the Airport Application) 135 342.33 T
(237) 315.02 342.33 T
1 11 Q
(15.1) 135 322.67 T
(Goals of the airport application  237) 171 322.67 T
(15.2) 135 308.67 T
(Objects that model an airport  238) 171 308.67 T
(15.3) 135 294.67 T
(Behaviors of the objects  240) 171 294.67 T
(15.4) 135 280.67 T
(The vehicle-container pr) 171 280.67 T
(otocol  241) 289.37 280.67 T
(15.5) 135 266.67 T
(Sorted sequences  242) 171 266.67 T
(15.6) 135 252.67 T
(T) 171 252.67 T
(esting  243) 176.73 252.67 T
(15.7) 135 238.67 T
(Summary  243) 171 238.67 T
3 13 Q
(16) 108 216.33 T
(Definition of a New Collection) 135 216.33 T
(245) 298.45 216.33 T
1 11 Q
(16.1) 135 196.67 T
(The) 171 196.67 T
4 10 Q
(sorted-sequence.dylan) 192.16 196.67 T
1 11 Q
( \336le  246) 318.16 196.67 T
(16.2) 135 182.67 T
(The) 171 182.67 T
4 10 Q
(sorted-sequence-library.dylan) 192.16 182.67 T
1 11 Q
( \336le  252) 366.16 182.67 T
(16.3) 135 168.67 T
(The) 171 168.67 T
4 10 Q
(sorted-sequence.lid) 192.16 168.67 T
1 11 Q
( \336le  253) 306.16 168.67 T
(16.4) 135 154.67 T
(Summary  253) 171 154.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "viii" 6
%%Page: "ix" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Contents) 487.75 677.67 T
2 F
(ix) 532.09 677.67 T
108 82.17 540 108 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 504 648 R
V
3 13 Q
0 X
(17) 108 639.33 T
(The Airport Application) 135 639.33 T
(255) 266.46 639.33 T
1 11 Q
(17.1) 135 619.67 T
(The) 171 619.67 T
4 10 Q
(definitions.dylan) 192.16 619.67 T
1 11 Q
( \336le  255) 294.16 619.67 T
(17.2) 135 605.67 T
(The) 171 605.67 T
4 10 Q
(airport-classes.dylan) 192.16 605.67 T
1 11 Q
( \336le  256) 318.16 605.67 T
(17.3) 135 591.67 T
(The) 171 591.67 T
4 10 Q
(vehicle-dynamics.dylan) 192.16 591.67 T
1 11 Q
( \336le  265) 324.16 591.67 T
(17.4) 135 577.67 T
(The) 171 577.67 T
4 10 Q
(schedule.dylan) 192.16 577.67 T
1 11 Q
( \336le  267) 276.16 577.67 T
(17.5) 135 563.67 T
(The) 171 563.67 T
4 10 Q
(airport-test.dylan) 192.16 563.67 T
1 11 Q
( \336le  276) 300.16 563.67 T
(17.6) 135 549.67 T
(The) 171 549.67 T
4 10 Q
(definitions-library.dylan) 192.16 549.67 T
1 11 Q
( \336le  280) 342.16 549.67 T
(17.7) 135 535.67 T
(The) 171 535.67 T
4 10 Q
(definitions.lid) 192.16 535.67 T
1 11 Q
( \336le  281) 282.16 535.67 T
(17.8) 135 521.67 T
(The) 171 521.67 T
4 10 Q
(airport-library.dylan) 192.16 521.67 T
1 11 Q
( \336le  281) 318.16 521.67 T
(17.9) 135 507.67 T
(The) 171 507.67 T
4 10 Q
(airport.lid) 192.16 507.67 T
1 11 Q
( \336le  282) 258.16 507.67 T
(17.10) 135 493.67 T
(The) 171 493.67 T
4 10 Q
(airport-test-library.dylan) 192.16 493.67 T
1 11 Q
( \336le  282) 348.16 493.67 T
(17.1) 135 479.67 T
(1) 153.65 479.67 T
(The) 171 479.67 T
4 10 Q
(airport-test.lid) 192.16 479.67 T
1 11 Q
( \336le  283) 288.16 479.67 T
(17.12) 135 465.67 T
(Summary  283) 171 465.67 T
3 13 Q
(Part IV.) 224.85 437.33 T
(Advanced Topics) 268.09 437.33 T
(285) 369.36 437.33 T
(18) 108 412.33 T
(Multiple Inheritance) 135 412.33 T
(287) 248.11 412.33 T
1 11 Q
(18.1) 135 392.67 T
(Example of multiple inheritance  288) 171 392.67 T
(18.2) 135 378.67 T
(Multiple inheritance and slots  292) 171 378.67 T
(18.3) 135 364.67 T
(The class pr) 171 364.67 T
(ecedence list  294) 228.59 364.67 T
(18.4) 135 350.67 T
(Multiple inheritance and method dispatch  300) 171 350.67 T
(18.5) 135 336.67 T
(Use of multiple inheritance  304) 171 336.67 T
(18.6) 135 322.67 T
(Summary  308) 171 322.67 T
3 13 Q
(19) 108 300.33 T
(Performance and Flexibility) 135 300.33 T
(309) 287.23 300.33 T
1 11 Q
(19.1) 135 280.67 T
(Execution model  309) 171 280.67 T
(19.2) 135 266.67 T
(Ef) 171 266.67 T
(\336ciency model  310) 181.19 266.67 T
(19.3) 135 252.67 T
(T) 171 252.67 T
(ype constraints  31) 176.75 252.67 T
(1) 266.63 252.67 T
(19.4) 135 238.67 T
(Limited types  315) 171 238.67 T
(19.5) 135 224.67 T
(Enumerations  318) 171 224.67 T
(19.6) 135 210.67 T
(Dir) 171 210.67 T
(ect methods  319) 186.86 210.67 T
(19.7) 135 196.67 T
(T) 171 196.67 T
(ail calls  320) 176.73 196.67 T
(19.8) 135 182.67 T
(T) 171 182.67 T
(yped generic functions  320) 176.75 182.67 T
(19.9) 135 168.67 T
(Open generic functions  322) 171 168.67 T
(19.10) 135 154.67 T
(Open classes  323) 171 154.67 T
(19.1) 135 140.67 T
(1) 153.65 140.67 T
(Sealed domains  324) 171 140.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "ix" 7
%%Page: "x" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(x) 72 677.67 T
0 F
(Contents) 86.25 677.67 T
72 81 504 108 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 504 648 R
V
1 11 Q
0 X
(19.12) 135 640.67 T
(Slot accessors  328) 171 640.67 T
(19.13) 135 626.67 T
(Primary classes  330) 171 626.67 T
(19.14) 135 612.67 T
(Additional ef) 171 612.67 T
(\336ciency information  331) 235.58 612.67 T
(19.15) 135 598.67 T
(Summary  335) 171 598.67 T
3 13 Q
(20) 108 576.33 T
(Exceptions) 135 576.33 T
(339) 204.88 576.33 T
1 11 Q
(20.1) 135 556.67 T
(An informal exception pr) 171 556.67 T
(otocol  339) 293.9 556.67 T
(20.2) 135 542.67 T
(A simple Dylan exception pr) 171 542.67 T
(otocol  342) 310.61 542.67 T
(20.3) 135 528.67 T
(Additional exception mechanisms  356) 171 528.67 T
(20.4) 135 514.67 T
(Pr) 171 514.67 T
(otected operations and the) 181.79 514.67 T
4 10 Q
(block) 313.58 514.67 T
1 11 Q
( constr) 343.58 514.67 T
(uct  356) 376.13 514.67 T
(20.5) 135 500.67 T
(Summary  358) 171 500.67 T
3 13 Q
(21) 108 478.33 T
(Macros) 135 478.33 T
(359) 185.32 478.33 T
1 11 Q
(21.1) 135 458.67 T
(Patterns and templates  360) 171 458.67 T
(21.2) 135 444.67 T
(Macr) 171 444.67 T
(o hygiene  363) 195.94 444.67 T
(21.3) 135 430.67 T
(Evaluation in macr) 171 430.67 T
(os  364) 263.31 430.67 T
(21.4) 135 416.67 T
(Constraints  365) 171 416.67 T
(21.5) 135 402.67 T
(Mor) 171 402.67 T
(e complex r) 191.56 402.67 T
(ules  368) 247.95 402.67 T
(21.6) 135 388.67 T
(Mor) 171 388.67 T
(e hygiene  369) 191.56 388.67 T
(21.7) 135 374.67 T
(Auxiliary macr) 171 374.67 T
(os  371) 244.43 374.67 T
(21.8) 135 360.67 T
(Summary  372) 171 360.67 T
3 13 Q
(Appendix A) 108 338.33 T
(Resources on Dylan) 180.23 338.33 T
(375) 295.72 338.33 T
(Appendix B) 108 313.33 T
(Dylan Object Model for C and C++ Programmers) 180.23 313.33 T
(381) 437.3 313.33 T
(Glossary) 108 288.33 T
(391) 166.63 288.33 T
(Index) 108 263.33 T
(405) 148.85 263.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "x" 8
%%Page: "xi" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(xi) 328.42 111 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.33 565.5 502.33 619.5 R
7 X
V
106.33 591.95 502.33 619.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.33 591.95 502.33 619.5 R
7 X
0 0 0 1 0 0 0 K
V
106.33 612.64 268.33 612.64 2 L
3 H
2 Z
0 X
N
106.33 603.64 268.33 603.64 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Pr) 106.33 571.95 T
(eface) 135.76 571.95 T
108 126 522 432 R
7 X
V
3 13 Q
0 X
(Dylan) 108 423.33 T
1 11 Q
-0.29 (Dylan \050DYnamic LANguage\051 is a new pr) 108 403.67 P
-0.29 (ogramming language invented by Apple) 304.36 403.67 P
-0.42 (Computer and several partners. Dylan is dynamic, is object-oriented, and delivers) 108 389.67 P
(ef) 108 375.67 T
(\336cient applications.) 116.73 375.67 T
(The Dylan language is de\336ned by) 135 361.67 T
0 F
(The Dylan Refer) 301.48 361.67 T
(ence Manual) 374.64 361.67 T
1 F
(, written by) 431.98 361.67 T
(Andr) 108 347.67 T
(ew Shalit, and published by Addison-W) 133.83 347.67 T
(esley \0501996\051. That manual is the) 327.97 347.67 T
(de\336nitive r) 108 333.67 T
(efer) 161.42 333.67 T
(ence on Dylan.) 179.76 333.67 T
0 F
(The Dylan Refer) 254.73 333.67 T
(ence Manual) 327.88 333.67 T
1 F
( is available on the) 385.22 333.67 T
(W) 108 319.67 T
(orld W) 117.99 319.67 T
(ide W) 151.41 319.67 T
(eb; see Appendix A,) 179.34 319.67 T
0 F
(Resour) 282.75 319.67 T
(ces on Dylan) 313.72 319.67 T
1 F
(, for details.) 371.37 319.67 T
(Dylan is up and r) 135 305.67 T
(unning. Y) 219.72 305.67 T
(ou can get it fr) 266.7 305.67 T
(om Harlequin, Carnegie Mellon) 336.7 305.67 T
(University) 108 291.67 T
(, Apple Computer) 158.34 291.67 T
(, Digitool, and other or) 245.98 291.67 T
(ganizations. Dylan implemen-) 356.7 291.67 T
-0.08 (tations r) 108 277.67 P
-0.08 (un on most of the popular computer platforms. Full-\337edged implementa-) 147.88 277.67 P
(tions pr) 108 263.67 T
(ovide both a compiler and a development envir) 145.37 263.67 T
(onment. Y) 376.45 263.67 T
(ou can obtain) 425.66 263.67 T
(public-domain implementations. See Appendix A,) 108 249.67 T
0 F
(Resour) 358.06 249.67 T
(ces on Dylan) 389.04 249.67 T
1 F
(.) 446.69 249.67 T
3 13 Q
(A) 108 218.33 T
(udience) 115.38 218.33 T
1 11 Q
(This book is written for application pr) 108 198.67 T
(ogrammers who have experience working) 292.62 198.67 T
(in a conventional language, such as C, Pascal, COBOL, FOR) 108 184.67 T
(TRAN, or BASIC, or) 397.84 184.67 T
(in an object-oriented language, such as C++, Java, Smalltalk, or Common LISP) 108 170.67 T
(with CLOS. Familiarity with object-oriented pr) 108 156.67 T
(ogramming and dynamic lan-) 335.47 156.67 T
(guages is not r) 108 142.67 T
(equir) 178.55 142.67 T
(ed. W) 203.96 142.67 T
(e do compar) 231.44 142.67 T
(e Dylan to C, C++, and Java in this book,) 291.8 142.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "xi" 9
%%Page: "xii" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(xii) 72 677.67 T
0 9.5 Q
(Preface) 94.33 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(but you can r) 108 640.67 T
(ead and understand the book without any knowledge of C, C++, or) 172.24 640.67 T
(Java.) 108 626.67 T
3 13 Q
(Goals of this book) 108 595.33 T
1 11 Q
(The primary goals of this book ar) 108 575.67 T
(e to teach you how to pr) 269.61 575.67 T
(ogram in Dylan, and) 387.3 575.67 T
(how to write pr) 108 561.67 T
(ograms in an object-oriented style. Along the way) 183.76 561.67 T
(, we hope to) 424.42 561.67 T
(convince you to use Dylan. It is intended to be a practical, elegant, and fun lan-) 108 547.67 T
(guage to use. This book is a tutorial on pr) 108 533.67 T
(ogramming in Dylan, and it does the) 309.1 533.67 T
(following:) 108 519.67 T
(\245) 117 499.67 T
(Begins with the most basic use of Dylan, and gradually expands to show) 135 499.67 T
(the mor) 135 485.67 T
(e powerful and advanced techniques.) 172.87 485.67 T
(\245) 117 465.67 T
(Gives the \337avor of working with the Dylan language in a typical Dylan) 135 465.67 T
(envir) 135 451.67 T
(onment.) 160.23 451.67 T
(\245) 117 431.67 T
(Shows how to de\336ne classes and methods that work together to solve a) 135 431.67 T
(pr) 135 417.67 T
(oblem.) 145.76 417.67 T
(\245) 117 397.67 T
(Shows how to use many of Dylan\325s classes, functions, and featur) 135 397.67 T
(es to good) 448.32 397.67 T
(ef) 135 383.67 T
(fect within the context of an example application.) 143.73 383.67 T
(\245) 117 363.67 T
(Intr) 135 363.67 T
(oduces the mor) 152.84 363.67 T
(e advanced featur) 227.64 363.67 T
(es of Dylan, including multiple inher-) 314.42 363.67 T
(itance, performance, exceptions, and macr) 135 349.67 T
(os.) 339.53 349.67 T
(This book does not attempt to be as complete as) 108 329.67 T
0 F
(The Dylan Refer) 343.04 329.67 T
(ence Manual) 416.19 329.67 T
1 F
(, and) 473.53 329.67 T
(does not pr) 108 315.67 T
(ovide the following kinds of material:) 162.91 315.67 T
(\245) 117 295.67 T
(Complete descriptions of all classes and functions pr) 135 295.67 T
(ovided by Dylan) 390.5 295.67 T
(\245) 117 275.67 T
(Complete descriptions of the detailed mechanisms in Dylan) 135 275.67 T
-0.17 (T) 108 255.67 P
-0.17 (o make full use of Dylan, pr) 113.73 255.67 P
-0.17 (ogrammers need) 248.01 255.67 P
0 F
-0.17 (The Dylan Refer) 332.5 255.67 P
-0.17 (ence Manual) 405.32 255.67 P
1 F
-0.17 (, as well) 462.49 255.67 P
(as this book.) 108 241.67 T
3 13 Q
(Or) 108 210.33 T
(ganization of this book) 120.3 210.33 T
1 11 Q
(W) 108 190.67 T
(e have divided the chapters of this book into four parts:) 117.99 190.67 T
(Part I,) 135 176.67 T
0 F
(Basic Concepts) 169.78 176.67 T
(,) 236.49 176.67 T
1 F
(intr) 241.99 176.67 T
(oduces the object-oriented and dynamic natur) 259.32 176.67 T
(e of) 482.8 176.67 T
(Dylan.) 108 162.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "xii" 10
%%Page: "xiii" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Preface) 486.39 677.67 T
2 11 Q
(xiii) 523.51 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 F
0 X
(Part II,) 135 640.67 T
0 F
(Intermediate T) 173.49 640.67 T
(opics) 237.96 640.67 T
(,) 260.16 640.67 T
1 F
( pr) 262.91 640.67 T
(ovides mor) 276.42 640.67 T
(e details about Dylan\325s object-) 331.11 640.67 T
(oriented techniques, and covers collections \050that is, how to use strings, vectors,) 108 626.67 T
(lists, and other kinds of collections\051, contr) 108 612.67 T
(ol \337ow) 310.31 612.67 T
(, libraries, and modules.) 343.12 612.67 T
(Part III,) 135 598.67 T
0 F
(Sample Application) 177.2 598.67 T
(,) 264.48 598.67 T
1 F
( contains a complete working application that) 267.23 598.67 T
(illustrates the topics cover) 108 584.67 T
(ed in Parts I and II.) 234.83 584.67 T
-0.07 (Part IV) 135 570.67 P
-0.07 (,) 167.99 570.67 P
0 F
-0.07 (Advanced T) 176.11 570.67 P
-0.07 (opics) 228.49 570.67 P
-0.07 (,) 250.69 570.67 P
1 F
-0.07 ( covers four ar) 253.44 570.67 P
-0.07 (eas that ar) 323.17 570.67 P
-0.07 (e sophisticated and power-) 372.69 570.67 P
(ful: multiple inheritance, performance versus \337exibility) 108 556.67 T
(, exceptions, and macr) 375.42 556.67 T
(os.) 483.61 556.67 T
(The chapters in Part IV show how we can impr) 108 542.67 T
(ove the example shown in Part III) 336.48 542.67 T
(by applying advanced techniques.) 108 528.67 T
3 13 Q
(Pr) 108 497.33 T
(ogram e) 119.06 497.33 T
(xamples) 160.39 497.33 T
1 11 Q
(This book includes many pr) 108 477.67 T
(ogram examples. Our appr) 243.68 477.67 T
(oach is to show how evo-) 374.76 477.67 T
-0.4 (lutionary pr) 108 463.67 P
-0.4 (ogramming might work by pr) 166.1 463.67 P
-0.4 (esenting an example simply at \336rst, and) 310.25 463.67 P
(then expanding it gradually) 108 449.67 T
(.) 242.71 449.67 T
-0.12 (In Part I,) 135 435.67 P
0 F
-0.12 (Basic Concepts) 182.15 435.67 P
1 F
-0.12 (, we develop an example of a simple library that r) 248.73 435.67 P
-0.12 (ep-) 488.46 435.67 P
(r) 108 421.67 T
(esents time and position. That library is needed for the sample airport applica-) 112.15 421.67 T
(tion that we develop in Part III,) 108 407.67 T
0 F
(Sample Application) 265.55 407.67 T
1 F
(. The airport application) 352.84 407.67 T
(simulates airplanes, r) 108 393.67 T
(unways, gates, \337ights, and airports. Its goal is to schedule) 211.63 393.67 T
(gates for arriving and departing air) 108 379.67 T
(craft. T) 279.45 379.67 T
(o do scheduling, we need the library) 312.65 379.67 T
(that r) 108 365.67 T
(epr) 133.97 365.67 T
(esents and manipulates time and position.) 150 365.67 T
(Harlequin and Addison-W) 135 351.67 T
(esley pr) 264.91 351.67 T
(ovide W) 302.94 351.67 T
(orld W) 343.09 351.67 T
(ide W) 376.51 351.67 T
(eb pages containing) 404.43 351.67 T
(the sour) 108 337.67 T
(ce code of the pr) 147.46 337.67 T
(ogram examples. See Section A.1 in Appendix A,) 227.17 337.67 T
0 F
(Resour) 108 323.67 T
(ces on Dylan) 138.98 323.67 T
1 F
(.) 196.63 323.67 T
(Dylan\325s cor) 135 309.67 T
(e language is lean. It does not include input\320output facilities,) 190.24 309.67 T
(support for a user interface, or interfaces for communicating with pr) 108 295.67 T
(ograms writ-) 439.76 295.67 T
(ten in other languages. These featur) 108 281.67 T
(es ar) 281.51 281.67 T
(e available in libraries supplied by ven-) 303.84 281.67 T
(dors or in the public domain. W) 108 267.67 T
(e want this book to be applicable to the widest) 262.34 267.67 T
(possible range of Dylan implementations, so we focus on the cor) 108 253.67 T
(e Dylan lan-) 420.97 253.67 T
(guage, and use only those library interfaces that ar) 108 239.67 T
(e widely available.) 353.52 239.67 T
3 13 Q
(Con) 108 208.33 T
(ventions used in this book) 128.31 208.33 T
1 11 Q
(W) 108 188.67 T
(e use boldface when we intr) 117.99 188.67 T
(oduce new terms, such as) 253.93 188.67 T
2 F
(library) 381.11 188.67 T
1 F
(.) 414.11 188.67 T
(W) 135 174.67 T
(e use bold typewriter font for code examples and names of Dylan func-) 144.99 174.67 T
(tions and objects, such as) 108 160.67 T
4 10 Q
(define method) 232.79 160.67 T
1 11 Q
(. Code comments appear in oblique) 310.8 160.67 T
(typewriter font \321 for example,) 108 146.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "xiii" 11
%%Page: "xiv" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(xiv) 72 677.67 T
0 9.5 Q
(Preface) 96.78 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
5 9 Q
0 X
(// Method that says a greeting) 108 642 T
4 F
(define method say-greeting \050greeting :: <object>\051;) 108 631 T
(format-out\050"%s\134n", greeting\051;) 118.8 620 T
(end;) 108 609 T
1 11 Q
(Many Dylan envir) 108 588.67 T
(onments pr) 196.89 588.67 T
(ovide a) 252.44 588.67 T
2 F
(listener) 290.85 588.67 T
1 F
(, which enables you to type in) 327.91 588.67 T
(expr) 108 574.67 T
(essions and to see their r) 129.7 574.67 T
(eturn values and output. W) 248.69 574.67 T
(e use a hypothetical) 381.82 574.67 T
(Dylan listener to show the r) 108 560.67 T
(esult of evaluating Dylan expr) 242.66 560.67 T
(essions:) 389.74 560.67 T
6 9 Q
(?) 108 540 T
4 F
(say-greeting\050"hi, there"\051;) 118.8 540 T
6 F
(hi, there) 108 529 T
1 11 Q
(In our hypothetical listener) 108 508.67 T
(, the Dylan pr) 239.23 508.67 T
(ompt is the question mark,) 305.98 508.67 T
6 9 Q
(?) 439.11 508.67 T
1 11 Q
(. The) 444.51 508.67 T
4 10 Q
(bold) 471.17 508.67 T
(typewriter font) 108 494.67 T
1 11 Q
( shows what the user types. The) 198 494.67 T
6 10 Q
(bold-oblique typewriter) 356.4 494.67 T
(font) 108 480.67 T
1 11 Q
( shows what the listener displays.) 132 480.67 T
(W) 135 466.67 T
(e use boxes to give information about Dylan\325s naming conventions, cau-) 144.99 466.67 T
(tions, performance implications, comparisons to other languages such as C or) 108 452.67 T
(C++, envir) 108 438.67 T
(onment notes, and automatic-storage-management notes. Her) 159.87 438.67 T
(e is an) 460.43 438.67 T
(example:) 108 424.67 T
3 13 Q
(An ima) 108 286.33 T
(g) 143.45 286.33 T
(e of Dylan) 150.07 286.33 T
1 11 Q
(Jonathan Bachrach designed the image on the cover of this book. He played with) 108 266.67 T
(the meaning that Dylan has for him by cr) 108 252.67 T
(eating colorful tiles that appear to take) 307.79 252.67 T
(of) 108 238.67 T
(f and \337y) 117.47 238.67 T
(. Each tile has its own vibrant color) 156.84 238.67 T
(, unique personality) 326.16 238.67 T
(, and individual) 422.39 238.67 T
(str) 108 224.67 T
(ength. The tiles \337y independently) 120.4 224.67 T
(, but tend to \337ock with other tiles to achieve) 283.01 224.67 T
(harmony within a community) 108 210.67 T
(. Each tile could r) 253.23 210.67 T
(epr) 337.34 210.67 T
(esent a Dylan component, or a) 353.37 210.67 T
(Dylan pr) 108 196.67 T
(ogrammer) 151.24 196.67 T
(. Once Bachrach was satis\336ed with the still image, he took the) 201.43 196.67 T
(next step, and built an animation of the tiles \337ying gracefully thr) 108 182.67 T
(ough space,) 421.24 182.67 T
(\337ocking together) 108 168.67 T
(, and cr) 189.93 168.67 T
(eating a dynamic new world.) 225.83 168.67 T
(Bachrach wr) 135 154.67 T
(ote the animation and physical-modeling portions of the pr) 195.71 154.67 T
(o-) 483.34 154.67 T
(gram in Dylan, using Open GL as the thr) 108 140.67 T
(ee-dimensional r) 306.37 140.67 T
(endering substrate.) 387.75 140.67 T
2 F
(Environment note:) 141 390.67 T
1 F
(Our hypothetical development envir) 237.25 390.67 T
(onment) 415.38 390.67 T
(does not r) 141 376.67 T
(epr) 189.3 376.67 T
(esent any particular Dylan development envir) 205.33 376.67 T
(on-) 429.32 376.67 T
(ment. Also note that the Dylan language does not r) 141 362.67 T
(equir) 388.76 362.67 T
(e a devel-) 414.17 362.67 T
(opment envir) 141 348.67 T
(onment, so any given implementation may not) 206.57 348.67 T
(pr) 141 334.67 T
(ovide one.) 151.76 334.67 T
135 403.88 135 327.12 2 L
V
0.25 H
0 Z
N
486 403.88 486 327.12 2 L
V
N
134.88 404 486.12 404 2 L
V
N
134.88 327 486.12 327 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "xiv" 12
%%Page: "xv" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Preface) 491.27 677.67 T
2 11 Q
(xv) 528.38 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 F
0 X
(Steve Rowley pr) 108 640.67 T
(ovided the physics equations. Bachrach demonstrated his anima-) 187.49 640.67 T
(tion at the Apple W) 108 626.67 T
(orldwide Developers Confer) 202.78 626.67 T
(ence in 1995.) 341.56 626.67 T
3 13 Q
(Ac) 108 595.33 T
(kno) 121.43 595.33 T
(wledgments) 140.24 595.33 T
1 11 Q
(W) 108 575.67 T
(e ar) 117.99 575.67 T
(e fortunate to have at Harlequin a gr) 135.65 575.67 T
(eat pool of Dylan talent and expertise,) 312.85 575.67 T
(including original inventors of the language, compiler gur) 108 561.67 T
(us, and envir) 390.72 561.67 T
(onment) 454.13 561.67 T
-0.13 (designers. A cor) 108 547.67 P
-0.13 (e gr) 186.23 547.67 P
-0.13 (oup of Dylan experts and two expert C pr) 204.38 547.67 P
-0.13 (ogrammers gave us) 406.08 547.67 P
(valuable technical advice and encouragement fr) 108 533.67 T
(om the \336rst to the \336nal days of) 340.3 533.67 T
(our pr) 108 519.67 T
(oject: Fr) 138.49 519.67 T
(eeland Abbott, Jonathan Bachrach, Kim Barr) 176.57 519.67 T
(ett, Paul Butcher) 391.8 519.67 T
(, Paul) 471.49 519.67 T
(Haahr) 108 505.67 T
(, T) 138.09 505.67 T
(ony Mann, and Keith Playfor) 149.32 505.67 T
(d. Other people r) 290.64 505.67 T
(eviewed our drafts along) 373.73 505.67 T
(the way: Roman Budzianowski, Bob Cassels, Bill Chiles, Christopher Fry) 108 491.67 T
(, David) 460.02 491.67 T
-0.28 (Gray) 108 477.67 P
-0.28 (, Eliot Miranda, Scott McKay) 131.13 477.67 P
-0.28 (, Nosa Omor) 268.82 477.67 P
-0.28 (ogbe, Mike Plusch, and Andy Sizer) 330.33 477.67 P
-0.28 (.) 498.78 477.67 P
(W) 108 463.67 T
(e ar) 117.99 463.67 T
(e grateful to Harlequin people whose expertise lies in pr) 135.65 463.67 T
(ogramming lan-) 408.51 463.67 T
(guages other than Dylan, for giving us their perspectives on our book: Judy) 108 449.67 T
(Anderson, W) 108 435.67 T
(esley Dunnington, David Jones, Andy Latto, Peter Norvig, Kent Pit-) 171.85 435.67 T
-0.18 (man, Steve Rowley) 108 421.67 P
-0.18 (, Craig Swanson, Jason T) 199.51 421.67 P
-0.18 (r) 318.17 421.67 P
-0.18 (enouth, Helen V) 322.32 421.67 P
-0.18 (ickers, and Evan W) 401.14 421.67 P
-0.18 (il-) 493.93 421.67 P
(liams.) 108 407.67 T
(Andr) 135 393.67 T
(ew Shir) 160.83 393.67 T
(es car) 197.55 393.67 T
(efully tested all our pr) 224.76 393.67 T
(ogram examples. Br) 332.58 393.67 T
(ent T) 429.28 393.67 T
(ennefoss) 453.02 393.67 T
(gave us a gr) 108 379.67 T
(eat deal of help with graphics. Gary Palter shar) 166.41 379.67 T
(ed his Macintosh) 395.06 379.67 T
(expertise when we needed it. Richar) 108 365.67 T
(d Br) 284 365.67 T
(ooksby let us steal time fr) 304.34 365.67 T
(om other) 428.23 365.67 T
(pr) 108 351.67 T
(ojects to write this book. Anne Altherr) 118.76 351.67 T
(, Shar) 303.74 351.67 T
(on V) 331.07 351.67 T
(an Gundy) 353.16 351.67 T
(, Clive Harris, and) 400.85 351.67 T
-0.05 (Sang Lee helped us to navigate the legal and business issues. Ken Jackson helped) 108 337.67 P
(us to get the ball r) 108 323.67 T
(olling, and gave it an extra push when needed. Jo Marks is one) 195 323.67 T
(of Dylan\325s biggest fans \321 he ur) 108 309.67 T
(ged us to write this book as a way to explain the) 260.34 309.67 T
(power of Dylan to a wider audience.) 108 295.67 T
-0.1 (W) 135 281.67 P
-0.1 (e ar) 144.99 281.67 P
-0.1 (e grateful to Dylan experts outside of Harlequin who gave us thought-) 162.55 281.67 P
(ful and thor) 108 267.67 T
(ough r) 165.76 267.67 T
(eviews of the book: Scott Fahlman, Robert Futr) 197.82 267.67 T
(elle, David) 425.28 267.67 T
(Moon, and Andr) 108 253.67 T
(ew Shalit.) 189.52 253.67 T
(Our editors at Addison-W) 135 239.67 T
(esley cheerfully and capably steer) 261.68 239.67 T
(ed us thr) 425.63 239.67 T
(ough) 468.55 239.67 T
(the pr) 108 225.67 T
(ocess and helped to shape our book. W) 136.76 225.67 T
(e ar) 325.57 225.67 T
(e grateful to L) 343.23 225.67 T
(yn Dupr\216, Nancy) 410.77 225.67 T
(Fenton, and Helen Goldstein. Eileen Hof) 108 211.67 T
(f designed the cover using Bachrach\325s) 305.08 211.67 T
(image. It was, once again, a gr) 108 197.67 T
(eat pleasur) 254.22 197.67 T
(e to work with Peter Gor) 307.35 197.67 T
(don.) 427.63 197.67 T
(W) 135 183.67 T
(e thank the people at Apple Computer who combined their vision of the) 144.99 183.67 T
(futur) 108 169.67 T
(e with har) 132.66 169.67 T
(d work to make Dylan a r) 181.84 169.67 T
(eality) 306.27 169.67 T
(. W) 331.93 169.67 T
(e thank the people at Carnegie) 347.42 169.67 T
(Mellon University and Harlequin who continue to move Dylan forwar) 108 155.67 T
(d with) 450.61 155.67 T
(insight and cr) 108 141.67 T
(eativity) 174.73 141.67 T
(.) 210.18 141.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "xv" 13
%%Page: "xvi" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 135 522 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "xvi" 14
%%Page: "1" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(1) 303.62 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 530.98 512.43 590.14 R
7 X
V
1 30 Q
0 X
(Part I.) 108 570.14 T
(Basic Concepts) 202.86 570.14 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
(Chapter 1,) 108 424.67 T
0 F
(Intr) 164.01 424.67 T
(oduction) 181.54 424.67 T
1 F
(, describes the goals of Dylan, and tells you wher) 220.23 424.67 T
(e Dylan) 458.02 424.67 T
(\336ts in the world of pr) 108 410.67 T
(ogramming languages.) 211.39 410.67 T
-0.28 (Chapter 2,) 135 396.67 P
0 F
-0.28 (Quick Start) 190.17 396.67 P
1 F
-0.28 (, is a practical guide for getting started using Dylan. It) 242.33 396.67 P
-0.33 (shows the look and feel of a hypothetical Dylan listener) 108 382.67 P
-0.33 (, intr) 374.08 382.67 P
-0.33 (oduces the most basic) 396.59 382.67 P
-0.23 (concepts of Dylan, and pr) 108 368.67 P
-0.23 (esents a complete Dylan pr) 231.9 368.67 P
-0.23 (ogram. Y) 362.35 368.67 P
-0.23 (ou can type in these) 405.62 368.67 P
(examples and experiment with Dylan.) 108 354.67 T
-0.39 (Chapter 3,) 135 340.67 P
0 F
-0.39 (Methods, Classes, and Objects) 189.85 340.67 P
1 F
-0.39 (, intr) 323.22 340.67 P
-0.39 (oduces the concepts of methods,) 345.67 340.67 P
(built-in classes, class inheritance, and explains what it means to be an object.) 108 326.67 T
(In Chapters 4 thr) 135 312.67 T
(ough 7, we start to develop an example of a library that) 217.17 312.67 T
(r) 108 298.67 T
(epr) 112.15 298.67 T
(esents dif) 128.17 298.67 T
(fer) 174.16 298.67 T
(ent kinds of time and position. A) 187.24 298.67 T
2 F
(library) 349.9 298.67 T
1 F
( is a complete unit of) 384.12 298.67 T
(code that can be used by many dif) 108 284.67 T
(fer) 273.95 284.67 T
(ent clients. Our eventual goal in this book is) 287.02 284.67 T
(to develop a sample application that handles the scheduling of air) 108 270.67 T
(craft that ar) 428.05 270.67 T
(e) 484.24 270.67 T
-0.39 (arriving at, and departing fr) 108 256.67 P
-0.39 (om, an airport. For mor) 242.8 256.67 P
-0.39 (e information, see Chapter 15,) 355.31 256.67 P
0 F
-0.25 (Design of the Airport Application) 108 242.67 P
1 F
-0.25 (. The airport application will use the time and posi-) 256.91 242.67 P
(tion library) 108 228.67 T
(.) 161.51 228.67 T
(Also in Chapters 4 thr) 135 214.67 T
(ough 7, we show how to write object-oriented pr) 241.84 214.67 T
(o-) 478.31 214.67 T
(grams in Dylan. W) 108 200.67 T
(e explain class and method de\336nition, class inheritance,) 198.66 200.67 T
(method dispatch, and modularity) 108 186.67 T
(.) 270.69 186.67 T
(Chapter 8,) 135 172.67 T
0 F
(A Simple Library) 191.01 172.67 T
1 F
( contains the code developed in Part I as a com-) 268.23 172.67 T
(plete working library) 108 158.67 T
(.) 210.37 158.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 15
%%Page: "2" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 126 522 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 16
%%Page: "3" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(3) 303.62 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(1) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(1) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Intr) 109 566.45 T
(oduction) 157.66 566.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
(How many days did you spend in the past year tracking down elusive memory) 108 424.67 T
(leaks and r) 108 410.67 T
(efer) 161.02 410.67 T
(ences to unallocated or fr) 179.37 410.67 T
(eed memory?) 301.51 410.67 T
(How much time did you spend documenting which of the ar) 135 396.67 T
(guments to) 430.87 396.67 T
-0.14 (your functions ar) 108 382.67 P
-0.14 (e) 191.41 382.67 P
2 F
-0.14 (input) 199.29 382.67 P
1 F
-0.14 ( and which ar) 226.77 382.67 P
-0.14 (e) 292.93 382.67 P
2 F
-0.14 (output) 300.81 382.67 P
1 F
-0.14 ( ar) 334.42 382.67 P
-0.14 (guments \321 and making sur) 346.67 382.67 P
-0.14 (e all) 481.61 382.67 P
(the callers of those functions agr) 108 368.67 T
(ee?) 264.87 368.67 T
-0.21 (Do you have tr) 135 354.67 P
-0.21 (ouble following your own pr) 207.03 354.67 P
-0.21 (ograms\325 contr) 346.8 354.67 P
-0.21 (ol \337ow because so) 413.78 354.67 P
(much of it is devoted to checking and r) 108 340.67 T
(eturning err) 297.38 340.67 T
(or codes?) 355.84 340.67 T
(How many conditional statements in your pr) 135 326.67 T
(ograms ar) 354.37 326.67 T
(e ther) 403.11 326.67 T
(e because you) 430.54 326.67 T
(need to perform the same general operation in a dif) 108 312.67 T
(fer) 357.88 312.67 T
(ent way for dif) 370.95 312.67 T
(fer) 442.65 312.67 T
(ent kinds) 455.73 312.67 T
(of data? How much time do you spend updating them to handle new types of) 108 298.67 T
(data?) 108 284.67 T
(How often have you wished that you could leave the types of certain data) 135 270.67 T
(unspeci\336ed while you develop an application \321 but later add the type informa-) 108 256.67 T
(tion to impr) 108 242.67 T
(ove err) 165.96 242.67 T
(or checking and performance?) 199.96 242.67 T
(How much time do you spend r) 135 228.67 T
(ecompiling and r) 290.53 228.67 T
(elinking your application) 373.4 228.67 T
(just to test a minor modi\336cation to the code?) 108 214.67 T
(Softwar) 108 186.67 T
(e development has pr) 145.85 186.67 T
(ogr) 250.96 186.67 T
(essed, but softwar) 267.23 186.67 T
(e pr) 355.1 186.67 T
(oductivity has failed to) 373.88 186.67 T
-0.12 (keep up with advances in har) 108 172.67 P
-0.12 (dwar) 250.85 172.67 P
-0.12 (e. Despite a pr) 276.39 172.67 P
-0.12 (oliferation of development tools) 345.69 172.67 P
(and envir) 108 158.67 T
(onments, pr) 154.61 158.67 T
(ogrammers expend too much ef) 212.91 158.67 T
(fort on tasks that the pr) 367.49 158.67 T
(o-) 480.87 158.67 T
(gramming language and envir) 108 144.67 T
(onment should make unnecessary) 255.95 144.67 T
(.) 420.73 144.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 17
%%Page: "4" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(4) 72 677.67 T
0 F
(Chapter 1) 86.25 677.67 T
(Introduction) 133.48 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Each language in wide use for applications has advantages and disadvan-) 135 640.67 T
-0.15 (tages. One way to compar) 108 626.67 P
-0.15 (e languages is to imagine them arrayed along two axes.) 233.85 626.67 P
(One axis ranges fr) 108 612.67 T
(om) 195.71 612.67 T
2 F
(procedural) 214.18 612.67 T
1 F
( to) 268.57 612.67 T
2 F
(object-oriented) 283.66 612.67 T
1 F
( languages. The other axis) 360.03 612.67 T
(ranges fr) 108 598.67 T
(om) 150.86 598.67 T
2 F
(static) 169.32 598.67 T
1 F
( to) 195.58 598.67 T
2 F
(dynamic) 210.67 598.67 T
1 F
( languages.) 254.06 598.67 T
(\245) 117 578.67 T
(A pr) 135 578.67 T
(ogram in a) 157.07 578.67 T
2 F
(procedural) 212.1 578.67 T
1 F
( language consists of) 266.48 578.67 T
2 F
(functions) 369.96 578.67 T
1 F
( operating on) 417.61 578.67 T
2 F
(data) 135 564.67 T
1 F
(. The pr) 156.38 564.67 T
(ogramming task is to choose the best available r) 193.81 564.67 T
(epr) 426.15 564.67 T
(esentation) 442.17 564.67 T
-0.18 (for data, and the best algorithms for manipulating the data. Languages near) 135 550.67 P
(the pr) 135 536.67 T
(ocedural end of the axis include C, FOR) 163.76 536.67 T
(TRAN, and COBOL.) 356.5 536.67 T
(\245) 117 516.67 T
(A pr) 135 516.67 T
(ogram in an) 157.07 516.67 T
2 F
(object-oriented) 218.5 516.67 T
1 F
( language consists of) 294.87 516.67 T
2 F
(objects) 398.35 516.67 T
1 F
(, categorized) 433.78 516.67 T
(by) 135 502.67 T
2 F
(class) 149.95 502.67 T
1 F
(, that combine data and behavior) 173.76 502.67 T
(. The pr) 333.03 502.67 T
(ogramming task is to) 370.45 502.67 T
(de\336ne the best class r) 135 488.67 T
(elations to r) 238.24 488.67 T
(epr) 295.3 488.67 T
(esent objects, and the best set of opera-) 311.33 488.67 T
(tions that objects of r) 135 474.67 T
(elated classes support. Languages near the object-) 235.82 474.67 T
(oriented end of the axis include C++, Java, Smalltalk, and the Common) 135 460.67 T
(LISP Object System \050CLOS\051.) 135 446.67 T
(\245) 117 426.67 T
(A) 135 426.67 T
2 F
(static) 146.31 426.67 T
1 F
( language r) 172.57 426.67 T
(equir) 226.95 426.67 T
(es most pr) 252.36 426.67 T
(ogram str) 302.52 426.67 T
(uctur) 349.46 426.67 T
(e \321 such as the types of) 375.34 426.67 T
(variables and function ar) 135 412.67 T
(guments \321 to be determined at compile time. The) 256.27 412.67 T
-0.14 (compiler can detect err) 135 398.67 P
-0.14 (ors and optimize performance at the cost of r) 245.92 398.67 P
-0.14 (un-time) 462.92 398.67 P
(\337exibility) 135 384.67 T
(. Languages near the static end of the axis include C, C++, and) 180 384.67 T
(FOR) 135 370.67 T
(TRAN.) 156.7 370.67 T
(\245) 117 350.67 T
(A) 135 350.67 T
2 F
(dynamic) 146.31 350.67 T
1 F
( language allows you to make mor) 189.69 350.67 T
(e r) 357.49 350.67 T
(un-time changes to pr) 369.76 350.67 T
(o-) 476.07 350.67 T
(gram str) 135 336.67 T
(uctur) 175.93 336.67 T
(e, such as passing ar) 201.81 336.67 T
(guments of dif) 300.39 336.67 T
(fer) 371.32 336.67 T
(ent types to the same) 384.4 336.67 T
(function and, in some languages, de\336ning new types or classes. A dynamic) 135 322.67 T
(envir) 135 308.67 T
(onment might allow r) 160.23 308.67 T
(un-time de\336nition and linking. Languages near) 266.22 308.67 T
(the dynamic end of the axis include Common LISP and Smalltalk.) 135 294.67 T
(Figur) 108 274.67 T
(e 1.1 shows the comparison of several popular computer) 134.21 274.67 T
(-pr) 408.62 274.67 T
(ogramming lan-) 423.04 274.67 T
(guages on a graph.) 108 260.67 T
(In r) 135 246.67 T
(eality) 152.01 246.67 T
(, few languages in commer) 177.66 246.67 T
(cial use ar) 308.25 246.67 T
(e pur) 356.75 246.67 T
(ely pr) 382.16 246.67 T
(ocedural or object) 410.25 246.67 T
(oriented, pur) 108 232.67 T
(ely static or dynamic. In fact, the tr) 171.69 232.67 T
(end has been to add missing ele-) 340.07 232.67 T
(ments fr) 108 218.67 T
(om one pole to languages that ar) 148.19 218.67 T
(e close to the opposite pole. C++ adds) 306.89 218.67 T
(object-oriented featur) 108 204.67 T
(es to C; dynamic linking is becoming mor) 212.41 204.67 T
(e common; LISP) 414.32 204.67 T
(and Smalltalk vendors have made applications smaller and mor) 108 190.67 T
(e ef) 418.38 190.67 T
(\336cient. This) 435.13 190.67 T
(work, however) 108 176.67 T
(, is hamper) 181.01 176.67 T
(ed by the need to maintain compatibility with featur) 234.76 176.67 T
(es) 489.02 176.67 T
(of the language that wer) 108 162.67 T
(e not designed with objects, dynamism, or performance) 226.33 162.67 T
(in mind.) 108 148.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 18
%%Page: "5" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Chapter 1) 429.79 677.67 T
(Introduction) 477.02 677.67 T
2 F
(5) 535.25 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Dylan, in contrast, is a new language that integrates the best ideas fr) 108 268.67 T
(om object-) 438.79 268.67 T
(oriented, pr) 108 254.67 T
(ocedural, dynamic, and static languages, while avoiding many of the) 165.06 254.67 T
(drawbacks. Figur) 108 240.67 T
(e 1.2 shows wher) 192.7 240.67 T
(e Dylan \336ts on the graph.) 275.87 240.67 T
(Dylan\325s goals ar) 135 226.67 T
(e simple:) 213.09 226.67 T
(\245) 117 206.67 T
(Pr) 135 206.67 T
(omote modular) 145.79 206.67 T
(, r) 220.43 206.67 T
(eusable, component-oriented pr) 230.07 206.67 T
(ograms.) 385.04 206.67 T
(\245) 117 186.67 T
(Support powerful and familiar pr) 135 186.67 T
(ocedural pr) 298.17 186.67 T
(ogramming.) 354.24 186.67 T
(\245) 117 166.67 T
(Encourage rapid and pr) 135 166.67 T
(oductive development of pr) 250.88 166.67 T
(ograms.) 386.34 166.67 T
(\245) 117 146.67 T
(Permit delivery of safe, ef) 135 146.67 T
(\336cient, compact applications.) 259.34 146.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 288.01 504 296 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 1.1) 127.18 299.33 T
8 F
(Object-or) 179.98 299.33 T
(iented and dynamic e) 221.24 299.33 T
(xtents of prog) 315.99 299.33 T
(r) 376.48 299.33 T
(amming languages) 379.71 299.33 T
(.) 464.05 299.33 T
108 312 504 648 C
0 0 0 1 0 0 0 K
130 316 482 646 C
0 -13 -15 327 303 340 318 136 322 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f1-1a.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.0%%For: (brent) (harlequin)%%Title: (f1-1a.eps)%%CreationDate: (6/11/96) (9:49 AM)%%BoundingBox: -13 -15 327 303%%HiResBoundingBox: -11.8629 -14.6464 325.8035 302.3868%%DocumentProcessColors: Black%%DocumentFonts: Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.0%AI3_ColorUsage: Black&White%AI3_TemplateBox: 160.6667 16 160.6667 16%AI3_TileBox: 0 0 552 728%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -247.3333 328 1 826 581 18 1 0 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 23 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_ax neg 0 rmoveto	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 17 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin		/initialize	{ 		Adobe_ColorImage_AI6 begin		Adobe_ColorImage_AI6		{			dup type /arraytype eq			{				dup xcheck				{					bind				} if			} if			pop pop		} forall	} def	/terminate { end } def		currentdict /Adobe_ColorImage_AI6_Vars known not	{		/Adobe_ColorImage_AI6_Vars 14 dict def	} if		Adobe_ColorImage_AI6_Vars begin		/channelcount 0 def		/sourcecount 0 def		/sourcearray 4 array def		/plateindex -1 def		/XIMask 0 def		/XIBinary 0 def		/XIChannelCount 0 def		/XIBitsPerPixel 0 def		/XIImageHeight 0 def		/XIImageWidth 0 def		/XIImageMatrix null def		/XIBuffer null def		/XIDataProc null def end		/WalkRGBString null def	/WalkCMYKString null def		/StuffRGBIntoGrayString null def	/RGBToGrayImageProc null def	/StuffCMYKIntoGrayString null def	/CMYKToGrayImageProc null def	/ColorImageCompositeEmulator null def		/SeparateCMYKImageProc null def		/FourEqual null def	/TestPlateIndex null def		currentdict /_colorimage known not	{		/colorimage where		{			/colorimage get /_colorimage exch def		}		{			/_colorimage null def		} ifelse	} if		/_currenttransfer systemdict /currenttransfer get def		/colorimage null def	/XI null def			/WalkRGBString	{		0 3 index			dup length 1 sub 0 3 3 -1 roll		{			3 getinterval { } forall				5 index exec				3 index		} for				 5 { pop } repeat		} def			/WalkCMYKString	{		0 3 index			dup length 1 sub 0 4 3 -1 roll		{			4 getinterval { } forall						6 index exec						3 index					} for				5 { pop } repeat			} def			/StuffRGBIntoGrayString	{		.11 mul exch				.59 mul add exch				.3 mul add				cvi 3 copy put				pop 1 add	} def			/RGBToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin 			sourcearray 0 get exec			dup length 3 idiv string			dup 3 1 roll 						/StuffRGBIntoGrayString load exch			WalkRGBString	 end	} def			/StuffCMYKIntoGrayString	{		exch .11 mul add				exch .59 mul add				exch .3 mul add				dup 255 gt { pop 255 } if				255 exch sub cvi 3 copy put				pop 1 add	} def			/CMYKToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin			sourcearray 0 get exec			dup length 4 idiv string			dup 3 1 roll 						/StuffCMYKIntoGrayString load exch			WalkCMYKString	 end	} def			/ColorImageCompositeEmulator	{		pop true eq		{			Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat		}		{			Adobe_ColorImage_AI6_Vars /channelcount get 1 ne			{				Adobe_ColorImage_AI6_Vars begin					sourcearray 0 3 -1 roll put									channelcount 3 eq 					{ 						/RGBToGrayImageProc 					}					{ 						/CMYKToGrayImageProc					} ifelse					load			 end			} if			image		} ifelse	} def			/SeparateCMYKImageProc	{			Adobe_ColorImage_AI6_Vars begin				sourcecount 0 ne			{				sourcearray plateindex get exec			}			{							sourcearray 0 get exec								dup length 4 idiv string								0 2 index								plateindex 4 2 index length 1 sub				{					get 255 exch sub										3 copy put pop 1 add										2 index				} for					pop pop exch pop			} ifelse	 end	} def				/FourEqual	{		4 index ne		{			pop pop pop false		}		{			4 index ne			{				pop pop false			}			{				4 index ne				{					pop false				}				{					4 index eq				} ifelse			} ifelse		} ifelse	} def			/TestPlateIndex	{		Adobe_ColorImage_AI6_Vars begin			/plateindex -1 def				/setcmykcolor where			{				pop				gsave				1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub				grestore					1 0 0 0 FourEqual 				{ 					/plateindex 0 def				}				{					0 1 0 0 FourEqual					{ 						/plateindex 1 def					}					{						0 0 1 0 FourEqual						{							/plateindex 2 def						}						{							0 0 0 1 FourEqual							{ 								/plateindex 3 def							}							{								0 0 0 0 FourEqual								{									/plateindex 5 def								} if							} ifelse						} ifelse					} ifelse				} ifelse				pop pop pop pop			} if			plateindex	 end	} def			/colorimage	{		Adobe_ColorImage_AI6_Vars begin			/channelcount 1 index def			/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def				4 sourcecount add index dup 			8 eq exch 1 eq or not	 end				{			/_colorimage load null ne			{				_colorimage			}			{				Adobe_ColorImage_AI6_Vars /sourcecount get				7 add { pop } repeat			} ifelse		}		{			dup 3 eq			TestPlateIndex			dup -1 eq exch 5 eq or or			{				/_colorimage load null eq				{					ColorImageCompositeEmulator				}				{					dup 1 eq					{						pop pop image					}					{						Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							gsave														0 _currenttransfer exec							1 _currenttransfer exec							eq							{ 0 _currenttransfer exec 0.5 lt }							{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse														{ { pop 0 } } { { pop 1 } } ifelse							systemdict /settransfer get exec						} if												_colorimage												Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							grestore						} if					} ifelse				} ifelse			}			{				dup 1 eq				{					pop pop					image				}				{					pop pop						Adobe_ColorImage_AI6_Vars begin						sourcecount -1 0						{										exch sourcearray 3 1 roll put						} for							/SeparateCMYKImageProc load				 end						systemdict /image get exec				} ifelse			} ifelse		} ifelse	} def		/XI	{		Adobe_ColorImage_AI6_Vars begin			gsave			/XIMask exch 0 ne def			/XIBinary exch 0 ne def			pop			pop			/XIChannelCount exch def			/XIBitsPerPixel exch def			/XIImageHeight exch def			/XIImageWidth exch def			pop pop pop pop			/XIImageMatrix exch def						XIBitsPerPixel 1 eq			{				XIImageWidth 8 div ceiling cvi			}			{				XIImageWidth XIChannelCount mul			} ifelse			/XIBuffer exch string def						XIBinary			{				/XIDataProc { currentfile XIBuffer readstring pop } def				currentfile 128 string readline pop pop			}			{				/XIDataProc { currentfile XIBuffer readhexstring pop } def			} ifelse						0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale						XIMask			{				XIImageWidth XIImageHeight				false				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								/_lp /null ddef				_fc				/_lp /imagemask ddef								imagemask			}			{				XIImageWidth XIImageHeight				XIBitsPerPixel				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								XIChannelCount 1 eq				{										gsave					0 setgray										image										grestore				}				{					false					XIChannelCount					colorimage				} ifelse			} ifelse			grestore	 end	} def	end%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 4 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4159.3333 4336 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4159.3333 4336 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4159.3333 4336 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Artwork) Ln0 Au0 To0 1 -1 0 -3.4034 237.9246 0 TpTP0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Helvetica 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti0 Ta0 0 2 2 3 Th0 Tq10 0 Tl0 Tc0 Tw(Object-oriented) Tx (\r) TX TO0 To1 0 0 1 145.6667 217 0 TpTP-11.9982 0 Td0 Tr1 Ta(virtual\r) Tx -6.0073 -10 Td(functions) Tx (\r) TX TO0 To1 0 0 1 124.6667 179.5 0 TpTP-16.4971 0 Td0 Tr(member\r) Tx -1.5084 -10 Td(functions) Tx (\r) TX TO0 To1 0 0 1 197.9167 191.5 0 TpTP-9.5032 0 Td0 Tr(Java) Tx (\r) TX TO0 To1 0 0 1 51.6667 174 0 TpTP-8.0046 0 Td0 Tr(Ada\003) Tx 8.0046 -10 Td(\r) Tx TO0 To1 0 0 1 107.1667 136.5 0 TpTP-8.5045 0 Td0 Tr(C++) Tx (\r) TX TO0 To1 0 0 1 83.4167 98.5 0 TpTP-3.2487 0 Td0 Tr(C) Tx (\r) TX TO0 To1 0 0 1 268.6667 178 0 TpTP-18.2483 0 Td0 Tr(Common\r) Tx 8.4935 -10 Td(LISP\003) Tx 9.7548 -10 Td(\r) Tx TO0 To1 0 0 1 280.1667 215.5 0 TpTP-12.2519 0 Td0 Tr(CLOS) Tx (\r) TX TO0 To1 0 0 1 281.1667 269.5 0 TpTP-18.2483 0 Td0 Tr(Smalltalk) Tx (\r) TX TO0 To1 0 0 1 251.1667 128.5 0 TpTP-17.2584 0 Td0 Tr(LISP 1.5) Tx (\r) TX TO0 To1 0 0 1 142.6667 55.75 0 TpTP-13.5033 0 Td0 Tr(BASIC) Tx (\r) TX TO0 To1 0 0 1 28.6667 73.5 0 TpTP-13.5033 0 Td0 Tr(Pascal) Tx (\r) TX TO0 To1 0 0 1 43.1667 47.5 0 TpTP-15.7522 0 Td0 Tr(COBOL) Tx (\r) TX TO0 To1 0 0 1 39.9167 25.5 0 TpTP-21.7452 0 Td0 Tr(FORTRAN) Tx (\r) TX TO0 To1 0 0 1 306.9167 -2.6667 0 TpTP-17.4979 0 Td0 Tr(Dynamic\003) Tx 17.4979 -10 Td(\r) Tx TO1 Ap0 R0 G0.5 w241.9703 102.7256 m264.7398 96.4135 295.3871 125.2729 310.4218 167.1836 c325.4565 209.0943 319.186 248.1879 296.4166 254.4999 c273.6471 260.812 242.9998 231.9526 227.9651 190.0419 c212.9304 148.1312 219.2009 109.0377 241.9703 102.7256 csu60.375 76.7146 m73.6046 56.9636 109.4209 76.8972 140.3715 121.2369 c171.3221 165.5766 185.6882 217.5341 172.4586 237.2851 c159.2289 257.0361 123.4125 237.1025 92.462 192.7629 c61.5113 148.4231 47.1453 96.4656 60.375 76.7146 csU0.65 w50.9167 137.7465 m61.2654 137.7465 69.655 155.6002 69.655 177.6231 c69.655 199.6461 61.2654 217.4998 50.9167 217.4998 c40.5679 217.4998 32.1783 199.6461 32.1783 177.6231 c32.1783 155.6002 40.5679 137.7465 50.9167 137.7465 cs280.4167 262.5005 m300.0137 262.5005 315.9007 267.4252 315.9007 273.5 c315.9007 279.5747 300.0137 284.4995 280.4167 284.4995 c260.8197 284.4995 244.9327 279.5747 244.9327 273.5 c244.9327 267.4252 260.8197 262.5005 280.4167 262.5005 cs29.1747 65.1728 m39.0191 65.1728 46.9999 70.3189 46.9999 76.6667 c46.9999 83.0145 39.0191 88.1606 29.1747 88.1606 c19.3303 88.1606 11.3496 83.0145 11.3496 76.6667 c11.3496 70.3189 19.3303 65.1728 29.1747 65.1728 cs43.8536 44.1855 m58.0398 44.1855 69.5404 47.2458 69.5404 51.0209 c69.5404 54.7959 58.0398 57.8562 43.8536 57.8562 c29.6674 57.8562 18.1668 54.7959 18.1668 51.0209 c18.1668 47.2458 29.6674 44.1855 43.8536 44.1855 cs143.75 51.2496 m157.5921 51.2496 168.8137 54.477 168.8137 58.4581 c168.8137 62.4392 157.5921 65.6667 143.75 65.6667 c129.9079 65.6667 118.6863 62.4392 118.6863 58.4581 c118.6863 54.477 129.9079 51.2496 143.75 51.2496 cs39.9167 21.6932 m55.4725 21.6932 68.0833 24.9647 68.0833 29 c68.0833 33.0354 55.4725 36.3068 39.9167 36.3068 c24.3609 36.3068 11.75 33.0354 11.75 29 c11.75 24.9647 24.3609 21.6932 39.9167 21.6932 cs83.8333 80.2321 m71.8574 80.2321 62.1487 89.9408 62.1487 101.9167 c62.1487 113.8926 71.8574 123.6013 83.8333 123.6013 c95.8092 123.6013 105.518 113.8926 105.518 101.9167 c105.518 89.9408 95.8092 80.2321 83.8333 80.2321 cs250.3333 110.3987 m238.3574 110.3987 228.6487 120.1074 228.6487 132.0833 c228.6487 144.0592 238.3574 153.7679 250.3333 153.7679 c262.3092 153.7679 272.018 144.0592 272.018 132.0833 c272.018 120.1074 262.3092 110.3987 250.3333 110.3987 cs[5 4 ]0 d280.0625 197.5029 m268.0866 197.5029 258.3779 207.2116 258.3779 219.1875 c258.3779 231.1634 268.0866 240.8721 280.0625 240.8721 c292.0384 240.8721 301.7471 231.1634 301.7471 219.1875 c301.7471 207.2116 292.0384 197.5029 280.0625 197.5029 cs123.6667 160.1664 m137.4735 160.1664 148.6666 168.2255 148.6666 178.1665 c148.6666 188.1076 137.4735 196.1667 123.6667 196.1667 c109.8598 196.1667 98.6668 188.1076 98.6668 178.1665 c98.6668 168.2255 109.8598 160.1664 123.6667 160.1664 cs146 196.3333 m160.1752 196.3333 171.6667 204.5416 171.6667 214.6667 c171.6667 224.7918 160.1752 233.0001 146 233.0001 c131.8248 233.0001 120.3332 224.7918 120.3332 214.6667 c120.3332 204.5416 131.8248 196.3333 146 196.3333 cs[]0 d177.3754 155.6662 m187.8282 149.9345 206.4038 162.3014 218.8644 183.2881 c231.325 204.2748 232.9527 225.9351 222.4999 231.6669 c212.0471 237.3988 193.4714 225.0318 181.0108 204.0451 c168.5502 183.0584 166.9226 161.3981 177.3754 155.6662 csu0 Ap0.7 G3 w5.3333 285.3333 m5.3333 10.6667 l308 10.6667 lS0 O0.7 g1 w308.2605 6.5905 m323.8717 10.7731 l308.2605 14.9564 l308.2605 6.5905 lb9.4095 284.8438 m5.227 300.455 l1.0436 284.8438 l9.4095 284.8438 lbUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 312 504 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 19
%%Page: "6" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(6) 72 677.67 T
0 F
(Chapter 1) 86.25 677.67 T
(Introduction) 133.48 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Let\325s take a brief look at featur) 108 268.67 T
(es of Dylan that support these goals.) 255.54 268.67 T
3 15 Q
(1.1  Modular) 108 229.01 T
(, reusab) 179.05 229.01 T
(le) 226.12 229.01 T
(, component-oriented pr) 236.51 229.01 T
(ograms) 377.74 229.01 T
1 11 Q
(Dylan is an object-oriented language. Pr) 108 208.67 T
(ograms cr) 302.39 208.67 T
(eate and use objects, and they) 350.52 208.67 T
(use classes to categorize and abstract attributes of objects. Classes play a number) 108 194.67 T
(of key r) 108 180.67 T
(oles:) 144.82 180.67 T
(\245) 117 160.67 T
(They ar) 135 160.67 T
(e data types, embodying subtype\320supertype r) 171.93 160.67 T
(elationships between) 394.59 160.67 T
(objects.) 135 146.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 288.01 504 296 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 1.2) 121.23 299.33 T
8 F
(Object-or) 174.03 299.33 T
(iented and dynamic e) 215.3 299.33 T
(xtents of Dylan and other languages) 310.05 299.33 T
(.) 469.99 299.33 T
108 312 504 648 C
0 0 0 1 0 0 0 K
130 316 482 646 C
0 -13 -15 327 303 340 318 136 322 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f1-2a.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.0%%For: (brent) (harlequin)%%Title: (f1-2a.eps)%%CreationDate: (6/11/96) (9:49 AM)%%BoundingBox: -13 -15 327 303%%HiResBoundingBox: -11.8629 -14.6464 325.8035 302.3868%%DocumentProcessColors: Black%%DocumentFonts: Helvetica%%+ Helvetica-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.0%AI3_ColorUsage: Black&White%AI3_TemplateBox: 160.6667 16 160.6667 16%AI3_TileBox: 0 0 552 728%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -111.3333 288 1.5 826 581 18 1 0 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 23 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_ax neg 0 rmoveto	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 17 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin		/initialize	{ 		Adobe_ColorImage_AI6 begin		Adobe_ColorImage_AI6		{			dup type /arraytype eq			{				dup xcheck				{					bind				} if			} if			pop pop		} forall	} def	/terminate { end } def		currentdict /Adobe_ColorImage_AI6_Vars known not	{		/Adobe_ColorImage_AI6_Vars 14 dict def	} if		Adobe_ColorImage_AI6_Vars begin		/channelcount 0 def		/sourcecount 0 def		/sourcearray 4 array def		/plateindex -1 def		/XIMask 0 def		/XIBinary 0 def		/XIChannelCount 0 def		/XIBitsPerPixel 0 def		/XIImageHeight 0 def		/XIImageWidth 0 def		/XIImageMatrix null def		/XIBuffer null def		/XIDataProc null def end		/WalkRGBString null def	/WalkCMYKString null def		/StuffRGBIntoGrayString null def	/RGBToGrayImageProc null def	/StuffCMYKIntoGrayString null def	/CMYKToGrayImageProc null def	/ColorImageCompositeEmulator null def		/SeparateCMYKImageProc null def		/FourEqual null def	/TestPlateIndex null def		currentdict /_colorimage known not	{		/colorimage where		{			/colorimage get /_colorimage exch def		}		{			/_colorimage null def		} ifelse	} if		/_currenttransfer systemdict /currenttransfer get def		/colorimage null def	/XI null def			/WalkRGBString	{		0 3 index			dup length 1 sub 0 3 3 -1 roll		{			3 getinterval { } forall				5 index exec				3 index		} for				 5 { pop } repeat		} def			/WalkCMYKString	{		0 3 index			dup length 1 sub 0 4 3 -1 roll		{			4 getinterval { } forall						6 index exec						3 index					} for				5 { pop } repeat			} def			/StuffRGBIntoGrayString	{		.11 mul exch				.59 mul add exch				.3 mul add				cvi 3 copy put				pop 1 add	} def			/RGBToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin 			sourcearray 0 get exec			dup length 3 idiv string			dup 3 1 roll 						/StuffRGBIntoGrayString load exch			WalkRGBString	 end	} def			/StuffCMYKIntoGrayString	{		exch .11 mul add				exch .59 mul add				exch .3 mul add				dup 255 gt { pop 255 } if				255 exch sub cvi 3 copy put				pop 1 add	} def			/CMYKToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin			sourcearray 0 get exec			dup length 4 idiv string			dup 3 1 roll 						/StuffCMYKIntoGrayString load exch			WalkCMYKString	 end	} def			/ColorImageCompositeEmulator	{		pop true eq		{			Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat		}		{			Adobe_ColorImage_AI6_Vars /channelcount get 1 ne			{				Adobe_ColorImage_AI6_Vars begin					sourcearray 0 3 -1 roll put									channelcount 3 eq 					{ 						/RGBToGrayImageProc 					}					{ 						/CMYKToGrayImageProc					} ifelse					load			 end			} if			image		} ifelse	} def			/SeparateCMYKImageProc	{			Adobe_ColorImage_AI6_Vars begin				sourcecount 0 ne			{				sourcearray plateindex get exec			}			{							sourcearray 0 get exec								dup length 4 idiv string								0 2 index								plateindex 4 2 index length 1 sub				{					get 255 exch sub										3 copy put pop 1 add										2 index				} for					pop pop exch pop			} ifelse	 end	} def				/FourEqual	{		4 index ne		{			pop pop pop false		}		{			4 index ne			{				pop pop false			}			{				4 index ne				{					pop false				}				{					4 index eq				} ifelse			} ifelse		} ifelse	} def			/TestPlateIndex	{		Adobe_ColorImage_AI6_Vars begin			/plateindex -1 def				/setcmykcolor where			{				pop				gsave				1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub				grestore					1 0 0 0 FourEqual 				{ 					/plateindex 0 def				}				{					0 1 0 0 FourEqual					{ 						/plateindex 1 def					}					{						0 0 1 0 FourEqual						{							/plateindex 2 def						}						{							0 0 0 1 FourEqual							{ 								/plateindex 3 def							}							{								0 0 0 0 FourEqual								{									/plateindex 5 def								} if							} ifelse						} ifelse					} ifelse				} ifelse				pop pop pop pop			} if			plateindex	 end	} def			/colorimage	{		Adobe_ColorImage_AI6_Vars begin			/channelcount 1 index def			/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def				4 sourcecount add index dup 			8 eq exch 1 eq or not	 end				{			/_colorimage load null ne			{				_colorimage			}			{				Adobe_ColorImage_AI6_Vars /sourcecount get				7 add { pop } repeat			} ifelse		}		{			dup 3 eq			TestPlateIndex			dup -1 eq exch 5 eq or or			{				/_colorimage load null eq				{					ColorImageCompositeEmulator				}				{					dup 1 eq					{						pop pop image					}					{						Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							gsave														0 _currenttransfer exec							1 _currenttransfer exec							eq							{ 0 _currenttransfer exec 0.5 lt }							{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse														{ { pop 0 } } { { pop 1 } } ifelse							systemdict /settransfer get exec						} if												_colorimage												Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							grestore						} if					} ifelse				} ifelse			}			{				dup 1 eq				{					pop pop					image				}				{					pop pop						Adobe_ColorImage_AI6_Vars begin						sourcecount -1 0						{										exch sourcearray 3 1 roll put						} for							/SeparateCMYKImageProc load				 end						systemdict /image get exec				} ifelse			} ifelse		} ifelse	} def		/XI	{		Adobe_ColorImage_AI6_Vars begin			gsave			/XIMask exch 0 ne def			/XIBinary exch 0 ne def			pop			pop			/XIChannelCount exch def			/XIBitsPerPixel exch def			/XIImageHeight exch def			/XIImageWidth exch def			pop pop pop pop			/XIImageMatrix exch def						XIBitsPerPixel 1 eq			{				XIImageWidth 8 div ceiling cvi			}			{				XIImageWidth XIChannelCount mul			} ifelse			/XIBuffer exch string def						XIBinary			{				/XIDataProc { currentfile XIBuffer readstring pop } def				currentfile 128 string readline pop pop			}			{				/XIDataProc { currentfile XIBuffer readhexstring pop } def			} ifelse						0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale						XIMask			{				XIImageWidth XIImageHeight				false				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								/_lp /null ddef				_fc				/_lp /imagemask ddef								imagemask			}			{				XIImageWidth XIImageHeight				XIBitsPerPixel				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								XIChannelCount 1 eq				{										gsave					0 setgray										image										grestore				}				{					false					XIChannelCount					colorimage				} ifelse			} ifelse			grestore	 end	} def	end%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Helvetica%%IncludeFont: Helvetica-BoldAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold[/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 4 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4159.3333 4336 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4159.3333 4336 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4159.3333 4336 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Artwork) Ln0 A1 Ap0 O0.9 g0 R0 G800 Ar0 J 0 j 0.65 w 4 M []0 d%AI3_Note:0 D164.3334 224.7501 m232.0792 224.7501 286.9999 234.6 286.9999 246.75 c286.9999 258.9 232.0792 268.7499 164.3334 268.7499 c96.5875 268.7499 41.6668 258.9 41.6668 246.75 c41.6668 234.6 96.5875 224.7501 164.3334 224.7501 cb0 To0 1 -1 0 -3.4034 237.9246 0 TpTP0 Tr0 g1 w/_Helvetica 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti0 Ta0 0 2 2 3 Th0 Tq10 0 Tl0 Tc0 Tw(Object-oriented) Tx (\r) TX TO0 To1 0 0 1 146.1667 216.25 0 TpTP-11.9982 0 Td0 Tr1 Ta(virtual\r) Tx -6.0073 -10 Td(functions) Tx (\r) TX TO0 To1 0 0 1 124.6667 179.5 0 TpTP-16.4971 0 Td0 Tr(member\r) Tx -1.5084 -10 Td(functions) Tx (\r) TX TO0 To1 0 0 1 197.9167 191.5 0 TpTP-9.5032 0 Td0 Tr(Java) Tx (\r) TX TO0 To1 0 0 1 51.6667 174 0 TpTP-8.0046 0 Td0 Tr(Ada\003) Tx 8.0046 -10 Td(\r) Tx TO0 To1 0 0 1 107.1667 136.5 0 TpTP-8.5045 0 Td0 Tr(C++) Tx (\r) TX TO0 To1 0 0 1 83.4167 98.5 0 TpTP-3.2487 0 Td0 Tr(C) Tx (\r) TX TO0 To1 0 0 1 268.6667 178 0 TpTP-18.2483 0 Td0 Tr(Common\r) Tx 8.4935 -10 Td(LISP\003) Tx 9.7548 -10 Td(\r) Tx TO0 To1 0 0 1 280.1667 215.5 0 TpTP-12.2519 0 Td0 Tr(CLOS) Tx (\r) TX TO0 To1 0 0 1 281.1667 269.5 0 TpTP-18.2483 0 Td0 Tr(Smalltalk) Tx (\r) TX TO0 To1 0 0 1 251.1667 128.5 0 TpTP-17.2584 0 Td0 Tr(LISP 1.5) Tx (\r) TX TO0 To1 0 0 1 142.6667 55.75 0 TpTP-13.5033 0 Td0 Tr(BASIC) Tx (\r) TX TO0 To1 0 0 1 28.6667 73.5 0 TpTP-13.5033 0 Td0 Tr(Pascal) Tx (\r) TX TO0 To1 0 0 1 43.1667 47.5 0 TpTP-15.7522 0 Td0 Tr(COBOL) Tx (\r) TX TO0 To1 0 0 1 39.9167 25.5 0 TpTP-21.7452 0 Td0 Tr(FORTRAN) Tx (\r) TX TO0 To1 0 0 1 306.9167 -2.6667 0 TpTP-17.4979 0 Td0 Tr(Dynamic\003) Tx 17.4979 -10 Td(\r) Tx TO0 R0 G0.5 w241.9703 102.7256 m264.7398 96.4135 295.3871 125.2729 310.4218 167.1836 c325.4565 209.0943 319.186 248.1879 296.4166 254.4999 c273.6471 260.812 242.9998 231.9526 227.9651 190.0419 c212.9304 148.1312 219.2009 109.0377 241.9703 102.7256 csu60.375 76.7146 m73.6046 56.9636 109.4209 76.8972 140.3715 121.2369 c171.3221 165.5766 185.6882 217.5341 172.4586 237.2851 c159.2289 257.0361 123.4125 237.1025 92.462 192.7629 c61.5113 148.4231 47.1453 96.4656 60.375 76.7146 csU0.65 w50.9167 137.7465 m61.2654 137.7465 69.655 155.6002 69.655 177.6231 c69.655 199.6461 61.2654 217.4998 50.9167 217.4998 c40.5679 217.4998 32.1783 199.6461 32.1783 177.6231 c32.1783 155.6002 40.5679 137.7465 50.9167 137.7465 cs280.4167 262.5005 m300.0137 262.5005 315.9007 267.4252 315.9007 273.5 c315.9007 279.5747 300.0137 284.4995 280.4167 284.4995 c260.8197 284.4995 244.9327 279.5747 244.9327 273.5 c244.9327 267.4252 260.8197 262.5005 280.4167 262.5005 cs29.1747 65.1728 m39.0191 65.1728 46.9999 70.3189 46.9999 76.6667 c46.9999 83.0145 39.0191 88.1606 29.1747 88.1606 c19.3303 88.1606 11.3496 83.0145 11.3496 76.6667 c11.3496 70.3189 19.3303 65.1728 29.1747 65.1728 cs43.8536 44.1855 m58.0398 44.1855 69.5404 47.2458 69.5404 51.0209 c69.5404 54.7959 58.0398 57.8562 43.8536 57.8562 c29.6674 57.8562 18.1668 54.7959 18.1668 51.0209 c18.1668 47.2458 29.6674 44.1855 43.8536 44.1855 cs143.75 51.2496 m157.5921 51.2496 168.8137 54.477 168.8137 58.4581 c168.8137 62.4392 157.5921 65.6667 143.75 65.6667 c129.9079 65.6667 118.6863 62.4392 118.6863 58.4581 c118.6863 54.477 129.9079 51.2496 143.75 51.2496 cs39.9167 21.6932 m55.4725 21.6932 68.0833 24.9647 68.0833 29 c68.0833 33.0354 55.4725 36.3068 39.9167 36.3068 c24.3609 36.3068 11.75 33.0354 11.75 29 c11.75 24.9647 24.3609 21.6932 39.9167 21.6932 cs83.8333 80.2321 m71.8574 80.2321 62.1487 89.9408 62.1487 101.9167 c62.1487 113.8926 71.8574 123.6013 83.8333 123.6013 c95.8092 123.6013 105.518 113.8926 105.518 101.9167 c105.518 89.9408 95.8092 80.2321 83.8333 80.2321 cs250.3333 110.3987 m238.3574 110.3987 228.6487 120.1074 228.6487 132.0833 c228.6487 144.0592 238.3574 153.7679 250.3333 153.7679 c262.3092 153.7679 272.018 144.0592 272.018 132.0833 c272.018 120.1074 262.3092 110.3987 250.3333 110.3987 cs[5 4 ]0 d280.0625 197.5029 m268.0866 197.5029 258.3779 207.2116 258.3779 219.1875 c258.3779 231.1634 268.0866 240.8721 280.0625 240.8721 c292.0384 240.8721 301.7471 231.1634 301.7471 219.1875 c301.7471 207.2116 292.0384 197.5029 280.0625 197.5029 cs123.6667 160.1664 m137.4735 160.1664 148.6666 168.2255 148.6666 178.1665 c148.6666 188.1076 137.4735 196.1667 123.6667 196.1667 c109.8598 196.1667 98.6668 188.1076 98.6668 178.1665 c98.6668 168.2255 109.8598 160.1664 123.6667 160.1664 cs146 196.3333 m160.1752 196.3333 171.6667 204.5416 171.6667 214.6667 c171.6667 224.7918 160.1752 233.0001 146 233.0001 c131.8248 233.0001 120.3332 224.7918 120.3332 214.6667 c120.3332 204.5416 131.8248 196.3333 146 196.3333 cs[]0 d177.3754 155.6662 m187.8282 149.9345 206.4038 162.3014 218.8644 183.2881 c231.325 204.2748 232.9527 225.9351 222.4999 231.6669 c212.0471 237.3988 193.4714 225.0318 181.0108 204.0451 c168.5502 183.0584 166.9226 161.3981 177.3754 155.6662 csu0 Ap0.7 G3 w5.3333 285.3333 m5.3333 10.6667 l308 10.6667 lS0 O0.7 g1 w308.2605 6.5905 m323.8717 10.7731 l308.2605 14.9564 l308.2605 6.5905 lb9.4095 284.8438 m5.227 300.455 l1.0436 284.8438 l9.4095 284.8438 lbU0 To1 0 0 1 171.4167 250.9167 0 TpTP-16.3345 0 Td0 Tr0 g/_Helvetica-Bold 12 Tf(Dylan) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 312 504 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 20
%%Page: "7" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Chapter 1) 429.79 677.67 T
(Introduction) 477.02 677.67 T
2 F
(7) 535.25 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(\245) 117 640.67 T
(They ar) 135 640.67 T
(e the vehicle for abstraction of common attributes of objects.) 171.93 640.67 T
(\245) 117 620.67 T
(They or) 135 620.67 T
(ganize sharing of attributes: Subclasses) 172.43 620.67 T
2 F
(inherit) 365.01 620.67 T
1 F
( the attributes of) 399.22 620.67 T
(super) 135 606.67 T
(classes.) 162.32 606.67 T
(\245) 117 586.67 T
(They ar) 135 586.67 T
(e the principal basis for specializing behavior of objects.) 171.93 586.67 T
(Objects contain) 108 566.67 T
0 F
(data) 185.19 566.67 T
1 F
( in) 204.12 566.67 T
2 F
(slots) 219.22 566.67 T
1 F
(, which ar) 242.43 566.67 T
(e like str) 290.39 566.67 T
(uctur) 331.45 566.67 T
(e members or \336elds in other) 357.34 566.67 T
-0.08 (languages. But the) 108 552.67 P
0 F
-0.08 (behavior) 200.35 552.67 P
1 F
-0.08 ( of objects r) 237.83 552.67 P
-0.08 (esides in generic functions and methods. A) 292.71 552.67 P
2 F
(generic function) 108 538.67 T
1 F
( is a function that embodies an operation common to dif) 190.18 538.67 T
(fer) 462.35 538.67 T
(ent) 475.43 538.67 T
(classes of the objects that ar) 108 524.67 T
(e its ar) 241.31 524.67 T
(guments. A) 273.18 524.67 T
2 F
(method) 332.37 524.67 T
1 F
( is a function that acts as a) 370.87 524.67 T
(speci\336c implementation of a generic operation for objects of a particular class. A) 108 510.67 T
(pr) 108 496.67 T
(ogram calls a generic function, and Dylan determines the most appr) 118.76 496.67 T
(opriate) 448.79 496.67 T
(method to invoke based on the ar) 108 482.67 T
(guments to the generic function. A pr) 270.55 482.67 T
(ogram) 452.61 482.67 T
(contr) 108 468.67 T
(ols method selection, or) 133.02 468.67 T
2 F
(dispatch) 251.18 468.67 T
1 F
(, by means of class r) 293.93 468.67 T
(elationships, rather) 390.91 468.67 T
(than via explicit conditional statements.) 108 454.67 T
(Abstraction of common attributes and methods in super) 135 440.67 T
(classes lets you) 407.82 440.67 T
-0.17 (r) 108 426.67 P
-0.17 (euse code, rather then r) 112.15 426.67 P
-0.17 (eimplement it, for subclasses. By de\336ning a subclass, you) 225.16 426.67 P
(can add specialized data or behavior while having the subclass inherit attributes) 108 412.67 T
(of super) 108 398.67 T
(classes, which may be de\336ned in another component or library) 147.74 398.67 T
(, or in) 451.78 398.67 T
(Dylan itself.) 108 384.67 T
(Generic functions constitute abstract interfaces for speci\336c operations. Y) 135 370.67 T
(ou) 483.8 370.67 T
(can usually change the implementation of an operation or a data r) 108 356.67 T
(epr) 428.28 356.67 T
(esentation) 444.3 356.67 T
(without changing the interface to the operation. In this way) 108 342.67 T
(, you can change an) 395.79 342.67 T
-0.08 (implementation without changing the functions or objects that use the implemen-) 108 328.67 P
-0.14 (tation. These functions or objects may be de\336ned in another component or library) 108 314.67 P
-0.14 (.) 501.25 314.67 P
-0.14 (Dylan pr) 135 300.67 P
-0.14 (ovides lar) 178.1 300.67 P
-0.14 (ge-scale variable namespaces, called) 225.63 300.67 P
2 F
-0.14 (modules) 403.94 300.67 P
1 F
-0.14 (. A module) 447.33 300.67 P
(can include or use other modules, but only the variables explicitly exported fr) 108 286.67 T
(om) 485.08 286.67 T
(those modules ar) 108 272.67 T
(e visible to it. Modules pr) 191.28 272.67 T
(ovide public and private global vari-) 314.92 272.67 T
-0.13 (ables. Because functions and classes, as well as data, ar) 108 258.67 P
-0.13 (e variable values, modules) 372.51 258.67 P
(de\336ne external interfaces for collections of classes and generic functions.) 108 244.67 T
3 15 Q
(1.2  P) 108 205 T
(o) 139.66 205 T
(werful and familiar pr) 147.01 205 T
(ocedural pr) 271.2 205 T
(ogramming) 337.96 205 T
1 11 Q
(Dylan is not just an object-oriented language. It includes and extends the lan-) 108 184.67 T
(guage featur) 108 170.67 T
(es that you expect to \336nd in a mor) 169.18 170.67 T
(e pur) 334.58 170.67 T
(ely pr) 359.99 170.67 T
(ocedural language.) 388.08 170.67 T
(Dylan\325s syntax encourages clear and str) 108 156.67 T
(uctur) 300.57 156.67 T
(ed pr) 326.45 156.67 T
(ogramming. It includes famil-) 351.95 156.67 T
(iar) 108 142.67 T
(, economical notation for in\336x operators and slot and array r) 120.23 142.67 T
(efer) 413.17 142.67 T
(ences. Dylan) 431.52 142.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 21
%%Page: "8" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(8) 72 677.67 T
0 F
(Chapter 1) 86.25 677.67 T
(Introduction) 133.48 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(of) 108 640.67 T
(fers a choice of concise or expanded equivalents for many syntactic constr) 117.47 640.67 T
(ucts) 475.77 640.67 T
(to accommodate a range of pr) 108 626.67 T
(ogramming styles, fr) 252.68 626.67 T
(om terse to descriptive.) 353.36 626.67 T
(\245) 117 606.67 T
(Y) 135 606.67 T
(ou do not have to write a lot of intr) 141.32 606.67 T
(usive code to support Dylan\325s object) 311.4 606.67 T
(orientation. For example, the most common language expr) 135 592.67 T
(essions for de\336n-) 419.35 592.67 T
(ing a method automatically de\336ne a generic function if necessary) 135 578.67 T
(. A) 450.13 578.67 T
-0.13 (method-de\336ning expr) 135 564.67 P
-0.13 (ession looks much like a function-de\336ning expr) 241.45 564.67 P
-0.13 (ession) 471.18 564.67 P
(in other languages.) 135 550.67 T
(\245) 117 530.67 T
(Y) 135 530.67 T
(ou can de\336ne a function to take a variable number of ar) 141.32 530.67 T
(guments. Y) 410.23 530.67 T
(ou can) 464.44 530.67 T
(also de\336ne a function to take ar) 135 516.67 T
(guments in the form of name\320value pairs,) 287.17 516.67 T
(thus supporting self-documenting function invocation.) 135 502.67 T
(\245) 117 482.67 T
(Functions can r) 135 482.67 T
(eturn mor) 209.33 482.67 T
(e than one value. In fact, you can use a single) 258.18 482.67 T
(expr) 135 468.67 T
(ession to initialize multiple variables to the values r) 156.7 468.67 T
(eturned by a single) 406.63 468.67 T
(function call. Y) 135 454.67 T
(ou do not have to use a potentially confusing mechanism,) 207.14 454.67 T
(such as output parameters, to obtain multiple values.) 135 440.67 T
(\245) 117 420.67 T
(Dylan has a rich set of variable-sized aggr) 135 420.67 T
(egate data types, called) 338.28 420.67 T
2 F
(collections) 135 406.67 T
1 F
(. Collection classes include strings, arrays, sets, queues, lists,) 188.76 406.67 T
(stacks, and tables. Dylan has \337exible iteration constr) 135 392.67 T
(ucts and permits appli-) 388.67 392.67 T
(cations to extend them so that they operate on application-de\336ned collec-) 135 378.67 T
(tion subclasses. In this way) 135 364.67 T
(, a module that uses specialized collection) 265.7 364.67 T
(classes can cooperate with another module that de\336nes general collection) 135 350.67 T
(operations.) 135 336.67 T
(\245) 117 316.67 T
(Dylan has a built-in exception-signaling and exception-handling system) 135 316.67 T
(that permits both err) 135 302.67 T
(or handling and r) 235.55 302.67 T
(ecovery) 320.87 302.67 T
(. Exceptions ar) 357.75 302.67 T
(e based on a) 428.67 302.67 T
(class and object model that \336ts smoothly with the r) 135 288.67 T
(est of the language and) 382.04 288.67 T
(can be extended by the pr) 135 274.67 T
(ogram. Y) 260.02 274.67 T
(ou do not have to r) 303.52 274.67 T
(eturn and check err) 395.76 274.67 T
(or) 490.18 274.67 T
(codes fr) 135 260.67 T
(om functions \321 an err) 173.1 260.67 T
(or) 281.93 260.67 T
(-pr) 292.08 260.67 T
(one pr) 306.5 260.67 T
(ocess in itself \321 to ensur) 337.69 260.67 T
(e that no) 457.82 260.67 T
(exception has occurr) 135 246.67 T
(ed.) 234.87 246.67 T
3 15 Q
(1.3  Rapid and pr) 108 207 T
(oductive de) 206.9 207 T
(velopment of pr) 275.08 207 T
(ograms) 367.12 207 T
1 11 Q
-0.23 (Dylan pr) 108 186.67 P
-0.23 (omotes rapid development and incr) 151.01 186.67 P
-0.23 (emental r) 324.23 186.67 P
-0.23 (e\336nement of pr) 369.84 186.67 P
-0.23 (ototype pr) 443.87 186.67 P
-0.23 (o-) 494.33 186.67 P
(grams. The language encourages you to spend time early in the pr) 108 172.67 T
(ogramming) 429.41 172.67 T
(cycle writing and experimenting with substantive, working code, and not worry-) 108 158.67 T
(ing about distracting issues such as memory management and exact type) 108 144.67 T
(speci\336cations.) 108 130.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 22
%%Page: "9" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Chapter 1) 429.79 677.67 T
(Introduction) 477.02 677.67 T
2 F
(9) 535.25 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(\245) 117 640.67 T
(Dylan allows \337exible typing of variables, parameters, and r) 135 640.67 T
(eturn values.) 422.62 640.67 T
(Y) 135 626.67 T
(ou can permit variables, parameters, and r) 141.32 626.67 T
(eturn values to be of a general) 347.02 626.67 T
(type, so that their values can be objects of any subtype of the general type.) 135 612.67 T
(Later in the development cycle, when the pr) 135 598.67 T
(ogram speci\336cation is r) 349.16 598.67 T
(e\336ned,) 461.96 598.67 T
(you can add mor) 135 584.67 T
(e speci\336c type constraints.) 217.6 584.67 T
(\245) 117 564.67 T
(Y) 135 564.67 T
(ou can choose to allow r) 141.32 564.67 T
(un-time de\336nition of new classes and methods.) 258.66 564.67 T
-0.16 (Even if you do not so choose, most Dylan development envir) 135 550.67 P
-0.16 (onments allow) 429.7 550.67 P
(you to add or change de\336nitions at r) 135 536.67 T
(un time without r) 311.91 536.67 T
(ecompiling or r) 397.7 536.67 T
(elink-) 472.3 536.67 T
(ing the pr) 135 522.67 T
(ogram, while the pr) 182.23 522.67 T
(ogram is under development.) 278.18 522.67 T
(\245) 117 502.67 T
(Like those of Java, Dylan implementations pr) 135 502.67 T
(ovide automatic storage man-) 354.85 502.67 T
-0 (agement. Y) 135 488.67 P
-0 (ou can cr) 188.68 488.67 P
-0 (eate and use objects fr) 232.62 488.67 P
-0 (eely) 339.29 488.67 P
-0 (, even in complex algorithms,) 357.92 488.67 P
(wher) 135 474.67 T
(e contr) 159.99 474.67 T
(ol \337ow may make it dif) 193.04 474.67 T
(\336cult to tell when an object is no longer) 305.96 474.67 T
(needed. Y) 135 460.67 T
(ou do not explicitly allocate or deallocate memory) 182.48 460.67 T
(, and you do) 424.61 460.67 T
(not have to worry about failing to fr) 135 446.67 T
(ee unused memory or r) 309.7 446.67 T
(eferring to) 423.22 446.67 T
(memory that has alr) 135 432.67 T
(eady been fr) 232.9 432.67 T
(eed.) 292.84 432.67 T
(\245) 117 412.67 T
-0.07 (Dylan includes a powerful) 135 412.67 P
2 F
-0.07 (macro) 266.83 412.67 P
1 F
-0.07 ( language, based on pattern matching and) 297.39 412.67 P
(r) 135 398.67 T
(eplacement. Macr) 139.15 398.67 T
(os let you extend the base language by cr) 225.29 398.67 T
(eating syntactic) 424.43 398.67 T
(str) 135 384.67 T
(uctur) 147.51 384.67 T
(es that mor) 173.39 384.67 T
(e concisely match a particular pr) 227.76 384.67 T
(oblem domain. Macr) 385.56 384.67 T
(os) 486.56 384.67 T
-0.01 (can serve as shorthand for common idioms, and can cr) 135 370.67 P
-0.01 (eate mor) 399.8 370.67 P
-0.01 (e abstract or) 442.02 370.67 P
(pr) 135 356.67 T
(oblem-speci\336c constr) 145.76 356.67 T
(ucts that the compiler translates into Dylan.) 248.41 356.67 T
3 15 Q
(1.4  Delivery of saf) 108 317 T
(e) 215.93 317 T
(, ef\336cient, compact applications) 222.88 317 T
1 11 Q
-0.44 (Languages that pr) 108 296.67 P
-0.44 (ovide r) 195.36 296.67 P
-0.44 (un-time \337exibility have usually paid a price in decr) 229.34 296.67 P
-0.44 (eased) 474.27 296.67 P
(performance and lar) 108 282.67 T
(ge application size. Dylan\325s solution is to separate the devel-) 206.98 282.67 T
(opment envir) 108 268.67 T
(onment fr) 173.57 268.67 T
(om the deliver) 221.51 268.67 T
(ed r) 292.01 268.67 T
(un-time application. Dylan pr) 311.01 268.67 T
(ovides) 455.67 268.67 T
(maximum \337exibility during pr) 108 254.67 T
(ogram development, but also lets you trade \337exi-) 256.8 254.67 T
-0.27 (bility for performance in a deliver) 108 240.67 P
-0.27 (ed application. A Dylan compiler can often opti-) 270.92 240.67 P
(mize such potentially expensive operations as slot access and method dispatch.) 108 226.67 T
(\245) 117 206.67 T
(Y) 135 206.67 T
(ou can declar) 141.32 206.67 T
(e type constraints for variables, parameters, r) 205.97 206.67 T
(eturn values,) 425 206.67 T
(and slots. The mor) 135 192.67 T
(e speci\336c your type declarations, the better the compiler) 225.02 192.67 T
(can detect type mismatches and optimize performance.) 135 178.67 T
(\245) 117 158.67 T
(By default, classes and generic functions ar) 135 158.67 T
(e closed of) 343.7 158.67 T
(f, or) 394.69 158.67 T
2 F
(sealed) 416.95 158.67 T
1 F
(. No other) 448.72 158.67 T
(library or application can de\336ne subclasses for a sealed class or de\336ne) 135 144.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 23
%%Page: "10" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(10) 72 677.67 T
0 F
(Chapter 1) 91 677.67 T
(Introduction) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(methods for a sealed generic function. Sealing can help a compiler to opti-) 135 640.67 T
(mize slot access and method dispatch.) 135 626.67 T
(\245) 117 606.67 T
-0.14 (Dylan\325s cor) 135 606.67 P
-0.14 (e language is small. Extended components of the language, such) 190.1 606.67 P
(as input\320output and advanced mathematical operations, ar) 135 592.67 T
(e pr) 422.53 592.67 T
(ovided by) 441.31 592.67 T
(libraries. Y) 135 578.67 T
(ou can keep an application small by using only the libraries that) 186.63 578.67 T
-0.1 (the application needs. Y) 135 564.67 P
-0.1 (ou can also cr) 250.31 564.67 P
-0.1 (eate libraries of your own, and deliver) 316.08 564.67 P
(them in compiled form.) 135 550.67 T
(\245) 117 530.67 T
(Y) 135 530.67 T
(ou can selectively open or) 141.32 530.67 T
2 F
(unseal) 270.01 530.67 T
1 F
( classes and generic functions to allow) 303 530.67 T
(users of your application or library to specialize the interfaces that you pr) 135 516.67 T
(o-) 491.71 516.67 T
(vide. An open interface in Dylan includes link- and r) 135 502.67 T
(un-time information,) 391.05 502.67 T
(so that an application that specializes the interface does not have to be) 135 488.67 T
(r) 135 474.67 T
(ecompiled to use a new version of the library) 139.15 474.67 T
(.) 357.12 474.67 T
(\245) 117 454.67 T
(Most Dylan implementations pr) 135 454.67 T
(ovide support for operating in a multilan-) 290.73 454.67 T
(guage envir) 135 440.67 T
(onment. A Dylan pr) 192.62 440.67 T
(ogram can operate with code written in) 290.05 440.67 T
(another language, and a pr) 135 426.67 T
(ogram written in another language can operate) 265.88 426.67 T
(with Dylan code. Y) 135 412.67 T
(ou can use a Dylan pr) 227.3 412.67 T
(ogram as a component of a soft-) 333.03 412.67 T
(war) 135 398.67 T
(e system that includes code written in other languages.) 153.82 398.67 T
(Dylan\325s overall aim is to meet two needs that have often been in con\337ict:) 108 378.67 T
2 F
(1.) 117 358.67 T
1 F
(T) 135 358.67 T
(o give pr) 140.73 358.67 T
(ogrammers the fr) 183.8 358.67 T
(eedom and power to develop applications) 268.03 358.67 T
(rapidly) 135 344.67 T
2 F
(2.) 117 324.67 T
1 F
(T) 135 324.67 T
(o deliver components and applications that can r) 140.73 324.67 T
(un ef) 377.86 324.67 T
(\336ciently on a wide) 402.38 324.67 T
(range of machines and operating systems) 135 310.67 T
(This book intr) 108 290.67 T
(oduces you to the featur) 176.06 290.67 T
(es of Dylan that make those goals attain-) 293.64 290.67 T
(able. W) 108 276.67 T
(e think you will \336nd Dylan to be a language that makes your pr) 143.54 276.67 T
(ogram-) 452.68 276.67 T
(ming time both pr) 108 262.67 T
(oductive and enjoyable.) 196.29 262.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 24
%%Page: "11" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(1) 301.43 110.67 T
(1) 305.82 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(2) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(2) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Quick Start) 109 566.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
(W) 108 424.67 T
(e start by jumping right into Dylan. W) 117.99 424.67 T
(e show how to interact with a develop-) 302.95 424.67 T
(ment envir) 108 410.67 T
(onment, to use basic arithmetic functions, to de\336ne variables and con-) 160.95 410.67 T
(stants, and to cr) 108 396.67 T
(eate a simple but complete Dylan pr) 184.65 396.67 T
(ogram.) 360.26 396.67 T
(The Dylan language does not specify a development envir) 135 382.67 T
(onment, but) 417.94 382.67 T
(many Dylan implementations pr) 108 368.67 T
(ovide one. A) 266.8 368.67 T
2 F
(development environment) 331.44 368.67 T
1 F
( can) 464.97 368.67 T
(contain many tools, such as an editor custom-tailor) 108 354.67 T
(ed for Dylan code, a br) 355.74 354.67 T
(owser) 466.59 354.67 T
(that helps you to examine objects, a debugger) 108 340.67 T
(, and a) 328.9 340.67 T
2 F
(listener) 364.02 340.67 T
1 F
( that enables you to) 401.9 340.67 T
(type in expr) 108 326.67 T
(essions and to see their r) 166.39 326.67 T
(eturn values and output. Y) 285.38 326.67 T
(ou can use a lis-) 414.85 326.67 T
-0.3 (tener to test pieces of your pr) 108 312.67 P
-0.3 (ogram without compiling the whole pr) 247.68 312.67 P
-0.3 (ogram. When) 435.6 312.67 P
-0.16 (you start using Dylan, a good way to learn and explor) 108 298.67 P
-0.16 (e is to use a listener) 368.8 298.67 P
-0.16 (. W) 461.66 298.67 P
-0.16 (e use) 476.99 298.67 P
(a hypothetical listener in this chapter to show the r) 108 284.67 T
(esults of evaluating Dylan) 354.25 284.67 T
(expr) 108 270.67 T
(essions. Of course, Dylan also supports the traditional appr) 129.7 270.67 T
(oach of editing) 417.78 270.67 T
(sour) 108 256.67 T
(ce \336les, compiling the pr) 129.45 256.67 T
(ogram, and r) 248.49 256.67 T
(unning the pr) 311.3 256.67 T
(ogram.) 377.97 256.67 T
3 15 Q
(2.1  Dialog with a Dylan listener) 108 217 T
1 11 Q
(Her) 108 196.67 T
(e is a sample dialog between a user and a listener) 126.57 196.67 T
(. The) 365.11 196.67 T
4 10 Q
(bold typewriter) 391.78 196.67 T
(font) 108 182.67 T
1 11 Q
( shows what the user types. The) 132 182.67 T
6 10 Q
(bold-oblique typewriter font) 290.4 182.67 T
1 11 Q
( shows) 458.4 182.67 T
(what the listener displays.) 108 168.67 T
6 9 Q
(?) 108 148 T
4 F
( 7 + 12;) 113.4 148 T
6 F
(19) 108 137 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 25
%%Page: "12" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(12) 72 677.67 T
0 F
(Chapter 2) 91 677.67 T
(Quick Start) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(In our hypothetical listener) 108 640.67 T
(, the Dylan pr) 239.23 640.67 T
(ompt is the question mark,) 305.98 640.67 T
6 9 Q
(?) 439.11 640.67 T
1 11 Q
(. The user) 444.51 640.67 T
(types in) 108 626.67 T
4 10 Q
(7 + 12;) 149.35 626.67 T
1 11 Q
(and pr) 197.35 626.67 T
(esses Enter) 229.48 626.67 T
(. The listener executes the expr) 282.27 626.67 T
(ession and dis-) 431.33 626.67 T
-0.34 (plays the value r) 108 612.67 P
-0.34 (eturned by that expr) 187.56 612.67 P
-0.34 (ession, which is) 286 612.67 P
4 10 Q
-0.73 (19) 364.13 612.67 P
1 11 Q
-0.34 (. The listener displays any) 376.13 612.67 P
(r) 108 598.67 T
(eturn values and output pr) 112.15 598.67 T
(oduced by the expr) 243.3 598.67 T
(ession.) 336.94 598.67 T
3 15 Q
(2.2  Simple arithmetic operations) 108 481 T
1 11 Q
(W) 108 460.67 T
(e can do other simple arithmetic:) 117.99 460.67 T
6 9 Q
(?) 108 440 T
4 F
( 7 * 52;) 113.4 440 T
6 F
(364) 108 429 T
(?) 108 410 T
4 F
( 7 - 12;) 113.4 410 T
6 F
(-5) 108 399 T
1 11 Q
(W) 108 251.67 T
(e can multiply several numbers together:) 117.99 251.67 T
6 9 Q
(?) 108 231 T
4 F
( 24 * 7 * 52;) 113.4 231 T
6 F
(8736) 108 220 T
3 13 Q
(2.2.1  T) 108 190.33 T
(rue and false) 143.31 190.33 T
1 11 Q
(W) 108 170.67 T
(e can compar) 117.99 170.67 T
(e the magnitude of two numbers:) 182.4 170.67 T
6 9 Q
(?) 108 150 T
4 F
( 1 = 1;) 113.4 150 T
6 F
(#t) 108 139 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Environment note:) 141 564.67 T
1 F
(Our hypothetical development envir) 237.25 564.67 T
(onment) 415.38 564.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(does not r) 141 550.67 T
(epr) 189.3 550.67 T
(esent any particular Dylan development envir) 205.33 550.67 T
(on-) 429.32 550.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ment. The Dylan language does not r) 141 536.67 T
(equir) 320.9 536.67 T
(e a development envi-) 346.32 536.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 141 522.67 T
(onment, so any given implementation may not pr) 145.15 522.67 T
(ovide one.) 386.16 522.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Caution: Spaces are needed!) 141 370.67 T
1 F
(In Dylan, it is legal to use characters) 284.29 370.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.33 (such as) 141 356.67 P
4 10 Q
-0.71 (+, -, *, <) 178.59 356.67 P
1 11 Q
-0.33 (,) 236.45 356.67 P
4 10 Q
-0.71 (>) 241.62 356.67 P
1 11 Q
-0.33 (, and) 247.62 356.67 P
4 10 Q
-0.71 (/) 273.84 356.67 P
1 11 Q
-0.33 ( in names of variables. Ther) 279.84 356.67 P
-0.33 (efor) 412.06 356.67 P
-0.33 (e, in most) 431.14 356.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.35 (cases, you must leave spaces ar) 141 342.67 P
-0.35 (ound those characters in code, to make) 290.75 342.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.36 (it clear that you ar) 141 328.67 P
-0.36 (e using them as functions, and that they ar) 228.04 328.67 P
-0.36 (e not part) 431.51 328.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of the name of a variable. For example:) 141 314.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(a + b) 168 300.67 T
1 11 Q
(means add) 204 300.67 T
4 10 Q
(a) 259.99 300.67 T
1 11 Q
( and) 265.99 300.67 T
4 10 Q
(b) 290.11 300.67 T
1 11 Q
(.) 296.11 300.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(a+b) 168 286.67 T
1 11 Q
(means the name) 205.25 286.67 T
4 10 Q
(a+b) 287.19 286.67 T
1 11 Q
(.) 305.19 286.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 577.88 135 515.12 2 L
V
0.25 H
0 Z
N
486 577.88 486 515.12 2 L
V
N
134.88 578 486.12 578 2 L
V
N
134.88 515 486.12 515 2 L
V
N
135 383.88 135 279.13 2 L
V
N
486 383.88 486 279.13 2 L
V
N
134.88 384 486.12 384 2 L
V
N
134.88 279 486.12 279 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 26
%%Page: "13" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2.2 Simple arithmetic operations) 396.8 677.67 T
2 F
(13) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
6 9 Q
0 X
(?) 108 642 T
4 F
( 3 < 30;) 113.4 642 T
6 F
(#t) 108 631 T
(?) 108 612 T
4 F
( 15 > 16;) 113.4 612 T
6 F
(#f) 108 601 T
1 11 Q
-0.04 (The functions) 108 580.67 P
4 10 Q
-0.08 (=) 177.29 580.67 P
1 11 Q
-0.04 (,) 183.29 580.67 P
4 10 Q
-0.08 (<,) 188.75 580.67 P
1 11 Q
-0.04 ( and) 200.75 580.67 P
4 10 Q
-0.08 (>) 224.8 580.67 P
1 11 Q
-0.04 ( ar) 230.8 580.67 P
-0.04 (e) 243.16 580.67 P
2 F
-0.04 (predicates) 251.15 580.67 P
1 F
-0.04 (. A pr) 302.46 580.67 P
-0.04 (edicate r) 329.96 580.67 P
-0.04 (eturns tr) 371.25 580.67 P
-0.04 (ue if the condition) 412.71 580.67 P
(it is testing is tr) 108 566.67 T
(ue; otherwise, it r) 182.18 566.67 T
(eturns false. As you might guess,) 266.69 566.67 T
4 10 Q
(#t) 430.22 566.67 T
1 11 Q
( means tr) 442.22 566.67 T
(ue) 487.11 566.67 T
(and) 108 552.67 T
4 10 Q
(#f) 129.37 552.67 T
1 11 Q
( means false. False is r) 141.37 552.67 T
(epr) 248.48 552.67 T
(esented by the unique value) 264.51 552.67 T
4 10 Q
(#f) 404.01 552.67 T
1 11 Q
( only) 416.01 552.67 T
(, but any) 439.26 552.67 T
(object that is not) 108 538.67 T
4 10 Q
(#f) 190.34 538.67 T
1 11 Q
( is tr) 202.34 538.67 T
(ue \050thus, 0 is a tr) 223.54 538.67 T
(ue value\051.) 303.6 538.67 T
3 13 Q
(2.2.2  In\336x syntax and function-call syntax) 108 283.33 T
1 11 Q
(The functions) 108 263.67 T
4 10 Q
(+) 177.35 263.67 T
1 11 Q
(,) 183.35 263.67 T
4 10 Q
(-) 188.85 263.67 T
1 11 Q
(,) 194.85 263.67 T
4 10 Q
(*) 200.35 263.67 T
1 11 Q
(,) 206.35 263.67 T
4 10 Q
(<) 211.85 263.67 T
1 11 Q
(,) 217.85 263.67 T
4 10 Q
(>) 223.35 263.67 T
1 11 Q
(, and) 229.35 263.67 T
4 10 Q
(=) 256.23 263.67 T
1 11 Q
( use) 262.23 263.67 T
2 F
(in\336x syntax) 284.29 263.67 T
1 F
(; that is, the function name) 342.03 263.67 T
(appears between the ar) 108 249.67 T
(guments to the function. Most other Dylan functions use) 220.71 249.67 T
(the function-call syntax shown in the following call to the) 108 235.67 T
4 10 Q
(min) 390.04 235.67 T
1 11 Q
( function, which) 408.04 235.67 T
(r) 108 221.67 T
(eturns the smallest of its ar) 112.15 221.67 T
(guments:) 242.62 221.67 T
6 9 Q
(?) 108 201 T
4 F
( min\0502, 4, 6\051;) 113.4 201 T
6 F
(2) 108 190 T
1 11 Q
(The function name appears \336rst, followed by its ar) 108 169.67 T
(guments, which ar) 353.11 169.67 T
(e sur-) 443.46 169.67 T
(r) 108 155.67 T
(ounded by par) 112.15 155.67 T
(entheses and separated by commas. Other examples of the func-) 183.86 155.67 T
(tion-call syntax follow:) 108 141.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Comparison with C and C++: Caution!) 141 504.67 T
1 F
( C and C++ use integers to) 333.97 504.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.18 (r) 141 490.67 P
-0.18 (epr) 145.15 490.67 P
-0.18 (esent Boolean values \321 0 r) 161.17 490.67 P
-0.18 (epr) 290.45 490.67 P
-0.18 (esents false, and any nonzer) 306.48 490.67 P
-0.18 (o value) 442.03 490.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is consider) 141 476.67 T
(ed tr) 192.91 476.67 T
(ue. Dylan has an explicit) 215.49 476.67 T
4 10 Q
(<boolean>) 337.72 476.67 T
1 11 Q
( type with two) 391.72 476.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(instances:) 141 462.67 T
4 10 Q
(#f) 191.07 462.67 T
1 11 Q
( r) 203.07 462.67 T
(epr) 209.97 462.67 T
(esents false, and) 226 462.67 T
4 10 Q
(#t) 307.77 462.67 T
1 11 Q
( r) 319.77 462.67 T
(epr) 326.67 462.67 T
(esents the) 342.69 462.67 T
0 F
(canonical) 393.3 462.67 T
1 F
( tr) 435.26 462.67 T
(ue) 445.85 462.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value. However) 141 448.67 T
(, any value other than) 217.93 448.67 T
4 10 Q
(#f) 326.77 448.67 T
1 11 Q
( is also consider) 338.77 448.67 T
(ed tr) 415.55 448.67 T
(ue in a) 438.13 448.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Boolean test. Thus, in Dylan, 0 is consider) 141 434.67 T
(ed tr) 343.15 434.67 T
(ue.) 365.73 434.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Comparison with Java) 141 401.67 T
1 F
(: Java has a separate type for Boolean values.) 252.83 401.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Unlike Dylan, C, or C++, the Java) 141 387.67 T
4 10 Q
(Boolean) 306.4 387.67 T
1 11 Q
( class has only two values,) 348.4 387.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(true) 141 373.67 T
1 11 Q
( and) 165 373.67 T
4 10 Q
(false) 189.12 373.67 T
1 11 Q
(. This design allows the compiler to issue warnings) 219.12 373.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for the common C err) 141 359.67 T
(or) 245.55 359.67 T
4 10 Q
(if \050a=b\051 ...) 258.66 359.67 T
1 11 Q
(, because an assignment does) 330.66 359.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.22 (not typically yield a Boolean r) 141 345.67 P
-0.22 (esult. An explicit conversion is r) 285.32 345.67 P
-0.22 (equir) 440.07 345.67 P
-0.22 (ed) 465.48 345.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(to test nonzer) 141 331.67 T
(o in Java:) 206.92 331.67 T
4 10 Q
(if \050a!=0\051 ...) 254.41 331.67 T
1 11 Q
(.) 332.41 331.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 517.88 135 427.12 2 L
V
0.25 H
0 Z
N
486 517.88 486 427.12 2 L
V
N
134.88 518 486.12 518 2 L
V
N
134.88 427 486.12 427 2 L
V
N
135 414.88 135 324.13 2 L
V
N
486 414.88 486 324.13 2 L
V
N
134.88 415 486.12 415 2 L
V
N
134.88 324 486.12 324 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 27
%%Page: "14" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(14) 72 677.67 T
0 F
(Chapter 2) 91 677.67 T
(Quick Start) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
6 9 Q
0 X
(?) 108 642 T
4 F
(even?\0503\051;) 118.8 642 T
6 F
(#f) 108 631 T
(?) 108 612 T
4 F
(zero?\0500\051;) 118.8 612 T
6 F
(#t) 108 601 T
3 13 Q
(2.2.3  Case insensitivity) 108 482.33 T
1 11 Q
(Dylan is case insensitive. Ther) 108 462.67 T
(efor) 254.3 462.67 T
(e, we can call the) 273.39 462.67 T
4 10 Q
(max) 358.43 462.67 T
1 11 Q
( function as follows:) 376.43 462.67 T
6 9 Q
(?) 108 442 T
4 F
( MAX\050-1, 1\051;) 113.4 442 T
6 F
(1) 108 431 T
(?) 108 412 T
4 F
( mAx\0500, 55.3, 92\051;) 113.4 412 T
6 F
(92) 108 401 T
3 15 Q
(2.3  V) 108 363 T
(ariab) 139.43 363 T
(les and constants) 168.72 363 T
1 11 Q
(W) 108 342.67 T
(e can de\336ne variables for storing values:) 117.99 342.67 T
6 9 Q
(?) 108 322 T
4 F
(define variable *my-number* = 7;) 118.8 322 T
6 F
(?) 108 303 T
4 F
(define variable *your-number* = 12;) 118.8 303 T
1 11 Q
(In Dylan, these variables ar) 108 282.67 T
(e called) 240.41 282.67 T
2 F
(module variables) 279.95 282.67 T
1 F
(. A module variable has a) 367.03 282.67 T
(name and a value. For now) 108 268.67 T
(, you can consider module variables to be like global) 239.36 268.67 T
(variables in other languages. \050See Section 13.2, page 189, for information about) 108 254.67 T
(modules.\051 Module variables can have dif) 108 240.67 T
(fer) 306.14 240.67 T
(ent values assigned to them during) 319.22 240.67 T
-0.24 (the execution of a pr) 108 226.67 P
-0.24 (ogram. When you de\336ne a module variable, you must) 206.16 226.67 P
2 F
-0.24 (initial-) 469.8 226.67 P
(ize) 108 212.67 T
1 F
( it; that is, you must pr) 122.66 212.67 T
(ovide an initial value for it. For example, the initial) 232.5 212.67 T
(value of) 108 198.67 T
4 10 Q
(*my-number*) 149.99 198.67 T
1 11 Q
( is) 215.99 198.67 T
4 10 Q
(7) 229.35 198.67 T
1 11 Q
(.) 235.35 198.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.05 (Convention:) 141 572.67 P
1 F
-0.05 ( The names of most pr) 203.03 572.67 P
-0.05 (edicates end with a question mark) 310.87 572.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\321 for example,) 141 558.67 T
4 10 Q
(even?) 218.25 558.67 T
1 11 Q
(,) 248.25 558.67 T
4 10 Q
(odd?) 253.75 558.67 T
1 11 Q
(,) 277.75 558.67 T
4 10 Q
(zero?) 283.25 558.67 T
1 11 Q
(,) 313.25 558.67 T
4 10 Q
(positive?) 318.75 558.67 T
1 11 Q
( and) 372.75 558.67 T
4 10 Q
(negative?) 396.88 558.67 T
1 11 Q
(. The) 450.88 558.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(question mark is part of the name, and does not have any special) 141 544.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(behavior) 141 530.67 T
(. Ther) 183.21 530.67 T
(e ar) 211.27 530.67 T
(e exceptions to this convention, such as the pr) 228.93 530.67 T
(edi-) 451.1 530.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cates named) 141 516.67 T
4 10 Q
(=) 204.01 516.67 T
1 11 Q
(,) 210.01 516.67 T
4 10 Q
(<) 215.51 516.67 T
1 11 Q
(, and) 221.51 516.67 T
4 10 Q
(>) 248.38 516.67 T
1 11 Q
(.) 254.38 516.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Convention:) 141 164.67 T
1 F
( Module variables have names that start and end) 203.03 164.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(with an asterisk \321 for example,) 141 150.67 T
4 10 Q
(*my-number*) 298.11 150.67 T
1 11 Q
(. The asterisks ar) 364.11 150.67 T
(e) 445.18 150.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(part of the name, and do not have any special behavior) 141 136.67 T
(.) 407.39 136.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 585.88 135 509.12 2 L
V
0.25 H
0 Z
N
486 585.88 486 509.12 2 L
V
N
134.88 586 486.12 586 2 L
V
N
134.88 509 486.12 509 2 L
V
N
135 177.88 135 129.13 2 L
V
N
486 177.88 486 129.13 2 L
V
N
134.88 178 486.12 178 2 L
V
N
134.88 129 486.12 129 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 28
%%Page: "15" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2.3 Variables and constants) 415.1 677.67 T
2 F
(15) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(W) 108 634.67 T
(e can ask the listener for the values of module variables:) 117.99 634.67 T
6 9 Q
(?) 108 614 T
4 F
(*my-number*;) 118.8 614 T
6 F
(7) 108 603 T
(?) 108 584 T
4 F
(*your-number*;) 118.8 584 T
6 F
(12) 108 573 T
1 11 Q
(W) 108 552.67 T
(e can add the values stor) 117.99 552.67 T
(ed in these variables:) 237.88 552.67 T
6 9 Q
(?) 108 532 T
4 F
(*my-number* + *your-number*;) 118.8 532 T
6 F
(19) 108 521 T
1 11 Q
(W) 108 500.67 T
(e can multiply the values stor) 117.99 500.67 T
(ed in these variables:) 261.2 500.67 T
6 9 Q
(?) 108 480 T
4 F
(*my-number* * *your-number*;) 118.8 480 T
6 F
(84) 108 469 T
1 11 Q
-0.08 (W) 108 448.67 P
-0.08 (e can use the) 117.99 448.67 P
2 F
-0.08 (assignment operator) 182.55 448.67 P
1 F
-0.08 (,) 284.01 448.67 P
4 10 Q
-0.17 (:=) 289.43 448.67 P
1 11 Q
-0.08 (, to change the values stor) 301.43 448.67 P
-0.08 (ed in a variable:) 426.83 448.67 P
6 9 Q
(?) 108 428 T
4 F
(*my-number* := 100;) 118.8 428 T
6 F
(100) 108 417 T
3 13 Q
(2.3.1  Assignment, initialization, and equality) 108 387.33 T
1 11 Q
-0.37 (People new to Dylan may \336nd) 108 367.67 P
4 10 Q
-0.8 (=) 256.59 367.67 P
1 11 Q
-0.37 ( and) 262.59 367.67 P
4 10 Q
-0.8 (:=) 285.98 367.67 P
1 11 Q
-0.37 (confusing, because the names ar) 303.18 367.67 P
-0.37 (e similar) 458.2 367.67 P
-0.37 (,) 498.86 367.67 P
(and the meanings ar) 108 353.67 T
(e r) 207.04 353.67 T
(elated but distinct.) 219.21 353.67 T
-0.02 (The meaning of) 135 339.67 P
4 10 Q
-0.05 (=) 213.87 339.67 P
1 11 Q
-0.02 ( depends on whether it appears an expr) 219.87 339.67 P
-0.02 (ession, or in a de\336-) 412.37 339.67 P
(nition of a variable or constant. In an expr) 108 325.67 T
(ession,) 311.13 325.67 T
4 10 Q
(=) 346.83 325.67 T
1 11 Q
( is a function that tests for) 352.83 325.67 T
(equality; for example,) 108 311.67 T
6 9 Q
(?) 108 291 T
4 F
(3 = 3;) 118.8 291 T
6 F
(#t) 108 280 T
1 11 Q
-0.19 (In a de\336nition of a variable or constant,) 108 259.67 P
4 10 Q
-0.42 (=) 300.11 259.67 P
1 11 Q
-0.19 ( pr) 306.11 259.67 P
-0.19 (ecedes the initial value of the variable) 319.43 259.67 P
(or constant; for example,) 108 245.67 T
6 9 Q
(?) 108 225 T
4 F
(define variable *her-number* = 3;) 118.8 225 T
1 11 Q
(After you initialize a variable with) 108 204.67 T
4 10 Q
(=) 278.11 204.67 T
1 11 Q
(, the) 284.11 204.67 T
4 10 Q
(=) 307.62 204.67 T
1 11 Q
( function r) 313.62 204.67 T
(eturns tr) 364.05 204.67 T
(ue:) 405.54 204.67 T
6 9 Q
(?) 108 184 T
4 F
(*her-number* = 3;) 118.8 184 T
6 F
(#t) 108 173 T
1 11 Q
(The assignment operator) 108 152.67 T
(,) 228.29 152.67 T
4 10 Q
(:=) 233.79 152.67 T
1 11 Q
(, performs assignment, which is setting the value of) 245.79 152.67 T
(an existing variable; for example,) 108 138.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 29
%%Page: "16" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(16) 72 677.67 T
0 F
(Chapter 2) 91 677.67 T
(Quick Start) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
6 9 Q
0 X
(?) 108 642 T
4 F
(*her-number* := 4;) 118.8 642 T
6 F
(4) 108 631 T
1 11 Q
(After you have assigned a value to a variable, the = function r) 108 610.67 T
(eturns tr) 407.42 610.67 T
(ue:) 448.91 610.67 T
6 9 Q
(?) 108 590 T
4 F
(*her-number* = 4;) 118.8 590 T
6 F
(#t) 108 579 T
1 11 Q
(Dylan of) 108 558.67 T
(fers an identity pr) 149.95 558.67 T
(edicate, which we discuss in Section 3.3.1, page 35.) 236.89 558.67 T
3 13 Q
(2.3.2  V) 108 527.33 T
(ariab) 144.13 527.33 T
(les that ha) 169.52 527.33 T
(ve type constraints) 222.1 527.33 T
1 11 Q
(W) 108 507.67 T
(e de\336ned the variables) 117.99 507.67 T
4 10 Q
(*my-number*) 230.53 507.67 T
1 11 Q
( and) 296.53 507.67 T
4 10 Q
(*your-number*) 320.65 507.67 T
1 11 Q
( without giving a) 398.65 507.67 T
2 F
(type constraint) 108 493.67 T
1 F
( on the variables. Thus, we can stor) 182.84 493.67 T
(e any type of value in these) 353.31 493.67 T
(variables. For example, her) 108 479.67 T
(e we use the assignment operator) 239.25 479.67 T
(,) 400.91 479.67 T
4 10 Q
(:=) 406.41 479.67 T
1 11 Q
( , to stor) 418.41 479.67 T
(e strings) 457.4 479.67 T
(in these variables:) 108 465.67 T
6 9 Q
(?) 108 445 T
4 F
(*my-number* := "seven";) 118.8 445 T
6 F
("seven") 108 434 T
(?) 108 415 T
4 F
(*your-number* := "twelve";) 118.8 415 T
6 F
("twelve") 108 404 T
1 11 Q
(What happens if we try to add the string values stor) 108 383.67 T
(ed in these variables?) 360.79 383.67 T
6 9 Q
(?) 108 363 T
4 F
(*my-number* + *your-number*;) 118.8 363 T
6 F
(ERROR: No applicable method for + with arguments \050"seven", "twelve"\051) 108 352 T
1 11 Q
(Dylan signals an err) 108 331.67 T
(or because the) 205.39 331.67 T
4 10 Q
(+) 277.55 331.67 T
1 11 Q
( function does not know how to operate on) 283.55 331.67 T
(string ar) 108 317.67 T
(guments.) 148.71 317.67 T
(W) 108 193.67 T
(e can r) 117.99 193.67 T
(ede\336ne the variables to include a type constraint, which ensur) 149.69 193.67 T
(es that the) 450.75 193.67 T
-0.14 (variables can hold only numbers. W) 108 179.67 P
-0.14 (e specify that) 281.72 179.67 P
4 10 Q
-0.3 (*my-number*) 348.3 179.67 P
1 11 Q
-0.14 ( can hold any inte-) 414.3 179.67 P
(ger) 108 165.67 T
(, and that) 122.92 165.67 T
4 10 Q
(*your-number*) 171.61 165.67 T
1 11 Q
( can hold a single-pr) 249.61 165.67 T
(ecision \337oating-point number:) 348.5 165.67 T
6 9 Q
(?) 108 145 T
4 F
( define variable *my-number* :: <integer> = 7;) 113.4 145 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Environment note:) 141 283.67 T
1 F
(The Dylan implementation de\336nes the exact) 237.25 283.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(wor) 141 269.67 T
(ding of err) 160.33 269.67 T
(or messages, and what happens when an err) 211.7 269.67 T
(or is sig-) 427.56 269.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.29 (naled. If your implementation opens a Dylan debugger when an err) 141 255.67 P
-0.29 (or) 467.19 255.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is signaled, you now have an opportunity to experiment with the) 141 241.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(debugger!) 141 227.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 296.88 135 220.12 2 L
V
0.25 H
0 Z
N
486 296.88 486 220.12 2 L
V
N
134.88 297 486.12 297 2 L
V
N
134.88 220 486.12 220 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 30
%%Page: "17" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2.3 Variables and constants) 415.1 677.67 T
2 F
(17) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
6 9 Q
0 X
(?) 108 642 T
4 F
( define variable *your-number* :: <single-float> = 12.01;) 113.4 642 T
1 11 Q
(What happens if we try to stor) 108 621.67 T
(e a string in one of the variables?) 255.8 621.67 T
6 9 Q
(?) 108 601 T
4 F
(*my-number* := "seven";) 118.8 601 T
6 F
(ERROR: The value assigned to *my-number* must be of type <integer>) 108 590 T
1 11 Q
(Both) 108 569.67 T
4 10 Q
(<integer>) 133.46 569.67 T
1 11 Q
( and) 187.46 569.67 T
4 10 Q
(<single-float>) 211.59 569.67 T
1 11 Q
( ar) 295.59 569.67 T
(e) 307.98 569.67 T
2 F
(classes.) 316 569.67 T
1 F
(For now) 355.7 569.67 T
(, you can think of a) 395.49 569.67 T
-0.23 (class as being like a datatype in another language. Dylan pr) 108 555.67 P
-0.23 (ovides a set of built-in) 394.65 555.67 P
(classes, and you can also de\336ne new classes.) 108 541.67 T
(The) 108 445.67 T
4 10 Q
(+) 129.16 445.67 T
1 11 Q
( function can operate on numbers of dif) 135.16 445.67 T
(fer) 327.14 445.67 T
(ent types:) 340.21 445.67 T
6 9 Q
(?) 108 425 T
4 F
(*my-number* + *your-number*;) 118.8 425 T
6 F
(19.01) 108 414 T
3 13 Q
(2.3.3  Module constants) 108 384.33 T
1 11 Q
(A) 108 364.67 T
2 F
(module constant) 119.31 364.67 T
1 F
( is much like a module variable, except that it is an err) 202.71 364.67 T
(or to) 464.79 364.67 T
(assign a dif) 108 350.67 T
(fer) 162.93 350.67 T
(ent value to a constant. Although you cannot assign a dif) 176.01 350.67 T
(fer) 452.33 350.67 T
(ent) 465.41 350.67 T
(value to a constant, you may be able to change the elements of the value, such as) 108 336.67 T
(assigning a dif) 108 322.67 T
(fer) 178.65 322.67 T
(ent value to an element of an array) 191.73 322.67 T
(.) 359.42 322.67 T
(Y) 135 308.67 T
(ou use) 141.32 308.67 T
4 10 Q
(define constant) 176.03 308.67 T
1 11 Q
( to de\336ne a module constant, in the same way) 266.03 308.67 T
(that you use) 108 294.67 T
4 10 Q
(define variable) 170.65 294.67 T
1 11 Q
( to de\336ne a variable. Y) 260.64 294.67 T
(ou must initialize the value) 368.19 294.67 T
(of the constant, and you cannot change that value thr) 108 280.67 T
(oughout the execution of a) 366.21 280.67 T
(Dylan pr) 108 266.67 T
(ogram. Her) 151.24 266.67 T
(e is an example:) 206.99 266.67 T
6 9 Q
(?) 108 246 T
4 F
( define constant $pi = 3.14159;) 113.4 246 T
1 11 Q
(Both module variables and module constants ar) 108 154.67 T
(e accessible within a) 340.24 154.67 T
2 F
(module) 441.6 154.67 T
1 F
(.) 480.1 154.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Convention:) 141 507.67 T
1 F
(Class names start with an open angle bracket and end) 205.78 507.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(with a close angle bracket \321 for example,) 141 493.67 T
4 10 Q
(<integer>) 346.16 493.67 T
1 11 Q
(. The angle) 400.16 493.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(brackets ar) 141 479.67 T
(e part of the name, and do not have any special behavior) 193.84 479.67 T
(.) 468.25 479.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Convention:) 141 217.67 T
1 F
(Module constant names start with the dollar sign,) 205.78 217.67 T
4 10 Q
($) 450 217.67 T
1 11 Q
(\321) 462 217.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for example,) 141 203.67 T
4 10 Q
($pi) 204.5 203.67 T
1 11 Q
(. The dollar sign is part of the name, and does not) 222.5 203.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(have any special behavior) 141 189.67 T
(.) 266.19 189.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 520.88 135 472.12 2 L
V
0.25 H
0 Z
N
486 520.88 486 472.12 2 L
V
N
134.88 521 486.12 521 2 L
V
N
134.88 472 486.12 472 2 L
V
N
135 230.88 135 182.13 2 L
V
N
486 230.88 486 182.13 2 L
V
N
134.88 231 486.12 231 2 L
V
N
134.88 182 486.12 182 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 31
%%Page: "18" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(18) 72 677.67 T
0 F
(Chapter 2) 91 677.67 T
(Quick Start) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(\050See Section 13.2, page 189, for information about modules.\051 Dylan also of) 108 640.67 T
(fers) 465.14 640.67 T
(variables that ar) 108 626.67 T
(e accessible within a smaller ar) 186.2 626.67 T
(ea, called) 335.84 626.67 T
2 F
(local variables) 383.64 626.67 T
1 F
(. Ther) 456.04 626.67 T
(e is) 484.1 626.67 T
(no concept of a local constant; all constants ar) 108 612.67 T
(e module constants. Ther) 329.03 612.67 T
(efor) 451.1 612.67 T
(e,) 470.19 612.67 T
(thr) 108 598.67 T
(oughout the r) 122.14 598.67 T
(est of this book, we use the wor) 188.42 598.67 T
(d) 341.27 598.67 T
0 F
(constant) 350.74 598.67 T
1 F
( as shorthand for mod-) 388.82 598.67 T
(ule constant.) 108 584.67 T
3 13 Q
(2.3.4  Local v) 108 553.33 T
(ariab) 174.18 553.33 T
(les) 199.57 553.33 T
1 11 Q
(Y) 108 533.67 T
(ou can de\336ne a local variable by using a) 114.32 533.67 T
4 10 Q
(let) 311.14 533.67 T
1 11 Q
( declaration. Unlike module vari-) 329.14 533.67 T
(ables, local variables ar) 108 519.67 T
(e established dynamically) 220.13 519.67 T
(, and they have) 344.8 519.67 T
2 F
(lexical scope) 421.93 519.67 T
1 F
(.) 485.16 519.67 T
(During its lifetime, a local variable shadows any module variable, module con-) 108 505.67 T
(stant, or existing local variable with the same name.) 108 491.67 T
(Local variables ar) 135 477.67 T
(e scoped within the smallest body that surr) 220.44 477.67 T
(ounds them.) 429.92 477.67 T
(Y) 108 463.67 T
(ou can use) 114.32 463.67 T
4 10 Q
(let) 168.57 463.67 T
1 11 Q
( anywher) 186.57 463.67 T
(e within a body) 232.33 463.67 T
(, rather than just at the beginning; the) 307.02 463.67 T
-0.31 (local variable is declar) 108 449.67 P
-0.31 (ed starting at its de\336nition, and continuing to the end of the) 215.01 449.67 P
(smallest body that surr) 108 435.67 T
(ounds the de\336nition.) 219.84 435.67 T
(A) 135 421.67 T
2 F
(body) 146.31 421.67 T
1 F
( is a r) 171.98 421.67 T
(egion of pr) 197.74 421.67 T
(ogram code that delimits the scope of all local vari-) 250.66 421.67 T
(ables declar) 108 407.67 T
(ed inside the body) 165.19 407.67 T
(. When you ar) 253.85 407.67 T
(e de\336ning functions, usually ther) 322.32 407.67 T
(e is) 482.9 407.67 T
-0.21 (an implicit body available. For example,) 108 393.67 P
4 10 Q
-0.47 (define method) 304.52 393.67 P
1 11 Q
-0.21 ( cr) 382.05 393.67 P
-0.21 (eates an implicit body) 393.61 393.67 P
-0.21 (.) 498.71 393.67 P
-0.48 (\050For information about method de\336nitions, see Section 3.1, page 27.\051 Other contr) 108 379.67 P
-0.48 (ol) 492.52 379.67 P
(str) 108 365.67 T
(uctur) 120.51 365.67 T
(es, such as) 146.39 365.67 T
4 10 Q
(if) 200.07 365.67 T
1 11 Q
(, cr) 212.07 365.67 T
(eate implicit bodies. Bodies can be nested. If ther) 226.6 365.67 T
(e is no) 462.67 365.67 T
-0.25 (body handy) 108 351.67 P
-0.25 (, or if you want to cr) 165.35 351.67 P
-0.25 (eate a body smaller than the implicit one, you can) 262.35 351.67 P
(cr) 108 337.67 T
(eate a body by using) 117.03 337.67 T
4 10 Q
(begin) 220.05 337.67 T
1 11 Q
( to start it and) 250.05 337.67 T
4 10 Q
(end) 320.48 337.67 T
1 11 Q
( to \336nish it:) 338.48 337.67 T
6 9 Q
(?) 108 317 T
4 F
(begin) 118.8 317 T
(let radius = 5;) 129.6 306 T
(let circumference = 2 * $pi * radius;) 129.6 295 T
(circumference;) 129.6 284 T
(end;) 118.8 273 T
6 F
(31.4159) 108 262 T
1 11 Q
-0.46 (The local variables) 108 241.67 P
4 10 Q
-1.01 (radius) 200.05 241.67 P
1 11 Q
-0.46 ( and) 236.05 241.67 P
4 10 Q
-1.01 (circumference) 259.25 241.67 P
1 11 Q
-0.46 ( ar) 337.25 241.67 P
-0.46 (e declar) 349.18 241.67 P
-0.46 (ed, initialized, and used) 386.46 241.67 P
(within the body) 108 227.67 T
(. The value r) 184.43 227.67 T
(eturned by the body is the value of the expr) 244.81 227.67 T
(ession) 456.73 227.67 T
(executed last in the body) 108 213.67 T
(, which is) 227.82 213.67 T
4 10 Q
(circumference) 276.75 213.67 T
1 11 Q
(. Outside the lexical scope of) 354.75 213.67 T
(the body) 108 199.67 T
(, the local variables ar) 149.71 199.67 T
(e no longer declar) 255.14 199.67 T
(ed, and trying to access them is) 342.12 199.67 T
(an err) 108 185.67 T
(or:) 136.41 185.67 T
6 9 Q
(?) 108 165 T
4 F
(radius) 118.8 165 T
6 F
(ERROR: The variable radius is undefined.) 108 154 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 32
%%Page: "19" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2.4 Formatted output) 438.94 677.67 T
2 F
(19) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(2.4  Formatted output) 108 638 T
1 11 Q
(Thr) 108 617.67 T
(oughout this book, we use the) 125.29 617.67 T
4 10 Q
(format-out) 274.25 617.67 T
1 11 Q
( function to print output. The syn-) 334.25 617.67 T
(tax of) 108 603.67 T
4 10 Q
(format-out) 137.93 603.67 T
1 11 Q
( is) 197.93 603.67 T
4 10 Q
(format-out) 108 583 T
0 11 Q
(string ar) 173.4 583 T
(g1 ... ar) 212.01 583 T
(gn) 245.73 583 T
1 F
-0.25 (The) 108 562.67 P
4 10 Q
-0.54 (format-out) 128.92 562.67 P
1 11 Q
-0.25 ( function sends output to the standar) 188.92 562.67 P
-0.25 (d output destination, which) 366.86 562.67 P
(could be the window wher) 108 548.67 T
(e the pr) 238.72 548.67 T
(ogram was invoked, or a new window associ-) 275.51 548.67 T
-0.19 (ated with the pr) 108 534.67 P
-0.19 (ogram. The standar) 185.14 534.67 P
-0.19 (d output destination depends on the platform.) 279.62 534.67 P
(The) 135 520.67 T
0 F
(string) 156.16 520.67 T
1 F
( ar) 183.06 520.67 T
(gument can contain or) 195.46 520.67 T
(dinary text, formatting instr) 304.35 520.67 T
(uctions) 439.98 520.67 T
(beginning with) 108 506.67 T
4 10 Q
(%) 185.05 506.67 T
1 11 Q
(, and characters beginning with a backslash,) 191.05 506.67 T
4 10 Q
(\134) 407.88 506.67 T
1 11 Q
(. Or) 413.88 506.67 T
(dinary text in) 432.17 506.67 T
(the format string is sent to the destination verbatim. Y) 108 492.67 T
(ou can use the backslash) 369.29 492.67 T
(character in the) 108 478.67 T
0 F
(string) 185.82 478.67 T
1 F
( ar) 212.72 478.67 T
(gument to insert unusual characters, such as) 225.12 478.67 T
4 10 Q
(\134n) 443.69 478.67 T
1 11 Q
(, which) 455.69 478.67 T
(prints the newline character) 108 464.67 T
(.) 243.13 464.67 T
6 9 Q
(?) 108 444 T
4 F
(format-out\050"Your future is filled with wondrous surprises.\134n"\051) 118.8 444 T
6 F
(Your future is filled with wondrous surprises.) 108 433 T
1 11 Q
-0.13 (Formatting instr) 108 412.67 P
-0.13 (uctions begin with a per) 187.3 412.67 P
-0.13 (cent sign,) 304.11 412.67 P
4 10 Q
-0.29 (%) 352.62 412.67 P
1 11 Q
-0.13 (. For each) 358.62 412.67 P
4 10 Q
-0.29 (%) 407.75 412.67 P
1 11 Q
-0.13 (, ther) 413.75 412.67 P
-0.13 (e is normally) 438.52 412.67 P
(a corr) 108 398.67 T
(esponding ar) 135.63 398.67 T
(gument giving an object to output. The character after the) 199.42 398.67 T
4 10 Q
(%) 482.34 398.67 T
1 11 Q
(contr) 108 384.67 T
(ols how the object is formatted. A wide range of formatting characters is) 133.02 384.67 T
(available, but we use only the following formatting characters in this book:) 108 370.67 T
4 10 Q
(%d) 135 344.67 T
1 11 Q
(Prints an integer r) 216 344.67 T
(epr) 303.33 344.67 T
(esented as a decimal number) 319.36 344.67 T
4 10 Q
(%s) 135 318.67 T
1 11 Q
(Prints the contents of its string ar) 216 318.67 T
(gument unquoted) 376.48 318.67 T
4 10 Q
(%=) 135 292.67 T
1 11 Q
(Prints an implementation-speci\336c r) 216 292.67 T
(epr) 386.63 292.67 T
(esentation of the) 402.66 292.67 T
(object; you can use) 216 278.67 T
4 10 Q
(%=) 310.26 278.67 T
1 11 Q
( for any class of object) 322.26 278.67 T
(Her) 108 258.67 T
(e ar) 126.57 258.67 T
(e examples:) 144.23 258.67 T
6 9 Q
(?) 108 238 T
4 F
(format-out) 118.8 238 T
(\050"Your number is %= and mine is %d\134n", *your-number*, *my-number*\051;) 129.6 227 T
6 F
(Your number is 12.01 and mine is 7.) 108 216 T
(?) 108 197 T
4 F
(format-out\050"The %s meeting will be held at %d:%d%d.\134n", "Staff", 2, 3, 0\051;) 118.8 197 T
6 F
(The Staff meeting will be held at 2:30.) 108 186 T
1 11 Q
(In Dylan, functions do not need to r) 108 165.67 T
(eturn any values. The) 281.4 165.67 T
4 10 Q
(format-out) 389.3 165.67 T
1 11 Q
( function) 449.3 165.67 T
(r) 108 151.67 T
(eturns no values. Thus, it is called only for its side ef) 112.15 151.67 T
(fect \050printing output\051.) 366.33 151.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 33
%%Page: "20" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(20) 72 677.67 T
0 F
(Chapter 2) 91 677.67 T
(Quick Start) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(The) 108 586.67 T
4 10 Q
(format-out) 129.16 586.67 T
1 11 Q
( function is available fr) 189.16 586.67 T
(om the) 300.29 586.67 T
4 10 Q
(format-out) 336.76 586.67 T
1 11 Q
( library) 396.76 586.67 T
(, and is not) 431.08 586.67 T
(part of the cor) 108 572.67 T
(e Dylan language. W) 176.26 572.67 T
(e now describe how to make the) 276.98 572.67 T
4 10 Q
(format-out) 436.55 572.67 T
1 11 Q
(function accessible to our pr) 108 558.67 T
(ogram, and how to set up the \336les that constitute the) 244.73 558.67 T
-0.42 (pr) 108 544.67 P
-0.42 (ogram. Many of the details depend on the implementation of Dylan, so you will) 118.76 544.67 P
(need to consult the documentation of your Dylan implementation.) 108 530.67 T
3 15 Q
(2.5  A complete Dylan pr) 108 384 T
(ogram) 250.65 384 T
1 11 Q
-0.09 (In this section, we show how to cr) 108 363.67 P
-0.09 (eate a complete Dylan pr) 272.23 363.67 P
-0.09 (ogram. The Dylan pr) 393.02 363.67 P
-0.09 (o-) 494.33 363.67 P
(gram will print the following:) 108 349.67 T
4 9 Q
(Hello, world) 108 329 T
1 11 Q
(The Dylan expr) 108 308.67 T
(ession that prints that output is) 183.35 308.67 T
4 9 Q
(format-out\050"Hello, world\134n"\051;) 108 288 T
1 11 Q
(A Dylan) 108 267.67 T
2 F
(library) 151.79 267.67 T
1 F
( de\336nes a softwar) 186.01 267.67 T
(e component \321 a separately compilable unit) 271.48 267.67 T
(that can be either a stand-alone pr) 108 253.67 T
(ogram or a component of a lar) 272.96 253.67 T
(ger pr) 419.88 253.67 T
(ogram.) 449.12 253.67 T
(Thus, when we talk about cr) 108 239.67 T
(eating a Dylan pr) 245.87 239.67 T
(ogram, we ar) 330.19 239.67 T
(e r) 394.21 239.67 T
(eally talking about) 406.38 239.67 T
(cr) 108 225.67 T
(eating a library) 117.03 225.67 T
(.) 189.68 225.67 T
(A library contains) 135 211.67 T
2 F
(modules) 225.24 211.67 T
1 F
(. Each module contains de\336nitions and expr) 268.63 211.67 T
(es-) 482.01 211.67 T
(sions. The module is a) 108 197.67 T
2 F
(namespace) 218.76 197.67 T
1 F
( for the de\336nitions and expr) 273.75 197.67 T
(essions. For exam-) 409.2 197.67 T
(ple, if you de\336ne a module variable in one particular module, it is available to all) 108 183.67 T
(the code in that module. If you choose to export that module variable, you can) 108 169.67 T
-0.41 (make it accessible to other modules that import it. In this chapter) 108 155.67 P
-0.41 (, we give the bar) 418.02 155.67 P
-0.41 (e) 496.39 155.67 P
(minimum of information about libraries and modules \321 just enough for you to) 108 141.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Comparison with C:) 141 620.67 T
4 10 Q
( format-out) 242.12 620.67 T
1 11 Q
( is similar to) 308.12 620.67 T
4 10 Q
(printf) 370.4 620.67 T
1 11 Q
(.) 406.4 620.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Usage note:) 141 496.67 T
1 F
(The Apple T) 201.81 496.67 T
(echnology Release does not curr) 261.7 496.67 T
(ently) 418.29 496.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pr) 141 482.67 T
(ovide the) 151.76 482.67 T
4 10 Q
(format-out) 199.93 482.67 T
1 11 Q
( function. For information about how to) 259.93 482.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 141 468.67 T
(un these examples in the Apple T) 145.26 468.67 T
(echnology Release, see Harle-) 306.73 468.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(quin\325s or Addison-W) 141 454.67 T
(esley\325s W) 242.89 454.67 T
(eb page for our book. See Section) 287.87 454.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A.1. in Appendix A,) 141 440.67 T
0 F
(Resour) 244.27 440.67 T
(ces on Dylan) 275.24 440.67 T
1 F
(.) 332.89 440.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 633.88 135 613.12 2 L
V
0.25 H
0 Z
N
486 633.88 486 613.12 2 L
V
N
134.88 634 486.12 634 2 L
V
N
134.88 613 486.12 613 2 L
V
N
135 509.88 135 433.12 2 L
V
N
486 509.88 486 433.12 2 L
V
N
134.88 510 486.12 510 2 L
V
N
134.88 433 486.12 433 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 34
%%Page: "21" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2.5 A complete Dylan program) 402.35 677.67 T
2 F
(21) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.26 (get started quickly) 108 640.67 P
-0.26 (. For a complete description of libraries and modules, see Chap-) 196.71 640.67 P
(ter 13,) 108 626.67 T
0 F
(Libraries and Modules) 143.2 626.67 T
1 F
(.) 243.02 626.67 T
(T) 135 612.67 T
(o cr) 140.73 612.67 T
(eate a complete Dylan pr) 158.52 612.67 T
(ogram, we need) 279.67 612.67 T
(\245) 117 592.67 T
(T) 135 592.67 T
(o de\336ne the library that is our pr) 140.73 592.67 T
(ogram; we shall cr) 299.03 592.67 T
(eate a library named) 388.15 592.67 T
4 10 Q
(hello) 135 578.67 T
1 11 Q
(\245) 117 558.67 T
(T) 135 558.67 T
(o de\336ne a module \050or mor) 140.73 558.67 T
(e than one\051 in the library) 267.73 558.67 T
(, to hold the de\336nitions) 386.4 558.67 T
(and expr) 135 544.67 T
(essions in our pr) 178.08 544.67 T
(ogram; we shall cr) 258.54 544.67 T
(eate a module named) 347.66 544.67 T
4 10 Q
(hello) 454.93 544.67 T
1 11 Q
( in) 484.93 544.67 T
(the) 135 530.67 T
4 10 Q
(hello) 153.01 530.67 T
1 11 Q
( library) 183.01 530.67 T
(\245) 117 510.67 T
(T) 135 510.67 T
(o write the pr) 140.73 510.67 T
(ogram code, in the module; we shall put the) 206.58 510.67 T
4 10 Q
(format-out) 423.29 510.67 T
1 11 Q
(expr) 135 496.67 T
(ession in the) 156.7 496.67 T
4 10 Q
(hello) 220.02 496.67 T
1 11 Q
( module of the) 250.02 496.67 T
4 10 Q
(hello) 323.49 496.67 T
1 11 Q
( library) 353.49 496.67 T
3 13 Q
(2.5.1  Files of a Dylan pr) 108 465.33 T
(ogram) 229.28 465.33 T
1 11 Q
-0.08 (Dif) 108 445.67 P
-0.08 (fer) 123.18 445.67 P
-0.08 (ent Dylan envir) 136.26 445.67 P
-0.08 (onments stor) 211.82 445.67 P
-0.08 (e pr) 274.94 445.67 P
-0.08 (ograms in dif) 293.64 445.67 P
-0.08 (fer) 358.31 445.67 P
-0.08 (ent ways, but ther) 371.39 445.67 P
-0.08 (e is a \336le-) 458.57 445.67 P
-0.18 (based) 108 431.67 P
2 F
-0.18 (interchange format) 138.81 431.67 P
1 F
-0.18 ( that all Dylan envir) 234.26 431.67 P
-0.18 (onments accept. In this inter) 330.48 431.67 P
-0.18 (change) 466.86 431.67 P
(format, any pr) 108 417.67 T
(ogram consists of a minimum of two \336les: a \336le containing the pr) 177.84 417.67 T
(o-) 493.65 417.67 T
(gram itself, and a \336le describing the libraries and modules. The most trivial pr) 108 403.67 T
(o-) 486.93 403.67 T
(gram consists of a single module in a single library) 108 389.67 T
(, but it is still expr) 353.59 389.67 T
(essed in two) 440.6 389.67 T
(\336les. Most Dylan implementations also accept a thir) 108 375.67 T
(d \336le, which enumerates all) 359.45 375.67 T
(the \336les that make up a pr) 108 361.67 T
(ogram; this \336le is called a) 234.72 361.67 T
2 F
(library-interchange) 360.77 361.67 T
(de\336nition \050LID\051) 108 347.67 T
1 F
( \336le.) 187.73 347.67 T
(The details of how the \336les ar) 135 333.67 T
(e named and stor) 278 333.67 T
(ed depends on your Dylan) 362.15 333.67 T
(implementation. T) 108 319.67 T
(ypically) 196.91 319.67 T
(, however) 234.52 319.67 T
(, you have a dir) 281.89 319.67 T
(ectory containing all the \336les) 357.35 319.67 T
(of the pr) 108 305.67 T
(ogram. As shown in Figur) 149.18 305.67 T
(e 2.1, we name our pr) 276.3 305.67 T
(ogram dir) 380.89 305.67 T
(ectory) 429.39 305.67 T
4 10 Q
(hello) 462.34 305.67 T
1 11 Q
(,) 492.34 305.67 T
(and name the \336les) 108 291.67 T
4 10 Q
(hello.lid) 199.55 291.67 T
1 11 Q
(,) 253.55 291.67 T
4 10 Q
(library.dylan) 259.05 291.67 T
1 11 Q
(, and) 337.05 291.67 T
4 10 Q
(hello.dylan) 363.93 291.67 T
1 11 Q
( \050the latter is) 429.93 291.67 T
(the pr) 108 277.67 T
(ogram \336le\051.) 136.76 277.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 161.86 504 169.86 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 2.1) 148.8 173.19 T
8 F
(The) 201.6 173.19 T
4 F
(hello) 221.62 173.19 T
8 F
( director) 251.62 173.19 T
(y and the three \336les that it contains) 288.04 173.19 T
(.) 442.42 173.19 T
0 0 0 1 0 0 0 K
108 185.86 504 262 C
222.08 189.86 389.91 260 C
0 0 0 1 0 0 0 K
4 9 Q
0 X
0 0 0 1 0 0 0 K
(hello) 261.01 243.76 T
(hello.lid) 277.21 232.7 T
(library.dylan) 277.21 221.63 T
(hello.dylan) 277.21 210.56 T
249.08 199.43 366.08 257.72 R
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
108 185.86 504 262 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 35
%%Page: "22" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(22) 72 677.67 T
0 F
(Chapter 2) 91 677.67 T
(Quick Start) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(2.5.2  Components of a Dylan pr) 108 488.33 T
(ogram) 270.12 488.33 T
1 11 Q
(W) 108 468.67 T
(e start with this simple Dylan expr) 117.99 468.67 T
(ession:) 285.75 468.67 T
4 9 Q
(format-out\050"Hello, world\134n"\051;) 108 448 T
1 11 Q
(All Dylan expr) 108 427.67 T
(essions must be in a module. Ther) 179.9 427.67 T
(efor) 345.17 427.67 T
(e, we use a text editor to cr) 364.26 427.67 T
(e-) 493.9 427.67 T
(ate a \336le that contains the expr) 108 413.67 T
(ession within a module:) 256.16 413.67 T
-0.22 (The) 108 308.67 P
4 10 Q
-0.47 (hello.dylan) 128.95 308.67 P
1 11 Q
-0.22 ( \336le is the top-level \336le; you can think of it as the pr) 194.95 308.67 P
-0.22 (ogram itself.) 440.92 308.67 P
(When you r) 108 294.67 T
(un this pr) 165.59 294.67 T
(ogram, Dylan executes all the expr) 212.73 294.67 T
(essions in the \336le in the) 380.76 294.67 T
(or) 108 280.67 T
(der that they appear in the \336le. Ther) 118.15 280.67 T
(e is only one expr) 293.32 280.67 T
(ession in this pr) 378.56 280.67 T
(ogram \321) 455.23 280.67 T
(the call to) 108 266.67 T
4 10 Q
(format-out) 157.88 266.67 T
1 11 Q
(.) 217.88 266.67 T
(The \336rst line of this \336le declar) 135 252.67 T
(es that the expr) 279.61 252.67 T
(essions and de\336nitions in this) 353.82 252.67 T
(\336le ar) 108 238.67 T
(e in the) 135.52 238.67 T
4 10 Q
(hello) 173.9 238.67 T
1 11 Q
( module. Befor) 203.9 238.67 T
(e we can r) 275.5 238.67 T
(un \050or even compile\051 this pr) 324.51 238.67 T
(ogram,) 459.62 238.67 T
-0.39 (we need to de\336ne the) 108 224.67 P
4 10 Q
-0.84 (hello) 213.09 224.67 P
1 11 Q
-0.39 ( module. All modules must be in a library) 243.09 224.67 P
-0.39 (, so we must) 442.08 224.67 P
(also de\336ne a library for our) 108 210.67 T
4 10 Q
(hello) 243.48 210.67 T
1 11 Q
( module. W) 273.48 210.67 T
(e cr) 329.26 210.67 T
(eate a second \336le, called the) 346.31 210.67 T
(library \336le, and de\336ne the) 108 196.67 T
4 10 Q
(hello) 236.61 196.67 T
1 11 Q
( module and) 266.61 196.67 T
4 10 Q
(hello) 331.03 196.67 T
1 11 Q
( library in the library \336le:) 361.03 196.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Comparison with C:) 141 620.67 T
1 F
( The following analogies may help you to) 242.12 620.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(understand how the elements of Dylan pr) 141 606.67 T
(ograms corr) 344.11 606.67 T
(espond to) 402.59 606.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(elements of C pr) 141 592.67 T
(ograms:) 220.85 592.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 150 578.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The) 168 578.67 T
(pr) 189.16 578.67 T
(ogram \336les ar) 199.92 578.67 T
(e similar to) 266.54 578.67 T
4 10 Q
(.c) 323.47 578.67 T
1 11 Q
( \336les in C.) 335.47 578.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 150 564.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The) 168 564.67 T
(library \336le is similar to a C header \336le.) 189.16 564.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 150 550.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The) 168 550.67 T
(LID \336le is similar to a) 189.16 550.67 T
4 10 Q
(makefile) 296.51 550.67 T
1 11 Q
(, which is used in cer-) 344.51 550.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tain C development envir) 168 536.67 T
(onments.) 292.23 536.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The prog) 237.83 380.33 T
(r) 277.75 380.33 T
(am \336le:) 280.98 380.33 T
4 9 Q
(hello.dylan) 315.99 380.33 T
8 10 Q
(.) 375.39 380.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: hello) 114 361 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Hello, world\134n"\051;) 114 342 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 633.88 135 529.12 2 L
V
0.25 H
0 Z
N
486 633.88 486 529.12 2 L
V
N
134.88 634 486.12 634 2 L
V
N
134.88 529 486.12 529 2 L
V
N
108 392.88 108 335.12 2 L
V
N
522 392.88 522 335.12 2 L
V
N
107.88 393 522.12 393 2 L
V
N
107.88 373 522.12 373 2 L
V
N
107.88 335 522.12 335 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 36
%%Page: "23" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2.5 A complete Dylan program) 402.35 677.67 T
2 F
(23) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(The \336rst line of) 108 464.67 T
4 10 Q
(library.dylan) 184.41 464.67 T
1 11 Q
( states that the expr) 262.41 464.67 T
(essions in this \336le ar) 356.71 464.67 T
(e in the) 454.81 464.67 T
4 10 Q
-0.91 (dylan-user) 108 450.67 P
1 11 Q
-0.42 ( module. Every Dylan expr) 168 450.67 P
-0.42 (ession and de\336nition must be in a module,) 297.73 450.67 P
-0.27 (including the de\336nitions of libraries and modules. The) 108 436.67 P
4 10 Q
-0.59 (dylan-user) 373.42 436.67 P
1 11 Q
-0.27 ( module is the) 433.42 436.67 P
(starting point \321 the pr) 108 422.67 T
(ede\336ned module that enables you to de\336ne the libraries) 219.22 422.67 T
(and modules that your pr) 108 408.67 T
(ogram uses.) 232.76 408.67 T
(In the \336le) 135 394.67 T
4 10 Q
(library.dylan) 183.74 394.67 T
1 11 Q
(, we de\336ne a library named) 261.74 394.67 T
4 10 Q
(hello) 397.65 394.67 T
1 11 Q
(, and a module) 427.65 394.67 T
(named) 108 380.67 T
4 10 Q
(hello) 144.35 380.67 T
1 11 Q
(. W) 174.35 380.67 T
(e de\336ne the) 189.84 380.67 T
4 10 Q
(hello) 248.93 380.67 T
1 11 Q
( library to use the) 278.93 380.67 T
4 10 Q
(dylan) 366.89 380.67 T
1 11 Q
( library and the) 396.89 380.67 T
4 10 Q
(format-out) 108 366.67 T
1 11 Q
( library) 168 366.67 T
(, and we de\336ne the) 202.32 366.67 T
4 10 Q
(hello) 297.46 366.67 T
1 11 Q
( module to use the) 327.46 366.67 T
4 10 Q
(dylan) 420.17 366.67 T
1 11 Q
( module) 450.17 366.67 T
(and the) 108 352.67 T
4 10 Q
(format-out) 147.38 352.67 T
1 11 Q
( module.) 207.38 352.67 T
(One library) 135 338.67 T
2 F
(uses) 193.61 338.67 T
1 F
( another library to allow its modules to use the other) 215.6 338.67 T
(library\325s exported modules. Most libraries need to use the) 108 324.67 T
4 10 Q
(dylan) 391.25 324.67 T
1 11 Q
( library) 421.25 324.67 T
(, because) 455.57 324.67 T
(it contains the) 108 310.67 T
4 10 Q
(dylan) 178.94 310.67 T
1 11 Q
( module. One module) 208.94 310.67 T
2 F
(uses) 318.09 310.67 T
1 F
( another module to allow its de\336-) 340.08 310.67 T
-0.04 (nitions to use the other module\325s exported de\336nitions. Most modules need to use) 108 296.67 P
(the) 108 282.67 T
4 10 Q
(dylan) 126.01 282.67 T
1 11 Q
( module in the) 156.01 282.67 T
4 10 Q
(dylan) 229.41 282.67 T
1 11 Q
( library) 259.41 282.67 T
(, because that module contains the de\336ni-) 293.73 282.67 T
(tions of the cor) 108 268.67 T
(e Dylan language. W) 180.07 268.67 T
(e also need to use the) 280.8 268.67 T
4 10 Q
(format-out) 387.02 268.67 T
1 11 Q
( module in) 447.02 268.67 T
(the) 108 254.67 T
4 10 Q
(format-out) 126.01 254.67 T
1 11 Q
( library) 186.01 254.67 T
(, because that module de\336nes the) 220.33 254.67 T
4 10 Q
(format-out) 384.73 254.67 T
1 11 Q
( function,) 444.73 254.67 T
(which we use in our pr) 108 240.67 T
(ogram.) 220.17 240.67 T
(Finally) 135 226.67 T
(, we cr) 167.52 226.67 T
(eate a LID \336le that enumerates the \336les that make up the) 199.24 226.67 T
-0.19 (library) 108 212.67 P
-0.19 (. This \336le does not contain Dylan expr) 139.57 212.67 P
-0.19 (essions, but rather is simply a textual) 322.42 212.67 P
(description of the library\325s \336les:) 108 198.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The libr) 237.24 621.33 T
(ar) 270.48 621.33 T
(y \336le:) 279.67 621.33 T
4 9 Q
(library.dylan) 305.79 621.33 T
8 10 Q
(.) 375.98 621.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: dylan-user) 114 602 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define library hello) 114 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 124.8 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use format-out;) 124.8 561 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end library hello;) 114 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define module hello) 114 531 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 124.8 520 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use format-out;) 124.8 509 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end module hello;) 114 498 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 633.88 108 491.12 2 L
V
0.25 H
0 Z
N
522 633.88 522 491.12 2 L
V
N
107.88 634 522.12 634 2 L
V
N
107.88 614 522.12 614 2 L
V
N
107.88 491 522.12 491 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 37
%%Page: "24" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(24) 72 677.67 T
0 F
(Chapter 2) 91 677.67 T
(Quick Start) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(The LID \336le simply states that the library) 108 546.67 T
4 10 Q
(hello) 310.38 546.67 T
1 11 Q
( comprises two \336les, named) 340.38 546.67 T
4 10 Q
-0.49 (library) 108 532.67 P
1 11 Q
-0.22 ( and) 150 532.67 P
4 10 Q
-0.49 (hello) 173.67 532.67 P
1 11 Q
-0.22 (. In other wor) 203.67 532.67 P
-0.22 (ds, to build the) 269.04 532.67 P
4 10 Q
-0.49 (hello) 343.97 532.67 P
1 11 Q
-0.22 ( library) 373.97 532.67 P
-0.22 (, the compiler must) 408.07 532.67 P
(pr) 108 518.67 T
(ocess the two \336les listed, in the or) 118.76 518.67 T
(der that they appear in the \336le. The or) 281.71 518.67 T
(der is) 465.63 518.67 T
(signi\336cant, because a module must be de\336ned befor) 108 504.67 T
(e the code that is in the mod-) 360.11 504.67 T
(ule can be analyzed and compiled.) 108 490.67 T
(Y) 135 476.67 T
(ou can consult the documentation of your Dylan implementation to \336nd) 141.32 476.67 T
-0.14 (out how to build an executable pr) 108 462.67 P
-0.14 (ogram fr) 270.95 462.67 P
-0.14 (om these \336les, and how to r) 313.05 462.67 P
-0.14 (un that pr) 446.24 462.67 P
-0.14 (o-) 494.33 462.67 P
-0.4 (gram once it is built. Most Dylan envir) 108 448.67 P
-0.4 (onments pr) 292.4 448.67 P
-0.4 (oduce executable pr) 347.55 448.67 P
-0.4 (ograms that) 443.89 448.67 P
(can be invoked in the same manner as any other pr) 108 434.67 T
(ogram on the particular plat-) 355.75 434.67 T
(form that you ar) 108 420.67 T
(e using.) 187.45 420.67 T
(W) 135 406.67 T
(e incur a fair amount of over) 144.99 406.67 T
(head in setting up the \336les that make up a) 283.58 406.67 T
(simple pr) 108 392.67 T
(ogram. Most envir) 154.17 392.67 T
(onments automate this pr) 243.99 392.67 T
(ocess \321 some of the com-) 368.69 392.67 T
(plexity shown her) 108 378.67 T
(e occurs because we ar) 195.63 378.67 T
(e working with the lowest common) 305.7 378.67 T
(denominator: inter) 108 364.67 T
(change \336les. The advantages of libraries and modules ar) 199.26 364.67 T
(e sig-) 472.21 364.67 T
(ni\336cant for lar) 108 350.67 T
(ger pr) 176.99 350.67 T
(ograms. See Chapter 13,) 206.23 350.67 T
0 F
(Libraries and Modules) 328.65 350.67 T
1 F
(.) 428.47 350.67 T
3 15 Q
(2.6  Summar) 108 311 T
(y) 181.27 311 T
1 11 Q
(In this chapter) 108 290.67 T
(, we cover) 177.24 290.67 T
(ed the following:) 226.46 290.67 T
(\245) 117 270.67 T
(W) 135 270.67 T
(e enter) 144.99 270.67 T
(ed Dylan expr) 177.68 270.67 T
(essions to a listener and saw their values or output.) 246.61 270.67 T
(\245) 117 250.67 T
(W) 135 250.67 T
(e used simple arithmetic functions:) 144.99 250.67 T
4 10 Q
(+) 317.83 250.67 T
1 11 Q
(,) 323.83 250.67 T
4 10 Q
(*) 329.33 250.67 T
1 11 Q
(,) 335.33 250.67 T
4 10 Q
(-) 340.83 250.67 T
1 11 Q
(. W) 346.83 250.67 T
(e used pr) 362.32 250.67 T
(edicates:) 407.13 250.67 T
4 10 Q
(=) 451.73 250.67 T
1 11 Q
(,) 457.73 250.67 T
4 10 Q
(<) 463.23 250.67 T
1 11 Q
(,) 469.23 250.67 T
4 10 Q
(>) 474.73 250.67 T
1 11 Q
(,) 480.73 250.67 T
4 10 Q
(even?) 135 236.67 T
1 11 Q
(, and) 165 236.67 T
4 10 Q
(zero?) 191.87 236.67 T
1 11 Q
(.) 221.87 236.67 T
(\245) 117 216.67 T
(W) 135 216.67 T
(e de\336ned module variables \050with) 144.99 216.67 T
4 10 Q
(define variable) 308.59 216.67 T
1 11 Q
(\051, constants \050with) 398.59 216.67 T
4 10 Q
(define constant) 135 202.67 T
1 11 Q
(\051, and local variables \050with) 225 202.67 T
4 10 Q
(let) 356.58 202.67 T
1 11 Q
(\051.) 374.58 202.67 T
(\245) 117 182.67 T
(W) 135 182.67 T
(e set the value of variables by using) 144.99 182.67 T
4 10 Q
(:=) 320.71 182.67 T
1 11 Q
(, the assignment operator) 332.71 182.67 T
(.) 455.34 182.67 T
(\245) 117 162.67 T
-0.17 (W) 135 162.67 P
-0.17 (e de\336ned a simple but complete Dylan pr) 144.99 162.67 P
-0.17 (ogram, consisting of a LID \336le, a) 344.87 162.67 P
(library \336le, and a pr) 135 148.67 T
(ogram \336le.) 231.55 148.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The LID \336le:) 253.96 621.33 T
4 9 Q
(hello.lid) 310.65 621.33 T
8 10 Q
(.) 359.26 621.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(library: hello) 114 602 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(files:) 114 591 T
( library) 157.2 591 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(hello) 162.6 580 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 633.88 108 573.12 2 L
V
0.25 H
0 Z
N
522 633.88 522 573.12 2 L
V
N
107.88 634 522.12 634 2 L
V
N
107.88 614 522.12 614 2 L
V
N
107.88 573 522.12 573 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 38
%%Page: "25" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2.6 Summary) 468.74 677.67 T
2 F
(25) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(\245) 117 640.67 T
(W) 135 640.67 T
(e described the syntax of some commonly used elements of Dylan; see) 144.99 640.67 T
(T) 135 626.67 T
(able 2.1.) 140.73 626.67 T
(\245) 117 395.67 T
(W) 135 395.67 T
(e described certain naming conventions in Dylan; see T) 144.99 395.67 T
(able 2.2.) 411.99 395.67 T
(Her) 108 210.68 T
(e, we summarize the most basic information about libraries and modules:) 126.57 210.68 T
(\245) 117 190.68 T
(A Dylan library de\336nes a softwar) 135 190.68 T
(e component \321 a separately compilable) 297.05 190.68 T
(unit that can be either a stand-alone pr) 135 176.68 T
(ogram or a component of a lar) 322.53 176.68 T
(ger) 469.45 176.68 T
(pr) 135 162.68 T
(ogram. Thus, when we talk about cr) 145.76 162.68 T
(eating a Dylan pr) 320.81 162.68 T
(ogram, we ar) 405.13 162.68 T
(e) 469.15 162.68 T
(r) 135 148.68 T
(eally talking about cr) 139.15 148.68 T
(eating a library) 241.65 148.68 T
(.) 314.29 148.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 F
(Dylan element) 200.38 595.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Syntax e) 352.08 595.67 T
(xample) 394.56 595.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(str) 165.49 570.67 T
(ing) 177.87 570.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
("Runway") 317.58 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(tr) 165.49 547.67 T
(ue) 172.37 547.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(any value that is not) 317.58 547.67 T
4 10 Q
(#f) 419.1 547.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(canonical tr) 165.49 524.67 T
(ue v) 221.9 524.67 T
(alue) 242.41 524.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(#t) 317.58 526 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(f) 165.49 501.67 T
(alse) 168.21 501.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(#f) 317.58 503 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(in\336x syntax function call) 165.49 478.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(2 + 3;) 317.58 480 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(function call) 165.49 455.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(max\0502, 3\051;) 317.58 457 T
0 0 0 1 0 0 0 K
108 418.01 522 426 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 224.26 429.33 T
(ab) 229.57 429.33 T
(le 2.1) 241.15 429.33 T
8 F
(Syntax of Dylan elements) 271.73 429.33 T
(.) 384.95 429.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(Dylan element) 207.52 364.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Example of name) 335.29 364.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(module v) 185.59 339.67 T
(ar) 229.94 339.67 T
(iab) 239.88 339.67 T
(le) 254.34 339.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(*my-number*) 311.75 339.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(constant) 185.59 316.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
($pi) 311.75 316.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(class) 185.59 293.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(<integer>) 311.75 293.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(predicate) 185.59 270.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(positive?) 311.75 270.67 T
0 0 0 1 0 0 0 K
108 233.02 522 241.01 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 174.44 244.34 T
(ab) 179.75 244.34 T
(le 2.2) 191.32 244.34 T
8 F
(Dylan naming con) 221.9 244.34 T
(v) 301.73 244.34 T
(entions sho) 306.48 244.34 T
(wn in this chapter) 357.47 244.34 T
(.) 434.78 244.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
159.49 610.88 159.49 446.12 2 L
V
0.25 H
0 Z
N
470.51 610.88 470.51 446.12 2 L
V
N
159.36 611 470.64 611 2 L
V
N
159.36 584 470.64 584 2 L
V
N
159.36 446 470.64 446 2 L
V
N
179.59 379.88 179.59 261.13 2 L
V
N
450.42 379.88 450.42 261.13 2 L
V
N
179.46 380.01 450.54 380.01 2 L
V
N
179.46 353.01 450.54 353.01 2 L
V
N
179.46 261.01 450.54 261.01 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "25" 39
%%Page: "26" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(26) 72 677.67 T
0 F
(Chapter 2) 91 677.67 T
(Quick Start) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(\245) 117 640.67 T
(Each Dylan expr) 135 640.67 T
(ession and de\336nition must be in a module. Each module is) 215.44 640.67 T
(in a library) 135 626.67 T
(.) 187.17 626.67 T
(\245) 117 606.67 T
(One module uses another module to allow its de\336nitions to use the other) 135 606.67 T
(module\325s exported de\336nitions. Most modules need to use the) 135 592.67 T
4 10 Q
(dylan) 435.3 592.67 T
1 11 Q
( mod-) 465.3 592.67 T
-0.13 (ule in the) 135 578.67 P
4 10 Q
-0.29 (dylan) 182.82 578.67 P
1 11 Q
-0.13 ( library) 212.82 578.67 P
-0.13 (, because it contains the de\336nitions of the cor) 247.01 578.67 P
-0.13 (e Dylan) 463.76 578.67 P
(language.) 135 564.67 T
(\245) 117 544.67 T
(One library uses another library to allow its modules to use the other) 135 544.67 T
(library\325s exported modules. Most libraries need to use the) 135 530.67 T
4 10 Q
(dylan) 418.25 530.67 T
1 11 Q
( library) 448.25 530.67 T
(,) 482.57 530.67 T
(because it contains the) 135 516.67 T
4 10 Q
(dylan) 246.99 516.67 T
1 11 Q
( module.) 276.99 516.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "26" 40
%%Page: "27" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(27) 301.25 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(3) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(3) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Methods, Classes, and) 109 566.45 T
(Objects) 108 536.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
(In this chapter) 108 424.67 T
(, we intr) 177.24 424.67 T
(oduce the basic concepts of methods, classes, and objects.) 217.27 424.67 T
(W) 108 410.67 T
(e de\336ne simple methods, and show that each method is intended for a certain) 117.99 410.67 T
(class of ar) 108 396.67 T
(gument. W) 155.73 396.67 T
(e discuss built-in classes in Dylan, and show that they ar) 208.94 396.67 T
(e) 483 396.67 T
(r) 108 382.67 T
(elated by class inheritance. Finally) 112.15 382.67 T
(, we discuss what it means to be an object.) 277.53 382.67 T
(Dylan\325s model of objects and classes dif) 135 368.67 T
(fers signi\336cantly fr) 327.46 368.67 T
(om the C++) 418.64 368.67 T
(model. If you ar) 108 354.67 T
(e familiar with C++, we r) 185.68 354.67 T
(ecommend that you r) 307.86 354.67 T
(ead Appendix B,) 412.06 354.67 T
0 F
(Dylan Object Model for C and C++ Pr) 108 340.67 T
(ogrammers) 280.13 340.67 T
1 F
(.) 329.63 340.67 T
3 15 Q
(3.1  Method de\336nitions) 108 301 T
1 11 Q
(In Dylan, we de\336ne methods \321 a) 108 280.67 T
2 F
(method) 273.46 280.67 T
1 F
( is a kind of function. W) 311.96 280.67 T
(e de\336ne a) 427.45 280.67 T
(simple method,) 108 266.67 T
4 10 Q
(say-hello) 186.61 266.67 T
1 11 Q
(, as follows:) 240.61 266.67 T
4 9 Q
(define method say-hello \050\051) 108 246 T
(format-out\050"hello, world\134n"\051;) 118.8 235 T
(end;) 108 224 T
1 11 Q
(W) 108 203.67 T
(e call) 117.99 203.67 T
4 10 Q
(say-hello) 145.54 203.67 T
1 11 Q
( as follows:) 199.54 203.67 T
6 9 Q
(?) 108 183 T
4 F
(say-hello\050\051;) 118.8 183 T
6 F
(hello, world) 108 172 T
1 11 Q
(W) 108 151.67 T
(e use) 117.99 151.67 T
4 10 Q
(define method) 145.32 151.67 T
1 11 Q
( to de\336ne a method named) 223.32 151.67 T
4 10 Q
(say-hello) 356.53 151.67 T
1 11 Q
(. Just after the) 410.53 151.67 T
(name) 108 137.67 T
4 10 Q
(say-hello) 137.63 137.67 T
1 11 Q
(, we specify the method\325s) 191.63 137.67 T
2 F
(parameter list) 317.66 137.67 T
1 F
(,) 387.01 137.67 T
4 10 Q
(\050\051) 392.51 137.67 T
1 11 Q
(. The parameter list) 404.51 137.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "27" 41
%%Page: "28" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(28) 72 677.67 T
0 F
(Chapter 3) 91 677.67 T
(Methods, Classes, and Objects) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(of this method is empty) 108 640.67 T
(, meaning that this method takes no ar) 222.16 640.67 T
(guments. The call) 408.58 640.67 T
(to) 108 626.67 T
4 10 Q
(say-hello) 120.34 626.67 T
1 11 Q
( pr) 174.34 626.67 T
(ovides an empty ar) 187.85 626.67 T
(gument list, meaning that ther) 281.02 626.67 T
(e ar) 428.22 626.67 T
(e no ar) 445.89 626.67 T
(gu-) 478.71 626.67 T
(ments in the call.) 108 612.67 T
(The body of the) 135 598.67 T
4 10 Q
(say-hello) 214.27 598.67 T
1 11 Q
( method has one expr) 268.27 598.67 T
(ession \321 a call to) 372.91 598.67 T
4 10 Q
(format-out) 108 584.67 T
1 11 Q
(. A method r) 168 584.67 T
(eturns whatever is r) 229.4 584.67 T
(eturned by the expr) 326.32 584.67 T
(ession executed) 421.96 584.67 T
(last in its body) 108 570.67 T
(. In general, a method can r) 177.96 570.67 T
(eturn a single value, multiple values,) 310.3 570.67 T
-0.29 (or no value at all. The) 108 556.67 P
4 10 Q
-0.64 (say-hello) 214.48 556.67 P
1 11 Q
-0.29 ( method r) 268.48 556.67 P
-0.29 (eturns what) 315.24 556.67 P
4 10 Q
-0.64 (format-out) 375.71 556.67 P
1 11 Q
-0.29 ( r) 435.71 556.67 P
-0.29 (eturns \321 no) 442.32 556.67 P
(value at all. In the call to) 108 542.67 T
4 10 Q
(say-hello) 229.55 542.67 T
1 11 Q
(, we see the output of) 283.55 542.67 T
4 10 Q
(format-out) 390.43 542.67 T
1 11 Q
( in the) 450.43 542.67 T
(listener; we see output and not a r) 108 528.67 T
(eturned value \050because no value is r) 272.9 528.67 T
(eturned\051.) 447.65 528.67 T
3 13 Q
(3.1.1  A method that takes an ar) 108 348.33 T
(gument) 267.82 348.33 T
1 11 Q
-0.39 (W) 108 328.67 P
-0.39 (e can de\336ne a method similar to) 117.99 328.67 P
4 10 Q
-0.86 (say-hello) 273.47 328.67 P
1 11 Q
-0.39 (, called) 327.47 328.67 P
4 10 Q
-0.86 (say-greeting) 363.71 328.67 P
1 11 Q
-0.39 (, that takes an) 435.71 328.67 P
(ar) 108 314.67 T
(gument:) 117.65 314.67 T
4 9 Q
(define method say-greeting \050greeting :: <object>\051;) 108 294 T
(format-out\050"%s\134n", greeting\051;) 118.8 283 T
(end;) 108 272 T
1 11 Q
(The) 108 251.67 T
4 10 Q
(say-greeting) 129.16 251.67 T
1 11 Q
( method has one r) 201.16 251.67 T
(equir) 288.25 251.67 T
(ed parameter) 313.66 251.67 T
(, named) 377.73 251.67 T
4 10 Q
(greeting) 419.58 251.67 T
1 11 Q
(. The) 467.58 251.67 T
(type constraint of the r) 108 237.67 T
(equir) 218.23 237.67 T
(ed parameter indicates the type that the ar) 243.64 237.67 T
(gument) 449.26 237.67 T
-0.07 (must be. The) 108 223.67 P
4 10 Q
-0.15 (greeting) 173.15 223.67 P
1 11 Q
-0.07 ( parameter has the type constraint) 221.15 223.67 P
4 10 Q
-0.15 (<object>) 389.35 223.67 P
1 11 Q
-0.07 (, which is the) 437.35 223.67 P
(most general class. All objects ar) 108 209.67 T
(e of the type) 265.16 209.67 T
4 10 Q
(<object>) 327.93 209.67 T
1 11 Q
(, so using this class as the) 375.93 209.67 T
(type constraint allows the ar) 108 195.67 T
(gument to be any object. Y) 245.81 195.67 T
(ou can omit the type con-) 373.72 195.67 T
(straint of a r) 108 181.67 T
(equir) 166.85 181.67 T
(ed parameter; that omission has the same ef) 192.26 181.67 T
(fect as specifying) 405.02 181.67 T
4 10 Q
(<object>) 108 167.67 T
1 11 Q
( as the type constraint.) 156 167.67 T
(W) 135 153.67 T
(e can call) 144.99 153.67 T
4 10 Q
(say-greeting) 192.08 153.67 T
1 11 Q
( on a string:) 264.08 153.67 T
2 F
(Usage note:) 141 494.67 T
1 F
(In this chapter) 201.81 494.67 T
(, we de\336ne methods that call the) 271.05 494.67 T
4 10 Q
(format-out) 141 480.67 T
1 11 Q
( function. Because) 201 480.67 T
4 10 Q
(format-out) 291.72 480.67 T
1 11 Q
( is in the) 351.72 480.67 T
4 10 Q
(format-out) 395.44 480.67 T
1 11 Q
(module, we need to make that module available. Ther) 141 466.67 T
(e ar) 403.18 466.67 T
(e two) 420.85 466.67 T
-0.11 (ways to do so. The \336rst way is to work in \336les, as described in Sec-) 141 452.67 P
(tion 2.5. The second way is to use a gestur) 141 438.67 T
(e or command in your) 344.53 438.67 T
(Dylan envir) 141 424.67 T
(onment to make the) 198.72 424.67 T
4 10 Q
(format-out) 298.54 424.67 T
1 11 Q
( module accessible.) 358.54 424.67 T
(Then, you can simply enter the method de\336nitions into the) 141 410.67 T
(listener) 141 396.67 T
(.) 176.12 396.67 T
135 507.88 135 389.13 2 L
V
0.25 H
0 Z
N
486 507.88 486 389.13 2 L
V
N
134.88 508 486.12 508 2 L
V
N
134.88 389 486.12 389 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "28" 42
%%Page: "29" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.1 Method definitions) 434.18 677.67 T
2 F
(29) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 118.86 522 648 R
V
6 9 Q
0 X
(?) 108 642 T
4 F
(say-greeting\050"hi, there"\051;) 118.8 642 T
6 F
(hi, there) 108 631 T
1 11 Q
-0.15 (W) 108 610.67 P
-0.15 (e can call) 117.99 610.67 P
4 10 Q
-0.33 (say-greeting) 164.62 610.67 P
1 11 Q
-0.15 ( on an integer) 236.62 610.67 P
-0.15 (, although the integer does not give a par-) 302.1 610.67 P
(ticularly friendly gr) 108 596.67 T
(eeting:) 203.35 596.67 T
6 9 Q
(?) 108 576 T
4 F
( define variable *my-number* :: <integer> = 7;) 113.4 576 T
6 F
(?) 108 557 T
4 F
(say-greeting\050*my-number*\051;) 118.8 557 T
6 F
(7) 108 546 T
3 13 Q
(3.1.2  T) 108 516.33 T
(w) 143.53 516.33 T
(o methods with the same name) 151.63 516.33 T
1 11 Q
-0.09 (For fun, we can change) 108 496.67 P
4 10 Q
-0.2 (say-greeting) 223.01 496.67 P
1 11 Q
-0.09 ( to take a dif) 295.01 496.67 P
-0.09 (fer) 354.59 496.67 P
-0.09 (ent action for integers, such) 367.67 496.67 P
(as to print a message:) 108 482.67 T
6 9 Q
(Your lucky number is 7.) 108 462 T
1 11 Q
(T) 108 441.67 T
(o make this change, we de\336ne another method, also called) 113.73 441.67 T
4 10 Q
(say-greeting) 399.87 441.67 T
1 11 Q
(. This) 471.87 441.67 T
(method has one r) 108 427.67 T
(equir) 192.34 427.67 T
(ed parameter named) 217.75 427.67 T
4 10 Q
(greeting) 321.73 427.67 T
1 11 Q
(, which has the type con-) 369.73 427.67 T
(straint) 108 413.67 T
4 10 Q
(<integer>) 142.03 413.67 T
1 11 Q
(.) 196.03 413.67 T
4 9 Q
(define method say-greeting \050greeting :: <integer>\051) 108 393 T
(format-out\050"Your lucky number is %s.\134n", greeting\051;) 118.8 382 T
(end;) 108 371 T
6 F
(?) 108 352 T
4 F
(say-greeting\050*my-number*\051;) 118.8 352 T
6 F
(Your lucky number is 7.) 108 341 T
1 11 Q
(A Dylan method is similar to a pr) 108 320.67 T
(ocedur) 270.78 320.67 T
(e or subr) 304.44 320.67 T
(outine in other languages, but) 347.08 320.67 T
(ther) 108 306.67 T
(e is an important dif) 127.4 306.67 T
(fer) 225.78 306.67 T
(ence. Y) 238.86 306.67 T
(ou can de\336ne mor) 272.51 306.67 T
(e than one method with the) 360.36 306.67 T
-0.33 (same name. Each one is a method for the same) 108 292.67 P
2 F
-0.33 (generic function) 333.6 292.67 P
1 F
-0.33 (. Figur) 415.45 292.67 P
-0.33 (e 3.1 shows) 446.82 292.67 P
(how you can pictur) 108 278.67 T
(e a generic function.) 202.43 278.67 T
-0.43 (When a generic function is called, it chooses the most appr) 135 264.67 P
-0.43 (opriate method to) 415.23 264.67 P
(call for the ar) 108 250.67 T
(guments. For example, when we call the) 171.95 250.67 T
4 10 Q
(say-greeting) 370.53 250.67 T
1 11 Q
( generic) 442.53 250.67 T
-0.32 (function with an integer) 108 236.67 P
-0.32 (, the method whose parameter is of the type) 223.7 236.67 P
4 10 Q
-0.7 (<integer>) 437.28 236.67 P
1 11 Q
-0.32 ( is) 491.28 236.67 P
(called:) 108 222.67 T
6 9 Q
(?) 108 202 T
4 F
(say-greeting\0501000\051;) 118.8 202 T
6 F
(Your lucky number is 1000.) 108 191 T
1 11 Q
-0.2 (When we call the) 108 170.67 P
4 10 Q
-0.44 (say-greeting) 193.76 170.67 P
1 11 Q
-0.2 ( generic function with an ar) 265.76 170.67 P
-0.2 (gument that is not an) 398.69 170.67 P
(integer) 108 156.67 T
(, the method whose parameter is of the type) 141.37 156.67 T
4 10 Q
(<object>) 357.85 156.67 T
1 11 Q
( is called:) 405.85 156.67 T
6 9 Q
(?) 108 136 T
4 F
(say-greeting\050"Buenos Dias"\051;) 118.8 136 T
6 F
(Buenos Dias) 108 125 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "29" 43
%%Page: "30" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(30) 72 677.67 T
0 F
(Chapter 3) 91 677.67 T
(Methods, Classes, and Objects) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(3.2  Classes) 108 440.57 T
1 11 Q
-0.45 (W) 108 420.24 P
-0.45 (e have alr) 117.99 420.24 P
-0.45 (eady seen examples of classes in Dylan:) 164.09 420.24 P
4 10 Q
-0.98 (<integer>) 355.9 420.24 P
1 11 Q
-0.45 (,) 409.9 420.24 P
4 10 Q
-0.98 (<single-float>) 414.95 420.24 P
1 11 Q
-0.45 (,) 498.95 420.24 P
4 10 Q
(<string>) 108 406.24 T
1 11 Q
(, and) 156 406.24 T
4 10 Q
(<object>) 182.87 406.24 T
1 11 Q
(.) 230.87 406.24 T
(Individual values ar) 135 392.24 T
(e called) 233.13 392.24 T
2 F
(objects) 272.68 392.24 T
1 F
(. Each object is a) 308.11 392.24 T
2 F
(direct instance) 389.88 392.24 T
1 F
( of one) 462.88 392.24 T
(particular class. Y) 108 378.24 T
(ou can use the) 193.29 378.24 T
4 10 Q
(object-class) 265.54 378.24 T
1 11 Q
( function to determine the dir) 337.54 378.24 T
(ect) 480.76 378.24 T
(class of an object. For example, in certain implementations,) 108 364.24 T
4 10 Q
(7) 396.71 364.24 T
1 11 Q
(,) 402.71 364.24 T
4 10 Q
(12) 408.21 364.24 T
1 11 Q
(, and) 420.21 364.24 T
4 10 Q
(1000) 447.08 364.24 T
1 11 Q
( ar) 471.08 364.24 T
(e) 483.48 364.24 T
(dir) 108 350.24 T
(ect instances of the class) 122.07 350.24 T
4 10 Q
(<integer>) 241.97 350.24 T
1 11 Q
(:) 295.97 350.24 T
6 9 Q
(?) 108 329.57 T
4 F
( object-class\0501000\051;) 113.4 329.57 T
6 F
({class <integer>}) 108 318.57 T
1 11 Q
(The value r) 108 298.24 T
(eturned by) 162.88 298.24 T
4 10 Q
(object-class) 218.8 298.24 T
1 11 Q
( is the) 290.8 298.24 T
4 10 Q
(<integer>) 322.17 298.24 T
1 11 Q
( class itself. The appear-) 376.17 298.24 T
(ance of a class, method, or generic function in a listener depends on the Dylan) 108 284.24 T
(envir) 108 270.24 T
(onment. W) 133.23 270.24 T
(e have chosen a simple appearance of classes for this book.) 186.1 270.24 T
(All the classes that we have seen so far ar) 135 256.24 T
(e built-in classes, pr) 335.14 256.24 T
(ovided by) 430.99 256.24 T
(Dylan. In Chapter 4,) 108 242.24 T
0 F
(User-De\336ned Classes and Methods) 212.1 242.24 T
1 F
(, we show how to de\336ne) 367.34 242.24 T
(new classes.) 108 228.24 T
3 13 Q
(3.2.1  Class inheritance) 108 196.91 T
1 11 Q
(One important aspect of classes is that they ar) 108 177.24 T
(e r) 330.26 177.24 T
(elated to one another by) 342.42 177.24 T
2 F
-0.35 (inheritance) 108 163.24 P
1 F
-0.35 (. Inheritance enables classes that ar) 164.82 163.24 P
-0.35 (e logically r) 332.47 163.24 P
-0.35 (elated to one another to) 388.1 163.24 P
(shar) 108 149.24 T
(e the behaviors and attributes that they have in common. Each class inherits) 128.71 149.24 T
(fr) 108 135.24 T
(om one or mor) 115.81 135.24 T
(e classes, called its) 187.67 135.24 T
2 F
(superclasses) 279.77 135.24 T
1 F
(. If no other class is appr) 342.07 135.24 T
(opriate,) 460.35 135.24 T
108 473.57 504 481.56 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 3.1) 149.84 484.9 T
8 F
(The) 202.63 484.9 T
4 F
(say-greeting) 222.65 484.9 T
8 F
( gener) 294.64 484.9 T
(ic function and its methods) 323.14 484.9 T
(.) 441.39 484.9 T
108 497.56 504 648 C
108 501.56 504 646 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 28 386 163 386 135 113 507 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f3-1.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f3-1.eps)%%CreationDate: (6/5/96) (10:38 AM)%%BoundingBox: 0 28 386 163%%HiResBoundingBox: 1.0083 28.3417 384.4917 163.6583%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 193.3333 -5.3333 193.3333 -5.3333%AI3_TileBox: -81.6667 -370.3333 470.3333 359.6667%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -34.6667 294.6667 2 1020 726 18 1 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Artwork) Ln0 A1 Ap0 O0.9 g0 R0 G800 Ar0 J 0 j 0.65 w 4 M []0 d%AI3_Note:0 D384.1667 28.6667 m384.1667 163.3333 L1.3333 163.3333 L1.3333 28.6667 L384.1667 28.6667 Lb1 g1 w277.3333 135.6667 m277.3333 152.6667 L117.8333 152.6667 L117.8333 135.6667 L277.3333 135.6667 Lf0 R0 G0.65 w375.3333 85.1667 m375.3333 123.6667 L10.3333 123.6667 L10.3333 85.1667 L375.3333 85.1667 Lb375.3333 37.6667 m375.3333 76.1667 L10.3333 76.1667 L10.3333 37.6667 L375.3333 37.6667 Lb0 To1 0 0 1 198.3333 141.1667 0 TpTP-74.3263 0 Td0 Tr0 g1 w/_Helvetica 11 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq11 0 Tl0 Tc0 Tw(Gener) Tx 0 -60 Tk (ic funct) Tx 0 -40 Tk (ion ) Tx /_Courier-Bold 9 Tf(say-greet) Tx 0 40 Tk (ing) Tx (\r) TX TO0 To1 0 0 1 16.8333 111.6667 0 TpTP0 Tr0 Ta10 0 Tl(define method say-greeting \(greeting :: <object>\);\r) Tx T*(  format-out\("%s\\n", greeting\);\r) Tx T*(end;\003) Tx T*(\r) Tx TO0 To1 0 0 1 16.8333 65.4167 0 TpTP0 Tr(define method say-greeting \(greeting :: <integer>\)\r) Tx T*(  format-out\("Your lucky number is %s.\\n", greeting\);\r) Tx T*(end;\003) Tx T*(\r) Tx TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 497.56 504 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "30" 44
%%Page: "31" 45
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.2 Classes) 478.77 677.67 T
2 F
(31) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.11 (then the class inherits fr) 108 640.67 P
-0.11 (om the class) 223.27 640.67 P
4 10 Q
-0.24 (<object>) 285.09 640.67 P
1 11 Q
-0.11 (. This class is the) 333.09 640.67 P
2 F
-0.11 (root) 416.09 640.67 P
1 F
-0.11 ( of all classes:) 436.27 640.67 P
(All classes inherit fr) 108 626.67 T
(om it, either dir) 204.27 626.67 T
(ectly or indir) 279.92 626.67 T
(ectly) 342.5 626.67 T
(, and it does not have any) 364.33 626.67 T
(dir) 108 612.67 T
(ect super) 122.07 612.67 T
(classes.) 165.88 612.67 T
(In Dylan, we distinguish between two terms:) 108 421.67 T
0 F
(dir) 329.22 421.67 T
(ect instance) 341.86 421.67 T
1 F
( and) 393.9 421.67 T
0 F
(general instance) 418.02 421.67 T
1 F
(.) 490.04 421.67 T
(An object is a) 108 407.67 T
2 F
(direct instance) 175.73 407.67 T
1 F
( of exactly one class: the class that) 248.72 407.67 T
4 10 Q
(object-class) 415.21 407.67 T
1 11 Q
-0.02 (r) 108 393.67 P
-0.02 (eturns for that object. An object is a) 112.15 393.67 P
2 F
-0.02 (general instance) 285.84 393.67 P
1 F
-0.02 ( of its dir) 367.39 393.67 P
-0.02 (ect class, and of all) 410.76 393.67 P
(classes fr) 108 379.67 T
(om which its dir) 151.41 379.67 T
(ect class inherits. The term) 230.96 379.67 T
0 F
(instance) 362.51 379.67 T
1 F
( is equivalent to) 399.38 379.67 T
0 F
(general instance) 108 365.67 T
1 F
(. Y) 180.02 365.67 T
(ou can use the) 191.84 365.67 T
4 10 Q
(instance?) 264.09 365.67 T
1 11 Q
( pr) 318.09 365.67 T
(edicate to ask whether an object is) 331.6 365.67 T
(an instance of a given class:) 108 351.67 T
6 9 Q
(?) 108 331 T
4 F
( instance?\0501000, <integer>\051;) 113.4 331 T
6 F
(#t) 108 320 T
(?) 108 301 T
4 F
( instance?\050"hello, world", <integer>\051;) 113.4 301 T
6 F
(#f) 108 290 T
1 11 Q
(All objects ar) 108 269.67 T
(e instances of the class) 171.17 269.67 T
4 10 Q
(<object>) 282.6 269.67 T
1 11 Q
(:) 330.6 269.67 T
6 9 Q
(?) 108 249 T
4 F
( instance?\0501000, <object>\051;) 113.4 249 T
6 F
(#t) 108 238 T
(?) 108 219 T
4 F
( instance?\050"hello, world", <object>\051;) 113.4 219 T
6 F
(#t) 108 208 T
1 11 Q
(Figur) 108 187.67 T
(e 3.2 shows the inheritance r) 134.21 187.67 T
(elationships among several of the built-in) 271.76 187.67 T
-0.31 (classes. If class A is a super) 108 173.67 P
-0.31 (class of class B, then class B is a) 237.75 173.67 P
2 F
-0.31 (subclass) 389.31 173.67 P
1 F
-0.31 ( of class A. For) 431.45 173.67 P
(example,) 108 159.67 T
4 10 Q
(<object>) 154.74 159.67 T
1 11 Q
( is a super) 202.74 159.67 T
(class of) 251.68 159.67 T
4 10 Q
(<string>) 289.76 159.67 T
1 11 Q
(, and) 337.76 159.67 T
4 10 Q
(<string>) 364.63 159.67 T
1 11 Q
( is a subclass of) 412.63 159.67 T
4 10 Q
(<object>) 108 145.67 T
1 11 Q
(. For simplicity) 156 145.67 T
(, Figur) 227.87 145.67 T
(e 3.2 omits certain classes that intervene between) 259.59 145.67 T
(the classes shown.) 108 131.67 T
2 F
-0.04 (Comparison with C++:) 141 583.67 P
1 F
-0.04 (If you ar) 258.09 583.67 P
-0.04 (e familiar with the class concepts) 299.29 583.67 P
-0.24 (of C++, you might initially be confused by Dylan\325s class model. In) 141 569.67 P
-0.26 (Dylan, all base classes ar) 141 555.67 P
-0.26 (e ef) 259.34 555.67 P
-0.26 (fectively virtual base classes with \322vir-) 275.83 555.67 P
-0.44 (tual\323 data members. When a class inherits another class mor) 141 541.67 P
-0.44 (e than) 430.21 541.67 P
(once \050because of multiple inheritance\051, only a single copy of that) 141 527.67 T
(base class is included. Each of the multiple-inheritance paths can) 141 513.67 T
(contribute to the implementation of the derived class. The Dylan) 141 499.67 T
(class model favors this mix-in style of pr) 141 485.67 T
(ogramming. For mor) 337.44 485.67 T
(e) 439.13 485.67 T
-0.31 (information, see Section B.2 in Appendix B,) 141 471.67 P
0 F
-0.31 (Dylan Object Model for) 354.68 471.67 P
(C and C++ Pr) 141 457.67 T
(ogrammers) 204.56 457.67 T
1 F
(.) 254.06 457.67 T
135 596.88 135 450.12 2 L
V
0.25 H
0 Z
N
486 596.88 486 450.12 2 L
V
N
134.88 597 486.12 597 2 L
V
N
134.88 450 486.12 450 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "31" 45
%%Page: "32" 46
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(32) 72 677.67 T
0 F
(Chapter 3) 91 677.67 T
(Methods, Classes, and Objects) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(A typical Dylan envir) 108 473.67 T
(onment pr) 212.87 473.67 T
(ovides a br) 263.76 473.67 T
(owser to explor) 317.07 473.67 T
(e inheritance r) 392.53 473.67 T
(elation-) 461.9 473.67 T
(ships among classes; certain envir) 108 459.67 T
(onments show the r) 272.3 459.67 T
(elationships graphically) 368.24 459.67 T
(.) 483.55 459.67 T
(The Dylan language includes functions that pr) 135 445.67 T
(ovide information about the) 360.63 445.67 T
-0.35 (inheritance r) 108 431.67 P
-0.35 (elationships among classes. W) 169 431.67 P
-0.35 (e can use) 314.22 431.67 P
4 10 Q
-0.77 (subtype?) 360.03 431.67 P
1 11 Q
-0.35 ( to ask whether one) 408.03 431.67 P
(class inherits fr) 108 417.67 T
(om another class:) 181.29 417.67 T
6 9 Q
(?) 108 397.01 T
4 F
( subtype?\050<integer>, <number>\051;) 113.4 397.01 T
6 F
(#t) 108 386.01 T
(?) 108 367.01 T
4 F
( subtype?\050<integer>, <object>\051;) 113.4 367.01 T
6 F
(#t) 108 356.01 T
(?) 108 337.01 T
4 F
( subtype?\050<single-float>, <object>\051;) 113.4 337.01 T
6 F
(#t) 108 326.01 T
(?) 108 307.01 T
4 F
( subtype?\050<string>, <integer>\051;) 113.4 307.01 T
6 F
(#f) 108 296.01 T
1 11 Q
(It may be confusing that we use a function called) 108 275.67 T
4 10 Q
(subtype?) 348.58 275.67 T
1 11 Q
( her) 396.58 275.67 T
(e, but Dylan does) 415.15 275.67 T
(not pr) 108 261.67 T
(ovide a function called) 137.5 261.67 T
4 10 Q
(subclass?) 250.97 261.67 T
1 11 Q
(. Every class is a) 304.97 261.67 T
2 F
(type) 386.41 261.67 T
1 F
(, but certain types) 408.41 261.67 T
(ar) 108 247.67 T
(e not classes \050see Section 9.1, page 109\051. The) 117.65 247.67 T
4 10 Q
(subtype?) 331.82 247.67 T
1 11 Q
( function works for both) 379.82 247.67 T
(classes and other types.) 108 233.67 T
(W) 135 219.67 T
(e can ask for all the super) 144.99 219.67 T
(classes of a given class:) 268.32 219.67 T
6 9 Q
(?) 108 199.01 T
4 F
( all-superclasses\050<string>\051;) 113.4 199.01 T
6 F
(#[{class <string>}, {class <mutable-sequence>}, {class <sequence>},) 108 188.01 T
({class <mutable-collection>}, {class <collection>}, {class <object>}]) 108 177.01 T
(?) 108 158.01 T
4 F
( all-superclasses\050<integer>\051;) 113.4 158.01 T
6 F
(#[{class <integer>}, {class <rational>}, {class <real>}, {class <number>},) 108 147.01 T
({class <object>}]) 108 136.01 T
108 493.01 504 501 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 3.2) 114.1 504.33 T
8 F
(Classes and subclasses) 166.9 504.33 T
(. Each arro) 274.01 504.33 T
(w points from a class to a subclass) 322.77 504.33 T
(.) 477.12 504.33 T
108 517 504 648 C
162.5 527 449.5 646 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 90 65 327 233 237 168 186.5 534 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f3-2.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f3-2 .eps)%%CreationDate: (6/5/96) (10:38 AM)%%BoundingBox: 90 65 327 233%%HiResBoundingBox: 91.2386 64.9167 325.6241 232.6745%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 193.3333 -5.3333 193.3333 -5.3333%AI3_TileBox: -81.6667 -370.3333 470.3333 359.6667%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: 41.3333 242.6667 3 1020 726 18 1 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Artwork) Ln0 A0 To1 0 0 1 170.6666 168.6667 0 TpTP-21.5947 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq10 0 Tl0 Tc0 Tw(<object>) Tx (\r) TX TO0 To1 0 0 1 112.8333 116.6667 0 TpTP-21.5947 0 Td0 Tr(<string>) Tx (\r) TX TO0 To1 0 0 1 229.3333 116.6667 0 TpTP-21.5947 0 Td0 Tr(<number>) Tx (\r) TX TO0 To1 0 0 1 169.3333 67.1667 0 TpTP-24.2941 0 Td0 Tr(<integer>) Tx (\r) TX TO0 To1 0 0 1 287.8333 67.1667 0 TpTP-37.7908 0 Td0 Tr(<single-float>) Tx (\r) TX TO0 To1 0 0 1 240.8333 224.6667 0 TpTP0 Tr/_Courier-Bold 10 Tf(\r) Tx TO0 R0 G226.3333 156 mSuuuuuu0.65 w230.6666 111.3334 m277.6666 81.6667 lS0 O0 g1 w275.1678 80.5979 m283.5275 78.0001 l277.5865 84.4298 l275.1678 80.5979 lfUUUUUU0 R0 G173.3333 160.5834 mS219 131.3334 mSuuuuuu0.65 w173.3333 160.5834 m220.3333 131 lS0 O0 g1 w217.8329 129.9294 m226.1959 127.3423 l220.2468 133.7644 l217.8329 129.9294 lfUUUUUUuuuuuu0 R0 G0.65 w167.3333 161 m121 130.6667 lS0 O0 g1 w121.0671 133.3888 m115.2335 126.862 l123.5491 129.5977 l121.0671 133.3888 lfUUUUUUuuuuuu0 R0 G0.65 w225.6666 111 m178.3333 81.3334 lS0 O0 g1 w178.4586 84.0499 m172.4969 77.6396 l180.8651 80.2103 l178.4586 84.0499 lfUUUUUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 517 504 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "32" 46
%%Page: "33" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.2 Classes) 478.77 677.67 T
2 F
(33) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
6 9 Q
0 X
(?) 108 642 T
4 F
( all-superclasses\050<single-float>\051;) 113.4 642 T
6 F
-0.22 (#[{class <single-float>}, {class <float>}, {class <real>}, {class <number>},) 108 631 P
({class <object>}]) 108 620 T
1 11 Q
(The) 108 599.67 T
4 10 Q
(all-superclasses) 129.16 599.67 T
1 11 Q
( function r) 225.16 599.67 T
(eturns a vector containing the class itself and) 275.59 599.67 T
-0.12 (all that class\325s super) 108 585.67 P
-0.12 (classes. The) 204.81 585.67 P
4 10 Q
-0.27 (#[) 264.07 585.67 P
6 9 Q
-0.25 (...) 276.07 585.67 P
4 10 Q
-0.27 (]) 292.27 585.67 P
1 11 Q
-0.12 ( syntax r) 298.27 585.67 P
-0.12 (epr) 339.61 585.67 P
-0.12 (esents a) 355.64 585.67 P
2 F
-0.12 (vector) 396.24 585.67 P
1 F
-0.12 (, which is a one-) 425.98 585.67 P
-0.15 (dimensional array) 108 571.67 P
-0.15 (. \050For information about vectors, see Chapter 1) 195.47 571.67 P
-0.15 (1,) 419.74 571.67 P
0 F
-0.15 (Collections and) 433.2 571.67 P
(Contr) 108 557.67 T
(ol Flow) 134.08 557.67 T
1 F
(.\051) 166.77 557.67 T
3 13 Q
(3.2.2  Relationship between c) 108 526.33 T
(lasses and methods) 255.93 526.33 T
1 11 Q
(The r) 108 506.67 T
(elationship between classes and methods in Dylan is dif) 133.31 506.67 T
(fer) 404.82 506.67 T
(ent fr) 417.9 506.67 T
(om that in) 443.72 506.67 T
(C++ and Smalltalk, among other languages.) 108 492.67 T
-0.2 (In Dylan, a method belongs to a generic function, as shown in Figur) 108 214.67 P
-0.2 (e 3.1, page 30.) 434.8 214.67 P
(Although methods ar) 108 200.67 T
(e independent of classes, methods operate on instances of) 212.41 200.67 T
(classes. A method states the types of objects for which it is applicable by the type) 108 186.67 T
-0.38 (constraint of each of its r) 108 172.67 P
-0.38 (equir) 225.44 172.67 P
-0.38 (ed parameters. Consider the) 250.85 172.67 P
4 10 Q
-0.82 (say-greeting) 389.55 172.67 P
1 11 Q
-0.38 ( method) 461.55 172.67 P
(de\336ned earlier:) 108 158.67 T
2 F
(Comparison to C++ and Smalltalk:) 141 458.67 T
1 F
( In C++ and Smalltalk, a class) 315.34 458.67 T
-0.18 (contains the equivalent of methods. In Dylan, a class does not con-) 141 444.67 P
(tain methods; instead, a method belongs to a generic function.) 141 430.67 T
(This design decision enables these powerful featur) 141 416.67 T
(es of Dylan:) 386.51 416.67 T
(\245) 150 402.67 T
(Y) 168 402.67 T
(o) 174.32 402.67 T
(u can de\336ne methods on built-in classes \050because you do) 180.33 402.67 T
(not have to modify the class de\336nition to de\336ne a method) 168 388.67 T
(intended for use on the class\051. For an example, see Section) 168 374.67 T
(6.1, page 75. Mor) 168 360.67 T
(e generally) 250.55 360.67 T
(, you can de\336ne a method for a) 302.77 360.67 T
(class that you did not de\336ne.) 168 346.67 T
(\245) 150 332.67 T
-0.09 (Y) 168 332.67 P
-0.09 (ou can write multimethods. In a) 174.32 332.67 P
2 F
-0.09 (multimethod) 332.33 332.67 P
1 F
-0.09 (, the method) 398.32 332.67 P
(dispatch is based on the classes of mor) 168 318.67 T
(e than one ar) 354.97 318.67 T
(gument) 417.7 318.67 T
(to a generic function. For an intr) 168 304.67 T
(oduction to method dis-) 324.31 304.67 T
(patch, see Section 5.5, page 63. For information about multi-) 168 290.67 T
(methods, see Chapter 6,) 168 276.67 T
0 F
(Multimethods) 289.83 276.67 T
1 F
(.) 352.77 276.67 T
(\245) 150 262.67 T
(Y) 168 262.67 T
(ou can r) 174.32 262.67 T
(estrict generic functions to operate on speci\336c) 213.4 262.67 T
(classes of objects.) 168 248.67 T
135 471.88 135 241.13 2 L
V
0.25 H
0 Z
N
486 471.88 486 241.13 2 L
V
N
134.88 472 486.12 472 2 L
V
N
134.88 241 486.12 241 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "33" 47
%%Page: "34" 48
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(34) 72 677.67 T
0 F
(Chapter 3) 91 677.67 T
(Methods, Classes, and Objects) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define method say-greeting \050greeting :: <integer>\051;) 108 642 T
(format-out\050"Your lucky number is %s.\134n", greeting\051;) 118.8 631 T
(end;) 108 620 T
1 11 Q
(This method operates on instances of the) 108 599.67 T
4 10 Q
(<integer>) 309.11 599.67 T
1 11 Q
( class. Notice how easy) 363.11 599.67 T
(and convenient it is to de\336ne a method intended for use on the built-in class) 108 585.67 T
4 10 Q
(<integer>) 108 571.67 T
1 11 Q
(.) 162 571.67 T
3 15 Q
(3.3  Objects) 108 532 T
1 11 Q
(In Dylan, everything is an) 108 511.67 T
2 F
(object) 237.03 511.67 T
1 F
(. Characters, strings, numbers, arrays, and vec-) 267.58 511.67 T
(tors ar) 108 497.67 T
(e all objects. The canonical tr) 139 497.67 T
(ue and false values,) 277.97 497.67 T
4 10 Q
(#t) 376.03 497.67 T
1 11 Q
(, and) 388.03 497.67 T
4 10 Q
(#f) 414.9 497.67 T
1 11 Q
(, ar) 426.9 497.67 T
(e objects.) 442.05 497.67 T
(Methods, generic functions, and classes ar) 108 483.67 T
(e objects. What does it mean to be an) 312.35 483.67 T
(object?) 108 469.67 T
(\245) 117 449.67 T
(Most important, an object has a unique identity) 135 449.67 T
(. Y) 364.14 449.67 T
(ou can use the) 375.97 449.67 T
4 10 Q
(==) 448.21 449.67 T
1 11 Q
( pr) 460.21 449.67 T
(edi-) 473.72 449.67 T
(cate to test whether two operands ar) 135 435.67 T
(e the same object. See Section 3.3.1.) 311.81 435.67 T
(\245) 117 415.67 T
(An object is a dir) 135 415.67 T
(ect instance of a particular class. Y) 216.8 415.67 T
(ou can use the) 381.91 415.67 T
4 10 Q
(object-) 454.15 415.67 T
(class) 135 401.67 T
1 11 Q
( pr) 165 401.67 T
(edicate to determine the dir) 178.51 401.67 T
(ect class of an object.) 312.63 401.67 T
(\245) 117 381.67 T
(Y) 135 381.67 T
(ou can give an object a name. For example, if you de\336ne a variable or con-) 141.32 381.67 T
(stant to contain an object, you have given that object a name. See Section) 135 367.67 T
(3.3.2.) 135 353.67 T
(\245) 117 333.67 T
(Y) 135 333.67 T
(ou can pass an object as an ar) 141.32 333.67 T
(gument or r) 283.46 333.67 T
(eturn value \321 because generic) 341.17 333.67 T
(functions and methods ar) 135 319.67 T
(e objects, you can manipulate them just as you) 259.32 319.67 T
(can any other object. See Section 12.3, page 180.) 135 305.67 T
2 F
(Comparison to C++ and Smalltalk:) 141 265.67 T
1 F
( In Dylan and Smalltalk,) 315.34 265.67 T
(everything is an object \050an instance of a class\051; we say that Dylan) 141 251.67 T
(and Smalltalk have \322objects all the way down.\323 In contrast, in) 141 237.67 T
(C++, some values ar) 141 223.67 T
(e not objects; they have primitive types that) 239.91 223.67 T
(ar) 141 209.67 T
(e not classes. For example, in Dylan, 7 is an instance of) 150.65 209.67 T
4 10 Q
(<integer>) 141 195.67 T
1 11 Q
(. In C++, 7 is not an instance; it has the type) 195 195.67 T
4 10 Q
(int) 408.85 195.67 T
1 11 Q
(. This) 426.85 195.67 T
-0.16 (design decision enables Dylan users to de\336ne methods on built-in) 141 181.67 P
(classes in the same way that they de\336ne methods on user) 141 167.67 T
(-de\336ned) 418.39 167.67 T
(classes \321 a technique that cannot be done in C++.) 141 153.67 T
135 278.88 135 146.13 2 L
V
0.25 H
0 Z
N
486 278.88 486 146.13 2 L
V
N
134.88 279 486.12 279 2 L
V
N
134.88 146 486.12 146 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "34" 48
%%Page: "35" 49
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.3 Objects) 477.9 677.67 T
2 F
(35) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(3.3.1  Predicates f) 108 434.33 T
(or testing equality) 197.88 434.33 T
1 11 Q
(Dylan pr) 108 414.67 T
(ovides two pr) 151.24 414.67 T
(edicates for testing equality:) 218.34 414.67 T
4 10 Q
(=) 357.69 414.67 T
1 11 Q
( and) 363.69 414.67 T
4 10 Q
(==) 387.81 414.67 T
1 11 Q
(. The) 399.81 414.67 T
4 10 Q
(=) 426.48 414.67 T
1 11 Q
( pr) 432.48 414.67 T
(edicate) 445.98 414.67 T
(determines whether two objects ar) 108 400.67 T
(e) 275.36 400.67 T
2 F
(similar) 283.38 400.67 T
1 F
(. Similarity is de\336ned dif) 318 400.67 T
(fer) 437.88 400.67 T
(ently for) 450.96 400.67 T
-0.04 (dif) 108 386.67 P
-0.04 (fer) 121.39 386.67 P
-0.04 (ent kinds of objects. When you de\336ne new classes, you can de\336ne how simi-) 134.47 386.67 P
(larity is tested for those classes by de\336ning a method for) 108 372.67 T
4 10 Q
(=) 384.12 372.67 T
1 11 Q
(.) 390.12 372.67 T
(The) 135 358.67 T
4 10 Q
(==) 156.16 358.67 T
1 11 Q
( pr) 168.16 358.67 T
(edicate determines whether the operands ar) 181.67 358.67 T
(e) 395.16 358.67 T
2 F
(identical) 403.18 358.67 T
1 F
( \321 that is,) 447.16 358.67 T
-0.36 (whether the operands ar) 108 344.67 P
-0.36 (e the same object. The) 226.02 344.67 P
4 10 Q
-0.8 (==) 333.19 344.67 P
1 11 Q
-0.36 ( pr) 345.19 344.67 P
-0.36 (edicate \050identity\051 is a str) 358.33 344.67 P
-0.36 (onger) 473.48 344.67 P
(test: two values may be similar but not identical, and two identical values ar) 108 330.67 T
(e) 477.85 330.67 T
(always similar) 108 316.67 T
(.) 177.92 316.67 T
(If two numbers ar) 135 302.67 T
(e mathematically equal, then they ar) 222.14 302.67 T
(e similar:) 398.73 302.67 T
6 9 Q
(?) 108 282 T
4 F
( 100 = 100;) 113.4 282 T
6 F
(#t) 108 271 T
(?) 108 252 T
4 F
( 100 = 100.0;) 113.4 252 T
6 F
(#t) 108 241 T
1 11 Q
(T) 108 220.67 T
(wo numbers that ar) 113.75 220.67 T
(e similar) 209.01 220.67 T
(, and have the same type, ar) 250.04 220.67 T
(e the same object:) 385.68 220.67 T
6 9 Q
(?) 108 200 T
4 F
( 100 == 100;) 113.4 200 T
6 F
(#t) 108 189 T
1 11 Q
(T) 108 168.67 T
(wo numbers that ar) 113.75 168.67 T
(e similar) 209.01 168.67 T
(, but have dif) 250.04 168.67 T
(fer) 314.12 168.67 T
(ent types, ar) 327.2 168.67 T
(e not the same object:) 386.6 168.67 T
6 9 Q
(?) 108 148 T
4 F
( 100 == 100.0;) 113.4 148 T
6 F
(#f) 108 137 T
2 11 Q
(Comparison to Java:) 141 634.67 T
1 F
( Java r) 242.15 634.67 T
(ecognizes the need for object r) 272.67 634.67 T
(epr) 419.21 634.67 T
(esen-) 435.24 634.67 T
(tation of all classes with the) 141 620.67 T
4 10 Q
(Number) 277.82 620.67 T
1 11 Q
( class and its subclasses. How-) 313.82 620.67 T
(ever) 141 606.67 T
(, Java still r) 161.28 606.67 T
(equir) 215.16 606.67 T
(es the pr) 240.57 606.67 T
(ogrammer to work with nonobjects) 282.02 606.67 T
-0.38 (when writing mathematical statements. The) 141 592.67 P
4 10 Q
-0.84 (Number) 355.55 592.67 P
1 11 Q
-0.38 ( classes can be) 391.55 592.67 P
(used to \322wrap\323 an object cloak ar) 141 578.67 T
(ound the primitive) 302.67 578.67 T
4 10 Q
(integer) 397.28 578.67 T
1 11 Q
(,) 438.46 578.67 T
4 10 Q
(float) 141 564.67 T
1 11 Q
(, and other numeric types, to allow object-based pr) 171 564.67 T
(ogram-) 417.16 564.67 T
(ming. Dylan does not separate the mathematical manipulation of) 141 550.67 T
(numbers fr) 141 536.67 T
(om their other object pr) 194.67 536.67 T
(operties. Pr) 308.96 536.67 T
(ogrammers need) 364.2 536.67 T
(only to think in terms of numerical objects, and can r) 141 522.67 T
(ely on the) 396.89 522.67 T
(compiler to implement mathematical operations ef) 141 508.67 T
(\336ciently) 386.92 508.67 T
(. Simi-) 425.01 508.67 T
(larly) 141 494.67 T
(, the) 162.14 494.67 T
4 10 Q
(Boolean) 185.65 494.67 T
1 11 Q
( class is used to encapsulate primitive) 227.65 494.67 T
4 10 Q
(boolean) 413.42 494.67 T
1 11 Q
(values as objects, and pr) 141 480.67 T
(ogrammers must convert back and forth,) 258.84 480.67 T
(depending on the context.) 141 466.67 T
135 647.88 135 459.12 2 L
V
0.25 H
0 Z
N
486 647.88 486 459.12 2 L
V
N
134.88 648 486.12 648 2 L
V
N
134.88 459 486.12 459 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "35" 49
%%Page: "36" 50
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(36) 72 677.67 T
0 F
(Chapter 3) 91 677.67 T
(Methods, Classes, and Objects) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Characters ar) 108 640.67 T
(e enclosed in single quotation marks. If two characters look the) 172.69 640.67 T
(same, they ar) 108 626.67 T
(e similar and identical:) 172.42 626.67 T
6 9 Q
(?) 108 606 T
4 F
( \325z\325 = \325z\325;) 113.4 606 T
6 F
(#t) 108 595 T
(?) 108 576 T
4 F
( \325z\325 == \325z\325;) 113.4 576 T
6 F
(#t) 108 565 T
1 11 Q
(Strings ar) 108 544.67 T
(e enclosed in double quotation marks. Strings that have identical ele-) 154.49 544.67 T
(ments ar) 108 530.67 T
(e similar) 150.03 530.67 T
(, but may or may not be identical. That is, strings can have iden-) 191.06 530.67 T
(tical elements, but not be the same string. For example, these strings ar) 108 516.67 T
(e similar:) 450.88 516.67 T
6 9 Q
(?) 108 496 T
4 F
("apple" = "apple";) 118.8 496 T
6 F
(#t) 108 485 T
1 11 Q
(Just by looking at two strings, you cannot know whether or not they ar) 108 464.67 T
(e the iden-) 452.17 464.67 T
(tical string. The only way to determine identity is to use the) 108 450.67 T
4 10 Q
(==) 400.09 450.67 T
1 11 Q
( pr) 412.09 450.67 T
(edicate. The fol-) 425.6 450.67 T
(lowing expr) 108 436.67 T
(ession could r) 166.55 436.67 T
(eturn) 233.85 436.67 T
4 10 Q
(#t) 262.84 436.67 T
1 11 Q
( or) 274.84 436.67 T
4 10 Q
(#f) 290.69 436.67 T
1 11 Q
(:) 302.69 436.67 T
6 9 Q
(?) 108 416 T
4 F
("apple" == "apple";) 118.8 416 T
1 11 Q
(A string is always identical to itself:) 108 395.67 T
6 9 Q
(?) 108 375 T
4 F
(begin) 118.8 375 T
(let yours = "apple";) 129.6 364 T
(let mine = yours;) 129.6 353 T
(mine == yours;) 129.6 342 T
(end;) 118.8 331 T
6 F
(#t) 108 320 T
3 13 Q
(3.3.2  Bindings: Mappings between objects and names) 108 290.33 T
1 11 Q
(A) 108 270.67 T
2 F
(binding) 119.31 270.67 T
1 F
( is a mapping between an object and a name. The name can be a mod-) 159.63 270.67 T
(ule variable, module constant, or local variable.) 108 256.67 T
(Her) 135 242.67 T
(e, we give the object) 153.57 242.67 T
4 10 Q
(3.14159) 254.24 242.67 T
1 11 Q
( the name) 296.24 242.67 T
4 10 Q
($pi) 346.63 242.67 T
1 11 Q
(, wher) 364.63 242.67 T
(e) 395.12 242.67 T
4 10 Q
($pi) 403.14 242.67 T
1 11 Q
( is a module) 421.14 242.67 T
(constant:) 108 228.67 T
6 9 Q
(?) 108 208 T
4 F
( define constant $pi = 3.14159;) 113.4 208 T
1 11 Q
(Her) 108 187.67 T
(e, we give the object) 126.57 187.67 T
4 10 Q
("apple") 227.24 187.67 T
1 11 Q
( the name) 269.24 187.67 T
4 10 Q
(*my-favorite-pie*) 319.63 187.67 T
1 11 Q
(, wher) 421.63 187.67 T
(e) 452.12 187.67 T
4 10 Q
(*my-) 460.14 187.67 T
(favorite-pie*) 108 173.67 T
1 11 Q
( is a module variable:) 186 173.67 T
6 9 Q
(?) 108 153 T
4 F
( define variable *my-favorite-pie* = "apple";) 113.4 153 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "36" 50
%%Page: "37" 51
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.3 Objects) 477.9 677.67 T
2 F
(37) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Mor) 108 640.67 T
(e than one variable can contain a particular object, so, in ef) 128.56 640.67 T
(fect, an object can) 411.94 640.67 T
(have many names. Her) 108 626.67 T
(e, we de\336ne a new variable that contains the very same) 220.23 626.67 T
(pie:) 108 612.67 T
6 9 Q
(?) 108 592 T
4 F
( define variable *your-favorite-pie* = *my-favorite-pie*;) 113.4 592 T
6 F
(?) 108 573 T
4 F
(*your-favorite-pie* == *my-favorite-pie*;) 118.8 573 T
6 F
(#t) 108 562 T
1 11 Q
(When you de\336ne a method,) 108 541.67 T
4 10 Q
(define method) 245.84 541.67 T
1 11 Q
( cr) 323.84 541.67 T
(eates a binding between a name) 335.62 541.67 T
(and a method object:) 108 527.67 T
6 9 Q
(?) 108 507 T
4 F
(define method say-greeting \050greeting :: <object>\051;) 118.8 507 T
(format-out\050"%s\134n", greeting\051;) 124.2 496 T
(end;) 118.8 485 T
1 11 Q
(All the bindings that we have cr) 108 464.67 T
(eated in this section so far ar) 263.44 464.67 T
(e accessible within a) 401.58 464.67 T
(module. \050For information about modules, see Chapter 13,) 108 450.67 T
0 F
(Libraries and Modules) 392.43 450.67 T
1 F
(.\051) 492.25 450.67 T
(Figur) 108 436.67 T
(e 3.3 shows how you can pictur) 134.21 436.67 T
(e each binding as a link between a name) 286.83 436.67 T
(\050enclosed in an oval in the \336gur) 108 422.67 T
(e\051 and another object \050enclosed in a r) 261.42 422.67 T
(ectangle\051.) 439.46 422.67 T
(Local variables ar) 135 408.67 T
(e also bindings, but they ar) 220.44 408.67 T
(e accessible only within a cer-) 351.69 408.67 T
(tain body of code; for example,) 108 394.67 T
6 9 Q
(?) 108 374 T
4 F
(begin) 118.8 374 T
(let radius = 5.0;) 129.6 363 T
(let circumference = 2.0 * $pi * radius;) 129.6 352 T
(circumference;) 129.6 341 T
(end;) 118.8 330 T
1 11 Q
(Bindings can be constant or variable. Y) 108 309.67 T
(ou can use the assignment operator to) 295.84 309.67 T
(change a variable binding, but you cannot change a constant binding. Module) 108 295.67 T
-0.23 (constants ar) 108 281.67 P
-0.23 (e constant bindings; module variables and local variables ar) 165.86 281.67 P
-0.23 (e variable) 454.39 281.67 P
(bindings.) 108 267.67 T
108 145.44 522 153.43 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 3.3) 141.33 156.77 T
8 F
(Bindings as links betw) 194.13 156.77 T
(een names and objects within a module) 292.4 156.77 T
(.) 467.89 156.77 T
108 169.43 522 252 C
109.41 173.43 520.59 250 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 -1 78 395 139 396 61 117 183.36 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f3-3.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f3-3 .eps)%%CreationDate: (6/5/96) (10:39 AM)%%BoundingBox: -1 78 395 139%%HiResBoundingBox: -0.3333 77.9167 393.9167 138.875%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 194.6667 -13.3333 194.6667 -13.3333%AI3_TileBox: -80.3333 -378.3334 471.6667 351.6666%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -1317.3333 850.6667 -3 1020 726 18 1 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4125.3333 4306.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4125.3333 4306.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4125.3333 4306.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Inked artwork) Ln0 A0 To1 0 0 1 26.1666 128.1667 0 TpTP-8.098 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq10 0 Tl0 Tc0 Tw($pi) Tx (\r) TX TO0 To1 0 0 1 25.6667 85.4167 0 TpTP-18.8954 0 Td0 Tr(3.14159) Tx (\r) TX TO0 To1 0 0 1 168.1667 85.9167 0 TpTP-18.8954 0 Td0 Tr("apple") Tx (\r) TX TO0 To1 0 0 1 111.9167 127.6667 0 TpTP-45.8888 0 Td0 Tr(*my-favorite-pie*\003) Tx 45.8888 -10 Td(\r) Tx TO0 To1 0 0 1 234.6667 127.6667 0 TpTP-51.2875 0 Td0 Tr(*your-favorite-pie*\003) Tx 51.2875 -10 Td(\r) Tx TO0 To1 0 0 1 350.1667 128.6667 0 TpTP-35.0914 0 Td0 Tr( say-greeting\003) Tx 35.0914 -10 Td(\r) Tx TO0 To1 0 0 1 351.9167 84.4167 0 TpTP-35.5664 0 Td0 Tr/_Helvetica 10 Tf(a method object) Tx (\r) TX TO1 Ap0 R0 G0.5 w32.9167 121.6667 m38.0529 121.6667 42.2168 125.3604 42.2168 129.9167 C42.2168 129.9167 L42.2168 134.4729 38.0529 138.1667 32.9167 138.1667 C19.4166 138.1667 L14.2803 138.1667 10.1165 134.4729 10.1165 129.9167 C9.8665 129.9167 L9.8665 125.3604 14.2803 121.6667 19.4166 121.6667 C32.9167 121.6667 Ls382.7292 122.125 m387.8654 122.125 392.0293 125.8187 392.0293 130.375 C392.0293 130.375 L392.0293 134.9313 387.8654 138.625 382.7292 138.625 C319.5624 138.625 L314.4262 138.625 310.2623 134.9313 310.2623 130.375 C310.0123 130.375 L310.0123 125.8187 314.4262 122.125 319.5624 122.125 C382.7292 122.125 Ls158.3665 121.6667 m163.5028 121.6667 167.6667 125.3604 167.6667 129.9167 C167.6667 129.9167 L167.6667 134.4729 163.5028 138.1667 158.3665 138.1667 C67.5208 138.1667 L62.3845 138.1667 58.2207 134.4729 58.2207 129.9167 C57.9707 129.9167 L57.9707 125.3604 62.3845 121.6667 67.5208 121.6667 C158.3665 121.6667 Ls284.5833 121.6667 m289.7196 121.6667 293.8835 125.3604 293.8835 129.9167 C293.8835 129.9167 L293.8835 134.4729 289.7196 138.1667 284.5833 138.1667 C185.7916 138.1667 L180.6554 138.1667 176.4915 134.4729 176.4915 129.9167 C176.2415 129.9167 L176.2415 125.3604 180.6554 121.6667 185.7916 121.6667 C284.5833 121.6667 Ls393.6667 78.1667 m393.6667 96.4167 L309.9167 96.4167 L309.9167 78.1667 L393.6667 78.1667 Ls193.4167 78.1667 m193.4167 96.4167 L141.9167 96.4167 L141.9167 78.1667 L193.4167 78.1667 Ls51.4167 78.1667 m51.4167 96.4167 L-0.0833 96.4167 L-0.0833 78.1667 L51.4167 78.1667 Lsuu0 Ap351.1667 122.1667 m351.1667 104.1667 lS0 O0 g1 w348.9288 105.2125 m351.1942 96.7567 l353.4602 105.2125 l348.9288 105.2125 lfUUuu0 R0 G0.5 w25.6667 121.1667 m25.6667 103.9167 lS0 O0 g1 w23.4288 105.4625 m25.6942 97.0067 l27.9602 105.4625 l23.4288 105.4625 lfUU107.6667 121.4167 mF0 R0 G124.1667 105.9167 mSuu0.5 w109.1667 121.6667 m135.6667 101.1667 lS0 O0 g1 w133.0716 100.3428 m141.1459 96.9608 l135.8442 103.9269 l133.0716 100.3428 lfUUu0 R0 G0.5 w226.5261 121.8386 m200.0261 101.3386 lS0 O0 g1 w199.3785 103.5576 m194.0765 96.5918 l202.1511 99.9735 l199.3785 103.5576 lfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 169.43 522 252 C
36 72 576 720 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "37" 51
%%Page: "38" 52
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(38) 72 677.67 T
0 F
(Chapter 3) 91 677.67 T
(Methods, Classes, and Objects) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(3.4  Summar) 108 638 T
(y) 181.27 638 T
1 11 Q
(In this chapter) 108 617.67 T
(, we cover) 177.24 617.67 T
(ed the following:) 226.46 617.67 T
(\245) 117 597.67 T
(A generic function can contain mor) 135 597.67 T
(e than one method, wher) 306.2 597.67 T
(e each method) 427.48 597.67 T
(has parameters of dif) 135 583.67 T
(fer) 237.67 583.67 T
(ent types, and thus is intended for dif) 250.75 583.67 T
(fer) 433 583.67 T
(ent ar) 446.08 583.67 T
(gu-) 473.73 583.67 T
(ments. The) 135 569.67 T
4 10 Q
(say-greeting) 191.3 569.67 T
1 11 Q
( generic function has two methods.) 263.3 569.67 T
(\245) 117 549.67 T
(Dylan pr) 135 549.67 T
(ovides built-in classes, including) 178.24 549.67 T
4 10 Q
(<integer>) 339.64 549.67 T
1 11 Q
(,) 393.64 549.67 T
4 10 Q
(<single-float>) 399.14 549.67 T
1 11 Q
(,) 483.14 549.67 T
4 10 Q
(<string>) 135 535.67 T
1 11 Q
(, and) 183 535.67 T
4 10 Q
(<object>) 209.87 535.67 T
1 11 Q
(. These classes ar) 257.87 535.67 T
(e r) 339.71 535.67 T
(elated by inheritance.) 351.88 535.67 T
(\245) 117 515.67 T
(In Dylan, almost everything is an object. Each object has a unique identity) 135 515.67 T
(.) 492.24 515.67 T
(\245) 117 495.67 T
(The) 135 495.67 T
4 10 Q
(=) 156.16 495.67 T
1 11 Q
( pr) 162.16 495.67 T
(edicate tests for similarity; the) 175.67 495.67 T
4 10 Q
(==) 324.37 495.67 T
1 11 Q
( pr) 336.37 495.67 T
(edicate tests for identity) 349.88 495.67 T
(.) 465.2 495.67 T
(\245) 117 475.67 T
(A binding is an association between an object and a name.) 135 475.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "38" 52
%%Page: "39" 53
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(39) 301.25 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(4) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(4) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(User) 109 566.45 T
(-De\336ned Classes and) 170.74 566.45 T
(Methods) 108 536.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
(In this chapter) 108 424.67 T
(, we show the most basic techniques for writing object-oriented) 177.24 424.67 T
-0.05 (code in Dylan. W) 108 410.67 P
-0.05 (e de\336ne a class, make instances of the class, initialize slots of the) 191.06 410.67 P
-0.36 (instances, and get and set the values of slots. W) 108 396.67 P
-0.36 (e de\336ne methods, and call them on) 333.81 396.67 P
(the instances. One method r) 108 382.67 T
(eturns multiple values \321 and that is an extr) 243.74 382.67 T
(emely) 456.68 382.67 T
(useful technique. Another method uses local variables.) 108 368.67 T
(In this chapter) 135 354.67 T
(, we start to develop an example of a library that r) 204.24 354.67 T
(epr) 446.58 354.67 T
(esents) 462.6 354.67 T
(dif) 108 340.67 T
(fer) 121.39 340.67 T
(ent kinds of time. A library is a complete unit of code that can be used by) 134.47 340.67 T
-0.1 (many dif) 108 326.67 P
-0.1 (fer) 151.77 326.67 P
-0.1 (ent clients, wher) 164.85 326.67 P
-0.1 (e a client can be another library or an application pr) 244.36 326.67 P
-0.1 (o-) 494.33 326.67 P
(gram. In Chapters 5 and 6, we expand and r) 108 312.67 T
(e\336ne the example that we begin in) 321.22 312.67 T
(this chapter) 108 298.67 T
(. Chapter 8,) 164.39 298.67 T
0 F
(A Simple Library) 225.9 298.67 T
1 F
(, shows the r) 303.12 298.67 T
(esult: a complete and work-) 364.43 298.67 T
(ing library) 108 284.67 T
(.) 158.04 284.67 T
3 15 Q
(4.1  Requirements of the time and position c) 108 245 T
(lasses and methods) 366.15 245 T
1 11 Q
-0.04 (Our eventual goal in this book is to develop a sample application based on an air-) 108 224.67 P
(port theme. The sample application handles the scheduling of air) 108 210.67 T
(craft that ar) 423.79 210.67 T
(e) 479.99 210.67 T
(arriving into and departing fr) 108 196.67 T
(om an airport. For mor) 251.7 196.67 T
(e information, see Chapter) 363 196.67 T
(15,) 108 182.67 T
0 F
(Design of the Airport Application) 127.25 182.67 T
1 F
(.) 277.17 182.67 T
(W) 135 168.67 T
(e know that, for our airport application, we need to r) 144.99 168.67 T
(epr) 401.17 168.67 T
(esent time. Ther) 417.19 168.67 T
(e) 494.96 168.67 T
(ar) 108 154.67 T
(e several ways to r) 117.65 154.67 T
(epr) 207.57 154.67 T
(esent time. W) 223.6 154.67 T
(e could say that an event happened 2 hours) 288.8 154.67 T
(ago \050a time of) 108 140.67 T
(fset\051. W) 174.27 140.67 T
(e could say that an event happened at 21:30 \050a time of day\051.) 210.61 140.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "39" 53
%%Page: "40" 54
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(40) 72 677.67 T
0 F
(Chapter 4) 91 677.67 T
(User-Defined Classes and Methods) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(W) 108 640.67 T
(e must r) 117.99 640.67 T
(epr) 157.5 640.67 T
(esent both kinds of time in our time library) 173.53 640.67 T
(, and we must pr) 381.26 640.67 T
(ovide a) 463.43 640.67 T
(way to print r) 108 626.67 T
(epr) 174.92 626.67 T
(esentations of both. In this chapter) 190.95 626.67 T
(, we de\336ne a class named) 357.49 626.67 T
4 10 Q
(<time-of-day>) 108 612.67 T
1 11 Q
(, and we de\336ne a method that prints a r) 186 612.67 T
(epr) 377.61 612.67 T
(esentation of) 393.64 612.67 T
4 10 Q
(<time-) 458.69 612.67 T
-0.26 (of-day>) 108 598.67 P
1 11 Q
-0.12 (. In Chapter 5,) 150 598.67 P
0 F
-0.12 (Class Inheritance) 223.77 598.67 P
1 F
-0.12 (, we de\336ne the) 300.55 598.67 P
4 10 Q
-0.26 (<time-offset>) 373.83 598.67 P
1 11 Q
-0.12 ( class, and) 451.83 598.67 P
(a method that prints a r) 108 584.67 T
(epr) 222.48 584.67 T
(esentation of) 238.5 584.67 T
4 10 Q
(<time-offset>) 303.56 584.67 T
1 11 Q
(.) 381.56 584.67 T
(The airport application also r) 135 570.67 T
(equir) 276.23 570.67 T
(es us to r) 301.64 570.67 T
(epr) 344.86 570.67 T
(esent physical objects \050such) 360.89 570.67 T
(as air) 108 556.67 T
(craft\051, and the positions \050locations\051 of physical objects. In Chapter 7,) 133.76 556.67 T
0 F
(Modularity) 108 542.67 T
1 F
(, we de\336ne classes that r) 159.33 542.67 T
(epr) 276.65 542.67 T
(esent physical objects and positions.) 292.68 542.67 T
-0.08 (Eventually) 135 528.67 P
-0.08 (, we need to be able to add times, to compar) 186.62 528.67 P
-0.08 (e times for similarity) 399.35 528.67 P
-0.08 (,) 498.58 528.67 P
(and to determine which of two times is gr) 108 514.67 T
(eater than the other) 311.05 514.67 T
(. W) 405.21 514.67 T
(e implement) 420.7 514.67 T
(those operations in Chapter 6,) 108 500.67 T
0 F
(Multimethods) 259.38 500.67 T
1 F
(.) 322.32 500.67 T
(W) 135 486.67 T
(e package the r) 144.99 486.67 T
(esult of all our work into a complete and working library) 217.91 486.67 T
(,) 493.74 486.67 T
-0.26 (in Chapter 8,) 108 472.67 P
0 F
-0.26 (A Simple Library) 175.32 472.67 P
1 F
-0.26 (. Later) 252.01 472.67 P
-0.26 (, we r) 281.85 472.67 P
-0.26 (e\336ne this library to achieve gr) 308.17 472.67 P
-0.26 (eater mod-) 451.44 472.67 P
(ularity and extensibility) 108 458.67 T
(. The \336nal r) 222.94 458.67 T
(esult is given in Chapter 14,) 278.26 458.67 T
0 F
(Four Complete) 418.79 458.67 T
(Libraries) 108 444.67 T
1 F
(.) 147.32 444.67 T
3 15 Q
(4.2  User) 108 405 T
(-de\336ned c) 159.06 405 T
(lasses) 216.93 405 T
1 11 Q
-0.01 (A) 108 384.67 P
2 F
-0.01 (user) 119.29 384.67 P
-0.01 (-de\336ned class) 140.48 384.67 P
1 F
-0.01 ( is like a str) 208.58 384.67 P
-0.01 (uctur) 263.18 384.67 P
-0.01 (e or a r) 289.06 384.67 P
-0.01 (ecor) 322.54 384.67 P
-0.01 (d type in other languages. When) 342.85 384.67 P
-0.42 (you de\336ne a class, you specify its name, its dir) 108 370.67 P
-0.42 (ect super) 328.98 370.67 P
-0.42 (classes, and its) 372.37 370.67 P
2 F
-0.42 (slots) 445.03 370.67 P
1 F
-0.42 (. A slot) 468.24 370.67 P
-0.3 (has a name and a type. Normally) 108 356.67 P
-0.3 (, each instance stor) 266.11 356.67 P
-0.3 (es its own value for the slot. A) 356.58 356.67 P
-0.15 (class inherits the slots de\336ned by its super) 108 342.67 P
-0.15 (classes, and it can de\336ne mor) 311.58 342.67 P
-0.15 (e slots if it) 452.55 342.67 P
(needs them.) 108 328.67 T
3 13 Q
(4.2.1  The) 108 297.33 T
4 12 Q
(<time-of-day>) 159.56 297.33 T
3 13 Q
( c) 253.16 297.33 T
(lass) 261.86 297.33 T
1 11 Q
-0.35 (W) 108 277.67 P
-0.35 (e start by de\336ning a class to r) 117.99 277.67 P
-0.35 (epr) 256.82 277.67 P
-0.35 (esent the concept of a time of day) 272.85 277.67 P
-0.35 (, such as 21:30.) 431.42 277.67 P
(The de\336nition of the) 108 263.67 T
4 10 Q
(<time-of-day>) 209.78 263.67 T
1 11 Q
( class is as follows:) 287.78 263.67 T
5 9 Q
(// A specific time of day from 00:00 \050midnight\051 to below 24:00 \050tomorrow\051) 108 243 T
4 F
(define class <time-of-day> \050<object>\051) 108 232 T
5 F
(// 1) 481.83 232 T
4 F
(slot total-seconds :: <integer>;) 118.8 221 T
5 F
(// 2) 481.83 221 T
4 F
(end class <time-of-day>;) 108 210 T
5 F
-2.7 (// 3) 481.83 210 P
1 11 Q
(The top line is a) 108 189.67 T
2 F
(comment) 187.8 189.67 T
1 F
(. The) 234.25 189.67 T
5 9 Q
(//) 260.91 189.67 T
1 11 Q
( characters begin a comment, which continues) 271.71 189.67 T
(to the end of the line. W) 108 175.67 T
(e also pr) 223.48 175.67 T
(ovide comments that number the lines of code) 264.38 175.67 T
(after the \336rst comment. The line numbers ar) 108 161.67 T
(e useful only for discussing the code) 321.69 161.67 T
(examples in the book, and would not be used in sour) 108 147.67 T
(ce \336les. Y) 365.27 147.67 T
(ou can also have) 409.79 147.67 T
(multiline comments that start with) 108 133.67 T
4 10 Q
(/*) 279.51 133.67 T
1 11 Q
( and end with) 291.51 133.67 T
4 10 Q
(*/) 361.89 133.67 T
1 11 Q
(.) 373.89 133.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "40" 54
%%Page: "41" 55
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.3 Use of) 377 677.67 T
5 F
(make) 417.64 677.67 T
0 F
( to create an instance) 440.44 677.67 T
2 F
(41) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(On line 1, the wor) 135 640.67 T
(ds) 221.96 640.67 T
4 10 Q
(define class) 236.09 640.67 T
1 11 Q
( start the class de\336nition. The name of) 308.09 640.67 T
-0.03 (the class is) 108 626.67 P
4 10 Q
-0.06 (<time-of-day>) 162.2 626.67 P
1 11 Q
-0.03 (. The list following the name of the class is a list of the) 240.2 626.67 P
(dir) 108 612.67 T
(ect super) 122.07 612.67 T
(classes of this class. The) 165.88 612.67 T
4 10 Q
(<time-of-day>) 284.08 612.67 T
1 11 Q
( class has one dir) 362.08 612.67 T
(ect) 444.3 612.67 T
(super) 108 598.67 T
(class, which is the class) 135.32 598.67 T
4 10 Q
(<object>) 250.84 598.67 T
1 11 Q
(. Each user) 298.83 598.67 T
(-de\336ned class must have at) 351.3 598.67 T
(least one dir) 108 584.67 T
(ect super) 167.47 584.67 T
(class. If no other class is appr) 211.28 584.67 T
(opriate, the class must have) 352.48 584.67 T
4 10 Q
(<object>) 108 570.67 T
1 11 Q
( as its super) 156 570.67 T
(class.) 213.19 570.67 T
(Line 2 contains the only slot de\336nition of this class. This class has one slot,) 135 556.67 T
(named) 108 542.67 T
4 10 Q
(total-seconds) 144.35 542.67 T
1 11 Q
(. The slot\325s type constraint is) 222.35 542.67 T
4 10 Q
(<integer>) 363.22 542.67 T
1 11 Q
(. The double) 417.22 542.67 T
(colon,) 108 528.67 T
4 10 Q
(::) 140 528.67 T
1 11 Q
(, speci\336es the type constraint of a slot, just as it speci\336es the type con-) 152 528.67 T
(straint of a module variable or of a method\325s parameter) 108 514.67 T
(.) 376.32 514.67 T
(Line 3 is the end of the class de\336nition. The text after the wor) 135 500.67 T
(d) 430.87 500.67 T
4 10 Q
(end) 440.34 500.67 T
1 11 Q
( and) 458.34 500.67 T
-0.02 (befor) 108 486.67 P
-0.02 (e the semicolon is an optional part of the de\336nition; it documents which def-) 133.17 486.67 P
-0.02 (inition is ending. Any text appearing after the) 108 472.67 P
4 10 Q
-0.05 (end) 332.92 472.67 P
1 11 Q
-0.02 ( must match the de\336nition end-) 350.92 472.67 P
(ing, such as) 108 458.67 T
4 10 Q
(end class <time-of-day>) 167.47 458.67 T
1 11 Q
(, or) 305.47 458.67 T
4 10 Q
(end class) 324.07 458.67 T
1 11 Q
(. Y) 378.07 458.67 T
(ou do not need to put) 389.89 458.67 T
(any text after the) 108 444.67 T
4 10 Q
(end) 192.76 444.67 T
1 11 Q
( \321 however) 210.76 444.67 T
(, such text is useful for long or complex de\336ni-) 269.12 444.67 T
(tions, wher) 108 430.67 T
(e it can be dif) 162.35 430.67 T
(\336cult to see which language constr) 226.93 430.67 T
(uct is ending.) 395.03 430.67 T
3 13 Q
(4.2.2  The type constraint of a slot) 108 399.33 T
1 11 Q
(The type constraint of the) 108 379.67 T
4 10 Q
(total-seconds) 235.25 379.67 T
1 11 Q
( slot is) 313.25 379.67 T
4 10 Q
(<integer>) 346.82 379.67 T
1 11 Q
(. This slot can hold) 400.82 379.67 T
(instances of) 108 365.67 T
4 10 Q
(<integer>) 167.74 365.67 T
1 11 Q
(, and cannot hold any other kind of object.) 221.74 365.67 T
(The type constraint of a slot is optional. Specifying a slot with no explicit) 135 351.67 T
-0.1 (type constraint is equivalent to specifying) 108 337.67 P
4 10 Q
-0.21 (<object>) 313.09 337.67 P
1 11 Q
-0.1 ( as the type constraint. A slot) 361.09 337.67 P
(whose type constraint is) 108 323.67 T
4 10 Q
(<object>) 228.54 323.67 T
1 11 Q
( can hold any object. The ability to have slots) 276.54 323.67 T
(with the type constraint) 108 309.67 T
4 10 Q
(<object>) 226.78 309.67 T
1 11 Q
( pr) 274.78 309.67 T
(ovides \337exibility that can be valuable; for) 288.29 309.67 T
(mor) 108 295.67 T
(e information, see Chapter 19,) 127.87 295.67 T
0 F
(Performance and Flexibility) 278.87 295.67 T
1 F
(.) 402.13 295.67 T
3 15 Q
(4.3  Use of) 108 256 T
4 14 Q
(make) 172.95 256 T
3 15 Q
( to create an instance) 206.55 256 T
1 11 Q
-0.26 (W) 108 235.67 P
-0.26 (e want to make an instance of) 117.99 235.67 P
4 10 Q
-0.58 (<time-of-day>) 262.99 235.67 P
1 11 Q
-0.26 (, but \336rst we need a place to stor) 340.99 235.67 P
-0.26 (e) 496.24 235.67 P
-0.02 (it. W) 108 221.67 P
-0.02 (e de\336ne a module variable called) 130.26 221.67 P
4 10 Q
-0.04 (*my-time-of-day*) 293.37 221.67 P
1 11 Q
-0.02 (, and initialize it to con-) 389.37 221.67 P
(tain a new instance of) 108 207.67 T
4 10 Q
(<time-of-day>) 216.36 207.67 T
1 11 Q
(:) 294.36 207.67 T
6 9 Q
(?) 108 187 T
4 F
( define variable *my-time-of-day* = make\050<time-of-day>\051;) 113.4 187 T
1 11 Q
-0.44 (The) 108 166.67 P
4 10 Q
-0.96 (make) 128.72 166.67 P
1 11 Q
-0.44 ( function cr) 152.72 166.67 P
-0.44 (eates an instance of) 207.15 166.67 P
4 10 Q
-0.96 (<time-of-day>) 302.15 166.67 P
1 11 Q
-0.44 (. The ar) 380.15 166.67 P
-0.44 (gument to) 415.59 166.67 P
4 10 Q
-0.96 (make) 467.52 166.67 P
1 11 Q
-0.44 ( is) 491.52 166.67 P
(the class to cr) 108 152.67 T
(eate. The) 173.04 152.67 T
4 10 Q
(make) 219.33 152.67 T
1 11 Q
( function r) 243.33 152.67 T
(eturns the new instance.) 293.76 152.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "41" 55
%%Page: "42" 56
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(42) 72 677.67 T
0 F
(Chapter 4) 91 677.67 T
(User-Defined Classes and Methods) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(The instance stor) 135 640.67 T
(ed in) 217.23 640.67 T
4 10 Q
(*my-time-of-day*) 244.32 640.67 T
1 11 Q
( has a) 340.32 640.67 T
4 10 Q
(total-seconds) 370.63 640.67 T
1 11 Q
( slot with) 448.63 640.67 T
(no value. The next logical step is to stor) 108 626.67 T
(e a value in that slot.) 299.42 626.67 T
3 15 Q
(4.4  Getter) 108 587 T
(s and setter) 168 587 T
(s of slot v) 236.88 587 T
(alues) 294.08 587 T
1 11 Q
-0.42 (W) 108 566.67 P
-0.42 (e can stor) 117.99 566.67 P
-0.42 (e a value in the) 163.11 566.67 P
4 10 Q
-0.92 (total-seconds) 237.2 566.67 P
1 11 Q
-0.42 ( slot of the) 315.2 566.67 P
4 10 Q
-0.92 (<time-of-day>) 366.9 566.67 P
1 11 Q
-0.42 ( instance by) 444.9 566.67 P
(using the assignment operator) 108 552.67 T
(,) 254.89 552.67 T
4 10 Q
(:=) 260.39 552.67 T
1 11 Q
(, as follows:) 272.39 552.67 T
6 9 Q
(?) 108 532 T
4 F
(*my-time-of-day*.total-seconds := 180;) 118.8 532 T
6 F
(180) 108 521 T
1 11 Q
(W) 108 500.67 T
(e can examine the value of the slot in the instance:) 117.99 500.67 T
6 9 Q
(?) 108 480 T
4 F
(*my-time-of-day*.total-seconds;) 118.8 480 T
6 F
(180) 108 469 T
1 11 Q
(Although these expr) 108 448.67 T
(essions may look like they ar) 207.3 448.67 T
(e accessing the slots dir) 347.38 448.67 T
(ectly) 460.68 448.67 T
(,) 482.52 448.67 T
(they ar) 108 434.67 T
(e not. They ar) 141.77 434.67 T
(e abbr) 208.21 434.67 T
(eviations for function calls to a getter and a setter) 238.04 434.67 T
(. A) 476.37 434.67 T
2 F
-0.05 (getter) 108 420.67 P
1 F
-0.05 ( is a method that r) 136.72 420.67 P
-0.05 (etrieves the curr) 224.52 420.67 P
-0.05 (ent value of a slot in an object. A) 303 420.67 P
2 F
-0.05 (setter) 463.24 420.67 P
1 F
-0.05 ( is) 490.73 420.67 P
(a method that stor) 108 406.67 T
(es a value in a slot. Each slot in a class automatically has a get-) 196.92 406.67 T
-0.23 (ter and a setter de\336ned for it. Y) 108 392.67 P
-0.23 (ou can see the function-call syntax, and other infor-) 256.56 392.67 P
(mation about getters and setters, in Chapter 10,) 108 378.67 T
0 F
(Slots) 343.42 378.67 T
1 F
(.) 365.42 378.67 T
3 15 Q
(4.5  Initialization of slots when instances are made) 108 339 T
1 11 Q
(So far) 108 318.67 T
(, we have made an instance and set the value of its slot. W) 135.23 318.67 T
(e might like to) 416.1 318.67 T
(combine those two steps and to set the slot\325s value while making the instance \321) 108 304.67 T
(in other wor) 108 290.67 T
(ds, to) 168.04 290.67 T
2 F
(initialize) 197.26 290.67 T
1 F
( the slot when we make the instance. One way to do) 242.46 290.67 T
(that is to pr) 108 276.67 T
(ovide a) 163.54 276.67 T
2 F
(keyword argument) 201.95 276.67 T
1 F
( to) 297.6 276.67 T
4 10 Q
(make) 312.69 276.67 T
1 11 Q
(. \050Dylan of) 336.69 276.67 T
(fers several techniques) 387.8 276.67 T
(for initializing slots; see Chapter 10,) 108 262.67 T
0 F
(Slots) 287.31 262.67 T
1 F
(.\051) 309.31 262.67 T
3 13 Q
(4.5.1  K) 108 231.33 T
(e) 145.19 231.33 T
(yw) 150.98 231.33 T
(or) 165.01 231.33 T
(d ar) 175.47 231.33 T
(guments in function calls) 194.88 231.33 T
1 11 Q
(W) 108 211.67 T
(e would like to be able to call) 117.99 211.67 T
4 10 Q
(make) 262.15 211.67 T
1 11 Q
( as follows:) 286.15 211.67 T
6 9 Q
(?) 108 191 T
4 F
(make\050<time-of-day>, total-seconds: 120\051;) 118.8 191 T
1 11 Q
(W) 108 170.67 T
(e will be able to make this call after we have done a bit of homework, as we) 117.99 170.67 T
(shall show in Section 4.5.2. In the pr) 108 156.67 T
(eceding call to) 282.06 156.67 T
4 10 Q
(make) 354.55 156.67 T
1 11 Q
(, we pr) 378.55 156.67 T
(ovided a keywor) 412.01 156.67 T
(d) 493.97 156.67 T
(ar) 108 142.67 T
(gument, consisting of a keywor) 117.65 142.67 T
(d,) 270.24 142.67 T
4 10 Q
(total-seconds:) 282.46 142.67 T
1 11 Q
(, followed by a value,) 366.46 142.67 T
4 10 Q
(120) 473.47 142.67 T
1 11 Q
(.) 491.47 142.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "42" 56
%%Page: "43" 57
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.5 Initialization of slots when instances are made) 330.31 677.67 T
2 F
(43) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(The) 108 640.67 T
4 10 Q
(<time-of-day>) 129.16 640.67 T
1 11 Q
( instance r) 207.16 640.67 T
(eturned by) 256.72 640.67 T
4 10 Q
(make) 312.64 640.67 T
1 11 Q
( has its) 336.64 640.67 T
4 10 Q
(total-seconds) 372.91 640.67 T
1 11 Q
( slot set to) 450.91 640.67 T
4 10 Q
(120) 108 626.67 T
1 11 Q
(.) 126 626.67 T
(A) 135 612.67 T
2 F
(keyword argument) 146.31 612.67 T
1 F
( consists of a keywor) 241.95 612.67 T
(d followed by the keywor) 343.02 612.67 T
(d\325s) 468.27 612.67 T
(value. A) 108 598.67 T
2 F
(keyword) 151.63 598.67 T
1 F
( is a name followed by a colon, such as) 196.24 598.67 T
4 10 Q
(total-seconds:) 386.93 598.67 T
1 11 Q
(. The) 470.93 598.67 T
(colon after a keywor) 108 584.67 T
(d is not a convention; it is a r) 207.44 584.67 T
(equir) 346.94 584.67 T
(ed part of the keywor) 372.35 584.67 T
(d.) 477.14 584.67 T
(Ther) 108 570.67 T
(e must be no space between the name and the colon.) 130.56 570.67 T
(Y) 135 556.67 T
(ou can de\336ne functions to accept keywor) 141.32 556.67 T
(d ar) 340.16 556.67 T
(guments. When a function) 359.28 556.67 T
(accepts keywor) 108 542.67 T
(d ar) 182.98 542.67 T
(guments, you can pr) 202.09 542.67 T
(ovide them in any or) 301.78 542.67 T
(der) 402.93 542.67 T
(. Keywor) 418.45 542.67 T
(d ar) 462.65 542.67 T
(gu-) 481.77 542.67 T
-0.06 (ments can be useful for functions that take many ar) 108 528.67 P
-0.06 (guments \321 when you call the) 356.43 528.67 P
(function, you do not need to r) 108 514.67 T
(emember the or) 252.9 514.67 T
(der of the ar) 329.47 514.67 T
(guments. Keywor) 388.63 514.67 T
(d) 475.21 514.67 T
(ar) 108 500.67 T
(guments ar) 117.65 500.67 T
(e optional ar) 172.43 500.67 T
(guments, so they ar) 233.36 500.67 T
(e useful for parameters that have a) 328.43 500.67 T
-0.31 (default value that you may want to override at times. For mor) 108 486.67 P
-0.31 (e information about) 405.59 486.67 P
(keywor) 108 472.67 T
(d ar) 144.83 472.67 T
(guments, see Section 12.2.3, page 172.) 163.95 472.67 T
(How does) 135 458.67 T
4 10 Q
(make) 187.49 458.67 T
1 11 Q
( know that the value of the) 211.49 458.67 T
4 10 Q
(total-seconds:) 344.52 458.67 T
1 11 Q
( keywor) 428.52 458.67 T
(d) 468.09 458.67 T
(should be used to initialize the) 108 444.67 T
4 10 Q
(total-seconds) 259.88 444.67 T
1 11 Q
( slot? The keywor) 337.88 444.67 T
(d and the slot) 423.71 444.67 T
(happen to have the same name, but that is not how it knows. Befor) 108 430.67 T
(e you can use) 432.08 430.67 T
(the) 108 416.67 T
4 10 Q
(total-seconds:) 126.01 416.67 T
1 11 Q
( keywor) 210.01 416.67 T
(d ar) 249.59 416.67 T
(gument to) 268.7 416.67 T
4 10 Q
(make) 321.51 416.67 T
1 11 Q
(, you must associate that) 345.51 416.67 T
(keywor) 108 402.67 T
(d with the) 144.83 402.67 T
4 10 Q
(total-seconds) 197.42 402.67 T
1 11 Q
( slot in the class de\336nition.) 275.42 402.67 T
3 13 Q
(4.5.2  Init ke) 108 371.33 T
(yw) 168.31 371.33 T
(or) 182.33 371.33 T
(ds: K) 192.8 371.33 T
(e) 219.31 371.33 T
(yw) 225.09 371.33 T
(or) 239.12 371.33 T
(ds that initializ) 249.58 371.33 T
(e slots) 323.73 371.33 T
1 11 Q
-0.12 (The) 108 351.67 P
4 10 Q
-0.27 (total-seconds:) 129.04 351.67 P
1 11 Q
-0.12 ( keywor) 213.04 351.67 P
-0.12 (d is an) 252.5 351.67 P
2 F
-0.12 (init keyword) 286.87 351.67 P
1 F
-0.12 ( \321 a keywor) 351.82 351.67 P
-0.12 (d that we can give) 413.04 351.67 P
(to) 108 337.67 T
4 10 Q
(make) 120.34 337.67 T
1 11 Q
( to pr) 144.34 337.67 T
(ovide an initial value for a slot. T) 170.19 337.67 T
(o make it possible to give an init) 329.32 337.67 T
-0.09 (keywor) 108 323.67 P
-0.09 (d to) 144.83 323.67 P
4 10 Q
-0.19 (make) 166.47 323.67 P
1 11 Q
-0.09 (, we need to use the) 190.47 323.67 P
4 10 Q
-0.19 (init-keyword:) 288.73 323.67 P
1 11 Q
-0.09 ( slot option when we de\336ne) 366.73 323.67 P
-0.33 (the class. A) 108 309.67 P
2 F
-0.33 (slot option) 164.75 309.67 P
1 F
-0.33 ( lets us specify a characteristic of a slot. Slot options appear) 218.49 309.67 P
(after the optional type speci\336er of a slot.) 108 295.67 T
(Her) 135 281.67 T
(e, we r) 153.57 281.67 T
(ede\336ne the) 185.68 281.67 T
4 10 Q
(<time-of-day>) 242.02 281.67 T
1 11 Q
( class to use the) 320.02 281.67 T
4 10 Q
(init-keyword:) 398.1 281.67 T
1 11 Q
( slot) 476.1 281.67 T
(option:) 108 267.67 T
5 9 Q
(// A specific time of day from 00:00 \050midnight\051 to below 24:00 \050tomorrow\051) 108 247 T
4 F
(define class <time-of-day> \050<object>\051) 108 236 T
5 F
(// 1) 481.83 236 T
4 F
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 118.8 225 T
5 F
(// 2) 481.83 225 T
4 F
(end class <time-of-day>;) 108 214 T
5 F
(// 3) 481.83 214 T
1 11 Q
(The pr) 108 193.67 T
(eceding de\336nition) 139.92 193.67 T
2 F
(rede\336nes) 230.73 193.67 T
1 F
( the class) 276.55 193.67 T
4 10 Q
(<time-of-day>) 322.97 193.67 T
1 11 Q
(. That is, this new) 400.97 193.67 T
(de\336nition of) 108 179.67 T
4 10 Q
(<time-of-day>) 170.61 179.67 T
1 11 Q
( r) 248.61 179.67 T
(eplaces the old de\336nition of) 255.51 179.67 T
4 10 Q
(<time-of-day>) 392.95 179.67 T
1 11 Q
(.) 470.95 179.67 T
(In line 2, the) 135 165.67 T
4 10 Q
(init-keyword:) 197.69 165.67 T
1 11 Q
( slot option de\336nes) 275.69 165.67 T
4 10 Q
(total-seconds:) 370.94 165.67 T
1 11 Q
( as a) 454.94 165.67 T
(keywor) 108 151.67 T
(d parameter that we can give to) 144.83 151.67 T
4 10 Q
(make) 301.63 151.67 T
1 11 Q
( when we make an instance of this) 325.63 151.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "43" 57
%%Page: "44" 58
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(44) 72 677.67 T
0 F
(Chapter 4) 91 677.67 T
(User-Defined Classes and Methods) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(class. Now that we have de\336ned) 108 640.67 T
4 10 Q
(total-seconds:) 268.42 640.67 T
1 11 Q
( as an init keywor) 352.42 640.67 T
(d, we can) 438.71 640.67 T
(pr) 108 626.67 T
(ovide the keywor) 118.76 626.67 T
(d ar) 203.76 626.67 T
(gument as follows:) 222.87 626.67 T
6 9 Q
(?) 108 606 T
4 F
( *my-time-of-day* := make\050<time-of-day>, total-seconds: 120\051;) 113.4 606 T
6 F
({instance of <time-of-day>}) 108 595 T
1 11 Q
(The pr) 108 574.67 T
(eceding expr) 139.92 574.67 T
(ession cr) 202.24 574.67 T
(eates a new instance of) 244.22 574.67 T
4 10 Q
(<time-of-day>) 358.18 574.67 T
1 11 Q
(, and stor) 436.18 574.67 T
(es) 481.46 574.67 T
-0.39 (that instance in the variable) 108 560.67 P
4 10 Q
-0.86 (*my-time-of-day*) 242.95 560.67 P
1 11 Q
-0.39 (. The value of the) 338.95 560.67 P
4 10 Q
-0.86 (total-seconds) 423.64 560.67 P
1 11 Q
-0.09 (slot of this instance is initialized to) 108 546.67 P
4 10 Q
-0.21 (120) 277.92 546.67 P
1 11 Q
-0.09 (. The assignment operator r) 295.92 546.67 P
-0.09 (eturns the new) 429.03 546.67 P
(value stor) 108 532.67 T
(ed; in the pr) 155.97 532.67 T
(eceding call, the new value is the newly cr) 214.58 532.67 T
(eated instance of) 419.21 532.67 T
4 10 Q
(<time-of-day>) 108 518.67 T
1 11 Q
(, which the listener displays as) 186 518.67 T
6 10 Q
({instance of <time-of-day>}) 337.35 518.67 T
1 11 Q
(.) 499.35 518.67 T
(W) 135 504.67 T
(e can use the getter to verify that the slot has an initial value:) 144.99 504.67 T
6 9 Q
(?) 108 484 T
4 F
(*my-time-of-day*.total-seconds;) 118.8 484 T
6 F
(120) 108 473 T
1 11 Q
(If you call) 108 452.67 T
4 10 Q
(make) 159.16 452.67 T
1 11 Q
( and pr) 183.16 452.67 T
(ovide a keywor) 218.04 452.67 T
(d that has not been declar) 293.28 452.67 T
(ed as a valid) 418.13 452.67 T
(keywor) 108 438.67 T
(d for the class, you get an err) 144.83 438.67 T
(or; for example,) 285.12 438.67 T
6 9 Q
(?) 108 418 T
4 F
( make\050<time-of-day>, seconds: 120\051;) 113.4 418 T
6 F
(ERROR: seconds: is not a valid keyword argument to make for {class <time-of-) 108 407 T
(day>}) 108 396 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Automatic storage-management note:) 141 355.67 T
1 F
( Dylan pr) 328.3 355.67 T
(ovides automatic) 374.29 355.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(storage management \050also called garbage collection\051. Thus, you) 141 341.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(do not need to deallocate memory explicitly) 141 327.67 T
(. When an object) 353.5 327.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.56 (becomes inaccessible, Dylan\325s automatic storage management will) 141 313.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 141 299.67 T
(ecycle the storage used by that object. In this section, ther) 145.15 299.67 T
(e ar) 422.85 299.67 T
(e) 440.52 299.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(two examples of objects that become inaccessible:) 141 285.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 150 271.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.09 (W) 168 271.67 P
-0.09 (e r) 177.99 271.67 P
-0.09 (ede\336ned the) 190.07 271.67 P
4 10 Q
-0.19 (<time-of-day>) 252.96 271.67 P
1 11 Q
-0.09 ( class. The storage used by) 330.96 271.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the old class de\336nition can be r) 168 257.67 T
(ecycled.) 318.33 257.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 150 243.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 168 243.67 T
(e stor) 177.99 243.67 T
(ed a new instance in) 204.41 243.67 T
4 10 Q
(*my-time-of-day*) 306.01 243.67 T
1 11 Q
(. The stor-) 402.01 243.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(age used by the instance pr) 168 229.67 T
(eviously stor) 300.04 229.67 T
(ed in that variable) 362.5 229.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(can be r) 168 215.67 T
(ecycled.) 205.79 215.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Although r) 141 201.67 T
(ede\336nition is not part of the Dylan language, most) 194.8 201.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Dylan development envir) 141 187.67 T
(onments support r) 265.73 187.67 T
(ede\336nition.) 355.87 187.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 368.88 135 180.13 2 L
V
0.25 H
0 Z
N
486 368.88 486 180.13 2 L
V
N
134.88 369 486.12 369 2 L
V
N
134.88 180 486.12 180 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "44" 58
%%Page: "45" 59
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.6 Methods for handling time) 404.62 677.67 T
2 F
(45) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(4.6  Methods f) 108 509 T
(or handling time) 189.79 509 T
1 11 Q
-0.36 (W) 108 488.67 P
-0.36 (e decided to r) 117.99 488.67 P
-0.36 (epr) 182.95 488.67 P
-0.36 (esent the time of day with a single slot named) 198.98 488.67 P
4 10 Q
-0.79 (total-seconds) 420.86 488.67 P
1 11 Q
-0.36 (.) 498.86 488.67 P
-0.22 (An alternate choice would be to give the class thr) 108 474.67 P
-0.22 (ee slots, named) 344.83 474.67 P
4 10 Q
-0.48 (hours) 421.44 474.67 P
1 11 Q
-0.22 (,) 451.44 474.67 P
4 10 Q
-0.48 (minutes) 456.72 474.67 P
1 11 Q
-0.22 (,) 498.72 474.67 P
(and) 108 460.67 T
4 10 Q
(seconds) 129.37 460.67 T
1 11 Q
(. People naturally think of time in terms of hours, minutes, and sec-) 171.37 460.67 T
-0.1 (onds. W) 108 446.67 P
-0.1 (e chose to stor) 147.18 446.67 P
-0.1 (e the total seconds instead, because we envisioned needing) 215.6 446.67 P
-0.37 (to operate on times, such as adding a time of day to a time of) 108 432.67 P
-0.37 (fset. For example, if it) 398.07 432.67 P
-0.11 (is 9:00 now) 108 418.67 P
-0.11 (, and a meeting is to be held 2.5 hours fr) 160.97 418.67 P
-0.11 (om now) 353.85 418.67 P
-0.11 (, then the meeting will) 392.78 418.67 P
(be held at 1) 108 404.67 T
(1:30. It is easier to operate on a single value, rather than on thr) 163.18 404.67 T
(ee val-) 464.72 404.67 T
(ues of hours, minutes, and seconds. On the other hand, it is convenient to see) 108 390.67 T
(times expr) 108 376.67 T
(essed as hours, minutes, and seconds. W) 158.89 376.67 T
(e can r) 355.13 376.67 T
(epr) 386.83 376.67 T
(esent the instances) 402.86 376.67 T
(with a single slot, and can pr) 108 362.67 T
(ovide methods that let users cr) 247.59 362.67 T
(eate and see) 396.85 362.67 T
4 10 Q
(<time-) 458.55 362.67 T
(of-day>) 108 348.67 T
1 11 Q
( instances as being hours, minutes, and seconds.) 150 348.67 T
3 13 Q
(4.6.1  Method f) 108 317.33 T
(or) 181.85 317.33 T
4 12 Q
(encode-total-seconds) 195.48 317.33 T
1 11 Q
-0.12 (W) 108 297.67 P
-0.12 (e can pr) 117.99 297.67 P
-0.12 (ovide a method that converts fr) 156.07 297.67 P
-0.12 (om hours, minutes, and seconds to total) 308.11 297.67 P
(seconds:) 108 283.67 T
4 9 Q
(define method encode-total-seconds) 108 263 T
5 F
(// 1) 481.83 263 T
4 F
(\050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 129.6 252 T
5 F
(// 2) 481.83 252 T
4 F
(=>) 113.4 241 T
(\050total-seconds :: <integer>\051) 129.6 241 T
5 F
(// 3) 481.83 241 T
4 F
(\050\050hours * 60\051 + minutes\051 * 60 + seconds;) 118.8 230 T
5 F
(// 4) 481.83 230 T
4 F
(end method encode-total-seconds;) 108 219 T
5 F
(// 5) 481.83 219 T
1 11 Q
(Line 2 contains the parameter list of the method) 108 198.67 T
4 10 Q
(encode-total-seconds) 343.16 198.67 T
1 11 Q
(. The) 463.16 198.67 T
(method has thr) 108 184.67 T
(ee r) 181.9 184.67 T
(equir) 199.33 184.67 T
(ed parameters, named) 224.74 184.67 T
4 10 Q
(hours) 336.14 184.67 T
1 11 Q
(,) 366.14 184.67 T
4 10 Q
(minutes) 371.64 184.67 T
1 11 Q
(, and) 413.64 184.67 T
4 10 Q
(seconds) 440.51 184.67 T
1 11 Q
(,) 482.51 184.67 T
(each of type) 108 170.67 T
4 10 Q
(<integer>) 169.56 170.67 T
1 11 Q
(. This method is invoked when) 223.56 170.67 T
4 10 Q
(encode-total-seconds) 376.55 170.67 T
1 11 Q
(is called with thr) 108 156.67 T
(ee integer ar) 189.39 156.67 T
(guments.) 249.26 156.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Comparison with Java:) 141 620.67 T
1 F
( Java r) 255.58 620.67 T
(ecognizes that manual memory) 286.1 620.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.25 (management can be the sour) 141 606.67 P
-0.25 (ce of pr) 279.3 606.67 P
-0.25 (ogram err) 314.88 606.67 P
-0.25 (ors and often can be) 362.81 606.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(exploited to br) 141 592.67 T
(each security measur) 211.86 592.67 T
(es. Like Dylan, Java has an) 314.04 592.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(automatic garbage collector that corr) 141 578.67 T
(ectly and ef) 319.38 578.67 T
(\336ciently r) 375.29 578.67 T
(ecovers) 421.5 578.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(unused objects in a pr) 141 564.67 T
(ogram \321 fr) 247.25 564.67 T
(eeing the pr) 303.24 564.67 T
(ogrammer of that) 361.01 564.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mundane but dif) 141 550.67 T
(\336cult chor) 222.83 550.67 T
(e.) 271.98 550.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 633.88 135 543.12 2 L
V
0.25 H
0 Z
N
486 633.88 486 543.12 2 L
V
N
134.88 634 486.12 634 2 L
V
N
134.88 543 486.12 543 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "45" 59
%%Page: "46" 60
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(46) 72 677.67 T
0 F
(Chapter 4) 91 677.67 T
(User-Defined Classes and Methods) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.13 (Line 3 contains the) 135 640.67 P
2 F
-0.13 (value declaration) 228.49 640.67 P
1 F
-0.13 (, which starts with the characters) 314.82 640.67 P
4 10 Q
-0.28 (=>) 476.71 640.67 P
1 11 Q
-0.13 (. It) 488.71 640.67 P
(is a list declaring the values r) 108 626.67 T
(eturned by the method. Each element of the list con-) 249.04 626.67 T
(tains a descriptive name of the r) 108 612.67 T
(eturn value and the type of the value \050if the type) 263.28 612.67 T
-0.22 (is omitted, it is) 108 598.67 P
4 10 Q
-0.47 (<object>) 181.48 598.67 P
1 11 Q
-0.22 (\051. In this case, ther) 229.48 598.67 P
-0.22 (e is one value r) 316.45 598.67 P
-0.22 (eturned, named) 388.36 598.67 P
4 10 Q
-0.47 (total-) 468 598.67 P
(seconds) 108 584.67 T
1 11 Q
(, which is of the type) 150 584.67 T
4 10 Q
(<integer>) 253.69 584.67 T
1 11 Q
(. The name of a r) 307.69 584.67 T
(eturn value is used) 388.8 584.67 T
(pur) 108 570.67 T
(ely for documentation purposes. Although methods ar) 125.39 570.67 T
(e not r) 390.86 570.67 T
(equir) 421.77 570.67 T
(ed to have) 447.18 570.67 T
(value declarations, ther) 108 556.67 T
(e ar) 221.75 556.67 T
(e advantages to supplying those declarations. When) 239.42 556.67 T
(you pr) 108 542.67 T
(ovide a value declaration for a method, the compiler signals an err) 140.26 542.67 T
(or if the) 462.72 542.67 T
-0.3 (method tries to r) 108 528.67 P
-0.3 (eturn a value of the wr) 187.84 528.67 P
-0.3 (ong type, can check r) 296.88 528.67 P
-0.3 (eceivers of the r) 398.01 528.67 P
-0.3 (esults) 473.54 528.67 P
-0.43 (of the method for corr) 108 514.67 P
-0.43 (ect type, and can usually pr) 213.29 514.67 P
-0.43 (oduce mor) 345.06 514.67 P
-0.43 (e ef) 396.75 514.67 P
-0.43 (\336cient code. These) 413.08 514.67 P
(advantages ar) 108 500.67 T
(e signi\336cant, so we use value declarations thr) 175.87 500.67 T
(oughout the r) 395.66 500.67 T
(est of) 461.95 500.67 T
-0.18 (this book. For mor) 108 486.67 P
-0.18 (e information about value declarations, see Section 12.2.4, page) 196.85 486.67 P
(175.) 108 472.67 T
(Line 4 is the only expr) 135 458.67 T
(ession in the body) 242.39 458.67 T
(. It uses arithmetic functions to con-) 329.41 458.67 T
(vert the hours, minutes, and seconds into total seconds. All methods r) 108 444.67 T
(eturn the) 447.08 444.67 T
(value of the expr) 108 430.67 T
(ession executed last in the body) 189.7 430.67 T
(. This method r) 342.48 430.67 T
(eturns the r) 416.33 430.67 T
(esult) 472.13 430.67 T
(of the arithmetic expr) 108 416.67 T
(ession in line 4.) 212.57 416.67 T
(In line 5, we could have simply used) 135 402.67 T
4 10 Q
(end;) 315.5 402.67 T
1 11 Q
(. W) 339.5 402.67 T
(e pr) 354.99 402.67 T
(ovided) 373.76 402.67 T
4 10 Q
(end method) 410.65 402.67 T
(decode-total-seconds;) 108 388.67 T
1 11 Q
( for documentation purposes. Thr) 234 388.67 T
(oughout the r) 397.77 388.67 T
(est of) 464.05 388.67 T
(this book, we pr) 108 374.67 T
(ovide the extra wor) 186.26 374.67 T
(ds after the) 280.89 374.67 T
4 10 Q
(end) 338.14 374.67 T
1 11 Q
( of a de\336nition.) 356.14 374.67 T
(W) 135 360.67 T
(e can call) 144.99 360.67 T
4 10 Q
(encode-total-seconds) 192.08 360.67 T
1 11 Q
( with ar) 312.08 360.67 T
(guments r) 349.59 360.67 T
(epr) 398.87 360.67 T
(esenting 8 hours,) 414.9 360.67 T
(30 minutes, and 59 seconds:) 108 346.67 T
6 9 Q
(?) 108 326 T
4 F
(encode-total-seconds\0508, 30, 59\051;) 118.8 326 T
6 F
(30659) 108 315 T
1 11 Q
(W) 108 294.67 T
(e \336nd it convenient to call) 117.99 294.67 T
4 10 Q
(encode-total-seconds) 246.34 294.67 T
1 11 Q
( to initialize the) 366.34 294.67 T
4 10 Q
(total-) 444.45 294.67 T
(seconds) 108 280.67 T
1 11 Q
( slot when we cr) 150 280.67 T
(eate an instance of) 229.18 280.67 T
4 10 Q
(<time-of-day>) 321.28 280.67 T
1 11 Q
(, or when we stor) 399.28 280.67 T
(e) 483.48 280.67 T
(a new value in that slot. Her) 108 266.67 T
(e, for example, we cr) 245.12 266.67 T
(eate a new instance:) 345.61 266.67 T
6 9 Q
(?) 108 246 T
4 F
( define variable *your-time-of-day*) 113.4 246 T
(= make\050<time-of-day>, total-seconds: encode-total-seconds\0508, 30, 59\051\051;) 129.6 235 T
1 11 Q
(W) 108 214.67 T
(e examine the value of the) 117.99 214.67 T
4 10 Q
(total-seconds) 247.79 214.67 T
1 11 Q
( slot:) 325.79 214.67 T
6 9 Q
(?) 108 194 T
4 F
(*your-time-of-day*.total-seconds;) 118.8 194 T
6 F
(30659) 108 183 T
1 11 Q
(The r) 108 162.67 T
(esult r) 133.31 162.67 T
(eminds us that it would be useful to convert in the other dir) 163.56 162.67 T
(ection as) 453.67 162.67 T
(well \321 fr) 108 148.67 T
(om total seconds to hours, minutes, and seconds.) 153.15 148.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "46" 60
%%Page: "47" 61
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.6 Methods for handling time) 404.62 677.67 T
2 F
(47) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(4.6.2  Method f) 108 639.33 T
(or) 181.85 639.33 T
4 12 Q
(decode-total-seconds) 195.48 639.33 T
1 11 Q
(W) 108 619.67 T
(e de\336ne) 117.99 619.67 T
4 10 Q
(decode-total-seconds) 159.07 619.67 T
1 11 Q
( to convert in the other dir) 279.07 619.67 T
(ection \321 fr) 406.41 619.67 T
(om total) 460.07 619.67 T
(seconds to hours, minutes, and seconds:) 108 605.67 T
4 9 Q
(define method decode-total-seconds) 108 585 T
5 F
(// 1) 481.83 585 T
4 F
(\050total-seconds :: <integer>\051) 129.6 574 T
5 F
(// 2) 481.83 574 T
4 F
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 113.4 563 T
5 F
(// 3) 481.83 563 T
4 F
(let\050total-minutes, seconds\051 = truncate/\050total-seconds, 60\051;) 118.8 552 T
5 F
(// 4) 481.83 552 T
4 F
(let\050hours, minutes\051 = truncate/\050total-minutes, 60\051;) 118.8 541 T
5 F
(// 5) 481.83 541 T
4 F
(values\050hours, minutes, seconds\051;) 118.8 530 T
5 F
(// 6) 481.83 530 T
4 F
(end method decode-total-seconds;) 108 519 T
5 F
(// 7) 481.83 519 T
1 11 Q
(W) 108 498.67 T
(e can use) 117.99 498.67 T
4 10 Q
(decode-total-seconds) 164.86 498.67 T
1 11 Q
( to see the value of the) 284.86 498.67 T
4 10 Q
(total-seconds) 395.9 498.67 T
1 11 Q
( slot:) 473.9 498.67 T
6 9 Q
(?) 108 478 T
4 F
(decode-total-seconds\050*your-time-of-day*.total-seconds\051;) 118.8 478 T
6 F
(8) 108 467 T
(30) 108 456 T
(59) 108 445 T
1 11 Q
(The value declaration on line 3 speci\336es that) 108 424.67 T
4 10 Q
(decode-total-seconds) 326.12 424.67 T
1 11 Q
( r) 446.12 424.67 T
(eturns) 453.02 424.67 T
(thr) 108 410.67 T
(ee separate values: the hours, minutes, and seconds. This method illustrates) 122.14 410.67 T
-0.22 (how to r) 108 396.67 P
-0.22 (eturn multiple values, and how to use) 148.38 396.67 P
4 10 Q
-0.47 (let) 334.36 396.67 P
1 11 Q
-0.22 ( to initialize multiple local vari-) 352.36 396.67 P
(ables. W) 108 382.67 T
(e describe these techniques in Sections 4.6.3 and 4.6.4.) 148.21 382.67 T
3 13 Q
(4.6.3  Multiple return v) 108 351.33 T
(alues) 220.37 351.33 T
1 11 Q
(The method for) 108 331.67 T
4 10 Q
(decode-total-seconds) 186.38 331.67 T
1 11 Q
( r) 306.38 331.67 T
(eturns thr) 313.27 331.67 T
(ee values: the hours, the min-) 361.06 331.67 T
(utes, and the seconds. T) 108 317.67 T
(o r) 222.87 317.67 T
(eturn the thr) 235.78 317.67 T
(ee values, the method uses the) 296.9 317.67 T
4 10 Q
(values) 447.61 317.67 T
1 11 Q
(function as the expr) 108 303.67 T
(ession executed last in the body) 204.15 303.67 T
(. The) 356.93 303.67 T
4 10 Q
(values) 383.59 303.67 T
1 11 Q
( function simply) 419.59 303.67 T
(r) 108 289.67 T
(eturns all its ar) 112.15 289.67 T
(guments as separate values. The ability to r) 184.3 289.67 T
(eturn multiple values) 394.11 289.67 T
(allows a natural symmetry between) 108 275.67 T
4 10 Q
(encode-total-seconds) 284.74 275.67 T
1 11 Q
( and) 404.74 275.67 T
4 10 Q
(decode-) 428.86 275.67 T
(total-seconds) 108 261.67 T
1 11 Q
(, as shown in T) 186 261.67 T
(able 4.1.) 257.9 261.67 T
1 2 Q
(:) 135 253.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(Method) 152.35 225.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(P) 274.3 225.67 T
(ar) 281.2 225.67 T
(ameter\050s\051) 290.86 225.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Retur) 412.82 225.67 T
(n v) 439.99 225.67 T
(alue\050s\051) 454.39 225.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(encode-total-seconds) 113.61 200.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(hours, minutes, seconds) 239.78 200.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds) 384.44 200.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(decode-total-seconds) 113.61 177.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds) 239.78 177.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(hours, minutes, seconds) 384.44 177.67 T
0 0 0 1 0 0 0 K
107.61 140.01 522.39 148 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 132.24 151.33 T
(ab) 137.54 151.33 T
(le 4.1) 149.12 151.33 T
8 F
(Symmetr) 179.7 151.33 T
(y of) 219.99 151.33 T
4 9 Q
(encode-total-seconds) 238.9 151.33 T
8 10 Q
( and) 346.89 151.33 T
4 9 Q
(decode-total-seconds) 369.14 151.33 T
8 10 Q
(.) 476.98 151.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
107.61 240.88 107.61 168.13 2 L
V
0.25 H
0 Z
N
522.39 240.88 522.39 168.13 2 L
V
N
107.49 241 522.51 241 2 L
V
N
107.49 214 522.51 214 2 L
V
N
107.49 168 522.51 168 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "47" 61
%%Page: "48" 62
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(48) 72 677.67 T
0 F
(Chapter 4) 91 677.67 T
(User-Defined Classes and Methods) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Lines 4 and 5 of the) 108 640.67 T
4 10 Q
(decode-total-seconds) 205.31 640.67 T
1 11 Q
( method contain calls to) 325.31 640.67 T
4 10 Q
(truncate/) 443.78 640.67 T
1 11 Q
(.) 497.78 640.67 T
(The) 108 626.67 T
4 10 Q
(truncate/) 129.16 626.67 T
1 11 Q
( function is a built-in Dylan function. It takes two ar) 183.16 626.67 T
(guments,) 434.88 626.67 T
-0.32 (divides the \336rst by the second, and r) 108 612.67 P
-0.32 (eturns two values: the r) 282.42 612.67 P
-0.32 (esult of the tr) 395.44 612.67 P
-0.32 (uncating) 458.85 612.67 P
(division, and the r) 108 598.67 T
(emainder) 196.64 598.67 T
(.) 242.24 598.67 T
3 13 Q
(4.6.4  Use of) 108 404.33 T
4 12 Q
(let) 173.18 404.33 T
3 13 Q
( to dec) 194.78 404.33 T
(lare local v) 228.95 404.33 T
(ariab) 283.87 404.33 T
(les) 309.26 404.33 T
1 11 Q
(When a function r) 108 384.67 T
(eturns multiple values, you can use) 195.75 384.67 T
4 10 Q
(let) 370.9 384.67 T
1 11 Q
( to stor) 388.9 384.67 T
(e each r) 422.39 384.67 T
(eturned) 459.37 384.67 T
-0.12 (value in a local variable, as shown in lines 2 and 3 of the) 108 370.67 P
4 10 Q
-0.25 (decode-total-seconds) 381.36 370.67 P
1 11 Q
(method in Section 4.6.2. On line 2, we use) 108 356.67 T
4 10 Q
(let) 312.3 356.67 T
1 11 Q
( to declar) 330.3 356.67 T
(e two local variables,) 375.12 356.67 T
(named) 108 342.67 T
4 10 Q
(total-minutes) 144.35 342.67 T
1 11 Q
( and) 222.35 342.67 T
4 10 Q
(seconds) 246.48 342.67 T
1 11 Q
(, and to initialize their values to the two val-) 288.48 342.67 T
(ues r) 108 328.67 T
(eturned by the) 131.46 328.67 T
4 10 Q
(truncate/) 205.39 328.67 T
1 11 Q
( function. Similarly) 259.39 328.67 T
(, on line 3, we use) 351.45 328.67 T
4 10 Q
(let) 440.44 328.67 T
1 11 Q
( to) 458.44 328.67 T
(declar) 108 314.67 T
(e the local variables) 137.72 314.67 T
4 10 Q
(hours) 236.02 314.67 T
1 11 Q
( and) 266.02 314.67 T
4 10 Q
(minutes) 290.14 314.67 T
1 11 Q
(.) 332.14 314.67 T
-0.09 (The local variables declar) 135 300.67 P
-0.09 (ed by) 257.89 300.67 P
4 10 Q
-0.19 (let) 287.41 300.67 P
1 11 Q
-0.09 ( can be used within the method until the) 305.41 300.67 P
(method\325s) 108 286.67 T
4 10 Q
(end) 156.17 286.67 T
1 11 Q
(. Although ther) 174.17 286.67 T
(e is no) 248.73 286.67 T
4 10 Q
(begin) 282.52 286.67 T
1 11 Q
( to de\336ne explicitly the beginning of a) 312.52 286.67 T
(body for local variables,) 108 272.67 T
4 10 Q
(define method) 227.46 272.67 T
1 11 Q
( begins a body) 305.46 272.67 T
(, and its) 374.65 272.67 T
4 10 Q
(end) 415.72 272.67 T
1 11 Q
( \336nishes that) 433.72 272.67 T
-0.4 (body) 108 258.67 P
-0.4 (. Local variables ar) 131.71 258.67 P
-0.4 (e scoped within the smallest body that surr) 221.44 258.67 P
-0.4 (ounds them, so) 428.13 258.67 P
(you can use) 108 244.67 T
4 10 Q
(begin) 168.36 244.67 T
1 11 Q
( and) 198.36 244.67 T
4 10 Q
(end) 222.48 244.67 T
1 11 Q
( within a method to de\336ne a smaller body for local) 240.48 244.67 T
(variables, although doing so is usually not necessary) 108 230.67 T
(.) 362.64 230.67 T
3 13 Q
(4.6.5  Second method f) 108 199.33 T
(or) 223.92 199.33 T
4 12 Q
(decode-total-seconds) 237.54 199.33 T
1 11 Q
(The) 108 179.67 T
4 10 Q
(decode-total-seconds) 129.16 179.67 T
1 11 Q
( method is called as follows:) 249.16 179.67 T
6 9 Q
(?) 108 159 T
4 F
(decode-total-seconds\050*your-time-of-day*.total-seconds\051;) 118.8 159 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Comparison with C:) 141 564.67 T
1 F
( In C, / on integers pr) 242.12 564.67 T
(oduces a tr) 347.96 564.67 T
(uncated r) 400.98 564.67 T
(esult.) 446.88 564.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(In Dylan, / on integers is implementation de\336ned, and is not r) 141 550.67 T
(ecom-) 443.71 550.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mended for portable code. The Dylan functions named) 141 536.67 T
4 10 Q
(floor) 410.53 536.67 T
1 11 Q
(,) 439.72 536.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(ceiling) 141 522.67 T
1 11 Q
(,) 183 522.67 T
4 10 Q
(round) 188.5 522.67 T
1 11 Q
(, and) 218.5 522.67 T
4 10 Q
(truncate) 245.37 522.67 T
1 11 Q
( convert a rational or \337oating-point) 293.37 522.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 141 508.67 T
(esult to an integer with the appr) 145.15 508.67 T
(opriate r) 301.17 508.67 T
(ounding. The Dylan func-) 342.59 508.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tions named) 141 494.67 T
4 10 Q
(floor/) 203.96 494.67 T
1 11 Q
(,) 239.96 494.67 T
4 10 Q
(ceiling/) 245.46 494.67 T
1 11 Q
(,) 293.46 494.67 T
4 10 Q
(round/) 298.96 494.67 T
1 11 Q
(, and) 334.96 494.67 T
4 10 Q
(truncate/) 361.84 494.67 T
1 11 Q
( take two) 415.84 494.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 141 480.67 T
(guments. Those generic functions divide the \336rst ar) 150.65 480.67 T
(gument by the) 400.52 480.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(second ar) 141 466.67 T
(gument, and r) 187.34 466.67 T
(eturn two values: the r) 256.08 466.67 T
(ounded or tr) 365.72 466.67 T
(uncated) 427.17 466.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 141 452.67 T
(esult, and the r) 145.15 452.67 T
(emainder) 217.53 452.67 T
(.) 263.13 452.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 577.88 135 445.12 2 L
V
0.25 H
0 Z
N
486 577.88 486 445.12 2 L
V
N
134.88 578 486.12 578 2 L
V
N
134.88 445 486.12 445 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "48" 62
%%Page: "49" 63
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.6 Methods for handling time) 404.62 677.67 T
2 F
(49) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(If we envision calling) 108 640.67 T
4 10 Q
(decode-total-seconds) 214.68 640.67 T
1 11 Q
( fr) 334.68 640.67 T
(equently to see the hours, min-) 345.24 640.67 T
-0.19 (utes, and seconds stor) 108 626.67 P
-0.19 (ed in a) 214.21 626.67 P
4 10 Q
-0.42 (<time-of-day>) 248.98 626.67 P
1 11 Q
-0.19 ( instance, we can make it possible to) 326.98 626.67 P
(decode) 108 612.67 T
4 10 Q
(<time-of-day>) 145.62 612.67 T
1 11 Q
( instances, as well as integers. For example, we can make) 223.62 612.67 T
(it possible to make this call:) 108 598.67 T
6 9 Q
(?) 108 578 T
4 F
(decode-total-seconds\050*your-time-of-day*\051;) 118.8 578 T
1 11 Q
(W) 108 551.67 T
(e can implement this behavior easily) 117.99 551.67 T
(, by de\336ning another method for) 294.36 551.67 T
4 10 Q
(decode-) 455.8 551.67 T
(total-seconds) 108 537.67 T
1 11 Q
(, which takes a) 186 537.67 T
4 10 Q
(<time-of-day>) 260.45 537.67 T
1 11 Q
( instance as its ar) 338.45 537.67 T
(gument:) 420.62 537.67 T
4 9 Q
(define method decode-total-seconds) 108 517 T
(\050time :: <time-of-day>\051) 129.6 506 T
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 113.4 495 T
(decode-total-seconds\050time.total-seconds\051;) 118.8 484 T
(end method decode-total-seconds;\051) 108 473 T
1 11 Q
(Figur) 108 446.67 T
(e 4.1 shows the two methods for the) 134.21 446.67 T
4 10 Q
(decode-total-seconds) 311.8 446.67 T
1 11 Q
( generic) 431.8 446.67 T
(function.) 108 432.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 145.15 504 153.14 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 4.1) 125.83 156.48 T
8 F
(The) 178.63 156.48 T
4 F
(decode-total-seconds) 198.65 156.48 T
8 F
( gener) 318.64 156.48 T
(ic function and its methods) 347.14 156.48 T
(.) 465.39 156.48 T
0 0 0 1 0 0 0 K
108 169.14 504 412 C
108 173.14 504 410 C
0 15 14 412 236 397 222 107.5 182 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f4-1.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f4-1.eps)%%CreationDate: (6/5/96) (1:04 PM)%%BoundingBox: 15 14 412 236%%HiResBoundingBox: 16.1749 14.2584 410.9916 236.325%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Courier-Oblique%%+ Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 193.3333 -5.3333 193.3333 -5.3333%AI3_TileBox: -81.6667 -370.3333 470.3333 359.6667%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -10.6667 342.6667 2 1020 726 18 1 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: Courier-Oblique%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique[/_Courier-Oblique/Courier-Oblique 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 4 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Artwork) Ln0 A1 Ap0 O0.9 g0 R0 G800 Ar0 J 0 j 0.65 w 4 M []0 d%AI3_Note:0 D410.6666 14.5834 m410.6666 236 L16.4999 236 L16.4999 14.5834 L410.6666 14.5834 Lb1 g1 w314.8333 208.3334 m315.0833 225.3334 L112.4166 225.3334 L112.1666 208.3334 L314.8333 208.3334 Lf0 R0 G0.65 w400.6666 107.6667 m400.6666 196.3334 L26.2499 196.3334 L26.2499 107.6667 L400.6666 107.6667 Lb399.3333 31.3334 m399.3333 97.0834 L26.2499 97.0834 L26.2499 31.3334 L399.3333 31.3334 Lb0 To1 0 0 1 213.9999 213.8334 0 TpTP-96.101 0 Td0 Tr0 g1 w/_Helvetica 11 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq11 0 Tl0 Tc0 Tw(Gener) Tx 0 -60 Tk (ic funct) Tx 0 -40 Tk (ion ) Tx /_Courier-Bold 9 Tf(decode-total-seconds) Tx (\r) TX TO0 To1 0 0 1 31.2499 184.3334 0 TpTP0 Tr/_Courier-Oblique 9 Tf0 Ta10 0 Tl(// Method on <integer>\r) Tx T*/_Courier-Bold 9 Tf(define method decode-total-seconds\r) Tx T*(    \(total-seconds :: <integer>\)\r) Tx T*( => \(hours :: <integer>, minutes :: <integer>, seconds :: <integer>\)\r) Tx T*(  let\(total-minutes, seconds\) = truncate/\(total-seconds, 60\);\r) Tx T*(  let\(hours, minutes\) = truncate/\(total-minutes, 60\);\r) Tx T*(  values\(hours, minutes, seconds\);\r) Tx T*(end method decode-total-seconds;\r) Tx T*(\r) Tx TO0 To1 0 0 1 30.4999 86.3334 0 TpTP0 Tr/_Courier-Oblique 9 Tf(// Method on <time-of-day>\r) Tx T*/_Courier-Bold 9 Tf(define method decode-total-seconds\r) Tx T*(    \(time :: <time-of-day>\)\r) Tx T*( => \(hours :: <integer>, minutes :: <integer>, seconds :: <integer>\)\r) Tx T*(  decode-total-seconds\(time.total-seconds\);\r) Tx T*(end method decode-total-seconds;) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 169.14 504 412 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "49" 63
%%Page: "50" 64
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(50) 72 677.67 T
0 F
(Chapter 4) 91 677.67 T
(User-Defined Classes and Methods) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Looking at Figur) 108 640.67 T
(e 4.1, we analyze what happens in this call:) 189.37 640.67 T
6 9 Q
(?) 108 620 T
4 F
(decode-total-seconds\050*your-time-of-day*\051;) 118.8 620 T
2 11 Q
(1.) 117 599.67 T
1 F
(The ar) 135 599.67 T
(gument is an instance of) 165.81 599.67 T
4 10 Q
(<time-of-day>) 286.62 599.67 T
1 11 Q
(, so the method on) 364.62 599.67 T
4 10 Q
(<time-) 457.16 599.67 T
(of-day>) 135 585.67 T
1 11 Q
( is called.) 177 585.67 T
2 F
(2.) 117 565.67 T
1 F
(The body of the method on) 135 565.67 T
4 10 Q
(<time-of-day>) 269.87 565.67 T
1 11 Q
( calls) 347.87 565.67 T
4 10 Q
(decode-total-seconds) 374.82 565.67 T
1 11 Q
(on an instance of) 135 551.67 T
4 10 Q
(<integer>) 219.89 551.67 T
1 11 Q
(, the value of the) 273.89 551.67 T
4 10 Q
(total-seconds) 357.39 551.67 T
1 11 Q
( slot of the) 435.39 551.67 T
4 10 Q
(<time-of-day>) 135 537.67 T
1 11 Q
( instance. In this call, the ar) 213 537.67 T
(gument is an integer) 344.56 537.67 T
(, so the) 443.67 537.67 T
(method on) 135 523.67 T
4 10 Q
(<integer>) 190.6 523.67 T
1 11 Q
( is called.) 244.6 523.67 T
2 F
(3.) 117 503.67 T
1 F
(The method on) 135 503.67 T
4 10 Q
(<integer>) 211.77 503.67 T
1 11 Q
( r) 265.77 503.67 T
(eturns thr) 272.67 503.67 T
(ee values to its caller \321 the method) 320.45 503.67 T
(on) 135 489.67 T
4 10 Q
(<time-of-day>) 150.16 489.67 T
1 11 Q
(. The method on) 228.16 489.67 T
4 10 Q
(<time-of-day>) 310.43 489.67 T
1 11 Q
( r) 388.43 489.67 T
(eturns those thr) 395.32 489.67 T
(ee val-) 471.79 489.67 T
(ues.) 135 475.67 T
-0.13 (The purpose of the method on) 108 455.67 P
4 10 Q
-0.28 (<time-of-day>) 257.32 455.67 P
1 11 Q
-0.13 ( is simply to allow a dif) 335.32 455.67 P
-0.13 (fer) 447.98 455.67 P
-0.13 (ent kind) 461.06 455.67 P
-0.28 (of ar) 108 441.67 P
-0.28 (gument to be used. The method extracts the integer fr) 129.79 441.67 P
-0.28 (om the) 387.61 441.67 P
4 10 Q
-0.61 (<time-of-day>) 423.53 441.67 P
1 11 Q
(instance, and calls) 108 427.67 T
4 10 Q
(decode-total-seconds) 198.98 427.67 T
1 11 Q
( with that integer) 318.98 427.67 T
(.) 402.04 427.67 T
3 13 Q
(4.6.6  Method f) 108 396.33 T
(or) 181.85 396.33 T
4 12 Q
(say-time-of-day) 195.48 396.33 T
1 11 Q
-0.41 (W) 108 376.67 P
-0.41 (e can pr) 117.99 376.67 P
-0.41 (ovide a way to ask an instance of) 155.49 376.67 P
4 10 Q
-0.89 (<time-of-day>) 315.28 376.67 P
1 11 Q
-0.41 ( to describe the time in) 393.28 376.67 P
(a conventional format, such as 8:30. For the application that we ar) 108 362.67 T
(e planning,) 426.73 362.67 T
-0.22 (ther) 108 348.67 P
-0.22 (e is no need to view the seconds. W) 127.4 348.67 P
-0.22 (e want the method to print the description) 296.95 348.67 P
(in a window on the scr) 108 334.67 T
(een. W) 218.89 334.67 T
(e de\336ne a method named) 251.32 334.67 T
4 10 Q
(say-time-of-day) 377.46 334.67 T
1 11 Q
(:) 467.46 334.67 T
4 9 Q
(define method say-time-of-day \050time :: <time-of-day>\051 => \050\051) 108 314 T
5 F
(// 1) 481.83 314 T
4 F
(let\050hours, minutes\051 = decode-total-seconds\050time\051;) 118.8 303 T
5 F
(// 2) 481.83 303 T
4 F
(format-out) 118.8 292 T
5 F
(// 3) 481.83 292 T
4 F
(\050"%d:%s%d", hours, if \050minutes < 10\051 "0" else "" end, minutes\051;) 129.6 281 T
5 F
(// 4) 481.83 281 T
4 F
(end method say-time-of-day;) 108 270 T
5 F
(// 5) 481.83 270 T
1 11 Q
-0.01 (On line 1, we pr) 108 249.67 P
-0.01 (ovide an empty value declaration, which means that this method) 185.54 249.67 P
(r) 108 235.67 T
(eturns no values.) 112.15 235.67 T
(On line 2, we use) 135 221.67 T
4 10 Q
(let) 221.13 221.67 T
1 11 Q
( to initialize two local variables to the \336rst and second) 239.13 221.67 T
(values r) 108 207.67 T
(eturned by) 146.38 207.67 T
4 10 Q
(decode-total-seconds) 202.3 207.67 T
1 11 Q
(. Remember that) 322.3 207.67 T
4 10 Q
(decode-total-) 405.39 207.67 T
(seconds) 108 193.67 T
1 11 Q
( r) 150 193.67 T
(eturns thr) 156.9 193.67 T
(ee values \050the thir) 204.68 193.67 T
(d value is the seconds\051. For the application) 291.21 193.67 T
(that we ar) 108 179.67 T
(e planning, the) 156.66 179.67 T
4 10 Q
(say-time-of-day) 232.02 179.67 T
1 11 Q
( method does not need to show the) 322.02 179.67 T
(seconds, so we do not use the thir) 108 165.67 T
(d value. It is not necessary to r) 271.6 165.67 T
(eceive the thir) 419.15 165.67 T
(d) 487.35 165.67 T
(value of) 108 151.67 T
4 10 Q
(decode-total-seconds) 149.99 151.67 T
1 11 Q
(; her) 269.99 151.67 T
(e we do not pr) 291.3 151.67 T
(ovide a local variable to) 361.5 151.67 T
(r) 108 137.67 T
(eceive the thir) 112.15 137.67 T
(d value, so that value is simply ignor) 180.35 137.67 T
(ed.) 359.69 137.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "50" 64
%%Page: "51" 65
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.7 Summary) 468.74 677.67 T
2 F
(51) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(On line 4, we use) 135 640.67 T
4 10 Q
(if) 221.13 640.67 T
1 11 Q
( to print a leading 0 for the minutes when ther) 233.13 640.67 T
(e ar) 457.17 640.67 T
(e) 474.83 640.67 T
(fewer than 10 minutes, such as) 108 626.67 T
4 10 Q
(2:05) 260.08 626.67 T
1 11 Q
(.) 284.08 626.67 T
(W) 108 449.67 T
(e can call) 117.99 449.67 T
4 10 Q
(say-time-of-day) 165.08 449.67 T
1 11 Q
(:) 255.08 449.67 T
6 9 Q
(?) 108 429 T
4 F
(say-time-of-day\050*your-time-of-day*\051;) 118.8 429 T
6 F
(8:30) 108 418 T
(?) 108 399 T
4 F
(say-time-of-day\050*my-time-of-day*\051;) 118.8 399 T
6 F
(0:02) 108 388 T
1 11 Q
-0.2 (The listener displays the output \050printed by) 108 367.67 P
4 10 Q
-0.43 (format-out) 321.2 367.67 P
1 11 Q
-0.2 (\051, but displays no values,) 381.2 367.67 P
(because) 108 353.67 T
4 10 Q
(say-time-of-day) 149.05 353.67 T
1 11 Q
( does not r) 239.05 353.67 T
(eturn any values.) 290.1 353.67 T
3 15 Q
(4.7  Sum) 108 314 T
(mar) 158.6 314 T
(y) 181.27 314 T
1 11 Q
(In this chapter) 108 293.67 T
(, we cover) 177.24 293.67 T
(ed the following:) 226.46 293.67 T
(\245) 117 273.67 T
(W) 135 273.67 T
(e de\336ned a class \050with) 144.99 273.67 T
4 10 Q
(define class) 255.48 273.67 T
1 11 Q
(\051.) 327.48 273.67 T
(\245) 117 253.67 T
(W) 135 253.67 T
(e cr) 144.99 253.67 T
(eated an instance \050with) 162.04 253.67 T
4 10 Q
(make) 277.22 253.67 T
1 11 Q
(\051.) 301.22 253.67 T
(\245) 117 233.67 T
(W) 135 233.67 T
(e r) 144.99 233.67 T
(ead the value of a slot by calling a getter) 157.15 233.67 T
(.) 351.66 233.67 T
(\245) 117 213.67 T
(W) 135 213.67 T
(e set the value of a slot by using) 144.99 213.67 T
4 10 Q
(:=) 302.44 213.67 T
1 11 Q
(, the assignment operator) 314.44 213.67 T
(.) 437.07 213.67 T
(\245) 117 193.67 T
(W) 135 193.67 T
(e de\336ned a method that r) 144.99 193.67 T
(eturns multiple values \050with) 267.46 193.67 T
4 10 Q
(values) 408.28 193.67 T
1 11 Q
(\051, and) 444.28 193.67 T
(showed how to initialize multiple local variables \050with) 135 179.67 T
4 10 Q
(let) 402.88 179.67 T
1 11 Q
(\051.) 420.88 179.67 T
(\245) 117 159.67 T
(W) 135 159.67 T
(e showed the syntax of some commonly used elements of Dylan; see) 144.99 159.67 T
(T) 135 145.67 T
(able 4.2.) 140.73 145.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Comparison to C:) 141 592.67 T
1 F
( In C,) 228.69 592.67 T
4 10 Q
(if) 257.6 592.67 T
1 11 Q
( does not r) 269.6 592.67 T
(eturn a value. In Dylan,) 320.65 592.67 T
4 10 Q
(if) 438.3 592.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(r) 141 578.67 T
(eturns the value of the body that is selected, if any is.) 145.15 578.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.15 (Note on) 141 545.67 P
4 10 Q
-0.32 (format-out) 183.48 545.67 P
2 11 Q
-0.15 (:) 243.48 545.67 P
1 F
-0.15 ( W) 246.23 545.67 P
-0.15 (e have purposely used a limited subset of) 258.82 545.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the) 141 531.67 T
4 10 Q
(format-out) 159.01 531.67 T
1 11 Q
( function\325s featur) 219.01 531.67 T
(es to allow our examples to r) 301.8 531.67 T
(un) 441.65 531.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(on as many Dylan implementations as possible. The printing of) 141 517.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(times could be done much mor) 141 503.67 T
(e elegantly if we used the full) 291.88 503.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(power of the) 141 489.67 T
4 10 Q
(format-out) 205.58 489.67 T
1 11 Q
( function.) 265.58 489.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 605.88 135 571.12 2 L
V
0.25 H
0 Z
N
486 605.88 486 571.12 2 L
V
N
134.88 606 486.12 606 2 L
V
N
134.88 571 486.12 571 2 L
V
N
135 558.88 135 482.12 2 L
V
N
486 558.88 486 482.12 2 L
V
N
134.88 559 486.12 559 2 L
V
N
134.88 482 486.12 482 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "51" 65
%%Page: "52" 66
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(52) 72 677.67 T
0 F
(Chapter 4) 91 677.67 T
(User-Defined Classes and Methods) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
0 X
(Dylan element) 171.46 618.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Syntax e) 350.66 618.67 T
(xample) 393.13 618.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(calling a getter) 137.99 593.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(*my-time-of-day*.total-seconds;) 287.22 595 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(calling a setter) 137.99 570.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
-0.21 (*my-time-of-day*.total-seconds := 180;) 287.22 572 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(keywor) 137.99 547.67 T
(d) 174.82 547.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(total-seconds:) 287.22 549 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(single-line comment) 137.99 524.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(// Text of comment) 287.22 526 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(multiline comment) 137.99 501.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(/* Text of comment that spans more) 287.22 503 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(than one line */) 287.22 492 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(value declaration) 137.99 469.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(=> \050total-seconds :: <integer>\051) 287.22 471 T
0 0 0 1 0 0 0 K
108 432.01 522 440 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 224.26 443.33 T
(ab) 229.57 443.33 T
(le 4.2) 241.15 443.33 T
8 F
(Syntax of Dylan elements) 271.73 443.33 T
(.) 384.95 443.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
131.99 633.88 131.99 460.12 2 L
V
0.25 H
0 Z
N
498.01 633.88 498.01 460.12 2 L
V
N
131.86 634 498.14 634 2 L
V
N
131.86 607 498.14 607 2 L
V
N
131.86 460 498.14 460 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "52" 66
%%Page: "53" 67
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(53) 301.25 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(5) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(5) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Class Inheritance) 109 566.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
(In this chapter) 108 424.67 T
(, we continue to develop the time library by de\336ning another kind) 177.24 424.67 T
(of time to r) 108 410.67 T
(epr) 161.43 410.67 T
(esent time of) 177.45 410.67 T
(fsets, such as 2 hours ago, and 30 minutes fr) 239.38 410.67 T
(om now) 452.3 410.67 T
(.) 491.34 410.67 T
(W) 108 396.67 T
(e \336nd an opportunity to use inheritance to good advantage, so we r) 117.99 396.67 T
(ede\336ne) 444.92 396.67 T
-0.36 (some classes and a method to take advantage of inheritance. W) 108 382.67 P
-0.36 (e also show how to) 409.98 382.67 P
(de\336ne a generic function explicitly) 108 368.67 T
(.) 274.8 368.67 T
3 15 Q
(5.1  The) 108 329 T
4 14 Q
(<time-offset>) 157.23 329 T
3 15 Q
( c) 266.43 329 T
(lass and methods) 276.46 329 T
1 11 Q
(In this section, we de\336ne a class to r) 108 308.67 T
(epr) 281.64 308.67 T
(esent time of) 297.66 308.67 T
(fsets, and a method that) 359.59 308.67 T
(describes a time of) 108 294.67 T
(fset. W) 198.09 294.67 T
(e start by de\336ning the) 230.76 294.67 T
4 10 Q
(<time-offset>) 339.68 294.67 T
1 11 Q
( class:) 417.68 294.67 T
5 9 Q
(// A relative time between -24:00 and +24:00) 108 274 T
4 F
(define class <time-offset> \050<object>\051) 108 263 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 118.8 252 T
(end class <time-offset>;) 108 241 T
3 13 Q
(5.1.1  Reasons f) 108 211.33 T
(or de\336ning tw) 188.39 211.33 T
(o similar c) 258.08 211.33 T
(lasses) 310.63 211.33 T
1 11 Q
-0.29 (The) 108 191.67 P
4 10 Q
-0.63 (<time-offset>) 128.88 191.67 P
1 11 Q
-0.29 ( class is similar to the) 206.88 191.67 P
4 10 Q
-0.63 (<time-of-day>) 311.1 191.67 P
1 11 Q
-0.29 ( class. They both de\336ne) 389.1 191.67 P
(a) 108 177.67 T
4 10 Q
(total-seconds) 116.25 177.67 T
1 11 Q
( slot. Why do we need to have two classes that ar) 194.25 177.67 T
(e so similar?) 432.37 177.67 T
(\245) 117 157.67 T
(A) 135 157.67 T
4 10 Q
(<time-of-day>) 146.31 157.67 T
1 11 Q
( is conceptually dif) 224.31 157.67 T
(fer) 316.1 157.67 T
(ent fr) 329.18 157.67 T
(om a) 355 157.67 T
4 10 Q
(<time-offset>) 381.72 157.67 T
1 11 Q
(. If the) 459.72 157.67 T
4 10 Q
(total-seconds) 135 143.67 T
1 11 Q
( slot of a) 213 143.67 T
4 10 Q
(<time-of-day>) 256.63 143.67 T
1 11 Q
( is) 334.63 143.67 T
4 10 Q
(180) 347.99 143.67 T
1 11 Q
(, that means the time of day) 365.99 143.67 T
(at 0:03 \050that is, 3 minutes past midnight\051. If the) 135 129.67 T
4 10 Q
(total-seconds) 363.9 129.67 T
1 11 Q
( slot of a) 441.9 129.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "53" 67
%%Page: "54" 68
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(54) 72 677.67 T
0 F
(Chapter 5) 91 677.67 T
(Class Inheritance) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 10 Q
0 X
(<time-offset>) 135 640.67 T
1 11 Q
( is) 213 640.67 T
4 10 Q
(180) 226.37 640.67 T
1 11 Q
(, that means 3 minutes in the futur) 244.37 640.67 T
(e. If you ask what) 411.48 640.67 T
(time it is, the answer is a) 135 626.67 T
4 10 Q
(<time-of-day>) 257.4 626.67 T
1 11 Q
(. If you ask how long it takes to) 335.4 626.67 T
(wash the dog, the answer is a) 135 612.67 T
4 10 Q
(<time-offset>) 280.82 612.67 T
1 11 Q
(.) 358.82 612.67 T
(\245) 117 592.67 T
-0.18 (A) 135 592.67 P
4 10 Q
-0.4 (<time-offset>) 146.13 592.67 P
1 11 Q
-0.18 ( can r) 224.13 592.67 P
-0.18 (epr) 250.2 592.67 P
-0.18 (esent time in the past by having a negative value) 266.22 592.67 P
(of) 135 578.67 T
4 10 Q
(total-seconds) 147.42 578.67 T
1 11 Q
(. A) 225.42 578.67 T
4 10 Q
(<time-of-day>) 242.23 578.67 T
1 11 Q
(, in contrast, should not have a nega-) 320.23 578.67 T
(tive value of) 135 564.67 T
4 10 Q
(total-seconds) 198.01 564.67 T
1 11 Q
(. Later in this book, we pr) 276.01 564.67 T
(ovide methods that) 400.3 564.67 T
(guarantee that the) 135 550.67 T
4 10 Q
(total-seconds) 226.2 550.67 T
1 11 Q
( slot of) 304.2 550.67 T
4 10 Q
(<time-of-day>) 339.58 550.67 T
1 11 Q
( instances is not) 417.58 550.67 T
(negative; see Section 10.2.2, page 120, and Section 10.3, page 123.) 135 536.67 T
(\245) 117 516.67 T
(W) 135 516.67 T
(e need dif) 144.99 516.67 T
(fer) 192.8 516.67 T
(ent methods for describing instances of) 205.88 516.67 T
4 10 Q
(<time-offset>) 399.14 516.67 T
1 11 Q
( and) 477.14 516.67 T
(instances of) 135 502.67 T
4 10 Q
(<time-of-day>) 194.74 502.67 T
1 11 Q
(. The) 272.74 502.67 T
4 10 Q
(<time-of-day>) 299.4 502.67 T
1 11 Q
( method prints) 377.4 502.67 T
4 10 Q
(8:30) 452.16 502.67 T
1 11 Q
(, and) 476.16 502.67 T
(the) 135 488.67 T
4 10 Q
(<time-offset>) 153.01 488.67 T
1 11 Q
( method should print) 231.01 488.67 T
4 10 Q
(minus 8:30) 337.48 488.67 T
1 11 Q
( or) 397.48 488.67 T
4 10 Q
(plus 8:30) 413.33 488.67 T
1 11 Q
(.) 467.33 488.67 T
(\245) 117 468.67 T
(Eventually) 135 468.67 T
(, we will need to be able to add a) 186.62 468.67 T
4 10 Q
(<time-of-day>) 348.79 468.67 T
1 11 Q
( to a) 426.79 468.67 T
4 10 Q
(<time-) 450.13 468.67 T
(offset>) 135 454.67 T
1 11 Q
(. For example, we can add the) 177 454.67 T
4 10 Q
(<time-of-day>) 324.88 454.67 T
1 11 Q
( 9:03 to the) 402.88 454.67 T
4 10 Q
(<time-) 457.98 454.67 T
(offset>) 135 440.67 T
1 11 Q
( 2:50 and get the) 177 440.67 T
4 10 Q
(<time-of-day>) 258.85 440.67 T
1 11 Q
( 1) 336.85 440.67 T
(1:53. W) 344.5 440.67 T
(e will also need to add) 379.23 440.67 T
(two) 135 426.67 T
4 10 Q
(<time-offset>) 156.52 426.67 T
1 11 Q
( instances. For example, 2 minutes plus 8 minutes is) 234.52 426.67 T
(equal to 10 minutes. But we cannot add two) 135 412.67 T
4 10 Q
(<time-of-day>) 351.19 412.67 T
1 11 Q
( instances,) 429.19 412.67 T
(because it does not make sense to add thr) 135 398.67 T
(ee o\325clock to four o\325clock.) 336.28 398.67 T
3 13 Q
(5.1.2  Creation of instances of) 108 367.33 T
4 12 Q
(<time-offset>) 262.04 367.33 T
1 11 Q
(W) 108 347.67 T
(e can cr) 117.99 347.67 T
(eate an instance of) 154.57 347.67 T
4 10 Q
(<time-offset>) 246.68 347.67 T
1 11 Q
( r) 324.68 347.67 T
(epr) 331.57 347.67 T
(esenting 15:20:10 in the futur) 347.6 347.67 T
(e:) 487.53 347.67 T
6 9 Q
(?) 108 327 T
4 F
( define variable *my-time-offset* :: <time-offset>) 113.4 327 T
(= make\050<time-offset>, total-seconds: encode-total-seconds\05015, 20, 10\051\051;) 129.6 316 T
1 11 Q
(W) 108 295.67 T
(e can cr) 117.99 295.67 T
(eate an instance of) 154.57 295.67 T
4 10 Q
(<time-offset>) 246.68 295.67 T
1 11 Q
( r) 324.68 295.67 T
(epr) 331.57 295.67 T
(esenting 6:45:30 in the past, by) 347.6 295.67 T
(using the unary minus function,) 108 281.67 T
4 10 Q
(-) 267.16 281.67 T
1 11 Q
(, which r) 273.16 281.67 T
(eturns the negative of the value that) 315.62 281.67 T
(follows it:) 108 267.67 T
6 9 Q
(?) 108 247 T
4 F
( define variable *your-time-offset* :: <time-offset>) 113.4 247 T
(= make\050<time-offset>, total-seconds: - encode-total-seconds\0506, 45, 30\051\051;) 129.6 236 T
3 13 Q
(5.1.3  Methods on) 108 206.33 T
4 12 Q
(<time-offset>) 200.42 206.33 T
1 11 Q
-0.07 (Because a) 108 186.67 P
4 10 Q
-0.16 (<time-offset>) 157.8 186.67 P
1 11 Q
-0.07 ( can r) 235.8 186.67 P
-0.07 (epr) 262.09 186.67 P
-0.07 (esent futur) 278.11 186.67 P
-0.07 (e time or past time, it will be useful) 330.64 186.67 P
(to pr) 108 172.67 T
(ovide a convenient way to determine whether a) 131.1 172.67 T
4 10 Q
(<time-offset>) 365.75 172.67 T
1 11 Q
( is in the) 443.75 172.67 T
(past. W) 108 158.67 T
(e de\336ne a new pr) 143.85 158.67 T
(edicate named) 227.54 158.67 T
4 10 Q
(past?) 301.07 158.67 T
1 11 Q
( as follows:) 331.07 158.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "54" 68
%%Page: "55" 69
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.1 The) 344.87 677.67 T
5 F
(<time-offset>) 375.74 677.67 T
0 F
( class and methods) 449.85 677.67 T
2 F
(55) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define method past? \050time :: <time-offset>\051 => \050past? :: <boolean>\051) 108 642 T
(time.total-seconds < 0;) 118.8 631 T
(end method past?;) 108 620 T
1 11 Q
-0.34 (The) 108 599.67 P
4 10 Q
-0.74 (past?) 128.82 599.67 P
1 11 Q
-0.34 ( method r) 158.82 599.67 P
-0.34 (eturns an instance of) 205.49 599.67 P
4 10 Q
-0.74 (<boolean>) 307.5 599.67 P
1 11 Q
-0.34 (, which is) 361.5 599.67 P
4 10 Q
-0.74 (#t) 409.41 599.67 P
1 11 Q
-0.34 ( if the time of) 421.41 599.67 P
-0.34 (fset) 484.41 599.67 P
(is in the past, and otherwise is) 108 585.67 T
4 10 Q
(#f) 257.49 585.67 T
1 11 Q
(. Her) 269.49 585.67 T
(e is an example:) 293.56 585.67 T
6 9 Q
(?) 108 565 T
4 F
(past?\050*my-time-offset*\051) 118.8 565 T
6 F
(#f) 108 554 T
(?) 108 535 T
4 F
(past?\050*your-time-offset*\051) 118.8 535 T
6 F
(#t) 108 524 T
1 11 Q
(W) 108 503.67 T
(e need a method to describe instances of) 117.99 503.67 T
4 10 Q
(<time-offset>) 316.38 503.67 T
1 11 Q
(. The output should) 394.38 503.67 T
(look like this:) 108 489.67 T
6 9 Q
(?) 108 469 T
4 F
(say-time-offset\050*my-time-offset*\051;) 118.8 469 T
6 F
(plus 15:20) 108 458 T
(?) 108 439 T
4 F
(say-time-offset\050*your-time-offset*\051;) 118.8 439 T
6 F
(minus 6:45) 108 428 T
1 11 Q
(W) 108 407.67 T
(e might de\336ne the method in this way:) 117.99 407.67 T
4 9 Q
(define method say-time-offset \050time :: <time-offset>\051 => \050\051) 108 387 T
(let\050hours, minutes\051 = decode-total-seconds\050time\051;) 118.8 376 T
(format-out\050"%s %d:%s%d",) 118.8 365 T
(if \050past?\050time\051\051 "minus" else "plus" end,) 178.2 354 T
(hours,) 178.2 343 T
(if \050minutes < 10\051 "0" else "" end,) 178.2 332 T
(minutes\051;) 178.2 321 T
(end method say-time-offset;) 108 310 T
1 11 Q
(If we test this method in a listener) 108 289.67 T
(, however) 271.94 289.67 T
(, the r) 319.31 289.67 T
(esult is dif) 346.96 289.67 T
(fer) 397.07 289.67 T
(ent:) 410.15 289.67 T
6 9 Q
(?) 108 269 T
4 F
(say-time-offset\050*my-time-offset*\051;) 118.8 269 T
6 F
-0.2 (ERROR: No applicable method for decode-total-seconds with argument {instance) 108 258 P
(<time-offset>}) 108 247 T
1 11 Q
(\322No applicable method\323 means that ther) 108 226.67 T
(e is no method for this generic function) 305.68 226.67 T
-0.16 (that is appr) 108 212.67 P
-0.16 (opriate for the ar) 162.99 212.67 P
-0.16 (guments. T) 244.19 212.67 P
-0.16 (o understand this err) 297.64 212.67 P
-0.16 (or) 399.27 212.67 P
-0.16 (, we can look at the) 408.81 212.67 P
-0.27 (methods for) 108 198.67 P
4 10 Q
-0.59 (decode-total-seconds) 169.33 198.67 P
1 11 Q
-0.27 ( in Figur) 289.33 198.67 P
-0.27 (e 4.1, page 49. One method takes an) 330.11 198.67 P
(ar) 108 184.67 T
(gument of the type) 117.65 184.67 T
4 10 Q
(<integer>) 212.87 184.67 T
1 11 Q
(. Another method takes an ar) 266.87 184.67 T
(gument of the type) 408.32 184.67 T
4 10 Q
(<time-of-day>) 108 170.67 T
1 11 Q
(. Ther) 186 170.67 T
(e is no method for instances of) 214.06 170.67 T
4 10 Q
(<time-offset>) 364.8 170.67 T
1 11 Q
(, so Dylan) 442.8 170.67 T
(signals an err) 108 156.67 T
(or) 172.91 156.67 T
(. Ther) 182.45 156.67 T
(e ar) 210.51 156.67 T
(e thr) 228.18 156.67 T
(ee possible appr) 250.33 156.67 T
(oaches to solving this pr) 328.93 156.67 T
(oblem.) 446.67 156.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "55" 69
%%Page: "56" 70
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(56) 72 677.67 T
0 F
(Chapter 5) 91 677.67 T
(Class Inheritance) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(As a \336rst appr) 135 640.67 T
(oach, we could de\336ne the) 204.09 640.67 T
4 10 Q
(say-time-offset) 330.84 640.67 T
1 11 Q
( method to call) 420.84 640.67 T
4 10 Q
(decode-total-seconds) 108 626.67 T
1 11 Q
( with an integer) 228 626.67 T
(.) 303.89 626.67 T
5 9 Q
(// First approach: Call decode-total-seconds with an integer) 108 606 T
4 F
(define method say-time-offset \050time :: <time-offset>\051 => \050\051) 108 595 T
5 F
(// 1) 491.4 595 T
4 F
(let\050hours, minutes\051 = decode-total-seconds\050abs\050time.total-seconds\051\051;) 118.8 584 T
5 F
(// 2) 491.4 584 T
4 F
(format-out\050"%s %d:%s%d",) 118.8 573 T
5 F
(// 3) 491.4 573 T
4 F
(if \050past?\050time\051\051 "minus" else "plus" end,) 178.2 562 T
5 F
(// 4) 491.4 562 T
4 F
(hours,) 178.2 551 T
5 F
(// 5) 491.4 551 T
4 F
(if \050minutes < 10\051 "0" else "" end,) 178.2 540 T
5 F
(// 6) 491.4 540 T
4 F
(minutes\051;) 178.2 529 T
5 F
(// 7) 491.4 529 T
4 F
(end method say-time-offset;) 108 518 T
5 F
(// 8) 491.4 518 T
1 11 Q
(W) 108 497.67 T
(e changed only the call to) 117.99 497.67 T
4 10 Q
(decode-total-seconds) 244.41 497.67 T
1 11 Q
( on line 2. Her) 364.41 497.67 T
(e, we call it) 432.71 497.67 T
-0.12 (with the absolute value \050r) 108 483.67 P
-0.12 (eturned by the) 231.71 483.67 P
4 10 Q
-0.26 (abs) 305.28 483.67 P
1 11 Q
-0.12 ( function\051 of the) 323.28 483.67 P
4 10 Q
-0.26 (total-seconds) 403.16 483.67 P
1 11 Q
-0.12 ( slot.) 481.16 483.67 P
-0.32 (This appr) 135 469.67 P
-0.32 (oach works, but it is awkwar) 181.3 469.67 P
-0.32 (d because we need to r) 319.84 469.67 P
-0.32 (emember what) 428.83 469.67 P
(kinds of ar) 108 455.67 T
(guments) 159.92 455.67 T
4 10 Q
(decode-total-seconds) 205.05 455.67 T
1 11 Q
( can take. The convenient calling) 325.05 455.67 T
-0.33 (syntax that we intr) 108 441.67 P
-0.33 (oduced for calling) 198.05 441.67 P
4 10 Q
-0.72 (decode-total-seconds) 288.06 441.67 P
1 11 Q
-0.33 ( with an instance of) 408.06 441.67 P
4 10 Q
(<time-of-day>) 108 427.67 T
1 11 Q
( is not available for other kinds of time.) 186 427.67 T
(As a second appr) 135 413.67 T
(oach, we could to de\336ne a thir) 218.79 413.67 T
(d method for) 365.46 413.67 T
4 10 Q
(decode-) 432.14 413.67 T
(total-seconds) 108 399.67 T
1 11 Q
( that takes as its ar) 186 399.67 T
(gument an instance of) 275.22 399.67 T
4 10 Q
(<time-offset>) 385.42 399.67 T
1 11 Q
(:) 463.42 399.67 T
5 9 Q
(// Second approach: Define a method on <time-offset>) 108 379 T
4 F
(define method decode-total-seconds \050time :: <time-offset>\051 => \050\051) 108 368 T
(decode-total-seconds\050abs\050time.total-seconds\051\051;) 118.8 357 T
(end method decode-total-seconds;) 108 346 T
1 11 Q
(The method for) 108 325.67 T
4 10 Q
(say-time-offset) 186.38 325.67 T
1 11 Q
( can then call) 276.38 325.67 T
4 10 Q
(decode-total-seconds) 342.61 325.67 T
1 11 Q
(, as we) 462.61 325.67 T
(did in the \336rst place:) 108 311.67 T
4 9 Q
(define method say-time-offset \050time :: <time-offset>\051 => \050\051) 108 291 T
(let\050hours, minutes\051 = decode-total-seconds\050time\051;) 118.8 280 T
(format-out\050"%s %d:%s%d",) 118.8 269 T
(if \050past?\050time\051\051 "minus" else "plus" end,) 178.2 258 T
(hours,) 178.2 247 T
(if \050minutes < 10\051 "0" else "" end,) 178.2 236 T
(minutes\051;) 178.2 225 T
(end method say-time-offset;) 108 214 T
1 11 Q
(This appr) 108 193.67 T
(oach works, and it pr) 154.63 193.67 T
(eserves the \337exibility of calling) 257.64 193.67 T
4 10 Q
(decode-total-) 410.74 193.67 T
(seconds) 108 179.67 T
1 11 Q
( on instances of) 150 179.67 T
4 10 Q
(<integer>) 227.65 179.67 T
1 11 Q
(,) 281.65 179.67 T
4 10 Q
(<time-of-day>) 287.15 179.67 T
1 11 Q
(, and) 365.15 179.67 T
4 10 Q
(<time-offset>) 392.02 179.67 T
1 11 Q
(. How-) 470.02 179.67 T
-0.23 (ever) 108 165.67 P
-0.23 (, the body of the method on) 128.28 165.67 P
4 10 Q
-0.51 (<time-offset>) 263.86 165.67 P
1 11 Q
-0.23 ( \050de\336ned in this section\051 is nearly) 341.86 165.67 P
(identical to the body of the method on) 108 151.67 T
4 10 Q
(<time-of-day>) 296.77 151.67 T
1 11 Q
( \050de\336ned in Section 4.6.5,) 374.77 151.67 T
-0.23 (page 48\051. The only dif) 108 137.67 P
-0.23 (fer) 212.5 137.67 P
-0.23 (ence is that we use) 225.58 137.67 P
4 10 Q
-0.51 (abs) 317.93 137.67 P
1 11 Q
-0.23 ( in the method on) 335.93 137.67 P
4 10 Q
-0.51 (<time-offset>) 423.48 137.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "56" 70
%%Page: "57" 71
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.2 Class inheritance) 440.86 677.67 T
2 F
(57) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(but not in the method on) 108 640.67 T
4 10 Q
(<time-of-day>) 231.76 640.67 T
1 11 Q
(. If we used it in the method on) 309.76 640.67 T
4 10 Q
(<time-) 464.11 640.67 T
(of-day>) 108 626.67 T
1 11 Q
(, it would be harmless. Duplication of code is ugly) 150 626.67 T
(, adds maintenance) 392.88 626.67 T
(over) 108 612.67 T
(head, and is particularly undesirable when pr) 129.64 612.67 T
(ogramming in an object-) 351.68 612.67 T
(oriented language, wher) 108 598.67 T
(e it may indicate a \337aw in the overall design.) 226.78 598.67 T
(The best solution to the pr) 135 584.67 T
(oblem lies in a thir) 262.07 584.67 T
(d appr) 352.12 584.67 T
(oach \321 to r) 384.46 584.67 T
(ethink the) 440.24 584.67 T
(classes and methods in a mor) 108 570.67 T
(e object-oriented style, using inheritance. W) 250.55 570.67 T
(e show) 462.23 570.67 T
(this solution in the next section.) 108 556.67 T
3 15 Q
(5.2  Class inheritance) 108 517 T
1 11 Q
(W) 108 496.67 T
(e have de\336ned two simple classes,) 117.99 496.67 T
4 10 Q
(<time-of-day>) 287.2 496.67 T
1 11 Q
( and) 365.2 496.67 T
4 10 Q
(<time-offset>) 389.32 496.67 T
1 11 Q
(. W) 467.32 496.67 T
(e) 482.81 496.67 T
(r) 108 482.67 T
(epeat the de\336nitions her) 112.15 482.67 T
(e:) 229.81 482.67 T
5 9 Q
(// A specific time of day from 00:00 \050midnight\051 to before 24:00 \050tomorrow\051) 108 462 T
4 F
(define class <time-of-day> \050<object>\051) 108 451 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 118.8 440 T
(end class <time-of-day>;) 108 429 T
5 F
(// A relative time between -24:00 and +24:00) 108 410 T
4 F
(define class <time-offset> \050<object>\051) 108 399 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 118.8 388 T
(end class <time-offset>;) 108 377 T
1 11 Q
(Ther) 108 356.67 T
(e is commonality between the two classes:) 130.56 356.67 T
(\245) 117 336.67 T
(Both classes r) 135 336.67 T
(epr) 200.21 336.67 T
(esent a kind of time \321 they have a conceptual basis in) 216.24 336.67 T
(common.) 135 322.67 T
(\245) 117 302.67 T
(Both classes have a) 135 302.67 T
4 10 Q
(total-seconds) 230.45 302.67 T
1 11 Q
( slot \321 they have str) 308.45 302.67 T
(uctur) 407.92 302.67 T
(e in common.) 433.8 302.67 T
(\245) 117 282.67 T
(Both classes need a) 135 282.67 T
4 10 Q
(decode-total-seconds) 230.72 282.67 T
1 11 Q
( method to convert the) 350.72 282.67 T
4 10 Q
(total-) 463.73 282.67 T
(seconds) 135 268.67 T
1 11 Q
( slot to hours, minutes, and seconds \321 they have behavior in) 177 268.67 T
(common.) 135 254.67 T
(W) 108 234.67 T
(e can use inheritance to model the shar) 117.99 234.67 T
(ed aspects of these two classes dir) 306.79 234.67 T
(ectly) 471 234.67 T
(.) 492.83 234.67 T
(W) 108 220.67 T
(e need to de\336ne a new class, such as) 117.99 220.67 T
4 10 Q
(<time>) 296.33 220.67 T
1 11 Q
(, and to r) 332.33 220.67 T
(ede\336ne the two classes to) 375.69 220.67 T
(inherit fr) 108 206.67 T
(om) 150.97 206.67 T
4 10 Q
(<time>) 169.43 206.67 T
1 11 Q
(. The) 205.43 206.67 T
4 10 Q
(<time>) 232.1 206.67 T
1 11 Q
( class will contain the slot) 268.1 206.67 T
4 10 Q
(total-seconds,) 394.98 206.67 T
1 11 Q
( and) 478.98 206.67 T
(the other two classes will inherit that slot. W) 108 192.67 T
(e shall r) 322.93 192.67 T
(ede\336ne the) 360.81 192.67 T
4 10 Q
(decode-total-) 417.15 192.67 T
(seconds) 108 178.67 T
1 11 Q
( method such that its parameter is of the) 150 178.67 T
4 10 Q
(<time>) 348.48 178.67 T
1 11 Q
( type, which means that) 384.48 178.67 T
(it can be called for instances of) 108 164.67 T
4 10 Q
(<time-of-day>) 259.21 164.67 T
1 11 Q
( and of) 337.21 164.67 T
4 10 Q
(<time-offset>) 373.75 164.67 T
1 11 Q
(.) 451.75 164.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "57" 71
%%Page: "58" 72
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(58) 72 677.67 T
0 F
(Chapter 5) 91 677.67 T
(Class Inheritance) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(5.2.1  Ne) 108 639.33 T
(w de\336nitions of the time c) 151.12 639.33 T
(lasses) 281.84 639.33 T
1 11 Q
(W) 108 619.67 T
(e de\336ne the new class) 117.99 619.67 T
4 10 Q
(<time>) 226.34 619.67 T
1 11 Q
(:) 262.34 619.67 T
4 9 Q
(define class <time> \050<object>\051) 108 599 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 118.8 588 T
(end class <time>;) 108 577 T
1 11 Q
(W) 108 556.67 T
(e r) 117.99 556.67 T
(ede\336ne) 130.15 556.67 T
4 10 Q
(<time-of-day>) 168.49 556.67 T
1 11 Q
( and) 246.49 556.67 T
4 10 Q
(<time-offset>) 270.61 556.67 T
1 11 Q
( to inherit fr) 348.61 556.67 T
(om) 406.67 556.67 T
4 10 Q
(<time>) 425.14 556.67 T
1 11 Q
(:) 461.14 556.67 T
5 9 Q
(// A specific time of day from 00:00 \050midnight\051 to before 24:00 \050tomorrow\051) 108 536 T
4 F
(define class <time-of-day> \050<time>\051) 108 525 T
(end class <time-of-day>;) 108 514 T
5 F
(// A relative time between -24:00 and +24:00) 108 495 T
4 F
(define class <time-offset> \050<time>\051) 108 484 T
(end class <time-offset>;) 108 473 T
3 13 Q
(5.2.2  Slot inheritance) 108 314.33 T
1 11 Q
(A class inherits the slots of its super) 108 294.67 T
(classes, and can de\336ne mor) 281.61 294.67 T
(e slots if they ar) 413.8 294.67 T
(e) 490.07 294.67 T
-0.08 (needed. For example, the) 108 280.67 P
4 10 Q
-0.16 (<time-of-day>) 232.82 280.67 P
1 11 Q
-0.08 ( and) 310.82 280.67 P
4 10 Q
-0.16 (<time-offset>) 334.79 280.67 P
1 11 Q
-0.08 ( classes inherit the) 412.79 280.67 P
4 10 Q
(total-seconds) 108 266.67 T
1 11 Q
( slot fr) 186 266.67 T
(om their super) 216.77 266.67 T
(class,) 288.11 266.67 T
4 10 Q
(<time>) 316.53 266.67 T
1 11 Q
(. A class inherits the slot) 352.53 266.67 T
(options fr) 108 252.67 T
(om its super) 155.04 252.67 T
(classes as well. A class cannot r) 215.03 252.67 T
(emove or r) 366.53 252.67 T
(eplace any slots) 419 252.67 T
(de\336ned by its super) 108 238.67 T
(classes. It is an err) 204.26 238.67 T
(or for a class to de\336ne a slot with the same) 291.68 238.67 T
(name as a slot inherited fr) 108 224.67 T
(om one of that class\325s super) 233.96 224.67 T
(classes.) 367.81 224.67 T
3 13 Q
(5.2.3  Existing instances of the c) 108 193.33 T
(lasses) 271.93 193.33 T
1 11 Q
(The variables) 108 173.67 T
4 10 Q
(*my-time-of-day*) 175.89 173.67 T
1 11 Q
(,) 271.89 173.67 T
4 10 Q
(*your-time-of-day*) 277.39 173.67 T
1 11 Q
(,) 385.39 173.67 T
4 10 Q
(*my-time-offset*) 390.89 173.67 T
1 11 Q
(,) 486.89 173.67 T
(and) 108 159.67 T
4 10 Q
(*your-time-offset*) 129.37 159.67 T
1 11 Q
( all contain instances of classes that have now been) 237.37 159.67 T
(r) 108 145.67 T
(ede\336ned. Some envir) 112.15 145.67 T
(onments might be able to update instances of the old class) 214.7 145.67 T
(de\336nitions to conform to the new class de\336nitions, but we will be conservative) 108 131.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.1 (Dynamic feature \321 no need to recompile:) 141 432.67 P
1 F
-0.1 ( In C++, a complete r) 349.06 432.67 P
-0.1 (ecom-) 450.46 432.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pile of the pr) 141 418.67 T
(ogram would be necessary to change the super) 203.22 418.67 T
(class of a) 431.09 418.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(class. Most Dylan development envir) 141 404.67 T
(onments support a mode that) 321.55 404.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 141 390.67 T
(equir) 145.15 390.67 T
(es only that you compile the new class de\336nitions. The dif) 170.56 390.67 T
(fer-) 452.1 390.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ence between compiling only a few class de\336nitions and compiling) 141 376.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the whole pr) 141 362.67 T
(ogram can be a time saver for complex applications.) 202.57 362.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 445.88 135 355.12 2 L
V
0.25 H
0 Z
N
486 445.88 486 355.12 2 L
V
N
134.88 446 486.12 446 2 L
V
N
134.88 355 486.12 355 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "58" 72
%%Page: "59" 73
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.2 Class inheritance) 440.86 677.67 T
2 F
(59) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.32 (and assume that our envir) 108 640.67 P
-0.32 (onment does not update instances. Ther) 234.09 640.67 P
-0.32 (efor) 426.5 640.67 P
-0.32 (e, we cr) 445.58 640.67 P
-0.32 (eate) 481.94 640.67 P
(the instances again:) 108 626.67 T
6 9 Q
(?) 108 606 T
4 F
( *my-time-offset*) 113.4 606 T
(:= make\050<time-offset>, total-seconds: encode-total-seconds\05015, 20, 10\051\051;) 129.6 595 T
6 F
(?) 108 576 T
4 F
( *your-time-offset*) 113.4 576 T
-0.3 (:= make\050<time-offset>, total-seconds: - encode-total-seconds\0506, 45, 30\051\051;) 129.6 565 P
6 F
(?) 108 546 T
4 F
( *my-time-of-day* := make\050<time-of-day>, total-seconds: 120\051;) 113.4 546 T
6 F
(?) 108 527 T
4 F
( *your-time-of-day*) 113.4 527 T
(:= make\050<time-of-day>, total-seconds: encode-total-seconds\0508, 30, 59\051\051;) 129.6 516 T
3 13 Q
(5.2.4  Relationships of the time c) 108 486.33 T
(lasses) 273.1 486.33 T
1 11 Q
(It is helpful to look at the r) 108 466.67 T
(elationships among the time classes. W) 236.8 466.67 T
(e show them in) 425.6 466.67 T
(Figur) 108 452.67 T
(e 5.1.) 134.21 452.67 T
(Referring to Figur) 135 438.67 T
(e 5.1, we intr) 222.26 438.67 T
(oduce terminology by example:) 284.06 438.67 T
(\245) 117 418.67 T
(The) 135 418.67 T
4 10 Q
(<time-of-day>) 156.16 418.67 T
1 11 Q
( class is a) 234.16 418.67 T
2 F
(direct subclass) 281.44 418.67 T
1 F
( of the) 355.04 418.67 T
4 10 Q
(<time>) 388.22 418.67 T
1 11 Q
( class.) 424.22 418.67 T
(\245) 117 398.67 T
(The) 135 398.67 T
4 10 Q
(<time-of-day>) 156.16 398.67 T
1 11 Q
( class is a) 234.16 398.67 T
2 F
(subclass) 281.44 398.67 T
1 F
( of the) 323.58 398.67 T
4 10 Q
(<object>) 356.76 398.67 T
1 11 Q
( class.) 404.76 398.67 T
(\245) 117 378.67 T
(The) 135 378.67 T
4 10 Q
(<time>) 156.16 378.67 T
1 11 Q
( class is a) 192.16 378.67 T
2 F
(direct superclass) 239.44 378.67 T
1 F
( of the) 322.82 378.67 T
4 10 Q
(<time-of-day>) 356 378.67 T
1 11 Q
( class.) 434 378.67 T
(\245) 117 358.67 T
(The) 135 358.67 T
4 10 Q
(<object>) 156.16 358.67 T
1 11 Q
( class is a) 204.16 358.67 T
2 F
(superclass) 251.44 358.67 T
1 F
( of the) 303.36 358.67 T
4 10 Q
(<time-of-day>) 336.54 358.67 T
1 11 Q
( class.) 414.54 358.67 T
(\245) 117 338.67 T
(When you make an instance of the) 135 338.67 T
4 10 Q
(<time-of-day>) 305.41 338.67 T
1 11 Q
( class, the r) 383.41 338.67 T
(esult is a) 436.73 338.67 T
2 F
(direct instance) 135 324.67 T
1 F
( of that class.) 208 324.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 143.01 504 151 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 5.1) 172.23 154.33 T
8 F
(Inher) 225.02 154.33 T
(itance relationships of the time classes) 247.96 154.33 T
(.) 418.99 154.33 T
0 0 0 1 0 0 0 K
108 167 504 298 C
205.5 171 406.5 296 C
0 77 114 266 223 189 109 211.5 181 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f5-1.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f5-1.eps)%%CreationDate: (6/5/96) (10:39 AM)%%BoundingBox: 77 114 266 223%%HiResBoundingBox: 77.7419 114.4167 264.4247 223.5404%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 193.3333 -5.3333 193.3333 -5.3333%AI3_TileBox: -81.6667 -370.3333 470.3333 359.6667%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -562.6667 498.6667 -1.5 1020 726 18 1 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Artwork) Ln0 A0 To1 0 0 1 170.6666 167 0 TpTP-16.196 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq10 0 Tl0 Tc0 Tw(<time>) Tx (\r) TX TO0 To1 0 0 1 171.1666 216.3334 0 TpTP-21.5947 0 Td0 Tr(<object>) Tx (\r) TX TO0 To1 0 0 1 112.8333 116.6667 0 TpTP-35.0914 0 Td0 Tr(<time-of-day>) Tx (\r) TX TO0 To1 0 0 1 229.3333 116.6667 0 TpTP-35.0914 0 Td0 Tr(<time-offset>) Tx (\r) TX TO0 R0 G173.3333 160.5834 mS219 131.3334 mSuuuuuu0.65 w173.3333 160.5834 m220.3333 131 lS0 O0 g1 w217.8329 129.9294 m226.1959 127.3423 l220.2468 133.7644 l217.8329 129.9294 lfUUUUUUuuuuuu0 R0 G0.65 w170.6716 212 m170.6819 183.1203 lS0 O0 g1 w168.4436 184.6657 m170.7107 176.2104 l172.9751 184.6666 l168.4436 184.6657 lfUUUUUUuuuuuu0 R0 G0.65 w167.3333 161 m121 130.6667 lS0 O0 g1 w121.0671 133.3888 m115.2335 126.862 l123.5491 129.5977 l121.0671 133.3888 lfUUUUUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 167 504 298 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "59" 73
%%Page: "60" 74
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(60) 72 677.67 T
0 F
(Chapter 5) 91 677.67 T
(Class Inheritance) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(\245) 117 640.67 T
(A dir) 135 640.67 T
(ect instance of) 160.38 640.67 T
4 10 Q
(<time-of-day>) 231.94 640.67 T
1 11 Q
( is an) 309.94 640.67 T
2 F
(indirect instance) 337.96 640.67 T
1 F
( of) 421.34 640.67 T
4 10 Q
(<time>) 436.51 640.67 T
1 11 Q
( and) 472.51 640.67 T
4 10 Q
(<object>) 135 626.67 T
1 11 Q
(.) 183 626.67 T
(\245) 117 606.67 T
(An object is a) 135 606.67 T
2 F
(general instance) 202.73 606.67 T
1 F
( of a class if it is either a dir) 284.29 606.67 T
(ect or an indir) 416.28 606.67 T
(ect) 484.2 606.67 T
-0.01 (instance of that class. The term) 135 592.67 P
2 F
-0.01 (instance) 287.08 592.67 P
1 F
-0.01 ( is equivalent to general instance. A) 328.61 592.67 P
-0.11 (dir) 135 578.67 P
-0.11 (ect instance of) 149.07 578.67 P
4 10 Q
-0.23 (<time-of-day>) 220.32 578.67 P
1 11 Q
-0.11 ( is both a general instance and an instance) 298.32 578.67 P
(of) 135 564.67 T
4 10 Q
(<time-of-day>) 147.42 564.67 T
1 11 Q
(,) 225.42 564.67 T
4 10 Q
(<time>) 230.92 564.67 T
1 11 Q
(, and) 266.92 564.67 T
4 10 Q
(<object>) 293.79 564.67 T
1 11 Q
(.) 341.79 564.67 T
(\245) 117 544.67 T
-0.01 (The) 135 544.67 P
4 10 Q
-0.03 (<time-of-day>) 156.15 544.67 P
1 11 Q
-0.01 ( class is a) 234.15 544.67 P
2 F
-0.01 (subtype) 281.37 544.67 P
1 F
-0.01 (of the) 324.44 544.67 P
4 10 Q
-0.03 (<time>) 354.83 544.67 P
1 11 Q
-0.01 ( and) 390.83 544.67 P
4 10 Q
-0.03 (<object>) 414.93 544.67 P
1 11 Q
-0.01 ( classes.) 462.93 544.67 P
(A class is also a subtype of itself. All classes ar) 135 530.67 T
(e types.) 359.12 530.67 T
(\245) 117 510.67 T
-0.06 (The) 135 510.67 P
4 10 Q
-0.12 (<object>) 156.11 510.67 P
1 11 Q
-0.06 ( class is a) 204.11 510.67 P
2 F
-0.06 (supertype) 251.16 510.67 P
1 F
-0.06 ( of all the other classes shown. All classes) 301.27 510.67 P
(ar) 135 496.67 T
(e subtypes of the) 144.65 496.67 T
4 10 Q
(<object>) 229.47 496.67 T
1 11 Q
( class. All objects ar) 277.47 496.67 T
(e instances of the) 371.8 496.67 T
4 10 Q
(<object>) 135 482.67 T
1 11 Q
( class.) 183 482.67 T
3 15 Q
(5.3  Methods f) 108 443 T
(or c) 189.79 443 T
(lasses that use inheritance) 212.13 443 T
1 11 Q
(Figur) 108 422.67 T
(e 5.2 shows the methods that we now have de\336ned for the) 134.21 422.67 T
4 10 Q
(decode-total-) 419.55 422.67 T
(seconds) 108 408.67 T
1 11 Q
( generic function; Figur) 150 408.67 T
(e 5.3 shows the methods that we want to have.) 263.48 408.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 129.01 504 137 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 5.2) 162.75 140.33 T
8 F
(Existing methods f) 215.55 140.33 T
(or) 296.95 140.33 T
4 F
(decode-total-seconds) 308.62 140.33 T
8 F
(.) 428.47 140.33 T
0 0 0 1 0 0 0 K
108 153 504 393 C
108 157 504 391 C
0 15 14 412 236 397 222 107.5 163 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f5-2.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f5-2 .eps)%%CreationDate: (6/5/96) (1:07 PM)%%BoundingBox: 15 14 412 236%%HiResBoundingBox: 16.1749 13.8417 410.9916 236.325%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Courier-Oblique%%+ Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 193.3333 -5.3333 193.3333 -5.3333%AI3_TileBox: -81.6667 -370.3333 470.3333 359.6667%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -10.6667 354.6667 2 1020 726 18 1 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: Courier-Oblique%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique[/_Courier-Oblique/Courier-Oblique 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 4 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Artwork) Ln0 A1 Ap0 O0.9 g0 R0 G800 Ar0 J 0 j 0.65 w 4 M []0 d%AI3_Note:0 D410.6666 14.1667 m410.6666 236 L16.4999 236 L16.4999 14.1667 L410.6666 14.1667 Lb1 g1 w314.8333 208.3334 m315.0833 225.3334 L112.4166 225.3334 L112.1666 208.3334 L314.8333 208.3334 Lf0 R0 G0.65 w400.6666 107.25 m400.6666 196.3334 L26.2499 196.3334 L26.2499 107.25 L400.6666 107.25 Lb399.3333 24.5834 m399.3333 96.6667 L26.2499 96.6667 L26.2499 24.5834 L399.3333 24.5834 Lb0 To1 0 0 1 213.9999 213.8334 0 TpTP-96.101 0 Td0 Tr0 g1 w/_Helvetica 11 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq11 0 Tl0 Tc0 Tw(Gener) Tx 0 -60 Tk (ic funct) Tx 0 -40 Tk (ion ) Tx /_Courier-Bold 9 Tf(decode-total-seconds) Tx (\r) TX TO0 To1 0 0 1 30.2499 184.3334 0 TpTP0 Tr/_Courier-Oblique 9 Tf0 Ta10 0 Tl(// Method on <integer>\r) Tx T*/_Courier-Bold 9 Tf(define method decode-total-seconds\r) Tx T*(    \(total-seconds :: <integer>\)\r) Tx T*( => \(hours :: <integer>, minutes :: <integer>, seconds :: <integer>\)\r) Tx T*(  let\(total-minutes, seconds\) = truncate/\(total-seconds, 60\);\r) Tx T*(  let\(hours, minutes\) = truncate/\(total-minutes, 60\);\r) Tx T*(  values\(hours, minutes, seconds\);\r) Tx T*(end method decode-total-seconds;\r) Tx T*(\r) Tx TO0 To1 0 0 1 29.9999 85.9167 0 TpTP0 Tr/_Courier-Oblique 9 Tf(// Method on <time-of-day>\r) Tx T*/_Courier-Bold 9 Tf(define method decode-total-seconds\r) Tx T*(    \(time :: <time-of-day>\)\r) Tx T*( => \(hours :: <integer>, minutes :: <integer>, seconds :: <integer>\)\r) Tx T*(  decode-total-seconds\(time.total-seconds\);\r) Tx T*(end method decode-total-seconds;) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 153 504 393 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "60" 74
%%Page: "61" 75
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.4 Redefinition of a method) 413.59 677.67 T
2 F
(61) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(T) 108 364.67 T
(o take advantage of the r) 113.73 364.67 T
(ede\336ned classes, we want to r) 233.84 364.67 T
(emove the method on) 378.34 364.67 T
4 10 Q
(<time-of-day>) 108 350.67 T
1 11 Q
(, and to add a method on) 186 350.67 T
4 10 Q
(<time>) 310.76 350.67 T
1 11 Q
(. The method on) 346.76 350.67 T
4 10 Q
(<time>) 429.03 350.67 T
1 11 Q
( is) 465.03 350.67 T
(appr) 108 336.67 T
(opriate for instances of both) 130.87 336.67 T
4 10 Q
(<time-of-day>) 269.47 336.67 T
1 11 Q
( and) 347.47 336.67 T
4 10 Q
(<time-offset>) 371.59 336.67 T
1 11 Q
(.) 449.59 336.67 T
-0.12 (Ther) 135 322.67 P
-0.12 (e ar) 157.56 322.67 P
-0.12 (e two important points to cover) 175.11 322.67 P
-0.12 (. W) 327.21 322.67 P
-0.12 (e \336rst discuss how to r) 342.58 322.67 P
-0.12 (emove the) 451.01 322.67 P
-0.14 (method on) 108 308.67 P
4 10 Q
-0.3 (<time-of-day>) 163.33 308.67 P
1 11 Q
-0.14 ( and how to add the method on) 241.33 308.67 P
4 10 Q
-0.3 (<time>) 396.33 308.67 P
1 11 Q
-0.14 ( in Section 5.4.) 432.33 308.67 P
(W) 108 294.67 T
(e then describe how the) 117.99 294.67 T
4 10 Q
(decode-total-seconds) 235.94 294.67 T
1 11 Q
( generic function works in) 355.94 294.67 T
(Section 5.5.) 108 280.67 T
3 15 Q
(5.4  Rede\336nition of a method) 108 241.01 T
1 11 Q
(It is important to understand that when you de\336ne a method, Dylan will do one) 108 220.67 T
(of the following:) 108 206.67 T
(\245) 117 186.67 T
(Add that method to the generic function \050without af) 135 186.67 T
(fecting existing meth-) 388.1 186.67 T
-0.16 (ods\051, if the parameter list of the new method is dif) 135 172.67 P
-0.16 (fer) 376.37 172.67 P
-0.16 (ent fr) 389.45 172.67 P
-0.16 (om the parameter) 415.11 172.67 P
(lists of all the existing methods.) 135 158.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 384.01 504 392 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 5.3) 163.03 395.33 T
8 F
(Desired methods f) 215.83 395.33 T
(or) 296.67 395.33 T
4 F
(decode-total-seconds) 308.34 395.33 T
8 F
(.) 428.19 395.33 T
0 0 0 1 0 0 0 K
108 408 504 648 C
108 412 504 646 C
0 15 14 412 236 397 222 107.5 418 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f5-3.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f5-3 .eps)%%CreationDate: (6/5/96) (10:40 AM)%%BoundingBox: 15 14 412 236%%HiResBoundingBox: 16.1749 13.8417 410.9916 236.325%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Courier-Oblique%%+ Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 193.3333 -5.3333 193.3333 -5.3333%AI3_TileBox: -81.6667 -370.3333 470.3333 359.6667%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -62.6667 378.6667 1.5 1020 726 18 1 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: Courier-Oblique%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique[/_Courier-Oblique/Courier-Oblique 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 4 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Artwork) Ln0 A1 Ap0 O0.9 g0 R0 G800 Ar0 J 0 j 0.65 w 4 M []0 d%AI3_Note:0 D410.6666 14.1667 m410.6666 236 L16.4999 236 L16.4999 14.1667 L410.6666 14.1667 Lb1 g1 w314.8333 208.3334 m315.0833 225.3334 L112.4166 225.3334 L112.1666 208.3334 L314.8333 208.3334 Lf0 R0 G0.65 w400.6666 107.25 m400.6666 196.3334 L26.2499 196.3334 L26.2499 107.25 L400.6666 107.25 Lb399.3333 24.5834 m399.3333 96.6667 L26.2499 96.6667 L26.2499 24.5834 L399.3333 24.5834 Lb0 To1 0 0 1 213.9999 213.8334 0 TpTP-96.101 0 Td0 Tr0 g1 w/_Helvetica 11 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq11 0 Tl0 Tc0 Tw(Gener) Tx 0 -60 Tk (ic funct) Tx 0 -40 Tk (ion ) Tx /_Courier-Bold 9 Tf(decode-total-seconds) Tx (\r) TX TO0 To1 0 0 1 29.2499 184.3334 0 TpTP0 Tr/_Courier-Oblique 9 Tf0 Ta10 0 Tl(// Method on <integer>\r) Tx T*/_Courier-Bold 9 Tf(define method decode-total-seconds\r) Tx T*(    \(total-seconds :: <integer>\)\r) Tx T*( => \(hours :: <integer>, minutes :: <integer>, seconds :: <integer>\)\r) Tx T*(  let\(total-minutes, seconds\) = truncate/\(total-seconds, 60\);\r) Tx T*(  let\(hours, minutes\) = truncate/\(total-minutes, 60\);\r) Tx T*(  values\(hours, minutes, seconds\);\r) Tx T*(end method decode-total-seconds;\r) Tx T*(\r) Tx TO0 To1 0 0 1 29.9999 85.9167 0 TpTP0 Tr/_Courier-Oblique 9 Tf(// Method on <time>\r) Tx T*/_Courier-Bold 9 Tf(define method decode-total-seconds\r) Tx T*(    \(time :: <time>\)\r) Tx T*( => \(hours :: <integer>, minutes :: <integer>, seconds :: <integer>\)\r) Tx T*(  decode-total-seconds\(abs\(time.total-seconds\)\);\r) Tx T*(end method decode-total-seconds;) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 408 504 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "61" 75
%%Page: "62" 76
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(62) 72 677.67 T
0 F
(Chapter 5) 91 677.67 T
(Class Inheritance) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(\245) 117 640.67 T
(Rede\336ne an existing method of the generic function, if the parameter list of) 135 640.67 T
(the new method is equivalent to the parameter list of one of the existing) 135 626.67 T
(methods. \050Although the concept of r) 135 612.67 T
(ede\336nition is not in the Dylan lan-) 311.14 612.67 T
(guage, most Dylan development envir) 135 598.67 T
(onments support r) 321.58 598.67 T
(ede\336nition.\051) 411.73 598.67 T
-0.09 (T) 108 578.67 P
-0.09 (wo parameter lists ar) 113.75 578.67 P
-0.09 (e equivalent if the types of each r) 216.03 578.67 P
-0.09 (equir) 375.63 578.67 P
-0.09 (ed parameter ar) 401.04 578.67 P
-0.09 (e the) 478.14 578.67 P
(same. A parameter with no type is the same as a parameter whose type is) 108 564.67 T
4 10 Q
(<object>) 108 550.67 T
1 11 Q
(. For example, the following parameter lists ar) 156 550.67 T
(e equivalent:) 379.78 550.67 T
4 9 Q
(\050a :: <string>, b :: <integer>, c\051) 108 530 T
(\050str :: <string>, num :: <integer>, any-old-thing :: <object>\051) 108 519 T
1 11 Q
(Assume that we ar) 108 498.67 T
(e working in a listener) 198.91 498.67 T
(, and alr) 306.77 498.67 T
(eady have de\336ned the methods) 346.49 498.67 T
(shown in Figur) 108 484.67 T
(e 5.2. Consider what happens when we de\336ne the method on) 181.96 484.67 T
4 10 Q
(<time>) 108 470.67 T
1 11 Q
(. The parameter list of the new method is not equivalent to the parameter) 144 470.67 T
(list of any of the existing methods, so the new method is added to the generic) 108 456.67 T
(function. Thus,) 108 442.67 T
4 10 Q
(decode-total-seconds) 184.22 442.67 T
1 11 Q
( has thr) 304.22 442.67 T
(ee methods: a method on) 340.42 442.67 T
4 10 Q
-0.01 (<integer>) 108 428.67 P
1 11 Q
-0 (, a method on) 162 428.67 P
4 10 Q
-0.01 (<time-of-day>) 231.34 428.67 P
1 11 Q
-0 (, and a method on) 309.34 428.67 P
4 10 Q
-0.01 (<time>) 400.04 428.67 P
1 11 Q
-0 (. The envir) 436.04 428.67 P
-0 (on-) 487.93 428.67 P
(ment may of) 108 414.67 T
(fer a way to r) 169.27 414.67 T
(emove a method fr) 233.58 414.67 T
(om a generic function. When we) 325.3 414.67 T
(r) 108 400.67 T
(emove the de\336nition of the method on) 112.15 400.67 T
4 10 Q
(<time-of-day>) 301.6 400.67 T
1 11 Q
( using the envir) 379.6 400.67 T
(onment,) 455.36 400.67 T
(the) 108 386.67 T
4 10 Q
(decode-total-seconds) 126.01 386.67 T
1 11 Q
( generic function contains only the desir) 246.01 386.67 T
(ed methods,) 440.4 386.67 T
(as shown in Figur) 108 372.67 T
(e 5.3. A typical br) 194.88 372.67 T
(owser will help you to \336nd the methods to) 279.53 372.67 T
(r) 108 358.67 T
(emove.) 112.15 358.67 T
(If, however) 135 344.67 T
(, we ar) 189.74 344.67 T
(e working in sour) 222.08 344.67 T
(ce \336les rather than in a listener) 308.01 344.67 T
(, we sim-) 456.01 344.67 T
-0.17 (ply need to r) 108 330.67 P
-0.17 (emove the method on) 169.08 330.67 P
4 10 Q
-0.36 (<time-of-day>) 277.25 330.67 P
1 11 Q
-0.17 ( with the editor) 355.25 330.67 P
-0.17 (, and to type in) 428.93 330.67 P
(the method on) 108 316.67 T
4 10 Q
(<time>) 181.61 316.67 T
1 11 Q
(. When we next compile the \336le, the generic function will) 217.61 316.67 T
(contain only the desir) 108 302.67 T
(ed methods, as shown in Figur) 213.21 302.67 T
(e 5.3.) 362.69 302.67 T
(W) 135 288.67 T
(e can now call) 144.99 288.67 T
4 10 Q
(decode-total-seconds) 216.41 288.67 T
1 11 Q
( on instances of) 336.41 288.67 T
4 10 Q
(<time-of-day>) 414.06 288.67 T
1 11 Q
(and on instances of) 108 274.67 T
4 10 Q
(<time-offset>) 204.27 274.67 T
1 11 Q
(:) 282.27 274.67 T
6 9 Q
(?) 108 254 T
4 F
(decode-total-seconds\050*your-time-of-day*\051;) 118.8 254 T
6 F
(8) 108 243 T
(30) 108 232 T
(59) 108 221 T
(?) 108 202 T
4 F
(decode-total-seconds\050*your-time-offset*\051;) 118.8 202 T
6 F
(6) 108 191 T
(45) 108 180 T
(30) 108 169 T
1 11 Q
(The r) 108 148.67 T
(esult is as expected \321) 133.31 148.67 T
4 10 Q
(decode-total-seconds) 242.73 148.67 T
1 11 Q
( r) 362.73 148.67 T
(eturns the hours, minutes,) 369.62 148.67 T
(and seconds. W) 108 134.67 T
(e now describe how this generic function works.) 183.47 134.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "62" 76
%%Page: "63" 77
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.5 Method dispatch) 443 677.67 T
2 F
(63) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(5.5  Method dispatc) 108 638 T
(h) 222.04 638 T
1 11 Q
-0.2 (When a generic function is called, it chooses the) 108 617.67 P
2 F
-0.2 (most speci\336c applicable method) 341.08 617.67 P
1 F
(and calls that method. The pr) 108 603.67 T
(ocess of choosing the most speci\336c method and call-) 250.52 603.67 T
(ing it is) 108 589.67 T
2 F
(method dispatch) 146.62 589.67 T
1 F
(. This pr) 230.63 589.67 T
(ocess has thr) 270.65 589.67 T
(ee steps:) 332.33 589.67 T
2 F
(1.) 117 569.67 T
1 F
(Find all the) 135 569.67 T
2 F
(applicable methods) 192.85 569.67 T
1 F
( for the ar) 291.52 569.67 T
(gument to the generic function.) 338.69 569.67 T
2 F
(2.) 117 549.67 T
1 F
(Sort the applicable methods by) 135 549.67 T
2 F
(speci\336city) 288.34 549.67 T
1 F
(.) 337.82 549.67 T
2 F
(3.) 117 529.67 T
1 F
(Call the most speci\336c method.) 135 529.67 T
-0.24 (Dylan does the method dispatch automatically) 108 509.67 P
-0.24 (, but it is important that you under-) 332.89 509.67 P
(stand the semantics of the method dispatch. When you understand how Dylan) 108 495.67 T
(determines the applicability of methods and how it sorts them by speci\336city) 108 481.67 T
(, you) 476.15 481.67 T
(can design classes and methods that work together corr) 108 467.67 T
(ectly) 377.67 467.67 T
(. Method dispatch is) 399.5 467.67 T
(at the heart of object-oriented pr) 108 453.67 T
(ogramming.) 264.49 453.67 T
3 13 Q
(5.5.1  Step 1: Find the applicab) 108 422.33 T
(le methods) 263.73 422.33 T
1 11 Q
(Start with the set of methods de\336ned for the generic function that was called. A) 108 402.67 T
(method is) 108 388.67 T
2 F
(specialized) 159.06 388.67 T
1 F
(on a r) 218.01 388.67 T
(equir) 245.57 388.67 T
(ed parameter that has a type constraints. The) 270.98 388.67 T
(type constraint of the r) 108 374.67 T
(equir) 218.23 374.67 T
(ed parameter is called the) 243.64 374.67 T
2 F
(parameter specializer) 371.42 374.67 T
1 F
( of) 478.64 374.67 T
(the parameter) 108 360.67 T
(. A method is) 175.33 360.67 T
2 F
(applicable) 243.2 360.67 T
1 F
( if the ar) 295.74 360.67 T
(gument to the generic function is) 335.76 360.67 T
(an instance of the parameter specializer of the method.) 108 346.67 T
(For example, consider the) 135 332.67 T
4 10 Q
(decode-total-seconds) 263.2 332.67 T
1 11 Q
( generic function. T) 383.2 332.67 T
(able) 476.2 332.67 T
(5.1 shows which method is applicable for certain ar) 108 318.67 T
(guments.) 357.19 318.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 F
(Argument) 171.03 282.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Argument\325) 275.78 282.67 T
(s type) 325.36 282.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Applicab) 387.49 282.67 T
(le methods) 429.45 282.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(*my-time-of-day*) 135.46 258.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-of-day>) 266.27 258.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(method on) 376.21 257.67 T
4 10 Q
(<time>) 431.24 257.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(*my-time-offset*) 135.46 235.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-offset>) 266.27 235.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(method on) 376.21 234.67 T
4 10 Q
(<time>) 431.24 234.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1000) 135.46 212.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<integer>) 266.27 212.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(method on) 376.21 211.67 T
4 10 Q
(<integer>) 431.24 211.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
("hello, world") 135.46 189.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<string>) 266.27 189.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(none) 376.21 188.67 T
0 0 0 1 0 0 0 K
108 151.01 522 159 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 138.39 162.33 T
(ab) 143.7 162.33 T
(le 5.1) 155.27 162.33 T
8 F
(Applicab) 185.85 162.33 T
(le methods f) 224 162.33 T
(or arguments to) 278.17 162.33 T
4 F
(decode-total-seconds) 350.98 162.33 T
8 F
(.) 470.83 162.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
129.46 297.88 129.46 179.13 2 L
V
0.25 H
0 Z
N
500.54 297.88 500.54 179.13 2 L
V
N
129.34 298 500.66 298 2 L
V
N
129.34 271 500.66 271 2 L
V
N
129.34 179 500.66 179 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "63" 77
%%Page: "64" 78
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(64) 72 677.67 T
0 F
(Chapter 5) 91 677.67 T
(Class Inheritance) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(The \336rst r) 108 640.67 T
(ow of the table shows that, when the ar) 155.31 640.67 T
(gument is a dir) 345.94 640.67 T
(ect instance of) 419.34 640.67 T
4 10 Q
-0.09 (<time-of-day>) 108 626.67 P
1 11 Q
-0.04 (, the method on) 186 626.67 P
4 10 Q
-0.09 (<time>) 264.95 626.67 P
1 11 Q
-0.04 ( is applicable, because the ar) 300.95 626.67 P
-0.04 (gument is an) 438.38 626.67 P
-0.46 (instance of) 108 612.67 P
4 10 Q
-1 (<time>) 162.16 612.67 P
1 11 Q
-0.46 ( \050the method\325s parameter specializer\051. The \336nal r) 198.16 612.67 P
-0.46 (ow of the table) 431.08 612.67 P
-0.19 (shows that, when the ar) 108 598.67 P
-0.19 (gument is) 223.15 598.67 P
4 10 Q
-0.4 ("hello, world") 273.86 598.67 P
1 11 Q
-0.19 (, none of the de\336ned methods) 357.46 598.67 P
(ar) 108 584.67 T
(e applicable, because) 117.65 584.67 T
4 10 Q
("hello, world") 222.28 584.67 T
1 11 Q
( is not an instance of) 306.28 584.67 T
4 10 Q
(<time>) 408.12 584.67 T
1 11 Q
( or) 444.12 584.67 T
4 10 Q
(<integer>) 108 570.67 T
1 11 Q
(.) 162 570.67 T
-0.3 (For) 135 556.67 P
4 10 Q
-0.65 (decode-total-seconds) 153.92 556.67 P
1 11 Q
-0.3 (, ther) 273.92 556.67 P
-0.3 (e is either no or one applicable method for) 298.52 556.67 P
(any ar) 108 542.67 T
(gument. If ther) 138.41 542.67 T
(e is one applicable method, it is called. If ther) 211.16 542.67 T
(e is no applica-) 430.18 542.67 T
(ble method, the \322No applicable method\323 err) 108 528.67 T
(or is signaled. Ther) 322.42 528.67 T
(e is no need to) 415.27 528.67 T
(continue to step 2.) 108 514.67 T
-0.42 (In other cases, ther) 135 500.67 P
-0.42 (e can be several applicable methods. Consider the generic) 224.84 500.67 P
(function) 108 486.67 T
4 10 Q
(say-greeting) 151.53 486.67 T
1 11 Q
(, shown in Figur) 223.53 486.67 T
(e 5.4. T) 302.99 486.67 T
(able 5.2 shows that, for certain) 335.99 486.67 T
(ar) 108 472.67 T
(guments, one method is applicable, but that, for an integer ar) 117.65 472.67 T
(gument, two) 414.21 472.67 T
(methods ar) 108 458.67 T
(e applicable.) 162.76 458.67 T
(When the ar) 135 444.67 T
(gument is) 194.48 444.67 T
4 10 Q
(7) 245.56 444.67 T
1 11 Q
(, a dir) 251.56 444.67 T
(ect instance of) 279.38 444.67 T
4 10 Q
(<integer>) 350.95 444.67 T
1 11 Q
(, the method on) 404.95 444.67 T
4 10 Q
(<object>) 108 430.67 T
1 11 Q
( is applicable, because) 156 430.67 T
4 10 Q
(7) 265.98 430.67 T
1 11 Q
( is an instance of) 271.98 430.67 T
4 10 Q
(<object>) 355.07 430.67 T
1 11 Q
( \050the method\325s) 403.07 430.67 T
(parameter specializer\051; the method on) 108 416.67 T
4 10 Q
(<integer>) 295.31 416.67 T
1 11 Q
( also is applicable, because) 349.31 416.67 T
4 10 Q
(7) 481.41 416.67 T
1 11 Q
( is) 487.41 416.67 T
(an instance of) 108 402.67 T
4 10 Q
(<integer>) 177.73 402.67 T
1 11 Q
( \050the method\325s parameter specializer\051.) 231.73 402.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 201.29 504 209.29 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 5.4) 149.84 212.62 T
8 F
(The) 202.63 212.62 T
4 F
(say-greeting) 222.65 212.62 T
8 F
( gener) 294.64 212.62 T
(ic function and its methods) 323.14 212.62 T
(.) 441.39 212.62 T
0 0 0 1 0 0 0 K
108 225.29 504 382 C
108 229.29 504 380 C
0 0 28 386 163 386 135 113 239 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f5-4.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f5-4 .eps)%%CreationDate: (6/5/96) (10:40 AM)%%BoundingBox: 0 28 386 163%%HiResBoundingBox: 1.0083 28.3417 384.4917 163.6583%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 193.3333 -5.3333 193.3333 -5.3333%AI3_TileBox: -81.6667 -370.3333 470.3333 359.6667%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -34.6667 294.6667 2 1020 726 18 1 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Artwork) Ln0 A1 Ap0 O0.9 g0 R0 G800 Ar0 J 0 j 0.65 w 4 M []0 d%AI3_Note:0 D384.1667 28.6667 m384.1667 163.3333 L1.3333 163.3333 L1.3333 28.6667 L384.1667 28.6667 Lb1 g1 w277.3333 135.6667 m277.3333 152.6667 L117.8333 152.6667 L117.8333 135.6667 L277.3333 135.6667 Lf0 R0 G0.65 w375.3333 85.1667 m375.3333 123.6667 L10.3333 123.6667 L10.3333 85.1667 L375.3333 85.1667 Lb375.3333 37.6667 m375.3333 76.1667 L10.3333 76.1667 L10.3333 37.6667 L375.3333 37.6667 Lb0 To1 0 0 1 198.3333 141.1667 0 TpTP-74.3263 0 Td0 Tr0 g1 w/_Helvetica 11 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq11 0 Tl0 Tc0 Tw(Gener) Tx 0 -60 Tk (ic funct) Tx 0 -40 Tk (ion ) Tx /_Courier-Bold 9 Tf(say-greet) Tx 0 40 Tk (ing) Tx (\r) TX TO0 To1 0 0 1 16.8333 111.6667 0 TpTP0 Tr0 Ta10 0 Tl(define method say-greeting \(greeting :: <object>\)\r) Tx T*(  format-out\("%s\\n", greeting\);\r) Tx T*(end;\003) Tx T*(\r) Tx TO0 To1 0 0 1 16.8333 65.4167 0 TpTP0 Tr(define method say-greeting \(greeting :: <integer>\)\r) Tx T*(  format-out\("Your lucky number is %s.\\n", greeting\);\r) Tx T*(end;\003) Tx T*(\r) Tx TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 225.29 504 382 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "64" 78
%%Page: "65" 79
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.5 Method dispatch) 443 677.67 T
2 F
(65) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(5.5.2  Step 2: Sor) 108 468.34 T
(t applicab) 194.12 468.34 T
(le methods b) 243.8 468.34 T
(y speci\336city) 309.36 468.34 T
1 11 Q
(Start with the set of applicable methods. Compar) 108 448.67 T
(e the parameter specializers of) 345.8 448.67 T
-0.14 (the methods. If one type is a subtype of the other) 108 434.67 P
-0.14 (, the method whose parameter is) 343.13 434.67 P
(of the subtype is) 108 420.67 T
2 F
(more speci\336c) 190.75 420.67 T
1 F
( than the other method. Sort the list of applicable) 256.43 420.67 T
(methods fr) 108 406.67 T
(om most speci\336c to least speci\336c.) 160.92 406.67 T
-0.14 (Let\325s continue with the example of calling) 135 392.67 P
4 10 Q
-0.32 (say-greeting) 339.95 392.67 P
1 11 Q
-0.14 ( with an ar) 411.95 392.67 P
-0.14 (gument) 463.68 392.67 P
-0.43 (of) 108 378.67 P
4 10 Q
-0.94 (7) 119.99 378.67 P
1 11 Q
-0.43 (. The parameter specializers of the two methods ar) 125.99 378.67 P
-0.43 (e) 367.84 378.67 P
4 10 Q
-0.94 (<objec) 375.42 378.67 P
1 11 Q
-0.43 (t> and) 411.42 378.67 P
4 10 Q
-0.94 (<integer>) 444.93 378.67 P
1 11 Q
-0.43 (.) 498.93 378.67 P
(Because) 108 364.67 T
4 10 Q
(<integer>) 149.69 364.67 T
1 11 Q
( is a subtype of) 203.69 364.67 T
4 10 Q
(<object>) 279.44 364.67 T
1 11 Q
(, the method on) 327.44 364.67 T
4 10 Q
(<integer>) 406.55 364.67 T
1 11 Q
( is mor) 460.55 364.67 T
(e) 493.78 364.67 T
(speci\336c than the method on) 108 350.67 T
4 10 Q
(<object>) 245.17 350.67 T
1 11 Q
(.) 293.17 350.67 T
3 13 Q
(5.5.3  Step 3: Call the most speci\336c method) 108 319.34 T
1 11 Q
(The generic function calls the most speci\336c method.) 108 299.67 T
3 13 Q
(5.5.4  Precedence in method dispatc) 108 268.34 T
(h) 291.59 268.34 T
1 11 Q
(This conceptual description of how method dispatch works should help you to) 108 248.67 T
-0.17 (understand how to design methods. The most important concept to r) 108 234.67 P
-0.17 (ealize is that) 441.39 234.67 P
(method dispatch should feel natural \321 it gives pr) 108 220.67 T
(ecedence to the methods that) 349.47 220.67 T
-0.33 (ar) 108 206.67 P
-0.33 (e mor) 117.65 206.67 P
-0.33 (e closely r) 145.2 206.67 P
-0.33 (elated to the ar) 192.79 206.67 P
-0.33 (gument, rather than to the methods that ar) 264.09 206.67 P
-0.33 (e mor) 468.76 206.67 P
-0.33 (e) 496.31 206.67 P
(general. This pr) 108 192.67 T
(ecedence or) 184.12 192.67 T
(dering lets you adjust the behavior of a class with) 240.99 192.67 T
(r) 108 178.67 T
(espect to that class\325s super) 112.15 178.67 T
(classes.) 240.05 178.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 F
(Argument) 221.54 618.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Applicab) 316.99 618.67 T
(le method\050s\051) 358.96 618.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(7) 197.84 594.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(method on) 304.92 593.67 T
4 10 Q
(<object>) 359.95 593.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(method on) 304.92 577.67 T
4 10 Q
(<integer>) 359.95 577.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($pi) 197.84 555.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(method on) 304.92 554.67 T
4 10 Q
(<object>) 359.95 554.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
("hello, world") 197.84 532.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(method on) 304.92 531.67 T
4 10 Q
(<object>) 359.95 531.67 T
0 0 0 1 0 0 0 K
108 494.01 522 502 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 143.01 505.33 T
(ab) 148.32 505.33 T
(le 5.2) 159.89 505.33 T
8 F
(Applicab) 190.47 505.33 T
(le methods f) 228.62 505.33 T
(or diff) 282.79 505.33 T
(erent arguments to) 307.5 505.33 T
4 F
(say-greeting) 394.21 505.33 T
8 F
(.) 466.21 505.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
191.84 633.88 191.84 522.12 2 L
V
0.25 H
0 Z
N
438.16 633.88 438.16 522.12 2 L
V
N
191.72 634 438.28 634 2 L
V
N
191.72 607 438.28 607 2 L
V
N
191.72 522 438.28 522 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "65" 79
%%Page: "66" 80
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(66) 72 677.67 T
0 F
(Chapter 5) 91 677.67 T
(Class Inheritance) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(5.6  De\336nition of a g) 108 495 T
(eneric function) 225 495 T
1 11 Q
(W) 108 474.67 T
(e r) 117.99 474.67 T
(epeat the de\336nitions of the methods for) 130.15 474.67 T
4 10 Q
(say-time-of-day) 324.3 474.67 T
1 11 Q
( and) 414.3 474.67 T
4 10 Q
(say-time-) 438.43 474.67 T
(offset) 108 460.67 T
1 11 Q
( her) 144 460.67 T
(e:) 162.57 460.67 T
4 9 Q
(define method say-time-of-day \050time :: <time-of-day>\051 => \050\051) 108 440 T
(let\050hours, minutes\051 = decode-total-seconds\050time\051;) 118.8 429 T
(format-out) 118.8 418 T
(\050"%d:%s%d", hours, if \050minutes < 10\051 "0" else "" end, minutes\051;) 129.6 407 T
(end method say-time-of-day;) 108 396 T
(define method say-time-offset \050time :: <time-offset>\051 => \050\051) 108 377 T
(let\050hours, minutes\051 = decode-total-seconds\050time\051;) 118.8 366 T
(format-out\050"%s %d:%s%d",) 118.8 355 T
(if \050past?\050time\051\051 "minus" else "plus" end,) 178.2 344 T
(hours,) 178.2 333 T
(if \050minutes < 10\051 "0" else "" end,) 178.2 322 T
(minutes\051;) 178.2 311 T
(end method say-time-offset;) 108 300 T
1 11 Q
(Now that) 108 279.67 T
4 10 Q
(decode-total-seconds) 156.9 279.67 T
1 11 Q
( has an applicable method for instances of) 276.89 279.67 T
4 10 Q
(<time-offset>) 108 265.67 T
1 11 Q
( and) 186 265.67 T
4 10 Q
(<time-of-day>) 210.12 265.67 T
1 11 Q
(, both these methods work corr) 288.12 265.67 T
(ectly:) 439.27 265.67 T
6 9 Q
(?) 108 245 T
4 F
(say-time-of-day\050*my-time-of-day*\051;) 118.8 245 T
6 F
(0:02) 108 234 T
(?) 108 215 T
4 F
(say-time-of-day\050*your-time-of-day*\051;) 118.8 215 T
6 F
(8:30) 108 204 T
(?) 108 185 T
4 F
(say-time-offset\050*my-time-offset*\051;) 118.8 185 T
6 F
(plus 15:20) 108 174 T
(?) 108 155 T
4 F
(say-time-offset\050*your-time-offset*\051;) 118.8 155 T
6 F
(minus 6:45) 108 144 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Performance note:) 141 620.67 T
1 F
( The Dylan compiler and r) 232.06 620.67 T
(un-time system ensur) 360.07 620.67 T
(e) 465.16 620.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.17 (that the method-dispatch r) 141 606.67 P
-0.17 (ules ar) 270.26 606.67 P
-0.17 (e followed for every call to a generic) 302.25 606.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(function. Given accurate type declarations, however) 141 592.67 T
(, a compiler can) 393.83 592.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(usually compute the r) 141 578.67 T
(esult of the dispatch r) 247.3 578.67 T
(ules at compile time, so) 352.41 578.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the executed code is just as ef) 141 564.67 T
(\336cient as a normal function call in a lan-) 283.16 564.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(guage without generic functions and methods. See Chapter 19,) 141 550.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Performance and Flexibility) 141 536.67 T
1 F
(.) 264.26 536.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 633.88 135 529.12 2 L
V
0.25 H
0 Z
N
486 633.88 486 529.12 2 L
V
N
134.88 634 486.12 634 2 L
V
N
134.88 529 486.12 529 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "66" 80
%%Page: "67" 81
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.6 Definition of a generic function) 386.58 677.67 T
2 F
(67) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(W) 108 640.67 T
(e have de\336ned two methods:) 117.99 640.67 T
4 10 Q
(say-time-offset) 261.31 640.67 T
1 11 Q
( and) 351.31 640.67 T
4 10 Q
(say-time-of-day) 375.43 640.67 T
1 11 Q
(. A) 464.21 640.67 T
(method de\336ned with) 108 626.67 T
4 10 Q
(define method) 213.35 626.67 T
1 11 Q
( cannot exist without a) 291.35 626.67 T
2 F
(generic function) 404.36 626.67 T
1 F
(.) 486.54 626.67 T
(When you de\336ne a method, and no generic function of that name exists, Dylan) 108 612.67 T
(automatically cr) 108 598.67 T
(eates a generic function. When we de\336ned these two methods,) 186.41 598.67 T
-0.03 (ther) 108 584.67 P
-0.03 (e wer) 127.4 584.67 P
-0.03 (e no generic functions with those names de\336ned, so Dylan cr) 153.98 584.67 P
-0.03 (eated mod-) 448.83 584.67 P
(ule variables named) 108 570.67 T
4 10 Q
(say-time-of-day) 208.94 570.67 T
1 11 Q
( and) 298.94 570.67 T
4 10 Q
(say-time-offset) 323.06 570.67 T
1 11 Q
(, cr) 413.06 570.67 T
(eated the) 427.59 570.67 T
(generic functions, stor) 108 556.67 T
(ed the generic functions in the module variables, and) 215.58 556.67 T
(added the methods to the generic functions.) 108 542.67 T
(These two methods ar) 135 528.67 T
(e logically r) 242.37 528.67 T
(elated to each other) 298.71 528.67 T
(, but have no explicit) 392.95 528.67 T
(r) 108 514.67 T
(elationship in the code, other than in the similarity of their names. A cleaner) 112.15 514.67 T
-0.07 (appr) 108 500.67 P
-0.07 (oach is to abstract the concept of what these methods ar) 130.87 500.67 P
-0.07 (e trying to do \321 that) 400.49 500.67 P
(is, to describe an object. T) 108 486.67 T
(o intr) 231.18 486.67 T
(oduce this abstraction, we de\336ne a new generic) 257.27 486.67 T
(function.) 108 472.67 T
(W) 135 458.67 T
(e use) 144.99 458.67 T
4 10 Q
(define generic) 172.32 458.67 T
1 11 Q
( to de\336ne the generic function explicitly:) 256.32 458.67 T
5 9 Q
(// Given an object, print a description of the object) 108 438 T
4 F
(define generic say \050any-object :: <object>\051 => \050\051;) 108 427 T
1 11 Q
(This generic function has a name:) 108 406.67 T
4 10 Q
(say) 273.47 406.67 T
1 11 Q
(. It r) 290.25 406.67 T
(eceives one ar) 309.94 406.67 T
(gument: the object to) 377.54 406.67 T
-0.05 (describe. That ar) 108 392.67 P
-0.05 (gument must be of the type) 188.47 392.67 P
4 10 Q
-0.1 (<object>) 324.87 392.67 P
1 11 Q
-0.05 (. All objects ar) 372.87 392.67 P
-0.05 (e of the type) 441.41 392.67 P
4 10 Q
(<object>) 108 378.67 T
1 11 Q
(, so this generic function does not r) 156 378.67 T
(estrict the type of its ar) 325.59 378.67 T
(gument.) 436.48 378.67 T
(Our de\336nition for the generic function) 135 364.67 T
4 10 Q
(say) 324.1 364.67 T
1 11 Q
( is similar to that of the generic) 342.1 364.67 T
(function that Dylan would have cr) 108 350.67 T
(eated automatically if we had de\336ned a) 275.49 350.67 T
-0.37 (method for) 108 336.67 P
4 10 Q
-0.8 (say) 164.48 336.67 P
1 11 Q
-0.37 ( befor) 182.48 336.67 P
-0.37 (e we de\336ned the generic function) 210.03 336.67 P
4 10 Q
-0.8 (say) 372.6 336.67 P
1 11 Q
-0.37 (. \050The only dif) 389.38 336.67 P
-0.37 (fer) 456.46 336.67 P
-0.37 (ence is) 469.54 336.67 P
(that the automatically de\336ned generic function would have a mor) 108 322.67 T
(e general value) 427.49 322.67 T
(declaration.\051 However) 108 308.67 T
(, de\336ning the generic function explicitly enables us to for-) 216.39 308.67 T
(malize its purpose, to name the parameter) 108 294.67 T
(, to specify a type constraint on the) 312.28 294.67 T
(parameter) 108 280.67 T
(, to specify the r) 157.32 280.67 T
(eturn values and their types, and to give comments) 234.48 280.67 T
(about the generic function as a whole. The generic function de\336nes the) 108 266.67 T
2 F
(contract) 453.71 266.67 T
1 F
(that all methods for this generic function must obey) 108 252.67 T
(. The contract of the) 358.32 252.67 T
4 10 Q
(say) 457.35 252.67 T
1 11 Q
(generic function is as follows:) 108 238.67 T
-0.05 (The) 135 220.67 P
4 10 Q
-0.11 (say) 156.11 220.67 P
1 11 Q
-0.05 ( generic function r) 174.11 220.67 P
-0.05 (eceives one r) 262.62 220.67 P
-0.05 (equir) 324.61 220.67 P
-0.05 (ed ar) 350.02 220.67 P
-0.05 (gument, which must be of) 374.36 220.67 P
(the type) 135 206.67 T
4 10 Q
(<object>) 177.34 206.67 T
1 11 Q
(. It prints a description of the object. The) 225.34 206.67 T
4 10 Q
(say) 423.82 206.67 T
1 11 Q
( generic) 441.82 206.67 T
(function r) 135 192.67 T
(eturns no values.) 182.67 192.67 T
(Dylan r) 108 172.67 T
(equir) 144.63 172.67 T
(es all the methods for a generic function to have congr) 170.04 172.67 T
(uent parame-) 433.41 172.67 T
(ter lists and values declarations. See Section 12.2.5, page 176.) 108 158.67 T
(Now) 135 144.67 T
(, we de\336ne two methods for) 158.31 144.67 T
4 10 Q
(say) 297.46 144.67 T
1 11 Q
(. The method for) 314.24 144.67 T
4 10 Q
(say) 398.11 144.67 T
1 11 Q
( on) 416.11 144.67 T
4 10 Q
(<time-of-) 434.02 144.67 T
(day>) 108 130.67 T
1 11 Q
( ful\336lls the same purpose \050and has the same body\051 as the) 132 130.67 T
4 10 Q
(say-time-of-day) 410.02 130.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "67" 81
%%Page: "68" 82
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(68) 72 677.67 T
0 F
(Chapter 5) 91 677.67 T
(Class Inheritance) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(method, which we r) 108 640.67 T
(emove fr) 205.35 640.67 T
(om the library with an editor or a gestur) 248.38 640.67 T
(e in the) 443.81 640.67 T
(envir) 108 626.67 T
(onment.) 133.23 626.67 T
4 9 Q
(define method say \050time :: <time-of-day>\051 => \050\051) 108 606 T
(let \050hours, minutes\051 = decode-total-seconds\050time\051;) 118.8 595 T
(format-out) 118.8 584 T
(\050"%d:%s%d", hours, if \050minutes < 10\051 "0" else "" end, minutes\051;) 129.6 573 T
(end method say;) 108 562 T
1 11 Q
(Similarly) 108 541.67 T
(, the method for) 151.03 541.67 T
4 10 Q
(say) 231.75 541.67 T
1 11 Q
( on) 249.75 541.67 T
4 10 Q
(<time-offset>) 267.66 541.67 T
1 11 Q
( is intended to r) 345.66 541.67 T
(eplace) 421.83 541.67 T
4 10 Q
(say-) 455.32 541.67 T
(time-offset) 108 527.67 T
1 11 Q
(, which we r) 174 527.67 T
(emove.) 233.65 527.67 T
4 9 Q
(define method say \050time :: <time-offset>\051 => \050\051) 108 507 T
(let\050hours, minutes\051 = decode-total-seconds\050time\051;) 118.8 496 T
(format-out\050"%s %d:%s%d",) 118.8 485 T
(if \050past?\050time\051\051 "minus" else "plus" end,) 178.2 474 T
(hours,) 178.2 463 T
(if \050minutes < 10\051 "0" else "" end,) 178.2 452 T
(minutes\051;) 178.2 441 T
(end method say-time-offset;) 108 430 T
1 11 Q
(Figur) 108 403.67 T
(e 5.5 shows that the generic function) 134.21 403.67 T
4 10 Q
(say) 313.99 403.67 T
1 11 Q
( has two methods de\336ned for it.) 331.99 403.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 131.01 504 139 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 5.5) 187.47 142.33 T
8 F
(Methods f) 240.27 142.33 T
(or the) 283.88 142.33 T
4 F
(say) 312.23 142.33 T
8 F
( gener) 330.23 142.33 T
(ic function.) 358.73 142.33 T
0 0 0 1 0 0 0 K
108 155 504 383 C
108 159 504 381 C
0 0 -47 391 163 391 210 110.5 165 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f5-5.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f5-5 .eps)%%CreationDate: (6/6/96) (2:04 PM)%%BoundingBox: 0 -47 391 163%%HiResBoundingBox: 1.0083 -46.6583 389.4917 163.6583%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 193.3333 -5.3333 193.3333 -5.3333%AI3_TileBox: -81.6667 -370.3333 470.3333 359.6667%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -34.6667 282.6667 2 1020 726 18 1 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Artwork) Ln0 A1 Ap0 O0.9 g0 R0 G800 Ar0 J 0 j 0.65 w 4 M []0 d%AI3_Note:0 D389.1667 -46.3333 m389.1667 163.3333 L1.3333 163.3333 L1.3333 -46.3333 L389.1667 -46.3333 Lb1 g1 w255.3333 135.6667 m255.3333 152.6667 L141.3333 152.6667 L141.3333 135.6667 L255.3333 135.6667 Lf0 R0 G0.65 w380.3333 62.9167 m380.3333 123.6667 L10.3333 123.6667 L10.3333 62.9167 L380.3333 62.9167 Lb380.3333 -37.3333 m380.3333 53.9167 L10.3333 53.9167 L10.3333 -37.3333 L380.3333 -37.3333 Lb0 To1 0 0 1 198.3333 141.1667 0 TpTP-50.2122 0 Td0 Tr0 g1 w/_Helvetica 11 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq11 0 Tl0 Tc0 Tw(Gener) Tx 0 -60 Tk (ic funct) Tx 0 -40 Tk (ion ) Tx /_Courier-Bold 9 Tf(say) Tx (\r) TX TO0 To1 0 0 1 15.8333 111.6667 0 TpTP0 Tr0 Ta10 0 Tl(define method say \(time :: <time-of-day>\) => \(\)\r) Tx T*(  let \(hours, minutes\) = decode-total-seconds\(time\);\r) Tx T*(  format-out\r) Tx T*(    \("%d:%s%d", hours, if \(minutes < 10\) "0" else "" end, minutes\);\r) Tx T*(end method say;\r) Tx T*(\r) Tx TO0 To1 0 0 1 16.8333 43.1667 0 TpTP0 Tr(define method say \(time :: <time-offset>\) => \(\)\r) Tx T*(  let\(hours, minutes\) = decode-total-seconds\(time\);\r) Tx T*(  format-out\("%s %d:%s%d",\r) Tx T*(             if \(past?\(time\)\) "minus" else "plus" end,\r) Tx T*(             hours,\r) Tx T*(             if \(minutes < 10\) "0" else "" end,\r) Tx T*(             minutes\);\r) Tx T*(end method say-time-offset;) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 155 504 383 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "68" 82
%%Page: "69" 83
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.7 Use of) 330.42 677.67 T
5 F
(next-method) 371.06 677.67 T
0 F
( to call another method) 433.76 677.67 T
2 F
(69) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(W) 108 640.67 T
(e can call) 117.99 640.67 T
4 10 Q
(say) 165.08 640.67 T
1 11 Q
(:) 183.08 640.67 T
6 9 Q
(?) 108 620 T
4 F
(say\050*my-time-of-day*\051;) 118.8 620 T
6 F
(0:02) 108 609 T
1 11 Q
(In the pr) 108 582.67 T
(eceding call, the ar) 149.62 582.67 T
(gument is of the type) 240.18 582.67 T
4 10 Q
(<time-of-day>) 346.02 582.67 T
1 11 Q
(, so the method) 424.02 582.67 T
(on) 108 568.67 T
4 10 Q
(<time-of-day>) 123.16 568.67 T
1 11 Q
( is the only applicable method. That method is invoked.) 201.16 568.67 T
6 9 Q
(?) 108 548 T
4 F
(say\050*my-time-offset*\051;) 118.8 548 T
6 F
(plus 15:20) 108 537 T
1 11 Q
(In the pr) 108 510.67 T
(eceding call, the ar) 149.62 510.67 T
(gument is of the type) 240.18 510.67 T
4 10 Q
(<time-offset>) 346.02 510.67 T
1 11 Q
(, so the method) 424.02 510.67 T
(on) 108 496.67 T
4 10 Q
(<time-offset>) 123.16 496.67 T
1 11 Q
( is the only applicable method. That method is invoked.) 201.16 496.67 T
3 15 Q
(5.7  Use of) 108 457 T
4 14 Q
(next-method) 172.95 457 T
3 15 Q
( to call another method) 265.35 457 T
1 11 Q
(Notice that ther) 108 436.67 T
(e is duplication of code in the two methods for) 184.07 436.67 T
4 10 Q
(say) 413.2 436.67 T
1 11 Q
(, as shown in) 429.97 436.67 T
(Figur) 108 422.67 T
(e 5.5. Both methods call) 134.21 422.67 T
4 10 Q
(decode-total-seconds) 251.59 422.67 T
1 11 Q
( to get the hours and min-) 371.59 422.67 T
(utes, and call) 108 408.67 T
4 10 Q
(format-out) 174.56 408.67 T
1 11 Q
( to print the hours and minutes. Both methods print a) 234.56 408.67 T
(leading zer) 108 394.67 T
(o for the minutes, if appr) 162.08 394.67 T
(opriate. These two tasks ar) 283.05 394.67 T
(e all that the) 412.61 394.67 T
(method on) 108 380.67 T
4 10 Q
(<time-of-day>) 163.6 380.67 T
1 11 Q
( does. The method on) 241.6 380.67 T
4 10 Q
(<time-offset>) 349.28 380.67 T
1 11 Q
( does a bit) 427.28 380.67 T
(mor) 108 366.67 T
(e; it prints either) 127.87 366.67 T
4 10 Q
(minus) 210.55 366.67 T
1 11 Q
( or) 240.55 366.67 T
4 10 Q
(plus) 256.4 366.67 T
1 11 Q
(, depending on the value of the) 280.4 366.67 T
4 10 Q
(past?) 434.52 366.67 T
1 11 Q
( slot.) 464.52 366.67 T
(W) 108 352.67 T
(e can eliminate this duplication by de\336ning another method that does the) 117.99 352.67 T
(shar) 108 338.67 T
(ed work. This method will be on the) 128.71 338.67 T
4 10 Q
(<time>) 307.6 338.67 T
1 11 Q
( class, so it will be applicable to) 343.6 338.67 T
(instances of) 108 324.67 T
4 10 Q
(<time-of-day>) 167.74 324.67 T
1 11 Q
( and) 245.74 324.67 T
4 10 Q
(<time-offset>) 269.86 324.67 T
1 11 Q
(. The method for) 347.86 324.67 T
4 10 Q
(<time-of-) 431.74 324.67 T
(day>) 108 310.67 T
1 11 Q
( is no longer needed, because the new method does the same work. How-) 132 310.67 T
(ever) 108 296.67 T
(, a r) 128.28 296.67 T
(evised method for) 146.18 296.67 T
4 10 Q
(<time-offset>) 237.48 296.67 T
1 11 Q
( is needed, to do the extra work of) 315.48 296.67 T
-0.14 (printing) 108 282.67 P
4 10 Q
-0.29 (minus) 150.48 282.67 P
1 11 Q
-0.14 ( or) 180.48 282.67 P
4 10 Q
-0.29 (plus) 196.06 282.67 P
1 11 Q
-0.14 (, and to call the method on) 220.06 282.67 P
4 10 Q
-0.29 (<time>) 351.48 282.67 P
1 11 Q
-0.14 (, which is the next most) 387.48 282.67 P
(speci\336c method.) 108 268.67 T
-0.33 (Y) 135 254.67 P
-0.33 (ou can use the) 141.32 254.67 P
4 10 Q
-0.71 (next-method) 212.26 254.67 P
1 11 Q
-0.33 ( function to call the next most speci\336c method.) 278.27 254.67 P
(Recall that the r) 108 240.67 T
(esult of Dylan\325s method dispatch pr) 184.13 240.67 T
(ocedur) 358.38 240.67 T
(e is a list of applicable) 392.04 240.67 T
-0.31 (methods, sorted by speci\336city) 108 226.67 P
-0.31 (. When one method calls the) 251.07 226.67 P
4 10 Q
-0.68 (next-method) 389.6 226.67 P
1 11 Q
-0.31 ( function,) 455.6 226.67 P
(Dylan consults the list of sorted methods and invokes the next most speci\336c) 108 212.67 T
(method on the list. \050It is an err) 108 198.67 T
(or to call) 254.5 198.67 T
4 10 Q
(next-method) 299.48 198.67 T
1 11 Q
( fr) 365.48 198.67 T
(om the least speci\336c) 376.04 198.67 T
(method.\051) 108 184.67 T
(W) 135 170.67 T
(e r) 144.99 170.67 T
(emove the de\336nitions of the existing) 157.15 170.67 T
4 10 Q
(say) 336.53 170.67 T
1 11 Q
( methods, and de\336ne these) 354.53 170.67 T
(new methods:) 108 156.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "69" 83
%%Page: "70" 84
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(70) 72 677.67 T
0 F
(Chapter 5) 91 677.67 T
(Class Inheritance) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define method say \050time :: <time>\051 => \050\051) 108 642 T
(let \050hours, minutes\051 = decode-total-seconds\050time\051;) 118.8 631 T
(format-out) 118.8 620 T
(\050"%d:%s%d", hours, if \050minutes < 10\051 "0" else "" end, minutes\051;) 129.6 609 T
(end method say;) 108 598 T
(define method say \050time :: <time-offset>\051) 108 579 T
(format-out\050"%s ", if \050past?\050time\051\051 "minus" else "plus" end\051;) 118.8 568 T
(next-method\050\051;) 118.8 557 T
(end method say;) 108 546 T
1 11 Q
(W) 108 525.67 T
(e can call) 117.99 525.67 T
4 10 Q
(say) 165.08 525.67 T
1 11 Q
(:) 183.08 525.67 T
6 9 Q
(?) 108 505 T
4 F
(say\050*my-time-of-day*\051;) 118.8 505 T
6 F
(0:02) 108 494 T
1 11 Q
(In the pr) 108 473.67 T
(eceding call, the ar) 149.62 473.67 T
(gument is of the type) 240.18 473.67 T
4 10 Q
(<time-of-day>) 346.02 473.67 T
1 11 Q
(, so the method) 424.02 473.67 T
(on) 108 459.67 T
4 10 Q
(<time>) 123.16 459.67 T
1 11 Q
( is the only applicable method. That method is invoked.) 159.16 459.67 T
6 9 Q
(?) 108 439 T
4 F
(say\050*my-time-offset*\051;) 118.8 439 T
6 F
(plus 15:20) 108 428 T
1 11 Q
-0.4 (In the pr) 108 407.67 P
-0.4 (eceding call, the ar) 148.83 407.67 P
-0.4 (gument is of the type) 238.19 407.67 P
4 10 Q
-0.87 (<time-offset>) 342.04 407.67 P
1 11 Q
-0.4 (, so two methods) 420.04 407.67 P
-0.45 (ar) 108 393.67 P
-0.45 (e applicable. The method on) 117.65 393.67 P
4 10 Q
-0.99 (<time-offset>) 255.74 393.67 P
1 11 Q
-0.45 ( is mor) 333.74 393.67 P
-0.45 (e speci\336c than is the method) 366.06 393.67 P
(on) 108 379.67 T
4 10 Q
(<time>) 123.16 379.67 T
1 11 Q
(, so the method on) 159.16 379.67 T
4 10 Q
(<time-offset>) 251.69 379.67 T
1 11 Q
( is called. That method on) 329.69 379.67 T
4 10 Q
(<time-) 457.92 379.67 T
(offset>) 108 365.67 T
1 11 Q
( prints) 150 365.67 T
4 10 Q
(minus) 184.31 365.67 T
1 11 Q
( or) 214.31 365.67 T
4 10 Q
(plus) 230.16 365.67 T
1 11 Q
(, and calls) 254.16 365.67 T
4 10 Q
(next-method) 305.23 365.67 T
1 11 Q
(. The) 371.23 365.67 T
4 10 Q
(next-method) 397.9 365.67 T
1 11 Q
( func-) 463.9 365.67 T
(tion calls the method on) 108 351.67 T
4 10 Q
(<time>) 227.76 351.67 T
1 11 Q
(, which prints the hours and minutes.) 263.76 351.67 T
-0.37 (Using) 135 337.67 P
4 10 Q
-0.82 (next-method) 166.32 337.67 P
1 11 Q
-0.37 ( is convenient in cases such as this, wher) 232.32 337.67 P
-0.37 (e a method on a) 425.75 337.67 P
(super) 108 323.67 T
(class can do most of the work, but a method on a subclass needs to do addi-) 135.32 323.67 T
(tional work.) 108 309.67 T
(When) 135 295.67 T
4 10 Q
(next-method) 166.82 295.67 T
1 11 Q
( is called with no ar) 232.82 295.67 T
(guments, as it is in the method on) 327.63 295.67 T
4 10 Q
(<time-offset>) 108 281.67 T
1 11 Q
(, Dylan calls the next most speci\336c method with the same ar) 186 281.67 T
(gu-) 476.62 281.67 T
(ments pr) 108 267.67 T
(ovided to the method that calls) 151.14 267.67 T
4 10 Q
(next-method) 304.85 267.67 T
1 11 Q
(.) 370.85 267.67 T
(Y) 135 253.67 T
(ou can pr) 141.32 253.67 T
(ovide ar) 187.01 253.67 T
(guments to) 226.82 253.67 T
4 10 Q
(next-method) 284.29 253.67 T
1 11 Q
(. For example, you could pr) 350.29 253.67 T
(o-) 484.21 253.67 T
-0.19 (vide a keywor) 108 239.67 P
-0.19 (d ar) 176.86 239.67 P
-0.19 (gument with a value that each method can manipulate \050such as) 195.79 239.67 P
(adding a value to a number) 108 225.67 T
(, or appending an element to a list\051. If you pr) 241.45 225.67 T
(ovide) 458.54 225.67 T
(ar) 108 211.67 T
(guments to) 117.65 211.67 T
4 10 Q
(next-method) 175.12 211.67 T
1 11 Q
(, the ar) 241.12 211.67 T
(guments must be compatible with the generic) 274.28 211.67 T
(function, as described in Section 12.2.5, page 176. In addition, you cannot supply) 108 197.67 T
-0.13 (r) 108 183.67 P
-0.13 (equir) 112.15 183.67 P
-0.13 (ed ar) 137.56 183.67 P
-0.13 (guments that have classes dif) 161.82 183.67 P
-0.13 (fer) 303.39 183.67 P
-0.13 (ent fr) 316.47 183.67 P
-0.13 (om those of the original r) 342.16 183.67 P
-0.13 (equir) 463.98 183.67 P
-0.13 (ed) 489.39 183.67 P
(ar) 108 169.67 T
(guments to the generic function, if doing so would have changed the method) 117.65 169.67 T
(dispatch in any way) 108 155.67 T
(. Pr) 205.01 155.67 T
(oviding ar) 221.3 155.67 T
(guments to) 271.56 155.67 T
4 10 Q
(next-method) 329.03 155.67 T
1 11 Q
( is an advanced tech-) 395.03 155.67 T
(nique; see Section 12.2.3, page 172, and Section 17.2.2, page 260.) 108 141.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "70" 84
%%Page: "71" 85
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.8 The time library \050so far\051) 415.27 677.67 T
2 F
(71) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(5.8  The time librar) 108 638 T
(y \050so far\051) 216.82 638 T
1 11 Q
(In the course of intr) 108 617.67 T
(oducing methods, classes, and generic functions, we have cr) 203.17 617.67 T
(e-) 495 617.67 T
(ated elements of a library dealing with two kinds of time. Now) 108 603.67 T
(, we constr) 412.8 603.67 T
(uct a) 465.29 603.67 T
(simple library containing those elements \050we will continue to develop the time) 108 589.67 T
(library thr) 108 575.67 T
(oughout this book\051. W) 157.68 575.67 T
(e r) 265.77 575.67 T
(epr) 277.94 575.67 T
(esent the time library in four \336les: a LID) 293.97 575.67 T
(\336le, a library \336le, a library implementation \336le, and a test \336le. W) 108 561.67 T
(e could have) 417.96 561.67 T
(expr) 108 547.67 T
(essed this library in thr) 129.7 547.67 T
(ee \336les, by combining into a single \336le the library) 241.67 547.67 T
(implementation \336le and the test \336le, but we decided that it would be clear) 108 533.67 T
(er to) 466.88 533.67 T
(separate the underlying implementation \050the de\336nitions of classes, methods, and) 108 519.67 T
(generic functions\051 fr) 108 505.67 T
(om the test \050wher) 205.9 505.67 T
(e we cr) 290.89 505.67 T
(eate instances and call) 325.13 505.67 T
4 10 Q
(say) 435.73 505.67 T
1 11 Q
( on them\051.) 453.73 505.67 T
(The library \336le de\336nes the) 108 381.67 T
4 10 Q
(time) 238.32 381.67 T
1 11 Q
( library and the) 262.32 381.67 T
4 10 Q
(time) 339.99 381.67 T
1 11 Q
( module.) 363.99 381.67 T
(The library implementation \336le de\336nes the classes, methods, and generic) 108 194.67 T
(functions.) 108 180.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The LID \336le:) 256.67 477.33 T
4 9 Q
(time.lid) 313.36 477.33 T
8 10 Q
(.) 356.55 477.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(library: time) 114 458 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(files:) 114 439 T
( library) 157.2 439 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(library-implementation) 162.6 428 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(test) 162.6 417 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The libr) 237.24 353.33 T
(ar) 270.48 353.33 T
(y \336le:) 279.67 353.33 T
4 9 Q
(library.dylan) 305.79 353.33 T
8 10 Q
(.) 375.98 353.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: dylan-user) 114 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define library time) 114 315 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 124.8 304 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use format-out;) 124.8 293 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end library time;) 114 282 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define module time) 114 263 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 124.8 252 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use format-out;) 124.8 241 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end module time;) 114 230 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 489.88 108 410.12 2 L
V
0.25 H
0 Z
N
522 489.88 522 410.12 2 L
V
N
107.88 490 522.12 490 2 L
V
N
107.88 470 522.12 470 2 L
V
N
107.88 410 522.12 410 2 L
V
N
108 365.88 108 223.12 2 L
V
N
522 365.88 522 223.12 2 L
V
N
107.88 366 522.12 366 2 L
V
N
107.88 346 522.12 346 2 L
V
N
107.88 223 522.12 223 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "71" 85
%%Page: "72" 86
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(72) 72 677.67 T
0 F
(Chapter 5) 91 677.67 T
(Class Inheritance) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
0 X
(The implementation \336le:) 176.54 621.33 T
4 9 Q
(library-implementation.dylan) 285.48 621.33 T
8 10 Q
(.) 436.67 621.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: time) 114 602 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Class definitions) 114 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <time> \050<object>\051) 114 564 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 124.8 553 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <time>;) 114 542 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// A specific time of day from 00:00 \050midnight\051 to before 24:00 \050tomorrow\051) 114 523 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <time-of-day> \050<time>\051) 114 512 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <time-of-day>;) 114 501 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// A relative time between -24:00 and +24:00) 114 482 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <time-offset> \050<time>\051) 114 471 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <time-offset>;) 114 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Method for determining whether a time offset is in the past) 114 441 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method past? \050time :: <time-offset>\051 => \050past? :: <boolean>\051) 114 430 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time.total-seconds < 0;) 124.8 419 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method past?;) 114 408 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Methods for encoding and decoding total seconds) 114 389 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method encode-total-seconds) 114 370 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 135.6 359 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=>) 119.4 348 T
(\050total-seconds :: <integer>\051) 135.6 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050\050hours * 60\051 + minutes\051 * 60 + seconds;) 124.8 337 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method encode-total-seconds;) 114 326 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method decode-total-seconds) 114 307 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050time :: <time>\051) 135.6 296 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 119.4 285 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(decode-total-seconds\050abs\050time.total-seconds\051\051;) 124.8 274 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method decode-total-seconds;) 114 263 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method decode-total-seconds) 114 244 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050total-seconds :: <integer>\051) 135.6 233 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 119.4 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let\050total-minutes, seconds\051 = truncate/\050total-seconds, 60\051;) 124.8 211 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let\050hours, minutes\051 = truncate/\050total-minutes, 60\051;) 124.8 200 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050hours, minutes, seconds\051;) 124.8 189 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method decode-total-seconds;) 114 178 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 633.88 108 171.12 2 L
V
0.25 H
0 Z
N
522 633.88 522 171.12 2 L
V
N
107.88 634 522.12 634 2 L
V
N
107.88 614 522.12 614 2 L
V
N
107.88 171 522.12 171 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "72" 86
%%Page: "73" 87
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.8 The time library \050so far\051) 415.27 677.67 T
2 F
(73) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(The test \336le cr) 108 438.67 T
(eates instances and calls) 175.93 438.67 T
4 10 Q
(say) 295.86 438.67 T
1 11 Q
( on the instances. The test \336le can) 313.86 438.67 T
(access variables de\336ned in the implementation \336le, because both \336les ar) 108 424.67 T
(e in the) 456.59 424.67 T
4 10 Q
(time) 108 410.67 T
1 11 Q
( module.) 132 410.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// The say generic function and its methods) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Given an object, print a description of the object) 114 597 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define generic say \050any-object :: <object>\051 => \050\051;) 114 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050time :: <time>\051 => \050\051) 114 567 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let \050hours, minutes\051 = decode-total-seconds\050time\051;) 124.8 556 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out) 124.8 545 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050"%d:%s%d", hours, if \050minutes < 10\051 "0" else "" end, minutes\051;) 135.6 534 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 114 523 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050time :: <time-offset>\051) 114 504 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"%s ", if \050past?\050time\051\051 "minus" else "plus" end\051;) 124.8 493 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 124.8 482 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 114 471 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The test \336le:) 250.99 377.33 T
4 9 Q
(test.dylan) 308.23 377.33 T
8 10 Q
(.) 362.23 377.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: time) 114 358 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define variable *my-time-offset* :: <time-offset>) 114 339 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<time-offset>, total-seconds: encode-total-seconds\05015, 20, 10\051\051;) 124.8 328 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define variable *your-time-offset* :: <time-offset>) 114 309 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<time-offset>, total-seconds: - encode-total-seconds\0506, 45, 30\051\051;) 124.8 298 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define variable *my-time-of-day*) 114 279 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<time-of-day>, total-seconds: encode-total-seconds\0500, 2, 0\051\051;) 124.8 268 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define variable *your-time-of-day*) 114 249 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<time-of-day>, total-seconds: encode-total-seconds\0508, 30, 59\051\051;) 124.8 238 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050*my-time-offset*\051;) 114 219 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050*your-time-offset*\051;) 114 200 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050*my-time-of-day*\051;) 114 181 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050*your-time-of-day*\051;) 114 162 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The implementation \336le:) 150.2 635.33 T
4 9 Q
(library-implementation.dylan) 259.12 635.33 T
8 10 Q
(.) 410.33 635.33 T
9 F
( \050contin) 413.11 635.33 T
(ued\051) 445.8 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 464.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 464.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 464 522.12 464 2 L
V
N
108 389.88 108 155.12 2 L
V
N
522 389.88 522 155.12 2 L
V
N
107.88 390 522.12 390 2 L
V
N
107.88 370 522.12 370 2 L
V
N
107.88 155 522.12 155 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "73" 87
%%Page: "74" 88
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(74) 72 677.67 T
0 F
(Chapter 5) 91 677.67 T
(Class Inheritance) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.42 (When we r) 108 640.67 P
-0.42 (un the) 160.44 640.67 P
4 10 Q
-0.91 (test.dylan) 193.4 640.67 P
1 11 Q
-0.42 ( \336le, Dylan cr) 253.4 640.67 P
-0.42 (eates two instances of) 317.04 640.67 P
4 10 Q
-0.91 (<time-offset>) 423.67 640.67 P
1 11 Q
-0.38 (and two instances of) 108 626.67 P
4 10 Q
-0.84 (<time-of-day>) 209.1 626.67 P
1 11 Q
-0.38 (. It calls) 287.1 626.67 P
4 10 Q
-0.84 (say) 325.69 626.67 P
1 11 Q
-0.38 ( on all four instances. The output) 343.69 626.67 P
(of the test is) 108 612.67 T
6 9 Q
(plus 15:20) 108 592 T
(minus 6:45) 108 581 T
(0:02) 108 570 T
(8:30) 108 559 T
3 15 Q
(5.9  Sum) 108 521 T
(mar) 158.6 521 T
(y) 181.27 521 T
1 11 Q
(In this chapter) 108 500.67 T
(, we cover) 177.24 500.67 T
(ed the following:) 226.46 500.67 T
(\245) 117 480.67 T
(W) 135 480.67 T
(e showed how to use class inheritance.) 144.99 480.67 T
(\245) 117 460.67 T
(W) 135 460.67 T
(e intr) 144.99 460.67 T
(oduced the terminology of classes: dir) 170.34 460.67 T
(ect subclass, subclass, dir) 354.88 460.67 T
(ect) 477.02 460.67 T
(super) 135 446.67 T
(class, super) 162.32 446.67 T
(class, dir) 218.06 446.67 T
(ect instance, indir) 260.54 446.67 T
(ect instance, instance, subtype,) 346.11 446.67 T
(and supertype.) 135 432.67 T
(\245) 117 412.67 T
(W) 135 412.67 T
(e showed how method dispatch works for a generic function with one) 144.99 412.67 T
(ar) 135 398.67 T
(gument, when ther) 144.65 398.67 T
(e is mor) 237.27 398.67 T
(e than one applicable method.) 275.77 398.67 T
(\245) 117 378.67 T
(W) 135 378.67 T
(e cr) 144.99 378.67 T
(eated a generic function explicitly \050with) 162.04 378.67 T
4 10 Q
(define generic) 357.62 378.67 T
1 11 Q
(\051.) 441.62 378.67 T
(\245) 117 358.67 T
(W) 135 358.67 T
(e used) 144.99 358.67 T
4 10 Q
(next-method) 179.04 358.67 T
1 11 Q
( to call the next most speci\336c method.) 245.04 358.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "74" 88
%%Page: "75" 89
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(75) 301.25 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(6) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(6) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Multimethods) 109 566.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
(In this chapter) 108 424.67 T
(, we show two important techniques. First, we de\336ne methods) 177.24 424.67 T
(for built-in generic functions \321 in this case, for the functions) 108 410.67 T
4 10 Q
(+) 405.4 410.67 T
1 11 Q
(,) 411.4 410.67 T
4 10 Q
(<) 416.9 410.67 T
1 11 Q
(, and) 422.9 410.67 T
4 10 Q
(=) 449.77 410.67 T
1 11 Q
(. Second,) 455.77 410.67 T
(we de\336ne multimethods. W) 108 396.67 T
(e describe how method dispatch works for) 242.44 396.67 T
(multimethods.) 108 382.67 T
3 15 Q
(6.1  Methods f) 108 343 T
(o) 189.79 343 T
(r the) 197.31 343 T
4 14 Q
(+) 227.38 343 T
3 15 Q
( g) 235.79 343 T
(eneric function) 246.84 343 T
1 11 Q
-0.33 (W) 108 322.67 P
-0.33 (e need to make it possible to add one time to another) 117.99 322.67 P
-0.33 (. W) 370.5 322.67 P
-0.33 (e could de\336ne a method) 385.66 322.67 P
(with a name such as) 108 308.67 T
4 10 Q
(add) 209.24 308.67 T
1 11 Q
( or) 227.24 308.67 T
4 10 Q
(plus) 243.1 308.67 T
1 11 Q
(. However) 267.1 308.67 T
(, the concept of adding times is the) 317.21 308.67 T
(same as the concept of adding numbers. Dylan alr) 108 294.67 T
(eady pr) 350.98 294.67 T
(ovides the + generic) 388.09 294.67 T
(function for adding numbers. Instead of inventing a new name for the addition) 108 280.67 T
(operation, we de\336ne new methods on the built-in generic function) 108 266.67 T
4 10 Q
(+) 433.04 266.67 T
1 11 Q
(. W) 439.04 266.67 T
(e can) 454.53 266.67 T
(extend) 108 252.67 T
4 10 Q
(+) 143.67 252.67 T
1 11 Q
( by de\336ning new methods for it. In certain languages, this technique is) 149.67 252.67 T
(called) 108 238.67 T
2 F
(operator overloading) 139.53 238.67 T
1 F
(.) 244.96 238.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "75" 89
%%Page: "76" 90
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(76) 72 677.67 T
0 F
(Chapter 6) 91 677.67 T
(Multimethods) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(6.1.1  Method f) 108 390.33 T
(or ad) 181.85 390.33 T
(ding tw) 207.83 390.33 T
(o time offsets) 244.94 390.33 T
1 11 Q
-0.1 (W) 108 370.67 P
-0.1 (e now de\336ne a method for) 117.99 370.67 P
4 10 Q
-0.22 (+) 248.26 370.67 P
1 11 Q
-0.1 (. The method adds two time of) 254.26 370.67 P
-0.1 (fsets and r) 402.63 370.67 P
-0.1 (eturns the) 452.55 370.67 P
(sum, which is also a time of) 108 356.67 T
(fset:) 242.3 356.67 T
5 9 Q
(// Method on <time-offset>, <time-offset>) 108 336 T
4 F
(define method \134+) 108 325 T
5 F
(// 1) 481.83 325 T
4 F
(\050offset1 :: <time-offset>, offset2 :: <time-offset>\051) 129.6 314 T
5 F
(// 2) 481.83 314 T
4 F
(=> \050sum :: <time-offset>\051) 113.4 303 T
5 F
(// 3) 481.83 303 T
4 F
(let sum = offset1.total-seconds + offset2.total-seconds;) 118.8 292 T
5 F
(// 4) 481.83 292 T
4 F
(make\050<time-offset>, total-seconds: sum\051;) 118.8 281 T
5 F
(// 5) 481.83 281 T
4 F
(end method \134+;) 108 270 T
5 F
(// 6) 481.83 270 T
1 11 Q
-0.04 (On line 1, notice that the method is de\336ned on) 108 249.67 P
4 10 Q
-0.08 (\134+) 335.18 249.67 P
1 11 Q
-0.04 (, rather than simply on) 347.18 249.67 P
4 10 Q
-0.08 (+) 460.75 249.67 P
1 11 Q
-0.04 (. When) 466.75 249.67 P
(we de\336ne a method on) 108 235.67 T
4 10 Q
(+) 222.11 235.67 T
1 11 Q
( or on another in\336x function, we need to use a backslash) 228.11 235.67 T
(befor) 108 221.67 T
(e the function name. The backslash clari\336es that we mean the value of the) 133.17 221.67 T
(variable + \050which is a generic function\051, and that we ar) 108 207.67 T
(e not trying to call the) 373.03 207.67 T
(function.) 108 193.67 T
(On line 4, we add the values stor) 135 179.67 T
(ed in the) 294.15 179.67 T
4 10 Q
(total-seconds) 339.25 179.67 T
1 11 Q
( slots of the two) 417.25 179.67 T
(instances. On line 5, we make and r) 108 165.67 T
(eturn a new instance of) 279.75 165.67 T
4 10 Q
(<time-offset>) 395.66 165.67 T
1 11 Q
(. W) 473.66 165.67 T
(e) 489.15 165.67 T
(initialize the) 108 151.67 T
4 10 Q
(total-seconds) 171.02 151.67 T
1 11 Q
( slot to contain the sum calculated in line 4.) 249.02 151.67 T
(T) 135 137.67 T
(o test the method, we need to cr) 140.73 137.67 T
(eate two instances of) 295.52 137.67 T
4 10 Q
(<time-offset>) 399.15 137.67 T
1 11 Q
(:) 477.15 137.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Comparison with C++ and Java:) 141 620.67 T
1 F
( In C++, operator overloading) 301.29 620.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(means customizing the action of any built-in operator for classes) 141 606.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.34 (that you de\336ne. In Dylan, operators ar) 141 592.67 P
-0.34 (e just generic functions, and) 324.92 592.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(you can add methods to those generic functions for your classes.) 141 578.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.21 (In C++, the meaning of an overloaded operator is r) 141 564.67 P
-0.21 (esolved at com-) 386.22 564.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pile time \321 the types of the operands must be known at compile) 141 550.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time. Because Dylan operators ar) 141 536.67 T
(e generic functions, the method) 301.17 536.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is chosen dynamically accor) 141 522.67 T
(ding to the ar) 276.72 522.67 T
(gument types \321at r) 341.9 522.67 T
(un) 438.46 522.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time, if the types may vary at r) 141 508.67 T
(un time.) 289.98 508.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Java does not allow operator overloading. The Java design-) 168 494.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ers believe that overloading of operators r) 141 480.67 T
(esults in inscr) 344.49 480.67 T
(utable) 411.02 480.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(code \050because the meaning of the operator can vary\051. Dylan and) 141 466.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C++ designers believe that, judiciously used, operator overload-) 141 452.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ing permits clear) 141 438.67 T
(er) 222.61 438.67 T
(, mor) 231.41 438.67 T
(e concise code.) 256.77 438.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 633.88 135 431.12 2 L
V
0.25 H
0 Z
N
486 633.88 486 431.12 2 L
V
N
134.88 634 486.12 634 2 L
V
N
134.88 431 486.12 431 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "76" 90
%%Page: "77" 91
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(6.1 Methods for the) 373.77 677.67 T
5 F
(+) 450.55 677.67 T
0 F
( generic function) 456.25 677.67 T
2 F
(77) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define variable *minus-2-hours* =) 108 642 T
(make\050<time-offset>, total-seconds: - encode-total-seconds \0502, 0, 0\051\051;) 118.8 631 T
(define variable *plus-15-20-45* =) 108 612 T
(make\050<time-offset>, total-seconds: encode-total-seconds \05015, 20, 45\051\051;) 118.8 601 T
1 11 Q
(W) 108 580.67 T
(e can add the time of) 117.99 580.67 T
(fsets:) 219.23 580.67 T
6 9 Q
(?) 108 560 T
4 F
( *minus-2-hours* + *plus-15-20-45*;) 113.4 560 T
6 F
({instance <time-offset>}) 108 549 T
1 11 Q
(The r) 108 528.67 T
(esult is a new instance of) 133.31 528.67 T
4 10 Q
(<time-offset>) 256.95 528.67 T
1 11 Q
(. W) 334.95 528.67 T
(e did not save the value) 350.44 528.67 T
(r) 108 514.67 T
(eturned. \050Many envir) 112.15 514.67 T
(onments of) 215.94 514.67 T
(fer a way to access values r) 270.21 514.67 T
(eturned by the lis-) 401.36 514.67 T
-0.18 (tener) 108 500.67 P
-0.18 (.\051 W) 132.06 500.67 P
-0.18 (e can add the time of) 151.03 500.67 P
-0.18 (fsets again, and view the) 251.4 500.67 P
4 10 Q
-0.38 (total-seconds) 373.32 500.67 P
1 11 Q
-0.18 ( slot of the) 451.32 500.67 P
(r) 108 486.67 T
(esult:) 112.15 486.67 T
6 9 Q
(?) 108 466 T
4 F
( decode-total-seconds\050*minus-2-hours* + *plus-15-20-45*\051;) 113.4 466 T
6 F
(13) 108 455 T
(20) 108 444 T
(45) 108 433 T
3 13 Q
(6.1.2  Methods f) 108 403.33 T
(or ad) 187.78 403.33 T
(ding a time of da) 213.76 403.33 T
(y to a time offset) 298.27 403.33 T
1 11 Q
(These methods implement addition between a time of) 108 383.67 T
(fset and a time of day:) 370.05 383.67 T
5 9 Q
(// Method on <time-offset>, <time-of-day>) 108 363 T
4 F
(define method \134+) 108 352 T
(\050offset :: <time-offset>, time-of-day :: <time-of-day>\051) 129.6 341 T
(=> \050sum :: <time-of-day>\051) 113.4 330 T
(make\050<time-of-day>,) 118.8 319 T
(total-seconds: offset.total-seconds + time-of-day.total-seconds\051;) 145.8 308 T
(end method \134+;) 108 297 T
1 11 Q
(The method on) 108 276.67 T
4 10 Q
(<time-offset>) 184.77 276.67 T
1 11 Q
(,) 262.77 276.67 T
4 10 Q
(<time-of-day>) 268.27 276.67 T
1 11 Q
( is invoked when the \336rst ar) 346.27 276.67 T
(gu-) 481.96 276.67 T
-0.18 (ment is a time of) 108 262.67 P
-0.18 (fset and the second ar) 187.86 262.67 P
-0.18 (gument is a time of day) 292.8 262.67 P
-0.18 (. It does the work of) 405.3 262.67 P
(cr) 108 248.67 T
(eating a new) 117.03 248.67 T
4 10 Q
(<time-of-day>) 181.7 248.67 T
1 11 Q
( instance with the) 259.7 248.67 T
4 10 Q
(total-seconds) 348.23 248.67 T
1 11 Q
( slot initialized) 426.23 248.67 T
(to the sum of the) 108 234.67 T
4 10 Q
(total-seconds) 192.54 234.67 T
1 11 Q
( slots of the two ar) 270.54 234.67 T
(guments.) 359.74 234.67 T
5 9 Q
(// Method on <time-of-day>, <time-offset>) 108 214 T
4 F
(define method \134+) 108 203 T
(\050time-of-day :: <time-of-day>, offset :: <time-offset>\051) 129.6 192 T
(=> \050sum :: <time-of-day>\051) 113.4 181 T
(offset + time-of-day;) 118.8 170 T
(end method \134+;) 108 159 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "77" 91
%%Page: "78" 92
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(78) 72 677.67 T
0 F
(Chapter 6) 91 677.67 T
(Multimethods) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(The method on) 108 640.67 T
4 10 Q
(<time-of-day>) 184.77 640.67 T
1 11 Q
(,) 262.77 640.67 T
4 10 Q
(<time-offset>) 268.27 640.67 T
1 11 Q
( is invoked when the \336rst ar) 346.27 640.67 T
(gu-) 481.96 640.67 T
(ment is a time of day and the second ar) 108 626.67 T
(gument is a time of) 298.33 626.67 T
(fset. It simply calls) 391.66 626.67 T
4 10 Q
(+) 484.84 626.67 T
1 11 Q
(with the or) 108 612.67 T
(der of the ar) 161.27 612.67 T
(guments switched \321 this call invokes the method on) 220.43 612.67 T
4 10 Q
(<time-offset>) 108 598.67 T
1 11 Q
(,) 186 598.67 T
4 10 Q
(<time-of-day>) 191.5 598.67 T
1 11 Q
(.) 269.5 598.67 T
(T) 135 584.67 T
(o test these methods, we can use one of the time of) 140.73 584.67 T
(fsets cr) 386.03 584.67 T
(eated in Section) 419.66 584.67 T
(6.1.1, and de\336ne the) 108 570.67 T
4 10 Q
(*8-30-59*) 207.95 570.67 T
1 11 Q
( variable, which contains a) 261.95 570.67 T
4 10 Q
(<time-of-day>) 393.97 570.67 T
1 11 Q
(instance, which we de\336ne as follows:) 108 556.67 T
4 9 Q
(define variable *8-30-59* =) 108 536 T
(make\050<time-of-day>, total-seconds: encode-total-seconds\0508, 30, 59\051\051;) 118.8 525 T
1 11 Q
(W) 108 504.67 T
(e add the time of) 117.99 504.67 T
(fset and the time of day:) 199.7 504.67 T
6 9 Q
(?) 108 484 T
4 F
( decode-total-seconds\050*minus-2-hours* + *8-30-59*\051;) 113.4 484 T
6 F
(6) 108 473 T
(30) 108 462 T
(59) 108 451 T
1 11 Q
(W) 108 430.67 T
(e add the time of day and the time of) 117.99 430.67 T
(fset:) 297.1 430.67 T
6 9 Q
(?) 108 410 T
4 F
( decode-total-seconds\050*8-30-59* + *minus-2-hours*\051;) 113.4 410 T
6 F
(6) 108 399 T
(30) 108 388 T
(59) 108 377 T
3 13 Q
(6.1.3  Method f) 108 347.33 T
(or ad) 181.85 347.33 T
(ding other kinds of times) 207.83 347.33 T
1 11 Q
-0.37 (W) 108 327.67 P
-0.37 (e have alr) 117.99 327.67 P
-0.37 (eady de\336ned methods for adding the kinds of time that it makes sense) 164.24 327.67 P
(to add together) 108 313.67 T
(. It is not logical to add one time of day to another time of day \321) 181.8 313.67 T
(what would thr) 108 299.67 T
(ee o\325clock plus two o\325clock mean? Someone could cr) 184.03 299.67 T
(eate another) 437.44 299.67 T
-0.27 (concr) 108 285.67 P
-0.27 (ete subclass of) 134.32 285.67 P
4 10 Q
-0.59 (<time>) 205.84 285.67 P
1 11 Q
-0.27 (, without pr) 241.84 285.67 P
-0.27 (oviding any methods for adding that time) 298.89 285.67 P
(to other times. If someone tries to add times that we do not intend them to add,) 108 271.67 T
(the r) 108 257.67 T
(esult will be a \322No applicable method\323 err) 130.15 257.67 T
(or) 336.05 257.67 T
(.) 345.59 257.67 T
-0.23 (W) 135 243.67 P
-0.23 (e could pr) 144.99 243.67 P
-0.23 (ovide a method whose sole purpose is to give mor) 193.49 243.67 P
-0.23 (e information) 435.67 243.67 P
(to the user than \322No applicable method\323 when + is called on two times that can-) 108 229.67 T
(not be added, because ther) 108 215.67 T
(e is no applicable method for adding them. W) 237.73 215.67 T
(e de\336ne) 459.42 215.67 T
(such a method her) 108 201.67 T
(e:) 197.85 201.67 T
5 9 Q
(// Method on <time>, <time>) 108 181 T
4 F
(define method \134+ \050time1 :: <time>, time2 :: <time>\051) 108 170 T
(error\050"Sorry, we can't add a %s to a %s.",) 118.8 159 T
(object-class\050time1\051, object-class\050time2\051\051;) 151.2 148 T
(end method \134+;) 108 137 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "78" 92
%%Page: "79" 93
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(6.2 Method dispatch for multimethods) 374.91 677.67 T
2 F
(79) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(This method is called only when the ar) 108 640.67 T
(guments ar) 296.47 640.67 T
(e both general instances of) 351.25 640.67 T
4 10 Q
(<time>) 108 626.67 T
1 11 Q
(, and none of the mor) 144 626.67 T
(e speci\336c methods ar) 247.99 626.67 T
(e applicable to the ar) 349.69 626.67 T
(guments.) 450.52 626.67 T
(The) 108 612.67 T
4 10 Q
(error) 129.16 612.67 T
1 11 Q
( function signals an err) 159.16 612.67 T
(or) 270.35 612.67 T
(. For mor) 279.89 612.67 T
(e information about signaling and) 324.47 612.67 T
(handling err) 108 598.67 T
(ors, see Chapter 20,) 168.46 598.67 T
0 F
(Exceptions) 268.43 598.67 T
1 F
(.) 316.91 598.67 T
(Note: This method is useful for explaining how method dispatch works for) 135 584.67 T
(multimethods, but it does not r) 108 570.67 T
(eally give the user any mor) 259.08 570.67 T
(e useful information) 390.98 570.67 T
-0.05 (than that supplied by the \322No applicable method\323 err) 108 556.67 P
-0.05 (or) 368.56 556.67 P
-0.05 (. Ther) 378.09 556.67 P
-0.05 (efor) 406.1 556.67 P
-0.05 (e, we de\336ne the) 425.18 556.67 P
(method in this chapter) 108 542.67 T
(, but do not include it as part of the \336nal library) 217.19 542.67 T
(.) 446.77 542.67 T
3 15 Q
(6.2  Method dispatc) 108 503 T
(h f) 222.04 503 T
(or m) 236.85 503 T
(ultimethods) 263.28 503 T
1 11 Q
(A method is) 108 482.67 T
2 F
(specialized) 170.37 482.67 T
1 F
( on the r) 226.57 482.67 T
(equir) 266.63 482.67 T
(ed parameters that have explicit types. The) 292.04 482.67 T
(type of the r) 108 468.67 T
(equir) 166.9 468.67 T
(ed parameter is called that parameter) 192.32 468.67 T
(\325s) 374.86 468.67 T
2 F
(specializer) 385.33 468.67 T
1 F
(. A) 438.27 468.67 T
2 F
(multimethod) 108 454.67 T
1 F
(is a method that specializes mor) 176.74 454.67 T
(e than one of its parameters. The) 332.45 454.67 T
(methods that we de\336ned in Section 6.1 specialize two r) 108 440.67 T
(equir) 374.35 440.67 T
(ed parameters, and) 399.76 440.67 T
(ther) 108 426.67 T
(efor) 127.4 426.67 T
(e ar) 146.49 426.67 T
(e multimethods.) 164.15 426.67 T
-0.06 (The method dispatch considers all the r) 108 330.67 P
-0.06 (equir) 299.28 330.67 P
-0.06 (ed parameters, and sorts the applica-) 324.69 330.67 P
(ble methods by speci\336city as follows: For each r) 108 316.67 T
(equir) 339.68 316.67 T
(ed parameter) 365.09 316.67 T
(, constr) 429.16 316.67 T
(uct a) 464.45 316.67 T
(separate list of the applicable methods, sorted fr) 108 302.67 T
(om most speci\336c to least speci\336c) 341.14 302.67 T
(for that parameter) 108 288.67 T
(. Then, combine the separate sorted lists into an overall list of) 195.91 288.67 T
(methods, sorted by speci\336city) 108 274.67 T
(. In the overall method or) 252 274.67 T
(dering, a method is mor) 375.45 274.67 T
(e) 492.19 274.67 T
(speci\336c than another if it satis\336es two constraints:) 108 260.67 T
2 F
( 1.) 135 246.67 T
1 F
( The method is) 146 246.67 T
0 F
(no less speci\336c) 220.98 246.67 T
1 F
( than the other method for) 285.25 246.67 T
0 F
(all) 416.21 246.67 T
1 F
( r) 427.21 246.67 T
(equir) 434.11 246.67 T
(ed) 459.52 246.67 T
(parameters. \050The two methods might have the same types for some parameters.\051) 108 232.67 T
2 F
( 2.) 135 218.67 T
1 F
( The method is) 146 218.67 T
0 F
(mor) 220.98 218.67 T
(e speci\336c) 238.5 218.67 T
1 F
( than the other method for) 277.41 218.67 T
0 F
(some) 408.37 218.67 T
1 F
( r) 430.37 218.67 T
(equir) 437.27 218.67 T
(ed) 462.68 218.67 T
(parameter) 108 204.67 T
(.) 157.32 204.67 T
-0.28 (One method might be mor) 135 190.67 P
-0.28 (e speci\336c than another for one parameter) 263.11 190.67 P
-0.28 (, but less) 459.75 190.67 P
(speci\336c for another parameter) 108 176.67 T
(. These two methods ar) 253.27 176.67 T
(e) 366.14 176.67 T
2 F
(ambiguous) 374.16 176.67 T
1 F
( in speci\336city) 430.38 176.67 T
-0.36 (and cannot be or) 108 162.67 P
-0.36 (der) 188.08 162.67 P
-0.36 (ed. If the method-dispatch pr) 204.22 162.67 P
-0.36 (ocedur) 344.84 162.67 P
-0.36 (e cannot \336nd any method) 378.5 162.67 P
(that is mor) 108 148.67 T
(e speci\336c than all other methods, Dylan signals an err) 160.3 148.67 T
(or) 420.15 148.67 T
(.) 429.68 148.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Comparison with C++ and Java:) 141 392.67 T
1 F
( Neither C++ nor Java supports) 301.29 392.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(multimethods. In both languages, method dispatch is based on) 141 378.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the \336rst ar) 141 364.67 T
(gument of virtual functions.) 190.65 364.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 405.88 135 357.13 2 L
V
0.25 H
0 Z
N
486 405.88 486 357.13 2 L
V
N
134.88 406 486.12 406 2 L
V
N
134.88 357 486.12 357 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "79" 93
%%Page: "80" 94
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(80) 72 677.67 T
0 F
(Chapter 6) 91 677.67 T
(Multimethods) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(T) 108 371.67 T
(able 6.1 shows the applicable methods for various ar) 113.73 371.67 T
(guments to +. If two meth-) 368.35 371.67 T
(ods ar) 108 357.67 T
(e applicable, we number the mor) 137.79 357.67 T
(e speci\336c method 1, and the less speci\336c) 297.63 357.67 T
(method 2.) 108 343.67 T
(W) 135 329.67 T
(e call) 144.99 329.67 T
4 10 Q
(+) 172.54 329.67 T
1 11 Q
( on two instances of) 178.54 329.67 T
4 10 Q
(<time-offset>) 277.71 329.67 T
1 11 Q
(:) 355.71 329.67 T
6 9 Q
(?) 108 309.01 T
4 F
( *minus-2-hours* + *plus-15-20-45*;) 113.4 309.01 T
6 F
({instance of <time-offset>}) 108 298.01 T
1 11 Q
(When both ar) 108 271.67 T
(guments ar) 174.3 271.67 T
(e instances of) 229.08 271.67 T
4 10 Q
(<time-offset>) 296.84 271.67 T
1 11 Q
(, the \336rst r) 374.84 271.67 T
(ow of the table) 424.49 271.67 T
(applies. T) 108 257.67 T
(wo methods ar) 154.31 257.67 T
(e applicable. The method on) 227 257.67 T
4 10 Q
(<time-offset>) 367.35 257.67 T
1 11 Q
(,) 445.35 257.67 T
4 10 Q
(<time-) 450.85 257.67 T
-0.31 (offset>) 108 243.67 P
1 11 Q
-0.14 ( is mor) 150 243.67 P
-0.14 (e speci\336c than the method on) 182.95 243.67 P
4 10 Q
-0.31 (<time>) 327.3 243.67 P
1 11 Q
-0.14 (,) 363.3 243.67 P
4 10 Q
-0.31 (<time>) 368.66 243.67 P
1 11 Q
-0.14 (. The parameter spe-) 404.66 243.67 P
(cializers of the method on) 108 229.67 T
4 10 Q
(<time-offset>) 236.55 229.67 T
1 11 Q
(,) 314.55 229.67 T
4 10 Q
(<time-offset>) 320.05 229.67 T
1 11 Q
( ar) 398.05 229.67 T
(e subtypes of the) 410.44 229.67 T
(parameter specializers of the method on) 108 215.67 T
4 10 Q
(<time>) 305.98 215.67 T
1 11 Q
(,) 341.98 215.67 T
4 10 Q
(<time>) 347.48 215.67 T
1 11 Q
(. That is, for the \336rst) 383.48 215.67 T
(parameter) 108 201.67 T
(,) 157.32 201.67 T
4 10 Q
(<time-offset>) 162.82 201.67 T
1 11 Q
( is a subtype of) 240.82 201.67 T
4 10 Q
(<time>) 316.57 201.67 T
1 11 Q
(; for the second parameter) 352.57 201.67 T
(,) 478.86 201.67 T
4 10 Q
(<time-offset>) 108 187.67 T
1 11 Q
( is a subtype of) 186 187.67 T
4 10 Q
(<time>) 261.75 187.67 T
1 11 Q
(.) 297.75 187.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 F
(T) 130.36 611.67 T
(ype of \336rst) 135.76 611.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(argument) 135.2 597.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 227.97 618.67 T
(ype of) 233.37 618.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(second) 227.92 604.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(argument) 222.42 590.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Applicab) 299.81 604.67 T
(le methods) 341.77 604.67 T
(, ordered b) 395.41 604.67 T
(y speci\336city) 448.39 604.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(<time-offset>) 121.12 567 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-offset>) 207.75 567 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(1. method on) 295.55 565.67 T
4 9 Q
(<time-offset>) 362.15 565.67 T
1 11 Q
(,) 432.35 565.67 T
4 9 Q
(<time-offset>) 437.85 565.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(2. method on) 295.55 551.67 T
4 9 Q
(<time>) 362.15 551.67 T
1 11 Q
(,) 394.55 551.67 T
4 9 Q
(<time>) 400.05 551.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-of-day>) 121.12 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-offset>) 207.75 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(1. method on) 295.55 528.67 T
4 9 Q
(<time-of-day>) 362.81 528.67 T
8 11 Q
(,) 433.01 528.67 T
4 9 Q
(<time-offset>) 439.13 528.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(2. method on) 295.55 512.67 T
4 9 Q
(<time>) 362.81 512.67 T
8 11 Q
(,) 395.21 512.67 T
4 9 Q
(<time>) 401.33 512.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-offset>) 121.12 491 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-of-day>) 207.75 491 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(1. method on) 295.55 489.67 T
4 9 Q
(<time-offset>) 362.15 489.67 T
1 11 Q
(,) 432.35 489.67 T
4 9 Q
(<time-of-day>) 437.85 489.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(2. method on) 295.55 475.67 T
4 9 Q
(<time>) 362.15 475.67 T
1 11 Q
(,) 394.55 475.67 T
4 9 Q
(<time>) 400.05 475.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-of-day>) 121.12 454 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-of-day>) 207.75 454 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(method on) 295.55 452.67 T
4 9 Q
( <time>) 347.52 452.67 T
8 11 Q
(,) 385.32 452.67 T
4 9 Q
(<time>) 391.44 452.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<integer>) 121.12 431 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-offset>) 207.75 431 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(none) 295.55 429.67 T
0 0 0 1 0 0 0 K
108 392.01 522 400 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 126.87 403.33 T
(ab) 132.18 403.33 T
(le 6.1) 143.75 403.33 T
8 F
(Applicab) 174.33 403.33 T
(le methods f) 212.48 403.33 T
(or diff) 266.65 403.33 T
(erent arguments to) 291.36 403.33 T
4 F
(+) 378.07 403.33 T
8 F
(, ordered b) 384.07 403.33 T
(y speci\336city) 432.23 403.33 T
(.) 482.35 403.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
115.12 633.88 115.12 420.12 2 L
V
0.25 H
0 Z
N
514.88 633.88 514.88 420.12 2 L
V
N
114.99 634 515.01 634 2 L
V
N
114.99 579 515.01 579 2 L
V
N
114.99 420 515.01 420 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "80" 94
%%Page: "81" 95
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(6.3 Methods for comparison of times) 382.03 677.67 T
2 F
(81) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(6.3  Methods f) 108 638 T
(or comparison of times) 189.79 638 T
1 11 Q
(W) 108 617.67 T
(e need to compar) 117.99 617.67 T
(e times to see whether they ar) 201.62 617.67 T
(e the same, and to see whether) 346.08 617.67 T
(one is gr) 108 603.67 T
(eater \050later\051 than another) 149.3 603.67 T
(. These methods do the comparisons we need:) 269.34 603.67 T
4 9 Q
(define method \134< \050time1 :: <time-of-day>, time2 :: <time-of-day>\051) 108 583 T
(time1.total-seconds < time2.total-seconds;) 118.8 572 T
(end method \134<;) 108 561 T
(define method \134< \050time1 :: <time-offset>, time2 :: <time-offset>\051) 108 542 T
(time1.total-seconds < time2.total-seconds;) 118.8 531 T
(end method \134<;) 108 520 T
(define method \134= \050time1 :: <time-of-day>, time2 :: <time-of-day>\051) 108 501 T
(time1.total-seconds = time2.total-seconds;) 118.8 490 T
(end method \134=;) 108 479 T
(define method \134= \050time1 :: <time-offset>, time2 :: <time-offset>\051) 108 460 T
(time1.total-seconds = time2.total-seconds;) 118.8 449 T
(end method \134=;) 108 438 T
1 11 Q
(W) 108 417.67 T
(e can call these methods:) 117.99 417.67 T
6 9 Q
(?) 108 397 T
4 F
(*plus-15-20-45* = *minus-2-hours*;) 118.8 397 T
6 F
(#f) 108 386 T
1 11 Q
(T) 108 365.67 T
(o compar) 113.73 365.67 T
(e times, we need only to de\336ne methods for < and =. All other numeri-) 159.35 365.67 T
(cal comparisons in Dylan ar) 108 351.67 T
(e based on these two methods. So, we can call) 243.56 351.67 T
4 10 Q
(>) 468.59 351.67 T
1 11 Q
(,) 474.59 351.67 T
4 10 Q
(>=) 480.09 351.67 T
1 11 Q
(,) 492.09 351.67 T
4 10 Q
(<=) 108 337.67 T
1 11 Q
(, and) 120 337.67 T
4 10 Q
(~=) 146.87 337.67 T
1 11 Q
( \050the not-equal-to function\051. Her) 158.87 337.67 T
(e ar) 314.23 337.67 T
(e examples:) 331.89 337.67 T
6 9 Q
(?) 108 317 T
4 F
(*plus-15-20-45* ~= *minus-2-hours*;) 118.8 317 T
6 F
(#t) 108 306 T
(?) 108 287 T
4 F
(*plus-15-20-45* > *minus-2-hours*;) 118.8 287 T
6 F
(#t) 108 276 T
3 15 Q
(6.4  Summar) 108 238 T
(y) 181.27 238 T
1 11 Q
(In this chapter) 108 217.67 T
(, we cover) 177.24 217.67 T
(ed the following:) 226.46 217.67 T
(\245) 117 197.67 T
(W) 135 197.67 T
(e de\336ned new methods on the built-in generic functions +,) 144.99 197.67 T
4 10 Q
(<) 431.98 197.67 T
1 11 Q
(, and) 437.98 197.67 T
4 10 Q
(=) 464.85 197.67 T
1 11 Q
(.) 470.85 197.67 T
(\245) 117 177.67 T
(W) 135 177.67 T
(e discussed how method dispatch works for multimethods.) 144.99 177.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "81" 95
%%Page: "82" 96
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 126 522 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "82" 96
%%Page: "83" 97
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(83) 301.25 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(7) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(7) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Modularity) 109 566.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
(Object-oriented pr) 108 424.67 T
(ogramming can lead to modular code. When you ar) 197.01 424.67 T
(e experi-) 448.42 424.67 T
(enced with an object-oriented pr) 108 410.67 T
(ogramming style, you might be able to de\336ne) 265.43 410.67 T
(classes and methods with the right modularity fr) 108 396.67 T
(om the start. Novices, however) 345.18 396.67 T
(\321 and even experienced object-oriented pr) 108 382.67 T
(ogrammers who ar) 317.07 382.67 T
(e attacking lar) 409.47 382.67 T
(ge) 477.97 382.67 T
(pr) 108 368.67 T
(oblems \321 may \336nd that they discover opportunities for sharing as they begin) 118.76 368.67 T
-0.26 (to implement classes and methods. The dynamic aspects of Dylan support an evo-) 108 354.67 P
-0.12 (lutionary appr) 108 340.67 P
-0.12 (oach to pr) 178.49 340.67 P
-0.12 (ogramming, so it is easy to continue to r) 226.89 340.67 P
-0.12 (e\336ne your imple-) 420.39 340.67 P
(mentation and to design as you go.) 108 326.67 T
(In this chapter) 135 312.67 T
(, we show an evolutionary appr) 204.24 312.67 T
(oach to pr) 358.68 312.67 T
(ogramming, as we) 407.33 312.67 T
(de\336ne classes that r) 108 298.67 T
(epr) 202.63 298.67 T
(esent dif) 218.66 298.67 T
(fer) 259.99 298.67 T
(ent kinds of positions. W) 273.07 298.67 T
(e start out with one) 393.17 298.67 T
(appr) 108 284.67 T
(oach, and gradually r) 130.87 284.67 T
(e\336ne it to achieve gr) 234.76 284.67 T
(eater modularity) 332.74 284.67 T
(. W) 413.26 284.67 T
(e illustrate one) 428.75 284.67 T
(new Dylan featur) 108 270.67 T
(e: abstract classes.) 192.88 270.67 T
(Starting in this chapter) 135 256.67 T
(, and continuing thr) 245 256.67 T
(oughout the r) 341.59 256.67 T
(est of the book, we) 407.88 256.67 T
(take the appr) 108 242.67 T
(oach of editing and compiling sour) 172.1 242.67 T
(ce code. Now and then, we use a) 342.21 242.67 T
(listener to call a function and show the function\325s output. Whenever we use a lis-) 108 228.67 T
(tener) 108 214.67 T
(, we show the) 132.06 214.67 T
6 9 Q
(?) 201.75 214.67 T
1 11 Q
( pr) 207.15 214.67 T
(ompt.) 220.66 214.67 T
3 15 Q
(7.1  Requirements of the position c) 108 175 T
(lasses) 312.15 175 T
1 11 Q
(T) 108 154.67 T
(o pr) 113.73 154.67 T
(edict when an air) 133.24 154.67 T
(craft will arrive at the airport, we need to know the speed) 217.15 154.67 T
(of the air) 108 140.67 T
(craft r) 151.27 140.67 T
(elative to the gr) 180.15 140.67 T
(ound, and the distance the air) 255.75 140.67 T
(craft is fr) 400.23 140.67 T
(om the) 443.38 140.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "83" 97
%%Page: "84" 98
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(84) 72 677.67 T
0 F
(Chapter 7) 91 677.67 T
(Modularity) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(airport. Thus, we need to r) 108 640.67 T
(epr) 237.13 640.67 T
(esent the positions of objects, such as airports and) 253.16 640.67 T
(air) 108 626.67 T
(craft, to compute distances.) 120.85 626.67 T
(W) 135 612.67 T
(e shall use two ways to expr) 144.99 612.67 T
(ess the position of an object. First, we use lati-) 281.81 612.67 T
(tude and longitude to indicate the) 108 598.67 T
2 F
(absolute position) 276.08 598.67 T
1 F
( of the object. Second, we) 363.14 598.67 T
(describe the position of the object r) 108 584.67 T
(elative to a second object. For example, a par-) 277.35 584.67 T
-0.25 (ticular air) 108 570.67 P
-0.25 (craft might be 200 miles west of a given airport. This kind of description) 154.7 570.67 P
(is a) 108 556.67 T
2 F
(relative position) 126.86 556.67 T
1 F
(.) 209.05 556.67 T
(W) 135 542.67 T
(e shall de\336ne the classes) 144.99 542.67 T
4 10 Q
(<absolute-position>) 265.39 542.67 T
1 11 Q
( and) 379.39 542.67 T
4 10 Q
(<relative-) 403.52 542.67 T
(position>) 108 528.67 T
1 11 Q
(. The slots of) 162 528.67 T
4 10 Q
(<absolute-position>) 225.95 528.67 T
1 11 Q
( will stor) 339.95 528.67 T
(e information about the) 382.63 528.67 T
(latitude or longitude of that position. The slots of) 108 514.67 T
4 10 Q
(<relative-position>) 349.31 514.67 T
1 11 Q
( will) 463.31 514.67 T
(include a distance \050such as 200 miles\051, and a dir) 108 500.67 T
(ection \050such as south\051.) 338.35 500.67 T
-0.25 (W) 135 486.67 P
-0.25 (e need to pr) 144.99 486.67 P
-0.25 (ovide) 201.76 486.67 P
4 10 Q
-0.55 (say) 231.66 486.67 P
1 11 Q
-0.25 ( methods for absolute and r) 249.66 486.67 P
-0.25 (elative positions. The fol-) 382.23 486.67 P
(lowing sample calls show the output that we want to achieve:) 108 472.67 T
6 9 Q
(?) 108 452 T
4 F
(say\050*my-absolute-position*\051;) 118.8 452 T
6 F
(42 degrees 19 minutes 34 seconds North latitude) 108 441 T
(70 degrees 56 minutes 26 seconds West longitude) 108 430 T
(?) 108 411 T
4 F
(say\050*her-relative-position*\051;) 118.8 411 T
6 F
(30 miles away at heading 90 degrees) 108 400 T
3 15 Q
(7.2  Initial c) 108 362 T
(lass de\336nitions) 174.1 362 T
1 11 Q
(W) 108 341.67 T
(e start with these simple, initial class de\336nitions:) 117.99 341.67 T
5 9 Q
(// Superclass of all position classes) 108 321 T
4 F
(define class <position> \050<object>\051) 108 310 T
(end class <position>;) 108 299 T
(define class <absolute-position> \050<position>\051) 108 280 T
(slot latitude;) 118.8 269 T
(slot longitude;) 118.8 258 T
(end class <absolute-position>;) 108 247 T
(define class <relative-position> \050<position>\051) 108 228 T
(slot distance;) 118.8 217 T
(slot angle;) 118.8 206 T
(end class <relative-position>;) 108 195 T
1 11 Q
(These initial de\336nitions show the inheritance r) 108 174.67 T
(elationships among the classes,) 333.36 174.67 T
(and the names of the slots show the information that the classes must pr) 108 160.67 T
(ovide.) 458.28 160.67 T
(At this point, we omit the type declarations of the slots, which is equivalent to) 108 146.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "84" 98
%%Page: "85" 99
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7.3 Abstract classes) 445.81 677.67 T
2 F
(85) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.43 (specifying the type) 108 640.67 P
4 10 Q
-0.94 (<object>) 201.92 640.67 P
1 11 Q
-0.43 (. W) 249.92 640.67 P
-0.43 (e will \336ll in the implementation later) 264.97 640.67 P
-0.43 (, by deciding) 439.58 640.67 P
(on the types of the slots, and pr) 108 626.67 T
(oviding the) 260.34 626.67 T
4 10 Q
(say) 318.96 626.67 T
1 11 Q
( methods.) 336.96 626.67 T
(Our r) 135 612.67 T
(equir) 161.52 612.67 T
(ements mention only) 186.93 612.67 T
4 10 Q
(<absolute-position>) 292.39 612.67 T
1 11 Q
( and) 406.39 612.67 T
4 10 Q
(<relative-) 430.51 612.67 T
(position>) 108 598.67 T
1 11 Q
(, but we choose to de\336ne a super) 162 598.67 T
(class of both of them, named) 320.71 598.67 T
4 10 Q
(<position>) 108 584.67 T
1 11 Q
(.) 168 584.67 T
3 15 Q
(7.3  Abstract c) 108 411 T
(lasses) 191.87 411 T
1 11 Q
(W) 108 390.67 T
(e intend that the) 117.99 390.67 T
4 10 Q
(<position>) 200.17 390.67 T
1 11 Q
( class will not have dir) 260.17 390.67 T
(ect instances. Any position) 369.06 390.67 T
(objects should be dir) 108 376.67 T
(ect instances of) 208.36 376.67 T
4 10 Q
(<absolute-position>) 284.59 376.67 T
1 11 Q
( and) 398.59 376.67 T
4 10 Q
(<relative-) 422.72 376.67 T
(position>) 108 362.67 T
1 11 Q
(. In Dylan, a class that is intended to be a super) 162 362.67 T
(class and not to have) 390.28 362.67 T
(dir) 108 348.67 T
(ect instances is an) 122.07 348.67 T
2 F
(abstract) 211.15 348.67 T
1 F
( class. A class that is intended to have dir) 250.24 348.67 T
(ect) 449.68 348.67 T
(instances is a) 108 334.67 T
2 F
(concrete) 174.19 334.67 T
1 F
( class.) 215.73 334.67 T
(By default, a user) 135 320.67 T
(-de\336ned class is concr) 219.62 320.67 T
(ete. T) 325.67 320.67 T
(o de\336ne an abstract class, you) 351.03 320.67 T
(declar) 108 306.67 T
(e it to be abstract in the) 137.72 306.67 T
4 10 Q
(define class) 252.98 306.67 T
1 11 Q
( form. For example:) 324.98 306.67 T
5 9 Q
(// Superclass of all position classes) 108 283 T
4 F
(define abstract class <position> \050<object>\051) 108 272 T
(end class <position>;) 108 261 T
1 11 Q
(The) 108 234.67 T
4 10 Q
(<time>) 129.16 234.67 T
1 11 Q
( class is another one that we intend to have no dir) 165.16 234.67 T
(ect instances, so we) 405.93 234.67 T
(r) 108 220.67 T
(ede\336ne it to be abstract:) 112.15 220.67 T
4 9 Q
(define abstract class <time> \050<object>\051) 108 200 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 118.8 189 T
(end class <time>;) 108 178 T
1 11 Q
-0.16 (If we tried to make an instance of) 108 151.67 P
4 10 Q
-0.34 (<position>) 271.35 151.67 P
1 11 Q
-0.16 ( or) 331.35 151.67 P
4 10 Q
-0.34 (<time>) 346.89 151.67 P
1 11 Q
-0.16 ( now) 382.89 151.67 P
-0.16 (,) 406.06 151.67 P
4 10 Q
-0.34 (make) 411.4 151.67 P
1 11 Q
-0.16 ( would signal) 435.4 151.67 P
(an err) 108 137.67 T
(or) 136.41 137.67 T
(. For mor) 145.95 137.67 T
(e information about abstract classes, see Section 7.7.) 190.53 137.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Modularity note:) 141 550.67 T
1 F
( The bene\336ts of de\336ning the) 225.94 550.67 T
4 10 Q
(<position>) 364.48 550.67 T
1 11 Q
( class) 424.48 550.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 141 536.67 T
(e these:) 150.65 536.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 150 522.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The) 168 522.67 T
4 10 Q
(<position>) 189.16 522.67 T
1 11 Q
( class cr) 249.16 522.67 T
(eates an explicit r) 286.61 522.67 T
(elationship) 370.82 522.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(between the other position classes, which ar) 168 508.67 T
(e r) 381.4 508.67 T
(elated) 393.57 508.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(conceptually) 168 494.67 T
(.) 229.07 494.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 150 480.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 168 480.67 T
(e can use the) 177.99 480.67 T
4 10 Q
(<position>) 242.87 480.67 T
1 11 Q
( class as the type of a slot or) 302.87 480.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(other object, in cases wher) 168 466.67 T
(e either an absolute or r) 295.34 466.67 T
(elative) 409.77 466.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(position is appr) 168 452.67 T
(opriate.) 243.91 452.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 563.88 135 445.12 2 L
V
0.25 H
0 Z
N
486 563.88 486 445.12 2 L
V
N
134.88 564 486.12 564 2 L
V
N
134.88 445 486.12 445 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "85" 99
%%Page: "86" 100
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(86) 72 677.67 T
0 F
(Chapter 7) 91 677.67 T
(Modularity) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(7.4  Absolute position) 108 638 T
1 11 Q
(The) 108 611.67 T
4 10 Q
(<absolute-position>) 129.16 611.67 T
1 11 Q
( class r) 243.16 611.67 T
(epr) 275.72 611.67 T
(esents latitude and longitude. One way to) 291.75 611.67 T
(r) 108 597.67 T
(epr) 112.15 597.67 T
(esent latitude and longitude is with degr) 128.17 597.67 T
(ees, minutes, seconds, and a dir) 325.8 597.67 T
(ec-) 479.27 597.67 T
(tion. W) 108 583.67 T
(e can use the appr) 142.68 583.67 T
(oach of combining degr) 230.43 583.67 T
(ees, minutes, and seconds into a) 345.4 583.67 T
-0.01 (total-seconds slot as we did for) 108 569.67 P
4 10 Q
-0.02 (<time>) 261.33 569.67 P
1 11 Q
-0.01 (. W) 297.33 569.67 P
-0.01 (e can also de\336ne a class that r) 312.81 569.67 P
-0.01 (epr) 455.38 569.67 P
-0.01 (esents) 471.4 569.67 P
(total seconds and a dir) 108 555.67 T
(ection, and call it) 217.68 555.67 T
4 10 Q
(<directed-angle>) 302.98 555.67 T
1 11 Q
(:) 398.98 555.67 T
4 9 Q
(define abstract class <directed-angle> \050<object>\051) 108 532 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 118.8 521 T
(slot direction :: <string>, init-keyword: direction:;) 118.8 510 T
(end class <directed-angle>;) 108 499 T
1 11 Q
(W) 108 472.67 T
(e use the) 117.99 472.67 T
4 10 Q
(<directed-angle>) 163.33 472.67 T
1 11 Q
( class in the de\336nition of) 259.33 472.67 T
4 10 Q
(<absolute-position>) 380.71 472.67 T
1 11 Q
(:) 494.71 472.67 T
4 9 Q
(define class <absolute-position> \050<position>\051) 108 449 T
(slot latitude :: <directed-angle>, init-keyword: latitude:;) 118.8 438 T
(slot longitude :: <directed-angle>, init-keyword: longitude:;) 118.8 427 T
(end class <absolute-position>;) 108 416 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Modularity note:) 141 375.67 T
1 F
( The) 225.94 375.67 T
4 10 Q
(<directed-angle>) 249.86 375.67 T
1 11 Q
( class r) 345.86 375.67 T
(epr) 378.42 375.67 T
(esents the) 394.44 375.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(characteristics that latitude and longitude have in common.) 141 361.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Comparison to C:) 141 313.67 T
1 F
( If you ar) 228.69 313.67 T
(e familiar with a language that uses) 272.71 313.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(explicit pointers, such as C, you may be confused by Dylan\325s) 141 299.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(object model. Although ther) 141 285.67 T
(e is no pointer) 277.62 285.67 T
(-to operation in Dylan,) 346.63 285.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.25 (ther) 141 271.67 P
-0.25 (e ar) 160.4 271.67 P
-0.25 (e pointers in the implementation. If you ar) 177.82 271.67 P
-0.25 (e trying to imag-) 381.69 271.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ine how Dylan objects ar) 141 257.67 T
(e implemented, think in terms of always) 260.9 257.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(manipulating a pointer to the object \321 a Dylan variable \050or slot\051) 141 243.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.41 (stor) 141 229.67 P
-0.41 (es a pointer to an object, rather than a copy of the object\325s slots.) 159.4 229.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.52 (Similarly) 141 215.67 P
-0.52 (, assignment, ar) 184.03 215.67 P
-0.52 (gument passing, and identity comparison) 259.17 215.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 141 201.67 T
(e in terms of pointers to objects. See Appendix B,) 150.65 201.67 T
0 F
(Dylan Object) 393.34 201.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Model for C and C++ Pr) 141 187.67 T
(ogrammers) 250.38 187.67 T
1 F
(.) 299.88 187.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 388.88 135 354.12 2 L
V
0.25 H
0 Z
N
486 388.88 486 354.12 2 L
V
N
134.88 389 486.12 389 2 L
V
N
134.88 354 486.12 354 2 L
V
N
135 326.88 135 180.13 2 L
V
N
486 326.88 486 180.13 2 L
V
N
134.88 327 486.12 327 2 L
V
N
134.88 180 486.12 180 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "86" 100
%%Page: "87" 101
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7.4 Absolute position) 439.81 677.67 T
2 F
(87) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(W) 108 539.67 T
(e could de\336ne the) 117.99 539.67 T
4 10 Q
(say) 207.27 539.67 T
1 11 Q
( method as follows:) 225.27 539.67 T
4 9 Q
(define method say \050position :: <absolute-position>\051 => \050\051) 108 516 T
(format-out\050"%d degrees %d minutes %d seconds %s latitude\134n",) 118.8 505 T
(decode-total-seconds\050position.latitude\051\051;) 178.2 494 T
(format-out\050"%d degrees %d minutes %d seconds %s longitude\134n",) 118.8 483 T
(decode-total-seconds\050position.longitude\051\051;) 178.2 472 T
(end method say;) 108 461 T
1 11 Q
(The pr) 108 434.67 T
(eceding method depends on) 139.92 434.67 T
4 10 Q
(decode-total-seconds) 280.55 434.67 T
1 11 Q
( having a method) 400.55 434.67 T
(that is applicable to) 108 420.67 T
4 10 Q
(<directed-angle>) 205.59 420.67 T
1 11 Q
( \050the type of the objects r) 301.59 420.67 T
(eturned by) 420.73 420.67 T
4 10 Q
(position.latitude) 108 406.67 T
1 11 Q
( and) 210 406.67 T
4 10 Q
(position.longtude) 234.12 406.67 T
1 11 Q
(\051. W) 336.12 406.67 T
(e de\336ne such a method in) 355.27 406.67 T
(Section 7.6.) 108 392.67 T
(The) 108 279.67 T
4 10 Q
(say) 129.16 279.67 T
1 11 Q
( method on) 147.16 279.67 T
4 10 Q
(<absolute-position>) 205.52 279.67 T
1 11 Q
( should not call) 319.52 279.67 T
4 10 Q
(format-out) 396.93 279.67 T
1 11 Q
( dir) 456.93 279.67 T
(ectly) 473.74 279.67 T
(on the two instances of) 108 265.67 T
4 10 Q
(<directed-angle>) 222.42 265.67 T
1 11 Q
( stor) 318.42 265.67 T
(ed in the latitude and longitude) 339.58 265.67 T
(slots. Instead, we can de\336ne a) 108 251.67 T
4 10 Q
(say) 255.01 251.67 T
1 11 Q
( method on) 273.02 251.67 T
4 10 Q
(<directed-angle>) 331.37 251.67 T
1 11 Q
(, and can call it) 427.37 251.67 T
(in the method on) 108 237.67 T
4 10 Q
(<absolute-position>) 193.96 237.67 T
1 11 Q
(:) 307.96 237.67 T
4 9 Q
(define method say \050angle :: <directed-angle>\051 => \050\051) 108 214 T
(let\050degrees, minutes, seconds\051 = decode-total-seconds\050angle\051;) 118.8 203 T
(format-out\050"%d degrees %d minutes %d seconds %s",) 118.8 192 T
(degrees, minutes, seconds, angle.direction\051;) 178.2 181 T
(end method say;) 108 170 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Comparison to Java:) 141 634.67 T
1 F
( Java r) 242.15 634.67 T
(ecognizes that pointers make it) 272.67 634.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(extr) 141 620.67 T
(emely dif) 159.68 620.67 T
(\336cult to enfor) 205.38 620.67 T
(ce safety and for a compiler to r) 270.92 620.67 T
(eason) 424.23 620.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(about a pr) 141 606.67 T
(ogram for optimization. Java supports an object model) 190.57 606.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.03 (similar to that of Dylan, wher) 141 592.67 P
-0.03 (e pointers ar) 284.23 592.67 P
-0.03 (e used in the implemen-) 344.67 592.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tation of objects, but ar) 141 578.67 T
(e not visible to Java pr) 251.71 578.67 T
(ograms.) 359.79 578.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.2 (Modularity note:) 141 363.67 P
1 F
-0.2 ( The pr) 225.74 363.67 P
-0.2 (eceding) 260.01 363.67 P
4 10 Q
-0.44 (say) 300.43 363.67 P
1 11 Q
-0.2 ( method does not take advan-) 318.43 363.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tage of the similarity between latitude and longitude. One clue) 141 349.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(that ther) 141 335.67 T
(e is a modularity pr) 182.23 335.67 T
(oblem is that the two calls to) 277.64 335.67 T
4 10 Q
(format-) 419.17 335.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(out) 141 321.67 T
1 11 Q
( ar) 159 321.67 T
(e nearly identical.) 171.4 321.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 647.88 135 571.12 2 L
V
0.25 H
0 Z
N
486 647.88 486 571.12 2 L
V
N
134.88 648 486.12 648 2 L
V
N
134.88 571 486.12 571 2 L
V
N
135 376.88 135 314.13 2 L
V
N
486 376.88 486 314.13 2 L
V
N
134.88 377 486.12 377 2 L
V
N
134.88 314 486.12 314 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "87" 101
%%Page: "88" 102
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(88) 72 677.67 T
0 F
(Chapter 7) 91 677.67 T
(Modularity) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define method say \050position :: <absolute-position>\051 => \050\051) 108 642 T
(say\050position.latitude\051;) 118.8 631 T
(format-out\050" latitude\134n"\051;) 118.8 620 T
(say\050position.longitude\051;) 118.8 609 T
(format-out\050" longitude\134n"\051;) 118.8 598 T
(end method say;) 108 587 T
1 11 Q
-0.34 (W) 108 388.67 P
-0.34 (e de\336ned the) 117.99 388.67 P
4 10 Q
-0.75 (<directed-angle>) 182.77 388.67 P
1 11 Q
-0.34 ( class to r) 278.77 388.67 P
-0.34 (epr) 322.64 388.67 P
-0.34 (esent what latitude and longitude) 338.66 388.67 P
(have in common. It is useful to r) 108 374.67 T
(ecognize that latitude and longitude have dif) 264.67 374.67 T
(fer-) 483.12 374.67 T
(ences as well as similarities. W) 108 360.67 T
(e r) 255.9 360.67 T
(epr) 268.06 360.67 T
(esented latitude and longitude by the names) 284.09 360.67 T
(of slots in) 108 346.67 T
4 10 Q
(<absolute-position>) 157.64 346.67 T
1 11 Q
(, and their implementations as instances of) 271.64 346.67 T
4 10 Q
(<directed-angle>) 108 332.67 T
1 11 Q
(. W) 204 332.67 T
(e can elevate the visibility of latitude and longitude by) 219.49 332.67 T
(pr) 108 318.67 T
(oviding classes that r) 118.76 318.67 T
(epr) 220.94 318.67 T
(esent each of them:) 236.96 318.67 T
4 9 Q
(define class <latitude> \050<directed-angle>\051) 108 298 T
(end class <latitude>;) 108 287 T
(define class <longitude> \050<directed-angle>\051) 108 268 T
(end class <longitude>;) 108 257 T
1 11 Q
(W) 108 236.67 T
(e r) 117.99 236.67 T
(ede\336ne) 130.15 236.67 T
4 10 Q
(<absolute-position>) 168.49 236.67 T
1 11 Q
( to use) 282.49 236.67 T
4 10 Q
(<latitude>) 316.9 236.67 T
1 11 Q
( and) 376.9 236.67 T
4 10 Q
(<longitude>) 401.02 236.67 T
1 11 Q
(:) 467.02 236.67 T
4 9 Q
(define class <absolute-position> \050<position>\051) 108 216 T
(slot latitude :: <latitude>, init-keyword: latitude:;) 118.8 205 T
(slot longitude :: <longitude>, init-keyword: longitude:;) 118.8 194 T
(end class <absolute-position>;) 108 183 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Modularity note:) 141 546.67 T
1 F
( Our modularity is impr) 225.94 546.67 T
(oved, now that the) 343.12 546.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(<directed-angle>) 141 532.67 T
1 11 Q
( class is r) 237 532.67 T
(esponsible for describing its) 280.17 532.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(instances. This division of labor r) 141 518.67 T
(educes duplication of code.) 301.64 518.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Ther) 168 504.67 T
(e is still a pr) 190.56 504.67 T
(oblem with this appr) 248.81 504.67 T
(oach, because the) 350.41 504.67 T
4 10 Q
(say) 437.76 504.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(method on) 141 490.67 T
4 10 Q
(<absolute-position>) 196.6 490.67 T
1 11 Q
( must print \322latitude\323 and) 310.61 490.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\322longitude\323 after calling) 141 476.67 T
4 10 Q
(say) 262.25 476.67 T
1 11 Q
( on the dir) 280.25 476.67 T
(ected angles stor) 330.24 476.67 T
(ed in its) 411.02 476.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(two slots. The modularity is still \337awed, because the method on) 141 462.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
-0.67 (<absolute-position>) 141 448.67 P
1 11 Q
-0.31 ( acts on the knowledge that the method on) 255 448.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(<directed-angle>) 141 434.67 T
1 11 Q
( does not print \322latitude\323 or \322longitude.\323) 237 434.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 559.88 135 427.12 2 L
V
0.25 H
0 Z
N
486 559.88 486 427.12 2 L
V
N
134.88 560 486.12 560 2 L
V
N
134.88 427 486.12 427 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "88" 102
%%Page: "89" 103
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7.4 Absolute position) 439.81 677.67 T
2 F
(89) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Figur) 108 473.67 T
(e 7.1 shows the inheritance r) 134.21 473.67 T
(elationships among the position and angle) 271.76 473.67 T
(classes.) 108 459.67 T
(W) 135 445.67 T
(e de\336ne these new) 144.99 445.67 T
4 10 Q
(say) 237.61 445.67 T
1 11 Q
( methods:) 255.61 445.67 T
4 9 Q
(define method say \050latitude :: <latitude>\051 => \050\051) 108 425.01 T
(next-method\050\051;) 118.8 414.01 T
(format-out\050" latitude\134n"\051;) 118.8 403.01 T
(end method say;) 108 392.01 T
(define method say \050longitude :: <longitude>\051 => \050\051) 108 373.01 T
(next-method\050\051;) 118.8 362.01 T
(format-out\050" longitude\134n"\051;) 118.8 351.01 T
(end method say;) 108 340.01 T
1 11 Q
(The calls to) 108 313.67 T
4 10 Q
(next-method) 165.71 313.67 T
1 11 Q
( in the methods on) 231.71 313.67 T
4 10 Q
(<latitude>) 325.08 313.67 T
1 11 Q
( and) 385.08 313.67 T
4 10 Q
(<longitude>) 409.21 313.67 T
1 11 Q
( will) 475.21 313.67 T
(call the method on) 108 299.67 T
4 10 Q
(<directed-angle>) 201.15 299.67 T
1 11 Q
(, shown on page 87.) 297.15 299.67 T
(W) 135 285.67 T
(e r) 144.99 285.67 T
(ede\336ne the) 157.15 285.67 T
4 10 Q
(say) 213.5 285.67 T
1 11 Q
( method on) 231.5 285.67 T
4 10 Q
(<absolute-position>) 289.85 285.67 T
1 11 Q
(:) 403.85 285.67 T
4 9 Q
(define method say \050position :: <absolute-position>\051 => \050\051) 108 262.01 T
(say\050position.latitude\051;) 118.8 251.01 T
(say\050position.longitude\051;) 118.8 240.01 T
(end method say;) 108 229.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 10 Q
-0.04 (Figure 7.1) 110.29 515.33 P
8 F
-0.04 (Inher) 162.97 515.33 P
-0.04 (itance relationships among the position and angle classes) 185.91 515.33 P
-0.04 (. Abstr) 441.16 515.33 P
-0.04 (act) 469.92 515.33 P
0 0 0 1 0 0 0 K
108 493.01 504 501 C
36 72 576 720 C
0 0 0 1 0 0 0 K
8 10 Q
0 X
0 0 0 1 0 0 0 K
(classes are sho) 188.43 504.33 T
(wn in) 257.74 504.33 T
5 9 Q
(oblique) 283.86 504.33 T
(typewriter) 324.45 504.33 T
(font) 381.23 504.33 T
1 11 Q
(.) 402.83 504.33 T
0 0 0 1 0 0 0 K
108 528 504 648 C
108 532 504 646 C
0 -387 153 1 238 388 85 112 546.5 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f7-1.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f7-1 .eps)%%CreationDate: (6/6/96) (12:04 PM)%%BoundingBox: -387 153 1 238%%HiResBoundingBox: -386.1208 153.9167 0.3594 237.7444%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Courier-Oblique%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: -194.5 195 -194.5 195%AI3_TileBox: -469.5 -170 82.5 560%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -422.5 387 2 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: Courier-ObliqueAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique[/_Courier-Oblique/Courier-Oblique 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4514.5 4515 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4514.5 4515 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4514.5 4515 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 -334.8333 156.1667 0 TpTP-51.2875 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq10 0 Tl0 Tc0 Tw(<absolute-position>) Tx (\r) TX TO0 To1 0 0 1 -221.8333 156.1667 0 TpTP-51.2875 0 Td0 Tr(<relative-position>) Tx (\r) TX TO0 To1 0 0 1 -107.3333 156.1667 0 TpTP-26.9934 0 Td0 Tr(<latitude>) Tx (\r) TX TO0 To1 0 0 1 -29.3333 156.1667 0 TpTP-29.6927 0 Td0 Tr(<longitude>) Tx (\r) TX TO0 To1 0 0 1 -274 192 0 TpTP-26.9934 0 Td0 Tr/_Courier-Oblique 9 Tf(<position>\003) Tx 26.9934 -10 Td(\r) Tx TO0 To1 0 0 1 -71 192 0 TpTP-43.1894 0 Td0 Tr(<directed-angle>\003) Tx 43.1894 -10 Td(\r) Tx TO0 To1 0 0 1 -182.75 230.5 0 TpTP-21.5947 0 Td0 Tr(<object>) Tx (\r) TX TOu0 R0 G0.65 w-188.5 225.5 m-259 206 lS0 O0 g1 w-258.1079 208.5688 m-265.6538 204.1311 l-256.8999 204.2014 l-258.1079 208.5688 lfUu0 R0 G0.65 w-179.5 225 m-108 206.5 lS0 O0 g1 w-110.0564 204.724 m-101.3026 204.7992 l-108.9214 209.1109 l-110.0564 204.724 lfUu0 R0 G0.65 w-284.5 184.5 m-309 170.5 lS0 O0 g1 w-308.77 173.2098 m-314.9877 167.0476 l-306.5218 169.2755 l-308.77 173.2098 lfUu0 R0 G0.65 w-270 184.5 m-246.5 171.5 lSu-78.375 184.5 m-102.875 170.5 lS0 O0 g1 w-102.645 173.2098 m-108.8627 167.0476 l-100.3968 169.2755 l-102.645 173.2098 lfUu0 R0 G0.65 w-63.875 184.5 m-40.375 171.5 lS0 O0 g1 w-42.8117 170.2914 m-34.316 168.1806 l-40.6183 174.2565 l-42.8117 170.2914 lfU-248.9367 170.2914 m-240.441 168.1806 l-246.7433 174.2565 l-248.9367 170.2914 lfU0 4515 m0 -4125 L(N) *-396 4515 m-396 -4125 L(N) *LB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 528 504 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "89" 103
%%Page: "90" 104
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(90) 72 677.67 T
0 F
(Chapter 7) 91 677.67 T
(Modularity) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(7.5  Relative position) 108 285 T
1 11 Q
(W) 108 264.67 T
(e de\336ne the) 117.99 264.67 T
4 10 Q
(<relative-position>) 177.08 264.67 T
1 11 Q
( class as follows:) 291.08 264.67 T
4 9 Q
(define class <relative-position> \050<position>\051) 108 244 T
5 F
(// distance is in miles) 118.8 233 T
4 F
(slot distance :: <single-float>, init-keyword: distance:;) 118.8 222 T
(slot angle :: <relative-angle>, init-keyword: angle:;) 118.8 211 T
(end class <relative-position>;) 108 200 T
1 11 Q
-0.28 (The) 108 179.67 P
4 10 Q
-0.61 (distance) 128.88 179.67 P
1 11 Q
-0.28 ( slot stor) 176.88 179.67 P
-0.28 (es the distance to the other object, and the) 217.68 179.67 P
4 10 Q
-0.61 (angle) 420.8 179.67 P
1 11 Q
-0.28 ( slot stor) 450.8 179.67 P
-0.28 (es) 491.6 179.67 P
(the dir) 108 165.67 T
(ection to the other object. Unfortunately) 140.08 165.67 T
(, the angle needed her) 332.83 165.67 T
(e is dif) 439.79 165.67 T
(fer) 471.81 165.67 T
(ent) 484.89 165.67 T
(fr) 108 151.67 T
(om the) 115.81 151.67 T
4 10 Q
(<directed-angle>) 152.29 151.67 T
1 11 Q
( class, because the) 248.29 151.67 T
4 10 Q
(<directed-angle>) 338.51 151.67 T
1 11 Q
( class has a) 434.51 151.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Modularity note:) 141 620.67 T
1 F
( The appr) 225.94 620.67 T
(oach of de\336ning the classes) 272.73 620.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(<latitude>) 141 606.67 T
1 11 Q
( and) 201 606.67 T
4 10 Q
(<longitude>) 225.12 606.67 T
1 11 Q
( pr) 291.12 606.67 T
(ovides the following bene\336ts:) 304.63 606.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 150 592.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Each class is r) 168 592.67 T
(esponsible for describing its instances. Each) 234.68 592.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(method depends on) 168 578.67 T
4 10 Q
(say) 268.01 578.67 T
1 11 Q
( working for all the classes. No) 286.01 578.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(method on one class must understand the details of a) 168 564.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(method on another class.) 168 550.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 150 536.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 168 536.67 T
(e guar) 177.99 536.67 T
(d against any attempt to stor) 208.4 536.67 T
(e a latitude in a slot) 347.71 536.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(designated for a longitude, and vice versa. This type check-) 168 522.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ing will be useful when we intr) 168 508.67 T
(oduce mor) 319.44 508.67 T
(e dif) 371.57 508.67 T
(fer) 392.97 508.67 T
(ences) 406.05 508.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(between the classes. For example, the dir) 168 494.67 T
(ection of a latitude) 366.19 494.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is north or south, and the dir) 168 480.67 T
(ection of a longitude is west or) 307.45 480.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.17 (east. W) 168 466.67 P
-0.17 (e can pr) 202.34 466.67 P
-0.17 (ovide methods that ensur) 240.31 466.67 P
-0.17 (e that the dir) 364 466.67 P
-0.17 (ections) 425.41 466.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.02 (stor) 168 452.67 P
-0.02 (ed in a) 186.4 452.67 P
4 10 Q
-0.04 (<latitude>) 221.69 452.67 P
1 11 Q
-0.02 ( instance ar) 281.69 452.67 P
-0.02 (e appr) 336.71 452.67 P
-0.02 (opriate for latitude) 367.58 452.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\321 and we can do the same for longitude. W) 168 438.67 T
(e show two) 380.62 438.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.16 (techniques for implementing that type checking: See Section) 168 424.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10.6, page 128, and Section 19.5, page 318.) 168 410.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 150 396.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Y) 168 396.67 T
(ou can ask an object what its class is by using the) 174.32 396.67 T
4 10 Q
(object-) 414.7 396.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(class) 168 382.67 T
1 11 Q
( function. In this case, you can \336nd out that an object) 198 382.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is a latitude or longitude, rather than just a dir) 168 368.67 T
(ected angle.) 392.41 368.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The data does not stand alone; it is an instance that carries) 168 354.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(with it its type, its identity) 168 340.67 T
(, and the methods appr) 294.99 340.67 T
(opriate to) 407.86 340.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(it.) 168 326.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 633.88 135 319.13 2 L
V
0.25 H
0 Z
N
486 633.88 486 319.13 2 L
V
N
134.88 634 486.12 634 2 L
V
N
134.88 319 486.12 319 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "90" 104
%%Page: "91" 105
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7.5 Relative position) 442.62 677.67 T
2 F
(91) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(dir) 108 640.67 T
(ection, such as south, which is not needed for the angle of) 122.07 640.67 T
4 10 Q
(<relative-) 404.96 640.67 T
(position>) 108 626.67 T
1 11 Q
(.) 162 626.67 T
-0.01 (W) 135 612.67 P
-0.01 (e need to pr) 144.99 612.67 P
-0.01 (ovide a class of angle without dir) 202.49 612.67 P
-0.01 (ection, which we can use for) 363.58 612.67 P
-0.17 (the) 108 598.67 P
4 10 Q
-0.36 (angle) 125.84 598.67 P
1 11 Q
-0.17 ( slot of the) 155.84 598.67 P
4 10 Q
-0.36 (<relative-position>) 208.56 598.67 P
1 11 Q
-0.17 ( class\051. Ther) 322.56 598.67 P
-0.17 (efor) 379.61 598.67 P
-0.17 (e, we de\336ne two new) 398.69 598.67 P
(classes, and r) 108 584.67 T
(ede\336ne) 171.87 584.67 T
4 10 Q
(<directed-angle>) 210.2 584.67 T
1 11 Q
(:) 306.2 584.67 T
5 9 Q
(// Superclass of all angle classes) 108 564 T
4 F
(define abstract class <angle> \050<object>\051) 108 553 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 118.8 542 T
(end class <angle>;) 108 531 T
(define class <relative-angle> \050<angle>\051) 108 512 T
(end class <relative-angle>;) 108 501 T
(define abstract class <directed-angle> \050<angle>\051) 108 482 T
(slot direction :: <string>, init-keyword: direction:;) 118.8 471 T
(end class <directed-angle>;) 108 460 T
1 11 Q
(The) 108 172.67 T
4 10 Q
(<angle>) 129.16 172.67 T
1 11 Q
( class looks r) 171.16 172.67 T
(emarkably similar to the) 232.47 172.67 T
4 10 Q
(<time>) 353.98 172.67 T
1 11 Q
( class de\336ned earlier:) 389.98 172.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Modularity note:) 141 431.67 T
1 F
( Why pr) 225.94 431.67 T
(ovide both the classes) 265.72 431.67 T
4 10 Q
(<angle>) 374.31 431.67 T
1 11 Q
( and) 416.31 431.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(<relative-angle>) 141 417.67 T
1 11 Q
(, when the) 237 417.67 T
4 10 Q
(<relative-angle>) 290.5 417.67 T
1 11 Q
( class has no) 386.5 417.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.39 (additional slots? W) 141 403.67 P
-0.39 (e need a class that has only the) 232.76 403.67 P
4 10 Q
-0.84 (total-seconds) 381.64 403.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(slot, and no others. W) 141 389.67 T
(e need to use such a class as the type of the) 246.25 389.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(angle) 141 375.67 T
1 11 Q
( slot of) 171 375.67 T
4 10 Q
(<relative-angle>) 206.38 375.67 T
1 11 Q
(. W) 302.38 375.67 T
(e might consider making the) 317.86 375.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(<angle>) 141 361.67 T
1 11 Q
( class concr) 183 361.67 T
(ete, and using that class, which has only the) 237.74 361.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(total-seconds) 141 347.67 T
1 11 Q
( slot. However) 219 347.67 T
(, that appr) 289.32 347.67 T
(oach would not pr) 339.52 347.67 T
(event) 429.05 347.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.13 (someone fr) 141 333.67 P
-0.13 (om storing a) 194.76 333.67 P
4 10 Q
-0.29 (<directed-angle>) 258.15 333.67 P
1 11 Q
-0.13 ( instance in the) 354.15 333.67 P
4 10 Q
-0.29 (angle) 429.38 333.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
-0.04 (slot of) 141 319.67 P
4 10 Q
-0.09 (<relative-angle>) 173.54 319.67 P
1 11 Q
-0.04 (, because) 269.54 319.67 P
4 10 Q
-0.09 (<directed-angle>) 316.01 319.67 P
1 11 Q
-0.04 ( instances) 412.01 319.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 141 305.67 T
(e also instances of) 150.65 305.67 T
4 10 Q
(<angle>) 240.53 305.67 T
1 11 Q
(.) 282.53 305.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(In Dylan, by de\336ning classes as speci\336cally as possible, you) 168 291.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(enhance the r) 141 277.67 T
(eliability of your pr) 206.03 277.67 T
(ogram, because the compiler \050or) 300.37 277.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 141 263.67 T
(un-time system\051 can verify that only corr) 145.26 263.67 T
(ect values ar) 343.67 263.67 T
(e used. In) 404.04 263.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(contrast, you could write a pr) 141 249.67 T
(ogram in Dylan or C in which you) 284.51 249.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 141 235.67 T
(epr) 145.15 235.67 T
(esented everything as an integer \321 in that style of pr) 161.17 235.67 T
(ogram,) 417.97 235.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(someone could far too easily intr) 141 221.67 T
(oduce a pr) 299.92 221.67 T
(ogramming err) 351.19 221.67 T
(or in) 424.81 221.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(which a time was stor) 141 207.67 T
(ed wher) 247.07 207.67 T
(e a latitude was needed.) 286.8 207.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 444.88 135 200.13 2 L
V
0.25 H
0 Z
N
486 444.88 486 200.13 2 L
V
N
134.88 445 486.12 445 2 L
V
N
134.88 200 486.12 200 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "91" 105
%%Page: "92" 106
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(92) 72 677.67 T
0 F
(Chapter 7) 91 677.67 T
(Modularity) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
5 9 Q
0 X
(// Superclass of all angle classes) 108 642 T
4 F
(define abstract class <angle> \050<object>\051) 108 631 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 118.8 620 T
(end class <angle>;) 108 609 T
5 F
(// Superclass of all time classes) 108 590 T
4 F
(define abstract class <time> \050<object>\051) 108 579 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 118.8 568 T
(end class <time>;) 108 557 T
1 11 Q
(W) 108 536.67 T
(e would like to call) 117.99 536.67 T
4 10 Q
(decode-total-seconds) 212.91 536.67 T
1 11 Q
( on instances of) 332.91 536.67 T
4 10 Q
(<angle>) 410.56 536.67 T
1 11 Q
(, but cur-) 452.56 536.67 T
(r) 108 522.67 T
(ently the method is de\336ned to work on) 112.15 522.67 T
4 10 Q
(<time>) 304.22 522.67 T
1 11 Q
(. The next step is to take advan-) 340.22 522.67 T
(tage of the similarity between) 108 508.67 T
4 10 Q
(<angle>) 254.93 508.67 T
1 11 Q
( and) 296.93 508.67 T
4 10 Q
(<time>) 321.05 508.67 T
1 11 Q
(.) 357.05 508.67 T
3 15 Q
(7.6  Meeting of angles and times) 108 469 T
1 11 Q
(W) 108 448.67 T
(e can cr) 117.99 448.67 T
(eate a new super) 154.57 448.67 T
(class to combine times and angles. Sometimes, the) 236.12 448.67 T
(trickiest part of de\336ning super) 108 434.67 T
(classes that model characteristics shar) 255.65 434.67 T
(ed by other) 439.11 434.67 T
(classes is thinking of the right name for the super) 108 420.67 T
(class. Her) 346.94 420.67 T
(e, we use) 393.92 420.67 T
4 10 Q
(<sixty-) 441.2 420.67 T
(unit>) 108 406.67 T
1 11 Q
( to name the class that has) 138 406.67 T
4 10 Q
(total-seconds) 267.54 406.67 T
1 11 Q
( that can be converted to either) 345.54 406.67 T
-0.22 (hours, minutes, and seconds, or to degr) 108 392.67 P
-0.22 (ees, minutes, and seconds. In the methods) 298.39 392.67 P
(for decoding and encoding total seconds, we use the name) 108 378.67 T
4 10 Q
(max-unit) 394.85 378.67 T
1 11 Q
( to r) 442.85 378.67 T
(efer to) 462.09 378.67 T
(the unit that is hours for time, and degr) 108 364.67 T
(ees for positions.) 299.48 364.67 T
4 9 Q
(define abstract class <sixty-unit> \050<object>\051) 108 344 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 118.8 333 T
(end class <sixty-unit>;) 108 322 T
(define method decode-total-seconds) 108 303 T
(\050sixty-unit :: <sixty-unit>\051) 129.6 292 T
(=> \050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 113.4 281 T
(decode-total-seconds\050abs\050sixty-unit.total-seconds\051\051;) 118.8 270 T
(end method decode-total-seconds;) 108 259 T
(define method encode-total-seconds) 108 240 T
(\050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 129.6 229 T
(=> \050total-seconds :: <integer>\051) 113.4 218 T
(\050\050max-unit * 60\051 + minutes\051 * 60 + seconds;) 118.8 207 T
(end method encode-total-seconds;) 108 196 T
1 11 Q
-0.19 (W) 108 175.67 P
-0.19 (e r) 117.99 175.67 P
-0.19 (ede\336ne the time and angle classes and methods to take advantage of the new) 129.96 175.67 P
4 10 Q
(<sixty-unit>) 108 161.67 T
1 11 Q
( class:) 180 161.67 T
4 9 Q
(define abstract class <time> \050<sixty-unit>\051) 108 141 T
(end class <time>;) 108 130 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "92" 106
%%Page: "93" 107
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7.6 Meeting of angles and times) 399.08 677.67 T
2 F
(93) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define abstract class <angle> \050<sixty-unit>\051) 108 642 T
(end class <angle>;) 108 631 T
(define method say \050angle :: <angle>\051 => \050\051) 108 612 T
(let\050degrees, minutes, seconds\051 = decode-total-seconds\050angle\051;) 118.8 601 T
(format-out\050"%d degrees %d minutes %d seconds",) 118.8 590 T
(degrees, minutes, seconds\051;) 178.2 579 T
(end method say;) 108 568 T
5 F
(// definition unchanged, repeated for completeness) 108 549 T
4 F
(define abstract class <directed-angle> \050<angle>\051) 108 538 T
(slot direction :: <string>, init-keyword: direction:;) 118.8 527 T
(end class <directed-angle>;) 108 516 T
(define method say \050angle :: <directed-angle>\051 => \050\051) 108 497 T
(next-method\050\051;) 118.8 486 T
(format-out\050" %s", angle.direction\051;) 118.8 475 T
(end method say;) 108 464 T
5 F
(// definition unchanged, repeated for completeness) 108 445 T
4 F
(define class <relative-angle> \050<angle>\051) 108 434 T
(end class <relative-angle>;) 108 423 T
5 F
(// we need to show degrees for <relative-angle>, but do not need to show) 108 404 T
(// minutes and seconds,so we override the method on <angle>) 108 393 T
4 F
(define method say \050angle :: <relative-angle>\051 => \050\051) 108 382 T
(format-out\050" %d degrees", decode-total-seconds\050angle\051\051;) 118.8 371 T
(end method say;) 108 360 T
(define method say \050position :: <relative-position>\051 => \050\051) 108 341 T
(format-out\050"%d miles away at heading ", position.distance\051;) 118.8 330 T
(say\050position.angle\051;) 118.8 319 T
(end method say;) 108 308 T
1 11 Q
(T) 108 281.67 T
(o see the complete library) 113.73 281.67 T
(, and the test code that cr) 237.3 281.67 T
(eates position instances and) 358.52 281.67 T
(calls) 108 267.67 T
4 10 Q
(say) 132.2 267.67 T
1 11 Q
( on them, see Chapter 8,) 150.2 267.67 T
0 F
(A Simple Library) 272.54 267.67 T
1 F
(.) 349.76 267.67 T
-0.24 (Figur) 135 253.67 P
-0.24 (e 7.2 shows the inheritance r) 161.21 253.67 P
-0.24 (elationships of the classes. When one class) 297.55 253.67 P
(inherits fr) 108 239.67 T
(om another) 155.63 239.67 T
(, the r) 210.79 239.67 T
(elationship is sometimes called the) 238.45 239.67 T
2 F
(is-a relationship) 410.23 239.67 T
1 F
(.) 491.78 239.67 T
(For example, a dir) 108 225.67 T
(ect instance of) 196.27 225.67 T
4 10 Q
(<time-offset>) 267.84 225.67 T
0 11 Q
(is a) 348.59 225.67 T
4 10 Q
(<time>) 366.31 225.67 T
1 11 Q
( as well, and it) 402.31 225.67 T
0 F
(is a) 475.23 225.67 T
4 10 Q
(<sixty-unit>) 108 211.67 T
1 11 Q
(.) 180 211.67 T
(The classes have another kind of r) 135 197.67 T
(elationship as well \321 one class can use) 299.91 197.67 T
(another class as the type of a slot, in what is called the) 108 183.67 T
2 F
(has-a relationship) 372.71 183.67 T
1 F
(. Figur) 462.83 183.67 T
(e) 494.54 183.67 T
(7.3 shows both the inheritance r) 108 169.67 T
(elationships, and the r) 262.35 169.67 T
(elationships of one class) 370.09 169.67 T
(using another class as the type of a slot.) 108 155.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "93" 107
%%Page: "94" 108
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(94) 72 677.67 T
0 F
(Chapter 7) 91 677.67 T
(Modularity) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 10 Q
0 X
-0.25 (Figure 7.2) 108 478.33 P
8 F
-0.25 (Is-a relationships \050inher) 160.04 478.33 P
-0.25 (itance\051 among classes) 263.6 478.33 P
-0.25 (, sho) 362.42 478.33 P
-0.25 (wn b) 383.7 478.33 P
-0.25 (y arro) 404.36 478.33 P
-0.25 (ws) 429.52 478.33 P
-0.25 (. Abstr) 441.59 478.33 P
-0.25 (act) 470.13 478.33 P
0 0 0 1 0 0 0 K
108 456.01 504 464 C
36 72 576 720 C
0 0 0 1 0 0 0 K
8 10 Q
0 X
0 0 0 1 0 0 0 K
(classes are sho) 188.43 467.33 T
(wn in) 257.74 467.33 T
5 9 Q
(oblique) 283.86 467.33 T
(typewriter) 324.45 467.33 T
(font) 381.23 467.33 T
1 11 Q
(.) 402.83 467.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 229.02 504 237.02 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 7.3) 134.01 240.35 T
8 F
(Has-a relationships among classes) 186.8 240.35 T
(, sho) 341.7 240.35 T
(wn b) 363.23 240.35 T
(y dashed arro) 384.15 240.35 T
(ws) 445.14 240.35 T
(.) 457.21 240.35 T
0 0 0 1 0 0 0 K
108 491 504 648 C
108 495 504 646 C
0 -396 74 7 213 403 139 104.5 501 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f7-2.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f7-2 .eps)%%CreationDate: (6/6/96) (2:08 PM)%%BoundingBox: -396 74 7 213%%HiResBoundingBox: -395.0914 74.75 6.3921 212.7444%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Courier-Oblique%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: -197.5 2 -197.5 2%AI3_TileBox: -472 -363.5 80 366.5%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -425.5 374 2 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: Courier-ObliqueAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique[/_Courier-Oblique/Courier-Oblique 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4517.5 4322 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4517.5 4322 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4517.5 4322 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 -151 205.5 0 TpTP-21.5947 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Oblique 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(<object>\003) Tx 21.5947 -11 Td(\r) Tx TO0 To1 0 0 1 -234 174.25 0 TpTP-32.3921 0 Td0 Tr(<sixty-unit>) Tx (\r) TX TO0 To1 0 0 1 -68.5 174.25 0 TpTP-26.9934 0 Td0 Tr(<position>) Tx (\r) TX TO0 To1 0 0 1 -316 145 0 TpTP-16.196 0 Td0 Tr(<time>) Tx (\r) TX TO0 To1 0 0 1 -165.5 145 0 TpTP-18.8954 0 Td0 Tr(<angle>) Tx (\r) TX TO0 To1 0 0 1 -104 145 0 TpTP-26.9934 0 Td0 Tr/_Courier-Bold 9 Tf9 0 Tl(<absolute-\r) Tx 2.6993 -9 Td(position>) Tx (\r) TX TO0 To1 0 0 1 -26 145 0 TpTP-26.9934 0 Td0 Tr(<relative-\r) Tx 2.6993 -9 Td(position>) Tx (\r) TX TO0 To1 0 0 1 -360 110.5 0 TpTP-35.0914 0 Td0 Tr0 0 Tl(<time-of-day>) Tx (\r) TX TO0 To1 0 0 1 -273.75 110.5 0 TpTP-35.0914 0 Td0 Tr(<time-offset>) Tx (\r) TX TO0 To1 0 0 1 -191.75 110.5 0 TpTP-43.1894 0 Td0 Tr/_Courier-Oblique 9 Tf(<directed-angle>) Tx (\r) TX TO0 To1 0 0 1 -97.5 110.5 0 TpTP-43.1894 0 Td0 Tr/_Courier-Bold 9 Tf(<relative-angle>) Tx (\r) TX TO-396 4321.5 m-396 -4318.5 L(N) *0 To1 0 0 1 -227 77 0 TpTP-29.6927 0 Td0 Tr0 O0 g(<longitude>) Tx (\r) TX TO0 To1 0 0 1 -145.75 77 0 TpTP-26.9934 0 Td0 Tr(<latitude>) Tx (\r) TX TOu0 R0 G0.65 w-157.6667 200.5 m-216.3333 184.5 lS0 O0 g1 w-215.431 187.0661 m-222.9928 182.6555 l-214.2387 182.6944 l-215.431 187.0661 lfUu0 R0 G0.65 w-142 200.8333 m-82.3333 184.1667 lS0 O0 g1 w-84.4213 182.4292 m-75.6677 182.3363 l-83.2022 186.7936 l-84.4213 182.4292 lfUu0 R0 G0.65 w-250.6667 169.1667 m-300.6667 154.8333 lS0 O0 g1 w-299.7948 157.4103 m-307.299 152.9024 l-298.5462 153.0543 l-299.7948 157.4103 lfUu0 R0 G0.65 w-229.6667 168.5 m-179.6667 154.5 lS0 O0 g1 w-181.7591 152.7623 m-173.0055 152.6639 l-180.5372 157.1259 l-181.7591 152.7623 lfUu1 R0 G0.65 w-70.6667 169.8333 m-95.6667 154.8333 lS1 O0 g1 w-93.9552 158.611 m-100.0405 152.3179 l-91.6238 154.7253 l-93.9552 158.611 lbUu0 R0.65 w-62.6667 169.5 m-38.6667 156.1667 lS0 O0 g1 w-41.1043 154.9559 m-32.6125 152.8297 l-38.9037 158.917 l-41.1043 154.9559 lfUu0 R0 G0.65 w-167.5 140.5 m-194.75 124.5 lS0 O0 g1 w-194.5537 127.2132 m-200.6986 120.9783 l-192.2594 123.3055 l-194.5537 127.2132 lfUu0 R0 G0.65 w-161.25 139.5 m-134 123.75 lS0 O0 g1 w-136.4571 122.5845 m-128.0024 120.3147 l-134.1896 126.5078 l-136.4571 122.5845 lfUu0 R0 G0.65 w-183.25 105.75 m-156.25 90 lS0 O0 g1 w-158.711 88.8433 m-150.2655 86.5395 l-156.4277 92.7575 l-158.711 88.8433 lfUu0 R0 G0.65 w-191.2417 105.75 m-218.2417 90 lS0 O0 g1 w-215.7807 88.8433 m-224.2262 86.5395 l-218.064 92.7575 l-215.7807 88.8433 lfUu0 R0 G0.65 w-312.5 141.25 m-278.25 121.75 lS0 O0 g1 w-280.6972 120.571 m-272.2279 118.356 l-278.4551 124.5089 l-280.6972 120.571 lfUu0 R0 G0.65 w-320.6248 141.4845 m-354.8748 121.9845 lS0 O0 g1 w-352.4276 120.8056 m-360.8968 118.5905 l-354.6697 124.7434 l-352.4276 120.8056 lfU0 4321.5 m0 -4318.5 L(N) *LB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 491 504 648 C
36 72 576 720 C
108 253.02 504 444.01 C
108 257.02 504 442.01 C
0 -396 75 7 213 403 138 104.5 263.02 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f7-3.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f7-3 .eps)%%CreationDate: (6/6/96) (2:09 PM)%%BoundingBox: -396 75 7 213%%HiResBoundingBox: -395.0914 74.75 6.3921 212.7444%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Courier-Oblique%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: -198 2.5 -198 2.5%AI3_TileBox: -472 -363.5 80 366.5%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -426 326.5 2 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: Courier-ObliqueAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique[/_Courier-Oblique/Courier-Oblique 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 1 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4518 4322.5 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4518 4322.5 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4518 4322.5 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 -151 205.5 0 TpTP-21.5947 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Oblique 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(<object>\003) Tx 21.5947 -11 Td(\r) Tx TO0 To1 0 0 1 -234 175 0 TpTP-32.3921 0 Td0 Tr(<sixty-unit>) Tx (\r) TX TO0 To1 0 0 1 -68.5 175 0 TpTP-26.9934 0 Td0 Tr(<position>) Tx (\r) TX TO0 To1 0 0 1 -316 145 0 TpTP-16.196 0 Td0 Tr(<time>) Tx (\r) TX TO0 To1 0 0 1 -165.5 144.5 0 TpTP-18.8954 0 Td0 Tr(<angle>) Tx (\r) TX TO0 To1 0 0 1 -104 144.25 0 TpTP-26.9934 0 Td0 Tr/_Courier-Bold 9 Tf9 0 Tl(<absolute-\r) Tx 2.6993 -9 Td(position>) Tx (\r) TX TO0 To1 0 0 1 -26 144.25 0 TpTP-26.9934 0 Td0 Tr(<relative-\r) Tx 2.6993 -9 Td(position>) Tx (\r) TX TO0 To1 0 0 1 -360 110.5 0 TpTP-35.0914 0 Td0 Tr0 0 Tl(<time-of-day>) Tx (\r) TX TO0 To1 0 0 1 -273.75 110.5 0 TpTP-35.0914 0 Td0 Tr(<time-offset>) Tx (\r) TX TO-396 4321.5 m-396 -4318.5 L(N) *0 To1 0 0 1 -227 77 0 TpTP-29.6927 0 Td0 Tr0 O0 g(<longitude>) Tx (\r) TX TO0 To1 0 0 1 -145.75 77 0 TpTP-26.9934 0 Td0 Tr(<latitude>) Tx (\r) TX TOu0 R0 G0.65 w-157.6667 200.5 m-216.3333 184.5 lS0 O0 g1 w-215.431 187.0661 m-222.9928 182.6555 l-214.2387 182.6944 l-215.431 187.0661 lfUu0 R0 G0.65 w-142 200.8333 m-82.3333 184.1667 lS0 O0 g1 w-84.4213 182.4292 m-75.6677 182.3363 l-83.2022 186.7936 l-84.4213 182.4292 lfUu0 R0 G0.65 w-250.6667 169.1667 m-300.6667 154.8333 lS0 O0 g1 w-299.7948 157.4103 m-307.299 152.9024 l-298.5462 153.0543 l-299.7948 157.4103 lfUu0 R0 G0.65 w-229.6667 168.5 m-179.6667 154.5 lS0 O0 g1 w-181.7591 152.7623 m-173.0055 152.6639 l-180.5372 157.1259 l-181.7591 152.7623 lfUu1 R0 G0.65 w-70.6667 169.8333 m-95.6667 154.8333 lS1 O0 g1 w-93.9552 158.611 m-100.0405 152.3179 l-91.6238 154.7253 l-93.9552 158.611 lbUu0 R0.65 w-62.6667 169.5 m-38.6667 156.1667 lS0 O0 g1 w-41.1043 154.9559 m-32.6125 152.8297 l-38.9037 158.917 l-41.1043 154.9559 lfUu0 R0 G0.65 w-167.5 140.5 m-194.75 124.5 lS0 O0 g1 w-194.5537 127.2132 m-200.6986 120.9783 l-192.2594 123.3055 l-194.5537 127.2132 lfUu0 R0 G0.65 w-161.25 139.5 m-134 123.75 lS0 O0 g1 w-136.4571 122.5845 m-128.0024 120.3147 l-134.1896 126.5078 l-136.4571 122.5845 lfUu0 R0 G0.65 w-183.25 105.75 m-156.25 90 lS0 O0 g1 w-158.711 88.8433 m-150.2655 86.5395 l-156.4277 92.7575 l-158.711 88.8433 lfUu0 R0 G0.65 w-191.2417 105.75 m-218.2417 90 lS0 O0 g1 w-215.7807 88.8433 m-224.2262 86.5395 l-218.064 92.7575 l-215.7807 88.8433 lfUu0 R0 G0.65 w-312.5 141.25 m-278.25 121.75 lS0 O0 g1 w-280.6972 120.571 m-272.2279 118.356 l-278.4551 124.5089 l-280.6972 120.571 lfUu0 R0 G0.65 w-320.6248 141.4845 m-354.8748 121.9845 lS0 O0 g1 w-352.4276 120.8056 m-360.8968 118.5905 l-354.6697 124.7434 l-352.4276 120.8056 lfU0 4321.5 m0 -4318.5 L(N) *u0 R0 G0.65 w [5 ]0 d-25.8333 152.6667 m-25.8333 157.6667 -36.8333 191.6667 -65.1667 196.6667 c-114.8861 205.4404 -141.5 185.3333 -155.8333 157.3333 cS0 O0 g1 w []0 d-155.8514 162.1431 m-157.6879 153.5838 l-151.8177 160.0782 l-155.8514 162.1431 lfUu1 R0 G0.65 w [5 ]0 d-130.8958 138.9375 m-197.2292 89.6042 lS0 O0 g1 w []0 d-198.9295 91.3856 m-204.3626 84.5216 l-196.2253 87.7496 l-198.9295 91.3856 lfUu1 R0 G0.65 w [5 ]0 d-109.1667 129 m-134.5 91 lS0 O0 g1 w []0 d-135.5043 93.5246 m-138.3098 85.2323 l-131.7339 91.011 l-135.5043 93.5246 lfU1 Ap1 g-157.1667 109 m-157.1667 117.3333 L-173.1667 117.3333 L-173.1667 109 L-157.1667 109 Lf0 To1 0 0 1 -191.75 110.5 0 TpTP-43.1894 0 Td0 Tr0 g/_Courier-Oblique 9 Tf(<directed-angle>) Tx (\r) TX TO1 g0.65 w [5 ]0 d-114.5 107.6667 m-114.5 116.6667 L-123.1667 116.6667 L-126.1667 107 L-114.5 107.6667 Lf0 To1 0 0 1 -97.5 110.5 0 TpTP-43.1894 0 Td0 Tr0 g1 w []0 d/_Courier-Bold 9 Tf(<relative-angle>) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 253.02 504 444.01 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "94" 108
%%Page: "95" 109
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7.6 Meeting of angles and times) 399.08 677.67 T
2 F
(95) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(7.7  Abstract, concrete) 108 638 T
(, and instan) 240.06 638 T
(tiab) 308.42 638 T
(le c) 330.18 638 T
(lasses) 350.48 638 T
1 11 Q
(A class is either abstract or concr) 108 617.67 T
(ete. Abstract classes ar) 266.73 617.67 T
(e intended to be super-) 375.55 617.67 T
(classes. Ther) 108 603.67 T
(e ar) 168.91 603.67 T
(e never any dir) 186.57 603.67 T
(ect instances of an abstract class. All super) 259.68 603.67 T
(classes) 464.91 603.67 T
(of an abstract class must also be abstract. Concr) 108 589.67 T
(ete classes ar) 338.09 589.67 T
(e intended to have) 400.2 589.67 T
(dir) 108 575.67 T
(ect instances.) 122.07 575.67 T
(When you de\336ne a class with) 135 561.67 T
4 10 Q
(define class) 280.42 561.67 T
1 11 Q
(, the r) 352.42 561.67 T
(esult is a concr) 380.07 561.67 T
(ete class.) 451.36 561.67 T
(When you de\336ne a class with) 108 547.67 T
4 10 Q
(define abstract class) 253.42 547.67 T
1 11 Q
(, the r) 379.42 547.67 T
(esult is an abstract) 407.07 547.67 T
(class.) 108 533.67 T
3 13 Q
(7.7.1  Instantiab) 108 502.33 T
(le c) 187.9 502.33 T
(lasses) 205.49 502.33 T
1 11 Q
(A class that can be used as the \336rst ar) 108 482.67 T
(gument to) 289.04 482.67 T
4 10 Q
(make) 341.85 482.67 T
1 11 Q
( is an) 365.85 482.67 T
2 F
(instantiable) 393.87 482.67 T
1 F
( class. All) 453.73 482.67 T
(concr) 108 468.67 T
(ete classes ar) 134.32 468.67 T
(e instantiable. When you de\336ne an abstract class, Dylan does) 196.44 468.67 T
(not pr) 108 454.67 T
(ovide a method for) 137.5 454.67 T
4 10 Q
(make) 233.12 454.67 T
1 11 Q
( that enables you to cr) 257.12 454.67 T
(eate dir) 363.71 454.67 T
(ect instances of that) 400.16 454.67 T
(class. Thus, if you call) 108 440.67 T
4 10 Q
(make) 217.01 440.67 T
1 11 Q
( on an abstract class, you get an err) 241.01 440.67 T
(or) 410.52 440.67 T
(.) 420.06 440.67 T
-0.26 (Even though an abstract class does not have dir) 135 426.67 P
-0.26 (ect instances, it is sometimes) 363.75 426.67 P
(possible to use an abstract class as the \336rst ar) 108 412.67 T
(gument to) 325.89 412.67 T
4 10 Q
(make) 378.7 412.67 T
1 11 Q
(. In this case, the) 402.7 412.67 T
4 10 Q
(make) 108 398.67 T
1 11 Q
( function cr) 132 398.67 T
(eates and r) 187.31 398.67 T
(eturns a dir) 239.87 398.67 T
(ect instance of a concr) 295.83 398.67 T
(ete subclass of the) 401.97 398.67 T
(abstract class. In other wor) 108 384.67 T
(ds,) 237.85 384.67 T
4 10 Q
(make) 254.74 384.67 T
1 11 Q
( can r) 278.74 384.67 T
(eturn either a dir) 305.17 384.67 T
(ect or an indir) 387.3 384.67 T
(ect) 455.21 384.67 T
(instance of its \336rst ar) 108 370.67 T
(gument.) 208.93 370.67 T
-0.13 (T) 135 356.67 P
-0.13 (o make it possible for an abstract class to be pr) 140.73 356.67 P
-0.13 (ovided as the \336rst ar) 364.72 356.67 P
-0.13 (gument) 463.66 356.67 P
(to) 108 342.67 T
4 10 Q
(make) 120.34 342.67 T
1 11 Q
(, you de\336ne the abstract class, and de\336ne one or mor) 144.34 342.67 T
(e concr) 399.56 342.67 T
(ete subclasses) 433.91 342.67 T
(of it. Y) 108 328.67 T
(ou then de\336ne a method for) 139.03 328.67 T
4 10 Q
(make) 277.36 328.67 T
1 11 Q
( that specializes its \336rst parameter on the) 301.36 328.67 T
(abstract class, and that r) 108 314.67 T
(eturns an instance of one of its concr) 224.65 314.67 T
(ete subclasses. T) 401.4 314.67 T
(o) 479.73 314.67 T
(de\336ne) 108 300.67 T
4 10 Q
(make) 141.07 300.67 T
1 11 Q
( methods, you need to use the) 165.07 300.67 T
4 10 Q
(singleton) 313.26 300.67 T
1 11 Q
( function to cr) 367.26 300.67 T
(eate a type) 434.91 300.67 T
-0.08 (whose only instance is the class itself; see Chapter 9,) 108 286.67 P
0 F
-0.08 (Nonclass T) 365.86 286.67 P
-0.08 (ypes) 414.77 286.67 P
1 F
-0.08 (. De\336nition of) 434.33 286.67 P
4 10 Q
(make) 108 272.67 T
1 11 Q
( methods is an advanced topic that we do not cover in this book.) 132 272.67 T
(What is the r) 135 258.67 T
(eason for enabling users to call) 197.01 258.67 T
4 10 Q
(make) 349.49 258.67 T
1 11 Q
( on an abstract class? This) 373.49 258.67 T
(\337exibility allows a pr) 108 244.67 T
(ogram that needs a general kind of object, r) 210.48 244.67 T
(epr) 420.57 244.67 T
(esented by a) 436.59 244.67 T
(super) 108 230.67 T
(class, to ask for an instance of the super) 135.32 230.67 T
(class without specifying the dir) 326.93 230.67 T
(ect) 478.89 230.67 T
-0.09 (class of the instance. For example, a pr) 108 216.67 P
-0.09 (ogram might need to stor) 293.81 216.67 P
-0.09 (e data in a vector) 416.79 216.67 P
-0.09 (,) 498.59 216.67 P
-0.24 (but might not be concerned about the speci\336c implementation of the vector that it) 108 202.67 P
(uses. Such a pr) 108 188.67 T
(ogram can cr) 180.18 188.67 T
(eate a vector by calling) 243.18 188.67 T
4 10 Q
(make) 357.06 188.67 T
1 11 Q
( with the ar) 381.06 188.67 T
(gument) 436.58 188.67 T
4 10 Q
(<vector>) 108 174.67 T
1 11 Q
(, and) 156 174.67 T
4 10 Q
(make) 182.87 174.67 T
1 11 Q
( will cr) 206.87 174.67 T
(eate an instance of a concr) 240.18 174.67 T
(ete subclass. The built-in) 366.86 174.67 T
4 10 Q
(<vector>) 108 160.67 T
1 11 Q
( class is abstract, but is instantiable.) 156 160.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "95" 109
%%Page: "96" 110
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(96) 72 677.67 T
0 F
(Chapter 7) 91 677.67 T
(Modularity) 138.23 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(7.7.2  Design considerations f) 108 639.33 T
(or abstract c) 258.29 639.33 T
(lasses) 322.08 639.33 T
1 11 Q
(The built-in Dylan classes follow a design principle in which concr) 108 619.67 T
(ete classes do) 431.3 619.67 T
(not inherit fr) 108 605.67 T
(om other concr) 169.71 605.67 T
(ete classes, but rather inherit fr) 242.86 605.67 T
(om abstract classes) 392.3 605.67 T
-0.3 (only) 108 591.67 P
-0.3 (. In other wor) 128.5 591.67 P
-0.3 (ds, the branches of the tr) 193.65 591.67 P
-0.3 (ee ar) 311.52 591.67 P
-0.3 (e abstract classes, and the leaves of) 334.15 591.67 P
(the tr) 108 577.67 T
(ee ar) 133.74 577.67 T
(e concr) 156.68 577.67 T
(ete classes. W) 191.02 577.67 T
(e follow that design principle in this book as well.) 256.23 577.67 T
-0.3 (Figur) 108 563.67 P
-0.3 (e 7.2 shows our classes graphically; the branches of the tr) 134.21 563.67 P
-0.3 (ee \050abstract classes\051) 407.79 563.67 P
(appear in) 108 549.67 T
5 9 Q
(oblique) 156.94 549.67 T
(typewriter) 197.49 549.67 T
(font) 254.24 549.67 T
1 11 Q
(, and the leaves \050concr) 275.84 549.67 T
(ete classes\051 appear in) 383.57 549.67 T
4 9 Q
(bold typewriter font) 108 535.67 T
1 11 Q
(.) 216 535.67 T
-0.4 (Abstract classes can \336ll two r) 135 521.67 P
-0.4 (oles. First, they act as an interface. For example,) 273.56 521.67 P
(the) 108 507.67 T
4 10 Q
(<sixty-unit>) 126.01 507.67 T
1 11 Q
( class is an interface. If an object is of the) 198.01 507.67 T
4 10 Q
(<sixty-unit>) 396.27 507.67 T
1 11 Q
( type,) 468.27 507.67 T
-0.28 (you can expect certain behaviors fr) 108 493.67 P
-0.28 (om that object. Those behaviors ar) 275.87 493.67 P
-0.28 (e the generic) 440.58 493.67 P
(functions that ar) 108 479.67 T
(e specialized on) 187.66 479.67 T
4 10 Q
(<sixty-unit>) 267.61 479.67 T
1 11 Q
(, including) 339.61 479.67 T
4 10 Q
(decode-total-) 394.62 479.67 T
(seconds) 108 465.67 T
1 11 Q
(, and) 150 465.67 T
4 10 Q
(total-seconds) 176.87 465.67 T
1 11 Q
(.) 254.87 465.67 T
-0.18 (Abstract classes can also act as a partial implementation, if they de\336ne slots.) 135 451.67 P
(The slots in an abstract class ar) 108 437.67 T
(e useful for the classes that inherit fr) 257.25 437.67 T
(om that class.) 433.24 437.67 T
(For example, the) 108 423.67 T
4 10 Q
(<sixty-unit>) 191.96 423.67 T
1 11 Q
( class de\336nes the) 263.96 423.67 T
4 10 Q
(total-seconds) 348.11 423.67 T
1 11 Q
( slot, which is) 426.11 423.67 T
(useful for) 108 409.67 T
4 10 Q
(<time>) 157.58 409.67 T
1 11 Q
( and) 193.58 409.67 T
4 10 Q
(<position>) 217.7 409.67 T
1 11 Q
(.) 277.7 409.67 T
3 15 Q
(7.8  Summar) 108 370 T
(y) 181.27 370 T
1 11 Q
(In this chapter) 108 349.67 T
(, we cover) 177.24 349.67 T
(ed the following:) 226.46 349.67 T
(\245) 117 329.67 T
(A class can r) 135 329.67 T
(epr) 195.65 329.67 T
(esent characteristics and behavior in common acr) 211.68 329.67 T
(oss other) 450.79 329.67 T
(classes. For example, the) 135 315.67 T
4 10 Q
(<directed-angle>) 257.31 315.67 T
1 11 Q
( class r) 353.31 315.67 T
(epr) 385.87 315.67 T
(esents the degr) 401.9 315.67 T
(ees-) 474.76 315.67 T
(minutes-seconds aspects that ar) 135 301.67 T
(e common to latitude and longitude. Also,) 288.89 301.67 T
(the) 135 287.67 T
4 10 Q
(<sixty-unit>) 153.01 287.67 T
1 11 Q
( class r) 225.01 287.67 T
(epr) 257.57 287.67 T
(esents the) 273.59 287.67 T
4 10 Q
(total-seconds) 324.2 287.67 T
1 11 Q
( that ar) 402.2 287.67 T
(e common to) 436.43 287.67 T
4 10 Q
(<time>) 135 273.67 T
1 11 Q
( and) 171 273.67 T
4 10 Q
(<angle>) 195.12 273.67 T
1 11 Q
(.) 237.12 273.67 T
(\245) 117 253.67 T
(Classes can be used to r) 135 253.67 T
(epr) 249.68 253.67 T
(esent dif) 265.7 253.67 T
(fer) 307.03 253.67 T
(ences between two similar kinds of) 320.11 253.67 T
(objects. For example, the) 135 239.67 T
4 10 Q
(<latitude>) 257.53 239.67 T
1 11 Q
( and) 317.53 239.67 T
4 10 Q
(<longitude>) 341.65 239.67 T
1 11 Q
( classes ar) 407.65 239.67 T
(e similar) 455.64 239.67 T
(in that both classes inherit fr) 135 225.67 T
(om) 272.57 225.67 T
4 10 Q
(<directed-angle>) 291.04 225.67 T
1 11 Q
(, and neither class) 387.04 225.67 T
(de\336nes additional slots. However) 135 211.67 T
(, by pr) 297.76 211.67 T
(oviding the two classes,) 328.96 211.67 T
4 10 Q
(<latitude>) 135 197.67 T
1 11 Q
( and) 195 197.67 T
4 10 Q
(<longitude>) 219.12 197.67 T
1 11 Q
(, we make it possible to identify objects as) 285.12 197.67 T
(being of type) 135 183.67 T
4 10 Q
(<latitude>) 201.57 183.67 T
1 11 Q
( or) 261.57 183.67 T
4 10 Q
(<longitude>) 277.42 183.67 T
1 11 Q
(, and we make it possible to cus-) 343.42 183.67 T
(tomize the behavior of operations on) 135 169.67 T
4 10 Q
(<latitude>) 316.72 169.67 T
1 11 Q
( and) 376.72 169.67 T
4 10 Q
(<longitude>) 400.84 169.67 T
1 11 Q
( as) 466.84 169.67 T
(needed.) 135 155.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "96" 110
%%Page: "97" 111
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7.8 Summary) 468.74 677.67 T
2 F
(97) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(\245) 117 640.67 T
(In many object-oriented libraries and pr) 135 640.67 T
(ograms, certain classes ar) 328.64 640.67 T
(e not) 451.67 640.67 T
(intended to have dir) 135 626.67 T
(ect instances. Y) 233.87 626.67 T
(ou can de\336ne those classes as abstract) 306.75 626.67 T
(classes to document their purpose.) 135 612.67 T
(\245) 117 592.67 T
(When you have two r) 135 592.67 T
(elated classes and both will have dir) 240.13 592.67 T
(ect instances, it is) 415.95 592.67 T
(good practice to de\336ne a thir) 135 578.67 T
(d class to be the super) 274.62 578.67 T
(class of the two other) 381.53 578.67 T
(classes. The super) 135 564.67 T
(class is abstract, and the other two classes ar) 221.83 564.67 T
(e concr) 436.26 564.67 T
(ete.) 470.6 564.67 T
(W) 135 550.67 T
(e used this style in the time classes, the angle classes, and the position) 144.99 550.67 T
(classes. People can use the abstract super) 135 536.67 T
(classes, such as) 334.18 536.67 T
4 10 Q
(<position>) 410.77 536.67 T
1 11 Q
(, as) 470.77 536.67 T
(the type of objects that can be any kind of position.) 135 522.67 T
(\245) 117 502.67 T
(In pr) 135 502.67 T
(oper modularity) 158.62 502.67 T
(, a method on a particular class should not depend on) 237.4 502.67 T
(information that is private to second class. If someone changes the r) 135 488.67 T
(epr) 463.48 488.67 T
(e-) 479.51 488.67 T
(sentation of the second class, the method could br) 135 474.67 T
(eak. W) 376.78 474.67 T
(e showed an) 409.15 474.67 T
(example of br) 135 460.67 T
(eaking this r) 201.64 460.67 T
(ule when one version of the) 261.85 460.67 T
4 10 Q
(say) 399.41 460.67 T
1 11 Q
( method on) 417.41 460.67 T
4 10 Q
-0.4 (<absolute-position>) 135 446.67 P
1 11 Q
-0.18 ( printed \322latitude\323 and \322longitude\323 after calling) 249 446.67 P
4 10 Q
-0.4 (say) 483.43 446.67 P
1 11 Q
(on the dir) 135 432.67 T
(ected angles stor) 182.23 432.67 T
(ed in its two slots. The method on) 263.02 432.67 T
4 10 Q
(<absolute-) 430.22 432.67 T
-0.18 (position>) 135 418.67 P
1 11 Q
-0.08 ( acted on the knowledge that the method on) 189 418.67 P
4 10 Q
-0.18 (<directed-angle>) 405.33 418.67 P
1 11 Q
(does not print \322latitude\323 or \322longitude.\323) 135 404.67 T
(One of the challenges of modular design is for you to decide which attributes to) 108 384.67 T
(generalize \050by moving them up to higher) 108 370.67 T
(, or mor) 306.81 370.67 T
(e general, classes in the inherit-) 345.28 370.67 T
(ance graph\051, and which attributes to specialize \050by moving them down the inher-) 108 356.67 T
(itance graph into mor) 108 342.67 T
(e speci\336c classes\051. Another challenge is deciding when to) 213.13 342.67 T
(split a class into multiple behaviors, and when to intr) 108 328.67 T
(oduce mor) 366.27 328.67 T
(e abstract classes) 418.4 328.67 T
-0.41 (to hold shar) 108 314.67 P
-0.41 (ed behavior) 165.31 314.67 P
-0.41 (. No computer language can make these decisions for you,) 221.84 314.67 P
(but dynamic languages typically allow mor) 108 300.67 T
(e fr) 319.35 300.67 T
(eedom to explor) 335.18 300.67 T
(e these r) 414.16 300.67 T
(elation-) 454.27 300.67 T
(ships. Generic functions and multimethods allow mor) 108 286.67 T
(e fr) 370.26 286.67 T
(eedom in de\336ning) 386.09 286.67 T
(behavior than does attaching a method to a single class.) 108 272.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "97" 111
%%Page: "98" 112
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 126 522 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "98" 112
%%Page: "99" 113
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(99) 301.25 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(8) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(8) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(A Simple Library) 109 566.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
-0.38 (In this chapter) 108 424.67 P
-0.38 (, we cr) 176.49 424.67 P
-0.38 (eate a complete library that r) 207.47 424.67 P
-0.38 (epr) 345.01 424.67 P
-0.38 (esents time and position. The) 361.04 424.67 P
4 10 Q
(timespace) 108 410.67 T
1 11 Q
( library pr) 162 410.67 T
(ovides the) 211.05 410.67 T
4 10 Q
(say) 263.88 410.67 T
1 11 Q
( generic function for all concr) 281.88 410.67 T
(ete classes, the) 424.13 410.67 T
-0.16 (mathematical function) 108 396.67 P
4 10 Q
-0.36 (+) 220.01 396.67 P
1 11 Q
-0.16 ( on certain kinds of time, and the comparison functions) 226.01 396.67 P
4 10 Q
-0.36 (<) 495.41 396.67 P
1 11 Q
(and) 108 382.67 T
4 10 Q
(=) 129.37 382.67 T
1 11 Q
(, which enable users to call all other numerical comparisons,) 135.37 382.67 T
4 10 Q
(>) 430.77 382.67 T
1 11 Q
(,) 436.77 382.67 T
4 10 Q
(>=) 442.27 382.67 T
1 11 Q
(,) 454.27 382.67 T
4 10 Q
(<=) 459.77 382.67 T
1 11 Q
(, and) 471.77 382.67 T
4 10 Q
(~=) 108 368.67 T
1 11 Q
(. Our library consists of four \336les:) 120 368.67 T
(\245) 117 348.67 T
(The LID \336le lists all the \336les in the) 135 348.67 T
4 10 Q
(timespace) 303.36 348.67 T
1 11 Q
( library) 357.36 348.67 T
(.) 391.67 348.67 T
(\245) 117 328.67 T
(The library \336le de\336nes the) 135 328.67 T
4 10 Q
(timespace) 265.32 328.67 T
1 11 Q
( library and the) 319.32 328.67 T
4 10 Q
(timespace) 396.99 328.67 T
1 11 Q
( module.) 450.99 328.67 T
(\245) 117 308.67 T
(The implementation \336le de\336nes the classes, methods, and generic) 135 308.67 T
(functions.) 135 294.67 T
(\245) 117 274.67 T
(The test \336le cr) 135 274.67 T
(eates instances, calls) 202.93 274.67 T
4 10 Q
(say) 304.23 274.67 T
1 11 Q
( on them, and adds time instances.) 322.23 274.67 T
(W) 108 254.67 T
(e pr) 117.99 254.67 T
(ovide the test \336le so that you can experiment with the library) 136.76 254.67 T
(. Because the) 431.73 254.67 T
(test code has a purpose dif) 108 240.67 T
(fer) 237.33 240.67 T
(ent fr) 250.41 240.67 T
(om that of the implementation code, we sepa-) 276.22 240.67 T
(rate them into two \336les. Normally) 108 226.67 T
(, a \336nished library would not contain both the) 271.92 226.67 T
(implementation and the test code \321 the test code would be in a separate library) 108 212.67 T
(.) 494.77 212.67 T
(However) 108 198.67 T
(, when you ar) 152.62 198.67 T
(e starting to implement your pr) 219.26 198.67 T
(ogram or library) 372.1 198.67 T
(, it is con-) 451.2 198.67 T
(venient to put all the code in one library) 108 184.67 T
(, as we do her) 301.65 184.67 T
(e.) 368.56 184.67 T
(W) 135 170.67 T
(e shall continue to develop the time and position library in Part II. The) 144.99 170.67 T
(complete version is given in Chapter 14,) 108 156.67 T
0 F
(Four Complete Libraries) 308.57 156.67 T
1 F
(.) 416.35 156.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "99" 113
%%Page: "100" 114
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(100) 72 677.67 T
0 F
(Chapter 8) 95.75 677.67 T
(A Simple Library) 142.98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(8.1  The LID \336le) 108 638 T
(8.2  The librar) 108 505 T
(y \336le) 188.12 505 T
(8.3  The implementation \336le) 108 301 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The LID \336le:) 243.16 598.33 T
4 9 Q
(timespace.lid) 299.86 598.33 T
8 10 Q
(.) 370.05 598.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(library: timespace) 114 579 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(files:) 114 568 T
( library) 157.2 568 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(library-implementation) 162.6 557 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(test) 168 546 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The libr) 237.24 465.33 T
(ar) 270.48 465.33 T
(y \336le:) 279.67 465.33 T
4 9 Q
(library.dylan) 305.79 465.33 T
8 10 Q
(.) 375.98 465.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: dylan-user) 114 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define library timespace) 114 427 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 124.8 416 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use format-out;) 124.8 405 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end library timespace;) 114 394 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define module timespace) 114 375 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 124.8 364 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use format-out;) 124.8 353 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end module timespace;) 114 342 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The implementation \336le:) 176.54 261.33 T
4 9 Q
(library-implementation.dylan) 285.48 261.33 T
8 10 Q
(.) 436.67 261.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: timespace) 114 242 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The sixty-unit class) 114 223 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define abstract class <sixty-unit> \050<object>\051) 114 204 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 124.8 193 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <sixty-unit>;) 114 182 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 610.88 108 539.12 2 L
V
0.25 H
0 Z
N
522 610.88 522 539.12 2 L
V
N
107.88 611 522.12 611 2 L
V
N
107.88 591 522.12 591 2 L
V
N
107.88 539 522.12 539 2 L
V
N
108 477.88 108 335.12 2 L
V
N
522 477.88 522 335.12 2 L
V
N
107.88 478 522.12 478 2 L
V
N
107.88 458 522.12 458 2 L
V
N
107.88 335 522.12 335 2 L
V
N
108 273.88 108 175.12 2 L
V
N
522 273.88 522 175.12 2 L
V
N
107.88 274 522.12 274 2 L
V
N
107.88 254 522.12 254 2 L
V
N
107.88 175 522.12 175 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "100" 114
%%Page: "101" 115
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8.3 The implementation file) 411.21 677.67 T
2 F
(101) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// decode-total-seconds) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method decode-total-seconds) 114 597 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050sixty-unit :: <sixty-unit>\051) 135.6 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 119.4 575 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(decode-total-seconds\050abs\050time.total-seconds\051\051;) 124.8 564 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method decode-total-seconds;) 114 553 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method decode-total-seconds) 114 534 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050total-seconds :: <integer>\051) 135.6 523 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 119.4 512 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let\050total-minutes, seconds\051 = truncate/\050total-seconds, 60\051;) 124.8 501 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let\050hours, minutes\051 = truncate/\050total-minutes, 60\051;) 124.8 490 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050hours, minutes, seconds\051;) 124.8 479 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method decode-total-seconds;) 114 468 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// encode-total-seconds) 114 449 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method encode-total-seconds) 114 430 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 135.6 419 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=>) 119.4 408 T
(\050total-seconds :: <integer>\051) 135.6 408 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050\050max-unit * 60\051 + minutes\051 * 60 + seconds;) 124.8 397 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method encode-total-seconds;) 114 386 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The say generic function) 114 367 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Given an object, print a description of the object) 114 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define generic say \050any-object :: <object>\051 => \050\051;) 114 337 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The time classes and methods) 114 318 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define abstract class <time> \050<sixty-unit>\051) 114 299 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <time>;) 114 288 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050time :: <time>\051 => \050\051) 114 269 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let \050hours, minutes\051 = decode-total-seconds\050time\051;) 124.8 258 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out) 124.8 247 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050"%d:%s%d", hours, if \050minutes < 10\051 "0" else "" end, minutes\051;) 135.6 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 114 225 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// A specific time of day from 00:00 \050midnight\051 to before 24:00 \050tomorrow\051) 114 206 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <time-of-day> \050<time>\051) 114 195 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <time-of-day>;) 114 184 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// A relative time between -24:00 and +24:00) 114 165 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <time-offset> \050<time>\051) 114 154 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <time-offset>;) 114 143 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The implementation \336le:) 150.2 635.33 T
4 9 Q
(library-implementation.dylan) 259.12 635.33 T
8 10 Q
(.) 410.33 635.33 T
9 F
( \050contin) 413.11 635.33 T
(ued\051) 445.8 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 136.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 136.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 136 522.12 136 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "101" 115
%%Page: "102" 116
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(102) 72 677.67 T
0 F
(Chapter 8) 95.75 677.67 T
(A Simple Library) 142.98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// Method for determining whether a time offset is in the past) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method past? \050time :: <time-offset>\051 => \050past? :: <boolean>\051) 114 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time.total-seconds < 0;) 124.8 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method past?;) 114 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050time :: <time-offset>\051) 114 564 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"%s ", if \050past?\050time\051\051 "minus" else "plus" end\051;) 124.8 553 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 124.8 542 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 114 531 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Methods for adding times) 114 512 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method \134+) 114 493 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050offset1 :: <time-offset>, offset2 :: <time-offset>\051) 135.6 482 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050sum :: <time-offset>\051) 119.4 471 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let sum = offset1.total-seconds + offset2.total-seconds;) 124.8 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<time-offset>, total-seconds: sum\051;) 124.8 449 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method \134+;) 114 438 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method \134+) 114 419 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050offset :: <time-offset>, time-of-day :: <time-of-day>\051) 135.6 408 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050sum :: <time-of-day>\051) 119.4 397 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<time-of-day>,) 124.8 386 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds: offset.total-seconds + time-of-day.total-seconds\051;) 151.8 375 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method \134+;) 114 364 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method \134+) 114 345 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050time-of-day :: <time-of-day>, offset :: <time-offset>\051) 135.6 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050sum :: <time-of-day>\051) 119.4 323 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(offset + time-of-day;) 124.8 312 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method \134+;) 114 301 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Methods for comparing times) 114 282 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method \134< \050time1 :: <time-of-day>, time2 :: <time-of-day>\051) 114 263 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time1.total-seconds < time2.total-seconds;) 124.8 252 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method \134<;) 114 241 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method \134< \050time1 :: <time-offset>, time2 :: <time-offset>\051) 114 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time1.total-seconds < time2.total-seconds;) 124.8 211 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method \134<;) 114 200 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method \134= \050time1 :: <time-of-day>, time2 :: <time-of-day>\051) 114 181 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time1.total-seconds = time2.total-seconds;) 124.8 170 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method \134=;) 114 159 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The implementation \336le:) 150.2 635.33 T
4 9 Q
(library-implementation.dylan) 259.12 635.33 T
8 10 Q
(.) 410.33 635.33 T
9 F
( \050contin) 413.11 635.33 T
(ued\051) 445.8 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 152.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 152.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 152 522.12 152 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "102" 116
%%Page: "103" 117
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8.3 The implementation file) 411.21 677.67 T
2 F
(103) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
(define method \134= \050time1 :: <time-offset>, time2 :: <time-offset>\051) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time1.total-seconds = time2.total-seconds;) 124.8 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method \134=;) 114 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The angle classes and methods) 114 575 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define abstract class <angle> \050<sixty-unit>\051) 114 556 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <angle>;) 114 545 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050angle :: <angle>\051 => \050\051) 114 526 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let\050degrees, minutes, seconds\051 = decode-total-seconds\050angle\051;) 124.8 515 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out) 124.8 504 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050"%d degrees %d minutes %d seconds",) 135.6 493 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(degrees, minutes, seconds\051;) 141 482 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 114 471 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define class <relative-angle> \050<angle>\051) 114 452 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <relative-angle>;) 114 441 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// We need to show degrees for <relative-angle> but we do not need to) 114 422 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// show minutes and seconds, so we override the method on <angle>) 114 411 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method say \050angle :: <relative-angle>\051 => \050\051) 114 400 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050" %d degrees", decode-total-seconds\050angle\051\051;) 124.8 389 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 114 378 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define abstract class <directed-angle> \050<angle>\051) 114 359 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot direction :: <string>, init-keyword: direction:;) 124.8 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <directed-angle>;) 114 337 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050angle :: <directed-angle>\051 => \050\051) 114 318 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 124.8 307 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050" %s", angle.direction\051;) 124.8 296 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 114 285 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The latitude and longitude classes and methods) 114 266 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <latitude> \050<directed-angle>\051) 114 247 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <latitude>;) 114 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050latitude :: <latitude>\051 => \050\051) 114 217 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 124.8 206 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050" latitude\134n"\051;) 124.8 195 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 114 184 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define class <longitude> \050<directed-angle>\051) 114 165 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <longitude>;) 114 154 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The implementation \336le:) 150.2 635.33 T
4 9 Q
(library-implementation.dylan) 259.12 635.33 T
8 10 Q
(.) 410.33 635.33 T
9 F
( \050contin) 413.11 635.33 T
(ued\051) 445.8 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 147.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 147.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 147 522.12 147 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "103" 117
%%Page: "104" 118
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(104) 72 677.67 T
0 F
(Chapter 8) 95.75 677.67 T
(A Simple Library) 142.98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
(define method say \050longitude :: <longitude>\051 => \050\051) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 124.8 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050" longitude\134n"\051;) 124.8 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 114 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The position classes and methods) 114 564 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define abstract class <position> \050<object>\051) 114 545 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <position>;) 114 534 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define class <absolute-position> \050<position>\051) 114 515 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot latitude :: <latitude>, init-keyword: latitude:;) 124.8 504 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot longitude :: <longitude>, init-keyword: longitude:;) 124.8 493 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <absolute-position>;) 114 482 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050position :: <absolute-position>\051 => \050\051) 114 463 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050position.latitude\051;) 124.8 452 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050position.longitude\051;) 124.8 441 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 114 430 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define class <relative-position> \050<position>\051) 114 411 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Distance is in miles) 124.8 400 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot distance :: <single-float>, init-keyword: distance:;) 124.8 389 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot angle :: <angle>, init-keyword: angle:;) 124.8 378 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <relative-position>;) 114 367 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050position :: <relative-position>\051 => \050\051) 114 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"%d miles away at heading ", position.distance\051;) 124.8 337 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050position.angle\051;) 124.8 326 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 114 315 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The implementation \336le:) 150.2 635.33 T
4 9 Q
(library-implementation.dylan) 259.12 635.33 T
8 10 Q
(.) 410.33 635.33 T
9 F
( \050contin) 413.11 635.33 T
(ued\051) 445.8 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 308.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 308.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 308 522.12 308 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "104" 118
%%Page: "105" 119
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8.4 The test file) 457.66 677.67 T
2 F
(105) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(8.4  The test \336le) 108 638 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The test \336le:) 250.99 608.33 T
4 9 Q
(test.dylan) 308.23 608.33 T
8 10 Q
(.) 362.23 608.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: timespace) 114 589 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Creating an instance of <absolute-position>:\134n"\051;) 114 570 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define variable *my-absolute-position*) 114 551 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<absolute-position>,) 124.8 540 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(latitude: make\050<latitude>,) 162.6 529 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds: encode-total-seconds\05042, 19, 34\051,) 243.6 518 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(direction: "North"\051,) 243.6 507 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(longitude: make\050<longitude>,) 162.6 496 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds: encode-total-seconds\05070, 56, 26\051,) 249 485 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(direction: "West"\051\051;) 249 474 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050*my-absolute-position*\051;) 114 455 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"\134n"\051;) 114 436 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Creating an instance of <relative-position>:\134n"\051;) 114 417 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define variable *her-relative-position*) 114 398 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<relative-position>,) 124.8 387 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(distance: 30,) 162.6 376 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(angle: make\050<angle>,) 162.6 365 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds: encode-total-seconds\05090, 5, 0\051\051\051;) 227.4 354 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050*her-relative-position*\051;) 114 335 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"\134n"\051;) 114 316 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Creating an instance of <time-offset> in *minus-2-hours*.\134n"\051;) 114 297 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define variable *minus-2-hours*) 114 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<time-offset>, total-seconds: - encode-total-seconds \0502, 0, 0\051\051;) 124.8 267 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Creating an instance of <time-offset> in *plus-15-20-45*.\134n"\051;) 114 248 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define variable *plus-15-20-45*) 114 229 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<time-offset>, total-seconds: encode-total-seconds \05015, 20, 45\051\051;) 124.8 218 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Creating an instance of <time-of-day> in *8-30-59*.\134n"\051;) 114 199 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define variable *8-30-59*) 114 180 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<time-of-day>, total-seconds: encode-total-seconds \0508, 30, 59\051\051;) 124.8 169 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 620.88 108 162.12 2 L
V
0.25 H
0 Z
N
522 620.88 522 162.12 2 L
V
N
107.88 621 522.12 621 2 L
V
N
107.88 601 522.12 601 2 L
V
N
107.88 162 522.12 162 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "105" 119
%%Page: "106" 120
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(106) 72 677.67 T
0 F
(Chapter 8) 95.75 677.67 T
(A Simple Library) 142.98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(When we r) 108 455.67 T
(un the test \336le, we see the following output and values:) 161.27 455.67 T
6 9 Q
(Creating an instance of <absolute-position>:) 108 435 T
(42 degrees 19 minutes 34 seconds North latitude) 108 424 T
(70 degrees 56 minutes 26 seconds West longitude) 108 413 T
(Creating an instance of <relative-position>:) 108 394 T
(30 miles away at heading 90 degrees) 108 383 T
(Creating an instance of <time-offset> in *minus-2-hours*.) 108 364 T
(Creating an instance of <time-offset> in *plus-15-20-45*.) 108 353 T
(Creating an instance of <time-of-day> in *8-30-59*.) 108 342 T
(Adding <time-offset> + <time-offset>: *minus-2-hours* + *plus-15-20-45":) 108 331 T
(13) 108 320 T
(20) 108 309 T
(45) 108 298 T
(Adding <time-offset> + <time-of-day>: *minus-2-hours* + *8-30-59":) 108 287 T
(6) 108 276 T
(30) 108 265 T
(59) 108 254 T
(Adding <time-of-day> + <time-offset>: *8-30-59* + *minus-2-hours*:) 108 243 T
(6) 108 232 T
(30) 108 221 T
(59) 108 210 T
3 15 Q
(8.5  Summar) 108 172 T
(y) 181.27 172 T
1 11 Q
(In this chapter) 108 151.67 T
(, we cr) 177.24 151.67 T
(eated the four \336les that constitute the) 208.97 151.67 T
4 10 Q
(timespace) 392.4 151.67 T
1 11 Q
( library) 446.4 151.67 T
(.) 480.73 151.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(format-out\050"Adding <time-offset> + <time-offset>: *minus-2-hours* + *plus-) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15-20-45*:\134n"\051;) 114 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(decode-total-seconds\050*minus-2-hours* + *plus-15-20-45*\051;) 114 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Adding <time-offset> + <time-of-day>: *minus-2-hours* + *8-30-) 114 567 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59*:\134n"\051;) 114 556 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(decode-total-seconds\050*minus-2-hours* + *8-30-59*\051;) 114 537 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Adding <time-of-day> + <time-offset>: *8-30-59* + *minus-2-) 114 518 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(hours* :\134n"\051;) 114 507 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(decode-total-seconds\050*8-30-59* + *minus-2-hours*\051;) 114 488 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The test \336le:) 224.63 635.33 T
4 9 Q
(test.dylan) 281.89 635.33 T
8 10 Q
(.) 335.89 635.33 T
9 F
( \050contin) 338.67 635.33 T
(ued\051) 371.36 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 481.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 481.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 481 522.12 481 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "106" 120
%%Page: "107" 121
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(107) 298.88 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 530.98 512.43 590.14 R
7 X
V
1 30 Q
0 X
(Part II.) 108 570.14 T
(Intermediate T) 212.97 570.14 T
(opics) 406.74 570.14 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
-0.37 (Chapter 9,) 108 424.67 P
0 F
-0.37 (Nonclass T) 162.89 424.67 P
-0.37 (ypes) 211.51 424.67 P
1 F
-0.37 (, discusses types that ar) 231.07 424.67 P
-0.37 (e not classes, including singleton) 343.65 424.67 P
(types, limited types, and union types.) 108 410.67 T
-0.03 (Chapter 10,) 135 396.67 P
0 F
-0.03 (Slots) 196.41 396.67 P
1 F
-0.03 (, focuses on slot getters and setters, techniques for initializ-) 218.41 396.67 P
(ing slots, dif) 108 382.67 T
(fer) 167.48 382.67 T
(ent kinds of allocation of slots, virtual slots, and symbols.) 180.56 382.67 T
(Chapter 1) 135 368.67 T
(1,) 182.16 368.67 T
0 F
(Collections and Contr) 195.91 368.67 T
(ol Flow) 293.08 368.67 T
1 F
(, describes how to use collections,) 325.77 368.67 T
(including strings, lists, vectors, tables, and arrays. It also shows how to use) 108 354.67 T
(contr) 108 340.67 T
(ol-\337ow operators to alter the natural \050sequential\051 or) 133.02 340.67 T
(der of statement execu-) 382.63 340.67 T
(tion, including performing iteration.) 108 326.67 T
(Chapter 12,) 135 312.67 T
0 F
(Functions) 196.51 312.67 T
1 F
(, describes the syntax of function calls, the function-) 241.34 312.67 T
(calling pr) 108 298.67 T
(otocol, and the uses of functions as objects.) 154.01 298.67 T
(Chapter 13,) 135 284.67 T
0 F
(Libraries and Modules) 196.51 284.67 T
1 F
(, shows how you can package your code) 296.34 284.67 T
(into a r) 108 270.67 T
(eusable softwar) 142.34 270.67 T
(e component by designing libraries and modules.) 218.45 270.67 T
(Chapter 14,) 135 256.67 T
0 F
(Four Complete Libraries) 196.51 256.67 T
1 F
(, pulls together the techniques shown in) 304.29 256.67 T
(Part II in the context of a set of complete working libraries.) 108 242.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "107" 121
%%Page: "108" 122
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 126 522 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "108" 122
%%Page: "109" 123
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(109) 298.88 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(9) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(9) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Nonclass T) 109 566.45 T
(ypes) 253.45 566.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
-0.32 (Every class is a type, but not every type is a class. In this chapter) 108 424.67 P
-0.32 (, we describe how) 415.09 424.67 P
(to cr) 108 410.67 T
(eate nonclass types, and how to make use of them.) 129.37 410.67 T
3 15 Q
(9.1  Functions that create nonc) 108 371 T
(lass types) 288.92 371 T
1 11 Q
(Ther) 108 350.67 T
(e ar) 130.56 350.67 T
(e thr) 148.23 350.67 T
(ee functions that cr) 170.38 350.67 T
(eate types that ar) 262.71 350.67 T
(e not classes:) 345.56 350.67 T
4 10 Q
(singleton) 410.67 350.67 T
1 11 Q
(,) 464.67 350.67 T
4 10 Q
(type-) 470.17 350.67 T
(union) 108 336.67 T
1 11 Q
(, and) 138 336.67 T
4 10 Q
(limited) 164.87 336.67 T
1 11 Q
(.) 206.87 336.67 T
4 10 Q
(singleton) 135 310.67 T
1 11 Q
-0.01 (T) 216 310.67 P
-0.01 (akes any instance, and cr) 221.73 310.67 P
-0.01 (eates a type whose only member) 342.57 310.67 P
(is that instance. Y) 216 296.67 T
(ou can de\336ne a singleton type to be used) 300.17 296.67 T
(as the parameter specializer of a method that should be) 216 282.67 T
(chosen for a particular instance.) 216 268.67 T
4 10 Q
(type-union) 135 242.67 T
1 11 Q
(T) 216 242.67 T
(akes one or mor) 221.73 242.67 T
(e classes or types, and cr) 299.42 242.67 T
(eates a new type) 418.29 242.67 T
(whose members include all the members of the types that) 216 228.67 T
(ar) 216 214.67 T
(e its ar) 225.65 214.67 T
(guments.) 257.51 214.67 T
4 10 Q
(limited) 135 188.67 T
1 11 Q
(T) 216 188.67 T
(akes a type and cr) 221.73 188.67 T
(eates a new type, which is a mor) 309.02 188.67 T
(e) 466.52 188.67 T
(r) 216 174.67 T
(estricted version of the type that is its ar) 220.15 174.67 T
(gument \050the) 414.32 174.67 T
2 F
(base) 476.46 174.67 T
-0.24 (type) 216 160.67 P
1 F
-0.24 (\051. For example, you can de\336ne a new type that is based) 238 160.67 P
(on) 216 146.67 T
4 10 Q
(<integer>) 231.16 146.67 T
1 11 Q
(, but has a given minimum or maximum) 285.16 146.67 T
(value. Another example is to de\336ne a new collection type) 216 132.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "109" 123
%%Page: "110" 124
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(1) 72 677.67 T
(10) 76.4 677.67 T
0 F
(Chapter 9) 95.4 677.67 T
(Nonclass Types) 142.63 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(that speci\336es the type of elements, such as a type that is a) 216 640.67 T
(list of integers. The main r) 216 626.67 T
(easons for de\336ning types with) 343.05 626.67 T
4 10 Q
(limited) 216 612.67 T
1 11 Q
( ar) 258 612.67 T
(e to perform type checking and to incr) 270.4 612.67 T
(ease ef) 456.17 612.67 T
(\336-) 488.35 612.67 T
(ciency) 216 598.67 T
(. For information about the performance of limited) 245.54 598.67 T
(types, see Section 19.4, page 315.) 216 584.67 T
3 15 Q
(9.2  Examples of types that are not c) 108 498 T
(lasses) 320.39 498 T
1 11 Q
(Later in our development of the time library) 108 477.67 T
(, we shall \336nd it useful to de\336ne a) 321.79 477.67 T
(new type that r) 108 463.67 T
(epr) 181.9 463.67 T
(esents nonnegative integers:) 197.93 463.67 T
5 9 Q
(// Define nonnegative integers as integers that are >= zero) 108 443 T
4 F
(define constant <nonnegative-integer> = limited\050<integer>, min: 0\051;) 108 432 T
1 11 Q
(W) 108 411.67 T
(e can use a nonclass type as a parameter specializer of a method, or as the type) 117.99 411.67 T
(of a r) 108 397.67 T
(eturn value:) 132.82 397.67 T
4 9 Q
(define method encode-total-seconds) 108 377 T
(\050max-unit :: <nonnegative-integer>,) 129.6 366 T
(minutes :: <nonnegative-integer>,) 135 355 T
(seconds :: <nonnegative-integer>\051) 135 344 T
(=>) 113.4 333 T
(\050total-seconds :: <nonnegative-integer>\051) 129.6 333 T
(\050\050max-unit * 60\051 + minutes\051 * 60 + seconds;) 118.8 322 T
(end method encode-total-seconds;) 108 311 T
1 11 Q
(T) 108 290.67 T
(o see how we use) 113.73 290.67 T
4 10 Q
(<nonnegative-integer>) 201.28 290.67 T
1 11 Q
( in the time library) 327.28 290.67 T
(, see Section) 416.48 290.67 T
(10.2.2, page 120.) 108 276.67 T
(W) 135 262.67 T
(e can de\336ne a type whose only member is the false value,) 144.99 262.67 T
4 10 Q
(#f) 426.06 262.67 T
1 11 Q
(:) 438.06 262.67 T
4 9 Q
(singleton\050#f\051;) 108 242 T
1 11 Q
(W) 108 221.67 T
(e can de\336ne a type that is the union of the false value and) 117.99 221.67 T
4 10 Q
(<integer>) 399.45 221.67 T
1 11 Q
(:) 453.45 221.67 T
4 9 Q
(type-union\050singleton\050#f\051, <integer>\051;) 108 201 T
1 11 Q
(W) 108 180.67 T
(e can make it convenient for people to cr) 117.99 180.67 T
(eate new types like the one de\336ned in) 314.67 180.67 T
-0.34 (the pr) 108 166.67 P
-0.34 (eceding code. The new type is the union of the false value and the ar) 136.43 166.67 P
-0.34 (gument) 463.87 166.67 P
(to the method:) 108 152.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.49 (Convention:) 141 555.67 P
1 F
-0.49 (T) 205.29 555.67 P
-0.49 (ype names, like class names, ar) 211.04 555.67 P
-0.49 (e surr) 359.29 555.67 P
-0.49 (ounded with angle) 386.61 555.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(brackets \321 for example,) 141 541.67 T
4 10 Q
(<nonnegative-integer>) 261.45 541.67 T
1 11 Q
(.) 387.45 541.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 568.88 135 534.12 2 L
V
0.25 H
0 Z
N
486 568.88 486 534.12 2 L
V
N
134.88 569 486.12 569 2 L
V
N
134.88 534 486.12 534 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "110" 124
%%Page: "111" 125
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9.3 Method dispatch and nonclass types) 364.62 677.67 T
2 F
(1) 526.45 677.67 T
(1) 530.85 677.67 T
(1) 535.25 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define method false-or \050other-type :: <type>\051 => \050combined-type :: <type>\051) 108 642 T
(type-union\050singleton\050#f\051, other-type\051;) 118.8 631 T
(end method false-or;) 108 620 T
2 11 Q
(False-or) 108 599.67 T
1 F
( types ar) 147.72 599.67 T
(e useful as the type of slots. Note that a slot can be uninitialized.) 189.11 599.67 T
-0.27 (Once a slot r) 108 585.67 P
-0.27 (eceives a value, however) 167.75 585.67 P
-0.27 (, it will always have a value: Ther) 286.89 585.67 P
-0.27 (e is no way) 447.74 585.67 P
(to r) 108 571.67 T
(eturn a slot to the uninitialized state. Sometimes it is useful to stor) 124.49 571.67 T
(e in a slot a) 444.81 571.67 T
(value that means none. Later on in our development of the airport example, we) 108 557.67 T
-0.39 (use a false-or type as the type of a slot that stor) 108 543.67 P
-0.39 (es \322the next vehicle, if ther) 331 543.67 P
-0.39 (e is one.\323) 457.87 543.67 P
(If ther) 108 529.67 T
(e is no next vehicle, the slot contains) 137.52 529.67 T
4 10 Q
(#f) 316.55 529.67 T
1 11 Q
(. W) 328.55 529.67 T
(e cr) 344.04 529.67 T
(eate the type by calling) 361.09 529.67 T
4 10 Q
-0 (false-or\050<vehicle>\051) 108 515.67 P
1 11 Q
-0 (, and use the r) 222 515.67 P
-0 (esult as the type of the slot. Note that, if the) 290.33 515.67 P
(type of the slot wer) 108 501.67 T
(e just) 201.55 501.67 T
4 10 Q
(<vehicle>) 229.78 501.67 T
1 11 Q
(, we could not stor) 283.78 501.67 T
(e) 373.82 501.67 T
4 10 Q
(#f) 381.83 501.67 T
1 11 Q
( in the slot, and ther) 393.83 501.67 T
(e) 490.68 501.67 T
(would be no way to r) 108 487.67 T
(epr) 211.77 487.67 T
(esent none.) 227.8 487.67 T
-0.06 (Y) 135 473.67 P
-0.06 (ou can use) 141.32 473.67 P
4 10 Q
-0.13 (type-union) 195.38 473.67 P
1 11 Q
-0.06 ( and) 255.38 473.67 P
4 10 Q
-0.13 (singleton) 279.39 473.67 P
1 11 Q
-0.06 ( together to de\336ne a type that is an) 333.39 473.67 P
(enumeration of multiple-choice objects. For example,) 108 459.67 T
4 9 Q
(define constant <latitude-direction>) 108 439 T
(= type-union\050singleton\050#"north"\051, singleton\050#"south"\051\051;) 118.8 428 T
1 11 Q
(The) 108 407.67 T
4 10 Q
(<latitude-direction>) 129.16 407.67 T
1 11 Q
( type has two valid values: the keywor) 249.16 407.67 T
(ds) 436.48 407.67 T
4 10 Q
(#"north") 450.62 407.67 T
1 11 Q
(and) 108 393.67 T
4 10 Q
(#"south") 129.37 393.67 T
1 11 Q
(. For an explanation of how we could use that type to enfor) 177.37 393.67 T
(ce the) 464.29 393.67 T
(corr) 108 379.67 T
(ect values of a latitude slot, and for information about the performance of) 127.38 379.67 T
(enumerations, see Section 19.5, page 318.) 108 365.67 T
3 15 Q
(9.3  Method dispatc) 108 326 T
(h and nonc) 222.04 326 T
(lass types) 287.43 326 T
1 11 Q
(In this section, we describe the implications for method dispatch of using) 108 305.67 T
-0.14 (nonclass types as parameter specializers. This advanced topic is included as r) 108 291.67 P
-0.14 (efer-) 481.79 291.67 P
(ence material; you can skip it safely if you pr) 108 277.67 T
(efer) 325.35 277.67 T
(. The description that we give) 343.08 277.67 T
(her) 108 263.67 T
(e is meant to pr) 123.82 263.67 T
(ovide a general understanding, and does not cover all cases.) 198.77 263.67 T
(For exact details, you should consult) 108 249.67 T
0 F
(The Dylan Refer) 288.53 249.67 T
(ence Manual) 361.68 249.67 T
1 F
(.) 419.02 249.67 T
(Recall that, when a generic function is called, Dylan determines which) 135 235.67 T
(method to invoke by comparing the r) 108 221.67 T
(equir) 289.38 221.67 T
(ed) 314.79 221.67 T
2 F
(arguments) 329.53 221.67 T
1 F
( passed to the generic) 382.69 221.67 T
-0.16 (function with the types of the corr) 108 207.67 P
-0.16 (esponding) 272.52 207.67 P
2 F
-0.16 (parameters) 326.51 207.67 P
1 F
-0.16 ( of the generic function\325s) 382.11 207.67 P
(methods. Dylan uses the following pr) 108 193.67 T
(ocedur) 290.81 193.67 T
(e, assuming that ther) 324.47 193.67 T
(e is only one) 426.11 193.67 T
(r) 108 179.67 T
(equir) 112.15 179.67 T
(ed ar) 137.56 179.67 T
(gument:) 161.94 179.67 T
2 F
(1.) 117 159.67 T
1 F
-0.22 (Find all the applicable methods. A method is applicable if the r) 135 159.67 P
-0.22 (equir) 438.01 159.67 P
-0.22 (ed ar) 463.42 159.67 P
-0.22 (gu-) 487.59 159.67 P
(ment is an instance of the type of the specialized parameter) 135 145.67 T
(.) 421.92 145.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "111" 125
%%Page: "112" 126
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(1) 72 677.67 T
(12) 76.4 677.67 T
0 F
(Chapter 9) 95.4 677.67 T
(Nonclass Types) 142.63 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
2 11 Q
0 X
(2.) 117 640.67 T
1 F
(Sort the applicable methods in or) 135 640.67 T
(der of speci\336city) 295.9 640.67 T
(. One method is mor) 375.25 640.67 T
(e spe-) 474.75 640.67 T
-0.34 (ci\336c than another if the type of its specialized parameter is a) 135 626.67 P
2 F
-0.34 (proper subtype) 425.24 626.67 P
1 F
(of the type of the other method\325s specialized parameter) 135 612.67 T
(. For de\336nitions of) 402.81 612.67 T
(\322pr) 135 598.67 T
(oper subtype\323 in various situations, see Sections 9.3.1 thr) 151.26 598.67 T
(ough 9.3.5.) 427.43 598.67 T
-0.39 (\050In the pr) 135 578.67 P
-0.39 (esence of multiple inheritance, the speci\336city r) 179.51 578.67 P
-0.39 (ule is mor) 402.33 578.67 P
-0.39 (e complex.) 449.89 578.67 P
(For mor) 135 564.67 T
(e information, see Section 18.4, page 300.\051) 174.08 564.67 T
2 F
(3.) 117 544.67 T
1 F
(Call the most speci\336c method.) 135 544.67 T
(\050If ther) 108 524.67 T
(e is mor) 141.19 524.67 T
(e than one r) 179.69 524.67 T
(equir) 236.92 524.67 T
(ed ar) 262.33 524.67 T
(gument, Dylan constr) 286.72 524.67 T
(ucts the sorted list of) 392.22 524.67 T
(methods by combining separate sorted lists for all r) 108 510.67 T
(equir) 357.28 510.67 T
(ed ar) 382.69 510.67 T
(guments.\051) 407.08 510.67 T
-0.04 (For any given ar) 135 496.67 P
-0.04 (gument and any given set of parameter types, Dylan has to) 214.45 496.67 P
(answer two questions:) 108 482.67 T
2 F
(1.) 117 462.67 T
1 F
-0.33 (Is the ar) 135 462.67 P
-0.33 (gument an instance of a given type? The answer determines method) 173.11 462.67 P
(applicability) 135 448.67 T
(.) 194.68 448.67 T
2 F
(2.) 117 428.67 T
1 F
(Is one type a pr) 135 428.67 T
(oper subtype of another type? The answer determines) 209.89 428.67 T
(method speci\336city) 135 414.67 T
(.) 223.3 414.67 T
3 13 Q
(9.3.1  Method dispatc) 108 383.33 T
(h and c) 215.73 383.33 T
(lasses) 252.86 383.33 T
1 11 Q
(W) 108 363.67 T
(e have alr) 117.99 363.67 T
(eady seen that, when all types ar) 164.99 363.67 T
(e classes, Dylan uses the following) 323.57 363.67 T
(r) 108 349.67 T
(ules:) 112.26 349.67 T
2 F
(1.) 117 329.67 T
1 F
(An object is an instance of a class if it is a general instance of that class \050a) 135 329.67 T
(dir) 135 315.67 T
(ect instance of the class or of one of that class\325s subclasses\051.) 149.07 315.67 T
2 F
(2.) 117 295.67 T
1 F
(One class is a pr) 135 295.67 T
(oper subtype of another if the \336rst class is a subclass of the) 213.35 295.67 T
(second.) 135 281.67 T
(For example, suppose that we have these de\336nitions:) 108 261.67 T
5 9 Q
(// Method 1) 108 241 T
4 F
(define method say \050x :: <number>\051 ... end method say;) 108 230 T
5 F
(// Method 2) 108 211 T
4 F
(define method say \050x :: <integer>\051 ... end method say;) 108 200 T
1 11 Q
(Now) 108 179.67 T
(, if) 131.31 179.67 T
4 10 Q
(say) 146.42 179.67 T
1 11 Q
( is called with an ar) 164.42 179.67 T
(gument of) 258.73 179.67 T
4 10 Q
(100) 311.61 179.67 T
1 11 Q
(, both methods ar) 329.61 179.67 T
(e applicable, and) 414.7 179.67 T
(method 2 is mor) 108 165.67 T
(e speci\336c than method 1.) 187.18 165.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "112" 126
%%Page: "113" 127
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9.3 Method dispatch and nonclass types) 364.27 677.67 T
2 F
(1) 526.1 677.67 T
(13) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(9.3.2  Method dispatc) 108 639.33 T
(h and singletons) 215.73 639.33 T
1 11 Q
(When a type is a singleton, Dylan uses the following r) 108 619.67 T
(ules:) 370.06 619.67 T
2 F
(1.) 117 599.67 T
1 F
(An object is an instance of a singleton only if the object is identical to the) 135 599.67 T
(object used as the ar) 135 585.67 T
(gument in the call to) 232.76 585.67 T
4 10 Q
(singleton) 335.46 585.67 T
1 11 Q
( that cr) 389.46 585.67 T
(eated the) 423.07 585.67 T
(singleton.) 135 571.67 T
2 F
(2.) 117 551.67 T
1 F
(A singleton is a pr) 135 551.67 T
(oper subtype of any other type that the object belongs to.) 223.53 551.67 T
(Thus, a singleton is mor) 135 537.67 T
(e speci\336c than any other type of which an object is) 251.27 537.67 T
(an instance. In particular) 135 523.67 T
(, a singleton is mor) 254.91 523.67 T
(e speci\336c than the object\325s class.) 346.74 523.67 T
(For example, suppose that we have these de\336nitions:) 108 503.67 T
5 9 Q
(// Method 1) 108 483 T
4 F
(define method say \050x :: <integer>\051 ... end method say;) 108 472 T
5 F
(// Method 2) 108 453 T
4 F
(define method say \050x == 0\051 ... end method say;) 108 442 T
1 11 Q
-0.11 (Note that method 2 illustrates a convenient syntax for de\336ning a method on a sin-) 108 421.67 P
(gleton without calling) 108 407.67 T
4 10 Q
(singleton) 217.92 407.67 T
1 11 Q
( explicitly) 271.92 407.67 T
(.) 318.4 407.67 T
(Now) 135 393.67 T
(, if) 158.31 393.67 T
4 10 Q
(say) 173.42 393.67 T
1 11 Q
( is called with an ar) 191.42 393.67 T
(gument of) 285.73 393.67 T
4 10 Q
(0) 338.61 393.67 T
1 11 Q
(, both methods ar) 344.61 393.67 T
(e applicable,) 429.7 393.67 T
(and method 2 is mor) 108 379.67 T
(e speci\336c than method 1. If) 208.55 379.67 T
4 10 Q
(say) 341.7 379.67 T
1 11 Q
( is called with an ar) 359.7 379.67 T
(gument) 454 379.67 T
(that is any other integer) 108 365.67 T
(, only method 1 is applicable.) 222.94 365.67 T
3 13 Q
(9.3.3  Method dispatc) 108 334.33 T
(h and unions) 215.73 334.33 T
1 11 Q
(When a type is a union, Dylan uses the following r) 108 314.67 T
(ules:) 353.86 314.67 T
2 F
(1.) 117 294.67 T
1 F
-0.07 (An object is an instance of a union if it is an instance of any of the types that) 135 294.67 P
(make up that union.) 135 280.67 T
2 F
(2.) 117 260.67 T
1 F
(If none of the types that make up a union is a subtype of any other) 135 260.67 T
(, then) 456.74 260.67 T
(\245) 135 240.67 T
(A nonunion type is a pr) 153 240.67 T
(oper subtype of a union if the nonunion type is) 268.47 240.67 T
(a subtype of any of the types that make up the union.) 153 226.67 T
(\245) 135 206.67 T
(A union is a pr) 153 206.67 T
(oper subtype of a nonunion type if all types that make) 225.32 206.67 T
-0.04 (up the union ar) 153 192.67 P
-0.04 (e subtypes of the nonunion type, and if all the types that) 227.92 192.67 P
(make up the union, taken together) 153 178.67 T
(, ar) 319.88 178.67 T
(e not equivalent to the nonunion) 335.03 178.67 T
(type.) 153 164.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "113" 127
%%Page: "114" 128
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(1) 72 677.67 T
(14) 76.4 677.67 T
0 F
(Chapter 9) 95.4 677.67 T
(Nonclass Types) 142.63 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(\245) 135 640.67 T
(A union is a pr) 153 640.67 T
(oper subtype of another union if) 225.32 640.67 T
0 F
(each) 385.7 640.67 T
1 F
( of the types that) 404.85 640.67 T
-0.08 (make up the \336rst union is a subtype of) 153 626.67 P
0 F
-0.08 (one) 342.02 626.67 P
1 F
-0.08 ( of the types that make up the) 357.3 626.67 P
(other union, and if the two unions ar) 153 612.67 T
(e not equivalent.) 331.72 612.67 T
(For example, suppose that we have these de\336nitions:) 108 592.67 T
4 9 Q
(define constant <false-or-integer> = type-union\050<integer>, singleton\050#f\051\051;) 108 572 T
5 F
(// Method 1) 108 553 T
4 F
(define method say \050x :: <false-or-integer>\051 ... end method say;) 108 542 T
5 F
(// Method 2) 108 523 T
4 F
(define method say \050x :: <integer>\051 ... end method say;) 108 512 T
1 11 Q
(Now) 108 491.67 T
(, if) 131.31 491.67 T
4 10 Q
(say) 146.42 491.67 T
1 11 Q
( is called with an ar) 164.42 491.67 T
(gument that is an integer) 258.73 491.67 T
(, both methods ar) 379.66 491.67 T
(e appli-) 464.74 491.67 T
(cable, and method 2 is mor) 108 477.67 T
(e speci\336c than method 1. If) 238.99 477.67 T
4 10 Q
(say) 372.13 477.67 T
1 11 Q
( is called with an ar) 390.13 477.67 T
(gu-) 484.43 477.67 T
(ment of) 108 463.67 T
4 10 Q
(#f) 148.14 463.67 T
1 11 Q
(, only method 1 is applicable.) 160.14 463.67 T
3 13 Q
(9.3.4  Method dispatc) 108 432.33 T
(h and limited integ) 215.73 432.33 T
(er) 310.02 432.33 T
(s) 319.95 432.33 T
1 11 Q
(When a type is a limited-integer type, Dylan uses the following r) 108 412.67 T
(ules:) 422.29 412.67 T
2 F
(1.) 117 392.67 T
1 F
(An object is an instance of a limited-integer type if it is an instance of) 135 392.67 T
4 10 Q
(<integer>) 135 378.67 T
1 11 Q
( and if it is \050inclusively\051 within the speci\336ed range.) 189 378.67 T
2 F
(2.) 117 358.67 T
1 F
(A limited-integer type is a pr) 135 358.67 T
(oper subtype of) 275.76 358.67 T
4 10 Q
(<integer>) 354.87 358.67 T
1 11 Q
(, as long as it is not) 408.87 358.67 T
(equivalent to) 135 344.67 T
4 10 Q
(<integer>) 201.53 344.67 T
1 11 Q
(.) 255.53 344.67 T
-0.25 (One limited-integer type is a pr) 135 324.67 P
-0.25 (oper subtype of another limited-integer type) 286.28 324.67 P
(if the range of the \336rst type is entir) 135 310.67 T
(ely within the range of the second type,) 302.98 310.67 T
(and if the two types ar) 135 296.67 T
(e not equivalent.) 244.15 296.67 T
(For example, suppose that we have these de\336nitions:) 108 276.67 T
4 9 Q
(define constant <nonnegative-integer> = limited\050<integer>, min: 0\051;) 108 256 T
5 F
(// Method 1) 108 237 T
4 F
(define method say \050x :: <integer>\051 ... end method say;) 108 226 T
5 F
(// Method 2) 108 207 T
4 F
(define method say \050x :: <nonnegative-integer>\051 ... end method say;) 108 196 T
1 11 Q
(Now) 108 175.67 T
(, if) 131.31 175.67 T
4 10 Q
(say) 146.42 175.67 T
1 11 Q
( is called with an ar) 164.42 175.67 T
(gument of) 258.73 175.67 T
4 10 Q
(1) 311.61 175.67 T
1 11 Q
(, both methods ar) 317.61 175.67 T
(e applicable, and) 402.7 175.67 T
(method 2 is mor) 108 161.67 T
(e speci\336c than method 1. If) 187.18 161.67 T
4 10 Q
(say) 320.32 161.67 T
1 11 Q
( is called with an ar) 338.32 161.67 T
(gument of) 432.62 161.67 T
4 10 Q
(-1) 485.51 161.67 T
1 11 Q
(,) 497.51 161.67 T
(only method 1 is applicable.) 108 147.67 T
(Now suppose that, instead, we have the following de\336nitions:) 135 133.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "114" 128
%%Page: "115" 129
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9.3 Method dispatch and nonclass types) 364.27 677.67 T
2 F
(1) 526.1 677.67 T
(15) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define constant <limited-integer-1> = limited\050<integer>, min: -2, max: 2\051;) 108 642 T
(define constant <limited-integer-2> = limited\050<integer>, min: 0, max: 4\051;) 108 623 T
5 F
(// Method 1) 108 604 T
4 F
(define method say \050x :: <limited-integer-1>\051 ... end method say;) 108 593 T
5 F
(// Method 2) 108 574 T
4 F
(define method say \050x :: <limited-integer-2>\051 ... end method say;) 108 563 T
1 11 Q
-0.15 (Now) 108 542.67 P
-0.15 (, if) 131.31 542.67 P
4 10 Q
-0.32 (say) 146.13 542.67 P
1 11 Q
-0.15 ( is called with an ar) 164.13 542.67 P
-0.15 (gument of) 257.7 542.67 P
4 10 Q
-0.32 (1) 310.3 542.67 P
1 11 Q
-0.15 (, both methods ar) 316.3 542.67 P
-0.15 (e applicable, and nei-) 400.95 542.67 P
(ther method is mor) 108 528.67 T
(e speci\336c than the other; the two methods ar) 201.28 528.67 T
(e) 416.25 528.67 T
2 F
(ambiguous) 424.27 528.67 T
1 F
(. If) 480.49 528.67 T
(no mor) 108 514.67 T
(e speci\336c method exists, Dylan signals an err) 143.02 514.67 T
(or when we call) 360.36 514.67 T
4 10 Q
(say) 440.19 514.67 T
1 11 Q
( with an) 458.19 514.67 T
(ar) 108 500.67 T
(gument of) 117.65 500.67 T
4 10 Q
(1) 170.54 500.67 T
1 11 Q
(.) 176.54 500.67 T
3 13 Q
(9.3.5  Method dispatc) 108 469.33 T
(h and limited collections) 215.73 469.33 T
1 11 Q
(When a type is a limited-collection type, Dylan uses the following r) 108 449.67 T
(ules:) 434.74 449.67 T
2 F
(1.) 117 429.67 T
1 F
(An object is an instance of a limited-collection type) 135 429.67 T
0 F
(<L1>) 384.73 429.67 T
1 F
( if the object was) 409.68 429.67 T
-0.12 (cr) 135 415.67 P
-0.12 (eated via) 144.03 415.67 P
4 10 Q
-0.25 (make) 190.56 415.67 P
1 11 Q
-0.12 ( \050or a similar constr) 214.56 415.67 P
-0.12 (uctor\051 applied to limited-collection type) 308.23 415.67 P
0 F
(<L2>) 135 401.67 T
1 F
(, and if) 159.95 401.67 T
0 F
(<L2>) 196.43 401.67 T
1 F
( is a subtype of) 221.38 401.67 T
0 F
(<L1>) 297.13 401.67 T
1 F
(. An instance of a limited-collection) 322.08 401.67 T
(type is also an instance of the collection\325s base type.) 135 387.67 T
2 F
(2.) 117 367.67 T
1 F
(A limited-collection type is a pr) 135 367.67 T
(oper subtype of its base type, as long as it is) 288.21 367.67 T
(not equivalent to the base type.) 135 353.67 T
(Generally) 135 333.67 T
(, one limited-collection type is a pr) 181.48 333.67 T
(oper subtype of another) 349.3 333.67 T
(limited-collection type if all the following ar) 135 319.67 T
(e tr) 348.92 319.67 T
(ue: the base type of the \336rst) 364.78 319.67 T
-0.04 (is a subclass of the base type of the second; the two element types ar) 135 305.67 P
-0.04 (e equiv-) 464.88 305.67 P
(alent; the size or dimensions of the \336rst limited type ar) 135 291.67 T
(e no less r) 399.99 291.67 T
(estricted) 447.86 291.67 T
(than those of the second type; and the \336rst limited type is not equivalent to) 135 277.67 T
(the second.) 135 263.67 T
(For example, suppose that we have these de\336nitions:) 108 243.67 T
4 9 Q
(define constant <limited-vector-of-3-integers>) 108 223 T
(= limited\050<vector>, of: <integer>, size: 3\051;) 118.8 212 T
(define constant <limited-vector-of-3-numbers>) 108 193 T
(= limited\050<vector>, of: <number>, size: 3\051;) 118.8 182 T
-0.22 (define constant $v1 = make\050<limited-vector-of-3-integers>, size: 3, fill: 1\051;) 108 163 P
(define constant $v2 = vector\0501, 1, 1\051;) 108 144 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "115" 129
%%Page: "116" 130
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(1) 72 677.67 T
(16) 76.4 677.67 T
0 F
(Chapter 9) 95.4 677.67 T
(Nonclass Types) 142.63 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
5 9 Q
0 X
(// Method 1) 108 642 T
4 F
(define method say \050x :: <vector>\051 ... end method say;) 108 631 T
5 F
(// Method 2) 108 612 T
4 F
(define method say \050x :: <limited-vector-of-3-integers>\051 ... end method say;) 108 601 T
5 F
(// Method 3) 108 582 T
4 F
(define method say \050x :: <limited-vector-of-3-numbers>\051 ... end method say;) 108 571 T
1 11 Q
(Now) 108 550.67 T
(, if) 131.31 550.67 T
4 10 Q
(say) 146.42 550.67 T
1 11 Q
( is called with an ar) 164.42 550.67 T
(gument of) 258.73 550.67 T
4 10 Q
($v1) 311.61 550.67 T
1 11 Q
(, both method 1 and method 2 ar) 329.61 550.67 T
(e) 488.36 550.67 T
(applicable, and method 2 is mor) 108 536.67 T
(e speci\336c than method 1. Note that) 264.11 536.67 T
4 10 Q
($v1) 435.71 536.67 T
1 11 Q
( is an) 453.71 536.67 T
(instance of) 108 522.67 T
4 10 Q
(<limited-vector-of-3-integers>) 163.08 522.67 T
1 11 Q
( but is not an instance of) 343.08 522.67 T
4 10 Q
-0.49 (<limited-vector-of-3-numbers>) 108 508.67 P
1 11 Q
-0.22 (, because the element type of) 282 508.67 P
4 10 Q
-0.49 ($v1) 423.42 508.67 P
1 11 Q
-0.22 ( is not equiv-) 441.42 508.67 P
(alent to the element type of) 108 494.67 T
4 10 Q
(<limited-vector-of-3-numbers>.) 243.27 494.67 T
1 11 Q
(If) 135 480.67 T
4 10 Q
(say) 145.12 480.67 T
1 11 Q
( is called with an ar) 163.12 480.67 T
(gument of) 257.42 480.67 T
4 10 Q
($v2) 310.31 480.67 T
1 11 Q
(, only method 1 is applicable. Note) 328.31 480.67 T
(that) 108 466.67 T
4 10 Q
($v2) 129.82 466.67 T
1 11 Q
(is not an instance of either of the limited-collection types we de\336ned,) 153.82 466.67 T
(even though) 108 452.67 T
4 10 Q
($v2) 171.8 452.67 T
1 11 Q
( is a vector that contains thr) 189.8 452.67 T
(ee integers. \050For example, we could) 323.82 452.67 T
(stor) 108 438.67 T
(e objects other than integers in) 126.4 438.67 T
4 10 Q
($v2) 277.19 438.67 T
1 11 Q
(.\051) 295.19 438.67 T
3 15 Q
(9.4  Summar) 108 399 T
(y) 181.27 399 T
1 11 Q
(In this chapter) 108 378.67 T
(, we discussed types that ar) 177.24 378.67 T
(e not classes:) 310.58 378.67 T
(\245) 117 358.67 T
(A) 135 358.67 T
2 F
(singleton type) 146.31 358.67 T
1 F
( is a type whose only member is one particular instance.) 218.1 358.67 T
(An example of cr) 135 344.67 T
(eating a singleton type is:) 218.15 344.67 T
4 9 Q
(singleton\050#f\051;) 135 324 T
1 11 Q
(\245) 117 303.67 T
(A) 135 303.67 T
2 F
(union type) 146.31 303.67 T
1 F
( is a type whose members include all the members of one or) 201 303.67 T
(mor) 135 289.67 T
(e base types. An example of cr) 154.87 289.67 T
(eating a union type is:) 302.05 289.67 T
4 9 Q
(type-union\050singleton\050#f\051, <integer>\051;) 135 269 T
1 11 Q
(\245) 117 248.67 T
-0.16 (A) 135 248.67 P
2 F
-0.16 (limited type) 146.15 248.67 P
1 F
-0.16 ( is a type that is a mor) 207.39 248.67 P
-0.16 (e r) 312.79 248.67 P
-0.16 (estricted version of its base type. For) 324.8 248.67 P
(example, a limited-integer type is based on) 135 234.67 T
4 10 Q
(<integer>) 346.57 234.67 T
1 11 Q
(, but has a given) 400.57 234.67 T
(minimum or maximum value:) 135 220.67 T
4 9 Q
(limited\050<integer>, min: 0\051;) 135 200 T
1 11 Q
(Another example of a limited type is a limited-collection type, which is a) 135 179.67 T
(collection type that speci\336es the type of elements, and/or the size of the) 135 165.67 T
(collection:) 135 151.67 T
4 9 Q
(limited\050<vector>, of: <integer>, size: 3\051;) 135 131 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "116" 130
%%Page: "117" 131
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(1) 299.05 110.67 T
(17) 303.45 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(10) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(10) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Slots) 110 566.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
-0.01 (In this chapter) 108 424.67 P
-0.01 (, we show how to call getters and setters with the function-call syn-) 177.22 424.67 P
(tax, and how to de\336ne methods for getters and setters. W) 108 410.67 T
(e show techniques for) 385.08 410.67 T
(initializing slots, including slot options and) 108 396.67 T
4 10 Q
(initialize) 321.4 396.67 T
1 11 Q
( methods. W) 381.4 396.67 T
(e describe) 442 396.67 T
(the dif) 108 382.67 T
(fer) 139.39 382.67 T
(ent allocations that slots can have. W) 152.47 382.67 T
(e \336nd a need for symbols, so we) 330.49 382.67 T
(describe and use symbols as well.) 108 368.67 T
3 15 Q
(10.1  Dot-syntax abbre) 108 329 T
(viation f) 239.09 329 T
(or simple function calls) 286.02 329 T
1 11 Q
-0 (The dot syntax that we have shown for getters in Section 4.4, page 42, is an abbr) 108 308.67 P
-0 (e-) 495.07 308.67 P
(viation for a function call. The \336rst expr) 108 294.67 T
(ession is an abbr) 300.55 294.67 T
(eviation for the second) 380.59 294.67 T
(expr) 108 280.67 T
(ession:) 129.7 280.67 T
6 9 Q
(object.function-name) 108 260 T
(function-name) 108 241 T
4 10 Q
(\050) 178.2 241 T
6 9 Q
(object) 184.2 241 T
4 10 Q
(\051) 216.6 241 T
1 11 Q
(The dot syntax used with the assignment operator also is an abbr) 108 220.67 T
(eviation for a) 423.96 220.67 T
(function call. The \336rst two expr) 108 206.67 T
(essions ar) 260.2 206.67 T
(e abbr) 307.46 206.67 T
(eviations for the thir) 337.3 206.67 T
(d expr) 436.2 206.67 T
(ession:) 467.37 206.67 T
6 9 Q
(object.name) 108 186 T
4 F
( :=) 167.4 186 T
6 F
(new-value) 189 186 T
4 F
(;) 237.6 186 T
6 F
(name\050object\051) 108 167 T
4 F
( :=) 172.8 167 T
6 F
(new-value) 194.4 167 T
4 F
(;) 243 167 T
6 F
(name) 108 148 T
4 F
(-setter\050) 129.6 148 T
6 F
(new-value) 172.8 148 T
4 F
(,) 221.4 148 T
6 F
(object) 232.2 148 T
4 F
(\051;) 264.6 148 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "117" 131
%%Page: "118" 132
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(1) 72 677.67 T
(18) 76.4 677.67 T
0 F
(Chapter 10) 95.4 677.67 T
(Slots) 147.38 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.27 (Y) 108 640.67 P
-0.27 (ou can use the dot syntax as an abbr) 114.32 640.67 P
-0.27 (eviation for any function call that takes a sin-) 287.55 640.67 P
-0.43 (gle ar) 108 626.67 P
-0.43 (gument and r) 134.55 626.67 P
-0.43 (eturns a single value. For example, in Section 5.1.3, page 54, we) 199.69 626.67 P
(de\336ned the following method:) 108 612.67 T
4 9 Q
(define method past? \050time :: <time-offset>\051 => \050past? :: <boolean>\051) 108 592 T
(time.total-seconds < 0;) 118.8 581 T
(end method past?;) 108 570 T
1 11 Q
(The following two calls ar) 108 549.67 T
(e equivalent:) 234.25 549.67 T
4 9 Q
(past?\050*my-time-offset*\051;) 108 529 T
(*my-time-offset*.past?;) 108 510 T
1 11 Q
(In the r) 108 489.67 T
(emainder of this book, we use the dot syntax for function calls that r) 143.01 489.67 T
(eturn) 473.65 489.67 T
-0.32 (a pr) 108 475.67 P
-0.32 (operty of an object \050such as the) 126.69 475.67 P
4 10 Q
-0.7 (past?) 277.25 475.67 P
1 11 Q
-0.32 ( pr) 307.25 475.67 P
-0.32 (operty of a) 320.44 475.67 P
4 10 Q
-0.7 (<time-offset>) 374.82 475.67 P
1 11 Q
-0.32 ( instance\051,) 452.82 475.67 P
(and that take a single ar) 108 461.67 T
(gument and r) 223.92 461.67 T
(eturn a single value.) 289.91 461.67 T
3 15 Q
(10.2  Getter) 108 422 T
(s and setter) 174.84 422 T
(s f) 243.72 422 T
(or slots) 257.85 422 T
1 11 Q
(As shown in Section 4.4, page 42, when you de\336ne a class, Dylan automatically) 108 401.67 T
(de\336nes a getter method to r) 108 387.67 T
(eturn the value of a slot, and de\336nes a setter method) 241.84 387.67 T
(to change the value of a slot.) 108 373.67 T
(The name of the getter is always the name of the slot. Thus, the getter for the) 108 252.67 T
4 10 Q
(total-seconds) 108 238.67 T
1 11 Q
( slot is) 186 238.67 T
4 10 Q
(total-seconds) 219.57 238.67 T
1 11 Q
(. Let\325s look at an example of calling a get-) 297.57 238.67 T
(ter) 108 224.67 T
(. The \336rst expr) 120.39 224.67 T
(ession is an abbr) 190.75 224.67 T
(eviation for the second expr) 270.79 224.67 T
(ession:) 406.09 224.67 T
4 9 Q
(*my-time-of-day*.total-seconds;) 108 204 T
(total-seconds\050*my-time-of-day*\051;) 108 185 T
1 11 Q
-0.22 (The pr) 108 164.67 P
-0.22 (eceding expr) 139.71 164.67 P
-0.22 (essions ar) 201.8 164.67 P
-0.22 (e calls to the getter function named) 248.86 164.67 P
4 10 Q
-0.47 (total-seconds) 420.72 164.67 P
1 11 Q
-0.22 (.) 498.72 164.67 P
(The choice of which syntax to use is pur) 108 150.67 T
(ely a matter of personal style. The \336rst) 302.15 150.67 T
(syntax is pr) 108 136.67 T
(ovided for those people who pr) 164.07 136.67 T
(efer the slightly mor) 317.2 136.67 T
(e concise dot syn-) 415.6 136.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.22 (Performance note:) 141 344.67 P
1 F
-0.22 ( For slot accesses, given accurate type declarations,) 231.84 344.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the compiler can typically optimize away not only the method dis-) 141 330.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.01 (patch, but also the function call, making the executed code just as ef) 141 316.67 P
-0.01 (\336-) 469.68 316.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.28 (cient as it would be in a language such as C, wher) 141 302.67 P
-0.28 (e str) 379.67 302.67 P
-0.28 (uctur) 399.92 302.67 P
-0.28 (e or r) 425.8 302.67 P
-0.28 (ecor) 450.5 302.67 P
-0.28 (d) 470.81 302.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slots ar) 141 288.67 T
(e accessed dir) 175.52 288.67 T
(ectly) 242.21 288.67 T
(. See Chapter 19,) 264.05 288.67 T
0 F
(Performance and Flexibility) 350.12 288.67 T
1 F
(.) 473.38 288.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 357.88 135 281.12 2 L
V
0.25 H
0 Z
N
486 357.88 486 281.12 2 L
V
N
134.88 358 486.12 358 2 L
V
N
134.88 281 486.12 281 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "118" 132
%%Page: "119" 133
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10.2 Getters and setters for slots) 393.11 677.67 T
2 F
(1) 526.1 677.67 T
(19) 530.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(tax. The second syntax is pr) 108 640.67 T
(ovided for those people who pr) 242.19 640.67 T
(efer slot accesses to) 395.32 640.67 T
(look like function calls. In this book, we use the dot syntax.) 108 626.67 T
(By default, the name of the setter is the slot\325s name followed by) 135 612.67 T
4 10 Q
(-setter) 445.32 612.67 T
1 11 Q
(.) 486.51 612.67 T
(Thus, the setter for the) 108 598.67 T
4 10 Q
(total-seconds) 220.19 598.67 T
1 11 Q
( slot is) 298.19 598.67 T
4 10 Q
(total-seconds-setter) 331.76 598.67 T
1 11 Q
(. Y) 450.95 598.67 T
(ou can) 462.77 598.67 T
(use the) 108 584.67 T
4 10 Q
(:setter) 145.32 584.67 T
1 11 Q
( slot option to specify a dif) 187.32 584.67 T
(fer) 315.98 584.67 T
(ent name for the setter) 329.06 584.67 T
(.) 437.38 584.67 T
-0.2 (The dot-syntax abbr) 135 570.67 P
-0.2 (eviation for assignment enables you to invoke the setter) 232.24 570.67 P
(by using assignment with the name of the getter) 108 556.67 T
(. For example, the \336rst two) 341.52 556.67 T
(expr) 108 542.67 T
(essions ar) 129.7 542.67 T
(e abbr) 176.97 542.67 T
(eviations for the thir) 206.8 542.67 T
(d expr) 305.7 542.67 T
(ession:) 336.88 542.67 T
4 9 Q
(*my-time-of-day*.total-seconds := 180;) 108 522 T
(total-seconds\050*my-time-of-day*\051 := 180;) 108 503 T
(total-seconds-setter\050180, *my-time-of-day*\051;) 108 484 T
1 11 Q
(Each of these expr) 108 463.67 T
(essions stor) 196.32 463.67 T
(es the value) 252.34 463.67 T
4 10 Q
(180) 312.6 463.67 T
1 11 Q
( in the slot named) 330.6 463.67 T
4 10 Q
(total-seconds) 420.27 463.67 T
1 11 Q
(of the object that is the value of the) 108 449.67 T
4 10 Q
(*my-time-of-day*) 280.02 449.67 T
1 11 Q
( variable.) 376.02 449.67 T
(Most Dylan pr) 135 435.67 T
(ogrammers do not use the syntax of the thir) 205.65 435.67 T
(d expr) 418.07 435.67 T
(ession to) 449.25 435.67 T
(call a setter) 108 421.67 T
(, because it is mor) 161.69 421.67 T
(e verbose than the \336rst and second expr) 248.26 421.67 T
(essions.) 441.3 421.67 T
(However) 108 407.67 T
(, it is important to know the name of the setter) 152.62 407.67 T
(, so that you can de\336ne) 376.73 407.67 T
(setter methods. For example, to de\336ne a method on the setter for the) 108 393.67 T
4 10 Q
(total-) 442.8 393.67 T
-0.61 (seconds) 108 379.67 P
1 11 Q
-0.28 ( slot, you de\336ne it on) 150 379.67 P
4 10 Q
-0.61 (total-seconds-setter) 253.29 379.67 P
1 11 Q
-0.28 (. For an example of a setter) 372.47 379.67 P
(method, see Section 10.2.2.) 108 365.67 T
-0.14 (If you do not want Dylan to de\336ne a setter method for a slot, you can de\336ne) 135 351.67 P
(the slot to be constant, using the) 108 337.67 T
4 10 Q
(constant) 266.96 337.67 T
1 11 Q
( slot adjective, or you can give the) 314.96 337.67 T
4 10 Q
(:setter #f) 108 323.67 T
1 11 Q
( slot option.) 168 323.67 T
-0.32 (For mor) 135 309.67 P
-0.32 (e information about accessing slots, see Section 12.1.2, page 163, and) 173.76 309.67 P
(Section 12.1.6, page 166.) 108 295.67 T
3 13 Q
(10.2.1  Ad) 108 264.33 T
(v) 157.63 264.33 T
(anta) 163.37 264.33 T
(g) 185.19 264.33 T
(es of accessing slots via g) 191.81 264.33 T
(eneric functions) 326.43 264.33 T
1 11 Q
(A slot is conceptually like a variable, in that it has a value. But the only way to) 108 244.67 T
(access a slot\325s value is to call a generic function. Using generic functions and) 108 230.67 T
(methods to gain access to slot values has thr) 108 216.67 T
(ee important advantages:) 322.27 216.67 T
(\245) 117 196.67 T
(Generic functions pr) 135 196.67 T
(ovide a public interface to the private implementation) 234.46 196.67 T
(of a slot. By making the r) 135 182.67 T
(epr) 256.17 182.67 T
(esentation of the slot visible to only the meth-) 272.19 182.67 T
(ods of the generic functions, you can change the r) 135 168.67 T
(epr) 375.26 168.67 T
(esentation without) 391.29 168.67 T
(changing any of the users of the information \321 the callers of the generic) 135 154.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "119" 133
%%Page: "120" 134
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(120) 72 677.67 T
0 F
(Chapter 10) 95.75 677.67 T
(Slots) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(functions. In most cases, a compiler can optimize slot r) 135 640.67 T
(efer) 399.96 640.67 T
(ences to r) 418.3 640.67 T
(educe) 464.03 640.67 T
(or eliminate the cost of hiding the implementation.) 135 626.67 T
(\245) 117 606.67 T
(A subclass can specialize, or \336lter) 135 606.67 T
(, r) 297.03 606.67 T
(efer) 306.68 606.67 T
(ences to super) 325.02 606.67 T
(class slots. For exam-) 393.93 606.67 T
(ple, the classes) 135 592.67 T
4 10 Q
(<latitude>) 209.18 592.67 T
1 11 Q
( and) 269.18 592.67 T
4 10 Q
(<longitude>) 293.31 592.67 T
1 11 Q
( inherit the) 359.31 592.67 T
4 10 Q
(direction) 415.22 592.67 T
1 11 Q
( slot) 469.22 592.67 T
(fr) 135 578.67 T
(om their super) 142.81 578.67 T
(class) 214.16 578.67 T
4 10 Q
(<directed-angle>) 239.82 578.67 T
1 11 Q
(. In Section 10.6, we show how to) 335.82 578.67 T
(pr) 135 564.67 T
(ovide a setter method for the dir) 145.76 564.67 T
(ection slot of) 302.93 564.67 T
4 10 Q
(<latitude>) 367.65 564.67 T
1 11 Q
( that ensur) 427.65 564.67 T
(es) 479.34 564.67 T
(that the value is north or south, and a setter method for the dir) 135 550.67 T
(ection slot of) 438.78 550.67 T
4 10 Q
(<longitude>) 135 536.67 T
1 11 Q
( that ensur) 201 536.67 T
(es that the value is east or west.) 252.69 536.67 T
(\245) 117 516.67 T
(A slot access can involve arbitrary computation. For example, a slot can be) 135 516.67 T
2 F
(virtual) 135 502.67 T
1 F
(. See Section 10.6.) 168.6 502.67 T
3 13 Q
(10.2.2  Setter methods) 108 471.33 T
1 11 Q
(In most cases, the getter and setter methods that Dylan de\336nes for each slot ar) 108 451.67 T
(e) 486.4 451.67 T
(perfectly adequate. In certain cases, however) 108 437.67 T
(, you might want to change the way) 324.98 437.67 T
(a getter or setter works.) 108 423.67 T
(For example, we can de\336ne a setter method to solve a pr) 135 409.67 T
(oblem in our time) 408.37 409.67 T
(library) 108 395.67 T
(. The class) 139.57 395.67 T
4 10 Q
(<time-of-day>) 191.9 395.67 T
1 11 Q
( inherits the) 269.9 395.67 T
4 10 Q
(total-seconds) 330.47 395.67 T
1 11 Q
( slot fr) 408.47 395.67 T
(om the class) 439.24 395.67 T
4 10 Q
(<sixty-unit>) 108 381.67 T
1 11 Q
(. The type of the slot is) 180 381.67 T
4 10 Q
(<integer>) 292.24 381.67 T
1 11 Q
(. However) 346.24 381.67 T
(, the semantics of) 396.36 381.67 T
4 10 Q
(<time-of-day>) 108 367.67 T
1 11 Q
( state that the) 186 367.67 T
4 10 Q
(total-seconds) 253.94 367.67 T
1 11 Q
( should not be less than 0. W) 331.94 367.67 T
(e can) 470.08 367.67 T
(de\336ne a setter method for) 108 353.67 T
4 10 Q
(<time-of-day>) 236 353.67 T
1 11 Q
( to ensur) 314 353.67 T
(e that the new value for the) 356.2 353.67 T
(total-seconds slot is 0 or gr) 108 339.67 T
(eater) 237.34 339.67 T
(.) 260.49 339.67 T
(In our setter method, we will use the type de\336ned in Section 9.2, page 1) 135 325.67 T
(10,) 481.04 325.67 T
(and r) 108 311.67 T
(epeated her) 133.52 311.67 T
(e:) 190.31 311.67 T
5 9 Q
(// Define nonnegative integers as integers that are >= zero) 108 291 T
4 F
(define constant <nonnegative-integer> = limited\050<integer>, min: 0\051;) 108 280 T
1 11 Q
(The setter method is as follows:) 108 259.67 T
4 9 Q
(define method total-seconds-setter) 108 239 T
(\050total-seconds :: <integer>, time :: <time-of-day>\051) 129.6 228 T
(=> \050total-seconds :: <nonnegative-integer>\051) 113.4 217 T
(if \050total-seconds >= 0\051) 118.8 206 T
(next-method\050\051;) 129.6 195 T
(else) 118.8 184 T
(error\050"%d is invalid. total-seconds cannot be negative.", total-seconds\051;) 129.6 173 T
(end if;) 118.8 162 T
(end method total-seconds-setter;) 108 151 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "120" 134
%%Page: "121" 135
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10.2 Getters and setters for slots) 392.76 677.67 T
2 F
(121) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(When the setter for the) 108 640.67 T
4 10 Q
(total-seconds) 222.07 640.67 T
1 11 Q
( slot is called with an instance of) 300.07 640.67 T
4 10 Q
(<time-) 460.01 640.67 T
(of-day>) 108 626.67 T
1 11 Q
(, the pr) 150 626.67 T
(eceding method will be invoked, because it is mor) 184.26 626.67 T
(e speci\336c than) 427.45 626.67 T
-0.17 (the method that Dylan generated on the) 108 612.67 P
4 10 Q
-0.37 (<sixty-unit>) 303.97 612.67 P
1 11 Q
-0.17 ( class. If the new value for) 375.97 612.67 P
(the) 108 598.67 T
4 10 Q
(total-seconds) 126.01 598.67 T
1 11 Q
( slot is valid \050that is, is gr) 204.01 598.67 T
(eater than or equal to 0\051, then this) 324.9 598.67 T
-0.39 (method calls) 108 584.67 P
4 10 Q
-0.85 (next-method) 171.87 584.67 P
1 11 Q
-0.39 (, which invokes the setter method on) 237.87 584.67 P
4 10 Q
-0.85 (<sixty-unit>) 417.16 584.67 P
1 11 Q
-0.39 (. If) 489.16 584.67 P
(the new value is less than 0, an err) 108 570.67 T
(or is signaled.) 274.39 570.67 T
-0.17 (The following example show what happens when you call) 135 556.67 P
4 10 Q
-0.37 (total-seconds-) 420 556.67 P
(setter) 108 542.67 T
1 11 Q
( with a negative value for) 144 542.67 T
4 10 Q
(total-seconds) 270.75 542.67 T
1 11 Q
(:) 348.75 542.67 T
6 9 Q
(?) 108 522 T
4 F
(begin) 118.8 522 T
(let test-time-of-day = make\050<time-of-day>\051;) 129.6 511 T
(test-time-of-day.total-seconds := -15;) 129.6 500 T
(end;) 118.8 489 T
6 F
(ERROR: -15 is invalid. total-seconds cannot be negative.) 108 478 T
1 11 Q
-0.1 (This setter method ensur) 108 457.67 P
-0.1 (es that no one can assign an invalid value to the slot. For) 228.48 457.67 P
-0.08 (completeness, we must also ensur) 108 443.67 P
-0.08 (e that no one can initialize the slot to an invalid) 272.5 443.67 P
-0.36 (value. The way to do that is to de\336ne an) 108 429.67 P
4 10 Q
-0.79 (initialize) 301.7 429.67 P
1 11 Q
-0.36 ( method, as shown in Section) 361.7 429.67 P
(10.3.) 108 415.67 T
3 13 Q
(10.2.3  Considerations f) 108 384.33 T
(or naming slots and other objects) 227.48 384.33 T
1 11 Q
-0.24 (A) 108 364.67 P
2 F
-0.24 (binding) 119.07 364.67 P
1 F
-0.24 ( is an association between a name and an object. For example, ther) 159.39 364.67 P
-0.24 (e is a) 477.84 364.67 P
(binding that associates the name of a constant and the value of the constant. The) 108 350.67 T
(names of functions, module variables, local variables, and classes ar) 108 336.67 T
(e also bind-) 437.07 336.67 T
-0.17 (ings. Ther) 108 322.67 P
-0.17 (e is a potential pr) 156.27 322.67 P
-0.17 (oblem that can occur if you use short names. If a client) 239.32 322.67 P
(module uses other modules that also de\336ne and export bindings with short) 108 308.67 T
(names, ther) 108 294.67 T
(e is a signi\336cant chance that name clashes will occur) 164.45 294.67 T
(, with dif) 417.05 294.67 T
(fer) 461.05 294.67 T
(ent) 474.12 294.67 T
(bindings with the same name being imported fr) 108 280.67 T
(om dif) 340.02 280.67 T
(fer) 371.88 280.67 T
(ent modules.) 384.96 280.67 T
(If you use the Dylan naming conventions, then a variable will not have the) 135 266.67 T
(same name as a class, a function, or a constant. The naming conventions avoid) 108 252.67 T
(name clashes between dif) 108 238.67 T
(fer) 232.16 238.67 T
(ent kinds of objects.) 245.24 238.67 T
(A slot is identi\336ed by the name of its getter) 135 224.67 T
(. The getter is visible to all client) 343.47 224.67 T
(modules. Ther) 108 210.67 T
(e is no pr) 178.27 210.67 T
(oblem if two getters with the same name ar) 222.82 210.67 T
(e de\336ned by) 432.85 210.67 T
(unr) 108 196.67 T
(elated classes, because the appr) 125.18 196.67 T
(opriate getter is selected thr) 277.75 196.67 T
(ough method dis-) 412.3 196.67 T
-0.08 (patch. Ther) 108 182.67 P
-0.08 (e is a pr) 162.96 182.67 P
-0.08 (oblem if a getter has the same name as a generic function with) 200.36 182.67 P
(an incompatible parameter list or values declaration. \050See Section 12.2.5, page) 108 168.67 T
(176.\051 When such a pr) 108 154.67 T
(oblem occurs, the only way to r) 209.83 154.67 T
(esolve it is to use options to) 362.28 154.67 T
4 10 Q
(define module) 108 140.67 T
1 11 Q
( to exclude or r) 186 140.67 T
(ename some of the pr) 258.74 140.67 T
(oblem bindings. This) 363.23 140.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "121" 135
%%Page: "122" 136
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(122) 72 677.67 T
0 F
(Chapter 10) 95.75 677.67 T
(Slots) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(solution is undesirable, because it r) 108 640.67 T
(equir) 278.59 640.67 T
(es work on the part of the author of the) 304 640.67 T
-0.04 (client module, who must spot and r) 108 626.67 P
-0.04 (esolve such clashes, and then use an interface) 280.91 626.67 P
(that no longer matches its documentation.) 108 612.67 T
(Ther) 135 598.67 T
(efor) 157.56 598.67 T
(e, for getters that you intend to export, it makes sense pr) 176.65 598.67 T
(event) 450.08 598.67 T
(clashes by considering the name of the slot car) 108 584.67 T
(efully) 333.05 584.67 T
(. One technique is to pr) 359.91 584.67 T
(e\336x) 472.75 584.67 T
(the name of the pr) 108 570.67 T
(operty with the name of the class. For example, you might) 196.82 570.67 T
(de\336ne a) 108 556.67 T
4 10 Q
(<person>) 149.32 556.67 T
1 11 Q
( class with a slot) 197.32 556.67 T
4 10 Q
(person-name) 279.3 556.67 T
1 11 Q
(, instead of the shorter possibil-) 345.3 556.67 T
(ity) 108 542.67 T
(,) 119.68 542.67 T
4 10 Q
(name) 125.18 542.67 T
1 11 Q
(. One drawback of this technique is that it might expose too much infor-) 149.18 542.67 T
(mation about the implementation \321 that is, the name betrays the class that) 108 528.67 T
(happens to implement the slot at a particular time, and you have to r) 108 514.67 T
(emember) 441.89 514.67 T
(which super) 108 500.67 T
(class intr) 168.14 500.67 T
(oduces a pr) 211.14 500.67 T
(operty if you ar) 267.07 500.67 T
(e to access that pr) 342.52 500.67 T
(operty) 428.08 500.67 T
(.) 458.79 500.67 T
-0.27 (Ther) 135 486.67 P
-0.27 (e is a compr) 157.56 486.67 P
-0.27 (omise between using short names and using the class name) 215.01 486.67 P
-0.22 (as a pr) 108 472.67 P
-0.22 (e\336x \321 you can choose a pr) 139.48 472.67 P
-0.22 (e\336x for a whole gr) 268.29 472.67 P
-0.22 (oup of classes beneath a given) 355.84 472.67 P
(class. For example, you might use the pr) 108 458.67 T
(e\336x) 303.72 458.67 T
4 10 Q
(person-) 324.07 458.67 T
1 11 Q
( for slots of many classes) 366.07 458.67 T
(that inherit fr) 108 444.67 T
(om the) 172.79 444.67 T
4 10 Q
(<person>) 209.27 444.67 T
1 11 Q
( class, including) 257.27 444.67 T
4 10 Q
(<employee>) 337.94 444.67 T
1 11 Q
(,) 397.94 444.67 T
4 10 Q
(<consultant>) 403.44 444.67 T
1 11 Q
(, and) 475.44 444.67 T
(so on.) 108 430.67 T
4 9 Q
(define class <person> \050<object>\051) 108 410 T
(slot person-name;) 118.8 399 T
(slot person-age;) 118.8 388 T
(end class <person>;) 108 377 T
(define class <employee> \050<person>\051) 108 358 T
(slot person-number;) 118.8 347 T
(slot person-salary;) 118.8 336 T
(end class <employee>;) 108 325 T
(define class <consultant> \050<employee>\051) 108 306 T
(slot person-perks;) 118.8 295 T
(slot person-parking-lot;) 118.8 284 T
(end class <consultant>;) 108 273 T
1 11 Q
(Now) 108 252.67 T
(, in a method on) 131.31 252.67 T
4 10 Q
(<consultant>) 213.02 252.67 T
1 11 Q
(, all accesses ar) 285.02 252.67 T
(e consistent, and we do not) 357.36 252.67 T
(have to r) 108 238.67 T
(emember wher) 150.62 238.67 T
(e the slots actually originate:) 224.03 238.67 T
5 9 Q
(// Method 1) 108 218 T
4 F
(define method person-status \050p :: <consultant>\051 => \050status :: <integer>\051) 108 207 T
(\050p.person-perks.evaluation + p.person-salary.evaluation\051) 118.8 196 T
(/ p.person-age;) 129.6 185 T
(end method person-status;) 108 174 T
1 11 Q
(If we had de\336ned the classes dif) 108 153.67 T
(fer) 263.46 153.67 T
(ently) 276.54 153.67 T
(, such that we pr) 299.89 153.67 T
(e\336xed each getter with) 380.5 153.67 T
(the name of the class that de\336ned it, the method would look like this:) 108 139.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "122" 136
%%Page: "123" 137
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10.3 Initialize methods) 428.91 677.67 T
2 F
(123) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
5 9 Q
0 X
(// Method 2) 108 642 T
4 F
(define method person-status \050p :: <consultant>\051 => \050status :: <integer>\051) 108 631 T
(\050p.consultant-perks.evaluation + p.employee-salary.evaluation\051) 118.8 620 T
(/ p.person-age;) 129.6 609 T
(end method person-status;) 108 598 T
1 11 Q
(Method 2 is mor) 108 577.67 T
(e dif) 187.87 577.67 T
(\336cult to write and r) 209.28 577.67 T
(ead than is Method 1, and is mor) 303.17 577.67 T
(e) 462.66 577.67 T
(fragile. If, at some point, all employees ar) 108 563.67 T
(e allocated perks, then the use of the) 308.38 563.67 T
4 10 Q
(consultant-perks) 108 549.67 T
1 11 Q
( getter becomes a pr) 204 549.67 T
(oblem.) 301.32 549.67 T
3 15 Q
(10.3  Initializ) 108 421 T
(e methods) 180.6 421 T
1 11 Q
(Every time you call) 108 400.67 T
4 10 Q
(make) 204.98 400.67 T
1 11 Q
( to cr) 228.98 400.67 T
(eate an instance of a class,) 253.1 400.67 T
4 10 Q
(make) 381.86 400.67 T
1 11 Q
( calls the) 405.86 400.67 T
4 10 Q
(initialize) 108 386.67 T
1 11 Q
( generic function. The purpose of the) 168 386.67 T
4 10 Q
(initialize) 349.74 386.67 T
1 11 Q
( generic function) 409.74 386.67 T
(is to initialize the instance befor) 108 372.67 T
(e it is r) 261.8 372.67 T
(eturned by) 294.12 372.67 T
4 10 Q
(make) 350.04 372.67 T
1 11 Q
(. Y) 374.04 372.67 T
(ou can customize the) 385.87 372.67 T
(initialization by de\336ning a method on) 108 358.67 T
4 10 Q
(initialize) 294.76 358.67 T
1 11 Q
(. Methods for) 354.76 358.67 T
4 10 Q
(initialize) 422.83 358.67 T
1 11 Q
(r) 108 344.67 T
(eceive the instance as the \336rst ar) 112.15 344.67 T
(gument, and r) 268.24 344.67 T
(eceive all keywor) 336.98 344.67 T
(d ar) 421.31 344.67 T
(guments) 440.43 344.67 T
(given in the call to) 108 330.67 T
4 10 Q
(make) 200.19 330.67 T
1 11 Q
(.) 224.19 330.67 T
(W) 135 316.67 T
(e de\336ne an) 144.99 316.67 T
4 10 Q
(initialize) 200.73 316.67 T
1 11 Q
( method:) 260.73 316.67 T
4 9 Q
(define method initialize \050time :: <time-of-day> #key\051) 108 296 T
5 F
(// 1) 481.83 296 T
4 F
(next-method\050\051;) 118.8 285 T
5 F
(// 2) 481.83 285 T
4 F
(if \050time.total-seconds < 0\051) 118.8 274 T
5 F
(// 3) 481.83 274 T
4 F
(error\050"%d is invalid. total-seconds cannot be negative",) 129.6 263 T
5 F
(// 4) 481.83 263 T
4 F
(time.total-seconds\051;) 162 252 T
5 F
(// 5) 481.83 252 T
4 F
(end if;) 118.8 241 T
5 F
(// 6) 481.83 241 T
4 F
(end method initialize;) 108 230 T
5 F
(// 7) 481.83 230 T
1 11 Q
(On line 2, we call) 108 209.67 T
4 10 Q
(next-method) 194.35 209.67 T
1 11 Q
(. All methods for) 260.35 209.67 T
4 10 Q
(initialize) 345.43 209.67 T
1 11 Q
( should call) 405.43 209.67 T
4 10 Q
(next-method) 108 195.67 T
1 11 Q
( as their \336rst action, to allow any less speci\336c initializations \050that is,) 174 195.67 T
4 10 Q
(initialize) 108 181.67 T
1 11 Q
( methods de\336ned on super) 168 181.67 T
(classes\051 to execute \336rst. If you call) 298.13 181.67 T
4 10 Q
(next-) 464.98 181.67 T
(method) 108 167.67 T
1 11 Q
( as the \336rst action, then, in the r) 144 167.67 T
(est of the method, you can operate on an) 296.42 167.67 T
(instance that has been pr) 108 153.67 T
(operly initialized by any) 228.33 153.67 T
4 10 Q
(initialize) 350.08 153.67 T
1 11 Q
( methods of) 410.08 153.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Comparison with C++:) 141 520.67 T
1 F
( In C++, the class is the namespace of its) 255.46 520.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(member functions. In Dylan, the module is the namespace of get-) 141 506.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ters and setters. In general, the module is the namespace of all) 141 492.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(module bindings, including generic functions; getters and setters) 141 478.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 141 464.67 T
(e generic functions.) 150.65 464.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 533.88 135 457.12 2 L
V
0.25 H
0 Z
N
486 533.88 486 457.12 2 L
V
N
134.88 534 486.12 534 2 L
V
N
134.88 457 486.12 457 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "123" 137
%%Page: "124" 138
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(124) 72 677.67 T
0 F
(Chapter 10) 95.75 677.67 T
(Slots) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(super) 108 640.67 T
(classes. If you for) 135.32 640.67 T
(get to include the call to) 219.11 640.67 T
4 10 Q
(next-method) 338.12 640.67 T
1 11 Q
(, your) 404.12 640.67 T
4 10 Q
(initialize) 435.47 640.67 T
1 11 Q
(method will be operating on an impr) 108 626.67 T
(operly initialized instance.) 287.34 626.67 T
(Lines 3 thr) 135 612.67 T
(ough 6 contain the r) 186.39 612.67 T
(eal action of this method. W) 283.43 612.67 T
(e check that the) 418.69 612.67 T
(value is valid. If it is invalid, we signal an err) 108 598.67 T
(or) 326.17 598.67 T
(.) 335.71 598.67 T
(The following example shows what happens when) 135 584.67 T
4 10 Q
(total-seconds) 385.15 584.67 T
1 11 Q
( is not) 463.15 584.67 T
(valid when we ar) 108 570.67 T
(e cr) 192.43 570.67 T
(eating an instance:) 209.48 570.67 T
6 9 Q
(?) 108 550 T
4 F
(make\050<time-of-day>, total-seconds: -15\051;) 118.8 550 T
6 F
(ERROR: -15 is invalid. total-seconds cannot be negative.) 108 539 T
3 15 Q
(10.4  Slot options f) 108 501 T
(or initialization of slots) 217.14 501 T
1 11 Q
(Unlike variables and constants, slots can be) 108 480.67 T
2 F
(uninitialized) 321.3 480.67 T
1 F
(; that is, you can cr) 386.66 480.67 T
(eate) 477.42 480.67 T
(an instance without initializing all the slots. If you call a getter for a slot that has) 108 466.67 T
-0.04 (not been initialized, Dylan signals an err) 108 452.67 P
-0.04 (or) 304.13 452.67 P
-0.04 (. In the following sections, we describe) 313.67 452.67 P
-0.36 (a variety of techniques for avoiding the pr) 108 438.67 P
-0.36 (oblem of accessing an uninitialized slot.) 310 438.67 P
(The most general technique is to de\336ne an) 108 424.67 T
4 10 Q
(initialize) 315.97 424.67 T
1 11 Q
( method for a slot, as) 375.97 424.67 T
(shown in Section 10.3.) 108 410.67 T
(A slot can be uninitialized. Once a slot r) 135 396.67 T
(eceives a value, however) 328.23 396.67 T
(, it will) 448.18 396.67 T
(always have a value: Ther) 108 382.67 T
(e is no way to r) 234.17 382.67 T
(eturn a slot to the uninitialized state.) 307.99 382.67 T
-0.15 (Sometimes it is useful to stor) 108 368.67 P
-0.15 (e in a slot a value that means none. T) 246.89 368.67 P
-0.15 (o make that pos-) 423.59 368.67 P
(sible, you need to de\336ne a new type for that slot, as shown in Section 9.2, page) 108 354.67 T
(1) 108 340.67 T
(10. In Sections 10.4.1 thr) 112.89 340.67 T
(ough 10.4.4, we show techniques for initializing slots.) 229.18 340.67 T
3 13 Q
(10.4.1  The) 108 309.33 T
4 12 Q
(init-value:) 165.49 309.33 T
3 13 Q
( slot option) 244.69 309.33 T
1 11 Q
(W) 108 289.67 T
(e can use the) 117.99 289.67 T
4 10 Q
(init-value:) 182.87 289.67 T
1 11 Q
( slot option to give a default initial value to a slot:) 248.87 289.67 T
4 9 Q
(define abstract class <sixty-unit> \050<object>\051) 108 269 T
(slot total-seconds :: <integer>,) 118.8 258 T
(init-keyword: total-seconds:, init-value: 0;) 129.6 247 T
(end class <sixty-unit>;) 108 236 T
1 11 Q
(When we use) 108 215.67 T
4 10 Q
(make) 176.33 215.67 T
1 11 Q
( to cr) 200.33 215.67 T
(eate any subclass of) 224.46 215.67 T
4 10 Q
(<sixty-unit>) 323.06 215.67 T
1 11 Q
( \050such as) 395.06 215.67 T
4 10 Q
(<time-of-) 439.72 215.67 T
(day>) 108 201.67 T
1 11 Q
(\051, and we do not supply the) 132 201.67 T
4 10 Q
(total-seconds:) 268.54 201.67 T
1 11 Q
( keywor) 352.54 201.67 T
(d to) 392.12 201.67 T
4 10 Q
(make) 413.93 201.67 T
1 11 Q
(, the) 437.93 201.67 T
4 10 Q
(total-) 461.44 201.67 T
(seconds) 108 187.67 T
1 11 Q
( slot is initialized to 0.) 150 187.67 T
-0.01 (The) 135 173.67 P
4 10 Q
-0.02 (init-value:) 156.15 173.67 P
1 11 Q
-0.01 ( slot option speci\336es an expr) 222.15 173.67 P
-0.01 (ession that is evaluated once,) 359.95 173.67 P
(befor) 108 159.67 T
(e the \336rst instance of the class is made, to yield a value. Every time that an) 133.17 159.67 T
-0.08 (instance is made and the slot needs a default value, this same value is used as the) 108 145.67 P
(default.) 108 131.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "124" 138
%%Page: "125" 139
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10.4 Slot options for initialization of slots) 357.67 677.67 T
2 F
(125) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(In general, a slot r) 135 640.67 T
(eceives its default initial value when no init keywor) 222.07 640.67 T
(d is) 472.84 640.67 T
(de\336ned or when the caller does not supply the init-keywor) 108 626.67 T
(d ar) 393.67 626.67 T
(gument to) 412.79 626.67 T
4 10 Q
(make) 465.6 626.67 T
1 11 Q
(.) 489.6 626.67 T
3 13 Q
(10.4.2  The) 108 595.33 T
4 12 Q
(required-init-keyword:) 165.49 595.33 T
3 13 Q
( slot option) 323.89 595.33 T
1 11 Q
(Instead of giving the slot a default initial value, we can r) 108 575.67 T
(equir) 381.04 575.67 T
(e the caller of) 406.45 575.67 T
4 10 Q
(make) 474.05 575.67 T
1 11 Q
-0.12 (to supply an init keywor) 108 561.67 P
-0.12 (d for the slot. The) 227.07 561.67 P
4 10 Q
-0.26 (required-init-keyword:) 314.84 561.67 P
1 11 Q
-0.12 ( slot option) 446.84 561.67 P
-0.13 (de\336nes a r) 108 547.67 P
-0.13 (equir) 157.87 547.67 P
-0.13 (ed init keywor) 183.28 547.67 P
-0.13 (d. If the caller of) 253.72 547.67 P
4 10 Q
-0.28 (make) 334.99 547.67 P
1 11 Q
-0.13 ( does not supply the r) 358.99 547.67 P
-0.13 (equir) 463.98 547.67 P
-0.13 (ed) 489.39 547.67 P
(init keywor) 108 533.67 T
(d, then an err) 163.97 533.67 T
(or is signaled.) 229.01 533.67 T
4 9 Q
(define abstract class <sixty-unit> \050<object>\051) 108 513 T
(slot total-seconds :: <integer>, required-init-keyword: total-seconds:;) 118.8 502 T
(end class <sixty-unit>;) 108 491 T
1 11 Q
-0.13 (The) 108 470.67 P
4 10 Q
-0.28 (total-seconds) 129.03 470.67 P
1 11 Q
-0.13 ( slot is de\336ned in the) 207.03 470.67 P
4 10 Q
-0.28 (<sixty-unit>) 309.97 470.67 P
1 11 Q
-0.13 ( class. By making) 381.97 470.67 P
4 10 Q
-0.28 (total-) 468 470.67 P
(seconds:) 108 456.67 T
1 11 Q
( a r) 156 456.67 T
(equir) 171.15 456.67 T
(ed init keywor) 196.56 456.67 T
(d in this class, we make it r) 267.27 456.67 T
(equir) 398.33 456.67 T
(ed for every) 423.74 456.67 T
(class that inherits fr) 108 442.67 T
(om it, including) 203.12 442.67 T
4 10 Q
(<time>) 283.38 442.67 T
1 11 Q
(,) 319.38 442.67 T
4 10 Q
(<angle>) 324.88 442.67 T
1 11 Q
(, and all their subclasses.) 366.88 442.67 T
3 13 Q
(10.4.3  Slot options f) 108 411.33 T
(or an inherited slot) 211.48 411.33 T
1 11 Q
(Y) 108 391.67 T
(ou can de\336ne a slot in only one particular class in a set of classes r) 114.32 391.67 T
(elated by) 433.28 391.67 T
-0.36 (inheritance. Y) 108 377.67 P
-0.36 (ou can use the) 173.93 377.67 P
4 10 Q
-0.78 (inherited slot) 244.76 377.67 P
1 11 Q
-0.36 ( speci\336cation to override the default) 327.98 377.67 P
(initial value of an inherited slot, or the) 108 363.67 T
2 F
(init function) 296.89 363.67 T
1 F
( of an inherited slot. See Sec-) 360.12 363.67 T
(tion 10.4.4.) 108 349.67 T
(In this example, assume that the) 135 335.67 T
4 10 Q
(<sixty-unit>) 294.23 335.67 T
1 11 Q
( class de\336nes the) 366.23 335.67 T
4 10 Q
(total-) 450.38 335.67 T
-0.4 (seconds) 108 321.67 P
1 11 Q
-0.19 ( slot and the init keywor) 150 321.67 P
-0.19 (d) 267.38 321.67 P
4 10 Q
-0.4 (total-seconds:) 276.67 321.67 P
1 11 Q
-0.19 (, and pr) 360.67 321.67 P
-0.19 (ovides the default ini-) 397.93 321.67 P
(tial value of 0 for that slot, as shown:) 108 307.67 T
4 9 Q
(define abstract class <sixty-unit> \050<object>\051) 108 287 T
(slot total-seconds :: <integer>,) 118.8 276 T
(init-keyword: total-seconds:, init-value: 0;) 129.6 265 T
(end class <sixty-unit>;) 108 254 T
(define abstract class <time> \050<sixty-unit>\051) 108 235 T
(end class <time>;) 108 224 T
1 11 Q
(The) 108 203.67 T
4 10 Q
(<time-offset>) 129.16 203.67 T
1 11 Q
( class pr) 207.16 203.67 T
(ovides a dif) 246.34 203.67 T
(fer) 302.8 203.67 T
(ent default initial value for the inher-) 315.88 203.67 T
(ited slot) 108 189.67 T
4 10 Q
(total-seconds) 149.73 189.67 T
1 11 Q
(:) 227.73 189.67 T
4 9 Q
(define class <time-offset> \050<time>\051) 108 169 T
(inherited slot total-seconds, init-value: encode-total-seconds\0501, 0, 0\051;) 118.8 158 T
(end class <time-offset>;) 108 147 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "125" 139
%%Page: "126" 140
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(126) 72 677.67 T
0 F
(Chapter 10) 95.75 677.67 T
(Slots) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(By using the) 108 640.67 T
4 10 Q
(inherited slot) 171.36 640.67 T
1 11 Q
( speci\336cation, we ar) 255.36 640.67 T
(e not de\336ning the slot, but) 351.31 640.67 T
(rather ar) 108 626.67 T
(e stating that this slot is de\336ned by a super) 149.84 626.67 T
(class. W) 357.23 626.67 T
(e can then pr) 395.63 626.67 T
(ovide) 458.35 626.67 T
(either a default initial value or an init function for the inherited slot.) 108 612.67 T
3 13 Q
(10.4.4  The) 108 581.33 T
4 12 Q
(init-function:) 165.49 581.33 T
3 13 Q
( slot option) 266.29 581.33 T
1 11 Q
(W) 108 561.67 T
(e can use the) 117.99 561.67 T
4 10 Q
(init-function:) 182.87 561.67 T
1 11 Q
( slot option to pr) 266.87 561.67 T
(ovide a function of no ar) 347.48 561.67 T
(gu-) 466.65 561.67 T
-0.04 (ments to be called to r) 108 547.67 P
-0.04 (eturn a default initial value for the slot. These functions ar) 214.63 547.67 P
-0.04 (e) 496.02 547.67 P
(called) 108 533.67 T
2 F
(init functions) 139.53 533.67 T
1 F
(. They allow the initial value of a slot to be an arbitrary) 207.64 533.67 T
(computation.) 108 519.67 T
4 9 Q
(define class <time-of-day> \050<time>\051) 108 499 T
(inherited slot total-seconds, init-function: get-current-time;) 118.8 488 T
(end class <time-of-day>;) 108 477 T
1 11 Q
(Every time that we make an instance of the) 108 456.67 T
4 10 Q
(<time-of-day>) 320.04 456.67 T
1 11 Q
( class and we need a) 398.04 456.67 T
(default value for the) 108 442.67 T
4 10 Q
(total-seconds) 209.66 442.67 T
1 11 Q
( slot, the) 287.66 442.67 T
4 10 Q
(get-current-time) 331.38 442.67 T
1 11 Q
( function is) 427.38 442.67 T
(called to pr) 108 428.67 T
(ovide an initial value. Her) 162.63 428.67 T
(e, we assume that) 289.37 428.67 T
4 10 Q
(get-current-time) 378.35 428.67 T
1 11 Q
( is) 474.35 428.67 T
(available as a library function; it is not part of the cor) 108 414.67 T
(e Dylan language.) 364.55 414.67 T
(The) 135 400.67 T
4 10 Q
(init-function:) 156.16 400.67 T
1 11 Q
( slot option speci\336es an expr) 240.16 400.67 T
(ession that is evaluated) 378.01 400.67 T
-0.38 (once, befor) 108 386.67 P
-0.38 (e the \336rst instance of the class is made, to yield a function. The function) 160.85 386.67 P
(must have no r) 108 372.67 T
(equir) 180.79 372.67 T
(ed ar) 206.2 372.67 T
(guments and must r) 230.58 372.67 T
(eturn at least one value. Every time) 328.58 372.67 T
(that an instance is made and the slot needs a default value, this function is called) 108 358.67 T
(with no ar) 108 344.67 T
(guments, and the value that it r) 157.92 344.67 T
(eturns is used as the default. An init) 310.26 344.67 T
-0.18 (function is called during instance cr) 108 330.67 P
-0.18 (eation when no keywor) 280.6 330.67 P
-0.18 (d ar) 394.75 330.67 P
-0.18 (gument is de\336ned) 413.68 330.67 P
(or when an optional keywor) 108 316.67 T
(d ar) 245.84 316.67 T
(gument is not passed to) 264.96 316.67 T
4 10 Q
(make) 383.31 316.67 T
1 11 Q
(.) 407.31 316.67 T
3 13 Q
(10.4.5  Init e) 108 285.33 T
(xpressions) 168.31 285.33 T
1 11 Q
(An) 108 265.67 T
2 F
(init expression) 125.71 265.67 T
1 F
( is another way of pr) 199.94 265.67 T
(oviding a default slot value. Her) 300.28 265.67 T
(e is an) 457.56 265.67 T
(example:) 108 251.67 T
4 9 Q
(define class <time-of-day> \050<time>\051) 108 231 T
(inherited slot total-seconds = get-current-time\050\051;) 118.8 220 T
(end class <time-of-day>;) 108 209 T
1 11 Q
(Every time that we make an instance of the) 108 188.67 T
4 10 Q
(<time-of-day>) 320.04 188.67 T
1 11 Q
( class and we need a) 398.04 188.67 T
(default value for the) 108 174.67 T
4 10 Q
(total-seconds) 209.66 174.67 T
1 11 Q
( slot, the expr) 287.66 174.67 T
(ession) 353.08 174.67 T
4 10 Q
(get-current-time\050\051;) 386.04 174.67 T
1 11 Q
(is evaluated to pr) 108 160.67 T
(ovide an initial value.) 192.36 160.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "126" 140
%%Page: "127" 141
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10.5 Allocation of slots) 428.48 677.67 T
2 F
(127) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(An init expr) 135 640.67 T
(ession speci\336es an expr) 193.55 640.67 T
(ession. Every time that an instance is) 306.83 640.67 T
-0.28 (made and the slot needs a default value, this expr) 108 626.67 P
-0.28 (ession is evaluated and its value) 346.31 626.67 P
(is used as the default.) 108 612.67 T
(Notice the similarity between the) 135 598.67 T
4 10 Q
(init-function:) 299.13 598.67 T
1 11 Q
( slot option and an init) 383.13 598.67 T
(expr) 108 584.67 T
(ession. In fact, the following slot speci\336cations ar) 129.7 584.67 T
(e equivalent:) 367.26 584.67 T
4 9 Q
(inherited slot total-seconds, init-function: get-current-time;) 118.8 564 T
(inherited slot total-seconds = get-current-time\050\051;) 118.8 553 T
1 11 Q
-0.27 (That substitution works for functions that have no r) 108 532.67 P
-0.27 (equir) 357.1 532.67 P
-0.27 (ed ar) 382.51 532.67 P
-0.27 (guments. Mor) 406.63 532.67 P
-0.27 (e gen-) 474.8 532.67 P
(erally) 108 518.67 T
(, the following slot speci\336cations ar) 134.41 518.67 T
(e equivalent:) 305.77 518.67 T
4 9 Q
(slot) 118.8 498 T
6 F
(slot) 145.8 498 T
4 F
( =) 167.4 498 T
6 F
(expression) 183.6 498 T
4 F
(;) 237.6 498 T
(slot) 118.8 487 T
6 F
(slot) 145.8 487 T
4 F
(, init-function: method \050\051) 167.4 487 T
6 F
(expression) 313.2 487 T
4 F
( end method;) 367.2 487 T
1 11 Q
(The expr) 108 466.67 T
(ession can be a call to a function that r) 150.87 466.67 T
(equir) 335.34 466.67 T
(es ar) 360.75 466.67 T
(guments. Her) 383.08 466.67 T
(e, we use) 449.53 466.67 T
4 10 Q
(method) 108 452.67 T
1 11 Q
( to de\336ne a method with no name.) 144 452.67 T
(The) 135 438.67 T
4 10 Q
(init-value:) 156.16 438.67 T
1 11 Q
( slot option,) 222.16 438.67 T
4 10 Q
(init-function:) 282.43 438.67 T
1 11 Q
( slot option, and init expr) 366.43 438.67 T
(es-) 488.92 438.67 T
(sion ar) 108 424.67 T
(e mutually exclusive. A given slot speci\336cation can have only one of these.) 140.67 424.67 T
3 15 Q
(10.5  Allocation of slots) 108 385 T
1 11 Q
(Each slot has a particular kind of) 108 364.67 T
2 F
(allocation) 270.2 364.67 T
1 F
(. The allocation of a slot determines) 319.68 364.67 T
(wher) 108 350.67 T
(e the storage for the slot\325s value is allocated, and it determines which) 132.99 350.67 T
(instances shar) 108 336.67 T
(e the value of the slot. Ther) 176.04 336.67 T
(e ar) 307.57 336.67 T
(e four kinds of allocation:) 325.24 336.67 T
(Instance) 135 310.67 T
(Each instance allocates storage for the slot, and each) 216 310.67 T
(instance of the class that de\336nes the slot has its own value) 216 296.67 T
(for the slot. Changing a slot in one instance does not af) 216 282.67 T
(fect) 481.43 282.67 T
(the value of the same slot in a dif) 216 268.67 T
(fer) 376.09 268.67 T
(ent instance. Instance) 389.17 268.67 T
(allocation is the default, and is the most commonly used) 216 254.67 T
(kind of allocation.) 216 240.67 T
(V) 135 214.67 T
(irtual) 142.34 214.67 T
(No storage is allocated for the slot. Y) 216 214.67 T
(ou must pr) 393.42 214.67 T
(ovide a get-) 446.91 214.67 T
(ter method that computes the value of the virtual slot. See) 216 200.67 T
(Section 10.6.) 216 186.67 T
(Class) 135 160.67 T
(The class that de\336nes the slot allocates storage for the slot.) 216 160.67 T
(Instances of the class that de\336nes the slot and instances of) 216 146.67 T
(all that class\325s subclasses see the same value for the slot.) 216 132.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "127" 141
%%Page: "128" 142
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(128) 72 677.67 T
0 F
(Chapter 10) 95.75 677.67 T
(Slots) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.03 (That is, all general instances of the class shar) 216 640.67 P
-0.03 (e the value for) 431.75 640.67 P
(the slot.) 216 626.67 T
(Each-subclass) 135 600.67 T
(The class that de\336nes the slot and each of its subclasses) 216 600.67 T
(allocate storage for the slot. Thus, if the class that de\336nes) 216 586.67 T
(the slot has four subclasses, the slot is allocated in \336ve) 216 572.67 T
(places. All the dir) 216 558.67 T
(ect instances of each class shar) 301.42 558.67 T
(e a value) 448.83 558.67 T
(for the slot.) 216 544.67 T
(W) 108 524.67 T
(e can give an example of an each-subclass slot by de\336ning a) 117.99 524.67 T
4 10 Q
(<vehicle>) 410.49 524.67 T
1 11 Q
( class:) 464.49 524.67 T
4 9 Q
(define class <vehicle> \050<physical-object>\051) 108 504 T
5 F
(// Every vehicle has a unique identification code) 118.8 493 T
4 F
(slot vehicle-id :: <string>, required-init-keyword: id:;) 118.8 482 T
5 F
(// The normal operating speed of this class of vehicle) 118.8 471 T
4 F
(each-subclass slot cruising-speed :: <integer>;) 118.8 460 T
(end class <vehicle>;) 108 449 T
1 11 Q
(The slot) 108 428.67 T
4 10 Q
(cruising-speed) 149.37 428.67 T
1 11 Q
( is de\336ned with the) 233.37 428.67 T
4 10 Q
(each-subclass) 329.64 428.67 T
1 11 Q
( slot allocation. W) 407.64 428.67 T
(e) 493.58 428.67 T
-0.39 (use) 108 414.67 P
4 10 Q
-0.84 (each-subclass) 126.93 414.67 P
1 11 Q
-0.39 ( allocation to expr) 204.93 414.67 P
-0.39 (ess that, for example, all instances of Boeing) 290.8 414.67 P
-0.18 (747 air) 108 400.67 P
-0.18 (craft shar) 139.92 400.67 P
-0.18 (e a particular cr) 185.18 400.67 P
-0.18 (uising speed, and all instances of McDonnell Dou-) 260.62 400.67 P
(glas MD-80 air) 108 386.67 T
(craft shar) 179.41 386.67 T
(e a particular cr) 224.85 386.67 T
(uising speed, but the cr) 300.82 386.67 T
(uising speed of) 414.02 386.67 T
(747s does not need to be the same as the cr) 108 372.67 T
(uising speeds of MD-80s.) 314.89 372.67 T
3 15 Q
(10.6  Vir) 108 333 T
(tual slots) 155.43 333 T
1 11 Q
-0.19 (V) 108 312.67 P
-0.19 (irtual slots ar) 115.34 312.67 P
-0.19 (e useful when ther) 178.69 312.67 P
-0.19 (e is information conceptually associated with an) 268.36 312.67 P
(object that is better computed than stor) 108 298.67 T
(ed in an or) 297.7 298.67 T
(dinary slot. By using a virtual) 349.59 298.67 T
(slot instead of writing a method, you make the information appear like a slot to) 108 284.67 T
(the callers of the getter) 108 270.67 T
(. The information appears like a slot because the caller can-) 217.6 270.67 T
-0.23 (not distinguish the getter of a virtual slot fr) 108 256.67 P
-0.23 (om a getter of an or) 315.51 256.67 P
-0.23 (dinary slot. In both) 409.23 256.67 P
-0.08 (cases, the getter takes a single r) 108 242.67 P
-0.08 (equir) 258.84 242.67 P
-0.08 (ed ar) 284.25 242.67 P
-0.08 (gument \321 the instance \321 and r) 308.56 242.67 P
-0.08 (eturns a) 462.25 242.67 P
(single value.) 108 228.67 T
-0.23 (A virtual slot does not occupy storage; instead, its value is computed. When) 135 214.67 P
-0.26 (you de\336ne a virtual slot, Dylan de\336nes a generic function for the getter and setter) 108 200.67 P
-0.26 (.) 498.76 200.67 P
(Y) 108 186.67 T
(ou must de\336ne a getter method to r) 114.32 186.67 T
(eturn the value of the virtual slot. Unlike) 286.23 186.67 T
(those of other slots, the value of a virtual slot can change without a setter being) 108 172.67 T
(called, because that value is computed, rather than stor) 108 158.67 T
(ed. Y) 375.5 158.67 T
(ou can optionally) 399.31 158.67 T
(de\336ne a setter method. If you want to initialize a virtual slot when you cr) 108 144.67 T
(eate an) 462.79 144.67 T
(instance, you can de\336ne an) 108 130.67 T
4 10 Q
(initialize) 242.17 130.67 T
1 11 Q
( method.) 302.17 130.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "128" 142
%%Page: "129" 143
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10.6 Virtual slots) 448.96 677.67 T
2 F
(129) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.14 (W) 135 640.67 P
-0.14 (e can use virtual slots to contr) 144.99 640.67 P
-0.14 (ol the access to a slot. For example, we want) 288.7 640.67 P
(to ensur) 108 626.67 T
(e that the value of the) 147.46 626.67 T
4 10 Q
(direction) 255.3 626.67 T
1 11 Q
( slot is north or south for) 309.3 626.67 T
4 10 Q
(<latitude>) 432.27 626.67 T
1 11 Q
(,) 492.27 626.67 T
-0.03 (and is east or west for) 108 612.67 P
4 10 Q
-0.06 (<longitude>) 216.89 612.67 P
1 11 Q
-0.03 (. \050An alternative technique is to use enumera-) 282.89 612.67 P
-0.21 (tion types, as shown in Section 19.5, page 318.\051 T) 108 598.67 P
-0.21 (o enfor) 340.72 598.67 P
-0.21 (ce this r) 374.76 598.67 P
-0.21 (estriction, we must) 411.99 598.67 P
(\245) 117 578.67 T
(Check the value when the setter method is invoked. In this section, we) 135 578.67 T
(show how to do this check using a virtual slot. W) 135 564.67 T
(e also show how to use) 373.45 564.67 T
(symbols, instead of strings, to r) 135 550.67 T
(epr) 286.43 550.67 T
(esent north, south, east, and west.) 302.45 550.67 T
(\245) 117 530.67 T
(Check the value of the) 135 530.67 T
4 10 Q
(direction) 246.22 530.67 T
1 11 Q
( slot when an instance is cr) 300.22 530.67 T
(eated and ini-) 430.13 530.67 T
(tialized. W) 135 516.67 T
(e do that checking in Section 10.6.3.) 186.67 516.67 T
-0.26 (W) 108 496.67 P
-0.26 (e r) 117.99 496.67 P
-0.26 (ede\336ne the) 129.89 496.67 P
4 10 Q
-0.57 (<directed-angle>) 185.71 496.67 P
1 11 Q
-0.26 ( class to include a virtual slot and an or) 281.71 496.67 P
-0.26 (dinary) 469.23 496.67 P
(slot:) 108 482.67 T
4 9 Q
(define abstract class <directed-angle> \050<angle>\051) 108 462 T
(virtual slot direction :: <symbol>;) 118.8 451 T
(slot internal-direction :: <symbol>;) 118.8 440 T
(end class <directed-angle>;) 108 429 T
1 11 Q
(W) 108 408.67 T
(e de\336ne the slot) 117.99 408.67 T
4 10 Q
(direction) 197.29 408.67 T
1 11 Q
( with the) 251.29 408.67 T
4 10 Q
(virtual) 297.16 408.67 T
2 11 Q
(slot allocation) 341.91 408.67 T
1 F
(. Notice that the) 412.47 408.67 T
(slot\325s allocation appears befor) 108 394.67 T
(e the name of the slot \050as contrasted with slot) 252.58 394.67 T
(options, which appear after the name of the slot\051.) 108 380.67 T
(In the) 135 366.67 T
4 10 Q
(<directed-angle>) 165.87 366.67 T
1 11 Q
( class, we use the slot) 261.87 366.67 T
4 10 Q
(internal-direction) 367.75 366.67 T
1 11 Q
(to stor) 108 352.67 T
(e the dir) 138.74 352.67 T
(ection. W) 178.84 352.67 T
(e shall pr) 223.68 352.67 T
(ovide a setter method for the virtual slot) 268.17 352.67 T
4 10 Q
(direction) 108 338.67 T
1 11 Q
( that checks the validity of the value of the dir) 162 338.67 T
(ection befor) 384.53 338.67 T
(e storing) 441.8 338.67 T
(the value in the) 108 324.67 T
4 10 Q
(internal-direction) 185.93 324.67 T
1 11 Q
( slot.) 293.93 324.67 T
3 13 Q
(10.6.1  Symbols) 108 293.33 T
1 11 Q
(Symbols ar) 108 273.67 T
(e much like strings. A) 161.96 273.67 T
2 F
(symbol) 270.68 273.67 T
1 F
( is an instance of the built-in class) 307.96 273.67 T
4 10 Q
(<symbol>) 108 259.67 T
1 11 Q
(. The key dif) 156 259.67 T
(fer) 216.3 259.67 T
(ence between strings and symbols lies in the way simi-) 229.38 259.67 T
(larity \050as tested by) 108 245.67 T
4 10 Q
(=) 200.07 245.67 T
1 11 Q
(\051 and identity \050as tested by) 206.07 245.67 T
4 10 Q
(==) 338.06 245.67 T
1 11 Q
(\051 ar) 350.06 245.67 T
(e de\336ned for each of them.) 366.12 245.67 T
(T) 108 231.67 T
(wo string operands can be similar but not identical. However) 113.75 231.67 T
(, two symbol oper-) 411.11 231.67 T
(ands that ar) 108 217.67 T
(e similar ar) 165.51 217.67 T
(e always identical \321 that is, they always r) 219.75 217.67 T
(efer to the same) 423.5 217.67 T
(object.) 108 203.67 T
(Ther) 135 189.67 T
(e ar) 157.56 189.67 T
(e two r) 175.23 189.67 T
(easons to use symbols in certain cases wher) 208.91 189.67 T
(e you might con-) 420.03 189.67 T
(sider using strings. First, symbol comparison is not case sensitive. Second, com-) 108 175.67 T
-0.01 (parison of two symbols is much faster than is comparison of two strings, because) 108 161.67 P
(symbols ar) 108 147.67 T
(e compar) 160.84 147.67 T
(ed by identity) 205.72 147.67 T
(, and strings ar) 272.27 147.67 T
(e usually compar) 344.52 147.67 T
(ed element by) 428.1 147.67 T
(element.) 108 133.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "129" 143
%%Page: "130" 144
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(130) 72 677.67 T
0 F
(Chapter 10) 95.75 677.67 T
(Slots) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(In the) 135 640.67 T
4 10 Q
(<directed-angle>) 165.87 640.67 T
1 11 Q
( class, we de\336ne the type of the two slots as) 261.87 640.67 T
4 10 Q
-0.06 (<symbol>) 108 626.67 P
1 11 Q
-0.03 (, instead of) 156 626.67 P
4 10 Q
-0.06 (<string>) 211.93 626.67 P
1 11 Q
-0.03 (, which we used in pr) 259.93 626.67 P
-0.03 (evious versions of this class.) 364.45 626.67 P
(If we use strings, then when we checked whether the dir) 108 612.67 T
(ection slot of a latitude) 382.27 612.67 T
(was) 108 598.67 T
4 10 Q
("north") 130.09 598.67 T
1 11 Q
( or) 172.09 598.67 T
4 10 Q
("south") 187.94 598.67 T
1 11 Q
(, we would have to worry about upper) 229.94 598.67 T
(case versus low-) 418.16 598.67 T
(er) 108 584.67 T
(case. For example, we would have to decide whether each of these wer) 117.42 584.67 T
(e valid) 461.11 584.67 T
(values:) 108 570.67 T
4 10 Q
("north") 144.98 570.67 T
1 11 Q
(,) 186.98 570.67 T
4 10 Q
("NORTH") 192.48 570.67 T
1 11 Q
(,) 234.48 570.67 T
4 10 Q
("North") 239.98 570.67 T
1 11 Q
(,) 281.98 570.67 T
4 10 Q
("NOrth") 287.48 570.67 T
1 11 Q
(, and so on. W) 329.48 570.67 T
(e simplify that deci-) 397.67 570.67 T
(sion by using the) 108 556.67 T
4 10 Q
(<symbol>) 193.74 556.67 T
1 11 Q
( type instead of) 241.74 556.67 T
4 10 Q
(<string>) 319.34 556.67 T
1 11 Q
(.) 367.34 556.67 T
(Ther) 135 542.67 T
(e ar) 157.56 542.67 T
(e two equivalent syntaxes for specifying symbols:) 175.23 542.67 T
(\245) 117 522.67 T
(Examples of use of the keywor) 135 522.67 T
(d syntax ar) 284.09 522.67 T
(e:) 337.91 522.67 T
4 10 Q
(north:) 348.67 522.67 T
1 11 Q
( and) 384.67 522.67 T
4 10 Q
(south:) 408.8 522.67 T
1 11 Q
(.) 444.8 522.67 T
(\245) 117 502.67 T
(Examples of use of the hash syntax ar) 135 502.67 T
(e:) 317.33 502.67 T
4 10 Q
( #"north") 325.34 502.67 T
1 11 Q
( and) 379.34 502.67 T
4 10 Q
(#"south") 403.47 502.67 T
1 11 Q
(.) 451.47 502.67 T
(Her) 108 482.67 T
(e, we show that symbol comparison is not case sensitive:) 126.57 482.67 T
6 9 Q
(?) 108 462 T
4 F
(#"NORTH" == #"North";) 118.8 462 T
6 F
(#t) 108 451 T
1 11 Q
(Her) 108 430.67 T
(e, we show that the two syntaxes ar) 126.57 430.67 T
(e equivalent:) 299.15 430.67 T
6 9 Q
(?) 108 410 T
4 F
(north: == #"norTH";) 118.8 410 T
6 F
(#t) 108 399 T
1 11 Q
(It is our convention in this book to r) 108 378.67 T
(eserve the keywor) 281.92 378.67 T
(d syntax for keywor) 370.54 378.67 T
(d) 468.29 378.67 T
(parameters, and otherwise to use the hash syntax. For example, we would give) 108 364.67 T
(the call:) 108 350.67 T
4 9 Q
(make\050<latitude>, direction: #"north"\051) 108 330 T
1 11 Q
(instead of the call:) 108 309.67 T
4 9 Q
(make\050<latitude>, direction: north:\051) 108 289 T
3 13 Q
(10.6.2  Getter and setter methods f) 108 259.33 T
(or a vir) 282.58 259.33 T
(tual slot) 318.34 259.33 T
1 11 Q
(Her) 108 239.67 T
(e is the getter method for the virtual slot) 126.57 239.67 T
4 10 Q
(direction) 324.99 239.67 T
1 11 Q
(:) 378.99 239.67 T
5 9 Q
(// Method 1) 108 219 T
4 F
(define method direction \050angle :: <directed-angle>\051 => \050dir :: <symbol>\051) 108 208 T
(angle.internal-direction;) 118.8 197 T
(end method direction;) 108 186 T
1 11 Q
(Her) 108 165.67 T
(e ar) 126.57 165.67 T
(e the setter methods for the virtual slot) 144.23 165.67 T
4 10 Q
(direction) 335.25 165.67 T
1 11 Q
(:) 389.25 165.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "130" 144
%%Page: "131" 145
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10.6 Virtual slots) 448.96 677.67 T
2 F
(131) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
5 9 Q
0 X
(// Method 2) 108 642 T
4 F
(define method direction-setter) 108 631 T
(\050dir :: <symbol>, angle :: <directed-angle>\051 => \050new-dir :: <symbol>\051) 129.6 620 T
(angle.internal-direction := dir;) 118.8 609 T
(end method direction-setter;) 108 598 T
5 F
(// Method 3) 108 579 T
4 F
(define method direction-setter) 108 568 T
(\050dir :: <symbol>, latitude :: <latitude>\051 => \050new-dir :: <symbol>\051) 129.6 557 T
(if \050dir == #"north" | dir == #"south"\051) 118.8 546 T
(next-method\050\051;) 129.6 535 T
(else) 118.8 524 T
(error\050"%= is not north or south", dir\051;) 129.6 513 T
(end if;) 118.8 502 T
(end method direction-setter;) 108 491 T
5 F
(// Method 4) 108 472 T
4 F
(define method direction-setter) 108 461 T
(\050dir :: <symbol>, longitude :: <longitude>\051 => \050new-dir :: <symbol>\051) 129.6 450 T
(if \050dir == #"east" | dir == #"west"\051) 118.8 439 T
(next-method\050\051;) 129.6 428 T
(else) 118.8 417 T
(error\050"%= is not east or west", dir\051;) 129.6 406 T
(end if;) 118.8 395 T
(end method direction-setter;) 108 384 T
1 11 Q
(The pr) 108 363.67 T
(eceding methods work as follows:) 139.92 363.67 T
(\245) 117 343.67 T
(When you call) 135 343.67 T
4 10 Q
(direction) 207.86 343.67 T
1 11 Q
( on an instance of) 261.86 343.67 T
4 10 Q
(<directed-angle>) 349.5 343.67 T
1 11 Q
( or any of) 445.5 343.67 T
(its subclasses, method 1 is invoked. Method 1 calls the getter) 135 329.67 T
4 10 Q
(internal-) 432.19 329.67 T
(direction) 135 315.67 T
1 11 Q
(, and r) 189 315.67 T
(eturns the value of the) 220.02 315.67 T
4 10 Q
(internal-direction) 331.67 315.67 T
1 11 Q
( slot.) 439.67 315.67 T
(\245) 117 295.67 T
(When you call) 135 295.67 T
4 10 Q
(direction-setter) 207.86 295.67 T
1 11 Q
( on a dir) 303.86 295.67 T
(ect instance of) 344.09 295.67 T
4 10 Q
(<latitude>) 415.66 295.67 T
1 11 Q
(,) 475.66 295.67 T
(method 3 is invoked. Method 3 checks that the dir) 135 281.67 T
(ection is valid for lati-) 378 281.67 T
(tude; if it \336nds that the dir) 135 267.67 T
(ection is valid, it calls) 262.95 267.67 T
4 10 Q
(next-method) 369.74 267.67 T
1 11 Q
(, which) 435.74 267.67 T
(invokes method 2. Method 2 stor) 135 253.67 T
(es the dir) 294.86 253.67 T
(ection in the) 339.62 253.67 T
4 10 Q
(internal-) 402.08 253.67 T
(direction) 135 239.67 T
1 11 Q
( slot.) 189 239.67 T
(\245) 117 219.67 T
(When you call) 135 219.67 T
4 10 Q
(direction-setter) 207.86 219.67 T
1 11 Q
( on a dir) 303.86 219.67 T
(ect instance of) 344.09 219.67 T
4 10 Q
(<longitude>) 415.66 219.67 T
1 11 Q
(,) 481.66 219.67 T
-0.18 (method 4 is called. Method 4 checks that the dir) 135 205.67 P
-0.18 (ection is valid for longitude;) 365.21 205.67 P
(if it \336nds that the dir) 135 191.67 T
(ection is valid, it calls) 235.24 191.67 T
4 10 Q
(next-method) 342.03 191.67 T
1 11 Q
(, which invokes) 408.03 191.67 T
(method 2. Method 2 stor) 135 177.67 T
(es the dir) 254.24 177.67 T
(ection in the) 299 177.67 T
4 10 Q
(internal-direction) 361.46 177.67 T
1 11 Q
( slot.) 469.46 177.67 T
(\245) 117 157.67 T
(When you call) 135 157.67 T
4 10 Q
(direction-setter) 207.86 157.67 T
1 11 Q
( on a dir) 303.86 157.67 T
(ect instance of) 344.09 157.67 T
4 10 Q
(<directed-) 415.66 157.67 T
(angle>) 135 143.67 T
1 11 Q
(, method 2 is invoked. Method 2 stor) 171 143.67 T
(es the dir) 349.04 143.67 T
(ection in the) 393.79 143.67 T
4 10 Q
(internal-direction) 135 129.67 T
1 11 Q
( slot.) 243 129.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "131" 145
%%Page: "132" 146
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(132) 72 677.67 T
0 F
(Chapter 10) 95.75 677.67 T
(Slots) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(In these methods, we use) 108 640.67 T
4 10 Q
(dir) 233.17 640.67 T
1 11 Q
(, rather than) 250.35 640.67 T
4 10 Q
(direction) 312.69 640.67 T
1 11 Q
(, as the name of the parame-) 366.69 640.67 T
(ter that r) 108 626.67 T
(epr) 149.92 626.67 T
(esents dir) 165.95 626.67 T
(ection. Recall that) 212.62 626.67 T
4 10 Q
(direction) 301.45 626.67 T
1 11 Q
( is the name of a getter) 355.45 626.67 T
(.) 464.48 626.67 T
(Although we technically could use) 108 612.67 T
4 10 Q
(direction) 279.75 612.67 T
1 11 Q
( as the parameter name in these) 333.75 612.67 T
(methods \050because we do not call the) 108 598.67 T
4 10 Q
(direction) 286.78 598.67 T
1 11 Q
( getter in the bodies\051,) 340.78 598.67 T
4 10 Q
(direction) 445.92 598.67 T
1 11 Q
(as a parameter name might be confusing to other people r) 108 584.67 T
(eading the code.) 388.84 584.67 T
(The) 135 570.67 T
4 10 Q
(error) 156.16 570.67 T
1 11 Q
( function signals an err) 186.16 570.67 T
(or) 297.35 570.67 T
(. For mor) 306.89 570.67 T
(e information about signaling) 351.47 570.67 T
(and handling err) 108 556.67 T
(ors, see Chapter 20,) 189.83 556.67 T
0 F
(Exceptions) 289.81 556.67 T
1 F
(.) 338.29 556.67 T
(The) 135 542.67 T
4 10 Q
(direction-setter) 156.16 542.67 T
1 11 Q
( methods check the dir) 252.16 542.67 T
(ection when the setter is) 362.41 542.67 T
(called. In Section 10.6.3, we check the dir) 108 528.67 T
(ection when an instance is made.) 305.58 528.67 T
3 13 Q
(10.6.3  Initializ) 108 497.33 T
(e method f) 179.81 497.33 T
(or a vir) 233.51 497.33 T
(tual slot) 269.28 497.33 T
1 11 Q
(W) 108 477.67 T
(e de\336ne the) 117.99 477.67 T
4 10 Q
(initialize) 177.08 477.67 T
1 11 Q
( method:) 237.08 477.67 T
4 9 Q
(define method initialize \050angle :: <directed-angle>, #key direction: dir\051) 108 457 T
5 F
(//1) 505.8 457 T
4 F
(next-method\050\051;) 118.8 446 T
5 F
(//2) 505.8 446 T
4 F
(angle.direction := dir;) 118.8 435 T
5 F
(//3) 505.8 435 T
4 F
(end method initialize;) 108 424 T
5 F
(//4) 505.8 424 T
1 11 Q
(For keywor) 108 403.67 T
(d parameters, the name of the keywor) 164.04 403.67 T
(d that you supply to) 348.71 403.67 T
4 10 Q
(make) 450.44 403.67 T
1 11 Q
( is) 474.44 403.67 T
(normally the same name as the parameter that is initialized within the body) 108 389.67 T
(. In) 475.18 389.67 T
(this case, we want to avoid confusion between the getter) 108 375.67 T
4 10 Q
(direction) 385.1 375.67 T
1 11 Q
( and the) 439.1 375.67 T
(keywor) 108 361.67 T
(d parameter) 144.83 361.67 T
4 10 Q
(direction:) 207.19 361.67 T
1 11 Q
(, so we use) 267.19 361.67 T
4 10 Q
(dir) 322.62 361.67 T
1 11 Q
( as the name of the keywor) 340.62 361.67 T
(d) 471.17 361.67 T
(parameter for the) 108 347.67 T
4 10 Q
(initialize) 195.66 347.67 T
1 11 Q
( method. When you call) 255.66 347.67 T
4 10 Q
(make) 374.47 347.67 T
1 11 Q
(, you use the) 398.47 347.67 T
4 10 Q
(direc-) 462.8 347.67 T
(tion:) 108 333.67 T
1 11 Q
( keywor) 138 333.67 T
(d. However) 177.58 333.67 T
(, within this method, the parameter is named) 234.41 333.67 T
4 10 Q
(dir) 456.3 333.67 T
1 11 Q
(.) 473.48 333.67 T
(Line 3 calls the setter for the) 135 319.67 T
4 10 Q
(direction) 274.04 319.67 T
1 11 Q
( slot. W) 328.04 319.67 T
(e de\336ned the methods for) 363.73 319.67 T
4 10 Q
(direction-setter) 108 305.67 T
1 11 Q
( in Section 10.6.2. If the ar) 204 305.67 T
(gument is a latitude, then method 3) 327.75 305.67 T
(is invoked to check the value. If the ar) 108 291.67 T
(gument is a longitude, then method 4 is) 292.04 291.67 T
(invoked to check the value.) 108 277.67 T
(W) 135 263.67 T
(e can cr) 144.99 263.67 T
(eate a new instance of) 181.57 263.67 T
4 10 Q
(<absolute-position>) 290.87 263.67 T
1 11 Q
(.) 404.87 263.67 T
6 9 Q
(?) 108 243 T
4 F
(define variable *my-absolute-position* =) 118.8 243 T
(make\050<absolute-position>,) 129.6 232 T
(latitude:) 156.6 221 T
(make\050<latitude>,) 167.4 210 T
(total-seconds: encode-total-seconds\05042, 19, 34\051,) 194.4 199 T
(direction: #"north"\051,) 194.4 188 T
(longitude:) 156.6 177 T
(make\050<longitude>,) 167.4 166 T
(total-seconds: encode-total-seconds\05070, 56, 26\051,) 194.4 155 T
(direction: #"west"\051\051;) 194.4 144 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "132" 146
%%Page: "133" 147
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10.7 Summary) 459.24 677.67 T
2 F
(133) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(The pr) 108 640.67 T
(eceding example works, because the values for dir) 139.92 640.67 T
(ection ar) 384.45 640.67 T
(e appr) 426.2 640.67 T
(opriate) 457.08 640.67 T
-0.28 (for latitude and longitude. The following example shows what happens when the) 108 626.67 P
(dir) 108 612.67 T
(ection is not valid when an instance is cr) 122.07 612.67 T
(eated:) 318.07 612.67 T
6 9 Q
(?) 108 592 T
4 F
(make\050<latitude>, direction: #"nooth"\051;) 118.8 592 T
6 F
(ERROR: nooth is not north or south) 108 581 T
1 11 Q
-0.41 (The following example shows what happens when the dir) 108 560.67 P
-0.41 (ection is not valid when) 386.98 560.67 P
(the) 108 546.67 T
4 10 Q
(direction) 126.01 546.67 T
1 11 Q
( setter is used:) 180.01 546.67 T
6 9 Q
(?) 108 526 T
4 F
(begin) 118.8 526 T
(let my-longitude = make\050<longitude>, direction: #"east"\051;) 129.6 515 T
(my-longitude.direction := #"north";) 129.6 504 T
(end;) 118.8 493 T
6 F
(ERROR: north is not east or west) 108 482 T
3 15 Q
(10.7  Summar) 108 444 T
(y) 188.12 444 T
1 11 Q
(In this chapter) 108 423.67 T
(, we cover) 177.24 423.67 T
(ed the following:) 226.46 423.67 T
(\245) 117 403.67 T
(W) 135 403.67 T
(e described techniques for initializing slots; see T) 144.99 403.67 T
(able 10.1.) 381.66 403.67 T
(\245) 117 383.67 T
(W) 135 383.67 T
(e discussed the syntax of calling getters and setters; see T) 144.99 383.67 T
(able 10.2.) 421.08 383.67 T
(\245) 117 363.67 T
(W) 135 363.67 T
(e showed how to de\336ne methods for getters and setters.) 144.99 363.67 T
(\245) 117 343.67 T
(W) 135 343.67 T
(e showed how and why you can use symbols instead of strings.) 144.99 343.67 T
(\245) 117 323.67 T
(W) 135 323.67 T
(e described the dif) 144.99 323.67 T
(fer) 234.31 323.67 T
(ent kinds of slot allocation; see T) 247.39 323.67 T
(able 10.3.) 404.54 323.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 F
(T) 130.26 281.67 T
(echnique) 135.66 281.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Summar) 338.6 281.67 T
(y) 380.49 281.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(initialize) 113.99 256.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(method) 113.99 242.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Y) 202.58 256.67 T
(ou can de\336ne a method for) 208.9 256.67 T
4 10 Q
(initialize) 342.35 256.67 T
1 11 Q
( for a class to per-) 402.35 256.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(form any actions to initialize the instance. The) 202.58 242.67 T
4 10 Q
(make) 428.75 242.67 T
1 11 Q
( function) 452.75 242.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(calls the) 202.58 228.67 T
4 10 Q
(initialize) 244.78 228.67 T
1 11 Q
( generic function after) 304.78 228.67 T
4 10 Q
(make) 414.41 228.67 T
1 11 Q
( cr) 438.41 228.67 T
(eates an) 450.19 228.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.47 (instance and supplies those initial slot values that it can. If you) 202.58 214.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.28 (need to do any complex computation to determine and set the) 202.58 200.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value of a slot, you can do it in an) 202.58 186.67 T
4 10 Q
(initialize) 368.83 186.67 T
1 11 Q
( method.) 428.83 186.67 T
0 0 0 1 0 0 0 K
107.99 149.01 522.01 157 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 188.83 160.33 T
(ab) 194.14 160.33 T
(le 10.1) 205.71 160.33 T
8 F
(Summar) 241.85 160.33 T
(y of slot-initialization techniques) 279.93 160.33 T
(.) 420.39 160.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
107.99 296.88 107.99 177.13 2 L
V
0.25 H
0 Z
N
522.01 296.88 522.01 177.13 2 L
V
N
107.86 297 522.14 297 2 L
V
N
107.86 270 522.14 270 2 L
V
N
107.86 177 522.14 177 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "133" 147
%%Page: "134" 148
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(134) 72 677.67 T
0 F
(Chapter 10) 95.75 677.67 T
(Slots) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
(Init keyword) 113.99 609 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Y) 202.58 607.67 T
(ou can use the) 208.9 607.67 T
4 10 Q
(init-keyword:) 281.15 607.67 T
1 11 Q
( slot option to declar) 359.15 607.67 T
(e an) 458.73 607.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(optional keywor) 202.58 593.67 T
(d ar) 282.67 593.67 T
(gument, or the) 301.79 593.67 T
4 10 Q
(required-init-) 376.11 593.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.76 (keyword:) 202.58 579.67 P
1 11 Q
-0.35 ( slot option to declar) 250.58 579.67 P
-0.35 (e a r) 348.77 579.67 P
-0.35 (equir) 368.49 579.67 P
-0.35 (ed keywor) 393.9 579.67 P
-0.35 (d ar) 445.12 579.67 P
-0.35 (gument) 463.89 579.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.33 (for) 202.58 565.67 P
4 10 Q
-0.72 (make) 219.01 565.67 P
1 11 Q
-0.33 ( when you cr) 243.01 565.67 P
-0.33 (eate an instance of the class. The value of) 305.3 565.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the keywor) 202.58 551.67 T
(d ar) 257.41 551.67 T
(gument becomes the value of the slot.) 276.53 551.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(Init value) 113.99 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Y) 202.58 528.67 T
(ou can use the) 208.9 528.67 T
4 10 Q
(init-value:) 281.15 528.67 T
1 11 Q
( slot option to give a default ini-) 347.15 528.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tial value for the slot. This option speci\336es an expr) 202.58 514.67 T
(ession that) 446.75 514.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.26 (is evaluated once, befor) 202.58 500.67 P
-0.26 (e the \336rst instance of the class is made,) 316.28 500.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(to yield a value. Every time an instance is made and the slot) 202.58 486.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(needs a default value, this same value is used as the default.) 202.58 472.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.39 (The slot r) 202.58 458.67 P
-0.39 (eceives its default initial value when no init keywor) 247.31 458.67 P
-0.39 (d) 494.93 458.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is de\336ned, or when the caller does not supply the init-) 202.58 444.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(keywor) 202.58 430.67 T
(d ar) 239.4 430.67 T
(gument to) 258.52 430.67 T
4 10 Q
(make) 311.33 430.67 T
1 11 Q
(.) 335.33 430.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(Init function) 113.99 409 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Y) 202.58 407.67 T
(ou can use the) 208.9 407.67 T
4 10 Q
(init-function:) 281.15 407.67 T
1 11 Q
( slot option to pr) 365.15 407.67 T
(ovide a) 445.77 407.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(function that r) 202.58 393.67 T
(eturns a default value. This option speci\336es an) 272.08 393.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(expr) 202.58 379.67 T
(ession that is evaluated once, befor) 224.28 379.67 T
(e the \336rst instance of) 393.55 379.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the class is made, to yield a function. The function must have) 202.58 365.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(no r) 202.58 351.67 T
(equir) 221.88 351.67 T
(ed ar) 247.29 351.67 T
(guments and must r) 271.68 351.67 T
(eturn at least one value.) 369.68 351.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Every time that an instance is made and the slot needs a) 202.58 337.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(default value, this function is called with no ar) 202.58 323.67 T
(guments, and) 428.41 323.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.46 (the value that it r) 202.58 309.67 P
-0.46 (eturns is used as the default. The slot r) 283.82 309.67 P
-0.46 (eceives) 466.95 309.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(its default initial value when no init keywor) 202.58 295.67 T
(d is de\336ned or) 415.83 295.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.33 (when the caller does not supply the init-keywor) 202.58 281.67 P
-0.33 (d ar) 433.06 281.67 P
-0.33 (gument to) 451.86 281.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(make) 202.58 267.67 T
1 11 Q
(.) 226.58 267.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(Init expression) 113.99 246 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Y) 202.58 244.67 T
(ou can use an init expr) 208.9 244.67 T
(ession to pr) 318.64 244.67 T
(ovide an expr) 374.69 244.67 T
(ession that) 441.21 244.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.45 (yields a default value. Every time that an instance is made and) 202.58 230.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the slot needs a default value, this expr) 202.58 216.67 T
(ession is evaluated,) 392.06 216.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.46 (and its value is used as the default. The slot r) 202.58 202.67 P
-0.46 (eceives its default) 416.33 202.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(initial value when no init keywor) 202.58 188.67 T
(d is de\336ned, or when the) 364.31 188.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(caller does not supply the init-keywor) 202.58 174.67 T
(d ar) 387.36 174.67 T
(gument to) 406.47 174.67 T
4 10 Q
(make) 459.28 174.67 T
1 11 Q
(.) 483.28 174.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 F
(T) 130.26 632.67 T
(echnique) 135.66 632.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Summar) 338.6 632.67 T
(y) 380.49 632.67 T
0 0 0 1 0 0 0 K
107.99 137.01 522.01 145 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 162.48 148.33 T
(ab) 167.79 148.33 T
(le 10.1) 179.36 148.33 T
8 F
(Summar) 215.5 148.33 T
(y of slot-initialization techniques) 253.58 148.33 T
(.) 394.04 148.33 T
9 F
( \050contin) 396.82 148.33 T
(ued\051) 429.51 148.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
107.99 647.88 107.99 165.13 2 L
V
0.25 H
0 Z
N
522.01 647.88 522.01 165.13 2 L
V
N
107.86 648 522.14 648 2 L
V
N
107.86 621 522.14 621 2 L
V
N
107.86 165 522.14 165 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "134" 148
%%Page: "135" 149
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10.7 Summary) 459.24 677.67 T
2 F
(135) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
0 X
(Call) 191.55 618.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 380.24 618.67 T
(r) 385.64 618.67 T
(anslation) 389.19 618.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 9 Q
(object.function-name) 113.29 595 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(function-name) 292.75 595 T
4 10 Q
(\050) 362.95 595 T
6 9 Q
(object) 368.95 595 T
4 10 Q
(\051) 401.35 595 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(*my-time-of-day*.total-seconds;) 113.29 574 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds\050*my-time-of-day*\051;) 292.75 574 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(object.name) 113.29 553 T
4 F
( :=) 172.69 553 T
6 F
(new-value) 194.29 553 T
4 F
(;) 242.89 553 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(name) 292.75 553 T
4 F
(-setter\050) 314.35 553 T
6 F
(new-value) 357.55 553 T
4 F
(,) 406.15 553 T
6 F
(object) 416.95 553 T
4 F
(\051;) 449.35 553 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(name\050object\051) 113.29 530.67 T
1 11 Q
( :=) 178.09 530.67 T
6 9 Q
(new-value) 193.01 530.67 T
1 11 Q
(;) 241.61 530.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 9 Q
(name) 292.75 532 T
4 F
(-setter\050) 314.35 532 T
6 F
(new-value) 357.55 532 T
4 F
(,) 406.15 532 T
6 F
(object) 416.95 532 T
4 F
(\051;) 449.35 532 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(*my-time-of-day*.total-seconds) 113.29 509 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(:= 0;) 124.09 498 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds-setter) 292.75 509 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\0500, *my-time-of-day*\051;) 303.55 498 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds\050*my-time-of-day*\051) 113.29 477 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(:= 0;) 124.09 466 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds-setter\0500, *my-time-of-day*\051;) 292.75 477 T
0 0 0 1 0 0 0 K
108 429.01 522 437 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 198.97 440.33 T
(ab) 204.28 440.33 T
(le 10.2) 215.85 440.33 T
8 F
(Syntax of calling getters and setters) 251.99 440.33 T
(.) 410.25 440.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Allocation) 118.14 364.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 F
(Summar) 333.06 362.67 T
(y) 374.95 362.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Instance) 116.66 337.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.31 (Each instance allocates storage for the slot, and each instance) 200.17 337.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of the class that de\336nes the slot has its own value of the slot.) 200.17 323.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Instance allocation is the default.) 200.17 309.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V) 116.66 286.67 T
(irtual) 124 286.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.42 (No storage is allocated for the slot. Y) 200.17 286.67 P
-0.42 (ou must pr) 374.63 286.67 P
-0.42 (ovide a getter) 427.28 286.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(method that computes the value of the virtual slot.) 200.17 272.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(Class) 116.66 251.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(The class that de\336nes the slot allocates storage for the slot.) 200.17 249.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(All general instances of the class shar) 200.17 235.67 T
(e the value of the slot.) 380.86 235.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Each-) 116.66 212.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(subclass) 116.66 198.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The class that de\336nes the slot and each of its subclasses allo-) 200.17 212.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cate storage for the slot. All the dir) 200.17 198.67 T
(ect instances of each class) 367.91 198.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(shar) 200.17 184.67 T
(e the value of the slot.) 220.88 184.67 T
0 0 0 1 0 0 0 K
108 147.02 522 155.01 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 216.9 158.34 T
(ab) 222.21 158.34 T
(le 10.3) 233.77 158.34 T
8 F
(Summar) 269.92 158.34 T
(y of slot allocations) 307.99 158.34 T
(.) 392.33 158.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
109.29 633.88 109.29 457.12 2 L
V
0.25 H
0 Z
N
520.71 633.88 520.71 457.12 2 L
V
N
109.17 634 520.83 634 2 L
V
N
109.17 607 520.83 607 2 L
V
N
109.17 457 520.83 457 2 L
V
N
110.66 377.88 110.66 175.13 2 L
V
N
519.34 377.88 519.34 175.13 2 L
V
N
110.53 378.01 519.47 378.01 2 L
V
N
110.53 351.01 519.47 351.01 2 L
V
N
110.53 175.01 519.47 175.01 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "135" 149
%%Page: "136" 150
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 126 522 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "136" 150
%%Page: "137" 151
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(137) 298.88 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(1) 180 628 T
(1) 193.35 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(1) 108 566.45 T
(1) 108.89 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Collections and Contr) 109.89 566.45 T
(ol) 399.75 566.45 T
(Flow) 108 536.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
-0.12 (A) 108 424.67 P
2 F
-0.12 (collection) 119.19 424.67 P
1 F
-0.12 ( is a kind of container that can hold zer) 168.06 424.67 P
-0.12 (o or mor) 355.9 424.67 P
-0.12 (e objects. In this chap-) 397.38 424.67 P
-0.1 (ter) 108 410.67 P
-0.1 (, we illustrate several useful built-in collections including strings, lists, vectors,) 120.39 410.67 P
(arrays, and tables.) 108 396.67 T
(In Dylan, a collection is an instance of the built-in class) 135 382.67 T
4 10 Q
(<collection>) 403.47 382.67 T
1 11 Q
(.) 475.47 382.67 T
(Dylan pr) 108 368.67 T
(ovides a rich set of collection classes, and a rich set of generic functions) 151.24 368.67 T
(to iterate over and to manipulate instances of those classes. In addition to using) 108 354.67 T
-0.4 (the built-in collection classes, you can de\336ne new collection classes. W) 108 340.67 P
-0.4 (e pr) 443.84 340.67 P
-0.4 (esent an) 462.22 340.67 P
(example of de\336ning a new collection class in Chapter 16,) 108 326.67 T
0 F
(De\336nition of a New) 385.94 326.67 T
(Collection) 108 312.67 T
1 F
(.) 152.81 312.67 T
(Contr) 135 298.67 T
(ol-\337ow functions enable you to alter the default \050sequential\051 or) 162.94 298.67 T
(der of) 467.04 298.67 T
-0.53 (statement execution, including performing iteration. Dylan pr) 108 284.67 P
-0.53 (ovides several ways) 405.35 284.67 P
-0.42 (of branching to dif) 108 270.67 P
-0.42 (fer) 196.97 270.67 P
-0.42 (ent code depending on the value of one or mor) 210.04 270.67 P
-0.42 (e tests, as well) 433.89 270.67 P
(as iterating over ranges of numbers and elements of collections.) 108 256.67 T
(In this chapter) 135 242.67 T
(, we pr) 204.24 242.67 T
(esent collections and contr) 237.7 242.67 T
(ol \337ow together) 366.09 242.67 T
(, because) 442.43 242.67 T
(often Dylan contr) 108 228.67 T
(ol-\337ow constr) 193.18 228.67 T
(ucts ar) 260.47 228.67 T
(e used to operate on collections.) 292.64 228.67 T
3 15 Q
(11.1  Built-in collection c) 108 189 T
(lasses) 252.01 189 T
1 11 Q
(Figur) 108 168.67 T
(e 1) 134.21 168.67 T
(1.1 shows the most common Dylan collection classes.) 147.13 168.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "137" 151
%%Page: "138" 152
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(138) 72 677.67 T
0 F
(Chapter 11) 95.75 677.67 T
(Collections and Control Flow) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(A collection holds a gr) 108 448.67 T
(oup of objects, called) 216.96 448.67 T
2 F
(elements) 321.47 448.67 T
1 F
(. Each element is associated) 366.68 448.67 T
(with a key) 108 434.67 T
(. Each class of collection can have dif) 157.64 434.67 T
(fer) 335.93 434.67 T
(ent r) 349.01 434.67 T
(estrictions on keys or) 371.16 434.67 T
(elements.) 108 420.67 T
(Sequences ar) 135 406.67 T
(e an important subclass of collections. Sequences r) 197.72 406.67 T
(estrict their) 441.58 406.67 T
(keys to be nonnegative integers starting at 0, and incr) 108 392.67 T
(easing by one for each addi-) 367.07 392.67 T
(tional value in the collection. Arrays, vectors, strings, and lists ar) 108 378.67 T
(e sequences.) 421.77 378.67 T
-0.33 (Instances of) 108 364.67 P
4 10 Q
-0.72 (<string>) 167.59 364.67 P
1 11 Q
-0.33 ( ar) 215.59 364.67 P
-0.33 (e sequences that can hold only characters. Y) 227.65 364.67 P
-0.33 (ou can access) 437.45 364.67 P
(instances of) 108 350.67 T
4 10 Q
(<array>) 167.74 350.67 T
1 11 Q
( using several subscripts. Instances of) 209.74 350.67 T
4 10 Q
(<vector>) 394.55 350.67 T
1 11 Q
( ar) 442.55 350.67 T
(e one-) 454.95 350.67 T
-0.1 (dimensional arrays. Instances of) 108 336.67 P
4 10 Q
-0.22 (<simple-object-vector>) 266.85 336.67 P
1 11 Q
-0.1 ( can hold any kind of) 398.85 336.67 P
(Dylan object. Instances of most subclasses of) 108 322.67 T
4 10 Q
(<vector>) 326.75 322.67 T
1 11 Q
( cannot change size; the) 374.75 322.67 T
(exception is instances of) 108 308.67 T
4 10 Q
(<stretchy-vector>) 228.01 308.67 T
1 11 Q
(.) 330.01 308.67 T
3 15 Q
(11.2  Basic use of collections) 108 269.01 T
1 11 Q
(In Sections 1) 108 248.67 T
(1.2.1 thr) 168.29 248.67 T
(ough 1) 207.18 248.67 T
(1.2.3, we show how to cr) 239.98 248.67 T
(eate collections, and how to) 359.37 248.67 T
(access the elements of a collection.) 108 234.67 T
3 13 Q
(11.2.1  Creation of strings and access to elements) 108 203.34 T
1 11 Q
(First, we de\336ne a variable, initializing it with a string:) 108 183.67 T
6 9 Q
(?) 108 163.01 T
4 F
(define variable *greeting* = "Hello, world.";) 118.8 163.01 T
6 F
(?) 108 144.01 T
4 F
(*greeting*;) 118.8 144.01 T
6 F
("Hello, world.") 108 133.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 468.01 504 476 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 11.1) 210.93 479.33 T
8 F
(Built-in collection classes) 269.3 479.33 T
(.) 380.29 479.33 T
0 0 0 1 0 0 0 K
108 492 504 648 C
121.5 496 490.5 646 C
0 -357 161 0 299 357 138 127.5 502 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f11-1.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f11-1 .eps)%%CreationDate: (6/5/96) (10:42 AM)%%BoundingBox: -357 161 0 299%%HiResBoundingBox: -356.0555 160.9167 -1.2713 298.8737%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: -174.6667 163.1667 -174.6667 163.1667%AI3_TileBox: -449.6667 -202.3333 102.3333 527.6667%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -930.6667 667.1667 -1.5 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4494.6667 4483.1667 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4494.6667 4483.1667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4494.6667 4483.1667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 -207.1667 291.6667 0 TpTP-32.3921 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(<collection>) Tx (\r) TX TO0 To1 0 0 1 -336.1667 260.6667 0 TpTP-18.8954 0 Td0 Tr(<table>) Tx (\r) TX TO0 To1 0 0 1 -116.1667 260.6667 0 TpTP-26.9934 0 Td0 Tr(<sequence>) Tx (\r) TX TO0 To1 0 0 1 -192.1667 246.1667 0 TpTP-18.8954 0 Td0 Tr(<array>) Tx (\r) TX TO0 To1 0 0 1 -238.6667 226.6667 0 TpTP-21.5947 0 Td0 Tr(<vector>) Tx (\r) TX TO0 To1 0 0 1 -181.4167 226.6667 0 TpTP-21.5947 0 Td0 Tr(<string>) Tx (\r) TX TO0 To1 0 0 1 -126.6667 226.6667 0 TpTP-18.8954 0 Td0 Tr(<deque>) Tx (\r) TX TO0 To1 0 0 1 -70.4167 226.6667 0 TpTP-16.196 0 Td0 Tr(<list>) Tx (\r) TX TO0 To1 0 0 1 -20.1667 226.6667 0 TpTP-18.8954 0 Td0 Tr(<range>) Tx (\r) TX TO0 To1 0 0 1 -310.1667 190.1667 0 TpTP-45.8888 0 Td0 Tr(<stretchy-vector>) Tx (\r) TX TO0 To1 0 0 1 -101.1667 202.1667 0 TpTP-16.196 0 Td0 Tr(<pair>) Tx (\r) TX TO0 To1 0 0 1 -37.1667 202.1667 0 TpTP-32.3921 0 Td0 Tr(<empty-list>) Tx (\r) TX TO0 To1 0 0 1 -292.6667 163.1667 0 TpTP-59.3855 0 Td0 Tr(<simple-object-vector>) Tx (\r) TX TO0 To1 0 0 1 -177.1667 163.1667 0 TpTP-43.1894 0 Td0 Tr(<unicode-string>) Tx (\r) TX TO0 To1 0 0 1 -83.1667 163.1667 0 TpTP-35.0914 0 Td0 Tr(<byte-string>) Tx (\r) TX TOu0 R0 G0.65 w-223.1667 287.6667 m-321.6667 272.1667 lS0 O0 g1 w-320.4839 274.6183 m-328.4847 271.0659 l-319.7796 270.142 l-320.4839 274.6183 lfUu0 R0 G0.65 w-199.1667 288.6667 m-121.6667 274.6667 lS0 O0 g1 w-123.583 272.74 m-114.8591 273.4663 l-122.7774 277.1993 l-123.583 272.74 lfUu0 R0 G0.65 w-144.6667 261.6667 m-167 255 lS0 O0 g1 w-166.1556 257.5879 m-173.6101 252.9985 l-164.8595 253.2459 l-166.1556 257.5879 lfUu0 R0 G0.65 w-125 255.6667 m-158.3333 239.3334 lS0 O0 g1 w-157.9332 242.024 m-164.5297 236.2689 l-155.9394 237.9548 l-157.9332 242.024 lfUu0 R0 G0.65 w-115.3333 255.6667 m-121.6667 241.3334 lS0 O0 g1 w-123.0875 243.6548 m-124.4327 235.0048 l-118.9427 241.8235 l-123.0875 243.6548 lfUu0 R0 G0.65 w-107 256.6667 m-80.3333 239.6667 lS0 O0 g1 w-82.8423 238.608 m-74.4943 235.9729 l-80.4064 242.429 l-82.8423 238.608 lfUu0 R0 G0.65 w-101 257.6667 m-29.6667 236.6667 lS0 O0 g1 w-31.7812 234.9561 m-23.0298 234.7413 l-30.5014 239.303 l-31.7812 234.9561 lfUu0 R0 G0.65 w-211.3333 243.6667 m-232 236.3334 lS0 O0 g1 w-231.2917 238.9607 m-238.5031 233.998 l-229.7764 234.6902 l-231.2917 238.9607 lfUu0 R0 G0.65 w-240.6667 223 m-295 201.6667 lS0 O0 g1 w-294.3823 204.3129 m-301.4252 199.1138 l-292.7262 200.0949 l-294.3823 204.3129 lfUu0 R0 G0.65 w-237.6667 222 m-261.6667 178 lS0 O0 g1 w-262.8864 180.4292 m-264.9465 171.921 l-258.9082 178.2594 l-262.8864 180.4292 lfUu0 R0 G0.65 w-234.6667 222.3334 m-200.3333 176.6667 lS0 O0 g1 w-203.0507 176.5562 m-196.1585 171.1589 l-199.4288 179.2793 l-203.0507 176.5562 lfUu0 R0 G0.65 w-231 223.3334 m-111.6667 174 lS0 O0 g1 w-113.9501 172.5253 m-105.2701 171.3885 l-112.2189 176.713 l-113.9501 172.5253 lfUu0 R0 G0.65 w-181.6667 223.3334 m-181.6667 178.6667 lS0 O0 g1 w-183.9046 180.2124 m-181.6391 171.7566 l-179.3732 180.2124 l-183.9046 180.2124 lfUu0 R0 G0.65 w-177.6667 223 m-89.6667 173.6667 lS0 O0 g1 w-92.1078 172.4739 m-83.6241 170.3152 l-89.892 176.4266 l-92.1078 172.4739 lfUu0 R0 G0.65 w-73 222 m-89.3333 213.6667 lS0 O0 g1 w-88.9732 216.3634 m-95.4757 210.5025 l-86.9138 212.327 l-88.9732 216.3634 lfUu0 R0 G0.65 w-67.0988 222 m-50.7655 213.6667 lS0 O0 g1 w-51.1256 216.3634 m-44.6231 210.5025 l-53.185 212.327 l-51.1256 216.3634 lfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 492 504 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "138" 152
%%Page: "139" 153
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.2 Basic use of collections) 410.44 677.67 T
2 F
(139) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(W) 108 640.67 T
(e can access elements of the string:) 117.99 640.67 T
6 9 Q
(?) 108 620 T
4 F
(*greeting*[0];) 118.8 620 T
6 F
(\325H\325) 108 609 T
(?) 108 590 T
4 F
(*greeting*[1];) 118.8 590 T
6 F
(\325e\325) 108 579 T
1 11 Q
-0.28 (The syntax) 108 558.67 P
4 10 Q
-0.61 (*greeting*[) 163.3 558.67 P
6 F
-0.61 (n) 229.3 558.67 P
4 F
-0.61 (]) 235.3 558.67 P
1 11 Q
-0.28 ( r) 241.3 558.67 P
-0.28 (efers to the) 247.91 558.67 P
0 F
-0.28 (n) 303.38 558.67 P
1 F
-0.28 (th element of the string in) 309.5 558.67 P
4 10 Q
-0.61 (*greeting*) 435.86 558.67 P
1 11 Q
-0.28 (.) 495.86 558.67 P
-0.02 (Y) 108 544.67 P
-0.02 (ou can use this syntax to access any element of any collection.) 114.32 544.67 P
-0.02 (In Dylan, double) 419.32 544.67 P
(quotes ar) 108 530.67 T
(e used to enclose literal strings, and single quotes ar) 152.71 530.67 T
(e used to enclose) 404.78 530.67 T
(characters.) 108 516.67 T
(W) 135 502.67 T
(e can use the assignment operator to change an element of a string:) 144.99 502.67 T
6 9 Q
(?) 108 482 T
4 F
(*greeting* := copy-sequence\050*greeting*\051;) 118.8 482 T
6 F
("Hello, world.") 108 471 T
(?) 108 452 T
4 F
(*greeting*[0] :=) 118.8 452 T
6 F
(') 210.6 452 T
4 F
(j) 216 452 T
6 F
(') 221.4 452 T
4 F
(;) 226.8 452 T
6 F
(\325j\325) 108 441 T
(?) 108 422 T
4 F
(*greeting*;) 118.8 422 T
6 F
("jello, world.") 108 411 T
1 11 Q
(W) 108 390.67 T
(e copied the gr) 117.99 390.67 T
(eeting befor) 189.72 390.67 T
(e modifying it, because modifying a literal constant) 247.48 390.67 T
-0.28 (is an err) 108 376.67 P
-0.28 (or) 146.48 376.67 P
-0.28 (. A) 156.01 376.67 P
2 F
-0.28 ( literal constant) 169.79 376.67 P
1 F
-0.28 ( is an object whose contents ar) 246.82 376.67 P
-0.28 (e known completely at) 391.8 376.67 P
(compile time. Dylan has a special syntax for each class of literal constant, so that) 108 362.67 T
-0.33 (they can be identi\336ed easily) 108 348.67 P
-0.33 (. The literal constant) 240.93 348.67 P
4 10 Q
-0.73 ("Hello, world.") 341.1 348.67 P
1 11 Q
-0.33 (, which is used) 430.37 348.67 P
(to initialize the) 108 334.67 T
4 10 Q
(*greeting*) 183.36 334.67 T
1 11 Q
( variable, is part of the pr) 243.36 334.67 T
(ogram executable, and is) 365.52 334.67 T
(allocated when you compile the pr) 108 320.67 T
(ogram.) 276.52 320.67 T
-0.43 (The) 135 306.67 P
4 10 Q
-0.94 (copy-sequence) 155.74 306.67 P
1 11 Q
-0.43 ( generic function r) 233.74 306.67 P
-0.43 (eturns a new collection with the same) 321.11 306.67 P
(elements as its ar) 108 292.67 T
(gument. The) 190.88 292.67 T
4 10 Q
(copy-sequence) 255.27 292.67 T
1 11 Q
( function cr) 333.27 292.67 T
(eates the copy at r) 388.58 292.67 T
(un) 476.08 292.67 T
-0.18 (time, so modi\336cation of its r) 108 278.67 P
-0.18 (esults is permitted, because such changes do not alter) 243.18 278.67 P
(the pr) 108 264.67 T
(ogram itself. Note that, although the listener pr) 136.76 264.67 T
(esents all objects in literal-) 365.65 264.67 T
(constant syntax, not everything displayed by the listener is a literal constant.) 108 250.67 T
-0.22 (The squar) 135 236.67 P
-0.22 (e-bracket syntax is an abbr) 183.05 236.67 P
-0.22 (eviation for calling the generic function) 311.4 236.67 P
4 10 Q
(element) 108 222.67 T
1 11 Q
(. The following examples ar) 150 222.67 T
(e equivalent:) 284.68 222.67 T
6 9 Q
(?) 108 202 T
4 F
(*greeting*[0];) 118.8 202 T
6 F
(\325j\325) 108 191 T
(?) 108 172 T
4 F
(element\050*greeting*, 0\051;) 118.8 172 T
6 F
(\325j\325) 108 161 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "139" 153
%%Page: "140" 154
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(140) 72 677.67 T
0 F
(Chapter 11) 95.75 677.67 T
(Collections and Control Flow) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 117 522 648 R
V
1 11 Q
0 X
(Y) 108 640.67 T
(ou can use either the squar) 114.32 640.67 T
(e-bracket syntax or the) 244.5 640.67 T
4 10 Q
(element) 357.77 640.67 T
1 11 Q
( generic function on) 399.77 640.67 T
(any collection. Y) 108 626.67 T
(ou must be car) 187.23 626.67 T
(eful if you use) 258.6 626.67 T
4 10 Q
(element) 330.55 626.67 T
1 11 Q
( as a local variable, how-) 372.55 626.67 T
(ever) 108 612.67 T
(, because doing so will interfer) 128.28 612.67 T
(e with its use as a generic function, including) 276.86 612.67 T
(the use of the squar) 108 598.67 T
(e-bracket abbr) 202.85 598.67 T
(eviation.) 272.13 598.67 T
3 13 Q
(11.2.2  Creation of vector) 108 569.33 T
(s and access to elements) 234.65 569.33 T
1 11 Q
(Ther) 108 549.67 T
(e ar) 130.56 549.67 T
(e several ways to cr) 148.23 549.67 T
(eate collections. One way is to cr) 243.04 549.67 T
(eate a collection by) 400.81 549.67 T
(using) 108 535.67 T
4 10 Q
(make) 137.77 535.67 T
1 11 Q
(. For example, her) 161.77 535.67 T
(e we cr) 249.04 535.67 T
(eate a vector that contains two elements:) 283.28 535.67 T
6 9 Q
(?) 108 515 T
4 F
(define variable *my-vector* = make\050<vector>, size: 2\051;) 118.8 515 T
1 11 Q
(W) 108 494.67 T
(e can change the \336rst and second elements:) 117.99 494.67 T
6 9 Q
(?) 108 474 T
4 F
(*my-vector*[0] := 5;) 118.8 474 T
6 F
(5) 108 463 T
(?) 108 444 T
4 F
(*my-vector*[1] := 3;) 118.8 444 T
6 F
(3) 108 433 T
(?) 108 414 T
4 F
(*my-vector*;) 118.8 414 T
6 F
(#[5, 3]) 108 403 T
1 11 Q
(If you want to cr) 108 382.67 T
(eate a sequence of a certain size, with every element having the) 188.41 382.67 T
-0.27 (same value, you can specify a) 108 368.67 P
4 10 Q
-0.58 (fill) 253.07 368.67 P
1 11 Q
-0.27 ( keywor) 277.07 368.67 P
-0.27 (d ar) 316.38 368.67 P
-0.27 (gument to) 335.23 368.67 P
4 10 Q
-0.58 (make) 387.51 368.67 P
1 11 Q
-0.27 (. The default value) 411.51 368.67 P
(for the) 108 354.67 T
4 10 Q
(fill) 142.77 354.67 T
1 11 Q
( keywor) 166.77 354.67 T
(d parameter is) 206.35 354.67 T
4 10 Q
(#f) 279.32 354.67 T
1 11 Q
(. Thus, if you had r) 291.32 354.67 T
(ead an element of) 383.4 354.67 T
4 10 Q
(*my-) 472.17 354.67 T
(vector*) 108 340.67 T
1 11 Q
( befor) 150 340.67 T
(e you wr) 177.92 340.67 T
(ote numbers into it, you would have r) 220.76 340.67 T
(eceived) 404.74 340.67 T
4 10 Q
(#f) 444.32 340.67 T
1 11 Q
(.) 456.32 340.67 T
-0.22 (W) 135 326.67 P
-0.22 (e can cr) 144.99 326.67 P
-0.22 (eate and initialize a vector to dif) 181.14 326.67 P
-0.22 (fer) 335.64 326.67 P
-0.22 (ent values all at once by using a) 348.72 326.67 P
-0.23 (built-in constr) 108 312.67 P
-0.23 (uctor) 176.29 312.67 P
-0.23 (. A) 200.93 312.67 P
2 F
-0.23 (constructor) 217.28 312.67 P
1 F
-0.23 ( is a function that cr) 273.49 312.67 P
-0.23 (eates an instance; using it is) 368.35 312.67 P
-0.08 (a shorthand for calling) 108 298.67 P
4 10 Q
-0.17 (make) 220.74 298.67 P
1 11 Q
-0.08 (. Her) 244.74 298.67 P
-0.08 (e, we use the) 268.74 298.67 P
4 10 Q
-0.17 (vector) 333.72 298.67 P
1 11 Q
-0.08 ( constr) 369.72 298.67 P
-0.08 (uctor function to cr) 402.19 298.67 P
-0.08 (e-) 495.07 298.67 P
(ate a vector and to initialize it with data.) 108 284.67 T
6 9 Q
(?) 108 264 T
4 F
( define variable *my-vector* = vector\0505, 3\051;) 113.4 264 T
6 F
(?) 108 245 T
4 F
( *my-vector*;) 113.4 245 T
6 F
(#[5, 3]) 108 234 T
1 11 Q
(As we saw in Section 1) 108 213.67 T
(1.2.1, certain collections have a literal syntax that enables) 218.37 213.67 T
(you to specify a particular data str) 108 199.67 T
(uctur) 274.38 199.67 T
(e as part of the pr) 300.26 199.67 T
(ogram:) 385.17 199.67 T
6 9 Q
(?) 108 179 T
4 F
(define variable *my-vector* = #[5, 3];) 118.8 179 T
6 F
(?) 108 160 T
4 F
(*my-vector*;) 118.8 160 T
6 F
(#[5, 3]) 108 149 T
1 11 Q
(Figur) 108 128.67 T
(e 1) 134.21 128.67 T
(1.2 shows how you can pictur) 147.13 128.67 T
(e the vector that we just cr) 291.72 128.67 T
(eated.) 419.06 128.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "140" 154
%%Page: "141" 155
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.2 Basic use of collections) 410.44 677.67 T
2 F
(141) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Y) 108 555.25 T
(ou might think that) 114.32 555.25 T
4 10 Q
(*my-vector*) 211.76 555.25 T
1 11 Q
( is a dir) 277.76 555.25 T
(ect instance of) 313.45 555.25 T
4 10 Q
(<vector>) 385.01 555.25 T
1 11 Q
(, but it is not:) 433.01 555.25 T
(The) 108 541.25 T
4 10 Q
(<vector>) 129.16 541.25 T
1 11 Q
( class is abstract, but instantiable. When you use the) 177.16 541.25 T
4 10 Q
(vector) 431.64 541.25 T
1 11 Q
( func-) 467.64 541.25 T
(tion, or use) 108 527.25 T
4 10 Q
(make) 165.11 527.25 T
1 11 Q
( with) 189.11 527.25 T
4 10 Q
(<vector>) 216.98 527.25 T
1 11 Q
(, the r) 264.98 527.25 T
(esult is a general instance of) 292.63 527.25 T
4 10 Q
(<simple-) 431.53 527.25 T
(object-vector>) 108 513.25 T
1 11 Q
(. Y) 192 513.25 T
(ou specify the size of a) 203.82 513.25 T
4 10 Q
(<simple-object-vector>) 316.43 513.25 T
1 11 Q
( when you) 448.43 513.25 T
(cr) 108 499.25 T
(eate one, and you cannot change that size later) 117.03 499.25 T
(. If you need a vector that can) 342.61 499.25 T
-0.43 (change size, use the) 108 485.25 P
4 10 Q
-0.93 (<stretchy-vector>) 205.07 485.25 P
1 11 Q
-0.43 ( class. See Section 16.1.1, page 246, for an) 307.08 485.25 P
(example that uses str) 108 471.25 T
(etchy vectors.) 210.19 471.25 T
3 13 Q
(11.2.3  Creation of lists and access to elements) 108 439.91 T
1 11 Q
(Lists ar) 108 420.25 T
(e similar in purpose to vectors: Each one can stor) 143.23 420.25 T
(e an or) 380.5 420.25 T
(der) 413.33 420.25 T
(ed sequence of) 429.46 420.25 T
(objects. Lists dif) 108 406.25 T
(fer fr) 185.54 406.25 T
(om vectors in that it is easy to add and r) 209.38 406.25 T
(emove elements) 403.75 406.25 T
(fr) 108 392.25 T
(om lists, especially at the fr) 115.81 392.25 T
(ont. In general, if the number of elements in a) 247.41 392.25 T
(sequence will r) 108 378.25 T
(emain constant, lists ar) 180.97 378.25 T
(e less ef) 292.05 378.25 T
(\336cient than vectors ar) 329.35 378.25 T
(e.) 434.11 378.25 T
-0.31 (Each element of a list is stor) 135 364.25 P
-0.31 (ed in a) 267.92 364.25 P
2 F
-0.31 (pair) 302.33 364.25 P
1 F
-0.31 (. A pair has two parts \321 a head and a) 321.68 364.25 P
-0.19 (tail. T) 108 350.25 P
-0.19 (ypically) 134.55 350.25 P
-0.19 (, the head of a pair r) 172.16 350.25 P
-0.19 (efers to an element, and the tail r) 268.41 350.25 P
-0.19 (efers to the pair) 426.03 350.25 P
(that holds the next element of the list. Normally) 108 336.25 T
(, the \336nal tail of the list is the) 339.3 336.25 T
(empty list, r) 108 322.25 T
(epr) 166.34 322.25 T
(esented by) 182.37 322.25 T
4 10 Q
(#\050\051) 237.25 322.25 T
1 11 Q
(. Elements of lists can be any kind of object, includ-) 255.25 322.25 T
(ing, of course, lists.) 108 308.25 T
(The) 135 294.25 T
4 10 Q
(list) 156.16 294.25 T
1 11 Q
( constr) 180.16 294.25 T
(uctor function cr) 212.71 294.25 T
(eates a list whose elements ar) 293.48 294.25 T
(e the ar) 436.2 294.25 T
(gu-) 471.87 294.25 T
(ments pr) 108 280.25 T
(ovided:) 151.14 280.25 T
6 9 Q
(?) 108 259.58 T
4 F
( list\0504, 5, 6\051;) 113.4 259.58 T
6 F
(#\0504, 5, 6\051) 108 248.58 T
1 11 Q
(Figur) 108 228.25 T
(e 1) 134.21 228.25 T
(1.3 is a diagram of the list that we just cr) 147.13 228.25 T
(eated.) 342.42 228.25 T
(W) 135 214.25 T
(e can cr) 144.99 214.25 T
(eate a similar list by using the) 181.57 214.25 T
4 10 Q
(pair) 328.9 214.25 T
1 11 Q
( function, which cr) 352.9 214.25 T
(eates one) 443.77 214.25 T
(pair of the list at a time:) 108 200.25 T
6 9 Q
(?) 108 179.58 T
4 F
(pair\0504, pair\0505, pair\0506, #\050\051\051\051\051;) 118.8 179.58 T
6 F
(#\0504, 5, 6\051) 108 168.58 T
1 11 Q
-0.18 (As you can see, using) 108 148.25 P
4 10 Q
-0.4 (list) 214.58 148.25 P
1 11 Q
-0.18 ( instead of) 238.58 148.25 P
4 10 Q
-0.4 (pair) 291.3 148.25 P
1 11 Q
-0.18 (, in this case, is much clear) 314.48 148.25 P
-0.18 (er) 441.67 148.25 P
-0.18 (. Note that) 450.47 148.25 P
(Dylan pr) 108 134.25 T
(ovides functions called) 151.24 134.25 T
4 10 Q
(head) 265.78 134.25 T
1 11 Q
( and) 289.78 134.25 T
4 10 Q
(tail) 313.91 134.25 T
1 11 Q
(, which operate on lists:) 337.91 134.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 574.58 504 582.57 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 11.2) 196.47 585.91 T
8 F
(Diag) 254.83 585.91 T
(r) 275.29 585.91 T
(am of the v) 278.52 585.91 T
(ector) 327.74 585.91 T
4 F
(#[5, 3]) 352.75 585.91 T
8 F
(.) 394.75 585.91 T
0 0 0 1 0 0 0 K
108 598.57 504 648 C
262.5 602.57 349.5 646 C
0 264 387 339 417 75 30 268.5 610.71 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f11-2.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f11-2 .eps)%%CreationDate: (6/5/96) (10:42 AM)%%BoundingBox: 264 387 339 417%%HiResBoundingBox: 265.0833 387.75 338.3333 416.9167%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 305.5 396 305.5 396%AI3_TileBox: 31 31 583 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: 209.5 468 4 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014.5 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014.5 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014.5 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A1 Ap0 R0 G800 Ar0 J 0 j 0.5 w 4 M []0 d%AI3_Note:0 D301.6667 388 m301.6667 416.6667 L265.3333 416.6667 L265.3333 388 L301.6667 388 Ls338.0833 388 m338.0833 416.6667 L301.75 416.6667 L301.75 388 L338.0833 388 Ls0 To1 0 0 1 284 400.5 0 TpTP-2.6993 0 Td0 Tr0 O0 g1 w/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(5) Tx (\r) TX TO0 To1 0 0 1 320 400.5 0 TpTP-2.6993 0 Td0 Tr(3) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 598.57 504 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "141" 155
%%Page: "142" 156
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(142) 72 677.67 T
0 F
(Chapter 11) 95.75 677.67 T
(Collections and Control Flow) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
6 9 Q
0 X
(?) 108 515.72 T
4 F
(head\050#\0504, 5, 6\051\051;) 118.8 515.72 T
6 F
(4) 108 504.72 T
(?) 108 485.72 T
4 F
(tail\050#\0504, 5, 6\051\051;) 118.8 485.72 T
6 F
(#\0505, 6\051) 108 474.72 T
(?) 108 455.72 T
4 F
( tail\050tail\050#\0504, 5, 6\051\051\051;) 113.4 455.72 T
6 F
(#\0506\051) 108 444.72 T
1 11 Q
(A r) 108 418.39 T
(efer) 123.46 418.39 T
(ence to the \336rst pair of a list is exactly the same as a r) 141.8 418.39 T
(efer) 398.02 418.39 T
(ence to the entir) 416.36 418.39 T
(e) 493.89 418.39 T
(list.) 108 404.39 T
-0.22 (W) 135 390.39 P
-0.22 (e use) 144.99 390.39 P
4 10 Q
-0.48 (head) 171.88 390.39 P
1 11 Q
-0.22 ( and) 195.88 390.39 P
4 10 Q
-0.48 (tail) 219.57 390.39 P
1 11 Q
-0.22 ( when we de\336ne a method for copying lists in Section) 243.57 390.39 P
(1) 108 376.39 T
(1.3.3. W) 112.89 376.39 T
(e use) 150.38 376.39 T
4 10 Q
(pair) 177.72 376.39 T
1 11 Q
( in a method that copies lists r) 201.72 376.39 T
(ecursively in Section 1) 346.94 376.39 T
(1.3.6.) 454.61 376.39 T
3 15 Q
(11.3  Iteration o) 108 336.72 T
(ver a sequence) 198.01 336.72 T
1 11 Q
(In the examples in Sections 1) 108 316.39 T
(1.3.1 thr) 247.3 316.39 T
(ough 1) 286.19 316.39 T
(1.3.9, we show how to pr) 318.99 316.39 T
(ocess each) 440.11 316.39 T
(element of a sequence using dif) 108 302.39 T
(fer) 260.58 302.39 T
(ent techniques.) 273.66 302.39 T
3 13 Q
(11.3.1  Building our o) 108 271.06 T
(wn) 215.68 271.06 T
4 12 Q
(copy-sequence) 233.45 271.06 T
1 11 Q
-0.12 (How would we write our own) 108 251.39 P
4 10 Q
-0.27 (copy-sequence) 258.4 251.39 P
1 11 Q
-0.12 ( function, if Dylan did not alr) 336.4 251.39 P
-0.12 (eady) 477.77 251.39 P
(pr) 108 237.39 T
(ovide one? Ther) 118.76 237.39 T
(e ar) 196.79 237.39 T
(e many possible appr) 214.46 237.39 T
(oaches. One way would be to use a) 318.28 237.39 T
4 10 Q
-0.29 (while) 108 223.39 P
1 11 Q
-0.13 ( loop. A) 138 223.39 P
4 10 Q
-0.29 (while) 178.99 223.39 P
1 11 Q
-0.13 ( loop has a) 208.99 223.39 P
2 F
-0.13 (test expression) 263.35 223.39 P
1 F
-0.13 ( \050surr) 337.44 223.39 P
-0.13 (ounded by par) 363.51 223.39 P
-0.13 (entheses\051 and) 434.95 223.39 P
(a) 108 209.39 T
2 F
(body) 116.25 209.39 T
1 F
(. As long as the value of the test expr) 140.7 209.39 T
(ession is tr) 319.12 209.39 T
(ue, the body will be exe-) 370.54 209.39 T
(cuted r) 108 195.39 T
(epeatedly) 141.99 195.39 T
(.) 188.31 195.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 544.72 504 552.71 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 11.3) 194.85 556.05 T
8 F
(Diag) 253.21 556.05 T
(r) 273.67 556.05 T
(am of the list) 276.9 556.05 T
4 F
(#\0504, 5, 6\051) 336.37 556.05 T
8 F
(.) 396.37 556.05 T
0 0 0 1 0 0 0 K
108 568.71 504 648 C
167.5 572.71 444.5 646 C
0 180 454 445 516 265 62 173.5 578 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f11-3.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f11-3 .eps)%%CreationDate: (6/5/96) (10:42 AM)%%BoundingBox: 180 454 445 516%%HiResBoundingBox: 180.75 454.1667 444.25 516.1237%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 306 396.5 306 396.5%AI3_TileBox: 31 31 583 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: 102 672.5 2 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014 4716.5 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014 4716.5 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014 4716.5 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 Au1 Ap0 R0 G800 Ar0 J 0 j 0.5 w 4 M []0 d%AI3_Note:0 D221.6667 474.5 m221.6667 502.5 L186 502.5 L186 474.5 L221.6667 474.5 Ls257.5 474.5 m257.5 502.5 L221.8334 502.5 L221.8334 474.5 L257.5 474.5 LsU312.0833 474.5 m312.0833 502.5 L276.4167 502.5 L276.4167 474.5 L312.0833 474.5 Ls347.6667 474.5 m347.6667 502.5 L312 502.5 L312 474.5 L347.6667 474.5 Ls402.5 474.5 m402.5 502.5 L366.8333 502.5 L366.8333 474.5 L402.5 474.5 Ls438.0833 474.5 m438.0833 502.5 L402.4166 502.5 L402.4166 474.5 L438.0833 474.5 Ls0 To1 0 0 1 204.25 508.9167 0 TpTP-10.7974 0 Td0 Tr0 O0 g1 w/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(Head) Tx (\r) TX TO0 To1 0 0 1 240 508.9167 0 TpTP-10.7974 0 Td0 Tr(Tail) Tx (\r) TX TO0 To1 0 0 1 293.75 508.9167 0 TpTP-10.7974 0 Td0 Tr(Head) Tx (\r) TX TO0 To1 0 0 1 329.5 508.9167 0 TpTP-10.7974 0 Td0 Tr(Tail) Tx (\r) TX TO0 To1 0 0 1 383.25 508.9167 0 TpTP-10.7974 0 Td0 Tr(Head) Tx (\r) TX TO0 To1 0 0 1 419 508.9167 0 TpTP-10.7974 0 Td0 Tr(Tail) Tx (\r) TX TO0 To1 0 0 1 385 486.9167 0 TpTP-2.6993 0 Td0 Tr(6) Tx (\r) TX TO0 To1 0 0 1 420.5 486.9167 0 TpTP-8.098 0 Td0 Tr(#\(\)) Tx (\r) TX TO0 To1 0 0 1 294.75 486.9167 0 TpTP-2.6993 0 Td0 Tr(5) Tx (\r) TX TO0 To1 0 0 1 204.5 486.9167 0 TpTP-2.6993 0 Td0 Tr(4) Tx (\r) TX TO0 To1 0 0 1 222.25 456.4167 0 TpTP-10.7974 0 Td0 Tr(Pair) Tx (\r) TX TO0 To1 0 0 1 312.25 456.4167 0 TpTP-10.7974 0 Td0 Tr(Pair) Tx (\r) TX TO0 To1 0 0 1 402.25 456.4167 0 TpTP-10.7974 0 Td0 Tr(Pair) Tx (\r) TX TO0 Ap0 R0 G0.5 w444 476.1667 m444 466.4167 l362 466.4167 l362 476.1667 lS353.5 476.1667 m353.5 466.4167 l271.5 466.4167 l271.5 476.1667 lS263 476.1667 m263 466.4167 l181 466.4167 l181 476.1667 lSu0.65 w239.6667 488.5 m267.75 488.5 lS0 O0 g1 w267.2043 486.2621 m275.6601 488.5275 l267.2043 490.7934 l267.2043 486.2621 lfUu0 R0 G0.65 w329.9167 488.5 m358 488.5 lS0 O0 g1 w357.4543 486.2621 m365.9101 488.5275 l357.4543 490.7934 l357.4543 486.2621 lfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 568.71 504 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "142" 156
%%Page: "143" 157
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.3 Iteration over a sequence) 402.7 677.67 T
2 F
(143) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define method my-copy-sequence) 108 642 T
(\050old-sequence :: <sequence>\051 => \050new-sequence :: <sequence>\051) 129.6 631 T
(let seq-size = old-sequence.size;) 118.8 620 T
(let new-sequence = make\050type-for-copy\050old-sequence\051, size: seq-size\051;) 118.8 609 T
(let index = 0;) 118.8 598 T
(while \050index < seq-size\051) 118.8 587 T
(new-sequence[index] := old-sequence[index];) 129.6 576 T
(index := index + 1;) 129.6 565 T
(end while;) 118.8 554 T
(new-sequence;) 118.8 543 T
(end method my-copy-sequence;) 108 532 T
1 11 Q
(The method) 108 511.67 T
4 10 Q
(my-copy-sequence) 169.61 511.67 T
1 11 Q
( makes a new sequence of the same size as its) 265.61 511.67 T
(ar) 108 497.67 T
(gument, then iterates over all the elements of the ar) 117.65 497.67 T
(gument, storing each ele-) 366.89 497.67 T
-0.21 (ment of the sequence into the appr) 108 483.67 P
-0.21 (opriate element of the new sequence. The) 274.99 483.67 P
4 10 Q
-0.46 (size) 477.46 483.67 P
1 11 Q
(generic function r) 108 469.67 T
(eturns the number of elements in a collection. In this example,) 193.91 469.67 T
(the) 108 455.67 T
4 10 Q
(while) 126.01 455.67 T
1 11 Q
( loop terminates when) 156.01 455.67 T
4 10 Q
(index) 267.61 455.67 T
1 11 Q
( r) 297.61 455.67 T
(eaches the size of the sequence.) 304.51 455.67 T
(The) 135 441.67 T
4 10 Q
(type-for-copy) 156.16 441.67 T
1 11 Q
( generic function r) 234.16 441.67 T
(eturns an appr) 322.82 441.67 T
(opriate class for) 393.99 441.67 T
4 10 Q
(make) 473.69 441.67 T
1 11 Q
(,) 497.69 441.67 T
(given an object that you wish to copy) 108 427.67 T
(. For most collections,) 288.02 427.67 T
4 10 Q
(type-for-copy) 396.26 427.67 T
1 11 Q
( just) 474.26 427.67 T
(r) 108 413.67 T
(eturns the class of the collection pr) 112.15 413.67 T
(ovided.) 280.04 413.67 T
3 13 Q
(11.3.2  Iteration with) 108 382.33 T
4 12 Q
(for) 212.87 382.33 T
1 11 Q
(W) 108 362.67 T
(e can use the) 117.99 362.67 T
4 10 Q
(for) 182.87 362.67 T
1 11 Q
( to expr) 200.87 362.67 T
(ess concisely ia loop that incr) 237.66 362.67 T
(ements a variable until a) 378.87 362.67 T
(limit is r) 108 348.67 T
(eached.) 148.41 348.67 T
4 9 Q
(define method my-copy-sequence) 108 328 T
(\050old-sequence :: <sequence>\051 => \050new-sequence :: <sequence>\051) 129.6 317 T
(let new-sequence) 118.8 306 T
(= make\050type-for-copy\050old-sequence\051, size: old-sequence.size\051;) 129.6 295 T
(for \050index from 0 below old-sequence.size\051) 118.8 284 T
5 F
(// Iteration clause) 415.8 284 T
4 F
(new-sequence[index] := old-sequence[index];) 129.6 273 T
5 F
(// Body) 415.8 273 T
4 F
(end for;) 118.8 262 T
5 F
(// End of body) 415.8 262 T
4 F
(new-sequence;) 118.8 251 T
(end method my-copy-sequence;) 108 240 T
1 11 Q
(In the pr) 108 219.67 T
(eceding example, the body is executed) 149.62 219.67 T
4 10 Q
(old-sequence.size) 339.33 219.67 T
1 11 Q
( times, with) 441.33 219.67 T
4 10 Q
(index) 108 205.67 T
1 11 Q
( bound to zer) 138 205.67 T
(o \336rst, then r) 202.6 205.67 T
(ebound to one mor) 264.67 205.67 T
(e than the pr) 357.16 205.67 T
(evious value of) 418.59 205.67 T
4 10 Q
(index) 108 191.67 T
1 11 Q
( each time thr) 138 191.67 T
(ough the loop. The variable) 204.21 191.67 T
4 10 Q
(index) 340.67 191.67 T
1 11 Q
( is de\336ned only within the) 370.67 191.67 T
-0.22 (body of the) 108 177.67 P
4 10 Q
-0.48 (for) 165.44 177.67 P
1 11 Q
-0.22 ( iteration constr) 183.44 177.67 P
-0.22 (uct. The body of the) 259.39 177.67 P
4 10 Q
-0.48 (for) 358.15 177.67 P
1 11 Q
-0.22 ( iteration constr) 376.15 177.67 P
-0.22 (uct begins) 452.1 177.67 P
(after the iteration clause\050s\051, and \336nishes with the matching) 108 163.67 T
4 10 Q
(end) 395.66 163.67 T
1 11 Q
(. For the) 413.66 163.67 T
4 10 Q
(while) 456.39 163.67 T
1 11 Q
-0.06 (iteration constr) 108 149.67 P
-0.06 (uct shown in Section 1) 181.59 149.67 P
-0.06 (1.3.1, the body starts after the pr) 289.74 149.67 P
-0.06 (edicate and) 445.56 149.67 P
(\336nishes with the matching) 108 135.67 T
4 10 Q
(end) 239.68 135.67 T
1 11 Q
(.) 257.68 135.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "143" 157
%%Page: "144" 158
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(144) 72 677.67 T
0 F
(Chapter 11) 95.75 677.67 T
(Collections and Control Flow) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(The) 135 640.67 T
4 10 Q
(for) 156.16 640.67 T
1 11 Q
( loop can have many dif) 174.16 640.67 T
(fer) 291.03 640.67 T
(ent kinds of iteration clauses. In this sec-) 304.11 640.67 T
-0.14 (tion, we have shown a simple iteration over a series of numbers. In Section 1) 108 626.67 P
-0.14 (1.3.3,) 476.64 626.67 P
(we use clauses that bind variables to initial values for the \336rst time thr) 108 612.67 T
(ough a) 448.82 612.67 T
(loop, and use expr) 108 598.67 T
(essions to r) 197.72 598.67 T
(ebind the variables for the second and subsequent) 251.82 598.67 T
(times thr) 108 584.67 T
(ough the loop. W) 151.32 584.67 T
(e also demonstrate a clause that permits iteration to) 234.54 584.67 T
-0.23 (continue until an expr) 108 570.67 P
-0.23 (ession is tr) 214.56 570.67 P
-0.23 (ue, both in Section 1) 265.51 570.67 P
-0.23 (1.3.3 and Section 16.1.3, page) 361.92 570.67 P
(248.) 108 556.67 T
(The) 135 542.67 T
4 10 Q
(for) 156.16 542.67 T
1 11 Q
( loop has a simple type of iteration clause that we can use to iterate) 174.16 542.67 T
(over any Dylan collection. The airport example in Section 17.2.2, page 257, dem-) 108 528.67 T
(onstrates iteration over vectors using this kind of iteration clause.) 108 514.67 T
3 13 Q
(11.3.3  Lists and ef\336cienc) 108 480.33 T
(y) 236.49 480.33 T
1 11 Q
(The) 108 454.67 T
4 10 Q
(my-copy-sequence) 129.16 454.67 T
1 11 Q
( method in Section 1) 225.16 454.67 T
(1.3.2 works ef) 323.48 454.67 T
(\336ciently for vectors. It) 390.02 454.67 T
(does so because Dylan can stor) 108 440.67 T
(e and r) 258.3 440.67 T
(etrieve arbitrary elements of vectors, and) 291.84 440.67 T
(can determine the size of vectors in constant time.) 108 426.67 T
(Lists ar) 135 412.67 T
(e quite a dif) 170.23 412.67 T
(fer) 227.49 412.67 T
(ent data str) 240.57 412.67 T
(uctur) 295.14 412.67 T
(e fr) 321.02 412.67 T
(om vectors. Accessing elements) 336.85 412.67 T
(and determining the size of a list takes linear time. Thus, you can access the thou-) 108 398.67 T
-0.1 (sandth element of a vector or string in the same amount of time as you can access) 108 384.67 P
-0.11 (the \336rst element of a vector or string; when you uses lists, however) 108 370.67 P
-0.11 (, it takes about) 430.96 370.67 P
(1000 times longer to access the thousandth element than to access the \336rst ele-) 108 356.67 T
-0.2 (ment. The dif) 108 342.67 P
-0.2 (fer) 172.62 342.67 P
-0.2 (ence in access times occurs because Dylan must walk over almost) 185.7 342.67 P
-0.33 (1000 pairs to get to the thousandth pair) 108 328.67 P
-0.33 (, and thus get to the thousandth element of) 295.44 328.67 P
(the list. Although the method de\336ned in Section 1) 108 314.67 T
(1.3.2 can copy lists, it will be) 349.17 314.67 T
(excessively slow) 108 300.67 T
(, especially for long lists.) 187.21 300.67 T
-0.33 (W) 135 286.67 P
-0.33 (e would like to pr) 144.99 286.67 P
-0.33 (ovide a special method for copying lists that uses a mor) 229.82 286.67 P
-0.33 (e) 496.31 286.67 P
(ef) 108 272.67 T
(\336cient algorithm. In particular) 116.73 272.67 T
(, we want to walk over the pr) 262.9 272.67 T
(ovided list element) 405.44 272.67 T
(by element, without having to r) 108 258.67 T
(etrace over elements of the list that we have) 261.57 258.67 T
(alr) 108 244.67 T
(eady copied.) 120.85 244.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "144" 158
%%Page: "145" 159
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.3 Iteration over a sequence) 402.7 677.67 T
2 F
(145) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
5 9 Q
0 X
(// Assumes that old-list is a proper list \050that is, it ends with #\050\051\051) 108 642 T
(// and is not circular) 108 631 T
4 F
(define method my-copy-sequence \050old-list :: <list>\051 => \050new-list :: <list>\051) 108 620 T
(let new-list = make\050<list>, size: old-list.size\051;) 118.8 609 T
(for \050old = old-list then old.tail,) 118.8 598 T
(new = new-list then new.tail,) 145.8 587 T
(until: empty?\050old\051\051) 145.8 576 T
(new.head := old.head;) 129.6 565 T
(end for;) 118.8 554 T
(new-list;) 118.8 543 T
(end method my-copy-sequence;) 108 532 T
1 11 Q
(First,) 108 511.67 T
4 10 Q
(my-copy-sequence) 135.41 511.67 T
1 11 Q
( makes a new list that is the same length as the old one.) 231.41 511.67 T
(Next, the) 108 497.67 T
4 10 Q
(for) 155.18 497.67 T
1 11 Q
( iterator is used to bind the variables) 173.18 497.67 T
4 10 Q
(old) 353.4 497.67 T
1 11 Q
( and) 371.4 497.67 T
4 10 Q
(new) 395.53 497.67 T
1 11 Q
( to) 413.53 497.67 T
4 10 Q
(old-list) 428.62 497.67 T
1 11 Q
( and) 476.62 497.67 T
4 10 Q
(new-list) 108 483.67 T
1 11 Q
(, r) 156 483.67 T
(espectively) 165.65 483.67 T
(. Then, the) 218.71 483.67 T
4 10 Q
(for) 272.53 483.67 T
1 11 Q
( iterator executes the) 290.53 483.67 T
4 10 Q
(until:) 393.88 483.67 T
1 11 Q
( expr) 429.88 483.67 T
(ession to) 454.33 483.67 T
(determine whether it is time to terminate the loop. If the) 108 469.67 T
4 10 Q
(until:) 383.81 469.67 T
1 11 Q
( expr) 419.81 469.67 T
(ession) 444.27 469.67 T
(r) 108 455.67 T
(eturns tr) 112.15 455.67 T
(ue, then the) 153.64 455.67 T
4 10 Q
(for) 213.46 455.67 T
1 11 Q
( loop terminates, and the newly cr) 231.46 455.67 T
(eated list is r) 397.14 455.67 T
(eturned) 458.4 455.67 T
(fr) 108 441.67 T
(om) 115.81 441.67 T
4 10 Q
(my-copy-sequence) 134.28 441.67 T
1 11 Q
(. Otherwise, the body of the) 230.28 441.67 T
4 10 Q
(for) 367.94 441.67 T
1 11 Q
( loop is executed \321 the) 385.94 441.67 T
(body stor) 108 427.67 T
(es the head of the \336rst pair in) 154.08 427.67 T
4 10 Q
(old) 298.6 427.67 T
1 11 Q
( into the head of the \336rst pair in) 316.6 427.67 T
4 10 Q
(new) 473.13 427.67 T
1 11 Q
(.) 490.11 427.67 T
-0.03 (The r) 108 413.67 P
-0.03 (esult of that action is that the \336rst element of) 133.28 413.67 P
4 10 Q
-0.07 (new) 351.96 413.67 P
1 11 Q
-0.03 ( is indentical to the \336rst ele-) 369.96 413.67 P
(ment of) 108 399.67 T
4 10 Q
(old) 148.14 399.67 T
1 11 Q
(. For this iteration, that action causes the \336rst element of) 166.14 399.67 T
4 10 Q
(new-list) 440.46 399.67 T
1 11 Q
( to) 488.46 399.67 T
(be identical to the \336rst element of) 108 385.67 T
4 10 Q
(old-list) 273.04 385.67 T
1 11 Q
(. In subsequent iterations, the body) 321.04 385.67 T
(will access elements 1 closer to the end of the list. It will do so because, after the) 108 371.67 T
(body is executed, the) 108 357.67 T
4 10 Q
(for) 213.1 357.67 T
1 11 Q
( iterator loops back to the iterator clauses, wher) 231.1 357.67 T
(e the) 461.26 357.67 T
4 10 Q
(then) 108 343.67 T
1 11 Q
( clauses bind) 132 343.67 T
4 10 Q
(old) 197.47 343.67 T
1 11 Q
( to all but the \336rst pair of) 215.47 343.67 T
4 10 Q
(old) 339.1 343.67 T
1 11 Q
(, and bind) 357.1 343.67 T
4 10 Q
(new) 409.13 343.67 T
1 11 Q
( to all but the) 427.13 343.67 T
-0.32 (\336rst pair of) 108 329.67 P
4 10 Q
-0.7 (new) 163.87 329.67 P
1 11 Q
-0.32 (. The termination check occurs again, with the same consequences,) 180.86 329.67 P
(depending on the value of the) 108 315.67 T
4 10 Q
(until:) 256.62 315.67 T
1 11 Q
( expr) 292.62 315.67 T
(ession. Iteration then continues just) 317.07 315.67 T
(like the second time thr) 108 301.67 T
(ough the loop until the end of) 221.89 301.67 T
4 10 Q
(old) 369.72 301.67 T
1 11 Q
( is r) 387.72 301.67 T
(eached.) 405.23 301.67 T
(In this method, we never have to sear) 135 287.67 T
(ch for the curr) 317.16 287.67 T
(ent spot of the old list) 385.98 287.67 T
(that we ar) 108 273.67 T
(e copying, or to sear) 156.66 273.67 T
(ch for the end of the new list that we ar) 254.54 273.67 T
(e building.) 444.58 273.67 T
-0.14 (The variables) 108 259.67 P
4 10 Q
-0.31 (old) 175.61 259.67 P
1 11 Q
-0.14 ( and) 193.61 259.67 P
4 10 Q
-0.31 (new) 217.46 259.67 P
1 11 Q
-0.14 ( track exactly which pairs in the iteration to access, and) 235.46 259.67 P
(that tracking saves a considerable amount of time for lar) 108 245.67 T
(ge lists. When the itera-) 381.47 245.67 T
(tion is \336nished,) 108 231.67 T
4 10 Q
(my-copy-sequence) 185.37 231.67 T
1 11 Q
( r) 281.37 231.67 T
(eturns the new list.) 288.27 231.67 T
3 13 Q
(11.3.4  P) 108 200.33 T
(ol) 150.26 200.33 T
(ymorphism) 159.6 200.33 T
1 11 Q
(An important advantage of pr) 108 180.67 T
(ogramming in Dylan is that we can pr) 254.15 180.67 T
(ovide a gen-) 438.77 180.67 T
-0.12 (eral method for copying a sequence \050as shown in Section 1) 108 166.67 P
-0.12 (1.3.2\051, and also can pr) 389.85 166.67 P
-0.12 (o-) 494.33 166.67 P
-0.04 (vide special copying methods for particular subclasses of sequences \050as shown in) 108 152.67 P
(Section 1) 108 138.67 T
(1.3.3\051. Method dispatch takes car) 150.77 138.67 T
(e of picking the best method for the) 309.81 138.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "145" 159
%%Page: "146" 160
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(146) 72 677.67 T
0 F
(Chapter 11) 95.75 677.67 T
(Collections and Control Flow) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(ar) 108 640.67 T
(gument. Callers of) 117.65 640.67 T
4 10 Q
(my-copy-sequence) 210.01 640.67 T
1 11 Q
( do not need to worry about any perfor-) 306.01 640.67 T
(mance optimizations that we have installed for lists. They simply use) 108 626.67 T
4 10 Q
(my-copy-) 446.52 626.67 T
-0.52 (sequence) 108 612.67 P
1 11 Q
-0.24 ( for lists, just as they would for any other sequence. This polymorphism) 156 612.67 P
(can be useful for keeping interfaces between components of a pr) 108 598.67 T
(ogram simple) 420 598.67 T
(and extensible.) 108 584.67 T
3 13 Q
(11.3.5  Mapping functions) 108 553.33 T
1 11 Q
(Iterating over all the elements of a collection is a common idiom, and Dylan pr) 108 533.67 T
(o-) 489.18 533.67 T
(vides several dif) 108 519.67 T
(fer) 187.42 519.67 T
(ent mapping functions that accomplish these kinds of itera-) 200.5 519.67 T
(tions in dif) 108 505.67 T
(fer) 160.35 505.67 T
(ent ways. In the following example, we r) 173.43 505.67 T
(ede\336ne the) 371.05 505.67 T
4 10 Q
(my-copy-) 427.4 505.67 T
(sequence) 108 491.67 T
1 11 Q
( method originally de\336ned in Section 1) 156 491.67 T
(1.3.3. Her) 344.14 491.67 T
(e, we use the) 390.21 491.67 T
4 10 Q
(do) 455.5 491.67 T
1 11 Q
( itera-) 467.5 491.67 T
(tion constr) 108 477.67 T
(uct, instead of a) 159.74 477.67 T
4 10 Q
(for) 239.11 477.67 T
1 11 Q
( loop.) 257.11 477.67 T
5 9 Q
(// Assumes that old-list is a proper list \050that is, it ends with #\050\051\051) 108 457 T
(// and is not circular) 108 446 T
4 F
(define method my-copy-sequence \050old-list :: <list>\051 => \050new-list :: <list>\051) 108 435 T
(let new-list = make\050<list>, size: old-list.size\051;) 118.8 424 T
5 F
(// Remember the pair of the copy that we are initializing) 118.8 413 T
4 F
(let current-pair = new-list;) 118.8 402 T
5 F
(// Iterate over all the elements of the existing list, making new pairs,) 129.6 391 T
(// and splicing them into the end of the copy that we are building) 129.6 380 T
4 F
(do\050method \050old-element\051) 118.8 369 T
(current-pair.head := old-element;) 145.8 358 T
(current-pair := current-pair.tail;) 145.8 347 T
(end method,) 135 336 T
(old-list\051;) 135 325 T
(new-list;) 118.8 314 T
(end method my-copy-sequence;) 108 303 T
1 11 Q
(The) 108 282.67 T
4 10 Q
(do) 129.16 282.67 T
1 11 Q
( mapping function takes a function and one or mor) 141.16 282.67 T
(e collections, and calls) 388.77 282.67 T
(the function on each element of each collection. The function should take one) 108 268.67 T
(ar) 108 254.67 T
(gument if you pr) 117.65 254.67 T
(ovide) 199.99 254.67 T
4 10 Q
(do) 230.15 254.67 T
1 11 Q
( with one collection, two ar) 242.15 254.67 T
(guments if you pr) 373.75 254.67 T
(ovide) 460.76 254.67 T
(two collections, and so on. The r) 108 240.67 T
(esult of calling the function is ignor) 264.33 240.67 T
(ed, and) 436.13 240.67 T
4 10 Q
(do) 474.99 240.67 T
1 11 Q
(itself r) 108 226.67 T
(eturns no meaningful value. The) 138.48 226.67 T
4 10 Q
(do) 299.62 226.67 T
1 11 Q
( function is useful only if the method) 311.62 226.67 T
(that you pr) 108 212.67 T
(ovide accomplishes a valuable side ef) 162.09 212.67 T
(fect. In the pr) 343.94 212.67 T
(eceding example,) 408.46 212.67 T
(the supplied method stor) 108 198.67 T
(es an element of the old list into the head of the curr) 230.52 198.67 T
(ent) 482.85 198.67 T
(pair of the new list, and moves to the next pair of the new list. Note that this) 108 184.67 T
(method is actually a closur) 108 170.67 T
(e, which closes over the) 238.22 170.67 T
4 10 Q
(current-pair) 355.83 170.67 T
1 11 Q
( local variable.) 427.83 170.67 T
(See Section 12.3.6, page 183, for mor) 108 156.67 T
(e information about closur) 282.81 156.67 T
(es.) 411.7 156.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "146" 160
%%Page: "147" 161
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.3 Iteration over a sequence) 402.7 677.67 T
2 F
(147) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(11.3.6  A recur) 108 639.33 T
(sive list copier) 180.75 639.33 T
1 11 Q
(In many situations, the most concise way to manipulate lists \050and other tr) 108 619.67 T
(eelike) 464.51 619.67 T
(str) 108 605.67 T
(uctur) 120.51 605.67 T
(es\051 is to use r) 146.39 605.67 T
(ecursion. In) 209.16 605.67 T
2 F
(recursion) 268.92 605.67 T
1 F
(, a function calls itself, dir) 315.97 605.67 T
(ectly or indi-) 440.6 605.67 T
(r) 108 591.67 T
(ectly) 112.15 591.67 T
(. In the following example, we r) 133.98 591.67 T
(ede\336ne the) 288.15 591.67 T
4 10 Q
(my-copy-sequence) 344.49 591.67 T
1 11 Q
( method for) 440.49 591.67 T
(lists to use r) 108 577.67 T
(ecursion instead of iteration.) 165.87 577.67 T
4 9 Q
(define method my-copy-sequence \050old-list :: <list>\051 => \050new-list :: <list>\051) 108 557 T
(if \050empty?\050old-list\051\051) 118.8 546 T
(#\050\051;) 129.6 535 T
(else) 118.8 524 T
(pair\050old-list.head, my-copy-sequence\050old-list.tail\051\051;) 129.6 513 T
(end if;) 118.8 502 T
(end method my-copy-sequence;) 108 491 T
1 11 Q
(Note that r) 108 470.67 T
(ecursion can be just as ef) 160.72 470.67 T
(\336cient as iteration. For example, consider the) 280.37 470.67 T
(function) 108 456.67 T
4 10 Q
(my-reverse) 151.53 456.67 T
1 11 Q
(, which cr) 211.53 456.67 T
(eates a new list with elements in the r) 258.87 456.67 T
(everse or) 440.9 456.67 T
(der) 484.83 456.67 T
(fr) 108 442.67 T
(om the list you supply) 115.81 442.67 T
(.) 223.81 442.67 T
4 9 Q
(define method my-reverse \050old-list :: <list>\051 => \050reversed-list :: <list>\051) 108 422 T
(local method rev \050old :: <list>, results :: <list>\051) 118.8 411 T
(if \050empty?\050old\051\051 results else rev\050old.tail, pair\050old.head, results\051\051 end;) 129.6 400 T
(end method;) 118.8 389 T
(rev\050old-list, #\050\051\051;) 118.8 378 T
(end method my-reverse;) 108 367 T
1 11 Q
(The) 108 346.67 T
4 10 Q
(local) 129.16 346.67 T
(method) 161.91 346.67 T
1 11 Q
( declaration inside the) 197.91 346.67 T
4 10 Q
(my-reverse) 308.24 346.67 T
1 11 Q
( method de\336nes a function) 368.24 346.67 T
(that is bound to the name) 108 332.67 T
4 10 Q
(rev) 235.02 332.67 T
1 11 Q
( only within a scope of the body of) 253.02 332.67 T
4 10 Q
(my-reverse) 423.91 332.67 T
1 11 Q
(.) 483.91 332.67 T
-0.13 (This declaration is dif) 108 318.67 P
-0.13 (fer) 212.73 318.67 P
-0.13 (ent fr) 225.81 318.67 P
-0.13 (om) 251.49 318.67 P
4 10 Q
-0.29 (define) 269.83 318.67 P
-0.29 (method) 308.45 318.67 P
1 11 Q
-0.13 (, which cr) 344.45 318.67 P
-0.13 (eates module bindings) 391.53 318.67 P
(that can be accessed outside the lexical scope of wher) 108 304.67 T
(e they ar) 366.18 304.67 T
(e de\336ned.) 407.97 304.67 T
(The local method) 135 290.67 T
4 10 Q
(rev) 222.15 290.67 T
1 11 Q
( calls itself as the last expr) 240.15 290.67 T
(ession in its body) 365.76 290.67 T
(. Thus, the) 448.98 290.67 T
4 10 Q
(rev) 108 276.67 T
1 11 Q
( method can be optimized by the Dylan compiler into code that is exactly as) 126 276.67 T
(ef) 108 262.67 T
(\336cient as if it was written with iteration.) 116.73 262.67 T
(Alternative ways of de\336ning the) 135 248.67 T
4 10 Q
(my-reverse) 295.03 248.67 T
1 11 Q
( function ar) 355.03 248.67 T
(e discussed in Sec-) 410.95 248.67 T
(tion 1) 108 234.67 T
(1.4.1.) 134.84 234.67 T
3 13 Q
(11.3.7  Using) 108 203.33 T
4 12 Q
(map) 176.15 203.33 T
3 13 Q
( and) 197.75 203.33 T
4 12 Q
(curry) 222.63 203.33 T
1 11 Q
(Per) 108 183.67 T
(haps the easiest way to implement our simple sequence copier is to use the) 124.06 183.67 T
4 10 Q
(map) 108 169.67 T
1 11 Q
( function. The) 126 169.67 T
4 10 Q
(map) 196.19 169.67 T
1 11 Q
( function takes the same ar) 214.19 169.67 T
(guments as does) 343.9 169.67 T
4 10 Q
(do) 427.36 169.67 T
1 11 Q
(. However) 439.36 169.67 T
(,) 489.48 169.67 T
-0.01 (instead of ignoring the r) 108 155.67 P
-0.01 (eturn value of the function that you pr) 225.18 155.67 P
-0.01 (ovide,) 411.73 155.67 P
4 10 Q
-0.01 (map) 444.63 155.67 P
1 11 Q
-0.01 ( gathers) 462.63 155.67 P
(into a new collection all the r) 108 141.67 T
(esults of calling the pr) 247.99 141.67 T
(ovided function. The new) 355.19 141.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "147" 161
%%Page: "148" 162
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(148) 72 677.67 T
0 F
(Chapter 11) 95.75 677.67 T
(Collections and Control Flow) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(collection will be an instance of the) 108 640.67 T
4 10 Q
(type-for-copy) 280.76 640.67 T
1 11 Q
( of the \336rst collection ar) 358.76 640.67 T
(gu-) 472.97 640.67 T
(ment to) 108 626.67 T
4 10 Q
(map) 148.06 626.67 T
1 11 Q
(.) 166.06 626.67 T
4 9 Q
(define method my-copy-sequence) 108 606 T
(\050old-sequence :: <sequence>\051 => \050new-sequence :: <sequence>\051) 129.6 595 T
(map\050identity, old-sequence\051;) 118.8 584 T
(end method my-copy-sequence;) 108 573 T
1 11 Q
-0.41 (The) 108 552.67 P
4 10 Q
-0.88 (identity) 128.76 552.67 P
1 11 Q
-0.41 ( function simply r) 176.76 552.67 P
-0.41 (eturns its ar) 262.23 552.67 P
-0.41 (gument without making any changes.) 318.91 552.67 P
(A mor) 108 538.67 T
(e inter) 139.17 538.67 T
(esting example is to de\336ne a method that multiplies a number by) 169.8 538.67 T
(each element of a vector) 108 524.67 T
(, yielding a new vector with the pr) 224.42 524.67 T
(oducts. Her) 391.68 524.67 T
(e is a sam-) 448.24 524.67 T
(ple call to) 108 510.67 T
4 10 Q
(scalar-multiply) 157.71 510.67 T
1 11 Q
(, which we de\336ne next:) 246.49 510.67 T
6 9 Q
(?) 108 490 T
4 F
( scalar-multiply\0503, #[4, 5, 6]\051;) 113.4 490 T
6 F
(#[12, 15, 18]) 108 479 T
1 11 Q
(Her) 108 458.67 T
(e is our de\336nition of) 126.57 458.67 T
4 10 Q
(scalar-multiply) 227.55 458.67 T
1 11 Q
(, using) 316.33 458.67 T
4 10 Q
(map) 351.59 458.67 T
1 11 Q
(:) 369.59 458.67 T
4 9 Q
(define method scalar-multiply) 108 438 T
(\050scalar :: <number>, old-vector :: <vector>\051 => \050result :: <vector>\051) 129.6 427 T
(map\050method \050vector-element\051 scalar * vector-element end,) 118.8 416 T
(old-vector\051;) 140.4 405 T
(end method scalar-multiply;) 108 394 T
1 11 Q
(W) 108 373.67 T
(e use the) 117.99 373.67 T
4 10 Q
(method) 163.33 373.67 T
1 11 Q
( statement to cr) 199.33 373.67 T
(eate a kind of function \050a closur) 273.78 373.67 T
(e\051 that multi-) 426.99 373.67 T
(plies) 108 359.67 T
4 10 Q
(scalar) 133.7 359.67 T
1 11 Q
( by an element of the vector pr) 169.7 359.67 T
(ovided by) 317.74 359.67 T
4 10 Q
(map) 369.58 359.67 T
1 11 Q
(. The) 387.58 359.67 T
4 10 Q
(map) 414.24 359.67 T
1 11 Q
( iterator then) 432.24 359.67 T
(calls that function on each element of) 108 345.67 T
4 10 Q
(old-vector) 291.39 345.67 T
1 11 Q
(, collecting the r) 350.58 345.67 T
(esults in a new) 427.73 345.67 T
(sequence. A variant of) 108 331.67 T
4 10 Q
(map) 219.28 331.67 T
1 11 Q
(, called) 237.28 331.67 T
4 10 Q
(map-into) 274.3 331.67 T
1 11 Q
(, r) 322.3 331.67 T
(eplaces elements in an existing col-) 331.95 331.67 T
(lection, rather than cr) 108 317.67 T
(eating a new collection for the r) 211.92 317.67 T
(esults. See Section 16.1.2,) 364.89 317.67 T
(page 247, for an example of the use of) 108 303.67 T
4 10 Q
(map-into) 293.81 303.67 T
1 11 Q
(.) 341.81 303.67 T
-0.08 (W) 135 289.67 P
-0.08 (e can de\336ne this method mor) 144.99 289.67 P
-0.08 (e succinctly using) 286.14 289.67 P
4 10 Q
-0.17 (curry) 374.9 289.67 P
1 11 Q
-0.08 (, which is a function) 403.68 289.67 P
(that generates a function:) 108 275.67 T
4 9 Q
(define method scalar-multiply) 108 255 T
(\050scalar :: <number>, old-vector :: <vector>\051 => \050result :: <vector>\051) 129.6 244 T
(map\050curry\050\134*, scalar\051, old-vector\051;) 118.8 233 T
(end method scalar-multiply;) 108 222 T
1 11 Q
(The) 108 201.67 T
4 10 Q
(curry) 129.16 201.67 T
1 11 Q
( function in this example cr) 159.16 201.67 T
(eates exactly the same method as the one) 291.42 201.67 T
(that we cr) 108 187.67 T
(eated in the pr) 156.05 187.67 T
(evious de\336nition of) 226.26 187.67 T
4 10 Q
(scalar-multiply) 323.61 187.67 T
1 11 Q
(. That is,) 412.39 187.67 T
4 10 Q
(curry\050\134*, scalar\051) 108 173.67 T
1 11 Q
( builds a function that multiplies its ar) 210 173.67 T
(gument by) 395.48 173.67 T
4 10 Q
(scalar) 450.9 173.67 T
1 11 Q
(.) 486.09 173.67 T
-0.22 (This generated function is then used by) 108 159.67 P
4 10 Q
-0.48 (map) 300.97 159.67 P
1 11 Q
-0.22 ( to compute the value of each element) 318.97 159.67 P
(of the new sequence.) 108 145.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "148" 162
%%Page: "149" 163
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.3 Iteration over a sequence) 402.7 677.67 T
2 F
(149) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.32 (Mapping functions such as) 135 640.67 P
4 10 Q
-0.7 (do) 267.75 640.67 P
1 11 Q
-0.32 ( and) 279.75 640.67 P
4 10 Q
-0.7 (map) 303.23 640.67 P
1 11 Q
-0.32 ( work well when you want to operate) 321.23 640.67 P
(over the entir) 108 626.67 T
(e collection. The) 173.2 626.67 T
4 10 Q
(map) 254.52 626.67 T
1 11 Q
( function works well only if ther) 272.52 626.67 T
(e is a one-to-) 428.94 626.67 T
(one corr) 108 612.67 T
(espondence between input-collection sizes and output-collection size.) 147.81 612.67 T
(However) 108 598.67 T
(, the other techniques that we have pr) 152.62 598.67 T
(esented, such as using) 335.61 598.67 T
4 10 Q
(for) 446.3 598.67 T
1 11 Q
( and) 464.3 598.67 T
4 10 Q
(while) 108 584.67 T
1 11 Q
(, can work better when you want to operate on only part of a sequence. In) 138 584.67 T
(Section 1) 108 570.67 T
(1.3.8, we take another look at how a) 150.77 570.67 T
4 10 Q
(for) 327.44 570.67 T
1 11 Q
( loop can help us to solve the) 345.44 570.67 T
(pr) 108 556.67 T
(oblem of iterating over only part of a collection.) 118.76 556.67 T
3 13 Q
(11.3.8  A sequence copier that can cop) 108 525.33 T
(y a por) 303.98 525.33 T
(tion of a sequence) 339.14 525.33 T
1 11 Q
(The) 108 505.67 T
4 10 Q
(copy-sequence) 129.16 505.67 T
1 11 Q
( generic function pr) 207.16 505.67 T
(ovided by Dylan actually takes keywor) 302.43 505.67 T
(d) 492.83 505.67 T
(ar) 108 491.67 T
(guments that allow only a portion of the sequence to be copied. Her) 117.65 491.67 T
(e is an) 447 491.67 T
(example:) 108 477.67 T
6 9 Q
(?) 108 457 T
4 F
( copy-sequence\050"airport", start: 3\051;) 113.4 457 T
6 F
("port") 108 446 T
(?) 108 427 T
4 F
( copy-sequence\050"snow", start: 1, end: 3\051;) 113.4 427 T
6 F
("no") 108 416 T
1 11 Q
(In the following, we use a) 108 395.67 T
4 10 Q
(for) 236.1 395.67 T
1 11 Q
( loop with two iteration clauses to implement the) 254.1 395.67 T
(mor) 108 381.67 T
(e \337exible version of the general purpose) 127.87 381.67 T
4 10 Q
(my-copy-sequence) 325.04 381.67 T
1 11 Q
(:) 421.04 381.67 T
4 9 Q
(define method my-copy-sequence) 108 361 T
(\050old-sequence :: <sequence>,) 129.6 350 T
(#key start = 0, end: limit = old-sequence.size\051) 135 339 T
(=> \050new-sequence :: <sequence>\051) 113.4 328 T
(let new-sequence = make\050type-for-copy\050old-sequence\051, size: limit - start\051;) 118.8 317 T
(for \050source-index from start below limit,) 118.8 306 T
(destination-index from 0\051) 145.8 295 T
(new-sequence[destination-index] := old-sequence[source-index];) 129.6 284 T
(end for;) 118.8 273 T
(new-sequence;) 118.8 262 T
(end method my-copy-sequence;) 108 251 T
1 11 Q
(In the pr) 108 230.67 T
(eceding example, we for) 149.62 230.67 T
(ce the keywor) 267.98 230.67 T
(d parameter) 335.72 230.67 T
4 10 Q
(end:) 398.08 230.67 T
1 11 Q
( to bind the vari-) 422.08 230.67 T
(able) 108 216.67 T
4 10 Q
(limit) 130.8 216.67 T
1 11 Q
(, rather than binding) 160.8 216.67 T
4 10 Q
(end) 264.02 216.67 T
1 11 Q
(. It is illegal to use) 282.02 216.67 T
4 10 Q
(end) 372.27 216.67 T
1 11 Q
( as a variable name,) 390.27 216.67 T
-0.06 (because) 108 202.67 P
4 10 Q
-0.13 (end) 148.99 202.67 P
1 11 Q
-0.06 ( is one of a few r) 166.99 202.67 P
-0.06 (eserved wor) 246.09 202.67 P
-0.06 (ds in Dylan. In the body of the) 305.85 202.67 P
4 10 Q
-0.13 (for) 456.05 202.67 P
1 11 Q
-0.06 ( loop,) 474.05 202.67 P
4 10 Q
(source-index) 108 188.67 T
1 11 Q
( will range fr) 180 188.67 T
(om) 242.47 188.67 T
4 10 Q
(start) 260.94 188.67 T
1 11 Q
( to 1 less than) 290.94 188.67 T
4 10 Q
(limit) 359.47 188.67 T
1 11 Q
(, and) 389.47 188.67 T
4 10 Q
(destination-) 416.34 188.67 T
(index) 108 174.67 T
1 11 Q
( will range fr) 138 174.67 T
(om 0 to 1 less then) 200.47 174.67 T
4 10 Q
(limit) 292.74 174.67 T
1 11 Q
( minus) 322.74 174.67 T
4 10 Q
(start) 358.85 174.67 T
1 11 Q
(, which is the length of) 388.85 174.67 T
(the new sequence being cr) 108 160.67 T
(eated.) 235.75 160.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "149" 163
%%Page: "150" 164
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(150) 72 677.67 T
0 F
(Chapter 11) 95.75 677.67 T
(Collections and Control Flow) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(11.3.9  Chang) 108 639.33 T
(es to a g) 176.84 639.33 T
(eneric function\325) 220.19 639.33 T
(s signature) 298.94 639.33 T
1 11 Q
(Note that the) 108 619.67 T
4 10 Q
(my-copy-sequence) 174.58 619.67 T
1 11 Q
( method de\336ned in Section 1) 270.58 619.67 T
(1.3.8 has a parame-) 408.69 619.67 T
(ter list that is not congr) 108 605.67 T
(uent with the parameter list of the generic function. That) 220.2 605.67 T
(is, that method accepts the) 108 591.67 T
4 10 Q
(start:) 239.79 591.67 T
1 11 Q
( and) 275.79 591.67 T
4 10 Q
(end:) 299.91 591.67 T
1 11 Q
( keywor) 323.91 591.67 T
(d ar) 363.49 591.67 T
(guments, when pr) 382.61 591.67 T
(evi-) 471.25 591.67 T
-0.35 (ously only r) 108 577.67 P
-0.35 (equir) 165.29 577.67 P
-0.35 (ed ar) 190.69 577.67 P
-0.35 (guments wer) 214.73 577.67 P
-0.35 (e allowed for that generic function. W) 278.1 577.67 P
-0.35 (e did not) 458.9 577.67 P
(explicitly de\336ne the) 108 563.67 T
4 10 Q
(my-copy-sequence) 206.77 563.67 T
1 11 Q
( generic function; Dylan cr) 302.77 563.67 T
(eated the) 431.55 563.67 T
(generic function implicitly) 108 549.67 T
(, when we de\336ned the \336rst method for it, in Section) 235.46 549.67 T
(1) 108 535.67 T
(1.3.1. The generic function accepts two r) 112.89 535.67 T
(equir) 307.13 535.67 T
(ed parameters, and no keywor) 332.54 535.67 T
(d) 480.94 535.67 T
(parameters.) 108 521.67 T
(When you need to change the signatur) 135 507.67 T
(e of a generic function, you must) 322.66 507.67 T
(change all the methods for that generic function to have a compatible signatur) 108 493.67 T
(e.) 487.23 493.67 T
(In our example, we would have to \336x the) 108 479.67 T
4 10 Q
(my-copy-sequence) 310.58 479.67 T
1 11 Q
( method for lists to) 406.58 479.67 T
(accept the) 108 465.67 T
4 10 Q
(start:) 159.49 465.67 T
1 11 Q
( and) 195.49 465.67 T
4 10 Q
(end:) 219.61 465.67 T
1 11 Q
( keywor) 243.61 465.67 T
(d ar) 283.19 465.67 T
(guments, and would have to change the) 302.31 465.67 T
(methods to operate on only a portion of the list pr) 108 451.67 T
(ovided. For mor) 350.17 451.67 T
(e information) 428.88 451.67 T
(about the congr) 108 437.67 T
(uence r) 184.23 437.67 T
(ules for methods of a generic function, see Section 12.2.5,) 219.69 437.67 T
(page 176.) 108 423.67 T
3 15 Q
(11.4  Manipulation of collections) 108 384 T
1 11 Q
(Dylan pr) 108 363.67 T
(ovides an extensive library of functions that manipulate collections. In) 151.24 363.67 T
(this section, we explor) 108 349.67 T
(e how to build complex collection functions fr) 216.22 349.67 T
(om simpler) 439 349.67 T
(ones, using the contr) 108 335.67 T
(ol-\337ow functions alr) 208.64 335.67 T
(eady shown in this chapter) 307.17 335.67 T
(.) 437.66 335.67 T
3 13 Q
(11.4.1  Re) 108 304.33 T
(ver) 157.05 304.33 T
(sal of sequences) 172.91 304.33 T
1 11 Q
(Dylan pr) 108 284.67 T
(ovides two generic functions for r) 151.24 284.67 T
(eversing sequences:) 314.92 284.67 T
4 10 Q
(reverse) 413.87 284.67 T
1 11 Q
(, and) 455.87 284.67 T
4 10 Q
(reverse!) 108 270.67 T
1 11 Q
(. They both achieve the same objective, but) 156 270.67 T
4 10 Q
(reverse!) 366.64 270.67 T
1 11 Q
( is allowed to) 414.64 270.67 T
(modify its ar) 108 256.67 T
(gument, wher) 170.02 256.67 T
(eas) 238.23 256.67 T
4 10 Q
(reverse) 256.41 256.67 T
1 11 Q
( never modi\336es its ar) 298.41 256.67 T
(gument.) 400.24 256.67 T
6 9 Q
(?) 108 236 T
4 F
( reverse\050"lever"\051;) 113.4 236 T
6 F
("revel") 108 225 T
(?) 108 206 T
4 F
( define variable *switch* = vector\050"switch", "on"\051;) 113.4 206 T
6 F
(?) 108 187 T
4 F
( reverse\050*switch*\051;) 113.4 187 T
6 F
(#["on", "switch"]) 108 176 T
(?) 108 157 T
4 F
( *switch*;) 113.4 157 T
6 F
(#["switch", "on"]) 108 146 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "150" 164
%%Page: "151" 165
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.4 Manipulation of collections) 392.41 677.67 T
2 F
(151) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
6 9 Q
0 X
(?) 108 642 T
4 F
(reverse!\050*switch*\051;) 118.8 642 T
6 F
(#["on", "switch"]) 108 631 T
1 11 Q
(After the call to) 108 610.67 T
4 10 Q
(reverse!) 186.06 610.67 T
1 11 Q
(, the value of) 234.06 610.67 T
4 10 Q
(*switch*) 299.55 610.67 T
1 11 Q
( is not de\336ned. Only the r) 347.55 610.67 T
(eturn) 471.46 610.67 T
(value fr) 108 596.67 T
(om) 145.38 596.67 T
4 10 Q
(reverse!) 163.85 596.67 T
1 11 Q
( will be meaningful. If we want) 211.85 596.67 T
4 10 Q
(*switch*) 366.55 596.67 T
1 11 Q
( to contain the) 414.55 596.67 T
(r) 108 582.67 T
(eversed sequence, we must instead write) 112.15 582.67 T
6 9 Q
(?) 108 562 T
4 F
( *switch* := reverse!\050*switch*\051;) 113.4 562 T
6 F
(#["on", "switch"]) 108 551 T
(?) 108 532 T
4 F
( *switch*;) 113.4 532 T
6 F
(#["on", "switch"]) 108 521 T
1 11 Q
-0.12 (Note that) 108 500.67 P
4 10 Q
-0.27 (reverse!) 156.33 500.67 P
1 11 Q
-0.12 ( cannot change the object to which) 204.33 500.67 P
4 10 Q
-0.27 (*switch*) 373.39 500.67 P
1 11 Q
-0.12 ( r) 421.39 500.67 P
-0.12 (efers; however) 428.17 500.67 P
-0.12 (,) 498.62 500.67 P
4 10 Q
(reverse!) 108 486.67 T
1 11 Q
( is allowed to alter the contents of that object. Also note that) 156 486.67 T
4 10 Q
(reverse!) 448.9 486.67 T
1 11 Q
(may not r) 108 472.67 T
(eturn the same object as that you pr) 154.97 472.67 T
(ovide as its ar) 328.01 472.67 T
(gument. Consider the) 394.93 472.67 T
(case of using) 108 458.67 T
4 10 Q
(reverse!) 173.25 458.67 T
1 11 Q
( on a list to see how this behavior can be useful.) 221.25 458.67 T
-0.21 (How can we write our own version of) 108 278.67 P
4 10 Q
-0.46 (reverse) 293.78 278.67 P
1 11 Q
-0.21 ( using the iteration techniques pr) 335.78 278.67 P
-0.21 (e-) 495.07 278.67 P
(sented so far?) 108 264.67 T
4 9 Q
(define method my-reverse \050seq :: <sequence>\051 => \050reversed-seq :: <sequence>\051) 108 244 T
(let reversed-seq = make\050type-for-copy\050seq\051, size: seq.size\051;) 118.8 233 T
(for \050destination-index from seq.size - 1 to 0 by -1,) 118.8 222 T
(source-index from 0\051) 145.8 211 T
(reversed-seq[destination-index] := seq[source-index];) 129.6 200 T
(end for;) 118.8 189 T
(reversed-seq;) 118.8 178 T
(end method my-reverse;) 108 167 T
1 11 Q
(Once again, this algorithm is \336ne for vectors and strings, but has poor perfor-) 108 146.67 T
(mance for lists. Her) 108 132.67 T
(e is a special) 202.67 132.67 T
4 10 Q
(my-reverse) 265.63 132.67 T
1 11 Q
( method for lists:) 325.63 132.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Convention:) 141 424.67 T
1 F
( Dylan has a convention of putting an exclamation point) 203.03 424.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(at the ends of the names of functions that can destr) 141 410.67 T
(uctively modify) 387.84 410.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(their ar) 141 396.67 T
(guments. For example,) 176.2 396.67 T
4 10 Q
(reverse!) 290.04 396.67 T
1 11 Q
( takes a sequence, and) 338.04 396.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 141 382.67 T
(eturns a sequence that has the same elements but in r) 145.15 382.67 T
(everse or) 403.06 382.67 T
(der) 447 382.67 T
(.) 462.52 382.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The) 141 368.67 T
4 10 Q
(reverse!) 162.16 368.67 T
1 11 Q
( generic function may change the sequence that is its) 210.16 368.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 141 354.67 T
(gument. In contrast, the) 150.65 354.67 T
4 10 Q
(reverse) 269.2 354.67 T
1 11 Q
( generic function performs a simi-) 311.2 354.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(lar operation, but does not destr) 141 340.67 T
(uctively modify its ar) 296.92 340.67 T
(gument. Setters) 400.8 340.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 141 326.67 T
(e an exception to this convention: They modify their ar) 150.65 326.67 T
(gument, but) 416.44 326.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(do not typically end with) 141 312.67 T
4 10 Q
(!) 266.64 312.67 T
1 11 Q
(.) 272.64 312.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 437.88 135 305.13 2 L
V
0.25 H
0 Z
N
486 437.88 486 305.13 2 L
V
N
134.88 438 486.12 438 2 L
V
N
134.88 305 486.12 305 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "151" 165
%%Page: "152" 166
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(152) 72 677.67 T
0 F
(Chapter 11) 95.75 677.67 T
(Collections and Control Flow) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define method my-reverse \050old-list :: <list>\051 => \050reversed-list :: <list>\051) 108 642 T
(let reversed-list = #\050\051;) 118.8 631 T
(for \050old-element in old-list\051) 118.8 620 T
(reversed-list := pair\050old-element, reversed-list\051;) 129.6 609 T
(end for;) 118.8 598 T
(reversed-list;) 118.8 587 T
(end method my-reverse;) 108 576 T
1 11 Q
(It is easy to build up a list fr) 108 555.67 T
(om its end to its start, and that is exactly what we do) 243.34 555.67 T
(in the pr) 108 541.67 T
(eceding method. W) 149.12 541.67 T
(e start with the empty list, and add pairs to the) 242.91 541.67 T
-0.19 (r) 108 527.67 P
-0.19 (eversed list whose heads ar) 112.15 527.67 P
-0.19 (e the elements of the ar) 244.52 527.67 P
-0.19 (gument. W) 355.81 527.67 P
-0.19 (e follow the old list) 408.83 527.67 P
(fr) 108 513.67 T
(om its start to its end, while we build the new list fr) 115.81 513.67 T
(om its end to its start, thus) 365.94 513.67 T
(r) 108 499.67 T
(eversing the list.) 112.15 499.67 T
-0.25 (It is important to r) 135 485.67 P
-0.25 (emember that, even though we cr) 222.87 485.67 P
-0.25 (eated a new sequence to) 384.65 485.67 P
(contain the elements of the old sequence, we still shar) 108 471.67 T
(e those old elements with) 368.52 471.67 T
(the new sequence. If two elements of a collection r) 108 457.67 T
(efer to the same object, then) 351.62 457.67 T
-0.02 (modifying the element of one of the collections af) 108 443.67 P
-0.02 (fects the value of the element of) 347.46 443.67 P
(the other collection. W) 108 429.67 T
(e illustrate this behavior in Section 1) 216.49 429.67 T
(1.4.2.) 391.94 429.67 T
3 13 Q
(11.4.2  Destructive operations and shared structure) 108 398.33 T
1 11 Q
(Consider the following example, and Figur) 108 378.67 T
(es 1) 317.21 378.67 T
(1.4 and 1) 334.79 378.67 T
(1.5.) 377.55 378.67 T
5 9 Q
(// Firste we construct a vector of two vectors) 108 358 T
6 F
(?) 108 347 T
4 F
( define variable *switch-states*) 113.4 347 T
(= vector\050vector\050"switch", "on"\051, vector\050"switch", "off"\051\051;) 129.6 336 T
6 F
(?) 108 317 T
4 F
( *switch-states*;) 113.4 317 T
6 F
(#[#["switch", "on"], #["switch", "off"]]) 108 306 T
5 F
(// Now, we reverse the vector, holding on to the result) 108 287 T
6 F
(?) 108 276 T
4 F
( define variable *rev-switch-states* = my-reverse\050*switch-states*\051;) 113.4 276 T
1 11 Q
(At this point, the states of the variables and vectors corr) 108 255.67 T
(espond to Figur) 378.46 255.67 T
(e 1) 455.43 255.67 T
(1.4.) 468.35 255.67 T
(W) 135 241.67 T
(e examine the two sequences:) 144.99 241.67 T
6 9 Q
(?) 108 221 T
4 F
( *rev-switch-states*;) 113.4 221 T
6 F
(#[#["switch", "off"], #["switch", "on"]]) 108 210 T
5 F
(// Although *switch-states* and *rev-switch-states* are different vectors,) 108 191 T
(// they share elements) 108 180 T
6 F
(?) 108 169 T
4 F
( *switch-states* == *rev-switch-states*;) 113.4 169 T
6 F
(#f) 108 158 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "152" 166
%%Page: "153" 167
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.4 Manipulation of collections) 392.41 677.67 T
2 F
(153) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Now) 108 437.67 T
(, we change an element:) 131.31 437.67 T
6 9 Q
(?) 108 417.01 T
4 F
( *switch-states*[0] == *rev-switch-states*[1];) 113.4 417.01 T
6 F
(#t) 108 406.01 T
5 F
(// So, when we change an element in one, the same change occurs in the other) 108 387.01 T
6 F
(?) 108 376.01 T
4 F
( \050*switch-states*[0]\051[0] := "master switch";) 113.4 376.01 T
6 F
("master switch") 108 365.01 T
1 11 Q
(At this point, the states of the variables and vectors corr) 108 344.67 T
(espond to Figur) 378.46 344.67 T
(e 1) 455.43 344.67 T
(1.5.) 468.35 344.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 457.01 504 465 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 11.4) 186.26 468.33 T
8 F
(State bef) 244.62 468.33 T
(ore the element is changed.) 284.35 468.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 138.02 504 146.01 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 11.5) 190.27 149.34 T
8 F
(State after the element is changed.) 248.63 149.34 T
0 0 0 1 0 0 0 K
108 481 504 648 C
175 485 437 646 C
0 -248 100 2 249 250 149 181 491 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f11-4.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f11-4 .eps)%%CreationDate: (6/5/96) (10:43 AM)%%BoundingBox: -248 100 2 249%%HiResBoundingBox: -247.1984 100.3333 0.7884 248.0403%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: -120.5 107 -120.5 107%AI3_TileBox: -395.5 -258 156.5 472%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -876.5 611 -1.5 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4440.5 4427 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4440.5 4427 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4440.5 4427 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 -206.7083 240.8333 0 TpTP-40.4901 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(*switch-states*) Tx (\r) TX TO0 To1 0 0 1 -77.9583 240.8333 0 TpTP-51.2875 0 Td0 Tr(*rev-switch-states*) Tx (\r) TX TO0 To1 0 0 1 -196.9583 102.5833 0 TpTP-21.5947 0 Td0 Tr("switch") Tx (\r) TX TO0 To1 0 0 1 -137.9583 102.5833 0 TpTP-10.7974 0 Td0 Tr("on") Tx (\r) TX TO0 To1 0 0 1 -73.875 102.5833 0 TpTP-21.5947 0 Td0 Tr("switch") Tx (\r) TX TO0 To1 0 0 1 -12.7083 102.5833 0 TpTP-13.4967 0 Td0 Tr("off") Tx (\r) TX TOu1 Ap0 R0 G0.5 w-170.7917 191.4167 m-170.7917 218.7708 L-206.7917 218.7708 L-206.7917 191.4167 L-170.7917 191.4167 Ls-178.125 191.4167 m-134.7084 191.4167 L-134.7084 218.7708 L-178.125 218.7708 LS-168.4167 191.2083 mS-168.4167 218.5625 mSUu-44.5208 191.4167 m-44.5208 218.7708 L-80.5208 218.7708 L-80.5208 191.4167 L-44.5208 191.4167 Ls-44.4375 191.4167 mS-44.4375 218.7708 mS-48.4583 191.4167 m-8.4375 191.4167 L-8.4375 218.7708 L-49.4583 218.7708 LSUu-170.7917 124.9792 m-170.7917 152.3333 L-206.7917 152.3333 L-206.7917 124.9792 L-170.7917 124.9792 Ls-170.7084 124.9792 m-134.7084 124.9792 L-134.7084 152.3333 L-170.7084 152.3333 LS-176.125 124.9792 mS-176.125 152.3333 mSU-44.5208 124.9792 m-44.5208 152.3333 L-80.5208 152.3333 L-80.5208 124.9792 L-44.5208 124.9792 Ls-49.125 124.9792 m-8.6875 124.9792 L-8.6875 152.3333 L-49.125 152.3333 LS-44.6875 124.9792 mS-44.6875 152.3333 mSu0 Ap0.65 w-60.4583 204.9167 m-60.4583 160.25 lS0 O0 g1 w-62.6963 161.7958 m-60.4308 153.34 l-58.1649 161.7958 l-62.6963 161.7958 lfUu0 R0 G0.65 w-188.3959 204.9167 m-188.3959 160.25 lS0 O0 g1 w-190.6338 161.7958 m-188.3683 153.34 l-186.1024 161.7958 l-190.6338 161.7958 lfUuu0 R0 G0.65 w-23.7917 203.75 m-172.7917 155.5833 lS0 O0 g1 w-172.0074 158.1867 m-179.3564 153.4299 l-170.6135 153.8749 l-172.0074 158.1867 lfUUu0 R0 G0.65 w-204.375 237.5 m-189.375 224.1667 lS0 O0 g1 w-192.0208 223.5225 m-184.1958 219.598 l-189.0103 226.9092 l-192.0208 223.5225 lfUu0 R0 G0.65 w-80 237.5 m-65 224.1667 lS0 O0 g1 w-67.6458 223.5225 m-59.8208 219.598 l-64.6353 226.9092 l-67.6458 223.5225 lfUuu0 R0 G0.65 w-187.4583 138.4167 m-194.7917 117.0833 lS0 O0 g1 w-196.4093 119.2713 m-197.0159 110.5383 l-192.1241 117.7981 l-196.4093 119.2713 lfU-196.4093 119.2713 m-197.0159 110.5383 l-192.1241 117.7981 l-196.4093 119.2713 lfUu0 R0 G0.65 w-153.4583 137.75 m-142.7917 117.4167 lS0 O0 g1 w-145.4916 117.75 m-139.5572 111.3145 l-141.4789 119.8551 l-145.4916 117.75 lfUuu0 R0 G0.65 w-62.9583 138.4167 m-70.2917 117.0833 lS0 O0 g1 w-71.9093 119.2713 m-72.5159 110.5383 l-67.6241 117.7981 l-71.9093 119.2713 lfU-71.9093 119.2713 m-72.5159 110.5383 l-67.6241 117.7981 l-71.9093 119.2713 lfUu0 R0 G0.65 w-28.9583 137.75 m-18.2917 117.4167 lS0 O0 g1 w-20.9916 117.75 m-15.0572 111.3145 l-16.9789 119.8551 l-20.9916 117.75 lfUu0 R0 G0.65 w-152.4583 204.4167 m-80.125 157.0833 lS0 O0 g1 w-82.6408 156.0572 m-74.3247 153.3228 l-80.1595 159.849 l-82.6408 156.0572 lfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 481 504 648 C
36 72 576 720 C
108 162.01 504 329.01 C
170 166.01 442 327.01 C
0 -258 100 2 249 260 149 176 172.01 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f11-5.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f11-5 .eps)%%CreationDate: (6/5/96) (10:43 AM)%%BoundingBox: -258 100 2 249%%HiResBoundingBox: -256.6984 100.3333 0.7884 248.0403%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: -120.5 107 -120.5 107%AI3_TileBox: -395.5 -258 156.5 472%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -392.5 379 1.5 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4440.5 4427 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4440.5 4427 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4440.5 4427 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 -206.7083 240.8333 0 TpTP-40.4901 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(*switch-states*) Tx (\r) TX TO0 To1 0 0 1 -77.9583 240.8333 0 TpTP-51.2875 0 Td0 Tr(*rev-switch-states*) Tx (\r) TX TO0 To1 0 0 1 -216.2083 102.5833 0 TpTP-40.4901 0 Td0 Tr("master switch") Tx (\r) TX TO0 To1 0 0 1 -137.9583 102.5833 0 TpTP-10.7974 0 Td0 Tr("on") Tx (\r) TX TO0 To1 0 0 1 -73.875 102.5833 0 TpTP-21.5947 0 Td0 Tr("switch") Tx (\r) TX TO0 To1 0 0 1 -12.7083 102.5833 0 TpTP-13.4967 0 Td0 Tr("off") Tx (\r) TX TOu1 Ap0 R0 G0.5 w-170.7917 191.4167 m-170.7917 218.7708 L-206.7917 218.7708 L-206.7917 191.4167 L-170.7917 191.4167 Ls-178.125 191.4167 m-134.7084 191.4167 L-134.7084 218.7708 L-178.125 218.7708 LS-168.4167 191.2083 mS-168.4167 218.5625 mSUu-44.5208 191.4167 m-44.5208 218.7708 L-80.5208 218.7708 L-80.5208 191.4167 L-44.5208 191.4167 Ls-44.4375 191.4167 mS-44.4375 218.7708 mS-48.4583 191.4167 m-8.4375 191.4167 L-8.4375 218.7708 L-49.4583 218.7708 LSUu-170.7917 124.9792 m-170.7917 152.3333 L-206.7917 152.3333 L-206.7917 124.9792 L-170.7917 124.9792 Ls-170.7084 124.9792 m-134.7084 124.9792 L-134.7084 152.3333 L-170.7084 152.3333 LS-176.125 124.9792 mS-176.125 152.3333 mSU-44.5208 124.9792 m-44.5208 152.3333 L-80.5208 152.3333 L-80.5208 124.9792 L-44.5208 124.9792 Ls-49.125 124.9792 m-8.6875 124.9792 L-8.6875 152.3333 L-49.125 152.3333 LS-44.6875 124.9792 mS-44.6875 152.3333 mSu0 Ap0.65 w-60.4583 204.9167 m-60.4583 160.25 lS0 O0 g1 w-62.6963 161.7958 m-60.4308 153.34 l-58.1649 161.7958 l-62.6963 161.7958 lfUu0 R0 G0.65 w-188.3959 204.9167 m-188.3959 160.25 lS0 O0 g1 w-190.6338 161.7958 m-188.3683 153.34 l-186.1024 161.7958 l-190.6338 161.7958 lfUuu0 R0 G0.65 w-23.7917 203.75 m-172.7917 155.5833 lS0 O0 g1 w-172.0074 158.1867 m-179.3564 153.4299 l-170.6135 153.8749 l-172.0074 158.1867 lfUUu0 R0 G0.65 w-204.375 237.5 m-189.375 224.1667 lS0 O0 g1 w-192.0208 223.5225 m-184.1958 219.598 l-189.0103 226.9092 l-192.0208 223.5225 lfUu0 R0 G0.65 w-80 237.5 m-65 224.1667 lS0 O0 g1 w-67.6458 223.5225 m-59.8208 219.598 l-64.6353 226.9092 l-67.6458 223.5225 lfUuu0 R0 G0.65 w-187.4583 138.4167 m-194.7917 117.0833 lS0 O0 g1 w-196.4093 119.2713 m-197.0159 110.5383 l-192.1241 117.7981 l-196.4093 119.2713 lfU-196.4093 119.2713 m-197.0159 110.5383 l-192.1241 117.7981 l-196.4093 119.2713 lfUu0 R0 G0.65 w-153.4583 137.75 m-142.7917 117.4167 lS0 O0 g1 w-145.4916 117.75 m-139.5572 111.3145 l-141.4789 119.8551 l-145.4916 117.75 lfUuu0 R0 G0.65 w-62.9583 138.4167 m-70.2917 117.0833 lS0 O0 g1 w-71.9093 119.2713 m-72.5159 110.5383 l-67.6241 117.7981 l-71.9093 119.2713 lfU-71.9093 119.2713 m-72.5159 110.5383 l-67.6241 117.7981 l-71.9093 119.2713 lfUu0 R0 G0.65 w-28.9583 137.75 m-18.2917 117.4167 lS0 O0 g1 w-20.9916 117.75 m-15.0572 111.3145 l-16.9789 119.8551 l-20.9916 117.75 lfUu0 R0 G0.65 w-152.4583 204.4167 m-80.125 157.0833 lS0 O0 g1 w-82.6408 156.0572 m-74.3247 153.3228 l-80.1595 159.849 l-82.6408 156.0572 lfU0 To1 0 0 1 -234.9167 172.3333 0 TpTP-21.5947 0 Td0 Tr("switch") Tx (\r) TX TO-254.5 4427 m-254.5 -4213 L(N) *LB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 162.01 504 329.01 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "153" 167
%%Page: "154" 168
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(154) 72 677.67 T
0 F
(Chapter 11) 95.75 677.67 T
(Collections and Control Flow) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(W) 108 640.67 T
(e can look at the values of the variables:) 117.99 640.67 T
6 9 Q
(?) 108 620 T
4 F
( *switch-states*;) 113.4 620 T
6 F
(#[#["master switch", "on"], #["switch", "off"]]) 108 609 T
(?) 108 590 T
4 F
( *rev-switch-states*;) 113.4 590 T
6 F
(#[#["switch", "off"], #["master switch", "on"]]) 108 579 T
1 11 Q
(Each object pictur) 108 558.67 T
(ed in Figur) 194.47 558.67 T
(es 1) 247.78 558.67 T
(1.4 and 1) 265.36 558.67 T
(1.5 is a vector) 308.12 558.67 T
(. The strings in the \336gur) 372.98 558.67 T
(es) 489.28 558.67 T
(ar) 108 544.67 T
(e vectors, although we did not draw them as such, to keep the diagrams r) 117.65 544.67 T
(ela-) 474.29 544.67 T
(tively simple. V) 108 530.67 T
(ariables ar) 183.43 530.67 T
(e not objects in Dylan, but they ar) 233.59 530.67 T
(e shown r) 396.57 530.67 T
(eferring to) 444.14 530.67 T
(objects. In Figur) 108 516.67 T
(e 1) 185.64 516.67 T
(1.5, the string) 198.55 516.67 T
4 10 Q
("switch") 266.87 516.67 T
1 11 Q
( is not r) 314.87 516.67 T
(efer) 351.13 516.67 T
(enced by any other object) 369.48 516.67 T
(and is ther) 108 502.67 T
(efor) 159.39 502.67 T
(e garbage; eventually) 178.48 502.67 T
(, it will be r) 281.1 502.67 T
(eclaimed by a garbage collector) 335.91 502.67 T
(.) 487.86 502.67 T
(Changing an element of one collection can af) 135 488.67 T
(fect another collection if the) 352.54 488.67 T
-0.37 (two collections shar) 108 474.67 P
-0.37 (e elements. T) 203.54 474.67 P
-0.37 (wo collections shar) 265.43 474.67 P
-0.37 (e an element if ther) 357.39 474.67 P
-0.37 (e is a value) 449.04 474.67 P
(in one collection that is) 108 460.67 T
4 10 Q
(==) 222.61 460.67 T
1 11 Q
( \050that is, identical\051 to a value in the other collection.) 234.61 460.67 T
(Functions such as) 108 446.67 T
4 10 Q
(copy-sequence) 196.89 446.67 T
1 11 Q
( and) 274.89 446.67 T
4 10 Q
(reverse) 299.01 446.67 T
1 11 Q
( do only a) 341.01 446.67 T
2 F
(shallow copy) 391.97 446.67 T
1 F
( of their) 458.26 446.67 T
(ar) 108 432.67 T
(guments: only the top level of the copy is new) 117.65 432.67 T
(. Every other part is shar) 340.11 432.67 T
(ed with) 459.51 432.67 T
(the old sequence. Thus, it is important to take car) 108 418.67 T
(e when you modify objects that) 346.62 418.67 T
-0.08 (might be shar) 108 404.67 P
-0.08 (ed with other parts of your application. Using well-de\336ned module) 174.42 404.67 P
(boundaries that specify whether data str) 108 390.67 T
(uctur) 304.32 390.67 T
(es can be modi\336ed by clients of the) 330.2 390.67 T
(module can help you to keep application data consistent.) 108 376.67 T
3 15 Q
(11.5  Conditional e) 108 337 T
(x) 216.52 337 T
(ecution) 223.26 337 T
1 11 Q
(In Sections 1) 108 316.67 T
(1.5.1 thr) 168.29 316.67 T
(ough 1) 207.18 316.67 T
(1.5.6, we consider ways to execute dif) 239.98 316.67 T
(fer) 422.18 316.67 T
(ent code) 435.26 316.67 T
(depending on the r) 108 302.67 T
(esults of one or mor) 200.77 302.67 T
(e tests.) 297.35 302.67 T
3 13 Q
(11.5.1) 108 271.33 T
4 12 Q
(if) 143.57 271.33 T
3 13 Q
(,) 157.88 271.33 T
4 12 Q
(else) 163.8 271.33 T
3 13 Q
(, and) 192.71 271.33 T
4 12 Q
(elseif) 220.55 271.33 T
1 11 Q
(W) 108 251.67 T
(e showed the simplest use of) 117.99 251.67 T
4 10 Q
(if) 260.39 251.67 T
1 11 Q
( in Section 5.1.3, page 54. Consider the case) 272.39 251.67 T
(wher) 108 237.67 T
(e ther) 132.99 237.67 T
(e is mor) 160.41 237.67 T
(e than one test involved. Suppose that we want to write a) 198.91 237.67 T
(method that describes a vote. Her) 108 223.67 T
(e ar) 271.52 223.67 T
(e sample calls to) 289.18 223.67 T
4 10 Q
(interpret-votes) 371.45 223.67 T
1 11 Q
(:) 461.45 223.67 T
6 9 Q
(?) 108 203 T
4 F
(interpret-votes\050yes: 4, no: 0\051;) 118.8 203 T
6 F
("unanimously approved") 108 192 T
(?) 108 173 T
4 F
(interpret-votes\050yes: 3, no: 1\051;) 118.8 173 T
6 F
("approved") 108 162 T
(?) 108 143 T
4 F
(interpret-votes\050yes: 2, no: 2\051;) 118.8 143 T
6 F
("tie") 108 132 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "154" 168
%%Page: "155" 169
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.5 Conditional execution) 412.89 677.67 T
2 F
(155) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
6 9 Q
0 X
(?) 108 642 T
4 F
(interpret-votes\050yes: 1, no: 3\051;) 118.8 642 T
6 F
("not approved") 108 631 T
1 11 Q
(W) 108 610.67 T
(e can de\336ne the) 117.99 610.67 T
4 10 Q
(interpret-votes) 196.62 610.67 T
1 11 Q
( method using the) 286.62 610.67 T
4 10 Q
(if) 377.59 610.67 T
1 11 Q
( contr) 389.59 610.67 T
(ol str) 417.36 610.67 T
(uctur) 441.83 610.67 T
(e and) 467.71 610.67 T
(the) 108 596.67 T
4 10 Q
(else) 126.01 596.67 T
1 11 Q
( clause:) 150.01 596.67 T
4 9 Q
(define method interpret-votes) 108 576 T
(\050#key yes :: <nonnegative-integer> = 0, no :: <nonnegative-integer> = 0\051) 129.6 565 T
(=> \050interpretation :: <string>\051) 113.4 554 T
(if \050yes > 0 & no = 0\051) 118.8 543 T
("unanimously approved";) 129.6 532 T
(else if \050yes > no\051) 118.8 521 T
("approved";) 129.6 510 T
(else if \050yes = no\051) 118.8 499 T
("tie";) 129.6 488 T
(else) 118.8 477 T
("not approved";) 129.6 466 T
(end if;) 118.8 455 T
(end if;) 118.8 444 T
(end if;) 118.8 433 T
(end method interpret-votes;) 108 422 T
1 11 Q
(W) 108 401.67 T
(e de\336ned the) 117.99 401.67 T
4 10 Q
(<nonnegative-integer>) 183.8 401.67 T
1 11 Q
( type in Section 9.2, page 1) 309.8 401.67 T
(10, using) 437.5 401.67 T
4 10 Q
-0.34 (limited) 108 387.67 P
1 11 Q
-0.15 (. Only positive integers and the integer 0 ar) 150 387.67 P
-0.15 (e instances of) 358.7 387.67 P
4 10 Q
-0.34 (<nonnegative-) 426 387.67 P
(integer>) 108 373.67 T
1 11 Q
(. W) 156 373.67 T
(e use this type in the) 171.49 373.67 T
4 10 Q
(interpret-votes) 274.12 373.67 T
1 11 Q
( method parameter list to) 364.12 373.67 T
(ensur) 108 359.67 T
(e that no negative vote counts ar) 135.12 359.67 T
(e accepted.) 292.82 359.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Quick summary of) 141 325.67 T
4 10 Q
(&) 237.85 325.67 T
2 11 Q
(in\336x operator) 246.6 325.67 T
1 F
(:) 314.13 325.67 T
0 F
(ar) 319.63 325.67 T
(g1) 328.6 325.67 T
4 10 Q
(&) 342.35 325.67 T
0 11 Q
(ar) 351.1 325.67 T
(g2) 360.06 325.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.04 (The in\336x operator) 168 311.67 P
4 10 Q
-0.08 (&) 258.16 311.67 P
1 11 Q
-0.04 ( does the) 264.16 311.67 P
1 8.8 Q
-0.04 (AND) 310.23 311.67 P
1 11 Q
-0.04 ( logical operation. If either) 331.2 311.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.15 (or both of the ar) 141 297.67 P
-0.15 (guments to the) 218.41 297.67 P
4 10 Q
-0.32 (&) 293.45 297.67 P
1 11 Q
-0.15 ( operator ar) 299.45 297.67 P
-0.15 (e false, then) 355.97 297.67 P
4 10 Q
-0.32 (&) 415.75 297.67 P
1 11 Q
-0.15 ( r) 421.75 297.67 P
-0.15 (eturns) 428.5 297.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(false.) 141 283.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.45 (Note that the) 168 269.67 P
4 10 Q
-0.99 (&) 233.23 269.67 P
1 11 Q
-0.45 ( operator is actually a contr) 239.23 269.67 P
-0.45 (ol-\337ow operator) 369.39 269.67 P
-0.45 (. If) 447.28 269.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the \336rst ar) 141 255.67 T
(gument to the) 190.65 255.67 T
4 10 Q
(&) 261.47 255.67 T
1 11 Q
( operator is false, then the value of the) 267.47 255.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(second ar) 141 241.67 T
(gument is never computed, and false is r) 187.34 241.67 T
(eturned. If the) 384.78 241.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value of the \336rst ar) 141 227.67 T
(gument is tr) 232.64 227.67 T
(ue, then the value of the second) 291.57 227.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 141 213.67 T
(gument is computed and r) 150.65 213.67 T
(eturned.) 279.42 213.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The) 168 199.67 T
4 10 Q
(|) 189.16 199.67 T
1 11 Q
( operator \050logical) 195.16 199.67 T
1 8.8 Q
(OR) 280.85 199.67 T
1 11 Q
(\051 behaves in a similar manner) 293.65 199.67 T
(,) 436.21 199.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(except that its second ar) 141 185.67 T
(gument is computed and r) 257.41 185.67 T
(eturned only if) 386.19 185.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the \336rst ar) 141 171.67 T
(gument is false.) 190.65 171.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 338.88 135 164.13 2 L
V
0.25 H
0 Z
N
486 338.88 486 164.13 2 L
V
N
134.88 339 486.12 339 2 L
V
N
134.88 164 486.12 164 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "155" 169
%%Page: "156" 170
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(156) 72 677.67 T
0 F
(Chapter 11) 95.75 677.67 T
(Collections and Control Flow) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(The syntax for the) 108 640.67 T
4 10 Q
(if) 198.63 640.67 T
1 11 Q
( contr) 210.63 640.67 T
(ol str) 238.4 640.67 T
(uctur) 262.87 640.67 T
(e allows) 288.75 640.67 T
4 10 Q
(elseif) 331.27 640.67 T
1 11 Q
( clauses, which makes this) 367.27 640.67 T
(style of conditionalization slightly mor) 108 626.67 T
(e compact:) 296.36 626.67 T
4 9 Q
(define method interpret-votes) 108 606 T
(\050#key yes :: <nonnegative-integer> = 0, no :: <nonnegative-integer> = 0\051) 129.6 595 T
(=> \050interpretation :: <string>\051) 113.4 584 T
(if \050yes > 0 & no = 0\051) 118.8 573 T
("unanimously approved";) 129.6 562 T
(elseif \050yes > no\051) 118.8 551 T
("approved";) 129.6 540 T
(elseif \050yes = no\051) 118.8 529 T
("tie";) 129.6 518 T
(else) 118.8 507 T
("not approved";) 129.6 496 T
(end if;) 118.8 485 T
(end method interpret-votes;) 108 474 T
3 13 Q
(11.5.2  Branc) 108 444.33 T
(hing with) 173.69 444.33 T
4 12 Q
(case) 223.44 444.33 T
1 11 Q
(Dylan also pr) 108 424.67 T
(ovides the) 173.36 424.67 T
4 10 Q
(case) 226.2 424.67 T
1 11 Q
( contr) 250.2 424.67 T
(ol str) 277.97 424.67 T
(uctur) 302.43 424.67 T
(e to give you an alternative way to) 328.32 424.67 T
(expr) 108 410.67 T
(ess the branching style shown in Section 1) 129.7 410.67 T
(1.5.1:) 333.25 410.67 T
4 9 Q
(define method interpret-votes) 108 390 T
(\050#key yes :: <nonnegative-integer> = 0, no :: <nonnegative-integer> = 0\051) 129.6 379 T
(=> \050interpretation :: <string>\051) 113.4 368 T
(case \050yes > 0 & no = 0\051 => "unanimously approved";) 118.8 357 T
(\050yes > no\051) 145.8 346 T
(=> "approved";) 248.4 346 T
(\050yes = no\051) 145.8 335 T
(=> "tie";) 248.4 335 T
(otherwise) 145.8 324 T
(=> "not approved";) 248.4 324 T
(end case;) 118.8 313 T
(end method interpret-votes;) 108 302 T
1 11 Q
(The decision of whether to use) 108 281.67 T
4 10 Q
(if) 259.54 281.67 T
1 11 Q
( with) 271.54 281.67 T
4 10 Q
(elseif) 299.4 281.67 T
1 11 Q
( and) 335.4 281.67 T
4 10 Q
(else) 359.52 281.67 T
1 11 Q
(, as opposed to using) 383.52 281.67 T
4 10 Q
(case,) 108 267.67 T
1 11 Q
( is lar) 138 267.67 T
(gely a matter of personal style.) 164.21 267.67 T
3 13 Q
(11.5.3  Branc) 108 236.33 T
(hing with) 173.69 236.33 T
4 12 Q
(select) 223.44 236.33 T
1 11 Q
(In certain situations, you ar) 108 216.67 T
(e working with a particular two-ar) 240.89 216.67 T
(gument pr) 409.02 216.67 T
(edicate) 460.24 216.67 T
(\050such as) 108 202.67 T
4 10 Q
(==) 149.91 202.67 T
1 11 Q
( or) 161.91 202.67 T
4 10 Q
(<) 177.76 202.67 T
1 11 Q
(\051. The value of the \336rst ar) 183.76 202.67 T
(gument to the pr) 305.73 202.67 T
(edicate will always be) 387.3 202.67 T
(the same, and you would like to perform dif) 108 188.67 T
(fer) 322.98 188.67 T
(ent actions based on the second) 336.06 188.67 T
(value. Y) 108 174.67 T
(ou can use both) 146.64 174.67 T
4 10 Q
(if) 225.71 174.67 T
1 11 Q
( and) 237.71 174.67 T
4 10 Q
(case) 261.83 174.67 T
1 11 Q
( to handle this situation, but the) 285.83 174.67 T
4 10 Q
(select) 443.11 174.67 T
1 11 Q
(contr) 108 160.67 T
(ol str) 133.02 160.67 T
(uctur) 157.49 160.67 T
(e is mor) 183.37 160.67 T
(e concise. The following example interpr) 221.87 160.67 T
(ets traf) 419.14 160.67 T
(\336c-light) 452.3 160.67 T
(colors:) 108 146.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "156" 170
%%Page: "157" 171
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.5 Conditional execution) 412.89 677.67 T
2 F
(157) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define method color-action) 108 642 T
(\050color :: <symbol>\051 => \050action :: <symbol>\051) 129.6 631 T
(select \050color\051) 118.8 620 T
(#"red") 129.6 609 T
(=> #"stop";) 183.6 609 T
(#"yellow") 129.6 598 T
(=> #"slow";) 183.6 598 T
(#"green") 129.6 587 T
(=> #"go";) 183.6 587 T
(end select;) 118.8 576 T
(end method color-action;) 108 565 T
1 11 Q
-0.37 (The) 108 544.67 P
4 10 Q
-0.8 (select) 128.8 544.67 P
1 11 Q
-0.37 ( contr) 164.8 544.67 P
-0.37 (ol str) 192.21 544.67 P
-0.37 (uctur) 216.3 544.67 P
-0.37 (e uses) 242.19 544.67 P
4 10 Q
-0.8 (==) 273.45 544.67 P
1 11 Q
-0.37 ( for the default pr) 285.45 544.67 P
-0.37 (edicate. For example, in the) 369.59 544.67 P
(pr) 108 530.67 T
(eceding) 118.76 530.67 T
4 10 Q
(select) 159.37 530.67 T
1 11 Q
( statement, the symbol) 195.37 530.67 T
4 10 Q
(#"stop") 307.73 530.67 T
1 11 Q
( will be r) 349.73 530.67 T
(eturned if) 392.26 530.67 T
4 10 Q
(color ==) 442.85 530.67 T
-0.15 (#"red") 108 516.67 P
1 11 Q
-0.07 (. If you r) 144 516.67 P
-0.07 (equir) 185.06 516.67 P
-0.07 (e a dif) 210.47 516.67 P
-0.07 (fer) 239.99 516.67 P
-0.07 (ent pr) 253.07 516.67 P
-0.07 (edicate, use the) 281.77 516.67 P
4 10 Q
-0.15 (by) 358.81 516.67 P
1 11 Q
-0.07 ( clause, as shown in the fol-) 370.81 516.67 P
(lowing example, which interpr) 108 502.67 T
(ets age fr) 257.96 502.67 T
(om a number r) 301.68 502.67 T
(epr) 373.74 502.67 T
(esenting years:) 389.77 502.67 T
4 9 Q
(define method interpret-age) 108 482 T
(\050age :: <nonnegative-integer>\051 => \050description :: <string>\051) 129.6 471 T
(select \050age by \134<\051) 118.8 460 T
(13) 129.6 449 T
(=> "youngster";) 183.6 449 T
(20) 129.6 438 T
(=> "teenager";) 183.6 438 T
(60) 129.6 427 T
(=> "adult";) 183.6 427 T
(otherwise) 129.6 416 T
(=> "senior";) 183.6 416 T
(end select;) 118.8 405 T
(end method interpret-age;) 108 394 T
1 11 Q
-0.42 (The pr) 108 373.67 P
-0.42 (eceding method r) 139.5 373.67 P
-0.42 (eturns the string) 223.86 373.67 P
4 10 Q
-0.92 ("youngster") 305.31 373.67 P
1 11 Q
-0.42 ( when pr) 371.31 373.67 P
-0.42 (ovided an age less) 413.97 373.67 P
(then 13; r) 108 359.67 T
(eturns) 153.06 359.67 T
4 10 Q
("teenager") 186.71 359.67 T
1 11 Q
( when the age is between 13 and 20; and r) 246.71 359.67 T
(eturns) 448.65 359.67 T
4 10 Q
("adult") 108 345.67 T
1 11 Q
( when the age is between 20 and 60. In all other cases, it r) 150 345.67 T
(eturns) 426.46 345.67 T
4 10 Q
("senior") 108 331.67 T
1 11 Q
(.) 156 331.67 T
3 13 Q
(11.5.4  T) 108 300.33 T
(ab) 149.24 300.33 T
(les: Dynamic associations) 161.59 300.33 T
1 11 Q
(In Section 1) 108 280.67 T
(1.5.3, we saw how the) 163.63 280.67 T
4 10 Q
(color-action) 272.75 280.67 T
1 11 Q
( method associated traf) 344.75 280.67 T
(\336c-light) 457.58 280.67 T
(colors with actions by using) 108 266.67 T
4 10 Q
(select) 246.68 266.67 T
1 11 Q
(. These associations ar) 282.68 266.67 T
(e) 389.95 266.67 T
0 F
(static) 397.97 266.67 T
1 F
(. They ar) 421.99 266.67 T
(e deter-) 464.42 266.67 T
(mined at compile time, and you cannot change them without r) 108 252.67 T
(ecompiling the) 411.73 252.67 T
4 10 Q
(color-action) 108 238.67 T
1 11 Q
( method. Sometimes, it is useful to associate one object with) 180 238.67 T
(another) 108 224.67 T
0 F
(dynamically) 148.26 224.67 T
1 F
(, while the pr) 201.63 224.67 T
(ogram is r) 265.89 224.67 T
(unning. Collections ar) 315.2 224.67 T
(e good data) 422.47 224.67 T
-0.15 (str) 108 210.67 P
-0.15 (uctur) 120.51 210.67 P
-0.15 (es for this purpose. How could we r) 146.39 210.67 P
-0.15 (ewrite) 319.67 210.67 P
4 10 Q
-0.32 (color-action) 353.12 210.67 P
1 11 Q
-0.15 ( so that it uses a) 425.12 210.67 P
(collection to associate colors with actions?) 108 196.67 T
4 9 Q
(define variable *color-action-table* = make\050<table>, size: 3\051;) 108 176 T
(*color-action-table*[#"red"]) 108 157 T
(:= #"stop";) 280.8 157 T
(*color-action-table*[#"yellow"]) 108 146 T
(:= #"slow";) 280.8 146 T
(*color-action-table*[#"green"]) 108 135 T
(:= #"go";) 280.8 135 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "157" 171
%%Page: "158" 172
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(158) 72 677.67 T
0 F
(Chapter 11) 95.75 677.67 T
(Collections and Control Flow) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define method color-action \050color :: <symbol>\051 => \050action :: <symbol>\051) 108 642 T
(*color-action-table*[color];) 118.8 631 T
(end method color-action;) 108 620 T
1 11 Q
(The tables pr) 108 599.67 T
(ovided by Dylan use) 170.98 599.67 T
4 10 Q
(==) 274.61 599.67 T
1 11 Q
( to compar) 286.61 599.67 T
(e keys.) 338.56 599.67 T
(During the execution of the pr) 135 585.67 T
(ogram, we could add new associations to) 281.83 585.67 T
4 10 Q
-0.1 (*color-action-table*) 108 571.67 P
1 11 Q
-0.05 (, or could change or r) 228 571.67 P
-0.05 (emove existing associations. T) 331.13 571.67 P
-0.05 (ables) 476.58 571.67 P
(gr) 108 557.67 T
(ow as necessary to accommodate new associations that ar) 118.26 557.67 T
(e added.) 397.94 557.67 T
3 13 Q
(11.5.5  Sear) 108 526.33 T
(c) 166.49 526.33 T
(h of arra) 172.32 526.33 T
(ys with) 214.78 526.33 T
4 12 Q
(for) 253.89 526.33 T
3 13 Q
( and) 275.49 526.33 T
4 12 Q
(block) 300.37 526.33 T
1 11 Q
(Suppose that you wanted to sear) 108 506.67 T
(ch a two-dimensional array) 266.97 506.67 T
(, and to r) 399.3 506.67 T
(eturn the) 442.66 506.67 T
(\336rst number gr) 108 492.67 T
(eater than a given value.) 181.46 492.67 T
4 9 Q
(define method find-larger-than) 108 472 T
(\0502d-array :: <array>, value :: <integer>\051) 129.6 461 T
(=> \050result :: type-union\050singleton\050#f\051, <integer>\051\051) 113.4 450 T
(let first-dimension = dimension\0502d-array, 0\051;) 118.8 439 T
(let second-dimension = dimension\0502d-array, 1\051;) 118.8 428 T
(block \050return\051) 118.8 417 T
(for \050i from 0 below first-dimension\051) 129.6 406 T
(for \050j from 0 below second-dimension\051) 140.4 395 T
(if \0502d-array[i, j] > value\051) 151.2 384 T
(return\0502d-array[i, j]\051;) 162 373 T
(end if;) 151.2 362 T
(end for;) 140.4 351 T
(end for;) 129.6 340 T
(#f;) 129.6 329 T
(end block;) 118.8 318 T
(end method find-larger-than;) 108 307 T
1 11 Q
(In the pr) 108 286.67 T
(eceding example, the) 149.62 286.67 T
4 10 Q
(block) 254.98 286.67 T
1 11 Q
( statement binds the variable) 284.98 286.67 T
4 10 Q
(return) 427.95 286.67 T
1 11 Q
( to a) 463.95 286.67 T
2 F
(nonlocal exit procedure) 108 272.67 T
1 F
(. If this exit pr) 225.93 272.67 T
(ocedur) 293.39 272.67 T
(e is called while the) 327.05 272.67 T
4 10 Q
(block) 425.22 272.67 T
1 11 Q
( is in) 455.22 272.67 T
(ef) 108 258.67 T
(fect, it will r) 116.73 258.67 T
(eturn immediately fr) 174.85 258.67 T
(om the) 275.88 258.67 T
4 10 Q
(block) 312.36 258.67 T
1 11 Q
( statement, using any pr) 342.36 258.67 T
(ovided) 459.48 258.67 T
(ar) 108 244.67 T
(guments as r) 117.65 244.67 T
(eturn values. Thus, if an element of) 179.84 244.67 T
4 10 Q
(2d-array) 353.89 244.67 T
1 11 Q
( is gr) 401.89 244.67 T
(eater than) 425.52 244.67 T
4 10 Q
(value) 108 230.67 T
1 11 Q
(, then this element will be r) 138 230.67 T
(eturned immediately fr) 269.75 230.67 T
(om the) 382.77 230.67 T
4 10 Q
(block) 419.25 230.67 T
1 11 Q
(, and thus) 449.25 230.67 T
-0.22 (fr) 108 216.67 P
-0.22 (om the method. Array elements can be accessed with the squar) 115.81 216.67 P
-0.22 (e-bracket syntax,) 419.52 216.67 P
(or with the function) 108 202.67 T
4 10 Q
(aref) 207.75 202.67 T
1 11 Q
(. \050For mor) 231.75 202.67 T
(e information about r) 279.99 202.67 T
(efer) 383.49 202.67 T
(encing elements of) 401.84 202.67 T
(an array) 108 188.67 T
(, see Section 12.1.3, page 164.\051 If the entir) 147.24 188.67 T
(e array is sear) 344.2 188.67 T
(ched, and no ele-) 410.97 188.67 T
-0.22 (ment is found that is gr) 108 174.67 P
-0.22 (eater than) 220.1 174.67 P
4 10 Q
-0.49 (value) 271.01 174.67 P
1 11 Q
-0.22 (, then the) 301.01 174.67 P
4 10 Q
-0.49 (for) 348.26 174.67 P
1 11 Q
-0.22 ( loops exit normally and the) 366.26 174.67 P
4 10 Q
(block) 108 160.67 T
1 11 Q
( statement r) 138 160.67 T
(eturns the last value in the) 195.22 160.67 T
4 10 Q
(block) 326.51 160.67 T
1 11 Q
( body) 356.51 160.67 T
(, which in this case is) 382.96 160.67 T
(false. W) 108 146.67 T
(e use the) 145.79 146.67 T
4 10 Q
(type-union) 191.13 146.67 T
1 11 Q
( type-generating function to cr) 251.13 146.67 T
(eate a type that per-) 398.98 146.67 T
(mits either false or an integer to be r) 108 132.67 T
(eturned fr) 283.07 132.67 T
(om this method.) 331.85 132.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "158" 172
%%Page: "159" 173
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.6 Summary) 459.24 677.67 T
2 F
(159) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(11.5.6  Sear) 108 639.33 T
(c) 166.49 639.33 T
(h of arra) 172.32 639.33 T
(ys with) 214.78 639.33 T
4 12 Q
(find-key) 253.89 639.33 T
1 11 Q
(In Dylan, we can access multidimensional arrays as though they ar) 108 619.67 T
(e linearized) 432.6 619.67 T
-0.4 (one-dimensional vectors by using the) 108 605.67 P
4 10 Q
-0.87 (element) 290.82 605.67 P
1 11 Q
-0.4 ( generic function. Dylan pr) 332.82 605.67 P
-0.4 (ovides a) 461.72 605.67 P
4 10 Q
-0.13 (find-key) 108 591.67 P
1 11 Q
-0.06 ( generic function that uses) 156 591.67 P
4 10 Q
-0.13 (element) 286.02 591.67 P
1 11 Q
-0.06 ( to \336nd the index \050or key\051 that corr) 328.02 591.67 P
-0.06 (e-) 495.07 591.67 P
(sponds to a desir) 108 577.67 T
(ed value in a collection. Her) 190.41 577.67 T
(e, we r) 326.03 577.67 T
(ewrite) 358.14 577.67 T
4 10 Q
(find-larger-than) 391.73 577.67 T
1 11 Q
( to) 487.73 577.67 T
(use) 108 563.67 T
4 10 Q
(find-key) 127.32 563.67 T
1 11 Q
(:) 175.32 563.67 T
4 9 Q
(define method find-larger-than) 108 543 T
(\050array :: <array>, value :: <integer>\051) 129.6 532 T
(=> \050result :: type-union\050singleton\050#f\051, <integer>\051\051) 113.4 521 T
(let index) 118.8 510 T
(= find-key\050array, method \050array-element\051 array-element > value end\051;) 129.6 499 T
(index & array[index];) 118.8 488 T
(end method find-larger-than;) 108 477 T
1 11 Q
-0.18 (The) 108 456.67 P
4 10 Q
-0.4 (find-key) 128.98 456.67 P
1 11 Q
-0.18 ( generic function sear) 176.98 456.67 P
-0.18 (ches an array) 280.52 456.67 P
-0.18 (, calling the function that we pr) 343.36 456.67 P
-0.18 (o-) 494.33 456.67 P
-0.18 (vided on each element. If our function ever r) 108 442.67 P
-0.18 (eturns tr) 322.98 442.67 P
-0.18 (ue,) 364.3 442.67 P
4 10 Q
-0.39 (find-key) 381.52 442.67 P
1 11 Q
-0.18 ( r) 429.52 442.67 P
-0.18 (eturns the lin-) 436.24 442.67 P
(earized index of the array element containing the value. For a two-dimensional) 108 428.67 T
-0.19 (array) 108 414.67 P
-0.19 (, the linearized index is the index that would be the appr) 132.59 414.67 P
-0.19 (opriate key of a one-) 405.25 414.67 P
(dimensional array that we could constr) 108 400.67 T
(uct by placing the r) 298.6 400.67 T
(ows of the two-dimen-) 392.22 400.67 T
(sional array one after the other) 108 386.67 T
(. Rows in a two-dimensional array ar) 256.62 386.67 T
(e number) 436.33 386.67 T
(ed) 482.59 386.67 T
-0.25 (with the \336rst subscript, and the column within those r) 108 372.67 P
-0.25 (ows is number) 367.59 372.67 P
-0.25 (ed by the sec-) 438.56 372.67 P
(ond subscript.) 108 358.67 T
-0.45 (If our function never r) 135 344.67 P
-0.45 (eturns tr) 240.97 344.67 P
-0.45 (ue for any element,) 282.01 344.67 P
4 10 Q
-0.98 (find-key) 376.6 344.67 P
1 11 Q
-0.45 ( r) 424.6 344.67 P
-0.45 (eturns false. In) 431.05 344.67 P
(this example) 108 330.67 T
4 10 Q
(&) 172.59 330.67 T
1 11 Q
( is tr) 178.59 330.67 T
(uly used as a contr) 199.8 330.67 T
(ol str) 290.73 330.67 T
(uctur) 315.19 330.67 T
(e. If) 341.07 330.67 T
4 10 Q
(index) 361.96 330.67 T
1 11 Q
( is false, then) 391.96 330.67 T
4 10 Q
(&) 457.53 330.67 T
1 11 Q
( will) 463.53 330.67 T
(r) 108 316.67 T
(eturn false without executing the array access. If) 112.15 316.67 T
4 10 Q
(index) 349.35 316.67 T
1 11 Q
( is tr) 379.35 316.67 T
(ue, then the array) 400.56 316.67 T
(access occurs, and that is the value of the) 108 302.67 T
4 10 Q
(&) 309.34 302.67 T
1 11 Q
( expr) 315.34 302.67 T
(ession, and thus the value) 339.8 302.67 T
(r) 108 288.67 T
(eturned fr) 112.15 288.67 T
(om the method.) 160.93 288.67 T
3 15 Q
(11.6  Summar) 108 249 T
(y) 188.12 249 T
1 11 Q
(In this chapter) 108 228.67 T
(, we cover) 177.24 228.67 T
(ed the following:) 226.46 228.67 T
(\245) 117 208.67 T
(W) 135 208.67 T
(e showed a selection of built-in collection classes, including strings, lists,) 144.99 208.67 T
(vectors, tables, and arrays.) 135 194.67 T
(\245) 117 174.67 T
-0.06 (W) 135 174.67 P
-0.06 (e showed various iteration facilities and contr) 144.99 174.67 P
-0.06 (ol str) 366.28 174.67 P
-0.06 (uctur) 390.68 174.67 P
-0.06 (es, including) 416.56 174.67 P
4 10 Q
-0.14 (for) 481.38 174.67 P
1 11 Q
-0.06 (,) 498.56 174.67 P
4 10 Q
(do) 135 160.67 T
1 11 Q
(,) 147 160.67 T
4 10 Q
(map) 152.5 160.67 T
1 11 Q
(,) 170.5 160.67 T
4 10 Q
(while) 176 160.67 T
1 11 Q
(,) 206 160.67 T
4 10 Q
(if) 211.5 160.67 T
1 11 Q
(,) 223.5 160.67 T
4 10 Q
(case) 229 160.67 T
1 11 Q
(,) 253 160.67 T
4 10 Q
(select) 258.5 160.67 T
1 11 Q
(,) 294.5 160.67 T
4 10 Q
(block) 300 160.67 T
1 11 Q
(,) 330 160.67 T
4 10 Q
(&) 335.5 160.67 T
1 11 Q
(, and) 341.5 160.67 T
4 10 Q
(|) 368.37 160.67 T
1 11 Q
(.) 374.37 160.67 T
(\245) 117 140.67 T
(W) 135 140.67 T
(e showed a simple example of r) 144.99 140.67 T
(ecursion.) 298.21 140.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "159" 173
%%Page: "160" 174
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(160) 72 677.67 T
0 F
(Chapter 11) 95.75 677.67 T
(Collections and Control Flow) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(\245) 117 640.67 T
(W) 135 640.67 T
(e showed some basic collection functions:) 144.99 640.67 T
4 10 Q
(element) 349.81 640.67 T
1 11 Q
(,) 391.81 640.67 T
4 10 Q
(size) 397.31 640.67 T
1 11 Q
(, and) 421.31 640.67 T
4 10 Q
(find-key) 448.18 640.67 T
1 11 Q
(.) 494.96 640.67 T
(\245) 117 620.67 T
(W) 135 620.67 T
(e showed some basic sequence functions:) 144.99 620.67 T
4 10 Q
(copy-sequence) 347.72 620.67 T
1 11 Q
(, and) 425.72 620.67 T
4 10 Q
(reverse) 452.59 620.67 T
1 11 Q
(.) 494.59 620.67 T
(\245) 117 600.67 T
(W) 135 600.67 T
(e showed additional collection functions:) 144.99 600.67 T
4 10 Q
(head) 347.11 600.67 T
1 11 Q
(,) 371.11 600.67 T
4 10 Q
(tail) 376.61 600.67 T
1 11 Q
(,) 400.61 600.67 T
4 10 Q
(pair) 406.11 600.67 T
1 11 Q
(,) 429.3 600.67 T
4 10 Q
(list) 434.8 600.67 T
1 11 Q
(, and) 458.8 600.67 T
4 10 Q
(vector) 135 586.67 T
1 11 Q
(.) 170.19 586.67 T
(\245) 117 566.67 T
(W) 135 566.67 T
(e explor) 144.99 566.67 T
(ed basic sequence algorithms, and found that, although the vari-) 183.92 566.67 T
-0.19 (ous sequence classes ar) 135 552.67 P
-0.19 (e r) 247.01 552.67 P
-0.19 (elated, algorithms that ar) 258.98 552.67 P
-0.19 (e ef) 380.4 552.67 P
-0.19 (\336cient for one class of) 396.95 552.67 P
(sequence may not be appr) 135 538.67 T
(opriate for a dif) 262.09 538.67 T
(fer) 337.76 538.67 T
(ent class of sequence.) 350.84 538.67 T
(\245) 117 518.67 T
(W) 135 518.67 T
(e discussed destr) 144.99 518.67 T
(uctive versus nondestr) 227.68 518.67 T
(uctive functions.) 338.06 518.67 T
(\245) 117 498.67 T
(W) 135 498.67 T
(e demonstrated the) 144.99 498.67 T
4 10 Q
(curry) 241.55 498.67 T
1 11 Q
( function, which generates functions.) 271.55 498.67 T
(\245) 117 478.67 T
(W) 135 478.67 T
(e showed several examples of the use of closur) 144.99 478.67 T
(es as ar) 371.55 478.67 T
(guments to) 406.8 478.67 T
(iterators.) 135 464.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "160" 174
%%Page: "161" 175
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(161) 298.88 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(12) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(12) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Functions) 110 566.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
(Functions ar) 108 424.67 T
(e ubiquitous in Dylan. Generic functions and methods \321 the two) 168.29 424.67 T
-0.27 (kinds of function \321 ar) 108 410.67 P
-0.27 (e the primary means of specialization. Many common oper-) 216.1 410.67 P
(ations, such as slot r) 108 396.67 T
(efer) 205.46 396.67 T
(ences and arithmetic operations, ar) 223.81 396.67 T
(e accomplished) 393.59 396.67 T
(thr) 108 382.67 T
(ough function calls. In Dylan, unlike in many languages, functions ar) 122.14 382.67 T
(e \336rst-) 457.76 382.67 T
-0.14 (class objects. They can be the values of variables or slots, ar) 108 368.67 P
-0.14 (guments to other func-) 393.35 368.67 P
(tions, or values r) 108 354.67 T
(eturned by functions. Dylan has functions that build new func-) 188.84 354.67 T
(tions out of existing functions. Much of the power of Dylan arises thr) 108 340.67 T
(ough its) 442.89 340.67 T
(sophisticated tr) 108 326.67 T
(eatment of functions.) 182.78 326.67 T
(This chapter discusses general aspects of the operation of functions in) 135 312.67 T
(Dylan. It does not describe all aspects of functions. In particular) 108 298.67 T
(, we discuss the) 416.41 298.67 T
(pr) 108 284.67 T
(ocess of method dispatch within generic functions elsewher) 118.76 284.67 T
(e \050see Sections 5.5,) 408.72 284.67 T
(6.2, 9.3, and 18.4\051. This chapter covers thr) 108 270.67 T
(ee main topics:) 307.66 270.67 T
2 F
(1.) 117 250.67 T
1 F
(The syntax of function calls, including abbr) 135 250.67 T
(eviations for function calls) 345.08 250.67 T
2 F
(2.) 117 230.67 T
1 F
(The function-calling pr) 135 230.67 T
(otocol, and particularly the interaction between a) 246.62 230.67 T
(function and its caller) 135 216.67 T
2 F
(3.) 117 196.67 T
1 F
(The uses of functions as objects, including ways of cr) 135 196.67 T
(eating and operating) 391.4 196.67 T
(on functions) 135 182.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "161" 175
%%Page: "162" 176
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(162) 72 677.67 T
0 F
(Chapter 12) 95.75 677.67 T
(Functions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(12.1  Function-calling syntax) 108 638 T
1 11 Q
(This section describes the syntax of Dylan function calls. An explicit function call) 108 617.67 T
(consists of the operand followed by the ar) 108 603.67 T
(guments enclosed in par) 311.45 603.67 T
(entheses and) 430.36 603.67 T
(separated by commas. Several other syntactic str) 108 589.67 T
(uctur) 343.91 589.67 T
(es in Dylan ar) 369.79 589.67 T
(e also abbr) 436.95 589.67 T
(e-) 488.91 589.67 T
(viations for function calls, including the following:) 108 575.67 T
(\245) 117 555.67 T
(Slot r) 135 555.67 T
(efer) 160.46 555.67 T
(ences) 178.81 555.67 T
(\245) 117 535.67 T
(Refer) 135 535.67 T
(ences to elements of collections) 160.7 535.67 T
(\245) 117 515.67 T
(Most unary and binary operator calls) 135 515.67 T
(\245) 117 495.67 T
(Certain assignment operations) 135 495.67 T
(The r) 108 475.67 T
(emainder of this section describes these syntactic forms and the equivalent) 133.31 475.67 T
(function calls. Unless otherwise noted, all expr) 108 461.67 T
(essions that make up any of these) 334.49 461.67 T
(function calls ar) 108 447.67 T
(e evaluated fr) 185.37 447.67 T
(om left to right. \050A notable exception is an expr) 251.85 447.67 T
(es-) 480.67 447.67 T
(sion containing the assignment operator) 108 433.67 T
(, discussed in Section 12.1.6.\051 The com-) 302.6 433.67 T
-0.25 (mon left-to-right r) 108 419.67 P
-0.25 (ule makes it easy to understand the or) 195.67 419.67 P
-0.25 (der of execution of Dylan) 379.15 419.67 P
(code. But it also means that certain syntactic forms that we call) 108 405.67 T
0 F
(equivalent) 415.05 405.67 T
1 F
( \321 that) 461.1 405.67 T
-0.24 (is, syntactic forms that generally r) 108 391.67 P
-0.24 (esult in calls to the same function with the same) 271 391.67 P
(ar) 108 377.67 T
(guments \321 dif) 117.65 377.67 T
(fer in the or) 189.92 377.67 T
(der of evaluation of their components. The compo-) 246.46 377.67 T
-0.01 (nents can appear in dif) 108 363.67 P
-0.01 (fer) 218.9 363.67 P
-0.01 (ent or) 231.97 363.67 P
-0.01 (ders in otherwise equivalent syntactic forms. Usu-) 260.12 363.67 P
(ally) 108 349.67 T
(, the or) 124.8 349.67 T
(der of evaluation makes no dif) 158.46 349.67 T
(fer) 306.78 349.67 T
(ence, and you can use whichever of) 319.86 349.67 T
(the equivalent syntactic forms you \336nd most convenient.) 108 335.67 T
3 13 Q
(12.1.1  Explicit function calls) 108 304.33 T
1 11 Q
(The Dylan syntax for an explicit function call has two parts:) 108 284.67 T
2 F
(1.) 117 264.67 T
1 F
-0.09 (The function to be called \321 This is an) 135 264.67 P
2 F
-0.09 (operand) 319.63 264.67 P
1 F
-0.09 ( that is evaluated to yield the) 361.19 264.67 P
(function itself. Usually) 135 250.67 T
(, the operand is a r) 244.26 250.67 T
(efer) 334.39 250.67 T
(ence to a variable or constant) 352.73 250.67 T
-0.03 (that names the function, although it can be any expr) 135 236.67 P
-0.03 (ession \050except an opera-) 387.38 236.67 P
(tor call\051 whose value is a function. \050For information on operator calls, see) 135 222.67 T
(Sections 12.1.4 and 12.1.5.\051) 135 208.67 T
2 F
(2.) 117 188.67 T
1 F
-0.05 (The ar) 135 188.67 P
-0.05 (guments to which the function is applied \321 The ar) 165.76 188.67 P
-0.05 (guments ar) 412.19 188.67 P
-0.05 (e r) 466.92 188.67 P
-0.05 (epr) 479.04 188.67 P
-0.05 (e-) 495.07 188.67 P
(sented by a series of expr) 135 174.67 T
(essions, enclosed in par) 257.14 174.67 T
(entheses and separated by) 371.29 174.67 T
(commas. Each expr) 135 160.67 T
(ession is evaluated, and its value is passed to the func-) 228.94 160.67 T
(tion as an ar) 135 146.67 T
(gument.) 194.16 146.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "162" 176
%%Page: "163" 177
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.1 Function-calling syntax) 404.8 677.67 T
2 F
(163) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.15 (In the following function call, the function is the value of the variable) 108 640.67 P
4 10 Q
-0.33 (truncate/) 444.65 640.67 P
1 11 Q
-0.15 (;) 498.65 640.67 P
(the two ar) 108 626.67 T
(guments ar) 157.17 626.67 T
(e the value of the variable) 211.95 626.67 T
4 10 Q
(n) 340.03 626.67 T
1 11 Q
( and the number) 346.03 626.67 T
4 10 Q
(3) 429.36 626.67 T
1 11 Q
(:) 435.36 626.67 T
4 9 Q
(truncate/\050n, 3\051;) 108 606 T
1 11 Q
(A function can be obtained in other ways: for example, it might be an element of) 108 585.67 T
(an array) 108 571.67 T
(, the value of a slot of an instance, or the value r) 147.24 571.67 T
(eturned by a call to) 378.49 571.67 T
(another function. The following example calls the function that is the element of) 108 557.67 T
(an) 108 543.67 T
4 10 Q
(operations) 122.65 543.67 T
1 11 Q
( array designated by the constant) 182.65 543.67 T
4 10 Q
($trunc) 346.89 543.67 T
1 11 Q
(:) 382.89 543.67 T
4 9 Q
(operations[$trunc]\050n, 3\051;) 108 523 T
3 13 Q
(12.1.2  Slot ref) 108 493.33 T
(erences) 180.2 493.33 T
1 11 Q
-0.14 (A slot r) 108 473.67 P
-0.14 (efer) 143.38 473.67 P
-0.14 (ence is a r) 161.73 473.67 P
-0.14 (efer) 208.9 473.67 P
-0.14 (ence to the value of a slot of an instance. The syntax for a) 227.24 473.67 P
(slot r) 108 459.67 T
(efer) 132.35 459.67 T
(ence has two parts, separated by a period:) 150.7 459.67 T
(\245) 117 439.67 T
(An operand whose value is the instance) 135 439.67 T
(\245) 117 419.67 T
(The name of the slot\325s getter generic function) 135 419.67 T
(In the following slot r) 108 399.67 T
(efer) 212.94 399.67 T
(ence, the function) 231.29 399.67 T
4 10 Q
(get-employee-named) 320.15 399.67 T
1 11 Q
( r) 428.15 399.67 T
(eturns an) 435.04 399.67 T
(instance, which has a slot whose getter is named) 108 385.67 T
4 10 Q
(employee-number) 346.15 385.67 T
1 11 Q
(:) 436.15 385.67 T
4 9 Q
(get-employee-named\050"Jane"\051.employee-number;) 108 365 T
1 11 Q
-0.03 (Note that the operand that yields the instance can itself be a slot r) 108 344.67 P
-0.03 (efer) 424.79 344.67 P
-0.03 (ence, so slot) 443.14 344.67 P
(r) 108 330.67 T
(efer) 112.15 330.67 T
(ences can be chained:) 130.49 330.67 T
4 9 Q
(plant.manager.employee-number;) 108 310 T
1 11 Q
(Every slot value in Dylan is obtained by a call to the slot\325s getter generic function) 108 289.67 T
-0.32 (\050although the compiler can often optimize this generic function call to a dir) 108 275.67 P
-0.32 (ect slot) 467.95 275.67 P
(access\051. A slot r) 108 261.67 T
(efer) 182.69 261.67 T
(ence is just an abbr) 201.04 261.67 T
(eviation for a function call. W) 292.9 261.67 T
(ith one excep-) 436.25 261.67 T
(tion, the following examples ar) 108 247.67 T
(e equivalent:) 258.72 247.67 T
4 9 Q
(plant.manager;) 108 227 T
(manager\050plant\051;) 108 216 T
1 11 Q
-0.09 (The one dif) 108 195.67 P
-0.09 (fer) 162.79 195.67 P
-0.09 (ence between these examples is that, in the \336rst,) 175.87 195.67 P
4 10 Q
-0.21 (plant) 410.28 195.67 P
1 11 Q
-0.09 ( is evaluated) 440.28 195.67 P
(\336rst, wher) 108 181.67 T
(eas in the second,) 157.74 181.67 T
4 10 Q
(manager) 245.73 181.67 T
1 11 Q
( is evaluated \336rst.) 287.73 181.67 T
(In fact, you can use the slot-r) 135 167.67 T
(efer) 274.62 167.67 T
(ence syntax for mor) 292.97 167.67 T
(e than slot r) 388.87 167.67 T
(efer) 445.88 167.67 T
(ences.) 464.23 167.67 T
(The object that is the value of the left side can be any object, and the function) 108 153.67 T
(named by the right side can be any function that can take the object as an ar) 108 139.67 T
(gu-) 475.2 139.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "163" 177
%%Page: "164" 178
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(164) 72 677.67 T
0 F
(Chapter 12) 95.75 677.67 T
(Functions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.2 (ment. The function named by the right side is always called with the object that is) 108 640.67 P
(the value of the left side as its only ar) 108 626.67 T
(gument. Thus, using the) 288.31 626.67 T
4 10 Q
(plant.manager) 409.25 626.67 T
1 11 Q
(syntax is just another way of calling the function named by) 108 612.67 T
4 10 Q
(manager) 397.83 612.67 T
1 11 Q
( with the) 439.83 612.67 T
(object that is the value of) 108 598.67 T
4 10 Q
(plant) 231.59 598.67 T
1 11 Q
( as the only ar) 261.58 598.67 T
(gument. The) 329.38 598.67 T
4 10 Q
(plant) 393.76 598.67 T
1 11 Q
( object does not) 423.76 598.67 T
(have to have a) 108 584.67 T
4 10 Q
(manager) 180.86 584.67 T
1 11 Q
( slot.) 222.86 584.67 T
(In this book, we use slot-r) 135 570.67 T
(efer) 259.95 570.67 T
(ence syntax for) 278.3 570.67 T
(\245) 117 550.67 T
(A call to a getter generic function for a slot) 135 550.67 T
(\245) 117 530.67 T
(A call to a function that takes one ar) 135 530.67 T
(gument and r) 309.75 530.67 T
(eturns one value that) 375.73 530.67 T
(r) 135 516.67 T
(epr) 139.15 516.67 T
(esents a pr) 155.17 516.67 T
(operty of an object) 206.79 516.67 T
3 13 Q
(12.1.3  Element ref) 108 485.33 T
(erences) 201.54 485.33 T
1 11 Q
(Collections in Dylan include such data str) 108 465.67 T
(uctur) 310.76 465.67 T
(es as arrays, strings, lists, and) 336.65 465.67 T
(tables. Each collection has a mapping fr) 108 451.67 T
(om) 299.73 451.67 T
2 F
(keys) 318.2 451.67 T
1 F
( to) 341.42 451.67 T
2 F
(elements) 356.51 451.67 T
1 F
(. Dylan\325s syntax for) 401.72 451.67 T
(r) 108 437.67 T
(eferring to an element of a collection has two parts:) 112.15 437.67 T
2 F
(1.) 117 417.67 T
1 F
(An operand whose value is the collection) 135 417.67 T
2 F
(2.) 117 397.67 T
1 F
(An expr) 135 397.67 T
(ession, in squar) 174.41 397.67 T
(e brackets, whose value is the key that maps to the) 249.58 397.67 T
(desir) 135 383.67 T
(ed element of the collection) 159 383.67 T
-0.26 (If the collection is a multidimensional array) 108 363.67 P
-0.26 (, the key expr) 316.75 363.67 P
-0.26 (ession in squar) 381.42 363.67 P
-0.26 (e brackets) 453.31 363.67 P
(can be a series of expr) 108 349.67 T
(essions, separated by commas. Each expr) 214.17 349.67 T
(ession yields the) 413.65 349.67 T
(index for one dimension of the array) 108 335.67 T
(. \050Dylan array indices ar) 284.55 335.67 T
(e zer) 401.49 335.67 T
(o based.\051) 424.43 335.67 T
(The following example r) 135 321.67 T
(eturns the \336rst element of the array named by) 254.02 321.67 T
4 10 Q
(my-array) 108 307.67 T
1 11 Q
(:) 156 307.67 T
4 9 Q
(my-array[0];) 108 287 T
1 11 Q
(An element r) 108 266.67 T
(efer) 171.32 266.67 T
(ence, like a slot r) 189.66 266.67 T
(efer) 270.13 266.67 T
(ence, is an abbr) 288.48 266.67 T
(eviation for a function call.) 362.88 266.67 T
(The generic function) 108 252.67 T
4 10 Q
(element) 210.93 252.67 T
1 11 Q
( takes a collection and a key as ar) 252.93 252.67 T
(guments, and) 413.64 252.67 T
(r) 108 238.67 T
(eturns the element of the collection that is associated with the given key) 112.15 238.67 T
(. Except) 459.61 238.67 T
(for the or) 108 224.67 T
(der of evaluation, the following examples ar) 152.92 224.67 T
(e equivalent:) 367.47 224.67 T
4 9 Q
(my-array[0];) 108 204 T
(element\050my-array, 0\051;) 108 193 T
1 11 Q
-0.29 (For arrays of mor) 108 172.67 P
-0.29 (e than one dimension, the key expr) 191.86 172.67 P
-0.29 (ession in brackets is instead a) 360.26 172.67 P
(comma-separated series of expr) 108 158.67 T
(essions. In this case, the element r) 261.98 158.67 T
(efer) 425.24 158.67 T
(ence is an) 443.59 158.67 T
(abbr) 108 144.67 T
(eviation for a call to the) 129.81 144.67 T
4 10 Q
(aref) 246.84 144.67 T
1 11 Q
( generic function. This function takes an array) 270.84 144.67 T
-0.29 (and any number of indices as ar) 108 130.67 P
-0.29 (guments, and r) 261.66 130.67 P
-0.29 (eturns the element associated with) 334.48 130.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "164" 178
%%Page: "165" 179
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.1 Function-calling syntax) 404.8 677.67 T
2 F
(165) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(the array indices. Except for the or) 108 640.67 T
(der of evaluation, the following examples ar) 274.83 640.67 T
(e) 489.37 640.67 T
(equivalent:) 108 626.67 T
4 9 Q
(my-array[0, 2];) 108 606 T
(aref\050my-array, 0, 2\051;) 108 595 T
3 13 Q
(12.1.4  Unar) 108 565.33 T
(y operator calls) 167.96 565.33 T
1 11 Q
(Dylan has two built-in unary operators,) 108 545.67 T
4 10 Q
(-) 303.61 545.67 T
1 11 Q
( and) 309.61 545.67 T
4 10 Q
(~) 333.74 545.67 T
1 11 Q
(. The syntax for a unary operator) 339.74 545.67 T
(call has two parts:) 108 531.67 T
2 F
(1.) 117 511.67 T
1 F
(The operator) 135 511.67 T
2 F
(2.) 117 491.67 T
1 F
(An operand) 135 491.67 T
(The) 108 471.67 T
4 10 Q
(-) 129.16 471.67 T
1 11 Q
( operator performs the arithmetic negation of its operand, and the) 135.16 471.67 T
4 10 Q
(~) 457.73 471.67 T
1 11 Q
( opera-) 463.73 471.67 T
(tor performs the logical negation. Both operator calls ar) 108 457.67 T
(e abbr) 376.63 457.67 T
(eviations for func-) 406.46 457.67 T
(tion calls. The following examples ar) 108 443.67 T
(e equivalent:) 286.08 443.67 T
4 9 Q
(- time-offset;) 108 423 T
(negative\050time-offset\051;) 108 412 T
1 11 Q
(The following examples also ar) 108 391.67 T
(e equivalent:) 259.3 391.67 T
4 9 Q
(~ test-condition\050cond\051;) 108 371 T
(\134~\050test-condition\050cond\051\051;) 108 360 T
1 11 Q
-0.15 (In the pr) 108 339.67 P
-0.15 (eceding example, we must escape) 149.32 339.67 P
4 10 Q
-0.33 (~) 315.41 339.67 P
1 11 Q
-0.15 ( with) 321.41 339.67 P
4 10 Q
-0.33 (\134) 348.98 339.67 P
1 11 Q
-0.15 ( so that Dylan interpr) 354.98 339.67 P
-0.15 (ets) 458.42 339.67 P
4 10 Q
-0.33 (~) 474.54 339.67 P
1 11 Q
-0.15 ( as a) 480.54 339.67 P
(variable name, instead of as an operator) 108 325.67 T
(. This syntax indicates an explicit call to) 301.38 325.67 T
(the function that is the value of the variable named) 108 311.67 T
4 10 Q
(~) 358.39 311.67 T
1 11 Q
(.) 364.39 311.67 T
3 13 Q
(12.1.5  Binar) 108 280.33 T
(y-operator calls) 170.92 280.33 T
1 11 Q
(Dylan has 16 built-in binary operators, of the following kinds:) 108 260.67 T
(\245) 117 240.67 T
(Arithmetic operations:) 135 240.67 T
4 10 Q
(+) 247.59 240.67 T
1 11 Q
(,) 253.59 240.67 T
4 10 Q
(-) 259.08 240.67 T
1 11 Q
(,) 265.08 240.67 T
4 10 Q
(*) 270.58 240.67 T
1 11 Q
(,) 276.58 240.67 T
4 10 Q
(/) 282.08 240.67 T
1 11 Q
(, and) 288.08 240.67 T
4 10 Q
(^) 314.96 240.67 T
1 11 Q
(\245) 117 220.67 T
(Comparisons:) 135 220.67 T
4 10 Q
(=) 205.41 220.67 T
1 11 Q
(,) 211.41 220.67 T
4 10 Q
(==) 216.91 220.67 T
1 11 Q
(,) 228.91 220.67 T
4 10 Q
(<) 234.41 220.67 T
1 11 Q
(,) 240.41 220.67 T
4 10 Q
(>) 245.91 220.67 T
1 11 Q
(,) 251.91 220.67 T
4 10 Q
(<=) 257.41 220.67 T
1 11 Q
(,) 269.41 220.67 T
4 10 Q
(>=) 274.91 220.67 T
1 11 Q
(,) 286.91 220.67 T
4 10 Q
(~=) 292.41 220.67 T
1 11 Q
(, and) 304.41 220.67 T
4 10 Q
(~==) 331.28 220.67 T
1 11 Q
(\245) 117 200.67 T
(Logical operations:) 135 200.67 T
4 10 Q
(&) 230.47 200.67 T
1 11 Q
( and) 236.47 200.67 T
4 10 Q
(|) 260.59 200.67 T
1 11 Q
(\245) 117 180.67 T
(Assignment:) 135 180.67 T
4 10 Q
(:=) 199.07 180.67 T
1 11 Q
(The syntax for a binary-operator call has thr) 108 160.67 T
(ee parts:) 321.59 160.67 T
2 F
(1.) 117 140.67 T
1 F
(An expr) 135 140.67 T
(ession that serves as the \336rst operand) 174.41 140.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "165" 179
%%Page: "166" 180
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(166) 72 677.67 T
0 F
(Chapter 12) 95.75 677.67 T
(Functions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
2 11 Q
0 X
(2.) 117 640.67 T
1 F
(The operator) 135 640.67 T
2 F
(3.) 117 620.67 T
1 F
(An expr) 135 620.67 T
(ession that serves as the second operand) 174.41 620.67 T
-0.46 (All binary-operator calls, except those to the logical and assignment operators, ar) 108 600.67 P
-0.46 (e) 496.43 600.67 P
-0.04 (abbr) 108 586.67 P
-0.04 (eviations for calls to functions that have the same names as do the operators.) 129.81 586.67 P
(Except for the or) 108 572.67 T
(der of evaluation, the following examples ar) 188.42 572.67 T
(e equivalent:) 402.96 572.67 T
4 9 Q
(a + b;) 108 552 T
(\134+\050a, b\051;) 108 541 T
1 11 Q
(The) 108 520.67 T
4 10 Q
(&) 129.16 520.67 T
1 11 Q
( and) 135.16 520.67 T
4 10 Q
(|) 159.29 520.67 T
1 11 Q
( operators ar) 165.29 520.67 T
(e implemented as) 226.77 520.67 T
2 F
(macros) 315.4 520.67 T
1 F
(. \050For information on macr) 350.85 520.67 T
(os,) 479.4 520.67 T
(see Chapter 21,) 108 506.67 T
0 F
(Macr) 187.46 506.67 T
(os) 211.29 506.67 T
1 F
(.\051 In an expr) 220.45 506.67 T
(ession that includes the) 278.83 506.67 T
4 10 Q
(&) 395.34 506.67 T
1 11 Q
( operator) 401.34 506.67 T
(, if the \336rst) 444.95 506.67 T
(operand has a false value, the second operand is not evaluated. In an expr) 108 492.67 T
(ession) 466.81 492.67 T
(that includes the) 108 478.67 T
4 10 Q
(|) 191.56 478.67 T
1 11 Q
( operator) 197.56 478.67 T
(, if the \336rst operand has a tr) 241.16 478.67 T
(ue value, the second oper-) 375.29 478.67 T
(and is not evaluated.) 108 464.67 T
3 13 Q
(12.1.6  Assignment) 108 433.33 T
1 11 Q
(The assignment binary operator) 108 413.67 T
(,) 262.68 413.67 T
4 10 Q
(:=) 268.18 413.67 T
1 11 Q
(, also is implemented as a macr) 280.18 413.67 T
(o. An expr) 431.53 413.67 T
(es-) 482.45 413.67 T
(sion that includes this operator works in a special way) 108 399.67 T
(.) 370.9 399.67 T
(The operand to the) 135 385.67 T
0 F
(right) 230.12 385.67 T
1 F
( of the operator is evaluated \336rst. The r) 252.12 385.67 T
(esult is the) 441.03 385.67 T
(new value to be assigned.) 108 371.67 T
(The operand to the) 135 357.67 T
0 F
(left) 230.12 357.67 T
1 F
( of the operator determines the place to which the) 244.18 357.67 T
(new value is assigned. This operand can have one of the following kinds of) 108 343.67 T
(syntax:) 108 329.67 T
(V) 108 303.67 T
(ariable name) 114.93 303.67 T
(The variable name is not evaluated. Dylan assigns the new) 216 303.67 T
(value to the variable.) 216 289.67 T
(Explicit function call) 108 263.67 T
(Dylan calls the function) 216 263.67 T
0 F
(name) 334.22 263.67 T
4 10 Q
(-setter) 358.05 263.67 T
1 11 Q
(, wher) 400.05 263.67 T
(e) 430.55 263.67 T
0 F
(name) 438.57 263.67 T
1 F
( is the) 462.4 263.67 T
-0.46 (name of the function in the function call. The \336rst ar) 216 249.67 P
-0.46 (gument) 463.99 249.67 P
(to) 216 235.67 T
0 F
(name) 228.34 235.67 T
4 10 Q
(-setter) 252.18 235.67 T
1 11 Q
( is the new value, and the r) 294.18 235.67 T
(emaining ar) 424.99 235.67 T
(gu-) 483.19 235.67 T
(ments ar) 216 221.67 T
(e the ar) 258.03 221.67 T
(guments to) 293.7 221.67 T
0 F
(name) 351.18 221.67 T
1 F
( in the original function) 375.02 221.67 T
(call.) 216 207.67 T
(Slot r) 108 181.67 T
(efer) 133.46 181.67 T
(ence) 151.81 181.67 T
(Dylan \336rst converts the slot r) 216 181.67 T
(efer) 356.96 181.67 T
(ence to the corr) 375.31 181.67 T
(esponding) 449.62 181.67 T
(function call. Dylan then calls the function) 216 167.67 T
0 F
(name) 424.44 167.67 T
4 10 Q
(-setter) 448.28 167.67 T
1 11 Q
(just as it would have if the slot r) 216 153.67 T
(efer) 371.25 153.67 T
(ence had been an) 389.6 153.67 T
(explicit function call.) 216 139.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "166" 180
%%Page: "167" 181
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.2 The function-calling protocol) 385.9 677.67 T
2 F
(167) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Element r) 108 640.67 T
(efer) 155.06 640.67 T
(ence) 173.41 640.67 T
(Dylan \336rst converts the element r) 216 640.67 T
(efer) 378.22 640.67 T
(ence to the corr) 396.57 640.67 T
(e-) 470.87 640.67 T
-0.16 (sponding function call, using) 216 626.67 P
4 10 Q
-0.35 (element) 359.81 626.67 P
1 11 Q
-0.16 ( or) 401.81 626.67 P
4 10 Q
-0.35 (aref) 417.34 626.67 P
1 11 Q
-0.16 ( as the name) 441.34 626.67 P
(of the function, as appr) 216 612.67 T
(opriate. Dylan then calls the func-) 328.49 612.67 T
(tion) 216 598.67 T
4 10 Q
(element-setter) 237.95 598.67 T
1 11 Q
( or) 321.95 598.67 T
4 10 Q
(aref-setter) 337.8 598.67 T
1 11 Q
( just as it would) 403.8 598.67 T
(have if the element r) 216 584.67 T
(efer) 315.36 584.67 T
(ence had been an explicit function) 333.71 584.67 T
(call.) 216 570.67 T
(Except for the or) 108 550.67 T
(der of evaluation and r) 188.42 550.67 T
(eturned values, the following examples) 299.71 550.67 T
(ar) 108 536.67 T
(e equivalent:) 117.65 536.67 T
4 9 Q
(*my-position*.distance := 3.0;) 108 516 T
(distance\050*my-position*\051 := 3.0;) 108 505 T
(distance-setter\0503.0, *my-position*\051;) 108 494 T
1 11 Q
(The \336rst two examples r) 108 473.67 T
(eturn) 225.48 473.67 T
4 10 Q
(3.0) 254.46 473.67 T
1 11 Q
(; the second r) 272.46 473.67 T
(eturns whatever) 336.82 473.67 T
4 10 Q
(distance-) 418.97 473.67 T
(setter) 108 459.67 T
1 11 Q
( r) 144 459.67 T
(eturns. Usually) 150.9 459.67 T
(, this value would be) 223.95 459.67 T
4 10 Q
(3.0) 328.21 459.67 T
1 11 Q
(. Note that, if) 346.21 459.67 T
4 10 Q
(distance) 412.65 459.67 T
1 11 Q
( is the) 460.65 459.67 T
-0.01 (name of a slot\325s getter) 108 445.67 P
-0.01 (, and if the slot is constant or has a setter with a name other) 213.55 445.67 P
(than) 108 431.67 T
4 10 Q
(distance-setter) 132.64 431.67 T
1 11 Q
(, then the assignment operation r) 221.83 431.67 T
(esults in an err) 381.83 431.67 T
(or) 453.36 431.67 T
(.) 462.9 431.67 T
(Except for the or) 135 417.67 T
(der of evaluation and r) 215.42 417.67 T
(eturned values, the following exam-) 326.71 417.67 T
(ples ar) 108 403.67 T
(e equivalent:) 140.14 403.67 T
4 9 Q
(vertices[2] := list\0503.5, 4.5\051;) 108 383 T
(element\050vertices, 2\051 := list\0503.5, 4.5\051;) 108 372 T
(element-setter\050list\0503.5, 4.5\051, vertices, 2\051;) 108 361 T
3 15 Q
(12.2  The function-calling pr) 108 323 T
(otocol) 271.14 323 T
1 11 Q
(W) 108 302.67 T
(e have seen that Dylan has two kinds of function: methods and generic func-) 117.99 302.67 T
(tions. Both can be called; fr) 108 288.67 T
(om the caller) 238.55 288.67 T
(\325s point of view) 302.24 288.67 T
(, the two ar) 376.53 288.67 T
(e called in the) 431.2 288.67 T
(same way) 108 274.67 T
(. When a generic function is called, Dylan selects one of its methods to) 155.46 274.67 T
(execute, in a pr) 108 260.67 T
(ocess called method dispatch. This section discusses the interac-) 181.45 260.67 T
(tion between a function and that function\325s caller) 108 246.67 T
(, focusing on ar) 345.56 246.67 T
(guments, param-) 420.18 246.67 T
(eters, value declarations, and r) 108 232.67 T
(eturned values. W) 256.5 232.67 T
(e discuss interactions between) 344.45 232.67 T
(generic functions and their methods but do not describe the pr) 108 218.67 T
(ocess of method) 411.69 218.67 T
(dispatch. For information on method dispatch, see Section 5.5, page 63; Section) 108 204.67 T
(6.2, page 79; Section 9.3, page 1) 108 190.67 T
(1) 258.26 190.67 T
(1; and Section 18.4, page 300.) 263.15 190.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "167" 181
%%Page: "168" 182
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(168) 72 677.67 T
0 F
(Chapter 12) 95.75 677.67 T
(Functions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(12.2.1  P) 108 639.33 T
(arameter) 150.37 639.33 T
(s, ar) 195.26 639.33 T
(guments, and return v) 217.04 639.33 T
(alues) 328.8 639.33 T
1 11 Q
(In Dylan, a function is called with zer) 108 619.67 T
(o or mor) 290.04 619.67 T
(e) 331.76 619.67 T
2 F
(arguments) 339.78 619.67 T
1 F
(. The function can per-) 392.94 619.67 T
(form computations, which may have side ef) 108 605.67 T
(fects. It then) 321.14 605.67 T
2 F
(returns) 383.15 605.67 T
1 F
( zer) 419.2 605.67 T
(o or mor) 436.87 605.67 T
(e) 478.59 605.67 T
2 F
(values) 108 591.67 T
1 F
( to its caller) 140.38 591.67 T
(. Each ar) 195.26 591.67 T
(gument and each r) 236.67 591.67 T
(eturned value is an object.) 327.46 591.67 T
(A function has zer) 135 577.67 T
(o or mor) 224.07 577.67 T
(e) 265.79 577.67 T
2 F
(parameters) 273.81 577.67 T
1 F
( that determine the number and) 329.41 577.67 T
(types of ar) 108 563.67 T
(guments that the function takes. Following is a simpli\336ed description) 159.06 563.67 T
-0.24 (of what happens when a function is called \050for a generic function, this description) 108 549.67 P
(applies to the method that it invokes\051:) 108 535.67 T
2 F
(1.) 117 515.67 T
1 F
(An implicit) 135 515.67 T
2 F
(body) 193.06 515.67 T
1 F
( is enter) 218.73 515.67 T
(ed. A body establishes the scope for all local vari-) 256.77 515.67 T
(ables bound inside the body) 135 501.67 T
(.) 270.98 501.67 T
2 F
(2.) 117 481.67 T
1 F
(The parameters ar) 135 481.67 T
(e matched with the ar) 223.36 481.67 T
(guments to the function.) 328.97 481.67 T
2 F
(3.) 117 461.67 T
1 F
(A local variable is cr) 135 461.67 T
(eated with the name of each parameter) 233.56 461.67 T
(.) 421.96 461.67 T
2 F
(4.) 117 441.67 T
1 F
(Each parameter \321 that is, each local variable with the name of a parameter) 135 441.67 T
(\321 is initialized, or bound, to one of the ar) 135 427.67 T
(guments. \050In some cases, the) 337.14 427.67 T
(parameter is bound to a list of ar) 135 413.67 T
(guments, or to a default value.\051) 293.16 413.67 T
2 F
(5.) 117 393.67 T
1 F
(The code that makes up the actual body of the function is executed.) 135 393.67 T
-0.21 (A function can have a) 108 373.67 P
2 F
-0.21 (value declaration) 215.7 373.67 P
1 F
-0.21 ( that determines the number and types of) 301.94 373.67 P
-0.39 (values the function r) 108 359.67 P
-0.39 (eturns. If ther) 206.74 359.67 P
-0.39 (e is no explicit declaration, a default declaration) 271.89 359.67 P
(allows the function to r) 108 345.67 T
(eturn any number of values of any type. Following is a) 220.52 345.67 T
(simpli\336ed description of what happens when a function r) 108 331.67 T
(eturns \050for a generic) 387.59 331.67 T
(function, this description applies to the method that it invokes\051:) 108 317.67 T
2 F
(1.) 117 297.67 T
1 F
(The values r) 135 297.67 T
(eturned by the last expr) 194.54 297.67 T
(ession in the function\325s implicit body) 309.88 297.67 T
(ar) 135 283.67 T
(e matched with the values declar) 144.65 283.67 T
(ed in the value declaration.) 304.57 283.67 T
2 F
(2.) 117 263.67 T
1 F
-0.13 (The function\325s implicit body is exited, ending the scope of all local variables) 135 263.67 P
(\050including parameters\051 established in that body) 135 249.67 T
(.) 364.58 249.67 T
2 F
(3.) 117 229.67 T
1 F
-0.36 (The values speci\336ed by the value declaration ar) 135 229.67 P
-0.36 (e r) 363.45 229.67 P
-0.36 (eturned to the caller of the) 375.25 229.67 P
(function. \050Depending on the value declaration, the number of values) 135 215.67 T
(r) 135 201.67 T
(eturned to the function\325s caller might be mor) 139.15 201.67 T
(e or less than the number of) 356.61 201.67 T
(values r) 135 187.67 T
(eturned by the last expr) 173.38 187.67 T
(ession in the function\325s body) 288.71 187.67 T
(.\051) 426.98 187.67 T
(Note these two important implications of the way that ar) 108 167.67 T
(guments ar) 384.27 167.67 T
(e passed:) 439.05 167.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "168" 182
%%Page: "169" 183
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.2 The function-calling protocol) 385.9 677.67 T
2 F
(169) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(\245) 117 640.67 T
(All bindings of ar) 135 640.67 T
(guments to parameters ar) 220.32 640.67 T
(e local to the body of the func-) 344.99 640.67 T
(tion called. Assignment to a parameter inside the called function\325s body) 135 626.67 T
(does not af) 135 612.67 T
(fect any variables outside the body that have the same name.) 188.12 612.67 T
(For example, consider these de\336nitions:) 135 592.67 T
4 9 Q
(define method calling-function \050\051) 135 572 T
(let x = 1;) 145.8 561 T
(let y = 2;) 145.8 550 T
(format-out\050"In calling function, before call: x = %d, y = %d\134n",) 145.8 539 T
(x, y\051;) 205.2 528 T
(called-function\050x, y\051;) 145.8 517 T
(format-out\050"In calling function, after call: x = %d, y = %d\134n", x, y\051;) 145.8 506 T
(end method calling-function;) 135 495 T
(define method called-function \050x, y\051) 135 476 T
(x := 3;) 145.8 465 T
(y := 4;) 145.8 454 T
(format-out\050"In called function, before return: x = %d, y = %d\134n",) 145.8 443 T
(x, y\051;) 205.2 432 T
(end method called-function;) 135 421 T
1 11 Q
(A call to) 135 400.67 T
4 10 Q
(calling-function) 178.19 400.67 T
1 11 Q
( pr) 274.19 400.67 T
(oduces the following output:) 287.69 400.67 T
6 9 Q
(In calling function, before call: x = 1, y = 2) 135 380 T
(In called function, before return: x = 3, y = 4) 135 369 T
(In calling function, after call: x = 1, y = 2) 135 358 T
1 11 Q
(\245) 117 337.67 T
(Although) 135 337.67 T
0 F
(parameters) 184.65 337.67 T
1 F
( ar) 233.54 337.67 T
(e local to a function, all) 245.93 337.67 T
0 F
(ar) 361.02 337.67 T
(guments) 369.98 337.67 T
1 F
( and) 408.49 337.67 T
0 F
(r) 432.62 337.67 T
(eturn values) 436.7 337.67 T
1 F
(ar) 135 323.67 T
(e shar) 144.65 323.67 T
(ed between a function and its caller) 173.38 323.67 T
(. If an ar) 344.86 323.67 T
(gument or r) 384.78 323.67 T
(eturn value) 442.49 323.67 T
(is a) 135 309.67 T
2 F
(mutable) 153.87 309.67 T
1 F
( object \321 one that can be changed \321 then any changes that a) 195.41 309.67 T
(function makes to that object ar) 135 295.67 T
(e visible to its caller) 287.5 295.67 T
(.) 382.24 295.67 T
(Consider the following de\336nitions:) 135 275.67 T
4 9 Q
(define class <test> \050<object>\051) 135 255 T
(slot test-slot, required-init-keyword: test-slot:;) 145.8 244 T
(end class <test>;) 135 233 T
(define method calling-function \050\051) 135 214 T
(let x = make\050<test>, test-slot: "before"\051;) 145.8 203 T
(format-out\050"In calling function, before call: x.test-slot = %s\134n",) 145.8 192 T
(x.test-slot\051;) 205.2 181 T
(called-function\050x\051;) 145.8 170 T
(format-out\050"In calling function, after call: x.test-slot = %s\134n",) 145.8 159 T
(x.test-slot\051;) 205.2 148 T
(end method calling-function;) 135 137 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "169" 183
%%Page: "170" 184
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(170) 72 677.67 T
0 F
(Chapter 12) 95.75 677.67 T
(Functions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define method called-function \050x :: <test>\051) 135 642 T
(x.test-slot := "after";) 145.8 631 T
(format-out\050"In called function, before return: x.test-slot = %s\134n",) 145.8 620 T
(x.test-slot\051;) 205.2 609 T
(end method called-function;) 135 598 T
1 11 Q
-0.31 (Note her) 135 577.67 P
-0.31 (e that we have r) 177.26 577.67 P
-0.31 (ede\336ned the) 253.34 577.67 P
4 10 Q
-0.68 (calling-function) 315.78 577.67 P
1 11 Q
-0.31 ( method, and have) 411.78 577.67 P
-0.04 (de\336ned a new) 135 563.67 P
4 10 Q
-0.08 (called-function) 206.52 563.67 P
1 11 Q
-0.04 ( method, which we \336rst de\336ned in the pr) 296.52 563.67 P
-0.04 (e-) 495.07 563.67 P
(vious example. Our new) 135 549.67 T
4 10 Q
(called-function) 257.18 549.67 T
1 11 Q
( method has one parameter) 347.18 549.67 T
(,) 479.44 549.67 T
(wher) 135 535.67 T
(eas the pr) 159.99 535.67 T
(evious method had two. The parameter list of this new) 206.94 535.67 T
(method is not compatible with that of the pr) 135 521.67 T
(evious method, and, if we actu-) 349.73 521.67 T
(ally tried to de\336ne the second) 135 507.67 T
4 10 Q
(called-function) 281.75 507.67 T
1 11 Q
( method, Dylan would sig-) 371.75 507.67 T
(nal an err) 135 493.67 T
(or) 181.27 493.67 T
(. For mor) 190.8 493.67 T
(e information on compatibility of parameter lists for) 235.39 493.67 T
(generic functions and methods, see Section 12.2.5.) 135 479.67 T
(A call to) 135 459.67 T
4 10 Q
(calling-function) 178.19 459.67 T
1 11 Q
( now pr) 274.19 459.67 T
(oduces the following output:) 312.03 459.67 T
6 9 Q
(In calling function, before call: x.test-slot = "before") 135 439 T
(In called function, before return: x.test-slot = "after") 135 428 T
(In calling function, after call: x.test-slot = "after") 135 417 T
1 11 Q
-0.37 (In this case,) 135 396.67 P
4 10 Q
-0.8 (x) 193.18 396.67 P
1 11 Q
-0.37 ( in the calling function and) 199.18 396.67 P
4 10 Q
-0.8 (x) 330.26 396.67 P
1 11 Q
-0.37 ( in the called function ar) 336.26 396.67 P
-0.37 (e dif) 452.24 396.67 P
-0.37 (fer) 473.28 396.67 P
-0.37 (ent) 486.36 396.67 P
-0.25 (variables. But the) 135 382.67 P
0 F
-0.25 (values) 221.41 382.67 P
1 F
-0.25 ( of both variables ar) 249.53 382.67 P
-0.25 (e the same object: the instance of) 344.88 382.67 P
4 10 Q
(<test>) 135 368.67 T
1 11 Q
( that we make in the calling function. The change to the slot value) 171 368.67 T
(of this object that we make in the called function is visible to the calling) 135 354.67 T
(function.) 135 340.67 T
(It is equally pr) 135 320.67 T
(oper to think of ar) 205.25 320.67 T
(guments that ar) 293.09 320.67 T
(e) 369.7 320.67 T
2 F
(immutable) 377.71 320.67 T
1 F
(, like integers,) 432.7 320.67 T
(as being shar) 135 306.67 T
(ed between a function and its caller) 198.45 306.67 T
(. By de\336nition, however) 369.93 306.67 T
(, a) 485.82 306.67 T
(function cannot make any changes to such objects that ar) 135 292.67 T
(e visible to the) 411.12 292.67 T
(function\325s caller) 135 278.67 T
(.) 211.84 278.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "170" 184
%%Page: "171" 185
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.2 The function-calling protocol) 385.9 677.67 T
2 F
(171) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
0 X
(Comparison with C and C++:) 141 620.67 T
1 F
( As in Dylan, the parameters of a C) 287.84 620.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(function ar) 141 606.67 T
(e local to the body of the function, and assignment to a) 194.17 606.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(parameter does not af) 141 592.67 T
(fect the value of a variable that has the same) 247.01 592.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.48 (name in the function\325s caller) 141 578.67 P
-0.48 (. But the r) 275.89 578.67 P
-0.48 (elationship between) 321.79 578.67 P
2 F
-0.48 (objects) 421.41 578.67 P
1 F
-0.48 ( and) 456.84 578.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.37 (values) 141 564.67 P
1 F
-0.37 ( is not the same in C and in Dylan. In C, a value can be an object) 173.38 564.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050r) 141 550.67 T
(oughly meaning the contents of the object\051 or a) 148.81 550.67 T
2 F
(pointer) 379.54 550.67 T
1 F
( to an object) 416.2 550.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050r) 141 536.67 T
(oughly meaning the location of the object in memory\051. The value of) 148.81 536.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(a parameter in C is always a copy of the corr) 141 522.67 T
(esponding ar) 356.98 522.67 T
(gument.) 420.77 522.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(When a C str) 141 508.67 T
(uctur) 204.13 508.67 T
(e is an ar) 230.01 508.67 T
(gument to a function, the value of the cor-) 272.95 508.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.02 (r) 141 494.67 P
-0.02 (esponding parameter is a copy of the str) 145.15 494.67 P
-0.02 (uctur) 340.18 494.67 P
-0.02 (e; it is not the str) 366.06 494.67 P
-0.02 (uctur) 446.12 494.67 P
-0.02 (e) 472 494.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(itself. If the function changes the value of a member of this str) 141 480.67 T
(uctur) 440.64 480.67 T
(e,) 466.52 480.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.21 (the change is not visible to the caller) 141 466.67 P
-0.21 (, because the function is changing) 314.76 466.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.31 (only its own copy of the str) 141 452.67 P
-0.31 (uctur) 271.43 452.67 P
-0.31 (e. But if the ar) 297.31 452.67 P
-0.31 (gument is a pointer to a) 363.78 452.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(str) 141 438.67 T
(uctur) 153.51 438.67 T
(e, the function can gain access to the caller) 179.39 438.67 T
(\325s str) 385.38 438.67 T
(uctur) 408.36 438.67 T
(e \050by) 434.24 438.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(dereferencing) 141 424.67 T
1 F
( the pointer\051. If the function changes the value of a) 210.66 424.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.42 (member of such a str) 141 410.67 P
-0.42 (uctur) 240.96 410.67 P
-0.42 (e by der) 266.84 410.67 P
-0.42 (efer) 305.1 410.67 P
-0.42 (encing the pointer) 323.45 410.67 P
-0.42 (, the change is) 410.24 410.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(visible to the caller) 141 396.67 T
(.) 231.52 396.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(In Dylan, a value is always an object, which has a unique) 168 382.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.09 (identity) 141 368.67 P
-0.09 (. The value of a parameter is always the same object as the) 177.86 368.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.23 (corr) 141 354.67 P
-0.23 (esponding ar) 160.38 354.67 P
-0.23 (gument. When a function changes such an object) 223.94 354.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.21 (\050as by changing the value of a slot\051, the change is always visible to) 141 340.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the caller) 141 326.67 T
(. Dylan has no equivalent to C pointers.) 184.59 326.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(In C++, a parameter declar) 168 312.67 T
(ed using or) 298.35 312.67 T
(dinary C syntax also) 353.01 312.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.16 (r) 141 298.67 P
-0.16 (eceives a copy of a str) 145.15 298.67 P
-0.16 (uctur) 249.65 298.67 P
-0.16 (e or an instance that is the corr) 275.54 298.67 P
-0.16 (espond-) 422.66 298.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ing ar) 141 284.67 T
(gument. C++ has additional syntax for declaring that a) 169.12 284.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.4 (parameter is a) 141 270.67 P
2 F
-0.4 (reference) 211.56 270.67 P
1 F
-0.4 ( \321 essentially an implicit pointer \321 to the) 258 270.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(corr) 141 256.67 T
(esponding ar) 160.38 256.67 T
(gument. In this case the ar) 224.17 256.67 T
(gument is not copied,) 351.57 256.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.05 (and if the function changes the object that the parameter r) 141 242.67 P
-0.05 (efers to,) 421.05 242.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the changes ar) 141 228.67 T
(e visible to the caller) 210.64 228.67 T
(. In some ways Dylan\325s ar) 309.18 228.67 T
(gu-) 434 228.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ment-passing pr) 141 214.67 T
(otocol is similar to C++ r) 220.3 214.67 T
(efer) 340.3 214.67 T
(ences.) 358.65 214.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(In both C and C++, array ar) 168 200.67 T
(guments ar) 302.44 200.67 T
(e always passed as) 357.22 200.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pointers. In Dylan, arrays ar) 141 186.67 T
(e instances of the) 277.54 186.67 T
4 10 Q
(<array>) 363.31 186.67 T
1 11 Q
( class, and) 405.31 186.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(array ar) 141 172.67 T
(guments ar) 179.2 172.67 T
(e tr) 233.98 172.67 T
(eated like all other ar) 249.74 172.67 T
(guments.) 352.02 172.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(For mor) 168 158.67 T
(e comparisons between Dylan and C objects, see) 207.08 158.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Appendix B,) 141 144.67 T
0 F
(Dylan Object Model for C and C++ Pr) 207.77 144.67 T
(ogrammers) 379.9 144.67 T
1 F
(.) 429.4 144.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 633.88 135 137.13 2 L
V
0.25 H
0 Z
N
486 633.88 486 137.13 2 L
V
N
134.88 634 486.12 634 2 L
V
N
134.88 137 486.12 137 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "171" 185
%%Page: "172" 186
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(172) 72 677.67 T
0 F
(Chapter 12) 95.75 677.67 T
(Functions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(12.2.2  Return and reception of m) 108 639.33 T
(ultiple v) 276.05 639.33 T
(alues) 316.14 639.33 T
1 11 Q
(A Dylan function call \321 and, in general, a Dylan expr) 108 619.67 T
(ession \321 can r) 369.12 619.67 T
(eturn any) 439.51 619.67 T
-0.1 (number of values, including none. The) 108 605.67 P
4 10 Q
-0.22 (values) 298.24 605.67 P
1 11 Q
-0.1 ( function is the means of r) 334.24 605.67 P
-0.1 (eturning) 459.4 605.67 P
-0.18 (multiple values. This function takes zer) 108 591.67 P
-0.18 (o or mor) 298.35 591.67 P
-0.18 (e ar) 339.71 591.67 P
-0.18 (guments, and r) 357.2 591.67 P
-0.18 (eturns them as) 430.25 591.67 P
(separate values.) 108 577.67 T
(Multiple values can be r) 135 563.67 T
(eceived as the initial values of local variables in a) 251.88 563.67 T
4 10 Q
-0.91 (let) 108 549.67 P
1 11 Q
-0.42 ( declaration. If a) 126 549.67 P
4 10 Q
-0.91 (let) 205.57 549.67 P
1 11 Q
-0.42 ( declaration contains multiple variables, they ar) 223.57 549.67 P
-0.42 (e matched) 451.99 549.67 P
(with the values r) 108 535.67 T
(eturned by the initialization expr) 189.5 535.67 T
(ession, and each variable is) 349.57 535.67 T
(bound to the corr) 108 521.67 T
(esponding value. The following example initializes) 192.33 521.67 T
4 10 Q
(a) 443.33 521.67 T
1 11 Q
( to) 449.33 521.67 T
4 10 Q
(1) 464.43 521.67 T
1 11 Q
( and) 470.43 521.67 T
4 10 Q
(b) 494.55 521.67 T
1 11 Q
(to) 108 507.67 T
4 10 Q
(2:) 120.34 507.67 T
4 9 Q
(let \050a, b\051 = values\0501, 2\051;) 108 487 T
1 11 Q
-0.39 (The following example initializes) 108 466.67 P
4 10 Q
-0.85 (ans) 270.99 466.67 P
1 11 Q
-0.39 ( to) 288.99 466.67 P
4 10 Q
-0.85 (2) 303.3 466.67 P
1 11 Q
-0.39 ( and) 309.3 466.67 P
4 10 Q
-0.85 (rem) 332.65 466.67 P
1 11 Q
-0.39 ( to) 350.65 466.67 P
4 10 Q
-0.85 (1) 364.96 466.67 P
1 11 Q
-0.39 ( \321 the two values r) 370.96 466.67 P
-0.39 (eturned) 463.41 466.67 P
(by this call to) 108 452.67 T
4 10 Q
(truncate/) 175.43 452.67 T
1 11 Q
(:) 229.43 452.67 T
4 9 Q
(let \050ans, rem\051 = truncate/\0505, 2\051;) 108 432 T
1 11 Q
(The variable list can also end with) 108 411.67 T
4 10 Q
(#rest) 276.54 411.67 T
1 11 Q
( followed by the name of a variable. In) 306.54 411.67 T
(this case, the variable is initialized to a sequence. This sequence contains all the) 108 397.67 T
(r) 108 383.67 T
(emaining values r) 112.15 383.67 T
(eturned by the initialization expr) 199.08 383.67 T
(ession. If ther) 359.15 383.67 T
(e is no) 424.38 383.67 T
4 10 Q
(#rest) 458.17 383.67 T
1 11 Q
(,) 488.17 383.67 T
-0.01 (any excess values ar) 108 369.67 P
-0.01 (e discar) 205.8 369.67 P
-0.01 (ded. If the number of variables in the) 242.93 369.67 P
4 10 Q
-0.02 (let) 425.9 369.67 P
1 11 Q
-0.01 ( declaration) 443.9 369.67 P
(is gr) 108 355.67 T
(eater than the number of values r) 128.88 355.67 T
(eturned, the r) 290.24 355.67 T
(emaining variables ar) 356.12 355.67 T
(e initial-) 461.05 355.67 T
(ized to) 108 341.67 T
4 10 Q
(#f) 143.78 341.67 T
1 11 Q
(. \050But if the) 155.78 341.67 T
4 10 Q
(let) 212.26 341.67 T
1 11 Q
( declaration speci\336es a type for any of these variables,) 230.26 341.67 T
(and if) 108 327.67 T
4 10 Q
(#f) 138.99 327.67 T
1 11 Q
( is not an instance of that type, then Dylan signals an err) 150.99 327.67 T
(or) 423.53 327.67 T
(.\051) 433.07 327.67 T
(Module variables and constants can also be initialized to multiple values.) 135 313.67 T
(The variable list of a) 108 299.67 T
4 10 Q
(define variable) 209.3 299.67 T
1 11 Q
( or) 299.3 299.67 T
4 10 Q
(define constant) 315.15 299.67 T
1 11 Q
( de\336nition can con-) 405.15 299.67 T
(tain multiple variables, and can r) 108 285.67 T
(eceive multiple values fr) 268.14 285.67 T
(om its initialization) 387.2 285.67 T
(expr) 108 271.67 T
(ession in the same way as a) 129.7 271.67 T
4 10 Q
(let) 265.62 271.67 T
1 11 Q
( declaration.) 283.62 271.67 T
3 13 Q
(12.2.3  P) 108 240.33 T
(arameter lists) 150.37 240.33 T
1 11 Q
-0.09 (A function\325s parameter list is speci\336ed in the function de\336nition. \050If Dylan implic-) 108 220.67 P
-0.24 (itly de\336nes a function, such as the getter and setter functions for a slot, Dylan also) 108 206.67 P
(de\336nes the parameter list for that function.\051 In a function de\336nition, the parame-) 108 192.67 T
(ter list follows the function name and consists of zer) 108 178.67 T
(o or mor) 360.71 178.67 T
(e parameter speci\336-) 402.44 178.67 T
(cations, separated by commas and enclosed in par) 108 164.67 T
(entheses. A parameter list can) 351.29 164.67 T
(have thr) 108 150.67 T
(ee kinds of parameters:) 148.27 150.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "172" 186
%%Page: "173" 187
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.2 The function-calling protocol) 385.9 677.67 T
2 F
(173) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
2 11 Q
0 X
(1.) 117 640.67 T
(Required parameters) 135 640.67 T
1 F
( specify r) 240.4 640.67 T
(equir) 284.46 640.67 T
(ed ar) 309.87 640.67 T
(guments, or ar) 334.25 640.67 T
(guments that must) 404.89 640.67 T
(be supplied when the function is called. All r) 135 626.67 T
(equir) 353.04 626.67 T
(ed parameters appear) 378.45 626.67 T
(befor) 135 612.67 T
(e other kinds of parameters in the parameter list.) 160.17 612.67 T
2 F
(2.) 117 592.67 T
1 F
(A function can have at most one) 135 592.67 T
2 F
(rest parameter) 294.49 592.67 T
1 F
(, which allows the function) 366.29 592.67 T
-0.42 (to accept a variable number of ar) 135 578.67 P
-0.42 (guments. The r) 291.86 578.67 P
-0.42 (est parameter is identi\336ed in) 364.21 578.67 P
(the parameter list by) 135 564.67 T
4 10 Q
(#rest) 238.25 564.67 T
1 11 Q
( followed by the name of the parameter) 268.25 564.67 T
(. When) 459.33 564.67 T
(the function is called, all ar) 135 550.67 T
(guments that follow the r) 265.72 550.67 T
(equir) 388.84 550.67 T
(ed ar) 414.25 550.67 T
(guments ar) 438.63 550.67 T
(e) 493.41 550.67 T
(put into a sequence. This sequence is the initial value of the r) 135 536.67 T
(est parameter) 429.69 536.67 T
(in the function body) 135 522.67 T
(.) 232.59 522.67 T
2 F
(3.) 117 502.67 T
(Keyword parameters) 135 502.67 T
1 F
( specify optional keywor) 239.81 502.67 T
(d ar) 359.81 502.67 T
(guments. In the parame-) 378.92 502.67 T
-0.44 (ter list, keywor) 135 488.67 P
-0.44 (d parameters ar) 207.04 488.67 P
-0.44 (e identi\336ed by) 282.83 488.67 P
4 10 Q
-0.97 (#key) 354.24 488.67 P
1 11 Q
-0.44 ( followed by the names of) 378.24 488.67 P
(the parameters \050and possibly by other information\051. Keywor) 135 474.67 T
(d parameters) 428.08 474.67 T
(must follow all r) 135 460.67 T
(equir) 215.15 460.67 T
(ed parameters and the r) 240.56 460.67 T
(est parameter \050if any\051. When) 356.38 460.67 T
(the function is called, the caller can supply any or none of the speci\336ed) 135 446.67 T
(keywor) 135 432.67 T
(d ar) 171.83 432.67 T
(guments, in any or) 190.95 432.67 T
(der) 282.1 432.67 T
(, after supplying all r) 297.62 432.67 T
(equir) 399.34 432.67 T
(ed ar) 424.75 432.67 T
(guments.) 449.14 432.67 T
-0.39 (The caller supplies each keywor) 135 418.67 P
-0.39 (d ar) 289 418.67 P
-0.39 (gument as a symbol \050usually in the form) 307.73 418.67 P
(of the parameter name followed by a colon\051, followed by the ar) 135 404.67 T
(gument) 441.39 404.67 T
(value. This ar) 135 390.67 T
(gument is the initial value of the corr) 200.73 390.67 T
(esponding keywor) 380.23 390.67 T
(d) 471.2 390.67 T
(parameter in the function body) 135 376.67 T
(.) 285.48 376.67 T
-0.41 (The speci\336cation for each parameter in the parameter list includes the name of the) 108 350.67 P
-0.06 (parameter) 108 336.67 P
-0.06 (. In addition, a r) 157.32 336.67 P
-0.06 (equir) 234.67 336.67 P
-0.06 (ed parameter \050or) 260.08 336.67 P
-0.06 (, for a method, a keywor) 340.78 336.67 P
-0.06 (d param-) 459.26 336.67 P
(eter\051 can be) 108 322.67 T
2 F
(specialized) 166.52 322.67 T
1 F
( to corr) 222.72 322.67 T
(espond to an ar) 257.19 322.67 T
(gument of a given type. The type) 332.26 322.67 T
-0.38 (specializer follows the parameter name and is identi\336ed by) 108 308.67 P
4 10 Q
-0.83 (::) 394.88 308.67 P
1 11 Q
-0.38 ( followed by a type.) 406.88 308.67 P
-0.4 (When the function is called, the ar) 108 294.67 P
-0.4 (gument that corr) 271.48 294.67 P
-0.4 (esponds to the parameter must) 352.35 294.67 P
(be of the speci\336ed type, or Dylan signals an err) 108 280.67 T
(or) 336.13 280.67 T
(. The default ar) 345.67 280.67 T
(gument type is) 419.3 280.67 T
4 10 Q
(<object>) 108 266.67 T
1 11 Q
(.) 156 266.67 T
-0.42 (The speci\336cation for a keywor) 135 252.67 P
-0.42 (d parameter can have two additional pieces of) 279.95 252.67 P
(information:) 108 238.67 T
2 F
(1.) 117 218.67 T
1 F
(It may include a keywor) 135 218.67 T
(d for the caller to use in its ar) 253.26 218.67 T
(gument list, if this) 394.51 218.67 T
(keywor) 135 204.67 T
(d must be dif) 171.83 204.67 T
(fer) 236.13 204.67 T
(ent fr) 249.21 204.67 T
(om the parameter name. The keywor) 275.03 204.67 T
(d pr) 454.77 204.67 T
(e-) 475 204.67 T
(cedes the parameter name in the parameter list.) 135 190.67 T
2 F
(2.) 117 170.67 T
1 F
(It may include a default value for the keywor) 135 170.67 T
(d ar) 354.92 170.67 T
(gument, which is used if) 374.04 170.67 T
(the caller does not supply that ar) 135 156.67 T
(gument. The default expr) 294.37 156.67 T
(ession appears) 417.78 156.67 T
(at the end of the parameter speci\336cation, followed by) 135 142.67 T
4 10 Q
(=) 396.6 142.67 T
1 11 Q
(. If no default) 402.6 142.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "173" 187
%%Page: "174" 188
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(174) 72 677.67 T
0 F
(Chapter 12) 95.75 677.67 T
(Functions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(expr) 135 640.67 T
(ession is supplied and the caller does not supply the keywor) 156.7 640.67 T
(d ar) 450.04 640.67 T
(gu-) 469.16 640.67 T
(ment, the ar) 135 626.67 T
(gument\325s value is) 193.12 626.67 T
4 10 Q
(#f) 281.5 626.67 T
1 11 Q
(.) 293.5 626.67 T
-0.1 (The following example shows how we could use a r) 108 606.67 P
-0.1 (est parameter to implement a) 359.05 606.67 P
(function to sum an arbitrary number of values:) 108 592.67 T
5 9 Q
(// Sum one or more values) 108 572 T
4 F
(define method sum \050value, #rest more-values\051) 108 561 T
(for \050next in more-values\051) 118.8 550 T
(value := value + next;) 129.6 539 T
(end for;) 118.8 528 T
(value;) 118.8 517 T
(end method sum;) 108 506 T
6 F
(?) 108 487 T
4 F
(sum\0503\051;) 118.8 487 T
6 F
(3) 108 476 T
(?) 108 457 T
4 F
(sum\0501, 2, 3, 4, 5\051;) 118.8 457 T
6 F
(15) 108 446 T
1 11 Q
-0.06 (In the pr) 108 425.67 P
-0.06 (eceding example, the) 149.51 425.67 P
4 10 Q
-0.12 (for) 254.7 425.67 P
1 11 Q
-0.06 ( iteration statement performs the addition once) 272.7 425.67 P
(for every element of) 108 411.67 T
4 10 Q
(more-values) 208.61 411.67 T
1 11 Q
(.) 274.61 411.67 T
(The following example shows how we could use keywor) 135 397.67 T
(d parameters in) 411.4 397.67 T
(de\336ning a method similar to) 108 383.67 T
4 10 Q
(encode-total-seconds) 249.13 383.67 T
1 11 Q
(:) 369.13 383.67 T
5 9 Q
(// Convert days, hours, minutes, and seconds to seconds.) 108 363 T
(// Named \050keyword\051 arguments are optional) 108 352 T
4 F
(define method convert-to-seconds) 108 341 T
(\050#key hours :: <integer> = 0, minutes :: <integer> = 0,) 129.6 330 T
(seconds :: <integer> = 0\051 => \050seconds :: <integer>\051) 135 319 T
(  \050\050hours * 60\051 + minutes\051 * 60 + seconds;) 108 308 T
(end method convert-to-seconds;) 108 297 T
6 F
(?) 108 278 T
4 F
(convert-to-seconds\050minutes: 3, seconds: 9\051;) 118.8 278 T
6 F
(189) 108 267 T
(?) 108 248 T
4 F
(convert-to-seconds\050minutes: 1, hours: 2\051;) 118.8 248 T
6 F
(7260) 108 237 T
1 11 Q
(Note fr) 108 216.67 T
(om the pr) 142.56 216.67 T
(eceding example that we can supply keywor) 189.8 216.67 T
(d ar) 406.36 216.67 T
(guments in any) 425.48 216.67 T
(or) 108 202.67 T
(der) 118.15 202.67 T
(. Note also that all keywor) 133.67 202.67 T
(d ar) 261.35 202.67 T
(guments ar) 280.47 202.67 T
(e optional; however) 335.25 202.67 T
(, if we try to) 431.15 202.67 T
-0.34 (call a function with a keywor) 108 188.67 P
-0.34 (d ar) 247.78 188.67 P
-0.34 (gument that the function does not accept \321 such) 266.55 188.67 P
-0.27 (as) 108 174.67 P
4 10 Q
-0.6 (days:) 120.64 174.67 P
1 11 Q
-0.27 (, in this example \321 Dylan signals an err) 150.64 174.67 P
-0.27 (or) 342.05 174.67 P
-0.27 (. For mor) 351.58 174.67 P
-0.27 (e information on func-) 395.62 174.67 P
(tion calls and keywor) 108 160.67 T
(d ar) 212.35 160.67 T
(guments, see Section 12.2.7, page 178.) 231.46 160.67 T
(Following ar) 135 146.67 T
(e additional featur) 196.82 146.67 T
(es and r) 286.43 146.67 T
(estrictions of keywor) 324.63 146.67 T
(d ar) 426.43 146.67 T
(guments:) 445.55 146.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "174" 188
%%Page: "175" 189
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.2 The function-calling protocol) 385.9 677.67 T
2 F
(175) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(\245) 117 640.67 T
(If a parameter list ends with) 135 640.67 T
4 10 Q
(#all-keys) 274.58 640.67 T
1 11 Q
( following) 328.58 640.67 T
4 10 Q
(#key) 381.05 640.67 T
1 11 Q
(, the function) 403.83 640.67 T
(accepts \050but ignor) 135 626.67 T
(es\051 any keywor) 221.74 626.67 T
(d ar) 295.68 626.67 T
(gument. A parameter list can have) 314.8 626.67 T
-0.03 (speci\336c keywor) 135 612.67 P
-0.03 (d parameters and also end with) 210.72 612.67 P
4 10 Q
-0.05 (#all-keys) 367.34 612.67 P
1 11 Q
-0.03 (. In this case, the) 421.34 612.67 P
-0.18 (function accepts any keywor) 135 598.67 P
-0.18 (d ar) 273.74 598.67 P
-0.18 (gument, and also has local variables whose) 292.68 598.67 P
-0.01 (values ar) 135 584.67 P
-0.01 (e the keywor) 178.87 584.67 P
-0.01 (d-ar) 241.71 584.67 P
-0.01 (gument values \050or their defaults\051 that corr) 261.75 584.67 P
-0.01 (espond) 465.58 584.67 P
(to the keywor) 135 570.67 T
(d parameters.) 202.18 570.67 T
(\245) 117 550.67 T
(If the parameter list of a method contains both) 135 550.67 T
4 10 Q
(#rest) 362.76 550.67 T
1 11 Q
( and) 392.76 550.67 T
4 10 Q
(#key) 416.88 550.67 T
1 11 Q
(, the) 440.88 550.67 T
(sequence that is the value of the r) 135 536.67 T
(est parameter contains alternating sym-) 296.89 536.67 T
(bols and ar) 135 522.67 T
(gument values r) 188.72 522.67 T
(epr) 267.57 522.67 T
(esenting the keywor) 283.6 522.67 T
(d ar) 382.09 522.67 T
(guments passed to) 401.21 522.67 T
(the function. In this case,) 135 508.67 T
0 F
(all) 258.56 508.67 T
1 F
( optional ar) 269.56 508.67 T
(guments must be keywor) 325.22 508.67 T
(d ar) 448.63 508.67 T
(gu-) 467.75 508.67 T
(ments. A generic function\325s parameter list can have either) 135 494.67 T
4 10 Q
(#rest) 417.71 494.67 T
1 11 Q
( or) 447.71 494.67 T
4 10 Q
(#key) 463.56 494.67 T
1 11 Q
(,) 486.34 494.67 T
(but cannot have both.) 135 480.67 T
(\245) 117 460.67 T
(Keywor) 135 460.67 T
(d parameters for a generic function cannot be specialized.) 173.7 460.67 T
(The r) 108 440.67 T
(estrictions on a generic function\325s parameter list have to do with parameter) 133.31 440.67 T
(-) 498.06 440.67 T
(list congr) 108 426.67 T
(uency and keywor) 153.07 426.67 T
(d-ar) 243.32 426.67 T
(gument checking in generic function calls. For) 263.35 426.67 T
(mor) 108 412.67 T
(e information, see Sections 12.2.5 and 12.2.7.) 127.87 412.67 T
3 13 Q
(12.2.4  V) 108 381.33 T
(alue dec) 150.05 381.33 T
(larations) 192.53 381.33 T
1 11 Q
(A function de\336nition\325s value declaration follows the parameter list and is pr) 108 361.67 T
(e-) 477.39 361.67 T
-0.39 (ceded by) 108 347.67 P
4 10 Q
-0.85 (=>) 153.79 347.67 P
1 11 Q
-0.39 (. The syntax of a value declaration is similar to that of a parameter list.) 165.79 347.67 P
(If the function r) 108 333.67 T
(eturns no values, the value declaration is an empty set of par) 183.8 333.67 T
(en-) 478.79 333.67 T
(theses. Otherwise, the declaration can contain separate declarations for all) 108 319.67 T
-0.06 (r) 108 305.67 P
-0.06 (eturned values, separated by commas. Each of these individual declarations con-) 112.15 305.67 P
(sists of a name and, optionally) 108 291.67 T
(,) 254.56 291.67 T
4 10 Q
(::) 260.06 291.67 T
1 11 Q
( followed by a type. The name does not specify) 272.06 291.67 T
(a variable and has no use other than documentation. But the r) 108 277.67 T
(eturned value that) 407.73 277.67 T
(corr) 108 263.67 T
(esponds to the declaration must be of the declar) 127.38 263.67 T
(ed type, or Dylan signals an) 359.78 263.67 T
(err) 108 249.67 T
(or) 121.76 249.67 T
(. The default r) 131.3 249.67 T
(eturn value type is) 199.43 249.67 T
4 10 Q
(<object>) 292.93 249.67 T
1 11 Q
(.) 340.93 249.67 T
(A value declaration can also end with) 135 235.67 T
4 10 Q
(#rest) 321.15 235.67 T
1 11 Q
( followed by a name and,) 351.15 235.67 T
(optionally) 108 221.67 T
(,) 156.61 221.67 T
4 10 Q
(::) 162.11 221.67 T
1 11 Q
( and a type. This declaration indicates that the function can r) 174.11 221.67 T
(eturn) 467.91 221.67 T
-0.07 (any number of additional ar) 108 207.67 P
-0.07 (guments, each of which must be of the speci\336ed type.) 244.52 207.67 P
(If a function has no explicit value declaration, the default declaration is) 135 193.67 T
4 10 Q
(\050#rest x :: <object>\051) 108 179.67 T
1 11 Q
(. This declaration indicates that the function can r) 234 179.67 T
(eturn) 473.84 179.67 T
(any number of ar) 108 165.67 T
(guments of any type.) 192.03 165.67 T
(The value declaration determines the number and types of values that the) 135 151.67 T
(function r) 108 137.67 T
(eturns, even if the last expr) 155.67 137.67 T
(ession in the function\325s body r) 287 137.67 T
(eturns a) 433.39 137.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "175" 189
%%Page: "176" 190
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(176) 72 677.67 T
0 F
(Chapter 12) 95.75 677.67 T
(Functions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(dif) 108 640.67 T
(fer) 121.39 640.67 T
(ent number of values. If the function\325s body r) 134.47 640.67 T
(eturns fewer values than ar) 354.27 640.67 T
(e) 486.91 640.67 T
(declar) 108 626.67 T
(ed, the function defaults the r) 137.72 626.67 T
(emaining values to) 280.89 626.67 T
4 10 Q
(#f) 376.02 626.67 T
1 11 Q
( and r) 388.02 626.67 T
(eturns them. \050But) 416.29 626.67 T
(if the value declaration speci\336es a type for any of these values, and if) 108 612.67 T
4 10 Q
(#f) 444.96 612.67 T
1 11 Q
( is not an) 456.96 612.67 T
(instance of that type, Dylan signals an err) 108 598.67 T
(or) 309.38 598.67 T
(.\051 If the function\325s body r) 318.91 598.67 T
(eturns mor) 439.28 598.67 T
(e) 492.79 598.67 T
(values than ar) 108 584.67 T
(e declar) 176.52 584.67 T
(ed, the function r) 214.26 584.67 T
(eturns the additional values if the declara-) 297.43 584.67 T
(tion contains) 108 570.67 T
4 10 Q
(#rest) 173.34 570.67 T
1 11 Q
(; otherwise, the function discar) 203.34 570.67 T
(ds the additional values.) 352.91 570.67 T
3 13 Q
(12.2.5  P) 108 539.33 T
(arameter) 150.37 539.33 T
(-list congruence) 195.2 539.33 T
1 11 Q
-0.02 (A generic function and its methods must all have parameter lists that ar) 108 519.67 P
-0.02 (e compat-) 456.04 519.67 P
(ible, or) 108 505.67 T
2 F
(congruent) 144.35 505.67 T
1 F
(. Following ar) 195.08 505.67 T
(e the basic r) 262.4 505.67 T
(ules:) 319.76 505.67 T
(\245) 117 485.67 T
(A generic function and its methods must all have the same number of) 135 485.67 T
(r) 135 471.67 T
(equir) 139.15 471.67 T
(ed ar) 164.56 471.67 T
(guments.) 188.94 471.67 T
(\245) 117 451.67 T
(The type of any given parameter in each method must be a subtype of the) 135 451.67 T
(corr) 135 437.67 T
(esponding parameter in the generic function.) 154.38 437.67 T
(\245) 117 417.67 T
(If a generic function or any of its methods has only r) 135 417.67 T
(equir) 388.67 417.67 T
(ed ar) 414.08 417.67 T
(guments \321) 438.47 417.67 T
-0.16 (that is, it has neither) 135 403.67 P
4 10 Q
-0.34 (#rest) 235.48 403.67 P
1 11 Q
-0.16 ( nor) 265.48 403.67 P
4 10 Q
-0.34 (#key) 287.42 403.67 P
1 11 Q
-0.16 ( in its parameter list \321 then the generic) 311.42 403.67 P
(function and all its methods must have only r) 135 389.67 T
(equir) 355.97 389.67 T
(ed ar) 381.38 389.67 T
(guments.) 405.77 389.67 T
(\245) 117 369.67 T
(If a generic function or any of its methods accepts a variable number of) 135 369.67 T
(ar) 135 355.67 T
(guments, but does not accept keywor) 144.65 355.67 T
(d ar) 326.05 355.67 T
(guments \321 that is, it has) 345.17 355.67 T
4 10 Q
(#rest) 468.09 355.67 T
1 11 Q
(,) 498.09 355.67 T
(but does not have) 135 341.67 T
4 10 Q
(#key) 224.34 341.67 T
1 11 Q
(, in its parameter list \321 then the generic function) 247.12 341.67 T
(and all its methods must accept a variable number of ar) 135 327.67 T
(guments, but must) 404.74 327.67 T
(not accept keywor) 135 313.67 T
(d ar) 224.06 313.67 T
(guments.) 243.17 313.67 T
(\245) 117 293.67 T
(If a generic function or any of its methods accepts keywor) 135 293.67 T
(d ar) 415.71 293.67 T
(guments \321) 434.83 293.67 T
(that is, it has) 135 279.67 T
4 10 Q
(#key) 199.04 279.67 T
1 11 Q
( in its parameter list \321 then the generic function and all) 223.04 279.67 T
(its methods must accept keywor) 135 265.67 T
(d ar) 291.97 265.67 T
(guments. For this r) 311.09 265.67 T
(ule, a generic func-) 403.05 265.67 T
-0.21 (tion or method \322accepts keywor) 135 251.67 P
-0.21 (d ar) 290.12 251.67 P
-0.21 (guments\323 even if its parameter list ends) 309.03 251.67 P
(with just) 135 237.67 T
4 10 Q
(#key) 180.32 237.67 T
1 11 Q
(.) 203.1 237.67 T
(\245) 117 217.67 T
(If a generic function has any speci\336c keywor) 135 217.67 T
(d parameters, then all its meth-) 350.96 217.67 T
(ods must have \050at least\051 those speci\336c keywor) 135 203.67 T
(d parameters. The appear-) 357.18 203.67 T
(ance of) 135 189.67 T
4 10 Q
(#all-keys) 172.22 189.67 T
1 11 Q
( in a method\325s parameter list does not satisfy this) 226.22 189.67 T
(r) 135 175.67 T
(equir) 139.15 175.67 T
(ement.) 164.56 175.67 T
(The following parameter lists ar) 108 155.67 T
(e congr) 263.48 155.67 T
(uent, because both functions have only) 299.17 155.67 T
(r) 108 141.67 T
(equir) 112.15 141.67 T
(ed ar) 137.56 141.67 T
(guments, they have the same number of r) 161.94 141.67 T
(equir) 363.75 141.67 T
(ed ar) 389.16 141.67 T
(guments, and the) 413.55 141.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "176" 190
%%Page: "177" 191
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.2 The function-calling protocol) 385.9 677.67 T
2 F
(177) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(type of each method parameter is a subtype of the same parameter in the generic) 108 640.67 T
(function:) 108 626.67 T
4 9 Q
(define generic g \050arg1 :: <complex>, arg2 :: <integer>\051;) 108 606 T
(define method g \050arg1 :: <real>, arg2 :: <integer>\051) 108 587 T
(...) 118.8 576 T
(end method g;) 108 565 T
1 11 Q
-0.48 (The following parameter lists ar) 108 544.67 P
-0.48 (e congr) 261.57 544.67 P
-0.48 (uent, because both functions meet the tests) 296.78 544.67 P
(for r) 108 530.67 T
(equir) 128.91 530.67 T
(ed ar) 154.32 530.67 T
(guments, both accept keywor) 178.71 530.67 T
(d ar) 321.73 530.67 T
(guments, and the generic func-) 340.85 530.67 T
(tion has no speci\336c keywor) 108 516.67 T
(d parameters:) 240.16 516.67 T
4 9 Q
(define generic g \050arg1 :: <real>, #key\051;) 108 496 T
(define method g \050arg1 :: <integer>, #key base :: <integer> = 10\051) 108 477 T
(...) 118.8 466 T
(end method g;) 108 455 T
1 11 Q
-0.13 (The following parameter lists ar) 108 434.67 P
-0.13 (e not congr) 262.97 434.67 P
-0.13 (uent, because the method\325s parameter) 317.14 434.67 P
(list does not include the speci\336c keywor) 108 420.67 T
(d) 302.37 420.67 T
4 10 Q
(base) 311.84 420.67 T
1 11 Q
( of the generic function, even) 335.84 420.67 T
(though it does include) 108 406.67 T
4 10 Q
(#all-keys) 219.9 406.67 T
1 11 Q
(:) 273.9 406.67 T
4 9 Q
(define generic g \050arg1 :: <integer>, #key base\051;) 108 386 T
(define method g \050arg1 :: <integer>, #key #all-keys\051) 108 367 T
(...) 118.8 356 T
(end method g;) 108 345 T
3 13 Q
(12.2.6  Return-v) 108 315.33 T
(alue congruence) 187.2 315.33 T
1 11 Q
(Like parameter lists, the value declarations of a generic function and that func-) 108 295.67 T
-0.23 (tion\325s methods must be congr) 108 281.67 P
-0.23 (uent. The r) 250.96 281.67 P
-0.23 (ules depend on whether the generic func-) 303.3 281.67 P
(tion r) 108 267.67 T
(eturns a \336xed or a variable number of values:) 134.09 267.67 T
(\245) 117 247.67 T
(If the generic function r) 135 247.67 T
(eturns a \336xed number of values \321 that is, it does) 249.04 247.67 T
(not have) 135 233.67 T
4 10 Q
(#rest) 179.88 233.67 T
1 11 Q
( in its value declaration \321 then its methods cannot have) 209.88 233.67 T
4 10 Q
(#rest) 135 219.67 T
1 11 Q
(, and must r) 165 219.67 T
(eturn the same number of r) 223.37 219.67 T
(equir) 356.02 219.67 T
(ed values as the generic) 381.42 219.67 T
(function. For each method, the type of each r) 135 205.67 T
(eturned value must be a) 352.21 205.67 T
(subtype of the same r) 135 191.67 T
(eturned value in the generic function.) 239.18 191.67 T
(\245) 117 171.67 T
(If the generic function r) 135 171.67 T
(eturns a variable number of values \321 that is, it has) 249.04 171.67 T
4 10 Q
(#rest) 135 157.67 T
1 11 Q
( in its value declaration \321 then its methods can \050but ar) 165 157.67 T
(e not r) 430.61 157.67 T
(equir) 461.52 157.67 T
(ed) 486.93 157.67 T
(to\051 have) 135 143.67 T
4 10 Q
(#rest) 177.14 143.67 T
1 11 Q
(, and must r) 207.14 143.67 T
(eturn at least as many r) 265.51 143.67 T
(equir) 378.84 143.67 T
(ed values as the) 404.25 143.67 T
(generic function. For each method, the type of each r) 135 129.67 T
(eturned value must be) 390.44 129.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "177" 191
%%Page: "178" 192
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(178) 72 677.67 T
0 F
(Chapter 12) 95.75 677.67 T
(Functions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(a subtype of the same r) 135 640.67 T
(eturned value in the generic function. If the method) 247.43 640.67 T
(has mor) 135 626.67 T
(e r) 174.18 626.67 T
(equir) 186.35 626.67 T
(ed r) 211.76 626.67 T
(eturned values than the generic function, their types) 230.65 626.67 T
(must all be subtypes of the generic function\325s) 135 612.67 T
4 10 Q
(#rest) 357.39 612.67 T
1 11 Q
( value.) 387.39 612.67 T
(The following value declarations ar) 108 592.67 T
(e congr) 280.13 592.67 T
(uent, because the generic function) 315.81 592.67 T
(implicitly r) 108 578.67 T
(eturns any number of values of any type:) 161.81 578.67 T
4 9 Q
(define generic g \050arg1 :: <complex>, arg2 :: <integer>\051;) 108 558 T
(define method g) 108 539 T
(\050arg1 :: <real>, arg2 :: <integer>\051 => \050result :: <real>\051) 129.6 528 T
(...) 118.8 517 T
(end method g;) 108 506 T
1 11 Q
(The following value declarations ar) 108 485.67 T
(e not congr) 280.13 485.67 T
(uent, because the type of the) 334.56 485.67 T
-0.06 (method\325s r) 108 471.67 P
-0.06 (eturned value is not a subtype of the generic function\325s r) 160.25 471.67 P
-0.06 (eturned value:) 433.52 471.67 P
4 9 Q
(define generic g) 108 451 T
(\050arg1 :: <complex>, arg2 :: <integer>\051 => \050result :: <integer>\051;) 129.6 440 T
(define method g) 108 421 T
(\050arg1 :: <real>, arg2 :: <integer>\051 => \050result :: <real>\051) 129.6 410 T
(...) 118.8 399 T
(end method g;) 108 388 T
3 13 Q
(12.2.7  K) 108 358.33 T
(e) 151.12 358.33 T
(yw) 156.91 358.33 T
(or) 170.93 358.33 T
(d-ar) 181.4 358.33 T
(gument c) 201.39 358.33 T
(hec) 248.69 358.33 T
(king) 266.86 358.33 T
1 11 Q
(When a function is called, Dylan determines which keywor) 108 338.67 T
(d ar) 395.8 338.67 T
(guments, if any) 414.92 338.67 T
(,) 489.22 338.67 T
(ar) 108 324.67 T
(e permitted for that function call. The set of permitted keywor) 117.65 324.67 T
(d ar) 418.85 324.67 T
(guments) 437.97 324.67 T
(depends on whether or not a generic function is being called:) 108 310.67 T
(\245) 117 290.67 T
(If a method is called dir) 135 290.67 T
(ectly) 250.03 290.67 T
(, rather than thr) 271.86 290.67 T
(ough a generic function, the) 348.33 290.67 T
(speci\336c keywor) 135 276.67 T
(ds in the method\325s parameter list ar) 210.75 276.67 T
(e permitted. If the) 383.35 276.67 T
(parameter list includes) 135 262.67 T
4 10 Q
(#all-keys) 249.01 262.67 T
1 11 Q
(, any keywor) 303.02 262.67 T
(d ar) 366.11 262.67 T
(gument is permitted.) 385.23 262.67 T
(\245) 117 242.67 T
(If a generic function is called, all the speci\336c keywor) 135 242.67 T
(ds in the parameter) 388.43 242.67 T
(lists of all) 135 228.67 T
2 F
(applicable) 184.14 228.67 T
1 F
( methods ar) 236.67 228.67 T
(e permitted. If the parameter list of the) 294.18 228.67 T
(generic function or of) 135 214.67 T
0 F
(any) 242.28 214.67 T
1 F
( applicable method includes) 258.78 214.67 T
4 10 Q
(#all-keys) 398.52 214.67 T
1 11 Q
(, any) 452.52 214.67 T
(keywor) 135 200.67 T
(d ar) 171.83 200.67 T
(gument is permitted.) 190.95 200.67 T
(When a generic function is called, one of its methods is) 108 180.67 T
2 F
(applicable) 377.5 180.67 T
1 F
( if every) 430.04 180.67 T
(r) 108 166.67 T
(equir) 112.15 166.67 T
(ed ar) 137.56 166.67 T
(gument is an instance of the type of the corr) 161.94 166.67 T
(esponding parameter of) 374.9 166.67 T
(the method. For mor) 108 152.67 T
(e information on applicable methods, see Section 5.5, page) 208.29 152.67 T
(63.) 108 138.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "178" 192
%%Page: "179" 193
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.2 The function-calling protocol) 385.9 677.67 T
2 F
(179) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Consider the following de\336nitions:) 135 640.67 T
4 9 Q
(define generic g \050arg1 :: <real>, #key\051;) 108 620 T
5 F
(// Method 1) 108 601 T
4 F
(define method g \050arg1 :: <real>, #key real-key\051) 108 590 T
(...) 118.8 579 T
(end method g;) 108 568 T
5 F
(// Method 2) 108 549 T
4 F
(define method g \050arg1 :: <float>, #key float-key\051) 108 538 T
(...) 118.8 527 T
(end method g;) 108 516 T
5 F
(// Method 3) 108 497 T
4 F
(define method g \050arg1 :: <integer>, #key integer-key\051) 108 486 T
(...) 118.8 475 T
(end method g;) 108 464 T
1 11 Q
-0.21 (Now) 108 443.67 P
-0.21 (, if we call the generic function) 131.31 443.67 P
4 10 Q
-0.45 (g) 281.46 443.67 P
1 11 Q
-0.21 ( with an instance of) 287.46 443.67 P
4 10 Q
-0.45 (<float>) 384.02 443.67 P
1 11 Q
-0.21 (, we can supply) 426.02 443.67 P
(the keywor) 108 429.67 T
(d ar) 162.84 429.67 T
(guments) 181.95 429.67 T
4 10 Q
(real-key:) 227.09 429.67 T
1 11 Q
( and) 281.09 429.67 T
4 10 Q
(float-key:) 305.21 429.67 T
1 11 Q
(, because the methods that) 365.21 429.67 T
(have those keywor) 108 415.67 T
(d parameters ar) 199.64 415.67 T
(e both applicable. If we call) 276.31 415.67 T
4 10 Q
(g) 411.57 415.67 T
1 11 Q
( with an instance) 417.57 415.67 T
(of) 108 401.67 T
4 10 Q
(<integer>) 120.42 401.67 T
1 11 Q
(, we can supply the keywor) 174.42 401.67 T
(d ar) 308.07 401.67 T
(guments) 327.19 401.67 T
4 10 Q
(real-key:) 372.32 401.67 T
1 11 Q
( and) 426.32 401.67 T
4 10 Q
(integer-) 450.44 401.67 T
(key:) 108 387.67 T
1 11 Q
(.) 132 387.67 T
(Suppose that, in this same example, we call the generic function) 135 373.67 T
4 10 Q
(g) 447.98 373.67 T
1 11 Q
( with an) 453.98 373.67 T
(instance of) 108 359.67 T
4 10 Q
(<float>) 163.08 359.67 T
1 11 Q
(, and supply the keywor) 205.08 359.67 T
(d ar) 323.37 359.67 T
(guments) 342.49 359.67 T
4 10 Q
(real-key:) 387.62 359.67 T
1 11 Q
( and) 441.62 359.67 T
4 10 Q
(float-) 465.74 359.67 T
(key:) 108 345.67 T
1 11 Q
(. Method 2 is most speci\336c, and is called as a r) 132 345.67 T
(esult of Dylan\325s method dis-) 354.72 345.67 T
-0.32 (patch. But method 2 does not have a) 108 331.67 P
4 10 Q
-0.69 (real-key:) 284.87 331.67 P
1 11 Q
-0.32 ( parameter) 338.87 331.67 P
-0.32 (. If we wer) 390.62 331.67 P
-0.32 (e calling this) 441.08 331.67 P
(method dir) 108 317.67 T
(ectly) 162.52 317.67 T
(, Dylan would signal an err) 184.35 317.67 T
(or) 317.07 317.67 T
(. In this case, method 2 simply) 326.6 317.67 T
-0.43 (ignor) 108 303.67 P
-0.43 (es the) 133.87 303.67 P
4 10 Q
-0.95 (real-key:) 163.69 303.67 P
1 11 Q
-0.43 ( ar) 217.69 303.67 P
-0.43 (gument, because Dylan checks keywor) 229.66 303.67 P
-0.43 (d ar) 416.47 303.67 P
-0.43 (guments for a) 435.15 303.67 P
(generic function call as a whole, rather than for a particular method chosen as a) 108 289.67 T
(r) 108 275.67 T
(esult of method dispatch.) 112.15 275.67 T
(Ther) 135 261.67 T
(e is an important subtlety of keywor) 157.56 261.67 T
(d-parameter speci\336cations to note) 333.68 261.67 T
(in this example. Because of the r) 108 247.67 T
(ules for parameter) 264.07 247.67 T
(-list congr) 353.29 247.67 T
(uence, the generic) 402.02 247.67 T
-0.37 (function and all its methods must accept keywor) 108 233.67 P
-0.37 (d ar) 341.93 233.67 P
-0.37 (guments \321 that is, they must) 360.68 233.67 P
(all have) 108 219.67 T
4 10 Q
(#key) 148.79 219.67 T
1 11 Q
( in their parameter lists. Notice that we terminated the generic func-) 172.79 219.67 T
(tion\325s parameter list with) 108 205.67 T
4 10 Q
(#key) 233.07 205.67 T
1 11 Q
(. This use indicates that the generic function per-) 255.85 205.67 T
(mits \321 but does not r) 108 191.67 T
(equir) 213.02 191.67 T
(e \321 individual methods to specify keywor) 238.43 191.67 T
(d) 445.38 191.67 T
(parameters.) 108 177.67 T
(Suppose that we had instead terminated the generic function\325s parameter) 135 163.67 T
(list with) 108 149.67 T
4 10 Q
(#key, #all-keys) 150.51 149.67 T
1 11 Q
(. This use also would have permitted, but would not) 240.51 149.67 T
(have r) 108 135.67 T
(equir) 138.28 135.67 T
(ed, individual methods to specify keywor) 163.69 135.67 T
(d parameters. But it also) 366.37 135.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "179" 193
%%Page: "180" 194
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(180) 72 677.67 T
0 F
(Chapter 12) 95.75 677.67 T
(Functions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(would have allowed a caller of the generic function to supply) 108 640.67 T
0 F
(any) 408.96 640.67 T
1 F
( keywor) 425.46 640.67 T
(d ar) 465.04 640.67 T
(gu-) 484.16 640.67 T
(ment. In the earlier example, only a small set of keywor) 108 626.67 T
(d ar) 377.23 626.67 T
(guments was permit-) 396.34 626.67 T
(ted, and the members of the set varied with the applicable methods.) 108 612.67 T
(In general, when you de\336ne a generic function or a method that accepts) 135 598.67 T
(keywor) 108 584.67 T
(d ar) 144.83 584.67 T
(guments, it is advisable not to specify) 163.95 584.67 T
4 10 Q
(#all-keys) 349.33 584.67 T
1 11 Q
( unnecessarily) 403.33 584.67 T
(,) 471.41 584.67 T
-0.3 (because doing so defeats Dylan\325s keywor) 108 570.67 P
-0.3 (d-ar) 306.63 570.67 P
-0.3 (gument checking. If a method needs) 326.66 570.67 P
(to accept keywor) 108 556.67 T
(d ar) 190.65 556.67 T
(guments because of the r) 209.77 556.67 T
(ules of parameter) 330.64 556.67 T
(-list congr) 415.52 556.67 T
(uence,) 464.25 556.67 T
(but does not need to r) 108 542.67 T
(ecognize any keywor) 214.11 542.67 T
(ds itself, you should terminate its) 317.1 542.67 T
(parameter list with) 108 528.67 T
4 10 Q
(#key) 203.4 528.67 T
1 11 Q
(.) 226.18 528.67 T
3 15 Q
(12.3  Functions as objects) 108 489 T
1 11 Q
(In Dylan, all functions ar) 108 468.67 T
(e objects. A function can be the value of a variable, an) 228.58 468.67 T
(ar) 108 454.67 T
(gument to another function, or a value r) 117.65 454.67 T
(eturned by a function. In fact, Dylan) 312.06 454.67 T
(pr) 108 440.67 T
(ovides a number of operations on functions, including operations to compose) 118.76 440.67 T
(new functions fr) 108 426.67 T
(om existing functions.) 187.6 426.67 T
3 13 Q
(12.3.1  T) 108 395.33 T
(ypes of functions) 149.46 395.33 T
1 11 Q
-0.16 (All functions ar) 108 375.67 P
-0.16 (e instances of the class) 183.23 375.67 P
4 10 Q
-0.35 (<function>) 293.85 375.67 P
1 11 Q
-0.16 (. Dylan has two built-in instan-) 353.85 375.67 P
(tiable subclasses of) 108 361.67 T
4 10 Q
(<function>) 202.99 361.67 T
1 11 Q
(:) 262.98 361.67 T
4 10 Q
(<generic-function>) 268.48 361.67 T
1 11 Q
( and) 376.48 361.67 T
4 10 Q
(<method>) 400.61 361.67 T
1 11 Q
(. Both) 448.61 361.67 T
-0 (methods and generic functions can be called in the same way) 108 347.67 P
-0 (. As we have seen, a) 403.86 347.67 P
-0.11 (generic function can contain zer) 108 333.67 P
-0.11 (o or mor) 262.5 333.67 P
-0.11 (e methods. If a generic function is called,) 303.99 333.67 P
(it must have at least one applicable method or Dylan signals an err) 108 319.67 T
(or) 432.01 319.67 T
(.) 441.54 319.67 T
3 13 Q
(12.3.2  Creation of g) 108 288.33 T
(eneric functions) 209.41 288.33 T
1 11 Q
(Y) 108 268.67 T
(ou can cr) 114.32 268.67 T
(eate a generic function in the following ways:) 158.28 268.67 T
(\245) 117 248.67 T
(Y) 135 248.67 T
(ou can cr) 141.32 248.67 T
(eate one explicitly by) 185.28 248.67 T
4 10 Q
(define generic) 290.73 248.67 T
1 11 Q
(.) 374.73 248.67 T
(\245) 117 228.67 T
(Y) 135 228.67 T
(ou can cr) 141.32 228.67 T
(eate one explicitly by calling) 185.28 228.67 T
4 10 Q
(make) 325.98 228.67 T
1 11 Q
( on the) 349.98 228.67 T
4 10 Q
(<generic-function>) 385.9 228.67 T
1 11 Q
(class. Y) 135 214.67 T
(ou rar) 169.74 214.67 T
(ely need to cr) 199.12 214.67 T
(eate a generic function this way) 264.24 214.67 T
(.) 416.8 214.67 T
(\245) 117 194.67 T
(Y) 135 194.67 T
(ou can cr) 141.32 194.67 T
(eate one implicitly by) 185.28 194.67 T
4 10 Q
(define method) 292.7 194.67 T
1 11 Q
(. If the generic function) 370.7 194.67 T
(named by this de\336nition does not yet exist, Dylan cr) 135 180.67 T
(eates it.) 388.39 180.67 T
(\245) 117 160.67 T
(Y) 135 160.67 T
(ou can cr) 141.32 160.67 T
(eate one implicitly by de\336ning a slot in) 185.28 160.67 T
4 10 Q
(define class) 377.02 160.67 T
1 11 Q
(. If a getter) 449.02 160.67 T
(generic function for the slot does not yet exist, Dylan cr) 135 146.67 T
(eates it.) 403.03 146.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "180" 194
%%Page: "181" 195
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.3 Functions as objects) 420.2 677.67 T
2 F
(181) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(\245) 117 640.67 T
(Y) 135 640.67 T
(ou can cr) 141.32 640.67 T
(eate one implicitly by de\336ning a slot \050other than a constant slot\051) 185.28 640.67 T
(in) 135 626.67 T
4 10 Q
(define class) 147.35 626.67 T
1 11 Q
(. If a setter generic function for the slot does not yet exist,) 219.35 626.67 T
(Dylan cr) 135 612.67 T
(eates it.) 176.51 612.67 T
(Each of these pr) 108 592.67 T
(ocedur) 185.37 592.67 T
(es, except a call to) 219.03 592.67 T
4 10 Q
(make) 308.64 592.67 T
1 11 Q
(, de\336nes a module constant whose) 332.64 592.67 T
(value is the generic function cr) 108 578.67 T
(eated.) 256.98 578.67 T
(When Dylan cr) 135 564.67 T
(eates a generic function implicitly, it cr) 208.34 564.67 T
(eates a parameter list) 396.37 564.67 T
(and a value declaration for the generic function that ar) 108 550.67 T
(e designed to r) 372.56 550.67 T
(estrict the) 444.18 550.67 T
(addition of subsequent methods to the generic function as little as possible. All) 108 536.67 T
(r) 108 522.67 T
(equir) 112.15 522.67 T
(ed ar) 137.56 522.67 T
(guments to the generic function have type specializers of) 161.94 522.67 T
4 10 Q
(<object>) 441.14 522.67 T
1 11 Q
(,) 489.14 522.67 T
-0.41 (and the generic function can r) 108 508.67 P
-0.41 (eturn any number of values of any type. The generic) 250.79 508.67 P
(function\325s parameter list is congr) 108 494.67 T
(uent with that of the method being de\336ned. If) 267.82 494.67 T
(the generic function accepts keywor) 108 480.67 T
(d ar) 282.75 480.67 T
(guments, the parameter list ends with) 301.86 480.67 T
4 10 Q
(#key) 108 466.67 T
1 11 Q
(.) 130.78 466.67 T
3 13 Q
(12.3.3  Creation of methods) 108 435.33 T
1 11 Q
(Y) 108 415.67 T
(ou can cr) 114.32 415.67 T
(eate a method in the following ways:) 158.28 415.67 T
(\245) 117 395.67 T
(Y) 135 395.67 T
(ou can cr) 141.32 395.67 T
(eate one explicitly by) 185.28 395.67 T
4 10 Q
(define method) 290.73 395.67 T
1 11 Q
(. This de\336nition also adds) 368.73 395.67 T
(the method to a generic function, cr) 135 381.67 T
(eating the generic function if the latter) 307.59 381.67 T
(does not alr) 135 367.67 T
(eady exist.) 192 367.67 T
(\245) 117 347.67 T
(Y) 135 347.67 T
(ou can cr) 141.32 347.67 T
(eate one explicitly by a) 185.28 347.67 T
4 10 Q
(method) 298.98 347.67 T
1 11 Q
( statement. This statement does) 334.98 347.67 T
(not add the method to a generic function.) 135 333.67 T
(\245) 117 313.67 T
(Y) 135 313.67 T
(ou can cr) 141.32 313.67 T
(eate one explicitly by a) 185.28 313.67 T
4 10 Q
(local method) 298.98 313.67 T
1 11 Q
( declaration. This declara-) 370.98 313.67 T
(tion cr) 135 299.67 T
(eates one or mor) 165.98 299.67 T
(e methods, and assigns each to a local variable such) 246.41 299.67 T
(that the binding is visible to all other methods de\336ned in the same) 135 285.67 T
4 10 Q
(local) 459.41 285.67 T
1 11 Q
(declaration. This declaration does not add the method to a generic function.) 135 271.67 T
(\245) 117 251.67 T
(Y) 135 251.67 T
(ou can cr) 141.32 251.67 T
(eate one implicitly by de\336ning a slot \050other than a virtual slot\051 in) 185.28 251.67 T
4 10 Q
(define class) 135 237.67 T
1 11 Q
(. Dylan de\336nes a getter method for the slot, and adds it to a) 207 237.67 T
(generic function, cr) 135 223.67 T
(eating the generic function if that function does not) 228.54 223.67 T
(alr) 135 209.67 T
(eady exist.) 147.85 209.67 T
(\245) 117 189.67 T
(Y) 135 189.67 T
(ou can cr) 141.32 189.67 T
(eate one implicitly by de\336ning a slot \050other than a virtual or a) 185.28 189.67 T
(constant slot\051 in) 135 175.67 T
4 10 Q
(define class) 215 175.67 T
1 11 Q
(. Dylan de\336nes a setter method for the slot,) 287 175.67 T
(and adds it to a generic function, cr) 135 161.67 T
(eating the generic function if that func-) 306.4 161.67 T
(tion does not alr) 135 147.67 T
(eady exist.) 213.95 147.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "181" 195
%%Page: "182" 196
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(182) 72 677.67 T
0 F
(Chapter 12) 95.75 677.67 T
(Functions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Cr) 108 640.67 T
(eating a method by using) 119.95 640.67 T
4 10 Q
(method) 246.18 640.67 T
1 11 Q
( is useful when the method does not need to) 282.18 640.67 T
(be part of a generic function. For instance, various Dylan functions take as ar) 108 626.67 T
(gu-) 480.47 626.67 T
(ments other functions that act as pr) 108 612.67 T
(edicates, or test functions. One of these is) 279.15 612.67 T
4 10 Q
(choose) 108 598.67 T
1 11 Q
(, which selects members of a sequence that satisfy a test function, and) 144 598.67 T
(r) 108 584.67 T
(eturns those members as a new sequence. W) 112.15 584.67 T
(e might pick all the strings out of a) 327.08 584.67 T
(mixed sequence as follows:) 108 570.67 T
4 9 Q
(define method choose-strings) 108 550 T
(\050sequence :: <sequence>\051 => \050new-seq :: <sequence>\051) 129.6 539 T
5 F
(// choose takes two arguments: a function and a sequence) 118.8 528 T
4 F
(choose\050method \050object\051 instance?\050object, <string>\051 end method, sequence\051;) 118.8 517 T
(end method choose-strings;) 118.8 506 T
1 11 Q
(Cr) 108 485.67 T
(eating a method by using) 119.95 485.67 T
4 10 Q
(local method) 246.18 485.67 T
1 11 Q
( is useful for a method that does not) 318.18 485.67 T
(need to be part of a generic function, but does need to be given a name so that it) 108 471.67 T
-0.38 (can call itself r) 108 457.67 P
-0.38 (ecursively) 176.41 457.67 P
-0.38 (, or so that other code in the enclosing body can r) 224.98 457.67 P
-0.38 (efer to it.) 459.22 457.67 P
(For an example, see Section 1) 108 443.67 T
(1.3.6, page 147.) 249.33 443.67 T
3 13 Q
(12.3.4  Application of a function to ar) 108 412.33 T
(guments) 294.46 412.33 T
1 11 Q
(The Dylan function) 108 392.67 T
4 10 Q
(apply) 205.17 392.67 T
1 11 Q
( takes as ar) 235.17 392.67 T
(guments a function and one or mor) 288.37 392.67 T
(e addi-) 460.05 392.67 T
(tional ar) 108 378.67 T
(guments, the \336nal one of which must be a sequence. The) 148.29 378.67 T
4 10 Q
(apply) 425.26 378.67 T
1 11 Q
( function) 455.26 378.67 T
(calls its \336rst ar) 108 364.67 T
(gument \321 the function \321 and passes that function the r) 178.05 364.67 T
(emaining) 450.55 364.67 T
(ar) 108 350.67 T
(guments to) 117.65 350.67 T
4 10 Q
(apply) 175.12 350.67 T
1 11 Q
(. But instead of passing its \336nal ar) 203.9 350.67 T
(gument as a sequence, it) 367.87 350.67 T
(passes each element of the sequence as an individual ar) 108 336.67 T
(gument.) 377.07 336.67 T
(The) 135 322.67 T
4 10 Q
(apply) 156.16 322.67 T
1 11 Q
( function is per) 186.16 322.67 T
(haps most useful in the body of a function that) 259.08 322.67 T
(r) 108 308.67 T
(eceives a variable number of ar) 112.15 308.67 T
(guments and must pass those ar) 263.24 308.67 T
(guments to) 419.61 308.67 T
-0.32 (another function that also takes a variable number of ar) 108 294.67 P
-0.32 (guments. For example, we) 374.27 294.67 P
(can use) 108 280.67 T
4 10 Q
(apply) 146.85 280.67 T
1 11 Q
( to write a r) 176.85 280.67 T
(ecursive version of the) 232.67 280.67 T
4 10 Q
(sum) 345.17 280.67 T
1 11 Q
( function that we de\336ned) 363.17 280.67 T
(iteratively in Section 12.2.3, page 172:) 108 266.67 T
5 9 Q
(// Sum one or more values) 108 246 T
4 F
(define method sum \050value, #rest more-values\051) 108 235 T
5 F
(// If only one value, that is the answer) 118.8 224 T
4 F
(if \050empty?\050more-values\051\051) 118.8 213 T
(value;) 129.6 202 T
5 F
(// Otherwise, add the first value to the sum of the rest) 118.8 191 T
4 F
(else) 118.8 180 T
(value + apply\050sum, more-values\051;) 129.6 169 T
(end if;) 118.8 158 T
(end method sum;) 108 147 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "182" 196
%%Page: "183" 197
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.3 Functions as objects) 420.2 677.67 T
2 F
(183) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(12.3.5  Operations on functions) 108 639.33 T
1 11 Q
(Dylan has several functions that take functions as ar) 108 619.67 T
(guments, and r) 361 619.67 T
(eturn new) 434.4 619.67 T
(functions that ar) 108 605.67 T
(e transformations of those ar) 187.66 605.67 T
(guments. These operations permit) 326.76 605.67 T
(many kinds of composition of functions and other objects to generate new) 108 591.67 T
(functions.) 108 577.67 T
(Thr) 135 563.67 T
(ee of these functions take pr) 152.29 563.67 T
(edicates as ar) 288.11 563.67 T
(guments, and r) 352.51 563.67 T
(eturn the com-) 425.92 563.67 T
(plement, disjunction, or conjunction of the pr) 108 549.67 T
(edicates. For example,) 327.34 549.67 T
4 10 Q
(complement) 437.89 549.67 T
1 11 Q
-0.38 (takes a pr) 108 535.67 P
-0.38 (edicate and r) 154.13 535.67 P
-0.38 (eturns the latter) 216.07 535.67 P
-0.38 (\325s complement \321 a function that r) 293.27 535.67 P
-0.38 (eturns) 456.36 535.67 P
4 10 Q
-0.83 (#t) 489.63 535.67 P
1 11 Q
(when the original pr) 108 521.67 T
(edicate would have r) 207.48 521.67 T
(eturned) 309.43 521.67 T
4 10 Q
(#f) 350.41 521.67 T
1 11 Q
(, and otherwise r) 362.41 521.67 T
(eturns) 444.09 521.67 T
4 10 Q
(#f) 477.74 521.67 T
1 11 Q
(.) 489.74 521.67 T
(The) 135 507.67 T
4 10 Q
(curry) 156.16 507.67 T
1 11 Q
( function takes a function and any number of additional ar) 186.16 507.67 T
(gu-) 470.29 507.67 T
(ments. It r) 108 493.67 T
(eturns a new function that applies the original function, \336rst to the) 157.32 493.67 T
-0.03 (additional ar) 108 479.67 P
-0.03 (guments to) 170.4 479.67 P
4 10 Q
-0.07 (curry) 227.82 479.67 P
1 11 Q
-0.03 (, then to the ar) 256.6 479.67 P
-0.03 (guments to the new function. In Sec-) 326.38 479.67 P
-0.34 (tion 1) 108 465.67 P
-0.34 (1.3.7, page 147, we call) 134.5 465.67 P
4 10 Q
-0.75 (curry) 245.26 465.67 P
1 11 Q
-0.34 ( with) 275.26 465.67 P
4 10 Q
-0.75 (\134*) 302.44 465.67 P
1 11 Q
-0.34 ( and a number to r) 314.44 465.67 P
-0.34 (eturn a function that) 402.78 465.67 P
(multiplies that function\325s ar) 108 451.67 T
(gument by the given number) 242.75 451.67 T
(. W) 383.76 451.67 T
(e then map this new) 399.25 451.67 T
(function over the elements of a vector to perform a scalar multiplication of the) 108 437.67 T
(vector) 108 423.67 T
(.) 137.49 423.67 T
(In fact, Dylan has a set of functions that map other functions over the ele-) 135 409.67 T
(ments of collections in dif) 108 395.67 T
(fer) 232.6 395.67 T
(ent ways. W) 245.68 395.67 T
(e used one of these,) 304.62 395.67 T
4 10 Q
(choose) 402.22 395.67 T
1 11 Q
(, in Section) 438.22 395.67 T
-0.08 (12.3.3, page 181. Some of these functions r) 108 381.67 P
-0.08 (eturn new collections; others r) 310.92 381.67 P
-0.08 (eturn sin-) 457.16 381.67 P
(gle values. For mor) 108 367.67 T
(e examples, see Section 1) 201.4 367.67 T
(1.3, page 142.) 321.54 367.67 T
3 13 Q
(12.3.6  Closures) 108 336.33 T
1 11 Q
-0.07 (This section describes closur) 108 316.67 P
-0.07 (es \321 an advanced concept. If you do not understand) 245.69 316.67 P
(or wish to study this section, you can safely skip it.) 108 302.67 T
(Consider the following example:) 135 288.67 T
4 9 Q
(define method call-and-show \050function :: <function>, #rest arguments\051) 108 268 T
(format-out\050"The result is %=.\134n", apply\050function, arguments\051\051;) 118.8 257 T
(end method call-and-show;) 108 246 T
(define method show-next \050x :: <integer>\051) 108 227 T
(call-and-show\050method \050\051 x + 1 end method\051;) 118.8 216 T
(end method show-next;) 108 205 T
1 11 Q
(When we execute this code, we get the expected r) 108 184.67 T
(esult:) 348.44 184.67 T
6 9 Q
(?) 108 164 T
4 F
( show-next\05041\051;) 113.4 164 T
6 F
(The result is 42.) 108 153 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "183" 197
%%Page: "184" 198
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(184) 72 677.67 T
0 F
(Chapter 12) 95.75 677.67 T
(Functions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.19 (But why did we get that r) 108 640.67 P
-0.19 (esult? W) 231.26 640.67 P
-0.19 (e cr) 272.05 640.67 P
-0.19 (eated an anonymous method in) 288.91 640.67 P
4 10 Q
-0.42 (show-next) 444.69 640.67 P
1 11 Q
-0.19 (,) 498.69 640.67 P
(and passed that anonymous method into a completely separate method \050) 108 626.67 T
4 10 Q
(call-) 462.42 626.67 T
-0.35 (and-show) 108 612.67 P
1 11 Q
-0.16 (\051, wher) 156 612.67 P
-0.16 (e) 189.99 612.67 P
4 10 Q
-0.35 (x) 197.85 612.67 P
1 11 Q
-0.16 ( is not bound to anything. And yet, when the) 203.85 612.67 P
4 10 Q
-0.35 (call-and-show) 423.41 612.67 P
1 11 Q
(method executed the anonymous method that we made, somehow the anony-) 108 598.67 T
(mous method could still access the) 108 584.67 T
4 10 Q
(x) 279.63 584.67 T
1 11 Q
( binding. W) 285.63 584.67 T
(e got this r) 342 584.67 T
(easonable r) 393.22 584.67 T
(esult) 448.02 584.67 T
-0.22 (because the) 108 570.67 P
4 10 Q
-0.47 (method) 166.63 570.67 P
1 11 Q
-0.22 ( statement can cr) 202.63 570.67 P
-0.22 (eate a special kind of method called a closur) 283.63 570.67 P
-0.22 (e.) 495.98 570.67 P
-0.19 (Recall that Dylan has two kinds of variable: module variables and local vari-) 135 556.67 P
(ables. A local variable is de\336ned explicitly by a) 108 542.67 T
4 10 Q
(let) 338.43 542.67 T
1 11 Q
( or) 356.43 542.67 T
4 10 Q
(local) 372.28 542.67 T
1 11 Q
( declaration, and) 402.28 542.67 T
(implicitly by a function call, when a method\325s parameters ar) 108 528.67 T
(e initialized to that) 400.29 528.67 T
-0.27 (method\325s ar) 108 514.67 P
-0.27 (guments. Local variables ar) 165.54 514.67 P
-0.27 (e de\336ned within a limited) 298.04 514.67 P
2 F
-0.27 (lexical scope) 425.09 514.67 P
1 F
-0.27 ( \321) 488.05 514.67 P
-0.09 (that is, they) 108 500.67 P
2 F
-0.09 (bind) 167.05 500.67 P
1 F
-0.09 ( a name to a value only within a particular textual portion of the) 190.88 500.67 P
(pr) 108 486.67 T
(ogram. This portion of the pr) 118.76 486.67 T
(ogram is that part of the innermost body that fol-) 259.79 486.67 T
(lows the de\336nition of the local variable.) 108 472.67 T
-0.26 (A) 135 458.67 P
4 10 Q
-0.57 (method) 146.05 458.67 P
1 11 Q
-0.26 ( statement or a) 182.05 458.67 P
4 10 Q
-0.57 (local) 255.43 458.67 P
1 11 Q
-0.26 ( declaration can de\336ne a method in a portion) 285.43 458.67 P
-0.15 (of a pr) 108 444.67 P
-0.15 (ogram wher) 139.12 444.67 P
-0.15 (e local variables ar) 198.39 444.67 P
-0.15 (e in ef) 287.87 444.67 P
-0.15 (fect. In the pr) 316.68 444.67 P
-0.15 (eceding example, we use) 380.75 444.67 P
-0.26 (a) 108 430.67 P
4 10 Q
-0.58 (method) 115.99 430.67 P
1 11 Q
-0.26 ( statement to de\336ne a method inside the body of the) 151.99 430.67 P
4 10 Q
-0.58 (show-next) 404.58 430.67 P
1 11 Q
-0.26 ( method,) 458.58 430.67 P
(wher) 108 416.67 T
(e the local variable) 132.99 416.67 T
4 10 Q
(x) 226.62 416.67 T
1 11 Q
( \050the parameter for the) 232.62 416.67 T
4 10 Q
(show-next) 344.7 416.67 T
1 11 Q
( method\051 is bound to) 398.7 416.67 T
(the ar) 108 402.67 T
(gument to) 135.65 402.67 T
4 10 Q
(show-next) 188.46 402.67 T
1 11 Q
(. The method that we de\336ne inside) 242.46 402.67 T
4 10 Q
(show-next) 413.87 402.67 T
1 11 Q
( r) 467.87 402.67 T
(efers) 474.76 402.67 T
(to that local variable) 108 388.67 T
4 10 Q
(x) 209.77 388.67 T
1 11 Q
(.) 215.77 388.67 T
(In general, when a pr) 135 374.67 T
(ogram exits a body) 238.47 374.67 T
(, the local variables de\336ned inside) 330 374.67 T
(that body cease to be de\336ned, and it is an err) 108 360.67 T
(or for the pr) 324.76 360.67 T
(ogram to r) 383.39 360.67 T
(efer to those) 434.3 360.67 T
-0.4 (variables. But ther) 108 346.67 P
-0.4 (e is an exception. If we use) 195.78 346.67 P
4 10 Q
-0.87 (method) 325.32 346.67 P
1 11 Q
-0.4 ( or) 361.32 346.67 P
4 10 Q
-0.87 (local) 376.38 346.67 P
1 11 Q
-0.4 ( to de\336ne a method,) 406.38 346.67 P
(and if we then execute that method outside the body in which we de\336ne it, the) 108 332.67 T
(method can still r) 108 318.67 T
(efer to the local variables that wer) 192.73 318.67 T
(e in ef) 357.06 318.67 T
(fect when the method) 386.17 318.67 T
(was de\336ned. Such a method is called a closur) 108 304.67 T
(e.) 327.69 304.67 T
-0.06 (A) 135 290.67 P
2 F
-0.06 (closure) 146.24 290.67 P
1 F
-0.06 ( is a method that) 182.29 290.67 P
2 F
-0.06 (closes over) 265.86 290.67 P
1 F
-0.06 ( or captur) 320.49 290.67 P
-0.06 (es local variables that ar) 367.58 290.67 P
-0.06 (e in) 483.75 290.67 P
(ef) 108 276.67 T
(fect when the method is de\336ned and that ar) 116.73 276.67 T
(e r) 328.58 276.67 T
(eferr) 340.75 276.67 T
(ed to in the body of the) 363.44 276.67 T
-0.32 (method. The closur) 108 262.67 P
-0.32 (e cr) 201.25 262.67 P
-0.32 (eated by the) 217.98 262.67 P
4 10 Q
-0.7 (method) 279.06 262.67 P
1 11 Q
-0.32 ( statement in our example captur) 315.06 262.67 P
-0.32 (es the) 473.96 262.67 P
(local variable) 108 248.67 T
4 10 Q
(x) 175.61 248.67 T
1 11 Q
(. So, even though the local variable) 181.61 248.67 T
4 10 Q
(x) 353.8 248.67 T
1 11 Q
( is not de\336ned in the lexical) 359.8 248.67 T
(scope of the) 108 234.67 T
4 10 Q
(call-and-show) 168.61 234.67 T
1 11 Q
( method, the closur) 246.61 234.67 T
(e called by) 340.1 234.67 T
4 10 Q
(call-and-show) 394.59 234.67 T
1 11 Q
( can) 472.59 234.67 T
(access the captur) 108 220.67 T
(ed binding of) 189.98 220.67 T
4 10 Q
(x) 258.02 220.67 T
1 11 Q
(.) 264.02 220.67 T
(For examples of closur) 135 206.67 T
(es as iteration or mapping functions for collections,) 244.82 206.67 T
(see Section 1) 108 192.67 T
(1.3.5, page 146, and Section 1) 168.72 192.67 T
(1.3.7, page 147.) 308.61 192.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "184" 198
%%Page: "185" 199
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.4 Summary) 459.24 677.67 T
2 F
(185) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(12.4) 108 638 T
(Summar) 138.78 638 T
(y) 188.12 638 T
1 11 Q
(In this chapter) 108 617.67 T
(, we cover) 177.24 617.67 T
(ed the following:) 226.46 617.67 T
(\245) 117 597.67 T
(W) 135 597.67 T
(e described the syntax of Dylan function calls, including syntactic str) 144.99 597.67 T
(uc-) 478.58 597.67 T
(tur) 135 583.67 T
(es that ar) 149.37 583.67 T
(e abbr) 193.52 583.67 T
(eviations for function calls. These syntactic str) 223.35 583.67 T
(uctur) 446.56 583.67 T
(es) 472.45 583.67 T
(include slot r) 135 569.67 T
(efer) 198.41 569.67 T
(ences, element r) 216.76 569.67 T
(efer) 294.36 569.67 T
(ences, and most operator calls.) 312.7 569.67 T
(\245) 117 549.67 T
(W) 135 549.67 T
(e described how a function and its caller interact. In particular) 144.99 549.67 T
(, we dis-) 445.87 549.67 T
(cussed the r) 135 535.67 T
(elations among ar) 192.74 535.67 T
(guments, parameters, value declarations, and) 279.45 535.67 T
(r) 135 521.67 T
(eturned values.) 139.15 521.67 T
(\245) 117 501.67 T
(W) 135 501.67 T
(e discussed the kinds of parameters that a function can have \050r) 144.99 501.67 T
(equir) 448.09 501.67 T
(ed,) 473.5 501.67 T
(r) 135 487.67 T
(est, and keywor) 139.15 487.67 T
(d\051. W) 216.37 487.67 T
(e then outlined the r) 242.24 487.67 T
(ules for congr) 340.7 487.67 T
(uent parameter) 407.65 487.67 T
(lists and value declarations of a generic function and its methods.) 135 473.67 T
(\245) 117 453.67 T
(W) 135 453.67 T
(e discussed ways of cr) 144.99 453.67 T
(eating generic functions and methods, and of) 252.83 453.67 T
(applying a function to ar) 135 439.67 T
(guments.) 255.27 439.67 T
(\245) 117 419.67 T
(W) 135 419.67 T
(e outlined Dylan\325s operations on functions.) 144.99 419.67 T
(\245) 117 399.67 T
(W) 135 399.67 T
(e intr) 144.99 399.67 T
(oduced the concept of closur) 170.34 399.67 T
(es.) 309.68 399.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "185" 199
%%Page: "186" 200
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 126 522 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "186" 200
%%Page: "187" 201
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(187) 298.88 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(13) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(13) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Libraries and Modules) 110 566.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
(As you cr) 108 424.67 T
(eate a pr) 154.51 424.67 T
(ogram, you will often discover subsets of your code that ar) 195.89 424.67 T
(e) 481.52 424.67 T
(candidates for sharing, r) 108 410.67 T
(euse, or r) 226.24 410.67 T
(esale. Alternatively) 270.82 410.67 T
(, you may be working on a) 363.45 410.67 T
(lar) 108 396.67 T
(ge pr) 120.85 396.67 T
(ogram that has been divided into pieces that can be implemented sepa-) 145.74 396.67 T
(rately) 108 382.67 T
(, either to allow parallel development, or to make the pr) 134.8 382.67 T
(ogramming task) 406.19 382.67 T
(mor) 108 368.67 T
(e manageable. For either of these r) 127.87 368.67 T
(easons, you can package your code into a) 294.48 368.67 T
2 F
(reusable software component) 108 354.67 T
1 F
( so that) 255.87 354.67 T
(\245) 117 334.67 T
(Other pr) 135 334.67 T
(ogrammers can easily add your component to their pr) 176.76 334.67 T
(ograms) 439.24 334.67 T
(\050which ar) 135 320.67 T
(e called) 181.12 320.67 T
2 F
(client programs) 220.67 320.67 T
1 F
( of your component\051.) 299.19 320.67 T
(\245) 117 300.67 T
(Y) 135 300.67 T
(ou can develop your component independently fr) 141.32 300.67 T
(om any clients.) 383.5 300.67 T
(\245) 117 280.67 T
(Clients can use your code without knowing or depending on the internal) 135 280.67 T
(implementation of your component.) 135 266.67 T
(\245) 117 246.67 T
(Y) 135 246.67 T
(ou can sell your component to clients without r) 141.32 246.67 T
(evealing your sour) 370.6 246.67 T
(ce code.) 461.82 246.67 T
-0.14 (T) 108 226.67 P
-0.14 (wo important principles of softwar) 113.75 226.67 P
-0.14 (e engineering apply her) 283.13 226.67 P
-0.14 (e: information hiding) 398.08 226.67 P
(and pr) 108 212.67 T
(otocols. The principle of) 140.13 212.67 T
2 F
(information hiding) 260.04 212.67 T
1 F
( says that you should try to) 356.9 212.67 T
(minimize the information that is passed between components in a system, thus) 108 198.67 T
(minimizing the inter) 108 184.67 T
(dependencies of components. A) 208.01 184.67 T
2 F
(protocol) 366.21 184.67 T
1 F
( is the interface def-) 407.77 184.67 T
-0.46 (inition of a softwar) 108 170.67 P
-0.46 (e component. The purpose of establishing pr) 198.79 170.67 P
-0.46 (otocols is to de\336ne) 412.7 170.67 P
(a uniform interface that clients can use, even if the implementation of a) 108 156.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "187" 201
%%Page: "188" 202
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(188) 72 677.67 T
0 F
(Chapter 13) 95.75 677.67 T
(Libraries and Modules) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.02 (component is enhanced or modi\336ed. Dylan supports softwar) 108 640.67 P
-0.02 (e components, infor-) 403.7 640.67 P
(mation hiding, and pr) 108 626.67 T
(otocols in terms of) 214.83 626.67 T
2 F
(libraries) 307.03 626.67 T
1 F
( and) 349.19 626.67 T
2 F
(modules) 373.31 626.67 T
1 F
(.) 416.69 626.67 T
(Many Dylan envir) 135 612.67 T
(onments support simple or exploratory pr) 223.89 612.67 T
(ogramming) 428.57 612.67 T
(with a) 108 598.67 T
4 10 Q
(dylan-user) 141.36 598.67 T
1 11 Q
( module that includes both the standar) 201.36 598.67 T
(d Dylan language facil-) 389.31 598.67 T
(ities and a common subset of Dylan libraries. Because all but the simplest pr) 108 584.67 T
(o-) 477.45 584.67 T
-0.04 (grams usually gr) 108 570.67 P
-0.04 (ow into pr) 189.97 570.67 P
-0.04 (ojects or ar) 240.52 570.67 P
-0.04 (e r) 292.92 570.67 P
-0.04 (eused in new pr) 305.05 570.67 P
-0.04 (ojects, it is good practice) 382.94 570.67 P
(to cr) 108 556.67 T
(eate a unique library and module for each pr) 129.37 556.67 T
(ogram or component. If you ar) 346.58 556.67 T
(e) 495.76 556.67 T
(writing a simple, stand-alone pr) 108 542.67 T
(ogram or a simple component, you can use the) 263.61 542.67 T
(simple library and module str) 108 528.67 T
(uctur) 253.12 528.67 T
(e illustrated in Section 2.5, page 20. Y) 279.01 528.67 T
(ou may) 458.23 528.67 T
(want to skim this chapter) 108 514.67 T
(, however) 230.58 514.67 T
(, so you have an idea of the options available) 277.95 514.67 T
(for mor) 108 500.67 T
(e complex situations.) 144.63 500.67 T
-0.2 (In this chapter) 135 486.67 P
-0.2 (, we start by describing the basic concepts of libraries \050Section) 203.84 486.67 P
(13.1\051, modules and namespaces \050Section 13.2\051, and pr) 108 472.67 T
(ograms and sour) 366.05 472.67 T
(ce r) 447.97 472.67 T
(ecor) 465.02 472.67 T
(ds) 485.32 472.67 T
(\050Section 13.3\051. In the r) 108 458.67 T
(emainder of the chapter) 212.96 458.67 T
(, we illustrate the concepts of librar-) 328.34 458.67 T
-0.43 (ies and modules by considering the classes and methods for times that we de\336ned) 108 444.67 P
(in Chapter 8,) 108 430.67 T
0 F
(A Simple Library) 176.37 430.67 T
1 F
(, and showing how they might be packaged into a) 253.59 430.67 T
(r) 108 416.67 T
(eusable softwar) 112.15 416.67 T
(e component or library) 188.26 416.67 T
(. W) 298.58 416.67 T
(e also show how the) 314.06 416.67 T
4 10 Q
(sixty-unit) 415.54 416.67 T
1 11 Q
(classes and methods could be a component substrate that the) 108 402.67 T
4 10 Q
(time) 407.17 402.67 T
1 11 Q
( library uses) 431.17 402.67 T
(and shar) 108 388.67 T
(es with an) 150.09 388.67 T
4 10 Q
(angle) 202.53 388.67 T
1 11 Q
( library) 232.53 388.67 T
(. Finally) 266.85 388.67 T
(, we illustrate how to implement a) 304.87 388.67 T
4 10 Q
(say) 474.14 388.67 T
1 11 Q
(pr) 108 374.67 T
(otocol that works with either or both of the) 118.76 374.67 T
4 10 Q
(time) 330.36 374.67 T
1 11 Q
( and) 354.36 374.67 T
4 10 Q
(angle) 378.49 374.67 T
1 11 Q
( libraries by cr) 408.49 374.67 T
(eat-) 477.78 374.67 T
(ing a separate library that de\336nes the shar) 108 360.67 T
(ed pr) 312.03 360.67 T
(otocol.) 337.53 360.67 T
3 15 Q
(13.1  Libraries) 108 321 T
1 11 Q
(A Dylan library de\336nes a softwar) 108 300.67 T
(e component \321 a separately compilable unit) 270.05 300.67 T
(that can be either a stand-alone pr) 108 286.67 T
(ogram or a component \050library\051 of some lar) 272.96 286.67 T
(ger) 482.9 286.67 T
(pr) 108 272.67 T
(ogram. The elements of the cor) 118.76 272.67 T
(e Dylan language ar) 268.69 272.67 T
(e in a library called) 366.32 272.67 T
4 10 Q
(dylan) 462.01 272.67 T
1 11 Q
(.) 492.01 272.67 T
(The simplest Dylan pr) 108 258.67 T
(ogram consists of at least two libraries: the original pr) 216.06 258.67 T
(o-) 476.85 258.67 T
-0.21 (gram sour) 108 244.67 P
-0.21 (ce in the pr) 157.67 244.67 P
-0.21 (ogram library) 211.06 244.67 P
-0.21 (, and the) 276.85 244.67 P
4 10 Q
-0.46 (dylan) 321.11 244.67 P
1 11 Q
-0.21 ( library) 351.11 244.67 P
-0.21 (, which supplies the pr) 385.22 244.67 P
-0.21 (e-) 495.07 244.67 P
(de\336ned Dylan language elements used by the pr) 108 230.67 T
(ogram library) 343.63 230.67 T
(. A simple Dylan) 409.63 230.67 T
(component may consist of only a single library \321 the component library) 108 216.67 T
(. The) 459.11 216.67 T
-0.2 (component library will be used by other libraries. The component library will use) 108 202.67 P
-0.3 (de\336nitions fr) 108 188.67 P
-0.3 (om the) 170.37 188.67 P
4 10 Q
-0.65 (dylan) 206.24 188.67 P
1 11 Q
-0.3 ( library \050and possibly other components\051. Hence, when) 236.24 188.67 P
-0.17 (combined with other components into a complete pr) 108 174.67 P
-0.17 (ogram, the pr) 361.83 174.67 P
-0.17 (ogram will con-) 427.43 174.67 P
(sist of several libraries.) 108 160.67 T
(In each Dylan implementation, a library is associated with implementation-) 135 146.67 T
-0 (speci\336c export information that is automatically maintained by the compiler) 108 132.67 P
-0 (. The) 477.34 132.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "188" 202
%%Page: "189" 203
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.2 Modules) 464 677.67 T
2 F
(189) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(library export information completely describes whatever implementation-) 108 640.67 T
(speci\336c information is needed for other softwar) 108 626.67 T
(e components to use the library) 338.57 626.67 T
(.) 490.12 626.67 T
(Thus, you can use libraries to deliver components in compiled form, keeping the) 108 612.67 T
(implementation of the library con\336dential.) 108 598.67 T
3 15 Q
(13.2  Modules) 108 439 T
1 11 Q
(A library is made up of modules, which hold the de\336nitions of the library) 108 418.67 T
(. Each) 464.29 418.67 T
(module speci\336es an independent) 108 404.67 T
2 F
(namespace) 271.52 404.67 T
1 F
( for Dylan constants and variables.) 326.5 404.67 T
(Each module can use de\336nitions fr) 108 390.67 T
(om other modules in the same library or in) 276.07 390.67 T
(other libraries, and each module can pr) 108 376.67 T
(ovide de\336nitions to other modules in the) 298.43 376.67 T
-0.15 (same or in other libraries. Each module contr) 108 362.67 P
-0.15 (ols the visibility of the names within) 325.55 362.67 P
(a module fr) 108 348.67 T
(om outside the module. Y) 164.35 348.67 T
(ou can use modules both to do information) 289.03 348.67 T
(hiding and to pr) 108 334.67 T
(event name clashes between constants and variables.) 187.27 334.67 T
3 13 Q
(13.2.1  Namespaces) 108 303.33 T
1 11 Q
(W) 108 283.67 T
(e mentioned in Section 2.3, page 14, that Dylan has module variables and mod-) 117.99 283.67 T
(ule constants. Every module contains its own set of module variables and con-) 108 269.67 T
(stants. T) 108 255.67 T
(wo independent modules) 147.65 255.67 T
4 10 Q
(a) 275.14 255.67 T
1 11 Q
( and) 281.14 255.67 T
4 10 Q
(b) 305.27 255.67 T
1 11 Q
( might both have variables named) 311.27 255.67 T
4 10 Q
(*x*) 479.83 255.67 T
1 11 Q
(.) 497.83 255.67 T
-0.26 (These ar) 108 241.67 P
-0.26 (e two dif) 148.49 241.67 P
-0.26 (fer) 190.9 241.67 P
-0.26 (ent variables with possibly dif) 203.98 241.67 P
-0.26 (fer) 349.48 241.67 P
-0.26 (ent values. W) 362.56 241.67 P
-0.26 (ithin module) 427.43 241.67 P
4 10 Q
-0.56 (a) 492.76 241.67 P
1 11 Q
-0.26 (,) 498.76 241.67 P
(a r) 108 227.67 T
(efer) 120.4 227.67 T
(ence to module variable) 138.74 227.67 T
4 10 Q
(*x*) 258.02 227.67 T
1 11 Q
( is a r) 276.02 227.67 T
(efer) 301.78 227.67 T
(ence to) 320.13 227.67 T
4 10 Q
(a) 357.04 227.67 T
1 11 Q
(\325s variable) 363.04 227.67 T
4 10 Q
(*x*) 415.58 227.67 T
1 11 Q
(. W) 433.58 227.67 T
(ithin mod-) 449.48 227.67 T
(ule) 108 213.67 T
4 10 Q
(b) 125.85 213.67 T
1 11 Q
(, a r) 131.85 213.67 T
(efer) 149.75 213.67 T
(ence to module variable) 168.1 213.67 T
4 10 Q
(*x*) 287.37 213.67 T
1 11 Q
( is a r) 305.37 213.67 T
(efer) 331.13 213.67 T
(ence to) 349.48 213.67 T
4 10 Q
(b) 386.4 213.67 T
1 11 Q
(\325s variable) 392.4 213.67 T
4 10 Q
(*x*) 444.93 213.67 T
1 11 Q
(. In this) 462.93 213.67 T
(sense, a module de\336nes its own namespace.) 108 199.67 T
3 13 Q
(13.2.2  De\336nitions) 108 168.33 T
1 11 Q
-0.09 (A module variable or module constant is declar) 108 148.67 P
-0.09 (ed and initialized by a) 338.52 148.67 P
2 F
-0.09 (de\336nition) 449.1 148.67 P
1 F
-0.09 (.) 498.59 148.67 P
(W) 108 134.67 T
(e have alr) 117.99 134.67 T
(eady seen that) 164.99 134.67 T
4 10 Q
(define variable) 237.52 134.67 T
1 11 Q
( is a de\336nition that establishes a) 327.52 134.67 T
2 F
(Comparison with C++ and Modula:) 141 564.67 T
1 F
( Dylan libraries ar) 319.62 564.67 T
(e similar to) 407.06 564.67 T
(C++ libraries in that they both ar) 141 550.67 T
(e potentially shar) 300.21 550.67 T
(ed components of) 384.38 550.67 T
(many pr) 141 536.67 T
(ograms. Unlike C++ libraries, Dylan libraries include all the) 182.24 536.67 T
-0.22 (information needed to be used by another Dylan library \321 ther) 141 522.67 P
-0.22 (e is no) 446.86 522.67 P
(companion header \336le that must be kept up to date.) 141 508.67 T
(Dylan libraries ar) 168 494.67 T
(e analogous to Modula packages \321 all the) 252.69 494.67 T
(information necessary to use a library is contained in the library) 141 480.67 T
(.) 450.35 480.67 T
135 577.88 135 473.12 2 L
V
0.25 H
0 Z
N
486 577.88 486 473.12 2 L
V
N
134.88 578 486.12 578 2 L
V
N
134.88 473 486.12 473 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "189" 203
%%Page: "190" 204
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(190) 72 677.67 T
0 F
(Chapter 13) 95.75 677.67 T
(Libraries and Modules) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(module variable, and) 108 640.67 T
4 10 Q
(define constant) 214.48 640.67 T
1 11 Q
( is a de\336nition that establishes a module) 304.48 640.67 T
(constant. Dylan also uses module constants to r) 108 626.67 T
(efer to classes, generic functions,) 338.34 626.67 T
(and macr) 108 612.67 T
(os. The de\336nition for a class,) 153.62 612.67 T
4 10 Q
(define class) 294.57 612.67 T
1 11 Q
(, establishes a module con-) 366.57 612.67 T
-0.01 (stant whose name is the class name and whose value is the class object. Similarly) 108 598.67 P
-0.01 (,) 498.52 598.67 P
(the de\336nitions for a generic function and a macr) 108 584.67 T
(o establish module constants.) 341.51 584.67 T
(When we say that a module contains de\336nitions, we mean that the classes,) 108 570.67 T
-0.25 (generic functions, macr) 108 556.67 P
-0.25 (os, and other objects de\336ned in that module ar) 220.91 556.67 P
-0.25 (e the values) 444.5 556.67 P
(of variables and constants in that module.) 108 542.67 T
3 13 Q
(13.2.3  Expor) 108 511.33 T
(t and impor) 173.99 511.33 T
(t of names b) 232.24 511.33 T
(y modules) 294.84 511.33 T
1 11 Q
(W) 108 491.67 T
(ithin each module, every name r) 118.39 491.67 T
(efers either to a de\336nition owned by that mod-) 275.53 491.67 T
(ule, or possibly to a de\336nition owned by another module. Modules make the) 108 477.67 T
(names of their de\336nitions available to other modules by) 108 463.67 T
2 F
(exporting) 382.15 463.67 T
1 F
( those names.) 430.43 463.67 T
(A module can r) 108 449.67 T
(efer to the names of another module by) 183.28 449.67 T
2 F
(using) 377.15 449.67 T
1 F
( the other module.) 405.25 449.67 T
(Note that no module can access a de\336nition in another module that is not) 108 435.67 T
(exported; hence, modules pr) 108 421.67 T
(ovide a form of access contr) 246.42 421.67 T
(ol.) 381.37 421.67 T
(When a module exports its names and a second module uses the \336rst mod-) 135 407.67 T
(ule, importing the names of the \336rst module, then the de\336nitions of the second) 108 393.67 T
-0.34 (module can use the names of the \336rst module, just as they can use any other name) 108 379.67 P
(in their own module.) 108 365.67 T
(When one module uses a second module, it can use all the names exported) 135 351.67 T
(fr) 108 337.67 T
(om the second module, or it can specify a subset of those exports to) 115.81 337.67 T
2 F
(import) 445.6 337.67 T
1 F
(. In) 479.82 337.67 T
(addition, imported names can be) 108 323.67 T
2 F
(renamed) 270.98 323.67 T
1 F
( \321 they can be given dif) 314.98 323.67 T
(fer) 432.58 323.67 T
(ent names) 445.66 323.67 T
(when imported. Y) 108 309.67 T
(ou can use r) 195.27 309.67 T
(enaming to document which de\336nitions ar) 253.66 309.67 T
(e fr) 460.64 309.67 T
(om) 476.47 309.67 T
(another module, by giving them all a uniform pr) 108 295.67 T
(e\336x; you can use r) 344.35 295.67 T
(enaming to) 431.95 295.67 T
(r) 108 281.67 T
(esolve name con\337icts; or you can use r) 112.15 281.67 T
(enaming to give nicknames or shorthand) 298.58 281.67 T
(names for imported names.) 108 267.67 T
2 F
-0.23 (Comparison with C:) 141 233.67 P
1 F
-0.23 ( Exported variables in Dylan ar) 241.66 233.67 P
-0.23 (e like external) 392.14 233.67 P
(variables and functions in C. \050By) 141 219.67 T
0 F
(external) 302.19 219.67 T
1 F
(, we do not mean the) 338.25 219.67 T
4 10 Q
(extern) 141 205.67 T
1 11 Q
( storage declaration, but rather the concept of an external) 177 205.67 T
(variable \321 one that is available for linking to.\051) 141 191.67 T
-0.42 (Unexported variables in Dylan ar) 168 177.67 P
-0.42 (e like) 328.71 177.67 P
4 10 Q
-0.92 (static) 356.42 177.67 P
1 11 Q
-0.42 ( variables and) 392.42 177.67 P
(functions in C.) 141 163.67 T
135 246.88 135 156.13 2 L
V
0.25 H
0 Z
N
486 246.88 486 156.13 2 L
V
N
134.88 247 486.12 247 2 L
V
N
134.88 156 486.12 156 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "190" 204
%%Page: "191" 205
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.2 Modules) 464 677.67 T
2 F
(191) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(13.2.4  Expor) 108 460.33 T
(t and impor) 173.99 460.33 T
(t of modules b) 232.24 460.33 T
(y libraries) 304.9 460.33 T
1 11 Q
(Just as a module speci\336es a namespace for de\336nitions, each library speci\336es an) 108 440.67 T
(independent namespace of modules and contr) 108 426.67 T
(ols the visibility of its modules.) 332.94 426.67 T
-0.29 (W) 108 412.67 P
-0.29 (ithin each library) 118.39 412.67 P
-0.29 (, every module r) 199.73 412.67 P
-0.29 (efers either to a module owned by that library) 278.77 412.67 P
-0.29 (,) 498.79 412.67 P
(or to a module owned by another library) 108 398.67 T
(. Libraries make their modules available) 305.09 398.67 T
(to other libraries by) 108 384.67 T
2 F
(exporting) 206.21 384.67 T
1 F
( those modules. A library can r) 254.49 384.67 T
(efer to the modules) 404.15 384.67 T
(of another library by) 108 370.67 T
2 F
(using) 211.17 370.67 T
1 F
( the other library) 239.27 370.67 T
(. No library can r) 319.96 370.67 T
(efer to the modules) 402.58 370.67 T
(of another library that ar) 108 356.67 T
(e not exported.) 227.69 356.67 T
(When a library exports a module and a second library uses the \336rst library) 135 342.67 T
(,) 495.48 342.67 T
(importing its modules, then the modules of the second library can use the mod-) 108 328.67 T
-0.17 (ules of the \336rst library) 108 314.67 P
-0.17 (, just as they can use any other modules in their own library) 213.82 314.67 P
-0.17 (.) 501.25 314.67 P
(When one library uses another library) 135 300.67 T
(, it can use all the modules exported) 318.6 300.67 T
(fr) 108 286.67 T
(om the second library) 115.81 286.67 T
(, or it can specify a subset of those exports to) 220.55 286.67 T
2 F
(import) 439.63 286.67 T
1 F
(.) 473.85 286.67 T
-0.41 (Imported modules can be) 108 272.67 P
2 F
-0.41 (renamed) 233.66 272.67 P
1 F
-0.41 ( as they ar) 277.67 272.67 P
-0.41 (e imported, just as imported module) 325.87 272.67 P
(names can be r) 108 258.67 T
(emoved.) 180.08 258.67 T
(Y) 135 244.67 T
(ou can see that libraries and modules together pr) 141.32 244.67 T
(ovide a two-level str) 379 244.67 T
(uc-) 478.26 244.67 T
(tur) 108 230.67 T
(e of naming, information hiding, and access contr) 122.37 230.67 T
(ol. The designers of Dylan) 362.97 230.67 T
-0.26 (believed that only a single level would not give suf) 108 216.67 P
-0.26 (\336cient \337exibility) 353.27 216.67 P
-0.26 (, but that mor) 430.76 216.67 P
-0.26 (e) 496.24 216.67 P
(than two levels was unnecessary) 108 202.67 T
(. In essence, modules give a \336ne level of contr) 265.74 202.67 T
(ol) 487.2 202.67 T
-0.2 (that lets you or) 108 188.67 P
-0.2 (ganize within a single component, and libraries give a higher level) 180.36 188.67 P
(of contr) 108 174.67 T
(ol that lets you or) 145.44 174.67 T
(ganize components into a pr) 230.35 174.67 T
(ogram. Also, libraries ar) 368.34 174.67 T
(e) 485.65 174.67 T
(the Dylan) 108 160.67 T
2 F
(compilation unit) 158.49 160.67 T
1 F
( \321 they ar) 242.5 160.67 T
(e the level at which components can be) 292.77 160.67 T
(exchanged without sour) 108 146.67 T
(ce code being exchanged. A softwar) 225.78 146.67 T
(e publisher would) 399.92 146.67 T
(typically sell its war) 108 132.67 T
(es as Dylan libraries.) 205.27 132.67 T
2 F
(Comparison with C++:) 141 620.67 T
1 F
( Dylan modules ar) 255.46 620.67 T
(e similar to C++) 345.29 620.67 T
(namespaces in that they eliminate the pr) 141 606.67 T
(oblem of global namespace) 337.38 606.67 T
(pollution or clashes between names used in individual libraries.) 141 592.67 T
(Unlike C++ namespaces, Dylan modules also de\336ne a level of access) 141 578.67 T
(contr) 141 564.67 T
(ol: Each module decides what names ar) 166.02 564.67 T
(e externally visible, and) 358.12 564.67 T
(no module can cr) 141 550.67 T
(eate or access names in another module, unless that) 225.02 550.67 T
(other module explicitly exports those names. In contrast, the C++) 141 536.67 T
4 10 Q
-1 (using) 141 522.67 P
1 11 Q
-0.46 ( declaration allows the client of a namespace to access any name) 171 522.67 P
(in that namespace.) 141 508.67 T
135 633.88 135 501.12 2 L
V
0.25 H
0 Z
N
486 633.88 486 501.12 2 L
V
N
134.88 634 486.12 634 2 L
V
N
134.88 501 486.12 501 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "191" 205
%%Page: "192" 206
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(192) 72 677.67 T
0 F
(Chapter 13) 95.75 677.67 T
(Libraries and Modules) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(13.2.5  Simple e) 108 639.33 T
(xample of libraries and modules) 187.27 639.33 T
1 11 Q
(T) 108 619.67 T
(o illustrate these concepts, we r) 113.73 619.67 T
(epeat the de\336nition of the) 265.51 619.67 T
4 10 Q
(library.dylan) 393.12 619.67 T
1 11 Q
( \336le,) 471.12 619.67 T
-0.42 (\336rst shown in Chapter 2,) 108 605.67 P
0 F
-0.42 (Quick Start) 231.27 605.67 P
1 F
-0.42 (. Her) 283.3 605.67 P
-0.42 (e, we have used a mor) 306.95 605.67 P
-0.42 (e verbose, but also) 413.12 605.67 P
(mor) 108 591.67 T
(e pr) 127.87 591.67 T
(ecise, format.) 146.64 591.67 T
(The \336rst line of) 108 401.67 T
4 10 Q
(library.dylan) 184.41 401.67 T
1 11 Q
( states that the expr) 262.41 401.67 T
(essions and de\336nitions in this) 356.71 401.67 T
(\336le ar) 108 387.67 T
(e in the) 135.52 387.67 T
4 10 Q
(dylan-user) 173.9 387.67 T
1 11 Q
( module. In this pr) 233.9 387.67 T
(ede\336ned module, you de\336ne the) 323.91 387.67 T
-0.29 (modules and library that make up your component or pr) 108 373.67 P
-0.29 (ogram. Every library has) 381.73 373.67 P
(a unique) 108 359.67 T
4 10 Q
(dylan-user) 153.3 359.67 T
1 11 Q
( module. In the \336le) 213.3 359.67 T
4 10 Q
(library.dylan) 307.83 359.67 T
1 11 Q
(, we de\336ne a library) 385.83 359.67 T
(named) 108 345.67 T
4 10 Q
(hello) 144.35 345.67 T
1 11 Q
( and a module named) 174.35 345.67 T
4 10 Q
(hello) 283.38 345.67 T
1 11 Q
(.) 313.38 345.67 T
(The module de\336nition names the other modules whose names the) 135 331.67 T
4 10 Q
(hello) 458.84 331.67 T
1 11 Q
(module will use. In this case, the) 108 317.67 T
4 10 Q
(hello) 269.17 317.67 T
1 11 Q
( module uses the) 299.17 317.67 T
4 10 Q
(dylan) 384.2 317.67 T
1 11 Q
( and) 414.2 317.67 T
4 10 Q
(format-out) 438.33 317.67 T
1 11 Q
-0.43 (modules. Her) 108 303.67 P
-0.43 (e, we have explicitly stated that we ar) 173.85 303.67 P
-0.43 (e importing all the names fr) 353.38 303.67 P
-0.43 (om) 485.96 303.67 P
-0.34 (the modules that we use \321 using the) 108 289.67 P
4 10 Q
-0.75 (import: all) 288.07 289.67 P
1 11 Q
-0.34 ( clause is not strictly necessary) 353.33 289.67 P
-0.34 (,) 498.84 289.67 P
-0.07 (because it is the default that is used if we do not specify what to import. By using) 108 275.67 P
(another module, we import the names exported fr) 108 261.67 T
(om that module, making them) 351.06 261.67 T
(available in our namespace. For example,) 108 247.67 T
4 10 Q
(format-out) 311.77 247.67 T
1 11 Q
( is exported fr) 371.77 247.67 T
(om the) 439.18 247.67 T
4 10 Q
(format-out) 108 233.67 T
1 11 Q
( module, so the) 168 233.67 T
4 10 Q
(use format-out) 245.22 233.67 T
1 11 Q
( clause enables our pr) 329.22 233.67 T
(ogram to call) 434.5 233.67 T
(the) 108 219.67 T
4 10 Q
(format-out) 126.01 219.67 T
1 11 Q
( function. The) 186.01 219.67 T
4 10 Q
(use dylan) 256.2 219.67 T
1 11 Q
( clause in the module de\336nition makes) 310.2 219.67 T
(available all the built-in Dylan language elements exported fr) 108 205.67 T
(om the) 405.93 205.67 T
4 10 Q
(dylan) 442.41 205.67 T
1 11 Q
( mod-) 472.41 205.67 T
(ule. When we de\336ne a module, it must) 108 191.67 T
4 10 Q
(use) 298.86 191.67 T
1 11 Q
( all the modules that export the de\336ni-) 316.86 191.67 T
(tions used by the de\336nitions in our module.) 108 177.67 T
(The library de\336nition tells the compiler which other libraries our pr) 135 163.67 T
(ogram) 462.78 163.67 T
(uses. Her) 108 149.67 T
(e, we have explicitly stated that we ar) 153.3 149.67 T
(e inter) 335.83 149.67 T
(ested in only the) 366.46 149.67 T
4 10 Q
(dylan) 449.55 149.67 T
1 11 Q
( and) 479.55 149.67 T
4 10 Q
(format-out) 108 135.67 T
1 11 Q
( modules fr) 168 135.67 T
(om these other libraries. This clause is not strictly neces-) 223.52 135.67 T
8 10 Q
(The libr) 237.24 558.33 T
(ar) 270.48 558.33 T
(y \336le:) 279.67 558.33 T
4 9 Q
(library.dylan) 305.79 558.33 T
8 10 Q
(.) 375.98 558.33 T
4 9 Q
(module: dylan-user) 114 539 T
(define library hello) 114 520 T
(use dylan, import: { dylan };) 124.8 509 T
(use format-out, import: { format-out };) 124.8 498 T
(end library hello;) 114 487 T
(define module hello) 114 468 T
(use dylan, import: all;) 124.8 457 T
(use format-out, import: all;) 124.8 446 T
(end module hello;) 114 435 T
108 570.88 108 428.12 2 L
V
0.25 H
0 Z
N
522 570.88 522 428.12 2 L
V
N
107.88 571 522.12 571 2 L
V
N
107.88 551 522.12 551 2 L
V
N
107.88 428 522.12 428 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "192" 206
%%Page: "193" 207
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.2 Modules) 464 677.67 T
2 F
(193) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.3 (sary) 108 640.67 P
-0.3 (, since the module de\336nition tells the compiler which modules it uses; but it is) 127.4 640.67 P
-0.05 (good practice to document our intent. For example, the) 108 626.67 P
4 10 Q
-0.1 (format-out) 378.17 626.67 P
1 11 Q
-0.05 ( module is in) 438.17 626.67 P
(the) 108 612.67 T
4 10 Q
(format-out) 126.01 612.67 T
1 11 Q
( library) 186.01 612.67 T
(. Ther) 220.33 612.67 T
(efor) 248.39 612.67 T
(e, our) 267.47 612.67 T
4 10 Q
(hello) 297.98 612.67 T
1 11 Q
( library must use the) 327.98 612.67 T
4 10 Q
(format-out) 430.94 612.67 T
1 11 Q
-0.32 (library) 108 598.67 P
-0.32 (, and must import the) 139.57 598.67 P
4 10 Q
-0.71 (format-out) 246.39 598.67 P
1 11 Q
-0.32 ( module for the) 306.39 598.67 P
4 10 Q
-0.71 (hello) 382.91 598.67 P
1 11 Q
-0.32 ( module to use the) 412.91 598.67 P
4 10 Q
(format-out) 108 584.67 T
1 11 Q
( module. Similarly) 168 584.67 T
(, the) 256.83 584.67 T
4 10 Q
(dylan) 280.33 584.67 T
1 11 Q
( module is in the) 310.33 584.67 T
4 10 Q
(dylan) 394.35 584.67 T
1 11 Q
( library) 424.35 584.67 T
(, and) 458.67 584.67 T
(ther) 108 570.67 T
(efor) 127.4 570.67 T
(e our) 146.49 570.67 T
4 10 Q
(hello) 174.24 570.67 T
1 11 Q
( library must use the) 204.24 570.67 T
4 10 Q
(dylan) 307.2 570.67 T
1 11 Q
( library and import the) 337.2 570.67 T
4 10 Q
(dylan) 451.08 570.67 T
1 11 Q
-0.08 (module in or) 108 556.67 P
-0.08 (der for the) 170.63 556.67 P
4 10 Q
-0.18 (hello) 224.24 556.67 P
1 11 Q
-0.08 ( module to use the) 254.24 556.67 P
4 10 Q
-0.18 (dylan) 346.54 556.67 P
1 11 Q
-0.08 ( module. When we de\336ne) 376.54 556.67 P
-0.32 (a library) 108 542.67 P
-0.32 (, it must) 147.5 542.67 P
4 10 Q
-0.7 (use) 188.91 542.67 P
1 11 Q
-0.32 ( all the libraries that export the modules used by the modules) 206.91 542.67 P
(in our library) 108 528.67 T
(.) 171.66 528.67 T
(The module de\336nition also speci\336es which variables and constants ar) 135 514.67 T
(e) 471.74 514.67 T
(exported fr) 108 500.67 T
(om the module for use by other modules. The library de\336nition speci-) 162.04 500.67 T
-0.14 (\336es which modules ar) 108 486.67 P
-0.14 (e exported fr) 214.33 486.67 P
-0.14 (om the library for use by other libraries. In our) 276.11 486.67 P
(simple example, the) 108 472.67 T
4 10 Q
(hello) 208.15 472.67 T
1 11 Q
( module exports no variables or constants, and the) 238.15 472.67 T
4 10 Q
(hello) 108 458.67 T
1 11 Q
( library exports no modules.) 138 458.67 T
(Figur) 135 444.67 T
(e 13.1 illustrates the r) 161.21 444.67 T
(elationships between libraries and modules in) 263.99 444.67 T
(our example pr) 108 430.67 T
(ogram. In Figur) 182.48 430.67 T
(e 13.1, and in the other \336gur) 258.73 430.67 T
(es in this chapter) 395.14 430.67 T
(, we) 476.57 430.67 T
(draw libraries as heavy bold boxes and modules as light boxes. W) 108 416.67 T
(e have tried to) 427.11 416.67 T
(illustrate how libraries and modules build on one another thr) 108 402.67 T
(ough their \322use\323) 405.73 402.67 T
-0.25 (r) 108 388.67 P
-0.25 (elationships. A library that uses another library is shown above the library that it) 112.15 388.67 P
(uses, so we show the) 108 374.67 T
4 10 Q
(hello) 212.35 374.67 T
1 11 Q
( library above the) 242.35 374.67 T
4 10 Q
(format-out) 330.47 374.67 T
1 11 Q
( and) 390.47 374.67 T
4 10 Q
(dylan) 414.59 374.67 T
1 11 Q
( libraries.) 444.59 374.67 T
-0.41 (An exported module is illustrated as being on top of \050overlapping\051 the library that) 108 360.67 P
108 147.01 504 155 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 13.1) 120.57 158.33 T
8 F
(Libr) 178.93 158.33 T
(ar) 195.5 158.33 T
(ies \050hea) 204.54 158.33 T
(vy bo) 239.91 158.33 T
(x) 263.51 158.33 T
(es\051 and modules \050light bo) 268.21 158.33 T
(x) 380.18 158.33 T
(es\051 in \322Hello) 384.88 158.33 T
(, w) 437.82 158.33 T
(or) 450.5 158.33 T
(ld\323.) 459.54 158.33 T
108 171 504 340 C
117 175 495 338 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 128 439 494 590 366 151 123 181 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f13-1.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(r) 6.0%%For: (brent) (harlequin)%%Title: (f13-1 .eps)%%CreationDate: (6/11/96) (11:29 AM)%%BoundingBox: 128 439 494 590%%HiResBoundingBox: 128.5 439 494 590%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.0%AI3_ColorUsage: Black&White%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set)%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 ()%AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 29 31 581 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 1 0%AI5_TargetResolution: 300%AI5_NumLayers: 1%AI5_OpenToView: 66 660 2 826 581 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 23 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_ax neg 0 rmoveto	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 17 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin		/initialize	{ 		Adobe_ColorImage_AI6 begin		Adobe_ColorImage_AI6		{			dup type /arraytype eq			{				dup xcheck				{					bind				} if			} if			pop pop		} forall	} def	/terminate { end } def		currentdict /Adobe_ColorImage_AI6_Vars known not	{		/Adobe_ColorImage_AI6_Vars 14 dict def	} if		Adobe_ColorImage_AI6_Vars begin		/channelcount 0 def		/sourcecount 0 def		/sourcearray 4 array def		/plateindex -1 def		/XIMask 0 def		/XIBinary 0 def		/XIChannelCount 0 def		/XIBitsPerPixel 0 def		/XIImageHeight 0 def		/XIImageWidth 0 def		/XIImageMatrix null def		/XIBuffer null def		/XIDataProc null def end		/WalkRGBString null def	/WalkCMYKString null def		/StuffRGBIntoGrayString null def	/RGBToGrayImageProc null def	/StuffCMYKIntoGrayString null def	/CMYKToGrayImageProc null def	/ColorImageCompositeEmulator null def		/SeparateCMYKImageProc null def		/FourEqual null def	/TestPlateIndex null def		currentdict /_colorimage known not	{		/colorimage where		{			/colorimage get /_colorimage exch def		}		{			/_colorimage null def		} ifelse	} if		/_currenttransfer systemdict /currenttransfer get def		/colorimage null def	/XI null def			/WalkRGBString	{		0 3 index			dup length 1 sub 0 3 3 -1 roll		{			3 getinterval { } forall				5 index exec				3 index		} for				 5 { pop } repeat		} def			/WalkCMYKString	{		0 3 index			dup length 1 sub 0 4 3 -1 roll		{			4 getinterval { } forall						6 index exec						3 index					} for				5 { pop } repeat			} def			/StuffRGBIntoGrayString	{		.11 mul exch				.59 mul add exch				.3 mul add				cvi 3 copy put				pop 1 add	} def			/RGBToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin 			sourcearray 0 get exec			dup length 3 idiv string			dup 3 1 roll 						/StuffRGBIntoGrayString load exch			WalkRGBString	 end	} def			/StuffCMYKIntoGrayString	{		exch .11 mul add				exch .59 mul add				exch .3 mul add				dup 255 gt { pop 255 } if				255 exch sub cvi 3 copy put				pop 1 add	} def			/CMYKToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin			sourcearray 0 get exec			dup length 4 idiv string			dup 3 1 roll 						/StuffCMYKIntoGrayString load exch			WalkCMYKString	 end	} def			/ColorImageCompositeEmulator	{		pop true eq		{			Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat		}		{			Adobe_ColorImage_AI6_Vars /channelcount get 1 ne			{				Adobe_ColorImage_AI6_Vars begin					sourcearray 0 3 -1 roll put									channelcount 3 eq 					{ 						/RGBToGrayImageProc 					}					{ 						/CMYKToGrayImageProc					} ifelse					load			 end			} if			image		} ifelse	} def			/SeparateCMYKImageProc	{			Adobe_ColorImage_AI6_Vars begin				sourcecount 0 ne			{				sourcearray plateindex get exec			}			{							sourcearray 0 get exec								dup length 4 idiv string								0 2 index								plateindex 4 2 index length 1 sub				{					get 255 exch sub										3 copy put pop 1 add										2 index				} for					pop pop exch pop			} ifelse	 end	} def				/FourEqual	{		4 index ne		{			pop pop pop false		}		{			4 index ne			{				pop pop false			}			{				4 index ne				{					pop false				}				{					4 index eq				} ifelse			} ifelse		} ifelse	} def			/TestPlateIndex	{		Adobe_ColorImage_AI6_Vars begin			/plateindex -1 def				/setcmykcolor where			{				pop				gsave				1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub				grestore					1 0 0 0 FourEqual 				{ 					/plateindex 0 def				}				{					0 1 0 0 FourEqual					{ 						/plateindex 1 def					}					{						0 0 1 0 FourEqual						{							/plateindex 2 def						}						{							0 0 0 1 FourEqual							{ 								/plateindex 3 def							}							{								0 0 0 0 FourEqual								{									/plateindex 5 def								} if							} ifelse						} ifelse					} ifelse				} ifelse				pop pop pop pop			} if			plateindex	 end	} def			/colorimage	{		Adobe_ColorImage_AI6_Vars begin			/channelcount 1 index def			/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def				4 sourcecount add index dup 			8 eq exch 1 eq or not	 end				{			/_colorimage load null ne			{				_colorimage			}			{				Adobe_ColorImage_AI6_Vars /sourcecount get				7 add { pop } repeat			} ifelse		}		{			dup 3 eq			TestPlateIndex			dup -1 eq exch 5 eq or or			{				/_colorimage load null eq				{					ColorImageCompositeEmulator				}				{					dup 1 eq					{						pop pop image					}					{						Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							gsave														0 _currenttransfer exec							1 _currenttransfer exec							eq							{ 0 _currenttransfer exec 0.5 lt }							{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse														{ { pop 0 } } { { pop 1 } } ifelse							systemdict /settransfer get exec						} if												_colorimage												Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							grestore						} if					} ifelse				} ifelse			}			{				dup 1 eq				{					pop pop					image				}				{					pop pop						Adobe_ColorImage_AI6_Vars begin						sourcecount -1 0						{										exch sourcearray 3 1 roll put						} for							/SeparateCMYKImageProc load				 end						systemdict /image get exec				} ifelse			} ifelse		} ifelse	} def		/XI	{		Adobe_ColorImage_AI6_Vars begin			gsave			/XIMask exch 0 ne def			/XIBinary exch 0 ne def			pop			pop			/XIChannelCount exch def			/XIBitsPerPixel exch def			/XIImageHeight exch def			/XIImageWidth exch def			pop pop pop pop			/XIImageMatrix exch def						XIBitsPerPixel 1 eq			{				XIImageWidth 8 div ceiling cvi			}			{				XIImageWidth XIChannelCount mul			} ifelse			/XIBuffer exch string def						XIBinary			{				/XIDataProc { currentfile XIBuffer readstring pop } def				currentfile 128 string readline pop pop			}			{				/XIDataProc { currentfile XIBuffer readhexstring pop } def			} ifelse						0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale						XIMask			{				XIImageWidth XIImageHeight				false				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								/_lp /null ddef				_fc				/_lp /imagemask ddef								imagemask			}			{				XIImageWidth XIImageHeight				XIBitsPerPixel				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								XIChannelCount 1 eq				{										gsave					0 setgray										image										grestore				}				{					false					XIChannelCount					colorimage				} ifelse			} ifelse			grestore	 end	} def	end%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Bricks)(Bricks) 2.565 5.19 74.565 77.19 [(0 O 0 R 0.3 0.85 0.85 0 k 0.3 0.85 0.85 0 K) @_ &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR1.6 73.6 m75.6 73.6 lS1.6 66.399 m75.6 66.399 LS1.6 59.199 m75.6 59.199 LS1.6 51.998 m75.6 51.998 LS1.6 44.798 m75.6 44.798 LS1.6 37.597 m75.6 37.597 LS1.6 30.397 m75.6 30.397 LS1.6 23.196 m75.6 23.196 LS1.6 15.996 m75.6 15.996 LS1.6 8.796 m75.6 8.796 LS70.975 73.6 m70.975 66.412 lS56.575 73.6 m56.575 66.412 LS42.175 73.6 m42.175 66.412 LS27.775 73.6 m27.775 66.412 LS13.375 73.6 m13.375 66.412 LS70.975 59.162 m70.975 51.975 lS56.575 59.162 m56.575 51.975 LS42.175 59.162 m42.175 51.975 LS27.775 59.162 m27.775 51.975 LS13.375 59.162 m13.375 51.975 LS70.975 44.787 m70.975 37.6 lS56.575 44.787 m56.575 37.6 LS42.175 44.787 m42.175 37.6 LS27.775 44.787 m27.775 37.6 LS13.375 44.787 m13.375 37.6 LS70.975 30.412 m70.975 23.225 lS56.575 30.412 m56.575 23.225 LS42.175 30.412 m42.175 23.225 LS27.775 30.412 m27.775 23.225 LS13.375 30.412 m13.375 23.225 LS70.975 15.975 m70.975 8.787 lS56.575 15.975 m56.575 8.787 LS42.175 15.975 m42.175 8.787 LS27.775 15.975 m27.775 8.787 LS13.375 15.975 m13.375 8.787 LS63.762 8.787 m63.762 1.6 LS49.362 8.787 m49.362 1.6 LS34.962 8.787 m34.962 1.6 LS20.562 8.787 m20.562 1.6 LS6.162 8.787 m6.162 1.6 lS63.762 23.225 m63.762 16.037 LS49.362 23.225 m49.362 16.037 LS34.962 23.225 m34.962 16.037 LS20.562 23.225 m20.562 16.037 LS6.162 23.225 m6.162 16.037 lS63.762 37.6 m63.762 30.412 LS49.362 37.6 m49.362 30.412 LS20.562 37.6 m20.562 30.412 LS6.162 37.6 m6.162 30.412 lS63.762 51.975 m63.762 44.787 LS49.362 51.975 m49.362 44.787 LS34.962 51.975 m34.962 44.787 LS20.562 51.975 m20.562 44.787 LS6.162 51.975 m6.162 44.787 lS63.762 66.412 m63.762 59.225 LS49.362 66.412 m49.362 59.225 LS34.962 66.412 m34.962 59.225 LS20.562 66.412 m20.562 59.225 LS6.162 66.412 m6.162 59.225 lS63.762 80.849 m63.762 73.662 LS49.362 80.849 m49.362 73.662 LS34.962 80.849 m34.962 73.662 LS20.562 80.849 m20.562 73.662 LS6.162 80.849 m6.162 73.662 lS34.962 37.6 m34.962 30.412 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Confetti)(Confetti) 4.85 3.617 76.85 75.617 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR10.6 64.867 m7.85 62.867 lS9.1 8.617 m6.85 6.867 lS78.1 68.617 m74.85 67.867 lS76.85 56.867 m74.35 55.117 lS79.6 51.617 m76.6 51.617 lS76.35 44.117 m73.6 45.867 lS78.6 35.867 m76.6 34.367 lS76.1 23.867 m73.35 26.117 lS78.1 12.867 m73.85 13.617 lS68.35 14.617 m66.1 12.867 lS76.6 30.617 m73.6 30.617 lS62.85 58.117 m60.956 60.941 lS32.85 59.617 m31.196 62.181 lS47.891 64.061 m49.744 66.742 lS72.814 2.769 m73.928 5.729 lS67.976 2.633 m67.35 5.909 lS61.85 27.617 m59.956 30.441 lS53.504 56.053 m51.85 58.617 lS52.762 1.779 m52.876 4.776 lS45.391 5.311 m47.244 7.992 lS37.062 3.375 m35.639 5.43 lS55.165 34.828 m57.518 37.491 lS20.795 3.242 m22.12 5.193 lS14.097 4.747 m15.008 8.965 lS9.736 1.91 m8.073 4.225 lS31.891 5.573 m32.005 8.571 lS12.1 70.367 m15.6 68.867 lS9.35 54.867 m9.6 58.117 lS12.85 31.867 m14.35 28.117 lS10.1 37.367 m12.35 41.117 lS34.1 71.117 m31.85 68.617 lS38.35 71.117 m41.6 68.367 lS55.1 71.117 m58.35 69.117 lS57.35 65.117 m55.35 61.867 lS64.35 66.367 m69.35 68.617 lS71.85 62.867 m69.35 61.117 lS23.6 70.867 m23.6 67.867 lS20.6 65.867 m17.35 65.367 lS24.85 61.367 m25.35 58.117 lS25.85 65.867 m29.35 66.617 lS14.1 54.117 m16.85 56.117 lS12.35 11.617 m12.6 15.617 lS12.1 19.867 m14.35 22.367 lS26.1 9.867 m23.6 13.367 lS34.6 47.117 m32.1 45.367 lS62.6 41.867 m59.85 43.367 lS31.6 35.617 m27.85 36.367 lS36.35 26.117 m34.35 24.617 lS33.85 14.117 m31.1 16.367 lS37.1 9.867 m35.1 11.117 lS34.35 20.867 m31.35 20.867 lS44.6 56.617 m42.1 54.867 lS47.35 51.367 m44.35 51.367 lS44.1 43.867 m41.35 45.617 lS43.35 33.117 m42.6 30.617 lS43.85 23.617 m41.1 25.867 lS44.35 15.617 m42.35 16.867 lS67.823 31.1 m64.823 31.1 lS27.1 32.617 m29.6 30.867 lS31.85 55.117 m34.85 55.117 lS19.6 40.867 m22.1 39.117 lS16.85 35.617 m19.85 35.617 lS20.1 28.117 m22.85 29.867 lS52.1 42.617 m54.484 44.178 lS52.437 50.146 m54.821 48.325 lS59.572 54.133 m59.35 51.117 lS50.185 10.055 m53.234 9.928 lS51.187 15.896 m53.571 14.075 lS58.322 19.883 m59.445 16.823 lS53.1 32.117 m50.6 30.367 lS52.85 24.617 m49.6 25.617 lS61.85 9.117 m59.1 10.867 lS69.35 34.617 m66.6 36.367 lS67.1 23.617 m65.1 22.117 lS24.435 46.055 m27.484 45.928 lS25.437 51.896 m27.821 50.075 lS62.6 47.117 m65.321 46.575 lS19.85 19.867 m20.35 16.617 lS21.85 21.867 m25.35 22.617 lS37.6 62.867 m41.6 62.117 lS38.323 42.1 m38.823 38.6 lS69.35 52.617 m66.85 53.867 lS14.85 62.117 m18.1 59.367 lS9.6 46.117 m7.1 44.367 lS20.6 51.617 m18.6 50.117 lS46.141 70.811 m47.994 73.492 lS69.391 40.561 m71.244 43.242 lS38.641 49.311 m39.35 52.117 lS25.141 16.811 m25.85 19.617 lS36.6 32.867 m34.6 31.367 lS6.1 68.617 m2.85 67.867 lS4.85 56.867 m2.35 55.117 lS7.6 51.617 m4.6 51.617 lS6.6 35.867 m4.6 34.367 lS6.1 12.867 m1.85 13.617 lS4.6 30.617 m1.6 30.617 lS72.814 74.769 m73.928 77.729 lS67.976 74.633 m67.35 77.909 lS52.762 73.779 m52.876 76.776 lS37.062 75.375 m35.639 77.43 lS20.795 75.242 m22.12 77.193 lS9.736 73.91 m8.073 76.225 lS10.1 23.617 m6.35 24.367 lS73.217 18.276 m71.323 21.1 lS28.823 39.6 m29.505 42.389 lS49.6 38.617 m47.6 37.117 lS60.323 73.6 m62.323 76.6 lS60.323 1.6 m62.323 4.6 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Cross Texture)(Cross Texture) 1 1 58.6 58.6 [(0 O 0 R 1 1 0.2 0 k 1 1 0.2 0 K) @_ &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR53.5 55 m56.5 55 lS39.1 55 m42.1 55 lS24.7 55 m27.7 55 lS10.3 55 m13.3 55 lS46.3 47.8 m49.3 47.8 lS31.9 47.8 m34.9 47.8 lS17.5 47.8 m20.5 47.8 lS3.1 47.8 m6.1 47.8 lS53.5 40.6 m56.5 40.6 lS39.1 40.6 m42.1 40.6 lS24.7 40.6 m27.7 40.6 lS10.3 40.6 m13.3 40.6 lS46.3 33.4 m49.3 33.4 lS31.9 33.4 m34.9 33.4 lS17.5 33.4 m20.5 33.4 lS3.1 33.4 m6.1 33.4 lS53.5 26.2 m56.5 26.2 lS39.1 26.2 m42.1 26.2 lS24.7 26.2 m27.7 26.2 lS10.3 26.2 m13.3 26.2 lS46.3 19 m49.3 19 lS31.9 19 m34.9 19 lS17.5 19 m20.5 19 lS3.1 19 m6.1 19 lS53.5 11.8 m56.5 11.8 lS39.1 11.8 m42.1 11.8 lS24.7 11.8 m27.7 11.8 lS10.3 11.8 m13.3 11.8 lS46.3 4.6 m49.3 4.6 lS31.9 4.6 m34.9 4.6 lS17.5 4.6 m20.5 4.6 lS3.1 4.6 m6.1 4.6 lS55 56.5 m55 53.5 lS40.6 56.5 m40.6 53.5 lS26.2 56.5 m26.2 53.5 lS11.8 56.5 m11.8 53.5 lS47.8 49.3 m47.8 46.3 lS33.4 49.3 m33.4 46.3 lS19 49.3 m19 46.3 lS4.6 49.3 m4.6 46.3 lS55 42.1 m55 39.1 lS40.6 42.1 m40.6 39.1 lS26.2 42.1 m26.2 39.1 lS11.8 42.1 m11.8 39.1 lS47.8 34.9 m47.8 31.9 lS33.4 34.9 m33.4 31.9 lS19 34.9 m19 31.9 lS4.6 34.9 m4.6 31.9 lS55 27.7 m55 24.7 lS40.6 27.7 m40.6 24.7 lS26.2 27.7 m26.2 24.7 lS11.8 27.7 m11.8 24.7 lS47.8 20.5 m47.8 17.5 lS33.4 20.5 m33.4 17.5 lS19 20.5 m19 17.5 lS4.6 20.5 m4.6 17.5 lS55 13.3 m55 10.3 lS40.6 13.3 m40.6 10.3 lS26.2 13.3 m26.2 10.3 lS11.8 13.3 m11.8 10.3 lS47.8 6.1 m47.8 3.1 lS33.4 6.1 m33.4 3.1 lS19 6.1 m19 3.1 lS4.6 6.1 m4.6 3.1 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Master diagonal)(Master diagonal) 798.9318 33.4829 1412.9318 827.4829 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer300 Ar0 J 0 j 0.5 w 3.8636 M []0 d%AI3_Note:0 D0 XR1205.9318 1208.4829 m1.9318 4.4829 lS1214.4318 1208.4829 m10.4318 4.4829 lS1222.9318 1208.4829 m18.9318 4.4829 lS1231.4318 1208.4829 m27.4318 4.4829 lS1239.9318 1208.4829 m35.9318 4.4829 lS1248.4318 1208.4829 m44.4318 4.4829 lS1256.9318 1208.4829 m52.9318 4.4829 lS1265.4318 1208.4829 m61.4318 4.4829 lS1273.9318 1208.4829 m69.9318 4.4829 lS1282.4318 1208.4829 m78.4318 4.4829 lS1290.9318 1208.4829 m86.9318 4.4829 lS1299.4318 1208.4829 m95.4318 4.4829 lS1307.9318 1208.4829 m103.9318 4.4829 lS1316.4318 1208.4829 m112.4318 4.4829 lS1324.9318 1208.4829 m120.9318 4.4829 lS1333.4318 1208.4829 m129.4318 4.4829 lS1341.9318 1208.4829 m137.9318 4.4829 lS1350.4318 1208.4829 m146.4318 4.4829 lS1358.9318 1208.4829 m154.9318 4.4829 lS1367.4318 1208.4829 m163.4318 4.4829 lS1375.9318 1208.4829 m171.9318 4.4829 lS1384.4318 1208.4829 m180.4318 4.4829 lS1392.9318 1208.4829 m188.9318 4.4829 lS1401.4318 1208.4829 m197.4318 4.4829 lS1409.9318 1208.4829 m205.9318 4.4829 lS1418.4318 1208.4829 m214.4318 4.4829 lS1426.9318 1208.4829 m222.9318 4.4829 lS1435.4318 1208.4829 m231.4318 4.4829 lS1443.9318 1208.4829 m239.9318 4.4829 lS1452.4318 1208.4829 m248.4318 4.4829 lS1460.9318 1208.4829 m256.9318 4.4829 lS1469.4318 1208.4829 m265.4318 4.4829 lS1477.9318 1208.4829 m273.9318 4.4829 lS1486.4318 1208.4829 m282.4318 4.4829 lS1494.9318 1208.4829 m290.9318 4.4829 lS1503.4318 1208.4829 m299.4318 4.4829 lS1511.9318 1208.4829 m307.9318 4.4829 lS1520.4318 1208.4829 m316.4318 4.4829 lS1528.9318 1208.4829 m324.9318 4.4829 lS1537.4318 1208.4829 m333.4318 4.4829 lS1545.9318 1208.4829 m341.9318 4.4829 lS1554.4318 1208.4829 m350.4318 4.4829 lS1562.9318 1208.4829 m358.9318 4.4829 lS1571.4318 1208.4829 m367.4318 4.4829 lS1579.9318 1208.4829 m375.9318 4.4829 lS1588.4318 1208.4829 m384.4318 4.4829 lS1596.9318 1208.4829 m392.9318 4.4829 lS1605.4318 1208.4829 m401.4318 4.4829 lS1613.9318 1208.4829 m409.9318 4.4829 lS1622.4318 1208.4829 m418.4318 4.4829 lS1630.9318 1208.4829 m426.9318 4.4829 lS1639.4318 1208.4829 m435.4318 4.4829 lS1647.9318 1208.4829 m443.9318 4.4829 lS1656.4318 1208.4829 m452.4318 4.4829 lS1664.9318 1208.4829 m460.9318 4.4829 lS1673.4318 1208.4829 m469.4318 4.4829 lS1681.9318 1208.4829 m477.9318 4.4829 lS1690.4318 1208.4829 m486.4318 4.4829 lS1698.9318 1208.4829 m494.9318 4.4829 lS1707.4318 1208.4829 m503.4318 4.4829 lS1715.9318 1208.4829 m511.9318 4.4829 lS1724.4318 1208.4829 m520.4318 4.4829 lS1732.9318 1208.4829 m528.9318 4.4829 lS1741.4318 1208.4829 m537.4318 4.4829 lS1749.9318 1208.4829 m545.9318 4.4829 lS1758.4318 1208.4829 m554.4318 4.4829 lS1766.9318 1208.4829 m562.9318 4.4829 lS1775.4318 1208.4829 m571.4318 4.4829 lS1783.9318 1208.4829 m579.9318 4.4829 lS1792.4318 1208.4829 m588.4318 4.4829 lS1800.9318 1208.4829 m596.9318 4.4829 lS1809.4318 1208.4829 m605.4318 4.4829 lS1817.9318 1208.4829 m613.9318 4.4829 lS1826.4318 1208.4829 m622.4318 4.4829 lS1834.9318 1208.4829 m630.9318 4.4829 lS1843.4318 1208.4829 m639.4318 4.4829 lS1851.9318 1208.4829 m647.9318 4.4829 lS1860.4318 1208.4829 m656.4318 4.4829 lS1868.9318 1208.4829 m664.9318 4.4829 lS1877.4318 1208.4829 m673.4318 4.4829 lS1885.9318 1208.4829 m681.9318 4.4829 lS1894.4318 1208.4829 m690.4318 4.4829 lS1902.9318 1208.4829 m698.9318 4.4829 lS1911.4318 1208.4829 m707.4318 4.4829 lS1919.9318 1208.4829 m715.9318 4.4829 lS1928.4318 1208.4829 m724.4318 4.4829 lS1936.9318 1208.4829 m732.9318 4.4829 lS1945.4318 1208.4829 m741.4318 4.4829 lS1953.9318 1208.4829 m749.9318 4.4829 lS1962.4318 1208.4829 m758.4318 4.4829 lS1970.9318 1208.4829 m766.9318 4.4829 lS1979.4318 1208.4829 m775.4318 4.4829 lS1987.9318 1208.4829 m783.9318 4.4829 lS1996.4318 1208.4829 m792.4318 4.4829 lS2004.9318 1208.4829 m800.9318 4.4829 lS2013.4318 1208.4829 m809.4318 4.4829 lS2021.9318 1208.4829 m817.9318 4.4829 lS2030.4318 1208.4829 m826.4318 4.4829 lS2038.9318 1208.4829 m834.9318 4.4829 lS2047.4318 1208.4829 m843.4318 4.4829 lS2055.9318 1208.4829 m851.9318 4.4829 lS2064.4318 1208.4829 m860.4318 4.4829 lS2072.9318 1208.4829 m868.9318 4.4829 lS2081.4318 1208.4829 m877.4318 4.4829 lS2089.9318 1208.4829 m885.9318 4.4829 lS2098.4318 1208.4829 m894.4318 4.4829 lS2106.9318 1208.4829 m902.9318 4.4829 lS2115.4318 1208.4829 m911.4318 4.4829 lS2123.9318 1208.4829 m919.9318 4.4829 lS2132.4318 1208.4829 m928.4318 4.4829 lS2140.9318 1208.4829 m936.9318 4.4829 lS2149.4318 1208.4829 m945.4318 4.4829 lS2157.9318 1208.4829 m953.9318 4.4829 lS2166.4318 1208.4829 m962.4318 4.4829 lS2174.9318 1208.4829 m970.9318 4.4829 lS2183.4318 1208.4829 m979.4318 4.4829 lS2191.9318 1208.4829 m987.9318 4.4829 lS2200.4318 1208.4829 m996.4318 4.4829 lS2208.9318 1208.4829 m1004.9318 4.4829 lS2217.4318 1208.4829 m1013.4318 4.4829 lS2225.9318 1208.4829 m1021.9318 4.4829 lS2234.4318 1208.4829 m1030.4318 4.4829 lS2242.9318 1208.4829 m1038.9318 4.4829 lS2251.4318 1208.4829 m1047.4318 4.4829 lS2259.9318 1208.4829 m1055.9318 4.4829 lS2268.4318 1208.4829 m1064.4318 4.4829 lS2276.9318 1208.4829 m1072.9318 4.4829 lS2285.4318 1208.4829 m1081.4318 4.4829 lS2293.9318 1208.4829 m1089.9318 4.4829 lS2302.4318 1208.4829 m1098.4318 4.4829 lS2310.9318 1208.4829 m1106.9318 4.4829 lS2319.4318 1208.4829 m1115.4318 4.4829 lS2327.9318 1208.4829 m1123.9318 4.4829 lS2336.4318 1208.4829 m1132.4318 4.4829 lS2344.9318 1208.4829 m1140.9318 4.4829 lS2353.4318 1208.4829 m1149.4318 4.4829 lS2361.9318 1208.4829 m1157.9318 4.4829 lS1157.8485 4.4829 mS2361.8485 1208.4829 mS2370.3485 1208.4829 m1166.3485 4.4829 lS2378.8485 1208.4829 m1174.8485 4.4829 lS2387.3485 1208.4829 m1183.3485 4.4829 lS2395.8485 1208.4829 m1191.8485 4.4829 lS2404.3485 1208.4829 m1200.3485 4.4829 lS2412.8485 1208.4829 m1208.8485 4.4829 lS2421.3485 1208.4829 m1217.3485 4.4829 lS2429.8485 1208.4829 m1225.8485 4.4829 lS2438.3485 1208.4829 m1234.3485 4.4829 lS2446.8485 1208.4829 m1242.8485 4.4829 lS2455.3485 1208.4829 m1251.3485 4.4829 lS2463.8485 1208.4829 m1259.8485 4.4829 lS2472.3485 1208.4829 m1268.3485 4.4829 lS1268.2652 4.4829 mS2472.2652 1208.4829 mS2480.7652 1208.4829 m1276.7652 4.4829 lS2489.2652 1208.4829 m1285.2652 4.4829 lS2497.7652 1208.4829 m1293.7652 4.4829 lS2506.2652 1208.4829 m1302.2652 4.4829 lS2514.7652 1208.4829 m1310.7652 4.4829 lS2523.2652 1208.4829 m1319.2652 4.4829 lS2531.7652 1208.4829 m1327.7652 4.4829 lS2540.2652 1208.4829 m1336.2652 4.4829 lS2548.7652 1208.4829 m1344.7652 4.4829 lS2557.2652 1208.4829 m1353.2652 4.4829 lS2565.7652 1208.4829 m1361.7652 4.4829 lS2574.2652 1208.4829 m1370.2652 4.4829 lS2582.7652 1208.4829 m1378.7652 4.4829 lS994.9318 893.4829 mS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Parquet Floor)(Parquet Floor) 3.85 3.85 75.85 75.85 [(0 O 0 R 0.26 0.497 0.75 0 k 0.26 0.497 0.75 0 K) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR37.6 6.1 m37.6 10.598 L19.6 10.598 L19.6 6.1 L37.6 6.1 Ls73.6 6.1 m73.6 10.598 L55.6 10.598 L55.6 6.1 L73.6 6.1 Ls19.6 24.1 m19.6 28.598 L1.6 28.598 L1.6 24.1 L19.6 24.1 Ls55.6 24.1 m55.6 28.598 L37.6 28.598 L37.6 24.1 L55.6 24.1 Ls82.6 24.1 m82.6 28.598 L73.6 28.598 L73.6 24.1 L82.6 24.1 Ls37.6 42.1 m37.6 46.598 L19.6 46.598 L19.6 42.1 L37.6 42.1 Ls73.6 42.1 m73.6 46.598 L55.6 46.598 L55.6 42.1 L73.6 42.1 Ls19.6 60.1 m19.6 64.598 L1.6 64.598 L1.6 60.1 L19.6 60.1 Ls55.6 60.1 m55.6 64.598 L37.6 64.598 L37.6 60.1 L55.6 60.1 Ls82.6 60.1 m82.6 64.598 L73.6 64.598 L73.6 60.1 L82.6 60.1 Ls37.6 15.098 m37.6 19.598 L19.6 19.598 L19.6 15.098 L37.6 15.098 Ls73.6 15.098 m73.6 19.598 L55.6 19.598 L55.6 15.098 L73.6 15.098 Ls19.6 33.098 m19.6 37.598 L1.6 37.598 L1.6 33.098 L19.6 33.098 Ls55.6 33.098 m55.6 37.598 L37.6 37.598 L37.6 33.098 L55.6 33.098 Ls82.6 33.098 m82.6 37.598 L73.6 37.598 L73.6 33.098 L82.6 33.098 Ls37.6 51.098 m37.6 55.598 L19.6 55.598 L19.6 51.098 L37.6 51.098 Ls73.6 51.098 m73.6 55.598 L55.6 55.598 L55.6 51.098 L73.6 51.098 Ls19.6 69.098 m19.6 73.598 L1.6 73.598 L1.6 69.098 L19.6 69.098 Ls55.6 69.098 m55.6 73.598 L37.6 73.598 L37.6 69.098 L55.6 69.098 Ls82.6 69.098 m82.6 73.598 L73.6 73.598 L73.6 69.098 L82.6 69.098 Ls15.1 19.598 m10.6 19.598 L10.6 1.6 L15.1 1.6 L15.1 19.598 Ls51.1 19.598 m46.6 19.598 L46.6 1.6 L51.1 1.6 L51.1 19.598 Ls33.1 37.598 m28.6 37.598 L28.6 19.6 L33.1 19.6 L33.1 37.598 Ls69.1 37.598 m64.6 37.598 L64.6 19.6 L69.1 19.6 L69.1 37.598 Ls15.1 55.598 m10.6 55.598 L10.6 37.6 L15.1 37.6 L15.1 55.598 Ls51.1 55.598 m46.6 55.598 L46.6 37.6 L51.1 37.6 L51.1 55.598 Ls33.1 73.598 m28.6 73.598 L28.6 55.6 L33.1 55.6 L33.1 73.598 Ls69.1 73.598 m64.6 73.598 L64.6 55.6 L69.1 55.6 L69.1 73.598 Ls15.1 82.598 m10.6 82.598 L10.6 73.6 L15.1 73.6 L15.1 82.598 Ls51.1 82.598 m46.6 82.598 L46.6 73.6 L51.1 73.6 L51.1 82.598 Ls19.6 19.598 m15.1 19.598 L15.1 1.6 L19.6 1.6 L19.6 19.598 Ls55.6 19.598 m51.1 19.598 L51.1 1.6 L55.6 1.6 L55.6 19.598 Ls37.6 37.598 m33.1 37.598 L33.1 19.6 L37.6 19.6 L37.6 37.598 Ls73.6 37.598 m69.1 37.598 L69.1 19.6 L73.6 19.6 L73.6 37.598 Ls19.6 55.598 m15.1 55.598 L15.1 37.6 L19.6 37.6 L19.6 55.598 Ls55.6 55.598 m51.1 55.598 L51.1 37.6 L55.6 37.6 L55.6 55.598 Ls37.6 73.598 m33.1 73.598 L33.1 55.6 L37.6 55.6 L37.6 73.598 Ls73.6 73.598 m69.1 73.598 L69.1 55.6 L73.6 55.6 L73.6 73.598 Ls19.6 82.598 m15.1 82.598 L15.1 73.6 L19.6 73.6 L19.6 82.598 Ls55.6 82.598 m51.1 82.598 L51.1 73.6 L55.6 73.6 L55.6 82.598 Ls6.1 19.598 m1.6 19.598 L1.6 1.6 L6.1 1.6 L6.1 19.598 Ls42.1 19.598 m37.6 19.598 L37.6 1.6 L42.1 1.6 L42.1 19.598 Ls78.1 19.598 m73.6 19.598 L73.6 1.6 L78.1 1.6 L78.1 19.598 Ls24.1 37.598 m19.6 37.598 L19.6 19.6 L24.1 19.6 L24.1 37.598 Ls60.1 37.598 m55.6 37.598 L55.6 19.6 L60.1 19.6 L60.1 37.598 Ls6.1 55.598 m1.6 55.598 L1.6 37.6 L6.1 37.6 L6.1 55.598 Ls42.1 55.598 m37.6 55.598 L37.6 37.6 L42.1 37.6 L42.1 55.598 Ls78.1 55.598 m73.6 55.598 L73.6 37.6 L78.1 37.6 L78.1 55.598 Ls24.1 73.598 m19.6 73.598 L19.6 55.6 L24.1 55.6 L24.1 73.598 Ls60.1 73.598 m55.6 73.598 L55.6 55.6 L60.1 55.6 L60.1 73.598 Ls6.1 82.598 m1.6 82.598 L1.6 73.6 L6.1 73.6 L6.1 82.598 Ls42.1 82.598 m37.6 82.598 L37.6 73.6 L42.1 73.6 L42.1 82.598 Ls78.1 82.598 m73.6 82.598 L73.6 73.6 L78.1 73.6 L78.1 82.598 Ls37.6 1.6 m37.6 6.098 L19.6 6.098 L19.6 1.6 L37.6 1.6 Ls73.6 1.6 m73.6 6.098 L55.6 6.098 L55.6 1.6 L73.6 1.6 Ls19.6 19.6 m19.6 24.098 L1.6 24.098 L1.6 19.6 L19.6 19.6 Ls55.6 19.6 m55.6 24.098 L37.6 24.098 L37.6 19.6 L55.6 19.6 Ls82.6 19.6 m82.6 24.098 L73.6 24.098 L73.6 19.6 L82.6 19.6 Ls37.6 37.6 m37.6 42.098 L19.6 42.098 L19.6 37.6 L37.6 37.6 Ls73.6 37.6 m73.6 42.098 L55.6 42.098 L55.6 37.6 L73.6 37.6 Ls19.6 55.6 m19.6 60.098 L1.6 60.098 L1.6 55.6 L19.6 55.6 Ls55.6 55.6 m55.6 60.098 L37.6 60.098 L37.6 55.6 L55.6 55.6 Ls82.6 55.6 m82.6 60.098 L73.6 60.098 L73.6 55.6 L82.6 55.6 Ls37.6 73.6 m37.6 78.098 L19.6 78.098 L19.6 73.6 L37.6 73.6 Ls73.6 73.6 m73.6 78.098 L55.6 78.098 L55.6 73.6 L73.6 73.6 Ls%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Waves-Transparent)(Waves-Transparent) 4 5.89 113.125 31.693 [%AI3_Tile(0 O 0 R 1 0 0.35 0 k 1 0 0.35 0 K) @(%AI6_BeginPatternLayer800 Ar2 J 0 j 1.5 w 4 M []0 d%AI3_Note:0 D0 XR113.125 12.602 m106.95 12.602 102.306 13.907 99.484 14.73 c96.664 15.553 92.018 16.858 85.844 16.858 c79.67 16.858 75.024 15.553 72.203 14.73 c69.382 13.906 64.737 12.602 58.562 12.602 c52.388 12.602 47.743 13.907 44.922 14.73 c42.101 15.553 37.455 16.858 31.281 16.858 c25.107 16.858 20.461 15.553 17.641 14.73 c14.819 13.907 10.174 12.602 4 12.602 cS113.125 8.301 m106.95 8.301 102.306 9.606 99.484 10.429 c96.664 11.252 92.018 12.557 85.844 12.557 c79.67 12.557 75.024 11.252 72.203 10.429 c69.382 9.606 64.737 8.301 58.562 8.301 c52.388 8.301 47.743 9.606 44.922 10.429 c42.101 11.252 37.455 12.557 31.281 12.557 c25.107 12.557 20.461 11.252 17.641 10.429 c14.819 9.606 10.174 8.301 4 8.301 cS113.125 4 m106.95 4 102.306 5.305 99.484 6.128 c96.664 6.951 92.018 8.256 85.844 8.256 c79.67 8.256 75.024 6.951 72.203 6.128 c69.382 5.305 64.737 4 58.562 4 c52.388 4 47.743 5.305 44.922 6.128 c42.101 6.951 37.455 8.256 31.281 8.256 c25.107 8.256 20.461 6.951 17.641 6.128 c14.819 5.305 10.174 4 4 4 cS113.125 29.805 m106.95 29.805 102.306 31.11 99.484 31.933 c96.664 32.756 92.018 34.061 85.844 34.061 c79.67 34.061 75.024 32.756 72.203 31.933 c69.382 31.109 64.737 29.805 58.562 29.805 c52.388 29.805 47.743 31.11 44.922 31.933 c42.101 32.756 37.455 34.061 31.281 34.061 c25.107 34.061 20.461 32.756 17.641 31.933 c14.819 31.11 10.174 29.805 4 29.805 cS113.125 25.504 m106.95 25.504 102.306 26.809 99.484 27.632 c96.664 28.455 92.018 29.76 85.844 29.76 c79.67 29.76 75.024 28.455 72.203 27.632 c69.382 26.809 64.737 25.504 58.562 25.504 c52.388 25.504 47.743 26.809 44.922 27.632 c42.101 28.455 37.455 29.76 31.281 29.76 c25.107 29.76 20.461 28.455 17.641 27.632 c14.819 26.809 10.174 25.504 4 25.504 cS113.125 21.203 m106.95 21.203 102.306 22.508 99.484 23.331 c96.664 24.154 92.018 25.459 85.844 25.459 c79.67 25.459 75.024 24.154 72.203 23.331 c69.382 22.508 64.737 21.203 58.562 21.203 c52.388 21.203 47.743 22.508 44.922 23.331 c42.101 24.154 37.455 25.459 31.281 25.459 c25.107 25.459 20.461 24.154 17.641 23.331 c14.819 22.508 10.174 21.203 4 21.203 cS113.125 16.902 m106.95 16.902 102.306 18.207 99.484 19.03 c96.664 19.853 92.018 21.158 85.844 21.158 c79.67 21.158 75.024 19.853 72.203 19.03 c69.382 18.207 64.737 16.902 58.562 16.902 c52.388 16.902 47.743 18.207 44.922 19.03 c42.101 19.853 37.455 21.158 31.281 21.158 c25.107 21.158 20.461 19.853 17.641 19.03 c14.819 18.207 10.174 16.902 4 16.902 cS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D0 XR8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp7 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Green & Blue)(Green & Blue) 0 2 Bd[<99999A9A9B9B9B9C9C9D9D9D9E9E9F9F9FA0A0A1A1A1A2A2A3A3A3A4A4A5A5A5A6A6A7A7A7A8A8A9A9A9AAAAABABABACACADADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B9B9B9BABABBBBBBBCBCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9C9C9CACACBCBCBCCCCCDCDCDCECECFCFCFD0D0D1D1D1D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDDDDDDDEDEDFDFDFE0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F5F6F6F7F7F7F8F8F9F9F9FAFAFBFBFBFCFCFDFDFDFEFEFFFF><000102020304050506070808090A0B0B0C0D0E0E0F101111121314141516171718191A1A1B1C1D1D1E1F20202122232324252626272829292A2B2C2C2D2E2F2F303132323334353536373838393A3B3B3C3D3E3E3F404141424344444546474748494A4A4B4C4D4D4E4F50505152535354555656575859595A5B5C5C5D5E5F5F606162626364656566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F80808182828384858586878888898A8B8B8C8D8E8E8F909191929394949596979798999A9A9B9C9D9D9E9FA0A0A1A2A3A3A4A5A6A6A7A8A9A9AAABACACADAEAFAFB0B1B2B2B3B4B5B5B6B7B8B8B9BABBBBBCBDBEBEBF><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br[1 0.75 0 0 1 50 100 %_Bs0.6 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Purple, Red & Yellow)(Purple, Red & Yellow) 0 3 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A><CCCCCCCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D4D4D4D4D5D5D5D5D5D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDCDCDCDCDCDDDDDDDDDDDEDEDEDEDFDFDFDFDFE0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E3E3E3E3E4E4E4E4E4E5E5E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E9E9E9E9E9EAEAEAEAEAEBEBEBEBEBECECECECECEDEDEDEDEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFDFDFDFDFDFEFEFEFEFEFFFFFF>01 %_Br<E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E5E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBECECECECECECECECECEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFFFFFFFFFF><00010203040405060708090A0B0C0C0D0E0F10111213141415161718191A1B1C1D1D1E1F20212223242525262728292A2B2C2D2D2E2F30313233343535363738393A3B3C3D3D3E3F40414243444545464748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5E5E5F60616263646566666768696A6B6C6D6E6E6F70717273747576767778797A7B7C7D7E7F7F80818283848586878788898A8B8C8D8E8F8F90919293949596979798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFAFB0B1B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C8C9CACBCC>01 %_Br[0 0.04 1 0 1 50 100 %_Bs0 1 0.8 0 1 50 50 %_Bs0.9 0.9 0 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Steel Bar)(Steel Bar) 0 3 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br[0 0 50 100 %_Bs1 0 50 70 %_Bs0 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (White & Purple Radial)(White & Purple Radial) 1 2 Bd[<8C8C8B8B8A898988888787868685858483838282818180807F7F7E7D7D7C7C7B7B7A7A7978787777767675757474737272717170706F6F6E6D6D6C6C6B6B6A6A6969686767666665656464636262616160605F5F5E5E5D5C5C5B5B5A5A5959585757565655555454535352515150504F4F4E4E4D4C4C4B4B4A4A4949484847464645454444434342414140403F3F3E3E3D3D3C3B3B3A3A3939383837363635353434333332323130302F2F2E2E2D2D2C2B2B2A2A2929282827272625252424232322222120201F1F1E1E1D1D1C1C1B1A1A1919181817171615151414131312121111100F0F0E0E0D0D0C0C0B0A0A090908080707060605040403030202010100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>001 %_Br[0.55 1 0 0 1 50 10 %_Bs0 0 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 4 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A1 Ap0 O0.9 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR463.5 439 m463.5 507.5 L355 507.5 L355 439 L463.5 439 Lf279 439 m279 507.5 L194.5 507.5 L194.5 439 L279 439 Lf0 To1 0 0 1 322.5 529.5 0 TpTP-13.4967 0 Td0 Tr0 g/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(hello) Tx (\r) TX TO0 To1 0 0 1 149 571.5 0 TpTP-13.4967 0 Td0 Tr(hello) Tx (\r) TX TO0 R0 G0.65 w468.5 494 m468.5 566.5 L185.5 566.5 L185.5 494 L468.5 494 Ls0 Ap355 439 m355 507.5 l463.5 507.5 l463.5 439 lS0 To1 0 0 1 161 458.5 0 TpTP-26.9934 0 Td0 Tr0 O0 g1 w(format-out) Tx (\r) TX TO0 To1 0 0 1 236.25 458.5 0 TpTP-26.9934 0 Td0 Tr(format-out) Tx (\r) TX TO0 To1 0 0 1 318 458.5 0 TpTP-13.4967 0 Td0 Tr(dylan) Tx (\r) TX TO0 To1 0 0 1 408.75 458.5 0 TpTP-13.4967 0 Td0 Tr(dylan) Tx (\r) TX TO1 Ap0 R0 G2 w493 480 m493 589 L129.5 589 L129.5 480 L493 480 Ls0 Ap129.5 439 m129.5 471.5 l194.5 471.5 lS279 471.5 m288.5 471.5 l288.5 439 lS296.5 439 m296.5 471.5 l355 471.5 lS464 471.5 m493 471.5 l493 439 lS0.5 w230.1667 558.3333 mS0.65 w194.5 439 m194.5 507.5 l279 507.5 l279 439 l279 507.5 lS238.5 530.6667 mS0.5 w261.9792 517.3542 mSLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 171 504 340 C
36 72 576 720 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "193" 207
%%Page: "194" 208
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(194) 72 677.67 T
0 F
(Chapter 13) 95.75 677.67 T
(Libraries and Modules) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(exports it \050we have also shaded them, to illustrate this overlap\051. And a module) 108 640.67 T
(that uses another module is illustrated as being on top of \050overlapping\051 the used) 108 626.67 T
(module. T) 108 612.67 T
(ry to envision the modules as semitranspar) 156.8 612.67 T
(ent overlays, layer) 365.94 612.67 T
(ed up) 454.99 612.67 T
(fr) 108 598.67 T
(om the surface of the paper) 115.81 598.67 T
(. Thus, the) 247.94 598.67 T
4 10 Q
(hello) 301.39 598.67 T
1 11 Q
( module overlays the) 331.39 598.67 T
4 10 Q
(format-out) 436.51 598.67 T
1 11 Q
(and) 108 584.67 T
4 10 Q
(dylan) 129.37 584.67 T
1 11 Q
( modules that it uses.) 159.37 584.67 T
(Note that we intentionally do not show all the modules in the) 135 570.67 T
4 10 Q
(format-out) 436.79 570.67 T
1 11 Q
(and) 108 556.67 T
4 10 Q
(dylan) 129.37 556.67 T
1 11 Q
( libraries in Figur) 159.37 556.67 T
(e 13.1. The) 243.25 556.67 T
4 10 Q
(format-out) 297.18 556.67 T
1 11 Q
( and) 357.18 556.67 T
4 10 Q
(dylan) 381.3 556.67 T
1 11 Q
( libraries might) 411.3 556.67 T
(well have other modules, but either those modules ar) 108 542.67 T
(e not exported or our pr) 366.95 542.67 T
(o-) 483.54 542.67 T
(gram does not use them.) 108 528.67 T
3 15 Q
(13.3  Sour) 108 489 T
(ce code) 166.57 489 T
(, modules, and libraries) 212.51 489 T
1 11 Q
-0.25 (How is Dylan sour) 108 468.67 P
-0.25 (ce code associated with modules and libraries? In Sections 13.1) 198.89 468.67 P
(and 13.2, we looked at a Dylan pr) 108 454.67 T
(ogram fr) 270.71 454.67 T
(om the top down: A pr) 312.95 454.67 T
(ogram contains) 424.25 454.67 T
(libraries; a library contains modules; and a module contains variables and their) 108 440.67 T
(de\336nitions. W) 108 426.67 T
(e now look at a pr) 175.6 426.67 T
(ogram fr) 262.87 426.67 T
(om the bottom up, to see how sour) 305.11 426.67 T
(ce) 474.14 426.67 T
(code is or) 108 412.67 T
(ganized into modules, modules into libraries, and libraries into) 154.4 412.67 T
(pr) 108 398.67 T
(ograms.) 118.76 398.67 T
3 13 Q
(13.3.1  Sour) 108 367.33 T
(ce recor) 167.66 367.33 T
(ds and modules) 208.95 367.33 T
1 11 Q
(All the Dylan sour) 108 347.67 T
(ce code for a pr) 197.65 347.67 T
(ogram is or) 271.95 347.67 T
(ganized into units called) 327.15 347.67 T
2 F
(source) 449.32 347.67 T
(records) 108 333.67 T
1 F
(. How sour) 144.66 333.67 T
(ce r) 198.7 333.67 T
(ecor) 215.74 333.67 T
(ds ar) 236.05 333.67 T
(e stor) 259.83 333.67 T
(ed is dependent on the implementation.) 286.26 333.67 T
-0.36 (Some implementations may stor) 108 319.67 P
-0.36 (e sour) 263.99 319.67 P
-0.36 (ce r) 293.1 319.67 P
-0.36 (ecor) 309.79 319.67 P
-0.36 (ds in a database, others may simply) 330.1 319.67 P
(use) 108 305.67 T
2 F
(interchange format) 127.32 305.67 T
1 F
( \336les \050see Section 13.6, page 203\051. No matter how they ar) 222.95 305.67 T
(e) 495.13 305.67 T
(stor) 108 291.67 T
(ed, each sour) 126.4 291.67 T
(ce r) 190.15 291.67 T
(ecor) 207.2 291.67 T
(d is in a module; ther) 227.5 291.67 T
(efor) 330.64 291.67 T
(e,) 349.73 291.67 T
(\245) 117 271.67 T
(All the module\325s variables and constants, including those imported by) 135 271.67 T
(using other modules, ar) 135 257.67 T
(e visible to, and can be used by) 250.48 257.67 T
(, the code in the) 400.2 257.67 T
(sour) 135 243.67 T
(ce r) 156.45 243.67 T
(ecor) 173.5 243.67 T
(d.) 193.81 243.67 T
(\245) 117 223.67 T
(The module contr) 135 223.67 T
(ols which de\336nitions in the sour) 221.48 223.67 T
(ce r) 377.58 223.67 T
(ecor) 394.63 223.67 T
(d ar) 414.94 223.67 T
(e exported,) 434.06 223.67 T
(and ther) 135 209.67 T
(efor) 175.78 209.67 T
(e ar) 194.86 209.67 T
(e visible, to other modules.) 212.53 209.67 T
(\245) 117 189.67 T
-0.09 (V) 135 189.67 P
-0.09 (ariables and constants in other modules that ar) 141.93 189.67 P
-0.09 (e not exported, or ones that) 368.77 189.67 P
(ar) 135 175.67 T
(e exported but ar) 144.65 175.67 T
(e not imported by the sour) 227.6 175.67 T
(ce r) 356.97 175.67 T
(ecor) 374.02 175.67 T
(d\325s module, ar) 394.33 175.67 T
(e not) 464.21 175.67 T
(visible to the sour) 135 161.67 T
(ce r) 221.38 161.67 T
(ecor) 238.43 161.67 T
(d.) 258.74 161.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "194" 208
%%Page: "195" 209
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.3 Source code, modules, and libraries) 363.19 677.67 T
2 F
(195) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Dylan implementations can associate a sour) 108 640.67 T
(ce r) 320.82 640.67 T
(ecor) 337.87 640.67 T
(d with a module in dif) 358.17 640.67 T
(fer) 467.04 640.67 T
(ent) 480.12 640.67 T
(ways. The inter) 108 626.67 T
(change format has a) 182.72 626.67 T
2 F
(header) 283.17 626.67 T
1 F
( at the fr) 317.4 626.67 T
(ont that speci\336es the module) 357.8 626.67 T
(for its sour) 108 612.67 T
(ce r) 160.41 612.67 T
(ecor) 177.46 612.67 T
(ds.) 197.77 612.67 T
3 13 Q
(13.3.2  Modules and libraries) 108 581.33 T
1 11 Q
(Every module is in a library; ther) 108 561.67 T
(efor) 268.62 561.67 T
(e,) 287.71 561.67 T
(\245) 117 541.67 T
-0.22 (All the library\325s modules, including those imported by using other libraries,) 135 541.67 P
(ar) 135 527.67 T
(e visible to, and can be used by) 144.65 527.67 T
(, the module.) 294.37 527.67 T
(\245) 117 507.67 T
(The library contr) 135 507.67 T
(ols whether the module is exported, and ther) 216.73 507.67 T
(efor) 435.22 507.67 T
(e is visi-) 454.31 507.67 T
(ble, to other libraries.) 135 493.67 T
(\245) 117 473.67 T
(Modules in other libraries that ar) 135 473.67 T
(e not exported, or ones that ar) 295.39 473.67 T
(e exported) 440.8 473.67 T
(but ar) 135 459.67 T
(e not imported by the module\325s library) 163.7 459.67 T
(, ar) 351.2 459.67 T
(e not visible to the module.) 366.35 459.67 T
(Dylan implementations can associate a module with a library in dif) 108 439.67 T
(fer) 434.3 439.67 T
(ent ways.) 447.38 439.67 T
(The) 108 425.67 T
2 F
( library-interchange de\336nition) 126.41 425.67 T
1 F
( \050) 278.55 425.67 T
2 F
(LID\051) 284.97 425.67 T
1 F
( format lists the inter) 308.79 425.67 T
(change \336les that) 409.79 425.67 T
(make up a library) 108 411.67 T
(. The module de\336nitions in those inter) 193.16 411.67 T
(change \336les ar) 378.61 411.67 T
(e thus in) 448.12 411.67 T
(that library) 108 397.67 T
(.) 161.39 397.67 T
3 13 Q
(13.3.3  Libraries and pr) 108 366.33 T
(ograms) 223.95 366.33 T
1 11 Q
(Every library is in a set of libraries that can be combined into a pr) 108 346.67 T
(ogram;) 424.87 346.67 T
(ther) 108 332.67 T
(efor) 127.4 332.67 T
(e,) 146.49 332.67 T
(\245) 117 312.67 T
(The library can import the exported modules of any other available library) 135 312.67 T
(.) 496.18 312.67 T
(\245) 117 292.67 T
-0.15 (The library\325s exported modules ar) 135 292.67 P
-0.15 (e visible to, and can be imported by) 299.65 292.67 P
-0.15 (, other) 470.45 292.67 P
(available libraries.) 135 278.67 T
(The Dylan implementation determines what libraries ar) 108 258.67 T
(e available; how they ar) 378.86 258.67 T
(e) 494.15 258.67 T
(combined into a pr) 108 244.67 T
(ogram; and how they ar) 199.98 244.67 T
(e compiled, linked, and r) 316.64 244.67 T
(un. Consult) 437.8 244.67 T
(your implementation documentation for further information.) 108 230.67 T
(W) 135 216.67 T
(e have pr) 144.99 216.67 T
(esented a simple hierar) 189.9 216.67 T
(chical model: All Dylan code r) 302.35 216.67 T
(esides in) 449.56 216.67 T
-0.41 (sour) 108 202.67 P
-0.41 (ce r) 129.45 202.67 P
-0.41 (ecor) 146.09 202.67 P
-0.41 (ds; every sour) 166.39 202.67 P
-0.41 (ce r) 233.86 202.67 P
-0.41 (ecor) 250.49 202.67 P
-0.41 (d r) 270.8 202.67 P
-0.41 (esides in a module; every module r) 284.01 202.67 P
-0.41 (esides in a) 452.1 202.67 P
(library) 108 188.67 T
(. Every module must be completely de\336ned within its library) 139.57 188.67 T
(, because the) 435.11 188.67 T
(library is the Dylan unit of compilation. So that this r) 108 174.67 T
(estriction is enfor) 364.55 174.67 T
(ced, every) 448.55 174.67 T
(sour) 108 160.67 T
(ce r) 129.45 160.67 T
(ecor) 146.5 160.67 T
(d in a library must be in a module that is de\336ned in the library; no) 166.81 160.67 T
(sour) 108 146.67 T
(ce r) 129.45 146.67 T
(ecor) 146.5 146.67 T
(d can be in a module that is imported by the library) 166.81 146.67 T
(. W) 415.98 146.67 T
(ithin a library) 431.87 146.67 T
(,) 497.23 146.67 T
(it is possible for a name to be owned by one module and for that name\325s) 108 132.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "195" 209
%%Page: "196" 210
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(196) 72 677.67 T
0 F
(Chapter 13) 95.75 677.67 T
(Libraries and Modules) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.07 (de\336nition to be pr) 108 640.67 P
-0.07 (ovided by another module. This \337exibility helps us to str) 195.17 640.67 P
-0.07 (uctur) 470.17 640.67 P
-0.07 (e) 496.05 640.67 P
(code, as we shall see in Section 13.4.) 108 626.67 T
3 15 Q
(13.4  Module de\336nition) 108 587 T
1 11 Q
(Enough theory) 108 566.67 T
(. Let\325s see how modules and libraries can be used in practice by) 179.53 566.67 T
(considering the classes and methods for r) 108 552.67 T
(epr) 308.96 552.67 T
(esenting and manipulating times) 324.99 552.67 T
(that we de\336ned in Chapter 8,) 108 538.67 T
0 F
(A Simple Library) 255.17 538.67 T
1 F
(, and showing how they might be) 332.39 538.67 T
(packaged into a r) 108 524.67 T
(eusable softwar) 191.81 524.67 T
(e component.) 267.92 524.67 T
(First, let\325s examine what the external pr) 135 510.67 T
(otocol of our time library might be.) 326.89 510.67 T
(W) 108 496.67 T
(e have de\336ned two kinds of time that can be cr) 117.99 496.67 T
(eated:) 344.73 496.67 T
4 10 Q
(<time-of-day>) 376.58 496.67 T
1 11 Q
( and) 454.58 496.67 T
4 10 Q
(<time-offset>) 108 482.67 T
1 11 Q
(. W) 186 482.67 T
(e have a generic function for printing times,) 201.49 482.67 T
4 10 Q
(say) 416.97 482.67 T
1 11 Q
(, and one, per-) 433.75 482.67 T
(haps not so obvious, utility function for cr) 108 468.67 T
(eating new times,) 311.99 468.67 T
4 10 Q
(encode-total-) 400.35 468.67 T
(seconds) 108 454.67 T
1 11 Q
(.) 150 454.67 T
(W) 135 440.67 T
(e de\336ne a method,) 144.99 440.67 T
4 10 Q
(\134+) 237.52 440.67 T
1 11 Q
(, for adding times, but a method is not a pr) 249.52 440.67 T
(otocol.) 457.24 440.67 T
(The pr) 108 426.67 T
(otocol for the generic function) 139.92 426.67 T
4 10 Q
(\134+) 288.89 426.67 T
1 11 Q
( is de\336ned by the Dylan library) 300.89 426.67 T
(, which) 451.06 426.67 T
(alr) 108 412.67 T
(eady exports it, for any Dylan pr) 120.85 412.67 T
(ogram. When we de\336ne our method for add-) 279.17 412.67 T
(ing times, we ar) 108 398.67 T
(e extending that pr) 185.24 398.67 T
(otocol; we ar) 277.23 398.67 T
(e not cr) 339.26 398.67 T
(eating a new one.) 375.06 398.67 T
-0.12 (The) 135 384.67 P
4 10 Q
-0.26 (decode-total-seconds) 156.05 384.67 P
1 11 Q
-0.12 ( function, the) 276.05 384.67 P
4 10 Q
-0.26 (<sixty-unit>) 342.72 384.67 P
1 11 Q
-0.12 ( class, and several) 414.72 384.67 P
(other functions ar) 108 370.67 T
(e used internally only) 194.2 370.67 T
(, so they ar) 298.73 370.67 T
(e not part of the external) 351.42 370.67 T
(pr) 108 356.67 T
(otocol.) 118.76 356.67 T
(Although) 135 342.67 T
4 10 Q
(<time>) 184.65 342.67 T
1 11 Q
( is used internally only within our library) 220.65 342.67 T
(, it is good prac-) 420.52 342.67 T
-0.33 (tice to make abstract super) 108 328.67 P
-0.33 (classes such as) 236.28 328.67 P
4 10 Q
-0.72 (<time>) 309.12 328.67 P
1 11 Q
-0.33 ( part of a library interface. When) 345.12 328.67 P
(we do so, a client of the library that does not car) 108 314.67 T
(e which speci\336c kind of time is) 340.86 314.67 T
(being manipulated can simply use) 108 300.67 T
4 10 Q
(<time>) 278.02 300.67 T
1 11 Q
(.) 314.02 300.67 T
(Thus, \336ve items \050) 135 286.67 T
4 10 Q
(<time>) 218.68 286.67 T
1 11 Q
(,) 254.68 286.67 T
4 10 Q
(<time-of-day>) 260.18 286.67 T
1 11 Q
(,) 338.18 286.67 T
4 10 Q
(<time-offset>) 343.68 286.67 T
1 11 Q
(,) 421.68 286.67 T
4 10 Q
(say) 427.18 286.67 T
1 11 Q
(, and) 443.96 286.67 T
4 10 Q
(encode-total-seconds) 108 272.67 T
1 11 Q
(\051 de\336ne the external pr) 228 272.67 T
(otocol of the time library) 338.24 272.67 T
(.) 457.2 272.67 T
3 13 Q
(13.4.1  Roles of modules) 108 241.33 T
1 11 Q
(In our experience, we have found it useful to consider modules as having r) 108 221.67 T
(oles:) 471.33 221.67 T
(interface, implementation, or client. These r) 108 207.67 T
(oles lead to a simple, low-mainte-) 319.17 207.67 T
-0.12 (nance str) 108 193.67 P
-0.12 (uctur) 151.6 193.67 P
-0.12 (e. An) 177.48 193.67 P
2 F
-0.12 (interface module) 205.72 193.67 P
1 F
-0.12 ( cr) 290.84 193.67 P
-0.12 (eates names that ar) 302.51 193.67 P
-0.12 (e to be visible to other) 394.96 193.67 P
(modules and at a library interface. An) 108 179.67 T
2 F
(implementation module) 295.29 179.67 T
1 F
( contains the de\336-) 417.19 179.67 T
(nitions that make up the library \050including those visible thr) 108 165.67 T
(ough an interface) 395.5 165.67 T
(module\051. A) 108 151.67 T
2 F
(client module) 166.01 151.67 T
1 F
( is a module that depends on other modules\325) 235.36 151.67 T
(de\336nitions.) 108 137.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "196" 210
%%Page: "197" 211
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.4 Module definition) 428.37 677.67 T
2 F
(197) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.3 (It is possible for a module to play mor) 135 640.67 P
-0.3 (e than one r) 317.42 640.67 P
-0.3 (ole \321 for example, a client) 373.76 640.67 P
(module may also implement a higher) 108 626.67 T
(-level interface. W) 289.99 626.67 T
(e r) 377.17 626.67 T
(ecommend thinking of) 389.34 626.67 T
-0.16 (modules as having these r) 108 612.67 P
-0.16 (oles, and in this chapter we use that design convention.) 233.92 612.67 P
(When illustrating the r) 108 598.67 T
(oles of modules, we use the conventions shown in) 218.36 598.67 T
(Figur) 108 584.67 T
(e 13.2.In Figur) 134.21 584.67 T
(e 13.2, we show a library with thr) 203.3 584.67 T
(ee modules: an interface) 365.3 584.67 T
(module \050with its interface sticking out of the top of the library\051, an implementa-) 108 570.67 T
(tion module \050overlapping the interface, because it implements the interface by) 108 556.67 T
(giving de\336nitions to the names the interface exports\051, and a client module over-) 108 542.67 T
-0.4 (lapping another library\325s interface module \050using its exported interface module to) 108 528.67 P
(import de\336nitions fr) 108 514.67 T
(om another library\051. As we noted, the implementation and) 206.88 514.67 T
(client ar) 108 500.67 T
(e often the same module, and the interface of one library is used by the) 146.94 500.67 T
(clients of other libraries. Dylan modules and libraries ar) 108 486.67 T
(e not allowed to have) 379.06 486.67 T
(mutual dependencies, so we can use the convention of drawing at the top the) 108 472.67 T
-0.27 (interfaces that a library exports, and of drawing at the bottom the interfaces that a) 108 458.67 P
(library uses. It is dif) 108 444.67 T
(\336cult simultaneously to illustrate the module \322use\323 r) 204.32 444.67 T
(elation-) 460.61 444.67 T
(ships in only two dimensions \321 the overlapping of one module by another is) 108 430.67 T
(intended to depict usage.) 108 416.67 T
108 180.01 504 188 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 13.2) 137.15 191.33 T
8 F
(The roles of modules: interf) 195.51 191.33 T
(ace) 316.38 191.33 T
(, implementation, and client.) 332.35 191.33 T
108 204 504 387 C
131.5 208 480.5 385 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 138 393 475 558 337 165 137.5 214 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f13-2.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(r) 6.0%%For: (brent) (harlequin)%%Title: (f13-2 .eps)%%CreationDate: (6/11/96) (11:30 AM)%%BoundingBox: 138 393 475 558%%HiResBoundingBox: 138 393.5 475 557.325%%DocumentProcessColors: Black%%DocumentFonts: Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.0%AI3_ColorUsage: Black&White%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set)%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 ()%AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 29 31 581 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 1 0%AI5_TargetResolution: 300%AI5_NumLayers: 1%AI5_OpenToView: 2 748 1.5 826 581 18 0 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 23 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_ax neg 0 rmoveto	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 17 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin		/initialize	{ 		Adobe_ColorImage_AI6 begin		Adobe_ColorImage_AI6		{			dup type /arraytype eq			{				dup xcheck				{					bind				} if			} if			pop pop		} forall	} def	/terminate { end } def		currentdict /Adobe_ColorImage_AI6_Vars known not	{		/Adobe_ColorImage_AI6_Vars 14 dict def	} if		Adobe_ColorImage_AI6_Vars begin		/channelcount 0 def		/sourcecount 0 def		/sourcearray 4 array def		/plateindex -1 def		/XIMask 0 def		/XIBinary 0 def		/XIChannelCount 0 def		/XIBitsPerPixel 0 def		/XIImageHeight 0 def		/XIImageWidth 0 def		/XIImageMatrix null def		/XIBuffer null def		/XIDataProc null def end		/WalkRGBString null def	/WalkCMYKString null def		/StuffRGBIntoGrayString null def	/RGBToGrayImageProc null def	/StuffCMYKIntoGrayString null def	/CMYKToGrayImageProc null def	/ColorImageCompositeEmulator null def		/SeparateCMYKImageProc null def		/FourEqual null def	/TestPlateIndex null def		currentdict /_colorimage known not	{		/colorimage where		{			/colorimage get /_colorimage exch def		}		{			/_colorimage null def		} ifelse	} if		/_currenttransfer systemdict /currenttransfer get def		/colorimage null def	/XI null def			/WalkRGBString	{		0 3 index			dup length 1 sub 0 3 3 -1 roll		{			3 getinterval { } forall				5 index exec				3 index		} for				 5 { pop } repeat		} def			/WalkCMYKString	{		0 3 index			dup length 1 sub 0 4 3 -1 roll		{			4 getinterval { } forall						6 index exec						3 index					} for				5 { pop } repeat			} def			/StuffRGBIntoGrayString	{		.11 mul exch				.59 mul add exch				.3 mul add				cvi 3 copy put				pop 1 add	} def			/RGBToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin 			sourcearray 0 get exec			dup length 3 idiv string			dup 3 1 roll 						/StuffRGBIntoGrayString load exch			WalkRGBString	 end	} def			/StuffCMYKIntoGrayString	{		exch .11 mul add				exch .59 mul add				exch .3 mul add				dup 255 gt { pop 255 } if				255 exch sub cvi 3 copy put				pop 1 add	} def			/CMYKToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin			sourcearray 0 get exec			dup length 4 idiv string			dup 3 1 roll 						/StuffCMYKIntoGrayString load exch			WalkCMYKString	 end	} def			/ColorImageCompositeEmulator	{		pop true eq		{			Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat		}		{			Adobe_ColorImage_AI6_Vars /channelcount get 1 ne			{				Adobe_ColorImage_AI6_Vars begin					sourcearray 0 3 -1 roll put									channelcount 3 eq 					{ 						/RGBToGrayImageProc 					}					{ 						/CMYKToGrayImageProc					} ifelse					load			 end			} if			image		} ifelse	} def			/SeparateCMYKImageProc	{			Adobe_ColorImage_AI6_Vars begin				sourcecount 0 ne			{				sourcearray plateindex get exec			}			{							sourcearray 0 get exec								dup length 4 idiv string								0 2 index								plateindex 4 2 index length 1 sub				{					get 255 exch sub										3 copy put pop 1 add										2 index				} for					pop pop exch pop			} ifelse	 end	} def				/FourEqual	{		4 index ne		{			pop pop pop false		}		{			4 index ne			{				pop pop false			}			{				4 index ne				{					pop false				}				{					4 index eq				} ifelse			} ifelse		} ifelse	} def			/TestPlateIndex	{		Adobe_ColorImage_AI6_Vars begin			/plateindex -1 def				/setcmykcolor where			{				pop				gsave				1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub				grestore					1 0 0 0 FourEqual 				{ 					/plateindex 0 def				}				{					0 1 0 0 FourEqual					{ 						/plateindex 1 def					}					{						0 0 1 0 FourEqual						{							/plateindex 2 def						}						{							0 0 0 1 FourEqual							{ 								/plateindex 3 def							}							{								0 0 0 0 FourEqual								{									/plateindex 5 def								} if							} ifelse						} ifelse					} ifelse				} ifelse				pop pop pop pop			} if			plateindex	 end	} def			/colorimage	{		Adobe_ColorImage_AI6_Vars begin			/channelcount 1 index def			/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def				4 sourcecount add index dup 			8 eq exch 1 eq or not	 end				{			/_colorimage load null ne			{				_colorimage			}			{				Adobe_ColorImage_AI6_Vars /sourcecount get				7 add { pop } repeat			} ifelse		}		{			dup 3 eq			TestPlateIndex			dup -1 eq exch 5 eq or or			{				/_colorimage load null eq				{					ColorImageCompositeEmulator				}				{					dup 1 eq					{						pop pop image					}					{						Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							gsave														0 _currenttransfer exec							1 _currenttransfer exec							eq							{ 0 _currenttransfer exec 0.5 lt }							{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse														{ { pop 0 } } { { pop 1 } } ifelse							systemdict /settransfer get exec						} if												_colorimage												Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							grestore						} if					} ifelse				} ifelse			}			{				dup 1 eq				{					pop pop					image				}				{					pop pop						Adobe_ColorImage_AI6_Vars begin						sourcecount -1 0						{										exch sourcearray 3 1 roll put						} for							/SeparateCMYKImageProc load				 end						systemdict /image get exec				} ifelse			} ifelse		} ifelse	} def		/XI	{		Adobe_ColorImage_AI6_Vars begin			gsave			/XIMask exch 0 ne def			/XIBinary exch 0 ne def			pop			pop			/XIChannelCount exch def			/XIBitsPerPixel exch def			/XIImageHeight exch def			/XIImageWidth exch def			pop pop pop pop			/XIImageMatrix exch def						XIBitsPerPixel 1 eq			{				XIImageWidth 8 div ceiling cvi			}			{				XIImageWidth XIChannelCount mul			} ifelse			/XIBuffer exch string def						XIBinary			{				/XIDataProc { currentfile XIBuffer readstring pop } def				currentfile 128 string readline pop pop			}			{				/XIDataProc { currentfile XIBuffer readhexstring pop } def			} ifelse						0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale						XIMask			{				XIImageWidth XIImageHeight				false				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								/_lp /null ddef				_fc				/_lp /imagemask ddef								imagemask			}			{				XIImageWidth XIImageHeight				XIBitsPerPixel				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								XIChannelCount 1 eq				{										gsave					0 setgray										image										grestore				}				{					false					XIChannelCount					colorimage				} ifelse			} ifelse			grestore	 end	} def	end%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Bricks)(Bricks) 2.565 5.19 74.565 77.19 [(0 O 0 R 0.3 0.85 0.85 0 k 0.3 0.85 0.85 0 K) @_ &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR1.6 73.6 m75.6 73.6 lS1.6 66.399 m75.6 66.399 LS1.6 59.199 m75.6 59.199 LS1.6 51.998 m75.6 51.998 LS1.6 44.798 m75.6 44.798 LS1.6 37.597 m75.6 37.597 LS1.6 30.397 m75.6 30.397 LS1.6 23.196 m75.6 23.196 LS1.6 15.996 m75.6 15.996 LS1.6 8.796 m75.6 8.796 LS70.975 73.6 m70.975 66.412 lS56.575 73.6 m56.575 66.412 LS42.175 73.6 m42.175 66.412 LS27.775 73.6 m27.775 66.412 LS13.375 73.6 m13.375 66.412 LS70.975 59.162 m70.975 51.975 lS56.575 59.162 m56.575 51.975 LS42.175 59.162 m42.175 51.975 LS27.775 59.162 m27.775 51.975 LS13.375 59.162 m13.375 51.975 LS70.975 44.787 m70.975 37.6 lS56.575 44.787 m56.575 37.6 LS42.175 44.787 m42.175 37.6 LS27.775 44.787 m27.775 37.6 LS13.375 44.787 m13.375 37.6 LS70.975 30.412 m70.975 23.225 lS56.575 30.412 m56.575 23.225 LS42.175 30.412 m42.175 23.225 LS27.775 30.412 m27.775 23.225 LS13.375 30.412 m13.375 23.225 LS70.975 15.975 m70.975 8.787 lS56.575 15.975 m56.575 8.787 LS42.175 15.975 m42.175 8.787 LS27.775 15.975 m27.775 8.787 LS13.375 15.975 m13.375 8.787 LS63.762 8.787 m63.762 1.6 LS49.362 8.787 m49.362 1.6 LS34.962 8.787 m34.962 1.6 LS20.562 8.787 m20.562 1.6 LS6.162 8.787 m6.162 1.6 lS63.762 23.225 m63.762 16.037 LS49.362 23.225 m49.362 16.037 LS34.962 23.225 m34.962 16.037 LS20.562 23.225 m20.562 16.037 LS6.162 23.225 m6.162 16.037 lS63.762 37.6 m63.762 30.412 LS49.362 37.6 m49.362 30.412 LS20.562 37.6 m20.562 30.412 LS6.162 37.6 m6.162 30.412 lS63.762 51.975 m63.762 44.787 LS49.362 51.975 m49.362 44.787 LS34.962 51.975 m34.962 44.787 LS20.562 51.975 m20.562 44.787 LS6.162 51.975 m6.162 44.787 lS63.762 66.412 m63.762 59.225 LS49.362 66.412 m49.362 59.225 LS34.962 66.412 m34.962 59.225 LS20.562 66.412 m20.562 59.225 LS6.162 66.412 m6.162 59.225 lS63.762 80.849 m63.762 73.662 LS49.362 80.849 m49.362 73.662 LS34.962 80.849 m34.962 73.662 LS20.562 80.849 m20.562 73.662 LS6.162 80.849 m6.162 73.662 lS34.962 37.6 m34.962 30.412 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Confetti)(Confetti) 4.85 3.617 76.85 75.617 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR10.6 64.867 m7.85 62.867 lS9.1 8.617 m6.85 6.867 lS78.1 68.617 m74.85 67.867 lS76.85 56.867 m74.35 55.117 lS79.6 51.617 m76.6 51.617 lS76.35 44.117 m73.6 45.867 lS78.6 35.867 m76.6 34.367 lS76.1 23.867 m73.35 26.117 lS78.1 12.867 m73.85 13.617 lS68.35 14.617 m66.1 12.867 lS76.6 30.617 m73.6 30.617 lS62.85 58.117 m60.956 60.941 lS32.85 59.617 m31.196 62.181 lS47.891 64.061 m49.744 66.742 lS72.814 2.769 m73.928 5.729 lS67.976 2.633 m67.35 5.909 lS61.85 27.617 m59.956 30.441 lS53.504 56.053 m51.85 58.617 lS52.762 1.779 m52.876 4.776 lS45.391 5.311 m47.244 7.992 lS37.062 3.375 m35.639 5.43 lS55.165 34.828 m57.518 37.491 lS20.795 3.242 m22.12 5.193 lS14.097 4.747 m15.008 8.965 lS9.736 1.91 m8.073 4.225 lS31.891 5.573 m32.005 8.571 lS12.1 70.367 m15.6 68.867 lS9.35 54.867 m9.6 58.117 lS12.85 31.867 m14.35 28.117 lS10.1 37.367 m12.35 41.117 lS34.1 71.117 m31.85 68.617 lS38.35 71.117 m41.6 68.367 lS55.1 71.117 m58.35 69.117 lS57.35 65.117 m55.35 61.867 lS64.35 66.367 m69.35 68.617 lS71.85 62.867 m69.35 61.117 lS23.6 70.867 m23.6 67.867 lS20.6 65.867 m17.35 65.367 lS24.85 61.367 m25.35 58.117 lS25.85 65.867 m29.35 66.617 lS14.1 54.117 m16.85 56.117 lS12.35 11.617 m12.6 15.617 lS12.1 19.867 m14.35 22.367 lS26.1 9.867 m23.6 13.367 lS34.6 47.117 m32.1 45.367 lS62.6 41.867 m59.85 43.367 lS31.6 35.617 m27.85 36.367 lS36.35 26.117 m34.35 24.617 lS33.85 14.117 m31.1 16.367 lS37.1 9.867 m35.1 11.117 lS34.35 20.867 m31.35 20.867 lS44.6 56.617 m42.1 54.867 lS47.35 51.367 m44.35 51.367 lS44.1 43.867 m41.35 45.617 lS43.35 33.117 m42.6 30.617 lS43.85 23.617 m41.1 25.867 lS44.35 15.617 m42.35 16.867 lS67.823 31.1 m64.823 31.1 lS27.1 32.617 m29.6 30.867 lS31.85 55.117 m34.85 55.117 lS19.6 40.867 m22.1 39.117 lS16.85 35.617 m19.85 35.617 lS20.1 28.117 m22.85 29.867 lS52.1 42.617 m54.484 44.178 lS52.437 50.146 m54.821 48.325 lS59.572 54.133 m59.35 51.117 lS50.185 10.055 m53.234 9.928 lS51.187 15.896 m53.571 14.075 lS58.322 19.883 m59.445 16.823 lS53.1 32.117 m50.6 30.367 lS52.85 24.617 m49.6 25.617 lS61.85 9.117 m59.1 10.867 lS69.35 34.617 m66.6 36.367 lS67.1 23.617 m65.1 22.117 lS24.435 46.055 m27.484 45.928 lS25.437 51.896 m27.821 50.075 lS62.6 47.117 m65.321 46.575 lS19.85 19.867 m20.35 16.617 lS21.85 21.867 m25.35 22.617 lS37.6 62.867 m41.6 62.117 lS38.323 42.1 m38.823 38.6 lS69.35 52.617 m66.85 53.867 lS14.85 62.117 m18.1 59.367 lS9.6 46.117 m7.1 44.367 lS20.6 51.617 m18.6 50.117 lS46.141 70.811 m47.994 73.492 lS69.391 40.561 m71.244 43.242 lS38.641 49.311 m39.35 52.117 lS25.141 16.811 m25.85 19.617 lS36.6 32.867 m34.6 31.367 lS6.1 68.617 m2.85 67.867 lS4.85 56.867 m2.35 55.117 lS7.6 51.617 m4.6 51.617 lS6.6 35.867 m4.6 34.367 lS6.1 12.867 m1.85 13.617 lS4.6 30.617 m1.6 30.617 lS72.814 74.769 m73.928 77.729 lS67.976 74.633 m67.35 77.909 lS52.762 73.779 m52.876 76.776 lS37.062 75.375 m35.639 77.43 lS20.795 75.242 m22.12 77.193 lS9.736 73.91 m8.073 76.225 lS10.1 23.617 m6.35 24.367 lS73.217 18.276 m71.323 21.1 lS28.823 39.6 m29.505 42.389 lS49.6 38.617 m47.6 37.117 lS60.323 73.6 m62.323 76.6 lS60.323 1.6 m62.323 4.6 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Cross Texture)(Cross Texture) 1 1 58.6 58.6 [(0 O 0 R 1 1 0.2 0 k 1 1 0.2 0 K) @_ &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR53.5 55 m56.5 55 lS39.1 55 m42.1 55 lS24.7 55 m27.7 55 lS10.3 55 m13.3 55 lS46.3 47.8 m49.3 47.8 lS31.9 47.8 m34.9 47.8 lS17.5 47.8 m20.5 47.8 lS3.1 47.8 m6.1 47.8 lS53.5 40.6 m56.5 40.6 lS39.1 40.6 m42.1 40.6 lS24.7 40.6 m27.7 40.6 lS10.3 40.6 m13.3 40.6 lS46.3 33.4 m49.3 33.4 lS31.9 33.4 m34.9 33.4 lS17.5 33.4 m20.5 33.4 lS3.1 33.4 m6.1 33.4 lS53.5 26.2 m56.5 26.2 lS39.1 26.2 m42.1 26.2 lS24.7 26.2 m27.7 26.2 lS10.3 26.2 m13.3 26.2 lS46.3 19 m49.3 19 lS31.9 19 m34.9 19 lS17.5 19 m20.5 19 lS3.1 19 m6.1 19 lS53.5 11.8 m56.5 11.8 lS39.1 11.8 m42.1 11.8 lS24.7 11.8 m27.7 11.8 lS10.3 11.8 m13.3 11.8 lS46.3 4.6 m49.3 4.6 lS31.9 4.6 m34.9 4.6 lS17.5 4.6 m20.5 4.6 lS3.1 4.6 m6.1 4.6 lS55 56.5 m55 53.5 lS40.6 56.5 m40.6 53.5 lS26.2 56.5 m26.2 53.5 lS11.8 56.5 m11.8 53.5 lS47.8 49.3 m47.8 46.3 lS33.4 49.3 m33.4 46.3 lS19 49.3 m19 46.3 lS4.6 49.3 m4.6 46.3 lS55 42.1 m55 39.1 lS40.6 42.1 m40.6 39.1 lS26.2 42.1 m26.2 39.1 lS11.8 42.1 m11.8 39.1 lS47.8 34.9 m47.8 31.9 lS33.4 34.9 m33.4 31.9 lS19 34.9 m19 31.9 lS4.6 34.9 m4.6 31.9 lS55 27.7 m55 24.7 lS40.6 27.7 m40.6 24.7 lS26.2 27.7 m26.2 24.7 lS11.8 27.7 m11.8 24.7 lS47.8 20.5 m47.8 17.5 lS33.4 20.5 m33.4 17.5 lS19 20.5 m19 17.5 lS4.6 20.5 m4.6 17.5 lS55 13.3 m55 10.3 lS40.6 13.3 m40.6 10.3 lS26.2 13.3 m26.2 10.3 lS11.8 13.3 m11.8 10.3 lS47.8 6.1 m47.8 3.1 lS33.4 6.1 m33.4 3.1 lS19 6.1 m19 3.1 lS4.6 6.1 m4.6 3.1 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Master diagonal)(Master diagonal) 798.9318 33.4829 1412.9318 827.4829 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer300 Ar0 J 0 j 0.5 w 3.8636 M []0 d%AI3_Note:0 D0 XR1205.9318 1208.4829 m1.9318 4.4829 lS1214.4318 1208.4829 m10.4318 4.4829 lS1222.9318 1208.4829 m18.9318 4.4829 lS1231.4318 1208.4829 m27.4318 4.4829 lS1239.9318 1208.4829 m35.9318 4.4829 lS1248.4318 1208.4829 m44.4318 4.4829 lS1256.9318 1208.4829 m52.9318 4.4829 lS1265.4318 1208.4829 m61.4318 4.4829 lS1273.9318 1208.4829 m69.9318 4.4829 lS1282.4318 1208.4829 m78.4318 4.4829 lS1290.9318 1208.4829 m86.9318 4.4829 lS1299.4318 1208.4829 m95.4318 4.4829 lS1307.9318 1208.4829 m103.9318 4.4829 lS1316.4318 1208.4829 m112.4318 4.4829 lS1324.9318 1208.4829 m120.9318 4.4829 lS1333.4318 1208.4829 m129.4318 4.4829 lS1341.9318 1208.4829 m137.9318 4.4829 lS1350.4318 1208.4829 m146.4318 4.4829 lS1358.9318 1208.4829 m154.9318 4.4829 lS1367.4318 1208.4829 m163.4318 4.4829 lS1375.9318 1208.4829 m171.9318 4.4829 lS1384.4318 1208.4829 m180.4318 4.4829 lS1392.9318 1208.4829 m188.9318 4.4829 lS1401.4318 1208.4829 m197.4318 4.4829 lS1409.9318 1208.4829 m205.9318 4.4829 lS1418.4318 1208.4829 m214.4318 4.4829 lS1426.9318 1208.4829 m222.9318 4.4829 lS1435.4318 1208.4829 m231.4318 4.4829 lS1443.9318 1208.4829 m239.9318 4.4829 lS1452.4318 1208.4829 m248.4318 4.4829 lS1460.9318 1208.4829 m256.9318 4.4829 lS1469.4318 1208.4829 m265.4318 4.4829 lS1477.9318 1208.4829 m273.9318 4.4829 lS1486.4318 1208.4829 m282.4318 4.4829 lS1494.9318 1208.4829 m290.9318 4.4829 lS1503.4318 1208.4829 m299.4318 4.4829 lS1511.9318 1208.4829 m307.9318 4.4829 lS1520.4318 1208.4829 m316.4318 4.4829 lS1528.9318 1208.4829 m324.9318 4.4829 lS1537.4318 1208.4829 m333.4318 4.4829 lS1545.9318 1208.4829 m341.9318 4.4829 lS1554.4318 1208.4829 m350.4318 4.4829 lS1562.9318 1208.4829 m358.9318 4.4829 lS1571.4318 1208.4829 m367.4318 4.4829 lS1579.9318 1208.4829 m375.9318 4.4829 lS1588.4318 1208.4829 m384.4318 4.4829 lS1596.9318 1208.4829 m392.9318 4.4829 lS1605.4318 1208.4829 m401.4318 4.4829 lS1613.9318 1208.4829 m409.9318 4.4829 lS1622.4318 1208.4829 m418.4318 4.4829 lS1630.9318 1208.4829 m426.9318 4.4829 lS1639.4318 1208.4829 m435.4318 4.4829 lS1647.9318 1208.4829 m443.9318 4.4829 lS1656.4318 1208.4829 m452.4318 4.4829 lS1664.9318 1208.4829 m460.9318 4.4829 lS1673.4318 1208.4829 m469.4318 4.4829 lS1681.9318 1208.4829 m477.9318 4.4829 lS1690.4318 1208.4829 m486.4318 4.4829 lS1698.9318 1208.4829 m494.9318 4.4829 lS1707.4318 1208.4829 m503.4318 4.4829 lS1715.9318 1208.4829 m511.9318 4.4829 lS1724.4318 1208.4829 m520.4318 4.4829 lS1732.9318 1208.4829 m528.9318 4.4829 lS1741.4318 1208.4829 m537.4318 4.4829 lS1749.9318 1208.4829 m545.9318 4.4829 lS1758.4318 1208.4829 m554.4318 4.4829 lS1766.9318 1208.4829 m562.9318 4.4829 lS1775.4318 1208.4829 m571.4318 4.4829 lS1783.9318 1208.4829 m579.9318 4.4829 lS1792.4318 1208.4829 m588.4318 4.4829 lS1800.9318 1208.4829 m596.9318 4.4829 lS1809.4318 1208.4829 m605.4318 4.4829 lS1817.9318 1208.4829 m613.9318 4.4829 lS1826.4318 1208.4829 m622.4318 4.4829 lS1834.9318 1208.4829 m630.9318 4.4829 lS1843.4318 1208.4829 m639.4318 4.4829 lS1851.9318 1208.4829 m647.9318 4.4829 lS1860.4318 1208.4829 m656.4318 4.4829 lS1868.9318 1208.4829 m664.9318 4.4829 lS1877.4318 1208.4829 m673.4318 4.4829 lS1885.9318 1208.4829 m681.9318 4.4829 lS1894.4318 1208.4829 m690.4318 4.4829 lS1902.9318 1208.4829 m698.9318 4.4829 lS1911.4318 1208.4829 m707.4318 4.4829 lS1919.9318 1208.4829 m715.9318 4.4829 lS1928.4318 1208.4829 m724.4318 4.4829 lS1936.9318 1208.4829 m732.9318 4.4829 lS1945.4318 1208.4829 m741.4318 4.4829 lS1953.9318 1208.4829 m749.9318 4.4829 lS1962.4318 1208.4829 m758.4318 4.4829 lS1970.9318 1208.4829 m766.9318 4.4829 lS1979.4318 1208.4829 m775.4318 4.4829 lS1987.9318 1208.4829 m783.9318 4.4829 lS1996.4318 1208.4829 m792.4318 4.4829 lS2004.9318 1208.4829 m800.9318 4.4829 lS2013.4318 1208.4829 m809.4318 4.4829 lS2021.9318 1208.4829 m817.9318 4.4829 lS2030.4318 1208.4829 m826.4318 4.4829 lS2038.9318 1208.4829 m834.9318 4.4829 lS2047.4318 1208.4829 m843.4318 4.4829 lS2055.9318 1208.4829 m851.9318 4.4829 lS2064.4318 1208.4829 m860.4318 4.4829 lS2072.9318 1208.4829 m868.9318 4.4829 lS2081.4318 1208.4829 m877.4318 4.4829 lS2089.9318 1208.4829 m885.9318 4.4829 lS2098.4318 1208.4829 m894.4318 4.4829 lS2106.9318 1208.4829 m902.9318 4.4829 lS2115.4318 1208.4829 m911.4318 4.4829 lS2123.9318 1208.4829 m919.9318 4.4829 lS2132.4318 1208.4829 m928.4318 4.4829 lS2140.9318 1208.4829 m936.9318 4.4829 lS2149.4318 1208.4829 m945.4318 4.4829 lS2157.9318 1208.4829 m953.9318 4.4829 lS2166.4318 1208.4829 m962.4318 4.4829 lS2174.9318 1208.4829 m970.9318 4.4829 lS2183.4318 1208.4829 m979.4318 4.4829 lS2191.9318 1208.4829 m987.9318 4.4829 lS2200.4318 1208.4829 m996.4318 4.4829 lS2208.9318 1208.4829 m1004.9318 4.4829 lS2217.4318 1208.4829 m1013.4318 4.4829 lS2225.9318 1208.4829 m1021.9318 4.4829 lS2234.4318 1208.4829 m1030.4318 4.4829 lS2242.9318 1208.4829 m1038.9318 4.4829 lS2251.4318 1208.4829 m1047.4318 4.4829 lS2259.9318 1208.4829 m1055.9318 4.4829 lS2268.4318 1208.4829 m1064.4318 4.4829 lS2276.9318 1208.4829 m1072.9318 4.4829 lS2285.4318 1208.4829 m1081.4318 4.4829 lS2293.9318 1208.4829 m1089.9318 4.4829 lS2302.4318 1208.4829 m1098.4318 4.4829 lS2310.9318 1208.4829 m1106.9318 4.4829 lS2319.4318 1208.4829 m1115.4318 4.4829 lS2327.9318 1208.4829 m1123.9318 4.4829 lS2336.4318 1208.4829 m1132.4318 4.4829 lS2344.9318 1208.4829 m1140.9318 4.4829 lS2353.4318 1208.4829 m1149.4318 4.4829 lS2361.9318 1208.4829 m1157.9318 4.4829 lS1157.8485 4.4829 mS2361.8485 1208.4829 mS2370.3485 1208.4829 m1166.3485 4.4829 lS2378.8485 1208.4829 m1174.8485 4.4829 lS2387.3485 1208.4829 m1183.3485 4.4829 lS2395.8485 1208.4829 m1191.8485 4.4829 lS2404.3485 1208.4829 m1200.3485 4.4829 lS2412.8485 1208.4829 m1208.8485 4.4829 lS2421.3485 1208.4829 m1217.3485 4.4829 lS2429.8485 1208.4829 m1225.8485 4.4829 lS2438.3485 1208.4829 m1234.3485 4.4829 lS2446.8485 1208.4829 m1242.8485 4.4829 lS2455.3485 1208.4829 m1251.3485 4.4829 lS2463.8485 1208.4829 m1259.8485 4.4829 lS2472.3485 1208.4829 m1268.3485 4.4829 lS1268.2652 4.4829 mS2472.2652 1208.4829 mS2480.7652 1208.4829 m1276.7652 4.4829 lS2489.2652 1208.4829 m1285.2652 4.4829 lS2497.7652 1208.4829 m1293.7652 4.4829 lS2506.2652 1208.4829 m1302.2652 4.4829 lS2514.7652 1208.4829 m1310.7652 4.4829 lS2523.2652 1208.4829 m1319.2652 4.4829 lS2531.7652 1208.4829 m1327.7652 4.4829 lS2540.2652 1208.4829 m1336.2652 4.4829 lS2548.7652 1208.4829 m1344.7652 4.4829 lS2557.2652 1208.4829 m1353.2652 4.4829 lS2565.7652 1208.4829 m1361.7652 4.4829 lS2574.2652 1208.4829 m1370.2652 4.4829 lS2582.7652 1208.4829 m1378.7652 4.4829 lS994.9318 893.4829 mS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Parquet Floor)(Parquet Floor) 3.85 3.85 75.85 75.85 [(0 O 0 R 0.26 0.497 0.75 0 k 0.26 0.497 0.75 0 K) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR37.6 6.1 m37.6 10.598 L19.6 10.598 L19.6 6.1 L37.6 6.1 Ls73.6 6.1 m73.6 10.598 L55.6 10.598 L55.6 6.1 L73.6 6.1 Ls19.6 24.1 m19.6 28.598 L1.6 28.598 L1.6 24.1 L19.6 24.1 Ls55.6 24.1 m55.6 28.598 L37.6 28.598 L37.6 24.1 L55.6 24.1 Ls82.6 24.1 m82.6 28.598 L73.6 28.598 L73.6 24.1 L82.6 24.1 Ls37.6 42.1 m37.6 46.598 L19.6 46.598 L19.6 42.1 L37.6 42.1 Ls73.6 42.1 m73.6 46.598 L55.6 46.598 L55.6 42.1 L73.6 42.1 Ls19.6 60.1 m19.6 64.598 L1.6 64.598 L1.6 60.1 L19.6 60.1 Ls55.6 60.1 m55.6 64.598 L37.6 64.598 L37.6 60.1 L55.6 60.1 Ls82.6 60.1 m82.6 64.598 L73.6 64.598 L73.6 60.1 L82.6 60.1 Ls37.6 15.098 m37.6 19.598 L19.6 19.598 L19.6 15.098 L37.6 15.098 Ls73.6 15.098 m73.6 19.598 L55.6 19.598 L55.6 15.098 L73.6 15.098 Ls19.6 33.098 m19.6 37.598 L1.6 37.598 L1.6 33.098 L19.6 33.098 Ls55.6 33.098 m55.6 37.598 L37.6 37.598 L37.6 33.098 L55.6 33.098 Ls82.6 33.098 m82.6 37.598 L73.6 37.598 L73.6 33.098 L82.6 33.098 Ls37.6 51.098 m37.6 55.598 L19.6 55.598 L19.6 51.098 L37.6 51.098 Ls73.6 51.098 m73.6 55.598 L55.6 55.598 L55.6 51.098 L73.6 51.098 Ls19.6 69.098 m19.6 73.598 L1.6 73.598 L1.6 69.098 L19.6 69.098 Ls55.6 69.098 m55.6 73.598 L37.6 73.598 L37.6 69.098 L55.6 69.098 Ls82.6 69.098 m82.6 73.598 L73.6 73.598 L73.6 69.098 L82.6 69.098 Ls15.1 19.598 m10.6 19.598 L10.6 1.6 L15.1 1.6 L15.1 19.598 Ls51.1 19.598 m46.6 19.598 L46.6 1.6 L51.1 1.6 L51.1 19.598 Ls33.1 37.598 m28.6 37.598 L28.6 19.6 L33.1 19.6 L33.1 37.598 Ls69.1 37.598 m64.6 37.598 L64.6 19.6 L69.1 19.6 L69.1 37.598 Ls15.1 55.598 m10.6 55.598 L10.6 37.6 L15.1 37.6 L15.1 55.598 Ls51.1 55.598 m46.6 55.598 L46.6 37.6 L51.1 37.6 L51.1 55.598 Ls33.1 73.598 m28.6 73.598 L28.6 55.6 L33.1 55.6 L33.1 73.598 Ls69.1 73.598 m64.6 73.598 L64.6 55.6 L69.1 55.6 L69.1 73.598 Ls15.1 82.598 m10.6 82.598 L10.6 73.6 L15.1 73.6 L15.1 82.598 Ls51.1 82.598 m46.6 82.598 L46.6 73.6 L51.1 73.6 L51.1 82.598 Ls19.6 19.598 m15.1 19.598 L15.1 1.6 L19.6 1.6 L19.6 19.598 Ls55.6 19.598 m51.1 19.598 L51.1 1.6 L55.6 1.6 L55.6 19.598 Ls37.6 37.598 m33.1 37.598 L33.1 19.6 L37.6 19.6 L37.6 37.598 Ls73.6 37.598 m69.1 37.598 L69.1 19.6 L73.6 19.6 L73.6 37.598 Ls19.6 55.598 m15.1 55.598 L15.1 37.6 L19.6 37.6 L19.6 55.598 Ls55.6 55.598 m51.1 55.598 L51.1 37.6 L55.6 37.6 L55.6 55.598 Ls37.6 73.598 m33.1 73.598 L33.1 55.6 L37.6 55.6 L37.6 73.598 Ls73.6 73.598 m69.1 73.598 L69.1 55.6 L73.6 55.6 L73.6 73.598 Ls19.6 82.598 m15.1 82.598 L15.1 73.6 L19.6 73.6 L19.6 82.598 Ls55.6 82.598 m51.1 82.598 L51.1 73.6 L55.6 73.6 L55.6 82.598 Ls6.1 19.598 m1.6 19.598 L1.6 1.6 L6.1 1.6 L6.1 19.598 Ls42.1 19.598 m37.6 19.598 L37.6 1.6 L42.1 1.6 L42.1 19.598 Ls78.1 19.598 m73.6 19.598 L73.6 1.6 L78.1 1.6 L78.1 19.598 Ls24.1 37.598 m19.6 37.598 L19.6 19.6 L24.1 19.6 L24.1 37.598 Ls60.1 37.598 m55.6 37.598 L55.6 19.6 L60.1 19.6 L60.1 37.598 Ls6.1 55.598 m1.6 55.598 L1.6 37.6 L6.1 37.6 L6.1 55.598 Ls42.1 55.598 m37.6 55.598 L37.6 37.6 L42.1 37.6 L42.1 55.598 Ls78.1 55.598 m73.6 55.598 L73.6 37.6 L78.1 37.6 L78.1 55.598 Ls24.1 73.598 m19.6 73.598 L19.6 55.6 L24.1 55.6 L24.1 73.598 Ls60.1 73.598 m55.6 73.598 L55.6 55.6 L60.1 55.6 L60.1 73.598 Ls6.1 82.598 m1.6 82.598 L1.6 73.6 L6.1 73.6 L6.1 82.598 Ls42.1 82.598 m37.6 82.598 L37.6 73.6 L42.1 73.6 L42.1 82.598 Ls78.1 82.598 m73.6 82.598 L73.6 73.6 L78.1 73.6 L78.1 82.598 Ls37.6 1.6 m37.6 6.098 L19.6 6.098 L19.6 1.6 L37.6 1.6 Ls73.6 1.6 m73.6 6.098 L55.6 6.098 L55.6 1.6 L73.6 1.6 Ls19.6 19.6 m19.6 24.098 L1.6 24.098 L1.6 19.6 L19.6 19.6 Ls55.6 19.6 m55.6 24.098 L37.6 24.098 L37.6 19.6 L55.6 19.6 Ls82.6 19.6 m82.6 24.098 L73.6 24.098 L73.6 19.6 L82.6 19.6 Ls37.6 37.6 m37.6 42.098 L19.6 42.098 L19.6 37.6 L37.6 37.6 Ls73.6 37.6 m73.6 42.098 L55.6 42.098 L55.6 37.6 L73.6 37.6 Ls19.6 55.6 m19.6 60.098 L1.6 60.098 L1.6 55.6 L19.6 55.6 Ls55.6 55.6 m55.6 60.098 L37.6 60.098 L37.6 55.6 L55.6 55.6 Ls82.6 55.6 m82.6 60.098 L73.6 60.098 L73.6 55.6 L82.6 55.6 Ls37.6 73.6 m37.6 78.098 L19.6 78.098 L19.6 73.6 L37.6 73.6 Ls73.6 73.6 m73.6 78.098 L55.6 78.098 L55.6 73.6 L73.6 73.6 Ls%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Waves-Transparent)(Waves-Transparent) 4 5.89 113.125 31.693 [%AI3_Tile(0 O 0 R 1 0 0.35 0 k 1 0 0.35 0 K) @(%AI6_BeginPatternLayer800 Ar2 J 0 j 1.5 w 4 M []0 d%AI3_Note:0 D0 XR113.125 12.602 m106.95 12.602 102.306 13.907 99.484 14.73 c96.664 15.553 92.018 16.858 85.844 16.858 c79.67 16.858 75.024 15.553 72.203 14.73 c69.382 13.906 64.737 12.602 58.562 12.602 c52.388 12.602 47.743 13.907 44.922 14.73 c42.101 15.553 37.455 16.858 31.281 16.858 c25.107 16.858 20.461 15.553 17.641 14.73 c14.819 13.907 10.174 12.602 4 12.602 cS113.125 8.301 m106.95 8.301 102.306 9.606 99.484 10.429 c96.664 11.252 92.018 12.557 85.844 12.557 c79.67 12.557 75.024 11.252 72.203 10.429 c69.382 9.606 64.737 8.301 58.562 8.301 c52.388 8.301 47.743 9.606 44.922 10.429 c42.101 11.252 37.455 12.557 31.281 12.557 c25.107 12.557 20.461 11.252 17.641 10.429 c14.819 9.606 10.174 8.301 4 8.301 cS113.125 4 m106.95 4 102.306 5.305 99.484 6.128 c96.664 6.951 92.018 8.256 85.844 8.256 c79.67 8.256 75.024 6.951 72.203 6.128 c69.382 5.305 64.737 4 58.562 4 c52.388 4 47.743 5.305 44.922 6.128 c42.101 6.951 37.455 8.256 31.281 8.256 c25.107 8.256 20.461 6.951 17.641 6.128 c14.819 5.305 10.174 4 4 4 cS113.125 29.805 m106.95 29.805 102.306 31.11 99.484 31.933 c96.664 32.756 92.018 34.061 85.844 34.061 c79.67 34.061 75.024 32.756 72.203 31.933 c69.382 31.109 64.737 29.805 58.562 29.805 c52.388 29.805 47.743 31.11 44.922 31.933 c42.101 32.756 37.455 34.061 31.281 34.061 c25.107 34.061 20.461 32.756 17.641 31.933 c14.819 31.11 10.174 29.805 4 29.805 cS113.125 25.504 m106.95 25.504 102.306 26.809 99.484 27.632 c96.664 28.455 92.018 29.76 85.844 29.76 c79.67 29.76 75.024 28.455 72.203 27.632 c69.382 26.809 64.737 25.504 58.562 25.504 c52.388 25.504 47.743 26.809 44.922 27.632 c42.101 28.455 37.455 29.76 31.281 29.76 c25.107 29.76 20.461 28.455 17.641 27.632 c14.819 26.809 10.174 25.504 4 25.504 cS113.125 21.203 m106.95 21.203 102.306 22.508 99.484 23.331 c96.664 24.154 92.018 25.459 85.844 25.459 c79.67 25.459 75.024 24.154 72.203 23.331 c69.382 22.508 64.737 21.203 58.562 21.203 c52.388 21.203 47.743 22.508 44.922 23.331 c42.101 24.154 37.455 25.459 31.281 25.459 c25.107 25.459 20.461 24.154 17.641 23.331 c14.819 22.508 10.174 21.203 4 21.203 cS113.125 16.902 m106.95 16.902 102.306 18.207 99.484 19.03 c96.664 19.853 92.018 21.158 85.844 21.158 c79.67 21.158 75.024 19.853 72.203 19.03 c69.382 18.207 64.737 16.902 58.562 16.902 c52.388 16.902 47.743 18.207 44.922 19.03 c42.101 19.853 37.455 21.158 31.281 21.158 c25.107 21.158 20.461 19.853 17.641 19.03 c14.819 18.207 10.174 16.902 4 16.902 cS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D0 XR8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp7 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Green & Blue)(Green & Blue) 0 2 Bd[<99999A9A9B9B9B9C9C9D9D9D9E9E9F9F9FA0A0A1A1A1A2A2A3A3A3A4A4A5A5A5A6A6A7A7A7A8A8A9A9A9AAAAABABABACACADADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B9B9B9BABABBBBBBBCBCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9C9C9CACACBCBCBCCCCCDCDCDCECECFCFCFD0D0D1D1D1D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDDDDDDDEDEDFDFDFE0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F5F6F6F7F7F7F8F8F9F9F9FAFAFBFBFBFCFCFDFDFDFEFEFFFF><000102020304050506070808090A0B0B0C0D0E0E0F101111121314141516171718191A1A1B1C1D1D1E1F20202122232324252626272829292A2B2C2C2D2E2F2F303132323334353536373838393A3B3B3C3D3E3E3F404141424344444546474748494A4A4B4C4D4D4E4F50505152535354555656575859595A5B5C5C5D5E5F5F606162626364656566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F80808182828384858586878888898A8B8B8C8D8E8E8F909191929394949596979798999A9A9B9C9D9D9E9FA0A0A1A2A3A3A4A5A6A6A7A8A9A9AAABACACADAEAFAFB0B1B2B2B3B4B5B5B6B7B8B8B9BABBBBBCBDBEBEBF><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br[1 0.75 0 0 1 50 100 %_Bs0.6 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Purple, Red & Yellow)(Purple, Red & Yellow) 0 3 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A><CCCCCCCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D4D4D4D4D5D5D5D5D5D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDCDCDCDCDCDDDDDDDDDDDEDEDEDEDFDFDFDFDFE0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E3E3E3E3E4E4E4E4E4E5E5E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E9E9E9E9E9EAEAEAEAEAEBEBEBEBEBECECECECECEDEDEDEDEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFDFDFDFDFDFEFEFEFEFEFFFFFF>01 %_Br<E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E5E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBECECECECECECECECECEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFFFFFFFFFF><00010203040405060708090A0B0C0C0D0E0F10111213141415161718191A1B1C1D1D1E1F20212223242525262728292A2B2C2D2D2E2F30313233343535363738393A3B3C3D3D3E3F40414243444545464748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5E5E5F60616263646566666768696A6B6C6D6E6E6F70717273747576767778797A7B7C7D7E7F7F80818283848586878788898A8B8C8D8E8F8F90919293949596979798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFAFB0B1B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C8C9CACBCC>01 %_Br[0 0.04 1 0 1 50 100 %_Bs0 1 0.8 0 1 50 50 %_Bs0.9 0.9 0 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Steel Bar)(Steel Bar) 0 3 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br[0 0 50 100 %_Bs1 0 50 70 %_Bs0 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (White & Purple Radial)(White & Purple Radial) 1 2 Bd[<8C8C8B8B8A898988888787868685858483838282818180807F7F7E7D7D7C7C7B7B7A7A7978787777767675757474737272717170706F6F6E6D6D6C6C6B6B6A6A6969686767666665656464636262616160605F5F5E5E5D5C5C5B5B5A5A5959585757565655555454535352515150504F4F4E4E4D4C4C4B4B4A4A4949484847464645454444434342414140403F3F3E3E3D3D3C3B3B3A3A3939383837363635353434333332323130302F2F2E2E2D2D2C2B2B2A2A2929282827272625252424232322222120201F1F1E1E1D1D1C1C1B1A1A1919181817171615151414131312121111100F0F0E0E0D0D0C0C0B0A0A090908080707060605040403030202010100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>001 %_Br[0.55 1 0 0 1 50 10 %_Bs0 0 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 4 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A1 Ap0 O0.9 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR437.5 394 m437.5 456.5 L346.5 456.5 L346.5 394 L437.5 394 Lf0 R0 G0.65 w294 510.5 m294 557 L202.5 557 L202.5 510.5 L294 510.5 Lb0 To1 0 0 1 161.5 530 0 TpTP-13.7483 0 Td0 Tr0 g1 w/_Helvetica 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(Library) Tx (\r) TX TO0 To1 0 0 1 247.5 532.5 0 TpTP-17.5045 0 Td0 Tr(Interface) Tx (\r) TX TO0 To1 0 0 1 248 494 0 TpTP-30.754 0 Td0 Tr(Implementation) Tx (\r) TX TO0 To1 0 0 1 393 468 0 TpTP-11.4994 0 Td0 Tr(Client) Tx (\r) TX TO0 To1 0 0 1 287 414.5 0 TpTP-29.2511 0 Td0 Tr(Another library) Tx (\r) TX TO0 To1 0 0 1 392 417 0 TpTP-23.2537 0 Td0 Tr(Its interface) Tx (\r) TX TO0 Ap0 R0 G0.65 w437.5 394 m437.5 456.5 l346.5 456.5 l346.5 393.5 lS1 Ap302.5 475 m302.5 519.5 L193.5 519.5 L193.5 475 L302.5 475 Ls456 447 m456 492 L329.5 492 L329.5 447 L456 447 Ls0 Ap2 w202.5 547.5 m139 547.5 l139 437 l473.5 437 l473.5 547.5 l294.5 547.5 lS474 393.5 m474 430 l437.5 430 lS346 430 m248 430 l248 394.5 lSLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 204 504 387 C
36 72 576 720 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "197" 211
%%Page: "198" 212
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(198) 72 677.67 T
0 F
(Chapter 13) 95.75 677.67 T
(Libraries and Modules) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(13.4.2  The int) 108 639.33 T
(erface module) 178.51 639.33 T
1 11 Q
(W) 108 619.67 T
(e can now write a \336rst draft of the interface module for our library:) 117.99 619.67 T
4 9 Q
(define module time) 108 599 T
5 F
(// Classes) 118.8 588 T
4 F
(create <time>, <time-of-day>, <time-offset>;) 118.8 577 T
5 F
(// Generics) 118.8 566 T
4 F
(create say, encode-total-seconds;) 118.8 555 T
(end module time;) 108 544 T
1 11 Q
-0.26 (In the pr) 108 523.67 P
-0.26 (eceding de\336nition, the) 149.1 523.67 P
4 10 Q
-0.57 (time) 259.89 523.67 P
1 11 Q
-0.26 ( interface module cr) 283.89 523.67 P
-0.26 (eates and exports \050makes) 380.05 523.67 P
-0.18 (visible\051 thr) 108 509.67 P
-0.18 (ee classes and two functions. W) 160.2 509.67 P
-0.18 (e use the) 311.99 509.67 P
4 10 Q
-0.4 (create) 356.79 509.67 P
1 11 Q
-0.18 ( clause, because we do) 392.79 509.67 P
(not intend to de\336ne any implementations in the time-library interface module) 108 495.67 T
(itself \321 that will be done in an implementation module, which will use the time-) 108 481.67 T
-0.37 (library module as its interface. The) 108 467.67 P
4 10 Q
-0.8 (create) 277.53 467.67 P
1 11 Q
-0.37 ( clause causes the names to be r) 313.53 467.67 P
-0.37 (eserved) 463.86 467.67 P
(in the) 108 453.67 T
4 10 Q
(time) 138.36 453.67 T
1 11 Q
( interface module, with the r) 162.36 453.67 T
(equisite that de\336nitions be pr) 300.29 453.67 T
(ovided by) 442.56 453.67 T
(some other module in the same library) 108 439.67 T
(.) 294.88 439.67 T
3 13 Q
(13.4.3  The imple) 108 343.33 T
(mentation module) 193.33 343.33 T
1 11 Q
(Our) 108 323.67 T
4 10 Q
(time) 130.37 323.67 T
1 11 Q
( interface module speci\336es the names that ar) 154.37 323.67 T
(e visible to clients of our) 370.03 323.67 T
(library) 108 309.67 T
(. It also serves to specify the names that must be de\336ned in our implemen-) 139.57 309.67 T
(tation. T) 108 295.67 T
(o pr) 147.51 295.67 T
(epar) 167.03 295.67 T
(e to de\336ne those names, we cr) 188.55 295.67 T
(eate a separate implementation) 333.93 295.67 T
(module:) 108 281.67 T
4 9 Q
(define module time-implementation) 108 261 T
5 F
(// Interface module) 118.8 250 T
4 F
(use time;) 118.8 239 T
5 F
(// Substrate modules) 118.8 228 T
4 F
(use format-out;) 118.8 217 T
(use dylan;) 118.8 206 T
(end module time-implementation;) 108 195 T
1 11 Q
(In the pr) 108 174.67 T
(eceding de\336nition, the implementation module uses the) 149.62 174.67 T
4 10 Q
(time) 423.88 174.67 T
1 11 Q
( interface) 447.88 174.67 T
(module so that it can give de\336nitions to the names that the interface cr) 108 160.67 T
(eated. The) 449.4 160.67 T
-0.16 (implementation module is also a client module: It is a client of the) 108 146.67 P
4 10 Q
-0.36 (dylan) 428.53 146.67 P
1 11 Q
-0.16 ( module,) 458.53 146.67 P
(because its de\336nitions use de\336nitions such as) 108 132.67 T
4 10 Q
(define class) 330.53 132.67 T
1 11 Q
(,) 402.53 132.67 T
4 10 Q
(<integer>) 408.03 132.67 T
1 11 Q
(, and) 462.03 132.67 T
4 10 Q
(*) 488.9 132.67 T
2 11 Q
(Comparison with C:) 141 405.67 T
1 F
( The Dylan) 242.12 405.67 T
4 10 Q
(create) 298.52 405.67 T
1 11 Q
( clause is r) 334.52 405.67 T
(oughly analogous) 384.93 405.67 T
(to the C) 141 391.67 T
4 10 Q
(extern) 181.9 391.67 T
1 11 Q
( declaration.) 217.9 391.67 T
135 418.88 135 384.12 2 L
V
0.25 H
0 Z
N
486 418.88 486 384.12 2 L
V
N
134.88 419 486.12 419 2 L
V
N
134.88 384 486.12 384 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "198" 212
%%Page: "199" 213
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.4 Module definition) 428.37 677.67 T
2 F
(199) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.08 (\050which ar) 108 640.67 P
-0.08 (e de\336ned by the) 154.05 640.67 P
4 10 Q
-0.17 (dylan) 234.5 640.67 P
1 11 Q
-0.08 ( module of the) 264.5 640.67 P
4 10 Q
-0.17 (dylan) 337.67 640.67 P
1 11 Q
-0.08 ( library\051; it is also a client of) 367.67 640.67 P
(the) 108 626.67 T
4 10 Q
(format-out) 126.01 626.67 T
1 11 Q
( module, because the) 186.01 626.67 T
4 10 Q
(say) 290.86 626.67 T
1 11 Q
( methods ar) 308.86 626.67 T
(e implemented using the) 366.37 626.67 T
4 10 Q
-0.59 (format-out) 108 612.67 P
1 11 Q
-0.27 ( function \050which is de\336ned in the) 168 612.67 P
4 10 Q
-0.59 (format-out) 329.62 612.67 P
1 11 Q
-0.27 ( module of the) 389.62 612.67 P
4 10 Q
-0.59 (format-) 462 612.67 P
(out) 108 598.67 T
1 11 Q
( library\051.) 126 598.67 T
-0.38 (W) 135 584.67 P
-0.38 (e can start to envision the) 144.99 584.67 P
4 10 Q
-0.82 (time) 269.17 584.67 P
1 11 Q
-0.38 ( library as shown in Figur) 293.17 584.67 P
-0.38 (e 13.3. In a library) 416.46 584.67 P
(mor) 108 570.67 T
(e complicated than the time library) 127.87 570.67 T
(, we might decompose the constr) 296.95 570.67 T
(uction of) 457.11 570.67 T
(the library into several implementation modules. For example, we might want to) 108 556.67 T
(assign the implementation of the) 108 542.67 T
4 10 Q
(<sixty-unit>) 270.14 542.67 T
1 11 Q
( substrate to another pr) 342.14 542.67 T
(ogram-) 455.33 542.67 T
(mer) 108 528.67 T
(, and to cr) 126.51 528.67 T
(eate an interface between that substrate and the r) 174.76 528.67 T
(est of the imple-) 412.89 528.67 T
(mentation so that work on either side of the interface can pr) 108 514.67 T
(oceed in parallel. In) 398.22 514.67 T
(that case, we might use the following module de\336nitions:) 108 500.67 T
4 9 Q
(define module sixty-unit) 108 480 T
5 F
(// External interface) 118.8 469 T
4 F
(use time;) 118.8 458 T
5 F
(// Internal interface) 118.8 447 T
4 F
(export <sixty-unit>, total-seconds, decode-total-seconds;) 118.8 436 T
5 F
(// Substrate module) 118.8 425 T
4 F
(use dylan;) 118.8 414 T
(end module sixty-unit;) 108 403 T
108 161.01 504 169 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 13.3) 226.77 172.33 T
8 F
(Initial) 285.13 172.33 T
4 F
(time) 311.25 172.33 T
8 F
( libr) 335.25 172.33 T
(ar) 351.26 172.33 T
(y) 360.45 172.33 T
(.) 364.45 172.33 T
108 185 504 367 C
116.5 189 495.5 365 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 126 404 493 568 367 164 122.5 195 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f13-3.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(r) 6.0%%For: (brent) (harlequin)%%Title: (f13-3 .eps)%%CreationDate: (6/11/96) (11:30 AM)%%BoundingBox: 126 404 493 568%%HiResBoundingBox: 126.75 404.1667 492.25 567.325%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.0%AI3_ColorUsage: Black&White%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set)%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 ()%AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 29 31 581 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 1 0%AI5_TargetResolution: 300%AI5_NumLayers: 1%AI5_OpenToView: 146 620 3 826 581 18 0 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 23 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_ax neg 0 rmoveto	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 17 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin		/initialize	{ 		Adobe_ColorImage_AI6 begin		Adobe_ColorImage_AI6		{			dup type /arraytype eq			{				dup xcheck				{					bind				} if			} if			pop pop		} forall	} def	/terminate { end } def		currentdict /Adobe_ColorImage_AI6_Vars known not	{		/Adobe_ColorImage_AI6_Vars 14 dict def	} if		Adobe_ColorImage_AI6_Vars begin		/channelcount 0 def		/sourcecount 0 def		/sourcearray 4 array def		/plateindex -1 def		/XIMask 0 def		/XIBinary 0 def		/XIChannelCount 0 def		/XIBitsPerPixel 0 def		/XIImageHeight 0 def		/XIImageWidth 0 def		/XIImageMatrix null def		/XIBuffer null def		/XIDataProc null def end		/WalkRGBString null def	/WalkCMYKString null def		/StuffRGBIntoGrayString null def	/RGBToGrayImageProc null def	/StuffCMYKIntoGrayString null def	/CMYKToGrayImageProc null def	/ColorImageCompositeEmulator null def		/SeparateCMYKImageProc null def		/FourEqual null def	/TestPlateIndex null def		currentdict /_colorimage known not	{		/colorimage where		{			/colorimage get /_colorimage exch def		}		{			/_colorimage null def		} ifelse	} if		/_currenttransfer systemdict /currenttransfer get def		/colorimage null def	/XI null def			/WalkRGBString	{		0 3 index			dup length 1 sub 0 3 3 -1 roll		{			3 getinterval { } forall				5 index exec				3 index		} for				 5 { pop } repeat		} def			/WalkCMYKString	{		0 3 index			dup length 1 sub 0 4 3 -1 roll		{			4 getinterval { } forall						6 index exec						3 index					} for				5 { pop } repeat			} def			/StuffRGBIntoGrayString	{		.11 mul exch				.59 mul add exch				.3 mul add				cvi 3 copy put				pop 1 add	} def			/RGBToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin 			sourcearray 0 get exec			dup length 3 idiv string			dup 3 1 roll 						/StuffRGBIntoGrayString load exch			WalkRGBString	 end	} def			/StuffCMYKIntoGrayString	{		exch .11 mul add				exch .59 mul add				exch .3 mul add				dup 255 gt { pop 255 } if				255 exch sub cvi 3 copy put				pop 1 add	} def			/CMYKToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin			sourcearray 0 get exec			dup length 4 idiv string			dup 3 1 roll 						/StuffCMYKIntoGrayString load exch			WalkCMYKString	 end	} def			/ColorImageCompositeEmulator	{		pop true eq		{			Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat		}		{			Adobe_ColorImage_AI6_Vars /channelcount get 1 ne			{				Adobe_ColorImage_AI6_Vars begin					sourcearray 0 3 -1 roll put									channelcount 3 eq 					{ 						/RGBToGrayImageProc 					}					{ 						/CMYKToGrayImageProc					} ifelse					load			 end			} if			image		} ifelse	} def			/SeparateCMYKImageProc	{			Adobe_ColorImage_AI6_Vars begin				sourcecount 0 ne			{				sourcearray plateindex get exec			}			{							sourcearray 0 get exec								dup length 4 idiv string								0 2 index								plateindex 4 2 index length 1 sub				{					get 255 exch sub										3 copy put pop 1 add										2 index				} for					pop pop exch pop			} ifelse	 end	} def				/FourEqual	{		4 index ne		{			pop pop pop false		}		{			4 index ne			{				pop pop false			}			{				4 index ne				{					pop false				}				{					4 index eq				} ifelse			} ifelse		} ifelse	} def			/TestPlateIndex	{		Adobe_ColorImage_AI6_Vars begin			/plateindex -1 def				/setcmykcolor where			{				pop				gsave				1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub				grestore					1 0 0 0 FourEqual 				{ 					/plateindex 0 def				}				{					0 1 0 0 FourEqual					{ 						/plateindex 1 def					}					{						0 0 1 0 FourEqual						{							/plateindex 2 def						}						{							0 0 0 1 FourEqual							{ 								/plateindex 3 def							}							{								0 0 0 0 FourEqual								{									/plateindex 5 def								} if							} ifelse						} ifelse					} ifelse				} ifelse				pop pop pop pop			} if			plateindex	 end	} def			/colorimage	{		Adobe_ColorImage_AI6_Vars begin			/channelcount 1 index def			/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def				4 sourcecount add index dup 			8 eq exch 1 eq or not	 end				{			/_colorimage load null ne			{				_colorimage			}			{				Adobe_ColorImage_AI6_Vars /sourcecount get				7 add { pop } repeat			} ifelse		}		{			dup 3 eq			TestPlateIndex			dup -1 eq exch 5 eq or or			{				/_colorimage load null eq				{					ColorImageCompositeEmulator				}				{					dup 1 eq					{						pop pop image					}					{						Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							gsave														0 _currenttransfer exec							1 _currenttransfer exec							eq							{ 0 _currenttransfer exec 0.5 lt }							{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse														{ { pop 0 } } { { pop 1 } } ifelse							systemdict /settransfer get exec						} if												_colorimage												Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							grestore						} if					} ifelse				} ifelse			}			{				dup 1 eq				{					pop pop					image				}				{					pop pop						Adobe_ColorImage_AI6_Vars begin						sourcecount -1 0						{										exch sourcearray 3 1 roll put						} for							/SeparateCMYKImageProc load				 end						systemdict /image get exec				} ifelse			} ifelse		} ifelse	} def		/XI	{		Adobe_ColorImage_AI6_Vars begin			gsave			/XIMask exch 0 ne def			/XIBinary exch 0 ne def			pop			pop			/XIChannelCount exch def			/XIBitsPerPixel exch def			/XIImageHeight exch def			/XIImageWidth exch def			pop pop pop pop			/XIImageMatrix exch def						XIBitsPerPixel 1 eq			{				XIImageWidth 8 div ceiling cvi			}			{				XIImageWidth XIChannelCount mul			} ifelse			/XIBuffer exch string def						XIBinary			{				/XIDataProc { currentfile XIBuffer readstring pop } def				currentfile 128 string readline pop pop			}			{				/XIDataProc { currentfile XIBuffer readhexstring pop } def			} ifelse						0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale						XIMask			{				XIImageWidth XIImageHeight				false				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								/_lp /null ddef				_fc				/_lp /imagemask ddef								imagemask			}			{				XIImageWidth XIImageHeight				XIBitsPerPixel				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								XIChannelCount 1 eq				{										gsave					0 setgray										image										grestore				}				{					false					XIChannelCount					colorimage				} ifelse			} ifelse			grestore	 end	} def	end%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Bricks)(Bricks) 2.565 5.19 74.565 77.19 [(0 O 0 R 0.3 0.85 0.85 0 k 0.3 0.85 0.85 0 K) @_ &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR1.6 73.6 m75.6 73.6 lS1.6 66.399 m75.6 66.399 LS1.6 59.199 m75.6 59.199 LS1.6 51.998 m75.6 51.998 LS1.6 44.798 m75.6 44.798 LS1.6 37.597 m75.6 37.597 LS1.6 30.397 m75.6 30.397 LS1.6 23.196 m75.6 23.196 LS1.6 15.996 m75.6 15.996 LS1.6 8.796 m75.6 8.796 LS70.975 73.6 m70.975 66.412 lS56.575 73.6 m56.575 66.412 LS42.175 73.6 m42.175 66.412 LS27.775 73.6 m27.775 66.412 LS13.375 73.6 m13.375 66.412 LS70.975 59.162 m70.975 51.975 lS56.575 59.162 m56.575 51.975 LS42.175 59.162 m42.175 51.975 LS27.775 59.162 m27.775 51.975 LS13.375 59.162 m13.375 51.975 LS70.975 44.787 m70.975 37.6 lS56.575 44.787 m56.575 37.6 LS42.175 44.787 m42.175 37.6 LS27.775 44.787 m27.775 37.6 LS13.375 44.787 m13.375 37.6 LS70.975 30.412 m70.975 23.225 lS56.575 30.412 m56.575 23.225 LS42.175 30.412 m42.175 23.225 LS27.775 30.412 m27.775 23.225 LS13.375 30.412 m13.375 23.225 LS70.975 15.975 m70.975 8.787 lS56.575 15.975 m56.575 8.787 LS42.175 15.975 m42.175 8.787 LS27.775 15.975 m27.775 8.787 LS13.375 15.975 m13.375 8.787 LS63.762 8.787 m63.762 1.6 LS49.362 8.787 m49.362 1.6 LS34.962 8.787 m34.962 1.6 LS20.562 8.787 m20.562 1.6 LS6.162 8.787 m6.162 1.6 lS63.762 23.225 m63.762 16.037 LS49.362 23.225 m49.362 16.037 LS34.962 23.225 m34.962 16.037 LS20.562 23.225 m20.562 16.037 LS6.162 23.225 m6.162 16.037 lS63.762 37.6 m63.762 30.412 LS49.362 37.6 m49.362 30.412 LS20.562 37.6 m20.562 30.412 LS6.162 37.6 m6.162 30.412 lS63.762 51.975 m63.762 44.787 LS49.362 51.975 m49.362 44.787 LS34.962 51.975 m34.962 44.787 LS20.562 51.975 m20.562 44.787 LS6.162 51.975 m6.162 44.787 lS63.762 66.412 m63.762 59.225 LS49.362 66.412 m49.362 59.225 LS34.962 66.412 m34.962 59.225 LS20.562 66.412 m20.562 59.225 LS6.162 66.412 m6.162 59.225 lS63.762 80.849 m63.762 73.662 LS49.362 80.849 m49.362 73.662 LS34.962 80.849 m34.962 73.662 LS20.562 80.849 m20.562 73.662 LS6.162 80.849 m6.162 73.662 lS34.962 37.6 m34.962 30.412 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Confetti)(Confetti) 4.85 3.617 76.85 75.617 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR10.6 64.867 m7.85 62.867 lS9.1 8.617 m6.85 6.867 lS78.1 68.617 m74.85 67.867 lS76.85 56.867 m74.35 55.117 lS79.6 51.617 m76.6 51.617 lS76.35 44.117 m73.6 45.867 lS78.6 35.867 m76.6 34.367 lS76.1 23.867 m73.35 26.117 lS78.1 12.867 m73.85 13.617 lS68.35 14.617 m66.1 12.867 lS76.6 30.617 m73.6 30.617 lS62.85 58.117 m60.956 60.941 lS32.85 59.617 m31.196 62.181 lS47.891 64.061 m49.744 66.742 lS72.814 2.769 m73.928 5.729 lS67.976 2.633 m67.35 5.909 lS61.85 27.617 m59.956 30.441 lS53.504 56.053 m51.85 58.617 lS52.762 1.779 m52.876 4.776 lS45.391 5.311 m47.244 7.992 lS37.062 3.375 m35.639 5.43 lS55.165 34.828 m57.518 37.491 lS20.795 3.242 m22.12 5.193 lS14.097 4.747 m15.008 8.965 lS9.736 1.91 m8.073 4.225 lS31.891 5.573 m32.005 8.571 lS12.1 70.367 m15.6 68.867 lS9.35 54.867 m9.6 58.117 lS12.85 31.867 m14.35 28.117 lS10.1 37.367 m12.35 41.117 lS34.1 71.117 m31.85 68.617 lS38.35 71.117 m41.6 68.367 lS55.1 71.117 m58.35 69.117 lS57.35 65.117 m55.35 61.867 lS64.35 66.367 m69.35 68.617 lS71.85 62.867 m69.35 61.117 lS23.6 70.867 m23.6 67.867 lS20.6 65.867 m17.35 65.367 lS24.85 61.367 m25.35 58.117 lS25.85 65.867 m29.35 66.617 lS14.1 54.117 m16.85 56.117 lS12.35 11.617 m12.6 15.617 lS12.1 19.867 m14.35 22.367 lS26.1 9.867 m23.6 13.367 lS34.6 47.117 m32.1 45.367 lS62.6 41.867 m59.85 43.367 lS31.6 35.617 m27.85 36.367 lS36.35 26.117 m34.35 24.617 lS33.85 14.117 m31.1 16.367 lS37.1 9.867 m35.1 11.117 lS34.35 20.867 m31.35 20.867 lS44.6 56.617 m42.1 54.867 lS47.35 51.367 m44.35 51.367 lS44.1 43.867 m41.35 45.617 lS43.35 33.117 m42.6 30.617 lS43.85 23.617 m41.1 25.867 lS44.35 15.617 m42.35 16.867 lS67.823 31.1 m64.823 31.1 lS27.1 32.617 m29.6 30.867 lS31.85 55.117 m34.85 55.117 lS19.6 40.867 m22.1 39.117 lS16.85 35.617 m19.85 35.617 lS20.1 28.117 m22.85 29.867 lS52.1 42.617 m54.484 44.178 lS52.437 50.146 m54.821 48.325 lS59.572 54.133 m59.35 51.117 lS50.185 10.055 m53.234 9.928 lS51.187 15.896 m53.571 14.075 lS58.322 19.883 m59.445 16.823 lS53.1 32.117 m50.6 30.367 lS52.85 24.617 m49.6 25.617 lS61.85 9.117 m59.1 10.867 lS69.35 34.617 m66.6 36.367 lS67.1 23.617 m65.1 22.117 lS24.435 46.055 m27.484 45.928 lS25.437 51.896 m27.821 50.075 lS62.6 47.117 m65.321 46.575 lS19.85 19.867 m20.35 16.617 lS21.85 21.867 m25.35 22.617 lS37.6 62.867 m41.6 62.117 lS38.323 42.1 m38.823 38.6 lS69.35 52.617 m66.85 53.867 lS14.85 62.117 m18.1 59.367 lS9.6 46.117 m7.1 44.367 lS20.6 51.617 m18.6 50.117 lS46.141 70.811 m47.994 73.492 lS69.391 40.561 m71.244 43.242 lS38.641 49.311 m39.35 52.117 lS25.141 16.811 m25.85 19.617 lS36.6 32.867 m34.6 31.367 lS6.1 68.617 m2.85 67.867 lS4.85 56.867 m2.35 55.117 lS7.6 51.617 m4.6 51.617 lS6.6 35.867 m4.6 34.367 lS6.1 12.867 m1.85 13.617 lS4.6 30.617 m1.6 30.617 lS72.814 74.769 m73.928 77.729 lS67.976 74.633 m67.35 77.909 lS52.762 73.779 m52.876 76.776 lS37.062 75.375 m35.639 77.43 lS20.795 75.242 m22.12 77.193 lS9.736 73.91 m8.073 76.225 lS10.1 23.617 m6.35 24.367 lS73.217 18.276 m71.323 21.1 lS28.823 39.6 m29.505 42.389 lS49.6 38.617 m47.6 37.117 lS60.323 73.6 m62.323 76.6 lS60.323 1.6 m62.323 4.6 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Cross Texture)(Cross Texture) 1 1 58.6 58.6 [(0 O 0 R 1 1 0.2 0 k 1 1 0.2 0 K) @_ &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR53.5 55 m56.5 55 lS39.1 55 m42.1 55 lS24.7 55 m27.7 55 lS10.3 55 m13.3 55 lS46.3 47.8 m49.3 47.8 lS31.9 47.8 m34.9 47.8 lS17.5 47.8 m20.5 47.8 lS3.1 47.8 m6.1 47.8 lS53.5 40.6 m56.5 40.6 lS39.1 40.6 m42.1 40.6 lS24.7 40.6 m27.7 40.6 lS10.3 40.6 m13.3 40.6 lS46.3 33.4 m49.3 33.4 lS31.9 33.4 m34.9 33.4 lS17.5 33.4 m20.5 33.4 lS3.1 33.4 m6.1 33.4 lS53.5 26.2 m56.5 26.2 lS39.1 26.2 m42.1 26.2 lS24.7 26.2 m27.7 26.2 lS10.3 26.2 m13.3 26.2 lS46.3 19 m49.3 19 lS31.9 19 m34.9 19 lS17.5 19 m20.5 19 lS3.1 19 m6.1 19 lS53.5 11.8 m56.5 11.8 lS39.1 11.8 m42.1 11.8 lS24.7 11.8 m27.7 11.8 lS10.3 11.8 m13.3 11.8 lS46.3 4.6 m49.3 4.6 lS31.9 4.6 m34.9 4.6 lS17.5 4.6 m20.5 4.6 lS3.1 4.6 m6.1 4.6 lS55 56.5 m55 53.5 lS40.6 56.5 m40.6 53.5 lS26.2 56.5 m26.2 53.5 lS11.8 56.5 m11.8 53.5 lS47.8 49.3 m47.8 46.3 lS33.4 49.3 m33.4 46.3 lS19 49.3 m19 46.3 lS4.6 49.3 m4.6 46.3 lS55 42.1 m55 39.1 lS40.6 42.1 m40.6 39.1 lS26.2 42.1 m26.2 39.1 lS11.8 42.1 m11.8 39.1 lS47.8 34.9 m47.8 31.9 lS33.4 34.9 m33.4 31.9 lS19 34.9 m19 31.9 lS4.6 34.9 m4.6 31.9 lS55 27.7 m55 24.7 lS40.6 27.7 m40.6 24.7 lS26.2 27.7 m26.2 24.7 lS11.8 27.7 m11.8 24.7 lS47.8 20.5 m47.8 17.5 lS33.4 20.5 m33.4 17.5 lS19 20.5 m19 17.5 lS4.6 20.5 m4.6 17.5 lS55 13.3 m55 10.3 lS40.6 13.3 m40.6 10.3 lS26.2 13.3 m26.2 10.3 lS11.8 13.3 m11.8 10.3 lS47.8 6.1 m47.8 3.1 lS33.4 6.1 m33.4 3.1 lS19 6.1 m19 3.1 lS4.6 6.1 m4.6 3.1 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Master diagonal)(Master diagonal) 798.9318 33.4829 1412.9318 827.4829 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer300 Ar0 J 0 j 0.5 w 3.8636 M []0 d%AI3_Note:0 D0 XR1205.9318 1208.4829 m1.9318 4.4829 lS1214.4318 1208.4829 m10.4318 4.4829 lS1222.9318 1208.4829 m18.9318 4.4829 lS1231.4318 1208.4829 m27.4318 4.4829 lS1239.9318 1208.4829 m35.9318 4.4829 lS1248.4318 1208.4829 m44.4318 4.4829 lS1256.9318 1208.4829 m52.9318 4.4829 lS1265.4318 1208.4829 m61.4318 4.4829 lS1273.9318 1208.4829 m69.9318 4.4829 lS1282.4318 1208.4829 m78.4318 4.4829 lS1290.9318 1208.4829 m86.9318 4.4829 lS1299.4318 1208.4829 m95.4318 4.4829 lS1307.9318 1208.4829 m103.9318 4.4829 lS1316.4318 1208.4829 m112.4318 4.4829 lS1324.9318 1208.4829 m120.9318 4.4829 lS1333.4318 1208.4829 m129.4318 4.4829 lS1341.9318 1208.4829 m137.9318 4.4829 lS1350.4318 1208.4829 m146.4318 4.4829 lS1358.9318 1208.4829 m154.9318 4.4829 lS1367.4318 1208.4829 m163.4318 4.4829 lS1375.9318 1208.4829 m171.9318 4.4829 lS1384.4318 1208.4829 m180.4318 4.4829 lS1392.9318 1208.4829 m188.9318 4.4829 lS1401.4318 1208.4829 m197.4318 4.4829 lS1409.9318 1208.4829 m205.9318 4.4829 lS1418.4318 1208.4829 m214.4318 4.4829 lS1426.9318 1208.4829 m222.9318 4.4829 lS1435.4318 1208.4829 m231.4318 4.4829 lS1443.9318 1208.4829 m239.9318 4.4829 lS1452.4318 1208.4829 m248.4318 4.4829 lS1460.9318 1208.4829 m256.9318 4.4829 lS1469.4318 1208.4829 m265.4318 4.4829 lS1477.9318 1208.4829 m273.9318 4.4829 lS1486.4318 1208.4829 m282.4318 4.4829 lS1494.9318 1208.4829 m290.9318 4.4829 lS1503.4318 1208.4829 m299.4318 4.4829 lS1511.9318 1208.4829 m307.9318 4.4829 lS1520.4318 1208.4829 m316.4318 4.4829 lS1528.9318 1208.4829 m324.9318 4.4829 lS1537.4318 1208.4829 m333.4318 4.4829 lS1545.9318 1208.4829 m341.9318 4.4829 lS1554.4318 1208.4829 m350.4318 4.4829 lS1562.9318 1208.4829 m358.9318 4.4829 lS1571.4318 1208.4829 m367.4318 4.4829 lS1579.9318 1208.4829 m375.9318 4.4829 lS1588.4318 1208.4829 m384.4318 4.4829 lS1596.9318 1208.4829 m392.9318 4.4829 lS1605.4318 1208.4829 m401.4318 4.4829 lS1613.9318 1208.4829 m409.9318 4.4829 lS1622.4318 1208.4829 m418.4318 4.4829 lS1630.9318 1208.4829 m426.9318 4.4829 lS1639.4318 1208.4829 m435.4318 4.4829 lS1647.9318 1208.4829 m443.9318 4.4829 lS1656.4318 1208.4829 m452.4318 4.4829 lS1664.9318 1208.4829 m460.9318 4.4829 lS1673.4318 1208.4829 m469.4318 4.4829 lS1681.9318 1208.4829 m477.9318 4.4829 lS1690.4318 1208.4829 m486.4318 4.4829 lS1698.9318 1208.4829 m494.9318 4.4829 lS1707.4318 1208.4829 m503.4318 4.4829 lS1715.9318 1208.4829 m511.9318 4.4829 lS1724.4318 1208.4829 m520.4318 4.4829 lS1732.9318 1208.4829 m528.9318 4.4829 lS1741.4318 1208.4829 m537.4318 4.4829 lS1749.9318 1208.4829 m545.9318 4.4829 lS1758.4318 1208.4829 m554.4318 4.4829 lS1766.9318 1208.4829 m562.9318 4.4829 lS1775.4318 1208.4829 m571.4318 4.4829 lS1783.9318 1208.4829 m579.9318 4.4829 lS1792.4318 1208.4829 m588.4318 4.4829 lS1800.9318 1208.4829 m596.9318 4.4829 lS1809.4318 1208.4829 m605.4318 4.4829 lS1817.9318 1208.4829 m613.9318 4.4829 lS1826.4318 1208.4829 m622.4318 4.4829 lS1834.9318 1208.4829 m630.9318 4.4829 lS1843.4318 1208.4829 m639.4318 4.4829 lS1851.9318 1208.4829 m647.9318 4.4829 lS1860.4318 1208.4829 m656.4318 4.4829 lS1868.9318 1208.4829 m664.9318 4.4829 lS1877.4318 1208.4829 m673.4318 4.4829 lS1885.9318 1208.4829 m681.9318 4.4829 lS1894.4318 1208.4829 m690.4318 4.4829 lS1902.9318 1208.4829 m698.9318 4.4829 lS1911.4318 1208.4829 m707.4318 4.4829 lS1919.9318 1208.4829 m715.9318 4.4829 lS1928.4318 1208.4829 m724.4318 4.4829 lS1936.9318 1208.4829 m732.9318 4.4829 lS1945.4318 1208.4829 m741.4318 4.4829 lS1953.9318 1208.4829 m749.9318 4.4829 lS1962.4318 1208.4829 m758.4318 4.4829 lS1970.9318 1208.4829 m766.9318 4.4829 lS1979.4318 1208.4829 m775.4318 4.4829 lS1987.9318 1208.4829 m783.9318 4.4829 lS1996.4318 1208.4829 m792.4318 4.4829 lS2004.9318 1208.4829 m800.9318 4.4829 lS2013.4318 1208.4829 m809.4318 4.4829 lS2021.9318 1208.4829 m817.9318 4.4829 lS2030.4318 1208.4829 m826.4318 4.4829 lS2038.9318 1208.4829 m834.9318 4.4829 lS2047.4318 1208.4829 m843.4318 4.4829 lS2055.9318 1208.4829 m851.9318 4.4829 lS2064.4318 1208.4829 m860.4318 4.4829 lS2072.9318 1208.4829 m868.9318 4.4829 lS2081.4318 1208.4829 m877.4318 4.4829 lS2089.9318 1208.4829 m885.9318 4.4829 lS2098.4318 1208.4829 m894.4318 4.4829 lS2106.9318 1208.4829 m902.9318 4.4829 lS2115.4318 1208.4829 m911.4318 4.4829 lS2123.9318 1208.4829 m919.9318 4.4829 lS2132.4318 1208.4829 m928.4318 4.4829 lS2140.9318 1208.4829 m936.9318 4.4829 lS2149.4318 1208.4829 m945.4318 4.4829 lS2157.9318 1208.4829 m953.9318 4.4829 lS2166.4318 1208.4829 m962.4318 4.4829 lS2174.9318 1208.4829 m970.9318 4.4829 lS2183.4318 1208.4829 m979.4318 4.4829 lS2191.9318 1208.4829 m987.9318 4.4829 lS2200.4318 1208.4829 m996.4318 4.4829 lS2208.9318 1208.4829 m1004.9318 4.4829 lS2217.4318 1208.4829 m1013.4318 4.4829 lS2225.9318 1208.4829 m1021.9318 4.4829 lS2234.4318 1208.4829 m1030.4318 4.4829 lS2242.9318 1208.4829 m1038.9318 4.4829 lS2251.4318 1208.4829 m1047.4318 4.4829 lS2259.9318 1208.4829 m1055.9318 4.4829 lS2268.4318 1208.4829 m1064.4318 4.4829 lS2276.9318 1208.4829 m1072.9318 4.4829 lS2285.4318 1208.4829 m1081.4318 4.4829 lS2293.9318 1208.4829 m1089.9318 4.4829 lS2302.4318 1208.4829 m1098.4318 4.4829 lS2310.9318 1208.4829 m1106.9318 4.4829 lS2319.4318 1208.4829 m1115.4318 4.4829 lS2327.9318 1208.4829 m1123.9318 4.4829 lS2336.4318 1208.4829 m1132.4318 4.4829 lS2344.9318 1208.4829 m1140.9318 4.4829 lS2353.4318 1208.4829 m1149.4318 4.4829 lS2361.9318 1208.4829 m1157.9318 4.4829 lS1157.8485 4.4829 mS2361.8485 1208.4829 mS2370.3485 1208.4829 m1166.3485 4.4829 lS2378.8485 1208.4829 m1174.8485 4.4829 lS2387.3485 1208.4829 m1183.3485 4.4829 lS2395.8485 1208.4829 m1191.8485 4.4829 lS2404.3485 1208.4829 m1200.3485 4.4829 lS2412.8485 1208.4829 m1208.8485 4.4829 lS2421.3485 1208.4829 m1217.3485 4.4829 lS2429.8485 1208.4829 m1225.8485 4.4829 lS2438.3485 1208.4829 m1234.3485 4.4829 lS2446.8485 1208.4829 m1242.8485 4.4829 lS2455.3485 1208.4829 m1251.3485 4.4829 lS2463.8485 1208.4829 m1259.8485 4.4829 lS2472.3485 1208.4829 m1268.3485 4.4829 lS1268.2652 4.4829 mS2472.2652 1208.4829 mS2480.7652 1208.4829 m1276.7652 4.4829 lS2489.2652 1208.4829 m1285.2652 4.4829 lS2497.7652 1208.4829 m1293.7652 4.4829 lS2506.2652 1208.4829 m1302.2652 4.4829 lS2514.7652 1208.4829 m1310.7652 4.4829 lS2523.2652 1208.4829 m1319.2652 4.4829 lS2531.7652 1208.4829 m1327.7652 4.4829 lS2540.2652 1208.4829 m1336.2652 4.4829 lS2548.7652 1208.4829 m1344.7652 4.4829 lS2557.2652 1208.4829 m1353.2652 4.4829 lS2565.7652 1208.4829 m1361.7652 4.4829 lS2574.2652 1208.4829 m1370.2652 4.4829 lS2582.7652 1208.4829 m1378.7652 4.4829 lS994.9318 893.4829 mS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Parquet Floor)(Parquet Floor) 3.85 3.85 75.85 75.85 [(0 O 0 R 0.26 0.497 0.75 0 k 0.26 0.497 0.75 0 K) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR37.6 6.1 m37.6 10.598 L19.6 10.598 L19.6 6.1 L37.6 6.1 Ls73.6 6.1 m73.6 10.598 L55.6 10.598 L55.6 6.1 L73.6 6.1 Ls19.6 24.1 m19.6 28.598 L1.6 28.598 L1.6 24.1 L19.6 24.1 Ls55.6 24.1 m55.6 28.598 L37.6 28.598 L37.6 24.1 L55.6 24.1 Ls82.6 24.1 m82.6 28.598 L73.6 28.598 L73.6 24.1 L82.6 24.1 Ls37.6 42.1 m37.6 46.598 L19.6 46.598 L19.6 42.1 L37.6 42.1 Ls73.6 42.1 m73.6 46.598 L55.6 46.598 L55.6 42.1 L73.6 42.1 Ls19.6 60.1 m19.6 64.598 L1.6 64.598 L1.6 60.1 L19.6 60.1 Ls55.6 60.1 m55.6 64.598 L37.6 64.598 L37.6 60.1 L55.6 60.1 Ls82.6 60.1 m82.6 64.598 L73.6 64.598 L73.6 60.1 L82.6 60.1 Ls37.6 15.098 m37.6 19.598 L19.6 19.598 L19.6 15.098 L37.6 15.098 Ls73.6 15.098 m73.6 19.598 L55.6 19.598 L55.6 15.098 L73.6 15.098 Ls19.6 33.098 m19.6 37.598 L1.6 37.598 L1.6 33.098 L19.6 33.098 Ls55.6 33.098 m55.6 37.598 L37.6 37.598 L37.6 33.098 L55.6 33.098 Ls82.6 33.098 m82.6 37.598 L73.6 37.598 L73.6 33.098 L82.6 33.098 Ls37.6 51.098 m37.6 55.598 L19.6 55.598 L19.6 51.098 L37.6 51.098 Ls73.6 51.098 m73.6 55.598 L55.6 55.598 L55.6 51.098 L73.6 51.098 Ls19.6 69.098 m19.6 73.598 L1.6 73.598 L1.6 69.098 L19.6 69.098 Ls55.6 69.098 m55.6 73.598 L37.6 73.598 L37.6 69.098 L55.6 69.098 Ls82.6 69.098 m82.6 73.598 L73.6 73.598 L73.6 69.098 L82.6 69.098 Ls15.1 19.598 m10.6 19.598 L10.6 1.6 L15.1 1.6 L15.1 19.598 Ls51.1 19.598 m46.6 19.598 L46.6 1.6 L51.1 1.6 L51.1 19.598 Ls33.1 37.598 m28.6 37.598 L28.6 19.6 L33.1 19.6 L33.1 37.598 Ls69.1 37.598 m64.6 37.598 L64.6 19.6 L69.1 19.6 L69.1 37.598 Ls15.1 55.598 m10.6 55.598 L10.6 37.6 L15.1 37.6 L15.1 55.598 Ls51.1 55.598 m46.6 55.598 L46.6 37.6 L51.1 37.6 L51.1 55.598 Ls33.1 73.598 m28.6 73.598 L28.6 55.6 L33.1 55.6 L33.1 73.598 Ls69.1 73.598 m64.6 73.598 L64.6 55.6 L69.1 55.6 L69.1 73.598 Ls15.1 82.598 m10.6 82.598 L10.6 73.6 L15.1 73.6 L15.1 82.598 Ls51.1 82.598 m46.6 82.598 L46.6 73.6 L51.1 73.6 L51.1 82.598 Ls19.6 19.598 m15.1 19.598 L15.1 1.6 L19.6 1.6 L19.6 19.598 Ls55.6 19.598 m51.1 19.598 L51.1 1.6 L55.6 1.6 L55.6 19.598 Ls37.6 37.598 m33.1 37.598 L33.1 19.6 L37.6 19.6 L37.6 37.598 Ls73.6 37.598 m69.1 37.598 L69.1 19.6 L73.6 19.6 L73.6 37.598 Ls19.6 55.598 m15.1 55.598 L15.1 37.6 L19.6 37.6 L19.6 55.598 Ls55.6 55.598 m51.1 55.598 L51.1 37.6 L55.6 37.6 L55.6 55.598 Ls37.6 73.598 m33.1 73.598 L33.1 55.6 L37.6 55.6 L37.6 73.598 Ls73.6 73.598 m69.1 73.598 L69.1 55.6 L73.6 55.6 L73.6 73.598 Ls19.6 82.598 m15.1 82.598 L15.1 73.6 L19.6 73.6 L19.6 82.598 Ls55.6 82.598 m51.1 82.598 L51.1 73.6 L55.6 73.6 L55.6 82.598 Ls6.1 19.598 m1.6 19.598 L1.6 1.6 L6.1 1.6 L6.1 19.598 Ls42.1 19.598 m37.6 19.598 L37.6 1.6 L42.1 1.6 L42.1 19.598 Ls78.1 19.598 m73.6 19.598 L73.6 1.6 L78.1 1.6 L78.1 19.598 Ls24.1 37.598 m19.6 37.598 L19.6 19.6 L24.1 19.6 L24.1 37.598 Ls60.1 37.598 m55.6 37.598 L55.6 19.6 L60.1 19.6 L60.1 37.598 Ls6.1 55.598 m1.6 55.598 L1.6 37.6 L6.1 37.6 L6.1 55.598 Ls42.1 55.598 m37.6 55.598 L37.6 37.6 L42.1 37.6 L42.1 55.598 Ls78.1 55.598 m73.6 55.598 L73.6 37.6 L78.1 37.6 L78.1 55.598 Ls24.1 73.598 m19.6 73.598 L19.6 55.6 L24.1 55.6 L24.1 73.598 Ls60.1 73.598 m55.6 73.598 L55.6 55.6 L60.1 55.6 L60.1 73.598 Ls6.1 82.598 m1.6 82.598 L1.6 73.6 L6.1 73.6 L6.1 82.598 Ls42.1 82.598 m37.6 82.598 L37.6 73.6 L42.1 73.6 L42.1 82.598 Ls78.1 82.598 m73.6 82.598 L73.6 73.6 L78.1 73.6 L78.1 82.598 Ls37.6 1.6 m37.6 6.098 L19.6 6.098 L19.6 1.6 L37.6 1.6 Ls73.6 1.6 m73.6 6.098 L55.6 6.098 L55.6 1.6 L73.6 1.6 Ls19.6 19.6 m19.6 24.098 L1.6 24.098 L1.6 19.6 L19.6 19.6 Ls55.6 19.6 m55.6 24.098 L37.6 24.098 L37.6 19.6 L55.6 19.6 Ls82.6 19.6 m82.6 24.098 L73.6 24.098 L73.6 19.6 L82.6 19.6 Ls37.6 37.6 m37.6 42.098 L19.6 42.098 L19.6 37.6 L37.6 37.6 Ls73.6 37.6 m73.6 42.098 L55.6 42.098 L55.6 37.6 L73.6 37.6 Ls19.6 55.6 m19.6 60.098 L1.6 60.098 L1.6 55.6 L19.6 55.6 Ls55.6 55.6 m55.6 60.098 L37.6 60.098 L37.6 55.6 L55.6 55.6 Ls82.6 55.6 m82.6 60.098 L73.6 60.098 L73.6 55.6 L82.6 55.6 Ls37.6 73.6 m37.6 78.098 L19.6 78.098 L19.6 73.6 L37.6 73.6 Ls73.6 73.6 m73.6 78.098 L55.6 78.098 L55.6 73.6 L73.6 73.6 Ls%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Waves-Transparent)(Waves-Transparent) 4 5.89 113.125 31.693 [%AI3_Tile(0 O 0 R 1 0 0.35 0 k 1 0 0.35 0 K) @(%AI6_BeginPatternLayer800 Ar2 J 0 j 1.5 w 4 M []0 d%AI3_Note:0 D0 XR113.125 12.602 m106.95 12.602 102.306 13.907 99.484 14.73 c96.664 15.553 92.018 16.858 85.844 16.858 c79.67 16.858 75.024 15.553 72.203 14.73 c69.382 13.906 64.737 12.602 58.562 12.602 c52.388 12.602 47.743 13.907 44.922 14.73 c42.101 15.553 37.455 16.858 31.281 16.858 c25.107 16.858 20.461 15.553 17.641 14.73 c14.819 13.907 10.174 12.602 4 12.602 cS113.125 8.301 m106.95 8.301 102.306 9.606 99.484 10.429 c96.664 11.252 92.018 12.557 85.844 12.557 c79.67 12.557 75.024 11.252 72.203 10.429 c69.382 9.606 64.737 8.301 58.562 8.301 c52.388 8.301 47.743 9.606 44.922 10.429 c42.101 11.252 37.455 12.557 31.281 12.557 c25.107 12.557 20.461 11.252 17.641 10.429 c14.819 9.606 10.174 8.301 4 8.301 cS113.125 4 m106.95 4 102.306 5.305 99.484 6.128 c96.664 6.951 92.018 8.256 85.844 8.256 c79.67 8.256 75.024 6.951 72.203 6.128 c69.382 5.305 64.737 4 58.562 4 c52.388 4 47.743 5.305 44.922 6.128 c42.101 6.951 37.455 8.256 31.281 8.256 c25.107 8.256 20.461 6.951 17.641 6.128 c14.819 5.305 10.174 4 4 4 cS113.125 29.805 m106.95 29.805 102.306 31.11 99.484 31.933 c96.664 32.756 92.018 34.061 85.844 34.061 c79.67 34.061 75.024 32.756 72.203 31.933 c69.382 31.109 64.737 29.805 58.562 29.805 c52.388 29.805 47.743 31.11 44.922 31.933 c42.101 32.756 37.455 34.061 31.281 34.061 c25.107 34.061 20.461 32.756 17.641 31.933 c14.819 31.11 10.174 29.805 4 29.805 cS113.125 25.504 m106.95 25.504 102.306 26.809 99.484 27.632 c96.664 28.455 92.018 29.76 85.844 29.76 c79.67 29.76 75.024 28.455 72.203 27.632 c69.382 26.809 64.737 25.504 58.562 25.504 c52.388 25.504 47.743 26.809 44.922 27.632 c42.101 28.455 37.455 29.76 31.281 29.76 c25.107 29.76 20.461 28.455 17.641 27.632 c14.819 26.809 10.174 25.504 4 25.504 cS113.125 21.203 m106.95 21.203 102.306 22.508 99.484 23.331 c96.664 24.154 92.018 25.459 85.844 25.459 c79.67 25.459 75.024 24.154 72.203 23.331 c69.382 22.508 64.737 21.203 58.562 21.203 c52.388 21.203 47.743 22.508 44.922 23.331 c42.101 24.154 37.455 25.459 31.281 25.459 c25.107 25.459 20.461 24.154 17.641 23.331 c14.819 22.508 10.174 21.203 4 21.203 cS113.125 16.902 m106.95 16.902 102.306 18.207 99.484 19.03 c96.664 19.853 92.018 21.158 85.844 21.158 c79.67 21.158 75.024 19.853 72.203 19.03 c69.382 18.207 64.737 16.902 58.562 16.902 c52.388 16.902 47.743 18.207 44.922 19.03 c42.101 19.853 37.455 21.158 31.281 21.158 c25.107 21.158 20.461 19.853 17.641 19.03 c14.819 18.207 10.174 16.902 4 16.902 cS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D0 XR8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp7 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Green & Blue)(Green & Blue) 0 2 Bd[<99999A9A9B9B9B9C9C9D9D9D9E9E9F9F9FA0A0A1A1A1A2A2A3A3A3A4A4A5A5A5A6A6A7A7A7A8A8A9A9A9AAAAABABABACACADADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B9B9B9BABABBBBBBBCBCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9C9C9CACACBCBCBCCCCCDCDCDCECECFCFCFD0D0D1D1D1D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDDDDDDDEDEDFDFDFE0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F5F6F6F7F7F7F8F8F9F9F9FAFAFBFBFBFCFCFDFDFDFEFEFFFF><000102020304050506070808090A0B0B0C0D0E0E0F101111121314141516171718191A1A1B1C1D1D1E1F20202122232324252626272829292A2B2C2C2D2E2F2F303132323334353536373838393A3B3B3C3D3E3E3F404141424344444546474748494A4A4B4C4D4D4E4F50505152535354555656575859595A5B5C5C5D5E5F5F606162626364656566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F80808182828384858586878888898A8B8B8C8D8E8E8F909191929394949596979798999A9A9B9C9D9D9E9FA0A0A1A2A3A3A4A5A6A6A7A8A9A9AAABACACADAEAFAFB0B1B2B2B3B4B5B5B6B7B8B8B9BABBBBBCBDBEBEBF><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br[1 0.75 0 0 1 50 100 %_Bs0.6 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Purple, Red & Yellow)(Purple, Red & Yellow) 0 3 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A><CCCCCCCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D4D4D4D4D5D5D5D5D5D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDCDCDCDCDCDDDDDDDDDDDEDEDEDEDFDFDFDFDFE0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E3E3E3E3E4E4E4E4E4E5E5E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E9E9E9E9E9EAEAEAEAEAEBEBEBEBEBECECECECECEDEDEDEDEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFDFDFDFDFDFEFEFEFEFEFFFFFF>01 %_Br<E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E5E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBECECECECECECECECECEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFFFFFFFFFF><00010203040405060708090A0B0C0C0D0E0F10111213141415161718191A1B1C1D1D1E1F20212223242525262728292A2B2C2D2D2E2F30313233343535363738393A3B3C3D3D3E3F40414243444545464748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5E5E5F60616263646566666768696A6B6C6D6E6E6F70717273747576767778797A7B7C7D7E7F7F80818283848586878788898A8B8C8D8E8F8F90919293949596979798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFAFB0B1B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C8C9CACBCC>01 %_Br[0 0.04 1 0 1 50 100 %_Bs0 1 0.8 0 1 50 50 %_Bs0.9 0.9 0 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Steel Bar)(Steel Bar) 0 3 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br[0 0 50 100 %_Bs1 0 50 70 %_Bs0 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (White & Purple Radial)(White & Purple Radial) 1 2 Bd[<8C8C8B8B8A898988888787868685858483838282818180807F7F7E7D7D7C7C7B7B7A7A7978787777767675757474737272717170706F6F6E6D6D6C6C6B6B6A6A6969686767666665656464636262616160605F5F5E5E5D5C5C5B5B5A5A5959585757565655555454535352515150504F4F4E4E4D4C4C4B4B4A4A4949484847464645454444434342414140403F3F3E3E3D3D3C3B3B3A3A3939383837363635353434333332323130302F2F2E2E2D2D2C2B2B2A2A2929282827272625252424232322222120201F1F1E1E1D1D1C1C1B1A1A1919181817171615151414131312121111100F0F0E0E0D0D0C0C0B0A0A090908080707060605040403030202010100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>001 %_Br[0.55 1 0 0 1 50 10 %_Bs0 0 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 4 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 Au1 Ap0 O0.9 g800 Ar0 J 0 j 0.65 w 4 M []0 d%AI3_Note:0 D0 XR461.75 404.4167 m461.75 472.9167 L353.25 472.9167 L353.25 404.4167 L461.75 404.4167 Lf277.25 404.1667 m277.25 472.6667 L192.75 472.6667 L192.75 404.1667 L277.25 404.1667 Lf0 R0 G442.75 515.5 m442.75 567 L232.75 567 L232.75 515.5 L442.75 515.5 Lb0 To1 0 0 1 320.75 494.9167 0 TpTP-51.2875 0 Td0 Tr0 g1 w/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(time-implementation) Tx (\r) TX TO0 To1 0 0 1 147.25 536.9167 0 TpTP-10.7974 0 Td0 Tr(time) Tx (\r) TX TO0 R0 G0.65 w466.75 459.4167 m466.75 531.9167 L183.75 531.9167 L183.75 459.4167 L466.75 459.4167 Ls0 Ap353.25 404.4167 m353.25 472.9167 l461.75 472.9167 l461.75 404.4167 lS0 To1 0 0 1 159.25 423.9167 0 TpTP-26.9934 0 Td0 Tr0 O0 g1 w(format-out) Tx (\r) TX TO0 To1 0 0 1 234 423.9167 0 TpTP-26.9934 0 Td0 Tr(format-out) Tx (\r) TX TO0 To1 0 0 1 316.25 423.9167 0 TpTP-13.4967 0 Td0 Tr(dylan) Tx (\r) TX TO0 To1 0 0 1 407.5 423.9167 0 TpTP-13.4967 0 Td0 Tr(dylan) Tx (\r) TX TO1 Ap0 R0 G2 w232.4167 554.4167 m127.75 554.4167 L127.75 445.4167 L491.25 445.4167 L491.25 554.4167 L442.4167 554.4167 LS232.4167 554.4167 mS442.4167 554.4167 mS0 Ap127.75 404.4167 m127.75 436.9167 l192.75 436.9167 lS277.25 436.9167 m286.75 436.9167 l286.75 404.4167 lS294.75 404.4167 m294.75 436.9167 l353.25 436.9167 lS462.25 436.9167 m491.25 436.9167 l491.25 404.4167 lS0.5 w228.4167 523.75 mS0.65 w192.75 404.4167 m192.75 472.9167 l277.25 472.9167 l277.25 404.4167 l277.25 472.9167 lS236.75 496.0834 mS0.5 w260.2292 482.7709 mS0 To1 0 0 1 335.25 540 0 TpTP-10.7974 0 Td0 Tr0 O0 g1 w(time) Tx (\r) TX TO1 Ap0 R0 G2 w232.5 552.5 mS442.5 552.5 mSULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 185 504 367 C
36 72 576 720 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "199" 213
%%Page: "200" 214
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(200) 72 677.67 T
0 F
(Chapter 13) 95.75 677.67 T
(Libraries and Modules) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define module time-implementation) 108 642 T
5 F
(// External interface) 118.8 631 T
4 F
(use time;) 118.8 620 T
5 F
(// Substrate modules) 118.8 609 T
4 F
(use sixty-unit;) 118.8 598 T
(use format-out;) 118.8 587 T
(use dylan;) 118.8 576 T
(end module time-implementation;) 108 565 T
1 11 Q
(Her) 108 544.67 T
(e, because the) 126.57 544.67 T
4 10 Q
(sixty-unit) 196.4 544.67 T
1 11 Q
( module is an internal interface, we for) 256.4 544.67 T
(go the for-) 443.99 544.67 T
-0 (mality of cr) 108 530.67 P
-0 (eating a separate implementation module; we simply) 163.51 530.67 P
4 10 Q
-0.01 (export) 424.94 530.67 P
1 11 Q
-0 ( the de\336-) 460.94 530.67 P
(nitions that we expect to be used by other modules within the library) 108 516.67 T
(. This) 442.31 516.67 T
(appr) 108 502.67 T
(oach is per) 130.87 502.67 T
(haps a short-sighted one. If later we want the) 183.05 502.67 T
4 10 Q
(sixty-unit) 405.17 502.67 T
1 11 Q
( func-) 465.17 502.67 T
(tionality to be available to another library) 108 488.67 T
(, we will be faced with r) 308.58 488.67 T
(eor) 424.95 488.67 T
(ganizing its) 440.38 488.67 T
(module de\336nitions \050as we shall see in Section 13.8, page 209\051. Even within a) 108 474.67 T
(library) 108 460.67 T
(, it is good practice to or) 139.57 460.67 T
(ganize modules as interface and implementation.) 256.35 460.67 T
(Notice the distinction between the way that we handled the external) 135 446.67 T
4 10 Q
(time) 469.79 446.67 T
1 11 Q
(interface, and the shortcut we took with) 108 432.67 T
4 10 Q
(sixty-unit) 304.62 432.67 T
1 11 Q
(. Although the) 364.62 432.67 T
4 10 Q
(sixty-unit) 437.79 432.67 T
1 11 Q
-0.05 (module will) 108 418.67 P
0 F
-0.05 (de\336ne) 169.72 418.67 P
4 10 Q
-0.11 (encode-total-seconds) 198.4 418.67 P
1 11 Q
-0.05 (, which is part of the) 318.4 418.67 P
4 10 Q
-0.11 (time) 420.24 418.67 P
1 11 Q
-0.05 ( interface, it) 444.24 418.67 P
-0.23 (does not) 108 404.67 P
0 F
-0.23 (export) 151.69 404.67 P
4 10 Q
-0.51 (encode-total-seconds) 182.31 404.67 P
1 11 Q
-0.23 (; rather) 302.31 404.67 P
-0.23 (, it) 336.21 404.67 P
0 F
-0.23 (uses) 350.79 404.67 P
1 F
-0.23 ( the) 369.74 404.67 P
4 10 Q
-0.51 (time) 390.03 404.67 P
1 11 Q
-0.23 ( interface module,) 414.03 404.67 P
(which) 108 390.67 T
0 F
(cr) 140.81 390.67 T
(eated) 149.37 390.67 T
4 10 Q
(encode-total-seconds) 174.73 390.67 T
1 11 Q
( \050without de\336ning that function\051. Because) 294.73 390.67 T
4 10 Q
(sixty-unit) 108 376.67 T
1 11 Q
( uses) 168 376.67 T
4 10 Q
(time) 194.73 376.67 T
1 11 Q
(, the name) 218.73 376.67 T
4 10 Q
(encode-total-seconds) 271.87 376.67 T
1 11 Q
( is the same object in) 391.87 376.67 T
-0.48 (both modules. Ef) 108 362.67 P
-0.48 (fectively) 189.75 362.67 P
-0.48 (,) 229.93 362.67 P
4 10 Q
-1.06 (encode-total-seconds) 234.95 362.67 P
1 11 Q
-0.48 ( is owned by the) 354.95 362.67 P
4 10 Q
-1.06 (time) 435.17 362.67 P
1 11 Q
-0.48 ( module,) 459.17 362.67 P
(although it is de\336ned by the) 108 348.67 T
4 10 Q
(sixty-unit) 247.49 348.67 T
1 11 Q
( module.) 307.49 348.67 T
(This or) 135 334.67 T
(ganization of the external interface may appear odd at \336rst, but it) 168.91 334.67 T
(r) 108 320.67 T
(educes duplication that would otherwise have to occur: If) 112.15 320.67 T
4 10 Q
(sixty-unit) 394.86 320.67 T
1 11 Q
( exported) 454.86 320.67 T
4 10 Q
(encode-total-seconds) 108 306.67 T
1 11 Q
(, then, for it to be visible at the interface of the library) 228 306.67 T
(,) 484.7 306.67 T
(either the) 108 292.67 T
4 10 Q
(sixty-unit) 156.83 292.67 T
1 11 Q
( module would have to be exported fr) 216.83 292.67 T
(om the library as an) 400.98 292.67 T
-0.25 (interface \050which export is undesirable, because the) 108 278.67 P
4 10 Q
-0.55 (sixty-unit) 354.29 278.67 P
1 11 Q
-0.25 ( module has other) 414.29 278.67 P
(exports that ar) 108 264.67 T
(e not intended to be visible outside the library\051, or the) 178.38 264.67 T
4 10 Q
(time) 442.39 264.67 T
1 11 Q
( inter-) 466.39 264.67 T
(face module would have to use) 108 250.67 T
4 10 Q
(sixty-unit) 262.64 250.67 T
1 11 Q
( and to r) 322.64 250.67 T
(e-export) 363.25 250.67 T
4 10 Q
(encode-total-) 406.42 250.67 T
(seconds) 108 236.67 T
1 11 Q
(. The) 150 236.67 T
4 10 Q
(create) 176.66 236.67 T
1 11 Q
( clause pr) 212.66 236.67 T
(ovides the cleaner solution of allowing a name to) 259.07 236.67 T
(be exported fr) 108 222.67 T
(om only the one interface module, de\336ned in a separate implemen-) 176.15 222.67 T
-0.45 (tation module \050without exposing the implementation module\051, and used by many) 108 208.67 P
(client modules.) 108 194.67 T
(Dylan r) 135 180.67 T
(equir) 171.63 180.67 T
(es that all the variables exported via the) 197.04 180.67 T
4 10 Q
(create) 392.84 180.67 T
1 11 Q
( clause be) 428.84 180.67 T
-0.13 (de\336ned by some module in the same library; however) 108 166.67 P
-0.13 (, they can be de\336ned in any) 368.77 166.67 P
(module, and the interface de\336nitions can be spr) 108 152.67 T
(ead over several implementation) 339.21 152.67 T
(modules. The compiler will verify that the interface is implemented completely) 108 138.67 T
(,) 491.59 138.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "200" 214
%%Page: "201" 215
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.4 Module definition) 428.37 677.67 T
2 F
(201) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(even if its implementation is spr) 108 640.67 T
(ead over several modules, by checking when the) 264.17 640.67 T
(library is compiled that each cr) 108 626.67 T
(eated name has a de\336nition.) 258.17 626.67 T
(The) 135 612.67 T
4 10 Q
(sixty-unit) 156.16 612.67 T
1 11 Q
( module exports the class) 216.16 612.67 T
4 10 Q
(<sixty-unit>) 341.78 612.67 T
1 11 Q
(, because) 413.78 612.67 T
4 10 Q
(time-) 460.34 612.67 T
(implementation) 108 598.67 T
1 11 Q
( will subclass that class. The) 192 598.67 T
4 10 Q
(sixty-unit) 330.72 598.67 T
1 11 Q
( module also exports) 390.72 598.67 T
(the generic functions) 108 584.67 T
4 10 Q
(total-seconds) 212.43 584.67 T
1 11 Q
(, and) 290.43 584.67 T
4 10 Q
(decode-total-seconds) 317.31 584.67 T
1 11 Q
(. The export) 437.31 584.67 T
(of) 108 570.67 T
4 10 Q
(total-seconds) 120.42 570.67 T
1 11 Q
( might seem surprising at \336rst, because, in many object-) 198.42 570.67 T
(oriented languages, access to a class includes access to all the slots of a class. In) 108 556.67 T
(Dylan, slots ar) 108 542.67 T
(e simply methods on generic functions and names in the module) 177.75 542.67 T
(namespace; hence, the functions must be exported if slot access fr) 108 528.67 T
(om outside the) 425.16 528.67 T
(module is to be allowed. Note that exporting) 108 514.67 T
4 10 Q
(total-seconds) 328.46 514.67 T
1 11 Q
( allows other mod-) 406.46 514.67 T
(ules only to get the curr) 108 500.67 T
(ent value of the) 223.07 500.67 T
4 10 Q
(total-seconds) 301.07 500.67 T
1 11 Q
( slot. T) 379.07 500.67 T
(o allow other mod-) 410.51 500.67 T
(ules also to set the slot value, we would have to export) 108 486.67 T
4 10 Q
(total-seconds-setter) 376.18 486.67 T
1 11 Q
(.) 495.37 486.67 T
(It is not necessary to export the init keywor) 108 472.67 T
(d) 317.83 472.67 T
4 10 Q
(total-seconds:) 327.3 472.67 T
1 11 Q
(, which allows the) 411.3 472.67 T
(initial value of the slot to be set when objects ar) 108 458.67 T
(e cr) 337.42 458.67 T
(eated. Keywor) 354.47 458.67 T
(ds, or symbols,) 425.01 458.67 T
(all exist in a single global namespace that is separate fr) 108 444.67 T
(om module variables.) 373.17 444.67 T
(Br) 108 180.67 T
(eaking out the) 118.87 180.67 T
4 10 Q
(sixty-unit) 191.2 180.67 T
1 11 Q
( substrate to a separate module cr) 251.2 180.67 T
(eates a slightly) 414.44 180.67 T
(mor) 108 166.67 T
(e complicated str) 127.87 166.67 T
(uctur) 210.72 166.67 T
(e to our diagram, as shown in Figur) 236.6 166.67 T
(e 13.4.) 410.17 166.67 T
-0.32 (In Figur) 135 152.67 P
-0.32 (e 13.4, we show the de\336nitions of) 173.75 152.67 P
4 10 Q
-0.7 (sixty-unit) 335.73 152.67 P
1 11 Q
-0.32 ( in a separate module.) 395.73 152.67 P
(The) 108 138.67 T
4 10 Q
(sixty-unit) 129.16 138.67 T
1 11 Q
( module is a client of) 189.16 138.67 T
4 10 Q
(dylan) 292.78 138.67 T
1 11 Q
(, an interface and implementation of) 322.78 138.67 T
2 F
-0.3 (Comparison with C++:) 141 410.67 P
1 F
-0.3 ( Dylan modules pr) 254.85 410.67 P
-0.3 (ovide access contr) 344.88 410.67 P
-0.3 (ol similar) 432.08 410.67 P
(to that pr) 141 396.67 T
(ovided by the) 185.92 396.67 T
4 10 Q
(private:) 255.76 396.67 T
1 11 Q
( and) 303.76 396.67 T
4 10 Q
(public:) 327.89 396.67 T
1 11 Q
( keywor) 369.89 396.67 T
(ds in C++) 409.46 396.67 T
(classes, but Dylan access contr) 141 382.67 T
(ol is done at the module, rather than at) 288.52 382.67 T
-0.42 (the class, level. Dylan has no equivalent to) 141 368.67 P
4 10 Q
-0.92 (protected:) 346.17 368.67 P
1 11 Q
-0.42 ( access contr) 406.17 368.67 P
-0.42 (ol,) 465.72 368.67 P
(in that a class that subclasses a class fr) 141 354.67 T
(om another module does) 325.61 354.67 T
0 F
(not) 450.05 354.67 T
1 F
(have access to slots or other generic functions on its super) 141 340.67 T
(class fr) 421.53 340.67 T
(om) 455.01 340.67 T
(the other module, unless they ar) 141 326.67 T
(e explicitly exported fr) 297.76 326.67 T
(om that) 407.52 326.67 T
(module.) 141 312.67 T
(Dylan does support multiple interfaces, however; dif) 168 298.67 T
(fer) 425.11 298.67 T
(ent) 438.19 298.67 T
-0.44 (levels of access can be pr) 141 284.67 P
-0.44 (ovided by having mor) 258.82 284.67 P
-0.44 (e than one interface) 365.79 284.67 P
(module, each supplying the access needed for the particular inter-) 141 270.67 T
(face.) 141 256.67 T
(One way to think of Dylan access contr) 168 242.67 T
(ol in C++ terms is) 357.95 242.67 T
(that all de\336nitions in a module ar) 141 228.67 T
(e) 302.88 228.67 T
4 10 Q
(friend) 310.89 228.67 T
1 11 Q
(s of all classes in the) 346.89 228.67 T
(module, and the exported de\336nitions of the module ar) 141 214.67 T
(e) 404.88 214.67 T
4 10 Q
(public) 412.9 214.67 T
1 11 Q
(.) 448.9 214.67 T
135 423.88 135 207.13 2 L
V
0.25 H
0 Z
N
486 423.88 486 207.13 2 L
V
N
134.88 424 486.12 424 2 L
V
N
134.88 207 486.12 207 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "201" 215
%%Page: "202" 216
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(202) 72 677.67 T
0 F
(Chapter 13) 95.75 677.67 T
(Libraries and Modules) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(de\336nitions used by) 108 417.67 T
4 10 Q
(time-implementation) 203.84 417.67 T
1 11 Q
( \050that is,) 317.84 417.67 T
4 10 Q
(time-implementation) 359.45 417.67 T
1 11 Q
( is a) 473.45 417.67 T
(client of) 108 403.67 T
4 10 Q
(sixty-unit) 149.71 403.67 T
1 11 Q
(\051, and an implementation of part of the interface cr) 209.71 403.67 T
(eated by) 454.85 403.67 T
4 10 Q
(time) 108 389.67 T
1 11 Q
(.) 132 389.67 T
3 15 Q
(13.5  Librar) 108 350.01 T
(y de\336nition) 173.76 350.01 T
1 11 Q
(W) 108 329.67 T
(e can now give the de\336nition of the library:) 117.99 329.67 T
4 9 Q
(define library time) 108 309.01 T
5 F
(// Interface module) 118.8 298.01 T
4 F
(export time;) 118.8 287.01 T
5 F
(// Substrate libraries) 118.8 276.01 T
4 F
(use format-out;) 118.8 265.01 T
(use dylan;) 118.8 254.01 T
(end library time;) 108 243.01 T
1 11 Q
(In the pr) 108 222.67 T
(eceding de\336nition, we declar) 149.62 222.67 T
(e that the interface to our library is de\336ned) 290.09 222.67 T
(by the) 108 208.67 T
4 10 Q
(time) 140.96 208.67 T
1 11 Q
( interface module. By exporting that module, we make all the) 164.96 208.67 T
(exported names fr) 108 194.67 T
(om that module accessible to clients of this library) 196.34 194.67 T
(. W) 438.19 194.67 T
(e also) 453.67 194.67 T
-0.27 (declar) 108 180.67 P
-0.27 (e that the) 137.72 180.67 P
4 10 Q
-0.59 (time) 184.76 180.67 P
1 11 Q
-0.27 ( library r) 208.76 180.67 P
-0.27 (elies on the) 250.65 180.67 P
4 10 Q
-0.59 (format-out) 307.35 180.67 P
1 11 Q
-0.27 ( and) 367.35 180.67 P
4 10 Q
-0.59 (dylan) 390.93 180.67 P
1 11 Q
-0.27 ( libraries \050that is,) 420.93 180.67 P
(that those libraries have interface modules of which our modules will be clients\051.) 108 166.67 T
(Notice that no mention is made of the) 108 152.67 T
4 10 Q
(time-implementation) 294.14 152.67 T
1 11 Q
(, or) 408.14 152.67 T
4 10 Q
(sixty-unit) 426.74 152.67 T
108 437.01 504 445 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 13.4) 195.79 448.33 T
8 F
(Inter) 254.15 448.33 T
(nal modules of) 274.42 448.33 T
4 F
(time) 342.23 448.33 T
8 F
( libr) 366.23 448.33 T
(ar) 382.23 448.33 T
(y) 391.42 448.33 T
(.) 395.42 448.33 T
108 461 504 648 C
117 465 495 646 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 125 432 491 601 366 169 123 471 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f13-4.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(r) 6.0%%For: (brent) (harlequin)%%Title: (f13-4 .eps)%%CreationDate: (6/11/96) (11:31 AM)%%BoundingBox: 125 432 491 601%%HiResBoundingBox: 125.25 432.9167 490.75 600.325%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.0%AI3_ColorUsage: Black&White%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set)%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 ()%AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 29 31 581 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 1 0%AI5_TargetResolution: 300%AI5_NumLayers: 4%AI5_OpenToView: 178 652 3 826 581 18 0 1 3 40%AI5_OpenViewLayers: 7777%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 23 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_ax neg 0 rmoveto	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 17 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin		/initialize	{ 		Adobe_ColorImage_AI6 begin		Adobe_ColorImage_AI6		{			dup type /arraytype eq			{				dup xcheck				{					bind				} if			} if			pop pop		} forall	} def	/terminate { end } def		currentdict /Adobe_ColorImage_AI6_Vars known not	{		/Adobe_ColorImage_AI6_Vars 14 dict def	} if		Adobe_ColorImage_AI6_Vars begin		/channelcount 0 def		/sourcecount 0 def		/sourcearray 4 array def		/plateindex -1 def		/XIMask 0 def		/XIBinary 0 def		/XIChannelCount 0 def		/XIBitsPerPixel 0 def		/XIImageHeight 0 def		/XIImageWidth 0 def		/XIImageMatrix null def		/XIBuffer null def		/XIDataProc null def end		/WalkRGBString null def	/WalkCMYKString null def		/StuffRGBIntoGrayString null def	/RGBToGrayImageProc null def	/StuffCMYKIntoGrayString null def	/CMYKToGrayImageProc null def	/ColorImageCompositeEmulator null def		/SeparateCMYKImageProc null def		/FourEqual null def	/TestPlateIndex null def		currentdict /_colorimage known not	{		/colorimage where		{			/colorimage get /_colorimage exch def		}		{			/_colorimage null def		} ifelse	} if		/_currenttransfer systemdict /currenttransfer get def		/colorimage null def	/XI null def			/WalkRGBString	{		0 3 index			dup length 1 sub 0 3 3 -1 roll		{			3 getinterval { } forall				5 index exec				3 index		} for				 5 { pop } repeat		} def			/WalkCMYKString	{		0 3 index			dup length 1 sub 0 4 3 -1 roll		{			4 getinterval { } forall						6 index exec						3 index					} for				5 { pop } repeat			} def			/StuffRGBIntoGrayString	{		.11 mul exch				.59 mul add exch				.3 mul add				cvi 3 copy put				pop 1 add	} def			/RGBToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin 			sourcearray 0 get exec			dup length 3 idiv string			dup 3 1 roll 						/StuffRGBIntoGrayString load exch			WalkRGBString	 end	} def			/StuffCMYKIntoGrayString	{		exch .11 mul add				exch .59 mul add				exch .3 mul add				dup 255 gt { pop 255 } if				255 exch sub cvi 3 copy put				pop 1 add	} def			/CMYKToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin			sourcearray 0 get exec			dup length 4 idiv string			dup 3 1 roll 						/StuffCMYKIntoGrayString load exch			WalkCMYKString	 end	} def			/ColorImageCompositeEmulator	{		pop true eq		{			Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat		}		{			Adobe_ColorImage_AI6_Vars /channelcount get 1 ne			{				Adobe_ColorImage_AI6_Vars begin					sourcearray 0 3 -1 roll put									channelcount 3 eq 					{ 						/RGBToGrayImageProc 					}					{ 						/CMYKToGrayImageProc					} ifelse					load			 end			} if			image		} ifelse	} def			/SeparateCMYKImageProc	{			Adobe_ColorImage_AI6_Vars begin				sourcecount 0 ne			{				sourcearray plateindex get exec			}			{							sourcearray 0 get exec								dup length 4 idiv string								0 2 index								plateindex 4 2 index length 1 sub				{					get 255 exch sub										3 copy put pop 1 add										2 index				} for					pop pop exch pop			} ifelse	 end	} def				/FourEqual	{		4 index ne		{			pop pop pop false		}		{			4 index ne			{				pop pop false			}			{				4 index ne				{					pop false				}				{					4 index eq				} ifelse			} ifelse		} ifelse	} def			/TestPlateIndex	{		Adobe_ColorImage_AI6_Vars begin			/plateindex -1 def				/setcmykcolor where			{				pop				gsave				1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub				grestore					1 0 0 0 FourEqual 				{ 					/plateindex 0 def				}				{					0 1 0 0 FourEqual					{ 						/plateindex 1 def					}					{						0 0 1 0 FourEqual						{							/plateindex 2 def						}						{							0 0 0 1 FourEqual							{ 								/plateindex 3 def							}							{								0 0 0 0 FourEqual								{									/plateindex 5 def								} if							} ifelse						} ifelse					} ifelse				} ifelse				pop pop pop pop			} if			plateindex	 end	} def			/colorimage	{		Adobe_ColorImage_AI6_Vars begin			/channelcount 1 index def			/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def				4 sourcecount add index dup 			8 eq exch 1 eq or not	 end				{			/_colorimage load null ne			{				_colorimage			}			{				Adobe_ColorImage_AI6_Vars /sourcecount get				7 add { pop } repeat			} ifelse		}		{			dup 3 eq			TestPlateIndex			dup -1 eq exch 5 eq or or			{				/_colorimage load null eq				{					ColorImageCompositeEmulator				}				{					dup 1 eq					{						pop pop image					}					{						Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							gsave														0 _currenttransfer exec							1 _currenttransfer exec							eq							{ 0 _currenttransfer exec 0.5 lt }							{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse														{ { pop 0 } } { { pop 1 } } ifelse							systemdict /settransfer get exec						} if												_colorimage												Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							grestore						} if					} ifelse				} ifelse			}			{				dup 1 eq				{					pop pop					image				}				{					pop pop						Adobe_ColorImage_AI6_Vars begin						sourcecount -1 0						{										exch sourcearray 3 1 roll put						} for							/SeparateCMYKImageProc load				 end						systemdict /image get exec				} ifelse			} ifelse		} ifelse	} def		/XI	{		Adobe_ColorImage_AI6_Vars begin			gsave			/XIMask exch 0 ne def			/XIBinary exch 0 ne def			pop			pop			/XIChannelCount exch def			/XIBitsPerPixel exch def			/XIImageHeight exch def			/XIImageWidth exch def			pop pop pop pop			/XIImageMatrix exch def						XIBitsPerPixel 1 eq			{				XIImageWidth 8 div ceiling cvi			}			{				XIImageWidth XIChannelCount mul			} ifelse			/XIBuffer exch string def						XIBinary			{				/XIDataProc { currentfile XIBuffer readstring pop } def				currentfile 128 string readline pop pop			}			{				/XIDataProc { currentfile XIBuffer readhexstring pop } def			} ifelse						0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale						XIMask			{				XIImageWidth XIImageHeight				false				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								/_lp /null ddef				_fc				/_lp /imagemask ddef								imagemask			}			{				XIImageWidth XIImageHeight				XIBitsPerPixel				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								XIChannelCount 1 eq				{										gsave					0 setgray										image										grestore				}				{					false					XIChannelCount					colorimage				} ifelse			} ifelse			grestore	 end	} def	end%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Bricks)(Bricks) 2.565 5.19 74.565 77.19 [(0 O 0 R 0.3 0.85 0.85 0 k 0.3 0.85 0.85 0 K) @_ &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR1.6 73.6 m75.6 73.6 lS1.6 66.399 m75.6 66.399 LS1.6 59.199 m75.6 59.199 LS1.6 51.998 m75.6 51.998 LS1.6 44.798 m75.6 44.798 LS1.6 37.597 m75.6 37.597 LS1.6 30.397 m75.6 30.397 LS1.6 23.196 m75.6 23.196 LS1.6 15.996 m75.6 15.996 LS1.6 8.796 m75.6 8.796 LS70.975 73.6 m70.975 66.412 lS56.575 73.6 m56.575 66.412 LS42.175 73.6 m42.175 66.412 LS27.775 73.6 m27.775 66.412 LS13.375 73.6 m13.375 66.412 LS70.975 59.162 m70.975 51.975 lS56.575 59.162 m56.575 51.975 LS42.175 59.162 m42.175 51.975 LS27.775 59.162 m27.775 51.975 LS13.375 59.162 m13.375 51.975 LS70.975 44.787 m70.975 37.6 lS56.575 44.787 m56.575 37.6 LS42.175 44.787 m42.175 37.6 LS27.775 44.787 m27.775 37.6 LS13.375 44.787 m13.375 37.6 LS70.975 30.412 m70.975 23.225 lS56.575 30.412 m56.575 23.225 LS42.175 30.412 m42.175 23.225 LS27.775 30.412 m27.775 23.225 LS13.375 30.412 m13.375 23.225 LS70.975 15.975 m70.975 8.787 lS56.575 15.975 m56.575 8.787 LS42.175 15.975 m42.175 8.787 LS27.775 15.975 m27.775 8.787 LS13.375 15.975 m13.375 8.787 LS63.762 8.787 m63.762 1.6 LS49.362 8.787 m49.362 1.6 LS34.962 8.787 m34.962 1.6 LS20.562 8.787 m20.562 1.6 LS6.162 8.787 m6.162 1.6 lS63.762 23.225 m63.762 16.037 LS49.362 23.225 m49.362 16.037 LS34.962 23.225 m34.962 16.037 LS20.562 23.225 m20.562 16.037 LS6.162 23.225 m6.162 16.037 lS63.762 37.6 m63.762 30.412 LS49.362 37.6 m49.362 30.412 LS20.562 37.6 m20.562 30.412 LS6.162 37.6 m6.162 30.412 lS63.762 51.975 m63.762 44.787 LS49.362 51.975 m49.362 44.787 LS34.962 51.975 m34.962 44.787 LS20.562 51.975 m20.562 44.787 LS6.162 51.975 m6.162 44.787 lS63.762 66.412 m63.762 59.225 LS49.362 66.412 m49.362 59.225 LS34.962 66.412 m34.962 59.225 LS20.562 66.412 m20.562 59.225 LS6.162 66.412 m6.162 59.225 lS63.762 80.849 m63.762 73.662 LS49.362 80.849 m49.362 73.662 LS34.962 80.849 m34.962 73.662 LS20.562 80.849 m20.562 73.662 LS6.162 80.849 m6.162 73.662 lS34.962 37.6 m34.962 30.412 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Confetti)(Confetti) 4.85 3.617 76.85 75.617 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR10.6 64.867 m7.85 62.867 lS9.1 8.617 m6.85 6.867 lS78.1 68.617 m74.85 67.867 lS76.85 56.867 m74.35 55.117 lS79.6 51.617 m76.6 51.617 lS76.35 44.117 m73.6 45.867 lS78.6 35.867 m76.6 34.367 lS76.1 23.867 m73.35 26.117 lS78.1 12.867 m73.85 13.617 lS68.35 14.617 m66.1 12.867 lS76.6 30.617 m73.6 30.617 lS62.85 58.117 m60.956 60.941 lS32.85 59.617 m31.196 62.181 lS47.891 64.061 m49.744 66.742 lS72.814 2.769 m73.928 5.729 lS67.976 2.633 m67.35 5.909 lS61.85 27.617 m59.956 30.441 lS53.504 56.053 m51.85 58.617 lS52.762 1.779 m52.876 4.776 lS45.391 5.311 m47.244 7.992 lS37.062 3.375 m35.639 5.43 lS55.165 34.828 m57.518 37.491 lS20.795 3.242 m22.12 5.193 lS14.097 4.747 m15.008 8.965 lS9.736 1.91 m8.073 4.225 lS31.891 5.573 m32.005 8.571 lS12.1 70.367 m15.6 68.867 lS9.35 54.867 m9.6 58.117 lS12.85 31.867 m14.35 28.117 lS10.1 37.367 m12.35 41.117 lS34.1 71.117 m31.85 68.617 lS38.35 71.117 m41.6 68.367 lS55.1 71.117 m58.35 69.117 lS57.35 65.117 m55.35 61.867 lS64.35 66.367 m69.35 68.617 lS71.85 62.867 m69.35 61.117 lS23.6 70.867 m23.6 67.867 lS20.6 65.867 m17.35 65.367 lS24.85 61.367 m25.35 58.117 lS25.85 65.867 m29.35 66.617 lS14.1 54.117 m16.85 56.117 lS12.35 11.617 m12.6 15.617 lS12.1 19.867 m14.35 22.367 lS26.1 9.867 m23.6 13.367 lS34.6 47.117 m32.1 45.367 lS62.6 41.867 m59.85 43.367 lS31.6 35.617 m27.85 36.367 lS36.35 26.117 m34.35 24.617 lS33.85 14.117 m31.1 16.367 lS37.1 9.867 m35.1 11.117 lS34.35 20.867 m31.35 20.867 lS44.6 56.617 m42.1 54.867 lS47.35 51.367 m44.35 51.367 lS44.1 43.867 m41.35 45.617 lS43.35 33.117 m42.6 30.617 lS43.85 23.617 m41.1 25.867 lS44.35 15.617 m42.35 16.867 lS67.823 31.1 m64.823 31.1 lS27.1 32.617 m29.6 30.867 lS31.85 55.117 m34.85 55.117 lS19.6 40.867 m22.1 39.117 lS16.85 35.617 m19.85 35.617 lS20.1 28.117 m22.85 29.867 lS52.1 42.617 m54.484 44.178 lS52.437 50.146 m54.821 48.325 lS59.572 54.133 m59.35 51.117 lS50.185 10.055 m53.234 9.928 lS51.187 15.896 m53.571 14.075 lS58.322 19.883 m59.445 16.823 lS53.1 32.117 m50.6 30.367 lS52.85 24.617 m49.6 25.617 lS61.85 9.117 m59.1 10.867 lS69.35 34.617 m66.6 36.367 lS67.1 23.617 m65.1 22.117 lS24.435 46.055 m27.484 45.928 lS25.437 51.896 m27.821 50.075 lS62.6 47.117 m65.321 46.575 lS19.85 19.867 m20.35 16.617 lS21.85 21.867 m25.35 22.617 lS37.6 62.867 m41.6 62.117 lS38.323 42.1 m38.823 38.6 lS69.35 52.617 m66.85 53.867 lS14.85 62.117 m18.1 59.367 lS9.6 46.117 m7.1 44.367 lS20.6 51.617 m18.6 50.117 lS46.141 70.811 m47.994 73.492 lS69.391 40.561 m71.244 43.242 lS38.641 49.311 m39.35 52.117 lS25.141 16.811 m25.85 19.617 lS36.6 32.867 m34.6 31.367 lS6.1 68.617 m2.85 67.867 lS4.85 56.867 m2.35 55.117 lS7.6 51.617 m4.6 51.617 lS6.6 35.867 m4.6 34.367 lS6.1 12.867 m1.85 13.617 lS4.6 30.617 m1.6 30.617 lS72.814 74.769 m73.928 77.729 lS67.976 74.633 m67.35 77.909 lS52.762 73.779 m52.876 76.776 lS37.062 75.375 m35.639 77.43 lS20.795 75.242 m22.12 77.193 lS9.736 73.91 m8.073 76.225 lS10.1 23.617 m6.35 24.367 lS73.217 18.276 m71.323 21.1 lS28.823 39.6 m29.505 42.389 lS49.6 38.617 m47.6 37.117 lS60.323 73.6 m62.323 76.6 lS60.323 1.6 m62.323 4.6 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Cross Texture)(Cross Texture) 1 1 58.6 58.6 [(0 O 0 R 1 1 0.2 0 k 1 1 0.2 0 K) @_ &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR53.5 55 m56.5 55 lS39.1 55 m42.1 55 lS24.7 55 m27.7 55 lS10.3 55 m13.3 55 lS46.3 47.8 m49.3 47.8 lS31.9 47.8 m34.9 47.8 lS17.5 47.8 m20.5 47.8 lS3.1 47.8 m6.1 47.8 lS53.5 40.6 m56.5 40.6 lS39.1 40.6 m42.1 40.6 lS24.7 40.6 m27.7 40.6 lS10.3 40.6 m13.3 40.6 lS46.3 33.4 m49.3 33.4 lS31.9 33.4 m34.9 33.4 lS17.5 33.4 m20.5 33.4 lS3.1 33.4 m6.1 33.4 lS53.5 26.2 m56.5 26.2 lS39.1 26.2 m42.1 26.2 lS24.7 26.2 m27.7 26.2 lS10.3 26.2 m13.3 26.2 lS46.3 19 m49.3 19 lS31.9 19 m34.9 19 lS17.5 19 m20.5 19 lS3.1 19 m6.1 19 lS53.5 11.8 m56.5 11.8 lS39.1 11.8 m42.1 11.8 lS24.7 11.8 m27.7 11.8 lS10.3 11.8 m13.3 11.8 lS46.3 4.6 m49.3 4.6 lS31.9 4.6 m34.9 4.6 lS17.5 4.6 m20.5 4.6 lS3.1 4.6 m6.1 4.6 lS55 56.5 m55 53.5 lS40.6 56.5 m40.6 53.5 lS26.2 56.5 m26.2 53.5 lS11.8 56.5 m11.8 53.5 lS47.8 49.3 m47.8 46.3 lS33.4 49.3 m33.4 46.3 lS19 49.3 m19 46.3 lS4.6 49.3 m4.6 46.3 lS55 42.1 m55 39.1 lS40.6 42.1 m40.6 39.1 lS26.2 42.1 m26.2 39.1 lS11.8 42.1 m11.8 39.1 lS47.8 34.9 m47.8 31.9 lS33.4 34.9 m33.4 31.9 lS19 34.9 m19 31.9 lS4.6 34.9 m4.6 31.9 lS55 27.7 m55 24.7 lS40.6 27.7 m40.6 24.7 lS26.2 27.7 m26.2 24.7 lS11.8 27.7 m11.8 24.7 lS47.8 20.5 m47.8 17.5 lS33.4 20.5 m33.4 17.5 lS19 20.5 m19 17.5 lS4.6 20.5 m4.6 17.5 lS55 13.3 m55 10.3 lS40.6 13.3 m40.6 10.3 lS26.2 13.3 m26.2 10.3 lS11.8 13.3 m11.8 10.3 lS47.8 6.1 m47.8 3.1 lS33.4 6.1 m33.4 3.1 lS19 6.1 m19 3.1 lS4.6 6.1 m4.6 3.1 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Master diagonal)(Master diagonal) 798.9318 33.4829 1412.9318 827.4829 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer300 Ar0 J 0 j 0.5 w 3.8636 M []0 d%AI3_Note:0 D0 XR1205.9318 1208.4829 m1.9318 4.4829 lS1214.4318 1208.4829 m10.4318 4.4829 lS1222.9318 1208.4829 m18.9318 4.4829 lS1231.4318 1208.4829 m27.4318 4.4829 lS1239.9318 1208.4829 m35.9318 4.4829 lS1248.4318 1208.4829 m44.4318 4.4829 lS1256.9318 1208.4829 m52.9318 4.4829 lS1265.4318 1208.4829 m61.4318 4.4829 lS1273.9318 1208.4829 m69.9318 4.4829 lS1282.4318 1208.4829 m78.4318 4.4829 lS1290.9318 1208.4829 m86.9318 4.4829 lS1299.4318 1208.4829 m95.4318 4.4829 lS1307.9318 1208.4829 m103.9318 4.4829 lS1316.4318 1208.4829 m112.4318 4.4829 lS1324.9318 1208.4829 m120.9318 4.4829 lS1333.4318 1208.4829 m129.4318 4.4829 lS1341.9318 1208.4829 m137.9318 4.4829 lS1350.4318 1208.4829 m146.4318 4.4829 lS1358.9318 1208.4829 m154.9318 4.4829 lS1367.4318 1208.4829 m163.4318 4.4829 lS1375.9318 1208.4829 m171.9318 4.4829 lS1384.4318 1208.4829 m180.4318 4.4829 lS1392.9318 1208.4829 m188.9318 4.4829 lS1401.4318 1208.4829 m197.4318 4.4829 lS1409.9318 1208.4829 m205.9318 4.4829 lS1418.4318 1208.4829 m214.4318 4.4829 lS1426.9318 1208.4829 m222.9318 4.4829 lS1435.4318 1208.4829 m231.4318 4.4829 lS1443.9318 1208.4829 m239.9318 4.4829 lS1452.4318 1208.4829 m248.4318 4.4829 lS1460.9318 1208.4829 m256.9318 4.4829 lS1469.4318 1208.4829 m265.4318 4.4829 lS1477.9318 1208.4829 m273.9318 4.4829 lS1486.4318 1208.4829 m282.4318 4.4829 lS1494.9318 1208.4829 m290.9318 4.4829 lS1503.4318 1208.4829 m299.4318 4.4829 lS1511.9318 1208.4829 m307.9318 4.4829 lS1520.4318 1208.4829 m316.4318 4.4829 lS1528.9318 1208.4829 m324.9318 4.4829 lS1537.4318 1208.4829 m333.4318 4.4829 lS1545.9318 1208.4829 m341.9318 4.4829 lS1554.4318 1208.4829 m350.4318 4.4829 lS1562.9318 1208.4829 m358.9318 4.4829 lS1571.4318 1208.4829 m367.4318 4.4829 lS1579.9318 1208.4829 m375.9318 4.4829 lS1588.4318 1208.4829 m384.4318 4.4829 lS1596.9318 1208.4829 m392.9318 4.4829 lS1605.4318 1208.4829 m401.4318 4.4829 lS1613.9318 1208.4829 m409.9318 4.4829 lS1622.4318 1208.4829 m418.4318 4.4829 lS1630.9318 1208.4829 m426.9318 4.4829 lS1639.4318 1208.4829 m435.4318 4.4829 lS1647.9318 1208.4829 m443.9318 4.4829 lS1656.4318 1208.4829 m452.4318 4.4829 lS1664.9318 1208.4829 m460.9318 4.4829 lS1673.4318 1208.4829 m469.4318 4.4829 lS1681.9318 1208.4829 m477.9318 4.4829 lS1690.4318 1208.4829 m486.4318 4.4829 lS1698.9318 1208.4829 m494.9318 4.4829 lS1707.4318 1208.4829 m503.4318 4.4829 lS1715.9318 1208.4829 m511.9318 4.4829 lS1724.4318 1208.4829 m520.4318 4.4829 lS1732.9318 1208.4829 m528.9318 4.4829 lS1741.4318 1208.4829 m537.4318 4.4829 lS1749.9318 1208.4829 m545.9318 4.4829 lS1758.4318 1208.4829 m554.4318 4.4829 lS1766.9318 1208.4829 m562.9318 4.4829 lS1775.4318 1208.4829 m571.4318 4.4829 lS1783.9318 1208.4829 m579.9318 4.4829 lS1792.4318 1208.4829 m588.4318 4.4829 lS1800.9318 1208.4829 m596.9318 4.4829 lS1809.4318 1208.4829 m605.4318 4.4829 lS1817.9318 1208.4829 m613.9318 4.4829 lS1826.4318 1208.4829 m622.4318 4.4829 lS1834.9318 1208.4829 m630.9318 4.4829 lS1843.4318 1208.4829 m639.4318 4.4829 lS1851.9318 1208.4829 m647.9318 4.4829 lS1860.4318 1208.4829 m656.4318 4.4829 lS1868.9318 1208.4829 m664.9318 4.4829 lS1877.4318 1208.4829 m673.4318 4.4829 lS1885.9318 1208.4829 m681.9318 4.4829 lS1894.4318 1208.4829 m690.4318 4.4829 lS1902.9318 1208.4829 m698.9318 4.4829 lS1911.4318 1208.4829 m707.4318 4.4829 lS1919.9318 1208.4829 m715.9318 4.4829 lS1928.4318 1208.4829 m724.4318 4.4829 lS1936.9318 1208.4829 m732.9318 4.4829 lS1945.4318 1208.4829 m741.4318 4.4829 lS1953.9318 1208.4829 m749.9318 4.4829 lS1962.4318 1208.4829 m758.4318 4.4829 lS1970.9318 1208.4829 m766.9318 4.4829 lS1979.4318 1208.4829 m775.4318 4.4829 lS1987.9318 1208.4829 m783.9318 4.4829 lS1996.4318 1208.4829 m792.4318 4.4829 lS2004.9318 1208.4829 m800.9318 4.4829 lS2013.4318 1208.4829 m809.4318 4.4829 lS2021.9318 1208.4829 m817.9318 4.4829 lS2030.4318 1208.4829 m826.4318 4.4829 lS2038.9318 1208.4829 m834.9318 4.4829 lS2047.4318 1208.4829 m843.4318 4.4829 lS2055.9318 1208.4829 m851.9318 4.4829 lS2064.4318 1208.4829 m860.4318 4.4829 lS2072.9318 1208.4829 m868.9318 4.4829 lS2081.4318 1208.4829 m877.4318 4.4829 lS2089.9318 1208.4829 m885.9318 4.4829 lS2098.4318 1208.4829 m894.4318 4.4829 lS2106.9318 1208.4829 m902.9318 4.4829 lS2115.4318 1208.4829 m911.4318 4.4829 lS2123.9318 1208.4829 m919.9318 4.4829 lS2132.4318 1208.4829 m928.4318 4.4829 lS2140.9318 1208.4829 m936.9318 4.4829 lS2149.4318 1208.4829 m945.4318 4.4829 lS2157.9318 1208.4829 m953.9318 4.4829 lS2166.4318 1208.4829 m962.4318 4.4829 lS2174.9318 1208.4829 m970.9318 4.4829 lS2183.4318 1208.4829 m979.4318 4.4829 lS2191.9318 1208.4829 m987.9318 4.4829 lS2200.4318 1208.4829 m996.4318 4.4829 lS2208.9318 1208.4829 m1004.9318 4.4829 lS2217.4318 1208.4829 m1013.4318 4.4829 lS2225.9318 1208.4829 m1021.9318 4.4829 lS2234.4318 1208.4829 m1030.4318 4.4829 lS2242.9318 1208.4829 m1038.9318 4.4829 lS2251.4318 1208.4829 m1047.4318 4.4829 lS2259.9318 1208.4829 m1055.9318 4.4829 lS2268.4318 1208.4829 m1064.4318 4.4829 lS2276.9318 1208.4829 m1072.9318 4.4829 lS2285.4318 1208.4829 m1081.4318 4.4829 lS2293.9318 1208.4829 m1089.9318 4.4829 lS2302.4318 1208.4829 m1098.4318 4.4829 lS2310.9318 1208.4829 m1106.9318 4.4829 lS2319.4318 1208.4829 m1115.4318 4.4829 lS2327.9318 1208.4829 m1123.9318 4.4829 lS2336.4318 1208.4829 m1132.4318 4.4829 lS2344.9318 1208.4829 m1140.9318 4.4829 lS2353.4318 1208.4829 m1149.4318 4.4829 lS2361.9318 1208.4829 m1157.9318 4.4829 lS1157.8485 4.4829 mS2361.8485 1208.4829 mS2370.3485 1208.4829 m1166.3485 4.4829 lS2378.8485 1208.4829 m1174.8485 4.4829 lS2387.3485 1208.4829 m1183.3485 4.4829 lS2395.8485 1208.4829 m1191.8485 4.4829 lS2404.3485 1208.4829 m1200.3485 4.4829 lS2412.8485 1208.4829 m1208.8485 4.4829 lS2421.3485 1208.4829 m1217.3485 4.4829 lS2429.8485 1208.4829 m1225.8485 4.4829 lS2438.3485 1208.4829 m1234.3485 4.4829 lS2446.8485 1208.4829 m1242.8485 4.4829 lS2455.3485 1208.4829 m1251.3485 4.4829 lS2463.8485 1208.4829 m1259.8485 4.4829 lS2472.3485 1208.4829 m1268.3485 4.4829 lS1268.2652 4.4829 mS2472.2652 1208.4829 mS2480.7652 1208.4829 m1276.7652 4.4829 lS2489.2652 1208.4829 m1285.2652 4.4829 lS2497.7652 1208.4829 m1293.7652 4.4829 lS2506.2652 1208.4829 m1302.2652 4.4829 lS2514.7652 1208.4829 m1310.7652 4.4829 lS2523.2652 1208.4829 m1319.2652 4.4829 lS2531.7652 1208.4829 m1327.7652 4.4829 lS2540.2652 1208.4829 m1336.2652 4.4829 lS2548.7652 1208.4829 m1344.7652 4.4829 lS2557.2652 1208.4829 m1353.2652 4.4829 lS2565.7652 1208.4829 m1361.7652 4.4829 lS2574.2652 1208.4829 m1370.2652 4.4829 lS2582.7652 1208.4829 m1378.7652 4.4829 lS994.9318 893.4829 mS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Parquet Floor)(Parquet Floor) 3.85 3.85 75.85 75.85 [(0 O 0 R 0.26 0.497 0.75 0 k 0.26 0.497 0.75 0 K) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR37.6 6.1 m37.6 10.598 L19.6 10.598 L19.6 6.1 L37.6 6.1 Ls73.6 6.1 m73.6 10.598 L55.6 10.598 L55.6 6.1 L73.6 6.1 Ls19.6 24.1 m19.6 28.598 L1.6 28.598 L1.6 24.1 L19.6 24.1 Ls55.6 24.1 m55.6 28.598 L37.6 28.598 L37.6 24.1 L55.6 24.1 Ls82.6 24.1 m82.6 28.598 L73.6 28.598 L73.6 24.1 L82.6 24.1 Ls37.6 42.1 m37.6 46.598 L19.6 46.598 L19.6 42.1 L37.6 42.1 Ls73.6 42.1 m73.6 46.598 L55.6 46.598 L55.6 42.1 L73.6 42.1 Ls19.6 60.1 m19.6 64.598 L1.6 64.598 L1.6 60.1 L19.6 60.1 Ls55.6 60.1 m55.6 64.598 L37.6 64.598 L37.6 60.1 L55.6 60.1 Ls82.6 60.1 m82.6 64.598 L73.6 64.598 L73.6 60.1 L82.6 60.1 Ls37.6 15.098 m37.6 19.598 L19.6 19.598 L19.6 15.098 L37.6 15.098 Ls73.6 15.098 m73.6 19.598 L55.6 19.598 L55.6 15.098 L73.6 15.098 Ls19.6 33.098 m19.6 37.598 L1.6 37.598 L1.6 33.098 L19.6 33.098 Ls55.6 33.098 m55.6 37.598 L37.6 37.598 L37.6 33.098 L55.6 33.098 Ls82.6 33.098 m82.6 37.598 L73.6 37.598 L73.6 33.098 L82.6 33.098 Ls37.6 51.098 m37.6 55.598 L19.6 55.598 L19.6 51.098 L37.6 51.098 Ls73.6 51.098 m73.6 55.598 L55.6 55.598 L55.6 51.098 L73.6 51.098 Ls19.6 69.098 m19.6 73.598 L1.6 73.598 L1.6 69.098 L19.6 69.098 Ls55.6 69.098 m55.6 73.598 L37.6 73.598 L37.6 69.098 L55.6 69.098 Ls82.6 69.098 m82.6 73.598 L73.6 73.598 L73.6 69.098 L82.6 69.098 Ls15.1 19.598 m10.6 19.598 L10.6 1.6 L15.1 1.6 L15.1 19.598 Ls51.1 19.598 m46.6 19.598 L46.6 1.6 L51.1 1.6 L51.1 19.598 Ls33.1 37.598 m28.6 37.598 L28.6 19.6 L33.1 19.6 L33.1 37.598 Ls69.1 37.598 m64.6 37.598 L64.6 19.6 L69.1 19.6 L69.1 37.598 Ls15.1 55.598 m10.6 55.598 L10.6 37.6 L15.1 37.6 L15.1 55.598 Ls51.1 55.598 m46.6 55.598 L46.6 37.6 L51.1 37.6 L51.1 55.598 Ls33.1 73.598 m28.6 73.598 L28.6 55.6 L33.1 55.6 L33.1 73.598 Ls69.1 73.598 m64.6 73.598 L64.6 55.6 L69.1 55.6 L69.1 73.598 Ls15.1 82.598 m10.6 82.598 L10.6 73.6 L15.1 73.6 L15.1 82.598 Ls51.1 82.598 m46.6 82.598 L46.6 73.6 L51.1 73.6 L51.1 82.598 Ls19.6 19.598 m15.1 19.598 L15.1 1.6 L19.6 1.6 L19.6 19.598 Ls55.6 19.598 m51.1 19.598 L51.1 1.6 L55.6 1.6 L55.6 19.598 Ls37.6 37.598 m33.1 37.598 L33.1 19.6 L37.6 19.6 L37.6 37.598 Ls73.6 37.598 m69.1 37.598 L69.1 19.6 L73.6 19.6 L73.6 37.598 Ls19.6 55.598 m15.1 55.598 L15.1 37.6 L19.6 37.6 L19.6 55.598 Ls55.6 55.598 m51.1 55.598 L51.1 37.6 L55.6 37.6 L55.6 55.598 Ls37.6 73.598 m33.1 73.598 L33.1 55.6 L37.6 55.6 L37.6 73.598 Ls73.6 73.598 m69.1 73.598 L69.1 55.6 L73.6 55.6 L73.6 73.598 Ls19.6 82.598 m15.1 82.598 L15.1 73.6 L19.6 73.6 L19.6 82.598 Ls55.6 82.598 m51.1 82.598 L51.1 73.6 L55.6 73.6 L55.6 82.598 Ls6.1 19.598 m1.6 19.598 L1.6 1.6 L6.1 1.6 L6.1 19.598 Ls42.1 19.598 m37.6 19.598 L37.6 1.6 L42.1 1.6 L42.1 19.598 Ls78.1 19.598 m73.6 19.598 L73.6 1.6 L78.1 1.6 L78.1 19.598 Ls24.1 37.598 m19.6 37.598 L19.6 19.6 L24.1 19.6 L24.1 37.598 Ls60.1 37.598 m55.6 37.598 L55.6 19.6 L60.1 19.6 L60.1 37.598 Ls6.1 55.598 m1.6 55.598 L1.6 37.6 L6.1 37.6 L6.1 55.598 Ls42.1 55.598 m37.6 55.598 L37.6 37.6 L42.1 37.6 L42.1 55.598 Ls78.1 55.598 m73.6 55.598 L73.6 37.6 L78.1 37.6 L78.1 55.598 Ls24.1 73.598 m19.6 73.598 L19.6 55.6 L24.1 55.6 L24.1 73.598 Ls60.1 73.598 m55.6 73.598 L55.6 55.6 L60.1 55.6 L60.1 73.598 Ls6.1 82.598 m1.6 82.598 L1.6 73.6 L6.1 73.6 L6.1 82.598 Ls42.1 82.598 m37.6 82.598 L37.6 73.6 L42.1 73.6 L42.1 82.598 Ls78.1 82.598 m73.6 82.598 L73.6 73.6 L78.1 73.6 L78.1 82.598 Ls37.6 1.6 m37.6 6.098 L19.6 6.098 L19.6 1.6 L37.6 1.6 Ls73.6 1.6 m73.6 6.098 L55.6 6.098 L55.6 1.6 L73.6 1.6 Ls19.6 19.6 m19.6 24.098 L1.6 24.098 L1.6 19.6 L19.6 19.6 Ls55.6 19.6 m55.6 24.098 L37.6 24.098 L37.6 19.6 L55.6 19.6 Ls82.6 19.6 m82.6 24.098 L73.6 24.098 L73.6 19.6 L82.6 19.6 Ls37.6 37.6 m37.6 42.098 L19.6 42.098 L19.6 37.6 L37.6 37.6 Ls73.6 37.6 m73.6 42.098 L55.6 42.098 L55.6 37.6 L73.6 37.6 Ls19.6 55.6 m19.6 60.098 L1.6 60.098 L1.6 55.6 L19.6 55.6 Ls55.6 55.6 m55.6 60.098 L37.6 60.098 L37.6 55.6 L55.6 55.6 Ls82.6 55.6 m82.6 60.098 L73.6 60.098 L73.6 55.6 L82.6 55.6 Ls37.6 73.6 m37.6 78.098 L19.6 78.098 L19.6 73.6 L37.6 73.6 Ls73.6 73.6 m73.6 78.098 L55.6 78.098 L55.6 73.6 L73.6 73.6 Ls%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Waves-Transparent)(Waves-Transparent) 4 5.89 113.125 31.693 [%AI3_Tile(0 O 0 R 1 0 0.35 0 k 1 0 0.35 0 K) @(%AI6_BeginPatternLayer800 Ar2 J 0 j 1.5 w 4 M []0 d%AI3_Note:0 D0 XR113.125 12.602 m106.95 12.602 102.306 13.907 99.484 14.73 c96.664 15.553 92.018 16.858 85.844 16.858 c79.67 16.858 75.024 15.553 72.203 14.73 c69.382 13.906 64.737 12.602 58.562 12.602 c52.388 12.602 47.743 13.907 44.922 14.73 c42.101 15.553 37.455 16.858 31.281 16.858 c25.107 16.858 20.461 15.553 17.641 14.73 c14.819 13.907 10.174 12.602 4 12.602 cS113.125 8.301 m106.95 8.301 102.306 9.606 99.484 10.429 c96.664 11.252 92.018 12.557 85.844 12.557 c79.67 12.557 75.024 11.252 72.203 10.429 c69.382 9.606 64.737 8.301 58.562 8.301 c52.388 8.301 47.743 9.606 44.922 10.429 c42.101 11.252 37.455 12.557 31.281 12.557 c25.107 12.557 20.461 11.252 17.641 10.429 c14.819 9.606 10.174 8.301 4 8.301 cS113.125 4 m106.95 4 102.306 5.305 99.484 6.128 c96.664 6.951 92.018 8.256 85.844 8.256 c79.67 8.256 75.024 6.951 72.203 6.128 c69.382 5.305 64.737 4 58.562 4 c52.388 4 47.743 5.305 44.922 6.128 c42.101 6.951 37.455 8.256 31.281 8.256 c25.107 8.256 20.461 6.951 17.641 6.128 c14.819 5.305 10.174 4 4 4 cS113.125 29.805 m106.95 29.805 102.306 31.11 99.484 31.933 c96.664 32.756 92.018 34.061 85.844 34.061 c79.67 34.061 75.024 32.756 72.203 31.933 c69.382 31.109 64.737 29.805 58.562 29.805 c52.388 29.805 47.743 31.11 44.922 31.933 c42.101 32.756 37.455 34.061 31.281 34.061 c25.107 34.061 20.461 32.756 17.641 31.933 c14.819 31.11 10.174 29.805 4 29.805 cS113.125 25.504 m106.95 25.504 102.306 26.809 99.484 27.632 c96.664 28.455 92.018 29.76 85.844 29.76 c79.67 29.76 75.024 28.455 72.203 27.632 c69.382 26.809 64.737 25.504 58.562 25.504 c52.388 25.504 47.743 26.809 44.922 27.632 c42.101 28.455 37.455 29.76 31.281 29.76 c25.107 29.76 20.461 28.455 17.641 27.632 c14.819 26.809 10.174 25.504 4 25.504 cS113.125 21.203 m106.95 21.203 102.306 22.508 99.484 23.331 c96.664 24.154 92.018 25.459 85.844 25.459 c79.67 25.459 75.024 24.154 72.203 23.331 c69.382 22.508 64.737 21.203 58.562 21.203 c52.388 21.203 47.743 22.508 44.922 23.331 c42.101 24.154 37.455 25.459 31.281 25.459 c25.107 25.459 20.461 24.154 17.641 23.331 c14.819 22.508 10.174 21.203 4 21.203 cS113.125 16.902 m106.95 16.902 102.306 18.207 99.484 19.03 c96.664 19.853 92.018 21.158 85.844 21.158 c79.67 21.158 75.024 19.853 72.203 19.03 c69.382 18.207 64.737 16.902 58.562 16.902 c52.388 16.902 47.743 18.207 44.922 19.03 c42.101 19.853 37.455 21.158 31.281 21.158 c25.107 21.158 20.461 19.853 17.641 19.03 c14.819 18.207 10.174 16.902 4 16.902 cS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D0 XR8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp7 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Green & Blue)(Green & Blue) 0 2 Bd[<99999A9A9B9B9B9C9C9D9D9D9E9E9F9F9FA0A0A1A1A1A2A2A3A3A3A4A4A5A5A5A6A6A7A7A7A8A8A9A9A9AAAAABABABACACADADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B9B9B9BABABBBBBBBCBCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9C9C9CACACBCBCBCCCCCDCDCDCECECFCFCFD0D0D1D1D1D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDDDDDDDEDEDFDFDFE0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F5F6F6F7F7F7F8F8F9F9F9FAFAFBFBFBFCFCFDFDFDFEFEFFFF><000102020304050506070808090A0B0B0C0D0E0E0F101111121314141516171718191A1A1B1C1D1D1E1F20202122232324252626272829292A2B2C2C2D2E2F2F303132323334353536373838393A3B3B3C3D3E3E3F404141424344444546474748494A4A4B4C4D4D4E4F50505152535354555656575859595A5B5C5C5D5E5F5F606162626364656566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F80808182828384858586878888898A8B8B8C8D8E8E8F909191929394949596979798999A9A9B9C9D9D9E9FA0A0A1A2A3A3A4A5A6A6A7A8A9A9AAABACACADAEAFAFB0B1B2B2B3B4B5B5B6B7B8B8B9BABBBBBCBDBEBEBF><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br[1 0.75 0 0 1 50 100 %_Bs0.6 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Purple, Red & Yellow)(Purple, Red & Yellow) 0 3 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A><CCCCCCCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D4D4D4D4D5D5D5D5D5D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDCDCDCDCDCDDDDDDDDDDDEDEDEDEDFDFDFDFDFE0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E3E3E3E3E4E4E4E4E4E5E5E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E9E9E9E9E9EAEAEAEAEAEBEBEBEBEBECECECECECEDEDEDEDEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFDFDFDFDFDFEFEFEFEFEFFFFFF>01 %_Br<E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E5E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBECECECECECECECECECEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFFFFFFFFFF><00010203040405060708090A0B0C0C0D0E0F10111213141415161718191A1B1C1D1D1E1F20212223242525262728292A2B2C2D2D2E2F30313233343535363738393A3B3C3D3D3E3F40414243444545464748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5E5E5F60616263646566666768696A6B6C6D6E6E6F70717273747576767778797A7B7C7D7E7F7F80818283848586878788898A8B8C8D8E8F8F90919293949596979798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFAFB0B1B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C8C9CACBCC>01 %_Br[0 0.04 1 0 1 50 100 %_Bs0 1 0.8 0 1 50 50 %_Bs0.9 0.9 0 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Steel Bar)(Steel Bar) 0 3 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br[0 0 50 100 %_Bs1 0 50 70 %_Bs0 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (White & Purple Radial)(White & Purple Radial) 1 2 Bd[<8C8C8B8B8A898988888787868685858483838282818180807F7F7E7D7D7C7C7B7B7A7A7978787777767675757474737272717170706F6F6E6D6D6C6C6B6B6A6A6969686767666665656464636262616160605F5F5E5E5D5C5C5B5B5A5A5959585757565655555454535352515150504F4F4E4E4D4C4C4B4B4A4A4949484847464645454444434342414140403F3F3E3E3D3D3C3B3B3A3A3939383837363635353434333332323130302F2F2E2E2D2D2C2B2B2A2A2929282827272625252424232322222120201F1F1E1E1D1D1C1C1B1A1A1919181817171615151414131312121111100F0F0E0E0D0D0C0C0B0A0A090908080707060605040403030202010100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>001 %_Br[0.55 1 0 0 1 50 10 %_Bs0 0 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 4 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 0 0 0 0 79 128 255 Lb(Background) LnLB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Guides) LnLB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Foreground) LnLB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A1 Ap0 O0.9 g800 Ar0 J 0 j 0.65 w 4 M []0 d%AI3_Note:0 D0 XR460.25 432.9167 m460.25 501.4167 L351.75 501.4167 L351.75 432.9167 L460.25 432.9167 Lf275.75 432.9167 m275.75 501.4167 L191.25 501.4167 L191.25 432.9167 L275.75 432.9167 Lf0 R0 G441.25 548.5 m441.25 600 L231.25 600 L231.25 548.5 L441.25 548.5 Lb0 To1 0 0 1 145.75 565.4167 0 TpTP-10.7974 0 Td0 Tr0 g1 w/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(time) Tx (\r) TX TO0 Ap0 R0 G0.65 w351.75 432.9167 m351.75 501.4167 l460.25 501.4167 l460.25 432.9167 lS0 To1 0 0 1 157.75 452.4167 0 TpTP-26.9934 0 Td0 Tr0 O0 g1 w(format-out) Tx (\r) TX TO0 To1 0 0 1 234 450.9167 0 TpTP-26.9934 0 Td0 Tr(format-out) Tx (\r) TX TO0 To1 0 0 1 314.75 452.4167 0 TpTP-13.4967 0 Td0 Tr(dylan) Tx (\r) TX TO0 To1 0 0 1 405.5 452.4167 0 TpTP-13.4967 0 Td0 Tr(dylan) Tx (\r) TX TO1 Ap0 R0 G2 w230.9167 582.9167 m126.25 582.9167 L126.25 473.9167 L489.75 473.9167 L489.75 582.9167 L440.9167 582.9167 LS230.9167 582.9167 mS440.9167 582.9167 mS0 Ap126.25 432.9167 m126.25 465.4167 l191.25 465.4167 lS275.75 465.4167 m285.25 465.4167 l285.25 432.9167 lS293.25 432.9167 m293.25 465.4167 l351.75 465.4167 lS460.75 465.4167 m489.75 465.4167 l489.75 432.9167 lS0.5 w226.9167 552.25 mS0.65 w191.25 432.9167 m191.25 501.4167 l275.75 501.4167 l275.75 432.9167 l275.75 501.4167 lS235.25 524.5834 mS0.5 w258.7292 511.2709 mS0 To1 0 0 1 332.25 569.75 0 TpTP-10.7974 0 Td0 Tr0 O0 g1 w(time) Tx (\r) TX TO1 Ap0 R0 G2 w231 581 mS441 581 mS0 To1 0 0 1 278.2708 520.4584 0 TpTP-51.2875 0 Td0 Tr0 O0 g1 w(time-implementation) Tx (\r) TX TO0 R0 G0.65 w383.5833 487.7084 m383.5833 560.2084 L182.2708 560.2084 L182.2708 487.7084 L383.5833 487.7084 Ls466.6042 483.2084 m466.6042 551.7084 L374.6042 551.7084 L374.6042 483.2084 L466.6042 483.2084 Ls0 To1 0 0 1 422.6042 514.7084 0 TpTP-26.9934 0 Td0 Tr0 O0 g1 w(sixty-unit) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 461 504 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "202" 216
%%Page: "203" 217
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.6 Interchange files) 434 677.67 T
2 F
(203) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.29 (modules, because they ar) 108 640.67 P
-0.29 (e completely internal to our library and ar) 229.64 640.67 P
-0.29 (e not visible to) 431.49 640.67 P
(any clients of our library) 108 626.67 T
(.) 226.45 626.67 T
(Recall that constant and variable names, module names, and library names) 135 612.67 T
-0.26 (ar) 108 598.67 P
-0.26 (e distinct, so it is possible to have a library) 117.65 598.67 P
-0.26 (, module, and constant all of the same) 319.4 598.67 P
(name. A common convention in a library with only one interface module is to) 108 584.67 T
(give them the same name, as we have done her) 108 570.67 T
(e.) 336.77 570.67 T
-0.09 (T) 135 556.67 P
-0.09 (o build our library) 140.73 556.67 P
-0.09 (, we would need to de\336ne the library) 229.1 556.67 P
-0.09 (, de\336ne all the mod-) 407.04 556.67 P
-0.1 (ules, specify wher) 108 542.67 P
-0.1 (e and how the de\336nitions or sour) 195.21 542.67 P
-0.1 (ce r) 355.74 542.67 P
-0.1 (ecor) 372.69 542.67 P
-0.1 (ds that implement our) 393 542.67 P
(library ar) 108 528.67 T
(e to be found, specify wher) 153.19 528.67 T
(e the object code that r) 284.73 528.67 T
(esults fr) 393.51 528.67 T
(om compiling) 432.08 528.67 T
(the sour) 108 514.67 T
(ce r) 147.46 514.67 T
(ecor) 164.51 514.67 T
(ds ar) 184.81 514.67 T
(e to be stor) 208.6 514.67 T
(ed, and pr) 261.46 514.67 T
(ovide any particular instr) 311.08 514.67 T
(uctions to the) 434.68 514.67 T
(compiler r) 108 500.67 T
(egar) 158.13 500.67 T
(ding how to build the library) 179.16 500.67 T
(. The details of how to pr) 319.19 500.67 T
(ovide this) 440.6 500.67 T
(information vary fr) 108 486.67 T
(om one Dylan implementation to the next.) 201.51 486.67 T
(T) 135 472.67 T
(o use our library) 140.73 472.67 T
(, we would need to specify wher) 220.11 472.67 T
(e to \336nd the object code) 378.19 472.67 T
(and the implementation-dependent export information that allows another) 108 458.67 T
(library to use our library without access to our sour) 108 444.67 T
(ce r) 357.95 444.67 T
(ecor) 375 444.67 T
(ds. The details of this) 395.31 444.67 T
(information also depend on the Dylan implementation that we ar) 108 430.67 T
(e using.) 425.36 430.67 T
3 15 Q
(13.6  Inter) 108 271 T
(chang) 165.21 271 T
(e \336les) 201.55 271 T
1 11 Q
(Sour) 108 250.67 T
(ce r) 130.56 250.67 T
(ecor) 147.61 250.67 T
(ds in Dylan do not have to be stor) 167.92 250.67 T
(ed in \336les. Certain envir) 332.09 250.67 T
(onments) 448.56 250.67 T
(use a database for storing sour) 108 236.67 T
(ce r) 256.42 236.67 T
(ecor) 273.47 236.67 T
(ds, and a hypertextlike mechanism for) 293.78 236.67 T
(exploring them. Dylan does, however) 108 222.67 T
(, specify a portable inter) 290.56 222.67 T
(change format,) 407.42 222.67 T
(based on \336les, for exchanging Dylan sour) 108 208.67 T
(ce r) 308.85 208.67 T
(ecor) 325.9 208.67 T
(ds among Dylan) 346.2 208.67 T
(implementations.) 108 194.67 T
-0.28 (A \336le in) 135 180.67 P
2 F
-0.28 ( interchange format) 173.22 180.67 P
1 F
-0.28 ( has a header and a body) 271.04 180.67 P
-0.28 (. The header consists of) 389.25 180.67 P
(consecutive lines of keywor) 108 166.67 T
(ds and values. The body consists of Dylan sour) 242.5 166.67 T
(ce) 471 166.67 T
(r) 108 152.67 T
(ecor) 112.15 152.67 T
(ds, and is separated fr) 132.45 152.67 T
(om the header by at least one blank line. The only) 239.35 152.67 T
(r) 108 138.67 T
(equir) 112.15 138.67 T
(ed keywor) 137.56 138.67 T
(d is one to specify to what module the sour) 189.12 138.67 T
(ce r) 398.64 138.67 T
(ecor) 415.69 138.67 T
(ds in the \336le) 436 138.67 T
2 F
(Comparison with C++:) 141 396.67 T
1 F
( The library de\336nition, which names the mod-) 255.46 396.67 T
(ules exported and libraries used by a library) 141 382.67 T
(, is similar to C++ header) 354.49 382.67 T
-0.1 (\336les and includes. The main dif) 141 368.67 P
-0.1 (fer) 293.01 368.67 P
-0.1 (ence is that the Dylan development) 306.08 368.67 P
(envir) 141 354.67 T
(onment extracts the information that it needs about exported) 166.23 354.67 T
(and imported variables dir) 141 340.67 T
(ectly) 271.37 340.67 T
(, rather than r) 293.21 340.67 T
(equiring exports to be) 359.69 340.67 T
(duplicated in a set of header \336les, and r) 141 326.67 T
(equiring those header \336les to) 332.43 326.67 T
(be included in every sour) 141 312.67 T
(ce \336le that uses the imports.) 264.65 312.67 T
135 409.88 135 305.13 2 L
V
0.25 H
0 Z
N
486 409.88 486 305.13 2 L
V
N
134.88 410 486.12 410 2 L
V
N
134.88 305 486.12 305 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "203" 217
%%Page: "204" 218
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(204) 72 677.67 T
0 F
(Chapter 13) 95.75 677.67 T
(Libraries and Modules) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(belong. Each \336le contains sour) 108 640.67 T
(ce r) 255.55 640.67 T
(ecor) 272.6 640.67 T
(ds of a single module, although the sour) 292.91 640.67 T
(ce) 488.41 640.67 T
(r) 108 626.67 T
(ecor) 112.15 626.67 T
(ds of each module can be stor) 132.45 626.67 T
(ed in any number of \336les. Standar) 276.15 626.67 T
(d keywor) 440.54 626.67 T
(ds) 486.84 626.67 T
(ar) 108 612.67 T
(e also de\336ned for author) 117.65 612.67 T
(, copyright, and version, although an implementation) 236 612.67 T
(may ignor) 108 598.67 T
(e them, or may de\336ne additional keywor) 157.95 598.67 T
(ds.) 356.3 598.67 T
(So, for instance, if we wanted to publish our library sour) 135 584.67 T
(ce r) 409.27 584.67 T
(ecor) 426.32 584.67 T
(ds, we) 446.63 584.67 T
(might cr) 108 570.67 T
(eate the \336les shown in the following sections.) 148.8 570.67 T
3 15 Q
(13.7  The) 108 531 T
4 14 Q
(time-library) 164.07 531 T
3 15 Q
( \336le) 264.87 531 T
8 10 Q
(The) 205.04 491.33 T
4 9 Q
(time-library) 225.05 491.33 T
8 10 Q
( \336le:) 289.86 491.33 T
4 9 Q
(time-library.dylan) 310.98 491.33 T
8 10 Q
(.) 408.17 491.33 T
4 9 Q
(Module: dylan-user) 114 472 T
5 F
(// Library definition) 114 453 T
4 F
(define library time) 114 442 T
5 F
(// Interface module) 124.8 431 T
4 F
(export time;) 124.8 420 T
5 F
(// Substrate libraries) 124.8 409 T
4 F
(use format-out;) 124.8 398 T
(use dylan;) 124.8 387 T
(end library time;) 114 376 T
5 F
(// Interface module) 114 357 T
4 F
(define module time) 114 346 T
5 F
(// Classes) 124.8 335 T
4 F
(create <time>, <time-of-day>, <time-offset>;) 124.8 324 T
5 F
(// Generics) 124.8 313 T
4 F
(create say, encode-total-seconds;) 124.8 302 T
(end module time;) 114 291 T
5 F
(// Internal substrate module) 114 272 T
4 F
(define module sixty-unit) 114 261 T
5 F
(// External interface) 124.8 250 T
4 F
(use time;) 124.8 239 T
5 F
(// Internal interface) 124.8 228 T
4 F
(export <sixty-unit>, total-seconds, decode-total-seconds;) 124.8 217 T
5 F
(// Substrate module) 124.8 206 T
4 F
(use dylan;) 124.8 195 T
(end module sixty-unit;) 114 184 T
108 503.88 108 177.12 2 L
V
0.25 H
0 Z
N
522 503.88 522 177.12 2 L
V
N
107.88 504 522.12 504 2 L
V
N
107.88 484 522.12 484 2 L
V
N
107.88 177 522.12 177 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "204" 218
%%Page: "205" 219
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.7 The) 398.23 677.67 T
5 F
(time-library) 433.86 677.67 T
0 F
( file) 502.26 677.67 T
2 F
(205) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.37 (Because every \336le has to name the module to which its sour) 108 495.67 P
-0.37 (ce r) 393.89 495.67 P
-0.37 (ecor) 410.58 495.67 P
-0.37 (ds belong, you) 430.88 495.67 P
-0.04 (might wonder wher) 108 481.67 P
-0.04 (e to start. Every library implicitly de\336nes a) 205.35 481.67 P
4 10 Q
-0.08 (dylan-user) 415.18 481.67 P
1 11 Q
-0.04 ( mod-) 475.18 481.67 P
-0.3 (ule for this purpose. The) 108 467.67 P
4 10 Q
-0.66 (dylan-user) 228.51 467.67 P
1 11 Q
-0.3 ( module imports all of the) 288.51 467.67 P
4 10 Q
-0.66 (dylan) 415.69 467.67 P
1 11 Q
-0.3 ( module, so) 445.69 467.67 P
-0.18 (any Dylan de\336nition can be used. Y) 108 453.67 P
-0.18 (ou can think of) 279.1 453.67 P
4 10 Q
-0.4 (dylan-user) 354.17 453.67 P
1 11 Q
-0.18 ( as being a scratch) 414.17 453.67 P
(version of) 108 439.67 T
4 10 Q
(dylan) 159.27 439.67 T
1 11 Q
(. Each library has a private copy of) 189.27 439.67 T
4 10 Q
(dylan-user) 360.4 439.67 T
1 11 Q
(, so ther) 419.58 439.67 T
(e is no) 457.91 439.67 T
-0.46 (concern that de\336nitions in one library\325s) 108 425.67 P
4 10 Q
-1 (dylan-user) 298.92 425.67 P
1 11 Q
-0.46 ( could be confused with those) 358.92 425.67 P
(of another) 108 411.67 T
(.) 157.12 411.67 T
(The purposes of the library \336le ar) 135 397.67 T
(e to communicate to the Dylan compiler) 297.21 397.67 T
(the str) 108 383.67 T
(uctur) 138.51 383.67 T
(e of the module namespaces, to state which other libraries to sear) 164.4 383.67 T
(ch) 480.46 383.67 T
(for the modules that ar) 108 369.67 T
(e used in the implementation of this library) 219.2 369.67 T
(, and to deter-) 428.62 369.67 T
(mine which modules implemented by this library ar) 108 355.67 T
(e visible to other libraries) 361.55 355.67 T
(\050and pr) 108 341.67 T
(ograms\051 that use this library) 143.79 341.67 T
(. The details of how these tasks ar) 279.86 341.67 T
(e done) 443.04 341.67 T
(depend on the implementation, but each envir) 108 327.67 T
(onment will pr) 333.16 327.67 T
(ovide a mechanism) 405.57 327.67 T
(for r) 108 313.67 T
(eading library and module de\336nitions, either dir) 128.91 313.67 T
(ectly fr) 364.58 313.67 T
(om an inter) 398.19 313.67 T
(change) 453.92 313.67 T
(\336le, or after conversion of the inter) 108 299.67 T
(change \336le to an implementation-dependent) 276.01 299.67 T
(format.) 108 285.67 T
3 13 Q
(13.7.1  The) 108 254.33 T
4 12 Q
(sixty-unit) 165.49 254.33 T
3 13 Q
( implementation \336le) 237.49 254.33 T
5 9 Q
(// Implementation module) 114 616 T
4 F
(define module time-implementation) 114 605 T
5 F
(// External interface) 124.8 594 T
4 F
(use time;) 124.8 583 T
5 F
(// Substrate modules) 124.8 572 T
4 F
(use sixty-unit;) 124.8 561 T
(use format-out;) 124.8 550 T
(use dylan;) 124.8 539 T
(end module time-implementation;) 114 528 T
8 10 Q
(The) 180.55 215.33 T
4 9 Q
(sixty-unit) 200.57 215.33 T
8 10 Q
( implementation \336le:) 254.57 215.33 T
4 9 Q
(sixty-unit.dylan) 346.27 215.33 T
8 10 Q
(.) 432.67 215.33 T
4 9 Q
(Module: sixty-unit) 114 196 T
(define abstract class <sixty-unit> \050<object>\051) 114 177 T
(slot total-seconds :: <integer>,) 124.8 166 T
( required-init-keyword: total-seconds:;) 130.2 155 T
(end class <sixty-unit>;) 114 144 T
8 10 Q
(The) 178.7 635.33 T
4 9 Q
(time-library) 198.71 635.33 T
8 10 Q
( \336le:) 263.51 635.33 T
4 9 Q
(time-library.dylan) 284.62 635.33 T
8 10 Q
(.) 381.83 635.33 T
9 F
( \050contin) 384.61 635.33 T
(ued\051) 417.3 635.33 T
108 647.88 108 521.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 521.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 521 522.12 521 2 L
V
N
108 227.88 108 137.13 2 L
V
N
522 227.88 522 137.13 2 L
V
N
107.88 228 522.12 228 2 L
V
N
107.88 208 522.12 208 2 L
V
N
107.88 137 522.12 137 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "205" 219
%%Page: "206" 220
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(206) 72 677.67 T
0 F
(Chapter 13) 95.75 677.67 T
(Libraries and Modules) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.12 (The pr) 108 391.67 P
-0.12 (eceding implementation \336le is the \336rst \336le in which we use one of our own) 139.8 391.67 P
(modules. The header statement) 108 377.67 T
4 10 Q
(Module: sixty-unit) 263.45 377.67 T
1 11 Q
( tells the Dylan compiler) 371.45 377.67 T
(wher) 108 363.67 T
(e to look to r) 132.99 363.67 T
(esolve the names that we ar) 193.92 363.67 T
(e using \321 it tells Dylan that, when) 328.26 363.67 T
(we say) 108 349.67 T
4 10 Q
(define class) 144.22 349.67 T
1 11 Q
( or) 216.22 349.67 T
4 10 Q
(<integer>) 232.07 349.67 T
1 11 Q
( or) 286.07 349.67 T
4 10 Q
(*) 301.92 349.67 T
1 11 Q
(, we mean the Dylan de\336nitions of) 307.92 349.67 T
4 10 Q
(define class) 108 335.67 T
1 11 Q
(,) 180 335.67 T
4 10 Q
(<integer>) 185.5 335.67 T
1 11 Q
(, and) 239.5 335.67 T
4 10 Q
(*) 266.37 335.67 T
1 11 Q
(, because) 272.37 335.67 T
4 10 Q
(sixty-unit) 318.92 335.67 T
1 11 Q
( uses the) 378.92 335.67 T
4 10 Q
(dylan) 423.66 335.67 T
1 11 Q
( module.) 453.66 335.67 T
(When we de\336ne) 108 321.67 T
4 10 Q
(encode-total-seconds) 190.08 321.67 T
1 11 Q
(, we mean the) 310.08 321.67 T
4 10 Q
(encode-total-seconds) 380.42 321.67 T
1 11 Q
(cr) 108 307.67 T
(eated by the) 117.03 307.67 T
4 10 Q
(time) 179.08 307.67 T
1 11 Q
( module, because) 203.08 307.67 T
4 10 Q
(sixty-unit) 289.93 307.67 T
1 11 Q
( uses that module.) 349.93 307.67 T
3 13 Q
(13.7.2  The) 108 276.33 T
4 12 Q
(time) 165.49 276.33 T
3 13 Q
( implementation \336le) 194.29 276.33 T
4 9 Q
(define method encode-total-seconds) 114 616 T
(\050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 135.6 605 T
(=>) 119.4 594 T
(\050total-seconds :: <integer>\051) 135.6 594 T
(\050\050max-unit * 60\051 + minutes\051 * 60 + seconds;) 124.8 583 T
(end method encode-total-seconds;) 114 572 T
(define method decode-total-seconds) 114 553 T
(\050sixty-unit :: <sixty-unit>\051) 135.6 542 T
(=> \050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 119.4 531 T
(decode-total-seconds\050sixty-unit.total-seconds\051;) 124.8 520 T
(end method decode-total-seconds;) 114 509 T
(define method decode-total-seconds) 114 490 T
(\050total-seconds :: <integer>\051) 135.6 479 T
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 119.4 468 T
(let\050total-minutes, seconds\051 = truncate/\050abs\050total-seconds\051, 60\051;) 124.8 457 T
(let\050hours, minutes\051 = truncate/\050total-minutes, 60\051;) 124.8 446 T
(values\050hours, minutes, seconds\051;) 124.8 435 T
(end method decode-total-seconds;) 114 424 T
8 10 Q
(The) 212.96 237.33 T
4 9 Q
(time) 232.96 237.33 T
8 10 Q
( implementation \336le:) 254.57 237.33 T
4 9 Q
(time.dylan) 346.27 237.33 T
8 10 Q
(.) 400.27 237.33 T
4 9 Q
(Module: time-implementation) 114 218 T
5 F
(// Define nonnegative integers as integers that are >= zero.) 114 199 T
4 F
(define constant <nonnegative-integer> = limited\050<integer>, min: 0\051;) 114 188 T
(define abstract class <time> \050<sixty-unit>\051) 114 169 T
(end class <time>;) 114 158 T
8 10 Q
(The) 154.21 635.33 T
4 9 Q
(sixty-unit) 174.21 635.33 T
8 10 Q
( implementation \336le:) 228.21 635.33 T
4 9 Q
(sixty-unit.dylan) 319.92 635.33 T
8 10 Q
(.) 406.32 635.33 T
9 F
( \050contin) 409.1 635.33 T
(ued\051) 441.79 635.33 T
108 647.88 108 417.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 417.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 417 522.12 417 2 L
V
N
108 249.88 108 151.12 2 L
V
N
522 249.88 522 151.12 2 L
V
N
107.88 250 522.12 250 2 L
V
N
107.88 230 522.12 230 2 L
V
N
107.88 151 522.12 151 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "206" 220
%%Page: "207" 221
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.7 The) 398.23 677.67 T
5 F
(time-library) 433.86 677.67 T
0 F
( file) 502.26 677.67 T
2 F
(207) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define method say \050time :: <time>\051) 114 616 T
(let \050hours, minutes\051 = decode-total-seconds\050time\051;) 124.8 605 T
(format-out\050"%d:%s%d",) 124.8 594 T
(hours, if \050minutes < 10\051 "0" else " " end, minutes\051;) 184.2 583 T
(end method say;) 114 572 T
5 F
(// A specific time of day from 00:00 \050midnight\051 to before 24:00 \050tomorrow\051) 114 553 T
4 F
(define class <time-of-day> \050<time>\051) 114 542 T
(end class <time-of-day>;) 114 531 T
(define method total-seconds-setter) 114 512 T
(\050total-seconds :: <integer>, time :: <time-of-day>\051) 135.6 501 T
(=> \050total-seconds :: <nonnegative-integer>\051) 119.4 490 T
(if \050total-seconds >= 0\051) 124.8 479 T
(next-method\050\051;) 135.6 468 T
(else) 124.8 457 T
(error\050"%d cannot be negative", total-seconds\051;) 135.6 446 T
(end if;) 124.8 435 T
(end method total-seconds-setter;) 114 424 T
(define method initialize \050time :: <time-of-day>, #key\051) 114 405 T
(next-method\050\051;) 124.8 394 T
(if \050time.total-seconds < 0\051) 124.8 383 T
(error\050"%d cannot be negative", time.total-seconds\051;) 135.6 372 T
(end if;) 124.8 361 T
(end method initialize;) 114 350 T
5 F
(// A relative time between -24:00 and +24:00) 114 331 T
4 F
(define class <time-offset> \050<time>\051) 114 320 T
(end class <time-offset>;) 114 309 T
(define method past? \050time :: <time-offset>\051 => \050past? :: <boolean>\051) 114 290 T
(time.total-seconds < 0;) 124.8 279 T
(end method past?;) 114 268 T
(define method say \050time :: <time-offset>\051 => \050\051) 114 249 T
(format-out\050"%s ", if \050time.past?\051 "minus" else "plus" end\051;) 124.8 238 T
(next-method\050\051;) 124.8 227 T
(end method say;) 114 216 T
(define method \134+) 114 197 T
(\050offset1 :: <time-offset>, offset2 :: <time-offset>\051) 135.6 186 T
(=> \050sum :: <time-offset>\051) 119.4 175 T
(let sum = offset1.total-seconds + offset2.total-seconds;) 124.8 164 T
(make\050<time-offset>, total-seconds: sum\051;) 124.8 153 T
(end method \134+;) 114 142 T
8 10 Q
(The) 186.6 635.33 T
4 9 Q
(time) 206.62 635.33 T
8 10 Q
( implementation \336le:) 228.21 635.33 T
4 9 Q
(time.dylan) 319.92 635.33 T
8 10 Q
(.) 373.92 635.33 T
9 F
( \050contin) 376.7 635.33 T
(ued\051) 409.39 635.33 T
108 647.88 108 135.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 135.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 135 522.12 135 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "207" 221
%%Page: "208" 222
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(208) 72 677.67 T
0 F
(Chapter 13) 95.75 677.67 T
(Libraries and Modules) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.39 (In the pr) 108 230.67 P
-0.39 (eceding implementation \336le, it is the) 148.84 230.67 P
4 10 Q
-0.85 (time-implementation) 326.3 230.67 P
1 11 Q
-0.39 ( module that) 440.3 230.67 P
(speci\336es what we mean when we write Dylan expr) 108 216.67 T
(essions, and in which module) 355.91 216.67 T
(namespace our de\336nitions will appear) 108 202.67 T
(.) 293.7 202.67 T
3 13 Q
(13.7.3  The librar) 108 171.33 T
(y-inter) 192.25 171.33 T
(c) 224.64 171.33 T
(hang) 230.47 171.33 T
(e de\336nition \050LID\051) 256.04 171.33 T
1 11 Q
(As described in Section 2.5.1, page 21, most Dylan implementations also accept a) 108 151.67 T
(LID \336le that enumerates the \336les of a library and the or) 108 137.67 T
(der in which those \336les) 375.08 137.67 T
4 9 Q
(define method \134+) 114 616 T
(\050offset :: <time-offset>, time-of-day :: <time-of-day>\051) 135.6 605 T
(=> \050sum :: <time-of-day>\051) 119.4 594 T
(make\050<time-of-day>,) 124.8 583 T
(total-seconds: offset.total-seconds + time-of-day.total-seconds\051;) 151.8 572 T
(end method \134+;) 114 561 T
(define method \134+ \050time-of-day :: <time-of-day>, offset :: <time-offset>\051) 114 542 T
(=> \050sum :: <time-of-day>\051) 119.4 531 T
(offset + time-of-day;) 124.8 520 T
(end method \134+;) 114 509 T
(define method \134< \050time1 :: <time-of-day>, time2 :: <time-of-day>\051) 114 490 T
(time1.total-seconds < time2.total-seconds;) 124.8 479 T
(end method \134<;) 114 468 T
(define method \134< \050time1 :: <time-offset>, time2 :: <time-offset>\051) 114 449 T
(time1.total-seconds < time2.total-seconds;) 124.8 438 T
(end method \134<;) 114 427 T
(define method \134= \050time1 :: <time-of-day>, time2 :: <time-of-day>\051) 114 408 T
(time1.total-seconds = time2.total-seconds;) 124.8 397 T
(end method \134=;) 114 386 T
(define method \134= \050time1 :: <time-offset>, time2 :: <time-offset>\051) 114 367 T
(time1.total-seconds = time2.total-seconds;) 124.8 356 T
(end method \134=;) 114 345 T
5 F
(// Two useful time constants) 114 326 T
4 F
(define constant $midnight) 114 315 T
(= make\050<time-of-day>, total-seconds: encode-total-seconds\0500, 0, 0\051\051;) 124.8 304 T
(define constant $tomorrow) 114 285 T
(= make\050<time-of-day>,) 124.8 274 T
( total-seconds: encode-total-seconds\05024, 0, 0\051\051;) 157.2 263 T
8 10 Q
(The) 186.6 635.33 T
4 9 Q
(time) 206.62 635.33 T
8 10 Q
( implementation \336le:) 228.21 635.33 T
4 9 Q
(time.dylan) 319.92 635.33 T
8 10 Q
(.) 373.92 635.33 T
9 F
( \050contin) 376.7 635.33 T
(ued\051) 409.39 635.33 T
108 647.88 108 256.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 256.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 256 522.12 256 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "208" 222
%%Page: "209" 223
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.8 Component library) 424.5 677.67 T
2 F
(209) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(will be initialized, if ther) 108 640.67 T
(e ar) 227.13 640.67 T
(e any top-level forms. The LID \336le for our) 244.8 640.67 T
4 10 Q
(time) 450.47 640.67 T
1 11 Q
(library would be as follows.) 108 626.67 T
(In a LID \336le, only the base \336le name is given. Information about the folder or) 108 513.67 T
(dir) 108 499.67 T
(ectory wher) 122.07 499.67 T
(e the \336les ar) 180.02 499.67 T
(e stor) 238.23 499.67 T
(ed, and about the \336le extension \050) 264.65 499.67 T
4 10 Q
(.dylan) 422.84 499.67 T
1 11 Q
( in our) 458.84 499.67 T
-0.03 (examples\051, is implementation dependent and must be supplied by the individual) 108 485.67 P
(implementation.) 108 471.67 T
3 15 Q
(13.8  Component librar) 108 432 T
(y) 241.41 432 T
1 11 Q
(In pr) 108 411.67 T
(evious examples, we have shown how the) 131.62 411.67 T
4 10 Q
(<angle>) 338.82 411.67 T
1 11 Q
( class can use the) 380.82 411.67 T
4 10 Q
(<sixty-unit>) 108 397.67 T
1 11 Q
( class as a base class. W) 180 397.67 T
(e could have simply included the) 292.24 397.67 T
4 10 Q
(<angle>) 456.64 397.67 T
1 11 Q
(class in our time library \050pr) 108 383.67 T
(esumably calling it a time-and-angle library\051, but it) 240.23 383.67 T
(seems plausible that clients might not want both classes all the time. Another) 108 369.67 T
(or) 108 355.67 T
(ganization would be to make an angle library that uses the time library) 118.15 355.67 T
(, which) 461.92 355.67 T
(would be bur) 108 341.67 T
(densome only to clients who want angles without time. Clearly) 173.45 341.67 T
(, the) 479.48 341.67 T
-0.04 (right solution is to make a separate) 108 327.67 P
4 10 Q
-0.08 (sixty-unit) 280.64 327.67 P
1 11 Q
-0.04 ( library that is shar) 340.64 327.67 P
-0.04 (ed by the time) 431.93 327.67 P
(and angle libraries.) 108 313.67 T
-0.36 (Because we had alr) 135 299.67 P
-0.36 (eady br) 227.03 299.67 P
-0.36 (oken out) 263.25 299.67 P
4 10 Q
-0.78 (sixty-unit) 308.05 299.67 P
1 11 Q
-0.36 ( into a separate module and) 368.05 299.67 P
(\336le, we can cr) 108 285.67 T
(eate this new or) 174.38 285.67 T
(ganization by) 251.11 285.67 T
(\245) 117 265.67 T
(Moving the) 135 265.67 T
4 10 Q
(sixty-unit) 194.1 265.67 T
1 11 Q
( module to its own library \336le) 254.1 265.67 T
(\245) 117 245.67 T
(Updating the) 135 245.67 T
4 10 Q
(time) 202.45 245.67 T
1 11 Q
( library \336le) 226.45 245.67 T
(\245) 117 225.67 T
(Opening the) 135 225.67 T
4 10 Q
(<sixty-unit>) 198.4 225.67 T
1 11 Q
( class) 270.4 225.67 T
(Note that no changes ar) 108 205.67 T
(e r) 223.37 205.67 T
(equir) 235.53 205.67 T
(ed to the) 260.94 205.67 T
4 10 Q
(time) 306.03 205.67 T
1 11 Q
( implementation \336le, so we do not) 330.03 205.67 T
(pr) 108 191.67 T
(esent it again.) 118.76 191.67 T
8 10 Q
(The LID \336le:) 256.67 593.33 T
4 9 Q
(time.lid) 313.36 593.33 T
8 10 Q
(.) 356.55 593.33 T
4 9 Q
(library:) 114 574 T
(time) 162.6 574 T
(files:) 114 563 T
(library) 162.6 563 T
(sixty-unit) 162.6 552 T
(time) 162.6 541 T
108 605.88 108 534.12 2 L
V
0.25 H
0 Z
N
522 605.88 522 534.12 2 L
V
N
107.88 606 522.12 606 2 L
V
N
107.88 586 522.12 586 2 L
V
N
107.88 534 522.12 534 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "209" 223
%%Page: "210" 224
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(210) 72 677.67 T
0 F
(Chapter 13) 95.75 677.67 T
(Libraries and Modules) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(13.8.1  The) 108 639.33 T
4 12 Q
(sixty-unit-library) 165.49 639.33 T
3 13 Q
( \336le) 295.09 639.33 T
1 11 Q
-0.31 (Notice that we have taken this opportunity to r) 108 303.67 P
-0.31 (eor) 334.05 303.67 P
-0.31 (ganize the) 349.47 303.67 P
4 10 Q
-0.69 (sixty-unit) 401.58 303.67 P
1 11 Q
-0.31 ( module) 461.58 303.67 P
(into a separate interface and implementation. W) 108 289.67 T
(e also have to cr) 341.08 289.67 T
(eate) 418.73 289.67 T
4 10 Q
(encode-) 441.1 289.67 T
(total-seconds) 108 275.67 T
1 11 Q
( in the) 186 275.67 T
4 10 Q
(sixty-unit) 219.11 275.67 T
1 11 Q
( module, rather than to cr) 279.11 275.67 T
(eate it in the) 403.11 275.67 T
4 10 Q
(time) 465.38 275.67 T
1 11 Q
(interface and to de\336ne it in) 108 261.67 T
4 10 Q
(sixty-unit) 241.54 261.67 T
1 11 Q
(. Recall that all cr) 301.54 261.67 T
(eated names must be) 384.7 261.67 T
(de\336ned in the library in which they ar) 108 247.67 T
(e cr) 292.62 247.67 T
(eated; we cannot use the cr) 309.67 247.67 T
(eate\320de\336ne) 440.6 247.67 T
(str) 108 233.67 T
(uctur) 120.51 233.67 T
(e acr) 146.39 233.67 T
(oss libraries. W) 168.94 233.67 T
(e still want) 242.32 233.67 T
4 10 Q
(encode-total-seconds) 298.36 233.67 T
1 11 Q
( to be part of the) 418.36 233.67 T
-0.06 (interface of the) 108 219.67 P
4 10 Q
-0.14 (time) 183.1 219.67 P
1 11 Q
-0.06 ( library) 207.1 219.67 P
-0.06 (, so we will have to change the) 241.35 219.67 P
4 10 Q
-0.14 (time) 392.28 219.67 P
1 11 Q
-0.06 ( interface module) 416.28 219.67 P
(to import it and to r) 108 205.67 T
(e-export it fr) 203.95 205.67 T
(om the time library) 264.48 205.67 T
(, as shown in Section 13.8.2.) 357.04 205.67 T
(If we had followed our own r) 135 191.67 T
(ecommendations in Section 13.4.3, page 198,) 277.89 191.67 T
(we would pr) 108 177.67 T
(obably have discover) 170.44 177.67 T
(ed that) 273.42 177.67 T
4 10 Q
(encode-total-seconds) 309.98 177.67 T
1 11 Q
( belonged in) 429.98 177.67 T
(the) 108 163.67 T
4 10 Q
(sixty-unit) 126.01 163.67 T
1 11 Q
( interface, and we would have avoided most of this) 186.01 163.67 T
(r) 108 149.67 T
(eor) 112.15 149.67 T
(ganization.) 127.57 149.67 T
8 10 Q
(The) 179.15 600.33 T
4 9 Q
(sixty-unit) 199.15 600.33 T
8 10 Q
( libr) 253.15 600.33 T
(ar) 269.17 600.33 T
(y \336le:) 278.36 600.33 T
4 9 Q
(sixty-unit-library.dylan) 304.48 600.33 T
8 10 Q
(.) 434.08 600.33 T
4 9 Q
(Module: dylan-user) 114 581 T
5 F
(// Library definition) 114 562 T
4 F
(define library sixty-unit) 114 551 T
5 F
(// Interface module) 124.8 540 T
4 F
(export sixty-unit;) 124.8 529 T
5 F
(// Substrate library) 124.8 518 T
4 F
(use dylan;) 124.8 507 T
(end library sixty-unit;) 114 496 T
5 F
(// Interface module) 114 477 T
4 F
(define module sixty-unit) 114 466 T
5 F
(// External interface) 124.8 455 T
4 F
(create <sixty-unit>;) 124.8 444 T
(create total-seconds, encode-total-seconds, decode-total-seconds;) 124.8 433 T
(end module sixty-unit;) 114 422 T
5 F
(// Implementation module) 114 403 T
4 F
(define module sixty-unit-implementation) 114 392 T
5 F
(// External interface) 124.8 381 T
4 F
(use sixty-unit;) 124.8 370 T
5 F
(// Substrate module) 124.8 359 T
4 F
(use dylan;) 124.8 348 T
(end module sixty-unit;) 114 337 T
108 612.88 108 330.12 2 L
V
0.25 H
0 Z
N
522 612.88 522 330.12 2 L
V
N
107.88 613 522.12 613 2 L
V
N
107.88 593 522.12 593 2 L
V
N
107.88 330 522.12 330 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "210" 224
%%Page: "211" 225
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.8 Component library) 424.85 677.67 T
2 F
(21) 526.1 677.67 T
(1) 535.25 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(13.8.2  The updated) 108 639.33 T
4 12 Q
(time-library) 209.91 639.33 T
3 13 Q
( \336le) 296.31 639.33 T
1 11 Q
(Note that the) 108 226.67 T
4 10 Q
(time) 174.58 226.67 T
1 11 Q
( interface module imports only) 198.58 226.67 T
4 10 Q
(encode-total-seconds) 351.85 226.67 T
1 11 Q
( fr) 471.85 226.67 T
(om) 482.41 226.67 T
4 10 Q
(sixty-unit) 108 212.67 T
1 11 Q
(. It then r) 168 212.67 T
(e-exports all the names that it has imported \321 in this case,) 212.1 212.67 T
(just) 108 198.67 T
4 10 Q
(encode-total-seconds) 128.21 198.67 T
1 11 Q
(. In this way) 248.21 198.67 T
(, the) 306.74 198.67 T
4 10 Q
(time) 330.24 198.67 T
1 11 Q
( interface is acting as a \336lter) 354.24 198.67 T
(and is passing on only a subset of the) 108 184.67 T
4 10 Q
(sixty-unit) 291.85 184.67 T
1 11 Q
( interface to its clients.) 351.85 184.67 T
-0.08 (At this point, we need to) 135 170.67 P
2 F
-0.08 (open) 257.25 170.67 P
1 F
-0.08 ( the) 282.3 170.67 P
4 10 Q
-0.18 (<sixty-unit>) 302.89 170.67 P
1 11 Q
-0.08 ( class. Because it is now in) 374.89 170.67 P
(a separate library) 108 156.67 T
(, it must be de\336ned to be open to allow other libraries, such as) 191.31 156.67 T
4 10 Q
(time) 108 142.67 T
1 11 Q
( or) 132 142.67 T
4 10 Q
(angle,) 147.85 142.67 T
1 11 Q
( to subclass it. Opening a class simply amounts to changing the) 183.85 142.67 T
8 10 Q
(The) 205.04 600.33 T
4 9 Q
(time-library) 225.05 600.33 T
8 10 Q
( \336le:) 289.86 600.33 T
4 9 Q
(time-library.dylan) 310.98 600.33 T
8 10 Q
(.) 408.17 600.33 T
4 9 Q
(Module: dylan-user) 114 581 T
5 F
(// Library definition) 114 562 T
4 F
(define library time) 114 551 T
5 F
(// Interface module) 124.8 540 T
4 F
(export time;) 124.8 529 T
5 F
(// Substrate libraries) 124.8 518 T
4 F
(use sixty-unit;) 124.8 507 T
(use format-out;) 124.8 496 T
(use dylan;) 124.8 485 T
(end library time;) 114 474 T
5 F
(// Interface module) 114 455 T
4 F
(define module time) 114 444 T
5 F
(// Classes) 124.8 433 T
4 F
(create <time>, <time-of-day>, <time-offset>;) 124.8 422 T
5 F
(// Generics) 124.8 411 T
4 F
(create say;) 124.8 400 T
5 F
(// Shared protocol) 124.8 389 T
4 F
(use sixty-unit, import: { encode-total-seconds }, export: all;) 124.8 378 T
(end module time;) 114 367 T
5 F
(// Implementation module) 114 348 T
4 F
(define module time-implementation) 114 337 T
5 F
(// External interface) 124.8 326 T
4 F
(use time;) 124.8 315 T
5 F
(// Substrate modules) 124.8 304 T
4 F
(use sixty-unit;) 124.8 293 T
(use format-out;) 124.8 282 T
(use dylan;) 124.8 271 T
(end module time-implementation;) 114 260 T
108 612.88 108 253.12 2 L
V
0.25 H
0 Z
N
522 612.88 522 253.12 2 L
V
N
107.88 613 522.12 613 2 L
V
N
107.88 593 522.12 593 2 L
V
N
107.88 253 522.12 253 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "211" 225
%%Page: "212" 226
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(212) 72 677.67 T
0 F
(Chapter 13) 95.75 677.67 T
(Libraries and Modules) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 10 Q
0 X
-0.1 (define class) 108 640.67 P
1 11 Q
-0.05 ( to) 179.9 640.67 P
4 10 Q
-0.1 (define open class) 194.9 640.67 P
1 11 Q
-0.05 (. The exact implications of this declaration) 296.69 640.67 P
(ar) 108 626.67 T
(e discussed in Chapter 19,) 117.65 626.67 T
0 F
(Performance and Flexibility) 249.7 626.67 T
1 F
(.) 372.96 626.67 T
3 13 Q
(13.8.3  The updated) 108 595.33 T
4 12 Q
(sixty-unit) 209.91 595.33 T
3 13 Q
( implementation \336le) 281.91 595.33 T
1 11 Q
(Figur) 108 240.67 T
(e 13.5 shows the r) 134.21 240.67 T
(elationships among our libraries and modules at this) 220.05 240.67 T
(point. Note that) 108 226.67 T
4 10 Q
(sixty-unit) 187.88 226.67 T
1 11 Q
( is now a separate library) 247.88 226.67 T
(. It uses the) 368.89 226.67 T
4 10 Q
(dylan) 426.42 226.67 T
1 11 Q
( library) 456.42 226.67 T
(and is used by the) 108 212.67 T
4 10 Q
(time) 198.98 212.67 T
1 11 Q
( library) 222.98 212.67 T
(. W) 257.3 212.67 T
(e illustrate the) 272.79 212.67 T
4 10 Q
(time) 344.75 212.67 T
1 11 Q
( module importing and r) 368.75 212.67 T
(e-) 489.24 212.67 T
(exporting part of the) 108 198.67 T
4 10 Q
(sixty-unit) 211.18 198.67 T
1 11 Q
( interface module \050the method) 271.18 198.67 T
4 10 Q
(encode-total-) 421.21 198.67 T
(seconds) 108 184.67 T
1 11 Q
(\051 by the darker gr) 150 184.67 T
(ey ar) 234.68 184.67 T
(ea.) 258.46 184.67 T
8 10 Q
(The) 180.55 556.33 T
4 9 Q
(sixty-unit) 200.57 556.33 T
8 10 Q
( implementation \336le:) 254.57 556.33 T
4 9 Q
(sixty-unit.dylan) 346.27 556.33 T
8 10 Q
(.) 432.67 556.33 T
4 9 Q
(Module: sixty-unit-implementation) 114 537 T
(define open abstract class <sixty-unit> \050<object>\051) 114 518 T
(slot total-seconds :: <integer>,) 124.8 507 T
(required-init-keyword: total-seconds:;) 135.6 496 T
(end class <sixty-unit>;) 114 485 T
(define method encode-total-seconds) 114 466 T
(\050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 135.6 455 T
(=>) 119.4 444 T
(\050total-seconds :: <integer>\051) 135.6 444 T
(\050\050max-unit * 60\051 + minutes\051 * 60 + seconds;) 124.8 433 T
(end method encode-total-seconds;) 114 422 T
(define method decode-total-seconds) 114 403 T
(\050sixty-unit :: <sixty-unit>\051) 135.6 392 T
(=> \050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 119.4 381 T
(decode-total-seconds\050sixty-unit.total-seconds\051;) 124.8 370 T
(end method decode-total-seconds;) 114 359 T
(define method decode-total-seconds) 114 340 T
(\050total-seconds :: <integer>\051) 135.6 329 T
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 119.4 318 T
(let\050total-minutes, seconds\051 = truncate/\050abs\050total-seconds\051, 60\051;) 124.8 307 T
(let\050hours, minutes\051 = truncate/\050total-minutes, 60\051;) 124.8 296 T
(values\050hours, minutes, seconds\051;) 124.8 285 T
(end method decode-total-seconds;) 114 274 T
108 568.88 108 267.12 2 L
V
0.25 H
0 Z
N
522 568.88 522 267.12 2 L
V
N
107.88 569 522.12 569 2 L
V
N
107.88 549 522.12 549 2 L
V
N
107.88 267 522.12 267 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "212" 226
%%Page: "213" 227
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.8 Component library) 424.5 677.67 T
2 F
(213) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(13.8.4  T) 108 304.34 T
(w) 149.46 304.34 T
(o LID \336les) 157.56 304.34 T
1 11 Q
(Her) 108 284.67 T
(e, we show the LID \336les for each library) 126.57 284.67 T
(.) 318.9 284.67 T
108 329.01 504 337 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 13.5) 193.2 340.33 T
4 9 Q
(sixty-unit) 251.55 340.33 T
8 10 Q
( as a separ) 305.55 340.33 T
(ate libr) 354.92 340.33 T
(ar) 384.83 340.33 T
(y) 394.02 340.33 T
(.) 398.02 340.33 T
(The LID \336le:) 240.46 256.34 T
4 9 Q
(sixty-unit.lid) 297.15 256.34 T
8 10 Q
(.) 372.76 256.34 T
4 9 Q
(library:) 114 237.01 T
(sixty-unit) 162.6 237.01 T
(files:) 114 226.01 T
(sixty-unit-library) 162.6 226.01 T
(sixty-unit) 162.6 215.01 T
8 10 Q
(The LID \336le:) 256.67 183.34 T
4 9 Q
(time.lid) 313.36 183.34 T
8 10 Q
(.) 356.55 183.34 T
4 9 Q
(library:) 114 164.01 T
(time) 162.6 164.01 T
(files:) 114 153.01 T
(time-library) 162.6 153.01 T
(time) 162.6 142.01 T
108 268.88 108 208.13 2 L
V
0.25 H
0 Z
N
522 268.88 522 208.13 2 L
V
N
107.88 269.01 522.12 269.01 2 L
V
N
107.88 249.01 522.12 249.01 2 L
V
N
107.88 208.01 522.12 208.01 2 L
V
N
108 195.88 108 135.13 2 L
V
N
522 195.88 522 135.13 2 L
V
N
107.88 196.01 522.12 196.01 2 L
V
N
107.88 176.01 522.12 176.01 2 L
V
N
107.88 135.01 522.12 135.01 2 L
V
N
108 353 504 648 C
118 357 494 646 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 149 334 513 611 364 277 124 363 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f13-5.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(r) 6.0%%For: (brent) (harlequin)%%Title: (f13-5 .eps)%%CreationDate: (6/11/96) (11:31 AM)%%BoundingBox: 149 334 513 611%%HiResBoundingBox: 149.75 334.75 512.25 610.575%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.0%AI3_ColorUsage: Black&White%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set)%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 ()%AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 29 31 581 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 1 0%AI5_TargetResolution: 300%AI5_NumLayers: 1%AI5_OpenToView: 150 636 2 826 581 18 0 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 23 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_ax neg 0 rmoveto	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 17 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin		/initialize	{ 		Adobe_ColorImage_AI6 begin		Adobe_ColorImage_AI6		{			dup type /arraytype eq			{				dup xcheck				{					bind				} if			} if			pop pop		} forall	} def	/terminate { end } def		currentdict /Adobe_ColorImage_AI6_Vars known not	{		/Adobe_ColorImage_AI6_Vars 14 dict def	} if		Adobe_ColorImage_AI6_Vars begin		/channelcount 0 def		/sourcecount 0 def		/sourcearray 4 array def		/plateindex -1 def		/XIMask 0 def		/XIBinary 0 def		/XIChannelCount 0 def		/XIBitsPerPixel 0 def		/XIImageHeight 0 def		/XIImageWidth 0 def		/XIImageMatrix null def		/XIBuffer null def		/XIDataProc null def end		/WalkRGBString null def	/WalkCMYKString null def		/StuffRGBIntoGrayString null def	/RGBToGrayImageProc null def	/StuffCMYKIntoGrayString null def	/CMYKToGrayImageProc null def	/ColorImageCompositeEmulator null def		/SeparateCMYKImageProc null def		/FourEqual null def	/TestPlateIndex null def		currentdict /_colorimage known not	{		/colorimage where		{			/colorimage get /_colorimage exch def		}		{			/_colorimage null def		} ifelse	} if		/_currenttransfer systemdict /currenttransfer get def		/colorimage null def	/XI null def			/WalkRGBString	{		0 3 index			dup length 1 sub 0 3 3 -1 roll		{			3 getinterval { } forall				5 index exec				3 index		} for				 5 { pop } repeat		} def			/WalkCMYKString	{		0 3 index			dup length 1 sub 0 4 3 -1 roll		{			4 getinterval { } forall						6 index exec						3 index					} for				5 { pop } repeat			} def			/StuffRGBIntoGrayString	{		.11 mul exch				.59 mul add exch				.3 mul add				cvi 3 copy put				pop 1 add	} def			/RGBToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin 			sourcearray 0 get exec			dup length 3 idiv string			dup 3 1 roll 						/StuffRGBIntoGrayString load exch			WalkRGBString	 end	} def			/StuffCMYKIntoGrayString	{		exch .11 mul add				exch .59 mul add				exch .3 mul add				dup 255 gt { pop 255 } if				255 exch sub cvi 3 copy put				pop 1 add	} def			/CMYKToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin			sourcearray 0 get exec			dup length 4 idiv string			dup 3 1 roll 						/StuffCMYKIntoGrayString load exch			WalkCMYKString	 end	} def			/ColorImageCompositeEmulator	{		pop true eq		{			Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat		}		{			Adobe_ColorImage_AI6_Vars /channelcount get 1 ne			{				Adobe_ColorImage_AI6_Vars begin					sourcearray 0 3 -1 roll put									channelcount 3 eq 					{ 						/RGBToGrayImageProc 					}					{ 						/CMYKToGrayImageProc					} ifelse					load			 end			} if			image		} ifelse	} def			/SeparateCMYKImageProc	{			Adobe_ColorImage_AI6_Vars begin				sourcecount 0 ne			{				sourcearray plateindex get exec			}			{							sourcearray 0 get exec								dup length 4 idiv string								0 2 index								plateindex 4 2 index length 1 sub				{					get 255 exch sub										3 copy put pop 1 add										2 index				} for					pop pop exch pop			} ifelse	 end	} def				/FourEqual	{		4 index ne		{			pop pop pop false		}		{			4 index ne			{				pop pop false			}			{				4 index ne				{					pop false				}				{					4 index eq				} ifelse			} ifelse		} ifelse	} def			/TestPlateIndex	{		Adobe_ColorImage_AI6_Vars begin			/plateindex -1 def				/setcmykcolor where			{				pop				gsave				1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub				grestore					1 0 0 0 FourEqual 				{ 					/plateindex 0 def				}				{					0 1 0 0 FourEqual					{ 						/plateindex 1 def					}					{						0 0 1 0 FourEqual						{							/plateindex 2 def						}						{							0 0 0 1 FourEqual							{ 								/plateindex 3 def							}							{								0 0 0 0 FourEqual								{									/plateindex 5 def								} if							} ifelse						} ifelse					} ifelse				} ifelse				pop pop pop pop			} if			plateindex	 end	} def			/colorimage	{		Adobe_ColorImage_AI6_Vars begin			/channelcount 1 index def			/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def				4 sourcecount add index dup 			8 eq exch 1 eq or not	 end				{			/_colorimage load null ne			{				_colorimage			}			{				Adobe_ColorImage_AI6_Vars /sourcecount get				7 add { pop } repeat			} ifelse		}		{			dup 3 eq			TestPlateIndex			dup -1 eq exch 5 eq or or			{				/_colorimage load null eq				{					ColorImageCompositeEmulator				}				{					dup 1 eq					{						pop pop image					}					{						Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							gsave														0 _currenttransfer exec							1 _currenttransfer exec							eq							{ 0 _currenttransfer exec 0.5 lt }							{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse														{ { pop 0 } } { { pop 1 } } ifelse							systemdict /settransfer get exec						} if												_colorimage												Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							grestore						} if					} ifelse				} ifelse			}			{				dup 1 eq				{					pop pop					image				}				{					pop pop						Adobe_ColorImage_AI6_Vars begin						sourcecount -1 0						{										exch sourcearray 3 1 roll put						} for							/SeparateCMYKImageProc load				 end						systemdict /image get exec				} ifelse			} ifelse		} ifelse	} def		/XI	{		Adobe_ColorImage_AI6_Vars begin			gsave			/XIMask exch 0 ne def			/XIBinary exch 0 ne def			pop			pop			/XIChannelCount exch def			/XIBitsPerPixel exch def			/XIImageHeight exch def			/XIImageWidth exch def			pop pop pop pop			/XIImageMatrix exch def						XIBitsPerPixel 1 eq			{				XIImageWidth 8 div ceiling cvi			}			{				XIImageWidth XIChannelCount mul			} ifelse			/XIBuffer exch string def						XIBinary			{				/XIDataProc { currentfile XIBuffer readstring pop } def				currentfile 128 string readline pop pop			}			{				/XIDataProc { currentfile XIBuffer readhexstring pop } def			} ifelse						0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale						XIMask			{				XIImageWidth XIImageHeight				false				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								/_lp /null ddef				_fc				/_lp /imagemask ddef								imagemask			}			{				XIImageWidth XIImageHeight				XIBitsPerPixel				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								XIChannelCount 1 eq				{										gsave					0 setgray										image										grestore				}				{					false					XIChannelCount					colorimage				} ifelse			} ifelse			grestore	 end	} def	end%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Bricks)(Bricks) 2.565 5.19 74.565 77.19 [(0 O 0 R 0.3 0.85 0.85 0 k 0.3 0.85 0.85 0 K) @_ &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR1.6 73.6 m75.6 73.6 lS1.6 66.399 m75.6 66.399 LS1.6 59.199 m75.6 59.199 LS1.6 51.998 m75.6 51.998 LS1.6 44.798 m75.6 44.798 LS1.6 37.597 m75.6 37.597 LS1.6 30.397 m75.6 30.397 LS1.6 23.196 m75.6 23.196 LS1.6 15.996 m75.6 15.996 LS1.6 8.796 m75.6 8.796 LS70.975 73.6 m70.975 66.412 lS56.575 73.6 m56.575 66.412 LS42.175 73.6 m42.175 66.412 LS27.775 73.6 m27.775 66.412 LS13.375 73.6 m13.375 66.412 LS70.975 59.162 m70.975 51.975 lS56.575 59.162 m56.575 51.975 LS42.175 59.162 m42.175 51.975 LS27.775 59.162 m27.775 51.975 LS13.375 59.162 m13.375 51.975 LS70.975 44.787 m70.975 37.6 lS56.575 44.787 m56.575 37.6 LS42.175 44.787 m42.175 37.6 LS27.775 44.787 m27.775 37.6 LS13.375 44.787 m13.375 37.6 LS70.975 30.412 m70.975 23.225 lS56.575 30.412 m56.575 23.225 LS42.175 30.412 m42.175 23.225 LS27.775 30.412 m27.775 23.225 LS13.375 30.412 m13.375 23.225 LS70.975 15.975 m70.975 8.787 lS56.575 15.975 m56.575 8.787 LS42.175 15.975 m42.175 8.787 LS27.775 15.975 m27.775 8.787 LS13.375 15.975 m13.375 8.787 LS63.762 8.787 m63.762 1.6 LS49.362 8.787 m49.362 1.6 LS34.962 8.787 m34.962 1.6 LS20.562 8.787 m20.562 1.6 LS6.162 8.787 m6.162 1.6 lS63.762 23.225 m63.762 16.037 LS49.362 23.225 m49.362 16.037 LS34.962 23.225 m34.962 16.037 LS20.562 23.225 m20.562 16.037 LS6.162 23.225 m6.162 16.037 lS63.762 37.6 m63.762 30.412 LS49.362 37.6 m49.362 30.412 LS20.562 37.6 m20.562 30.412 LS6.162 37.6 m6.162 30.412 lS63.762 51.975 m63.762 44.787 LS49.362 51.975 m49.362 44.787 LS34.962 51.975 m34.962 44.787 LS20.562 51.975 m20.562 44.787 LS6.162 51.975 m6.162 44.787 lS63.762 66.412 m63.762 59.225 LS49.362 66.412 m49.362 59.225 LS34.962 66.412 m34.962 59.225 LS20.562 66.412 m20.562 59.225 LS6.162 66.412 m6.162 59.225 lS63.762 80.849 m63.762 73.662 LS49.362 80.849 m49.362 73.662 LS34.962 80.849 m34.962 73.662 LS20.562 80.849 m20.562 73.662 LS6.162 80.849 m6.162 73.662 lS34.962 37.6 m34.962 30.412 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Confetti)(Confetti) 4.85 3.617 76.85 75.617 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR10.6 64.867 m7.85 62.867 lS9.1 8.617 m6.85 6.867 lS78.1 68.617 m74.85 67.867 lS76.85 56.867 m74.35 55.117 lS79.6 51.617 m76.6 51.617 lS76.35 44.117 m73.6 45.867 lS78.6 35.867 m76.6 34.367 lS76.1 23.867 m73.35 26.117 lS78.1 12.867 m73.85 13.617 lS68.35 14.617 m66.1 12.867 lS76.6 30.617 m73.6 30.617 lS62.85 58.117 m60.956 60.941 lS32.85 59.617 m31.196 62.181 lS47.891 64.061 m49.744 66.742 lS72.814 2.769 m73.928 5.729 lS67.976 2.633 m67.35 5.909 lS61.85 27.617 m59.956 30.441 lS53.504 56.053 m51.85 58.617 lS52.762 1.779 m52.876 4.776 lS45.391 5.311 m47.244 7.992 lS37.062 3.375 m35.639 5.43 lS55.165 34.828 m57.518 37.491 lS20.795 3.242 m22.12 5.193 lS14.097 4.747 m15.008 8.965 lS9.736 1.91 m8.073 4.225 lS31.891 5.573 m32.005 8.571 lS12.1 70.367 m15.6 68.867 lS9.35 54.867 m9.6 58.117 lS12.85 31.867 m14.35 28.117 lS10.1 37.367 m12.35 41.117 lS34.1 71.117 m31.85 68.617 lS38.35 71.117 m41.6 68.367 lS55.1 71.117 m58.35 69.117 lS57.35 65.117 m55.35 61.867 lS64.35 66.367 m69.35 68.617 lS71.85 62.867 m69.35 61.117 lS23.6 70.867 m23.6 67.867 lS20.6 65.867 m17.35 65.367 lS24.85 61.367 m25.35 58.117 lS25.85 65.867 m29.35 66.617 lS14.1 54.117 m16.85 56.117 lS12.35 11.617 m12.6 15.617 lS12.1 19.867 m14.35 22.367 lS26.1 9.867 m23.6 13.367 lS34.6 47.117 m32.1 45.367 lS62.6 41.867 m59.85 43.367 lS31.6 35.617 m27.85 36.367 lS36.35 26.117 m34.35 24.617 lS33.85 14.117 m31.1 16.367 lS37.1 9.867 m35.1 11.117 lS34.35 20.867 m31.35 20.867 lS44.6 56.617 m42.1 54.867 lS47.35 51.367 m44.35 51.367 lS44.1 43.867 m41.35 45.617 lS43.35 33.117 m42.6 30.617 lS43.85 23.617 m41.1 25.867 lS44.35 15.617 m42.35 16.867 lS67.823 31.1 m64.823 31.1 lS27.1 32.617 m29.6 30.867 lS31.85 55.117 m34.85 55.117 lS19.6 40.867 m22.1 39.117 lS16.85 35.617 m19.85 35.617 lS20.1 28.117 m22.85 29.867 lS52.1 42.617 m54.484 44.178 lS52.437 50.146 m54.821 48.325 lS59.572 54.133 m59.35 51.117 lS50.185 10.055 m53.234 9.928 lS51.187 15.896 m53.571 14.075 lS58.322 19.883 m59.445 16.823 lS53.1 32.117 m50.6 30.367 lS52.85 24.617 m49.6 25.617 lS61.85 9.117 m59.1 10.867 lS69.35 34.617 m66.6 36.367 lS67.1 23.617 m65.1 22.117 lS24.435 46.055 m27.484 45.928 lS25.437 51.896 m27.821 50.075 lS62.6 47.117 m65.321 46.575 lS19.85 19.867 m20.35 16.617 lS21.85 21.867 m25.35 22.617 lS37.6 62.867 m41.6 62.117 lS38.323 42.1 m38.823 38.6 lS69.35 52.617 m66.85 53.867 lS14.85 62.117 m18.1 59.367 lS9.6 46.117 m7.1 44.367 lS20.6 51.617 m18.6 50.117 lS46.141 70.811 m47.994 73.492 lS69.391 40.561 m71.244 43.242 lS38.641 49.311 m39.35 52.117 lS25.141 16.811 m25.85 19.617 lS36.6 32.867 m34.6 31.367 lS6.1 68.617 m2.85 67.867 lS4.85 56.867 m2.35 55.117 lS7.6 51.617 m4.6 51.617 lS6.6 35.867 m4.6 34.367 lS6.1 12.867 m1.85 13.617 lS4.6 30.617 m1.6 30.617 lS72.814 74.769 m73.928 77.729 lS67.976 74.633 m67.35 77.909 lS52.762 73.779 m52.876 76.776 lS37.062 75.375 m35.639 77.43 lS20.795 75.242 m22.12 77.193 lS9.736 73.91 m8.073 76.225 lS10.1 23.617 m6.35 24.367 lS73.217 18.276 m71.323 21.1 lS28.823 39.6 m29.505 42.389 lS49.6 38.617 m47.6 37.117 lS60.323 73.6 m62.323 76.6 lS60.323 1.6 m62.323 4.6 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Cross Texture)(Cross Texture) 1 1 58.6 58.6 [(0 O 0 R 1 1 0.2 0 k 1 1 0.2 0 K) @_ &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR53.5 55 m56.5 55 lS39.1 55 m42.1 55 lS24.7 55 m27.7 55 lS10.3 55 m13.3 55 lS46.3 47.8 m49.3 47.8 lS31.9 47.8 m34.9 47.8 lS17.5 47.8 m20.5 47.8 lS3.1 47.8 m6.1 47.8 lS53.5 40.6 m56.5 40.6 lS39.1 40.6 m42.1 40.6 lS24.7 40.6 m27.7 40.6 lS10.3 40.6 m13.3 40.6 lS46.3 33.4 m49.3 33.4 lS31.9 33.4 m34.9 33.4 lS17.5 33.4 m20.5 33.4 lS3.1 33.4 m6.1 33.4 lS53.5 26.2 m56.5 26.2 lS39.1 26.2 m42.1 26.2 lS24.7 26.2 m27.7 26.2 lS10.3 26.2 m13.3 26.2 lS46.3 19 m49.3 19 lS31.9 19 m34.9 19 lS17.5 19 m20.5 19 lS3.1 19 m6.1 19 lS53.5 11.8 m56.5 11.8 lS39.1 11.8 m42.1 11.8 lS24.7 11.8 m27.7 11.8 lS10.3 11.8 m13.3 11.8 lS46.3 4.6 m49.3 4.6 lS31.9 4.6 m34.9 4.6 lS17.5 4.6 m20.5 4.6 lS3.1 4.6 m6.1 4.6 lS55 56.5 m55 53.5 lS40.6 56.5 m40.6 53.5 lS26.2 56.5 m26.2 53.5 lS11.8 56.5 m11.8 53.5 lS47.8 49.3 m47.8 46.3 lS33.4 49.3 m33.4 46.3 lS19 49.3 m19 46.3 lS4.6 49.3 m4.6 46.3 lS55 42.1 m55 39.1 lS40.6 42.1 m40.6 39.1 lS26.2 42.1 m26.2 39.1 lS11.8 42.1 m11.8 39.1 lS47.8 34.9 m47.8 31.9 lS33.4 34.9 m33.4 31.9 lS19 34.9 m19 31.9 lS4.6 34.9 m4.6 31.9 lS55 27.7 m55 24.7 lS40.6 27.7 m40.6 24.7 lS26.2 27.7 m26.2 24.7 lS11.8 27.7 m11.8 24.7 lS47.8 20.5 m47.8 17.5 lS33.4 20.5 m33.4 17.5 lS19 20.5 m19 17.5 lS4.6 20.5 m4.6 17.5 lS55 13.3 m55 10.3 lS40.6 13.3 m40.6 10.3 lS26.2 13.3 m26.2 10.3 lS11.8 13.3 m11.8 10.3 lS47.8 6.1 m47.8 3.1 lS33.4 6.1 m33.4 3.1 lS19 6.1 m19 3.1 lS4.6 6.1 m4.6 3.1 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Master diagonal)(Master diagonal) 798.9318 33.4829 1412.9318 827.4829 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer300 Ar0 J 0 j 0.5 w 3.8636 M []0 d%AI3_Note:0 D0 XR1205.9318 1208.4829 m1.9318 4.4829 lS1214.4318 1208.4829 m10.4318 4.4829 lS1222.9318 1208.4829 m18.9318 4.4829 lS1231.4318 1208.4829 m27.4318 4.4829 lS1239.9318 1208.4829 m35.9318 4.4829 lS1248.4318 1208.4829 m44.4318 4.4829 lS1256.9318 1208.4829 m52.9318 4.4829 lS1265.4318 1208.4829 m61.4318 4.4829 lS1273.9318 1208.4829 m69.9318 4.4829 lS1282.4318 1208.4829 m78.4318 4.4829 lS1290.9318 1208.4829 m86.9318 4.4829 lS1299.4318 1208.4829 m95.4318 4.4829 lS1307.9318 1208.4829 m103.9318 4.4829 lS1316.4318 1208.4829 m112.4318 4.4829 lS1324.9318 1208.4829 m120.9318 4.4829 lS1333.4318 1208.4829 m129.4318 4.4829 lS1341.9318 1208.4829 m137.9318 4.4829 lS1350.4318 1208.4829 m146.4318 4.4829 lS1358.9318 1208.4829 m154.9318 4.4829 lS1367.4318 1208.4829 m163.4318 4.4829 lS1375.9318 1208.4829 m171.9318 4.4829 lS1384.4318 1208.4829 m180.4318 4.4829 lS1392.9318 1208.4829 m188.9318 4.4829 lS1401.4318 1208.4829 m197.4318 4.4829 lS1409.9318 1208.4829 m205.9318 4.4829 lS1418.4318 1208.4829 m214.4318 4.4829 lS1426.9318 1208.4829 m222.9318 4.4829 lS1435.4318 1208.4829 m231.4318 4.4829 lS1443.9318 1208.4829 m239.9318 4.4829 lS1452.4318 1208.4829 m248.4318 4.4829 lS1460.9318 1208.4829 m256.9318 4.4829 lS1469.4318 1208.4829 m265.4318 4.4829 lS1477.9318 1208.4829 m273.9318 4.4829 lS1486.4318 1208.4829 m282.4318 4.4829 lS1494.9318 1208.4829 m290.9318 4.4829 lS1503.4318 1208.4829 m299.4318 4.4829 lS1511.9318 1208.4829 m307.9318 4.4829 lS1520.4318 1208.4829 m316.4318 4.4829 lS1528.9318 1208.4829 m324.9318 4.4829 lS1537.4318 1208.4829 m333.4318 4.4829 lS1545.9318 1208.4829 m341.9318 4.4829 lS1554.4318 1208.4829 m350.4318 4.4829 lS1562.9318 1208.4829 m358.9318 4.4829 lS1571.4318 1208.4829 m367.4318 4.4829 lS1579.9318 1208.4829 m375.9318 4.4829 lS1588.4318 1208.4829 m384.4318 4.4829 lS1596.9318 1208.4829 m392.9318 4.4829 lS1605.4318 1208.4829 m401.4318 4.4829 lS1613.9318 1208.4829 m409.9318 4.4829 lS1622.4318 1208.4829 m418.4318 4.4829 lS1630.9318 1208.4829 m426.9318 4.4829 lS1639.4318 1208.4829 m435.4318 4.4829 lS1647.9318 1208.4829 m443.9318 4.4829 lS1656.4318 1208.4829 m452.4318 4.4829 lS1664.9318 1208.4829 m460.9318 4.4829 lS1673.4318 1208.4829 m469.4318 4.4829 lS1681.9318 1208.4829 m477.9318 4.4829 lS1690.4318 1208.4829 m486.4318 4.4829 lS1698.9318 1208.4829 m494.9318 4.4829 lS1707.4318 1208.4829 m503.4318 4.4829 lS1715.9318 1208.4829 m511.9318 4.4829 lS1724.4318 1208.4829 m520.4318 4.4829 lS1732.9318 1208.4829 m528.9318 4.4829 lS1741.4318 1208.4829 m537.4318 4.4829 lS1749.9318 1208.4829 m545.9318 4.4829 lS1758.4318 1208.4829 m554.4318 4.4829 lS1766.9318 1208.4829 m562.9318 4.4829 lS1775.4318 1208.4829 m571.4318 4.4829 lS1783.9318 1208.4829 m579.9318 4.4829 lS1792.4318 1208.4829 m588.4318 4.4829 lS1800.9318 1208.4829 m596.9318 4.4829 lS1809.4318 1208.4829 m605.4318 4.4829 lS1817.9318 1208.4829 m613.9318 4.4829 lS1826.4318 1208.4829 m622.4318 4.4829 lS1834.9318 1208.4829 m630.9318 4.4829 lS1843.4318 1208.4829 m639.4318 4.4829 lS1851.9318 1208.4829 m647.9318 4.4829 lS1860.4318 1208.4829 m656.4318 4.4829 lS1868.9318 1208.4829 m664.9318 4.4829 lS1877.4318 1208.4829 m673.4318 4.4829 lS1885.9318 1208.4829 m681.9318 4.4829 lS1894.4318 1208.4829 m690.4318 4.4829 lS1902.9318 1208.4829 m698.9318 4.4829 lS1911.4318 1208.4829 m707.4318 4.4829 lS1919.9318 1208.4829 m715.9318 4.4829 lS1928.4318 1208.4829 m724.4318 4.4829 lS1936.9318 1208.4829 m732.9318 4.4829 lS1945.4318 1208.4829 m741.4318 4.4829 lS1953.9318 1208.4829 m749.9318 4.4829 lS1962.4318 1208.4829 m758.4318 4.4829 lS1970.9318 1208.4829 m766.9318 4.4829 lS1979.4318 1208.4829 m775.4318 4.4829 lS1987.9318 1208.4829 m783.9318 4.4829 lS1996.4318 1208.4829 m792.4318 4.4829 lS2004.9318 1208.4829 m800.9318 4.4829 lS2013.4318 1208.4829 m809.4318 4.4829 lS2021.9318 1208.4829 m817.9318 4.4829 lS2030.4318 1208.4829 m826.4318 4.4829 lS2038.9318 1208.4829 m834.9318 4.4829 lS2047.4318 1208.4829 m843.4318 4.4829 lS2055.9318 1208.4829 m851.9318 4.4829 lS2064.4318 1208.4829 m860.4318 4.4829 lS2072.9318 1208.4829 m868.9318 4.4829 lS2081.4318 1208.4829 m877.4318 4.4829 lS2089.9318 1208.4829 m885.9318 4.4829 lS2098.4318 1208.4829 m894.4318 4.4829 lS2106.9318 1208.4829 m902.9318 4.4829 lS2115.4318 1208.4829 m911.4318 4.4829 lS2123.9318 1208.4829 m919.9318 4.4829 lS2132.4318 1208.4829 m928.4318 4.4829 lS2140.9318 1208.4829 m936.9318 4.4829 lS2149.4318 1208.4829 m945.4318 4.4829 lS2157.9318 1208.4829 m953.9318 4.4829 lS2166.4318 1208.4829 m962.4318 4.4829 lS2174.9318 1208.4829 m970.9318 4.4829 lS2183.4318 1208.4829 m979.4318 4.4829 lS2191.9318 1208.4829 m987.9318 4.4829 lS2200.4318 1208.4829 m996.4318 4.4829 lS2208.9318 1208.4829 m1004.9318 4.4829 lS2217.4318 1208.4829 m1013.4318 4.4829 lS2225.9318 1208.4829 m1021.9318 4.4829 lS2234.4318 1208.4829 m1030.4318 4.4829 lS2242.9318 1208.4829 m1038.9318 4.4829 lS2251.4318 1208.4829 m1047.4318 4.4829 lS2259.9318 1208.4829 m1055.9318 4.4829 lS2268.4318 1208.4829 m1064.4318 4.4829 lS2276.9318 1208.4829 m1072.9318 4.4829 lS2285.4318 1208.4829 m1081.4318 4.4829 lS2293.9318 1208.4829 m1089.9318 4.4829 lS2302.4318 1208.4829 m1098.4318 4.4829 lS2310.9318 1208.4829 m1106.9318 4.4829 lS2319.4318 1208.4829 m1115.4318 4.4829 lS2327.9318 1208.4829 m1123.9318 4.4829 lS2336.4318 1208.4829 m1132.4318 4.4829 lS2344.9318 1208.4829 m1140.9318 4.4829 lS2353.4318 1208.4829 m1149.4318 4.4829 lS2361.9318 1208.4829 m1157.9318 4.4829 lS1157.8485 4.4829 mS2361.8485 1208.4829 mS2370.3485 1208.4829 m1166.3485 4.4829 lS2378.8485 1208.4829 m1174.8485 4.4829 lS2387.3485 1208.4829 m1183.3485 4.4829 lS2395.8485 1208.4829 m1191.8485 4.4829 lS2404.3485 1208.4829 m1200.3485 4.4829 lS2412.8485 1208.4829 m1208.8485 4.4829 lS2421.3485 1208.4829 m1217.3485 4.4829 lS2429.8485 1208.4829 m1225.8485 4.4829 lS2438.3485 1208.4829 m1234.3485 4.4829 lS2446.8485 1208.4829 m1242.8485 4.4829 lS2455.3485 1208.4829 m1251.3485 4.4829 lS2463.8485 1208.4829 m1259.8485 4.4829 lS2472.3485 1208.4829 m1268.3485 4.4829 lS1268.2652 4.4829 mS2472.2652 1208.4829 mS2480.7652 1208.4829 m1276.7652 4.4829 lS2489.2652 1208.4829 m1285.2652 4.4829 lS2497.7652 1208.4829 m1293.7652 4.4829 lS2506.2652 1208.4829 m1302.2652 4.4829 lS2514.7652 1208.4829 m1310.7652 4.4829 lS2523.2652 1208.4829 m1319.2652 4.4829 lS2531.7652 1208.4829 m1327.7652 4.4829 lS2540.2652 1208.4829 m1336.2652 4.4829 lS2548.7652 1208.4829 m1344.7652 4.4829 lS2557.2652 1208.4829 m1353.2652 4.4829 lS2565.7652 1208.4829 m1361.7652 4.4829 lS2574.2652 1208.4829 m1370.2652 4.4829 lS2582.7652 1208.4829 m1378.7652 4.4829 lS994.9318 893.4829 mS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Master Hatch)(Master Hatch) 798.4488 33 1412.4488 827 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer300 Ar0 J 0 j 0.25 w 3.8636 M []0 d%AI3_Note:0 D0 XR1205.4488 1208 m1.4488 4 lS1213.9488 1208 m9.9488 4 lS1222.4488 1208 m18.4488 4 lS1230.9488 1208 m26.9488 4 lS1239.4488 1208 m35.4488 4 lS1247.9488 1208 m43.9488 4 lS1256.4488 1208 m52.4488 4 lS1264.9488 1208 m60.9488 4 lS1273.4488 1208 m69.4488 4 lS1281.9488 1208 m77.9488 4 lS1290.4488 1208 m86.4488 4 lS1298.9488 1208 m94.9488 4 lS1307.4488 1208 m103.4488 4 lS1315.9488 1208 m111.9488 4 lS1324.4488 1208 m120.4488 4 lS1332.9488 1208 m128.9488 4 lS1341.4488 1208 m137.4488 4 lS1349.9488 1208 m145.9488 4 lS1358.4488 1208 m154.4488 4 lS1366.9488 1208 m162.9488 4 lS1375.4488 1208 m171.4488 4 lS1383.9488 1208 m179.9488 4 lS1392.4488 1208 m188.4488 4 lS1400.9488 1208 m196.9488 4 lS1409.4488 1208 m205.4488 4 lS1417.9488 1208 m213.9488 4 lS1426.4488 1208 m222.4488 4 lS1434.9488 1208 m230.9488 4 lS1443.4488 1208 m239.4488 4 lS1451.9488 1208 m247.9488 4 lS1460.4488 1208 m256.4488 4 lS1468.9488 1208 m264.9488 4 lS1477.4488 1208 m273.4488 4 lS1485.9488 1208 m281.9488 4 lS1494.4488 1208 m290.4488 4 lS1502.9488 1208 m298.9488 4 lS1511.4488 1208 m307.4488 4 lS1519.9488 1208 m315.9488 4 lS1528.4488 1208 m324.4488 4 lS1536.9488 1208 m332.9488 4 lS1545.4488 1208 m341.4488 4 lS1553.9488 1208 m349.9488 4 lS1562.4488 1208 m358.4488 4 lS1570.9488 1208 m366.9488 4 lS1579.4488 1208 m375.4488 4 lS1587.9488 1208 m383.9488 4 lS1596.4488 1208 m392.4488 4 lS1604.9488 1208 m400.9488 4 lS1613.4488 1208 m409.4488 4 lS1621.9488 1208 m417.9488 4 lS1630.4488 1208 m426.4488 4 lS1638.9488 1208 m434.9488 4 lS1647.4488 1208 m443.4488 4 lS1655.9488 1208 m451.9488 4 lS1664.4488 1208 m460.4488 4 lS1672.9488 1208 m468.9488 4 lS1681.4488 1208 m477.4488 4 lS1689.9488 1208 m485.9488 4 lS1698.4488 1208 m494.4488 4 lS1706.9488 1208 m502.9488 4 lS1715.4488 1208 m511.4488 4 lS1723.9488 1208 m519.9488 4 lS1732.4488 1208 m528.4488 4 lS1740.9488 1208 m536.9488 4 lS1749.4488 1208 m545.4488 4 lS1757.9488 1208 m553.9488 4 lS1766.4488 1208 m562.4488 4 lS1774.9488 1208 m570.9488 4 lS1783.4488 1208 m579.4488 4 lS1791.9488 1208 m587.9488 4 lS1800.4488 1208 m596.4488 4 lS1808.9488 1208 m604.9488 4 lS1817.4488 1208 m613.4488 4 lS1825.9488 1208 m621.9488 4 lS1834.4488 1208 m630.4488 4 lS1842.9488 1208 m638.9488 4 lS1851.4488 1208 m647.4488 4 lS1859.9488 1208 m655.9488 4 lS1868.4488 1208 m664.4488 4 lS1876.9488 1208 m672.9488 4 lS1885.4488 1208 m681.4488 4 lS1893.9488 1208 m689.9488 4 lS1902.4488 1208 m698.4488 4 lS1910.9488 1208 m706.9488 4 lS1919.4488 1208 m715.4488 4 lS1927.9488 1208 m723.9488 4 lS1936.4488 1208 m732.4488 4 lS1944.9488 1208 m740.9488 4 lS1953.4488 1208 m749.4488 4 lS1961.9488 1208 m757.9488 4 lS1970.4488 1208 m766.4488 4 lS1978.9488 1208 m774.9488 4 lS1987.4488 1208 m783.4488 4 lS1995.9488 1208 m791.9488 4 lS2004.4488 1208 m800.4488 4 lS2012.9488 1208 m808.9488 4 lS2021.4488 1208 m817.4488 4 lS2029.9488 1208 m825.9488 4 lS2038.4488 1208 m834.4488 4 lS2046.9488 1208 m842.9488 4 lS2055.4488 1208 m851.4488 4 lS2063.9488 1208 m859.9488 4 lS2072.4488 1208 m868.4488 4 lS2080.9488 1208 m876.9488 4 lS2089.4488 1208 m885.4488 4 lS2097.9488 1208 m893.9488 4 lS2106.4488 1208 m902.4488 4 lS2114.9488 1208 m910.9488 4 lS2123.4488 1208 m919.4488 4 lS2131.9488 1208 m927.9488 4 lS2140.4488 1208 m936.4488 4 lS2148.9488 1208 m944.9488 4 lS2157.4488 1208 m953.4488 4 lS2165.9488 1208 m961.9488 4 lS2174.4488 1208 m970.4488 4 lS2182.9488 1208 m978.9488 4 lS2191.4488 1208 m987.4488 4 lS2199.9488 1208 m995.9488 4 lS2208.4488 1208 m1004.4488 4 lS2216.9488 1208 m1012.9488 4 lS2225.4488 1208 m1021.4488 4 lS2233.9488 1208 m1029.9488 4 lS2242.4488 1208 m1038.4488 4 lS2250.9488 1208 m1046.9488 4 lS2259.4488 1208 m1055.4488 4 lS2267.9488 1208 m1063.9488 4 lS2276.4488 1208 m1072.4488 4 lS2284.9488 1208 m1080.9488 4 lS2293.4488 1208 m1089.4488 4 lS2301.9488 1208 m1097.9488 4 lS2310.4488 1208 m1106.4488 4 lS2318.9488 1208 m1114.9488 4 lS2327.4488 1208 m1123.4488 4 lS2335.9488 1208 m1131.9488 4 lS2344.4488 1208 m1140.4488 4 lS2352.9488 1208 m1148.9488 4 lS2361.4488 1208 m1157.4488 4 lS1157.3655 4 mS2361.3655 1208 mS2369.8655 1208 m1165.8655 4 lS2378.3655 1208 m1174.3655 4 lS2386.8655 1208 m1182.8655 4 lS2395.3655 1208 m1191.3655 4 lS2403.8655 1208 m1199.8655 4 lS2412.3655 1208 m1208.3655 4 lS2420.8655 1208 m1216.8655 4 lS2429.3655 1208 m1225.3655 4 lS2437.8655 1208 m1233.8655 4 lS2446.3655 1208 m1242.3655 4 lS2454.8655 1208 m1250.8655 4 lS2463.3655 1208 m1259.3655 4 lS2471.8655 1208 m1267.8655 4 lS1267.7822 4 mS2471.7822 1208 mS2480.2822 1208 m1276.2822 4 lS2488.7822 1208 m1284.7822 4 lS2497.2822 1208 m1293.2822 4 lS2505.7822 1208 m1301.7822 4 lS2514.2822 1208 m1310.2822 4 lS2522.7822 1208 m1318.7822 4 lS2531.2822 1208 m1327.2822 4 lS2539.7822 1208 m1335.7822 4 lS2548.2822 1208 m1344.2822 4 lS2556.7822 1208 m1352.7822 4 lS2565.2822 1208 m1361.2822 4 lS2573.7822 1208 m1369.7822 4 lS2582.2822 1208 m1378.2822 4 lS994.4488 893 mS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (New Pattern 10)(New Pattern 10) 7 19.8232 484 264.3232 [(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3 w 4 M []0 d%AI3_Note:0 D0 XR484 19.8232 m484 264.3232 L7 264.3232 L7 19.8232 L484 19.8232 Ls%AI6_EndPatternLayer) &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.5 w 4 M []0 d%AI3_Note:0 D0 XR248.2708 265.0524 mS23.6563 262.1669 mS31.5834 263.7398 m6.5834 238.7398 lS38.0105 263.8127 m7.2605 233.0627 lS44.4376 263.8856 m7.1876 226.6356 lS51.1147 264.2085 m6.8647 219.9585 lS57.5418 264.2814 m7.2918 214.0314 lS63.7189 264.1043 m6.4689 206.8543 lS69.396 263.4272 m7.646 201.6772 lS76.3231 264.0001 m7.0731 194.7501 lS83.5001 264.823 m6.2502 187.573 lS89.1772 264.1459 m8.4273 183.3959 lS95.1877 263.8022 m6.6044 175.2188 lS101.1981 263.4584 m6.5314 168.7917 lS108.8752 264.7813 m7.7085 163.6147 lS114.3856 263.9375 m7.1356 156.6876 lS120.5627 263.7604 m7.8127 151.0105 lS126.7398 263.5834 m8.2398 145.0834 lS133.2502 263.7396 m7.1669 137.6563 lS140.9273 265.0625 m8.094 132.2292 lS146.7711 264.5521 m7.7711 125.5521 lS153.4482 264.875 m7.1982 118.625 lS152.7604 264.5628 mS158.2708 263.719 m6.9375 112.3857 lS166.6146 265.7086 m7.6146 106.7086 lS170.7917 263.5315 m7.0417 99.7815 lS176.4688 262.8544 m6.7188 93.1044 lS183.1459 263.1773 m6.1459 86.1773 lS191.6563 265.3335 m6.823 80.5002 lS196.5001 263.8231 m6.5001 73.8231 lS204.3438 265.3127 m6.4272 67.396 lS209.3542 263.9689 m7.3543 61.9689 lS216.698 264.9585 m7.2814 55.5418 lS221.3751 263.2814 m7.2084 49.1147 lS226.0522 261.6043 m7.8855 43.4376 lS235.2293 264.4272 m7.8126 37.0106 lS240.7397 263.5835 m8.323 31.1668 lS247.7501 264.2397 m7.9168 24.4064 lS254.0939 264.2293 m9.8439 19.9793 lS260.771 264.5522 m17.8543 21.6355 lS266.7814 264.2084 m23.1981 20.6251 lS272.9585 264.0313 m28.6252 19.698 lS279.1356 263.8542 m35.0523 19.7709 lS285.9794 264.3438 m41.2294 19.5938 lS292.4898 264.5 m47.4065 19.4167 lS299.0002 264.6563 m54.0836 19.7396 lS304.6773 263.9792 m59.5107 18.8125 lS310.8544 263.8021 m65.9378 18.8854 lS317.3648 263.9583 m73.3648 19.9583 lS323.3753 263.6146 m80.0419 20.2812 lS476.6458 150.6774 mS326.2083 266.4482 mS329.8854 263.7711 m85.7188 19.6044 lS336.0625 263.594 m92.1459 19.6773 lS342.4063 263.5836 m99.0729 20.2502 lS348.5834 263.4065 m105.5 20.3231 lS355.7605 264.2294 m111.5938 20.0627 lS361.9376 264.0523 m117.6042 19.719 lS367.7813 263.5419 m124.2813 20.0419 lS374.1251 263.5314 m129.4584 18.8648 lS380.6355 263.6877 m136.8855 19.9377 lS387.8126 264.5106 m143.3126 20.0106 lS393.9897 264.3335 m147.9897 18.3335 lS399.6668 263.6564 m156.4168 20.4064 lS407.0105 264.646 m161.8439 19.4793 lS413.521 264.8022 m168.021 19.3022 lS419.3647 264.2918 m173.9481 18.8751 lS425.7085 264.2814 m182.0419 20.6147 lS432.2189 264.4376 m187.8023 20.0209 lS438.396 264.2605 m194.4794 20.3438 lS444.5731 264.0834 m200.4064 19.9167 lS449.9169 263.073 m206.3335 19.4897 lS456.7606 263.5625 m212.5106 19.3126 lS562.1877 362.6355 m219.4377 19.8855 lS568.7815 362.8751 m227.3648 21.4584 lS475.6252 263.3646 m233.0419 20.7813 lS482.3023 263.6875 m238.969 20.3542 lS483.4794 258.5104 m245.1461 20.1771 lS235.3232 4 mS481.5732 250.25 mS483.8021 252.8544 m252.1354 21.1878 lS484.5625 247.2607 m258.0625 20.7607 lS483.4896 239.8336 m263.4896 19.8336 lS483.1667 233.1565 m270.1667 20.1565 lS484.1771 227.8127 m276.8438 20.4794 lS483.6875 220.969 m283.2709 20.5523 lS483.8646 214.7919 m288.948 19.8752 lS483.0417 207.6148 m295.3751 19.9481 lS483.2188 201.4377 m302.3022 20.521 lS483.7292 195.5939 m307.4793 19.3439 lS484.073 189.5835 m314.6564 20.1668 lS483.4168 182.5731 m321.3334 20.4897 lS482.7605 175.5626 m327.7605 20.5626 lS483.4376 169.8855 m333.1876 19.6356 lS484.448 164.5418 m339.6147 19.7085 lS483.4585 157.198 m347.2918 21.0314 lS483.6356 151.0209 m352.7189 20.1043 lS484.646 145.6772 m358.396 19.4272 lS483.6564 138.3334 m365.8231 20.5001 lS484.1669 132.4897 m371.7502 20.073 lS482.8439 124.8126 m377.9273 19.8959 lS483.3544 118.9688 m383.8544 19.4688 lS483.1981 112.4584 m390.7815 20.0417 lS483.8752 106.7813 m397.9586 20.8646 lS483.0523 99.6042 m403.1357 19.6875 lS483.0627 93.2604 m410.5628 20.7604 lS483.4065 87.25 m416.7398 20.5833 lS483.75 81.2398 m423.1667 20.6565 lS483.2604 74.3961 m429.0938 20.2294 lS482.6042 67.3857 m433.7709 18.5523 lS482.6146 61.0419 m440.9479 19.3752 lS483.7917 55.8648 m446.875 18.9481 lS485.4688 51.1877 m453.3021 19.0211 lS482.8126 42.1773 m461.2292 20.594 lS482.6563 35.6669 m467.1563 20.1669 lS483.0001 29.6564 m473.5834 20.2398 lS483.3438 23.646 m479.5105 19.8127 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Parquet Floor)(Parquet Floor) 3.85 3.85 75.85 75.85 [(0 O 0 R 0.26 0.497 0.75 0 k 0.26 0.497 0.75 0 K) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR37.6 6.1 m37.6 10.598 L19.6 10.598 L19.6 6.1 L37.6 6.1 Ls73.6 6.1 m73.6 10.598 L55.6 10.598 L55.6 6.1 L73.6 6.1 Ls19.6 24.1 m19.6 28.598 L1.6 28.598 L1.6 24.1 L19.6 24.1 Ls55.6 24.1 m55.6 28.598 L37.6 28.598 L37.6 24.1 L55.6 24.1 Ls82.6 24.1 m82.6 28.598 L73.6 28.598 L73.6 24.1 L82.6 24.1 Ls37.6 42.1 m37.6 46.598 L19.6 46.598 L19.6 42.1 L37.6 42.1 Ls73.6 42.1 m73.6 46.598 L55.6 46.598 L55.6 42.1 L73.6 42.1 Ls19.6 60.1 m19.6 64.598 L1.6 64.598 L1.6 60.1 L19.6 60.1 Ls55.6 60.1 m55.6 64.598 L37.6 64.598 L37.6 60.1 L55.6 60.1 Ls82.6 60.1 m82.6 64.598 L73.6 64.598 L73.6 60.1 L82.6 60.1 Ls37.6 15.098 m37.6 19.598 L19.6 19.598 L19.6 15.098 L37.6 15.098 Ls73.6 15.098 m73.6 19.598 L55.6 19.598 L55.6 15.098 L73.6 15.098 Ls19.6 33.098 m19.6 37.598 L1.6 37.598 L1.6 33.098 L19.6 33.098 Ls55.6 33.098 m55.6 37.598 L37.6 37.598 L37.6 33.098 L55.6 33.098 Ls82.6 33.098 m82.6 37.598 L73.6 37.598 L73.6 33.098 L82.6 33.098 Ls37.6 51.098 m37.6 55.598 L19.6 55.598 L19.6 51.098 L37.6 51.098 Ls73.6 51.098 m73.6 55.598 L55.6 55.598 L55.6 51.098 L73.6 51.098 Ls19.6 69.098 m19.6 73.598 L1.6 73.598 L1.6 69.098 L19.6 69.098 Ls55.6 69.098 m55.6 73.598 L37.6 73.598 L37.6 69.098 L55.6 69.098 Ls82.6 69.098 m82.6 73.598 L73.6 73.598 L73.6 69.098 L82.6 69.098 Ls15.1 19.598 m10.6 19.598 L10.6 1.6 L15.1 1.6 L15.1 19.598 Ls51.1 19.598 m46.6 19.598 L46.6 1.6 L51.1 1.6 L51.1 19.598 Ls33.1 37.598 m28.6 37.598 L28.6 19.6 L33.1 19.6 L33.1 37.598 Ls69.1 37.598 m64.6 37.598 L64.6 19.6 L69.1 19.6 L69.1 37.598 Ls15.1 55.598 m10.6 55.598 L10.6 37.6 L15.1 37.6 L15.1 55.598 Ls51.1 55.598 m46.6 55.598 L46.6 37.6 L51.1 37.6 L51.1 55.598 Ls33.1 73.598 m28.6 73.598 L28.6 55.6 L33.1 55.6 L33.1 73.598 Ls69.1 73.598 m64.6 73.598 L64.6 55.6 L69.1 55.6 L69.1 73.598 Ls15.1 82.598 m10.6 82.598 L10.6 73.6 L15.1 73.6 L15.1 82.598 Ls51.1 82.598 m46.6 82.598 L46.6 73.6 L51.1 73.6 L51.1 82.598 Ls19.6 19.598 m15.1 19.598 L15.1 1.6 L19.6 1.6 L19.6 19.598 Ls55.6 19.598 m51.1 19.598 L51.1 1.6 L55.6 1.6 L55.6 19.598 Ls37.6 37.598 m33.1 37.598 L33.1 19.6 L37.6 19.6 L37.6 37.598 Ls73.6 37.598 m69.1 37.598 L69.1 19.6 L73.6 19.6 L73.6 37.598 Ls19.6 55.598 m15.1 55.598 L15.1 37.6 L19.6 37.6 L19.6 55.598 Ls55.6 55.598 m51.1 55.598 L51.1 37.6 L55.6 37.6 L55.6 55.598 Ls37.6 73.598 m33.1 73.598 L33.1 55.6 L37.6 55.6 L37.6 73.598 Ls73.6 73.598 m69.1 73.598 L69.1 55.6 L73.6 55.6 L73.6 73.598 Ls19.6 82.598 m15.1 82.598 L15.1 73.6 L19.6 73.6 L19.6 82.598 Ls55.6 82.598 m51.1 82.598 L51.1 73.6 L55.6 73.6 L55.6 82.598 Ls6.1 19.598 m1.6 19.598 L1.6 1.6 L6.1 1.6 L6.1 19.598 Ls42.1 19.598 m37.6 19.598 L37.6 1.6 L42.1 1.6 L42.1 19.598 Ls78.1 19.598 m73.6 19.598 L73.6 1.6 L78.1 1.6 L78.1 19.598 Ls24.1 37.598 m19.6 37.598 L19.6 19.6 L24.1 19.6 L24.1 37.598 Ls60.1 37.598 m55.6 37.598 L55.6 19.6 L60.1 19.6 L60.1 37.598 Ls6.1 55.598 m1.6 55.598 L1.6 37.6 L6.1 37.6 L6.1 55.598 Ls42.1 55.598 m37.6 55.598 L37.6 37.6 L42.1 37.6 L42.1 55.598 Ls78.1 55.598 m73.6 55.598 L73.6 37.6 L78.1 37.6 L78.1 55.598 Ls24.1 73.598 m19.6 73.598 L19.6 55.6 L24.1 55.6 L24.1 73.598 Ls60.1 73.598 m55.6 73.598 L55.6 55.6 L60.1 55.6 L60.1 73.598 Ls6.1 82.598 m1.6 82.598 L1.6 73.6 L6.1 73.6 L6.1 82.598 Ls42.1 82.598 m37.6 82.598 L37.6 73.6 L42.1 73.6 L42.1 82.598 Ls78.1 82.598 m73.6 82.598 L73.6 73.6 L78.1 73.6 L78.1 82.598 Ls37.6 1.6 m37.6 6.098 L19.6 6.098 L19.6 1.6 L37.6 1.6 Ls73.6 1.6 m73.6 6.098 L55.6 6.098 L55.6 1.6 L73.6 1.6 Ls19.6 19.6 m19.6 24.098 L1.6 24.098 L1.6 19.6 L19.6 19.6 Ls55.6 19.6 m55.6 24.098 L37.6 24.098 L37.6 19.6 L55.6 19.6 Ls82.6 19.6 m82.6 24.098 L73.6 24.098 L73.6 19.6 L82.6 19.6 Ls37.6 37.6 m37.6 42.098 L19.6 42.098 L19.6 37.6 L37.6 37.6 Ls73.6 37.6 m73.6 42.098 L55.6 42.098 L55.6 37.6 L73.6 37.6 Ls19.6 55.6 m19.6 60.098 L1.6 60.098 L1.6 55.6 L19.6 55.6 Ls55.6 55.6 m55.6 60.098 L37.6 60.098 L37.6 55.6 L55.6 55.6 Ls82.6 55.6 m82.6 60.098 L73.6 60.098 L73.6 55.6 L82.6 55.6 Ls37.6 73.6 m37.6 78.098 L19.6 78.098 L19.6 73.6 L37.6 73.6 Ls73.6 73.6 m73.6 78.098 L55.6 78.098 L55.6 73.6 L73.6 73.6 Ls%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Waves-Transparent)(Waves-Transparent) 4 5.89 113.125 31.693 [%AI3_Tile(0 O 0 R 1 0 0.35 0 k 1 0 0.35 0 K) @(%AI6_BeginPatternLayer800 Ar2 J 0 j 1.5 w 4 M []0 d%AI3_Note:0 D0 XR113.125 12.602 m106.95 12.602 102.306 13.907 99.484 14.73 c96.664 15.553 92.018 16.858 85.844 16.858 c79.67 16.858 75.024 15.553 72.203 14.73 c69.382 13.906 64.737 12.602 58.562 12.602 c52.388 12.602 47.743 13.907 44.922 14.73 c42.101 15.553 37.455 16.858 31.281 16.858 c25.107 16.858 20.461 15.553 17.641 14.73 c14.819 13.907 10.174 12.602 4 12.602 cS113.125 8.301 m106.95 8.301 102.306 9.606 99.484 10.429 c96.664 11.252 92.018 12.557 85.844 12.557 c79.67 12.557 75.024 11.252 72.203 10.429 c69.382 9.606 64.737 8.301 58.562 8.301 c52.388 8.301 47.743 9.606 44.922 10.429 c42.101 11.252 37.455 12.557 31.281 12.557 c25.107 12.557 20.461 11.252 17.641 10.429 c14.819 9.606 10.174 8.301 4 8.301 cS113.125 4 m106.95 4 102.306 5.305 99.484 6.128 c96.664 6.951 92.018 8.256 85.844 8.256 c79.67 8.256 75.024 6.951 72.203 6.128 c69.382 5.305 64.737 4 58.562 4 c52.388 4 47.743 5.305 44.922 6.128 c42.101 6.951 37.455 8.256 31.281 8.256 c25.107 8.256 20.461 6.951 17.641 6.128 c14.819 5.305 10.174 4 4 4 cS113.125 29.805 m106.95 29.805 102.306 31.11 99.484 31.933 c96.664 32.756 92.018 34.061 85.844 34.061 c79.67 34.061 75.024 32.756 72.203 31.933 c69.382 31.109 64.737 29.805 58.562 29.805 c52.388 29.805 47.743 31.11 44.922 31.933 c42.101 32.756 37.455 34.061 31.281 34.061 c25.107 34.061 20.461 32.756 17.641 31.933 c14.819 31.11 10.174 29.805 4 29.805 cS113.125 25.504 m106.95 25.504 102.306 26.809 99.484 27.632 c96.664 28.455 92.018 29.76 85.844 29.76 c79.67 29.76 75.024 28.455 72.203 27.632 c69.382 26.809 64.737 25.504 58.562 25.504 c52.388 25.504 47.743 26.809 44.922 27.632 c42.101 28.455 37.455 29.76 31.281 29.76 c25.107 29.76 20.461 28.455 17.641 27.632 c14.819 26.809 10.174 25.504 4 25.504 cS113.125 21.203 m106.95 21.203 102.306 22.508 99.484 23.331 c96.664 24.154 92.018 25.459 85.844 25.459 c79.67 25.459 75.024 24.154 72.203 23.331 c69.382 22.508 64.737 21.203 58.562 21.203 c52.388 21.203 47.743 22.508 44.922 23.331 c42.101 24.154 37.455 25.459 31.281 25.459 c25.107 25.459 20.461 24.154 17.641 23.331 c14.819 22.508 10.174 21.203 4 21.203 cS113.125 16.902 m106.95 16.902 102.306 18.207 99.484 19.03 c96.664 19.853 92.018 21.158 85.844 21.158 c79.67 21.158 75.024 19.853 72.203 19.03 c69.382 18.207 64.737 16.902 58.562 16.902 c52.388 16.902 47.743 18.207 44.922 19.03 c42.101 19.853 37.455 21.158 31.281 21.158 c25.107 21.158 20.461 19.853 17.641 19.03 c14.819 18.207 10.174 16.902 4 16.902 cS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D0 XR8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp7 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Green & Blue)(Green & Blue) 0 2 Bd[<99999A9A9B9B9B9C9C9D9D9D9E9E9F9F9FA0A0A1A1A1A2A2A3A3A3A4A4A5A5A5A6A6A7A7A7A8A8A9A9A9AAAAABABABACACADADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B9B9B9BABABBBBBBBCBCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9C9C9CACACBCBCBCCCCCDCDCDCECECFCFCFD0D0D1D1D1D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDDDDDDDEDEDFDFDFE0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F5F6F6F7F7F7F8F8F9F9F9FAFAFBFBFBFCFCFDFDFDFEFEFFFF><000102020304050506070808090A0B0B0C0D0E0E0F101111121314141516171718191A1A1B1C1D1D1E1F20202122232324252626272829292A2B2C2C2D2E2F2F303132323334353536373838393A3B3B3C3D3E3E3F404141424344444546474748494A4A4B4C4D4D4E4F50505152535354555656575859595A5B5C5C5D5E5F5F606162626364656566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F80808182828384858586878888898A8B8B8C8D8E8E8F909191929394949596979798999A9A9B9C9D9D9E9FA0A0A1A2A3A3A4A5A6A6A7A8A9A9AAABACACADAEAFAFB0B1B2B2B3B4B5B5B6B7B8B8B9BABBBBBCBDBEBEBF><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br[1 0.75 0 0 1 50 100 %_Bs0.6 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Purple, Red & Yellow)(Purple, Red & Yellow) 0 3 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A><CCCCCCCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D4D4D4D4D5D5D5D5D5D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDCDCDCDCDCDDDDDDDDDDDEDEDEDEDFDFDFDFDFE0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E3E3E3E3E4E4E4E4E4E5E5E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E9E9E9E9E9EAEAEAEAEAEBEBEBEBEBECECECECECEDEDEDEDEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFDFDFDFDFDFEFEFEFEFEFFFFFF>01 %_Br<E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E5E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBECECECECECECECECECEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFFFFFFFFFF><00010203040405060708090A0B0C0C0D0E0F10111213141415161718191A1B1C1D1D1E1F20212223242525262728292A2B2C2D2D2E2F30313233343535363738393A3B3C3D3D3E3F40414243444545464748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5E5E5F60616263646566666768696A6B6C6D6E6E6F70717273747576767778797A7B7C7D7E7F7F80818283848586878788898A8B8C8D8E8F8F90919293949596979798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFAFB0B1B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C8C9CACBCC>01 %_Br[0 0.04 1 0 1 50 100 %_Bs0 1 0.8 0 1 50 50 %_Bs0.9 0.9 0 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Steel Bar)(Steel Bar) 0 3 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br[0 0 50 100 %_Bs1 0 50 70 %_Bs0 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (White & Purple Radial)(White & Purple Radial) 1 2 Bd[<8C8C8B8B8A898988888787868685858483838282818180807F7F7E7D7D7C7C7B7B7A7A7978787777767675757474737272717170706F6F6E6D6D6C6C6B6B6A6A6969686767666665656464636262616160605F5F5E5E5D5C5C5B5B5A5A5959585757565655555454535352515150504F4F4E4E4D4C4C4B4B4A4A4949484847464645454444434342414140403F3F3E3E3D3D3C3B3B3A3A3939383837363635353434333332323130302F2F2E2E2D2D2C2B2B2A2A2929282827272625252424232322222120201F1F1E1E1D1D1C1C1B1A1A1919181817171615151414131312121111100F0F0E0E0D0D0C0C0B0A0A090908080707060605040403030202010100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>001 %_Br[0.55 1 0 0 1 50 10 %_Bs0 0 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 4 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A1 Ap0 O0.75 g300 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR468 555 m468 610 L435.25 610 L435.25 555 L468 555 Lf0 Ap0.9 g403 445.75 m403 534.5 l435 534.5 l435.25 554.25 l467.75 554.25 l467.75 445.5 lF1 Ap800 Ar474.75 554.75 m474.75 610.2083 L467.9375 610.2083 L467.9375 554.75 L474.75 554.75 Lf435.25 554.75 m435.25 610.25 L265.75 610.25 L265.75 554.75 L435.25 554.75 Lfu0 Ap330.75 334.75 m330.75 527.75 l378.25 527.75 l378.25 418.75 l483.25 418.75 l483.25 334.75 l330.75 334.75 lf0 R0 G0.65 w467.9375 610.2083 m467.9375 445.4583 l402.9375 445.4583 l402.9375 534.4583 l435.4375 534.4583 l435.4375 610.2083 l467.9375 610.2083 ls0 O0.9 g1 w219.25 334.75 m219.25 527.75 l304.5 527.75 l304.5 334.75 l219.25 334.75 lf0 R0 G0.65 w435.25 566 mS446.375 554.875 mS435.375 559.125 mS439.625 554.875 mS435.75 594.25 mS467.75 562.25 mS435.625 586.875 mS435.5 580.25 mS460.875 554.875 mS435.25 573.5 mS453.75 555 mS0 To1 0 0 1 168.25 584.75 0 TpTP-10.7974 0 Td0 Tr0 O0 g1 w/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(time) Tx (\r) TX TO0 To1 0 0 1 369 585 0 TpTP-10.7974 0 Td0 Tr(time) Tx (\r) TX TO0 To1 0 0 1 326.75 540.5 0 TpTP-51.2875 0 Td0 Tr(time-implementation) Tx (\r) TX TO0 To1 0 0 1 440.25 436.25 0 TpTP-29.6927 0 Td0 Tr(sixty-unit-\r) Tx -8.098 -11 Td(implementation) Tx (\r) TX TO0 To1 0 0 1 183 372.25 0 TpTP-26.9934 0 Td0 Tr(format-out) Tx (\r) TX TO0 To1 0 0 1 407 367.75 0 TpTP-13.4967 0 Td0 Tr(dylan) Tx (\r) TX TO1 Ap0 R0 G0.65 w490.25 410.75 m490.25 475.25 L391.25 475.25 L391.25 410.75 L490.25 410.75 Ls419.25 512.75 m419.25 577.25 L213.75 577.25 L213.75 512.75 L419.25 512.75 Ls0 Ap304.75 334.75 m304.75 527.75 l219.25 527.75 l219.25 334.75 lS483.25 334.75 m483.25 418.75 l378.5 418.75 l378.5 527.75 l330.75 527.75 l330.75 334.75 lS1 Ap2 w265.75 602.25 m150.75 602.25 L150.75 493.75 L511.25 493.75 L511.25 602.25 L474.75 602.25 LS265.75 602.25 mS474.75 602.25 mS403.25 482.75 m385.25 482.75 L385.25 400.75 L511.25 400.75 L511.25 482.75 L467.75 482.75 LS403.25 482.75 mS467.75 482.75 mS0 Ap511.25 334.75 m511.25 384.25 l483.25 384.25 lS330.75 384.25 m321.25 384.25 l321.25 334.75 lS304.75 384.25 m313.75 384.25 l313.75 334.75 lS219 384.25 m151 384.25 l151 334.75 lS0.65 w462.625 609.875 mS467.75 604.75 mS455.875 609.875 mS467.75 598 mS448.375 610.125 mS467.75 590.75 mS441 610 mS467.75 583.25 mS435.375 608.125 mS467.75 575.75 mS435.75 601.25 mS467.75 569.25 mS0 To1 0 0 1 435.75 462 0 TpTP-26.9934 0 Td0 Tr0 O0 g1 w(sixty-unit) Tx (\r) TX TO1 Ap0 R0 G0.65 w474.75 554.75 m474.75 610.25 L265.75 610.25 L265.75 554.75 L474.75 554.75 LsU0 To1 0 0 1 261.25 372.8125 0 TpTP-26.9934 0 Td0 Tr0 O0 g1 w(format-out) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 353 504 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "213" 227
%%Page: "214" 228
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(214) 72 677.67 T
0 F
(Chapter 13) 95.75 677.67 T
(Libraries and Modules) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(13.9  Pr) 108 638 T
(otocol design) 151.54 638 T
1 11 Q
(W) 108 617.67 T
(e can now de\336ne the) 117.99 617.67 T
4 10 Q
(angle) 220.95 617.67 T
1 11 Q
( library as another client of the) 250.95 617.67 T
4 10 Q
(sixty-unit) 402.13 617.67 T
1 11 Q
( library) 462.13 617.67 T
(.) 496.45 617.67 T
-0.14 (The interface of the) 108 603.67 P
4 10 Q
-0.31 (angle) 203.89 603.67 P
1 11 Q
-0.14 ( library consists of the classes) 233.89 603.67 P
4 10 Q
-0.31 (<angle>) 378.16 603.67 P
1 11 Q
-0.14 ( and) 420.16 603.67 P
4 10 Q
-0.31 (<directed-) 444 603.67 P
(angle>) 108 589.67 T
1 11 Q
(, and the) 144 589.67 T
4 10 Q
(say) 188.88 589.67 T
1 11 Q
( method. Uh-oh! W) 206.88 589.67 T
(e want that) 299.65 589.67 T
4 10 Q
(say) 356.91 589.67 T
1 11 Q
( method to be another) 374.91 589.67 T
-0.12 (method on the) 108 575.67 P
4 10 Q
-0.26 (say) 181.26 575.67 P
1 11 Q
-0.12 ( generic function de\336ned by the) 199.26 575.67 P
4 10 Q
-0.26 (time) 355.8 575.67 P
1 11 Q
-0.12 ( library) 379.8 575.67 P
-0.12 (, so that a client of) 414 575.67 P
(the) 108 561.67 T
4 10 Q
(time) 126.01 561.67 T
0 11 Q
(and) 152.76 561.67 T
4 10 Q
(angle) 172.01 561.67 T
1 11 Q
( libraries sees a single generic function,) 202.01 561.67 T
4 10 Q
(say) 394.3 561.67 T
1 11 Q
(, that applies to) 411.08 561.67 T
(either times or angles. This situation illustrates the value of putting a lot of) 108 547.67 T
(thought into designing our pr) 108 533.67 T
(otocols befor) 252.76 533.67 T
(e we get too deep into an implementa-) 315.03 533.67 T
(tion. The) 108 519.67 T
4 10 Q
(say) 153.86 519.67 T
1 11 Q
( generic function is a separate pr) 171.86 519.67 T
(otocol that could apply to many) 329.49 519.67 T
(classes in our system. T) 108 505.67 T
(o permit separate libraries to add methods to a Dylan) 220.93 505.67 T
(generic function, the module de\336ning the pr) 108 491.67 T
(otocol \050that is, the module de\336ning) 323.09 491.67 T
(the generic function\051 needs to be de\336ned \336rst, in a separate, common library) 108 477.67 T
(.) 477.38 477.67 T
(Other libraries then use this component library to de\336ne their particular imple-) 108 463.67 T
(mentation of the pr) 108 449.67 T
(otocol.) 201.6 449.67 T
(T) 135 435.67 T
(o cr) 140.73 435.67 T
(eate the) 158.52 435.67 T
4 10 Q
(say) 198.9 435.67 T
1 11 Q
( pr) 216.9 435.67 T
(otocol, we de\336ne a library and implementation \336le as) 230.41 435.67 T
(shown in Sections 13.9.1 thr) 108 421.67 T
(ough 13.9.4.) 242.67 421.67 T
3 13 Q
(13.9.1  The) 108 390.33 T
4 12 Q
(say-library) 165.49 390.33 T
3 13 Q
( \336le) 244.69 390.33 T
8 10 Q
(The) 210.45 351.33 T
4 9 Q
(say-library) 230.46 351.33 T
8 10 Q
( \336le:) 289.86 351.33 T
4 9 Q
(say-library.dylan) 310.98 351.33 T
8 10 Q
(.) 402.77 351.33 T
4 9 Q
(Module: dylan-user) 114 332 T
5 F
(// Library definition) 114 313 T
4 F
(define library say) 114 302 T
5 F
(// Interface modules) 124.8 291 T
4 F
(export say, say-implementor;) 124.8 280 T
5 F
(// Substrate libraries) 124.8 269 T
4 F
(use format-out;) 124.8 258 T
(use dylan;) 124.8 247 T
(end library say;) 114 236 T
5 F
(// Protocol interface) 114 217 T
4 F
(define module say) 114 206 T
(create say;) 124.8 195 T
(end module say;) 114 184 T
108 363.88 108 177.13 2 L
V
0.25 H
0 Z
N
522 363.88 522 177.13 2 L
V
N
107.88 364 522.12 364 2 L
V
N
107.88 344 522.12 344 2 L
V
N
107.88 177 522.12 177 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "214" 228
%%Page: "215" 229
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.9 Protocol design) 438.24 677.67 T
2 F
(215) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(13.9.2  The) 108 462.33 T
4 12 Q
(say) 165.49 462.33 T
3 13 Q
( implementation \336le) 187.09 462.33 T
1 11 Q
-0.15 (Her) 108 351.67 P
-0.15 (e, we have cr) 126.57 351.67 P
-0.15 (eated the r) 189.26 351.67 P
-0.15 (ecommended interface and implementation str) 240.21 351.67 P
-0.15 (uctur) 467.49 351.67 P
-0.15 (e,) 493.38 351.67 P
-0.44 (having learned our lesson with the) 108 337.67 P
4 10 Q
-0.96 (sixty-unit) 277.21 337.67 P
1 11 Q
-0.44 ( module. Even though it looks like) 337.21 337.67 P
(overkill to have a separate implementation module for a single generic function) 108 323.67 T
(de\336nition, we have planned for futur) 108 309.67 T
(e expansion.) 288.55 309.67 T
-0.36 (The) 135 295.67 P
4 10 Q
-0.79 (say) 155.8 295.67 P
1 11 Q
-0.36 ( pr) 173.8 295.67 P
-0.36 (otocol library is an example of the multiple-interface capability of) 186.95 295.67 P
(Dylan libraries. The) 108 281.67 T
4 10 Q
(say) 206.96 281.67 T
1 11 Q
( library has two interfaces that it makes available:) 224.96 281.67 T
4 10 Q
(say) 468.15 281.67 T
1 11 Q
(de\336nes the) 108 267.67 T
4 10 Q
(say) 163.74 267.67 T
1 11 Q
( pr) 181.74 267.67 T
(otocol, and) 195.24 267.67 T
4 10 Q
(say-implementor) 251.81 267.67 T
1 11 Q
( pr) 341.81 267.67 T
(ovides the substrate for pr) 355.32 267.67 T
(oto-) 482.75 267.67 T
(col implementors. This interface is cleaner than the one that we used for) 108 253.67 T
4 10 Q
(sixty-) 460.08 253.67 T
(unit) 108 239.67 T
1 11 Q
(, wher) 132 239.67 T
(e) 162.49 239.67 T
4 10 Q
(encode-total-seconds) 170.51 239.67 T
1 11 Q
( played mor) 290.51 239.67 T
(e of an interface r) 349.3 239.67 T
(ole, and) 433.4 239.67 T
4 10 Q
(<sixty-unit>) 108 225.67 T
1 11 Q
( and) 180 225.67 T
4 10 Q
(decode-total-seconds) 204.12 225.67 T
1 11 Q
( played mor) 324.12 225.67 T
(e of a substrate r) 382.91 225.67 T
(ole. The) 462.82 225.67 T
(r) 108 211.67 T
(esult is seen in the clients of the) 112.15 211.67 T
4 10 Q
(sixty-unit) 267.96 211.67 T
1 11 Q
( library) 327.96 211.67 T
(, who must split out these) 362.28 211.67 T
(r) 108 197.67 T
(oles for themselves.) 112.15 197.67 T
(Note that the) 135 183.67 T
4 10 Q
(say-implementor) 201.58 183.67 T
1 11 Q
( module is both a client and an interface) 291.58 183.67 T
(module. It is the interface of the) 108 169.67 T
4 10 Q
(say) 265 169.67 T
1 11 Q
( pr) 283 169.67 T
(otocol for clients who will implement) 296.51 169.67 T
4 10 Q
(say) 481.24 169.67 T
1 11 Q
-0.1 (methods, and it is a client of the) 108 155.67 P
4 10 Q
-0.22 (format-out) 264.54 155.67 P
1 11 Q
-0.1 ( module. Because most) 324.54 155.67 P
4 10 Q
-0.22 (say) 438.34 155.67 P
1 11 Q
-0.1 ( methods) 456.34 155.67 P
5 9 Q
(// Implementor interface) 114 616 T
4 F
(define module say-implementor) 114 605 T
(use say, export: all;) 124.8 594 T
(use format-out, export: all;) 124.8 583 T
(end module say-implementor;) 114 572 T
5 F
(// Implementation module) 114 553 T
4 F
(define module say-implementation) 114 542 T
(use say;) 124.8 531 T
(use dylan;) 124.8 520 T
(end module say-implementation;) 114 509 T
8 10 Q
(The) 218.35 423.33 T
4 9 Q
(say) 238.37 423.33 T
8 10 Q
( implementation \336le:) 254.57 423.33 T
4 9 Q
(say.dylan) 346.27 423.33 T
8 10 Q
(.) 394.86 423.33 T
4 9 Q
(Module: say-implementation) 114 404 T
(define open generic say \050object :: <object>\051 => \050\051;) 114 385 T
8 10 Q
(The) 184.1 635.33 T
4 9 Q
(say-library) 204.1 635.33 T
8 10 Q
( \336le:) 263.51 635.33 T
4 9 Q
(say-library.dylan) 284.62 635.33 T
8 10 Q
(.) 376.42 635.33 T
9 F
( \050contin) 379.2 635.33 T
(ued\051) 411.89 635.33 T
108 647.88 108 502.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 502.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 502 522.12 502 2 L
V
N
108 435.88 108 378.12 2 L
V
N
522 435.88 522 378.12 2 L
V
N
107.88 436 522.12 436 2 L
V
N
107.88 416 522.12 416 2 L
V
N
107.88 378 522.12 378 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "215" 229
%%Page: "216" 230
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(216) 72 677.67 T
0 F
(Chapter 13) 95.75 677.67 T
(Libraries and Modules) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(use) 108 640.67 T
4 10 Q
(format-out) 127.32 640.67 T
1 11 Q
( in their implementations, it makes sense to r) 187.32 640.67 T
(e-export all of the) 404.85 640.67 T
4 10 Q
(format-out) 108 626.67 T
1 11 Q
( module for) 168 626.67 T
4 10 Q
(say-implementor) 227.81 626.67 T
1 11 Q
( clients.) 317.81 626.67 T
(The explicit de\336nition of the) 135 612.67 T
4 10 Q
(say) 275.16 612.67 T
1 11 Q
( generic function is good pr) 293.16 612.67 T
(otocol docu-) 426.65 612.67 T
(mentation. It is also r) 108 598.67 T
(equir) 210.09 598.67 T
(ed: All module variables must have a de\336nition for a) 235.5 598.67 T
(library to be complete. \050An alternative would have been to de\336ne a default) 108 584.67 T
(method for) 108 570.67 T
4 10 Q
(say) 165.21 570.67 T
1 11 Q
(, which would also cr) 181.99 570.67 T
(eate an implicit generic-function de\336nition.) 285.94 570.67 T
(However) 108 556.67 T
(, implicit generic-function de\336nitions ar) 152.62 556.67 T
(e) 345.64 556.67 T
2 F
(sealed) 353.66 556.67 T
1 F
(, and, for a pr) 385.43 556.67 T
(otocol, we) 450.83 556.67 T
(need an) 108 542.67 T
2 F
(open) 149.06 542.67 T
1 F
( generic function, because we intend clients to add methods to it.) 174.12 542.67 T
(The exact implications of this declaration ar) 108 528.67 T
(e discussed in Chapter 19,) 319.78 528.67 T
0 F
(Performance and Flexibility) 108 514.67 T
1 F
(.\051 The designer of the) 230.03 514.67 T
4 10 Q
(say) 335.52 514.67 T
1 11 Q
( pr) 353.52 514.67 T
(otocol still has to choose) 367.03 514.67 T
(whether to r) 108 500.67 T
(equir) 167.69 500.67 T
(e each type to de\336ne its own) 193.1 500.67 T
4 10 Q
(say) 334.19 500.67 T
1 11 Q
( method, or to pr) 352.19 500.67 T
(ovide a uni-) 434.34 500.67 T
-0.42 (versal default. In this case, we choose not to pr) 108 486.67 P
-0.42 (ovide a default, so that an err) 330.56 486.67 P
-0.42 (or will) 470.2 486.67 P
(be signaled if) 108 472.67 T
4 10 Q
(say) 175.54 472.67 T
1 11 Q
( is called on a type that does not either pr) 193.54 472.67 T
(ovide or inherit a) 393.73 472.67 T
4 10 Q
(say) 480.4 472.67 T
1 11 Q
(method.) 108 458.67 T
(T) 108 216.67 T
(o complete our r) 113.73 216.67 T
(estr) 193.66 216.67 T
(ucturing, we must r) 211.43 216.67 T
(eor) 307.42 216.67 T
(ganize the) 322.84 216.67 T
4 10 Q
(time) 375.59 216.67 T
1 11 Q
( library and module) 399.59 216.67 T
(\336les to use the) 108 202.67 T
4 10 Q
(say) 180.2 202.67 T
1 11 Q
( pr) 198.2 202.67 T
(otocol, so that the) 211.71 202.67 T
4 10 Q
(say) 300.15 202.67 T
1 11 Q
( pr) 318.15 202.67 T
(otocol is shar) 331.66 202.67 T
(ed with the) 395.43 202.67 T
4 10 Q
(angle) 453.29 202.67 T
1 11 Q
(library that we intend to build.) 108 188.67 T
2 F
-0.3 (Comparison with C++:) 141 424.67 P
1 F
-0.3 ( Dylan modules enfor) 254.86 424.67 P
-0.3 (ce a str) 359.65 424.67 P
-0.3 (uctur) 392.72 424.67 P
-0.3 (ed design of) 418.61 424.67 P
-0.4 (pr) 141 410.67 P
-0.4 (otocols. T) 151.76 410.67 P
-0.4 (o cr) 196.95 410.67 P
-0.4 (eate a shar) 214.34 410.67 P
-0.4 (ed pr) 264.89 410.67 P
-0.4 (otocol, to which methods can be added) 289.99 410.67 P
-0.05 (fr) 141 396.67 P
-0.05 (om independent libraries, we must ensur) 148.81 396.67 P
-0.05 (e that the module de\336ning) 348.59 396.67 P
(the pr) 141 382.67 T
(otocol \050the module de\336ning the generic function\051 is de\336ned) 169.76 382.67 T
(\336rst, in a separate, common library) 141 368.67 T
(. The common library de\336nes the) 309.64 368.67 T
(pr) 141 354.67 T
(otocol in one place, easing documentation and maintenance.) 151.76 354.67 T
(In C++ however) 168 340.67 T
(, a) 246.61 340.67 T
4 10 Q
(using) 260.36 340.67 T
1 11 Q
( dir) 290.36 340.67 T
(ective can cr) 307.17 340.67 T
(eate a local alias to) 366.92 340.67 T
(overload a function in any other library) 141 326.67 T
(, even if it is in another) 331.84 326.67 T
(namespace.) 141 312.67 T
(The library-use r) 168 298.67 T
(elationships of Dylan modules form a) 249.08 298.67 T
(dir) 141 284.67 T
(ected graph, centralizing shar) 155.07 284.67 T
(ed functionality) 299.09 284.67 T
(, wher) 374.99 284.67 T
(eas C++) 405.48 284.67 T
-0.09 (namespaces can be inter) 141 270.67 P
-0.09 (connected arbitrarily) 258.21 270.67 P
-0.09 (, making documenta-) 358.5 270.67 P
(tion and maintenance of shar) 141 256.67 T
(ed pr) 282.33 256.67 T
(otocols dif) 307.83 256.67 T
(\336cult.) 358.32 256.67 T
135 437.88 135 249.13 2 L
V
0.25 H
0 Z
N
486 437.88 486 249.13 2 L
V
N
134.88 438 486.12 438 2 L
V
N
134.88 249 486.12 249 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "216" 230
%%Page: "217" 231
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.9 Protocol design) 438.24 677.67 T
2 F
(217) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(13.9.3  The updated) 108 639.33 T
4 12 Q
(time-library) 209.91 639.33 T
3 13 Q
( \336le) 296.31 639.33 T
1 11 Q
(The) 108 237.67 T
4 10 Q
(time) 129.16 237.67 T
1 11 Q
( module is modi\336ed to use) 153.16 237.67 T
4 10 Q
(say) 285.52 237.67 T
1 11 Q
(, which it exports to its clients. The) 302.3 237.67 T
(implementation module is modi\336ed to use) 108 223.67 T
4 10 Q
(say-implementor) 318.01 223.67 T
1 11 Q
(, which includes) 407.2 223.67 T
4 10 Q
(format-out) 108 209.67 T
1 11 Q
(, so it would be super\337uous to continue to include) 168 209.67 T
4 10 Q
(format-out) 414.82 209.67 T
1 11 Q
( in) 474.82 209.67 T
4 10 Q
(time-implementation) 108 195.67 T
1 11 Q
(. Similarly) 222 195.67 T
(, the) 270.53 195.67 T
4 10 Q
(time) 294.04 195.67 T
1 11 Q
(library de\336nition r) 324.04 195.67 T
(eplaces its use of) 413.92 195.67 T
(the) 108 181.67 T
4 10 Q
(format-out) 126.01 181.67 T
1 11 Q
( library with the) 186.01 181.67 T
4 10 Q
(say) 267.42 181.67 T
1 11 Q
( library) 285.42 181.67 T
(.) 319.74 181.67 T
(Note that the compiler r) 135 167.67 T
(ecursively \336nds all the libraries necessary for com-) 251.71 167.67 T
(pilation. In this case, the) 108 153.67 T
4 10 Q
(format-out) 228.49 153.67 T
1 11 Q
( library will be included in the compilation) 288.49 153.67 T
(of the) 108 139.67 T
4 10 Q
(time) 138.43 139.67 T
1 11 Q
( library) 162.43 139.67 T
(, even though it is not dir) 196.75 139.67 T
(ectly named.) 319.01 139.67 T
8 10 Q
(The) 205.04 600.33 T
4 9 Q
(time-library) 225.05 600.33 T
8 10 Q
( \336le:) 289.86 600.33 T
4 9 Q
(time-library.dylan) 310.98 600.33 T
8 10 Q
(.) 408.17 600.33 T
4 9 Q
(Module: dylan-user) 114 581 T
5 F
(// Library definition) 114 562 T
4 F
(define library time) 114 551 T
5 F
(// Interface module) 124.8 540 T
4 F
(export time;) 124.8 529 T
5 F
(// Substrate libraries) 124.8 518 T
4 F
(use sixty-unit;) 124.8 507 T
(use say;) 124.8 496 T
(use dylan;) 124.8 485 T
(end library time;) 114 474 T
5 F
(// Interface module) 114 455 T
4 F
(define module time) 114 444 T
5 F
(// Classes) 124.8 433 T
4 F
(create <time>, <time-of-day>, <time-offset>;) 124.8 422 T
5 F
(// Shared protocol) 124.8 411 T
4 F
(use say, export: all;) 124.8 400 T
(use sixty-unit, import: { encode-total-seconds }, export: all;) 124.8 389 T
(end module time;) 114 378 T
5 F
(// Implementation module) 114 359 T
4 F
(define module time-implementation) 114 348 T
5 F
(// External interface) 124.8 337 T
4 F
(use time;) 124.8 326 T
5 F
(// Substrate modules) 124.8 315 T
4 F
(use sixty-unit;) 124.8 304 T
(use say-implementor;) 124.8 293 T
(use dylan;) 124.8 282 T
(end module time-implementation;) 114 271 T
108 612.88 108 264.12 2 L
V
0.25 H
0 Z
N
522 612.88 522 264.12 2 L
V
N
107.88 613 522.12 613 2 L
V
N
107.88 593 522.12 593 2 L
V
N
107.88 264 522.12 264 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "217" 231
%%Page: "218" 232
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(218) 72 677.67 T
0 F
(Chapter 13) 95.75 677.67 T
(Libraries and Modules) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(13.9.4  The) 108 639.33 T
4 12 Q
(angle) 165.49 639.33 T
3 13 Q
( librar) 201.49 639.33 T
(y) 231.22 639.33 T
1 11 Q
(At this point, we ar) 108 619.67 T
(e r) 201.64 619.67 T
(eady to de\336ne the) 213.81 619.67 T
4 10 Q
(angle) 303.58 619.67 T
1 11 Q
( library) 333.58 619.67 T
(, which will shar) 367.9 619.67 T
(e the) 448.45 619.67 T
4 10 Q
-0.19 (sixty-unit) 108 605.67 P
1 11 Q
-0.09 ( and) 168 605.67 P
4 10 Q
-0.19 (say) 191.95 605.67 P
1 11 Q
-0.09 ( libraries with the) 209.95 605.67 P
4 10 Q
-0.19 (time) 298.04 605.67 P
1 11 Q
-0.09 ( library) 322.04 605.67 P
-0.09 (. In Chapter 14,) 356.27 605.67 P
0 F
-0.09 (Four Complete) 435.72 605.67 P
(Libraries) 108 591.67 T
1 F
(, we pr) 147.32 591.67 T
(esent the consolidated changes to the) 180.78 591.67 T
4 10 Q
(sixty-unit) 363.97 591.67 T
1 11 Q
(,) 423.97 591.67 T
4 10 Q
(say) 429.47 591.67 T
1 11 Q
(, and) 446.25 591.67 T
4 10 Q
(time) 473.12 591.67 T
1 11 Q
(libraries that we have developed in this chapter) 108 577.67 T
(, followed by the complete de\336ni-) 338.48 577.67 T
(tion of the) 108 563.67 T
4 10 Q
(angle) 160.37 563.67 T
1 11 Q
( library) 190.37 563.67 T
(.) 224.69 563.67 T
3 15 Q
(13.10  Summar) 108 524 T
(y) 194.96 524 T
1 11 Q
(In this chapter) 108 503.67 T
(, we cover) 177.24 503.67 T
(ed the following:) 226.46 503.67 T
(\245) 117 483.67 T
(W) 135 483.67 T
(e illustrated Dylan modules and libraries.) 144.99 483.67 T
(\245) 117 463.67 T
(W) 135 463.67 T
(e showed how to design modules using thr) 144.99 463.67 T
(ee r) 354.65 463.67 T
(oles: interface modules,) 372.08 463.67 T
(implementation modules, and client modules.) 135 449.67 T
(\245) 117 429.67 T
(W) 135 429.67 T
(e described how a library might appear in Dylan inter) 144.99 429.67 T
(change format.) 406.83 429.67 T
(\245) 117 409.67 T
(W) 135 409.67 T
(e showed how to cr) 144.99 409.67 T
(eate a component library) 239.7 409.67 T
(.) 359.52 409.67 T
(\245) 117 389.67 T
(W) 135 389.67 T
(e illustrated the complexity of component and pr) 144.99 389.67 T
(otocol design.) 382.86 389.67 T
(\245) 117 369.67 T
(W) 135 369.67 T
(e discussed how to cr) 144.99 369.67 T
(eate a pr) 248.88 369.67 T
(otocol that can be extended by multiple cli-) 290.27 369.67 T
(ent libraries.) 135 355.67 T
(\245) 117 335.67 T
(W) 135 335.67 T
(e discussed namespaces in Dylan, and their applicable scope; see T) 144.99 335.67 T
(able) 468.34 335.67 T
(13.1.) 135 321.67 T
8 F
(Namespace) 185.59 292.67 T
(Scope) 311.75 292.67 T
(libr) 185.59 269.67 T
(ar) 200.14 269.67 T
(y) 210.25 269.67 T
(global) 311.75 269.67 T
(module) 185.59 246.67 T
(per libr) 311.75 246.67 T
(ar) 345.26 246.67 T
(y) 355.36 246.67 T
(constant or v) 185.59 223.67 T
(ar) 248.29 223.67 T
(iab) 258.23 223.67 T
(le) 272.68 223.67 T
(per module) 311.75 223.67 T
(symbol or k) 185.59 200.67 T
(e) 241.6 200.67 T
(yw) 247.49 200.67 T
(ord) 260.83 200.67 T
(global) 311.75 200.67 T
108 163.01 522 171 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 234.27 174.33 T
(ab) 239.58 174.33 T
(le 13.1) 251.15 174.33 T
8 F
(Namespace scopes) 287.29 174.33 T
(.) 374.95 174.33 T
179.59 305.88 179.59 191.13 2 L
V
0.25 H
0 Z
N
450.42 305.88 450.42 191.13 2 L
V
N
179.46 306 450.54 306 2 L
V
N
179.46 283 450.54 283 2 L
V
N
179.46 191 450.54 191 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "218" 232
%%Page: "219" 233
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.10 Summary) 454.49 677.67 T
2 F
(219) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(\245) 117 640.67 T
(W) 135 640.67 T
(e described the r) 144.99 640.67 T
(oles of modules and the de\336nition clauses that modules) 225.07 640.67 T
(use; see T) 135 626.67 T
(able 13.2.) 180.75 626.67 T
8 F
(Role) 185.59 597.67 T
(Example clause) 311.75 597.67 T
(interf) 185.59 574.67 T
(ace) 209.71 574.67 T
5 9 Q
(// Interface class) 311.75 576 T
4 F
(create <time>;) 311.75 565 T
5 F
(// Re-exported interface) 311.75 554 T
4 F
(use say, export: all;) 311.75 543 T
8 11 Q
(client) 185.59 520.67 T
5 9 Q
(// Substrate module) 311.75 522 T
4 F
(use dylan;) 311.75 511 T
8 11 Q
(implementation) 185.59 488.67 T
5 9 Q
(// Interface module) 311.75 490 T
4 F
(use time;) 311.75 479 T
8 11 Q
(implementation and) 185.59 456.67 T
(interf) 185.59 440.67 T
(ace) 209.71 440.67 T
5 9 Q
(// Interface protocol) 311.75 458 T
4 F
(export say;) 311.75 447 T
108 403.01 522 411 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 249.55 414.33 T
(ab) 254.87 414.33 T
(le 13.2) 266.43 414.33 T
8 F
(Module roles) 302.58 414.33 T
(.) 359.67 414.33 T
179.59 610.88 179.59 431.12 2 L
V
0.25 H
0 Z
N
450.42 610.88 450.42 431.12 2 L
V
N
179.46 611 450.54 611 2 L
V
N
179.46 588 450.54 588 2 L
V
N
179.46 431 450.54 431 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "219" 233
%%Page: "220" 234
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 126 522 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "220" 234
%%Page: "221" 235
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(221) 298.88 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(14) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(14) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Four Complete Libraries) 110 566.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
(In this chapter) 108 424.67 T
(, we show all the \336les that the complete) 177.24 424.67 T
4 10 Q
(time) 371.25 424.67 T
1 11 Q
(,) 395.25 424.67 T
4 10 Q
(angle) 400.75 424.67 T
1 11 Q
(,) 430.75 424.67 T
4 10 Q
(sixty-unit) 436.25 424.67 T
1 11 Q
(,) 496.25 424.67 T
(and) 108 410.67 T
4 10 Q
(say) 129.37 410.67 T
1 11 Q
( libraries comprise.) 147.37 410.67 T
3 15 Q
(14.1  The) 108 371 T
4 14 Q
(sixty-unit) 164.07 371 T
3 15 Q
( librar) 248.07 371 T
(y) 282.38 371 T
1 11 Q
-0.23 (The) 108 350.67 P
4 10 Q
-0.5 (sixty-unit) 128.93 350.67 P
1 11 Q
-0.23 ( library is an example of a shar) 188.93 350.67 P
-0.23 (ed substrate library) 336.26 350.67 P
-0.23 (. Both the) 429.19 350.67 P
4 10 Q
-0.5 (time) 477.48 350.67 P
1 11 Q
-0.03 (and) 108 336.67 P
4 10 Q
-0.05 (angle) 129.35 336.67 P
1 11 Q
-0.03 ( libraries use the) 159.35 336.67 P
4 10 Q
-0.05 (sixty-unit) 241.88 336.67 P
1 11 Q
-0.03 ( library to cr) 301.88 336.67 P
-0.03 (eate mor) 361.47 336.67 P
-0.03 (e specialized classes) 403.69 336.67 P
(that build on a common substrate.) 108 322.67 T
(The) 135 308.67 T
4 10 Q
(sixty-unit) 156.16 308.67 T
1 11 Q
( library comprises two Dylan inter) 216.16 308.67 T
(change-format \336les: a) 383.17 308.67 T
-0.35 (library \336le, containing the library and module de\336nitions; and an implementation) 108 294.67 P
-0.32 (\336le, containing a single sour) 108 280.67 P
-0.32 (ce r) 243.11 280.67 P
-0.32 (ecor) 259.84 280.67 P
-0.32 (d, de\336ning the generic function that is the) 280.15 280.67 P
4 10 Q
-0.69 (say) 483.57 280.67 P
1 11 Q
(pr) 108 266.67 T
(otocol. For completeness, we also show the LID \336le that describes the library) 118.76 266.67 T
(and its component \336les.) 108 252.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "221" 235
%%Page: "222" 236
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(222) 72 677.67 T
0 F
(Chapter 14) 95.75 677.67 T
(Four Complete Libraries) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(14.1.1  The) 108 639.33 T
4 12 Q
(sixty-unit-library) 165.49 639.33 T
3 13 Q
( \336le) 295.09 639.33 T
(14.1.2  The) 108 278.33 T
4 12 Q
(sixty-unit) 165.49 278.33 T
3 13 Q
( implementation \336le) 237.49 278.33 T
8 10 Q
(The) 172.35 600.33 T
4 9 Q
(sixty-unit-librar) 192.35 600.33 T
4 10 Q
(y) 284.15 600.33 T
8 F
( \336le:) 290.15 600.33 T
4 9 Q
(sixty-unit-library.dylan) 311.27 600.33 T
8 10 Q
(.) 440.88 600.33 T
4 9 Q
(Module: dylan-user) 114 581 T
5 F
(// Library definition) 114 562 T
4 F
(define library sixty-unit) 114 551 T
5 F
(// Interface module) 124.8 540 T
4 F
(export sixty-unit;) 124.8 529 T
5 F
(// Substrate library) 124.8 518 T
4 F
(use dylan;) 124.8 507 T
(end library sixty-unit;) 114 496 T
5 F
(// Interface module) 114 477 T
4 F
(define module sixty-unit) 114 466 T
5 F
(// Classes) 124.8 455 T
4 F
(create <sixty-unit>;) 124.8 444 T
5 F
(// Generics) 124.8 433 T
4 F
(create total-seconds, encode-total-seconds, decode-total-seconds;) 124.8 422 T
(end module sixty-unit;) 114 411 T
5 F
(// Implementation module) 114 392 T
4 F
(define module sixty-unit-implementation) 114 381 T
5 F
(// External interface) 124.8 370 T
4 F
(use sixty-unit;) 124.8 359 T
5 F
(// Substrate module) 124.8 348 T
4 F
(use dylan;) 124.8 337 T
(end module sixty-unit;) 114 326 T
8 10 Q
(The) 180.55 239.33 T
4 9 Q
(sixty-unit) 200.57 239.33 T
8 10 Q
( implementation \336le:) 254.57 239.33 T
4 9 Q
(sixty-unit.dylan) 346.27 239.33 T
8 10 Q
(.) 432.67 239.33 T
4 9 Q
(Module: sixty-unit-implementation) 114 220 T
(define open abstract class <sixty-unit> \050<object>\051) 114 201 T
(slot total-seconds :: <integer>, required-init-keyword: total-seconds:;) 124.8 190 T
(end class <sixty-unit>;) 114 179 T
108 612.88 108 319.12 2 L
V
0.25 H
0 Z
N
522 612.88 522 319.12 2 L
V
N
107.88 613 522.12 613 2 L
V
N
107.88 593 522.12 593 2 L
V
N
107.88 319 522.12 319 2 L
V
N
108 251.88 108 172.12 2 L
V
N
522 251.88 522 172.12 2 L
V
N
107.88 252 522.12 252 2 L
V
N
107.88 232 522.12 232 2 L
V
N
107.88 172 522.12 172 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "222" 236
%%Page: "223" 237
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14.2 The) 435.11 677.67 T
5 F
(say) 470.74 677.67 T
0 F
( library) 487.84 677.67 T
2 F
(223) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(14.1.3  The) 108 377.33 T
4 12 Q
(sixty-unit) 165.49 377.33 T
3 13 Q
( LID \336le) 237.49 377.33 T
3 15 Q
(14.2  The) 108 256 T
4 14 Q
(say) 164.07 256 T
3 15 Q
( librar) 189.27 256 T
(y) 223.57 256 T
1 11 Q
(The) 108 235.67 T
4 10 Q
(say) 129.16 235.67 T
1 11 Q
( library is an example of a library that de\336nes a shar) 147.16 235.67 T
(ed pr) 399.44 235.67 T
(otocol. All our) 424.94 235.67 T
-0.22 (other libraries use the) 108 221.67 P
4 10 Q
-0.48 (say) 215.36 221.67 P
1 11 Q
-0.22 ( library) 233.36 221.67 P
-0.22 (, so that they can add to the) 267.46 221.67 P
4 10 Q
-0.48 (say) 402.15 221.67 P
1 11 Q
-0.22 ( generic function) 420.15 221.67 P
(methods that appr) 108 207.67 T
(opriately display the objects of the classes that they de\336ne.) 197.8 207.67 T
-0.06 (The) 135 193.67 P
4 10 Q
-0.13 (say) 156.1 193.67 P
1 11 Q
-0.06 ( library comprises two Dylan inter) 174.1 193.67 P
-0.06 (change-format \336les: a library \336le,) 340.8 193.67 P
(containing the library and module de\336nitions; and an implementation \336le, con-) 108 179.67 T
(taining a single sour) 108 165.67 T
(ce r) 206.46 165.67 T
(ecor) 223.51 165.67 T
(d, de\336ning the generic function that is the) 243.82 165.67 T
4 10 Q
(say) 449.77 165.67 T
1 11 Q
( pr) 467.77 165.67 T
(oto-) 481.28 165.67 T
(col. For completeness, we also show the LID \336le that describes the library and its) 108 151.67 T
(component \336les.) 108 137.67 T
4 9 Q
(define method encode-total-seconds) 114 616 T
(\050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 135.6 605 T
(=>) 119.4 594 T
(\050total-seconds :: <integer>\051) 135.6 594 T
(\050\050max-unit * 60\051 + minutes\051 * 60 + seconds;) 124.8 583 T
(end method encode-total-seconds;) 114 572 T
(define method decode-total-seconds) 114 553 T
(\050sixty-unit :: <sixty-unit>\051) 135.6 542 T
(=> \050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 119.4 531 T
(decode-total-seconds\050sixty-unit.total-seconds\051;) 124.8 520 T
(end method decode-total-seconds;) 114 509 T
(define method decode-total-seconds) 114 490 T
(\050total-seconds :: <integer>\051) 135.6 479 T
(=> \050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 119.4 468 T
(let\050total-minutes, seconds\051 = truncate/\050abs\050total-seconds\051, 60\051;) 124.8 457 T
(let\050max-unit, minutes\051 = truncate/\050total-minutes, 60\051;) 124.8 446 T
(values\050max-unit, minutes, seconds\051;) 124.8 435 T
(end method decode-total-seconds;) 114 424 T
8 10 Q
(The LID \336le:) 240.46 338.33 T
4 9 Q
(sixty-unit.lid) 297.15 338.33 T
8 10 Q
(.) 372.76 338.33 T
4 9 Q
(library:) 114 319 T
(sixty-unit) 162.6 319 T
(files:) 114 308 T
(sixty-unit-library) 162.6 308 T
(sixty-unit) 162.6 297 T
8 10 Q
(The) 154.21 635.33 T
4 9 Q
(sixty-unit) 174.21 635.33 T
8 10 Q
( implementation \336le:) 228.21 635.33 T
4 9 Q
(sixty-unit.dylan) 319.92 635.33 T
8 10 Q
(.) 406.32 635.33 T
9 F
( \050contin) 409.1 635.33 T
(ued\051) 441.79 635.33 T
108 647.88 108 417.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 417.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 417 522.12 417 2 L
V
N
108 350.88 108 290.12 2 L
V
N
522 350.88 522 290.12 2 L
V
N
107.88 351 522.12 351 2 L
V
N
107.88 331 522.12 331 2 L
V
N
107.88 290 522.12 290 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "223" 237
%%Page: "224" 238
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(224) 72 677.67 T
0 F
(Chapter 14) 95.75 677.67 T
(Four Complete Libraries) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(14.2.1  The) 108 639.33 T
4 12 Q
(say-library) 165.49 639.33 T
3 13 Q
( \336le) 244.69 639.33 T
(14.2.2  The) 108 274.33 T
4 12 Q
(say) 165.49 274.33 T
3 13 Q
( implementation \336le) 187.09 274.33 T
8 10 Q
(The) 210.45 600.33 T
4 9 Q
(say-library) 230.46 600.33 T
8 10 Q
( \336le:) 289.86 600.33 T
4 9 Q
(say-library.dylan) 310.98 600.33 T
8 10 Q
(.) 402.77 600.33 T
4 9 Q
(Module: dylan-user) 114 581 T
5 F
(// Library definition) 114 562 T
4 F
(define library say) 114 551 T
5 F
(// Interface modules) 124.8 540 T
4 F
(export say, say-implementor;) 124.8 529 T
5 F
(// Substrate libraries) 124.8 518 T
4 F
(use format-out;) 124.8 507 T
(use dylan;) 124.8 496 T
(end library say;) 114 485 T
5 F
(// Protocol interface) 114 466 T
4 F
(define module say) 114 455 T
(create say;) 124.8 444 T
(end module say;) 114 433 T
5 F
(// Implementor interface) 114 414 T
4 F
(define module say-implementor) 114 403 T
(use say, export: all;) 124.8 392 T
(use format-out, export: all;) 124.8 381 T
(end module say-implementor;) 114 370 T
5 F
(// Implementation module) 114 351 T
4 F
(define module say-implementation) 114 340 T
(use say;) 124.8 329 T
(use dylan;) 124.8 318 T
(end module say-implementation;) 114 307 T
8 10 Q
(The) 218.35 235.33 T
4 9 Q
(say) 238.37 235.33 T
8 10 Q
( implementation \336le:) 254.57 235.33 T
4 9 Q
(say.dylan) 346.27 235.33 T
8 10 Q
(.) 394.86 235.33 T
4 9 Q
(Module: say-implementation) 114 216 T
(define open generic say \050object :: <object>\051 => \050\051;) 114 197 T
108 612.88 108 300.12 2 L
V
0.25 H
0 Z
N
522 612.88 522 300.12 2 L
V
N
107.88 613 522.12 613 2 L
V
N
107.88 593 522.12 593 2 L
V
N
107.88 300 522.12 300 2 L
V
N
108 247.88 108 190.12 2 L
V
N
522 247.88 522 190.12 2 L
V
N
107.88 248 522.12 248 2 L
V
N
107.88 228 522.12 228 2 L
V
N
107.88 190 522.12 190 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "224" 238
%%Page: "225" 239
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14.3 The) 429.41 677.67 T
5 F
(time) 465.04 677.67 T
0 F
( library) 487.84 677.67 T
2 F
(225) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(14.2.3  The) 108 639.33 T
4 12 Q
(say) 165.49 639.33 T
3 13 Q
( LID \336le) 187.09 639.33 T
3 15 Q
(14.3  The) 108 527 T
4 14 Q
(time) 164.07 527 T
3 15 Q
( librar) 197.67 527 T
(y) 231.98 527 T
1 11 Q
(The) 108 506.67 T
4 10 Q
(time) 129.16 506.67 T
1 11 Q
( library is a client of the) 153.16 506.67 T
4 10 Q
(sixty-unit) 270.04 506.67 T
1 11 Q
( and) 330.04 506.67 T
4 10 Q
(say) 354.16 506.67 T
1 11 Q
( libraries, and it will serve) 372.16 506.67 T
(as a substrate library for the r) 108 492.67 T
(est of our application. Like the pr) 250.7 492.67 T
(evious two librar-) 412.15 492.67 T
(ies, it comprises a library \336le and an implementation \336le; we also show the corr) 108 478.67 T
(e-) 492.7 478.67 T
(sponding LID \336le.) 108 464.67 T
3 13 Q
(14.3.1  The) 108 433.33 T
4 12 Q
(time-library) 165.49 433.33 T
3 13 Q
( \336le) 251.89 433.33 T
8 10 Q
(The LID \336le:) 259.36 610.33 T
4 9 Q
(say.lid) 316.05 610.33 T
8 10 Q
(.) 353.86 610.33 T
4 9 Q
(library:) 114 591 T
(say) 162.6 591 T
(files:) 114 580 T
(say-library) 162.6 580 T
(say) 162.6 569 T
8 10 Q
(The) 204.74 394.33 T
4 9 Q
(time-library) 224.76 394.33 T
8 10 Q
( \336le:) 289.55 394.33 T
4 9 Q
(time-library.dyla) 310.67 394.33 T
4 10 Q
(n) 402.48 394.33 T
8 F
(.) 408.48 394.33 T
4 9 Q
(Module: dylan-user) 114 375 T
5 F
(// Library definition) 114 356 T
4 F
(define library time) 114 345 T
5 F
(// Interface module) 124.8 334 T
4 F
(export time;) 124.8 323 T
5 F
(// Substrate libraries) 124.8 312 T
4 F
(use sixty-unit;) 124.8 301 T
(use say;) 124.8 290 T
(use dylan;) 124.8 279 T
(end library time;) 114 268 T
108 622.88 108 562.12 2 L
V
0.25 H
0 Z
N
522 622.88 522 562.12 2 L
V
N
107.88 623 522.12 623 2 L
V
N
107.88 603 522.12 603 2 L
V
N
107.88 562 522.12 562 2 L
V
N
108 406.88 108 261.12 2 L
V
N
522 406.88 522 261.12 2 L
V
N
107.88 407 522.12 407 2 L
V
N
107.88 387 522.12 387 2 L
V
N
107.88 261 522.12 261 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "225" 239
%%Page: "226" 240
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(226) 72 677.67 T
0 F
(Chapter 14) 95.75 677.67 T
(Four Complete Libraries) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(14.3.2  The) 108 341.33 T
4 12 Q
(time) 165.49 341.33 T
3 13 Q
( implementation \336le) 194.29 341.33 T
5 9 Q
(// Interface module) 114 616 T
4 F
(define module time) 114 605 T
5 F
(// Classes) 124.8 594 T
4 F
(create <time>, <time-of-day>, <time-offset>;) 124.8 583 T
5 F
(// Types) 124.8 572 T
4 F
(create <nonnegative-integer>;) 124.8 561 T
5 F
(// Constants) 124.8 550 T
4 F
(create $midnight, $tomorrow;) 124.8 539 T
5 F
(// Shared protocol) 124.8 528 T
4 F
(use say, export: all;) 124.8 517 T
(use sixty-unit, import: { encode-total-seconds }, export: all;) 124.8 506 T
(end module time;) 114 495 T
5 F
(// Implementation module) 114 476 T
4 F
(define module time-implementation) 114 465 T
5 F
(// External interface) 124.8 454 T
4 F
(use time;) 124.8 443 T
5 F
(// Substrate modules) 124.8 432 T
4 F
(use sixty-unit;) 124.8 421 T
(use say-implementor;) 124.8 410 T
(use dylan;) 124.8 399 T
(end module time-implementation;) 114 388 T
8 10 Q
(The) 212.96 302.33 T
4 9 Q
(time) 232.96 302.33 T
8 10 Q
( implementation \336le:) 254.57 302.33 T
4 9 Q
(time.dylan) 346.27 302.33 T
8 10 Q
(.) 400.27 302.33 T
4 9 Q
(Module: time-implementation) 114 283 T
5 F
(// Define nonnegative integers as integers that are >= zero) 114 264 T
4 F
(define constant <nonnegative-integer> = limited\050<integer>, min: 0\051;) 114 253 T
(define abstract class <time> \050<sixty-unit>\051) 114 234 T
(end class <time>;) 114 223 T
(define method say \050time :: <time>\051) 114 204 T
(let \050hours, minutes\051 = decode-total-seconds\050time\051;) 124.8 193 T
(format-out\050"%d:%s%d",) 124.8 182 T
(hours, if \050minutes < 10\051 "0" else " " end, minutes\051;) 184.2 171 T
(end method say;) 114 160 T
8 10 Q
(The) 178.4 635.33 T
4 9 Q
(time-library) 198.4 635.33 T
8 10 Q
( \336le:) 263.2 635.33 T
4 9 Q
(time-library.dyla) 284.33 635.33 T
4 10 Q
(n) 376.12 635.33 T
8 F
(.) 382.12 635.33 T
9 F
( \050contin) 384.9 635.33 T
(ued\051) 417.6 635.33 T
108 647.88 108 381.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 381.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 381 522.12 381 2 L
V
N
108 314.88 108 153.12 2 L
V
N
522 314.88 522 153.12 2 L
V
N
107.88 315 522.12 315 2 L
V
N
107.88 295 522.12 295 2 L
V
N
107.88 153 522.12 153 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "226" 240
%%Page: "227" 241
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14.3 The) 429.41 677.67 T
5 F
(time) 465.04 677.67 T
0 F
( library) 487.84 677.67 T
2 F
(227) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
5 9 Q
0 X
(// A specific time of day from 00:00 \050midnight\051 to before 24:00 \050tomorrow\051) 114 616 T
4 F
(define class <time-of-day> \050<time>\051) 114 605 T
(end class <time-of-day>;) 114 594 T
(define method total-seconds-setter) 114 575 T
(\050total-seconds :: <integer>, time :: <time-of-day>\051) 135.6 564 T
(=> \050total-seconds :: <nonnegative-integer>\051) 119.4 553 T
(if \050total-seconds >= 0\051) 124.8 542 T
(next-method\050\051;) 135.6 531 T
(else) 124.8 520 T
(error\050"%d cannot be negative", total-seconds\051;) 135.6 509 T
(end if;) 124.8 498 T
(end method total-seconds-setter;) 114 487 T
(define method initialize \050time :: <time-of-day>, #key\051) 114 468 T
(next-method\050\051;) 124.8 457 T
(if \050time.total-seconds < 0\051) 124.8 446 T
(error\050"%d cannot be negative", time.total-seconds\051;) 135.6 435 T
(end if;) 124.8 424 T
(end method initialize;) 114 413 T
5 F
(// A relative time between -24:00 and +24:00) 114 394 T
4 F
(define class <time-offset> \050<time>\051) 114 383 T
(end class <time-offset>;) 114 372 T
(define method past? \050time :: <time-offset>\051 => \050past? :: <boolean>\051) 114 353 T
(time.total-seconds < 0;) 124.8 342 T
(end method past?;) 114 331 T
(define method say \050time :: <time-offset>\051 => \050\051) 114 312 T
(format-out\050"%s ", if \050time.past?\051 "minus" else "plus" end\051;) 124.8 301 T
(next-method\050\051;) 124.8 290 T
(end method say;) 114 279 T
(define method \134+) 114 260 T
(\050offset1 :: <time-offset>, offset2 :: <time-offset>\051) 135.6 249 T
(=> \050sum :: <time-offset>\051) 119.4 238 T
(let sum = offset1.total-seconds + offset2.total-seconds;) 124.8 227 T
(make\050<time-offset>, total-seconds: sum\051;) 124.8 216 T
(end method \134+;) 114 205 T
8 10 Q
(The) 186.6 635.33 T
4 9 Q
(time) 206.62 635.33 T
8 10 Q
( implementation \336le:) 228.21 635.33 T
4 9 Q
(time.dylan) 319.92 635.33 T
8 10 Q
(.) 373.92 635.33 T
9 F
( \050contin) 376.7 635.33 T
(ued\051) 409.39 635.33 T
108 647.88 108 198.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 198.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 198 522.12 198 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "227" 241
%%Page: "228" 242
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(228) 72 677.67 T
0 F
(Chapter 14) 95.75 677.67 T
(Four Complete Libraries) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(14.3.3  The) 108 216.33 T
4 12 Q
(time) 165.49 216.33 T
3 13 Q
( LID \336le) 194.29 216.33 T
4 9 Q
(define method \134+) 114 616 T
(\050offset :: <time-offset>, time-of-day :: <time-of-day>\051) 135.6 605 T
(=> \050sum :: <time-of-day>\051) 119.4 594 T
(make\050<time-of-day>,) 124.8 583 T
(total-seconds: offset.total-seconds + time-of-day.total-seconds\051;) 151.8 572 T
(end method \134+;) 114 561 T
(define method \134+ \050time-of-day :: <time-of-day>, offset :: <time-offset>\051) 114 542 T
(=> \050sum :: <time-of-day>\051) 119.4 531 T
(offset + time-of-day;) 124.8 520 T
(end method \134+;) 114 509 T
(define method \134< \050time1 :: <time-of-day>, time2 :: <time-of-day>\051) 114 490 T
(time1.total-seconds < time2.total-seconds;) 124.8 479 T
(end method \134<;) 114 468 T
(define method \134< \050time1 :: <time-offset>, time2 :: <time-offset>\051) 114 449 T
(time1.total-seconds < time2.total-seconds;) 124.8 438 T
(end method \134<;) 114 427 T
(define method \134= \050time1 :: <time-of-day>, time2 :: <time-of-day>\051) 114 408 T
(time1.total-seconds = time2.total-seconds;) 124.8 397 T
(end method \134=;) 114 386 T
(define method \134= \050time1 :: <time-offset>, time2 :: <time-offset>\051) 114 367 T
(time1.total-seconds = time2.total-seconds;) 124.8 356 T
(end method \134=;) 114 345 T
5 F
(// Two useful time constants) 114 326 T
4 F
(define constant $midnight) 114 315 T
(= make\050<time-of-day>, total-seconds: encode-total-seconds\0500, 0, 0\051\051;) 124.8 304 T
(define constant $tomorrow) 114 285 T
(= make\050<time-of-day>,) 124.8 274 T
( total-seconds: encode-total-seconds\05024, 0, 0\051\051;) 157.2 263 T
8 10 Q
(The LID \336le:) 256.67 177.33 T
4 9 Q
(time.lid) 313.36 177.33 T
8 10 Q
(.) 356.55 177.33 T
4 9 Q
(library:) 114 158 T
(time) 162.6 158 T
(files:) 114 147 T
(time-library) 162.6 147 T
(time) 162.6 136 T
8 10 Q
(The) 186.6 635.33 T
4 9 Q
(time) 206.62 635.33 T
8 10 Q
( implementation \336le:) 228.21 635.33 T
4 9 Q
(time.dylan) 319.92 635.33 T
8 10 Q
(.) 373.92 635.33 T
9 F
( \050contin) 376.7 635.33 T
(ued\051) 409.39 635.33 T
108 647.88 108 256.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 256.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 256 522.12 256 2 L
V
N
108 189.88 108 129.12 2 L
V
N
522 189.88 522 129.12 2 L
V
N
107.88 190 522.12 190 2 L
V
N
107.88 170 522.12 170 2 L
V
N
107.88 129 522.12 129 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "228" 242
%%Page: "229" 243
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14.4 The) 423.71 677.67 T
5 F
(angle) 459.34 677.67 T
0 F
( library) 487.84 677.67 T
2 F
(229) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(14.4  The) 108 638 T
4 14 Q
(angle) 164.07 638 T
3 15 Q
( librar) 206.07 638 T
(y) 240.38 638 T
1 11 Q
(The) 108 617.67 T
4 10 Q
(angle) 129.16 617.67 T
1 11 Q
( library is the second client of the) 159.16 617.67 T
4 10 Q
(sixty-unit) 322.49 617.67 T
1 11 Q
( substrate. The) 382.49 617.67 T
4 10 Q
(angle) 456.24 617.67 T
1 11 Q
(library extends the) 108 603.67 T
4 10 Q
(say) 201.88 603.67 T
1 11 Q
( pr) 219.88 603.67 T
(otocol to handle objects of the classes that it de\336nes,) 233.39 603.67 T
(such as) 108 589.67 T
4 10 Q
(<latitude>) 146.25 589.67 T
1 11 Q
(,) 206.25 589.67 T
4 10 Q
(<longitude>) 211.75 589.67 T
1 11 Q
(, and) 277.75 589.67 T
4 10 Q
(<absolute-position>) 304.62 589.67 T
1 11 Q
(. For the time) 418.62 589.67 T
-0.34 (being, we have included positions with angles, as we do not for) 108 575.67 P
-0.34 (esee any bene\336t to) 412.99 575.67 P
(br) 108 561.67 T
(eaking them out into yet another library) 118.23 561.67 T
(, at least for the curr) 311.77 561.67 T
(ent application.) 408.86 561.67 T
(Nevertheless, we have de\336ned separate interface and implementation modules) 108 547.67 T
(for positions, and we have br) 108 533.67 T
(oken out the position sour) 249.54 533.67 T
(ce r) 376.94 533.67 T
(ecor) 393.99 533.67 T
(ds into a separate) 414.3 533.67 T
(inter) 108 519.67 T
(change \336le.) 130.6 519.67 T
-0.26 (Like with the) 135 505.67 P
4 10 Q
-0.58 (time) 201.38 505.67 P
1 11 Q
-0.26 ( library) 225.38 505.67 P
-0.26 (, the) 259.44 505.67 P
4 10 Q
-0.58 (angle) 282.42 505.67 P
1 11 Q
-0.26 ( library \336le does not have to specify the) 312.42 505.67 P
(use of the) 108 491.67 T
4 10 Q
(format-out) 157.74 491.67 T
1 11 Q
( library) 217.74 491.67 T
(. It will be transitively included because it is) 252.06 491.67 T
(exported by the) 108 477.67 T
4 10 Q
(say) 187.19 477.67 T
1 11 Q
( library) 205.19 477.67 T
(. Similarly) 239.51 477.67 T
(, clients of the) 288.04 477.67 T
4 10 Q
(angle) 357.92 477.67 T
1 11 Q
( library do not need to) 387.92 477.67 T
(know anything about the) 108 463.67 T
4 10 Q
(say) 233.49 463.67 T
1 11 Q
( and) 251.49 463.67 T
4 10 Q
(sixty-unit) 275.61 463.67 T
1 11 Q
( libraries, since those libraries ar) 335.61 463.67 T
(e) 491.72 463.67 T
(imported and r) 108 449.67 T
(e-exported to clients of) 181.72 449.67 T
4 10 Q
(angle) 295.61 449.67 T
1 11 Q
(.) 325.61 449.67 T
(Note that the) 135 435.67 T
4 10 Q
(position-implementation) 201.58 435.67 T
1 11 Q
( module uses the) 339.58 435.67 T
4 10 Q
(angle) 424.61 435.67 T
1 11 Q
( module) 454.61 435.67 T
(\321 it is an internal client of the) 108 421.67 T
4 10 Q
(angle) 256.93 421.67 T
1 11 Q
( module. This str) 286.93 421.67 T
(uctur) 368.99 421.67 T
(e means that we can) 394.87 421.67 T
(easily br) 108 407.67 T
(eak out positions as a separate library) 148.93 407.67 T
(, should the need arise.) 330.86 407.67 T
(Also note that we have used the) 135 393.67 T
4 10 Q
(angle) 293.39 393.67 T
1 11 Q
( interface module to enfor) 323.39 393.67 T
(ce access) 449.13 393.67 T
(contr) 108 379.67 T
(ol on the) 133.02 379.67 T
4 10 Q
(internal-direction) 178.15 379.67 T
1 11 Q
( slot. It should be accessed only thr) 286.15 379.67 T
(ough the) 455.59 379.67 T
4 10 Q
(direction) 108 365.67 T
1 11 Q
( and) 162 365.67 T
4 10 Q
(direction-setter) 186.12 365.67 T
1 11 Q
( methods, which ensur) 282.12 365.67 T
(e that valid values ar) 392.66 365.67 T
(e) 493.97 365.67 T
(used for our) 108 351.67 T
4 10 Q
(<latitude>) 170.54 351.67 T
1 11 Q
( and) 230.54 351.67 T
4 10 Q
(<longitude>) 254.66 351.67 T
1 11 Q
( classes. Because only the appr) 320.66 351.67 T
(oved) 468.8 351.67 T
(generic functions ar) 108 337.67 T
(e cr) 204.07 337.67 T
(eated in the interface module, only they will be accessible) 221.12 337.67 T
(to clients of the) 108 323.67 T
4 10 Q
(angle) 184.73 323.67 T
1 11 Q
( library) 214.73 323.67 T
(. The) 249.04 323.67 T
4 10 Q
(internal-direction) 275.71 323.67 T
1 11 Q
( slot is tr) 383.71 323.67 T
(uly internal to) 425.12 323.67 T
(the) 108 309.67 T
4 10 Q
(angle) 126.01 309.67 T
1 11 Q
( library \321 no client library can even determine its existence.) 156.01 309.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "229" 243
%%Page: "230" 244
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(230) 72 677.67 T
0 F
(Chapter 14) 95.75 677.67 T
(Four Complete Libraries) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(14.4.1  The) 108 639.33 T
4 12 Q
(angle-library) 165.49 639.33 T
3 13 Q
( \336le) 259.09 639.33 T
8 10 Q
(The) 199.65 600.33 T
4 9 Q
(angle-library) 219.65 600.33 T
8 10 Q
( \336le:) 289.86 600.33 T
4 9 Q
(angle-library.dylan) 310.98 600.33 T
8 10 Q
(.) 413.58 600.33 T
4 9 Q
(Module: dylan-user) 114 581 T
5 F
(// Library definition) 114 562 T
4 F
(define library angle) 114 551 T
(// Interface module) 124.8 540 T
(export angle, position;) 124.8 529 T
(// Substrate libraries) 124.8 518 T
(use sixty-unit;) 124.8 507 T
(use say;) 124.8 496 T
(use dylan;) 124.8 485 T
(end library angle;) 114 474 T
5 F
(// Interface module) 114 455 T
4 F
(define module angle) 114 444 T
5 F
(// Classes) 124.8 433 T
4 F
(create <angle>, <directed-angle>, <latitude>, <longitude>;) 124.8 422 T
5 F
(// Generics) 124.8 411 T
4 F
(create direction, direction-setter;) 124.8 400 T
5 F
(// Shared protocol) 124.8 389 T
4 F
(use say, export: all;) 124.8 378 T
(use sixty-unit, import: { encode-total-seconds }, export: all;) 124.8 367 T
(end module angle;) 114 356 T
5 F
(// Interface module) 114 337 T
4 F
(define module position) 114 326 T
5 F
(// Classes) 124.8 315 T
4 F
(create <position>, <absolute-position>, <relative-position>;) 124.8 304 T
5 F
(// Generics) 124.8 293 T
4 F
(create distance, angle, latitude, longitude;) 124.8 282 T
5 F
(// Shared protocol) 124.8 271 T
4 F
(use say, export: all;) 124.8 260 T
(end module angle;) 114 249 T
5 F
(// Implementation module) 114 230 T
4 F
(define module angle-implementation) 114 219 T
5 F
(// External interface) 124.8 208 T
4 F
(use angle;) 124.8 197 T
5 F
(// Substrate modules) 124.8 186 T
4 F
(use sixty-unit;) 124.8 175 T
(use say-implementor;) 124.8 164 T
(use dylan;) 124.8 153 T
(end module angle-implementation;) 114 142 T
108 612.88 108 135.12 2 L
V
0.25 H
0 Z
N
522 612.88 522 135.12 2 L
V
N
107.88 613 522.12 613 2 L
V
N
107.88 593 522.12 593 2 L
V
N
107.88 135 522.12 135 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "230" 244
%%Page: "231" 245
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14.4 The) 423.71 677.67 T
5 F
(angle) 459.34 677.67 T
0 F
( library) 487.84 677.67 T
2 F
(231) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(14.4.2  The) 108 481.33 T
4 12 Q
(angle) 165.49 481.33 T
3 13 Q
( implementation \336le) 201.49 481.33 T
1 11 Q
-0.22 (The) 108 461.67 P
4 10 Q
-0.48 (angle) 128.94 461.67 P
1 11 Q
-0.22 ( implementation \336le is simply a collection of the sour) 158.94 461.67 P
-0.22 (ce r) 414.38 461.67 P
-0.22 (ecor) 431.2 461.67 P
-0.22 (ds that we) 451.51 461.67 P
(developed earlier for cr) 108 447.67 T
(eating and saying angles, latitudes, and longitudes.) 221.71 447.67 T
5 9 Q
(// Implementation module) 114 616 T
4 F
(define module position-implementation) 114 605 T
5 F
(// External interface) 124.8 594 T
4 F
(use position;) 124.8 583 T
5 F
(// Substrate modules) 124.8 572 T
4 F
(use angle;) 124.8 561 T
(use say-implementor;) 124.8 550 T
(use dylan;) 124.8 539 T
(end module angle-implementation;) 114 528 T
8 10 Q
(The) 207.55 414.33 T
4 9 Q
(angle) 227.57 414.33 T
8 10 Q
( implementation \336le:) 254.57 414.33 T
4 9 Q
(angle.dylan) 346.27 414.33 T
8 10 Q
(.) 405.67 414.33 T
4 9 Q
(Module: angle-implementation) 114 395 T
(define abstract class <angle> \050<sixty-unit>\051) 114 376 T
(end class <angle>;) 114 365 T
(define method say \050angle :: <angle>\051 => \050\051) 114 346 T
(let\050degrees, minutes, seconds\051 = decode-total-seconds\050angle\051;) 124.8 335 T
(format-out\050"%d degrees %d minutes %d seconds",) 124.8 324 T
(degrees, minutes, seconds\051;) 184.2 313 T
(end method say;) 114 302 T
(define class <relative-angle> \050<angle>\051) 114 283 T
(end class <relative-angle>;) 114 272 T
(define method say \050angle :: <relative-angle>\051 => \050\051) 114 253 T
(format-out\050" %d degrees", decode-total-seconds\050angle\051\051;) 124.8 242 T
(end method say;) 114 231 T
(define abstract class <directed-angle> \050<angle>\051) 114 212 T
(virtual slot direction :: <symbol>;) 124.8 201 T
(slot internal-direction :: <symbol>;) 124.8 190 T
(keyword direction:;) 124.8 179 T
(end class <directed-angle>;) 114 168 T
8 10 Q
(The) 173.29 635.33 T
4 9 Q
(angle-library) 193.3 635.33 T
8 10 Q
( \336le:) 263.51 635.33 T
4 9 Q
(angle-library.dylan) 284.62 635.33 T
8 10 Q
(.) 387.23 635.33 T
9 F
( \050contin) 390.01 635.33 T
(ued\051) 422.7 635.33 T
108 647.88 108 521.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 521.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 521 522.12 521 2 L
V
N
108 426.88 108 161.12 2 L
V
N
522 426.88 522 161.12 2 L
V
N
107.88 427 522.12 427 2 L
V
N
107.88 407 522.12 407 2 L
V
N
107.88 161 522.12 161 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "231" 245
%%Page: "232" 246
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(232) 72 677.67 T
0 F
(Chapter 14) 95.75 677.67 T
(Four Complete Libraries) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define method initialize \050angle :: <directed-angle>, #key direction: dir\051) 114 616 T
(next-method\050\051;) 124.8 605 T
(angle.direction := dir;) 124.8 594 T
(end method initialize;) 114 583 T
(define method direction \050angle :: <directed-angle>\051 => \050dir :: <symbol>\051) 114 564 T
(angle.internal-direction;) 124.8 553 T
(end method direction;) 114 542 T
(define method direction-setter) 114 523 T
(\050dir :: <symbol>, angle :: <directed-angle>\051 => \050new-dir :: <symbol>\051) 135.6 512 T
(angle.internal-direction := dir;) 124.8 501 T
(end method direction-setter;) 114 490 T
(define method say \050angle :: <directed-angle>\051 => \050\051) 114 471 T
(next-method\050\051;) 124.8 460 T
(format-out\050" %s", angle.direction\051;) 124.8 449 T
(end method say;) 114 438 T
(define class <latitude> \050<directed-angle>\051) 114 419 T
(end class <latitude>;) 114 408 T
(define method say \050latitude :: <latitude>\051 => \050\051) 114 389 T
(next-method\050\051;) 124.8 378 T
(format-out\050" latitude\134n"\051;) 124.8 367 T
(end method say;) 114 356 T
(define method direction-setter) 114 337 T
(\050dir :: <symbol>, latitude :: <latitude>\051 => \050new-dir :: <symbol>\051) 135.6 326 T
(if \050dir == #"north" | dir == #"south"\051) 124.8 315 T
(next-method\050\051;) 135.6 304 T
(else) 124.8 293 T
(error\050"%= is not north or south", dir\051;) 135.6 282 T
(end if;) 124.8 271 T
(end method direction-setter;) 114 260 T
(define class <longitude> \050<directed-angle>\051) 114 241 T
(end class <longitude>;) 114 230 T
(define method say \050longitude :: <longitude>\051 => \050\051) 114 211 T
(next-method\050\051;) 124.8 200 T
(format-out\050" longitude\134n"\051;) 124.8 189 T
(end method say;) 114 178 T
8 10 Q
(The) 181.21 635.33 T
4 9 Q
(angle) 201.21 635.33 T
8 10 Q
( implementation \336le:) 228.21 635.33 T
4 9 Q
(angle.dylan) 319.92 635.33 T
8 10 Q
(.) 379.32 635.33 T
9 F
( \050contin) 382.1 635.33 T
(ued\051) 414.79 635.33 T
108 647.88 108 171.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 171.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 171 522.12 171 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "232" 246
%%Page: "233" 247
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14.4 The) 423.71 677.67 T
5 F
(angle) 459.34 677.67 T
0 F
( library) 487.84 677.67 T
2 F
(233) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(14.4.3  The) 108 492.33 T
4 12 Q
(position) 165.49 492.33 T
3 13 Q
( implementation \336le) 223.09 492.33 T
1 11 Q
-0.3 (The) 108 472.67 P
4 10 Q
-0.65 (position) 128.86 472.67 P
1 11 Q
-0.3 ( implementation \336le is simply a collection of the sour) 176.86 472.67 P
-0.3 (ce r) 431.58 472.67 P
-0.3 (ecor) 448.33 472.67 P
-0.3 (ds that) 468.64 472.67 P
(we developed earlier for cr) 108 458.67 T
(eating and saying absolute and r) 238.9 458.67 T
(elative positions.) 397.06 458.67 T
4 9 Q
(define method direction-setter) 114 616 T
(\050dir :: <symbol>, longitude :: <longitude>\051 => \050new-dir :: <symbol>\051) 135.6 605 T
(if \050dir == #"east" | dir == #"west"\051) 124.8 594 T
(next-method\050\051;) 135.6 583 T
(else) 124.8 572 T
(error\050"%= is not east or west", dir\051;) 135.6 561 T
(end if;) 124.8 550 T
(end method direction-setter;) 114 539 T
8 10 Q
(The) 191.35 425.33 T
4 9 Q
(position) 211.37 425.33 T
8 10 Q
( implementation \336le:) 254.57 425.33 T
4 9 Q
(position.dylan) 346.27 425.33 T
8 10 Q
(.) 421.86 425.33 T
4 9 Q
(Module: position-implementation) 114 406 T
(define abstract class <position> \050<object>\051) 114 387 T
(end class <position>;) 114 376 T
(define class <absolute-position> \050<position>\051) 114 357 T
(slot latitude :: <latitude>, required-init-keyword: latitude:;) 124.8 346 T
(slot longitude :: <longitude>, required-init-keyword: longitude:;) 124.8 335 T
(end class <absolute-position>;) 114 324 T
(define method say \050position :: <absolute-position>\051 => \050\051) 114 305 T
(say\050position.latitude\051;) 124.8 294 T
(say\050position.longitude\051;) 124.8 283 T
(end method say;) 114 272 T
(define class <relative-position> \050<position>\051) 114 253 T
5 F
(// Distance is in miles) 124.8 242 T
4 F
(slot distance :: <single-float>, required-init-keyword: distance:;) 124.8 231 T
5 F
(// Angle is in degrees) 124.8 220 T
4 F
(slot angle :: <angle>, required-init-keyword: angle:;) 124.8 209 T
(end class <relative-position>;) 114 198 T
(define method say \050position :: <relative-position>\051 => \050\051) 114 179 T
(format-out\050"%s miles away at heading ", position.distance\051;) 124.8 168 T
(say\050position.angle\051;) 124.8 157 T
(end method say;) 114 146 T
8 10 Q
(The) 181.21 635.33 T
4 9 Q
(angle) 201.21 635.33 T
8 10 Q
( implementation \336le:) 228.21 635.33 T
4 9 Q
(angle.dylan) 319.92 635.33 T
8 10 Q
(.) 379.32 635.33 T
9 F
( \050contin) 382.1 635.33 T
(ued\051) 414.79 635.33 T
108 647.88 108 532.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 532.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 532 522.12 532 2 L
V
N
108 437.88 108 139.12 2 L
V
N
522 437.88 522 139.12 2 L
V
N
107.88 438 522.12 438 2 L
V
N
107.88 418 522.12 418 2 L
V
N
107.88 139 522.12 139 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "233" 247
%%Page: "234" 248
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(234) 72 677.67 T
0 F
(Chapter 14) 95.75 677.67 T
(Four Complete Libraries) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(14.4.4  The) 108 620.33 T
4 12 Q
(angle) 165.49 620.33 T
3 13 Q
( LID \336le) 201.49 620.33 T
1 11 Q
-0.19 (Because we have chosen to put the sour) 108 600.67 P
-0.19 (ce r) 299.43 600.67 P
-0.19 (ecor) 316.29 600.67 P
-0.19 (ds for positions in a separate inter-) 336.6 600.67 P
(change \336le, the LID \336le lists thr) 108 586.67 T
(ee Dylan \336les that make up the) 259.72 586.67 T
4 10 Q
(angle) 413.21 586.67 T
1 11 Q
( library) 443.21 586.67 T
(.) 477.53 586.67 T
3 15 Q
(14.5  Summar) 108 460 T
(y) 188.12 460 T
1 11 Q
(The str) 108 439.67 T
(uctur) 141.67 439.67 T
(e of pr) 167.55 439.67 T
(otocol and substrate libraries that we have cr) 198.75 439.67 T
(eated is per) 416.39 439.67 T
(haps) 472.12 439.67 T
(overly complex for the simple functionality that we have implemented her) 108 425.67 T
(e.) 470 425.67 T
(However) 108 411.67 T
(, the libraries illustrate the power of the Dylan module and library sys-) 152.62 411.67 T
(tem to modularize lar) 108 397.67 T
(ge pr) 213.35 397.67 T
(ojects into easily manageable sub-pr) 238.24 397.67 T
(ojects, and to) 413.72 397.67 T
(contr) 108 383.67 T
(ol the interfaces among those pr) 133.02 383.67 T
(ojects.) 288.44 383.67 T
8 10 Q
(The LID \336le:) 253.96 553.33 T
4 9 Q
(angle.lid) 310.65 553.33 T
8 10 Q
(.) 359.26 553.33 T
4 9 Q
(library:) 114 534 T
(angle) 162.6 534 T
(files:) 114 523 T
(angle-library) 162.6 523 T
(angle) 162.6 512 T
(position) 162.6 501 T
108 565.88 108 494.12 2 L
V
0.25 H
0 Z
N
522 565.88 522 494.12 2 L
V
N
107.88 566 522.12 566 2 L
V
N
107.88 546 522.12 546 2 L
V
N
107.88 494 522.12 494 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "234" 248
%%Page: "235" 249
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(235) 298.88 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 530.98 512.43 590.14 R
7 X
V
1 30 Q
0 X
(Part III.) 108 570.14 T
(Sample Application) 223.08 570.14 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
(Chapter 15,) 108 424.67 T
0 F
(Design of the Airport Application) 169.51 424.67 T
1 F
(, describes the goals and overall) 319.43 424.67 T
(design of the airport example.) 108 410.67 T
(Chapter 16,) 135 396.67 T
0 F
(De\336nition of a New Collection) 196.51 396.67 T
1 F
(, shows you how to build a new) 331.47 396.67 T
(class of sequence, called a) 108 382.67 T
2 F
(sorted sequence) 235.91 382.67 T
1 F
(.) 316.25 382.67 T
(Chapter 17,) 135 368.67 T
0 F
(The Airport Application) 196.51 368.67 T
1 F
(, contains the complete, working code of) 304.26 368.67 T
(the airport example. This chapter illustrates many techniques described in the) 108 354.67 T
(pr) 108 340.67 T
(evious chapters, including collections, contr) 118.76 340.67 T
(ol-\337ow operators, initialization of) 331.6 340.67 T
(slots, and libraries and modules. The chapters in Part IV describe advanced tech-) 108 326.67 T
(niques that you can use to impr) 108 312.67 T
(ove the code pr) 261.27 312.67 T
(esented in Part III.) 335.91 312.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "235" 249
%%Page: "236" 250
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 126 522 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "236" 250
%%Page: "237" 251
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(237) 298.88 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(15) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(15) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Design of the Airport) 110 566.45 T
(Application) 108 533.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
-0.14 (In this chapter) 108 424.67 P
-0.14 (, we explor) 176.96 424.67 P
-0.14 (e the design of an airport application that uses the) 230.27 424.67 P
4 10 Q
-0.32 (time) 474.64 424.67 P
1 11 Q
-0.14 (,) 498.64 424.67 P
4 10 Q
(angle) 108 410.67 T
1 11 Q
(, and) 138 410.67 T
4 10 Q
(say) 164.87 410.67 T
1 11 Q
( libraries.) 182.87 410.67 T
3 15 Q
(15.1  Goals of the airpor) 108 371 T
(t application) 248.38 371 T
1 11 Q
-0.13 (Thr) 108 350.67 P
-0.13 (oughout this book, we have been developing components for an airport appli-) 125.29 350.67 P
(cation. This application deals with airports, air) 108 336.67 T
(craft, gates, and r) 334.12 336.67 T
(elated objects.) 417.75 336.67 T
(Figur) 108 322.67 T
(e 15.1 shows a diagram of a simple airport.) 134.21 322.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 145.72 504 153.72 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 15.1) 208.29 157.05 T
8 F
(Objects in a simple air) 266.64 157.05 T
(por) 365.3 157.05 T
(t.) 380.15 157.05 T
0 0 0 1 0 0 0 K
108 169.71 504 307 C
118 173.71 494 305 C
0 -364 93 0 212 364 119 124 179.71 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f15-1.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f15-1 .eps)%%CreationDate: (6/5/96) (10:44 AM)%%BoundingBox: -364 93 0 212%%HiResBoundingBox: -363.1583 93.0083 -0.745 211.4139%%DocumentProcessColors: Black%%DocumentFonts: Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: -190.5 143 -190.5 143%AI3_TileBox: -465.5 -222 86.5 508%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 2%AI5_OpenToView: -406.5 323 2 1011 727 18 1 1 3 40%AI5_OpenViewLayers: 77%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4510.5 4463 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4510.5 4463 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4510.5 4463 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) LnLB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Foreground) Ln0 Au0 R0 G300 Ar0 J 0 j 0.5 w 3.8636 M []0 d%AI3_Note:0 D-41.9837 124.0722 m-45.1819 125.2446 -90.6441 141.3516 -93.8033 142.032 c-96.9626 142.7124 -98.7907 141.9503 -98.9956 141.1345 c-99.3733 139.6301 -97.1182 137.7469 -94.3355 136.6907 c-91.5528 135.6345 -47.8893 119.0378 -43.3437 118.5061 c-38.1529 117.8988 -35.4213 116.7216 -34.7669 118.2715 c-34.1635 119.7004 -38.0728 122.6387 -41.9837 124.0722 cs-38.4529 118.8772 m-37.8495 120.3061 L-49.2821 123.6283 L-49.433 123.177 L-38.4529 118.8772 Ls-78.6991 124.1853 mSu-38.8388 109.473 m-41.0196 110.4533 L-43.1935 118.205 LS-39.0558 117.8245 m-38.9889 109.7741 L-38.0113 109.3217 L-37.5511 117.823 LSUu-32.4706 128.1871 m-34.7825 128.7972 L-41.3492 124.1397 LS-37.8939 121.8321 m-32.7768 128.0475 L-31.7322 127.784 L-36.7233 120.8867 LSU-94.56 137.8947 m-94.483 139.6251 -93.7298 140.3767 v-92.9767 141.1283 -94.8576 141.1302 -95.3851 140.3031 c-95.9126 139.4761 -96.2892 139.1003 -94.56 137.8947 csu-65.23 125.8266 m-68.3889 126.8832 L-69.745 125.0789 -69.5968 122.8969 v-69.4486 120.7149 -68.3425 98.895 Y-66.9136 98.2916 L-65.23 125.8266 Ls-66.6114 99.5704 m-66.8408 95.884 L-68.6459 96.4877 -69.6235 96.9402 v-70.6011 97.3926 -71.203 97.4685 -71.8772 100.3282 c-72.5513 103.1878 -79.294 131.0325 Y-69.8178 127.4865 LSu-74.0495 109.5845 m-74.7988 112.5948 L-76.6034 113.5747 L-77.6596 110.792 L-74.0495 109.5845 Ls-77.6596 110.792 m-79.0885 111.3954 L-78.1829 114.103 L-76.6034 113.5747 LSUu-76.4475 118.9164 m-77.1967 121.9266 L-79.0014 122.9066 L-80.0576 120.1239 L-76.4475 118.9164 Ls-80.0576 120.1239 m-81.4864 120.7272 L-80.5808 123.4348 L-79.0014 122.9066 LSUUu-63.1344 131.7476 m-66.2544 132.9138 L-66.1733 135.1694 -64.6851 136.7723 v-63.197 138.375 -48.6091 154.6393 Y-47.1188 154.2093 L-63.1344 131.7476 Ls-47.6884 153.0251 m-45.5475 156.0349 L-47.3304 156.7013 -48.3748 156.9647 v-49.4194 157.2281 -49.9348 157.5479 -52.2581 155.7493 c-54.5813 153.9505 -77.3409 136.5496 Y-67.7446 133.3437 LSu-59.7704 149.9211 m-62.2466 148.0528 L-64.2659 148.4265 L-63.3361 151.254 L-59.7704 149.9211 Ls-63.3361 151.254 m-64.8263 151.6839 L-65.8258 149.0096 L-64.2659 148.4265 LSUu-67.5055 144.1764 m-69.9818 142.3079 L-72.001 142.6817 L-71.0711 145.5091 L-67.5055 144.1764 Ls-71.0711 145.5091 m-72.5614 145.9391 L-73.5611 143.2648 L-72.001 142.6817 LSUUU800 Ar0.65 w-56.5 141 m-1.1667 120.3333 l-10.8333 95.3333 l-66.1667 115 lS-76.4475 118.9164 m-240.8333 178 l-266.5 155.6667 l-266.5 98 l-283.5 98 l-283.5 179.3333 l-267.5 179.3333 l-267.5 169.3333 l-252.5 181.3333 l-263.5 186 l-254.1667 211 l-67.5 144.25 lS1 Ap-311.1667 93.3333 m-311.1667 173 L-362.8333 173 L-362.8333 93.3333 L-311.1667 93.3333 Ls0 Ap-311.1667 166 m-283.8333 166 lS-311.1667 147.6667 m-283.8333 147.6667 lS-311.1667 130.2708 m-283.8333 130.2708 lS-311.1667 111.9375 m-283.8333 111.9375 lS0 To1 0 0 1 -337.1667 139.3333 0 TpTP-15.9972 0 Td0 Tr0 O0 g1 w 4 M/_Helvetica 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(terminal\r) Tx 12.9957 -11 Td(A) Tx (\r) TX TO0 To1 0 0 1 -296.8333 154 0 TpTP-5.503 0 Td0 Tr(A1) Tx (\r) TX TO0 To1 0 0 1 -296.8333 119 0 TpTP-5.503 0 Td0 Tr(A2) Tx (\r) TX TO0 To0 1 -1 0 -272.5 139.3333 0 TpTP-26.5056 0 Td0 Tr(taxiway Echo) Tx (\r) TX TO0 To0.9438 -0.3304 0.3304 0.9438 -145.4167 154.6667 0 TpTP-33.0051 0 Td0 Tr(runway 11R-29L) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 169.71 504 307 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "237" 251
%%Page: "238" 252
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(238) 72 677.67 T
0 F
(Chapter 15) 95.75 677.67 T
(Design of the Airport Application) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.25 (In Figur) 108 487.67 P
-0.25 (e 15.1, we see a single) 146.82 487.67 P
2 F
-0.25 (terminal) 253.06 487.67 P
1 F
-0.25 (, A. It has two) 295.83 487.67 P
2 F
-0.25 (gates) 364.99 487.67 P
1 F
-0.25 (, A1 and A2, a) 390.65 487.67 P
2 F
-0.25 (taxiway) 460.87 487.67 P
1 F
-0.25 (,) 498.75 487.67 P
(Echo, a) 108 473.67 T
2 F
(runway) 145.76 473.67 T
1 F
(, 1) 183.04 473.67 T
(1R-29L, and an) 193.44 473.67 T
2 F
(aircraft) 269.19 473.67 T
1 F
( appr) 305.24 473.67 T
(oaching the r) 330.86 473.67 T
(unway) 394.39 473.67 T
(.) 426.99 473.67 T
(When landing, an air) 135 459.67 T
(craft goes fr) 237.37 459.67 T
(om the sky to a r) 294.71 459.67 T
(unway to a taxiway to a) 375.68 459.67 T
(gate. Figur) 108 445.67 T
(e 15.2 is a state diagram showing these transitions for both inbound) 160.18 445.67 T
(and outbound air) 108 431.67 T
(craft.) 193.04 431.67 T
(Our \336rst goal for this application is as follows: given a set of incoming air-) 135 417.67 T
(craft at various positions in the sky) 108 403.67 T
(, we want to pr) 277 403.67 T
(edict which gate each air) 350.21 403.67 T
(craft) 470.31 403.67 T
-0.12 (will use when it arrives, and to estimate the arrival time of the air) 108 389.67 P
-0.12 (craft at the gate.) 423.94 389.67 P
(This information is displayed on the Arrivals monitors in an airport.) 108 375.67 T
-0.01 (Our second goal for the application is to pr) 135 361.67 P
-0.01 (ovide additional information for) 343.53 361.67 P
-0.21 (the gr) 108 347.67 P
-0.21 (ound cr) 136.06 347.67 P
-0.21 (ew) 173.39 347.67 P
-0.21 (. W) 186.82 347.67 P
-0.21 (e must state the entir) 202.1 347.67 P
-0.21 (e path that an incoming air) 302.59 347.67 P
-0.21 (craft will take,) 432.4 347.67 P
(including the r) 108 333.67 T
(unway) 179.77 333.67 T
(, the taxiway) 212.38 333.67 T
(, and the gate. W) 273.42 333.67 T
(e must also state the time that) 354.26 333.67 T
-0.4 (an air) 108 319.67 P
-0.4 (craft is expected to be at each point. For example, for an inbound air) 135.1 319.67 P
-0.4 (craft, we) 460.12 319.67 P
(want to display information like the following:) 108 305.67 T
6 9 Q
(12:30:) 108 285.01 T
(Aircraft Cardinal at Runway 11R-29L) 145.8 285.01 T
(12:43:) 108 274.01 T
(Aircraft Cardinal at Taxiway Echo) 145.8 274.01 T
(12:47:) 108 263.01 T
(Aircraft Cardinal at Gate A2) 145.8 263.01 T
1 11 Q
(The application considers departing air) 108 242.67 T
(craft as well as arriving air) 298.87 242.67 T
(craft.) 427.95 242.67 T
3 15 Q
(15.2  Objects that model an airpor) 108 203.01 T
(t) 305.8 203.01 T
1 11 Q
(W) 108 182.67 T
(e need to de\336ne classes that r) 117.99 182.67 T
(epr) 259.39 182.67 T
(esent the objects in Figur) 275.42 182.67 T
(es 15.1 and 15.2. Note) 395.75 182.67 T
-0.38 (that the application displays information about the path of an air) 108 168.67 P
-0.38 (craft fr) 418.97 168.67 P
-0.38 (om gate to) 451.12 168.67 P
(sky and sky to gate; the air) 108 154.67 T
(craft stops at the gate and does not enter the terminal) 237.83 154.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 513.01 504 521 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 15.2) 117.81 524.33 T
8 F
(T) 176.16 524.33 T
(r) 181.07 524.33 T
(ansitions betw) 184.3 524.33 T
(een sky and gate f) 247.57 524.33 T
(or outbound and inbound aircr) 328.98 524.33 T
(aft.) 462.3 524.33 T
0 0 0 1 0 0 0 K
108 537 504 648 C
158 541 454 646 C
0 -282 71 2 164 284 93 164 547 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f15-2.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f15-2 .eps)%%CreationDate: (6/5/96) (10:44 AM)%%BoundingBox: -282 71 2 164%%HiResBoundingBox: -280.6611 71.4763 0.9988 163.8782%%DocumentProcessColors: Black%%DocumentFonts: Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: -114.5 119 -114.5 119%AI3_TileBox: -389 -246 163 484%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -226.5 247 3 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4434.5 4439 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4434.5 4439 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4434.5 4439 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D-282.5 4439 m-282.5 -4201 L(N) *0 To1 0 0 1 -255.5 114 0 TpTP-6.75 0 Td0 Tr0 O0 g/_Helvetica 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(sky) Tx (\r) TX TO0 To1 0 0 1 -178 114 0 TpTP-14.5009 0 Td0 Tr(runway) Tx (\r) TX TO0 To1 0 0 1 -101.5 114 0 TpTP-15.0007 0 Td0 Tr(taxiway) Tx (\r) TX TO0 To1 0 0 1 -25 114 0 TpTP-8.755 0 Td0 Tr(gate) Tx (\r) TX TO0 To1 0 0 1 -52.25 155.5 0 TpTP-34.7574 0 Td0 Tr(Outbound aircraft) Tx (\r) TX TO0 To1 0 0 1 -229.5 73.5 0 TpTP-31.2572 0 Td0 Tr(Inbound aircraft) Tx (\r) TX TO1 Ap0 R0 G0.5 w-236.5001 107.5 m-232.2205 107.5 -228.7509 111.5295 -228.7509 116.5 C-228.7509 116.5 L-228.7509 121.4705 -232.2205 125.5 -236.5001 125.5 C-272.6621 125.5 L-276.9417 125.5 -280.4113 121.4705 -280.4113 116.5 C-280.4113 116.5 L-280.4113 111.5295 -276.9417 107.5 -272.6621 107.5 C-236.5001 107.5 Ls-160.0001 107.5 m-155.7205 107.5 -152.2509 111.5295 -152.2509 116.5 C-152.2509 116.5 L-152.2509 121.4705 -155.7205 125.5 -160.0001 125.5 C-196.1621 125.5 L-200.4417 125.5 -203.9113 121.4705 -203.9113 116.5 C-203.9113 116.5 L-203.9113 111.5295 -200.4417 107.5 -196.1621 107.5 C-160.0001 107.5 Ls-83.5001 107.5 m-79.2205 107.5 -75.7509 111.5295 -75.7509 116.5 C-75.7509 116.5 L-75.7509 121.4705 -79.2205 125.5 -83.5001 125.5 C-119.6621 125.5 L-123.9417 125.5 -127.4113 121.4705 -127.4113 116.5 C-127.4113 116.5 L-127.4113 111.5295 -123.9417 107.5 -119.6621 107.5 C-83.5001 107.5 Ls-7.0001 107.5 m-2.7205 107.5 0.749 111.5295 0.749 116.5 C0.749 116.5 L0.749 121.4705 -2.7205 125.5 -7.0001 125.5 C-43.1621 125.5 L-47.4417 125.5 -50.9113 121.4705 -50.9113 116.5 C-50.9113 116.5 L-50.9113 111.5295 -47.4417 107.5 -43.1621 107.5 C-7.0001 107.5 Lsu0 Ap0.65 w-90 158.5 m-112.5 158.5 lS0 O0 g1 w-110.9542 160.7379 m-119.41 158.4725 l-110.9542 156.2065 l-110.9542 160.7379 lfUu0 R0 G0.65 w-193.3892 75.9792 m-170.8892 75.9792 lS0 O0 g1 w-172.4349 78.2171 m-163.9792 75.9516 l-172.4349 73.6857 l-172.4349 78.2171 lfUu0 R0 G0.65 w-254.1398 107.325 m-248.6667 81.6667 -193.3333 84.6667 -184.1398 99.1584 cS0 O0 g1 w-182.0893 98.2402 m-180.4042 106.8305 l-186.1587 100.2335 l-182.0893 98.2402 lfUu0 R0 G0.65 w-181.9036 125.816 m-187.3768 151.4743 -242.7101 148.4743 -251.9036 133.9826 cS0 O0 g1 w-253.9541 134.9008 m-255.6392 126.3105 l-249.8847 132.9076 l-253.9541 134.9008 lfUu0 R0 G0.65 w-175.4523 107.325 m-169.9792 81.6667 -114.6458 84.6667 -105.4523 99.1584 cS0 O0 g1 w-103.4018 98.2402 m-101.7168 106.8305 l-107.4713 100.2335 l-103.4018 98.2402 lfUu0 R0 G0.65 w-103.2161 125.816 m-108.6893 151.4743 -164.0226 148.4743 -173.2161 133.9826 cS0 O0 g1 w-175.2666 134.9008 m-176.9517 126.3105 l-171.1972 132.9076 l-175.2666 134.9008 lfUu0 R0 G0.65 w-96.7648 107.325 m-91.2917 81.6667 -35.9584 84.6667 -26.7648 99.1584 cS0 O0 g1 w-24.7143 98.2402 m-23.0293 106.8305 l-28.7838 100.2335 l-24.7143 98.2402 lfUu0 R0 G0.65 w-24.5286 125.816 m-30.0018 151.4743 -85.3351 148.4743 -94.5286 133.9826 cS0 O0 g1 w-96.5792 134.9008 m-98.2642 126.3105 l-92.5097 132.9076 l-96.5792 134.9008 lfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 537 504 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "238" 252
%%Page: "239" 253
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(15.2 Objects that model an airport) 385.03 677.67 T
2 F
(239) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(itself. Ther) 108 640.67 T
(efor) 159.65 640.67 T
(e, we do not need to de\336ne a terminal class. Our design includes) 178.73 640.67 T
(these airport classes:) 108 626.67 T
4 9 Q
(<airport>) 135 606 T
1 11 Q
(,) 183.6 606 T
4 9 Q
( <gate>) 186.35 606 T
1 11 Q
(,) 224.15 606 T
4 9 Q
( <taxiway>) 226.9 606 T
1 11 Q
(,) 280.9 606 T
4 9 Q
( <runway>) 283.65 606 T
1 11 Q
(,) 332.25 606 T
4 9 Q
( <sky>) 335 606 T
1 11 Q
(,) 367.4 606 T
4 9 Q
( <vehicle>) 370.15 606 T
1 11 Q
(,) 424.15 606 T
4 9 Q
( <aircraft>) 426.9 606 T
1 11 Q
(A vehicle is any object that is self-pr) 108 585.67 T
(opelled. Air) 282.69 585.67 T
(craft ar) 340.38 585.67 T
(e vehicles that ar) 374.75 585.67 T
(e capable) 456.1 585.67 T
(of \337ying. In our design, the sky ar) 108 571.67 T
(ound the airport, the gates, the taxiways, and) 272.21 571.67 T
(the r) 108 557.67 T
(unways each keep track of each air) 130.26 557.67 T
(craft as the latter moves fr) 299.58 557.67 T
(om the sky to) 425.89 557.67 T
(the gate and back to the sky again. One common attribute of the sky) 108 543.67 T
(, gates, taxi-) 437.33 543.67 T
-0.1 (ways, and r) 108 529.67 P
-0.1 (unways is that each of them can hold an air) 164.39 529.67 P
-0.1 (craft, or mor) 374.25 529.67 P
-0.1 (e than one air-) 434.5 529.67 P
-0.01 (craft. Because these objects can hold vehicles, we can think of them as containers.) 108 515.67 P
(Our design uses this class to r) 108 501.67 T
(epr) 252.23 501.67 T
(esent all types of containers:) 268.26 501.67 T
4 9 Q
(<vehicle-storage>) 135 481 T
1 11 Q
-0.37 (In our design, containers ar) 108 460.67 P
-0.37 (e connected to other containers. In the airport diagram) 239.64 460.67 P
(in Figur) 108 446.67 T
(e 15.1, gate A1 is connected to taxiway Echo, which is connected to r) 146.57 446.67 T
(un-) 477.71 446.67 T
(way 1) 108 432.67 T
(1R-29L. W) 136.43 432.67 T
(e can use a slot in the) 186.15 432.67 T
4 10 Q
(<vehicle-storage>) 291.84 432.67 T
1 11 Q
( class to model these) 393.84 432.67 T
(connections.) 108 418.67 T
(Since some containers can hold only one air) 135 404.67 T
(craft, wher) 347.06 404.67 T
(eas other containers) 399.53 404.67 T
(have mor) 108 390.67 T
(e complex behavior) 154 390.67 T
(, our design includes two subclasses of) 248.34 390.67 T
4 10 Q
(<vehicle-) 439.33 390.67 T
(storage>) 108 376.67 T
1 11 Q
(:) 156 376.67 T
4 9 Q
(<single-storage>) 135 356 T
1 11 Q
(,) 221.4 356 T
4 9 Q
( <multiple-storage>) 224.15 356 T
1 11 Q
-0.03 (Instances of) 108 335.67 P
4 10 Q
-0.07 (<single-storage>) 168.18 335.67 P
1 11 Q
-0.03 ( may hold a single air) 264.18 335.67 P
-0.03 (craft r) 368.64 335.67 P
-0.03 (egar) 397.48 335.67 P
-0.03 (dless of the dir) 418.51 335.67 P
-0.03 (ec-) 490.18 335.67 P
-0.45 (tion of travel. Instances of) 108 321.67 P
4 10 Q
-0.98 (<multiple-storage>) 233.97 321.67 P
1 11 Q
-0.45 ( may hold mor) 341.97 321.67 P
-0.45 (e than one air) 412.39 321.67 P
-0.45 (craft,) 476.97 321.67 P
(and each dir) 108 307.67 T
(ection is tr) 168.25 307.67 T
(eated separately) 218.69 307.67 T
(. For example,) 296.63 307.67 T
4 10 Q
(<gate>) 368.08 307.67 T
1 11 Q
( is a subclass of) 404.08 307.67 T
4 10 Q
(<single-storage>) 108 293.67 T
1 11 Q
(, and) 204 293.67 T
4 10 Q
(<sky>) 230.87 293.67 T
1 11 Q
( is a subclass of) 260.87 293.67 T
4 10 Q
(<multiple-storage>) 337.95 293.67 T
1 11 Q
(.) 445.95 293.67 T
-0.55 (All subclasses of) 135 279.67 P
4 10 Q
-1.2 (<vehicle-storage>) 216.46 279.67 P
1 11 Q
-0.55 ( must comply with the vehicle-storage) 318.46 279.67 P
(pr) 108 265.67 T
(otocol. In particular) 118.76 265.67 T
(, designers of) 213.8 265.67 T
4 10 Q
(<vehicle-storage>) 281.12 265.67 T
1 11 Q
( subclasses must ensur) 383.12 265.67 T
(e) 493.3 265.67 T
-0.01 (that the subclasses either inherit or de\336ne methods for all the key vehicle-storage) 108 251.67 P
(generic functions.) 108 237.67 T
(Certain classes \321 such as the time and position classes \321 r) 135 223.67 T
(epr) 421.26 223.67 T
(esent intangi-) 437.29 223.67 T
-0.21 (ble concepts. Other classes \321 such as airports, gates, r) 108 209.67 P
-0.21 (unways, and air) 368.46 209.67 P
-0.21 (craft \321 r) 446.25 209.67 P
-0.21 (ep-) 488.46 209.67 P
-0.07 (r) 108 195.67 P
-0.07 (esent physical objects. It may be useful to make that distinction in our classes, so) 112.15 195.67 P
(we de\336ne a class fr) 108 181.67 T
(om which all physical objects inherit:) 199.98 181.67 T
4 9 Q
(<physical-object>) 135 161 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "239" 253
%%Page: "240" 254
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(240) 72 677.67 T
0 F
(Chapter 15) 95.75 677.67 T
(Design of the Airport Application) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Figur) 108 409.67 T
(e 15.3 shows the inheritance r) 134.21 409.67 T
(elationships among the classes that r) 277.26 409.67 T
(epr) 454.77 409.67 T
(esent) 470.8 409.67 T
(physical objects.) 108 395.67 T
3 15 Q
(15.3  Beha) 108 356.01 T
(vior) 168.69 356.01 T
(s of the objects) 191.09 356.01 T
1 11 Q
(The top-level function of our application is called) 108 335.67 T
4 10 Q
(process-aircraft) 350.21 335.67 T
1 11 Q
(. Given an) 446.21 335.67 T
(airport that has been pr) 108 321.67 T
(operly initialized,) 222.01 321.67 T
4 10 Q
(process-aircraft) 310.8 321.67 T
1 11 Q
( will simulate and) 406.8 321.67 T
(document the movement of all inbound air) 108 307.67 T
(craft thr) 317.01 307.67 T
(ough all the containers of the) 355.87 307.67 T
(airport, fr) 108 293.67 T
(om landing thr) 154.9 293.67 T
(ough takeof) 227.8 293.67 T
(f.) 285.65 293.67 T
(T) 135 279.67 T
(o pr) 140.73 279.67 T
(edict how long it will take for an air) 160.24 279.67 T
(craft to arrive at the airport, we) 334.01 279.67 T
-0.23 (need to compute the distance between the position of the air) 108 265.67 P
-0.23 (craft and the position) 398.39 265.67 P
(of the airport. Then, we must divide the distance by the speed to determine how) 108 251.67 T
(long it will take the air) 108 237.67 T
(craft to get fr) 217.62 237.67 T
(om one position to the other) 280.22 237.67 T
(. The) 416.68 237.67 T
4 10 Q
(flying-) 443.35 237.67 T
(time) 108 223.67 T
1 11 Q
( method will implement that computation in our design.) 132 223.67 T
(Once an air) 135 209.67 T
(craft appr) 190.45 209.67 T
(oaches the airport, it enters a series of containers. The) 238.05 209.67 T
(generic functions that constitute the vehicle-storage pr) 108 195.67 T
(otocol help us to generate) 371.92 195.67 T
(and simulate the transitions of the air) 108 181.67 T
(craft fr) 289.48 181.67 T
(om container to container) 322.02 181.67 T
(.) 445.95 181.67 T
-0.44 (W) 135 167.67 P
-0.44 (e summarize some of the operations in our design her) 144.99 167.67 P
-0.44 (e; we summarize the) 402.51 167.67 P
(vehicle-storage pr) 108 153.67 T
(otocol in Section 15.4.) 195.1 153.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 429.01 504 437 C
36 72 576 720 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 15.3) 108.74 440.33 T
8 F
(Inher) 167.1 440.33 T
(itance relationships among classes that represent ph) 190.04 440.33 T
(ysical objects) 423.17 440.33 T
(.) 482.48 440.33 T
0 0 0 1 0 0 0 K
108 453 504 648 C
137 457 475 646 C
0 139 307 465 484 326 177 143 463 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f15-3.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f15-3 .eps)%%CreationDate: (6/5/96) (10:45 AM)%%BoundingBox: 139 307 465 484%%HiResBoundingBox: 139.6553 307 464.7434 483.707%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 31 31 583 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: 66 552 2 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 325.25 476.5 0 TpTP-21.5947 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(<object>) Tx (\r) TX TO0 To1 0 0 1 325.5 434.5 0 TpTP-45.8888 0 Td0 Tr(<physical-object>) Tx (\r) TX TO0 To1 0 0 1 325.25 385 0 TpTP-45.8888 0 Td0 Tr(<vehicle-storage>) Tx (\r) TX TO0 To1 0 0 1 325.25 339.5 0 TpTP-48.5881 0 Td0 Tr(<multiple-storage>) Tx (\r) TX TO0 To1 0 0 1 437.75 339.5 0 TpTP-26.9934 0 Td0 Tr(<aircraft>) Tx (\r) TX TO0 To1 0 0 1 200.75 339.5 0 TpTP-43.1894 0 Td0 Tr(<single-storage>) Tx (\r) TX TO0 To1 0 0 1 218 385 0 TpTP-24.2941 0 Td0 Tr(<airport>) Tx (\r) TX TO0 To1 0 0 1 437.5 385 0 TpTP-24.2941 0 Td0 Tr(<vehicle>) Tx (\r) TX TO0 To1 0 0 1 161.25 309.25 0 TpTP-21.5947 0 Td0 Tr(<runway>) Tx (\r) TX TO0 To1 0 0 1 226.5 309.25 0 TpTP-16.196 0 Td0 Tr(<gate>) Tx (\r) TX TO0 To1 0 0 1 291.75 309.25 0 TpTP-24.2941 0 Td0 Tr(<taxiway>) Tx (\r) TX TO0 To1 0 0 1 357 309.25 0 TpTP-13.4967 0 Td0 Tr(<sky>) Tx (\r) TX TO324.5 4716 m324.5 -3924 L(N) *u0 R0 G0.65 w324.5 471.25 m324.5 453 lS0 O0 g1 w322.2621 454.5458 m324.5275 446.09 l326.7935 454.5458 l322.2621 454.5458 lfUu0 R0 G0.65 w324.5 427.5 m324.5 407.5 lS0 O0 g1 w322.2621 409.0458 m324.5275 400.59 l326.7935 409.0458 l322.2621 409.0458 lfUu0 R0 G0.65 w324.5 377.5 m324.5 356 lS0 O0 g1 w322.2621 357.5458 m324.5275 349.09 l326.7935 357.5458 l322.2621 357.5458 lfUu0 R0 G0.65 w437 377.5 m437 356 lS0 O0 g1 w434.7621 357.5458 m437.0275 349.09 l439.2935 357.5458 l434.7621 357.5458 lfUu0 R0 G0.65 w340 425 m421.5 398.5 lS0 O0 g1 w419.3373 396.8534 m428.0792 396.3932 l420.7385 401.1627 l419.3373 396.8534 lfUu0 R0 G0.65 w311 425.5 m230.5 398.5 lS0 O0 g1 w231.2572 401.1156 m223.9609 396.2788 l232.6982 396.8194 l231.2572 401.1156 lfUu0 R0 G0.65 w297.5 376 m220 352.5 lS0 O0 g1 w220.8324 355.0926 m213.3979 350.4709 l222.1473 350.7562 l220.8324 355.0926 lfUuu0 R0 G0.65 w186.5 334.5 m168.5 322 lS0 O0 g1 w168.4897 324.72 m162.8366 318.036 l171.0744 320.998 l168.4897 324.72 lfUUuu0 R0 G0.65 w315.6875 334.5 m297.6875 322 lS0 O0 g1 w297.6772 324.72 m292.0241 318.036 l300.2619 320.998 l297.6772 324.72 lfUUuu0 R0 G0.65 w198.8912 334.207 m216.8912 321.707 lS0 O0 g1 w216.9015 324.427 m222.5546 317.743 l214.3168 320.705 l216.9015 324.427 lfUUuu0 R0 G0.65 w329.3912 334.207 m347.3912 321.707 lS0 O0 g1 w347.4015 324.427 m353.0546 317.743 l344.8168 320.705 l347.4015 324.427 lfUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 453 504 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "240" 254
%%Page: "241" 255
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(15.4 The vehicle-container protocol) 382.21 677.67 T
2 F
(241) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(process-aircraft) 108 642 T
0 11 Q
(airport time) 199.8 642 T
(Generic Function) 444.27 640.67 T
1 F
(This generic function simulates and documents the movement of air) 135 618.67 T
(craft) 465.9 618.67 T
(thr) 135 604.67 T
(ough the airport, including the time of each transition \321 for example,) 149.13 604.67 T
6 9 Q
(12:30:) 135 584 T
(Aircraft Cardinal at Runway 11R-29L) 172.8 584 T
(12:43:) 135 573 T
(Aircraft Cardinal at Taxiway Echo) 172.8 573 T
(12:47:) 135 562 T
(Aircraft Cardinal at Gate A2) 172.8 562 T
1 11 Q
(The) 135 541.67 T
0 F
(airport) 156.16 541.67 T
1 F
( is an instance of) 186.71 541.67 T
4 10 Q
(<airport>) 269.8 541.67 T
1 11 Q
(. The) 323.8 541.67 T
0 F
(time) 350.47 541.67 T
1 F
( is an instance of) 370.03 541.67 T
4 10 Q
(<time-of-) 453.12 541.67 T
(day>) 135 527.67 T
1 11 Q
(.) 159 527.67 T
4 9 Q
(distance-3d) 108 499 T
0 11 Q
(air) 172.8 499 T
(craft airport) 184.82 499 T
(Generic Function) 444.27 497.67 T
1 F
(This generic function r) 135 475.67 T
(eturns the distance between its two ar) 244.67 475.67 T
(guments. The) 428.47 475.67 T
0 F
(air-) 497.52 475.67 T
(craft) 135 461.67 T
1 F
( is an instance of) 155.36 461.67 T
4 10 Q
(<aircraft>) 238.46 461.67 T
1 11 Q
(, and the) 298.45 461.67 T
0 F
(airport) 343.33 461.67 T
1 F
( is an instance of) 373.88 461.67 T
4 10 Q
(<airport>) 456.98 461.67 T
1 11 Q
(.) 510.98 461.67 T
4 9 Q
(flying-time) 108 433 T
0 11 Q
(air) 172.8 433 T
(craft airport) 184.82 433 T
(Generic Function) 444.27 431.67 T
1 F
(This generic function r) 135 409.67 T
(eturns the time that it would take for the) 244.67 409.67 T
0 F
(air) 444.68 409.67 T
(craft) 456.71 409.67 T
1 F
(to \337y to) 479.82 409.67 T
(the) 135 395.67 T
0 F
(airport) 153.01 395.67 T
1 F
(.) 183.55 395.67 T
3 15 Q
(15.4  The vehic) 108 356 T
(le-container pr) 195.3 356 T
(otocol) 280.52 356 T
1 11 Q
-0.15 (Once the air) 108 335.67 P
-0.15 (craft appr) 166.51 335.67 P
-0.15 (oaches the airport, it enters a set of connected containers on) 213.96 335.67 P
(its way inbound to a particular gate. The air) 108 321.67 T
(craft eventually turns ar) 321.07 321.67 T
(ound and) 437.97 321.67 T
-0.14 (heads outbound towar) 108 307.67 P
-0.14 (d the sky) 218.26 307.67 P
-0.14 (. The vehicle-container pr) 261.12 307.67 P
-0.14 (otocol manages the tran-) 384.57 307.67 P
(sition of air) 108 293.67 T
(craft fr) 163.08 293.67 T
(om one container to another) 195.62 293.67 T
(. The generic functions that make) 331.89 293.67 T
-0.41 (up this pr) 108 279.67 P
-0.41 (otocol ar) 154.53 279.67 P
-0.41 (e summarized next. For all the generic functions that follow) 196.2 279.67 P
-0.41 (, the) 481.32 279.67 P
(value of the) 108 265.67 T
0 F
(vehicle) 167.99 265.67 T
1 F
( parameter must be an instance of) 198.15 265.67 T
4 10 Q
(<vehicle>) 364.96 265.67 T
1 11 Q
(, the value of the) 418.96 265.67 T
0 F
-0.12 (container) 108 251.67 P
1 F
-0.12 ( parameter must be an instance of) 149.76 251.67 P
4 10 Q
-0.26 (<vehicle-storage>) 315.73 251.67 P
1 11 Q
-0.12 (, and the value of) 417.73 251.67 P
(the) 108 237.67 T
0 F
(dir) 126.01 237.67 T
(ection) 138.65 237.67 T
1 F
( parameter must be either the symbol) 165.12 237.67 T
4 10 Q
(#"inbound") 349.57 237.67 T
1 11 Q
( or) 409.57 237.67 T
4 10 Q
(#"outbound") 425.42 237.67 T
1 11 Q
(.) 491.42 237.67 T
4 9 Q
(available?) 108 209 T
0 11 Q
(vehicle container dir) 167.4 209 T
(ection) 257.45 209 T
(Generic Function) 444.27 207.67 T
1 F
-0.17 (This generic function r) 135 185.67 P
-0.17 (eturns tr) 244.14 185.67 P
-0.17 (ue if ther) 285.46 185.67 P
-0.17 (e is space in) 328.78 185.67 P
0 F
-0.17 (container) 388.74 185.67 P
1 F
-0.17 ( for) 430.5 185.67 P
0 F
-0.17 (vehicle) 449.66 185.67 P
1 F
-0.17 ( to enter) 479.81 185.67 P
(for traveling in) 135 171.67 T
0 F
(dir) 210.7 171.67 T
(ection) 223.34 171.67 T
1 F
(.) 249.82 171.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "241" 255
%%Page: "242" 256
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(242) 72 677.67 T
0 F
(Chapter 15) 95.75 677.67 T
(Design of the Airport Application) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(move-in-vehicle) 108 642 T
0 11 Q
(vehicle container dir) 194.4 642 T
(ection) 284.45 642 T
(Generic Function) 444.27 640.67 T
1 F
(This generic function moves the) 135 618.67 T
0 F
(vehicle) 293.15 618.67 T
1 F
( into the) 323.3 618.67 T
0 F
(container) 366 618.67 T
1 F
( in the) 407.76 618.67 T
0 F
(dir) 440.87 618.67 T
(ection) 453.51 618.67 T
1 F
( given.) 479.98 618.67 T
4 9 Q
(move-out-vehicle) 108 590 T
0 11 Q
(vehicle container dir) 199.8 590 T
(ection) 289.85 590 T
(Generic Function) 444.27 588.67 T
1 F
-0.21 (This generic function moves the) 135 566.67 P
0 F
-0.21 (vehicle) 292.12 566.67 P
1 F
-0.21 ( out of the) 322.27 566.67 P
0 F
-0.21 (container) 373.6 566.67 P
1 F
-0.21 ( in the) 415.35 566.67 P
0 F
-0.21 (dir) 447.84 566.67 P
-0.21 (ection) 460.48 566.67 P
1 F
-0.21 ( given.) 486.96 566.67 P
4 9 Q
(next-out) 108 538 T
0 11 Q
(container dir) 156.6 538 T
(ection) 213.74 538 T
(Generic Function) 444.27 536.67 T
1 F
(This generic function determines what vehicle, if any) 135 514.67 T
(, could move to the next) 391.48 514.67 T
(container) 135 500.67 T
(. If ther) 179.78 500.67 T
(e is such a vehicle, then) 214.8 500.67 T
4 10 Q
(next-out) 331.37 500.67 T
1 11 Q
( r) 379.37 500.67 T
(eturns the vehicle, the next) 386.27 500.67 T
(container in the dir) 135 486.67 T
(ection of travel, and the time it would take to make that) 227.77 486.67 T
(transition.) 135 472.67 T
4 9 Q
(next-landing-step) 108 444 T
0 11 Q
(container vehicle) 205.2 444 T
(Generic Function) 444.27 442.67 T
1 F
(This generic function r) 135 420.67 T
(eturns two values. The \336rst value is the class of the next) 244.67 420.67 T
(container into which) 135 406.67 T
0 F
(vehicle) 238.1 406.67 T
1 F
( may move fr) 268.25 406.67 T
(om) 332.85 406.67 T
0 F
(container) 351.32 406.67 T
1 F
(. The second value is how) 392.26 406.67 T
(long it will take) 135 392.67 T
0 F
(vehicle) 213.76 392.67 T
1 F
( to move into the next container) 243.91 392.67 T
(. This generic function is) 397.37 392.67 T
(used by the) 135 378.67 T
4 10 Q
(next-out) 193.99 378.67 T
1 11 Q
( generic function to accomplish part of the latter) 241.99 378.67 T
(\325s work.) 476.18 378.67 T
3 15 Q
(15.5  Sor) 108 339 T
(ted sequences) 159.52 339 T
1 11 Q
-0.26 (Part of what) 108 318.67 P
4 10 Q
-0.56 (process-aircraft) 169.89 318.67 P
1 11 Q
-0.26 ( will do in our example is to generate a collection) 265.89 318.67 P
-0.09 (of possible transition steps for air) 108 304.67 P
-0.09 (craft in or ar) 269.22 304.67 P
-0.09 (ound the airport. For example, if an) 328.79 304.67 P
(air) 108 290.67 T
(craft is on the r) 120.85 290.67 T
(unway) 193.61 290.67 T
(, then one possible transition step would be to move the) 226.22 290.67 T
(air) 108 276.67 T
(craft to the taxiway) 120.85 276.67 T
(. If ther) 213.46 276.67 T
(e ar) 248.48 276.67 T
(e many air) 266.15 276.67 T
(craft in the airport, ther) 317.49 276.67 T
(e ar) 431.08 276.67 T
(e many) 448.75 276.67 T
-0.37 (possible transitions that might take place at various time. The) 108 262.67 P
4 10 Q
-0.82 (process-aircraft) 405.62 262.67 P
1 11 Q
(method needs to consider these transitions in or) 108 248.67 T
(der) 340.86 248.67 T
(. That is, if an air) 356.38 248.67 T
(craft is r) 437.34 248.67 T
(eady) 476.83 248.67 T
(to land on a r) 108 234.67 T
(unway in 5 minutes, but another one is r) 172.58 234.67 T
(eady to take of) 369.23 234.67 T
(f in 2 min-) 440.62 234.67 T
(utes,) 108 220.67 T
4 10 Q
(process-aircraft) 133.65 220.67 T
1 11 Q
( should attempt to complete the take-of) 229.65 220.67 T
(f transition) 420.62 220.67 T
(befor) 108 206.67 T
(e completing the landing transition. T) 133.17 206.67 T
(o keep these transitions in time or) 315.35 206.67 T
(der) 479.39 206.67 T
(,) 494.91 206.67 T
(we use a collection called a) 108 192.67 T
2 F
(sorted sequence) 241.93 192.67 T
1 F
(.) 322.27 192.67 T
(Dylan does not pr) 135 178.67 T
(ovide a sorted sequence class in its built-in collection) 222.4 178.67 T
(library) 108 164.67 T
(. However) 139.57 164.67 T
(, Dylan does pr) 189.69 164.67 T
(ovide an extensible collection framework that) 263.84 164.67 T
(permits us to de\336ne sorted sequences ourselves. In fact, Dylan alr) 108 150.67 T
(eady pr) 425.99 150.67 T
(ovides) 463.1 150.67 T
(all the generic functions that we need to interact with sorted sequences:) 108 136.67 T
4 10 Q
(size) 457.55 136.67 T
1 11 Q
(,) 481.55 136.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "242" 256
%%Page: "243" 257
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(15.7 Summary) 459.24 677.67 T
2 F
(243) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 10 Q
0 X
(shallow-copy) 108 640.67 T
1 11 Q
(,) 178.78 640.67 T
4 10 Q
(element) 184.28 640.67 T
1 11 Q
(,) 226.28 640.67 T
4 10 Q
(add!) 231.78 640.67 T
1 11 Q
(,) 255.78 640.67 T
4 10 Q
(pop) 261.28 640.67 T
1 11 Q
(,) 279.28 640.67 T
4 10 Q
(remove!) 284.78 640.67 T
1 11 Q
(, and) 326.78 640.67 T
4 10 Q
(forward-iteration-) 353.65 640.67 T
(protocol) 108 626.67 T
1 11 Q
(. W) 156 626.67 T
(e just need to pr) 171.49 626.67 T
(ovide methods for each of these generic functions) 249.23 626.67 T
(that implement these operations for sorted sequences. By de\336ning a method for) 108 612.67 T
4 10 Q
(forward-iteration-protocol) 108 598.67 T
1 11 Q
(, we allow sorted sequences to work with the) 264 598.67 T
(standar) 108 584.67 T
(d Dylan collection iterators discussed in Chapter 1) 144.52 584.67 T
(1,) 388.8 584.67 T
0 F
(Collections and) 402.55 584.67 T
(Contr) 108 570.67 T
(ol Flow) 134.08 570.67 T
1 F
(. Because sorted sequences ar) 166.77 570.67 T
(e generally useful, we de\336ne them in) 308.92 570.67 T
(their own library) 108 556.67 T
(, in the same manner as we did the time and angle components.) 189.46 556.67 T
3 15 Q
(15.6  T) 108 517 T
(esting) 145.57 517 T
1 11 Q
(W) 108 496.67 T
(e include in the application a test library) 117.99 496.67 T
(, which cr) 312.56 496.67 T
(eates instances of the classes) 359.9 496.67 T
-0.17 (described in this chapter) 108 482.67 P
-0.17 (, initializes these instances to a r) 226.15 482.67 P
-0.17 (easonable state, and calls) 380.34 482.67 P
4 10 Q
(process-aircraft) 108 468.67 T
1 11 Q
(. Pr) 204 468.67 T
(oviding test cases \050in a separate library\051 is a good way to) 220.29 468.67 T
(check the design, interface, and implementation of an application library) 108 454.67 T
(.) 459.68 454.67 T
3 15 Q
(15.7  Summar) 108 415 T
(y) 188.12 415 T
1 11 Q
(In this chapter) 108 394.67 T
(, we cover) 177.24 394.67 T
(ed the following:) 226.46 394.67 T
(\245) 117 374.67 T
(W) 135 374.67 T
(e discussed the goals of the airport application: to pr) 144.99 374.67 T
(edict the arrival time) 399.49 374.67 T
(and gate of an incoming air) 135 360.67 T
(craft, and to describe the entir) 268.19 360.67 T
(e path that an) 413.18 360.67 T
(incoming air) 135 346.67 T
(craft will take, including the time it is expected to be at each) 196.52 346.67 T
(point.) 135 332.67 T
(\245) 117 312.67 T
(W) 135 312.67 T
(e discussed the design of the airport application classes, and the opera-) 144.99 312.67 T
(tions to be performed on instances of the classes, including the vehicle-) 135 298.67 T
(container pr) 135 284.67 T
(otocol.) 194.1 284.67 T
(\245) 117 264.67 T
(W) 135 264.67 T
(e discussed how the time, angle, sorted sequence, and testing libraries) 144.99 264.67 T
(interact with the main airport application library) 135 250.67 T
(.) 370.58 250.67 T
(In Chapter 16,) 108 230.67 T
0 F
(De\336nition of a New Collection) 182.37 230.67 T
1 F
(, we implement sorted sequences. In) 317.33 230.67 T
(Chapter 17,) 108 216.67 T
0 F
(The Airport Application) 169.51 216.67 T
1 F
(, we implement the airport application.) 277.26 216.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "243" 257
%%Page: "244" 258
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 126 522 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "244" 258
%%Page: "245" 259
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(245) 298.88 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
V
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
7 X
V
1 H
0 X
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(16) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(16) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(De\336nition of a New) 110 566.45 T
(Collection) 108 536.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
-0.05 (In this chapter) 108 424.67 P
-0.05 (, we implement a data str) 177.15 424.67 P
-0.05 (uctur) 300.15 424.67 P
-0.05 (e called a) 326.03 424.67 P
2 F
-0.05 (sorted sequence) 373.69 424.67 P
1 F
-0.05 (. A sorted) 453.99 424.67 P
-0.13 (sequence is a sequence that automatically keeps the elements of the sequence in a) 108 410.67 P
-0.21 (particular or) 108 396.67 P
-0.21 (der) 168.5 396.67 P
-0.21 (, based on some value computed fr) 184.02 396.67 P
-0.21 (om each element. Elements ar) 352.34 396.67 P
-0.21 (e) 496.19 396.67 P
(added and r) 108 382.67 T
(emoved fr) 167.2 382.67 T
(om sorted sequences; however) 216.96 382.67 T
(, the sorted sequence deter-) 365.35 382.67 T
(mines the key associated with the element. Thus, it does not make sense to stor) 108 368.67 T
(e) 491.08 368.67 T
-0.22 (an element in a sorted sequence at a speci\336c key) 108 354.67 P
-0.22 (, because the sorted sequence will) 338.62 354.67 P
(determine the corr) 108 340.67 T
(ect key to satisfy the automatic-or) 197.91 340.67 T
(dering constraint.) 361.57 340.67 T
(W) 135 326.67 T
(e use Dylan\325s) 144.99 326.67 T
2 F
(forward-iteration protocol) 212.53 326.67 T
1 F
(to implement the connection) 346.35 326.67 T
(between our new collection class and Dylan\325s standar) 108 312.67 T
(d collection generic func-) 368.28 312.67 T
-0.31 (tions. Dylan\325s forwar) 108 298.67 P
-0.31 (d-iteration pr) 209.79 298.67 P
-0.31 (otocol is a well-de\336ned interface that collection) 274.47 298.67 P
(implementors and collection-iterator implementors can use to enable iterators to) 108 284.67 T
-0.46 (operate over new collections, and to enable collections to work with new iterators.) 108 270.67 P
(Once the forwar) 108 256.67 T
(d iteration pr) 186.79 256.67 T
(otocol is de\336ned on) 250.87 256.67 T
4 10 Q
(<sorted-sequence>) 348.87 256.67 T
1 11 Q
(, many of) 450.87 256.67 T
(the standar) 108 242.67 T
(d Dylan collection generic functions that we cover) 162.53 242.67 T
(ed in Chapter 1) 405.84 242.67 T
(1,) 480.09 242.67 T
0 F
(Collections and Contr) 108 228.67 T
(ol Flow) 205.17 228.67 T
1 F
(, will work with instances of the new sequence.) 237.87 228.67 T
(The airport application uses a sorted sequence to keep track of air) 135 214.67 T
(craft tran-) 453.64 214.67 T
(sition in time or) 108 200.67 T
(der) 184.84 200.67 T
(. See Chapter 17,) 200.36 200.67 T
0 F
(The Airport Application) 286.43 200.67 T
1 F
(, for mor) 394.18 200.67 T
(e details.) 436.31 200.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "245" 259
%%Page: "246" 260
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(246) 72 677.67 T
0 F
(Chapter 16) 95.75 677.67 T
(Definition of a New Collection) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(16.1  The) 108 638 T
4 14 Q
(sorted-sequence.dylan) 164.07 638 T
3 15 Q
( \336le) 340.47 638 T
1 11 Q
(The) 108 617.67 T
4 10 Q
(sorted-sequence.dylan) 129.16 617.67 T
1 11 Q
( \336le contains the module constants, classes, and) 255.16 617.67 T
(methods that build on Dylan\325s collection framework to de\336ne the str) 108 603.67 T
(uctur) 441.08 603.67 T
(e and) 466.96 603.67 T
(behavior of the new) 108 589.67 T
4 10 Q
(<sorted-sequence>) 207.79 589.67 T
1 11 Q
( collection.) 309.79 589.67 T
3 13 Q
(16.1.1  A ne) 108 558.33 T
(w collection c) 166.53 558.33 T
(lass) 236.24 558.33 T
1 11 Q
-0.43 (Because is ther) 108 346.67 P
-0.43 (e is a well-de\336ned or) 178.84 346.67 P
-0.43 (dering of the elements of sorted sequences, we) 278.44 346.67 P
-0.16 (choose) 108 332.67 P
4 10 Q
-0.35 (<sequence>) 143.82 332.67 P
1 11 Q
-0.16 ( to be the super) 203.82 332.67 P
-0.16 (class of) 277.7 332.67 P
4 10 Q
-0.35 (<sorted-sequence>) 315.45 332.67 P
1 11 Q
-0.16 (. W) 417.45 332.67 P
-0.16 (e use the built-) 432.78 332.67 P
(in collection class called) 108 318.67 T
4 10 Q
(<stretchy-vector>) 226.93 318.67 T
1 11 Q
( to stor) 328.93 318.67 T
(e the elements of our sorted) 362.43 318.67 T
(sequence, because we want to be able to have the sorted sequence gr) 108 304.67 T
(ow to any) 440.34 304.67 T
(size in a convenient way) 108 290.67 T
(.) 225.94 290.67 T
(The slots) 135 276.67 T
4 10 Q
(comparison-function) 181.04 276.67 T
1 11 Q
( and) 295.04 276.67 T
4 10 Q
(value-function) 319.16 276.67 T
1 11 Q
( ar) 403.16 276.67 T
(e constant slots,) 415.55 276.67 T
(because we intend to have clients specify these functions only when they cr) 108 262.67 T
(eate) 473.93 262.67 T
(the sorted sequence. If we had decided to let clients change the value of these) 108 248.67 T
-0.25 (slots, we would have made the slots virtual, so that we could r) 108 234.67 P
-0.25 (eor) 408.16 234.67 P
-0.25 (der the data vec-) 423.58 234.67 P
(tor after either function had changed.) 108 220.67 T
(Now that we have cover) 135 206.67 T
(ed the str) 253.74 206.67 T
(uctur) 299 206.67 T
(e and initialization of the sorted) 324.88 206.67 T
(sequence data str) 108 192.67 T
(uctur) 191.86 192.67 T
(e, we can de\336ne basic collection methods.) 217.75 192.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 232.2 529.33 T
4 9 Q
(sorted-sequence.dylan) 252.21 529.33 T
8 10 Q
( \336le) 365.61 529.33 T
(.) 381.02 529.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: sorted-sequence) 114 510 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define class <sorted-sequence> \050<sequence>\051) 114 491 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The vector that stores the elements of the sorted sequence, in order) 124.8 480 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot data :: <stretchy-vector> = make\050<stretchy-vector>, size: 0\051;) 124.8 469 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The function used to extract the comparison value from an element) 124.8 458 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(constant slot value-function :: <function> = identity,) 124.8 447 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(init-keyword: value-function:;) 135.6 436 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The function used to determine whether one comparison value is) 124.8 425 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(//) 124.8 414 T
(smaller than another comparison value) 141 414 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(constant slot comparison-function :: <function> = \134<,) 124.8 403 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(init-keyword: comparison-function:;) 135.6 392 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <sorted-sequence>;) 114 381 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 541.88 108 374.12 2 L
V
0.25 H
0 Z
N
522 541.88 522 374.12 2 L
V
N
107.88 542 522.12 542 2 L
V
N
107.88 522 522.12 522 2 L
V
N
107.88 374 522.12 374 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "246" 260
%%Page: "247" 261
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(16.1 The) 346.93 677.67 T
5 F
(sorted-sequence.dylan) 382.56 677.67 T
0 F
( file) 502.26 677.67 T
2 F
(247) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(16.1.2  Basic collection methods) 108 639.33 T
1 11 Q
(In the pr) 108 224.67 T
(eceding code, we de\336ne methods for determining the number of ele-) 149.62 224.67 T
(ments in the sorted sequence, for copying the sorted sequence \050but not the ele-) 108 210.67 T
(ments stor) 108 196.67 T
(ed in the sorted sequence\051, and for accessing a particular item in the) 158.79 196.67 T
(sorted sequence. Once we have de\336ned the) 108 182.67 T
4 10 Q
(element) 320.46 182.67 T
1 11 Q
( method for sorted) 362.46 182.67 T
(sequences, we can use the subscripting syntax to access particular items in the) 108 168.67 T
(sorted sequence. Our) 108 154.67 T
4 10 Q
(element) 213.76 154.67 T
1 11 Q
( method implements the standar) 255.76 154.67 T
(d Dylan pr) 413.87 154.67 T
(otocol,) 466.58 154.67 T
-0.36 (which allows the caller to specify a default value if the key is not contained within) 108 140.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 205.85 610.33 T
4 9 Q
(sorted-sequence.dylan) 225.86 610.33 T
8 10 Q
( \336le) 339.26 610.33 T
(.) 354.67 610.33 T
9 F
(\050contin) 360.23 610.33 T
(ued\051) 390.14 610.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(define method size \050sorted-sequence :: <sorted-sequence>\051) 114 591 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050sorted-sequence-size :: <integer>\051) 135.6 580 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sorted-sequence.data.size;) 124.8 569 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method size;) 114 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method shallow-copy \050sorted-sequence :: <sorted-sequence>\051) 114 539 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050copy :: <sorted-sequence>\051) 135.6 528 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let copy) 124.8 517 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<sorted-sequence>,) 135.6 506 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value-function: sorted-sequence.value-function,) 173.4 495 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(comparison-function: sorted-sequence.comparison-function\051;) 173.4 484 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The map-into function replaces the elements of the copy\325s data array) 124.8 473 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// to be the identical elements of the data array of sorted sequence) 124.8 462 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(copy.data.size := sorted-sequence.data.size;) 124.8 451 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(map-into\050copy.data, identity, sorted-sequence.data\051;) 124.8 440 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(copy;) 124.8 429 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method shallow-copy;) 114 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define constant $unsupplied = list\050#f\051;) 114 399 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method element) 114 380 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050sorted-sequence :: <sorted-sequence>, key :: <integer>,) 135.6 369 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#key default = $unsupplied\051) 141 358 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050element :: <object>\051;) 119.4 347 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050key < sorted-sequence.data.size\051) 124.8 336 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sorted-sequence.data[key];) 135.6 325 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(elseif \050default = $unsupplied\051) 124.8 314 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(error\050"Attempt to access key %= which is outside of %=.", key,) 135.6 303 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sorted-sequence\051;) 168 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(else default;) 124.8 281 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 124.8 270 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method element;) 114 259 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 622.88 108 252.12 2 L
V
0.25 H
0 Z
N
522 622.88 522 252.12 2 L
V
N
107.88 623 522.12 623 2 L
V
N
107.88 603 522.12 603 2 L
V
N
107.88 252 522.12 252 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "247" 261
%%Page: "248" 262
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(248) 72 677.67 T
0 F
(Chapter 16) 95.75 677.67 T
(Definition of a New Collection) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(the collection. If the key is not part of the collection, and no default value is speci-) 108 640.67 T
(\336ed, then an err) 108 626.67 T
(or is signaled. Since we do not export) 184.97 626.67 T
4 10 Q
($unsupplied) 369.2 626.67 T
1 11 Q
( fr) 435.2 626.67 T
(om our) 445.76 626.67 T
(library) 108 612.67 T
(, we can be certain that no one can supply that value as the) 139.57 612.67 T
4 10 Q
(default) 427.68 612.67 T
1 11 Q
(keywor) 108 598.67 T
(d parameter for our) 144.83 598.67 T
4 10 Q
(element) 243.68 598.67 T
1 11 Q
( method.) 285.68 598.67 T
(Note that the) 135 584.67 T
4 10 Q
(element-setter) 201.58 584.67 T
1 11 Q
( method is not de\336ned, because it does not) 285.58 584.67 T
(make sense to stor) 108 570.67 T
(e an element at a particular position within the sorted) 197.11 570.67 T
(sequence. The sorted sequence itself determines the corr) 108 556.67 T
(ect key for each item) 380.77 556.67 T
(added to the sorted sequence, based on the item being added and on the value) 108 542.67 T
(and comparison functions.) 108 528.67 T
(Next, we show methods for adding and r) 135 514.67 T
(emoving elements fr) 335.17 514.67 T
(om sorted) 434.77 514.67 T
(sequences.) 108 500.67 T
3 13 Q
(16.1.3  Ad) 108 469.33 T
(ding and remo) 157.69 469.33 T
(ving elements) 230.94 469.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 205.85 430.33 T
4 9 Q
(sorted-sequence.dylan) 225.86 430.33 T
8 10 Q
( \336le) 339.26 430.33 T
(.) 354.67 430.33 T
9 F
(\050contin) 360.23 430.33 T
(ued\051) 390.14 430.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// Add an element to the sorted sequence) 114 411 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method add!) 114 400 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050sorted-sequence :: <sorted-sequence>, new-element :: <object>\051) 135.6 389 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050sorted-sequence :: <sorted-sequence>\051) 119.4 378 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let element-value = sorted-sequence.value-function;) 124.8 367 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let compare = sorted-sequence.comparison-function;) 124.8 356 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(add!\050sorted-sequence.data, new-element\051;) 124.8 345 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sorted-sequence.data) 124.8 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(:= sort!\050sorted-sequence.data,) 135.6 323 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(test: method \050e1, e2\051) 184.2 312 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(compare\050element-value\050e1\051, element-value\050e2\051\051) 227.4 301 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end\051;) 216.6 290 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sorted-sequence;) 124.8 279 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method add!;) 114 268 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Remove the item at the top of the sorted sequence) 114 249 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method pop \050sorted-sequence :: <sorted-sequence>\051) 114 238 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050top-of-sorted-sequence :: <object>\051) 135.6 227 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let data-vector = sorted-sequence.data;) 124.8 216 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let top-of-sorted-sequence = data-vector[0];) 124.8 205 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let sorted-sequence-size = data-vector.size;) 124.8 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050empty?\050sorted-sequence\051\051) 124.8 183 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(error\050"Trying to pop empty sorted-sequence %=.", sorted-sequence\051;) 135.6 172 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 442.88 108 165.12 2 L
V
0.25 H
0 Z
N
522 442.88 522 165.12 2 L
V
N
107.88 443 522.12 443 2 L
V
N
107.88 423 522.12 423 2 L
V
N
107.88 165 522.12 165 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "248" 262
%%Page: "249" 263
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(16.1 The) 346.93 677.67 T
5 F
(sorted-sequence.dylan) 382.56 677.67 T
0 F
( file) 502.26 677.67 T
2 F
(249) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(The) 108 163.67 T
4 10 Q
(remove!) 129.16 163.67 T
1 11 Q
( method uses a form of the) 171.16 163.67 T
4 10 Q
(for) 303.49 163.67 T
1 11 Q
( loop that includes an) 321.49 163.67 T
4 10 Q
(until:) 429.02 163.67 T
1 11 Q
( clause,) 465.02 163.67 T
(much like the) 108 149.67 T
4 10 Q
(my-copy-sequence) 176.93 149.67 T
1 11 Q
( method de\336ned in Section 1) 272.93 149.67 T
(1.3.3, page 144.) 411.03 149.67 T
(Note that all termination checks ar) 108 135.67 T
(e tested prior to the execution of the body) 275.8 135.67 T
(.) 477.08 135.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(else) 124.8 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Shuffle up existing data, removing the top element from the) 135.6 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// sorted sequence) 135.6 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(for \050i from 0 below sorted-sequence-size - 1\051) 135.6 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(data-vector[i] := data-vector[i + 1];) 146.4 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end for;) 135.6 561 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Decrease the size of the data vector, and return the top element) 135.6 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(data-vector.size := sorted-sequence-size - 1;) 135.6 539 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(top-of-sorted-sequence;) 135.6 528 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 124.8 517 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method pop;) 114 506 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Remove a particular element from the sorted sequence) 114 487 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method remove!) 114 476 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050sorted-sequence :: <sorted-sequence>, value :: <object>,) 135.6 465 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#key test = \134==, count = #f\051) 141 454 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050sorted-sequence :: <sorted-sequence>\051) 119.4 443 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let data-vector = sorted-sequence.data;) 124.8 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let sorted-sequence-size = data-vector.size;) 124.8 421 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for \050deletion-point from 0,) 124.8 410 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// If we have reached the end of the sequence, or we have reached) 157.2 399 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// the user-specified limit, we are done) 157.2 388 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Note that specifying a bound in the preceding clause for) 157.2 377 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(//deletion-point does not work, because bounds are computed only) 157.2 366 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// once, and we change sorted-sequence-size in the body) 157.2 355 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(until: \050deletion-point >= sorted-sequence-size\051) 151.8 344 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(| \050count & count = 0\051\051) 189.6 333 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Otherwise, if we found a matching element, remove it from the) 135.6 322 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// sorted sequence.) 135.6 311 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(if \050test\050data-vector[deletion-point], value\051\051) 135.6 300 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for \050i from deletion-point below sorted-sequence-size - 1\051) 146.4 289 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(data-vector[i] := data-vector[i + 1]) 157.2 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end for;) 146.4 267 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sorted-sequence-size) 146.4 256 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( := \050data-vector.size := sorted-sequence-size - 1\051;) 157.2 245 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050count\051 count := count - 1 end;) 146.4 234 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 135.6 223 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end for;) 124.8 212 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sorted-sequence;) 124.8 201 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method remove!;) 114 190 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 205.85 635.33 T
4 9 Q
(sorted-sequence.dylan) 225.86 635.33 T
8 10 Q
( \336le) 339.26 635.33 T
(.) 354.67 635.33 T
9 F
(\050contin) 360.23 635.33 T
(ued\051) 390.14 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 183.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 183.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 183 522.12 183 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "249" 263
%%Page: "250" 264
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(250) 72 677.67 T
0 F
(Chapter 16) 95.75 677.67 T
(Definition of a New Collection) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Although the) 135 640.67 T
4 10 Q
(pop) 202.66 640.67 T
1 11 Q
( method is not used in the airport application, it is) 220.66 640.67 T
(included for completeness. W) 108 626.67 T
(e could make the) 251.57 626.67 T
4 10 Q
(pop) 337.14 626.67 T
1 11 Q
( method faster by storing the) 355.14 626.67 T
(data elements in r) 108 612.67 T
(everse or) 194.68 612.67 T
(der; however) 238.61 612.67 T
(, that would lead to either odd behavior) 302.32 612.67 T
(or odd implementation of the) 108 598.67 T
4 10 Q
(element) 254.13 598.67 T
1 11 Q
( function on sorted sequences.) 296.14 598.67 T
3 13 Q
(16.1.4  The f) 108 567.33 T
(orwar) 169.04 567.33 T
(d-iteration pr) 197.87 567.33 T
(otocol) 263.42 567.33 T
1 11 Q
(Dylan\325s forwar) 108 547.67 T
(d-iteration pr) 181.04 547.67 T
(otocol allows us to connect the usual collection itera-) 246.03 547.67 T
(tion functions to our new collection class. Connecting to the forwar) 108 533.67 T
(d-iteration) 433.61 533.67 T
(pr) 108 519.67 T
(otocol is as simple as de\336ning an appr) 118.76 519.67 T
(opriate method for the) 304.09 519.67 T
4 10 Q
(forward-) 416.57 519.67 T
-0.58 (iteration-protocol) 108 505.67 P
1 11 Q
-0.26 ( generic function. This method must r) 216 505.67 P
-0.26 (eturn two objects and) 397.37 505.67 P
(six functions.) 108 491.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 205.85 458.33 T
4 9 Q
(sorted-sequence.dylan) 225.86 458.33 T
8 10 Q
( \336le) 339.26 458.33 T
(.) 354.67 458.33 T
9 F
(\050contin) 360.23 458.33 T
(ued\051) 390.14 458.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// This method enables many standard and user-defined collection operations) 114 439 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method forward-iteration-protocol) 114 428 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050sorted-sequence :: <sorted-sequence>\051) 135.6 417 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050initial-state :: <integer>, limit :: <integer>,) 119.4 406 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-state :: <function>, finished-state? :: <function>,) 141 395 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(current-key :: <function>, current-element :: <function>,) 141 384 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(current-element-setter :: <function>, copy-state :: <function>\051) 141 373 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050) 124.8 362 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Initial state) 162.6 351 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(0,) 162.6 340 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Limit) 162.6 321 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(sorted-sequence.size,) 162.6 310 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Next state) 168 291 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(method \050collection :: <sorted-sequence>, state :: <integer>\051) 162.6 280 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(state + 1) 173.4 269 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end,) 162.6 258 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Finished state?) 162.6 239 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
( method \050collection :: <sorted-sequence>, state :: <integer>,) 157.2 228 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(limit :: <integer>\051) 205.8 217 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( state = limit;) 168 206 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end,) 162.6 195 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Current key) 162.6 176 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(method \050collection :: <sorted-sequence>, state :: <integer>\051) 162.6 165 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(state) 173.4 154 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end,) 162.6 143 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 470.88 108 136.12 2 L
V
0.25 H
0 Z
N
522 470.88 522 136.12 2 L
V
N
107.88 471 522.12 471 2 L
V
N
107.88 451 522.12 451 2 L
V
N
107.88 136 522.12 136 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "250" 264
%%Page: "251" 265
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(16.1 The) 346.93 677.67 T
5 F
(sorted-sequence.dylan) 382.56 677.67 T
0 F
( file) 502.26 677.67 T
2 F
(251) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(If we ar) 108 451.67 T
(e to iterate over any collection, we must maintain some state to help the) 144.96 451.67 T
(iterator r) 108 437.67 T
(emember the curr) 150.74 437.67 T
(ent point of iteration. For the forwar) 237.16 437.67 T
(d-iteration pr) 412.8 437.67 T
(oto-) 477.79 437.67 T
(col, we maintain this state using any object suitable for a given collection. In this) 108 423.67 T
-0.21 (case, an integer is suf) 108 409.67 P
-0.21 (\336cient to maintain wher) 209.95 409.67 P
-0.21 (e we ar) 325.67 409.67 P
-0.21 (e in the iteration pr) 360.11 409.67 P
-0.21 (ocess. The) 452.26 409.67 P
(\336rst object r) 108 395.67 T
(eturned by) 165.3 395.67 T
4 10 Q
(forward-iteration-protocol) 221.22 395.67 T
1 11 Q
( is a state object that is) 377.22 395.67 T
(suitable for the start of an iteration. The second object r) 108 381.67 T
(eturned is a state object) 374.92 381.67 T
-0.01 (that r) 108 367.67 P
-0.01 (epr) 133.96 367.67 P
-0.01 (esents the ending state of the iteration. Since, in this case, the state object) 149.99 367.67 P
(is just the curr) 108 353.67 T
(ent key of the sorted sequence, the integer 0 is the corr) 176.84 353.67 T
(ect initial) 440.11 353.67 T
-0.24 (state, and the integer that r) 108 339.67 P
-0.24 (epr) 237.2 339.67 P
-0.24 (esents the size of the collection is the corr) 253.23 339.67 P
-0.24 (ect ending) 451.13 339.67 P
(state.) 108 325.67 T
(The thir) 135 311.67 T
(d value r) 173.5 311.67 T
(eturned is a function that takes the collection and the cur-) 216.69 311.67 T
(r) 108 297.67 T
(ent iteration state, and r) 112.15 297.67 T
(eturns a state that is the next step in the iteration. In this) 227.62 297.67 T
(case, we can determine the next state simply by adding 1 to the curr) 108 283.67 T
(ent state.) 437.34 283.67 T
(The fourth value r) 135 269.67 T
(eturned is a function that r) 223.26 269.67 T
(eceives the collection, the cur-) 352.6 269.67 T
(r) 108 255.67 T
(ent state, and the ending state, and that determines whether the iteration is com-) 112.15 255.67 T
(plete. In this case, we need only to check whether the curr) 108 241.67 T
(ent state is equal to the) 388.65 241.67 T
(ending state.) 108 227.67 T
(The \336fth value r) 135 213.67 T
(eturned is a function that generates the curr) 212.93 213.67 T
(ent key into the) 425.31 213.67 T
(collection, given a collection and a state. In this case, the key is the state object.) 108 199.67 T
(The sixth value r) 135 185.67 T
(eturned is a function that r) 216.16 185.67 T
(eceives a collection and a state,) 345.5 185.67 T
(and r) 108 171.67 T
(eturns the curr) 133.52 171.67 T
(ent element of the collection. In this case, the) 205.18 171.67 T
4 10 Q
(element) 424.5 171.67 T
1 11 Q
( func-) 466.5 171.67 T
(tion is the obvious choice, since our state is just the key) 108 157.67 T
(.) 373.64 157.67 T
(The seventh value r) 135 143.67 T
(eturned is a function that r) 230.44 143.67 T
(eceives a new value, a collec-) 359.77 143.67 T
-0.41 (tion, and a state, and changes the curr) 108 129.67 P
-0.41 (ent element to be the new value. In this case,) 288.95 129.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// Current element) 162.6 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(element,) 162.6 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Current element setter) 162.6 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(method \050value :: <object>, collection :: <sorted-sequence>,) 162.6 575 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(state :: <integer>\051) 205.8 564 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(error\050"Setting an element of a sorted sequence) 173.4 553 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is not allowed."\051;) 205.8 542 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end,) 162.6 531 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Copy state) 162.6 512 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(identity\051;) 162.6 501 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method forward-iteration-protocol;) 114 490 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 205.85 635.33 T
4 9 Q
(sorted-sequence.dylan) 225.86 635.33 T
8 10 Q
( \336le) 339.26 635.33 T
(.) 354.67 635.33 T
9 F
(\050contin) 360.23 635.33 T
(ued\051) 390.14 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 483.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 483.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 483 522.12 483 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "251" 265
%%Page: "252" 266
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(252) 72 677.67 T
0 F
(Chapter 16) 95.75 677.67 T
(Definition of a New Collection) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(such an operation is illegal, since the only rational way to add elements to sorted) 108 640.67 T
(sequences is with) 108 626.67 T
4 10 Q
(add!) 195.69 626.67 T
1 11 Q
(. Because this operation is illegal, an err) 219.69 626.67 T
(or is signaled.) 411.38 626.67 T
(The eighth and \336nal value r) 135 612.67 T
(eturned is a function that r) 269.49 612.67 T
(eceives a collection) 398.82 612.67 T
(and a state, and r) 108 598.67 T
(eturns a copy of the state. In this case, we just r) 191.25 598.67 T
(eturn the state,) 418.87 598.67 T
-0.38 (because it is an integer and thus has no slots that ar) 108 584.67 P
-0.38 (e modi\336ed during the iteration) 352.83 584.67 P
(pr) 108 570.67 T
(ocess. If we r) 118.76 570.67 T
(epr) 181.21 570.67 T
(esented the state with an object that had one or mor) 197.23 570.67 T
(e slots that) 448.03 570.67 T
(did change during iteration, we would have to make a new state instance and to) 108 556.67 T
(copy the signi\336cant information fr) 108 542.67 T
(om the old state instance to the new state) 274.32 542.67 T
(instance.) 108 528.67 T
(Once we have de\336ned a) 135 514.67 T
4 10 Q
(forward-iteration-protocol) 254.32 514.67 T
1 11 Q
( method for sorted) 410.32 514.67 T
(sequences, we can iterate over them using) 108 500.67 T
4 10 Q
(for) 315.02 500.67 T
1 11 Q
( loops, mapping functions, and) 333.02 500.67 T
(other collections iterators described in Chapter 1) 108 486.67 T
(1,) 343.08 486.67 T
0 F
(Collections and Contr) 356.83 486.67 T
(ol Flow) 454.01 486.67 T
1 F
(.) 486.7 486.67 T
(Also, if someone de\336nes a new iterator that uses the forwar) 108 472.67 T
(d-iteration pr) 396.43 472.67 T
(otocol,) 461.42 472.67 T
(then this new iterator will work with sorted sequences.) 108 458.67 T
(Dylan has several other r) 135 444.67 T
(elated pr) 256.52 444.67 T
(otocols for backwar) 299.57 444.67 T
(d iteration and for) 394.84 444.67 T
(tables. See the) 108 430.67 T
0 F
(The Dylan Refer) 178.87 430.67 T
(ence Manual) 252.02 430.67 T
1 F
( for details.) 309.37 430.67 T
3 15 Q
(16.2  The) 108 391 T
4 14 Q
(sorted-sequence-library.dylan) 164.07 391 T
3 15 Q
( \336le) 407.67 391 T
1 11 Q
(The de\336nitions for the sorted sequence library and module ar) 108 370.67 T
(e simple. The only) 406.29 370.67 T
(module variable that we need to export is for the sorted sequence class itself. All) 108 356.67 T
-0.35 (the generic functions that we want clients to use on sorted sequences ar) 108 342.67 P
-0.35 (e exported) 450.44 342.67 P
(by the) 108 328.67 T
4 10 Q
(dylan) 140.96 328.67 T
1 11 Q
( module.) 170.96 328.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 210.6 295.33 T
4 9 Q
(sorted-sequence-library.dylan) 230.61 295.33 T
8 10 Q
( \336le) 387.21 295.33 T
(.) 402.62 295.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: dylan-user) 114 276 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define library sorted-sequence) 114 257 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export sorted-sequence;) 124.8 246 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 124.8 235 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use definitions;) 124.8 224 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end library sorted-sequence;) 114 213 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define module sorted-sequence) 114 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export <sorted-sequence>;) 124.8 183 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 124.8 172 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use definitions;) 124.8 161 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end module sorted-sequence;) 114 150 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 307.88 108 143.13 2 L
V
0.25 H
0 Z
N
522 307.88 522 143.13 2 L
V
N
107.88 308 522.12 308 2 L
V
N
107.88 288 522.12 288 2 L
V
N
107.88 143 522.12 143 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "252" 266
%%Page: "253" 267
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(16.4 Summary) 459.24 677.67 T
2 F
(253) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(The) 108 640.67 T
4 10 Q
(definitions) 129.16 640.67 T
1 11 Q
( library and module ar) 195.16 640.67 T
(e de\336ned in Chapter 17,) 304.77 640.67 T
0 F
(The Airport) 426.44 640.67 T
(Application) 108 626.67 T
1 F
(.) 160.14 626.67 T
3 15 Q
(16.3  The) 108 587 T
4 14 Q
(sorted-sequence.lid) 164.07 587 T
3 15 Q
( \336le) 323.67 587 T
1 11 Q
-0.07 (The LID \336le for sorted sequences is also straightforwar) 108 566.67 P
-0.07 (d. The entir) 373.22 566.67 P
-0.07 (e library is con-) 429.08 566.67 P
(tained within two \336les \050in addition to the LID \336le itself\051. The library and module) 108 552.67 T
(de\336nitions ar) 108 538.67 T
(e in the \336le) 172.5 538.67 T
4 10 Q
(sorted-sequence-library.dylan) 228.76 538.67 T
1 11 Q
(. The de\336nitions of) 402.76 538.67 T
(module constants, classes, and methods ar) 108 524.67 T
(e in the implementation \336le,) 313.96 524.67 T
4 10 Q
(sorted-) 453.38 524.67 T
(sequence.dylan) 108 510.67 T
1 11 Q
(.) 192 510.67 T
3 15 Q
(16.4  Summar) 108 395 T
(y) 188.12 395 T
1 11 Q
(In this chapter) 108 374.67 T
(, we cover) 177.24 374.67 T
(ed the following:) 226.46 374.67 T
(\245) 117 354.67 T
(W) 135 354.67 T
(e explor) 144.99 354.67 T
(ed how to de\336ne our own collection class.) 183.92 354.67 T
(\245) 117 334.67 T
(W) 135 334.67 T
(e showed how to integrate that class into Dylan\325s collection framework.) 144.99 334.67 T
(\245) 117 314.67 T
(W) 135 314.67 T
(e used several variations of the contr) 144.99 314.67 T
(ol str) 323.08 314.67 T
(uctur) 347.54 314.67 T
(es pr) 373.42 314.67 T
(esented in Chapter) 396.87 314.67 T
(1) 135 300.67 T
(1,) 139.9 300.67 T
0 F
(Collections and Contr) 153.65 300.67 T
(ol Flow) 250.82 300.67 T
1 F
(.) 283.51 300.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 237.6 477.33 T
4 9 Q
(sorted-sequence.lid) 257.61 477.33 T
8 10 Q
( \336le) 360.21 477.33 T
(.) 375.62 477.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(library:) 114 458 T
(sorted-sequence) 168 458 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(files:) 114 447 T
(sorted-sequence-library) 168 447 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sorted-sequence) 173.4 436 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 489.88 108 429.12 2 L
V
0.25 H
0 Z
N
522 489.88 522 429.12 2 L
V
N
107.88 490 522.12 490 2 L
V
N
107.88 470 522.12 470 2 L
V
N
107.88 429 522.12 429 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "253" 267
%%Page: "254" 268
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 126 522 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "254" 268
%%Page: "255" 269
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(255) 298.88 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(17) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(17) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(The Airport Application) 110 566.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
-0.32 (In this chapter) 108 424.67 P
-0.32 (, we pr) 176.6 424.67 P
-0.32 (esent the entir) 209.4 424.67 P
-0.32 (e \336rst draft of our airport example application.) 277.31 424.67 P
(The code in this chapter is complete, and, given the libraries de\336ned in Chapter) 108 410.67 T
-0.22 (14,) 108 396.67 P
0 F
-0.22 (Four Complete Libraries) 126.81 396.67 P
1 F
-0.22 (, and Chapter 16,) 234.15 396.67 P
0 F
-0.22 (De\336nition of a New Collection) 321.44 396.67 P
1 F
-0.22 (, the code) 455.52 396.67 P
(should r) 108 382.67 T
(un in a standar) 148.63 382.67 T
(d Dylan implementation. This example pulls together) 221.54 382.67 T
(many of the techniques pr) 108 368.67 T
(esented so far) 234.88 368.67 T
(.) 300.93 368.67 T
3 15 Q
(17.1  The) 108 329 T
4 14 Q
(definitions.dylan) 164.07 329 T
3 15 Q
( \336le) 306.87 329 T
1 11 Q
-0.44 (This \336le contains common de\336nitions that ar) 108 308.67 P
-0.44 (e used thr) 322.19 308.67 P
-0.44 (oughout several libraries in) 369.5 308.67 P
(the airport example.) 108 294.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 243 261.33 T
4 9 Q
(definitions.dylan) 263.01 261.33 T
8 10 Q
( \336le) 354.81 261.33 T
(.) 370.22 261.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: definitions) 114 242 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// This file contains constants and other definitions used in common with) 114 223 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// the other parts of the airport example) 114 212 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// The capital letters of the alphabet) 114 193 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define constant $letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";) 114 182 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// This type represents positive integers) 114 163 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define constant <positive-integer> = limited\050<integer>, min: 1\051;) 114 152 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define constant $hours-per-day = 24;) 114 133 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 273.88 108 126.12 2 L
V
0.25 H
0 Z
N
522 273.88 522 126.12 2 L
V
N
107.88 274 522.12 274 2 L
V
N
107.88 254 522.12 254 2 L
V
N
107.88 126 522.12 126 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "255" 269
%%Page: "256" 270
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(256) 72 677.67 T
0 F
(Chapter 17) 95.75 677.67 T
(The Airport Application) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(17.2  The) 108 453 T
4 14 Q
(airport-classes.dylan) 164.07 453 T
3 15 Q
( \336le) 340.47 453 T
1 11 Q
(This \336le contains all the main classes speci\336c to the airport example. Several) 108 432.67 T
(methods that describe or initialize these objects ar) 108 418.67 T
(e included as well.) 349.64 418.67 T
3 13 Q
(17.2.1  Ph) 108 387.33 T
(ysical objects) 157 387.33 T
1 11 Q
(The classes that follow describe fundamental attributes of tangible objects.) 108 367.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(define constant $minutes-per-hour = 60;) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define constant $seconds-per-minute = 60;) 114 597 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define constant $seconds-per-hour) 114 578 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= $minutes-per-hour * $seconds-per-minute;) 124.8 567 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// This method returns the union of the false type and a type you specify,) 114 548 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// as a simple shorthand) 114 537 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// This method may already be provided by your Dylan implementation) 114 526 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method false-or \050other-type :: <type>\051 => \050combined-type :: <type>\051) 114 515 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(type-union\050singleton\050#f\051, other-type\051;) 124.8 504 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method false-or;) 114 493 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 232.2 334.33 T
4 9 Q
(airport-classes.dylan) 252.21 334.33 T
8 10 Q
( \336le) 365.61 334.33 T
(.) 381.02 334.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: airport) 114 315 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// PHYSICAL OBJECTS AND SIZE) 114 296 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Used to keep track of object dimensions and object capacities) 114 277 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// All dimensions are in feet) 114 266 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <size> \050<object>\051) 114 255 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot length :: <positive-integer>, init-keyword: length:;) 124.8 244 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot width :: <positive-integer>, init-keyword: width:;) 124.8 233 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot height :: <positive-integer>, init-keyword: height:;) 124.8 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <size>;) 114 211 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define abstract class <physical-object> \050<object>\051) 114 192 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot current-position :: <position>, init-keyword: current-position:;) 124.8 181 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot physical-size :: <size>, init-keyword: physical-size:;) 124.8 170 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <physical-object>;) 114 159 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 216.65 635.33 T
4 9 Q
(definitions.dylan) 236.66 635.33 T
8 10 Q
( \336le) 328.46 635.33 T
(.) 343.87 635.33 T
9 F
( \050contin) 346.65 635.33 T
(ued\051) 379.34 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 486.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 486.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 486 522.12 486 2 L
V
N
108 346.88 108 152.12 2 L
V
N
522 346.88 522 152.12 2 L
V
N
107.88 347 522.12 347 2 L
V
N
107.88 327 522.12 327 2 L
V
N
107.88 152 522.12 152 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "256" 270
%%Page: "257" 271
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.2 The) 346.93 677.67 T
5 F
(airport-classes.dylan) 382.56 677.67 T
0 F
( file) 502.26 677.67 T
2 F
(257) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(In the pr) 108 556.67 T
(eceding portion of the) 149.62 556.67 T
4 10 Q
(airport-classes.dylan) 259.57 556.67 T
1 11 Q
( \336le, we de\336ne the class) 385.57 556.67 T
4 10 Q
-0.88 (<size>) 108 542.67 P
1 11 Q
-0.41 (, which allows us to specify the external dimensions and container volume) 144 542.67 P
(of various objects. For example, we might want to specify that certain gate ar) 108 528.67 T
(eas) 480.76 528.67 T
(might be too small to hold the lar) 108 514.67 T
(ge air) 269.52 514.67 T
(craft. W) 296.51 514.67 T
(e also de\336ne the base class for all) 333.97 514.67 T
(tangible objects,) 108 500.67 T
4 10 Q
(<physical-object>) 188.67 500.67 T
1 11 Q
(.) 290.67 500.67 T
(Next, we de\336ne the classes wher) 135 486.67 T
(e air) 293.03 486.67 T
(craft ar) 313.89 486.67 T
(e normally located.) 348.27 486.67 T
3 13 Q
(17.2.2  V) 108 455.33 T
(ehic) 150.16 455.33 T
(le container) 171.3 455.33 T
(s) 230.99 455.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(define method say \050physical-object :: <physical-object>\051 => \050\051) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"object at "\051;) 124.8 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050physical-object.current-position\051;) 124.8 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 114 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 205.85 416.33 T
4 9 Q
(airport-classes.dylan) 225.86 416.33 T
8 10 Q
( \336le) 339.26 416.33 T
(.) 354.67 416.33 T
9 F
(\050contin) 360.23 416.33 T
(ued\051) 390.14 416.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// VEHICLE STORAGE) 114 397 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// The default size for a vehicle container) 114 378 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define constant $default-capacity) 114 367 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<size>, length: 350, width: 200, height: 100\051;) 124.8 356 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// This class represents a location where an aircraft could be stored) 114 337 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define abstract class <vehicle-storage> \050<physical-object>\051) 114 326 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot storage-capacity :: <size> = $default-capacity,) 124.8 315 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(init-keyword: capacity:;) 135.6 304 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(each-subclass slot name-prefix :: <string> = "Storage", setter: #f;) 124.8 293 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot identifier :: <string>, required-init-keyword: id:;) 124.8 282 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot connected-to :: <simple-object-vector>;) 124.8 271 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <vehicle-storage>;) 114 260 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// By using the name-prefix each-subclass slot, we share one say method) 114 241 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// for all vehicle containers) 114 230 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method say \050storage :: <vehicle-storage>\051 => \050\051) 114 219 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"%s %s", storage.name-prefix, storage.identifier\051;) 124.8 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 114 197 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 232.2 635.33 T
4 9 Q
(airport-classes.dylan) 252.21 635.33 T
8 10 Q
( \336le) 365.61 635.33 T
(.) 381.02 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 576.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 576.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 576 522.12 576 2 L
V
N
108 428.88 108 190.12 2 L
V
N
522 428.88 522 190.12 2 L
V
N
107.88 429 522.12 429 2 L
V
N
107.88 409 522.12 409 2 L
V
N
107.88 190 522.12 190 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "257" 271
%%Page: "258" 272
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(258) 72 677.67 T
0 F
(Chapter 17) 95.75 677.67 T
(The Airport Application) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
(define method object-fits?) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050object :: <physical-object>, container :: <vehicle-storage>\051) 135.6 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050fits? :: <boolean>\051) 119.4 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let object-size = object.physical-size;) 124.8 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let container-capacity = container.storage-capacity;) 124.8 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(object-size.length < container-capacity.length) 124.8 561 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(& object-size.height < container-capacity.height) 135.6 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(& object-size.width < container-capacity.width;) 135.6 539 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method object-fits?;) 114 528 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Vehicle storage that can hold only one aircraft regardless of direction) 114 509 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Direction in this context is either #"inbound" or #"outbound") 114 498 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define abstract class <single-storage> \050<vehicle-storage>\051) 114 487 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot vehicle-currently-occupying :: false-or\050<aircraft>\051 = #f;) 124.8 476 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <single-storage>;) 114 465 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Vehicle storage that can hold multiple aircraft, with distinct queues) 114 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// for each direction) 114 435 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define abstract class <multiple-storage> \050<vehicle-storage>\051) 114 424 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot vehicles-by-direction :: <object-table> = make\050<object-table>\051;) 124.8 413 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot maxima-by-direction :: <object-table> = make\050<object-table>\051;) 124.8 402 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(keyword directions:;) 124.8 391 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(keyword maxima:;) 124.8 380 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <multiple-storage>;) 114 369 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// In a real airport, there would be many paths an aircraft could take) 114 350 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// For our simple airport example, we define only the #"inbound" and) 114 339 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// #"outbound" paths) 114 328 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// The directions parameter is a sequence of these aircraft path names) 114 317 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Multiple storage containers can limit the number of aircraft that) 114 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// they can hold for each path; this is the maxima parameter) 114 295 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// This initialize method creates a queue to hold aircraft for each) 114 284 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// direction, and stores the queue in a table indexed by direction) 114 273 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// This method also stores the maximum number of aircaft for that) 114 262 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// direction in a different table) 114 251 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method initialize) 114 240 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050object :: <multiple-storage>, #key directions :: <sequence>,) 135.6 229 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(maxima :: <sequence>\051) 141 218 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method \050\051;) 124.8 207 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for \050direction in directions,) 124.8 196 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(maximum in maxima\051) 151.8 185 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(object.vehicles-by-direction[direction] := make\050<deque>\051;) 135.6 174 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(object.maxima-by-direction[direction] := maximum;) 135.6 163 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end for;) 124.8 152 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method initialize;) 114 141 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 205.85 635.33 T
4 9 Q
(airport-classes.dylan) 225.86 635.33 T
8 10 Q
( \336le) 339.26 635.33 T
(.) 354.67 635.33 T
9 F
(\050contin) 360.23 635.33 T
(ued\051) 390.14 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 134.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 134.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 134 522.12 134 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "258" 272
%%Page: "259" 273
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.2 The) 346.93 677.67 T
5 F
(airport-classes.dylan) 382.56 677.67 T
0 F
( file) 502.26 677.67 T
2 F
(259) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// From the preceding basic vehicle containers, we can build specific) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// containers for each aircraft-transition location) 114 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <gate> \050<single-storage>\051) 114 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(inherited slot name-prefix, init-value: "Gate";) 124.8 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <gate>;) 114 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Given a zero-based terminal number, and a one-based gate number, create) 114 553 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// an return a string with a gate letter and a terminal number in it) 114 542 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method generate-gate-id) 114 531 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050term :: <positive-integer>, gate :: <positive-integer>\051) 135.6 520 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050gate-id :: <string>\051) 119.4 509 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-to-string\050"%c%d", $letters[term], gate\051;) 124.8 498 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method generate-gate-id;) 114 487 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Gates-per-terminal is a vector; each element of the vector is the) 114 468 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// number of gates to create for the terminal at that index) 114 457 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Returns a vector of all the gate instances) 114 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method generate-gates) 114 435 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050gates-per-terminal :: <vector>, default-gate-capacity :: <size>\051) 135.6 424 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050gates :: <vector>\051) 119.4 413 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let result = make\050<vector>, size: reduce1\050\134+, gates-per-terminal\051\051;) 124.8 402 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let result-index = 0;) 124.8 391 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for \050term from 0 below gates-per-terminal.size\051) 124.8 380 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for \050gate from 1 to gates-per-terminal[term]\051) 135.6 369 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(result[result-index]) 146.4 358 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(:= make\050<gate>, id: generate-gate-id\050term, gate\051,) 157.2 347 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(capacity: default-gate-capacity\051;) 200.4 336 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(result-index := result-index + 1;) 146.4 325 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end for;) 135.6 314 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end for;) 124.8 303 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(result;) 124.8 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method generate-gates;) 114 281 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// This class represents the part of the airspace over a given airport) 114 262 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <sky> \050<multiple-storage>\051) 114 251 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The airport over which this piece of sky is located) 124.8 240 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot airport-below :: <airport>, required-init-keyword: airport:;) 124.8 229 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(inherited slot name-prefix, init-value: "Sky";) 124.8 218 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(required keyword inbound-aircraft:;) 124.8 207 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <sky>;) 114 196 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 205.85 635.33 T
4 9 Q
(airport-classes.dylan) 225.86 635.33 T
8 10 Q
( \336le) 339.26 635.33 T
(.) 354.67 635.33 T
9 F
(\050contin) 360.23 635.33 T
(ued\051) 390.14 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 189.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 189.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 189 522.12 189 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "259" 273
%%Page: "260" 274
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(260) 72 677.67 T
0 F
(Chapter 17) 95.75 677.67 T
(The Airport Application) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.15 (In the pr) 108 292.67 P
-0.15 (eceding portion of the) 149.32 292.67 P
4 10 Q
-0.33 (airport-classes.dylan) 258.65 292.67 P
1 11 Q
-0.15 ( \336le, we de\336ne the tangi-) 384.65 292.67 P
(ble objects that r) 108 278.67 T
(epr) 187.09 278.67 T
(esent the various normal locations for air) 203.12 278.67 T
(craft in and ar) 402.11 278.67 T
(ound) 470.21 278.67 T
(an airport. These locations ar) 108 264.67 T
(e known as containers or vehicle storage. W) 248.69 264.67 T
(e can) 460.75 264.67 T
(connect vehicle-storage instances to one another to form an airport. Instances of) 108 250.67 T
4 10 Q
(<single-storage>) 108 236.67 T
1 11 Q
( can hold only one air) 204 236.67 T
(craft at a time, wher) 309.12 236.67 T
(eas instances of) 406.19 236.67 T
4 10 Q
-0.83 (<multiple-storage>) 108 222.67 P
1 11 Q
-0.38 ( can hold mor) 216 222.67 P
-0.38 (e than one air) 282.1 222.67 P
-0.38 (craft at a time. Also, instances of) 346.9 222.67 P
4 10 Q
(<multiple-storage>) 108 208.67 T
1 11 Q
( tr) 216 208.67 T
(eat inbound air) 226.48 208.67 T
(craft separately fr) 300.63 208.67 T
(om outbound air) 385.98 208.67 T
(craft.) 468.12 208.67 T
(W) 108 194.67 T
(e de\336ne the) 117.99 194.67 T
4 10 Q
(object-fits?) 177.08 194.67 T
1 11 Q
( method, which determines whether a physical) 249.08 194.67 T
(object can \336t into a container) 108 180.67 T
(. W) 246.65 180.67 T
(e also de\336ne methods for cr) 262.14 180.67 T
(eating, initializing,) 396.26 180.67 T
(and describing various containers. Note the use of the) 108 166.67 T
4 10 Q
(each-subclass) 372.58 166.67 T
1 11 Q
( slot) 450.58 166.67 T
4 10 Q
(name-) 473.54 166.67 T
-0.99 (prefix) 108 152.67 P
1 11 Q
-0.46 (, which permits one) 144 152.67 P
4 10 Q
-0.99 (say) 241.06 152.67 P
1 11 Q
-0.46 ( method on the) 259.06 152.67 P
4 10 Q
-0.99 (<vehicle-storage>) 333.6 152.67 P
1 11 Q
-0.46 ( class to cover) 435.6 152.67 P
-0.02 (all the vehicle-container classes. Each subclass of vehicle storage can override the) 108 138.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// When a sky instance is created, a sequence of inbound aircraft is) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// provided) 114 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// This method initializes the direction slot of the aircraft to) 114 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// #"inbound", and places the aircraft in the inbound queue of the sky) 114 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// instance) 114 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method initialize \050sky :: <sky>,) 114 561 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#key inbound-aircraft :: <sequence>\051) 254.4 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050sky, directions: #[#"inbound", #"outbound"],) 124.8 539 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(maxima: vector\050inbound-aircraft.size,) 189.6 528 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(inbound-aircraft.size\051\051;) 270.6 517 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let inbound-queue = sky.vehicles-by-direction [#"inbound"];) 124.8 506 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for \050vehicle in inbound-aircraft\051) 124.8 495 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(vehicle.direction := #"inbound";) 135.6 484 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(push-last\050inbound-queue, vehicle\051;) 135.6 473 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end for;) 124.8 462 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Connect the airport to the sky) 124.8 451 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(sky.airport-below.sky-above := sky;) 124.8 440 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method initialize;) 114 429 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// This class represents a strip of land where aircraft land and take off) 114 410 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <runway> \050<single-storage>\051) 114 399 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(inherited slot name-prefix, init-value: "Runway";) 124.8 388 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <runway>;) 114 377 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Taxiways connect runways and gates) 114 358 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <taxiway> \050<multiple-storage>\051) 114 347 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(inherited slot name-prefix, init-value: "Taxiway";) 124.8 336 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <taxiway>;) 114 325 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 205.85 635.33 T
4 9 Q
(airport-classes.dylan) 225.86 635.33 T
8 10 Q
( \336le) 339.26 635.33 T
(.) 354.67 635.33 T
9 F
(\050contin) 360.23 635.33 T
(ued\051) 390.14 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 318.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 318.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 318 522.12 318 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "260" 274
%%Page: "261" 275
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.2 The) 346.93 677.67 T
5 F
(airport-classes.dylan) 382.56 677.67 T
0 F
( file) 502.26 677.67 T
2 F
(261) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.37 (inherited value of this slot, to ensur) 108 640.67 P
-0.37 (e that the pr) 277.96 640.67 P
-0.37 (oper name of the vehicle storage is) 335.47 640.67 P
(used in the description of instances of that subclass.) 108 626.67 T
(The) 135 612.67 T
4 10 Q
(<vehicle-storage>) 156.16 612.67 T
1 11 Q
(,) 258.16 612.67 T
4 10 Q
(<multiple-storage>) 263.66 612.67 T
1 11 Q
(, and) 371.66 612.67 T
4 10 Q
(<single-storage>) 398.54 612.67 T
1 11 Q
(classes ar) 108 598.67 T
(e all abstract, because it is not sensible to instantiate them. They contain) 153.24 598.67 T
(partial implementations that they contribute to their subclasses.) 108 584.67 T
(In the) 135 570.67 T
4 10 Q
(generate-gates) 165.87 570.67 T
1 11 Q
( method, the) 249.87 570.67 T
4 10 Q
(gates-per-terminal) 313.82 570.67 T
1 11 Q
( parameter is a) 421.82 570.67 T
(vector that contains the count of gates for each terminal. By adding up all the ele-) 108 556.67 T
(ments of that vector with) 108 542.67 T
4 10 Q
(reduce1) 232.79 542.67 T
1 11 Q
(, we can compute the total number of gates at) 274.8 542.67 T
(the airport, and thus the size of the vector that can hold all the gates.) 108 528.67 T
(Next, we examine the classes, initialization methods, and) 135 514.67 T
4 10 Q
(say) 415.17 514.67 T
1 11 Q
( methods for) 433.17 514.67 T
(the vehicles in the application.) 108 500.67 T
3 13 Q
(17.2.3  V) 108 469.33 T
(ehic) 150.16 469.33 T
(les) 171.3 469.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 205.85 430.33 T
4 9 Q
(airport-classes.dylan) 225.86 430.33 T
8 10 Q
( \336le) 339.26 430.33 T
(.) 354.67 430.33 T
9 F
(\050contin) 360.23 430.33 T
(ued\051) 390.14 430.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// VEHICLES) 114 411 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// The class that represents all self-propelled devices) 114 392 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define abstract class <vehicle> \050<physical-object>\051) 114 381 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Every vehicle has a unique identification code) 124.8 370 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot vehicle-id :: <string>, required-init-keyword: id:;) 124.8 359 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The normal operating speed of this class of vehicle in miles per hour) 124.8 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(each-subclass slot cruising-speed :: <positive-integer>;) 124.8 337 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Allow individual differences in the size of particular aircraft,) 124.8 326 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// while providing a suitable default for each class of aircraft) 124.8 315 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(each-subclass slot standard-size :: <size>;) 124.8 304 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <vehicle>;) 114 293 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method initialize \050vehicle :: <vehicle>, #key\051) 114 274 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 124.8 263 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(unless \050slot-initialized?\050vehicle, physical-size\051\051) 124.8 252 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(vehicle.physical-size := vehicle.standard-size;) 135.6 241 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end unless;) 124.8 230 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method initialize;) 114 219 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050object :: <vehicle>\051 => \050\051) 114 200 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Vehicle %s", object.vehicle-id\051;) 124.8 189 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 114 178 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 442.88 108 171.12 2 L
V
0.25 H
0 Z
N
522 442.88 522 171.12 2 L
V
N
107.88 443 522.12 443 2 L
V
N
107.88 423 522.12 423 2 L
V
N
107.88 171 522.12 171 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "261" 275
%%Page: "262" 276
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(262) 72 677.67 T
0 F
(Chapter 17) 95.75 677.67 T
(The Airport Application) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// This class represents companies that fly commercial aircraft) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <airline> \050<object>\051) 114 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot name :: <string>, required-init-keyword: name:;) 124.8 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot code :: <string>, required-init-keyword: code:;) 124.8 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <airline>;) 114 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050object :: <airline>\051 => \050\051) 114 553 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Airline %s", object.name\051;) 124.8 542 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 114 531 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// This class represents a regularly scheduled trip for a commercial) 114 512 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// airline) 114 501 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <flight> \050<object>\051) 114 490 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot airline :: <airline>, required-init-keyword: airline:;) 124.8 479 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot number :: <nonnegative-integer>,) 124.8 468 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(required-init-keyword: number:;) 135.6 457 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <flight>;) 114 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050object :: <flight>\051 => \050\051) 114 427 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Flight %s %d", object.airline.code, object.number\051;) 124.8 416 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 114 405 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// This class represents vehicles that normally fly for a portion of) 114 386 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// their trip) 114 375 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define abstract class <aircraft> \050<vehicle>\051) 114 364 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot altitude :: <integer>, init-keyword: altitude:;) 124.8 353 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Direction here is either #"inbound" or #"outbound") 124.8 342 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot direction :: <symbol>;) 124.8 331 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The next step this aircraft might be able to make) 124.8 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot next-transition :: <aircraft-transition>,) 124.8 309 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(required-init-keyword: transition:, setter: #f;) 135.6 298 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <aircraft>;) 114 287 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method initialize \050vehicle :: <aircraft>, #key\051) 114 268 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 124.8 257 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// There is a one-to-one correspondance between aircraft instances and) 124.8 246 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// transition instances) 124.8 235 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// An aircraft can only make one transition at a time) 124.8 224 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Connect the aircraft to its transition) 124.8 213 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(vehicle.next-transition.transition-aircraft := vehicle;) 124.8 202 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method initialize;) 114 191 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 205.85 635.33 T
4 9 Q
(airport-classes.dylan) 225.86 635.33 T
8 10 Q
( \336le) 339.26 635.33 T
(.) 354.67 635.33 T
9 F
(\050contin) 360.23 635.33 T
(ued\051) 390.14 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 184.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 184.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 184 522.12 184 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "262" 276
%%Page: "263" 277
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.2 The) 346.93 677.67 T
5 F
(airport-classes.dylan) 382.56 677.67 T
0 F
( file) 502.26 677.67 T
2 F
(263) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// The next step an aircraft might be able to make) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <aircraft-transition> \050<object>\051) 114 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot transition-aircraft :: <aircraft>, init-keyword: aircraft:;) 124.8 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot from-container :: <vehicle-storage>, init-keyword: from:;) 124.8 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot to-container :: <vehicle-storage>, init-keyword: to:;) 124.8 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The earliest possible time that the transition could take place) 124.8 561 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot earliest-arrival :: <time-of-day>, init-keyword: arrival:;) 124.8 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Has this transition already been entered in the sorted sequence?) 124.8 539 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// This flag saves searching the sorted sequence) 124.8 528 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot pending? :: <boolean> = #f, init-keyword: pending?:;) 124.8 517 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <aircraft-transition>;) 114 506 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Describes one step of an aircraft\325s movements) 114 487 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method say \050transition :: <aircraft-transition>\051 => \050\051) 114 476 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050transition.earliest-arrival\051;) 124.8 465 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050": "\051;) 124.8 454 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050transition.transition-aircraft\051;) 124.8 443 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050" at "\051;) 124.8 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050transition.to-container\051;) 124.8 421 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 114 410 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Commercial aircraft are aircraft that may have a flight) 114 391 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// assigned to them) 114 380 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define abstract class <commercial-aircraft> \050<aircraft>\051) 114 369 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot aircraft-flight :: false-or\050<flight>\051 = #f, init-keyword: flight:;) 124.8 358 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <commercial-aircraft>;) 114 347 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050object :: <commercial-aircraft>\051 => \050\051) 114 328 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let flight = object.aircraft-flight;) 124.8 317 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050flight\051) 124.8 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050flight\051;) 135.6 295 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(else) 124.8 284 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Unscheduled Aircraft %s", object.vehicle-id\051;) 135.6 273 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 124.8 262 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 114 251 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The class that represents all commericial Boeing 707 aircraft) 114 232 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <B707> \050<commercial-aircraft>\051) 114 221 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(inherited slot cruising-speed, init-value: 368;) 124.8 210 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(inherited slot standard-size,) 124.8 199 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(init-value: make\050<size>, length: 153, width: 146, height: 42\051;) 135.6 188 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <B707>;) 114 177 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 205.85 635.33 T
4 9 Q
(airport-classes.dylan) 225.86 635.33 T
8 10 Q
( \336le) 339.26 635.33 T
(.) 354.67 635.33 T
9 F
(\050contin) 360.23 635.33 T
(ued\051) 390.14 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 170.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 170.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 170 522.12 170 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "263" 277
%%Page: "264" 278
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(264) 72 677.67 T
0 F
(Chapter 17) 95.75 677.67 T
(The Airport Application) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.45 (In the pr) 108 523.67 P
-0.45 (eceding code, we model everything fr) 148.73 523.67 P
-0.45 (om the most general class of vehicle) 329.82 523.67 P
(down to the speci\336c class that r) 108 509.67 T
(epr) 259.95 509.67 T
(esents the Boeing 707. W) 275.98 509.67 T
(e also model the tran-) 395.05 509.67 T
(sition steps that an air) 108 495.67 T
(craft may take as it travels thr) 214.68 495.67 T
(oughout the airport, and the) 358.82 495.67 T
(airlines and \337ights associated with commer) 108 481.67 T
(cial air) 318.9 481.67 T
(craft.) 351.29 481.67 T
3 13 Q
(17.2.4  Airpor) 108 450.33 T
(ts) 175.76 450.33 T
1 11 Q
(Finally) 108 430.67 T
(, we pr) 140.52 430.67 T
(esent the class that r) 173.97 430.67 T
(epr) 271.55 430.67 T
(esents the entir) 287.58 430.67 T
(e airport and pr) 360.79 430.67 T
(ovide the) 437.29 430.67 T
(method that brie\337y describes the airport.) 108 416.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(define method say \050aircraft :: <B707>\051 => \050\051) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050aircraft.aircraft-flight\051) 124.8 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 135.6 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(else) 124.8 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Unscheduled B707 %s", aircraft.vehicle-id\051;) 135.6 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 124.8 561 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 114 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 205.85 383.33 T
4 9 Q
(airport-classes.dylan) 225.86 383.33 T
8 10 Q
( \336le) 339.26 383.33 T
(.) 354.67 383.33 T
9 F
(\050contin) 360.23 383.33 T
(ued\051) 390.14 383.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// AIRPORTS) 114 364 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// The class that represents all places where people and aircraft meet) 114 345 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <airport> \050<physical-object>\051) 114 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The name of the airport, such as "San Fransisco International Airport") 124.8 323 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot name :: <string>, init-keyword: name:;) 124.8 312 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The three letter abbreviation, such as "SFO") 124.8 301 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot code :: <string>, init-keyword: code:;) 124.8 290 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The airspace above the airport) 124.8 279 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot sky-above :: <sky>;) 124.8 268 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <airport>;) 114 257 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050airport :: <airport>\051 => \050\051) 114 238 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Airport %s", airport.code\051;) 124.8 227 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 114 216 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 205.85 635.33 T
4 9 Q
(airport-classes.dylan) 225.86 635.33 T
8 10 Q
( \336le) 339.26 635.33 T
(.) 354.67 635.33 T
9 F
(\050contin) 360.23 635.33 T
(ued\051) 390.14 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 543.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 543.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 543 522.12 543 2 L
V
N
108 395.88 108 209.12 2 L
V
N
522 395.88 522 209.12 2 L
V
N
107.88 396 522.12 396 2 L
V
N
107.88 376 522.12 376 2 L
V
N
107.88 209 522.12 209 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "264" 278
%%Page: "265" 279
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.3 The) 341.23 677.67 T
5 F
(vehicle-dynamics.dylan) 376.86 677.67 T
0 F
( file) 502.26 677.67 T
2 F
(265) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(17.3  The) 108 638 T
4 14 Q
(vehicle-dynamics.dylan) 164.07 638 T
3 15 Q
( \336le) 348.87 638 T
1 11 Q
-0.37 (The) 108 617.67 P
4 10 Q
-0.82 (vehicle-dynamics.dylan) 128.79 617.67 P
1 11 Q
-0.37 ( \336le contains stubs for calculations that pr) 260.79 617.67 P
-0.37 (edict the) 460.33 617.67 P
(behavior of the air) 108 603.67 T
(craft involved in the example. T) 197.04 603.67 T
(r) 350.61 603.67 T
(ue aer) 354.86 603.67 T
(onautical calculations) 384.43 603.67 T
(ar) 108 589.67 T
(e beyond the scope of this book.) 117.65 589.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 229.5 556.33 T
4 9 Q
(vehicle-dynamics.dylan) 249.51 556.33 T
8 10 Q
( \336le) 368.31 556.33 T
(.) 383.72 556.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: airport) 114 537 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// We do not need to type these constants strongly, because the Dylan) 114 518 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// compiler will figure them out for us) 114 507 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define constant $average-b707-brake-speed = 60.0;) 114 488 T
5 F
( // Miles per hour) 378.6 488 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define constant $feet-per-mile = 5280.0;) 114 469 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define constant $average-b707-takeoff-speed = 60.0;) 114 450 T
5 F
(// Miles per hour) 394.8 450 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define constant $takeoff-pause-time = 120;) 114 431 T
5 F
(// Seconds) 346.2 431 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define constant $average-b707-taxi-speed = 10.0;) 114 412 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define constant $average-b707-gate-turnaround-time) 114 393 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= 34 * $seconds-per-minute;) 124.8 382 T
5 F
(// Seconds) 276 382 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Computes how long it will take an aircraft to reach an airport) 114 363 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method flying-time) 114 352 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050aircraft :: <aircraft>, destination :: <airport>\051) 135.6 341 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050duration :: <time-offset>\051) 119.4 330 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// A simplistic calculation that assumes that the aircraft will) 124.8 319 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// average a particular cruising speed for the trip) 124.8 308 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(make\050<time-offset>,) 124.8 297 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds:) 151.8 286 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ceiling/\050distance-3d\050aircraft, destination\051,) 162.6 275 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(aircraft.cruising-speed) 211.2 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(/ as\050<single-float>, $seconds-per-hour\051\051\051;) 222 253 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method flying-time;) 114 242 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 568.88 108 235.12 2 L
V
0.25 H
0 Z
N
522 568.88 522 235.12 2 L
V
N
107.88 569 522.12 569 2 L
V
N
107.88 549 522.12 549 2 L
V
N
107.88 235 522.12 235 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "265" 279
%%Page: "266" 280
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(266) 72 677.67 T
0 F
(Chapter 17) 95.75 677.67 T
(The Airport Application) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// Computes the distance between an aircraft and an airport,) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// taking into account the altitude of the aircraft) 114 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Assumes the altitude of the aircraft is the height) 114 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// above the ground level of the airport) 114 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method distance-3d) 114 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050aircraft :: <aircraft>, destination :: <airport>\051) 135.6 561 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050distance :: <single-float>\051) 119.4 550 T
5 F
(// Miles) 297.6 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Here, a squared plus b squared is equals to c squared, where c is the) 124.8 539 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// hypotenuse, and a and b are the other sides of a right triangle) 124.8 528 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(sqrt\050\050aircraft.altitude / $feet-per-mile\051 ^ 2) 124.8 517 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(+ distance-2d\050aircraft.current-position,) 151.8 506 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(destination.current-position\051 ^ 2\051;) 227.4 495 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method distance-3d;) 114 484 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The distance between two positions, ignoring altitude) 114 465 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method distance-2d) 114 454 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050position1 :: <relative-position>, position2 :: <absolute-position>\051) 135.6 443 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050distance :: <single-float>\051) 119.4 432 T
5 F
(// Miles) 292.2 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// When we have a relative position for the first argument \050the) 124.8 421 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// aircraft\051, we assume the relative position is relative to the second) 124.8 410 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// argument \050the airport\051) 124.8 399 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(position1.distance;) 124.8 388 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method distance-2d;) 114 377 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// It would be sensible to provide a distance-2d method that computed) 114 358 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// the great-circle distance between two absolute positions) 114 347 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Our example does not need this computation, which is) 114 336 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// beyond the scope of this book) 114 325 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// The time it takes to go from the point of touchdown to the entrance) 114 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// to the taxiway) 114 295 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method brake-time) 114 284 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050aircraft :: <b707>, runway :: <runway>\051) 135.6 273 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050duration :: <time-offset>\051) 119.4 262 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<time-offset>,) 124.8 251 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( total-seconds:) 146.4 240 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( ceiling/\050runway.physical-size.length / $feet-per-mile,) 157.2 229 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($average-b707-brake-speed / $seconds-per-hour\051\051;) 211.2 218 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method brake-time;) 114 207 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 203.15 635.33 T
4 9 Q
(vehicle-dynamics.dylan) 223.16 635.33 T
8 10 Q
( \336le) 341.96 635.33 T
(.) 357.37 635.33 T
9 F
( \050contin) 360.15 635.33 T
(ued\051) 392.84 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 200.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 200.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 200 522.12 200 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "266" 280
%%Page: "267" 281
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.4 The) 386.83 677.67 T
5 F
(schedule.dylan) 422.46 677.67 T
0 F
( file) 502.26 677.67 T
2 F
(267) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(17.4  The) 108 200 T
4 14 Q
(schedule.dylan) 164.07 200 T
3 15 Q
( \336le) 281.67 200 T
1 11 Q
(This \336le contains the key generic functions and methods that compute the sched-) 108 179.67 T
(ule of air) 108 165.67 T
(craft transitions using the sorted sequence, time, and position libraries,) 151.12 165.67 T
(as well as the classes and methods described so far in this chapter) 108 151.67 T
(.) 425.83 151.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// The time it takes to go from the entrance of the taxiway to the point) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// of takeoff) 114 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method takeoff-time) 114 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050aircraft :: <b707>, runway :: <runway>\051) 135.6 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050duration :: <time-offset>\051) 119.4 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<time-offset>,) 124.8 561 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( total-seconds:) 146.4 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( ceiling/\050runway.physical-size.length / $feet-per-mile,) 157.2 539 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($average-b707-takeoff-speed / $seconds-per-hour\051) 211.2 528 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( + $takeoff-pause-time\051;) 168 517 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method takeoff-time;) 114 506 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The time it takes to taxi from the runway entrance across the taxiway) 114 487 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// to the gate) 114 476 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method gate-time) 114 465 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050aircraft :: <b707>, taxiway :: <taxiway>\051) 135.6 454 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050duration :: <time-offset>\051) 119.4 443 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<time-offset>,) 124.8 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( total-seconds:) 146.4 421 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( ceiling/\050taxiway.physical-size.length / $feet-per-mile,) 157.2 410 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($average-b707-taxi-speed / $seconds-per-hour\051\051;) 211.2 399 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method gate-time;) 114 388 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The time it takes to taxi from the gate across the taxiway to the) 114 369 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// entrance of the runway) 114 358 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method runway-time) 114 347 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050aircraft :: <b707>, taxiway :: <taxiway>\051) 135.6 336 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050duration :: <time-offset>\051) 119.4 325 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(gate-time\050aircraft, taxiway\051;) 124.8 314 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method runway-time;) 114 303 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The time it takes to unload, service, and load an aircraft.) 114 284 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method gate-turnaround) 114 273 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050aircraft :: <b707>, gate :: <gate>\051 => \050duration :: <time-offset>\051) 135.6 262 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<time-offset>, total-seconds: $average-b707-gate-turnaround-time\051;) 124.8 251 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method gate-turnaround;) 114 240 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 203.15 635.33 T
4 9 Q
(vehicle-dynamics.dylan) 223.16 635.33 T
8 10 Q
( \336le) 341.96 635.33 T
(.) 357.37 635.33 T
9 F
( \050contin) 360.15 635.33 T
(ued\051) 392.84 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 233.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 233.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 233 522.12 233 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "267" 281
%%Page: "268" 282
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(268) 72 677.67 T
0 F
(Chapter 17) 95.75 677.67 T
(The Airport Application) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(First, we pr) 135 640.67 T
(esent the \336ve key generic functions that make up our container) 190.36 640.67 T
-0.17 (pr) 108 626.67 P
-0.17 (otocol, followed by an implementation of that pr) 118.76 626.67 P
-0.17 (otocol for the container classes) 353.72 626.67 P
(de\336ned in Section 17.2.2, page 257.) 108 612.67 T
3 13 Q
(17.4.1  The container pr) 108 581.33 T
(otocol and implementation) 226.9 581.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 251.1 542.33 T
4 9 Q
(schedule.dylan) 271.11 542.33 T
8 10 Q
( \336le) 346.71 542.33 T
(.) 362.12 542.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: airport) 114 523 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The following generic functions constitute the essential protocol for) 114 504 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// interaction between containers and vehicles) 114 493 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Returns true if container is available for aircraft in direction) 114 474 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define generic available? \050vehicle, container, direction\051;) 114 463 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Moves vehicle into container in the given direction) 114 444 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define generic move-in-vehicle \050vehicle, container, direction\051;) 114 433 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Moves vehicle out of container in the given direction) 114 414 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define generic move-out-vehicle \050vehicle, container, direction\051;) 114 403 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Returns the aircraft next in line to move out of container in direction) 114 384 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define generic next-out \050container, direction\051;) 114 373 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Returns the class of the next container to move vehicle into,) 114 354 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// and how long it will take to get there) 114 343 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define generic next-landing-step \050container, vehicle\051;) 114 332 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// A single storage container is available if the aircraft fits into the) 114 313 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// the container, and there is not already a vehicle in the container) 114 302 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method available?) 114 291 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050vehicle :: <aircraft>, container :: <single-storage>,) 135.6 280 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( direction :: <symbol>\051) 135.6 269 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050container-available? :: <boolean>\051) 119.4 258 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(object-fits?\050vehicle, container\051) 124.8 247 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(& ~ \050container.vehicle-currently-occupying\051;) 124.8 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method available?;) 114 225 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 554.88 108 218.12 2 L
V
0.25 H
0 Z
N
522 554.88 522 218.12 2 L
V
N
107.88 555 522.12 555 2 L
V
N
107.88 535 522.12 535 2 L
V
N
107.88 218 522.12 218 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "268" 282
%%Page: "269" 283
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.4 The) 386.83 677.67 T
5 F
(schedule.dylan) 422.46 677.67 T
0 F
( file) 502.26 677.67 T
2 F
(269) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// A multiple storage container is available if the aircraft fits into) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// the container, and there are not too many aircraft already queued in) 114 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// the container for the specified direction) 114 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method available?) 114 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050vehicle :: <aircraft>, container :: <multiple-storage>,) 135.6 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( direction :: <symbol>\051) 135.6 561 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050container-available? :: <boolean>\051) 119.4 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(object-fits?\050vehicle, container\051) 124.8 539 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(& size\050container.vehicles-by-direction[direction]\051) 124.8 528 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(< container.maxima-by-direction[direction];) 135.6 517 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method available?;) 114 506 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Avoids jamming the runway with inbound traffic, which would prevent) 114 487 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// outbound aircraft from taking off) 114 476 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// The runway is clear to inbound traffic only if there is space in the) 114 465 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// next container inbound from the runway) 114 454 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method available?) 114 443 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050vehicle :: <aircraft>, container :: <runway>,) 135.6 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( direction :: <symbol>\051) 135.6 421 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050container-available? :: <boolean>\051) 119.4 410 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051) 124.8 399 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(& select \050direction\051) 135.6 388 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#"outbound" => #t;) 157.2 377 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#"inbound") 157.2 366 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> let \050class\051 = next-landing-step\050container, vehicle\051;) 168 355 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( if \050class\051) 178.8 344 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( find-available-connection\050container, class, vehicle\051;) 189.6 333 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( end if;) 178.8 322 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end select;) 146.4 311 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method available?;) 114 300 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// A slot is used to keep track of which aircraft is in a single) 114 281 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// storage container) 114 270 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method move-in-vehicle) 114 259 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050vehicle :: <aircraft>, container :: <single-storage>,) 135.6 248 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( direction :: <symbol>\051) 135.6 237 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050\051) 119.4 226 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(container.vehicle-currently-occupying := vehicle;) 124.8 215 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050\051;) 124.8 204 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method move-in-vehicle;) 114 193 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 224.75 635.33 T
4 9 Q
(schedule.dylan) 244.76 635.33 T
8 10 Q
( \336le) 320.36 635.33 T
(.) 335.77 635.33 T
9 F
( \050contin) 338.55 635.33 T
(ued\051) 371.24 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 186.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 186.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 186 522.12 186 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "269" 283
%%Page: "270" 284
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(270) 72 677.67 T
0 F
(Chapter 17) 95.75 677.67 T
(The Airport Application) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// A deque is used to keep track of which aircraft are traveling in a) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// particular direction in a multiple storage container) 114 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method move-in-vehicle) 114 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050vehicle :: <aircraft>, container :: <multiple-storage>,) 135.6 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( direction :: <symbol>\051) 135.6 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050\051) 119.4 561 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let vehicles = container.vehicles-by-direction[direction];) 124.8 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(push-last\050vehicles, vehicle\051;) 124.8 539 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050\051;) 124.8 528 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method move-in-vehicle;) 114 517 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// When an aircraft reaches the gate, it begins its outbound journey) 114 498 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method move-in-vehicle) 114 487 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050vehicle :: <aircraft>, container :: <gate>,) 135.6 476 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(direction :: <symbol>\051) 141 465 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050\051) 119.4 454 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 124.8 443 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(vehicle.direction := #"outbound";) 124.8 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050\051;) 124.8 421 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method move-in-vehicle;) 114 410 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method move-out-vehicle) 114 391 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050vehicle :: <aircraft>, container :: <single-storage>,) 135.6 380 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( direction :: <symbol>\051) 135.6 369 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050\051) 119.4 358 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(container.vehicle-currently-occupying := #f;) 124.8 347 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050\051;) 124.8 336 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method move-out-vehicle;) 114 325 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method move-out-vehicle) 114 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050vehicle) 135.6 295 T
( :: <aircraft>,) 189.6 295 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( container :: <multiple-storage>, direction :: <symbol>\051) 135.6 284 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050\051) 119.4 273 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let vehicles = container.vehicles-by-direction[direction];) 124.8 262 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Assumes that aircraft always exit container in order, and) 124.8 251 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// that this aircraft is next) 124.8 240 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(pop\050vehicles\051;) 124.8 229 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050\051;) 124.8 218 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method move-out-vehicle;) 114 207 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 224.75 635.33 T
4 9 Q
(schedule.dylan) 244.76 635.33 T
8 10 Q
( \336le) 320.36 635.33 T
(.) 335.77 635.33 T
9 F
( \050contin) 338.55 635.33 T
(ued\051) 371.24 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 200.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 200.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 200 522.12 200 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "270" 284
%%Page: "271" 285
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.4 The) 386.83 677.67 T
5 F
(schedule.dylan) 422.46 677.67 T
0 F
( file) 502.26 677.67 T
2 F
(271) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// Determines what vehicle, if any, could move to the next container) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// If there is such a vehicle, then this method returns the vehicle,) 114 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// the next container in the direction of travel,) 114 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// and the time that it would take to make that transition) 114 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method next-out) 114 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050container :: <vehicle-storage>, direction :: <symbol>\051) 135.6 561 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050next-vehicle :: false-or\050<vehicle>\051,) 119.4 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-storage :: false-or\050<vehicle-storage>\051,) 141 539 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time-to-execute :: false-or\050<time-offset>\051\051;) 141 528 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let next-vehicle = next-out-internal\050container, direction\051;) 124.8 517 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050next-vehicle\051) 124.8 506 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let \050class, time\051 = next-landing-step\050container, next-vehicle\051;) 135.6 495 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050class\051) 135.6 484 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let next-container) 146.4 473 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= find-available-connection\050container, class, next-vehicle\051;) 157.2 462 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050next-container\051) 146.4 451 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050next-vehicle, next-container, time\051;) 157.2 440 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 146.4 429 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 135.6 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 124.8 407 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method next-out;) 114 396 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// This method is just a helper method for the next-out method) 114 377 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// We need different methods based on the class of container) 114 366 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method next-out-internal) 114 355 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050container :: <single-storage>, desired-direction :: <symbol>\051) 135.6 344 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050vehicle :: false-or\050<aircraft>\051\051) 119.4 333 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let vehicle = container.vehicle-currently-occupying;) 124.8 322 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050vehicle & vehicle.direction == desired-direction\051 vehicle; end;) 124.8 311 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method next-out-internal;) 114 300 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method next-out-internal) 114 281 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050container :: <multiple-storage>, desired-direction :: <symbol>\051) 135.6 270 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050vehicle :: false-or\050<aircraft>\051\051) 119.4 259 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let vehicle-queue = container.vehicles-by-direction[desired-direction];) 124.8 248 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050vehicle-queue.size > 0\051 vehicle-queue[0]; end;) 124.8 237 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method next-out-internal;) 114 226 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 224.75 635.33 T
4 9 Q
(schedule.dylan) 244.76 635.33 T
8 10 Q
( \336le) 320.36 635.33 T
(.) 335.77 635.33 T
9 F
( \050contin) 338.55 635.33 T
(ued\051) 371.24 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 219.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 219.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 219 522.12 219 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "271" 285
%%Page: "272" 286
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(272) 72 677.67 T
0 F
(Chapter 17) 95.75 677.67 T
(The Airport Application) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(17.4.2  The sc) 108 215.33 T
(heduling algorithm) 177.25 215.33 T
1 11 Q
(The next methods form the cor) 108 195.67 T
(e of the airport application.) 257.48 195.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// The following methods return the class of the next container to which a) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// vehicle can move from a particular container) 114 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// They also return an estimate of how long that transition will take) 114 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method next-landing-step) 114 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050storage :: <sky>, aircraft :: <aircraft>\051) 135.6 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050next-class :: false-or\050<class>\051, duration :: false-or\050<time-offset>\051\051) 119.4 561 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050aircraft.direction == #"inbound"\051) 124.8 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050<runway>, flying-time\050aircraft, storage.airport-below\051\051;) 135.6 539 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 124.8 528 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method next-landing-step;) 114 517 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method next-landing-step) 114 498 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050storage :: <runway>, aircraft :: <aircraft>\051) 135.6 487 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050next-class :: <class>, duration :: <time-offset>\051) 119.4 476 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(select \050aircraft.direction\051) 124.8 465 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#"inbound") 135.6 454 T
(=> values\050<taxiway>, brake-time\050aircraft, storage\051\051;) 200.4 454 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#"outbound" => values\050<sky>, takeoff-time\050aircraft, storage\051\051;) 135.6 443 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end select;) 124.8 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method next-landing-step;) 114 421 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method next-landing-step) 114 402 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050storage :: <taxiway>, aircraft :: <aircraft>\051) 135.6 391 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050next-class :: <class>, duration :: <time-offset>\051) 119.4 380 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(select \050aircraft.direction\051) 124.8 369 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#"inbound") 135.6 358 T
(=> values\050<gate>, gate-time\050aircraft, storage\051\051;) 200.4 358 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#"outbound" => values\050<runway>, runway-time\050aircraft, storage\051\051;) 135.6 347 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end select;) 124.8 336 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method next-landing-step;) 114 325 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method next-landing-step) 114 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050storage :: <gate>, aircraft :: <aircraft>\051) 135.6 295 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050next-class :: <class>, duration :: <time-offset>\051) 119.4 284 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050<taxiway>, gate-turnaround\050aircraft, storage\051\051;) 124.8 273 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method next-landing-step;) 114 262 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 224.75 635.33 T
4 9 Q
(schedule.dylan) 244.76 635.33 T
8 10 Q
( \336le) 320.36 635.33 T
(.) 335.77 635.33 T
9 F
( \050contin) 338.55 635.33 T
(ued\051) 371.24 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 255.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 255.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 255 522.12 255 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "272" 286
%%Page: "273" 287
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.4 The) 386.83 677.67 T
5 F
(schedule.dylan) 422.46 677.67 T
0 F
( file) 502.26 677.67 T
2 F
(273) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
0 X
(The) 224.75 621.33 T
4 9 Q
(schedule.dylan) 244.76 621.33 T
8 10 Q
( \336le) 320.36 621.33 T
(.) 335.77 621.33 T
9 F
( \050contin) 338.55 621.33 T
(ued\051) 371.24 621.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// Searches all of the vehicle storage of class class-of-next, which is) 114 602 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// connected to container and has room for aircraft) 114 591 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method find-available-connection) 114 580 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050storage :: <vehicle-storage>, class-of-next :: <class>,) 135.6 569 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( aircraft :: <aircraft>\051) 135.6 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050next-container :: <vehicle-storage>\051) 119.4 547 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(block \050return\051) 124.8 536 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for \050c in storage.connected-to\051) 135.6 525 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050instance?\050c, class-of-next\051) 146.4 514 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(& available?\050aircraft, c, aircraft.direction\051\051) 168 503 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(return\050c\051;) 157.2 492 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 146.4 481 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end for;) 135.6 470 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end block;) 124.8 459 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method find-available-connection;) 114 448 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Generate new transitions to be considered for the next move) 114 429 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// The transitions will be placed in the sorted sequence, which will order) 114 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// them by earliest arrival time) 114 407 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method generate-new-transitions) 114 396 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050container :: <vehicle-storage>, active-transitions :: <sorted-) 135.6 385 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sequence>,) 114 374 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( containers-visited :: <object-table>\051) 135.6 363 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050\051) 119.4 352 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(unless\050containers-visited[container]\051) 124.8 341 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Keep track of which containers we have searched for new possible) 135.6 330 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// transitions) 135.6 319 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// We avoid looping forever by checking each container just once) 135.6 308 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(containers-visited[container] := #t;) 135.6 297 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(local method consider-transition \050direction\051) 135.6 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// See whether any vehicle is ready to transition out of a container) 146.4 267 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(let \050vehicle, next-container, time\051) 146.4 256 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= next-out\050container, direction\051;) 157.2 245 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(unless \050vehicle == #f | vehicle.next-transition.pending?\051) 146.4 234 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// If there is a vehicle ready, and it is not already in the) 157.2 223 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// sorted sequence of pending transitions, then prepare the) 157.2 212 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// transition instance associated with the vehicle) 157.2 201 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(let transition = vehicle.next-transition;) 157.2 190 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(transition.from-container := container;) 157.2 179 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(transition.to-container := next-container;) 157.2 168 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 633.88 108 161.12 2 L
V
0.25 H
0 Z
N
522 633.88 522 161.12 2 L
V
N
107.88 634 522.12 634 2 L
V
N
107.88 614 522.12 614 2 L
V
N
107.88 161 522.12 161 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "273" 287
%%Page: "274" 288
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(274) 72 677.67 T
0 F
(Chapter 17) 95.75 677.67 T
(The Airport Application) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// The vehicle may have been waiting) 157.2 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Take this situation into account when computing the earliest) 157.2 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// arrival into the next container) 157.2 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(transition.earliest-arrival := transition.earliest-arrival + time;) 157.2 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Flag the vehicle as pending, to save searching through the) 157.2 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// active-transitions sorted sequence later) 157.2 561 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(transition.pending? := #t;) 157.2 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Add the transition to the set to be considered) 157.2 539 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(add!\050active-transitions, transition\051;) 157.2 528 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end unless;) 146.4 517 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method consider-transition;) 135.6 506 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Consider both inbound and outbound traffic) 135.6 487 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(consider-transition\050#"outbound"\051;) 135.6 476 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(consider-transition\050#"inbound"\051;) 135.6 465 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Make sure that every container connected to this one is checked) 135.6 454 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(for \050c in container.connected-to\051) 135.6 443 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(generate-new-transitions\050c, active-transitions, containers-visited\051;) 146.4 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end for;) 135.6 421 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end unless;) 124.8 410 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method generate-new-transitions;) 114 399 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Main loop of the program) 114 380 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// See what possible transitions exist, then execute the earliest) 114 369 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// transitions that can be completed) 114 358 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Returns the time of the last transition) 114 347 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method process-aircraft) 114 336 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050airport :: <airport>, #key time = $midnight\051) 135.6 325 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050time :: <time-of-day>\051) 119.4 314 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Detailed aircraft schedule for "\051;) 124.8 303 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050airport\051;) 124.8 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"\134n\134n"\051;) 124.8 281 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let sky = airport.sky-above;) 124.8 270 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let containers-visited = make\050<object-table>\051;) 124.8 259 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let active-transitions = make\050<sorted-sequence>,) 124.8 248 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value-function: earliest-arrival\051;) 281.4 237 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 224.75 635.33 T
4 9 Q
(schedule.dylan) 244.76 635.33 T
8 10 Q
( \336le) 320.36 635.33 T
(.) 335.77 635.33 T
9 F
( \050contin) 338.55 635.33 T
(ued\051) 371.24 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 230.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 230.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 230 522.12 230 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "274" 288
%%Page: "275" 289
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.4 The) 386.83 677.67 T
5 F
(schedule.dylan) 422.46 677.67 T
0 F
( file) 502.26 677.67 T
2 F
(275) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// We do not have to use return as the name of the exit procedure) 124.8 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(block \050done\051) 124.8 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(while \050#t\051) 135.6 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Each time through, start by considering every container) 146.4 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(fill!\050containers-visited, #f\051;) 146.4 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// For every container, see if any vehicles are ready to transition) 146.4 561 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// If any are, add transition instances to the active-transitions) 146.4 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// sorted sequence) 146.4 539 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(generate-new-transitions\050sky, active-transitions,) 146.4 528 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(containers-visited\051;) 281.4 517 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// If there are no more transitions, we have completed our task) 146.4 498 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(if \050empty?\050active-transitions\051\051 done\050\051; end;) 146.4 487 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Find the earliest transition that can complete, because there is) 146.4 476 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// still room available in the destination container) 146.4 465 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(let transition-index) 146.4 454 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= find-key\050active-transitions,) 157.2 443 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( method \050transition\051) 211.2 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( available?\050transition.transition-aircraft,) 222 421 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(transition.to-container,) 286.8 410 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(transition.transition-aircraft.direction\051;) 286.8 399 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( end\051;) 211.2 388 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// If none can complete, there is a problem with the simulation) 146.4 369 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// This situation should never occur, but is useful for debugging) 146.4 358 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// incorrect container configurations) 146.4 347 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(if \050transition-index == #f\051) 146.4 336 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(error\050"Pending transitions but none can complete."\051;) 157.2 325 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 146.4 314 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Otherwise, the earliest transition that can complete has been) 146.4 295 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// found: Execute the transition) 146.4 284 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(let transition = active-transitions[transition-index];) 146.4 273 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let vehicle = transition.transition-aircraft;) 146.4 262 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let vehicle-direction = vehicle.direction;) 146.4 251 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(move-out-vehicle\050vehicle, transition.from-container,) 146.4 240 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(vehicle-direction\051;) 238.2 229 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-1.47 (move-in-vehicle\050vehicle, transition.to-container, vehicle-direction\051;) 146.4 218 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 224.75 635.33 T
4 9 Q
(schedule.dylan) 244.76 635.33 T
8 10 Q
( \336le) 320.36 635.33 T
(.) 335.77 635.33 T
9 F
( \050contin) 338.55 635.33 T
(ued\051) 371.24 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 211.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 211.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 211 522.12 211 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "275" 289
%%Page: "276" 290
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(276) 72 677.67 T
0 F
(Chapter 17) 95.75 677.67 T
(The Airport Application) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(The) 108 457.67 T
4 10 Q
(process-aircraft) 129.16 457.67 T
1 11 Q
( method uses components fr) 225.16 457.67 T
(om the time, space and) 362.44 457.67 T
(sorted sequence libraries, the container classes and pr) 108 443.67 T
(otocols, and the vehicle) 368.03 443.67 T
(classes and methods to schedule the air) 108 429.67 T
(craft arriving and departing fr) 299.07 429.67 T
(om an air-) 445.56 429.67 T
(port. The) 108 415.67 T
4 10 Q
(generate-new-transitions) 155.21 415.67 T
1 11 Q
( method assists by examining the curr) 299.21 415.67 T
(ent) 483.3 415.67 T
(state of all containers in the airport, and by noting any new steps that vehicles) 108 401.67 T
(could take.) 108 387.67 T
3 15 Q
(17.5  The) 108 348 T
4 14 Q
(airport-test.dylan) 164.07 348 T
3 15 Q
( \336le) 315.27 348 T
1 11 Q
(The) 108 327.67 T
4 10 Q
(airport-test.dylan) 129.16 327.67 T
1 11 Q
( \336le contains test data, and the code that constr) 237.16 327.67 T
(ucts a) 464.48 327.67 T
(model of the simple airport described in Section 15.1, page 237. The \336nal method) 108 313.67 T
-0.13 (is a top-level testing function that builds the airport model and executes the main) 108 299.67 P
(air) 108 285.67 T
(craft scheduling function. After de\336ning the test, we show the r) 120.85 285.67 T
(esults of r) 428.74 285.67 T
(un-) 476.18 285.67 T
(ning it.) 108 271.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// This transition is complete; remove it from consideration) 146.4 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(transition.pending? := #f;) 146.4 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(remove!\050active-transitions, transition\051;) 146.4 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Compute the actual time of arrival at the next container, and) 146.4 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// display the message) 146.4 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(time := \050transition.earliest-arrival) 146.4 561 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(:= max\050time, transition.earliest-arrival\051\051;) 200.4 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050transition\051;) 146.4 539 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"\134n"\051;) 146.4 528 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end while;) 135.6 517 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end block;) 124.8 506 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time;) 124.8 495 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method process-aircraft;) 114 484 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 240.3 238.33 T
4 9 Q
(airport-test.dylan) 260.31 238.33 T
8 10 Q
( \336le) 357.51 238.33 T
(.) 372.92 238.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: airport-test) 114 219 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// To keep the example relatively simple, we will use variables to hold) 114 200 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// test data for the flights and aircraft) 114 189 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Ordinarily, this information would be read from a file or database) 114 178 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define variable *flight-numbers* = #[62, 7, 29, 12, 18, 44];) 114 159 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 224.75 635.33 T
4 9 Q
(schedule.dylan) 244.76 635.33 T
8 10 Q
( \336le) 320.36 635.33 T
(.) 335.77 635.33 T
9 F
( \050contin) 338.55 635.33 T
(ued\051) 371.24 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 477.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 477.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 477 522.12 477 2 L
V
N
108 250.88 108 152.12 2 L
V
N
522 250.88 522 152.12 2 L
V
N
107.88 251 522.12 251 2 L
V
N
107.88 231 522.12 231 2 L
V
N
107.88 152 522.12 152 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "276" 290
%%Page: "277" 291
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.5 The) 364.03 677.67 T
5 F
(airport-test.dylan) 399.66 677.67 T
0 F
( file) 502.26 677.67 T
2 F
(277) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
(define variable *aircraft-distances*) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= #[3, 10, 175, 450, 475, 477];) 124.8 605 T
5 F
(// Miles) 330 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define variable *aircraft-headings*) 114 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= #[82, 191, 49, 112, 27, 269];) 124.8 575 T
5 F
(// Degrees) 330 575 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define variable *aircraft-altitudes*) 114 556 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= #[7000, 15000, 22000, 22500, 22000, 21000];) 124.8 545 T
5 F
(// Feet) 389.4 545 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define variable *aircraft-ids*) 114 526 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= #["72914", "82290", "18317", "26630", "43651", "40819"];) 124.8 515 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define constant $default-runway-size) 114 496 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<size>, length: 10000, width: 200, height: 100\051;) 124.8 485 T
5 F
(// Feet) 443.4 485 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define constant $default-taxiway-size) 114 466 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<size>, length: 900, width: 200, height: 100\051;) 124.8 455 T
5 F
(// Feet) 432.6 455 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Assumes that there is only one runway, and one taxiway) 114 436 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// The taxiway-count variable will determine how many aircraft can wait) 114 425 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// in line for each direction of the taxiway) 114 414 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method build-simple-airport) 114 403 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050#key gates-per-terminal :: <vector> = #[2],) 135.6 392 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( capacity :: <size> = $default-capacity,) 135.6 381 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( runway-size :: <size> = $default-runway-size,) 135.6 370 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( taxiway-size :: <size> = $default-taxiway-size,) 135.6 359 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( taxiway-count :: <positive-integer> = 5,) 135.6 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( position-report-time :: <time-of-day>) 135.6 337 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( = make\050<time-of-day>,) 146.4 326 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds: encode-total-seconds\0506, 0, 0\051\051\051) 173.4 315 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050airport :: <airport>\051) 119.4 304 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let gates = generate-gates\050gates-per-terminal, capacity\051;) 124.8 285 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let taxiway) 124.8 274 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<taxiway>, id: "Echo", directions: #[#"inbound", #"outbound"],) 135.6 263 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( maxima: vector\050taxiway-count, taxiway-count\051,) 168 252 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( capacity: capacity, physical-size: taxiway-size\051;) 168 241 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let runway = make\050<runway>, id: "11R-29L", capacity: capacity,) 124.8 230 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(physical-size: runway-size\051;) 222 219 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let keystone-air = make\050<airline>, name: "Keystone Air", code: "KN"\051;) 124.8 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let flights) 124.8 197 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= map\050method \050fn\051) 135.6 186 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<flight>, airline: keystone-air, number: fn\051 end,) 168 175 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(*flight-numbers*\051;) 168 164 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 213.95 635.33 T
4 9 Q
(airport-test.dylan) 233.96 635.33 T
8 10 Q
( \336le) 331.16 635.33 T
(.) 346.57 635.33 T
9 F
( \050contin) 349.35 635.33 T
(ued\051) 382.04 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 157.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 157.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 157 522.12 157 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "277" 291
%%Page: "278" 292
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(278) 72 677.67 T
0 F
(Chapter 17) 95.75 677.67 T
(The Airport Application) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
(let aircraft) 124.8 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= map\050method \050aircraft-flight, aircraft-distance, aircraft-heading,) 135.6 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(aircraft-altitude, aircraft-id\051) 211.2 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<b707>,) 178.8 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(flight: aircraft-flight,) 205.8 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( current-position:) 200.4 561 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( make\050<relative-position>,) 211.2 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(distance: aircraft-distance,) 243.6 539 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(angle:) 243.6 528 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<angle>,) 254.4 517 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds:) 281.4 506 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(encode-total-seconds) 292.2 495 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050aircraft-heading, 0, 0\051\051\051,) 303 484 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( altitude: aircraft-altitude,) 200.4 473 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( id: aircraft-id,) 200.4 462 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( transition: make\050<aircraft-transition>,) 200.4 451 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(arrival: position-report-time\051\051;) 297.6 440 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end,) 168 429 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(flights, *aircraft-distances*, *aircraft-headings*,) 168 410 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(*aircraft-altitudes*, *aircraft-ids*\051;) 168 399 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let airport) 124.8 380 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<airport>,) 135.6 369 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( name: "Belefonte Airport",) 168 358 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( code: "BLA",) 168 347 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( current-position:) 168 336 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( make\050<absolute-position>,) 178.8 325 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(latitude:) 211.2 314 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<latitude>,) 222 303 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( total-seconds: encode-total-seconds\05040, 57, 43\051,) 243.6 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( direction: #"north"\051,) 243.6 281 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(longitude:) 211.2 270 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<longitude>,) 222 259 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( total-seconds: encode-total-seconds\05077, 40, 24\051,) 243.6 248 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( direction: #"west"\051\051\051;) 243.6 237 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 213.95 635.33 T
4 9 Q
(airport-test.dylan) 233.96 635.33 T
8 10 Q
( \336le) 331.16 635.33 T
(.) 346.57 635.33 T
9 F
( \050contin) 349.35 635.33 T
(ued\051) 382.04 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 230.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 230.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 230 522.12 230 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "278" 292
%%Page: "279" 293
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.5 The) 364.03 677.67 T
5 F
(airport-test.dylan) 399.66 677.67 T
0 F
( file) 502.26 677.67 T
2 F
(279) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Now) 108 416.67 T
(, we show the r) 131.31 416.67 T
(esult of r) 205.15 416.67 T
(unning) 247.93 416.67 T
4 10 Q
(test-airport) 285.84 416.67 T
1 11 Q
(:) 357.84 416.67 T
6 9 Q
(?) 108 396 T
4 F
(test-airport\050\051:) 118.8 396 T
6 F
(Detailed aircraft schedule for Airport BLA) 108 385 T
(6:00: Flight KN 62 at Runway 11R-29L) 108 374 T
(6:02: Flight KN 62 at Taxiway Echo) 108 363 T
(6:02: Flight KN 7 at Runway 11R-29L) 108 352 T
(6:03: Flight KN 62 at Gate A1) 108 341 T
(6:04: Flight KN 7 at Taxiway Echo) 108 330 T
(6:05: Flight KN 7 at Gate A2) 108 319 T
(6:28: Flight KN 29 at Runway 11R-29L) 108 308 T
(6:30: Flight KN 29 at Taxiway Echo) 108 297 T
(6:37: Flight KN 62 at Taxiway Echo) 108 286 T
(6:37: Flight KN 29 at Gate A1) 108 275 T
(6:38: Flight KN 62 at Runway 11R-29L) 108 264 T
(6:39: Flight KN 7 at Taxiway Echo) 108 253 T
(6:42: Flight KN 62 at Sky over BLA) 108 242 T
(6:42: Flight KN 7 at Runway 11R-29L) 108 231 T
(6:46: Flight KN 7 at Sky over BLA) 108 220 T
(7:11: Flight KN 29 at Taxiway Echo) 108 209 T
(7:12: Flight KN 29 at Runway 11R-29L) 108 198 T
(7:16: Flight KN 29 at Sky over BLA) 108 187 T
(7:16: Flight KN 12 at Runway 11R-29L) 108 176 T
(7:18: Flight KN 12 at Taxiway Echo) 108 165 T
(7:18: Flight KN 18 at Runway 11R-29L) 108 154 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(let sky = make\050<sky>, inbound-aircraft: aircraft, airport: airport,) 124.8 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( id: concatenate\050"over ", airport.code\051\051;) 200.4 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(airport.sky-above := sky;) 124.8 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(runway.connected-to := vector\050taxiway, sky\051;) 124.8 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let taxiway-vector = vector\050taxiway\051;) 124.8 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for \050gate in gates\051) 124.8 561 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(gate.connected-to := taxiway-vector;) 135.6 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end for;) 124.8 539 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let runway-vector = vector\050runway\051;) 124.8 528 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(taxiway.connected-to := concatenate\050runway-vector, gates\051;) 124.8 517 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sky.connected-to := runway-vector;) 124.8 506 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(airport;) 124.8 495 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method build-simple-airport;) 114 484 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method test-airport \050\051 => \050last-transition :: <time-of-day>\051) 114 465 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(process-aircraft\050build-simple-airport\050\051\051;) 124.8 454 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method test-airport;) 114 443 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 213.95 635.33 T
4 9 Q
(airport-test.dylan) 233.96 635.33 T
8 10 Q
( \336le) 331.16 635.33 T
(.) 346.57 635.33 T
9 F
( \050contin) 349.35 635.33 T
(ued\051) 382.04 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 436.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 436.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 436 522.12 436 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "279" 293
%%Page: "280" 294
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(280) 72 677.67 T
0 F
(Chapter 17) 95.75 677.67 T
(The Airport Application) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
6 9 Q
0 X
(7:19: Flight KN 12 at Gate A1) 108 642 T
(7:20: Flight KN 18 at Taxiway Echo) 108 631 T
(7:20: Flight KN 44 at Runway 11R-29L) 108 620 T
(7:21: Flight KN 18 at Gate A2) 108 609 T
(7:22: Flight KN 44 at Taxiway Echo) 108 598 T
(7:53: Flight KN 12 at Taxiway Echo) 108 587 T
(7:53: Flight KN 44 at Gate A1) 108 576 T
(7:54: Flight KN 12 at Runway 11R-29L) 108 565 T
(7:55: Flight KN 18 at Taxiway Echo) 108 554 T
(7:58: Flight KN 12 at Sky over BLA) 108 543 T
(7:58: Flight KN 18 at Runway 11R-29L) 108 532 T
(8:02: Flight KN 18 at Sky over BLA) 108 521 T
(8:27: Flight KN 44 at Taxiway Echo) 108 510 T
(8:28: Flight KN 44 at Runway 11R-29L) 108 499 T
(8:32: Flight KN 44 at Sky over BLA) 108 488 T
({class <TIME-OF-DAY>}) 108 477 T
3 15 Q
(17.6  The) 108 439 T
4 14 Q
(definitions-library.dylan) 164.07 439 T
3 15 Q
( \336le) 374.07 439 T
1 11 Q
(The) 108 418.67 T
4 10 Q
(definitions-library.dylan) 129.16 418.67 T
1 11 Q
( \336le pr) 279.16 418.67 T
(ovides common de\336nitions for all the) 310.55 418.67 T
(libraries in the airport example.) 108 404.67 T
(Note that this library and module, and the other libraries and modules that) 135 390.67 T
(follow) 108 376.67 T
(, do not separate the library implementation module fr) 138.24 376.67 T
(om the library inter-) 403.52 376.67 T
(face module, as discussed in Section 13.4.1, page 196. Dylan allows several dif) 108 362.67 T
(fer-) 485.24 362.67 T
(ent appr) 108 348.67 T
(oaches to library and module ar) 148.88 348.67 T
(chitectur) 303.55 348.67 T
(e. Her) 346.14 348.67 T
(e, we pr) 375.48 348.67 T
(esent an) 414.2 348.67 T
(alternative or) 108 334.67 T
(ganization.) 172.98 334.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 221.4 301.33 T
4 9 Q
(definitions-library.dylan) 241.41 301.33 T
8 10 Q
( \336le) 376.41 301.33 T
(.) 391.82 301.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: dylan-user) 114 282 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define library definitions) 114 263 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export definitions;) 124.8 252 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 124.8 241 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end library definitions;) 114 230 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define module definitions) 114 211 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export $letters, <positive-integer>;) 124.8 200 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export $hours-per-day, $minutes-per-hour;) 124.8 189 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export $seconds-per-minute, $seconds-per-hour, false-or;) 124.8 178 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 124.8 167 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end module definitions;) 114 156 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 313.88 108 149.12 2 L
V
0.25 H
0 Z
N
522 313.88 522 149.12 2 L
V
N
107.88 314 522.12 314 2 L
V
N
107.88 294 522.12 294 2 L
V
N
107.88 149 522.12 149 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "280" 294
%%Page: "281" 295
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.8 The) 346.93 677.67 T
5 F
(airport-library.dylan) 382.56 677.67 T
0 F
( file) 502.26 677.67 T
2 F
(281) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(17.7  The) 108 638 T
4 14 Q
(definitions.lid) 164.07 638 T
3 15 Q
( \336le) 290.07 638 T
(17.8  The) 108 516 T
4 14 Q
(airport-library.dylan) 164.07 516 T
3 15 Q
( \336le) 340.47 516 T
1 11 Q
(The airport library implements the main scheduling system for the airport exam-) 108 495.67 T
-0.44 (ple. This library assumes that your Dylan implementation pr) 108 481.67 P
-0.44 (ovides a) 399.51 481.67 P
4 10 Q
-0.97 (format-out) 441.69 481.67 P
1 11 Q
(library) 108 467.67 T
(, which supplies the) 139.57 467.67 T
4 10 Q
(format-out) 239.49 467.67 T
1 11 Q
( and) 299.49 467.67 T
4 10 Q
(format-to-string) 323.62 467.67 T
1 11 Q
( functions. This) 419.62 467.67 T
(library also assumes that ther) 108 453.67 T
(e is a) 250.75 453.67 T
4 10 Q
(transcendentals) 277.63 453.67 T
1 11 Q
( library) 367.63 453.67 T
(, which supplies the) 401.95 453.67 T
4 10 Q
(sqrt) 108 439.67 T
1 11 Q
( \050squar) 132 439.67 T
(e r) 165.52 439.67 T
(oot\051 function.) 177.68 439.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 248.4 598.33 T
4 9 Q
(definitions.lid) 268.41 598.33 T
8 10 Q
( \336le) 349.41 598.33 T
(.) 364.82 598.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(library:) 114 579 T
(definitions) 168 579 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(files:) 114 568 T
(definitions-library) 168 568 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(definitions) 168 557 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 232.2 411.33 T
4 9 Q
(airport-library.dylan) 252.21 411.33 T
8 10 Q
( \336le) 365.61 411.33 T
(.) 381.02 411.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: dylan-user) 114 392 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define library airport) 114 373 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export airport;) 124.8 362 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 124.8 351 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use transcendentals;) 124.8 332 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use say;) 124.8 321 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use format-out;) 124.8 310 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use definitions;) 124.8 299 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use sorted-sequence;) 124.8 288 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use angle;) 124.8 277 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use time;) 124.8 266 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end library airport;) 114 255 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 610.88 108 550.12 2 L
V
0.25 H
0 Z
N
522 610.88 522 550.12 2 L
V
N
107.88 611 522.12 611 2 L
V
N
107.88 591 522.12 591 2 L
V
N
107.88 550 522.12 550 2 L
V
N
108 423.88 108 248.12 2 L
V
N
522 423.88 522 248.12 2 L
V
N
107.88 424 522.12 424 2 L
V
N
107.88 404 522.12 404 2 L
V
N
107.88 248 522.12 248 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "281" 295
%%Page: "282" 296
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(282) 72 677.67 T
0 F
(Chapter 17) 95.75 677.67 T
(The Airport Application) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(17.9  The) 108 323 T
4 14 Q
(airport.lid) 164.07 323 T
3 15 Q
( \336le) 256.47 323 T
(17.10  The) 108 188 T
4 14 Q
(airport-test-library.dylan) 170.91 188 T
3 15 Q
( \336le) 389.31 188 T
1 11 Q
(The) 108 167.67 T
4 10 Q
(airport-test) 129.16 167.67 T
1 11 Q
( library implements a simple test case for the scheduling sys-) 201.16 167.67 T
(tem de\336ned in the) 108 153.67 T
4 10 Q
(airport) 199.46 153.67 T
1 11 Q
( library) 241.46 153.67 T
(.) 275.79 153.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(define module airport) 114 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export <size>, length, height, width, current-position,) 124.8 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(current-position-setter;) 135.6 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export physical-size, physical-size-setter, $default-capacity;) 124.8 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export storage-capacity, storage-capacity-setter, indentifier;) 124.8 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export connected-to, connected-to-setter;) 124.8 561 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export <gate>, generate-gates, <sky>, <runway>, <taxiway>;) 124.8 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export <airline>, name, name-setter, code, code-setter, <flight>;) 124.8 539 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export flight, flight-setter, number, number-setter, altitude,) 124.8 528 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(altitude-setter;) 135.6 517 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export <aircraft-transition>, <b707>, <airport>, sky-above,) 124.8 506 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sky-above-setter;) 135.6 495 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export process-aircraft;) 124.8 484 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 124.8 473 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use transcendentals, import: {sqrt};) 124.8 462 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use say;) 124.8 451 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use format-out, import: {format-out};) 124.8 440 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use format, import: {format-to-string};) 124.8 429 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use definitions;) 124.8 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use sorted-sequence;) 124.8 407 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use time;) 124.8 396 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use angle, export: {direction, direction-setter};) 124.8 385 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use position;) 124.8 374 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end module airport;) 114 363 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 259.2 293.33 T
4 9 Q
(airport.lid) 279.21 293.33 T
8 10 Q
( \336le) 338.61 293.33 T
(.) 354.02 293.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(library:) 114 274 T
(airport) 168 274 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(files:) 114 263 T
(airport-library) 168 263 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(airport-classes) 168 252 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(vehicle-dynamics) 168 241 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(schedule) 173.4 230 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 205.85 635.33 T
4 9 Q
(airport-library.dylan) 225.86 635.33 T
8 10 Q
( \336le) 339.26 635.33 T
(.) 354.67 635.33 T
9 F
( \050contin) 357.45 635.33 T
(ued\051) 390.14 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 647.88 108 356.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 356.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 356 522.12 356 2 L
V
N
108 305.88 108 223.12 2 L
V
N
522 305.88 522 223.12 2 L
V
N
107.88 306 522.12 306 2 L
V
N
107.88 286 522.12 286 2 L
V
N
107.88 223 522.12 223 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "282" 296
%%Page: "283" 297
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.12 Summary) 454.49 677.67 T
2 F
(283) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 660.86 R
V
3 15 Q
0 X
(17.11  The) 108 392.86 T
4 14 Q
(airport-test.lid) 170.91 392.86 T
3 15 Q
( \336le) 305.31 392.86 T
(17.12  Summar) 108 279.86 T
(y) 194.96 279.86 T
1 11 Q
(In this chapter) 108 259.52 T
(, we pr) 177.24 259.52 T
(esented a complete \336rst draft of the airport application,) 210.7 259.52 T
-0.08 (based on the techniques pr) 108 245.52 P
-0.08 (esented in pr) 237.82 245.52 P
-0.08 (evious chapters. Although the example is) 300.7 245.52 P
(complete and meets its stated design goals, we can still make a number of) 108 231.52 T
(impr) 108 217.52 T
(ovements. For example, we could take advantage of Dylan\325s multiple inher-) 131.67 217.52 T
(itance to eliminate certain r) 108 203.52 T
(epetitive slots. W) 240.11 203.52 T
(e could pr) 322.68 203.52 T
(ovide a container) 371.65 203.52 T
(-imple-) 455.46 203.52 T
-0.26 (mentor module interface, and open the classes and generic functions so that users) 108 189.52 P
-0.19 (could add their own classes of containers and extend the scope of the application.) 108 175.52 P
(W) 108 161.52 T
(e could take advantage of Dylan\325s exception handling to better deal with) 117.99 161.52 T
(unusual situations that might occur during the simulation. In the chapters that) 108 147.52 T
(follow) 108 133.52 T
(, we show the Dylan language featur) 138.24 133.52 T
(es that enable such impr) 316.7 133.52 T
(ovements.) 434.69 133.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 218.7 634.19 T
4 9 Q
(airport-test-library.dylan) 238.71 634.19 T
8 10 Q
( \336le) 379.11 634.19 T
(.) 394.52 634.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: dylan-user) 114 614.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define library airport-test) 114 595.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export airport-test;) 124.8 584.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 124.8 573.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use time;) 124.8 562.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use angle;) 124.8 551.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use airport;) 124.8 540.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end library airport-test;) 114 529.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define module airport-test) 114 510.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export test-airport;) 124.8 499.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 124.8 488.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use time;) 124.8 477.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use angle;) 124.8 466.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use position;) 124.8 455.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use airport;) 124.8 444.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end module airport-test;) 114 433.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 245.7 363.19 T
4 9 Q
(airport-test.lid) 265.71 363.19 T
8 10 Q
( \336le) 352.11 363.19 T
(.) 367.52 363.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(library:) 114 343.86 T
(airport-test) 168 343.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(files:) 114 332.86 T
(airport-test-library) 168 332.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(airport-test) 168 321.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 646.73 108 426.98 2 L
V
0.25 H
0 Z
N
522 646.73 522 426.98 2 L
V
N
107.88 646.86 522.12 646.86 2 L
V
N
107.88 626.86 522.12 626.86 2 L
V
N
107.88 426.86 522.12 426.86 2 L
V
N
108 375.73 108 314.98 2 L
V
N
522 375.73 522 314.98 2 L
V
N
107.88 375.86 522.12 375.86 2 L
V
N
107.88 355.86 522.12 355.86 2 L
V
N
107.88 314.86 522.12 314.86 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "283" 297
%%Page: "284" 298
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 126 522 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "284" 298
%%Page: "285" 299
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(285) 298.88 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 530.98 512.43 590.14 R
7 X
V
1 30 Q
0 X
(Part IV) 108 570.14 T
(.) 198.15 570.14 T
(Advanced T) 220.65 570.14 T
(opics) 380.88 570.14 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
(Chapter 18,) 108 424.67 T
0 F
(Multiple Inheritance) 169.51 424.67 T
1 F
(, describes how multiple inheritance works in) 261.69 424.67 T
(Dylan. It describes how method dispatch is af) 108 410.67 T
(fected by multiple inheritance. It) 329.8 410.67 T
(gives an example of using the mix-in style of designing classes with multiple) 108 396.67 T
(inheritance.) 108 382.67 T
(Chapter 19,) 135 368.67 T
0 F
(Performance and Flexibility) 196.51 368.67 T
1 F
(, describes the fundamental tradeof) 319.77 368.67 T
(f) 491.36 368.67 T
-0.03 (between performance and \337exibility) 108 354.67 P
-0.03 (. Y) 282.83 354.67 P
-0.03 (ou can take advantage of Dylan\325s dynamic) 294.62 354.67 P
(natur) 108 340.67 T
(e during the initial stages of development. Later on, when your application) 134.27 340.67 T
(is nearing completion, you can optimize the performance of the pr) 108 326.67 T
(ogram \050and) 429.8 326.67 T
(sacri\336ce \337exibility) 108 312.67 T
(, which pr) 195.15 312.67 T
(esumably is no longer needed\051.) 244.22 312.67 T
(Chapter 20,) 135 298.67 T
0 F
(Exceptions) 196.51 298.67 T
1 F
(, describes how to use Dylan facilities to help cr) 244.99 298.67 T
(eate) 475.54 298.67 T
(r) 108 284.67 T
(eliable pr) 112.15 284.67 T
(ograms in the face of exceptions \321 unexpected events that occur dur-) 157.38 284.67 T
(ing pr) 108 270.67 T
(ogram execution.) 137.23 270.67 T
-0.42 (Chapter 21,) 135 256.67 P
0 F
-0.42 (Macr) 195.26 256.67 P
-0.42 (os) 219.09 256.67 P
1 F
-0.42 (, describes how to de\336ne macr) 228.25 256.67 P
-0.42 (os in Dylan. Macr) 373.5 256.67 P
-0.42 (os can be) 458.19 256.67 P
(used for abbr) 108 242.67 T
(eviation, abstraction, simpli\336cation, or str) 172.61 242.67 T
(ucturing. They ar) 374.68 242.67 T
(e also) 458.91 242.67 T
(useful for delaying evaluation of ar) 108 228.67 T
(guments.) 279.18 228.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "285" 299
%%Page: "286" 300
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 126 522 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "286" 300
%%Page: "287" 301
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(287) 298.88 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(18) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(18) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Multiple Inheritance) 110 566.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
(In the class r) 108 424.67 T
(elationships that we have de\336ned so far) 168.68 424.67 T
(, each class has only one) 361.19 424.67 T
(dir) 108 410.67 T
(ect super) 122.07 410.67 T
(class. When a class has a single dir) 165.88 410.67 T
(ect super) 333.27 410.67 T
(class, the way in which) 377.08 410.67 T
-0.32 (that class inherits fr) 108 396.67 P
-0.32 (om its super) 202.15 396.67 P
-0.32 (class is called) 261.49 396.67 P
2 F
-0.32 (single inheritance) 328.33 396.67 P
1 F
-0.32 (. In Dylan, a class) 418.11 396.67 P
(can have mor) 108 382.67 T
(e than one dir) 173.54 382.67 T
(ect super) 240.69 382.67 T
(class. When a class has multiple dir) 284.51 382.67 T
(ect super-) 456.2 382.67 T
(classes, it inherits via) 108 368.67 T
2 F
(multiple inheritance) 213.37 368.67 T
1 F
(.) 316.31 368.67 T
(Why would we want to use multiple inheritance? Objects in the r) 135 354.67 T
(eal world) 451.24 354.67 T
(can have complicated behavior) 108 340.67 T
(. As we make our softwar) 258.2 340.67 T
(e models mor) 382.69 340.67 T
(e r) 448.9 340.67 T
(ealistic,) 461.07 340.67 T
(we often \336nd that the behavior of the objects becomes mor) 108 326.67 T
(e complicated as well.) 391.74 326.67 T
(Multiple inheritance is useful when we can br) 108 312.67 T
(eak down complicated behavior) 330.45 312.67 T
-0.35 (into sets of characteristics that do not interfer) 108 298.67 P
-0.35 (e with one another) 324.4 298.67 P
-0.35 (. W) 413.59 298.67 P
-0.35 (e might be able) 428.73 298.67 P
(to de\336ne a class to r) 108 284.67 T
(epr) 203.81 284.67 T
(esent each set of these characteristics. W) 219.84 284.67 T
(e can then de\336ne) 413.61 284.67 T
-0.43 (subclasses that combine sets of characteristics by inheriting fr) 108 270.67 P
-0.43 (om mor) 402.31 270.67 P
-0.43 (e than one of) 440.22 270.67 P
(our super) 108 256.67 T
(classes. W) 155.06 256.67 T
(e give examples in this chapter) 203.39 256.67 T
(.) 352.35 256.67 T
(Multiple inheritance does not change any of the r) 135 242.67 T
(ules of slot inheritance or) 374 242.67 T
(method dispatch that we have learned so far) 108 228.67 T
(. But it does r) 323.49 228.67 T
(equir) 387.77 228.67 T
(e extensions to) 413.18 228.67 T
-0.05 (those r) 108 214.67 P
-0.05 (ules. In this chapter) 140.88 214.67 P
-0.05 (, we explain how slot inheritance and method dispatch) 235.25 214.67 P
(work in Dylan in the pr) 108 200.67 T
(esence of multiple inheritance.) 222.35 200.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "287" 301
%%Page: "288" 302
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(288) 72 677.67 T
0 F
(Chapter 18) 95.75 677.67 T
(Multiple Inheritance) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(18.1  Example of m) 108 638 T
(ultiple inheritance) 218.54 638 T
1 11 Q
-0.08 (In our airport example, we de\336ned a) 108 617.67 P
4 10 Q
-0.17 (<vehicle>) 288.36 617.67 P
1 11 Q
-0.08 ( class, and used it as a super) 342.36 617.67 P
-0.08 (class) 478.41 617.67 P
(for classes of air) 108 603.67 T
(craft. Figur) 185.63 603.67 T
(e 18.1 shows the hierar) 239.32 603.67 T
(chy of vehicle classes that we) 349.87 603.67 T
(de\336ned.) 108 589.67 T
(So far) 135 575.67 T
(, the only type of vehicle that we have de\336ned is air) 162.23 575.67 T
(craft. Of course,) 412.55 575.67 T
-0.33 (ther) 108 561.67 P
-0.33 (e ar) 127.4 561.67 P
-0.33 (e many other kinds of vehicle: automobiles, ships, and spacecraft, to name) 144.74 561.67 P
(a few) 108 547.67 T
(. W) 133.34 547.67 T
(e have not needed these kinds of vehicles in the airport example so far) 148.83 547.67 T
(,) 489.01 547.67 T
(but we can easily see how we would need mor) 108 533.67 T
(e vehicle classes if we made the) 334.72 533.67 T
(example mor) 108 519.67 T
(e r) 171.85 519.67 T
(ealistic.) 184.02 519.67 T
(For example, air) 135 505.67 T
(craft need fuel befor) 213.8 505.67 T
(e they can take of) 311.63 505.67 T
(f. An air) 396 505.67 T
(craft is typi-) 435.72 505.67 T
(cally fueled by a tr) 108 491.67 T
(uck at the gate. If fuel is unavailable or fueling is delayed, the) 198.2 491.67 T
-0.13 (air) 108 477.67 P
-0.13 (craft\325s departur) 120.85 477.67 P
-0.13 (e fr) 195.98 477.67 P
-0.13 (om the gate is delayed as well. If we want to model the take-) 211.68 477.67 P
(of) 108 463.67 T
(f pr) 117.47 463.67 T
(ocess mor) 134.64 463.67 T
(e accurately) 182.74 463.67 T
(, we should take account of the need for fuel, and spe-) 239.46 463.67 T
(ci\336cally the need to get fuel tr) 108 449.67 T
(ucks to air) 252.23 449.67 T
(craft pr) 302.47 449.67 T
(eparing for takeof) 337.95 449.67 T
(f.) 424.86 449.67 T
(W) 135 435.67 T
(e ar) 144.99 435.67 T
(e not going to handle the fuel-supply pr) 162.65 435.67 T
(oblem in this book. However) 356.38 435.67 T
(,) 496.68 435.67 T
(in this section, we ar) 108 421.67 T
(e going to modify the vehicle class hierar) 207.31 421.67 T
(chy as a \336rst step) 406.15 421.67 T
(towar) 108 407.67 T
(d handling fuel tr) 136.41 407.67 T
(ucks and other kinds of gr) 221.94 407.67 T
(ound vehicles. In the pr) 349.25 407.67 T
(ocess,) 463.99 407.67 T
(we will develop an opportunity for using multiple inheritance in air) 108 393.67 T
(craft classes.) 438.37 393.67 T
3 13 Q
(18.1.1  Modeling of gr) 108 362.33 T
(ound vehic) 216.81 362.33 T
(les) 272.89 362.33 T
1 11 Q
(An obvious early step in modeling the behavior of fuel tr) 108 342.67 T
(ucks would be to de\336ne) 384.62 342.67 T
(a) 108 328.67 T
4 10 Q
(<fuel-truck>) 116.25 328.67 T
1 11 Q
( class. Pr) 188.25 328.67 T
(esumably) 230.2 328.67 T
(, we would want that class to inherit fr) 276.16 328.67 T
(om) 463.55 328.67 T
108 132.01 504 140 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 18.1) 204.87 143.33 T
8 F
(Hier) 263.23 143.33 T
(arch) 281.46 143.33 T
(y of v) 300.61 143.33 T
(ehicle classes) 324.26 143.33 T
(.) 386.35 143.33 T
108 156 504 299 C
0 0 0 1 0 0 0 K
242 160 370 297 C
0 248 322 364 447 116 125 248 166 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f18-1.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f18-1 .eps)%%CreationDate: (6/5/96) (10:45 AM)%%BoundingBox: 248 322 364 447%%HiResBoundingBox: 249.3138 321.75 362.6862 446.957%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 305.5 396.5 305.5 396.5%AI3_TileBox: 31 31 583 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -450.5 900.5 -1.5 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014.5 4716.5 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014.5 4716.5 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014.5 4716.5 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 306 439.75 0 TpTP-24.2941 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(<vehicle>) Tx (\r) TX TO0 To1 0 0 1 306 402.75 0 TpTP-26.9934 0 Td0 Tr(<aircraft>) Tx (\r) TX TO0 To1 0 0 1 306 362.75 0 TpTP-56.6862 0 Td0 Tr(<commercial-aircraft>) Tx (\r) TX TO0 To1 0 0 1 306 324 0 TpTP-16.196 0 Td0 Tr(<B707>) Tx (\r) TX TOu0 R0 G0.65 w306 435.5 m306 418 lS0 O0 g1 w303.7621 419.5457 m306.0275 411.0899 l308.2935 419.5457 l303.7621 419.5457 lfUu0 R0 G0.65 w306 398 m306 380.5 lS0 O0 g1 w303.7621 382.0457 m306.0275 373.5899 l308.2935 382.0457 l303.7621 382.0457 lfUu0 R0 G0.65 w306 358 m306 340.5 lS0 O0 g1 w303.7621 342.0457 m306.0275 333.5899 l308.2935 342.0457 l303.7621 342.0457 lfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 156 504 299 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "288" 302
%%Page: "289" 303
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(18.1 Example of multiple inheritance) 374.88 677.67 T
2 F
(289) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 10 Q
0 X
(<vehicle>) 108 640.67 T
1 11 Q
(. Let\325s look at our curr) 162 640.67 T
(ent de\336nitions of both the) 269.21 640.67 T
4 10 Q
(<vehicle>) 397.32 640.67 T
1 11 Q
( class and) 451.32 640.67 T
(its only dir) 108 626.67 T
(ect subclass,) 160.74 626.67 T
4 10 Q
(<aircraft>) 223.03 626.67 T
1 11 Q
(:) 283.03 626.67 T
5 9 Q
(// The class that represents all self-propelled devices) 108 606 T
4 F
(define abstract class <vehicle> \050<physical-object>\051) 108 595 T
5 F
(// Every vehicle has a unique identification code) 118.8 584 T
4 F
(slot vehicle-id :: <string>, required-init-keyword: id:;) 118.8 573 T
5 F
(// The normal operating speed of this class of vehicle in miles per hour) 118.8 562 T
4 F
(each-subclass slot cruising-speed :: <positive-integer>;) 118.8 551 T
5 F
(// Allow individual differences in the size of particular aircraft, while) 118.8 540 T
(// providing a suitable default for each class of aircraft) 118.8 529 T
4 F
(each-subclass slot standard-size :: <size>;) 118.8 518 T
(end class <vehicle>;) 108 507 T
5 F
(// This class represents vehicles that normally fly for a portion of) 108 488 T
(// their trip) 108 477 T
4 F
(define abstract class <aircraft> \050<vehicle>\051) 108 466 T
(slot altitude :: <integer>, init-keyword: altitude:;) 118.8 455 T
5 F
(// Direction here is either #\323inbound\323 or #\323outbound\323.) 118.8 444 T
4 F
(slot direction :: <symbol>;) 118.8 433 T
5 F
(// The next transition that this aircraft might be able to make.) 118.8 422 T
4 F
(slot next-transition :: <aircraft-transition>,) 118.8 411 T
(required-init-keyword: transition:, setter: #f;) 129.6 400 T
(end class <aircraft>;) 108 389 T
1 11 Q
(As a start, we can de\336ne a) 108 368.67 T
4 10 Q
(<fuel-truck>) 237.45 368.67 T
1 11 Q
( class as a subclass of) 309.45 368.67 T
4 10 Q
(<vehicle>) 414.49 368.67 T
1 11 Q
(. T) 468.49 368.67 T
(o) 479.72 368.67 T
(operate on instances of this class, we will no doubt need to know how much air-) 108 354.67 T
-0.26 (craft fuel they contain. W) 108 340.67 P
-0.26 (e de\336ne one initial slot,) 228.8 340.67 P
4 10 Q
-0.57 (aircraft-fuel-remaining) 343.01 340.67 P
1 11 Q
-0.26 (. W) 481.01 340.67 P
-0.26 (e) 496.24 340.67 P
(also need to pr) 108 326.67 T
(ovide initial values for the inherited slots) 179.63 326.67 T
4 10 Q
(cruising-speed) 381.86 326.67 T
1 11 Q
( and) 465.86 326.67 T
4 10 Q
(standard-size) 108 312.67 T
1 11 Q
(.) 186 312.67 T
4 9 Q
(define class <fuel-truck> \050<vehicle>\051) 108 292 T
5 F
(// Amount of aircraft fuel remaining in the tank) 118.8 281 T
4 F
(slot aircraft-fuel-remaining :: <integer>,) 118.8 270 T
(init-keyword: aircraft-fuel-remaining:, init-value: 0;) 129.6 259 T
(inherited slot cruising-speed, init-value: 25;) 118.8 248 T
(inherited slot standard-size,) 118.8 237 T
(init-value: make\050<size>, length: 30, width: 10, height: 10\051;) 129.6 226 T
(end class <fuel-truck>;) 108 215 T
1 11 Q
(This de\336nition serves our immediate purpose, but the class hierar) 108 194.67 T
(chy is not as) 427.01 194.67 T
-0.29 (modular as it might be. Suppose that we want to take account of other vehicles on) 108 180.67 P
(the gr) 108 166.67 T
(ound, such as baggage carriers or \336r) 136.27 166.67 T
(e tr) 312.43 166.67 T
(ucks? W) 328.3 166.67 T
(e can anticipate that all) 368.22 166.67 T
(gr) 108 152.67 T
(ound vehicles might have common featur) 118.26 152.67 T
(es, and we do not want each new) 320.81 152.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "289" 303
%%Page: "290" 304
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(290) 72 677.67 T
0 F
(Chapter 18) 95.75 677.67 T
(Multiple Inheritance) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(class to be a dir) 108 640.67 T
(ect subclass of) 182.43 640.67 T
4 10 Q
(<vehicle>) 254.38 640.67 T
1 11 Q
(. As a r) 308.38 640.67 T
(e\336nement, we de\336ne two inter-) 342.25 640.67 T
(mediary classes,) 108 626.67 T
4 10 Q
(<ground-vehicle>) 189.96 626.67 T
1 11 Q
( and) 285.96 626.67 T
4 10 Q
(<flying-vehicle>) 310.08 626.67 T
1 11 Q
(:) 406.08 626.67 T
4 9 Q
(define abstract class <ground-vehicle> \050<vehicle>\051) 108 606 T
(end class <ground-vehicle>;) 108 595 T
(define abstract class <flying-vehicle> \050<vehicle>\051) 108 576 T
(end class <flying-vehicle>;) 108 565 T
(define class <fuel-truck> \050<ground-vehicle>\051) 108 546 T
5 F
(// How much aircraft fuel is left in the tank) 118.8 535 T
4 F
(slot aircraft-fuel-remaining :: <integer>,) 118.8 524 T
(init-keyword: aircraft-fuel-remaining:, init-value: 0;) 129.6 513 T
(inherited slot cruising-speed, init-value: 25;) 118.8 502 T
(inherited slot standard-size,) 118.8 491 T
(init-value: make\050<size>, length: 30, width: 10, height: 10\051;) 129.6 480 T
(end class <fuel-truck>;) 108 469 T
(define abstract class <aircraft> \050<flying-vehicle>\051) 108 450 T
(slot altitude :: <integer>, init-keyword: altitude:;) 118.8 439 T
(slot direction :: <symbol>;) 118.8 428 T
(slot next-transition :: <aircraft-transition>,) 118.8 417 T
(required-init-keyword: transition:, setter: #f;) 129.6 406 T
(end class <aircraft>;) 108 395 T
1 11 Q
(At this point, we ar) 108 374.67 T
(e going to leave the fuel-tr) 201.64 374.67 T
(uck simulation. W) 329.08 374.67 T
(e do not model) 417.06 374.67 T
-0.42 (the fuel-supply pr) 108 360.67 P
-0.42 (oblem further in this book. W) 194.93 360.67 P
-0.42 (e do want to explor) 335.49 360.67 P
-0.42 (e opportunities) 427.96 360.67 P
(that our new class hierar) 108 346.67 T
(chy pr) 227.68 346.67 T
(esents for r) 258.59 346.67 T
(estr) 312.11 346.67 T
(ucturing the air) 329.88 346.67 T
(craft classes.) 405.29 346.67 T
3 13 Q
(18.1.2  Air) 108 315.33 T
(craft c) 158.18 315.33 T
(lasses and m) 189.98 315.33 T
(ultiple inheritance) 256.75 315.33 T
1 11 Q
-0.02 (It is obvious that an air) 108 295.67 P
-0.02 (craft is a \337ying vehicle. In our airport model, however) 219.46 295.67 P
-0.02 (, we) 481.34 295.67 P
(have to take account of an air) 108 281.67 T
(craft\325s behavior on taxiways and r) 250.26 281.67 T
(unways and at) 415.44 281.67 T
(gates. In these situations, the air) 108 267.67 T
(craft is acting as a gr) 263.23 267.67 T
(ound vehicle. Per) 362.44 267.67 T
(haps it) 446.95 267.67 T
(makes sense to de\336ne our air) 108 253.67 T
(craft classes as subclasses of both) 249.02 253.67 T
4 10 Q
(<flying-) 412.48 253.67 T
(vehicle>) 108 239.67 T
1 11 Q
( and) 156 239.67 T
4 10 Q
(<ground-vehicle>) 180.12 239.67 T
1 11 Q
(.) 276.12 239.67 T
-0.26 (What could we gain by doing so? Consider cr) 135 225.67 P
-0.26 (uising speed. When an air) 354.25 225.67 P
-0.26 (craft) 479.53 225.67 P
(is in the air) 108 211.67 T
(, we need to take into account its \337ying cr) 161.21 211.67 T
(uising speed when estimat-) 363.08 211.67 T
(ing its time of arrival at its destination. When the air) 108 197.67 T
(craft is on the gr) 361.42 197.67 T
(ound, we) 440.19 197.67 T
(need to take into account the gr) 108 183.67 T
(ound cr) 260.83 183.67 T
(uising speed when estimating how much) 298.49 183.67 T
(time the air) 108 169.67 T
(craft will spend on a taxiway or r) 163.37 169.67 T
(unway) 324.32 169.67 T
(. It makes sense to have both) 356.92 169.67 T
-0.37 (\337ying and gr) 108 155.67 P
-0.37 (ound cr) 170.17 155.67 P
-0.37 (uising speeds. It also makes sense for \337ying cr) 207.45 155.67 P
-0.37 (uising speed to) 428.52 155.67 P
(be a pr) 108 141.67 T
(operty of \337ying vehicles \321 mor) 141.11 141.67 T
(e speci\336cally) 294.96 141.67 T
(, air) 355.94 141.67 T
(craft \321 and for gr) 374.29 141.67 T
(ound) 461.17 141.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "290" 304
%%Page: "291" 305
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(18.1 Example of multiple inheritance) 374.88 677.67 T
2 F
(291) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.39 (cr) 108 640.67 P
-0.39 (uising speed to be a pr) 117.14 640.67 P
-0.39 (operty of gr) 224.91 640.67 P
-0.39 (ound vehicles. After all, the notion of cr) 281.51 640.67 P
-0.39 (uising) 471.42 640.67 P
(speed can be useful in estimating how long a fuel tr) 108 626.67 T
(uck will take to arrive at a) 358.49 626.67 T
(given gate.) 108 612.67 T
(W) 135 598.67 T
(e now r) 144.99 598.67 T
(estr) 181.49 598.67 T
(uctur) 199.26 598.67 T
(e our vehicle classes again, this time to make the air) 225.15 598.67 T
(craft) 475.57 598.67 T
(classes be subclasses of both) 108 584.67 T
4 10 Q
(<flying-vehicle>) 247.92 584.67 T
1 11 Q
( and) 343.92 584.67 T
4 10 Q
(<ground-vehicle>) 368.04 584.67 T
1 11 Q
(. W) 464.04 584.67 T
(e) 479.53 584.67 T
(need to r) 108 570.67 T
(emove the) 150.9 570.67 T
4 10 Q
(cruising-speed) 204.13 570.67 T
1 11 Q
( slot fr) 288.13 570.67 T
(om the) 318.9 570.67 T
4 10 Q
(<vehicle>) 355.37 570.67 T
1 11 Q
( class, and to) 409.37 570.67 T
-0.32 (r) 108 556.67 P
-0.32 (eplace it by two slots:) 112.15 556.67 P
4 10 Q
-0.7 (ground-cruising-speed) 217.66 556.67 P
1 11 Q
-0.32 ( for the) 343.66 556.67 P
4 10 Q
-0.7 (<ground-vehicle>) 380.23 556.67 P
1 11 Q
-0.32 ( class) 476.23 556.67 P
(and) 108 542.67 T
4 10 Q
(flying-cruising-speed) 129.37 542.67 T
1 11 Q
( for the) 255.37 542.67 T
4 10 Q
(<flying-vehicle>) 292.89 542.67 T
1 11 Q
( class. W) 388.89 542.67 T
(e can also take) 430.05 542.67 T
(this opportunity to move the) 108 528.67 T
4 10 Q
(altitude) 250.76 528.67 T
1 11 Q
( slot fr) 298.76 528.67 T
(om the) 329.52 528.67 T
4 10 Q
(<aircraft>) 366 528.67 T
1 11 Q
( class to the) 426 528.67 T
4 10 Q
(<flying-vehicle>) 108 514.67 T
1 11 Q
( class, because any \337ying vehicle is likely to need to keep) 204 514.67 T
(track of its altitude. Finally) 108 500.67 T
(, we intr) 237.51 500.67 T
(oduce multiple inheritance by r) 277.54 500.67 T
(ede\336ning the) 430.28 500.67 T
4 10 Q
(<aircraft>) 108 486.67 T
1 11 Q
( class to be a dir) 168 486.67 T
(ect subclass of both) 245.18 486.67 T
4 10 Q
(<flying-vehicle>) 341.95 486.67 T
1 11 Q
( and) 437.95 486.67 T
4 10 Q
(<ground-vehicle>) 108 472.67 T
1 11 Q
(.) 204 472.67 T
4 9 Q
(define abstract class <vehicle> \050<physical-object>\051) 108 452 T
5 F
(// Every vehicle has a unique identification code) 118.8 441 T
4 F
(slot vehicle-id :: <string>, required-init-keyword: id:;) 118.8 430 T
5 F
(// The standard size of this class of vehicle) 118.8 419 T
4 F
(each-subclass slot standard-size :: <size>;) 118.8 408 T
(end class <vehicle>;) 108 397 T
(define abstract class <ground-vehicle> \050<vehicle>\051) 108 378 T
5 F
(// The normal operating speed of this class of vehicle) 118.8 367 T
4 F
(each-subclass slot ground-cruising-speed :: <positive-integer>;) 118.8 356 T
(end class <ground-vehicle>;) 108 345 T
(define abstract class <flying-vehicle> \050<vehicle>\051) 108 326 T
5 F
(// The normal operating speed of this class of vehicle) 118.8 315 T
4 F
(each-subclass slot flying-cruising-speed :: <positive-integer>;) 118.8 304 T
(slot altitude :: <integer>, init-keyword: altitude:;) 118.8 293 T
(end class <flying-vehicle>;) 108 282 T
(define abstract class <aircraft> \050<flying-vehicle>, <ground-vehicle>\051) 108 263 T
(slot direction :: <symbol>;) 118.8 252 T
(slot next-transition :: <aircraft-transition>,) 118.8 241 T
(required-init-keyword: transition:, setter: #f;) 129.6 230 T
(end class <aircraft>;) 108 219 T
1 11 Q
(Now) 108 198.67 T
(, all air) 131.31 198.67 T
(craft classes have two slots for cr) 164.31 198.67 T
(uising speed:) 323.06 198.67 T
4 10 Q
(ground-cruising-) 390.06 198.67 T
(speed) 108 184.67 T
1 11 Q
(, inherited fr) 138 184.67 T
(om the) 198.46 184.67 T
4 10 Q
(<ground-vehicle>) 234.93 184.67 T
1 11 Q
( class, and) 330.93 184.67 T
4 10 Q
(flying-cruising-) 383.47 184.67 T
(speed) 108 170.67 T
1 11 Q
(, inherited fr) 138 170.67 T
(om the) 198.46 170.67 T
4 10 Q
(<flying-vehicle>) 234.93 170.67 T
1 11 Q
( class. W) 330.93 170.67 T
(e have to modify our) 372.08 170.67 T
4 10 Q
(<B707>) 108 156.67 T
1 11 Q
( class to pr) 144 156.67 T
(ovide default initial values for these slots.) 195.51 156.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "291" 305
%%Page: "292" 306
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(292) 72 677.67 T
0 F
(Chapter 18) 95.75 677.67 T
(Multiple Inheritance) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define class <B707> \050<commercial-aircraft>\051) 108 642 T
(inherited slot flying-cruising-speed, init-value: 368;) 118.8 631 T
(inherited slot ground-cruising-speed, init-value: 45;) 118.8 620 T
(inherited slot standard-size,) 118.8 609 T
(init-value: make\050<size>, length: 153, width: 146, height: 42\051;) 129.6 598 T
(end class <B707>;) 108 587 T
1 11 Q
(Finally) 108 566.67 T
(, to complete the example, we would change our) 140.52 566.67 T
4 10 Q
(<fuel-truck>) 379.13 566.67 T
1 11 Q
( class de\336-) 451.13 566.67 T
(nition to pr) 108 552.67 T
(ovide a default initial value for) 162.65 552.67 T
4 10 Q
(ground-cruising-speed) 315.76 552.67 T
1 11 Q
(, instead of) 441.76 552.67 T
4 10 Q
(cruising-speed) 108 538.67 T
1 11 Q
(.) 192 538.67 T
3 15 Q
(18.2  Multiple inheritance and slots) 108 499 T
1 11 Q
-0.34 (For the most part, using multiple inheritance does not pr) 108 478.67 P
-0.34 (esent special pr) 380.52 478.67 P
-0.34 (oblems in) 454.63 478.67 P
(using slots. Recall that a class inherits all the slots of its super) 108 464.67 T
(classes. A subclass) 404.57 464.67 T
-0.03 (can also add slots of its own, but it cannot r) 108 450.67 P
-0.03 (emove or r) 317.88 450.67 P
-0.03 (eplace any slots de\336ned by) 370.29 450.67 P
-0.15 (its super) 108 436.67 P
-0.15 (classes. A slot can appear only once in a class and in all that class\325s super-) 149.38 436.67 P
(classes. Thus, a class\325s slots ar) 108 422.67 T
(e the union of its slots and those of all its super-) 252.44 422.67 T
(classes, and duplicate slot de\336nitions ar) 108 408.67 T
(e not permitted. This r) 300.79 408.67 T
(ule holds,) 409.37 408.67 T
(r) 108 394.67 T
(egar) 112.15 394.67 T
(dless of whether a class has one dir) 133.18 394.67 T
(ect super) 303.79 394.67 T
(class or mor) 347.6 394.67 T
(e than one.) 406.23 394.67 T
(Ther) 108 200.67 T
(e ar) 130.56 200.67 T
(e ways, however) 148.23 200.67 T
(, in which subclasses and super) 229.07 200.67 T
(classes can have distinct) 381.4 200.67 T
-0.11 (ef) 108 186.67 P
-0.11 (fects on the same slot. One way is by pr) 116.73 186.67 P
-0.11 (oviding default values for the slot. Even) 307.51 186.67 P
-0.37 (though duplicate slots ar) 108 172.67 P
-0.37 (e not permitted, a class can pr) 227.67 172.67 P
-0.37 (ovide its own default value) 370.24 172.67 P
(for a slot that it inherits fr) 108 158.67 T
(om a super) 232.21 158.67 T
(class. The subclass can pr) 286.26 158.67 T
(ovide this default) 409.17 158.67 T
(by supplying in its class de\336nition an) 108 144.67 T
4 10 Q
(inherited slot) 292.32 144.67 T
1 11 Q
( option that includes an) 376.32 144.67 T
4 10 Q
(init-value:) 108 130.67 T
1 11 Q
( or) 174 130.67 T
4 10 Q
(init-function:) 189.85 130.67 T
1 11 Q
( speci\336cation, or an init expr) 273.85 130.67 T
(ession.) 411.56 130.67 T
2 F
-0.05 (Comparison with C++) 141 360.67 P
1 F
-0.05 (: In C++, a data member of the same name can) 252.61 360.67 P
-0.19 (appear in both a base class and a derived class. The name in the scope) 141 346.67 P
-0.43 (of the derived class hides the same name in the base class, but the base) 141 332.67 P
(class slot can be accessed by qualifying its name.) 141 318.67 T
(All access to Dylan class slots is thr) 168 304.67 T
(ough getter and setter) 338.43 304.67 T
(methods, which ar) 141 290.67 T
(e similar to C++ virtual functions. In Dylan,) 231.32 290.67 T
-0.14 (you can override access to an inherited slot by de\336ning a getter or) 141 276.67 P
(setter method specialized on the subclass \050derived class\051.) 141 262.67 T
-0.15 (For mor) 168 248.67 P
-0.15 (e information on inheritance in C++, see Section B.2,) 206.93 248.67 P
(page 386.) 141 234.67 T
135 373.88 135 227.13 2 L
V
0.25 H
0 Z
N
486 373.88 486 227.13 2 L
V
N
134.88 374 486.12 374 2 L
V
N
134.88 227 486.12 227 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "292" 306
%%Page: "293" 307
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(18.2 Multiple inheritance and slots) 381.75 677.67 T
2 F
(293) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Suppose that mor) 135 640.67 T
(e than one class de\336nes a default value for the same slot.) 221.01 640.67 T
(Which default takes pr) 108 626.67 T
(ecedence? When each class has only one dir) 218.6 626.67 T
(ect super) 430.78 626.67 T
(class,) 474.6 626.67 T
-0.26 (the answer is easy: the default value pr) 108 612.67 P
-0.26 (ovided by the) 295.58 612.67 P
2 F
-0.26 (most speci\336c) 364.62 612.67 P
1 F
-0.26 ( class takes pr) 428.81 612.67 P
-0.26 (e-) 495.07 612.67 P
(cedence. A default value for a subclass overrides a default value for a super) 108 598.67 T
(class.) 474.72 598.67 T
(But what if a class has mor) 135 584.67 T
(e than one dir) 264.81 584.67 T
(ect super) 331.97 584.67 T
(class, and each super) 375.78 584.67 T
(class) 477.69 584.67 T
(pr) 108 570.67 T
(ovides a dif) 118.76 570.67 T
(fer) 175.22 570.67 T
(ent default value for the same slot? Imagine, for example, that) 188.3 570.67 T
(our) 108 556.67 T
4 10 Q
(<vehicle>) 127.73 556.67 T
1 11 Q
( class had a slot named) 181.73 556.67 T
4 10 Q
(fuel-remaining) 296.33 556.67 T
1 11 Q
(, and our) 380.33 556.67 T
4 10 Q
(<ground-) 426.94 556.67 T
(vehicle>) 108 542.67 T
1 11 Q
( and) 156 542.67 T
4 10 Q
(<flying-vehicle>) 180.12 542.67 T
1 11 Q
( classes each had a dif) 276.12 542.67 T
(fer) 382.28 542.67 T
(ent default value for) 395.36 542.67 T
(the) 108 528.67 T
4 10 Q
(fuel-remaining) 126.01 528.67 T
1 11 Q
( slot, which they inherit fr) 210.01 528.67 T
(om the common super) 335.62 528.67 T
(class) 444.89 528.67 T
4 10 Q
(<vehicle>) 108 514.67 T
1 11 Q
(:) 162 514.67 T
4 9 Q
(define abstract class <vehicle> \050<physical-object>\051) 108 494 T
(slot fuel-remaining :: <integer>;) 118.8 483 T
(...) 118.8 472 T
(end class <vehicle>;) 108 461 T
(define abstract class <ground-vehicle> \050<vehicle>\051) 108 442 T
(inherited-slot fuel-remaining, init-value: 30;) 118.8 431 T
(...) 118.8 420 T
(end class <ground-vehicle>;) 108 409 T
(define abstract class <flying-vehicle> \050<vehicle>\051) 108 390 T
(inherited-slot fuel-remaining, init-value: 3000;) 118.8 379 T
(...) 118.8 368 T
(end class <flying-vehicle>;) 108 357 T
(define abstract class <aircraft> \050<flying-vehicle>, <ground-vehicle>\051) 108 338 T
(...) 118.8 327 T
(end class <aircraft>;) 108 316 T
1 11 Q
(Now neither the class) 108 295.67 T
4 10 Q
(<ground-vehicle>) 215.96 295.67 T
1 11 Q
( nor the class) 311.96 295.67 T
4 10 Q
(<flying-vehicle>) 377.89 295.67 T
1 11 Q
( is) 473.89 295.67 T
(mor) 108 281.67 T
(e speci\336c than the other with r) 127.87 281.67 T
(espect to) 275.07 281.67 T
4 10 Q
(<aircraft>) 320.44 281.67 T
1 11 Q
(. So when we cr) 380.44 281.67 T
(eate an) 456.7 281.67 T
(instance of) 108 267.67 T
4 10 Q
(<aircraft>) 163.08 267.67 T
1 11 Q
( that has both) 223.08 267.67 T
4 10 Q
(<ground-vehicle>) 291.79 267.67 T
1 11 Q
( and) 387.79 267.67 T
4 10 Q
(<flying-) 411.92 267.67 T
(vehicle>) 108 253.67 T
1 11 Q
( as dir) 156 253.67 T
(ect super) 185.73 253.67 T
(classes, what is the default initial value for the) 229.55 253.67 T
4 10 Q
(fuel-) 456.63 253.67 T
(remaining) 108 239.67 T
1 11 Q
( slot:) 162 239.67 T
4 10 Q
(30) 187.71 239.67 T
1 11 Q
( or) 199.71 239.67 T
4 10 Q
(3000) 215.56 239.67 T
1 11 Q
(?) 239.56 239.67 T
-0.16 (T) 135 225.67 P
-0.16 (o answer this question, Dylan needs an additional way of or) 140.73 225.67 P
-0.16 (dering classes,) 431.16 225.67 P
(called a) 108 211.67 T
2 F
(class precedence list) 147.78 211.67 T
1 F
(. In Section 18.3, we describe how Dylan constr) 249.17 211.67 T
(ucts) 477.15 211.67 T
(the class pr) 108 197.67 T
(ecedence list. The short answer to our question about default initial) 162.43 197.67 T
-0.1 (slot values is that Dylan uses the default value pr) 108 183.67 P
-0.1 (ovided by the class that appears) 346.05 183.67 P
(earlier in the class pr) 108 169.67 T
(ecedence list.) 208.66 169.67 T
(W) 135 155.67 T
(e shall see that the class pr) 144.99 155.67 T
(ecedence list is also important for method dis-) 272.93 155.67 T
(patch in the pr) 108 141.67 T
(esence of multiple inheritance. Suppose, for example, that we had) 178.85 141.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "293" 307
%%Page: "294" 308
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(294) 72 677.67 T
0 F
(Chapter 18) 95.75 677.67 T
(Multiple Inheritance) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(de\336ned two getter or two setter methods for the) 108 640.67 T
4 10 Q
(fuel-remaining) 344.19 640.67 T
1 11 Q
( slot: one spe-) 428.19 640.67 T
(cialized on the) 108 626.67 T
4 10 Q
(<flying-vehicle>) 181.39 626.67 T
1 11 Q
( class, and the other specialized on the) 277.39 626.67 T
4 10 Q
(<ground-vehicle>) 108 612.67 T
1 11 Q
( class. Which method would be selected to get or set the slot) 204 612.67 T
(value of an instance of) 108 598.67 T
4 10 Q
(<aircraft>) 219.72 598.67 T
1 11 Q
(? W) 279.72 598.67 T
(e r) 297.34 598.67 T
(eturn to the issue of method dispatch) 309.5 598.67 T
(after we see how Dylan constr) 108 584.67 T
(ucts the class pr) 254.87 584.67 T
(ecedence list.) 331.82 584.67 T
3 15 Q
(18.3  The c) 108 545 T
(lass precedence list) 170.68 545 T
1 11 Q
(When each class has only one dir) 108 524.67 T
(ect super) 268.58 524.67 T
(class, the r) 312.39 524.67 T
(elations among super) 362.96 524.67 T
(classes) 467.35 524.67 T
(and subclasses form a) 108 510.67 T
2 F
(tree) 217.08 510.67 T
1 F
(. For every subclass in the tr) 236.02 510.67 T
(ee, ther) 371.83 510.67 T
(e is a well-de\336ned) 407.28 510.67 T
-0.17 (or) 108 496.67 P
-0.17 (dering in terms of) 118.15 496.67 P
2 F
-0.17 (speci\336city) 207.36 496.67 P
1 F
-0.17 ( for that class and all its super) 258.06 496.67 P
-0.17 (classes. A subclass is) 401.39 496.67 P
(always mor) 108 482.67 T
(e speci\336c than ar) 164.77 482.67 T
(e any of its super) 245.99 482.67 T
(classes. When each class has only) 328.73 482.67 T
(one super) 108 468.67 T
(class, we can or) 155.75 468.67 T
(der unambiguously any given class and all its super-) 231.05 468.67 T
(classes, fr) 108 454.67 T
(om) 154.16 454.67 T
2 F
(most speci\336c) 172.62 454.67 T
1 F
( to) 237.07 454.67 T
2 F
(least speci\336c) 252.17 454.67 T
1 F
(. Figur) 315.38 454.67 T
(e 18.1 illustrates part of such an) 347.1 454.67 T
(or) 108 440.67 T
(dering for our original, single-inheritance de\336nitions of) 118.15 440.67 T
4 10 Q
(<vehicle>) 389.93 440.67 T
1 11 Q
( and) 443.93 440.67 T
4 10 Q
(<vehicle>) 108 426.67 T
1 11 Q
(\325s subclasses.) 162 426.67 T
(W) 135 412.67 T
(ith multiple inheritance, the r) 145.4 412.67 T
(elations among super) 287.61 412.67 T
(classes and subclasses) 392 412.67 T
-0.25 (can form a) 108 398.67 P
2 F
-0.25 (graph) 161.52 398.67 P
1 F
-0.25 (, which may not be a tr) 190.85 398.67 P
-0.25 (ee. W) 300.58 398.67 P
-0.25 (e cannot always or) 326.36 398.67 P
-0.25 (der a class and all) 416.22 398.67 P
-0.24 (its super) 108 384.67 P
-0.24 (classes in terms of speci\336city) 149.28 384.67 P
-0.24 (. It is still tr) 286.86 384.67 P
-0.24 (ue that a subclass is mor) 340.5 384.67 P
-0.24 (e speci\336c) 457.55 384.67 P
(than ar) 108 370.67 T
(e any of its super) 142.29 370.67 T
(classes. But we cannot always or) 225.02 370.67 T
(der its super) 382.83 370.67 T
(classes in) 443.45 370.67 T
(terms of speci\336city) 108 356.67 T
(.) 198.6 356.67 T
(Figur) 135 342.67 T
(e 18.2 illustrates our curr) 161.21 342.67 T
(ent de\336nitions of) 281.58 342.67 T
4 10 Q
(<vehicle>) 366.86 342.67 T
1 11 Q
( and of) 420.86 342.67 T
4 10 Q
(<vehicle>) 108 328.67 T
1 11 Q
(\325s subclasses.) 162 328.67 T
(Consider) 135 314.67 T
4 10 Q
(<B707>) 182.16 314.67 T
1 11 Q
( and its super) 218.16 314.67 T
(classes. W) 283.8 314.67 T
(e can or) 332.14 314.67 T
(der) 369.85 314.67 T
4 10 Q
(<B707>) 388.93 314.67 T
1 11 Q
(,) 424.93 314.67 T
4 10 Q
(<commercial-) 430.43 314.67 T
(aircraft>) 108 300.67 T
1 11 Q
(, and) 162 300.67 T
4 10 Q
(<aircraft>) 188.87 300.67 T
1 11 Q
( fr) 248.87 300.67 T
(om mor) 259.43 300.67 T
(e speci\336c to less speci\336c. But we cannot) 297.77 300.67 T
(say that either) 108 286.67 T
4 10 Q
(<ground-vehicle>) 179.68 286.67 T
1 11 Q
( or) 275.68 286.67 T
4 10 Q
(<flying-vehicle>) 291.53 286.67 T
1 11 Q
( is mor) 387.53 286.67 T
(e speci\336c than) 420.76 286.67 T
(the other) 108 272.67 T
(, because neither class is a subclass of the other) 150.8 272.67 T
(. W) 377.37 272.67 T
(e could or) 392.86 272.67 T
(der) 441.22 272.67 T
4 10 Q
(<B707>) 460.31 272.67 T
1 11 Q
(and its super) 108 258.67 T
(classes in two ways, fr) 170.9 258.67 T
(om mor) 279.13 258.67 T
(e speci\336c to less speci\336c:) 317.46 258.67 T
4 9 Q
(<B707>, <commercial-aircraft>, <aircraft>,) 108 238 T
(<flying-vehicle>, <ground-vehicle>, <vehicle>, <physical-object>, <object>) 118.8 227 T
(<B707>, <commercial-aircraft>, <aircraft>,) 108 208 T
(<ground-vehicle>, <flying-vehicle>, <vehicle>, <physical-object>, <object>) 118.8 197 T
1 11 Q
(Dylan needs a way to determine which of these or) 108 176.67 T
(derings to use. It solves the) 351.54 176.67 T
(pr) 108 162.67 T
(oblem by constr) 118.76 162.67 T
(ucting a) 196.53 162.67 T
2 F
(class precedence list) 238.35 162.67 T
1 F
( for) 339.75 162.67 T
4 10 Q
(<B707>) 359.26 162.67 T
1 11 Q
( and its super) 395.26 162.67 T
(classes.) 460.91 162.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "294" 308
%%Page: "295" 309
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(18.3 The class precedence list) 404.62 677.67 T
2 F
(295) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(18.3.1  Construction of the c) 108 350.48 T
(lass precedence list) 250.57 350.48 T
1 11 Q
(T) 108 330.82 T
(o understand how Dylan determines the class pr) 113.73 330.82 T
(ecedence list, r) 349.91 330.82 T
(ecall that the) 420.93 330.82 T
4 10 Q
(define class) 108 316.82 T
1 11 Q
( form for a class includes a list of super) 180 316.82 T
(classes. Remember that we) 369.02 316.82 T
(de\336ned) 108 302.82 T
4 10 Q
(<aircraft>) 147.79 302.82 T
1 11 Q
( as follows:) 207.79 302.82 T
4 9 Q
(define abstract class <aircraft> \050<flying-vehicle>, <ground-vehicle>\051) 108 282.15 T
(...) 118.8 271.15 T
(end class <aircraft>;) 108 260.15 T
1 11 Q
(Her) 108 239.82 T
(e, we have listed the super) 126.57 239.82 T
(classes as) 255.39 239.82 T
4 10 Q
(<flying-vehicle>) 303.9 239.82 T
1 11 Q
( and) 399.9 239.82 T
4 10 Q
(<ground-) 424.02 239.82 T
(vehicle>) 108 225.82 T
1 11 Q
(, in that or) 156 225.82 T
(der) 205.83 225.82 T
(.) 221.35 225.82 T
(In cr) 135 211.82 T
(eating the class pr) 156.89 211.82 T
(ecedence list for a class, Dylan uses the or) 244.14 211.82 T
(dering of) 446.31 211.82 T
-0.3 (the list of dir) 108 197.82 P
-0.3 (ect super) 168.99 197.82 P
-0.3 (classes in the) 212.5 197.82 P
4 10 Q
-0.66 (define class) 277.56 197.82 P
1 11 Q
-0.3 ( form for that class. Dylan r) 348.9 197.82 P
-0.3 (elies) 479.95 197.82 P
(on the following r) 108 183.82 T
(ules:) 195.14 183.82 T
2 F
(1.) 117 163.82 T
1 F
(The class being de\336ned takes pr) 135 163.82 T
(ecedence over all its dir) 290.08 163.82 T
(ect super) 404.3 163.82 T
(classes.) 448.11 163.82 T
2 F
(2.) 117 143.82 T
1 F
(Each dir) 135 143.82 T
(ect super) 175.33 143.82 T
(class in the list takes pr) 219.14 143.82 T
(ecedence over all dir) 331.21 143.82 T
(ect super-) 431.23 143.82 T
(classes that appear later in the list.) 135 129.82 T
108 375.15 504 383.14 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 18.2) 148.55 386.48 T
8 F
(Gr) 206.91 386.48 T
(aph of v) 217.92 386.48 T
(ehicle classes that use m) 253.25 386.48 T
(ultiple inher) 364.86 386.48 T
(itance) 416.14 386.48 T
(.) 442.67 386.48 T
108 399.14 504 648 C
0 0 0 1 0 0 0 K
144.5 403.14 467.5 639 C
0 152 271 463 502 311 231 150.5 405.57 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f18-2.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f18-2 .eps)%%CreationDate: (6/5/96) (10:45 AM)%%BoundingBox: 152 271 463 502%%HiResBoundingBox: 152.6079 271.75 461.8562 501.207%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 305.5 396 305.5 396%AI3_TileBox: 31 31 583 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: 89.5 600 2 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014.5 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014.5 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014.5 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 320 494 0 TpTP-21.5947 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(<object>) Tx (\r) TX TO0 To1 0 0 1 220 384.6667 0 TpTP-43.1894 0 Td0 Tr(<ground-vehicle>) Tx (\r) TX TO0 To1 0 0 1 418.6667 384.6667 0 TpTP-43.1894 0 Td0 Tr(<flying-vehicle>) Tx (\r) TX TO0 To1 0 0 1 320 423.1667 0 TpTP-24.2941 0 Td0 Tr(<vehicle>) Tx (\r) TX TO0 To1 0 0 1 320 458.5 0 TpTP-45.8888 0 Td0 Tr(<physical-object>) Tx (\r) TX TO0 To1 0 0 1 334.6667 346 0 TpTP-26.9934 0 Td0 Tr(<aircraft>) Tx (\r) TX TO0 To1 0 0 1 334.6667 310 0 TpTP-56.6862 0 Td0 Tr(<commercial-aircraft>) Tx (\r) TX TO0 To1 0 0 1 334.6667 274 0 TpTP-16.196 0 Td0 Tr(<B707>) Tx (\r) TX TOu0 R0 G0.65 w320.5 489 m320.5 476.75 lS0 O0 g1 w318.2621 478.2958 m320.5275 469.84 l322.7935 478.2958 l318.2621 478.2958 lfUu0 R0 G0.65 w320 454.25 m320 441.75 lS0 O0 g1 w317.7621 443.2958 m320.0275 434.84 l322.2935 443.2958 l317.7621 443.2958 lfUu0 R0 G0.65 w290.5 417.5 m260 403 lS0 O0 g1 w260.4337 405.6826 m253.7696 400.0059 l262.3794 401.5901 l260.4337 405.6826 lfUu0 R0 G0.65 w353.5 418.5 m383 403 lS0 O0 g1 w380.5905 401.7406 m389.1297 399.8131 l382.6982 405.752 l380.5905 401.7406 lfUu0 R0 G0.65 w216 376.5 m193 360 lS0 O0 g1 w192.9501 362.7196 m187.3999 355.9499 l195.5915 359.0377 l192.9501 362.7196 lfUu0 R0 G0.65 w415.5 376 m352 358 lS0 O0 g1 w352.8766 360.57 m345.3591 356.0843 l354.1124 356.2104 l352.8766 360.57 lfUu0 R0 G0.65 w246 376.5 m316 359 lS0 O0 g1 w313.9607 357.2055 m322.7136 357.3525 l315.0598 361.6017 l313.9607 357.2055 lfUu0 R0 G0.65 w335 341.5 m335 327.5 lS0 O0 g1 w332.7621 329.0458 m335.0275 320.59 l337.2935 329.0458 l332.7621 329.0458 lfUu0 R0 G0.65 w334 305 m334 290.5 lS0 O0 g1 w331.7621 292.0458 m334.0275 283.59 l336.2935 292.0458 l331.7621 292.0458 lfU0 To1 0 0 1 185 347.25 0 TpTP-32.3921 0 Td0 Tr(<fuel-truck>) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 399.14 504 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "295" 309
%%Page: "296" 310
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(296) 72 677.67 T
0 F
(Chapter 18) 95.75 677.67 T
(Multiple Inheritance) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(These r) 108 640.67 T
(ules establish an or) 143.35 640.67 T
(dering of a class and its dir) 236 640.67 T
(ect super) 366.77 640.67 T
(classes, called the) 410.59 640.67 T
2 F
(local precedence order) 108 626.67 T
1 F
(.) 219.62 626.67 T
-0.05 (W) 135 612.67 P
-0.05 (e listed) 144.99 612.67 P
4 10 Q
-0.11 (<flying-vehicle>) 182.3 612.67 P
1 11 Q
-0.05 ( befor) 278.3 612.67 P
-0.05 (e) 306.17 612.67 P
4 10 Q
-0.11 (<ground-vehicle>) 314.14 612.67 P
1 11 Q
-0.05 ( in the list of super-) 410.14 612.67 P
(classes of) 108 598.67 T
4 10 Q
(<aircraft>) 156.01 598.67 T
1 11 Q
(, so, when we apply these r) 216.01 598.67 T
(ules, we see that, for the) 347.86 598.67 T
4 10 Q
(<air-) 467.62 598.67 T
(craft>) 108 584.67 T
1 11 Q
( class,) 144 584.67 T
4 10 Q
(<flying-vehicle>) 175.16 584.67 T
1 11 Q
( must have pr) 271.16 584.67 T
(ecedence higher than that of) 338.15 584.67 T
4 10 Q
(<ground-vehicle>) 108 570.67 T
1 11 Q
(. The local pr) 204 570.67 T
(ecedence or) 266.96 570.67 T
(der for) 323.83 570.67 T
4 10 Q
(<aircraft>) 359.68 570.67 T
1 11 Q
( is as follows:) 419.68 570.67 T
4 9 Q
(<aircraft>, <flying-vehicle>, <ground-vehicle>) 108 550 T
1 11 Q
(The local pr) 108 529.67 T
(ecedence or) 165.46 529.67 T
(der for a class establishes an or) 222.33 529.67 T
(dering of a class and its) 372.15 529.67 T
0 F
(dir) 108 515.67 T
(ect) 120.64 515.67 T
1 F
( super) 133.06 515.67 T
(classes. But our goal is to pr) 163.13 515.67 T
(oduce an overall class pr) 298.19 515.67 T
(ecedence list,) 418.01 515.67 T
(which establishes an or) 108 501.67 T
(dering of the class and) 220.87 501.67 T
0 F
(all) 333.14 501.67 T
1 F
( its super) 344.14 501.67 T
(classes, dir) 388.41 501.67 T
(ect and indi-) 440.83 501.67 T
(r) 108 487.67 T
(ect. In constr) 112.15 487.67 T
(ucting the class pr) 174.04 487.67 T
(ecedence list for a class, Dylan follows two steps:) 262.04 487.67 T
2 F
(1.) 117 467.67 T
1 F
-0.34 (Constr) 135 467.67 P
-0.34 (uct the local pr) 167.71 467.67 P
-0.34 (ecedence or) 238.86 467.67 P
-0.34 (der for the class and its dir) 295.39 467.67 P
-0.34 (ect super) 422.52 467.67 P
-0.34 (classes,) 465.99 467.67 P
(based on the or) 135 453.67 T
(der in which the dir) 209.3 453.67 T
(ect super) 305.63 453.67 T
(classes appear in the) 349.45 453.67 T
4 10 Q
(define) 451.99 453.67 T
(class) 135 439.67 T
1 11 Q
( form for the class.) 165 439.67 T
2 F
(2.) 117 419.67 T
1 F
(Constr) 135 419.67 T
(uct the overall class pr) 167.71 419.67 T
(ecedence list for the class by mer) 276.48 419.67 T
(ging the) 435.11 419.67 T
(class\325s local pr) 135 405.67 T
(ecedence or) 204.68 405.67 T
(der with the class pr) 261.55 405.67 T
(ecedence lists of the class\325s) 360.18 405.67 T
(dir) 135 391.67 T
(ect super) 149.07 391.67 T
(classes.) 192.88 391.67 T
(Notice that this pr) 108 371.67 T
(ocedur) 196.02 371.67 T
(e is r) 229.68 371.67 T
(ecursive! But it is guaranteed to terminate, because) 252.46 371.67 T
(no class can be its own super) 108 357.67 T
(class.) 248.32 357.67 T
(The r) 135 343.67 T
(esulting class pr) 160.31 343.67 T
(ecedence list must be consistent with the local pr) 238.55 343.67 T
(ece-) 474.95 343.67 T
(dence or) 108 329.67 T
(der of the class, and with the class pr) 149.45 329.67 T
(ecedence list of each dir) 328.29 329.67 T
(ect) 443.7 329.67 T
(super) 108 315.67 T
(class. If class) 135.32 315.67 T
4 10 Q
(<a>) 199.52 315.67 T
1 11 Q
( pr) 217.52 315.67 T
(ecedes class) 231.03 315.67 T
4 10 Q
(<b>) 291.52 315.67 T
1 11 Q
( in the class pr) 309.52 315.67 T
(ecedence list, then) 379.05 315.67 T
4 10 Q
(<b>) 470.33 315.67 T
1 11 Q
-0.45 (cannot pr) 108 301.67 P
-0.45 (ecede) 153.84 301.67 P
4 10 Q
-0.98 (<a>) 183.55 301.67 P
1 11 Q
-0.45 ( in either the local pr) 201.55 301.67 P
-0.45 (ecedence or) 299.54 301.67 P
-0.45 (der or the class pr) 355.96 301.67 P
-0.45 (ecedence list) 440.78 301.67 P
(for any dir) 108 287.67 T
(ect super) 159.6 287.67 T
(class. Because of the r) 203.41 287.67 T
(ecursive pr) 308.09 287.67 T
(ocedur) 362.08 287.67 T
(e for constr) 395.74 287.67 T
(ucting it,) 450.32 287.67 T
(the class pr) 108 273.67 T
(ecedence list must be consistent with the local pr) 162.43 273.67 T
(ecedence or) 398.83 273.67 T
(ders and) 455.7 273.67 T
(class pr) 108 259.67 T
(ecedence lists of) 144.42 259.67 T
0 F
(all) 225.62 259.67 T
1 F
( the class\325s super) 236.62 259.67 T
(classes, rather than just with those of) 318.09 259.67 T
(the dir) 108 245.67 T
(ect super) 140.08 245.67 T
(classes.) 183.89 245.67 T
(W) 135 231.67 T
(e can now see how Dylan computes the class pr) 144.99 231.67 T
(ecedence list for the) 376.19 231.67 T
4 10 Q
(<B707>) 108 217.67 T
1 11 Q
( class:) 144 217.67 T
2 F
(1.) 117 197.67 T
1 F
(Constr) 135 197.67 T
(uct the local pr) 167.71 197.67 T
(ecedence or) 239.87 197.67 T
(der for) 296.74 197.67 T
4 10 Q
(<B707>) 332.59 197.67 T
1 11 Q
( and its only dir) 368.59 197.67 T
(ect) 445.46 197.67 T
(super) 135 183.67 T
(class,) 162.32 183.67 T
4 10 Q
(<commercial-aircraft>) 190.74 183.67 T
1 11 Q
(. The r) 316.74 183.67 T
(esult is as follows:) 347.55 183.67 T
4 10 Q
(<B707>) 438.6 183.67 T
1 11 Q
(,) 474.6 183.67 T
4 10 Q
(<commercial-aircraft>) 135 169.67 T
1 11 Q
(.) 261 169.67 T
2 F
(2.) 117 149.67 T
1 F
(Mer) 135 149.67 T
(ge the local pr) 154.82 149.67 T
(ecedence or) 223.26 149.67 T
(der with the class pr) 280.13 149.67 T
(ecedence list of the only) 378.76 149.67 T
(dir) 135 135.67 T
(ect super) 149.07 135.67 T
(class,) 192.88 135.67 T
4 10 Q
(<commercial-aircraft>) 221.29 135.67 T
1 11 Q
(.) 347.3 135.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "296" 310
%%Page: "297" 311
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(18.3 The class precedence list) 404.62 677.67 T
2 F
(297) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Dylan must now use these r) 108 640.67 T
(ules, r) 243.67 640.67 T
(ecursively) 273.09 640.67 T
(, to compute the class pr) 321.66 640.67 T
(ecedence list) 439.39 640.67 T
(of) 108 626.67 T
4 10 Q
(<commercial-aircraft>) 120.42 626.67 T
1 11 Q
(. In doing so, Dylan must compute r) 246.42 626.67 T
(ecursively the) 421.57 626.67 T
(class pr) 108 612.67 T
(ecedence list of the only dir) 144.42 612.67 T
(ect super) 277.51 612.67 T
(class of) 321.32 612.67 T
4 10 Q
(<commercial-aircraft>) 359.4 612.67 T
1 11 Q
(:) 485.4 612.67 T
4 10 Q
(<aircraft>) 108 598.67 T
1 11 Q
(. This pr) 168 598.67 T
(ocess continues until Dylan has r) 208.02 598.67 T
(ecursively computed the) 367.77 598.67 T
(class pr) 108 584.67 T
(ecedence lists for all super) 144.42 584.67 T
(classes of) 271.94 584.67 T
4 10 Q
(<B707>) 319.96 584.67 T
1 11 Q
(. Finally) 355.96 584.67 T
(, Dylan \336nishes con-) 393.98 584.67 T
(str) 108 570.67 T
(ucting the class pr) 120.51 570.67 T
(ecedence list for) 208.51 570.67 T
4 10 Q
(<B707>) 289.39 570.67 T
1 11 Q
( itself. T) 325.39 570.67 T
(able 18.1 shows the r) 362.95 570.67 T
(esults.) 463.57 570.67 T
(One implication of this pr) 135 556.67 T
(ocedur) 260.1 556.67 T
(e is that, if a class inherits a super) 293.76 556.67 T
(class via) 455.89 556.67 T
(two dif) 108 542.67 T
(fer) 142.9 542.67 T
(ent paths, the super) 155.98 542.67 T
(class in common must have pr) 251.58 542.67 T
(ecedence lower than) 399.31 542.67 T
(that of any of its subclasses. For example, the) 108 528.67 T
4 10 Q
(<object>) 329.32 528.67 T
1 11 Q
( class is a super) 377.32 528.67 T
(class of) 451.92 528.67 T
8 F
(Class) 148.25 490.67 T
(Local precedence) 235.59 497.67 T
(order) 266.16 483.67 T
(Class precedence list) 379.73 490.67 T
4 9 Q
(<object>) 114 460 T
(<object>) 222 460 T
(<object>) 348 460 T
(<physical-object>) 114 439 T
(<physical-object>,) 222 439 T
(<object>) 222 428 T
(<physical-object>, <object>) 348 439 T
(<vehicle>) 114 407 T
(<vehicle>, <physical-) 222 407 T
(object>) 222 396 T
(<vehicle>, <physical-object>,) 348 407 T
(<object>) 348 396 T
(<ground-vehicle>) 114 375 T
(<ground-vehicle>,) 222 375 T
(<vehicle>) 222 364 T
(<ground-vehicle>, <vehicle>,) 348 375 T
(<physical-object>, <object>) 348 364 T
(<flying-vehicle>) 114 343 T
(<flying-vehicle>,) 222 343 T
(<vehicle>) 222 332 T
(<flying-vehicle>, <vehicle>,) 348 343 T
(<physical-object>, <object>) 348 332 T
(<aircraft>) 114 311 T
(<aircraft>, <flying-) 222 311 T
(vehicle>, <ground-) 222 300 T
(vehicle>) 222 289 T
(<aircraft>, <flying-vehicle>,) 348 311 T
(<ground-vehicle>, <vehicle>,) 348 300 T
(<physical-object>, <object>) 348 289 T
(<commercial-) 114 268 T
(aircraft>) 114 257 T
(<commercial-) 222 268 T
(aircraft>, <aircraft>) 222 257 T
(<commercial-aircraft>,) 348 268 T
(<aircraft>, <flying-vehicle>,) 348 257 T
(<ground-vehicle>, <vehicle>,) 348 246 T
(<physical-object>, <object>) 348 235 T
(<B707>) 114 214 T
(<B707>, <commercial-) 222 214 T
(aircraft>) 222 203 T
(<B707>, <commercial-aircraft>,) 348 214 T
(<aircraft>, <flying-vehicle>,) 348 203 T
(<ground-vehicle>, <vehicle>,) 348 192 T
(<physical-object>, <object>) 348 181 T
108 144.01 522 152 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 155.01 155.33 T
(ab) 160.32 155.33 T
(le 18.1) 171.89 155.33 T
8 F
(Class precedence lists f) 208.03 155.33 T
(or) 313.32 155.33 T
4 F
(<B707>) 324.99 155.33 T
8 F
( and its superclasses) 360.99 155.33 T
(.) 454.21 155.33 T
108 512.88 108 172.12 2 L
V
0.25 H
0 Z
N
522 512.88 522 172.12 2 L
V
N
107.88 513 522.12 513 2 L
V
N
107.88 472 522.12 472 2 L
V
N
107.88 172 522.12 172 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "297" 311
%%Page: "298" 312
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(298) 72 677.67 T
0 F
(Chapter 18) 95.75 677.67 T
(Multiple Inheritance) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(every class \050except itself\051. This class must have lower pr) 108 640.67 T
(ecedence than any of its) 378.49 640.67 T
(subclasses, so it appears last in every class pr) 108 626.67 T
(ecedence list. The class pr) 326.37 626.67 T
(ecedence) 450.83 626.67 T
(list is consistent with the r) 108 612.67 T
(ule that a subclass is mor) 234.81 612.67 T
(e speci\336c than ar) 356.26 612.67 T
(e any of its) 437.48 612.67 T
(super) 108 598.67 T
(classes.) 135.32 598.67 T
3 13 Q
(18.3.2  More complicated c) 108 564.33 T
(lass precedence lists) 242.9 564.33 T
1 11 Q
(Sometimes, mor) 108 538.67 T
(e than one class pr) 186.56 538.67 T
(ecedence list is consistent with the pr) 276.07 538.67 T
(ocedur) 456.1 538.67 T
(e) 489.76 538.67 T
-0.19 (that we have outlined so far) 108 524.67 P
-0.19 (. Suppose, for example, that we had de\336ned two addi-) 242.1 524.67 P
(tional classes,) 108 510.67 T
4 10 Q
(<wheeled-vehicle>) 176.99 510.67 T
1 11 Q
( and) 278.99 510.67 T
4 10 Q
(<winged-vehicle>) 303.11 510.67 T
1 11 Q
(, with the class r) 399.11 510.67 T
(ela-) 477.55 510.67 T
(tions illustrated in Figur) 108 496.67 T
(e 18.3.) 225.83 496.67 T
108 161.01 504 169 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 18.3) 125.81 172.33 T
8 F
(Expanded g) 184.16 172.33 T
(r) 237.43 172.33 T
(aph of v) 240.66 172.33 T
(ehicle classes that use m) 275.99 172.33 T
(ultiple inher) 387.61 172.33 T
(itance) 438.89 172.33 T
(.) 465.42 172.33 T
108 185 504 481 C
0 0 0 1 0 0 0 K
155 189 457 472 C
0 158 262 448 533 290 271 161 195 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f18-3.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f18-3 .eps)%%CreationDate: (6/5/96) (10:46 AM)%%BoundingBox: 158 262 448 533%%HiResBoundingBox: 159.1112 261.5 446.8562 532.5403%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 305.5 396.5 305.5 396.5%AI3_TileBox: 31 31 583 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -30.5 668.5 1.5 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014.5 4716.5 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014.5 4716.5 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014.5 4716.5 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 305 525.3333 0 TpTP-21.5947 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(<object>) Tx (\r) TX TO0 To1 0 0 1 205 416 0 TpTP-43.1894 0 Td0 Tr(<ground-vehicle>) Tx (\r) TX TO0 To1 0 0 1 403.6667 416 0 TpTP-43.1894 0 Td0 Tr(<flying-vehicle>) Tx (\r) TX TO0 To1 0 0 1 205 372 0 TpTP-45.8888 0 Td0 Tr(<wheeled-vehicle>) Tx (\r) TX TO0 To1 0 0 1 205 326 0 TpTP-32.3921 0 Td0 Tr(<fuel-truck>) Tx (\r) TX TO0 To1 0 0 1 403.6667 372 0 TpTP-43.1894 0 Td0 Tr(<winged-vehicle>) Tx (\r) TX TO0 To1 0 0 1 305 454.5 0 TpTP-24.2941 0 Td0 Tr(<vehicle>) Tx (\r) TX TO0 To1 0 0 1 305 489.8333 0 TpTP-45.8888 0 Td0 Tr(<physical-object>) Tx (\r) TX TO0 To1 0 0 1 319.6667 335.75 0 TpTP-26.9934 0 Td0 Tr(<aircraft>) Tx (\r) TX TO0 To1 0 0 1 319.6667 299.75 0 TpTP-56.6862 0 Td0 Tr(<commercial-aircraft>) Tx (\r) TX TO0 To1 0 0 1 319.6667 263.75 0 TpTP-16.196 0 Td0 Tr(<B707>) Tx (\r) TX TOu0 R0 G0.65 w305.5 520.3333 m305.5 508.0833 lS0 O0 g1 w303.2621 509.6291 m305.5275 501.1733 l307.7935 509.6291 l303.2621 509.6291 lfUu0 R0 G0.65 w305 485.5833 m305 473.0833 lS0 O0 g1 w302.7621 474.6291 m305.0275 466.1733 l307.2935 474.6291 l302.7621 474.6291 lfUu0 R0 G0.65 w275.5 448.8333 m245 434.3333 lS0 O0 g1 w245.4337 437.0159 m238.7696 431.3392 l247.3794 432.9234 l245.4337 437.0159 lfUu0 R0 G0.65 w338.5 449.8333 m368 434.3333 lS0 O0 g1 w365.5905 433.0739 m374.1297 431.1464 l367.6982 437.0853 l365.5905 433.0739 lfUu0 R0 G0.65 w320 331.25 m320 317.25 lS0 O0 g1 w317.7621 318.7958 m320.0275 310.34 l322.2935 318.7958 l317.7621 318.7958 lfUu0 R0 G0.65 w319 294.75 m319 280.25 lS0 O0 g1 w316.7621 281.7958 m319.0275 273.34 l321.2935 281.7958 l316.7621 281.7958 lfUu0 R0 G0.65 w204 411.375 m204 390.0417 lS0 O0 g1 w201.7621 391.5874 m204.0275 383.1316 l206.2935 391.5874 l201.7621 391.5874 lfUu0 R0 G0.65 w204 365.3333 m204 344 lS0 O0 g1 w201.7621 345.5457 m204.0275 337.0899 l206.2935 345.5457 l201.7621 345.5457 lfUu0 R0 G0.65 w402.75 411.375 m402.75 390.0417 lS0 O0 g1 w400.5121 391.5874 m402.7775 383.1316 l405.0435 391.5874 l400.5121 391.5874 lfUu0 R0 G0.65 w237.3333 364.6667 m307.3333 347.5 lS0 O0 g1 w305.3045 345.6949 m314.0567 345.8823 l306.3833 350.0961 l305.3045 345.6949 lfUuu0 R0 G0.65 w401.3333 366 m331.3718 347.7734 lS0 O0 g1 w332.303 350.3268 m324.6915 346.0027 l333.4454 345.9418 l332.303 350.3268 lfUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 185 504 481 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "298" 312
%%Page: "299" 313
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(18.3 The class precedence list) 404.62 677.67 T
2 F
(299) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Let\325s assume that the) 108 640.67 T
4 10 Q
(define class) 213.07 640.67 T
1 11 Q
( form for) 285.07 640.67 T
4 10 Q
(<aircraft>) 331.06 640.67 T
1 11 Q
( lists) 391.06 640.67 T
4 10 Q
(<winged-) 415.88 640.67 T
-0.3 (vehicle>) 108 626.67 P
1 11 Q
-0.14 ( befor) 156 626.67 P
-0.14 (e) 183.78 626.67 P
4 10 Q
-0.3 (<wheeled-vehicle>) 191.66 626.67 P
1 11 Q
-0.14 ( in its list of dir) 293.66 626.67 P
-0.14 (ect super) 366.16 626.67 P
-0.14 (classes. Now) 409.84 626.67 P
-0.14 (, thr) 471.35 626.67 P
-0.14 (ee) 490.85 626.67 P
(class pr) 108 612.67 T
(ecedence lists for) 144.42 612.67 T
4 10 Q
(<B707>) 229.97 612.67 T
1 11 Q
( ar) 265.97 612.67 T
(e consistent with the pr) 278.36 612.67 T
(ocedur) 391.68 612.67 T
(es that we have) 425.34 612.67 T
(discussed so far:) 108 598.67 T
4 9 Q
(<B707>, <commercial-aircraft>, <aircraft>, <winged-vehicle>,) 108 578 T
(<flying-vehicle>, <wheeled-vehicle>, <ground-vehicle>, <vehicle>,) 118.8 567 T
(<physical-object>, <object>) 118.8 556 T
(<B707>, <commercial-aircraft>, <aircraft>, <winged-vehicle>,) 108 537 T
(<wheeled-vehicle>, <flying-vehicle>, <ground-vehicle>, <vehicle>,) 118.8 526 T
(<physical-object>, <object>) 118.8 515 T
(<B707>, <commercial-aircraft>, <aircraft>, <winged-vehicle>,) 108 496 T
(<wheeled-vehicle>, <ground-vehicle>, <flying-vehicle>, <vehicle>,) 118.8 485 T
(<physical-object>, <object>) 118.8 474 T
1 11 Q
(In this case, Dylan uses an algorithm that tends to keep together) 108 453.67 T
(, in the class pr) 418.55 453.67 T
(e-) 490.83 453.67 T
(cedence list, nonoverlapping super) 108 439.67 T
(class-to-subclass chains.) 277.96 439.67 T
(Look at this situation another way: The algorithm Dylan uses to constr) 135 425.67 T
(uct) 477.7 425.67 T
-0.17 (the class pr) 108 411.67 P
-0.17 (ecedence list in ef) 162.09 411.67 P
-0.17 (fect builds the list one class at a time, fr) 246.78 411.67 P
-0.17 (om highest to) 435.31 411.67 P
(lowest pr) 108 397.67 T
(ecedence. The class pr) 153.41 397.67 T
(ecedence list under constr) 260.46 397.67 T
(uction for) 386.5 397.67 T
4 10 Q
(<B707>) 436.72 397.67 T
1 11 Q
( is) 472.72 397.67 T
(unambiguous fr) 108 383.67 T
(om) 186.14 383.67 T
4 10 Q
(<B707>) 204.61 383.67 T
1 11 Q
( thr) 240.61 383.67 T
(ough) 257.5 383.67 T
4 10 Q
(<winged-vehicle>) 285.4 383.67 T
1 11 Q
(. At that point, Dylan) 381.4 383.67 T
(could insert either) 108 369.67 T
4 10 Q
(<flying-vehicle>) 199.23 369.67 T
1 11 Q
( or) 295.23 369.67 T
4 10 Q
(<wheeled-vehicle>) 311.08 369.67 T
1 11 Q
( into the list. It) 413.08 369.67 T
(chooses the class that has a) 108 355.67 T
0 F
(dir) 241.71 355.67 T
(ect subclass rightmost) 254.34 355.67 T
1 F
( in the partial class pr) 352.11 355.67 T
(ecedence) 456.34 355.67 T
(list that it has alr) 108 341.67 T
(eady constr) 188.93 341.67 T
(ucted. In this case,) 245.08 341.67 T
4 10 Q
(<flying-vehicle>) 336.95 341.67 T
1 11 Q
( has a dir) 432.95 341.67 T
(ect) 477.34 341.67 T
(subclass) 108 327.67 T
4 10 Q
(<winged-vehicle>) 151.04 327.67 T
1 11 Q
(, and) 247.04 327.67 T
4 10 Q
(<wheeled-vehicle>) 273.92 327.67 T
1 11 Q
( has a dir) 375.92 327.67 T
(ect subclass) 420.3 327.67 T
4 10 Q
(<aircraft>) 108 313.67 T
1 11 Q
(. Because) 168 313.67 T
4 10 Q
(<winged-vehicle>) 215.19 313.67 T
1 11 Q
( is rightmost in the partial list alr) 311.19 313.67 T
(eady) 470.23 313.67 T
(constr) 108 299.67 T
(ucted, Dylan chooses) 137.8 299.67 T
4 10 Q
(<flying-vehicle>) 243.52 299.67 T
1 11 Q
( as the next entry in the list. Once) 339.52 299.67 T
-0.34 (that decision has been made, the r) 108 285.67 P
-0.34 (esulting class pr) 270.83 285.67 P
-0.34 (ecedence list must be the \336rst of) 348.39 285.67 P
(the thr) 108 271.67 T
(ee possible or) 140.14 271.67 T
(derings that we listed:) 206.03 271.67 T
4 9 Q
(<B707>, <commercial-aircraft>, <aircraft>, <winged-vehicle>,) 108 251 T
(<flying-vehicle>, <wheeled-vehicle>, <ground-vehicle>, <vehicle>,) 118.8 240 T
(<physical-object>, <object>) 118.8 229 T
1 11 Q
-0.35 (Note that it is not always possible to compute a class pr) 108 208.67 P
-0.35 (ecedence list. Consider the) 373.39 208.67 P
(thr) 108 194.67 T
(ee classes de\336ned as follows:) 122.14 194.67 T
4 9 Q
(define class <a> \050<object>\051) 108 174 T
(...) 118.8 163 T
(end class <a>;) 108 152 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "299" 313
%%Page: "300" 314
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(300) 72 677.67 T
0 F
(Chapter 18) 95.75 677.67 T
(Multiple Inheritance) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define class <b> \050<a>\051) 108 642 T
(...) 118.8 631 T
(end class <b>;) 108 620 T
(define class <c> \050<a>, <b>\051) 108 601 T
(...) 118.8 590 T
(end class <c>;) 108 579 T
1 11 Q
(No class pr) 108 558.67 T
(ecedence list is possible for class) 162.32 558.67 T
4 10 Q
(<c>) 321.93 558.67 T
1 11 Q
( in this example, because the) 339.93 558.67 T
(or) 108 544.67 T
(dering of classes) 118.15 544.67 T
4 10 Q
(<a>) 200.97 544.67 T
1 11 Q
( and) 218.97 544.67 T
4 10 Q
(<b>) 243.1 544.67 T
1 11 Q
( con\337icts in the local pr) 261.1 544.67 T
(ecedence lists for classes) 373.57 544.67 T
4 10 Q
(<b>) 108 530.67 T
1 11 Q
( and) 126 530.67 T
4 10 Q
(<c>) 150.12 530.67 T
1 11 Q
(. Dylan signals an err) 168.12 530.67 T
(or when it tries to compute a class pr) 271.02 530.67 T
(ecedence) 449.93 530.67 T
(list and \336nds that it cannot do so.) 108 516.67 T
(T) 135 502.67 T
(o examine the class pr) 140.73 502.67 T
(ecedence list for a class, we use the) 247.7 502.67 T
4 10 Q
(all-super-) 419.76 502.67 T
(classes) 108 488.67 T
1 11 Q
( function, which r) 150 488.67 T
(eturns the class and its super) 235.99 488.67 T
(classes in the same or) 376.2 488.67 T
(der) 480.21 488.67 T
(as they appear in the class pr) 108 474.67 T
(ecedence list:) 248.4 474.67 T
6 9 Q
(?) 108 454 T
4 F
(all-superclasses \050<B707>\051) 118.8 454 T
6 F
(#[{class <B707>}, {class <commercial-aircraft>}, {class <aircraft>},) 108 443 T
({class <winged-vehicle>}, {class <flying-vehicle>},) 118.8 432 T
({class <wheeled-vehicle>},{class <ground-vehicle>}, {class <vehicle>},) 118.8 421 T
({class <physical-object>}, {class <object>}]) 118.8 410 T
1 11 Q
-0.17 (The details of the algorithm that Dylan uses to constr) 108 389.67 P
-0.17 (uct class pr) 364.15 389.67 P
-0.17 (ecedence lists ar) 418.08 389.67 P
-0.17 (e) 496.16 389.67 P
-0.28 (complicated, and ar) 108 375.67 P
-0.28 (e beyond the scope of this book. For most uncomplicated uses) 203.53 375.67 P
-0.02 (of simple inheritance, the most important points to r) 108 361.67 P
-0.02 (emember about the class pr) 361.76 361.67 P
-0.02 (e-) 495.07 361.67 P
(cedence list ar) 108 347.67 T
(e that the list of dir) 176.5 347.67 T
(ect super) 268.24 347.67 T
(classes in a) 312.05 347.67 T
4 10 Q
(define class) 368.25 347.67 T
1 11 Q
( form is) 440.25 347.67 T
(or) 108 333.67 T
(der) 118.15 333.67 T
(ed, and each dir) 134.29 333.67 T
(ect super) 212.03 333.67 T
(class in the list takes pr) 255.84 333.67 T
(ecedence over all dir) 367.91 333.67 T
(ect) 467.93 333.67 T
(super) 108 319.67 T
(classes that appear later in the list. In general, if mor) 135.32 319.67 T
(e than one super) 388.43 319.67 T
(class) 468.84 319.67 T
(de\336nes a behavior) 108 305.67 T
(, the subclass behaves most like the \336rst super) 196.19 305.67 T
(class in its class) 419.48 305.67 T
(pr) 108 291.67 T
(ecedence list that de\336nes that behavior) 118.76 291.67 T
(.) 306.46 291.67 T
3 15 Q
(18.4  Multiple inheritance and method dispatc) 108 252 T
(h) 373.8 252 T
1 11 Q
-0.09 (Now that we have seen how Dylan constr) 108 231.67 P
-0.09 (ucts the class pr) 310.53 231.67 P
-0.09 (ecedence list, we r) 387.19 231.67 P
-0.09 (eturn) 475.11 231.67 P
(to the issue of how multiple inheritance af) 108 217.67 T
(fects method dispatch. Recall that,) 312.62 217.67 T
(when a generic function is called, Dylan chooses the) 108 203.67 T
2 F
(most speci\336c applicable) 364.04 203.67 T
(method) 108 189.67 T
1 F
( to call. For simplicity) 146.5 189.67 T
(, let\325s consider a generic function that has one spe-) 250.25 189.67 T
-0.27 (cialized parameter) 108 175.67 P
-0.27 (. As we have seen, Dylan chooses which method to dispatch by) 197.29 175.67 P
(comparing the type of the r) 108 161.67 T
(equir) 240.44 161.67 T
(ed) 265.85 161.67 T
2 F
(argument) 280.59 161.67 T
1 F
( to the generic function with the) 328.87 161.67 T
(type of the corr) 108 147.67 T
(esponding specialized) 182.14 147.67 T
2 F
(parameter) 293.05 147.67 T
1 F
( for each method, using the fol-) 343.77 147.67 T
(lowing pr) 108 133.67 T
(ocedur) 155.61 133.67 T
(e:) 189.27 133.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "300" 314
%%Page: "301" 315
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(18.4 Multiple inheritance and method dispatch) 336.98 677.67 T
2 F
(301) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
2 11 Q
0 X
(1.) 117 640.67 T
1 F
-0.22 (Find all the applicable methods. A method is applicable if the r) 135 640.67 P
-0.22 (equir) 438.01 640.67 P
-0.22 (ed ar) 463.42 640.67 P
-0.22 (gu-) 487.59 640.67 P
(ment is an instance of the type of the specialized parameter) 135 626.67 T
(.) 421.92 626.67 T
2 F
(2.) 117 606.67 T
1 F
-0.46 (Sort the applicable methods in or) 135 606.67 P
-0.46 (der of speci\336city) 293.62 606.67 P
-0.46 (. A method is mor) 372.06 606.67 P
-0.46 (e speci\336c) 457.97 606.67 P
(than another if the type of its specialized parameter is a pr) 135 592.67 T
(oper subtype of) 417.76 592.67 T
(the type of the other method\325s specialized parameter) 135 578.67 T
(.) 390.39 578.67 T
2 F
(3.) 117 558.67 T
1 F
(Call the most speci\336c method.) 135 558.67 T
-0.36 (In the pr) 108 538.67 P
-0.36 (esence of multiple inheritance, it is possible to have two or mor) 148.91 538.67 P
-0.36 (e methods) 451.59 538.67 P
-0.27 (that ar) 108 524.67 P
-0.27 (e applicable, but that cannot be sorted by speci\336city because neither param-) 139.2 524.67 P
(eter type is a subtype of the other) 108 510.67 T
(. By following only the r) 269.35 510.67 T
(ules that we have seen) 386.89 510.67 T
(so far) 108 496.67 T
(, Dylan cannot choose either method to call.) 134.11 496.67 T
3 13 Q
(18.4.1  Class precedence and method dispatc) 108 465.33 T
(h) 337.8 465.33 T
1 11 Q
(T) 108 445.67 T
(o see how this pr) 113.73 445.67 T
(oblem for method dispatch can arise, we r) 196.13 445.67 T
(eturn to our airport) 400.04 445.67 T
(example. Recall that we now have two slots r) 108 431.67 T
(epr) 326.91 431.67 T
(esenting vehicle cr) 342.94 431.67 T
(uising speed:) 432.93 431.67 T
4 10 Q
(ground-cruising-speed) 108 417.67 T
1 11 Q
( for) 234 417.67 T
4 10 Q
(<ground-vehicle>) 253.51 417.67 T
1 11 Q
( and) 349.51 417.67 T
4 10 Q
(flying-cruising-speed) 373.64 417.67 T
1 11 Q
(for) 108 403.67 T
4 10 Q
(<flying-vehicle>) 124.76 403.67 T
1 11 Q
(. Let\325s de\336ne a generic function,) 220.76 403.67 T
4 10 Q
(say-cruising-speed) 378.14 403.67 T
1 11 Q
(, to) 486.14 403.67 T
(r) 108 389.67 T
(eport the applicable cr) 112.15 389.67 T
(uising speed for each class:) 220.67 389.67 T
4 9 Q
(define generic say-cruising-speed \050vehicle :: <vehicle>\051;) 108 369 T
5 F
(// Method 1) 108 350 T
4 F
(define method say-cruising-speed \050vehicle :: <flying-vehicle>\051) 108 339 T
(format-out\050"Flying cruising speed: %d\134n", vehicle.flying-cruising-speed\051;) 118.8 328 T
(end method say-cruising-speed;) 108 317 T
5 F
(// Method 2) 108 298 T
4 F
(define method say-cruising-speed \050vehicle :: <ground-vehicle>\051) 108 287 T
(format-out\050"Ground cruising speed: %d\134n", vehicle.ground-cruising-speed\051;) 118.8 276 T
(end method say-cruising-speed;) 108 265 T
5 F
(// Method 3) 108 246 T
4 F
(define method say-cruising-speed \050vehicle :: <vehicle>\051) 108 235 T
(format-out\050"No cruising speed defined for type <vehicle>\134n"\051;) 118.8 224 T
(end method say-cruising-speed;) 108 213 T
1 11 Q
(Now) 108 192.67 T
(, suppose that we call) 131.31 192.67 T
4 10 Q
(say-cruising-speed) 238.57 192.67 T
1 11 Q
( on an instance of) 346.57 192.67 T
4 10 Q
(<B707>) 434.21 192.67 T
1 11 Q
(.) 470.21 192.67 T
(Which method does Dylan call? All thr) 108 178.67 T
(ee methods ar) 297.24 178.67 T
(e applicable. Both method 1) 365.29 178.67 T
(and method 2 ar) 108 164.67 T
(e mor) 187.72 164.67 T
(e speci\336c than is method 3. But Dylan cannot or) 215.6 164.67 T
(der meth-) 447.1 164.67 T
(ods 1 and 2 by speci\336city) 108 150.67 T
(.) 228.81 150.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "301" 315
%%Page: "302" 316
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(302) 72 677.67 T
0 F
(Chapter 18) 95.75 677.67 T
(Multiple Inheritance) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.07 (In this case, Dylan consults the class pr) 135 640.67 P
-0.07 (ecedence list for the class of the ar) 323.47 640.67 P
-0.07 (gu-) 487.59 640.67 P
(ment. In our example, the class of the ar) 108 626.67 T
(gument is) 301.55 626.67 T
4 10 Q
(<B707>) 352.63 626.67 T
1 11 Q
(. The) 388.63 626.67 T
4 10 Q
(<flying-) 415.29 626.67 T
(vehicle>) 108 612.67 T
1 11 Q
( class takes pr) 156 612.67 T
(ecedence over the) 223.06 612.67 T
4 10 Q
(<ground-vehicle>) 312.36 612.67 T
1 11 Q
( class, because) 408.36 612.67 T
4 10 Q
-0.18 (<flying-vehicle>) 108 598.67 P
1 11 Q
-0.08 ( pr) 204 598.67 P
-0.08 (ecedes) 217.43 598.67 P
4 10 Q
-0.18 (<ground-vehicle>) 252.17 598.67 P
1 11 Q
-0.08 ( in the list of dir) 348.17 598.67 P
-0.08 (ect super) 424.76 598.67 P
-0.08 (classes) 468.49 598.67 P
(for) 108 584.67 T
4 10 Q
(<aircraft>) 124.76 584.67 T
1 11 Q
(. Dylan calls method 1, which pr) 184.76 584.67 T
(oduces the following output:) 341.96 584.67 T
6 9 Q
(Flying cruising speed: 368) 108 564 T
1 11 Q
(Note that, if we had happened to list) 108 543.67 T
4 10 Q
(<ground-vehicle>) 288.79 543.67 T
1 11 Q
( befor) 384.79 543.67 T
(e) 412.7 543.67 T
4 10 Q
(<flying-) 420.72 543.67 T
(vehicle>) 108 529.67 T
1 11 Q
( in the list of dir) 156 529.67 T
(ect super) 233 529.67 T
(classes for) 276.81 529.67 T
4 10 Q
(<aircraft>) 329.17 529.67 T
1 11 Q
(, Dylan would have) 389.17 529.67 T
(called method 2, and we would have seen the following output:) 108 515.67 T
6 9 Q
(Ground cruising speed: 45) 108 495 T
1 11 Q
-0.21 (In de\336ning classes of air) 108 474.67 P
-0.21 (craft, we did not intend for) 224.41 474.67 P
4 10 Q
-0.45 (<flying-vehicle>) 357.08 474.67 P
1 11 Q
-0.21 ( character-) 453.08 474.67 P
(istics to override) 108 460.67 T
4 10 Q
(<ground-vehicle>) 191.41 460.67 T
1 11 Q
( characteristics. But for method dispatch to) 287.41 460.67 T
(work in the pr) 108 446.67 T
(esence of multiple inheritance, Dylan must or) 177.51 446.67 T
(der subclasses and) 398.54 446.67 T
(super) 108 432.67 T
(classes whenever it can.) 135.32 432.67 T
-0.34 (How can we change our example to make) 135 418.67 P
4 10 Q
-0.75 (<flying-vehicle>) 338.81 418.67 P
1 11 Q
-0.34 ( behavior add) 434.81 418.67 P
(to, rather than override,) 108 404.67 T
4 10 Q
(<ground-vehicle>) 226.8 404.67 T
1 11 Q
( behavior? By using) 322.8 404.67 T
4 10 Q
(next-method) 421.56 404.67 T
1 11 Q
( in) 487.56 404.67 T
(our) 108 390.67 T
4 10 Q
(say-cruising-speed) 127.73 390.67 T
1 11 Q
( methods for) 235.73 390.67 T
4 10 Q
(<flying-vehicle>) 300.36 390.67 T
1 11 Q
( and) 396.36 390.67 T
4 10 Q
(<ground-) 420.48 390.67 T
(vehicle>) 108 376.67 T
1 11 Q
(, we can r) 156 376.67 T
(eport all applicable kinds of cr) 202.38 376.67 T
(uising speed for any combina-) 349.82 376.67 T
(tion of either or both of those classes) 108 362.67 T
4 10 Q
(.) 285.06 362.67 T
1 11 Q
( T) 291.06 362.67 T
(o make this behavior work, we also) 299.54 362.67 T
(change the) 108 348.67 T
4 10 Q
(say-cruising-speed) 163.33 348.67 T
1 11 Q
( method for) 271.33 348.67 T
4 10 Q
(<vehicle>) 331.29 348.67 T
1 11 Q
(, which will always be) 385.29 348.67 T
(called last, to have no ef) 108 334.67 T
(fect:) 224.35 334.67 T
5 9 Q
(// Method 1) 108 314 T
4 F
(define method say-cruising-speed \050vehicle :: <flying-vehicle>\051) 108 303 T
(format-out\050"Flying cruising speed: %d\134n", vehicle.flying-cruising-speed\051;) 118.8 292 T
(next-method\050\051;) 118.8 281 T
(end method say-cruising-speed;) 108 270 T
5 F
(// Method 2) 108 251 T
4 F
(define method say-cruising-speed \050vehicle :: <ground-vehicle>\051) 108 240 T
(format-out\050"Ground cruising speed: %d\134n", vehicle.ground-cruising-speed\051;) 118.8 229 T
(next-method\050\051;) 118.8 218 T
(end method say-cruising-speed;) 108 207 T
5 F
(// Method 3) 108 188 T
4 F
(define method say-cruising-speed \050vehicle :: <vehicle>\051) 108 177 T
(end method say-cruising-speed;) 108 166 T
1 11 Q
(Recall that, when Dylan decides which method to call, the r) 108 145.67 T
(esult is a list of meth-) 396.73 145.67 T
(ods, sorted by speci\336city) 108 131.67 T
(. When) 227.03 131.67 T
4 10 Q
(say-cruising-speed) 264.35 131.67 T
1 11 Q
( is called on an instance of) 372.35 131.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "302" 316
%%Page: "303" 317
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(18.4 Multiple inheritance and method dispatch) 336.98 677.67 T
2 F
(303) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 10 Q
0 X
(<B707>) 108 640.67 T
1 11 Q
(, the list of methods is sorted in the following or) 144 640.67 T
(der: method 1, method 2,) 376.63 640.67 T
(method 3. Dylan calls method 1. Then, as a r) 108 626.67 T
(esult of the call to) 323.2 626.67 T
4 10 Q
(next-method) 411.61 626.67 T
1 11 Q
( in) 477.61 626.67 T
(method 1, Dylan calls method 2. Finally) 108 612.67 T
(, as a r) 300.09 612.67 T
(esult of the call to) 330.9 612.67 T
4 10 Q
(next-method) 419.31 612.67 T
1 11 Q
( in) 485.31 612.67 T
(method 1, Dylan calls method 3. The output we see is as follows:) 108 598.67 T
6 9 Q
(Flying cruising speed: 368) 108 578 T
(Ground cruising speed: 45) 108 567 T
1 11 Q
-0.33 (Note that, if we called) 108 546.67 P
4 10 Q
-0.73 (say-cruising-speed) 216 546.67 P
1 11 Q
-0.33 ( on an instance of) 324 546.67 P
4 10 Q
-0.73 (<fuel-truck>) 409.97 546.67 P
1 11 Q
-0.33 (, we) 481.97 546.67 P
(would see the following output:) 108 532.67 T
6 9 Q
(Ground cruising speed: 25) 108 512 T
3 13 Q
(18.4.2  Re\336ned rules f) 108 482.33 T
(or method dispatc) 217.42 482.33 T
(h) 309.73 482.33 T
1 11 Q
(In summary) 108 462.67 T
(, the ef) 166.32 462.67 T
(fect of multiple inheritance on method dispatch is to r) 198.56 462.67 T
(e\336ne the) 459.54 462.67 T
(r) 108 448.67 T
(ule for sorting methods accor) 112.26 448.67 T
(ding to speci\336city:) 254.48 448.67 T
(A method is) 135 430.67 T
2 F
(more speci\336c) 197.37 430.67 T
1 F
( than another if the type of its specialized param-) 263.05 430.67 T
-0.18 (eter is a pr) 135 416.67 P
-0.18 (oper subtype of the type of the other method\325s specialized param-) 185.3 416.67 P
-0.37 (eter) 135 402.67 P
-0.37 (. \050For de\336nitions of pr) 152.65 402.67 P
-0.37 (oper subtype, see Section 9.3, page 1) 257.59 402.67 P
-0.37 (1) 431.04 402.67 P
-0.37 (1.\051 If one type) 435.93 402.67 P
(is not a pr) 135 388.67 T
(oper subtype of the other) 183.37 388.67 T
(, a method is mor) 305.28 388.67 T
(e speci\336c if the class of) 389.96 388.67 T
(its specialized parameter pr) 135 374.67 T
(ecedes the class of the other method\325s special-) 269.62 374.67 T
(ized parameter in the class pr) 135 360.67 T
(ecedence list of the ar) 278.11 360.67 T
(gument to the generic) 382.3 360.67 T
(function. Otherwise, the methods ar) 135 346.67 T
(e) 310.1 346.67 T
2 F
(unordered) 318.12 346.67 T
1 F
( for that parameter) 370.67 346.67 T
(.) 461.34 346.67 T
-0.18 (If the generic function has mor) 108 326.67 P
-0.18 (e than one r) 256.19 326.67 P
-0.18 (equir) 312.89 326.67 P
-0.18 (ed ar) 338.3 326.67 P
-0.18 (gument, Dylan uses this aug-) 362.51 326.67 P
(mented r) 108 312.67 T
(ule for determining speci\336city in the usual way for sorting applicable) 151.97 312.67 T
(methods with mor) 108 298.67 T
(e than one ar) 198.09 298.67 T
(gument. In essence, Dylan or) 260.82 298.67 T
(ders the applicable) 401.46 298.67 T
(methods separately for each r) 108 284.67 T
(equir) 251.64 284.67 T
(ed ar) 277.05 284.67 T
(gument, and then constr) 301.43 284.67 T
(ucts an overall) 420.23 284.67 T
-0.22 (or) 108 270.67 P
-0.22 (dering by comparing the separate sorted lists. In the overall method or) 118.15 270.67 P
-0.22 (dering, a) 458.63 270.67 P
(method is mor) 108 256.67 T
(e speci\336c than another if it satis\336es two constraints:) 178.93 256.67 T
2 F
(1.) 117 236.67 T
1 F
(The method is) 135 236.67 T
0 F
(no less speci\336c) 207.23 236.67 T
1 F
( than the other method for) 271.5 236.67 T
0 F
(all) 402.46 236.67 T
1 F
( r) 413.46 236.67 T
(equir) 420.36 236.67 T
(ed parame-) 445.77 236.67 T
(ters. \050The two methods might have the same types for some parameters.\051) 135 222.67 T
2 F
(2.) 117 202.67 T
1 F
(The method is) 135 202.67 T
0 F
(mor) 207.23 202.67 T
(e speci\336c) 224.75 202.67 T
1 F
( than the other method for) 263.66 202.67 T
0 F
(some) 394.62 202.67 T
1 F
( r) 416.62 202.67 T
(equir) 423.52 202.67 T
(ed) 448.93 202.67 T
(parameter) 135 188.67 T
(.) 184.32 188.67 T
-0.15 (Note that one method might be mor) 108 168.67 P
-0.15 (e speci\336c than another for one parameter) 282.29 168.67 P
-0.15 (, but) 479.75 168.67 P
(less speci\336c for another parameter) 108 154.67 T
(. These two methods ar) 273.81 154.67 T
(e) 386.68 154.67 T
2 F
(ambiguous) 394.7 154.67 T
1 F
( in) 450.92 154.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "303" 317
%%Page: "304" 318
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(304) 72 677.67 T
0 F
(Chapter 18) 95.75 677.67 T
(Multiple Inheritance) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(speci\336city and cannot be or) 108 640.67 T
(der) 240.98 640.67 T
(ed. If the method-dispatch pr) 257.12 640.67 T
(ocedur) 399.17 640.67 T
(e cannot \336nd) 432.83 640.67 T
(any method that is mor) 108 626.67 T
(e speci\336c than all other methods, Dylan signals an err) 221.52 626.67 T
(or) 481.36 626.67 T
(.) 490.9 626.67 T
3 15 Q
(18.5  Use of m) 108 196 T
(ultiple inheritance) 190.5 196 T
1 11 Q
-0.02 (Multiple inheritance is likely to be most useful when you can separate the charac-) 108 175.67 P
(teristics of objects into) 108 161.67 T
2 F
(orthogonal) 218.33 161.67 T
1 F
( sets, in which the characteristics of one set do) 273.34 161.67 T
(not depend on the characteristics of other sets. If you can de\336ne a class to r) 108 147.67 T
(epr) 470.41 147.67 T
(e-) 486.43 147.67 T
-0.1 (sent each set of characteristics, you can use multiple inheritance to build complex) 108 133.67 P
2 F
(Comparison with C++:) 141 592.67 T
1 F
( Multiple inheritance in C++ is dif) 255.46 592.67 T
(fer) 420.51 592.67 T
(ent fr) 433.59 592.67 T
(om) 459.41 592.67 T
(multiple inheritance in Dylan. In C++, unless a base class is virtual, it) 141 578.67 T
(is inherited multiple times if ther) 141 564.67 T
(e is mor) 301.13 564.67 T
(e than one path to the base) 339.63 564.67 T
(class as a r) 141 550.67 T
(esult of multiple inheritance. In Dylan, all base classes ar) 191.97 550.67 T
(e) 466.88 550.67 T
(ef) 141 536.67 T
(fectively virtual.) 149.73 536.67 T
(C++ has nothing like Dylan\325s class pr) 168 522.67 T
(ecedence list for deter-) 349.23 522.67 T
(mining the pr) 141 508.67 T
(ecedence of two super) 207.55 508.67 T
(classes, neither of which is) 315.53 508.67 T
(derived fr) 141 494.67 T
(om the other) 189.3 494.67 T
(. Ther) 250.57 494.67 T
(e is no implicit or) 278.63 494.67 T
(dering of virtual) 362.92 494.67 T
(members de\336ned for such classes. C++ also has nothing like) 141 480.67 T
(Dylan\325s) 141 466.67 T
4 10 Q
(next-method) 181.21 466.67 T
1 11 Q
( for invoking the next most speci\336c virtual) 247.21 466.67 T
(function. A C++ pr) 141 452.67 T
(ogrammer must often explicitly pr) 233.22 452.67 T
(ovide the) 400.46 452.67 T
(sort of method dispatch and combination that Dylan implements) 141 438.67 T
(automatically) 141 424.67 T
(.) 206.41 424.67 T
(For examples of similar Dylan and C++ pr) 168 410.67 T
(ograms that use) 373.36 410.67 T
(multiple inheritance, see Section B.2, page 386.) 141 396.67 T
2 F
(Comparison with Java:) 141 363.67 T
1 F
( Java formalizes the concept of a) 255.58 363.67 T
2 F
(protocol) 414.83 363.67 T
1 F
-0.42 (with its) 141 349.67 P
2 F
-0.42 (interfaces) 179.46 349.67 P
1 F
-0.42 (. An interface is like an abstract class and a set of) 228.34 349.67 P
(r) 141 335.67 T
(equir) 145.15 335.67 T
(ed generic functions. A class that) 170.56 335.67 T
2 F
(implements) 333.27 335.67 T
1 F
( an interface) 393.14 335.67 T
-0.36 (must de\336ne methods for each of the generic functions speci\336ed by) 141 321.67 P
(that interface. In a sense, an interface is like a speci\336cation for) 141 307.67 T
(multiple inheritance, without the implementation. A class that) 141 293.67 T
(implements an interface is consider) 141 279.67 T
(ed to be of the interface type,) 312.81 279.67 T
-0.13 (but it must implement all the behaviors dir) 141 265.67 P
-0.13 (ectly) 348.93 265.67 P
-0.13 (, rather than inher-) 370.76 265.67 P
-0.04 (iting them fr) 141 251.67 P
-0.04 (om the interface \321 which may mean that code has to) 201.71 251.67 P
(be duplicated, rather than shar) 141 237.67 T
(ed and r) 290.48 237.67 T
(eused.) 330.74 237.67 T
135 605.88 135 389.13 2 L
V
0.25 H
0 Z
N
486 605.88 486 389.13 2 L
V
N
134.88 606 486.12 606 2 L
V
N
134.88 389 486.12 389 2 L
V
N
135 376.88 135 230.13 2 L
V
N
486 376.88 486 230.13 2 L
V
N
134.88 377 486.12 377 2 L
V
N
134.88 230 486.12 230 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "304" 318
%%Page: "305" 319
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(18.5 Use of multiple inheritance) 393.35 677.67 T
2 F
(305) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(classes with dif) 108 640.67 T
(fer) 182.1 640.67 T
(ent combinations of characteristics. W) 195.18 640.67 T
(e gave a glimpse of how) 378.4 640.67 T
(to cr) 108 626.67 T
(eate such a design by starting to segr) 129.37 626.67 T
(egate characteristics of \337ying and) 308.09 626.67 T
(gr) 108 612.67 T
(ound vehicles, and then noting that certain vehicles, like such as air) 118.26 612.67 T
(craft, can) 445.62 612.67 T
(combine both sets of characteristics.) 108 598.67 T
-0.31 (Another appr) 135 584.67 P
-0.31 (oach that can be useful for various applications is to cr) 200.88 584.67 P
-0.31 (eate one) 461.81 584.67 P
(or mor) 108 570.67 T
(e) 140.97 570.67 T
2 F
(base) 148.99 570.67 T
1 F
( super) 171.59 570.67 T
(classes, which de\336ne common characteristics of subclasses,) 201.66 570.67 T
(and a number of) 108 556.67 T
2 F
(mix-in) 191.24 556.67 T
1 F
( classes, each of which adds a set of orthogonal character-) 224.23 556.67 T
-0.41 (istics. A mix-in class is like an addition, such as chocolate chips or nuts, that might) 108 542.67 P
(be mixed into an ice-cr) 108 528.67 T
(eam base. Another way to think about this appr) 218.08 528.67 T
(oach is to) 450.01 528.67 T
(imagine the base class as a noun and the mix-in classes as adjectives that modify) 108 514.67 T
-0.03 (or specialize the noun. Y) 108 500.67 P
-0.03 (ou can then constr) 226.33 500.67 P
-0.03 (uct concr) 315.39 500.67 P
-0.03 (ete subclasses by using multi-) 359.54 500.67 P
(ple inheritance. For each concr) 108 486.67 T
(ete subclass, one or mor) 256.14 486.67 T
(e mix-in classes typically) 372.2 486.67 T
(pr) 108 472.67 T
(ecede a single base class in the list of super) 118.76 472.67 T
(classes.) 326.21 472.67 T
3 13 Q
(18.5.1  Use of a mix-in c) 108 441.33 T
(lass) 228.09 441.33 T
1 11 Q
(In our airport example, four classes now de\336ne slots that serve as names or) 108 421.67 T
(strings that r) 108 407.67 T
(epr) 169.7 407.67 T
(esent identi\336ers for objects:) 185.73 407.67 T
4 9 Q
(define abstract class <vehicle-storage> \050<physical-object>\051) 108 387 T
(slot identifier :: <string>, required-init-keyword: id:;) 118.8 376 T
(...) 118.8 365 T
(end class <vehicle-storage>;) 108 354 T
(define abstract class <vehicle> \050<physical-object>\051) 108 335 T
(slot vehicle-id :: <string>, required-init-keyword: id:;) 118.8 324 T
(...) 118.8 313 T
(end class <vehicle>;) 108 302 T
(define class <airport> \050<physical-object>\051) 108 283 T
(slot name :: <string>, init-keyword: name:;) 118.8 272 T
(...) 118.8 261 T
(end class <airport>;) 108 250 T
(define class <airline> \050<object>\051) 108 231 T
(slot name :: <string>, required-init-keyword: name:;) 118.8 220 T
(...) 118.8 209 T
(end class <airline>;) 108 198 T
1 11 Q
(Our example would be mor) 108 177.67 T
(e uni\336ed and maintainable if we had a single r) 242.82 177.67 T
(epr) 468.33 177.67 T
(e-) 484.35 177.67 T
(sentation for these identi\336ers.) 108 163.67 T
(Ther) 135 149.67 T
(e ar) 157.56 149.67 T
(e several ways that we could impr) 175.23 149.67 T
(ove the example using single) 341.55 149.67 T
(inheritance. One way to do that in principle would be to de\336ne a) 108 135.67 T
4 10 Q
(name) 425.28 135.67 T
1 11 Q
( slot in a) 449.28 135.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "305" 319
%%Page: "306" 320
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(306) 72 677.67 T
0 F
(Chapter 18) 95.75 677.67 T
(Multiple Inheritance) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(common super) 108 640.67 T
(class. In this case, we cannot use this solution, because the only) 180.8 640.67 T
(common super) 108 626.67 T
(class is the built-in class) 180.8 626.67 T
4 10 Q
(<object>) 299.47 626.67 T
1 11 Q
(. This appr) 347.47 626.67 T
(oach would work if) 399.6 626.67 T
(all named classes inherited fr) 108 612.67 T
(om) 249.56 612.67 T
4 10 Q
(<physical-object>) 268.03 612.67 T
1 11 Q
( \321 we could add a) 370.03 612.67 T
4 10 Q
(name) 463.86 612.67 T
1 11 Q
(slot to) 108 598.67 T
4 10 Q
(<physical-object>) 140.55 598.67 T
1 11 Q
(. But then all subclasses of) 242.55 598.67 T
4 10 Q
(<physical-object>) 372.2 598.67 T
1 11 Q
(would inherit the) 108 584.67 T
4 10 Q
(name) 195.65 584.67 T
1 11 Q
( slot, whether or not those subclasses need names. Some) 219.65 584.67 T
-0.48 (objects might be inappr) 108 570.67 P
-0.48 (opriately named, and those instances would be lar) 220.71 570.67 P
-0.48 (ger than) 461.84 570.67 P
(they need to be.) 108 556.67 T
(Another appr) 135 542.67 T
(oach would be to de\336ne two new subclasses to contain the) 201.19 542.67 T
4 10 Q
(name) 108 528.67 T
1 11 Q
( slot: a) 132 528.67 T
4 10 Q
(<named-object>) 165.96 528.67 T
1 11 Q
( subclass of) 249.96 528.67 T
4 10 Q
(<object>) 308.17 528.67 T
1 11 Q
(, and a) 356.17 528.67 T
4 10 Q
(<named-physical-) 391.29 528.67 T
(object>) 108 514.67 T
1 11 Q
( subclass of) 150 514.67 T
4 10 Q
(<physical-object>) 208.21 514.67 T
1 11 Q
(. W) 310.21 514.67 T
(e would then use) 325.7 514.67 T
4 10 Q
(<named-physi-) 411.93 514.67 T
(cal-object>) 108 500.67 T
1 11 Q
( as the super) 174 500.67 T
(class for) 234.99 500.67 T
4 10 Q
(<vehicle-storage>) 277.42 500.67 T
1 11 Q
(,) 379.42 500.67 T
4 10 Q
(<vehicle>) 384.92 500.67 T
1 11 Q
(, and) 438.92 500.67 T
4 10 Q
(<air-) 465.8 500.67 T
-0.69 (port>) 108 486.67 P
1 11 Q
-0.31 (, and we would use) 138 486.67 P
4 10 Q
-0.69 (<named-object>) 234.3 486.67 P
1 11 Q
-0.31 ( as the super) 318.3 486.67 P
-0.31 (class for) 378.35 486.67 P
4 10 Q
-0.69 (<airline>) 420.15 486.67 P
1 11 Q
-0.31 (. That) 474.15 486.67 P
(would work, too, although the) 108 472.67 T
4 10 Q
(name) 259.33 472.67 T
1 11 Q
( slot would be de\336ned in two classes, rather) 283.33 472.67 T
(than in one.) 108 458.67 T
(Suppose, however) 135 444.67 T
(, that we later \336nd that some, but not all, subclasses need) 223.93 444.67 T
(another attribute, such as a unique identi\336er) 108 430.67 T
(. Per) 322.93 430.67 T
(haps) 344.49 430.67 T
4 10 Q
(<airport>,) 370.42 430.67 T
(<vehicle>) 433.17 430.67 T
1 11 Q
(,) 487.17 430.67 T
(and) 108 416.67 T
4 10 Q
(<airline>) 129.37 416.67 T
1 11 Q
( need unique identi\336ers, but) 183.37 416.67 T
4 10 Q
(<vehicle-storage>) 323.45 416.67 T
1 11 Q
( does not.) 425.45 416.67 T
(Extending this model, we might have to de\336ne new classes) 108 402.67 T
4 10 Q
(<unique-object>) 397.55 402.67 T
1 11 Q
(,) 487.55 402.67 T
4 10 Q
(<unique-named-object>) 108 388.67 T
1 11 Q
(,) 234 388.67 T
4 10 Q
(<unique-physical-object>) 239.5 388.67 T
1 11 Q
(, and) 383.5 388.67 T
4 10 Q
(<unique-named-) 410.37 388.67 T
(physical-object>) 108 374.67 T
1 11 Q
(. W) 204 374.67 T
(e now have eight base classes to r) 219.49 374.67 T
(epr) 381.65 374.67 T
(esent the possible) 397.68 374.67 T
(combinations of name and unique identi\336er) 108 360.67 T
(. If we add a thir) 320.71 360.67 T
(d attribute, we end) 400.8 360.67 T
-0.1 (up with many mor) 108 346.67 P
-0.1 (e classes. W) 199.14 346.67 P
-0.1 (e soon have an unmanageable pr) 255.29 346.67 P
-0.1 (oliferation of base) 414.5 346.67 P
(classes.) 108 332.67 T
(Multiple inheritance pr) 135 318.67 T
(ovides a solution to these pr) 247.83 318.67 T
(oblems. W) 384.39 318.67 T
(e can de\336ne a) 434.82 318.67 T
(mix-in class,) 108 304.67 T
4 10 Q
(name-mix-in) 171.02 304.67 T
1 11 Q
(, whose only purpose is to contain the) 237.02 304.67 T
4 10 Q
(name) 423.84 304.67 T
1 11 Q
( slot:) 447.84 304.67 T
4 9 Q
(define abstract class <name-mix-in> \050<object>\051) 108 284 T
(slot name :: <string>, init-keyword: name:;) 118.8 273 T
(end class <name-mix-in>;) 108 262 T
1 11 Q
(Now) 108 241.67 T
(, we r) 131.31 241.67 T
(ede\336ne our) 158.15 241.67 T
4 10 Q
(<vehicle-storage>) 216.22 241.67 T
1 11 Q
(,) 318.22 241.67 T
4 10 Q
(<vehicle>) 323.72 241.67 T
1 11 Q
(,) 377.72 241.67 T
4 10 Q
(<airport>) 383.22 241.67 T
1 11 Q
(, and) 437.22 241.67 T
4 10 Q
(<air-) 464.09 241.67 T
(line>) 108 227.67 T
1 11 Q
( classes to have two dir) 138 227.67 T
(ect super) 250.41 227.67 T
(classes:) 294.22 227.67 T
4 10 Q
(<name-mix-in>) 332.57 227.67 T
1 11 Q
(, and either) 410.57 227.67 T
4 10 Q
(<object>) 108 213.67 T
1 11 Q
( or) 156 213.67 T
4 10 Q
(<physical-object>) 171.85 213.67 T
1 11 Q
(:) 273.85 213.67 T
4 9 Q
(define abstract class <vehicle-storage> \050<name-mix-in>, <physical-object>\051) 108 193 T
5 F
(// identifier slot removed) 118.8 182 T
4 F
(required keyword name:;) 118.8 171 T
(...) 118.8 160 T
(end class <vehicle-storage>;) 108 149 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "306" 320
%%Page: "307" 321
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(18.5 Use of multiple inheritance) 393.35 677.67 T
2 F
(307) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define abstract class <vehicle> \050<name-mix-in>, <physical-object>\051) 108 642 T
5 F
(// vehicle-id slot removed) 118.8 631 T
4 F
(required keyword name:;) 118.8 620 T
(...) 118.8 609 T
(end class <vehicle>;) 108 598 T
(define class <airport> \050<name-mix-in>, <physical-object>\051) 108 579 T
5 F
(// name slot removed) 118.8 568 T
4 F
(keyword name:, init-value: "Anonymous Airport";) 118.8 557 T
(...) 118.8 546 T
(end class <airport>;) 108 535 T
(define class <airline> \050<name-mix-in>, <object>\051) 108 516 T
5 F
(// name slot removed) 118.8 505 T
4 F
(required keyword name:;) 118.8 494 T
(...) 118.8 483 T
(end class <airline>;) 108 472 T
1 11 Q
-0.4 (W) 108 451.67 P
-0.4 (e use the) 117.99 451.67 P
4 10 Q
-0.87 (required keyword) 162.13 451.67 P
1 11 Q
-0.4 ( option to make the) 257.25 451.67 P
4 10 Q
-0.87 (name:) 352.26 451.67 P
1 11 Q
-0.4 ( keywor) 382.26 451.67 P
-0.4 (d r) 421.44 451.67 P
-0.4 (equir) 434.65 451.67 P
-0.4 (ed when) 460.06 451.67 P
(we cr) 108 437.67 T
(eate an instance of) 134.22 437.67 T
4 10 Q
(<vehicle-storage>) 226.33 437.67 T
1 11 Q
(,) 328.33 437.67 T
4 10 Q
(<vehicle>) 333.83 437.67 T
1 11 Q
(, or) 387.83 437.67 T
4 10 Q
(<airline>) 406.43 437.67 T
1 11 Q
(. If we) 460.43 437.67 T
(pr) 108 423.67 T
(ovided an) 118.76 423.67 T
4 10 Q
(init-value:) 170.29 423.67 T
1 11 Q
( or) 236.29 423.67 T
4 10 Q
(init-function:) 252.14 423.67 T
1 11 Q
( for the) 336.14 423.67 T
4 10 Q
(name) 373.67 423.67 T
1 11 Q
( slot in the de\336nition) 397.67 423.67 T
(of) 108 409.67 T
4 10 Q
(<name-mix-in>) 120.42 409.67 T
1 11 Q
(, Dylan would ignor) 198.42 409.67 T
(e that option when we cr) 296.76 409.67 T
(eated an instance) 417.39 409.67 T
(of any of these subclasses.) 108 395.67 T
(W) 135 381.67 T
(e also use the) 144.99 381.67 T
4 10 Q
(keyword) 212.45 381.67 T
1 11 Q
( option with an) 254.45 381.67 T
4 10 Q
(init-value:) 331.53 381.67 T
1 11 Q
( to pr) 397.53 381.67 T
(ovide a default) 423.38 381.67 T
(initial value for the) 108 367.67 T
4 10 Q
(name:) 203.38 367.67 T
1 11 Q
( initialization ar) 233.38 367.67 T
(gument and for the) 310.22 367.67 T
4 10 Q
(name) 406.83 367.67 T
1 11 Q
( slot for) 430.83 367.67 T
(instances of) 108 353.67 T
4 10 Q
(<airport>) 167.74 353.67 T
1 11 Q
(.) 221.74 353.67 T
(Of course, we also have to change other code in our example to use the) 135 339.67 T
(name) 108 325.67 T
4 10 Q
(name) 137.63 325.67 T
1 11 Q
( and the init keywor) 161.63 325.67 T
(d) 259.73 325.67 T
4 10 Q
(name:) 269.2 325.67 T
1 11 Q
( when r) 299.2 325.67 T
(eferring to the slot.) 336.1 325.67 T
(Multiple inheritance pr) 135 311.67 T
(ovides several advantages in solving the name) 247.83 311.67 T
(pr) 108 297.67 T
(oblem:) 118.76 297.67 T
2 F
(1.) 117 277.67 T
1 F
(W) 135 277.67 T
(e localize in a single class the characteristic of having a name.) 144.99 277.67 T
2 F
(2.) 117 257.67 T
1 F
(Subclasses can still customize aspects of the name attribute, such as what) 135 257.67 T
(that attribute\325s initial value is, and whether or not it is r) 135 243.67 T
(equir) 403.77 243.67 T
(ed.) 429.18 243.67 T
2 F
(3.) 117 223.67 T
1 F
(W) 135 223.67 T
(e can give a subclass a name attribute without r) 144.99 223.67 T
(ede\336ning any of its) 375.3 223.67 T
(super) 135 209.67 T
(classes.) 162.32 209.67 T
2 F
(4.) 117 189.67 T
1 F
(The only subclasses that have a name attribute ar) 135 189.67 T
(e those for which that is) 373.64 189.67 T
(appr) 135 175.67 T
(opriate.) 157.87 175.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "307" 321
%%Page: "308" 322
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(308) 72 677.67 T
0 F
(Chapter 18) 95.75 677.67 T
(Multiple Inheritance) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(18.5.2  Pr) 108 639.33 T
(os and cons of m) 154.63 639.33 T
(ultiple inheritance) 242.11 639.33 T
1 11 Q
(Ther) 108 619.67 T
(e is debate about the value of using multiple inheritance in object-oriented) 130.56 619.67 T
(pr) 108 605.67 T
(ograms. Some people think that multiple inheritance in appr) 118.76 605.67 T
(opriate applica-) 412.71 605.67 T
(tions can impr) 108 591.67 T
(ove modularity and can make it easier to r) 177.82 591.67 T
(euse code. Other people) 383.11 591.67 T
(think that the complications and pitfalls of multiple inheritance make pr) 108 577.67 T
(ogram) 458.55 577.67 T
(maintenance dif) 108 563.67 T
(\336cult, and thus outweigh the possible advantages.) 186.26 563.67 T
(W) 135 549.67 T
(e have pr) 144.99 549.67 T
(esented examples of multiple inheritance that show that it can) 189.9 549.67 T
(have advantages when you can separate object characteristics into nonoverlap-) 108 535.67 T
-0.28 (ping sets. Multiple inheritance then lets you cr) 108 521.67 P
-0.28 (eate complex classes using only the) 331.32 521.67 P
(characteristics that you need, without a pr) 108 507.67 T
(oliferation of base classes.) 312.5 507.67 T
(Multiple inheritance does complicate method dispatch and impose addi-) 135 493.67 T
(tional r) 108 479.67 T
(equir) 142.79 479.67 T
(ements on an application. It is essential to be awar) 168.2 479.67 T
(e of dependencies) 411.8 479.67 T
(on subclass\320super) 108 465.67 T
(class or) 196.27 465.67 T
(dering, particularly in method selection and slot initial-) 232.09 465.67 T
(ization. In general, classes that ar) 108 451.67 T
(e intended to be multiple dir) 268.42 451.67 T
(ect super) 407.44 451.67 T
(classes of) 451.26 451.67 T
(the same subclass should depend on one another as little as possible. Pr) 108 437.67 T
(otocols) 455.52 437.67 T
(involving multiple inheritance may need mor) 108 423.67 T
(e documentation than do those) 329.44 423.67 T
(involving single inheritance.) 108 409.67 T
3 15 Q
(18.6  Summar) 108 370 T
(y) 188.12 370 T
1 11 Q
(In this chapter) 108 349.67 T
(, we cover) 177.24 349.67 T
(ed the following:) 226.46 349.67 T
(\245) 117 329.67 T
(W) 135 329.67 T
(e intr) 144.99 329.67 T
(oduced the concept of multiple inheritance: inheritance fr) 170.34 329.67 T
(om mor) 449.29 329.67 T
(e) 487.63 329.67 T
(than one dir) 135 315.67 T
(ect super) 194.14 315.67 T
(class.) 237.95 315.67 T
(\245) 117 295.67 T
(W) 135 295.67 T
(e discussed the implications of multiple inheritance for slot initialization.) 144.99 295.67 T
(\245) 117 275.67 T
-0.09 (W) 135 275.67 P
-0.09 (e described how Dylan constr) 144.99 275.67 P
-0.09 (ucts the class pr) 289.16 275.67 P
-0.09 (ecedence list for a class. The) 365.84 275.67 P
(class pr) 135 261.67 T
(ecedence list is an or) 171.42 261.67 T
(dering of a class and all its super) 270.96 261.67 T
(classes.) 429.65 261.67 T
(\245) 117 241.67 T
(W) 135 241.67 T
(e showed how Dylan uses class pr) 144.99 241.67 T
(ecedence lists in sorting methods by) 311.21 241.67 T
(speci\336city when a generic function is called.) 135 227.67 T
(\245) 117 207.67 T
(W) 135 207.67 T
(e developed extensions of the airport example using multiple inheritance.) 144.99 207.67 T
(\245) 117 187.67 T
(W) 135 187.67 T
(e discussed advantages and disadvantages of using multiple inheritance.) 144.99 187.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "308" 322
%%Page: "309" 323
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(309) 298.88 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(19) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(19) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Performance and Flexibility) 110 566.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
(This chapter covers the advanced topic of balancing performance and \337exibility) 108 424.67 T
-0.45 (in a Dylan pr) 108 410.67 P
-0.45 (ogram. If you ar) 170.51 410.67 P
-0.45 (e writing a stand-alone pr) 247.62 410.67 P
-0.45 (ogram and ar) 371.31 410.67 P
-0.45 (e comfortable) 435.87 410.67 P
-0.1 (with using type constraints as you would in a static language, you do not need to) 108 396.67 P
-0.25 (r) 108 382.67 P
-0.25 (ead this chapter car) 112.15 382.67 P
-0.25 (efully) 206.11 382.67 P
-0.25 (. Y) 232.97 382.67 P
-0.25 (ou may want to skim the chapter) 244.54 382.67 P
-0.25 (, so that you have an) 402.48 382.67 P
-0.04 (idea of what options ar) 108 368.67 P
-0.04 (e available to you in the futur) 219.98 368.67 P
-0.04 (e for lar) 363.04 368.67 P
-0.04 (ger or mor) 400.59 368.67 P
-0.04 (e complex) 451.95 368.67 P
(pr) 108 354.67 T
(ojects.) 118.76 354.67 T
(W) 135 340.67 T
(e start out by describing what Dylan\325s execution model is, and what we) 144.99 340.67 T
(mean by an) 108 326.67 T
0 F
(ef\336ciency model) 167.24 326.67 T
1 F
(. The ef) 237.32 326.67 T
(\336ciency model can help a pr) 272.71 326.67 T
(ogrammer to) 409.31 326.67 T
(choose the appr) 108 312.67 T
(opriate language featur) 184.86 312.67 T
(es for a particular pr) 298.41 312.67 T
(oblem. W) 397.42 312.67 T
(e also) 443.18 312.67 T
(explor) 108 298.67 T
(e advanced featur) 138.91 298.67 T
(es of Dylan that will let the pr) 225.69 298.67 T
(ogrammer negotiate with) 370.2 298.67 T
(the compiler to trade away part of the \337exibility of the execution model for) 108 284.67 T
(enhanced performance.) 108 270.67 T
3 15 Q
(19.1  Ex) 108 231 T
(ecution model) 153.72 231 T
1 11 Q
(Dylan is a dynamic language \321 everything in Dylan is de\336ned in terms of a) 108 210.67 T
(dynamic) 108 196.67 T
2 F
(execution model) 153.29 196.67 T
1 F
(. As we saw in Section 5.5, page 63, the execution) 236.08 196.67 T
(model of how a method is chosen when a generic function is called with a partic-) 108 182.67 T
-0.43 (ular set of ar) 108 168.67 P
-0.43 (guments is highly dynamic: the ar) 167.48 168.67 P
-0.43 (guments ar) 330.96 168.67 P
-0.43 (e evaluated; the types of) 385.31 168.67 P
(the ar) 108 154.67 T
(guments ar) 135.65 154.67 T
(e determined; the applicable methods ar) 190.43 154.67 T
(e found and sorted) 386.02 154.67 T
-0.46 (accor) 108 140.67 P
-0.46 (ding to speci\336city; and, \336nally) 133.42 140.67 P
-0.46 (, the most speci\336c, applicable method is called.) 277.65 140.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "309" 323
%%Page: "310" 324
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(310) 72 677.67 T
0 F
(Chapter 19) 95.75 677.67 T
(Performance and Flexibility) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(This model implies that values and types can change, and that methods can be) 108 640.67 T
(added right up until the generic function is called, and any of these changes still) 108 626.67 T
(have an ef) 108 612.67 T
(fect on which method is ultimately chosen. This dynamism \321 the) 157.52 612.67 T
(model that value, number) 108 598.67 T
(, and type of ar) 233.43 598.67 T
(guments; r) 306.7 598.67 T
(eturn values; applicable) 358.73 598.67 T
(method; and method choice and execution ar) 108 584.67 T
(e all determined at the last possible) 327.11 584.67 T
(moment \321 is what gives the Dylan language its power) 108 570.67 T
(.) 374.2 570.67 T
(Y) 135 556.67 T
(ou might think that this dynamism also means that Dylan must perform) 141.32 556.67 T
(poorly) 108 542.67 T
(, because the only way to obey its execution model is to do a lot of extra) 139.06 542.67 T
(computation at r) 108 528.67 T
(un time. But not every pr) 188.97 528.67 T
(ogram makes use of dynamic featur) 311.18 528.67 T
(es.) 485.44 528.67 T
-0.27 (Most functions accept and r) 108 514.67 P
-0.27 (eturn a \336xed number of values \050often they r) 241.51 514.67 P
-0.27 (eturn only) 451.09 514.67 P
(one\051, and those values ar) 108 500.67 T
(e often of a \336xed or constrained type. Even pr) 228.77 500.67 T
(ograms) 450.23 500.67 T
(that do use dynamism will not r) 108 486.67 T
(equir) 263.82 486.67 T
(e it everywher) 289.23 486.67 T
(e. So, a good Dylan compiler) 358.99 486.67 T
-0.4 (will identify the static parts of a pr) 108 472.67 P
-0.4 (ogram, and will compile them statically \050that is,) 272.71 472.67 P
-0.06 (in a manner that is competitive with what a compiler of any good static language) 108 458.67 P
(would do\051. T) 108 444.67 T
(o do that, the compiler uses a technique called) 170.11 444.67 T
2 F
(partial evaluation) 397.21 444.67 T
1 F
( \321) 486.11 444.67 T
(operations that can be evaluated at compile time \050that the compiler knows can) 108 430.67 T
-0.14 (have only one outcome\051, will be done at compile time. Thus, even though the pr) 108 416.67 P
-0.14 (o-) 494.33 416.67 P
(grammer can continue to think and pr) 108 402.67 T
(ogram in terms of Dylan\325s dynamic execu-) 293.35 402.67 T
(tion model, the compiler will generate ef) 108 388.67 T
(\336cient code when it can show that it can) 305.11 388.67 T
(obtain the same r) 108 374.67 T
(eturn value without carrying out the full pr) 191.58 374.67 T
(ocess at r) 402.32 374.67 T
(un time.) 446.65 374.67 T
(For small pr) 135 360.67 T
(ojects \321 pr) 194 360.67 T
(ojects that can \336t in a single library \321 the compiler) 248.24 360.67 T
(can analyze the entir) 108 346.67 T
(e pr) 208.39 346.67 T
(oject and generate code that is competitive with any) 227.16 346.67 T
-0.06 (static language. If type constraints ar) 108 332.67 P
-0.06 (e used for all module variables, slots, param-) 286.21 332.67 P
(eters, and r) 108 318.67 T
(eturn values \050as they would be in a static language\051, the compiler can) 162.15 318.67 T
(generate code equivalent to that generated by compilers for static languages. In) 108 304.67 T
(the r) 108 290.67 T
(emainder of this chapter) 130.15 290.67 T
(, we examine how we can use type constraints,) 248.13 290.67 T
(limited types, open classes, open generic functions, domain sealing, and primary) 108 276.67 T
(classes to balance performance and \337exibility in Dylan pr) 108 262.67 T
(ograms.) 386.22 262.67 T
3 15 Q
(19.2  Ef\336cienc) 108 223 T
(y model) 189.95 223 T
1 11 Q
(Dylan is a powerful language: Many of the built-in, or primitive, language opera-) 108 202.67 T
(tions ar) 108 188.67 T
(e high-level operations, such as the method-dispatch mechanism, the col-) 144.26 188.67 T
(lection facility) 108 174.67 T
(, and the exception mechanism. Because of Dylan\325s powerful) 175.43 174.67 T
(featur) 108 160.67 T
(es, it can be har) 136.8 160.67 T
(d for the pr) 211.46 160.67 T
(ogrammer to develop an) 266.45 160.67 T
2 F
(ef) 389.25 160.67 T
(\336ciency model) 398.83 160.67 T
1 F
( \321 a) 471.85 160.67 T
(model of the absolute or r) 108 146.67 T
(elative cost of dif) 233.03 146.67 T
(fer) 315.71 146.67 T
(ent appr) 328.79 146.67 T
(oaches to a pr) 369.67 146.67 T
(oblem.) 436.49 146.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "310" 324
%%Page: "311" 325
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.3 Type constraints) 433.31 677.67 T
2 F
(31) 526.1 677.67 T
(1) 535.25 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(In contrast, in other languages, such as C, every language constr) 135 640.67 T
(uct can be) 446.74 640.67 T
(explained dir) 108 626.67 T
(ectly in terms of a small number of machine instr) 172.67 626.67 T
(uctions. Although) 410.7 626.67 T
-0.31 (it may be easy to understand the performance of a C pr) 108 612.67 P
-0.31 (ogram in terms of a simple) 372.67 612.67 P
(model, pr) 108 598.67 T
(ogramming in C is mor) 155.17 598.67 T
(e work for the pr) 268.41 598.67 T
(ogrammer \321 the higher) 350.35 598.67 T
(-level) 467.4 598.67 T
(abstractions ar) 108 584.67 T
(e not pr) 178.82 584.67 T
(ovided, and must often be built fr) 216.34 584.67 T
(om scratch.) 379.73 584.67 T
(For example, a C pr) 135 570.67 T
(ogrammer expects that the r) 230.51 570.67 T
(un-time cost of calling a) 367.07 570.67 T
-0.12 (function is the cost of possibly saving r) 108 556.67 P
-0.12 (egisters on a stack, passing the ar) 295.89 556.67 P
-0.12 (guments,) 456.24 556.67 P
-0.39 (executing a machine instr) 108 542.67 P
-0.39 (uction for jumping to a subr) 231.11 542.67 P
-0.39 (outine, and then executing a) 365.52 542.67 P
(r) 108 528.67 T
(eturn instr) 112.15 528.67 T
(uction at the end of the function; if it is a call thr) 163.24 528.67 T
(ough a function) 396.08 528.67 T
(pointer) 108 514.67 T
(, or a C++ virtual function, the cost of an indir) 142.61 514.67 T
(ect jump must be added. In) 365.69 514.67 T
(Dylan, the story is mor) 108 500.67 T
(e complicated, because Dylan has a mor) 219.19 500.67 T
(e sophisticated) 413.25 500.67 T
(execution model: A call to a generic function might be much mor) 108 486.67 T
(e expensive in a) 423.4 486.67 T
-0.22 (dynamic situation, because computing the most speci\336c method could take much) 108 472.67 P
(longer than would execution of the method itself.) 108 458.67 T
(T) 135 444.67 T
(o write ef) 140.73 444.67 T
(\336cient pr) 186.55 444.67 T
(ograms in Dylan, you have to understand what con-) 230.05 444.67 T
-0.42 (str) 108 430.67 P
-0.42 (ucts in the language can be expensive in time or space, and how you can r) 120.51 430.67 P
-0.42 (educe) 472.89 430.67 P
-0.21 (those costs in common cases. This understanding is based on an) 108 416.67 P
2 F
-0.21 (ef) 419.08 416.67 P
-0.21 (\336ciency model) 428.66 416.67 P
1 F
(\321 a conceptual model of how a pr) 108 402.67 T
(ogram in Dylan r) 275.14 402.67 T
(uns at a low level.) 358.67 402.67 T
(One pr) 135 388.67 T
(oblem with developing an ef) 168.82 388.67 T
(\336ciency model is that ther) 308.11 388.67 T
(e is no single) 433.77 388.67 T
(way to implement many Dylan operations. Dif) 108 374.67 T
(fer) 334.83 374.67 T
(ent compilers do things in dif-) 347.91 374.67 T
(fer) 108 360.67 T
(ent ways, and certain compilers have multiple techniques for compiling the) 121.08 360.67 T
(same piece of code, depending on cir) 108 346.67 T
(cumstances. Nonetheless, we shall try to) 287.53 346.67 T
(give an intuitive feel for which featur) 108 332.67 T
(es of Dylan ar) 288.77 332.67 T
(e costly) 356.01 332.67 T
(, and which featur) 391.26 332.67 T
(es) 479.74 332.67 T
(enable the compiler to make optimizations.) 108 318.67 T
3 15 Q
(19.3  T) 108 279 T
(ype constraints) 145.57 279 T
1 11 Q
(In Dylan, variables, parameters, r) 108 258.67 T
(eturn values, and slots can all have type con-) 270.02 258.67 T
-0.22 (straints. Dylan\325s dynamic natur) 108 244.67 P
-0.22 (e means that type constraints can be looser than is) 260.56 244.67 P
-0.32 (typical of a static language, or can even be deferr) 108 230.67 P
-0.32 (ed altogether) 342.11 230.67 P
-0.32 (, in support of rapid) 404.99 230.67 P
(pr) 108 216.67 T
(ototyping or evolutionary development. T) 118.76 216.67 T
(ype constraints in a dynamic lan-) 322.98 216.67 T
(guage serve thr) 108 202.67 T
(ee primary purposes:) 183.03 202.67 T
2 F
(1.) 117 182.67 T
1 F
-0.15 (T) 135 182.67 P
-0.15 (ype constraints ar) 140.75 182.67 P
-0.15 (e r) 226.84 182.67 P
-0.15 (equir) 238.86 182.67 P
-0.15 (ed for method dispatch: the methods of a generic) 264.27 182.67 P
(function ar) 135 168.67 T
(e distinguished by the types of their r) 188.17 168.67 T
(equir) 369.8 168.67 T
(ed ar) 395.2 168.67 T
(guments. The) 419.59 168.67 T
(generic function chooses the applicable methods by sorting them accor) 135 154.67 T
(ding) 478.5 154.67 T
(to the type constraints of their parameters.) 135 140.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "311" 325
%%Page: "312" 326
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(312) 72 677.67 T
0 F
(Chapter 19) 95.75 677.67 T
(Performance and Flexibility) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
2 11 Q
0 X
(2.) 117 640.67 T
1 F
-0.21 (T) 135 640.67 P
-0.21 (ype constraints can be used optionally to enfor) 140.75 640.67 P
-0.21 (ce pr) 366.12 640.67 P
-0.21 (ogram r) 389.57 640.67 P
-0.21 (estrictions. The) 427.94 640.67 P
(compiler ensur) 135 626.67 T
(es that a variable, parameter) 208.1 626.67 T
(, r) 344.99 626.67 T
(eturn value, or slot will never) 354.64 626.67 T
(take on a value that is incompatible with the type constraint of the parame-) 135 612.67 T
(ter) 135 598.67 T
(, r) 147.39 598.67 T
(eturn value, or slot. \050If the compiler cannot pr) 157.03 598.67 T
(ove at compile time that) 378.45 598.67 T
-0.41 (an incorr) 135 584.67 P
-0.41 (ect type is impossible, it inserts a r) 178.23 584.67 P
-0.41 (un-time check to enfor) 341.85 584.67 P
-0.41 (ce the type) 449.98 584.67 P
(constraint.\051) 135 570.67 T
2 F
(3.) 117 550.67 T
1 F
(T) 135 550.67 T
(ype constraints allow the compiler to generate better code, because they) 140.75 550.67 T
(ar) 135 536.67 T
(e a contract between the pr) 144.65 536.67 T
(ogrammer and the compiler that the variable,) 275.43 536.67 T
-0.14 (parameter) 135 522.67 P
-0.14 (, r) 184.32 522.67 P
-0.14 (eturn value, or slot in question will never take on a value that is) 193.84 522.67 P
-0.2 (incompatible with its type constraint; hence, the compiler needs only to gen-) 135 508.67 P
(erate code for dealing with the declar) 135 494.67 T
(ed type.) 316.11 494.67 T
(Many Dylan compilers use) 108 474.67 T
2 F
(type inferencing) 241.62 474.67 T
1 F
( to determine the possible types of) 324.41 474.67 T
(variables, parameters, and slots that do not have explicit type constraints. W) 108 460.67 T
(ithin) 478.05 460.67 T
(a library) 108 446.67 T
(, the compiler essentially knows everything about the variables and func-) 147.82 446.67 T
-0.15 (tions that ar) 108 432.67 P
-0.15 (e not exported at the library interface \321 it can analyze all uses of vari-) 165.78 432.67 P
(ables, and all callers and callees of functions. Thr) 108 418.67 T
(ough this analysis, the compiler) 344.82 418.67 T
-0.09 (can develop a worst-case scenario of the possible types of every variable, parame-) 108 404.67 P
-0.36 (ter) 108 390.67 P
-0.36 (, r) 120.39 390.67 P
-0.36 (eturn value, and slot. As a r) 129.68 390.67 P
-0.36 (esult, these compilers generate ef) 261.54 390.67 P
-0.36 (\336cient code even) 420.79 390.67 P
(if the pr) 108 376.67 T
(ogrammer does not fully declar) 146.38 376.67 T
(e all types \050as would be r) 299.58 376.67 T
(equir) 420.55 376.67 T
(ed in most) 445.96 376.67 T
(static languages\051.) 108 362.67 T
2 F
(Comparison with C:) 141 328.67 T
1 F
( Static languages such as C have little need for) 242.12 328.67 T
(type infer) 141 314.67 T
(encing, because the type of every value must be declar) 188.01 314.67 T
(ed,) 452.3 314.67 T
(and the types can be checked easily at compile time. On the other) 141 300.67 T
(hand, when a pr) 141 286.67 T
(oblem domain is ill-speci\336ed, the pr) 220.53 286.67 T
(ogram is evolv-) 395.27 286.67 T
(ing thr) 141 272.67 T
(ough development, or a value may take on one of several) 173.6 272.67 T
(types, the pr) 141 258.67 T
(ogrammer must constr) 201.51 258.67 T
(uct union types, and must use) 312.41 258.67 T
(variant r) 141 244.67 T
(ecor) 182.65 244.67 T
(ds or other bookkeeping to track the actual type of the) 202.95 244.67 T
(value manually) 141 230.67 T
(.) 215.61 230.67 T
(Dylan automatically handles this bookkeeping and uses) 168 216.67 T
-0.49 (type infer) 141 202.67 P
-0.49 (encing to minimize the associated over) 187.52 202.67 P
-0.49 (head. At the same) 373.77 202.67 P
(time, when the type of a variable can change at r) 141 188.67 T
(un time, Dylan) 376.29 188.67 T
(also automatically tracks the changing type.) 141 174.67 T
135 341.88 135 167.13 2 L
V
0.25 H
0 Z
N
486 341.88 486 167.13 2 L
V
N
134.88 342 486.12 342 2 L
V
N
134.88 167 486.12 167 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "312" 326
%%Page: "313" 327
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.3 Type constraints) 432.95 677.67 T
2 F
(313) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Some compilers have a facility for generating) 108 640.67 T
2 F
(performance warnings) 330.36 640.67 T
1 F
(, which) 443.72 640.67 T
(inform you when type infer) 108 626.67 T
(encing is not able to determine types suf) 242.6 626.67 T
(\336ciently to) 438.41 626.67 T
-0.17 (generate optimal code. Some compilers have a facility for generating) 108 612.67 P
2 F
-0.17 (safety warn-) 442.15 612.67 P
(ings) 108 598.67 T
1 F
(, informing you when type infer) 129.38 598.67 T
(encing is not able to determine types suf) 285.2 598.67 T
(\336-) 481.01 598.67 T
(ciently to omit r) 108 584.67 T
(un-time type checking. As an example, consider these de\336nitions) 185.26 584.67 T
-0.09 (\050which ar) 108 570.67 P
-0.09 (e similar to, but not exactly the same as, the de\336nitions on which we set-) 154.03 570.67 P
(tled in Chapter 14,) 108 556.67 T
0 F
(Four Complete Libraries) 203.39 556.67 T
1 F
(\051:) 311.17 556.67 T
4 9 Q
(define abstract open class <sixty-unit> \050<object>\051) 108 536 T
(slot total-seconds :: <integer> = 0, init-keyword: total-seconds:;) 118.8 525 T
(end class <sixty-unit>;) 108 514 T
(define method decode-total-seconds) 108 495 T
(\050sixty-unit :: <sixty-unit>\051) 129.6 484 T
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 113.4 473 T
(let total-seconds = abs\050sixty-unit.total-seconds\051;) 118.8 462 T
(let \050total-minutes, seconds\051 = truncate/\050total-seconds, 60\051;) 118.8 451 T
(let \050max-unit, minutes\051 = truncate/\050total-minutes, 60\051;) 118.8 440 T
(values \050max-unit, minutes, seconds\051;) 118.8 429 T
(end method decode-total-seconds;) 108 418 T
1 11 Q
(Because we made the choice to stor) 108 397.67 T
(e) 278.98 397.67 T
4 10 Q
(total-seconds) 287 397.67 T
1 11 Q
( as an integer) 365 397.67 T
(, and because) 428.69 397.67 T
4 10 Q
-0.89 (60) 108 383.67 P
1 11 Q
-0.41 ( is an integer constant, the compiler can infer that the) 120 383.67 P
4 10 Q
-0.89 (truncate/) 376 383.67 P
1 11 Q
-0.41 ( calls ar) 430 383.67 P
-0.41 (e for an) 465.78 383.67 P
(integer divided by integer) 108 369.67 T
(. Ther) 234.06 369.67 T
(e is no need to consider whether to use \337oating-) 262.12 369.67 T
(point or integer division.) 108 355.67 T
(If we wer) 135 341.67 T
(e mor) 180.9 341.67 T
(e concerned with testing out ideas, we might have left) 208.79 341.67 T
-0.24 (unspeci\336ed the type of the) 108 327.67 P
4 10 Q
-0.53 (total-seconds) 238.61 327.67 P
1 11 Q
-0.24 ( slot \050implicitly) 316.61 327.67 P
-0.24 (, its type would then be) 388.43 327.67 P
4 10 Q
(<object>) 108 313.67 T
1 11 Q
(\051, or) 156 313.67 T
(, if we wanted to keep the option of having times mor) 174.7 313.67 T
(e accurate) 435.39 313.67 T
-0.02 (than just seconds, we might have speci\336ed that its type was) 108 299.67 P
4 10 Q
-0.05 (<real>) 400.26 299.67 P
1 11 Q
-0.02 (, allowing for) 436.26 299.67 P
(the possibility of using \337oating-point numbers, which can expr) 108 285.67 T
(ess fractional) 413.86 285.67 T
(seconds.) 108 271.67 T
(If we left the type of the) 135 257.67 T
4 10 Q
(total-seconds) 253.55 257.67 T
1 11 Q
( slot unspeci\336ed, the compiler) 331.55 257.67 T
(would need to check the ar) 108 243.67 T
(guments to) 239.2 243.67 T
4 10 Q
(truncate/) 296.67 243.67 T
1 11 Q
(, on the of) 350.67 243.67 T
(f chance that an ar) 398.81 243.67 T
(gu-) 487.43 243.67 T
(ment was not numeric at all. In some compilers, you would be able to get a) 108 229.67 T
-0.11 (compile-time safety warning stating that a r) 108 215.67 P
-0.11 (un-time type err) 319.97 215.67 P
-0.11 (or is possible \050which,) 399.06 215.67 P
(if unhandled, will r) 108 201.67 T
(esult in pr) 202.04 201.67 T
(ogram failur) 251.25 201.67 T
(e\051, and that the check, and the possibil-) 312.03 201.67 T
(ity of a r) 108 187.67 T
(un-time err) 148.58 187.67 T
(or) 203.56 187.67 T
(, could be avoided if the compiler knew that) 213.09 187.67 T
4 10 Q
(total-) 430.41 187.67 T
(seconds) 108 173.67 T
1 11 Q
( was a) 150 173.67 T
4 10 Q
(<real>) 183.09 173.67 T
1 11 Q
(.) 219.09 173.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "313" 327
%%Page: "314" 328
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(314) 72 677.67 T
0 F
(Chapter 19) 95.75 677.67 T
(Performance and Flexibility) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.28 (If we speci\336ed the type of the) 108 287.67 P
4 10 Q
-0.62 (total-seconds) 252.13 287.67 P
1 11 Q
-0.28 ( slot as) 330.13 287.67 P
4 10 Q
-0.62 (<real>) 365.15 287.67 P
1 11 Q
-0.28 (, the compiler would) 401.15 287.67 P
(have to dispatch on the type of) 108 273.67 T
4 10 Q
(total-seconds) 260.71 273.67 T
1 11 Q
(, using either \337oating-point or) 338.71 273.67 T
(integer division as necessary) 108 259.67 T
(. In some compilers, we would be able to get a) 246.1 259.67 T
(compile-time performance warning stating that this dispatch could be omitted if) 108 245.67 T
(the compiler knew that) 108 231.67 T
4 10 Q
(total-seconds) 223.52 231.67 T
1 11 Q
( was of a mor) 301.52 231.67 T
(e r) 366.89 231.67 T
(estricted type.) 379.06 231.67 T
(Note that the type of the r) 135 217.67 T
(eturn value of) 260.49 217.67 T
4 10 Q
(decode-total-seconds) 331.46 217.67 T
1 11 Q
( can be) 451.46 217.67 T
-0.32 (inferr) 108 203.67 P
-0.32 (ed:) 135.03 203.67 P
4 10 Q
-0.69 (max-unit) 152.2 203.67 P
1 11 Q
-0.32 ( and) 200.2 203.67 P
4 10 Q
-0.69 (minutes) 223.69 203.67 P
1 11 Q
-0.32 ( must be) 265.69 203.67 P
4 10 Q
-0.69 (<integer>) 308.93 203.67 P
1 11 Q
-0.32 ( \050inferr) 362.93 203.67 P
-0.32 (ed fr) 396.05 203.67 P
-0.32 (om the de\336nition) 418.29 203.67 P
(of) 108 189.67 T
4 10 Q
(truncate/) 120.42 189.67 T
1 11 Q
(\051, and) 174.42 189.67 T
4 10 Q
(seconds) 204.96 189.67 T
1 11 Q
( must have the same type as) 246.96 189.67 T
4 10 Q
(total-seconds) 386.34 189.67 T
1 11 Q
(\050) 108 175.67 T
4 10 Q
(<integer>) 111.66 175.67 T
1 11 Q
(, in our example\051; thus, the compiler does not have to insert any type) 165.66 175.67 T
(checks on the r) 108 161.67 T
(eturn values of) 180.28 161.67 T
4 10 Q
(decode-total-seconds) 255.92 161.67 T
1 11 Q
(. Dylan enfor) 375.92 161.67 T
(ces declar) 439.39 161.67 T
(ed) 486.68 161.67 T
(r) 108 147.67 T
(eturn types in the same way as it enfor) 112.15 147.67 T
(ces parameter types, by eliminating the) 299.86 147.67 T
2 F
(What is a safe program?) 141 620.67 T
1 F
( Dylan is always safe in that a pr) 260.77 620.67 T
(ogramming) 418.55 620.67 T
-0.45 (err) 141 606.67 P
-0.45 (or cannot cause a corr) 154.76 606.67 P
-0.45 (uption of the pr) 259.02 606.67 P
-0.45 (ogram \050or of other pr) 334.03 606.67 P
-0.45 (ograms\051.) 434.95 606.67 P
-0.07 (For example, an out-of-bound array access or passing an ar) 141 592.67 P
-0.07 (gument of) 427.26 592.67 P
(incompatible type simply cannot happen. The compiler will either) 141 578.67 T
(pr) 141 564.67 T
(ove that the r) 151.76 564.67 T
(equested action is impossible, or will insert code to) 215.98 564.67 T
(verify bounds or type at r) 141 550.67 T
(un time, and will signal an err) 265.34 550.67 T
(or if the) 411.55 550.67 T
(bounds or type is incorr) 141 536.67 T
(ect.) 257.29 536.67 T
(When we discuss safety in this section, we ar) 168 522.67 T
(e r) 386.05 522.67 T
(eferring to) 398.22 522.67 T
(whether or not such err) 141 508.67 T
(ors will be visible to the user) 255.14 508.67 T
(. If we have) 393.56 508.67 T
(not pr) 141 494.67 T
(ovided for a r) 170.5 494.67 T
(ecovery action, signaling of an err) 236.55 494.67 T
(or will halt) 400.86 494.67 T
(the pr) 141 480.67 T
(ogram. See Chapter 20,) 169.76 480.67 T
0 F
(Exceptions) 287.52 480.67 T
1 F
(, for an example of how) 336 480.67 T
(r) 141 466.67 T
(un-time err) 145.26 466.67 T
(ors can be handled by the pr) 200.24 466.67 T
(ogram.) 338.32 466.67 T
2 F
(Comparison with Java:) 141 433.67 T
1 F
( Java r) 255.58 433.67 T
(ecognizes the need for safe operations,) 286.1 433.67 T
(and has eliminated many of the unsafe practices of C and C++, add-) 141 419.67 T
(ing such checks as array-bounds checks and type-cast checks at r) 141 405.67 T
(un) 455.45 405.67 T
(time. However) 141 391.67 T
(, Java r) 212.88 391.67 T
(etains the C mathematical model that trades) 246.16 391.67 T
-0.23 (performance for corr) 141 377.67 P
-0.23 (ectness. Java integers ar) 241.44 377.67 P
-0.23 (e of a \336xed size, and com-) 355.86 377.67 P
(putations that cannot be r) 141 363.67 T
(epr) 265.54 363.67 T
(esented in that size silently over\337ow) 281.57 363.67 T
(. In) 458.14 363.67 T
(contrast, Dylan r) 141 349.67 T
(equir) 222.1 349.67 T
(es numeric operations to complete corr) 247.51 349.67 T
(ectly or) 436.75 349.67 T
-0.24 (to signal an err) 141 335.67 P
-0.24 (or) 212.86 335.67 P
-0.24 (. Several Dylan implementations ar) 222.4 335.67 P
-0.24 (e also expected to) 392.45 335.67 P
(pr) 141 321.67 T
(ovide libraries for in\336nite-pr) 151.76 321.67 T
(ecision numerical operations.) 290.38 321.67 T
135 633.88 135 459.12 2 L
V
0.25 H
0 Z
N
486 633.88 486 459.12 2 L
V
N
134.88 634 486.12 634 2 L
V
N
134.88 459 486.12 459 2 L
V
N
135 446.88 135 314.13 2 L
V
N
486 446.88 486 314.13 2 L
V
N
134.88 447 486.12 447 2 L
V
N
134.88 314 486.12 314 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "314" 328
%%Page: "315" 329
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.4 Limited types) 445.26 677.67 T
2 F
(315) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(check wher) 108 640.67 T
(e type infer) 163.3 640.67 T
(encing can show it is not needed, and using the enfor) 218.33 640.67 T
(ced) 476.57 640.67 T
(types to make further infer) 108 626.67 T
(ences.) 238.36 626.67 T
(Fr) 135 612.67 T
(om this example, you can see how the compiler can get a lot of mileage) 145.26 612.67 T
-0.06 (fr) 108 598.67 P
-0.06 (om a small number of constraints, and how it can point you to the places wher) 115.81 598.67 P
-0.06 (e) 496.04 598.67 P
-0.37 (further clari\336cation will pr) 108 584.67 P
-0.37 (oduce the most performance and safety bene\336ts. At the) 236.3 584.67 P
(same time, Dylan does not r) 108 570.67 T
(equir) 243.95 570.67 T
(e that you have all your types thought out in) 269.36 570.67 T
(advance of compiling the pr) 108 556.67 T
(ogram; the dynamic natur) 244.51 556.67 T
(e of the language allows) 371.25 556.67 T
(Dylan to defer considering type information until the pr) 108 542.67 T
(ogram is actually r) 380.45 542.67 T
(un-) 471.12 542.67 T
(ning. In good Dylan development envir) 108 528.67 T
(onments, ther) 300.81 528.67 T
(e is support for r) 367.75 528.67 T
(esolving) 448.51 528.67 T
(and continuing fr) 108 514.67 T
(om r) 192.77 514.67 T
(un-time type err) 215.49 514.67 T
(ors during pr) 294.8 514.67 T
(ogram development \050rather) 359.49 514.67 T
(than r) 108 500.67 T
(equiring editing of the code and r) 136.79 500.67 T
(ecompilation\051.) 299.69 500.67 T
(Remember that your code is mor) 135 486.67 T
(e suited to r) 294.54 486.67 T
(euse when it has fewer and) 351.88 486.67 T
(mor) 108 472.67 T
(e general type constraints. If you have a compiler that can issue safety and) 127.87 472.67 T
(performance notes, try to generalize and minimize your type constraints, being) 108 458.67 T
(guided by your safety and performance r) 108 444.67 T
(equir) 308.04 444.67 T
(ements. Often, just the constraints) 333.45 444.67 T
-0.18 (r) 108 430.67 P
-0.18 (equir) 112.15 430.67 P
-0.18 (ed to specify method applicability will be suf) 137.56 430.67 P
-0.18 (\336cient for good safety and per-) 355 430.67 P
(formance. Declaring the types of module variables, slots, and r) 108 416.67 T
(eturn values of) 411.8 416.67 T
-0.01 (functions is also useful and can help to document your pr) 108 402.67 P
-0.01 (ogram. Declaring types) 387.68 402.67 P
(for constants and local variables can be useful for enfor) 108 388.67 T
(cing pr) 375.55 388.67 T
(ogram corr) 409.66 388.67 T
(ectness,) 463.48 388.67 T
(but is unlikely to cr) 108 374.67 T
(eate optimization opportunities, and might actually r) 201.93 374.67 T
(educe) 459.85 374.67 T
(performance, because the compiler will insert type checks to enfor) 108 360.67 T
(ce such con-) 429.42 360.67 T
(straints if they ar) 108 346.67 T
(e overly r) 190.08 346.67 T
(estrictive.) 236.15 346.67 T
3 15 Q
(19.4  Limited types) 108 307 T
1 11 Q
(Some of Dylan\325s built-in types ar) 108 286.67 T
(e extr) 267.5 286.67 T
(emely general. When these types ar) 294.2 286.67 T
(e used,) 466.52 286.67 T
(the compiler) 108 272.67 T
(\325s type infer) 170.05 272.67 T
(encing is thwarted, and less ef) 227.54 272.67 T
(\336cient code will be gener-) 373.91 272.67 T
-0.39 (ated. The place wher) 108 258.67 P
-0.39 (e this situation is most obvious is in the) 207.78 258.67 P
4 10 Q
-0.85 (<collection>) 398.28 258.67 P
1 11 Q
-0.39 ( types,) 470.28 258.67 P
(wher) 108 244.67 T
(e the elements of a collection ar) 132.99 244.67 T
(e essentially like multiple slots, all with the) 284.85 244.67 T
(same type constraint. For the built-in collections, elements typically have a gen-) 108 230.67 T
(eral default type \050often simply) 108 216.67 T
4 10 Q
(<object>) 258.32 216.67 T
1 11 Q
(\051, and ther) 306.32 216.67 T
(e can be an arbitrary number) 356.26 216.67 T
(of them. The) 108 202.67 T
4 10 Q
(limited) 172.05 202.67 T
1 11 Q
( mechanism is a way to specify that you expect to stor) 214.05 202.67 T
(e) 475.33 202.67 T
(objects of a particular type in the collection, and to specify how many elements) 108 188.67 T
(will be in the collection.) 108 174.67 T
(As an example, in Section 17.2, page 259, the) 135 160.67 T
4 10 Q
(generate-gates) 353.59 160.67 T
1 11 Q
( method) 437.59 160.67 T
(r) 108 146.67 T
(eturns a) 112.15 146.67 T
4 10 Q
(<vector>) 154.05 146.67 T
1 11 Q
(. W) 202.05 146.67 T
(ithout further information, the compiler must assume that) 217.94 146.67 T
(that vector might contain objects of any types. As a r) 108 132.67 T
(esult, the following code in) 362.5 132.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "315" 329
%%Page: "316" 330
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(316) 72 677.67 T
0 F
(Chapter 19) 95.75 677.67 T
(Performance and Flexibility) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(the) 108 640.67 T
4 10 Q
(build-simple-airport) 126.01 640.67 T
1 11 Q
( method fr) 246.01 640.67 T
(om Section 17.5, page 277, will be) 297.01 640.67 T
(inef) 108 626.67 T
(\336cient:) 126.34 626.67 T
4 9 Q
(let gates = generate-gates\050gates-per-terminal, capacity\051;) 118.8 606 T
(...) 118.8 595 T
(for \050gate in gates\051) 118.8 584 T
(gate.connected-to := taxiway-vector;) 129.6 573 T
(end for;) 118.8 562 T
1 11 Q
(Because the compiler can infer only that) 108 541.67 T
4 10 Q
(gates) 305.14 541.67 T
1 11 Q
( is a) 335.14 541.67 T
4 10 Q
(<vector>) 356.76 541.67 T
1 11 Q
(, it must generate) 404.76 541.67 T
-0.33 (extra code to determine whether each) 108 527.67 P
4 10 Q
-0.71 (gate) 291.66 527.67 P
1 11 Q
-0.33 ( has a) 315.66 527.67 P
4 10 Q
-0.71 (connected-to) 344.99 527.67 P
1 11 Q
-0.33 ( method on it. W) 416.99 527.67 P
-0.33 (e) 496.31 527.67 P
(can use limited types to constrain) 108 513.67 T
4 10 Q
(gate-instances) 273.57 513.67 T
1 11 Q
( as follows:) 357.57 513.67 T
4 9 Q
(define constant <gate-vector> = limited\050<vector>, of: <gate>\051;) 108 493 T
(define method generate-gates) 108 474 T
(\050gates-per-terminal :: <vector>, default-gate-capacity :: <size>\051) 129.6 463 T
(=> \050gates :: <gate-vector>\051) 113.4 452 T
(let result = make\050<gate-vector>, size: reduce1\050\134+, gates-per-terminal\051\051;) 118.8 441 T
(...) 118.8 430 T
(values\050result\051;) 118.8 419 T
(end method generate-gates;) 108 408 T
1 11 Q
(W) 108 387.67 T
(ith the limited constraint of the r) 118.39 387.67 T
(eturn value of) 275.88 387.67 T
4 10 Q
(generate-gates) 346.85 387.67 T
1 11 Q
(, the compiler) 430.85 387.67 T
(can ensur) 108 373.67 T
(e that only gate objects will ever be stor) 154.65 373.67 T
(ed in the vector; hence, it can be) 345.89 373.67 T
(sur) 108 359.67 T
(e that each) 123.44 359.67 T
4 10 Q
(gate) 178.09 359.67 T
1 11 Q
( will be a) 202.09 359.67 T
4 10 Q
(<gate>) 248.72 359.67 T
1 11 Q
( and will have a) 284.72 359.67 T
4 10 Q
(connected-to) 364.76 359.67 T
1 11 Q
( method.) 436.76 359.67 T
(Note that limited-collection types ar) 135 345.67 T
(e instantiable types; that is, you can) 310.16 345.67 T
(make an object of a limited type. This capability is dif) 108 331.67 T
(fer) 366.94 331.67 T
(ent fr) 380.02 331.67 T
(om similar con-) 405.84 331.67 T
(str) 108 317.67 T
(ucts in certain other languages, in which those constr) 120.51 317.67 T
(ucts ar) 378.21 317.67 T
(e only an assertion) 410.38 317.67 T
(about the range or type of values to be stor) 108 303.67 T
(ed in the collection. Having declar) 315.88 303.67 T
(ed) 482.18 303.67 T
-0.12 (the r) 108 289.67 P
-0.12 (eturn value of) 130.03 289.67 P
4 10 Q
-0.27 (generate-gates) 200.64 289.67 P
1 11 Q
-0.12 ( to be a) 284.64 289.67 P
4 10 Q
-0.27 (<gate-vector>) 321.59 289.67 P
1 11 Q
-0.12 (, it would be an err) 399.59 289.67 P
-0.12 (or) 491.02 289.67 P
-0.19 (to r) 108 275.67 P
-0.19 (eturn a) 124.3 275.67 P
4 10 Q
-0.41 (<vector>) 161.16 275.67 P
1 11 Q
-0.19 ( instead; hence, we changed the ar) 209.16 275.67 P
-0.19 (gument to) 374.24 275.67 P
4 10 Q
-0.41 (make) 426.67 275.67 P
1 11 Q
-0.19 ( when con-) 450.67 275.67 P
(str) 108 261.67 T
(ucting) 120.51 261.67 T
4 10 Q
(result) 154.08 261.67 T
1 11 Q
( to be) 190.08 261.67 T
4 10 Q
(<gate-vector>) 219.27 261.67 T
1 11 Q
( instead of the original) 297.27 261.67 T
4 10 Q
(<vector>) 409.26 261.67 T
1 11 Q
(.) 457.26 261.67 T
-0.02 (If) 135 247.67 P
4 10 Q
-0.05 (<gate>) 145.1 247.67 P
1 11 Q
-0.02 ( and) 181.1 247.67 P
4 10 Q
-0.05 (connected-to) 205.18 247.67 P
1 11 Q
-0.02 ( ar) 277.17 247.67 P
-0.02 (e not) 289.55 247.67 P
2 F
-0.02 (open) 316.27 247.67 P
1 F
-0.02 ( \050as described in Section 19.9 and) 341.33 247.67 P
(Section 19.10\051, the compiler can infer that) 108 233.67 T
4 10 Q
(connected-to) 310.76 233.67 T
1 11 Q
( is used her) 382.76 233.67 T
(e to set a slot) 437.98 233.67 T
(in the gate instance and to further optimize the code generated. W) 108 219.67 T
(e do not delve) 428.39 219.67 T
-0.18 (into the exact details of what the compiler has to know to make this optimization,) 108 205.67 P
-0.35 (but it is worth noting that, if either the class or the generic function wer) 108 191.67 P
-0.35 (e open, the) 449.22 191.67 P
(optimization could not be made.) 108 177.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "316" 330
%%Page: "317" 331
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.4 Limited types) 445.26 677.67 T
2 F
(317) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Another use of limited types is to allow compact r) 108 488.67 T
(epr) 350.56 488.67 T
(esentations. W) 366.59 488.67 T
(e can use) 436.62 488.67 T
4 10 Q
(limited) 108 474.67 T
1 11 Q
( with the built-in type) 150 474.67 T
4 10 Q
(<integer>) 258.92 474.67 T
1 11 Q
( to specify numbers with a limited) 312.92 474.67 T
(range that can be stor) 108 460.67 T
(ed mor) 212.25 460.67 T
(e compactly than integers. It is especially useful to) 246.85 460.67 T
(use a limited range in combination with a limited collection; for example,) 108 446.67 T
4 9 Q
(define constant <signed-byte-vector>) 108 426 T
(= limited\050<simple-vector>,) 118.8 415 T
(of: limited\050<integer>, min: -128, max 127\051\051;) 172.8 404 T
1 11 Q
(In the pr) 108 383.67 T
(eceding example, we de\336ne a type that can be r) 149.62 383.67 T
(epr) 379.42 383.67 T
(esented as a one-) 395.45 383.67 T
(dimensional array of 8-bit bytes.) 108 369.67 T
2 F
(Comparison with C++:) 141 620.67 T
1 F
( The Dylan limited-collection types pr) 255.46 620.67 T
(ovide a) 439.55 620.67 T
(capability similar to that of) 141 606.67 T
(fer) 271.85 606.67 T
(ed by the C++ template classes. Unlike) 284.92 606.67 T
(in C++, the base type of a limited-collection type \050the equivalent of a) 141 592.67 T
-0.13 (C++ class template \321 in the example above,) 141 578.67 P
4 10 Q
-0.28 (<vector>) 357.66 578.67 P
1 11 Q
-0.13 (\051 is also a valid) 405.66 578.67 P
(type. Dylan\325s dynamic capabilities mean that Dylan can defer deter-) 141 564.67 T
(mining the element type of a collection until r) 141 550.67 T
(un time, in ef) 362.67 550.67 T
(fect adapt-) 426.81 550.67 T
(ing the class template as it goes along. By using a limited type, the) 141 536.67 T
(compiler can generate mor) 141 522.67 T
(e ef) 270.89 522.67 T
(\336cient code.) 287.64 522.67 T
2 F
(Comparison with C:) 141 335.67 T
1 F
( C pr) 242.12 335.67 T
(ovides ef) 266.18 335.67 T
(\336cient data r) 309.74 335.67 T
(epr) 370.69 335.67 T
(esentations,) 386.72 335.67 T
(because its data types typically map dir) 141 321.67 T
(ectly to underlying har) 333.11 321.67 T
(dwar) 444.47 321.67 T
(e) 470.01 321.67 T
(r) 141 307.67 T
(epr) 145.15 307.67 T
(esentations. A drawback of C is that its ef) 161.17 307.67 T
(\336cient data r) 361.95 307.67 T
(epr) 422.9 307.67 T
(esenta-) 438.92 307.67 T
(tions ar) 141 293.67 T
(e often not portable: The size of a) 177.26 293.67 T
4 10 Q
(short int) 341.01 293.67 T
1 11 Q
( may vary acr) 395.01 293.67 T
(oss) 461.3 293.67 T
(platforms, for instance. Dylan takes the mor) 141 279.67 T
(e abstract appr) 354.2 279.67 T
(oach of) 425.99 279.67 T
(describing the r) 141 265.67 T
(equir) 216.79 265.67 T
(ements of a data type, and letting the compiler) 242.2 265.67 T
(choose the most ef) 141 251.67 T
(\336cient underlying r) 230.44 251.67 T
(epr) 324.49 251.67 T
(esentation. A drawback of) 340.52 251.67 T
(the Dylan appr) 141 237.67 T
(oach is that it cannot easily be used for low-level sys-) 214.36 237.67 T
(tems pr) 141 223.67 T
(ogramming, wher) 177.74 223.67 T
(e data str) 265.34 223.67 T
(uctur) 309.93 223.67 T
(es must map r) 335.81 223.67 T
(eliably to the) 404.56 223.67 T
-0.38 (underlying har) 141 209.67 P
-0.38 (dwar) 213.83 209.67 P
-0.38 (e. Most Dylan systems pr) 239.37 209.67 P
-0.38 (ovide a for) 360.72 209.67 P
-0.38 (eign-function) 412.2 209.67 P
(interface to allow calling out to C or some other language mor) 141 195.67 T
(e suit-) 442.38 195.67 T
(able to these low-level tasks. Some Dylan systems augment the lan-) 141 181.67 T
(guage with machine-level constr) 141 167.67 T
(ucts that pr) 299.23 167.67 T
(ovide the level of contr) 354.33 167.67 T
(ol) 465.85 167.67 T
(necessary while staying within the object model as much as possible.) 141 153.67 T
135 633.88 135 515.12 2 L
V
0.25 H
0 Z
N
486 633.88 486 515.12 2 L
V
N
134.88 634 486.12 634 2 L
V
N
134.88 515 486.12 515 2 L
V
N
135 348.88 135 146.13 2 L
V
N
486 348.88 486 146.13 2 L
V
N
134.88 349 486.12 349 2 L
V
N
134.88 146 486.12 146 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "317" 331
%%Page: "318" 332
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(318) 72 677.67 T
0 F
(Chapter 19) 95.75 677.67 T
(Performance and Flexibility) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(19.5  En) 108 439 T
(umerations) 154.4 439 T
1 11 Q
(Many languages pr) 108 418.67 T
(ovide enumeration types both to enfor) 202.08 418.67 T
(ce pr) 388.97 418.67 T
(ogram corr) 412.63 418.67 T
(ectness) 466.45 418.67 T
(and to pr) 108 404.67 T
(ovide mor) 152.47 404.67 T
(e compact r) 202.5 404.67 T
(epr) 258.6 404.67 T
(esentation of multiple-choice values. Dylan) 274.63 404.67 T
(does not have a built-in enumeration type, but you can easily constr) 108 390.67 T
(uct enumera-) 438.01 390.67 T
(tions using the) 108 376.67 T
4 10 Q
(type-union) 182.38 376.67 T
1 11 Q
( and) 242.38 376.67 T
4 10 Q
(singleton) 266.51 376.67 T
1 11 Q
( type constr) 320.51 376.67 T
(uctors.) 377.39 376.67 T
(For example, consider the) 135 362.67 T
4 10 Q
(<latitude>) 263.2 362.67 T
1 11 Q
( and) 323.2 362.67 T
4 10 Q
(<longitude>) 347.33 362.67 T
1 11 Q
( classes, wher) 413.33 362.67 T
(e) 479.42 362.67 T
(ther) 108 348.67 T
(e ar) 127.4 348.67 T
(e only two valid values for the) 145.07 348.67 T
4 10 Q
(direction) 295.67 348.67 T
1 11 Q
( slot in each class. Rather than) 349.67 348.67 T
(enfor) 108 334.67 T
(cing the r) 133.49 334.67 T
(estrictions pr) 178.99 334.67 T
(ogrammatically) 242.31 334.67 T
(, as we did in Section 10.6, page 128,) 317.67 334.67 T
(we can cr) 108 320.67 T
(eate types that do the job for us:) 153.76 320.67 T
4 9 Q
(define abstract class <directed-angle> \050<sixty-unit>\051) 108 300 T
(slot direction :: <symbol>, required-init-keyword: direction:;) 118.8 289 T
(end class <directed-angle>;) 108 278 T
(define constant <latitude-direction>) 108 259 T
(= type-union\050singleton\050#"north"\051, singleton\050#"south"\051\051;) 118.8 248 T
(define class <latitude> \050<directed-angle>\051) 108 229 T
(keyword direction:, type: <latitude-direction>;) 118.8 218 T
(end class <latitude>;) 108 207 T
(define constant <longitude-direction>) 108 188 T
(= type-union\050singleton\050#"east"\051, singleton\050#"west"\051\051;) 118.8 177 T
(define class <longitude> \050<directed-angle>\051) 108 158 T
(keyword direction:, type: <longitude-direction>;) 118.8 147 T
(end class <longitude>;) 108 136 T
2 11 Q
(Comparison with Java:) 141 620.67 T
1 F
( Java r) 255.58 620.67 T
(ecognizes that portable pr) 286.1 620.67 T
(ograms need) 412.1 620.67 T
(well-de\336ned data types, rather than types that map to the particular) 141 606.67 T
(underlying har) 141 592.67 T
(dwar) 214.21 592.67 T
(e dif) 239.75 592.67 T
(fer) 261.15 592.67 T
(ently in each implementation. However) 274.23 592.67 T
(,) 466.49 592.67 T
(Java r) 141 578.67 T
(etains some of C\325s concr) 168.77 578.67 T
(eteness in simply specifying four dis-) 285.56 578.67 T
(tinct sizes of integer \050in terms of how many binary digits they hold\051,) 141 564.67 T
(and for) 141 550.67 T
(cing the pr) 176.19 550.67 T
(ogrammer to convert integer types to objects manu-) 228.31 550.67 T
-0.21 (ally) 141 536.67 P
-0.21 (, when object-oriented operations ar) 157.8 536.67 P
-0.21 (e to be performed. In contrast,) 332.04 536.67 P
(Dylan\325s limited-integer types specify) 141 522.67 T
(, at the pr) 318.88 522.67 T
(ogram level, the) 364.98 522.67 T
-0.46 (abstract r) 141 508.67 P
-0.46 (equir) 185.59 508.67 P
-0.46 (ements of the type, giving the compiler fr) 210.99 508.67 P
-0.46 (eedom to map) 408.73 508.67 P
(the pr) 141 494.67 T
(ogram r) 169.76 494.67 T
(equir) 208.34 494.67 T
(ements as ef) 233.75 494.67 T
(\336ciently as possible to the underlying) 293.05 494.67 T
(ar) 141 480.67 T
(chitectur) 150.65 480.67 T
(e.) 193.24 480.67 T
135 633.88 135 473.12 2 L
V
0.25 H
0 Z
N
486 633.88 486 473.12 2 L
V
N
134.88 634 486.12 634 2 L
V
N
134.88 473 486.12 473 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "318" 332
%%Page: "319" 333
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.6 Direct methods) 438.76 677.67 T
2 F
(319) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.42 (Her) 108 640.67 P
-0.42 (e, the abstract super) 126.57 640.67 P
-0.42 (class speci\336es that the r) 222.31 640.67 P
-0.42 (ead-only slot) 334.23 640.67 P
4 10 Q
-0.92 (direction) 399.23 640.67 P
1 11 Q
-0.42 ( must be a) 453.23 640.67 P
4 10 Q
(<symbol>) 108 626.67 T
1 11 Q
(, and that it must be initialized when an instance is cr) 156 626.67 T
(eated with the) 414.37 626.67 T
(keywor) 108 612.67 T
(d) 144.83 612.67 T
4 10 Q
(direction:) 154.3 612.67 T
1 11 Q
(. The constant) 214.3 612.67 T
4 10 Q
(<latitude-direction>) 284.74 612.67 T
1 11 Q
( is a type speci\336ca-) 404.74 612.67 T
(tion that permits only the symbol) 108 598.67 T
4 10 Q
(#"north") 272.92 598.67 T
1 11 Q
( or the symbol) 320.92 598.67 T
4 10 Q
(#"south") 393.31 598.67 T
1 11 Q
(. The class) 441.31 598.67 T
4 10 Q
(<latitude>) 108 584.67 T
1 11 Q
( speci\336es that, when an instance of) 168 584.67 T
4 10 Q
(<latitude>) 339.02 584.67 T
1 11 Q
( is made, the initial) 399.02 584.67 T
(value must be of the) 108 570.67 T
4 10 Q
(<latitude-direction>) 209.44 570.67 T
1 11 Q
( type. W) 329.44 570.67 T
(e handled the longitude) 369.26 570.67 T
(case similarly) 108 556.67 T
(.) 172.99 556.67 T
(The use of) 135 542.67 T
4 10 Q
(type-union) 187.9 542.67 T
1 11 Q
( and) 247.9 542.67 T
4 10 Q
(singleton) 272.02 542.67 T
1 11 Q
( to cr) 326.02 542.67 T
(eate enumeration types in this) 350.14 542.67 T
(fashion is common enough that the function) 108 528.67 T
4 10 Q
(one-of) 325.61 528.67 T
1 11 Q
( is usually available in a util-) 361.61 528.67 T
(ity library as a shorthand:) 108 514.67 T
4 9 Q
(define constant one-of) 108 494 T
(= method \050#rest objects\051) 118.8 483 T
(apply\050type-union, map\050singleton, objects\051\051) 135 472 T
(end method;) 129.6 461 T
1 11 Q
(W) 108 440.67 T
(ith this abbr) 118.39 440.67 T
(eviation, the dir) 176.75 440.67 T
(ection types can be written mor) 253.71 440.67 T
(e compactly:) 406.62 440.67 T
4 9 Q
(define constant <latitude-direction> = one-of\050#"north", #"south"\051;) 108 420 T
(define constant <longitude-direction> = one-of\050#"east", #"west"\051;) 108 401 T
1 11 Q
(Some Dylan compilers will r) 108 380.67 T
(ecognize the idiomatic use of) 246.31 380.67 T
4 10 Q
(type-union) 390.22 380.67 T
1 11 Q
( and) 450.22 380.67 T
4 10 Q
(singleton) 108 366.67 T
1 11 Q
( to r) 162 366.67 T
(epr) 181.24 366.67 T
(esent such enumerations mor) 197.27 366.67 T
(e compactly) 340.14 366.67 T
(. For instance, a com-) 397.44 366.67 T
(piler could r) 108 352.67 T
(epr) 167.72 352.67 T
(esent the dir) 183.75 352.67 T
(ection slot of a latitude or longitude as a single bit,) 243.76 352.67 T
-0.2 (using the getter and setter functions to translate back and forth to the appr) 108 338.67 P
-0.2 (opriate) 466.93 338.67 P
(symbol.) 108 324.67 T
3 15 Q
(19.6  Direct methods) 108 285 T
1 11 Q
(The de\336nition of the) 108 264.67 T
4 10 Q
(one-of) 209.78 264.67 T
1 11 Q
( constant is a method called a) 245.78 264.67 T
2 F
(direct method) 391.4 264.67 T
1 F
(or) 464.11 264.67 T
2 F
(bare) 477.21 264.67 T
-0.1 (method) 108 250.67 P
1 F
-0.1 (. It is the equivalent of a function in other languages. A bar) 146.5 250.67 P
-0.1 (e method does) 430.44 250.67 P
(not cr) 108 236.67 T
(eate an implicit generic function, and invoking a bar) 135.77 236.67 T
(e method does not use) 389.42 236.67 T
(method-dispatch pr) 108 222.67 T
(ocedur) 204.44 222.67 T
(e, but rather calls the method dir) 238.1 222.67 T
(ectly) 396.84 222.67 T
(. W) 418.67 222.67 T
(e choose to) 434.16 222.67 T
(use a bar) 108 208.67 T
(e method her) 151.3 208.67 T
(e because we ar) 215.58 208.67 T
(e sur) 291.49 208.67 T
(e that) 314.95 208.67 T
4 10 Q
(one-of) 344.8 208.67 T
1 11 Q
( will never need method) 380.8 208.67 T
(dispatch: it performs the same operation independent of the types of its ar) 108 194.67 T
(gu-) 467.84 194.67 T
(ments. The bar) 108 180.67 T
(e method serves to document this intent. If ther) 180.03 180.67 T
(e wer) 410.05 180.67 T
(e some possi-) 436.66 180.67 T
(bility of additional methods, it would be mor) 108 166.67 T
(e perspicuous to use a generic) 327.2 166.67 T
(function, even if ther) 108 152.67 T
(e is initially only one method. Most Dylan compilers will) 209.2 152.67 T
(generate equally ef) 108 138.67 T
(\336cient code for a bar) 200.07 138.67 T
(e method and for a generic function with) 299.19 138.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "319" 333
%%Page: "320" 334
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(320) 72 677.67 T
0 F
(Chapter 19) 95.75 677.67 T
(Performance and Flexibility) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.32 (only one method, so the choice of which to use should be based on whether or not) 108 640.67 P
-0.2 (it would ever make sense to have additional methods that discriminate on param-) 108 626.67 P
(eter types.) 108 612.67 T
3 15 Q
(19.7  T) 108 573 T
(ail calls) 145.32 573 T
1 11 Q
(The most important constr) 108 552.67 T
(uct in the Dylan execution model is the function call,) 237.38 552.67 T
(because function calls ar) 108 538.67 T
(e the most common operation in the language. Remem-) 226.43 538.67 T
(ber that all slot accesses and assignments, arithmetic operations, and collection) 108 524.67 T
(accesses obey the execution model of function calls, even if the syntax for them) 108 510.67 T
(does not look like that of function calls.) 108 496.67 T
(W) 135 482.67 T
(e have alr) 144.99 482.67 T
(eady discussed how Dylan compilers can optimize away r) 191.99 482.67 T
(un-) 474.65 482.67 T
(time checking of ar) 108 468.67 T
(gument types and the over) 200.61 468.67 T
(head of method dispatch, and that) 331.09 468.67 T
(good compilers will generate equally ef) 108 454.67 T
(\336cient code for calls to single-method) 299.84 454.67 T
(generic functions or dir) 108 440.67 T
(ect methods.) 221.6 440.67 T
(Ther) 135 426.67 T
(e is one additional optimization that good Dylan compilers will make,) 157.56 426.67 T
(which is enabled by a particular style of pr) 108 412.67 T
(ogramming. If the \336nal operation in a) 315.14 412.67 T
-0.41 (method is a call to another function \050called a) 108 398.67 P
2 F
-0.41 (tail call) 322.75 398.67 P
1 F
-0.41 (\051 then the calling function can) 359.3 398.67 P
-0.09 (jump dir) 108 384.67 P
-0.09 (ectly to the called function, rather than using a call-and-r) 150.26 384.67 P
-0.09 (eturn sequence.) 425.14 384.67 P
(Thus, the r) 108 370.67 T
(eturn fr) 160.1 370.67 T
(om the called function r) 196.89 370.67 T
(eturns to its caller) 312.57 370.67 T
(\325s caller) 399.97 370.67 T
(.) 436.03 370.67 T
(As an example, consider this) 135 356.67 T
4 10 Q
(decode-total-seconds) 277.21 356.67 T
1 11 Q
( method:) 397.21 356.67 T
4 9 Q
(define method decode-total-seconds) 108 336 T
(\050sixty-unit :: <sixty-unit>\051) 129.6 325 T
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 113.4 314 T
(decode-total-seconds\050sixty-unit.total-seconds\051;) 118.8 303 T
(end method decode-total-seconds;) 108 292 T
1 11 Q
(The inner call to) 108 271.67 T
4 10 Q
(decode-total-seconds) 189.41 271.67 T
1 11 Q
( can be a dir) 309.41 271.67 T
(ect jump rather than a func-) 368.12 271.67 T
(tion call, because the compiler can infer which method should be called and that) 108 257.67 T
(the r) 108 243.67 T
(eturn values alr) 130.15 243.67 T
(eady have the corr) 206.22 243.67 T
(ect constraints.) 296.1 243.67 T
3 15 Q
(19.8  T) 108 204 T
(yped g) 145.57 204 T
(eneric functions) 185.34 204 T
1 11 Q
(In addition to specifying the types of the parameters and r) 108 183.67 T
(eturn values of meth-) 390.67 183.67 T
(ods, you can specify the types of the parameters and r) 108 169.67 T
(eturn values of a generic) 369.59 169.67 T
(function. Y) 108 155.67 T
(ou usually r) 160.6 155.67 T
(estrict the parameter types of a generic function to estab-) 218.84 155.67 T
(lish the) 108 141.67 T
2 F
(contract) 146.23 141.67 T
1 F
( of the generic function \321 that is, to de\336ne the domain of ar) 185.93 141.67 T
(gu-) 475.59 141.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "320" 334
%%Page: "321" 335
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.8 Typed generic functions) 405.05 677.67 T
2 F
(321) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(ments that the generic function is intended to handle, and the domain of the) 108 640.67 T
(values that it will r) 108 626.67 T
(eturn.) 199.27 626.67 T
(If we de\336ne a method without also de\336ning a generic function, Dylan cr) 135 612.67 T
(e-) 485.33 612.67 T
(ates an implicit generic function with the most general types for each parameter) 108 598.67 T
(and r) 108 584.67 T
(eturn value that ar) 133.52 584.67 T
(e compatible with the method. For example, assume that) 223.54 584.67 T
(we de\336ned a method for) 108 570.67 T
4 10 Q
(next-landing-step) 230.44 570.67 T
1 11 Q
(, and did not explicitly cr) 332.44 570.67 T
(eate a) 454.18 570.67 T
(generic function for it. The method is as follows:) 108 556.67 T
4 9 Q
(define method next-landing-step) 108 536 T
(\050storage :: <sky>, aircraft :: <aircraft>\051) 129.6 525 T
(=> \050next-class :: false-or\050<class>\051, duration :: false-or\050<time-offset>\051\051) 113.4 514 T
(...) 118.8 503 T
(end if;) 118.8 492 T
(end method next-landing-step;) 108 481 T
1 11 Q
(When we de\336ne a method without also de\336ning a generic function, the compiler) 108 460.67 T
(will generate an implicit generic function for us, which, in this case, will be as) 108 446.67 T
(though we had de\336ned the generic function like this:) 108 432.67 T
6 9 Q
(define generic next-landing-step \050o1 :: <object>, o2 :: <object>\051) 108 412 T
(=> \050#rest r :: <object>\051;) 113.4 401 T
1 11 Q
(In Section 17.4, page 267, wher) 108 380.67 T
(e we did de\336ne a generic function, we used a sim-) 256.72 380.67 T
(ple de\336nition, just documenting the number of ar) 108 366.67 T
(guments, and giving them mne-) 347.93 366.67 T
(monic names:) 108 352.67 T
4 9 Q
(define generic next-landing-step \050container, vehicle\051;) 108 332 T
1 11 Q
(Because we did not specify types of the ar) 108 311.67 T
(guments or r) 311.25 311.67 T
(eturn values, they default) 373.63 311.67 T
(to) 108 297.67 T
4 10 Q
(<object>) 120.34 297.67 T
1 11 Q
(, just as they did in the pr) 168.34 297.67 T
(eceding implicit generic function.) 291.6 297.67 T
(Although the generic function that we wr) 135 283.67 T
(ote does pr) 336.76 283.67 T
(event us fr) 390.54 283.67 T
(om de\336ning) 441.89 283.67 T
(methods with the wr) 108 269.67 T
(ong number of ar) 209.55 269.67 T
(guments, it does not constrain the types of) 294.09 269.67 T
(those ar) 108 255.67 T
(guments or the format or type of r) 146.32 255.67 T
(eturn values in any way) 312.13 255.67 T
(. A sophisti-) 428.03 255.67 T
(cated compiler may be able to make infer) 108 241.67 T
(ences based on the methods that we) 308.05 241.67 T
(de\336ne, but we could both aid the compiler and mor) 108 227.67 T
(e clearly document the pr) 358.48 227.67 T
(oto-) 482.49 227.67 T
(col of) 108 213.67 T
4 10 Q
(next-landing-step) 137.26 213.67 T
1 11 Q
( by specifying the types of the parameters and r) 239.26 213.67 T
(eturn) 470.34 213.67 T
(values in the de\336nition of the generic function:) 108 199.67 T
4 9 Q
(define generic next-landing-step) 108 179 T
(\050storage :: <vehicle-storage>, aircraft :: <aircraft>\051) 129.6 168 T
(=> \050next-storage :: <vehicle-storage>, elapsed-time :: <time-offset>\051;) 113.4 157 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "321" 335
%%Page: "322" 336
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(322) 72 677.67 T
0 F
(Chapter 19) 95.75 677.67 T
(Performance and Flexibility) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.01 (Now) 108 640.67 P
-0.01 (, the compiler can help us. If we de\336ne a method whose ar) 131.31 640.67 P
-0.01 (guments ar) 414.24 640.67 P
-0.01 (e not a) 469.01 640.67 P
(subclass of) 108 626.67 T
4 10 Q
(<vehicle-storage>) 163.46 626.67 T
1 11 Q
( and a subclass of) 265.46 626.67 T
4 10 Q
(<aircraft>) 353.3 626.67 T
1 11 Q
( \050for example, if) 413.3 626.67 T
(we pr) 108 612.67 T
(ovided the ar) 135.95 612.67 T
(guments in the wr) 200.49 612.67 T
(ong or) 289.3 612.67 T
(der\051, the compiler will r) 320.73 612.67 T
(eport the) 435.89 612.67 T
(err) 108 598.67 T
(or) 121.76 598.67 T
(. Furthermor) 131.3 598.67 T
(e, the compiler can use the value declaration to detect err) 193.36 598.67 T
(ors in) 470.08 598.67 T
(the r) 108 584.67 T
(eturn values \050for example, if we r) 130.15 584.67 T
(eturned only a single value or r) 291.49 584.67 T
(eturned a) 443.61 584.67 T
(value of the wr) 108 570.67 T
(ong type\051. Finally) 181.32 570.67 T
(, the compiler can be asked to issue a warning if) 265.85 570.67 T
(ther) 108 556.67 T
(e is a subclass of the ar) 127.4 556.67 T
(gument types for which no method is applicable.) 237.4 556.67 T
-0.18 (In addition to establishing a contract, specifying the types of the parameters) 135 542.67 P
(and r) 108 528.67 T
(eturn values of generic functions can allow the compiler to make additional) 133.52 528.67 T
(infer) 108 514.67 T
(ences, as described in Section 19.3 with r) 130.68 514.67 T
(egar) 326.98 514.67 T
(d to) 348.01 514.67 T
4 10 Q
(truncate/) 369.82 514.67 T
1 11 Q
(. In the absence) 423.82 514.67 T
-0.08 (of other information, the compiler is limited in the optimizations that it can make) 108 500.67 P
-0.01 (based solely on the parameter types in the generic function, so it is generally best) 108 486.67 P
(not to r) 108 472.67 T
(estrict arti\336cially the types of a generic function, but rather to use the) 143.23 472.67 T
(r) 108 458.67 T
(estricted types to document the generic function\325s pr) 112.15 458.67 T
(otocol.) 367.97 458.67 T
3 15 Q
(19.9  Open g) 108 419 T
(eneric functions) 181.27 419 T
1 11 Q
(By default, generic functions ar) 108 398.67 T
(e) 259.73 398.67 T
2 F
(sealed) 267.75 398.67 T
1 F
(. When you use) 299.52 398.67 T
4 10 Q
(define generic) 377.67 398.67 T
1 11 Q
(, that is) 461.67 398.67 T
-0.28 (the same as using) 108 384.67 P
4 10 Q
-0.61 (define sealed generic) 195.47 384.67 P
1 11 Q
-0.28 (. No other library can add methods to) 320.25 384.67 P
(a sealed generic function \321 not even on new classes that they may intr) 108 370.67 T
(oduce.) 451.5 370.67 T
(Methods cannot be added to, or r) 108 356.67 T
(emoved fr) 269.46 356.67 T
(om, the generic function at r) 319.21 356.67 T
(un time.) 456.29 356.67 T
-0.38 (The only methods on a sealed generic function ar) 108 342.67 P
-0.38 (e the methods that ar) 343.9 342.67 P
-0.38 (e de\336ned in) 444.98 342.67 P
(the library wher) 108 328.67 T
(e the generic function itself is de\336ned. Because of the r) 186.54 328.67 T
(estrictions) 450.08 328.67 T
(on a sealed generic function, the compiler) 108 314.67 T
(, using type-infer) 309.72 314.67 T
(ence information, can) 392.91 314.67 T
(usually narr) 108 300.67 T
(ow the choice of applicable methods for any particular call to the) 167.09 300.67 T
(generic function, eliminating most or all of the over) 108 286.67 T
(head of r) 357.59 286.67 T
(un-time dispatching) 400.91 286.67 T
(that would normally be expected of a dynamic language.) 108 272.67 T
(W) 135 258.67 T
(e saw in Chapter 13,) 144.99 258.67 T
0 F
(Libraries and Modules) 248.96 258.67 T
1 F
(, that we must de\336ne a generic) 348.79 258.67 T
(function that is part of a shar) 108 244.67 T
(ed pr) 248.14 244.67 T
(otocol using) 273.64 244.67 T
4 10 Q
(define open generic) 335.84 244.67 T
1 11 Q
(, so that) 449.84 244.67 T
(libraries sharing the pr) 108 230.67 T
(otocol can implement the pr) 218.7 230.67 T
(otocol for the classes that they) 355.16 230.67 T
(de\336ne, by adding methods. If we do not de\336ne the generic function to be open,) 108 216.67 T
-0.25 (other libraries ar) 108 202.67 P
-0.25 (e pr) 188.06 202.67 P
-0.25 (ohibited fr) 206.58 202.67 P
-0.25 (om adding methods to the generic function, which) 257.36 202.67 P
-0.33 (would make it useless as a pr) 108 188.67 P
-0.33 (otocol. Unfortunately) 248.42 188.67 P
-0.33 (, a generic function that is open) 351.33 188.67 P
-0.26 (cannot be optimized. Even when the compiler may be able to infer the exact types) 108 174.67 P
(of the ar) 108 160.67 T
(guments to the generic function in a particular call, because an open) 148.07 160.67 T
(generic function may have methods added or r) 108 146.67 T
(emoved, even at r) 336.02 146.67 T
(un time, the) 422.71 146.67 T
(compiler must pr) 108 132.67 T
(oduce code to handle all these possibilities.) 192.08 132.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "322" 336
%%Page: "323" 337
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.10 Open classes) 443.5 677.67 T
2 F
(323) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Because open generic functions cannot be optimized, you should use them) 135 640.67 T
(only when necessary) 108 626.67 T
(. Y) 208.36 626.67 T
(ou need to balance the division of your pr) 220.19 626.67 T
(ogram into) 423.32 626.67 T
(libraries against the need to export and open mor) 108 612.67 T
(e generic functions if the pr) 347.56 612.67 T
(o-) 480.38 612.67 T
(gram is too \336nely divided. This balance is illustrated by the considerations we) 108 598.67 T
-0.32 (made in designing a pr) 108 584.67 P
-0.32 (otocol in Section 13.9, page 214. When we chose to split the) 218.86 584.67 P
4 10 Q
(time) 108 570.67 T
1 11 Q
( and) 132 570.67 T
4 10 Q
(angle) 156.12 570.67 T
1 11 Q
( libraries, we wer) 186.12 570.67 T
(e for) 269.96 570.67 T
(ced to cr) 291.8 570.67 T
(eate the) 332.8 570.67 T
4 10 Q
(say) 373.18 570.67 T
1 11 Q
( pr) 391.18 570.67 T
(otocol library and) 404.69 570.67 T
(open the generic function) 108 556.67 T
4 10 Q
(say) 234.81 556.67 T
1 11 Q
(. In Section 19.1) 251.59 556.67 T
(1, we show how to r) 326.46 556.67 T
(egain certain) 424.47 556.67 T
(optimizations when you decide that opening a generic function is r) 108 542.67 T
(equir) 433.6 542.67 T
(ed.) 459.01 542.67 T
-0.22 (Note that generic functions that ar) 135 528.67 P
-0.22 (e de\336ned implicitly in a library \321 such as) 300.37 528.67 P
(those that ar) 108 514.67 T
(e de\336ned when you de\336ne only a single method, or those that ar) 168.15 514.67 T
(e) 481.3 514.67 T
(de\336ned for slot accessors \321 ar) 108 500.67 T
(e sealed by default. If you expect other libraries to) 255.79 500.67 T
(add methods to one of these implicit generic functions, you must de\336ne the) 108 486.67 T
(generic function explicitly to be open using) 108 472.67 T
4 10 Q
(define open generic) 320.71 472.67 T
1 11 Q
(.) 434.71 472.67 T
3 15 Q
(19.10  Open c) 108 433 T
(lasses) 187.1 433 T
1 11 Q
(By default, classes ar) 108 412.67 T
(e) 208.9 412.67 T
2 F
(sealed) 216.92 412.67 T
1 F
(. When you use) 248.69 412.67 T
4 10 Q
(define class) 326.83 412.67 T
1 11 Q
(, that is the same as) 398.83 412.67 T
(using) 108 398.67 T
4 10 Q
(define sealed class) 137.77 398.67 T
1 11 Q
(. Other libraries cannot dir) 251.77 398.67 T
(ectly subclass a sealed) 380.42 398.67 T
(class \321 they cannot de\336ne new classes that have your sealed class as a dir) 108 384.67 T
(ect) 467.4 384.67 T
(super) 108 370.67 T
(class. The only dir) 135.32 370.67 T
(ect subclasses of the class ar) 223.45 370.67 T
(e those subclasses that ar) 358.65 370.67 T
(e) 479.79 370.67 T
(de\336ned in the library wher) 108 356.67 T
(e the class itself is de\336ned. Extensive optimization) 238.68 356.67 T
-0.48 (opportunities occur when the methods of a sealed generic function ar) 108 342.67 P
-0.48 (e specialized) 440.17 342.67 P
-0.19 (on sealed classes. In this case, the compiler can usually choose the corr) 108 328.67 P
-0.19 (ect method) 447.45 328.67 P
-0.14 (of the generic function to call at compile time, eliminating any r) 108 314.67 P
-0.14 (un-time over) 414.79 314.67 P
-0.14 (head) 477.5 314.67 P
(for using a generic function.) 108 300.67 T
-0.34 (W) 135 286.67 P
-0.34 (e saw in Chapter 13,) 144.99 286.67 P
0 F
-0.34 (Libraries and Modules) 246.92 286.67 P
1 F
-0.34 (, that we must de\336ne a class that) 346.06 286.67 P
(is a shar) 108 272.67 T
(ed substrate, such as) 147.58 272.67 T
4 10 Q
(<sixty-unit>) 250.4 272.67 T
1 11 Q
(, using) 322.39 272.67 T
4 10 Q
(define open class) 357.66 272.67 T
1 11 Q
(, if the) 459.66 272.67 T
(libraries sharing the substrate ar) 108 258.67 T
(e expected to subclass the class. If we did not) 264.67 258.67 T
-0.23 (de\336ne the class to be open, other libraries would be pr) 108 244.67 P
-0.23 (evented fr) 368.88 244.67 P
-0.23 (om subclassing it) 417.94 244.67 P
(\321 which might be r) 108 230.67 T
(easonable if the substrate wer) 204.58 230.67 T
(e not intended to be extended) 348.52 230.67 T
(by subclassing.) 108 216.67 T
(Unlike an open generic function, an open class does not pr) 135 202.67 T
(event all optimi-) 418.96 202.67 T
(zation. If a generic function has a method applicable to an open class, but the) 108 188.67 T
(generic function is sealed, then the compiler might still be able to optimize) 108 174.67 T
(method dispatch if that compiler can infer the types of the ar) 108 160.67 T
(guments to the) 402.43 160.67 T
-0.02 (generic function at a particular call. Sometimes, the dispatch code will be slightly) 108 146.67 P
-0.17 (less optimal, because it must allow for arbitrary subclasses, rather than a \336xed set) 108 132.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "323" 337
%%Page: "324" 338
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(324) 72 677.67 T
0 F
(Chapter 19) 95.75 677.67 T
(Performance and Flexibility) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(of subclasses; in general, however) 108 640.67 T
(, opening a class is less costly than is opening a) 271.97 640.67 T
(generic function.) 108 626.67 T
-0.22 (Note that, although you cannot dir) 135 612.67 P
-0.22 (ectly subclass a sealed class fr) 302.9 612.67 P
-0.22 (om another) 445.72 612.67 P
(library) 108 598.67 T
(, you can subclass a sealed class in the library that de\336nes the sealed class.) 139.57 598.67 T
(It may not be obvious, but a cor) 108 584.67 T
(ollary of this r) 261.61 584.67 T
(ule of sealing is that you can de\336ne) 330.01 584.67 T
(an) 108 570.67 T
2 F
(open subclass) 122.65 570.67 T
1 F
( of a sealed class in the library that de\336nes the sealed class.) 192.6 570.67 T
-0.42 (Using a sealed class with an open subclass is one simple way to get both \337exibility) 108 556.67 P
(and ef) 108 542.67 T
(\336ciency \321 the classes in the sealed branch will be optimized by the com-) 138.11 542.67 T
(piler) 108 528.67 T
(, while the open subclass can be exported for other libraries to build on and) 129.81 528.67 T
(extend.) 108 514.67 T
3 15 Q
(19.11  Sealed domains) 108 475 T
1 11 Q
(When you de\336ne a pr) 108 454.67 T
(otocol that is meant to be extended by many libraries, both) 213.4 454.67 T
(the base classes and the generic functions that make up the pr) 108 440.67 T
(otocol must be) 407.61 440.67 T
(open. This simple exigency might make it seem that ther) 108 426.67 T
(e is no hope of optimiz-) 382.19 426.67 T
(ing such a pr) 108 412.67 T
(otocol \321 however) 170.81 412.67 T
(, ther) 258.86 412.67 T
(e is hope. Y) 283.77 412.67 T
(ou use the) 338.52 412.67 T
4 10 Q
(define sealed) 391.23 412.67 T
-0.86 (domain) 108 398.67 P
1 11 Q
-0.39 ( form to seal selectively subsets or) 144 398.67 P
2 F
-0.39 (branches) 309.24 398.67 P
1 F
-0.39 ( of the pr) 354.45 398.67 P
-0.39 (otocol, permitting the) 397.2 398.67 P
(compiler to make all the optimizations that would be possible if the classes and) 108 384.67 T
(generic functions wer) 108 370.67 T
(e sealed, but only for the particular subset or branch in) 213.02 370.67 T
(question.) 108 356.67 T
-0.03 (As an example, consider the) 108 232.67 P
4 10 Q
-0.06 (say) 247.48 232.67 P
1 11 Q
-0.03 ( pr) 265.48 232.67 P
-0.03 (otocol as used in the) 278.96 232.67 P
4 10 Q
-0.06 (time) 380.59 232.67 P
1 11 Q
-0.03 ( library) 404.59 232.67 P
-0.03 (. Because the) 438.88 232.67 P
4 10 Q
(say) 108 218.67 T
1 11 Q
( generic function is de\336ned to be open, even if the compiler can infer that the) 126 218.67 T
-0.03 (ar) 108 204.67 P
-0.03 (gument to) 117.65 204.67 P
4 10 Q
-0.07 (say) 170.39 204.67 P
1 11 Q
-0.03 ( is a) 188.39 204.67 P
4 10 Q
-0.07 (<time>) 209.91 204.67 P
1 11 Q
-0.03 ( or) 245.91 204.67 P
4 10 Q
-0.07 (<time-offset>) 261.7 204.67 P
1 11 Q
-0.03 (, it must insert code to choose the) 339.7 204.67 P
(appr) 108 190.67 T
(opriate method to call at r) 130.87 190.67 T
(un time on the of) 256.55 190.67 T
(f chance that some other library) 339.49 190.67 T
(has added or r) 108 176.67 T
(emoved methods for) 178.25 176.67 T
4 10 Q
(say) 282.06 176.67 T
1 11 Q
(. The solution is to add the following de\336-) 298.84 176.67 T
(nition to the) 108 162.67 T
4 10 Q
(time) 169.9 162.67 T
1 11 Q
( library:) 193.9 162.67 T
5 9 Q
(// Declare the say generic function sealed, for all time classes) 108 142 T
4 F
(define sealed domain say \050<time>\051;) 108 131 T
2 11 Q
(Advanced topic:) 141 322.67 T
1 F
( Sealed domains ar) 222.27 322.67 T
(e one of the most dif) 314.11 322.67 T
(\336cult con-) 413.08 322.67 T
(cepts of the Dylan language to understand fully) 141 308.67 T
(. It is r) 372.09 308.67 T
(easonable to) 402.39 308.67 T
(defer car) 141 294.67 T
(eful r) 183.55 294.67 T
(eading of this section until you ar) 209.21 294.67 T
(e faced with a situa-) 371.88 294.67 T
(tion similar to the example \321 an imported open class and generic) 141 280.67 T
(function that will be specialized by your library) 141 266.67 T
(.) 371.12 266.67 T
135 335.88 135 259.13 2 L
V
0.25 H
0 Z
N
486 335.88 486 259.13 2 L
V
N
134.88 336 486.12 336 2 L
V
N
134.88 259 486.12 259 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "324" 338
%%Page: "325" 339
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.11 Sealed domains) 433.65 677.67 T
2 F
(325) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.22 (This statement is essentially a guarantee to the compiler that the only methods on) 108 640.67 P
4 10 Q
-0.29 (say) 108 626.67 P
1 11 Q
-0.13 ( that ar) 126 626.67 P
-0.13 (e applicable to) 159.96 626.67 P
4 10 Q
-0.29 (<time>) 232.73 626.67 P
1 11 Q
-0.13 ( objects \050and also to) 268.73 626.67 P
4 10 Q
-0.29 (<time-of-day>) 366.14 626.67 P
1 11 Q
-0.13 ( and) 444.14 626.67 P
4 10 Q
-0.29 (<time-) 468 626.67 P
(offset>) 108 612.67 T
1 11 Q
( objects, because) 150 612.67 T
4 10 Q
(<time-of-day>) 232.37 612.67 T
1 11 Q
( and) 310.37 612.67 T
4 10 Q
(<time-offset>) 334.49 612.67 T
1 11 Q
( ar) 412.49 612.67 T
(e subclasses of) 424.89 612.67 T
4 10 Q
-0.14 (<time>) 108 598.67 P
1 11 Q
-0.06 (\051 ar) 144 598.67 P
-0.06 (e those that ar) 160 598.67 P
-0.06 (e de\336ned explicitly in the) 227.98 598.67 P
4 10 Q
-0.14 (time) 353.53 598.67 P
1 11 Q
-0.06 ( library \050and in any librar-) 377.53 598.67 P
(ies fr) 108 584.67 T
(om which that one imports\051. Thus, when the compiler can pr) 131.69 584.67 T
(ove that the) 426.74 584.67 T
(ar) 108 570.67 T
(gument to) 117.65 570.67 T
4 10 Q
(say) 170.46 570.67 T
1 11 Q
( is a) 188.46 570.67 T
4 10 Q
(<time-offset>) 210.07 570.67 T
1 11 Q
(, it can call the corr) 288.07 570.67 T
(ect method dir) 379.57 570.67 T
(ectly) 450.58 570.67 T
(, with-) 472.41 570.67 T
(out any r) 108 556.67 T
(un-time dispatch over) 152 556.67 T
(head.) 259.17 556.67 T
(Another way to get the same ef) 135 542.67 T
(fect as a sealed domain, which is also self-) 286.56 542.67 T
(documenting, is to use) 108 528.67 T
4 10 Q
(define sealed method) 220.71 528.67 T
1 11 Q
( when de\336ning individual meth-) 340.71 528.67 T
-0.32 (ods on the pr) 108 514.67 P
-0.32 (otocol. So, for instance, in the case of the) 171.1 514.67 P
4 10 Q
-0.7 (time) 366.69 514.67 P
1 11 Q
-0.32 ( library) 390.69 514.67 P
-0.32 (, we might have) 424.69 514.67 P
(de\336ned the two methods on) 108 500.67 T
4 10 Q
(say) 247.58 500.67 T
1 11 Q
( as follows:) 265.58 500.67 T
4 9 Q
(define sealed method say \050time :: <time>\051) 108 480 T
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 118.8 469 T
(format-out\050"%d:%s%d", hours, if \050minutes < 10\051 "0" else " " end, minutes\051;) 118.8 458 T
(end method say;) 108 447 T
(define sealed method say \050time :: <time-offset>\051 => \050\051) 108 428 T
(format-out\050"%s ", if \050time.past?\051 "minus" else "plus" end\051;) 118.8 417 T
(next-method\050\051;) 118.8 406 T
(end method say;) 108 395 T
1 11 Q
-0.26 (De\336ning a sealed method is the same as de\336ning the generic function to be sealed) 108 374.67 P
(over the domain of the method\325s specializers. In ef) 108 360.67 T
(fect, this technique says that) 352.88 360.67 T
(you do not intend anyone to add mor) 108 346.67 T
(e speci\336c methods in that domain, or to cr) 290.4 346.67 T
(e-) 494.14 346.67 T
(ate classes that would change the applicability of the sealed methods.) 108 332.67 T
-0.33 (W) 135 318.67 P
-0.33 (ith either the) 145.4 318.67 P
4 10 Q
-0.72 (define sealed domain) 209.18 318.67 P
1 11 Q
-0.33 ( form or the sealed methods, the use) 327.74 318.67 P
(of) 108 304.67 T
4 10 Q
(say) 120.42 304.67 T
1 11 Q
( on) 138.42 304.67 T
4 10 Q
(<time>) 156.33 304.67 T
1 11 Q
( objects will be as ef) 192.33 304.67 T
(\336cient as it would be wer) 288.17 304.67 T
(e) 410.55 304.67 T
4 10 Q
(say) 418.56 304.67 T
1 11 Q
( not an open) 436.56 304.67 T
(generic function after all. At the same time, other libraries that cr) 108 290.67 T
(eate new classes) 422.12 290.67 T
(can still extend the) 108 276.67 T
4 10 Q
(say) 201.82 276.67 T
1 11 Q
( pr) 219.82 276.67 T
(otocol to cover those classes.) 233.33 276.67 T
(Sealed domains impose r) 135 262.67 T
(estrictions on the ability of other libraries to cr) 256.8 262.67 T
(eate) 480.87 262.67 T
(new methods, to r) 108 248.67 T
(emove new methods, and to cr) 195.95 248.67 T
(eate new classes:) 345.37 248.67 T
-0.47 (Y) 135 234.67 P
-0.47 (ou cannot add methods to an open generic function imported fr) 141.32 234.67 P
-0.47 (om another) 446.2 234.67 P
(library that would fall into the sealed domain of) 108 220.67 T
0 F
(any) 344.2 220.67 T
1 F
( other library) 360.7 220.67 T
(. Y) 423.38 220.67 T
(ou can avoid) 435.21 220.67 T
-0.22 (this r) 108 206.67 P
-0.22 (estriction by ensuring that at least one of the specializers of your method is a) 132.53 206.67 P
(subtype of a type de\336ned in your library) 108 192.67 T
(.) 304.27 192.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "325" 339
%%Page: "326" 340
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(326) 72 677.67 T
0 F
(Chapter 19) 95.75 677.67 T
(Performance and Flexibility) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.22 (When you seal a domain of a generic function imported fr) 108 320.67 P
-0.22 (om another library) 387.55 320.67 P
-0.22 (, you) 477.42 320.67 P
-0.14 (will not cause con\337icts with other libraries, as long as both of the following condi-) 108 306.67 P
(tions hold:) 108 292.67 T
2 F
(1.) 117 272.67 T
1 F
-0.08 (At least one of the types in the sealed domain is a subtype of a class de\336ned) 135 272.67 P
(in your library) 135 258.67 T
2 F
(2.) 117 238.67 T
1 F
(No additional subtypes can be de\336ned for any of the types in the sealed) 135 238.67 T
(domain) 135 224.67 T
(In the case of a type that is a class, the \336rst condition means that you must have) 108 204.67 T
(de\336ned either the class or one of its super) 108 190.67 T
(classes in your library) 309.75 190.67 T
(. The second con-) 415.12 190.67 T
-0.08 (dition means that the classes in the domain must not have any open subclasses \050a) 108 176.67 P
(degenerate case of which is a leaf class \321 a class with no subclasses at all\051.) 108 162.67 T
2 F
(Comparison with C++:) 141 620.67 T
1 F
( A C++ compiler could optimize out the dis-) 255.46 620.67 T
(patching of a virtual function by analyzing the entir) 141 606.67 T
(e scope of the) 392.33 606.67 T
(ar) 141 592.67 T
(gument on which the virtual function dispatches, and pr) 150.65 592.67 T
(oving that) 425.18 592.67 T
(ar) 141 578.67 T
(gument\325s exact class. Unfortunately) 150.65 578.67 T
(, that scope is often the entir) 322.96 578.67 T
(e) 459.37 578.67 T
-0.43 (pr) 141 564.67 P
-0.43 (ogram, so this optimization often can be performed only by a linker) 151.76 564.67 P
-0.43 (.) 474.93 564.67 P
(Even a linker cannot make this optimization when a library is com-) 141 550.67 T
(piled, because the classes of a library can be subclassed by a client.) 141 536.67 T
(The complexity is compounded for dynamic-link libraries, wher) 141 522.67 T
(e) 452.44 522.67 T
(ther) 141 508.67 T
(e may be multiple clients at once. As a r) 160.4 508.67 T
(esult, this optimization is) 352.99 508.67 T
(rar) 141 494.67 T
(ely achieved in C++.) 154.99 494.67 T
-0.35 (In Dylan, sealed classes, sealed generic functions, and sealed) 168 480.67 P
(domains explicitly state which generic functions and classes may) 141 466.67 T
(be extended, and, mor) 141 452.67 T
(e important, which cannot. The library) 249.5 452.67 T
(designer plans in advance exactly what extensibility the library) 141 438.67 T
(will have. The Dylan compiler can then optimize dispatching on) 141 424.67 T
(sealed generic functions and classes and within sealed domains) 141 410.67 T
(with the assurance that no client will violate the assumptions of) 141 396.67 T
(the optimization. The sealing r) 141 382.67 T
(estrictions against subclassing or) 289.43 382.67 T
-0.37 (changing method applicability ar) 141 368.67 P
-0.37 (e automatically enfor) 301.39 368.67 P
-0.37 (ced on each) 403.53 368.67 P
(client of a Dylan library) 141 354.67 T
(.) 255.01 354.67 T
135 633.88 135 347.13 2 L
V
0.25 H
0 Z
N
486 633.88 486 347.13 2 L
V
N
134.88 634 486.12 634 2 L
V
N
134.88 347 486.12 347 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "326" 340
%%Page: "327" 341
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.11 Sealed domains) 433.65 677.67 T
2 F
(327) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(If you need to seal a domain over a class that has open subclasses, you will) 135 640.67 T
(need a thor) 108 626.67 T
(ough understanding of the sealing constraints detailed in) 162.8 626.67 T
0 F
(The Dylan) 443.51 626.67 T
(Refer) 108 612.67 T
(ence Manual) 131.03 612.67 T
1 F
(, but these two simple r) 188.38 612.67 T
(ules should handle many common cases.) 302.05 612.67 T
-0.19 (In our example, we obeyed both r) 135 598.67 P
-0.19 (ules of thumb: our methods for) 297.68 598.67 P
4 10 Q
-0.42 (say) 451 598.67 P
1 11 Q
-0.19 ( ar) 469 598.67 P
-0.19 (e on) 481.2 598.67 P
(classes we de\336ned, and our sealing was over classes that will not be further sub-) 108 584.67 T
(classed. The r) 108 570.67 T
(ules of thumb not only keep you fr) 173.82 570.67 T
(om violating sealing constraints,) 342.48 570.67 T
(they make for good pr) 108 556.67 T
(otocol design: a library that extends a pr) 216.59 556.67 T
(otocol r) 411.86 556.67 T
(eally) 448.45 556.67 T
-0.41 (should extend it only for classes it fully understands, which usually means classes) 108 542.67 P
(it cr) 108 528.67 T
(eates.) 126.57 528.67 T
(As an example of the r) 135 514.67 T
(estriction on subclassing open classes involved in a) 244.19 514.67 T
(sealed domain, if the) 108 500.67 T
4 10 Q
(<time>) 212.04 500.67 T
1 11 Q
( class wer) 248.04 500.67 T
(e an open class, we still could not add the) 295.04 500.67 T
(following class in a library that used the) 108 486.67 T
4 10 Q
(time) 305.39 486.67 T
1 11 Q
( library:) 329.39 486.67 T
4 9 Q
(define class <place-and-time> \050<position>, <time>\051) 108 463 T
(end class <place-and-time>;) 108 452 T
1 11 Q
(As far as the compiler is concerned, it \322knows\323 that the only) 108 425.67 T
4 10 Q
(say) 403.38 425.67 T
1 11 Q
( method applica-) 421.38 425.67 T
(ble to a) 108 411.67 T
4 10 Q
(<time>) 145.9 411.67 T
1 11 Q
( is the one in the) 181.9 411.67 T
4 10 Q
(time) 264.05 411.67 T
1 11 Q
( library) 288.05 411.67 T
(. \050That is what we have told it with) 322.37 411.67 T
(our) 108 397.67 T
4 10 Q
(sealed domain) 127.73 397.67 T
1 11 Q
( de\336nition.\051 It would be valid to pass a) 205.73 397.67 T
4 10 Q
(<place-and-time>) 396.09 397.67 T
1 11 Q
(object as an ar) 108 383.67 T
(gument to a function that accepted) 176.37 383.67 T
4 10 Q
(<time>) 348.25 383.67 T
1 11 Q
( objects, but within that) 384.25 383.67 T
(function the compiler might have alr) 108 369.67 T
(eady optimized a call to) 286.27 369.67 T
4 10 Q
(say) 405.31 369.67 T
1 11 Q
( to the method) 423.31 369.67 T
-0.29 (for) 108 355.67 P
4 10 Q
-0.64 (<time>) 124.47 355.67 P
1 11 Q
-0.29 ( objects \050based on) 160.47 355.67 P
4 10 Q
-0.64 (<time>) 247.66 355.67 P
1 11 Q
-0.29 ( being in the sealed domain of) 283.66 355.67 P
4 10 Q
-0.64 (say) 430.61 355.67 P
1 11 Q
-0.29 (\051. But ther) 448.61 355.67 P
-0.29 (e) 496.28 355.67 P
(is also a method for) 108 341.67 T
4 10 Q
(say) 206.2 341.67 T
1 11 Q
( on) 224.2 341.67 T
4 10 Q
(<position>) 242.1 341.67 T
1 11 Q
(, and, mor) 302.11 341.67 T
(e important, we pr) 351.59 341.67 T
(obably will) 442.01 341.67 T
(want to de\336ne a method speci\336cally for) 108 327.67 T
4 10 Q
(<place-and-time>) 303.22 327.67 T
1 11 Q
(. Because of this) 399.22 327.67 T
(ambiguity) 108 313.67 T
(, the class) 156.93 313.67 T
4 10 Q
(<place-and-time>) 206.1 313.67 T
1 11 Q
( cannot be de\336ned in a separate library) 302.1 313.67 T
(,) 489.93 313.67 T
(and the compiler will signal an err) 108 299.67 T
(or) 275.13 299.67 T
(.) 284.67 299.67 T
-0.02 (Note that the class) 135 285.67 P
4 10 Q
-0.05 (<place-and-time>) 227.16 285.67 P
1 11 Q
-0.02 ( could be de\336ned in the) 323.16 285.67 P
4 10 Q
-0.05 (time) 440.22 285.67 P
1 11 Q
-0.02 ( library) 464.22 285.67 P
-0.02 (.) 498.52 285.67 P
-0.21 (The compiler can deal corr) 108 271.67 P
-0.21 (ectly with classes that may straddle a sealed domain, if) 236.66 271.67 P
(they ar) 108 257.67 T
(e known in the library wher) 141.77 257.67 T
(e the sealed domain is de\336ned. It would also) 277.53 257.67 T
(be valid to subclass) 108 243.67 T
4 10 Q
(<time>) 205.07 243.67 T
1 11 Q
( in any way that did not change the applicability of) 241.07 243.67 T
(methods in any sealed generic-function domains that include) 108 229.67 T
4 10 Q
(<time>) 408.12 229.67 T
1 11 Q
(. The actual) 444.12 229.67 T
(r) 108 215.67 T
(ule involved depends on an analysis of the exact methods of the generic func-) 112.26 215.67 T
(tion, and the r) 108 201.67 T
(ule is complicated enough that you should just r) 176.33 201.67 T
(ely on your com-) 410.76 201.67 T
(piler to detect illegal situations.) 108 187.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "327" 341
%%Page: "328" 342
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(328) 72 677.67 T
0 F
(Chapter 19) 95.75 677.67 T
(Performance and Flexibility) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(19.12  Slot accessor) 108 638 T
(s) 225.45 638 T
1 11 Q
(Dylan does allow you to omit de\336nition of a generic function. As we mentioned) 108 617.67 T
(earlier) 108 603.67 T
(, if you de\336ne a method without also de\336ning a generic function, Dylan) 138.32 603.67 T
(implicitly cr) 108 589.67 T
(eates a generic function with the most general types for the parame-) 166.7 589.67 T
(ters and r) 108 575.67 T
(eturn values that ar) 154.13 575.67 T
(e compatible with the method. The most common) 248.82 575.67 T
(case of implicit generic functions is for the slot-accessor methods that ar) 108 561.67 T
(e cr) 456.32 561.67 T
(eated) 473.36 561.67 T
-0.34 (when a new class is de\336ned. Because these generic functions typically have only a) 108 547.67 P
-0.19 (single method and ar) 108 533.67 P
-0.19 (e) 210.5 533.67 P
2 F
-0.19 (sealed) 218.33 533.67 P
1 F
-0.19 ( by default \050see Section 19.9\051, the compiler can make) 250.1 533.67 P
(extensive optimizations for slot accessors, ideally making slot access no mor) 108 519.67 T
(e) 477.18 519.67 T
(expensive than an array r) 108 505.67 T
(efer) 231.32 505.67 T
(ence or str) 249.67 505.67 T
(uctur) 299.85 505.67 T
(e-member access in other languages.) 325.73 505.67 T
-0.44 (Even when a slot is inherited by subclassing, a good Dylan compiler will use) 135 491.67 P
(a) 108 477.67 T
2 F
(coloring algorithm) 116.25 477.67 T
1 F
( to assign slots to the same of) 210.06 477.67 T
(fset in each subclass, keeping) 351.03 477.67 T
(the cost of slot access to a minimum. Y) 108 463.67 T
(ou can use primary classes \050see Section) 294.13 463.67 T
(19.13\051 to guarantee ef) 108 449.67 T
(\336cient slot access.When a pr) 211.61 449.67 T
(ogram de\336nes explicit methods) 348.01 449.67 T
(for a slot getter or setter generic function, of course, the over) 108 435.67 T
(head is gr) 400.59 435.67 T
(eater) 448.11 435.67 T
(.) 471.26 435.67 T
(In the) 108 311.67 T
4 10 Q
(<sixty-unit>) 138.87 311.67 T
1 11 Q
( class, we speci\336ed an initial value for) 210.87 311.67 T
4 10 Q
(total-seconds) 397.27 311.67 T
1 11 Q
(;) 475.27 311.67 T
(hence, ther) 108 297.67 T
(e is no need to check that the slot has been initialized befor) 161.13 297.67 T
(e it is) 446.01 297.67 T
-0.43 (accessed. In some situations, it may not be feasible to give a default or initial value) 108 283.67 P
(for a slot. Dylan permits this omission and will ensur) 108 269.67 T
(e that the slot is initialized) 365.82 269.67 T
(befor) 108 255.67 T
(e that slot is used; of course, this check does not come for fr) 133.17 255.67 T
(ee, so it is pr) 420.6 255.67 T
(efer-) 480.97 255.67 T
-0.08 (able to pr) 108 241.67 P
-0.08 (ovide initial values wher) 153.75 241.67 P
-0.08 (e possible. In fact, because we always expect to) 273.95 241.67 P
(initialize the) 108 227.67 T
4 10 Q
(total-seconds) 171.02 227.67 T
1 11 Q
( slot when we make a new) 249.02 227.67 T
4 10 Q
(<sixty-unit>) 380.36 227.67 T
1 11 Q
(, it would) 452.36 227.67 T
(be mor) 108 213.67 T
(e accurate to specify) 141.97 213.67 T
4 10 Q
(<sixty-unit>) 242.84 213.67 T
1 11 Q
( as follows:) 314.84 213.67 T
4 9 Q
(define open abstract class <sixty-unit> \050<object>\051) 108 193 T
(slot total-seconds :: <integer>,) 118.8 182 T
(required-init-keyword: total-seconds:,) 129.6 171 T
(end class <sixty-unit>;) 108 160 T
2 11 Q
(Comparison with C++:) 141 401.67 T
1 F
( Dylan classes ar) 255.46 401.67 T
(e similar to virtual base) 335.93 401.67 T
(classes with virtual data members in that the of) 141 387.67 T
(fsets of their data) 370.66 387.67 T
(members ar) 141 373.67 T
(e not \336xed, and access to the data members can be over-) 198.45 373.67 T
(ridden. See Appendix B.2,) 141 359.67 T
0 F
(The concept of classes) 273.24 359.67 T
1 F
(, for a mor) 368.86 359.67 T
(e detailed) 419.24 359.67 T
(analogy) 141 345.67 T
(.) 178.62 345.67 T
135 414.88 135 338.13 2 L
V
0.25 H
0 Z
N
486 414.88 486 338.13 2 L
V
N
134.88 415 486.12 415 2 L
V
N
134.88 338 486.12 338 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "328" 342
%%Page: "329" 343
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.12 Slot accessors) 440.17 677.67 T
2 F
(329) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(That is, rather than giving the slot an initial value of) 108 640.67 T
4 10 Q
(0) 363.08 640.67 T
1 11 Q
( and an optional) 369.08 640.67 T
4 10 Q
(init-keyword:) 108 626.67 T
1 11 Q
(, we simply r) 186 626.67 T
(equir) 249.1 626.67 T
(e that the slot be initialized when we make a) 274.51 626.67 T
4 10 Q
-0.55 (<sixty-unit>) 108 612.67 P
1 11 Q
-0.25 ( object. Of course, the initial value must obey the type constraint of) 180 612.67 P
4 10 Q
(<integer>) 108 598.67 T
1 11 Q
(. The compiler can still make the infer) 162 598.67 T
(ence that the slot will always be) 344.82 598.67 T
(initialized and will always have an integer value.) 108 584.67 T
(Always initializing slots, either with a default value or r) 108 432.67 T
(equir) 379.37 432.67 T
(ed init-keywor) 404.78 432.67 T
(d,) 476.4 432.67 T
(will make slot access ef) 108 418.67 T
(\336cient.) 220.43 418.67 T
(Finally) 135 404.67 T
(, in many cases, slots hold values that will not change over the life-) 167.52 404.67 T
-0.23 (time of each instance \050although they may be dif) 108 390.67 P
-0.23 (fer) 336.54 390.67 P
-0.23 (ent values for each instance\051. In) 349.62 390.67 P
(the case of the) 108 376.67 T
4 10 Q
(<sixty-unit>) 179.5 376.67 T
1 11 Q
( class, we never change the value of) 251.5 376.67 T
4 10 Q
(total-) 427.42 376.67 T
-0.66 (seconds) 108 362.67 P
1 11 Q
-0.3 (. When adding two instances, we cr) 150 362.67 P
-0.3 (eate a new one to hold the new value,) 320.73 362.67 P
(rather than changing one of the ar) 108 348.67 T
(gument instances \050that way) 273.11 348.67 T
(, we do not have to) 405.96 348.67 T
(worry about changing an instance that may still be in use by some other part of) 108 334.67 T
(the pr) 108 320.67 T
(ogram\051. In such cases, declaring the slot to be) 136.76 320.67 T
4 10 Q
(constant) 359.33 320.67 T
1 11 Q
( both documents) 407.33 320.67 T
(and enfor) 108 306.67 T
(ces this intent. Furthermor) 154.86 306.67 T
(e, the compiler can often make additional) 283.54 306.67 T
(optimizations for slots that ar) 108 292.67 T
(e known never to be modi\336ed. The \336nal de\336nition) 251.03 292.67 T
(of) 108 278.67 T
4 10 Q
(<sixty-unit>) 120.42 278.67 T
1 11 Q
( is as follows:) 192.42 278.67 T
4 9 Q
(define open abstract class <sixty-unit> \050<object>\051) 108 258 T
(constant slot total-seconds :: <integer>,) 118.8 247 T
(required-init-keyword: total-seconds:,) 129.6 236 T
(end class <sixty-unit>;) 108 225 T
1 11 Q
(\050The) 108 204.67 T
4 10 Q
(constant) 132.83 204.67 T
1 11 Q
( declaration is simply shorthand for the slot option) 180.83 204.67 T
4 10 Q
(setter: #f) 430.13 204.67 T
1 11 Q
(,) 490.13 204.67 T
(meaning that ther) 108 190.67 T
(e is no way to set the slot.\051) 194.58 190.67 T
2 F
(Comparison with C:) 141 550.67 T
1 F
( Dylan always ensur) 242.12 550.67 T
(es that a slot is initialized) 341.38 550.67 T
(befor) 141 536.67 T
(e that slot is accessed, automatically inserting a r) 166.17 536.67 T
(un-time check) 402.01 536.67 T
(when it cannot pr) 141 522.67 T
(ove at compile time that the slot is always pr) 226.82 522.67 T
(operly) 443.37 522.67 T
(initialized. C puts this bur) 141 508.67 T
(den of safety on the pr) 267.74 508.67 T
(ogrammer) 376.77 508.67 T
(, and that) 426.97 508.67 T
-0.33 (can be the sour) 141 494.67 P
-0.33 (ce of subtle bugs. A number of debugging and analysis) 213.1 494.67 P
(tools ar) 141 480.67 T
(e available as addons to C, to help the pr) 176.86 480.67 T
(ogrammer with this) 373.96 480.67 T
(task.) 141 466.67 T
135 563.88 135 459.12 2 L
V
0.25 H
0 Z
N
486 563.88 486 459.12 2 L
V
N
134.88 564 486.12 564 2 L
V
N
134.88 459 486.12 459 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "329" 343
%%Page: "330" 344
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(330) 72 677.67 T
0 F
(Chapter 19) 95.75 677.67 T
(Performance and Flexibility) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(19.13  Prim) 108 638 T
(ar) 172.96 638 T
(y c) 184.71 638 T
(lasses) 201.59 638 T
1 11 Q
(Classes have one additional variation that you can use to optimize performance.) 108 617.67 T
(A class that is de\336ned as) 108 603.67 T
4 10 Q
(primary) 230.11 603.67 T
1 11 Q
( allows the compiler to generate the most ef) 272.11 603.67 T
(\336-) 483.65 603.67 T
(cient code for accessing the slots de\336ned in the primary class \050whether the acces-) 108 589.67 T
-0.13 (sor is applied to the primary class or to one of that class\325s subclasses\051. However) 108 575.67 P
-0.13 (, a) 490.51 575.67 P
(primary class cannot be combined with any other primary class \050unless one is a) 108 561.67 T
(subclass of the other\051. This r) 108 547.67 T
(estriction implies that you should delay declaring a) 244.15 547.67 T
(class to be primary until you ar) 108 533.67 T
(e sur) 259.61 533.67 T
(e of your inheritance design. Also, because) 283.08 533.67 T
(sealed classes ar) 108 519.67 T
(e alr) 186.62 519.67 T
(eady highly optimized, the) 207.48 519.67 T
4 10 Q
(primary) 341.34 519.67 T
1 11 Q
( declaration is of most) 383.34 519.67 T
(use for open classes.) 108 505.67 T
(As an example, consider the class) 135 491.67 T
4 10 Q
(<sixty-unit>) 300.27 491.67 T
1 11 Q
(, and its slot) 372.27 491.67 T
4 10 Q
(total-) 433.56 491.67 T
(seconds) 108 477.67 T
1 11 Q
(, as used in this method for) 150 477.67 T
4 10 Q
(decode-total-seconds) 284.62 477.67 T
1 11 Q
(:) 404.62 477.67 T
4 9 Q
(define method decode-total-seconds) 108 457 T
(\050sixty-unit :: <sixty-unit>\051) 129.6 446 T
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 113.4 435 T
(decode-total-seconds\050sixty-unit.total-seconds\051;) 118.8 424 T
(end method decode-total-seconds;) 108 413 T
1 11 Q
-0.02 (Although the generic function for the slot accessor) 108 392.67 P
4 10 Q
-0.04 (total-seconds) 355.21 392.67 P
1 11 Q
-0.02 ( is sealed, and) 433.21 392.67 P
-0.27 (it is trivial for the compiler to infer that its ar) 108 378.67 P
-0.27 (gument is a) 321.88 378.67 P
4 10 Q
-0.58 (<sixty-unit>) 380.42 378.67 P
1 11 Q
-0.27 ( in the call) 452.42 378.67 P
4 10 Q
(sixty-unit.total-seconds) 108 364.67 T
1 11 Q
(, because) 252 364.67 T
4 10 Q
(<sixty-unit>) 298.55 364.67 T
1 11 Q
( is declar) 370.55 364.67 T
(ed open, the) 413.64 364.67 T
(compiler cannot emit the most ef) 108 350.67 T
(\336cient code for that call. Because an open class) 267.49 350.67 T
(could be mixed with any number of other classes, ther) 108 336.67 T
(e is no guarantee that the) 371.23 336.67 T
(slots of every object that is a) 108 322.67 T
4 10 Q
(<sixty-unit>) 247.1 322.67 T
1 11 Q
( will always be stor) 319.1 322.67 T
(ed in the same) 412.78 322.67 T
(or) 108 308.67 T
(der \321ther) 118.15 308.67 T
(e is no guarantee that) 167.64 308.67 T
4 10 Q
(total-seconds) 274.63 308.67 T
1 11 Q
( will always be the \336rst slot in) 352.63 308.67 T
(an object that is an indir) 108 294.67 T
(ect instance of) 224.57 294.67 T
4 10 Q
(<sixty-unit>) 296.13 294.67 T
1 11 Q
(, for instance.) 368.13 294.67 T
(Declaring a class) 135 280.67 T
4 10 Q
(primary) 219.1 280.67 T
1 11 Q
( is essentially making a guarantee that the com-) 261.1 280.67 T
(piler can always put the primary class\325s slots in the same place in an instance,) 108 266.67 T
(and that any other super) 108 252.67 T
(classes will have to adjust:) 227.65 252.67 T
4 9 Q
(define abstract open primary class <sixty-unit> \050<object>\051) 108 232 T
(constant slot total-seconds :: <integer>,) 118.8 221 T
(required-init-keyword: total-seconds:;) 129.6 210 T
(end class <sixty-unit>;) 108 199 T
1 11 Q
(By adding the) 108 178.67 T
4 10 Q
(primary) 179.01 178.67 T
1 11 Q
( declaration to the de\336nition, any library that subclasses) 221.01 178.67 T
4 10 Q
-0.82 (<sixty-unit>) 108 164.67 P
1 11 Q
-0.38 ( is guaranteed to put) 180 164.67 P
4 10 Q
-0.82 (total-seconds) 281.5 164.67 P
1 11 Q
-0.38 ( at the same of) 359.5 164.67 P
-0.38 (fset. Hence, the) 427.96 164.67 P
(compiler can turn the call) 108 150.67 T
4 10 Q
(sixty-unit.total-seconds) 234.77 150.67 T
1 11 Q
( into a single machine) 378.77 150.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "330" 344
%%Page: "331" 345
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.14 Additional efficiency information) 365.48 677.67 T
2 F
(331) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(instr) 108 640.67 T
(uction \050load with constant of) 130.11 640.67 T
(fset\051, without concern over which subclass of) 269.78 640.67 T
4 10 Q
(<sixty-unit>) 108 626.67 T
1 11 Q
( was passed as an ar) 180 626.67 T
(gument.) 278.23 626.67 T
(It is permissible to make subclasses of a primary class also primary) 108 502.67 T
(, essentially) 431.94 502.67 T
-0.31 (fr) 108 488.67 P
-0.31 (eezing the assignment of all the slots in the subclass too. What is not permissible) 115.81 488.67 P
(is to multiply inherit fr) 108 474.67 T
(om mor) 218.93 474.67 T
(e than one primary class; as you can see, such) 257.27 474.67 T
(behavior would lead to a con\337ict between the \336xed slot assignments.) 108 460.67 T
(Because primary classes r) 135 446.67 T
(estrict extension in this way) 259.01 446.67 T
(, you should use them) 393.05 446.67 T
(sparingly in libraries intended to be softwar) 108 432.67 T
(e components. Primary classes ar) 321.32 432.67 T
(e of) 482.24 432.67 T
-0.06 (most bene\336t in lar) 108 418.67 P
-0.06 (ge, modular pr) 195.76 418.67 P
-0.06 (ograms, wher) 268.15 418.67 P
-0.06 (e all the clients of each component) 334.93 418.67 P
-0.39 (ar) 108 404.67 P
-0.39 (e known, and the need for extensibility is bounded; typically that occurs towar) 117.65 404.67 P
-0.39 (d) 494.91 404.67 P
(the end of a pr) 108 390.67 T
(oject, when you ar) 178.58 390.67 T
(e tuning for performance.) 267.54 390.67 T
3 15 Q
(19.14  Ad) 108 351 T
(ditional ef\336cienc) 161.91 351 T
(y inf) 258.87 351 T
(ormation) 283.93 351 T
1 11 Q
(In this section, we r) 108 330.67 T
(eview additional techniques that compilers can use to gener-) 202.31 330.67 T
(ate code that obeys the Dylan execution model, but is mor) 108 316.67 T
(e ef) 389.56 316.67 T
(\336cient than a) 406.31 316.67 T
(straightforwar) 108 302.67 T
(d implementation of that model might suggest. Knowing about) 178.24 302.67 T
(these techniques can help you to evaluate dif) 108 288.67 T
(fer) 326.09 288.67 T
(ent vendors\325 compilers. Y) 339.17 288.67 T
(ou will) 462.32 288.67 T
-0.08 (have to consult the documentation of your particular implementation to discover) 108 274.67 P
(whether or not these techniques ar) 108 260.67 T
(e used.) 275.85 260.67 T
3 13 Q
(19.14.1  Ef\336cienc) 108 229.33 T
(y of g) 193.84 229.33 T
(eneric function calls) 222.37 229.33 T
1 11 Q
(In addition to using type infer) 108 209.67 T
(encing and sealed domains, another way to speed) 254.07 209.67 T
(up generic function calls when they must dispatch at r) 108 195.67 T
(un time is to cache the) 371.83 195.67 T
(r) 108 181.67 T
(eturn values of pr) 112.15 181.67 T
(evious calls. So, for example, the \336rst time that a given generic) 198.54 181.67 T
(function is called with certain classes of ar) 108 167.67 T
(guments, the full sorted sequence of) 312.38 167.67 T
-0.11 (applicable methods is computed; after that, however) 108 153.67 P
-0.11 (, it only to be only looked up) 362.37 153.67 P
(in a table. Thus, if the generic function is called often with the same type of) 108 139.67 T
2 F
(Comparison with C++:) 141 592.67 T
1 F
(A primary class is like an or) 258.2 592.67 T
(dinary base class) 393.71 592.67 T
(in C++. Because only one primary class is allowed as a base class, its) 141 578.67 T
(data members can be assigned the same \336xed of) 141 564.67 T
(fset for all derived) 374.23 564.67 T
(classes. See Appendix B.2,) 141 550.67 T
0 F
(The concept of classes) 273.43 550.67 T
1 F
(, for a mor) 369.05 550.67 T
(e detailed) 419.43 550.67 T
(analogy) 141 536.67 T
(.) 178.62 536.67 T
135 605.88 135 529.12 2 L
V
0.25 H
0 Z
N
486 605.88 486 529.12 2 L
V
N
134.88 606 486.12 606 2 L
V
N
134.88 529 486.12 529 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "331" 345
%%Page: "332" 346
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(332) 72 677.67 T
0 F
(Chapter 19) 95.75 677.67 T
(Performance and Flexibility) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(ar) 108 640.67 T
(guments, most calls will be fast. This technique is used in other object-oriented) 117.65 640.67 T
-0.21 (languages, such as Smalltalk and CLOS, and is useful for speeding up completely) 108 626.67 P
(dynamic situations. Most good Dylan compilers will use some form of cached) 108 612.67 T
(dispatching.) 108 598.67 T
-0.02 (A second form of cached dispatching is called) 135 584.67 P
2 F
-0.02 (call-site caching) 360.35 584.67 P
1 F
-0.02 (. Although a) 440.65 584.67 P
(generic function may have many calls thr) 108 570.67 T
(oughout a pr) 308.79 570.67 T
(ogram, often the types of) 371.93 570.67 T
-0.24 (ar) 108 556.67 P
-0.24 (guments passed ar) 117.65 556.67 P
-0.24 (e dir) 208.12 556.67 P
-0.24 (ectly r) 229.97 556.67 P
-0.24 (elated to wher) 259.68 556.67 P
-0.24 (e \050that is, in what other method\051 the) 328.83 556.67 P
-0.06 (call is made. Some Dylan compilers will cache the types and methods of each call) 108 542.67 P
(at the point of call, and will use this cache to avoid dispatch if the same types ar) 108 528.67 T
(e) 494.83 528.67 T
(passed as ar) 108 514.67 T
(guments in a subsequent call fr) 166.74 514.67 T
(om the same place.) 317.93 514.67 T
3 13 Q
(19.14.2  Ef\336cienc) 108 483.33 T
(y of ke) 193.84 483.33 T
(yw) 227.47 483.33 T
(or) 241.5 483.33 T
(d ar) 251.96 483.33 T
(guments and of m) 271.37 483.33 T
(ultiple v) 362.98 483.33 T
(alues) 403.07 483.33 T
1 11 Q
(Keywor) 108 463.67 T
(d ar) 146.7 463.67 T
(guments ar) 165.82 463.67 T
(e a powerful and \337exible, but potentially expensive, fea-) 220.6 463.67 T
(tur) 108 449.67 T
(e of Dylan. The pr) 122.37 449.67 T
(ocessing of keywor) 209.96 449.67 T
(ds and values at r) 303.16 449.67 T
(un time can be an) 388.99 449.67 T
-0.44 (expensive operation, especially if many keywor) 108 435.67 P
-0.44 (ds ar) 337.16 435.67 P
-0.44 (e used. A Dylan compiler can) 360.51 435.67 P
(pass keywor) 108 421.67 T
(d ar) 169.02 421.67 T
(guments as ef) 188.13 421.67 T
(\336ciently as it can r) 254.92 421.67 T
(equir) 343.11 421.67 T
(ed ar) 368.52 421.67 T
(guments, if the called) 392.91 421.67 T
(function is known at compilation time.) 108 407.67 T
(Returning multiple values again raises performance issues. In some imple-) 135 393.67 T
(mentations of Dylan, ther) 108 379.67 T
(e is an extra cost for r) 232.13 379.67 T
(eturning mor) 335.35 379.67 T
(e than one value; in) 399.92 379.67 T
(others, the cost is associated with calling a function that does not declar) 108 365.67 T
(e how) 454.87 365.67 T
(many values it r) 108 351.67 T
(eturns. When the compiler knows what function is being called,) 186.4 351.67 T
-0.01 (these costs usually can be eliminated, but certain costs may still exist \321 for exam-) 108 337.67 P
(ple, certain implementations may not optimize tail calls between functions that) 108 323.67 T
(r) 108 309.67 T
(eturn dif) 112.15 309.67 T
(fer) 154.52 309.67 T
(ent numbers of ar) 167.6 309.67 T
(guments.) 253.53 309.67 T
3 13 Q
(19.14.3  Memor) 108 278.33 T
(y usa) 184.54 278.33 T
(g) 211.71 278.33 T
(e) 218.33 278.33 T
1 11 Q
-0.44 (Dylan uses automatic storage-management; thus, pr) 108 258.67 P
-0.44 (ogrammers explicitly allocate) 359.3 258.67 P
(objects, and hence memory) 108 244.67 T
(, but deallocation is automatic and occurs after all r) 238.86 244.67 T
(ef-) 487.06 244.67 T
-0.15 (er) 108 230.67 P
-0.15 (ences to an object ar) 117.42 230.67 P
-0.15 (e gone. The pr) 213.84 230.67 P
-0.15 (ocess of r) 282.62 230.67 P
-0.15 (eclaiming memory when objects ar) 327.13 230.67 P
-0.15 (e) 496.13 230.67 P
(no longer in use is known as) 108 216.67 T
2 F
(garbage collection) 249.29 216.67 T
1 F
(.) 340.65 216.67 T
(Ther) 135 202.67 T
(e ar) 157.56 202.67 T
(e str) 175.23 202.67 T
(ong advantages to automatic storage-management. W) 195.64 202.67 T
(ith man-) 457.36 202.67 T
(ual storage-management, small pr) 108 188.67 T
(ogram bugs, such as fr) 273.99 188.67 T
(eeing of an object that is) 383.47 188.67 T
-0.27 (still in use, can cause subtle bugs that lead to crashes in parts of the pr) 108 174.67 P
-0.27 (ogram unr) 443.73 174.67 P
-0.27 (e-) 495.07 174.67 P
(lated to wher) 108 160.67 T
(e the r) 172.36 160.67 T
(eal pr) 202.53 160.67 T
(oblem lies. Dylan is able to guarantee that all pr) 230.01 160.67 T
(ograms) 461.72 160.67 T
(fail in disciplined ways, usually with exceptions, because the type system and) 108 146.67 T
(memory management ar) 108 132.67 T
(e safe.) 227.78 132.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "332" 346
%%Page: "333" 347
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.14 Additional efficiency information) 365.48 677.67 T
2 F
(333) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(But automatic storage-management may cr) 135 640.67 T
(eate performance concerns.) 344.53 640.67 T
(Although early implementations of garbage collection wer) 108 626.67 T
(e infamously slow) 391.99 626.67 T
(,) 479.89 626.67 T
-0.36 (modern garbage collectors ar) 108 612.67 P
-0.36 (e usually fast enough that using one should not raise) 248.25 612.67 P
-0.13 (concerns for most pr) 108 598.67 P
-0.13 (ograms. But some pr) 207.45 598.67 P
-0.13 (ograms with specialized or tuned use of) 307.75 598.67 P
(memory may r) 108 584.67 T
(un slower with automatic management.) 180.25 584.67 T
(Whether storage management is automatic or manual, the use of memory) 135 570.67 T
(raises performance issues. Every allocation of memory takes time, including the) 108 556.67 T
(time to r) 108 542.67 T
(eclaim unused memory; either the pr) 149.01 542.67 T
(ogrammer must fr) 328.85 542.67 T
(ee it explicitly) 417.76 542.67 T
(, or) 484.31 542.67 T
(the garbage collector has to do mor) 108 528.67 T
(e work.) 278.82 528.67 T
(It is obvious that calling a function such as) 135 514.67 T
4 10 Q
(make) 344.32 514.67 T
1 11 Q
(,) 368.32 514.67 T
4 10 Q
(vector) 373.82 514.67 T
1 11 Q
(, or) 409.01 514.67 T
4 10 Q
(pair) 427.61 514.67 T
1 11 Q
( in Dylan) 451.61 514.67 T
(allocates memory) 108 500.67 T
(, but ther) 192.5 500.67 T
(e ar) 236.46 500.67 T
(e operations that implicitly use memory) 254.12 500.67 T
(. For exam-) 447.23 500.67 T
(ple, cr) 108 486.67 T
(eating a closur) 137.61 486.67 T
(e \050see Section 12.3.6, page 183\051 will usually cause Dylan to) 208.22 486.67 T
(allocate memory for the closur) 108 472.67 T
(e.) 256.11 472.67 T
(On the other hand, sometimes the compiler is able to pr) 135 458.67 T
(ove that an object is) 405.03 458.67 T
(never used after the function that cr) 108 444.67 T
(eates it r) 281.79 444.67 T
(eturns. In a good compiler) 322.51 444.67 T
(, such) 450.03 444.67 T
(objects ar) 108 430.67 T
(e allocated on the stack, and ar) 153.46 430.67 T
(e r) 302.54 430.67 T
(eclaimed automatically when the func-) 314.7 430.67 T
(tion exits.) 108 416.67 T
(A good Dylan development envir) 135 402.67 T
(onment will have tools that help you to) 298.64 402.67 T
(meter and pr) 108 388.67 T
(o\336le memory usage, so that you can adjust your pr) 171.06 388.67 T
(ogram to utilize) 417.86 388.67 T
(memory ef) 108 374.67 T
(\336ciently) 160.65 374.67 T
(.) 198.74 374.67 T
3 13 Q
(19.14.4  Inlining, constant f) 108 343.33 T
(olding, and par) 244.07 343.33 T
(tial e) 320.69 343.33 T
(v) 344.85 343.33 T
(aluation) 350.58 343.33 T
1 11 Q
(One optimization that is common in many computer languages is) 108 323.67 T
2 F
(inlining) 429.64 323.67 T
1 F
(. Inlin-) 470.57 323.67 T
(ing r) 108 309.67 T
(eplaces a call to a known function with the body of the function. Inlining is) 130.62 309.67 T
(an important optimization in Dylan, because almost all Dylan operations \321 slot) 108 295.67 T
(access, array indexing, and collection iteration \321 involve function calls.) 108 281.67 T
(All good Dylan compilers, when compiling for speed, can be aggr) 135 267.67 T
(essive) 454.58 267.67 T
(about inlining any computations, as long as doing so would not make a pr) 108 253.67 T
(ogram) 469 253.67 T
(gr) 108 239.67 T
(ow too lar) 118.26 239.67 T
(ge. Constant folding \050evaluating expr) 167.39 239.67 T
(essions involving constant val-) 348.77 239.67 T
-0.37 (ues at compile time\051 and inlining ar) 108 225.67 P
-0.37 (e just two of the) 278.64 225.67 P
2 F
-0.37 (partial-evaluation) 356.96 225.67 P
1 F
-0.37 ( techniques) 446.77 225.67 P
(that you should expect to \336nd in any good Dylan compiler) 108 211.67 T
(.) 392.24 211.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "333" 347
%%Page: "334" 348
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(334) 72 677.67 T
0 F
(Chapter 19) 95.75 677.67 T
(Performance and Flexibility) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(19.14.5  T) 108 474.33 T
(ype inf) 155.38 474.33 T
(erence) 189.65 474.33 T
1 11 Q
-0.24 (The quality of type infer) 108 454.67 P
-0.24 (ence can vary gr) 224.79 454.67 P
-0.24 (eatly among Dylan compilers. T) 303.37 454.67 P
-0.24 (ype infer-) 456.95 454.67 P
(ence \321 like most forms of pr) 108 440.67 T
(ogram analysis \321 works best with simple, straight-) 247.9 440.67 T
(forwar) 108 426.67 T
(d code. Some constr) 140.84 426.67 T
(ucts that ar) 238 426.67 T
(e typically dif) 291.99 426.67 T
(\336cult for type infer) 358.56 426.67 T
(ence ar) 450.05 426.67 T
(e) 484.27 426.67 T
(assignment and calling of block exit functions outside of the method that de\336nes) 108 412.67 T
(the block exit functions.) 108 398.67 T
(One other way in which type constraints can be helpful is that they permit) 135 384.67 T
(the compiler to choose ef) 108 370.67 T
(\336cient r) 229.04 370.67 T
(epr) 265.94 370.67 T
(esentations for objects. Most Dylan objects) 281.96 370.67 T
(contain enough information for Dylan to determine their class \321 this one is an) 108 356.67 T
-0.01 (important featur) 108 342.67 P
-0.01 (e for the dynamic aspects of the language. But, suppose we have) 188.49 342.67 P
-0.07 (a 1000) 108 328.67 P
-0.07 (x) 139.09 328.67 P
-0.07 (1000) 145.68 328.67 P
4 10 Q
-0.16 (limited\050<array>, of: <single-float>\051) 170.35 328.67 P
1 11 Q
-0.07 (. Ther) 386.03 328.67 P
-0.07 (e is no r) 414.02 328.67 P
-0.07 (eason that) 451.73 328.67 P
(each of the numbers in that array should also contain a r) 108 314.67 T
(efer) 381.45 314.67 T
(ence to the) 399.8 314.67 T
4 10 Q
(<single-) 454.72 314.67 T
(float>) 108 300.67 T
1 11 Q
( class; the one r) 144 300.67 T
(efer) 217.74 300.67 T
(ence in the limited type is suf) 236.09 300.67 T
(\336cient. \050Note that, if we) 378.38 300.67 T
-0.42 (had used) 108 286.67 P
4 10 Q
-0.91 (of: <real>) 154.58 286.67 P
1 11 Q
-0.42 ( or) 213.67 286.67 P
4 10 Q
-0.91 (of: <float>) 228.69 286.67 P
1 11 Q
-0.42 (, we would have needed mor) 293.78 286.67 P
-0.42 (e information,) 433.29 286.67 P
(since multiple classes would have been possible.\051) 108 272.67 T
(When an object is r) 135 258.67 T
(epr) 227.39 258.67 T
(esented in such a way) 243.42 258.67 T
(, often many of the operations) 348.85 258.67 T
-0.06 (on it can be optimized. For example, the conventional r) 108 244.67 P
-0.06 (epr) 375.04 244.67 P
-0.06 (esentation of) 391.07 244.67 P
4 10 Q
-0.13 (<double-) 456 244.67 P
-0.05 (float>) 108 230.67 P
1 11 Q
-0.02 ( will usually r) 144 230.67 P
-0.02 (equir) 211.05 230.67 P
-0.02 (e an indir) 236.46 230.67 P
-0.02 (ect-memory-r) 282.76 230.67 P
-0.02 (efer) 349.13 230.67 P
-0.02 (ence machine instr) 367.48 230.67 P
-0.02 (uction to) 458.24 230.67 P
-0.37 (get at the actual number) 108 216.67 P
-0.37 (, so adding two such objects is one \337oating-point machine) 223.78 216.67 P
(instr) 108 202.67 T
(uction and two load-fr) 130.11 202.67 T
(om-memory machine instr) 239.36 202.67 T
(uctions; if a dir) 368.89 202.67 T
(ect r) 441.7 202.67 T
(epr) 462.33 202.67 T
(esen-) 478.36 202.67 T
(tation is used, just the add machine instr) 108 188.67 T
(uction is needed. Further) 304.57 188.67 T
(, if the r) 425.68 188.67 T
(eturn) 462.95 188.67 T
(value is saved in a variable for which type information is not available, it may be) 108 174.67 T
(necessary to allocate memory dynamically to stor) 108 160.67 T
(e the r) 348.06 160.67 T
(eturn value.) 378.24 160.67 T
(T) 135 146.67 T
(ypes that may have mor) 140.75 146.67 T
(e ef) 258.07 146.67 T
(\336cient r) 274.82 146.67 T
(epr) 311.71 146.67 T
(esentations include certain integer) 327.74 146.67 T
(classes, the \337oating-point classes, characters, and Booleans. Pr) 108 132.67 T
(ecise declarations) 408.73 132.67 T
2 F
(Comparison with C:) 141 620.67 T
1 F
( A pr) 242.12 620.67 T
(ogrammer familiar with the optimizations) 266.94 620.67 T
(done in C compilers can think of partial evaluation as an extr) 141 606.67 T
(eme) 437.31 606.67 T
(combination of inlining and constant folding. One way in which) 141 592.67 T
-0.44 (Dylan has an advantage over C for partial evaluation is that it har) 141 578.67 P
-0.44 (d for) 454.64 578.67 P
(a compiler to evaluate expr) 141 564.67 T
(essions that involve der) 273.2 564.67 T
(efer) 388.04 564.67 T
(encing point-) 406.39 564.67 T
(ers. For example, in C, it is dif) 141 550.67 T
(\336cult to evaluate partially a call to) 285.92 550.67 T
4 10 Q
(malloc) 141 536.67 T
1 11 Q
(, but Dylan compilers can often evaluate a call to) 177 536.67 T
4 10 Q
(make) 415.94 536.67 T
1 11 Q
( at com-) 439.94 536.67 T
(pile time.) 141 522.67 T
135 633.88 135 515.12 2 L
V
0.25 H
0 Z
N
486 633.88 486 515.12 2 L
V
N
134.88 634 486.12 634 2 L
V
N
134.88 515 486.12 515 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "334" 348
%%Page: "335" 349
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.15 Summary) 454.49 677.67 T
2 F
(335) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(about these types, especially in slots and limited collections, can lead to signi\336-) 108 640.67 T
(cant impr) 108 626.67 T
(ovements in both the time and memory needed to r) 154.79 626.67 T
(un a pr) 404.66 626.67 T
(ogram.) 439.45 626.67 T
3 15 Q
(19.15  Summar) 108 587 T
(y) 194.96 587 T
1 11 Q
(The most important point about performance is that it is important to pay atten-) 108 566.67 T
(tion to ef) 108 552.67 T
(\336ciency during the entir) 151.02 552.67 T
(e design and development cycle of a pr) 267.96 552.67 T
(oject.) 458.02 552.67 T
(During the design phase, try to ensur) 108 538.67 T
(e that the algorithms chosen have the right) 289.29 538.67 T
-0.12 (asymptotic behavior and constant factors, and that it is possible to implement the) 108 524.67 P
-0.42 (needed operations ef) 108 510.67 P
-0.42 (\336ciently) 208.63 510.67 P
-0.42 (. During the implementation phase, use the language) 246.73 510.67 P
-0.42 (constr) 108 496.67 P
-0.42 (ucts that most clearly expr) 137.8 496.67 P
-0.42 (ess what the pr) 264.14 496.67 P
-0.42 (ogram is doing. Once the pr) 336.4 496.67 P
-0.42 (ogram) 469.99 496.67 P
(is working corr) 108 482.67 T
(ectly) 182.11 482.67 T
(, it is then time to add type and sealing declarations, and to) 203.94 482.67 T
(use metering and pr) 108 468.67 T
(o\336ling tools to \336nd and r) 206.1 468.67 T
(ewrite heavily used, slow parts of) 327.03 468.67 T
(the pr) 108 454.67 T
(ogram, in or) 136.76 454.67 T
(der to impr) 196.45 454.67 T
(ove the performance.) 251.55 454.67 T
(One of the most important considerations when pr) 135 440.67 T
(ogramming is not to) 381.27 440.67 T
(worry about performance too soon. It is always mor) 108 426.67 T
(e important that your design) 360.41 426.67 T
(and implementation be clear and corr) 108 412.67 T
(ect, \336rst. Ther) 290.59 412.67 T
(e is no value in arriving at an) 357.14 412.67 T
(answer with lightning speed, if it turns out to be the wr) 108 398.67 T
(ong answer) 376.91 398.67 T
(.) 432.72 398.67 T
(In this chapter) 135 384.67 T
(, we cover) 204.24 384.67 T
(ed the following:) 253.46 384.67 T
(\245) 117 364.67 T
(W) 135 364.67 T
(e showed how Dylan can balance performance and \337exibility to support) 144.99 364.67 T
(a range of pr) 135 350.67 T
(ogramming r) 196.81 350.67 T
(equir) 260.82 350.67 T
(ements.) 286.23 350.67 T
(\245) 117 330.67 T
(W) 135 330.67 T
(e showed how type constraints af) 144.99 330.67 T
(fect performance.) 307.61 330.67 T
(\245) 117 310.67 T
(W) 135 310.67 T
(e showed how limited types can impr) 144.99 310.67 T
(ove performance.) 328.17 310.67 T
(\245) 117 290.67 T
(W) 135 290.67 T
(e showed how open generic functions pr) 144.99 290.67 T
(ovide modularity and \337exibility) 342.55 290.67 T
(.) 496.86 290.67 T
(\245) 117 270.67 T
(W) 135 270.67 T
(e showed how open classes pr) 144.99 270.67 T
(ovide modularity and \337exibility) 291.72 270.67 T
(.) 446.02 270.67 T
(\245) 117 250.67 T
-0.01 (W) 135 250.67 P
-0.01 (e showed how sealed generic function domains mitigate the performance) 144.99 250.67 P
(penalty of open classes and generic functions.) 135 236.67 T
(\245) 117 216.67 T
(W) 135 216.67 T
(e showed how primary classes permit ef) 144.99 216.67 T
(\336cient slot access.) 340.71 216.67 T
(\245) 117 196.67 T
(W) 135 196.67 T
(e pr) 144.99 196.67 T
(esented both an execution and ef) 163.76 196.67 T
(\336ciency model that pr) 322.96 196.67 T
(ovides a con-) 429.36 196.67 T
(ceptual model of how a pr) 135 182.67 T
(ogram in Dylan r) 262.85 182.67 T
(uns, and what the r) 346.38 182.67 T
(elative cost) 440.51 182.67 T
(of dif) 135 168.67 T
(fer) 160.81 168.67 T
(ent pr) 173.88 168.67 T
(ogram elements ar) 202.65 168.67 T
(e.) 292.85 168.67 T
(\245) 117 148.67 T
(W) 135 148.67 T
(e examined the method constr) 144.99 148.67 T
(ucts for \337exibility and performance avail-) 291.76 148.67 T
(able in Dylan; see T) 135 134.67 T
(able 19.1.) 229.07 134.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "335" 349
%%Page: "336" 350
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(336) 72 677.67 T
0 F
(Chapter 19) 95.75 677.67 T
(Performance and Flexibility) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(\245) 117 331.67 T
(W) 135 331.67 T
(e discussed the constr) 144.99 331.67 T
(ucts that can have type constraints, and the in\337u-) 250.98 331.67 T
(ence on performance or \337exibility of using such a declaration; see T) 135 317.67 T
(able) 461.13 317.67 T
(19.1.) 135 303.67 T
8 F
(Constr) 188.01 618.67 T
(uct) 220.57 618.67 T
(Eff) 360.35 618.67 T
(ects) 373.48 618.67 T
(direct method) 155.62 593.67 T
(highly optimizab) 279.62 593.67 T
(le) 358.26 593.67 T
(no method dispatch) 279.62 577.67 T
(sealed gener) 155.62 554.67 T
(ic func-) 219.38 554.67 T
(tion on a sealed class) 155.62 538.67 T
(highly optimizab) 279.62 554.67 T
(le) 358.26 554.67 T
(not e) 279.62 538.67 T
(xtensib) 303.76 538.67 T
(le b) 338.39 538.67 T
(y other libr) 355.9 538.67 T
(ar) 407.14 538.67 T
(ies) 417.08 538.67 T
(sealed gener) 155.62 515.67 T
(ic func-) 219.38 515.67 T
(tion on an open class) 155.62 499.67 T
(optimizab) 279.62 515.67 T
(le) 326.47 515.67 T
(other libr) 279.62 499.67 T
(ar) 322.3 499.67 T
(ies can subclass) 332.25 499.67 T
(open gener) 155.62 476.67 T
(ic function) 211.44 476.67 T
(on an open class) 155.62 460.67 T
(in a sealed domain) 155.62 444.67 T
(highly optimizab) 279.62 476.67 T
(le) 358.26 476.67 T
(other libr) 279.62 460.67 T
(ar) 322.3 460.67 T
(ies can add methods) 332.25 460.67 T
(other libr) 279.62 444.67 T
(ar) 322.3 444.67 T
(ies can subclass) 332.25 444.67 T
(open gener) 155.62 421.67 T
(ic function) 211.44 421.67 T
(on an open class) 155.62 405.67 T
(not optimizab) 279.62 421.67 T
(le) 344.82 421.67 T
(methods can be added at r) 279.62 405.67 T
(un time) 410.65 405.67 T
(subclasses can be created at r) 279.62 389.67 T
(un time) 428.97 389.67 T
108 352.01 522 360 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 192.06 363.33 T
(ab) 197.37 363.33 T
(le 19.1) 208.94 363.33 T
8 F
(Methods: \337e) 245.08 363.33 T
(xibility v) 299.25 363.33 T
(ersus perf) 334 363.33 T
(or) 378.16 363.33 T
(mance) 387.3 363.33 T
(.) 417.16 363.33 T
8 11 Q
(Constr) 188.82 272.67 T
(uct) 221.38 272.67 T
(Eff) 361.43 272.67 T
(ects) 374.56 272.67 T
(module constants) 155.35 247.67 T
(enf) 281.52 247.67 T
(orce prog) 296.48 247.67 T
(r) 342.83 247.67 T
(am correctness) 346.39 247.67 T
(module v) 155.35 224.67 T
(ar) 199.71 224.67 T
(iab) 209.65 224.67 T
(les) 224.1 224.67 T
(per) 281.52 224.67 T
(mit type inf) 297.69 224.67 T
(erencing) 350.54 224.67 T
(required par) 155.35 201.67 T
(ameters) 214.54 201.67 T
(required f) 281.52 201.67 T
(or method dispatch) 327.65 201.67 T
(per) 281.52 185.67 T
(mit type inf) 297.69 185.67 T
(erencing) 350.54 185.67 T
108 148.02 522 156.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 177.71 159.34 T
(ab) 183.01 159.34 T
(le 19.2) 194.59 159.34 T
8 F
(T) 230.73 159.34 T
(ype constr) 235.63 159.34 T
(aint: \337e) 281.67 159.34 T
(xibility v) 313.61 159.34 T
(ersus perf) 348.36 159.34 T
(or) 392.52 159.34 T
(mance) 401.65 159.34 T
(.) 431.52 159.34 T
149.62 633.88 149.62 380.12 2 L
V
0.25 H
0 Z
N
480.38 633.88 480.38 380.12 2 L
V
N
149.5 634 480.5 634 2 L
V
N
149.5 607 480.5 607 2 L
V
N
149.5 380 480.5 380 2 L
V
N
149.35 287.88 149.35 176.13 2 L
V
N
480.64 287.88 480.64 176.13 2 L
V
N
149.23 288.01 480.77 288.01 2 L
V
N
149.23 261.01 480.77 261.01 2 L
V
N
149.23 176.01 480.77 176.01 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "336" 350
%%Page: "337" 351
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.15 Summary) 454.49 677.67 T
2 F
(337) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
8 11 Q
0 X
(optional par) 155.35 607.67 T
(ameters) 212.72 607.67 T
(per) 281.52 607.67 T
(mit type inf) 297.69 607.67 T
(erencing) 350.54 607.67 T
(retur) 155.35 584.67 T
(n v) 178.24 584.67 T
(alues) 192.64 584.67 T
(enf) 281.52 584.67 T
(orce prog) 296.48 584.67 T
(r) 342.83 584.67 T
(am correctness) 346.39 584.67 T
(per) 281.52 568.67 T
(mit type inf) 297.69 568.67 T
(erencing) 350.54 568.67 T
(limited types) 155.35 545.67 T
(per) 281.52 545.67 T
(mit type inf) 297.69 545.67 T
(erencing) 350.54 545.67 T
(per) 281.52 529.67 T
(mit compact data representation) 297.69 529.67 T
( slots) 155.35 506.67 T
(per) 281.52 506.67 T
(mit type inf) 297.69 506.67 T
(erencing) 350.54 506.67 T
(Constr) 188.82 632.67 T
(uct) 221.38 632.67 T
(Eff) 361.43 632.67 T
(ects) 374.56 632.67 T
108 469.01 522 477 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 151.35 480.33 T
(ab) 156.66 480.33 T
(le 19.2) 168.24 480.33 T
8 F
(T) 204.38 480.33 T
(ype constr) 209.29 480.33 T
(aint: \337e) 255.32 480.33 T
(xibility v) 287.26 480.33 T
(ersus perf) 322.01 480.33 T
(or) 366.17 480.33 T
(mance) 375.3 480.33 T
(.) 405.17 480.33 T
9 F
( \050contin) 407.95 480.33 T
(ued\051) 440.64 480.33 T
149.35 647.88 149.35 497.12 2 L
V
0.25 H
0 Z
N
480.64 647.88 480.64 497.12 2 L
V
N
149.23 648 480.77 648 2 L
V
N
149.23 621 480.77 621 2 L
V
N
149.23 497 480.77 497 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "337" 351
%%Page: "338" 352
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 126 522 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "338" 352
%%Page: "339" 353
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(339) 298.88 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(20) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(20) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Exceptions) 110 566.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
(An) 108 424.67 T
2 F
(exception) 125.71 424.67 T
1 F
( is an unexpected event that occurs during pr) 173.98 424.67 T
(ogram execution \050as) 393.47 424.67 T
(opposed to pr) 108 410.67 T
(oblems detected during pr) 175.74 410.67 T
(ogram compilation\051. One common type) 304.4 410.67 T
(of exception is a violation of the contract of a function, such as attempting to) 108 396.67 T
(divide a number by zer) 108 382.67 T
(o. Another example is an attempt to access an uninitial-) 221.39 382.67 T
(ized slot, or certain cases of an attempt to violate the type constraint on a slot or) 108 368.67 T
(variable \050those that cannot be detected at compile time\051. Dylan detects all these) 108 354.67 T
-0.25 (exceptions itself. Sometimes, an application detects a violation of a contract that it) 108 340.67 P
-0.12 (de\336nes. For example, in Section 10.6, page 128, we de\336ned methods that detected) 108 326.67 P
(attempts to specify a longitude dir) 108 312.67 T
(ection of anything other than east or west. \050In) 274.97 312.67 T
(Section 19.5, page 318, we changed the application such that this particular appli-) 108 298.67 T
(cation-detected exception was transformed into one that is detected by Dylan.\051) 108 284.67 T
-0.02 (When an an unusual event occurs in an application, ther) 135 270.67 P
-0.02 (e ar) 408.67 270.67 P
-0.02 (e many options) 426.32 270.67 P
-0.05 (available for r) 108 256.67 P
-0.05 (esponding to that event. The application can try to handle the situa-) 175.23 256.67 P
(tion in its own particular way) 108 242.67 T
(, or it can use the) 250.96 242.67 T
2 F
(exception protocol) 335.95 242.67 T
1 F
( de\336ned by) 428.53 242.67 T
(Dylan. In this chapter) 108 228.67 T
(, we explor) 212.48 228.67 T
(e several appr) 266.08 228.67 T
(oaches to pr) 334.18 228.67 T
(oviding an exception) 392.76 228.67 T
(pr) 108 214.67 T
(otocol between parts of an application.) 118.76 214.67 T
3 15 Q
(20.1  An inf) 108 175 T
(ormal e) 173.4 175 T
(xception pr) 216.99 175 T
(otocol) 283.07 175 T
1 11 Q
(Our goal is to modify the method that adds a) 108 154.67 T
4 10 Q
(<time-offset>) 329.96 154.67 T
1 11 Q
( instance to a) 407.96 154.67 T
4 10 Q
-0.22 (<time-of-day>) 108 140.67 P
1 11 Q
-0.1 ( instance. W) 186 140.67 P
-0.1 (e r) 243.94 140.67 P
-0.1 (ede\336ne that method to detect over\337ow beyond the) 256 140.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "339" 353
%%Page: "340" 354
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(340) 72 677.67 T
0 F
(Chapter 20) 95.75 677.67 T
(Exceptions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.11 (24-hour period cover) 108 640.67 P
-0.11 (ed by a time of day) 210 640.67 P
-0.11 (, and to take special action in that case. In) 301.43 640.67 P
(this section, we show a simple way to indicate and handle exceptions, without) 108 626.67 T
(using the Dylan exception pr) 108 612.67 T
(otocol. W) 248.67 612.67 T
(e then discuss the pr) 293.85 612.67 T
(oblems with this infor-) 393.22 612.67 T
(mal appr) 108 598.67 T
(oach. In Section 20.2, we achieve the same goal using Dylan conditions,) 152.03 598.67 T
(and discuss the advantages of that appr) 108 584.67 T
(oach.) 300.9 584.67 T
3 13 Q
(20.1.1  The) 108 550.33 T
4 14 Q
(+) 165.49 550.33 T
3 13 Q
( method using inf) 173.89 550.33 T
(ormal e) 262.53 550.33 T
(xceptions) 300.31 550.33 T
1 11 Q
(First, we r) 108 524.67 T
(ede\336ne the method for adding) 156.75 524.67 T
4 10 Q
(<time-offset>) 307.72 524.67 T
1 11 Q
( and) 385.72 524.67 T
4 10 Q
(<time-of-day>) 409.84 524.67 T
1 11 Q
(\050this method was last de\336ned in Section 14.3.2, page 228\051. The method now) 108 510.67 T
(r) 108 496.67 T
(eturns an err) 112.15 496.67 T
(or string in the event that the computed sum is beyond the permit-) 174.21 496.67 T
(ted 24-hour range:) 108 482.67 T
4 9 Q
(define method \134+ \050offset :: <time-offset>, time-of-day :: <time-of-day>\051) 108 459 T
(=> \050sum :: type-union\050<time-of-day>, <string>\051\051) 113.4 448 T
(let sum) 118.8 437 T
(= make\050<time-of-day>,) 129.6 426 T
(total-seconds: offset.total-seconds + time-of-day.total-seconds\051;) 167.4 415 T
(if \050sum >= $midnight & sum < $tomorrow\051) 118.8 404 T
(sum;) 129.6 393 T
(else) 118.8 382 T
("time boundary violated";) 124.2 371 T
(end if;) 118.8 360 T
(end method \134+;) 108 349 T
1 11 Q
-0.29 (W) 108 322.67 P
-0.29 (e have alter) 117.99 322.67 P
-0.29 (ed the) 173.26 322.67 P
4 10 Q
-0.64 (+) 205.42 322.67 P
1 11 Q
-0.29 (method in two important ways. First, we have modi\336ed the) 214.17 322.67 P
(original values declaration,) 108 308.67 T
4 10 Q
(\050sum :: <time-of-day>\051) 243.07 308.67 T
1 11 Q
(, to allow the r) 375.07 308.67 T
(eturn of) 444.9 308.67 T
(either a) 108 294.67 T
4 10 Q
(<time-of-day>) 147.07 294.67 T
1 11 Q
( instance or a string describing a pr) 225.07 294.67 T
(oblem. Second, we) 395.54 294.67 T
(have added code that checks the computed time of day) 108 280.67 T
(, and r) 374.48 280.67 T
(eturns an err) 405.49 280.67 T
(or) 467.56 280.67 T
(string if the sum is out of bounds.) 108 266.67 T
(T) 135 252.67 T
(o illustrate further how the informal exceptions work, we de\336ne a method) 140.73 252.67 T
(that calls the) 108 238.67 T
4 10 Q
(+) 172.03 238.67 T
1 11 Q
(method de\336ned in this section. W) 180.78 238.67 T
(e de\336ne a method,) 343.47 238.67 T
4 10 Q
(correct-) 436 238.67 T
(arrival-time) 108 224.67 T
1 11 Q
(, that adds pr) 180 224.67 T
(edicted weather and traf) 244.44 224.67 T
(\336c delays to an arrival time;) 363.4 224.67 T
(and we de\336ne) 108 210.67 T
4 10 Q
(say-corrected-time) 179.63 210.67 T
1 11 Q
(, which calls) 287.63 210.67 T
4 10 Q
(correct-arrival-time) 350.14 210.67 T
1 11 Q
( and) 470.14 210.67 T
(displays the r) 108 196.67 T
(esults:) 173.58 196.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "340" 354
%%Page: "341" 355
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(20.1 An informal exception protocol) 378.42 677.67 T
2 F
(341) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define method correct-arrival-time) 108 642 T
(\050arrival-time :: <time-of-day>, weather-delay :: <time-offset>,) 129.6 631 T
(traffic-delay :: <time-offset>\051) 135 620 T
(=> \050sum :: type-union\050<time-of-day>, <string>\051\051) 113.4 609 T
(let sum1 = weather-delay + arrival-time;) 118.8 598 T
5 F
(// Check whether the result of + was a string representing an error) 118.8 587 T
4 F
(if \050instance?\050sum1, <string>\051\051) 118.8 576 T
(sum1;) 129.6 565 T
(else) 118.8 554 T
5 F
(// Otherwise, if there is no error, compute the second part of the sum) 129.6 543 T
4 F
(traffic-delay + sum1;) 129.6 532 T
(end if;) 118.8 521 T
(end method correct-arrival-time;) 108 510 T
(define constant $no-time = make\050<time-offset>, total-seconds: 0\051;) 108 491 T
(define method say-corrected-time) 108 472 T
(\050arrival-time :: <time-of-day>,) 129.6 461 T
(#key weather-delay :: <time-offset> = $no-time,) 135 450 T
(traffic-delay :: <time-offset> = $no-time\051) 135 439 T
(=> \050\051) 113.4 428 T
(let result = correct-arrival-time\050arrival-time, weather-delay,) 118.8 417 T
(traffic-delay\051;) 302.4 406 T
5 F
(// Check whether the result of + was a string representing an error) 118.8 395 T
4 F
(if \050instance?\050result, <string>\051\051) 118.8 384 T
(format-out\050"Error during time correction: %s", result\051;) 129.6 373 T
(else) 118.8 362 T
5 F
(// Otherwise, if there is no error, display the result) 129.6 351 T
4 F
(say\050result\051;) 129.6 340 T
(end if;) 118.8 329 T
(end method say-corrected-time;) 108 318 T
3 13 Q
(20.1.2  Pr) 108 288.33 T
(ob) 154.63 288.33 T
(lems with the inf) 167.57 288.33 T
(ormal e) 250.9 288.33 T
(xception pr) 288.67 288.33 T
(otocol) 345.94 288.33 T
1 11 Q
(Ther) 108 268.67 T
(e ar) 130.56 268.67 T
(e several signi\336cant pr) 148.23 268.67 T
(oblems with the appr) 257.58 268.67 T
(oach used in Section 20.1.1:) 361.25 268.67 T
(\245) 117 248.67 T
(As we saw in the) 135 248.67 T
4 10 Q
(correct-arrival-time) 220.61 248.67 T
1 11 Q
( method, most callers of the) 340.61 248.67 T
4 10 Q
(+) 477.52 248.67 T
1 11 Q
(function must check the type of the value r) 135 234.67 T
(eturned. This type checking) 342.66 234.67 T
(br) 135 220.67 T
(eaks up the normal \337ow of contr) 145.23 220.67 T
(ol, and gives as much weight to the) 303.51 220.67 T
(unusual case \050the exception\051 as it does to the usual case. If a caller fails to) 135 206.67 T
(check the r) 135 192.67 T
(eturn value to see whether that value is a string, then a dif) 187.46 192.67 T
(fer) 469.62 192.67 T
(ent) 482.7 192.67 T
(err) 135 178.67 T
(or will occur later in the pr) 148.76 178.67 T
(ogram \050such as adding a string and time) 278.66 178.67 T
(together\051, when it might be har) 135 164.67 T
(d to trace back the pr) 286.2 164.67 T
(oblem to the original) 388.44 164.67 T
(point of failur) 135 150.67 T
(e. Note that both dir) 202.32 150.67 T
(ect callers of) 300.56 150.67 T
4 10 Q
(+) 363.28 150.67 T
1 11 Q
( \050) 369.28 150.67 T
4 10 Q
(correct-arrival-time) 375.7 150.67 T
1 11 Q
(\051) 495.7 150.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "341" 355
%%Page: "342" 356
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(342) 72 677.67 T
0 F
(Chapter 20) 95.75 677.67 T
(Exceptions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(and indir) 135 640.67 T
(ect callers of) 180.04 640.67 T
4 10 Q
(+) 242.77 640.67 T
1 11 Q
( \050) 248.77 640.67 T
4 10 Q
(say-corrected-time) 255.18 640.67 T
1 11 Q
(\051 must understand and use) 363.18 640.67 T
(this err) 135 626.67 T
(or pr) 169.36 626.67 T
(otocol corr) 193.22 626.67 T
(ectly) 245.04 626.67 T
(.) 266.88 626.67 T
(\245) 117 606.67 T
(For other methods that might r) 135 606.67 T
(eturn any object \050including strings, for) 285.42 606.67 T
-0.03 (example\051, an additional r) 135 592.67 P
-0.03 (eturn value would have to be used to indicate that) 256.92 592.67 P
(an exception occurr) 135 578.67 T
(ed. It would be easy to for) 230.21 578.67 T
(get to check the extra r) 356.78 578.67 T
(eturn) 466.43 578.67 T
(value and such failur) 135 564.67 T
(e could easily go undetected, causing unpr) 237.62 564.67 T
(edictable) 445.19 564.67 T
(pr) 135 550.67 T
(ogram behavior) 145.76 550.67 T
(. If the method is being added to a generic function in) 222.4 550.67 T
(another library) 135 536.67 T
(, it might be impossible to add a second r) 206.83 536.67 T
(eturn value indicat-) 406.23 536.67 T
(ing failur) 135 522.67 T
(e, because the generic function might limit the number of r) 179.81 522.67 T
(eturn) 464.59 522.67 T
(values.) 135 508.67 T
(\245) 117 488.67 T
(A casual r) 135 488.67 T
(eader of the code could become easily confused about this ad hoc) 183.59 488.67 T
(err) 135 474.67 T
(or pr) 148.76 474.67 T
(otocol. Someone might inadvertently write code that did not obey) 172.62 474.67 T
-0.05 (this ad hoc pr) 135 460.67 P
-0.05 (otocol. Also, if all pr) 201.23 460.67 P
-0.05 (ogrammers use their own err) 299.19 460.67 P
-0.05 (or pr) 440.38 460.67 P
-0.05 (otocols,) 464.19 460.67 P
(it will be har) 135 446.67 T
(d to r) 196.21 446.67 T
(emember which convention to obey at the call site; pr) 222.18 446.67 T
(o-) 481.45 446.67 T
(grammers will have to check the convention in the sour) 135 432.67 T
(ce code or pr) 404.67 432.67 T
(ogram-) 467.06 432.67 T
(mer documentation.) 135 418.67 T
(\245) 117 398.67 T
(In this example, the ability to r) 135 398.67 T
(estrict the r) 283.33 398.67 T
(eturn value to only) 337.77 398.67 T
4 10 Q
(<time-of-) 433.14 398.67 T
-0.06 (day>) 135 384.67 P
1 11 Q
-0.03 ( is lost. This loss might pr) 159 384.67 P
-0.03 (event compile-time err) 282.71 384.67 P
-0.03 (or checking that could) 392.97 384.67 P
(catch err) 135 370.67 T
(ors that would be dif) 176.77 370.67 T
(\336cult or inconvenient to catch at r) 278.33 370.67 T
(un time. It) 441.57 370.67 T
(might also pr) 135 356.67 T
(event the compiler fr) 199.65 356.67 T
(om optimizing code that uses the r) 300.93 356.67 T
(esults) 469.28 356.67 T
(of this function, thus decr) 135 342.67 T
(easing performance of the application.) 259.36 342.67 T
(\245) 117 322.67 T
-0.12 (W) 135 322.67 P
-0.12 (e ar) 144.99 322.67 P
-0.12 (e limited in how we can r) 162.53 322.67 P
-0.12 (espond to the err) 285.03 322.67 P
-0.12 (or) 367.2 322.67 P
-0.12 (. The context in which the) 376.73 322.67 P
-0.04 (err) 135 308.67 P
-0.04 (or was detected has been lost. Ther) 148.76 308.67 P
-0.04 (e is no state we can examine to gather) 318.38 308.67 P
(mor) 135 294.67 T
(e details about the err) 154.87 294.67 T
(or) 260.1 294.67 T
(, and to determine why the err) 269.64 294.67 T
(or occurr) 417.59 294.67 T
(ed. W) 461.59 294.67 T
(e) 489.07 294.67 T
(also cannot corr) 135 280.67 T
(ect whatever caused the pr) 212.03 280.67 T
(oblem, then continue fr) 342.22 280.67 T
(om the) 455.34 280.67 T
(point wher) 135 266.67 T
(e the err) 188.55 266.67 T
(or occurr) 228.34 266.67 T
(ed.) 272.33 266.67 T
3 15 Q
(20.2  A simple Dylan e) 108 227 T
(xception pr) 237.06 227 T
(otocol) 303.14 227 T
1 11 Q
(In Sections 20.2.1 thr) 108 206.67 T
(ough 20.2.4, we show how to modify the thr) 207.78 206.67 T
(ee methods in) 421.86 206.67 T
(Section 20.1.1 to use the basic tools that Dylan pr) 108 192.67 T
(ovides for indicating and) 344.15 192.67 T
(r) 108 178.67 T
(esponding to exceptional situations.) 112.15 178.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "342" 356
%%Page: "343" 357
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(20.2 A simple Dylan exception protocol) 364.96 677.67 T
2 F
(343) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 13 Q
0 X
(20.2.1  Signaling conditions) 108 639.33 T
1 11 Q
(Dylan pr) 108 619.67 T
(ovides a str) 151.24 619.67 T
(uctur) 206.82 619.67 T
(ed mechanism for indicating that an unusual event or) 232.71 619.67 T
(exceptional situation has occurr) 108 605.67 T
(ed during the execution of a pr) 262.1 605.67 T
(ogram. Using this) 412.12 605.67 T
(mechanism is called) 108 591.67 T
2 F
(signaling a condition) 208.64 591.67 T
1 F
(. A) 314.95 591.67 T
2 F
(condition) 331.76 591.67 T
1 F
( is an instance of the) 380.03 591.67 T
4 10 Q
-0.69 (<condition>) 108 577.67 P
1 11 Q
-0.32 ( class, which r) 174 577.67 P
-0.32 (epr) 241.17 577.67 P
-0.32 (esents a pr) 257.2 577.67 P
-0.32 (oblem or unusual situation encounter) 308.18 577.67 P
-0.32 (ed) 489.58 577.67 P
(during pr) 108 563.67 T
(ogram execution.) 154.93 563.67 T
(T) 135 549.67 T
(o signal a condition, we need to take these steps:) 140.73 549.67 T
2 F
(1.) 117 529.67 T
1 F
-0.27 (De\336ne a condition class, which must be a subclass of) 135 529.67 P
4 10 Q
-0.6 (<condition>) 390.93 529.67 P
1 11 Q
-0.27 (. The con-) 456.93 529.67 P
-0.31 (dition class should have slots that ar) 135 515.67 P
-0.31 (e appr) 309.55 515.67 P
-0.31 (opriate for the application. In this) 340.13 515.67 P
(example, we de\336ne a condition class named) 135 501.67 T
4 10 Q
(<time-error>) 351.42 501.67 T
1 11 Q
( to be a dir) 423.42 501.67 T
(ect) 474.94 501.67 T
(subclass of) 135 487.67 T
4 10 Q
(<error>) 190.46 487.67 T
1 11 Q
(. Note that) 232.46 487.67 T
4 10 Q
(<error>) 286.54 487.67 T
1 11 Q
( is a subclass of) 328.54 487.67 T
4 10 Q
(<condition>) 405.61 487.67 T
1 11 Q
(. W) 471.61 487.67 T
(e) 487.1 487.67 T
-0.22 (de\336ned) 135 473.67 P
4 10 Q
-0.48 (<time-error>) 174.57 473.67 P
1 11 Q
-0.22 ( to inherit fr) 246.57 473.67 P
-0.22 (om) 303.97 473.67 P
4 10 Q
-0.48 (<error>) 322.22 473.67 P
1 11 Q
-0.22 (, because in case our applica-) 364.22 473.67 P
(tion does not handle the exception, we want Dylan always to take some) 135 459.67 T
(action, such as entering a debugger) 135 445.67 T
(. If) 305.65 445.67 T
4 10 Q
(<time-error>) 321.27 445.67 T
1 11 Q
( inherited fr) 393.27 445.67 T
(om) 450.98 445.67 T
4 10 Q
(<con-) 469.45 445.67 T
(dition>) 135 431.67 T
1 11 Q
( and the application failed to handle the exception, then the excep-) 177 431.67 T
(tion might simply be ignor) 135 417.67 T
(ed.) 264.94 417.67 T
2 F
(2.) 117 397.67 T
1 F
(Modify the functions that might detect the exception. These functions must) 135 397.67 T
-0.07 (make an instance of the condition class, and must use an appr) 135 383.67 P
-0.07 (opriate Dylan) 434.4 383.67 P
(function to initiate the signaling pr) 135 369.67 T
(ocess. In this example, we r) 303.88 369.67 T
(ede\336ne the) 436.41 369.67 T
4 10 Q
(+) 135 355.67 T
1 11 Q
(method to signal the condition with the) 147 355.67 T
4 10 Q
(error) 341.91 355.67 T
1 11 Q
( function.) 371.91 355.67 T
(In the following code, we de\336ne a condition named) 108 335.67 T
4 10 Q
(<time-error>) 360.99 335.67 T
1 11 Q
( to r) 432.99 335.67 T
(epr) 452.23 335.67 T
(esent) 468.26 335.67 T
(any kind of time err) 108 321.67 T
(or) 204.66 321.67 T
(, and we de\336ne a condition named) 214.19 321.67 T
4 10 Q
(<time-boundary-) 385.09 321.67 T
(error>) 108 307.67 T
1 11 Q
( to r) 144 307.67 T
(epr) 163.24 307.67 T
(esent violations of time-of-day bounds.) 179.27 307.67 T
4 9 Q
(define abstract class <time-error> \050<error>\051) 108 284 T
(constant slot invalid-time :: <time>, required-init-keyword: invalid-time:;) 118.8 273 T
(end class <time-error>;) 108 262 T
(define method say \050condition :: <time-error>\051 => \050\051) 108 243 T
(format-out\050"The time "\051;) 118.8 232 T
(say\050condition.invalid-time\051;) 118.8 221 T
(format-out\050" is invalid."\051;) 118.8 210 T
(end method say;) 108 199 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "343" 357
%%Page: "344" 358
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(344) 72 677.67 T
0 F
(Chapter 20) 95.75 677.67 T
(Exceptions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define class <time-boundary-error> \050<time-error>\051) 108 642 T
5 F
(// Inclusive bound) 118.8 631 T
4 F
(constant slot min-valid-time) 118.8 620 T
(:: <time>, required-init-keyword: min-time:;) 129.6 609 T
5 F
(// Exclusive bound) 118.8 598 T
4 F
(constant slot valid-time-limit) 118.8 587 T
(:: <time>, required-init-keyword: time-limit:;) 129.6 576 T
(end class <time-boundary-error>;) 108 565 T
(define method say \050condition :: <time-boundary-error>\051 => \050\051) 108 546 T
(next-method\050\051;) 118.8 535 T
(format-out\050"\134nIt must not be less than "\051;) 118.8 524 T
(say\050condition.min-valid-time\051;) 118.8 513 T
(format-out\050" and must be less than "\051;) 118.8 502 T
(say\050condition.valid-time-limit\051;) 118.8 491 T
(format-out\050"."\051;) 118.8 480 T
(end method say;) 108 469 T
1 11 Q
(W) 108 448.67 T
(e r) 117.99 448.67 T
(ede\336ne the) 130.15 448.67 T
4 10 Q
(+) 186.5 448.67 T
1 11 Q
(method to signal the) 195.25 448.67 T
4 10 Q
(<time-boundary-error>) 297.88 448.67 T
1 11 Q
( condition) 423.88 448.67 T
(\050instead of r) 108 434.67 T
(eturning an err) 166.32 434.67 T
(or string\051 to indicate that this pr) 239.44 434.67 T
(oblem has occurr) 394.31 434.67 T
(ed:) 477.55 434.67 T
4 9 Q
(define method \134+ \050offset :: <time-offset>, time-of-day :: <time-of-day>\051) 108 414 T
(=> \050sum :: <time-of-day>\051) 118.8 403 T
(let sum) 118.8 392 T
(= make\050<time-of-day>,) 129.6 381 T
(total-seconds:) 167.4 370 T
(offset.total-seconds + time-of-day.total-seconds\051;) 178.2 359 T
(if \050sum >= $midnight & sum < $tomorrow\051) 118.8 348 T
(sum;) 129.6 337 T
(else) 118.8 326 T
(error\050make\050<time-boundary-error>, invalid-time: sum,) 129.6 315 T
(min-time: $midnight, time-limit: $tomorrow\051\051;) 189 304 T
(end if;) 118.8 293 T
(end method \134+;) 108 282 T
1 11 Q
-0.09 (W) 108 261.67 P
-0.09 (e cr) 117.99 261.67 P
-0.09 (eate the condition with) 134.95 261.67 P
4 10 Q
-0.2 (make) 249.24 261.67 P
1 11 Q
-0.09 (, just as we cr) 273.24 261.67 P
-0.09 (eate instances of other classes. W) 337.72 261.67 P
-0.09 (e) 496.07 261.67 P
(call the) 108 247.67 T
4 10 Q
(error) 145.54 247.67 T
1 11 Q
( function to signal the condition. The) 175.54 247.67 T
4 10 Q
(error) 357.08 247.67 T
1 11 Q
( function is guaranteed) 387.08 247.67 T
(never to r) 108 233.67 T
(eturn to its caller) 154.74 233.67 T
(.) 235.85 233.67 T
(Now we can specify an exact r) 135 219.67 T
(eturn value for the) 282.42 219.67 T
4 10 Q
(+) 375.75 219.67 T
1 11 Q
(method, because we ar) 384.5 219.67 T
(e) 495.58 219.67 T
(no longer r) 108 205.67 T
(eturning an err) 161.39 205.67 T
(or string to indicate a pr) 234.51 205.67 T
(oblem with the addition.) 351.54 205.67 T
(In pr) 135 191.67 T
(evious chapters \050for example, in Section 6.1.3, page 78\051, we called the) 158.62 191.67 T
4 10 Q
(error) 108 177.67 T
1 11 Q
( function with a string. Given a string as its \336rst ar) 138 177.67 T
(gument, the) 381.76 177.67 T
4 10 Q
(error) 442.99 177.67 T
1 11 Q
( func-) 472.99 177.67 T
(tion cr) 108 163.67 T
(eates a general-purpose condition named) 138.98 163.67 T
4 10 Q
(<simple-error>) 342.43 163.67 T
1 11 Q
( and stor) 426.43 163.67 T
(es its) 468.96 163.67 T
(ar) 108 149.67 T
(guments in the condition instance. In the pr) 117.65 149.67 T
(eceding example, however) 329.33 149.67 T
(, we cr) 458.55 149.67 T
(e-) 490.27 149.67 T
(ated an instance of a condition that is customized for our pr) 108 135.67 T
(ogram \050) 397.59 135.67 T
4 10 Q
(<time-) 435.68 135.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "344" 358
%%Page: "345" 359
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(20.2 A simple Dylan exception protocol) 364.96 677.67 T
2 F
(345) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 10 Q
0 X
(boundary-error>) 108 640.67 T
1 11 Q
(\051, and then supplied that condition to the) 198 640.67 T
4 10 Q
(error) 399.94 640.67 T
1 11 Q
( function. This) 429.94 640.67 T
-0.44 (appr) 108 626.67 P
-0.44 (oach pr) 130.87 626.67 P
-0.44 (ovides information that is mor) 166.73 626.67 P
-0.44 (e r) 312.88 626.67 P
-0.44 (eadily accessible to the code that will) 324.61 626.67 P
(handle the condition. Conditions, like any other Dylan class, can use inheritance,) 108 612.67 T
(and can participate in generic function dispatch. For example, we de\336ne) 108 598.67 T
4 10 Q
(say) 461.35 598.67 T
1 11 Q
(methods for our err) 108 584.67 T
(ors, so that our handlers can pr) 203.37 584.67 T
(ovide a r) 354.41 584.67 T
(easonable err) 396.97 584.67 T
(or mes-) 461.38 584.67 T
-0.27 (sage to the user) 108 570.67 P
-0.27 (. \050Unfortunately) 181.94 570.67 P
-0.27 (, Dylan debuggers do not yet have a standar) 258.88 570.67 P
-0.27 (d way) 471.53 570.67 P
(to know about our) 108 556.67 T
4 10 Q
(say) 201.08 556.67 T
1 11 Q
( generic function. W) 219.08 556.67 T
(e expect that Dylan will eventually) 316.33 556.67 T
(support such a mechanism.\051) 108 542.67 T
-0.38 (Supplying a speci\336c condition to the) 135 528.67 P
4 10 Q
-0.83 (error) 312.8 528.67 P
1 11 Q
-0.38 ( function brings the full power of) 342.8 528.67 P
(Dylan\325s object-oriented pr) 108 514.67 T
(ogramming capabilities to the task of signaling and) 234.58 514.67 T
(handling exceptional situations.) 108 500.67 T
-0.18 (Once the) 135 486.67 P
4 10 Q
-0.39 (error) 180.6 486.67 P
1 11 Q
-0.18 ( function r) 210.6 486.67 P
-0.18 (eceives a condition instance, or makes an instance) 260.67 486.67 P
(of) 108 472.67 T
4 10 Q
(<simple-error>) 120.42 472.67 T
1 11 Q
( itself, Dylan begins a pr) 204.42 472.67 T
(ocess of attempting to r) 322.23 472.67 T
(esolve the sit-) 435.69 472.67 T
(uation r) 108 458.67 T
(epr) 146.23 458.67 T
(esented by the condition. W) 162.25 458.67 T
(e pr) 297.04 458.67 T
(esent the details of condition r) 315.81 458.67 T
(esolu-) 462.38 458.67 T
(tion in the next section.) 108 444.67 T
3 13 Q
(20.2.2  Simple condition handling) 108 413.33 T
1 11 Q
(A) 108 393.67 T
2 F
(handler) 119.31 393.67 T
1 F
( can potentially r) 158.41 393.67 T
(esolve an exceptional situation, although a handler) 240.27 393.67 T
(can decline to r) 108 379.67 T
(esolve a particular exception. If an application pr) 181.72 379.67 T
(ovides no han-) 419.29 379.67 T
(dlers, then the generic function) 108 365.67 T
4 10 Q
(default-handler) 261.88 365.67 T
1 11 Q
( is called on the condition.) 351.88 365.67 T
(Ther) 108 351.67 T
(e is a method on) 130.56 351.67 T
4 10 Q
(<condition>) 213.05 351.67 T
1 11 Q
( that just r) 279.05 351.67 T
(eturns false, and ther) 327.98 351.67 T
(e is a method) 430.2 351.67 T
(on) 108 337.67 T
4 10 Q
(<serious-condition>) 123.16 337.67 T
1 11 Q
( \050a super) 237.16 337.67 T
(class of) 279.14 337.67 T
4 10 Q
(<error>) 317.23 337.67 T
1 11 Q
(\051 that causes some kind of) 359.23 337.67 T
(implementation-speci\336c r) 108 323.67 T
(esponse to be invoked. Most development envir) 232.39 323.67 T
(on-) 465.55 323.67 T
(ments pr) 108 309.67 T
(ovide a debugger that deals with any serious conditions not handled by) 151.14 309.67 T
(the application. T) 108 295.67 T
(ypically) 191.96 295.67 T
(, the debugger describes the serious condition being sig-) 229.57 295.67 T
(naled, and might pr) 108 281.67 T
(ovide any number of options for r) 204.49 281.67 T
(ecovery \050or might pr) 369.17 281.67 T
(ovide) 469.32 281.67 T
(no r) 108 267.67 T
(ecovery options\051. In a sense, the debugger is the handler of \336nal r) 127.31 267.67 T
(esort.) 444.27 267.67 T
(In the following example, we establish a handler for the condition that we) 135 253.67 T
(want to r) 108 239.67 T
(esolve, befor) 151.9 239.67 T
(e calling the code that might signal that condition. W) 213.19 239.67 T
(e r) 469.25 239.67 T
(ede-) 481.42 239.67 T
(\336ne the) 108 225.67 T
4 10 Q
(correct-arrival-time) 147.08 225.67 T
1 11 Q
( and) 267.08 225.67 T
4 10 Q
(say-corrected-time) 291.21 225.67 T
1 11 Q
( methods to take) 399.21 225.67 T
(advantage of the Dylan exception pr) 108 211.67 T
(otocol.) 284.88 211.67 T
4 9 Q
(define method correct-arrival-time) 108 191 T
(\050arrival-time :: <time-of-day>, weather-delay :: <time-offset>,) 129.6 180 T
(traffic-delay :: <time-offset>\051) 135 169 T
(=> \050sum :: <time-of-day>\051) 113.4 158 T
(traffic-delay + \050weather-delay + arrival-time\051;) 118.8 147 T
(end method correct-arrival-time;) 108 136 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "345" 359
%%Page: "346" 360
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(346) 72 677.67 T
0 F
(Chapter 20) 95.75 677.67 T
(Exceptions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define method say-corrected-time) 108 642 T
(\050arrival-time :: <time-of-day>,) 129.6 631 T
(#key weather-delay :: <time-offset> = $no-time,) 135 620 T
(traffic-delay :: <time-offset> = $no-time\051) 135 609 T
(=> \050\051) 113.4 598 T
(block \050\051) 118.8 587 T
(say\050correct-arrival-time\050arrival-time, weather-delay, traffic-delay\051\051;) 129.6 576 T
5 F
(// We establish the handler in the following two lines) 118.8 565 T
4 F
(exception \050condition :: <time-error>\051) 118.8 554 T
(say\050condition\051;) 129.6 543 T
(end block;) 118.8 532 T
(end method say-corrected-time;) 108 521 T
1 11 Q
(The) 108 500.67 T
4 10 Q
(exception) 129.16 500.67 T
1 11 Q
( clause of) 183.16 500.67 T
4 10 Q
(block) 231.23 500.67 T
1 11 Q
( establishes a handler for a condition, and all that) 261.23 500.67 T
-0.21 (condition\325s subclasses, for any code in the) 108 486.67 P
4 10 Q
-0.45 (block) 312.68 486.67 P
1 11 Q
-0.21 ( body) 342.68 486.67 P
-0.21 (, and for any code called by) 368.93 486.67 P
(the) 108 472.67 T
4 10 Q
(block) 126.01 472.67 T
1 11 Q
( body) 156.01 472.67 T
(. W) 182.46 472.67 T
(e say that the handler is established within the) 197.95 472.67 T
2 F
(dynamic scope) 426.07 472.67 T
1 F
-0.38 (of the) 108 458.67 P
4 10 Q
-0.82 (block) 137.67 458.67 P
1 11 Q
-0.38 ( body) 167.67 458.67 P
-0.38 (. When an exception is signaled, Dylan starts a sear) 193.75 458.67 P
-0.38 (ch to \336nd the) 438.59 458.67 P
(near) 108 444.67 T
(est handler available that matches the condition signaled, and that accepts) 129.32 444.67 T
(the exception. The) 108 430.67 T
2 F
(nearest handler) 199.57 430.67 T
1 F
( is the one that was most r) 277.48 430.67 T
(ecently established) 404.05 430.67 T
(in the dynamic scope of the signaler) 108 416.67 T
(. The handler matches the condition if the) 282.14 416.67 T
(class associated with the handler \050the handler class\051 is the same as the condition,) 108 402.67 T
-0.33 (or if the handler class is a super) 108 388.67 P
-0.33 (class of the condition. Y) 258.84 388.67 P
-0.33 (ou can associate a test with) 371.83 388.67 P
(the handler so that the handler can selectively accept the condition. By default, a) 108 374.67 T
(matching handler always accepts. If a handler established by the) 108 360.67 T
4 10 Q
(exception) 424.17 360.67 T
1 11 Q
(clause of) 108 346.67 T
4 10 Q
(block) 153.32 346.67 T
1 11 Q
( matches and accepts, then a nonlocal exit fr) 183.32 346.67 T
(om the signaler) 396.41 346.67 T
(occurs, with execution continuing in the body of the exception clause, which is) 108 332.67 T
(executed in the context of the very beginning of the block. All the locals de\336ned) 108 318.67 T
(by the block ar) 108 304.67 T
(e gone, but the exit pr) 179.64 304.67 T
(ocedur) 285.25 304.67 T
(e \050if ther) 318.91 304.67 T
(e is one\051 is still available. If) 359.61 304.67 T
(ther) 108 290.67 T
(e is r) 127.4 290.67 T
(elevant local state, it may be captur) 150.18 290.67 T
(ed in slots of the condition prior to) 321.1 290.67 T
-0.23 (signaling of the condition. The code within the exception clause body is executed,) 108 276.67 P
-0.35 (and the value of the last statement in that body is then r) 108 262.67 P
-0.35 (eturned as the value of the) 374.21 262.67 P
(block.) 108 248.67 T
(In this example, the) 135 234.67 T
4 10 Q
(+) 233.21 234.67 T
1 11 Q
(method \050called by) 241.96 234.67 T
4 10 Q
(correct-arrival-time) 332.54 234.67 T
1 11 Q
(\051 may sig-) 452.54 234.67 T
(nal a) 108 220.67 T
4 10 Q
(<time-boundary-error>) 134.1 220.67 T
1 11 Q
( condition using the) 260.1 220.67 T
4 10 Q
(error) 359.79 220.67 T
1 11 Q
( function during the) 389.79 220.67 T
(execution of) 108 206.67 T
4 10 Q
(say-corrected-time) 170.1 206.67 T
1 11 Q
(. If this err) 278.1 206.67 T
(or is signaled, then the handler) 328.08 206.67 T
(established by the) 108 192.67 T
4 10 Q
(block) 198.27 192.67 T
1 11 Q
( for) 228.27 192.67 T
4 10 Q
(<time-error>) 247.78 192.67 T
1 11 Q
( will match the) 319.78 192.67 T
4 10 Q
(<time-boundary-) 394.9 192.67 T
(error>) 108 178.67 T
1 11 Q
( condition. This) 144 178.67 T
4 10 Q
(exception) 222.42 178.67 T
1 11 Q
( clause will always accept the condition, so a) 276.42 178.67 T
(nonlocal exit will occur) 108 164.67 T
(, and will terminate execution of the) 220.3 164.67 T
4 10 Q
(error) 398.42 164.67 T
1 11 Q
( function, the) 428.42 164.67 T
4 10 Q
(+) 108 150.67 T
1 11 Q
(method, and the) 116.75 150.67 T
4 10 Q
(correct-arrival-time) 199.33 150.67 T
1 11 Q
( method. W) 319.33 150.67 T
(ithin the context of the) 375.67 150.67 T
(beginning of the) 108 136.67 T
4 10 Q
(block) 190.37 136.67 T
1 11 Q
(, the variable) 220.37 136.67 T
4 10 Q
(condition) 285.94 136.67 T
1 11 Q
( is bound to the condition) 339.94 136.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "346" 360
%%Page: "347" 361
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(20.2 A simple Dylan exception protocol) 364.96 677.67 T
2 F
(347) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.16 (instance being signaled \050the instance supplied to) 108 640.67 P
4 10 Q
-0.34 (error) 345.53 640.67 P
1 11 Q
-0.16 (\051; then, execution r) 375.53 640.67 P
-0.16 (esumes) 465.2 640.67 P
(with the code inside the body of the) 108 626.67 T
4 10 Q
(exception) 285.07 626.67 T
1 11 Q
( clause. The body calls the) 339.07 626.67 T
4 10 Q
(say) 468.52 626.67 T
1 11 Q
(generic function on the condition instance, which causes an appr) 108 612.67 T
(opriate err) 422.19 612.67 T
(or) 473.22 612.67 T
(message \050instead of the time\051 to be displayed to the user) 108 598.67 T
(. Execution then contin-) 379.95 598.67 T
-0.08 (ues normally after the end of the block; in this case, that r) 108 584.67 P
-0.08 (esults in the normal exit) 384.86 584.67 P
(fr) 108 570.67 T
(om the) 115.81 570.67 T
4 10 Q
(say-corrected-time) 152.29 570.67 T
1 11 Q
( method. Figur) 260.29 570.67 T
(e 20.1 shows the state of execution) 332.45 570.67 T
(when) 108 556.67 T
4 10 Q
(error) 138 556.67 T
1 11 Q
( is called, and after the execution of the) 168 556.67 T
4 10 Q
(exception) 360.23 556.67 T
1 11 Q
( clause body for) 414.23 556.67 T
4 10 Q
(<time-error>) 108 542.67 T
1 11 Q
( begins. Figur) 180 542.67 T
(e 20.1 is a simpli\336ed diagram of the internal calling) 246.2 542.67 T
(stack of a hypothetical Dylan implementation. It is similar to what a debugger) 108 528.67 T
(might pr) 108 514.67 T
(oduce when asked to print a backtrace at these two points in the execu-) 150.53 514.67 T
(tion of the example. The) 108 500.67 T
4 10 Q
(error) 228.27 500.67 T
1 11 Q
( function called within the) 258.27 500.67 T
4 10 Q
(+) 388.8 500.67 T
1 11 Q
(method signals the) 397.55 500.67 T
4 10 Q
(<time-boundary-error>) 108 486.67 T
1 11 Q
( err) 234 486.67 T
(or) 250.51 486.67 T
(, and the) 260.05 486.67 T
4 10 Q
(exception) 304.93 486.67 T
1 11 Q
( clause of) 358.93 486.67 T
4 10 Q
(block) 407 486.67 T
1 11 Q
( in the) 437 486.67 T
4 10 Q
(say-) 470.11 486.67 T
-1.01 (corrected-time) 108 472.67 P
1 11 Q
-0.46 ( method establishes the handler for that err) 192 472.67 P
-0.46 (or) 398.16 472.67 P
-0.46 (. Once the handling) 407.7 472.67 P
(of the exception is in pr) 108 458.67 T
(ogr) 221.81 458.67 T
(ess, the handler selected is no longer established. If) 238.07 458.67 T
(ther) 108 444.67 T
(e is r) 127.4 444.67 T
(elevant local state, it may be captur) 150.18 444.67 T
(ed in slots of the condition being) 321.1 444.67 T
(signaled.) 108 430.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 145.01 504 153 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 20.1) 174.07 156.33 T
8 F
(Conte) 232.43 156.33 T
(xt tr) 258.8 156.33 T
(ansition from signaler to handler) 275.38 156.33 T
(.) 417.15 156.33 T
108 169 504 410 C
0 0 0 1 0 0 0 K
108 173 504 408 C
0 -392 15 1 238 393 223 109.5 179 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f20-1.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f20-1 .eps)%%CreationDate: (6/6/96) (3:43 PM)%%BoundingBox: -392 15 1 238%%HiResBoundingBox: -391.9917 15.0083 0.6583 237.8782%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: -191 123 -191 123%AI3_TileBox: -466 -243 86 487%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -419 339 2 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4511 4443 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4511 4443 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4511 4443 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A1 Ap0 R0 G800 Ar0 J 0 j 0.65 w 4 M []0 d%AI3_Note:0 D-227.6667 15.3333 m-227.6667 205.3333 L-391.6667 205.3333 L-391.6667 15.3333 L-227.6667 15.3333 Ls0 Ap-391.5 178.75 m-228 178.75 lS-391.5 151.5 m-228 151.5 lS-391.5 124.25 m-228 124.25 lS-391.5 97 m-228 97 lS-391.5 69.75 m-228 69.75 lS-391.5 42.5 m-228 42.5 lS0 To1 0 0 1 -380 229.5 0 TpTP0 Tr0 O0 g1 w/_Helvetica 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti0 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(State of execution during\r) Tx 0 -11 Td(the signaling of the error.) Tx (\r) TX TO-380 4442.5 m-380 -4197.5 L(N) *0 To1 0 0 1 -379.5 188 0 TpTP0 Tr0 O0 g(Call to ) Tx /_Courier-Bold 9 Tf(say-corrected-time) Tx (\r) TX TO0 To1 0 0 1 -379.5 161.5 0 TpTP0 Tr/_Helvetica 9 Tf(Block) Tx (\r) TX TO0 To1 0 0 1 -379.5 134.5 0 TpTP0 Tr(Handler for ) Tx /_Courier-Bold 9 Tf(<time-error>) Tx (\r) TX TO0 To1 0 0 1 -379.5 107.5 0 TpTP0 Tr/_Helvetica 9 Tf(Block body) Tx (\r) TX TO0 To1 0 0 1 -379.5 80.5 0 TpTP0 Tr(Call to ) Tx /_Courier-Bold 9 Tf(correct-arrival-time) Tx (\r) TX TO0 To1 0 0 1 -379.5 53.5 0 TpTP0 Tr/_Helvetica 9 Tf(Call to +) Tx (\r) TX TO0 To1 0 0 1 -379.5 26.5 0 TpTP0 Tr(Call to ) Tx /_Courier-Bold 9 Tf(error) Tx (\r) TX TO1 Ap0 R0 G0.65 w0.3333 15.3333 m0.3333 205.3333 L-163.6667 205.3333 L-163.6667 15.3333 L0.3333 15.3333 Ls0 Ap-163.5 178.75 m0 178.75 lS-163.5 151.5 m0 151.5 lS-163.5 124.25 m0 124.25 lS-163.5 97 m0 97 lS-163.5 69.75 m0 69.75 lS-163.5 42.5 m0 42.5 lS0 To1 0 0 1 -152 229.5 0 TpTP0 Tr0 O0 g1 w/_Helvetica 9 Tf(State of execution during\r) Tx 0 -11 Td(the handling of the error.) Tx (\r) TX TO0 To1 0 0 1 -151.5 188 0 TpTP0 Tr(Call to ) Tx /_Courier-Bold 9 Tf(say-corrected-time) Tx (\r) TX TO0 To1 0 0 1 -151.5 161.5 0 TpTP0 Tr/_Helvetica 9 Tf(Block) Tx (\r) TX TO0 To1 0 0 1 -151.5 134.5 0 TpTP0 Tr(Exception-clause body\003) Tx 0 -11 Td(\r) Tx TOu0 R0 G0.65 w-214 223 m-191 223 lS0 O0 g1 w-192.5458 220.7621 m-184.09 223.0275 l-192.5458 225.2935 l-192.5458 220.7621 lfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 169 504 410 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "347" 361
%%Page: "348" 362
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(348) 72 677.67 T
0 F
(Chapter 20) 95.75 677.67 T
(Exceptions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(is in pr) 108 640.67 T
(ogr) 141.73 640.67 T
(ess, the handler selected is no longer established. If ther) 157.99 640.67 T
(e is r) 427.75 640.67 T
(elevant) 450.53 640.67 T
(local state, it may be captur) 108 626.67 T
(ed in slots of the condition being signaled.) 240.73 626.67 T
(The advantages of this str) 135 612.67 T
(uctur) 259.92 612.67 T
(ed appr) 285.8 612.67 T
(oach to signaling and handling con-) 323.41 612.67 T
(ditions ar) 108 598.67 T
(e signi\336cant:) 154.18 598.67 T
(\245) 117 578.67 T
-0.1 (The method focuses on the normal \337ow of contr) 135 578.67 P
-0.1 (ol, and the exceptional \337ow) 367.46 578.67 P
(of contr) 135 564.67 T
(ol appears only wher) 172.44 564.67 T
(e necessary) 275.12 564.67 T
(. For example, the) 329.03 564.67 T
4 10 Q
(correct-) 418.49 564.67 T
(arrival-time) 135 550.67 T
1 11 Q
( method does not need to be awar) 207 550.67 T
(e of the potential excep-) 371.53 550.67 T
(tions at all. The Dylan condition system makes it easier to r) 135 536.67 T
(euse code that) 421.45 536.67 T
(might not know about, or car) 135 522.67 T
(e to participate in, your application-speci\336c) 276.9 522.67 T
(exception r) 135 508.67 T
(ecovery code.) 188.8 508.67 T
(\245) 117 488.67 T
(Because) 135 488.67 T
4 10 Q
(correct-arrival-time) 176.69 488.67 T
1 11 Q
( does not need to participate in the) 296.69 488.67 T
(exception-r) 135 474.67 T
(ecovery pr) 189.71 474.67 T
(otocol, it can also have a speci\336c r) 241.33 474.67 T
(eturn value; thus,) 405.16 474.67 T
(like the) 135 460.67 T
4 10 Q
(+) 173.54 460.67 T
1 11 Q
(method, it might allow better compiler optimizations and better) 182.29 460.67 T
(compile-time err) 135 446.67 T
(or checking.) 215.83 446.67 T
(\245) 117 426.67 T
(W) 135 426.67 T
(e allow r) 144.99 426.67 T
(oom for expansion in the code. For example, at some point,) 186.99 426.67 T
4 10 Q
(correct-arrival-time) 135 412.67 T
1 11 Q
( might do mor) 255 412.67 T
(e sophisticated computations with) 324.86 412.67 T
(time, which might signal other kinds of time err) 135 398.67 T
(ors. As long as these new) 367.6 398.67 T
(time err) 135 384.67 T
(ors inherit fr) 173.28 384.67 T
(om) 234.01 384.67 T
4 10 Q
(<time-error>) 252.48 384.67 T
1 11 Q
(, they can be r) 324.48 384.67 T
(esolved by the same) 391.89 384.67 T
(handler established by) 135 370.67 T
4 10 Q
(say-corrected-time) 247.85 370.67 T
1 11 Q
(. As the application evolves,) 355.85 370.67 T
(we can build various families of err) 135 356.67 T
(or conditions, and can pr) 306.97 356.67 T
(ovide applica-) 428.32 356.67 T
(tion-speci\336c handlers that perform the corr) 135 342.67 T
(ect r) 343.95 342.67 T
(ecovery actions for those) 364.58 342.67 T
(families.) 135 328.67 T
(\245) 117 308.67 T
(Because we ar) 135 308.67 T
(e using the signaling and handling pr) 203.53 308.67 T
(otocol de\336ned by) 385.7 308.67 T
(Dylan, casual r) 135 294.67 T
(eaders of the code should be able to understand our intent.) 207.51 294.67 T
(\245) 117 274.67 T
(Because the handler has access to the condition object, the handler can per-) 135 274.67 T
(form intelligent r) 135 260.67 T
(ecovery actions based on the information captur) 217.81 260.67 T
(ed in the) 451.94 260.67 T
(condition object when the exception occurr) 135 246.67 T
(ed. For example, the handler) 343.87 246.67 T
(may examine various slots of the condition object, and perform dif) 135 232.67 T
(fer) 457.99 232.67 T
(ent) 471.07 232.67 T
(actions based on information stor) 135 218.67 T
(ed in those slots.) 297.32 218.67 T
-0.3 (Dylan supports two models of handler execution. The) 108 198.67 P
4 10 Q
-0.66 (exception) 370.38 198.67 P
1 11 Q
-0.3 ( clause of) 424.38 198.67 P
4 10 Q
-0.66 (block) 471.55 198.67 P
1 11 Q
(implements the exit model. When you establish handlers by the) 108 184.67 T
4 10 Q
(exception) 420.14 184.67 T
1 11 Q
-0.38 (clause of) 108 170.67 P
4 10 Q
-0.84 (block) 152.55 170.67 P
1 11 Q
-0.38 (, you do not have the ability to r) 182.55 170.67 P
-0.38 (estart a computation in the context) 334.96 170.67 P
(of the signaler) 108 156.67 T
(, or in a context closer to the signaler than the handler) 176.31 156.67 T
(. In Section) 436.26 156.67 T
(20.2.3, we explor) 108 142.67 T
(e the calling model of handler execution, which allows you to) 189.1 142.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "348" 362
%%Page: "349" 363
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(20.2 A simple Dylan exception protocol) 364.96 677.67 T
2 F
(349) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(r) 108 640.67 T
(ecover fr) 112.15 640.67 T
(om an exception without a nonlocal exit back to the point wher) 154.7 640.67 T
(e the) 461.12 640.67 T
(handler was established.) 108 626.67 T
3 13 Q
(20.2.3  De\336nition of a reco) 108 595.33 T
(ver) 239.92 595.33 T
(y pr) 256.03 595.33 T
(otocol) 275.39 595.33 T
1 11 Q
-0.39 (W) 108 575.67 P
-0.39 (ith the new de\336nition of our) 118.39 575.67 P
4 10 Q
-0.85 (+) 255.96 575.67 P
1 11 Q
-0.39 (method on) 264.71 575.67 P
4 10 Q
-0.85 (<time-offset>) 319.54 575.67 P
1 11 Q
-0.39 ( and) 397.54 575.67 P
4 10 Q
-0.85 (<time-of-day>) 420.89 575.67 P
1 11 Q
-0.39 (,) 498.89 575.67 P
(if we add 5 hours to 10:00 P) 108 561.67 T
(.M., a condition instance is signaled. The) 240.62 561.67 T
4 10 Q
(say-cor-) 440.44 561.67 T
-0.69 (rected-time) 108 547.67 P
1 11 Q
-0.31 ( method handles that condition, and prints a suitable err) 174 547.67 P
-0.31 (or message.) 444.83 547.67 P
(By the time the handler in) 108 533.67 T
4 10 Q
(say-corrected-time) 237.06 533.67 T
1 11 Q
( takes contr) 345.06 533.67 T
(ol, the addition that) 400.72 533.67 T
(we wer) 108 519.67 T
(e performing has been aborted. In fact, we ar) 143.78 519.67 T
(e no longer even executing) 361.15 519.67 T
(within the) 108 505.67 T
4 10 Q
(correct-arrival-time) 160.72 505.67 T
1 11 Q
( method. W) 280.72 505.67 T
(e have ceased executing ther) 336.66 505.67 T
(e) 475.06 505.67 T
(because handlers established using the) 108 491.67 T
4 10 Q
(exception) 299.39 491.67 T
1 11 Q
( clause of) 353.39 491.67 T
4 10 Q
(block) 401.46 491.67 T
1 11 Q
( perform) 431.46 491.67 T
-0.15 (nonlocal exits out of the curr) 108 477.67 P
-0.15 (ent computation back to the block wher) 246.15 477.67 P
-0.15 (e the handler) 437.84 477.67 P
(was established. Suppose that we, instead of aborting the addition, wanted to) 108 463.67 T
(continue with the addition, per) 108 449.67 T
(haps modifying the value r) 259.12 449.67 T
(eturned by the) 390.66 449.67 T
4 10 Q
(+) 108 435.67 T
1 11 Q
(method such that it would still be within the corr) 116.75 435.67 T
(ect 24-hour range for) 355.19 435.67 T
4 10 Q
(<time-) 459.62 435.67 T
(of-day>) 108 421.67 T
1 11 Q
( instances. In this section, we modify) 150 421.67 T
4 10 Q
(say-corrected-time) 331.16 421.67 T
1 11 Q
( to use a dif-) 439.16 421.67 T
-0.14 (fer) 108 407.67 P
-0.14 (ent technique for establishing a handler that does not abort the computation in) 121.08 407.67 P
(pr) 108 393.67 T
(ogr) 118.76 393.67 T
(ess, and we modify the) 135.03 393.67 T
4 10 Q
(+) 249.87 393.67 T
1 11 Q
(method for) 258.62 393.67 T
4 10 Q
(<time-offset>) 315.83 393.67 T
1 11 Q
( and) 393.83 393.67 T
4 10 Q
(<time-of-day>) 417.95 393.67 T
1 11 Q
(to of) 108 379.67 T
(fer and implement a way to modify the value r) 129.81 379.67 T
(eturned to be a legal time of) 356.95 379.67 T
(day) 108 365.67 T
(.) 125.12 365.67 T
-0.01 (First, we must \336nd a way to execute a handler in the context of the signaler) 135 351.67 P
-0.01 (,) 498.51 351.67 P
(instead of at the point wher) 108 337.67 T
(e the handler was established. Then, we must \336nd a) 241.9 337.67 T
(way to activate special code in the) 108 323.67 T
4 10 Q
(+) 276.44 323.67 T
1 11 Q
(method to r) 285.19 323.67 T
(eturn a legal) 342.13 323.67 T
4 10 Q
(<time-of-day>) 405.4 323.67 T
1 11 Q
(instance as a way of r) 108 309.67 T
(ecovering fr) 211.93 309.67 T
(om the time-boundary exception.) 270.2 309.67 T
(\245) 117 289.67 T
(The) 135 289.67 T
4 10 Q
(let) 156.16 289.67 T
(handler) 176.91 289.67 T
1 11 Q
( local declaration pr) 218.91 289.67 T
(ovides a way to establish a handler) 315.33 289.67 T
(that will execute in the context of the signaler) 135 275.67 T
(, just as though the handler) 354.52 275.67 T
(was invoked with a normal function call by the signaler) 135 261.67 T
(.) 404.95 261.67 T
(\245) 117 241.67 T
(The r) 135 241.67 T
(estart pr) 160.31 241.67 T
(otocol pr) 200.77 241.67 T
(ovides a str) 243.97 241.67 T
(uctur) 299.55 241.67 T
(ed way for a handler to r) 325.43 241.67 T
(ecover) 445.8 241.67 T
(fr) 135 227.67 T
(om the exception, and to continue with the computation in pr) 142.81 227.67 T
(ogr) 441.65 227.67 T
(ess.) 457.92 227.67 T
-0.37 (In this case, continuing with the computation means that the) 108 207.67 P
4 10 Q
-0.81 (+) 401.26 207.67 P
1 11 Q
-0.37 (method will r) 410.01 207.67 P
-0.37 (eturn) 475.39 207.67 P
(a legal) 108 193.67 T
4 10 Q
(<time-of-day>) 142.29 193.67 T
1 11 Q
( instance to) 220.29 193.67 T
4 10 Q
(correct-arrival-time) 278.04 193.67 T
1 11 Q
(, and) 398.04 193.67 T
4 10 Q
(correct-) 424.91 193.67 T
(arrival-time) 108 179.67 T
1 11 Q
( will \336nish any additional pr) 180 179.67 T
(ocessing and r) 318.67 179.67 T
(eturn normally to its) 388.14 179.67 T
(caller) 108 165.67 T
(.) 133.59 165.67 T
-0.12 (T) 135 151.67 P
-0.12 (o r) 140.73 151.67 P
-0.12 (ecover fr) 153.51 151.67 P
-0.12 (om an exception, we use a signaling and handling technique as) 195.94 151.67 P
(similar to that we used to indicate the exception in the \336rst place. This time, we) 108 137.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "349" 363
%%Page: "350" 364
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(350) 72 677.67 T
0 F
(Chapter 20) 95.75 677.67 T
(Exceptions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(signal a particular condition that is a subclass of) 108 640.67 T
4 10 Q
(<restart>) 343.95 640.67 T
1 11 Q
(, to indicate how the) 397.95 640.67 T
(exception handler wishes to r) 108 626.67 T
(ecover) 250.86 626.67 T
(. W) 282.03 626.67 T
(e use a) 297.52 626.67 T
2 F
(restart handler) 333.1 626.67 T
1 F
( to implement the) 406.73 626.67 T
(particular r) 108 612.67 T
(ecovery action. Y) 162.7 612.67 T
(ou can think of a r) 244.96 612.67 T
(estart as a special condition that) 333.16 612.67 T
(r) 108 598.67 T
(epr) 112.15 598.67 T
(esents an opportunity to r) 128.17 598.67 T
(ecover fr) 253.77 598.67 T
(om an exception. Establishing a r) 296.32 598.67 T
(estart) 456.73 598.67 T
-0.27 (handler is a way to of) 108 584.67 P
-0.27 (fer such an opportunity to other handlers, and to specify the) 211.48 584.67 P
-0.29 (implementation of the r) 108 570.67 P
-0.29 (estart. Any handler) 222.12 570.67 P
-0.29 (, when activated, might signal a r) 314.85 570.67 P
-0.29 (estart) 474.59 570.67 P
(to r) 108 556.67 T
(equest that a particular r) 124.49 556.67 T
(ecovery action take place. Restart signaling and han-) 243.6 556.67 T
(dling connects r) 108 542.67 T
(ecovery r) 185.38 542.67 T
(equests with r) 230.39 542.67 T
(ecovery actions.) 298.64 542.67 T
(For example, adding 5 hours to 10:00 P) 135 528.67 T
(.M. is an err) 322.48 528.67 T
(or for) 380.17 528.67 T
4 10 Q
(<time-offset>) 410.03 528.67 T
1 11 Q
(and) 108 514.67 T
4 10 Q
(<time-of-day>) 129.37 514.67 T
1 11 Q
( instances. One way to r) 207.37 514.67 T
(ecover fr) 323.29 514.67 T
(om this err) 365.84 514.67 T
(or would be to) 418.67 514.67 T
(wrap ar) 108 500.67 T
(ound the r) 146.03 500.67 T
(esult to 3:00 A.M. Her) 196.69 500.67 T
(e, we de\336ne the r) 302.92 500.67 T
(estart class) 386.1 500.67 T
4 10 Q
(<return-) 441.46 500.67 T
(modulus-restart>) 108 486.67 T
1 11 Q
(, which r) 204 486.67 T
(epr) 246.46 486.67 T
(esents an of) 262.49 486.67 T
(fer to r) 319.21 486.67 T
(eturn fr) 351.73 486.67 T
(om a time-of-day com-) 388.52 486.67 T
(putation by wrapping the r) 108 472.67 T
(esult:) 240.09 472.67 T
4 9 Q
(define class <return-modulus-restart> \050<restart>\051) 108 452 T
(end class <return-modulus-restart>;) 108 441 T
1 11 Q
(Using the) 108 420.67 T
4 10 Q
(exception) 157.7 420.67 T
1 11 Q
( clause of) 211.7 420.67 T
4 10 Q
(block) 259.77 420.67 T
1 11 Q
(, we r) 289.77 420.67 T
(ede\336ne the) 316.61 420.67 T
4 10 Q
(+) 372.95 420.67 T
1 11 Q
(method to establish and) 381.7 420.67 T
(implement the r) 108 406.67 T
(estart handler:) 185.87 406.67 T
4 9 Q
(define constant $seconds-per-day = $hours-per-day * $seconds-per-hour;) 108 386 T
(define method \134+ \050offset :: <time-offset>, time-of-day :: <time-of-day>\051) 108 367 T
(=> \050sum :: <time-of-day>\051) 113.4 356 T
(let sum) 118.8 345 T
(= make\050<time-of-day>,) 129.6 334 T
( total-seconds: offset.total-seconds + time-of-day.total-seconds\051;) 162 323 T
(block \050\051) 118.8 312 T
(if \050sum >= $midnight & sum < $tomorrow\051) 129.6 301 T
(sum;) 140.4 290 T
(else) 129.6 279 T
(error\050make\050<time-boundary-error>, invalid-time: sum,) 140.4 268 T
(min-time: $midnight, time-limit: $tomorrow\051\051;) 199.8 257 T
(end if;) 129.6 246 T
5 F
(// Establish restart handler) 118.8 235 T
4 F
(exception \050restart :: <return-modulus-restart>\051) 118.8 224 T
(make\050<time-of-day>,) 129.6 213 T
(total-seconds: modulo\050sum.total-seconds, $seconds-per-day\051\051;) 156.6 202 T
(end block;) 118.8 191 T
(end method \134+;) 108 180 T
1 11 Q
(If a handler \050established with) 108 159.67 T
4 10 Q
(let handler) 253.05 159.67 T
1 11 Q
(\051 signals a) 319.05 159.67 T
4 10 Q
(<return-modulus-) 370.21 159.67 T
(restart>) 108 145.67 T
1 11 Q
( during the handling of the) 156 145.67 T
4 10 Q
(<time-boundary-error>) 290.05 145.67 T
1 11 Q
( exception, then) 416.05 145.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "350" 364
%%Page: "351" 365
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(20.2 A simple Dylan exception protocol) 364.96 677.67 T
2 F
(351) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.21 (the sum will be wrapped ar) 108 640.67 P
-0.21 (ound so that it will stay within the bounds of the time-) 240.99 640.67 P
(of-day speci\336cation, and the r) 108 626.67 T
(esult will be r) 252.31 626.67 T
(eturned fr) 318.19 626.67 T
(om the) 366.97 626.67 T
4 10 Q
(+) 403.45 626.67 T
1 11 Q
(method.) 412.2 626.67 T
(Next, we want to write a handler using) 135 612.67 T
4 10 Q
(let handler) 328.05 612.67 T
1 11 Q
( that will invoke the) 394.05 612.67 T
-0.22 (r) 108 598.67 P
-0.22 (estart. However) 112.15 598.67 P
-0.22 (, befor) 189 598.67 P
-0.22 (e we invoke the r) 219.45 598.67 P
-0.22 (estart, we want to con\336rm that the r) 301.9 598.67 P
-0.22 (estart) 474.52 598.67 P
(is curr) 108 584.67 T
(ently established. Signaling a r) 138.62 584.67 T
(estart that is not curr) 287.07 584.67 T
(ently established is an) 387.96 584.67 T
(err) 108 570.67 T
(or) 121.76 570.67 T
(. The) 131.3 570.67 T
4 10 Q
(available-restart) 157.96 570.67 T
1 11 Q
( method that follows r) 259.96 570.67 T
(eturns an instance of a a) 367.8 570.67 T
(given r) 108 556.67 T
(estart, if that r) 142.1 556.67 T
(estart is curr) 210.13 556.67 T
(ently established; otherwise,) 270.46 556.67 T
4 10 Q
(available-) 411.26 556.67 T
(restart) 108 542.67 T
1 11 Q
( r) 150 542.67 T
(eturns false:) 156.9 542.67 T
4 9 Q
(define method available-restart) 108 522 T
(\050restart-class :: <class>, exception-instance :: <condition>\051) 129.6 511 T
(=> \050result :: false-or\050<restart>\051\051) 113.4 500 T
(block \050return\051) 118.8 489 T
(local method check-restart \050type, test, function, initargs\051) 129.6 478 T
5 F
(// Make an instance of the restart, so we can see whether it matches) 140.4 467 T
(// our search criteria) 140.4 456 T
4 F
(if \050subtype?\050type, restart-class\051\051) 140.4 445 T
(let instance = apply\050make, type, condition:, exception-instance,) 151.2 434 T
(initargs | #[]\051;) 264.6 423 T
(if \050test\050instance\051\051 return\050instance\051; end;) 151.2 412 T
(end if;) 140.4 401 T
(end method;) 129.6 390 T
5 F
(// The built-in Dylan function do-handlers will call check-restart) 129.6 379 T
(// for every handler currently established, in order \050first is nearest) 129.6 368 T
(// to the signaler\051) 129.6 357 T
4 F
(do-handlers\050check-restart\051;) 129.6 346 T
(#f;) 129.6 335 T
(end block;) 118.8 324 T
(end method available-restart;) 108 313 T
1 11 Q
(Dylan pr) 108 292.67 T
(ovides the) 151.24 292.67 T
4 10 Q
(do-handlers) 204.07 292.67 T
1 11 Q
( function, which iterates over all the curr) 270.07 292.67 T
(ently) 467.34 292.67 T
-0.06 (established handlers, calling its ar) 108 278.67 P
-0.06 (gument \050a function\051 on all the r) 272.18 278.67 P
-0.06 (elevant informa-) 423.37 278.67 P
(tion about the handler) 108 264.67 T
(, including all the information necessary to instantiate a) 215.54 264.67 T
(r) 108 250.67 T
(estart instance for r) 112.15 250.67 T
(estart handlers. The) 205.42 250.67 T
4 10 Q
(check-restart) 304.28 250.67 T
1 11 Q
( local method r) 382.28 250.67 T
(eturns) 455.17 250.67 T
(fr) 108 236.67 T
(om) 115.81 236.67 T
4 10 Q
(available-restart) 134.28 236.67 T
1 11 Q
( with a r) 236.28 236.67 T
(estart instance only when a matching r) 276.54 236.67 T
(estart) 464.32 236.67 T
(that accepts is found. All r) 108 222.67 T
(estarts take a) 235.37 222.67 T
4 10 Q
(condition) 301.2 222.67 T
1 11 Q
( init-keywor) 355.2 222.67 T
(d ar) 414.83 222.67 T
(gument,) 433.95 222.67 T
(which, if supplied, should be the original exception that occurr) 108 208.67 T
(ed. If the handler) 413.17 208.67 T
(that cr) 108 194.67 T
(eated the r) 138.85 194.67 T
(estart pr) 190.1 194.67 T
(ovided the original exception condition as an init-) 230.56 194.67 T
(keywor) 108 180.67 T
(d ar) 144.83 180.67 T
(gument, then r) 163.95 180.67 T
(estart handlers can handle r) 235.72 180.67 T
(estart conditions for only) 370.6 180.67 T
(particular exceptions. If none of the established handlers match and accept the) 108 166.67 T
-0.41 (r) 108 152.67 P
-0.41 (estart that we seek, then) 112.15 152.67 P
4 10 Q
-0.89 (available-restart) 230.05 152.67 P
1 11 Q
-0.41 ( r) 332.05 152.67 P
-0.41 (eturns false. Note that you should) 338.54 152.67 P
(establish r) 108 138.67 T
(estart handlers for instantiable r) 157.47 138.67 T
(estart classes only) 312.68 138.67 T
(, because the r) 398.48 138.67 T
(estart) 467.18 138.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "351" 365
%%Page: "352" 366
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(352) 72 677.67 T
0 F
(Chapter 20) 95.75 677.67 T
(Exceptions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(classes will be instantiated by r) 108 640.67 T
(estart-savvy handlers. If the r) 258.69 640.67 T
(estart classes cannot) 401.04 640.67 T
(be instantiated, then the r) 108 626.67 T
(ecovery pr) 231.78 626.67 T
(ocess will not operate corr) 283.39 626.67 T
(ectly) 410.62 626.67 T
(.) 432.46 626.67 T
(Next, we need to de\336ne a method to be called by the exception handler to) 135 612.67 T
-0.22 (invoke the r) 108 598.67 P
-0.22 (estart whether it is available. If the r) 165.67 598.67 P
-0.22 (estart is not available, the method) 338.63 598.67 P
(will call the) 108 584.67 T
4 10 Q
(next-handler) 167.07 584.67 T
1 11 Q
( method, which will allow another handler the oppor-) 239.07 584.67 T
(tunity to decide if it will handle the exception. In other wor) 108 570.67 T
(ds, if the) 395.31 570.67 T
4 10 Q
(<return-) 439.82 570.67 T
(modulus-restart>) 108 556.67 T
1 11 Q
( r) 204 556.67 T
(estart is not established, the handler for) 210.9 556.67 T
4 10 Q
(<time-error>) 405.38 556.67 T
1 11 Q
(established by) 108 542.67 T
4 10 Q
(say-corrected-time) 180.26 542.67 T
1 11 Q
( will) 288.26 542.67 T
2 F
(decline) 312.54 542.67 T
1 F
( to handle the) 349.19 542.67 T
4 10 Q
(<time-) 418.53 542.67 T
(boundary-error>) 108 528.67 T
1 11 Q
( condition being signaled.) 198 528.67 T
4 9 Q
(define method invoke-modulus-restart-if-available) 108 508 T
(\050condition :: <time-error>, next-handler :: <function>\051) 129.6 497 T
(let restart = available-restart\050<return-modulus-restart>, condition\051;) 118.8 486 T
(if \050restart\051 error\050restart\051; else next-handler\050\051; end;) 118.8 475 T
(end method invoke-modulus-restart-if-available;) 108 464 T
1 11 Q
(No r) 108 443.67 T
(eturn values ar) 130.04 443.67 T
(e declar) 202.91 443.67 T
(ed for) 240.65 443.67 T
4 10 Q
(invoke-modulus-restart-if-available) 272.15 443.67 T
1 11 Q
(,) 482.15 443.67 T
(because we cannot be certain what) 108 429.67 T
4 10 Q
(next-handler) 279.23 429.67 T
1 11 Q
( might r) 351.23 429.67 T
(eturn. Our handler) 389.89 429.67 T
(method must be pr) 108 415.67 T
(epar) 200.65 415.67 T
(ed to r) 222.18 415.67 T
(eturn any number of objects of any types. Next, we) 253.41 415.67 T
(establish a handler using the) 108 401.67 T
4 10 Q
(let handler) 249.93 401.67 T
1 11 Q
( local declaration:) 315.93 401.67 T
4 9 Q
(define method say-corrected-time) 108 381 T
(\050arrival-time :: <time-of-day>,) 129.6 370 T
(#key weather-delay :: <time-offset> = $no-time,) 135 359 T
(traffic-delay :: <time-offset> = $no-time\051) 135 348 T
(=> \050\051) 113.4 337 T
(let handler \050<time-error>\051 = invoke-modulus-restart-if-available;) 118.8 326 T
(say\050correct-arrival-time\050arrival-time, weather-delay, traffic-delay\051\051;) 118.8 315 T
(end method say-corrected-time;) 108 304 T
1 11 Q
(The) 108 283.67 T
4 10 Q
(let handler) 129.16 283.67 T
1 11 Q
( local declaration establishes a handler for the) 195.16 283.67 T
4 10 Q
(<time-error>) 419.68 283.67 T
1 11 Q
(condition and for all that condition\325s subclasses. When the) 108 269.67 T
4 10 Q
(error) 394.21 269.67 T
1 11 Q
( function inside) 424.21 269.67 T
(the) 108 255.67 T
4 10 Q
(+) 126.01 255.67 T
1 11 Q
(method signals the) 134.76 255.67 T
4 10 Q
(<time-boundary-error>) 229.71 255.67 T
1 11 Q
( condition instance, Dylan) 355.71 255.67 T
(conducts a sear) 108 241.67 T
(ch for the near) 182.36 241.67 T
(est matching handler that accepts. In this case, the) 252.49 241.67 T
(near) 108 227.67 T
(est matching handler that accepts is the handler established by) 129.32 227.67 T
4 10 Q
(say-) 436.17 227.67 T
(corrected-time) 108 213.67 T
1 11 Q
(. Because this handler was established by a) 192 213.67 T
4 10 Q
(let handler) 402.98 213.67 T
1 11 Q
( local) 468.98 213.67 T
(declaration, instead of by the) 108 199.67 T
4 10 Q
(exception) 251.58 199.67 T
1 11 Q
( clause of) 305.58 199.67 T
4 10 Q
(block) 353.65 199.67 T
1 11 Q
(, no nonlocal exit takes) 383.65 199.67 T
(place. Instead, the function speci\336ed in the) 108 185.67 T
4 10 Q
(let handler) 318.23 185.67 T
1 11 Q
( local declaration is) 384.23 185.67 T
(invoked in the context of the signaler) 108 171.67 T
(. The) 287.51 171.67 T
4 10 Q
(error) 314.17 171.67 T
1 11 Q
( function essentially performs a) 344.17 171.67 T
(r) 108 157.67 T
(egular function call on the function associated with the near) 112.15 157.67 T
(est matching han-) 402.9 157.67 T
(dler) 108 143.67 T
(. The function is passed the condition instance being signaled, and the) 126.72 143.67 T
4 10 Q
(next-) 469.31 143.67 T
(handler) 108 129.67 T
1 11 Q
( function that might be used to decline handling this condition. In our) 150 129.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "352" 366
%%Page: "353" 367
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(20.2 A simple Dylan exception protocol) 364.96 677.67 T
2 F
(353) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(example, the) 108 640.67 T
4 10 Q
(invoke-modulus-restart-if-available) 172.75 640.67 T
1 11 Q
( function will be called) 382.75 640.67 T
-0.18 (fr) 108 626.67 P
-0.18 (om) 115.81 626.67 P
4 10 Q
-0.39 (error) 134.1 626.67 P
1 11 Q
-0.18 (. Once called,) 163.29 626.67 P
4 10 Q
-0.39 (invoke-modulus-restart-if-available) 230.48 626.67 P
1 11 Q
-0.18 ( will \336rst see) 440.48 626.67 P
(whether the) 108 612.67 T
4 10 Q
(<return-modulus-restart>) 169.2 612.67 T
1 11 Q
( r) 313.2 612.67 T
(estart is established. If the r) 320.1 612.67 T
(estart is) 452.75 612.67 T
(established, we will invoke it by signaling an instance of the r) 108 598.67 T
(estart. If the r) 406.66 598.67 T
(estart) 471.39 598.67 T
(is not established, we decline to pr) 108 584.67 T
(ocess the) 275.41 584.67 T
4 10 Q
(<time-boundary-error>) 321.65 584.67 T
1 11 Q
( condition) 447.65 584.67 T
(in this handler) 108 570.67 T
(. Assuming that no other handlers exist, the debugger will be) 177.98 570.67 T
(invoked.) 108 556.67 T
(If the r) 135 542.67 T
(estart is signaled, a nonlocal exit to the r) 167.27 542.67 T
(estart exception clause in) 361.74 542.67 T
4 10 Q
(+) 108 528.67 T
1 11 Q
(method is initiated, which r) 116.75 528.67 T
(eturns the sum suitably wrapped such that it lies) 250.94 528.67 T
(within the 24-hour boundary) 108 514.67 T
(.) 248.11 514.67 T
(Figur) 135 500.67 T
(e 20.2 shows the state of execution after the handler function for) 161.21 500.67 T
4 10 Q
(<time-error>) 108 486.67 T
1 11 Q
( is invoked, and the state after the r) 180 486.67 T
(estart handler function for) 350.8 486.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 143.01 521.5 151 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 20.2) 167.88 154.33 T
8 F
(Conte) 226.24 154.33 T
(xt tr) 252.62 154.33 T
(ansition from handler to restar) 269.2 154.33 T
(t handler) 402.42 154.33 T
(.) 440.83 154.33 T
108 167 521.5 471 C
0 0 0 1 0 0 0 K
108 171 521.5 469 C
0 0 -14 553 272 553 286 108.88 177 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f20-2.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f20-2 .eps)%%CreationDate: (6/6/96) (3:54 PM)%%BoundingBox: 0 -14 553 272%%HiResBoundingBox: 0.175 -13.4917 552.6667 271.5449%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 198 126 198 126%AI3_TileBox: -76.5 -239.5 475.5 490.5%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -106 414 1.5 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4122 4446 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4122 4446 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4122 4446 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 4.5 263 0 TpTP0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Helvetica 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti0 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(State of execution during the handling\r) Tx 0 -11 Td(of the ) Tx /_Courier-Bold 9 Tf(<time-boundary-error>) Tx /_Helvetica 9 Tf( error) Tx (\r) TX TO0 To1 0 0 1 214.75 263.1667 0 TpTP0 Tr(State of execution during the handling \r) Tx 0 -11 Td(of the ) Tx /_Courier-Bold 9 Tf(<return-modulus-restart> ) Tx 0 320 Tk /_Helvetica 9 Tf(restart) Tx (\r) TX TO1 Ap0 R0 G0.65 w203.8333 -13.1667 m203.8333 234.8333 L0.5 234.8333 L0.5 -13.1667 L203.8333 -13.1667 Ls396.6667 72.1667 m396.6667 234.8333 L213.4583 234.8333 L213.4583 72.1667 L396.6667 72.1667 Ls0 Ap1.1667 206.8333 m203.8333 206.8333 lS1.1667 178.8333 m203.8333 178.8333 lS1.1667 152.1667 m203.8333 152.1667 lS1.1667 125.5 m203.8333 125.5 lS1.1667 98.8334 m203.8333 98.8334 lS213.4583 206.8333 m396.7501 206.8333 lS213.4583 178.8333 m396.7501 178.8333 lS213.4583 152.1667 m396.7501 152.1667 lS213.4583 125.5 m396.7501 125.5 lS213.4583 98.8334 m396.7501 98.8334 lS1.1667 72.1667 m203.8333 72.1667 lS1.1667 45.5 m203.8333 45.5 lS1.1667 18.8334 m203.8333 18.8334 lS203.8333 -7.8333 mS1.1667 -7.8333 mSu175.3333 255.3125 m202 255.3125 lS0 O0 g1 w200.4542 253.0746 m208.91 255.34 l200.4542 257.606 l200.4542 253.0746 lfU0 To1 0 0 1 8.5 217.5833 0 TpTP0 Tr(Call to ) Tx /_Courier-Bold 9 Tf(say-corrected-time) Tx (\r) TX TO0 To1 0 0 1 8.5 190.2083 0 TpTP0 Tr/_Helvetica 9 Tf(Handler for ) Tx /_Courier-Bold 9 Tf(<time-error>) Tx (\r) TX TO0 To1 0 0 1 8.5 162.8333 0 TpTP0 Tr/_Helvetica 9 Tf(Call to ) Tx /_Courier-Bold 9 Tf(correct-arrival-time) Tx (\r) TX TO0 To1 0 0 1 8.5 135.4583 0 TpTP0 Tr/_Helvetica 9 Tf(Call to + ) Tx (\r) TX TO0 To1 0 0 1 8.5 109.3333 0 TpTP0 Tr(Block ) Tx (\r) TX TO0 To1 0 0 1 8.5 83.4583 0 TpTP0 Tr(Handler for ) Tx /_Courier-Bold 9 Tf(<return-modulus-restart>) Tx (\r) TX TO0 To1 0 0 1 222.0833 217.5833 0 TpTP0 Tr/_Helvetica 9 Tf(Call to ) Tx /_Courier-Bold 9 Tf(say-corrected-time) Tx (\r) TX TO0 To1 0 0 1 222.0833 190.2083 0 TpTP0 Tr/_Helvetica 9 Tf(Handler for ) Tx /_Courier-Bold 9 Tf(<time-error>) Tx (\r) TX TO0 To1 0 0 1 222.0833 162.8333 0 TpTP0 Tr/_Helvetica 9 Tf(Call to ) Tx /_Courier-Bold 9 Tf(correct-arrival-time) Tx (\r) TX TO0 To1 0 0 1 222.0833 135.4583 0 TpTP0 Tr/_Helvetica 9 Tf(Call to + ) Tx (\r) TX TO0 To1 0 0 1 222.0833 109.3333 0 TpTP0 Tr(Block ) Tx (\r) TX TO0 To1 0 0 1 222.0833 83.4583 0 TpTP0 Tr(Exception clause of block) Tx (\r) TX TO0 To1 0 0 1 8.5 57.0833 0 TpTP0 Tr(Block body) Tx (\r) TX TO0 To1 0 0 1 8.5 29.7083 0 TpTP0 Tr(Call to ) Tx /_Courier-Bold 9 Tf(error) Tx (\r) TX TO0 To1 0 0 1 8.5 5.9167 0 TpTP0 Tr/_Helvetica 9 Tf(Call to \r) Tx 0 -11 Td/_Courier-Bold 9 Tf(invoke-modulus-restart-if-available) Tx (\r) TX TO1 To1 0 0 1 428.6667 22 0 Tp1 Ap428.6667 22 m428.6667 6 L552.6667 6 L552.6667 22 L428.6667 22 LnTP0 -8.25 Td0 Tr0 O0 g/_Helvetica 9 Tf(\r) Tx TO0 Ap414 4446 m414 -4194 L(N) *396.6667 4446 m396.6667 -4194 L(N) *LB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
108 167 521.5 471 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "353" 367
%%Page: "354" 368
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(354) 72 677.67 T
0 F
(Chapter 20) 95.75 677.67 T
(Exceptions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 10 Q
0 X
-0.09 (<return-modulus-restart>) 108 640.67 P
1 11 Q
-0.04 ( is invoked. As you can see, although establishing a) 252 640.67 P
(handler with) 108 626.67 T
4 10 Q
(let handler) 173.7 626.67 T
1 11 Q
( can be far r) 239.7 626.67 T
(emoved fr) 296.5 626.67 T
(om the signaler) 346.25 626.67 T
(, the handler) 420.61 626.67 T
(function itself is executed in the context of the signaler) 108 612.67 T
(.) 371.36 612.67 T
3 13 Q
(20.2.4  Contin) 108 578.33 T
(uation fr) 177.23 578.33 T
(om err) 219.67 578.33 T
(or) 252.65 578.33 T
(s) 263.17 578.33 T
1 11 Q
(The r) 108 552.67 T
(estart mechanism just described is exceedingly general, and may pr) 133.31 552.67 T
(ovide) 460.92 552.67 T
(several dif) 108 538.67 T
(fer) 158.6 538.67 T
(ent ways to r) 171.68 538.67 T
(ecover fr) 234.38 538.67 T
(om exceptional situations. Sometimes, how-) 276.93 538.67 T
(ever) 108 524.67 T
(, ther) 128.28 524.67 T
(e is just one main way to r) 153.19 524.67 T
(ecover) 280.05 524.67 T
(. Under certain cir) 311.23 524.67 T
(cumstances, Dylan) 398.94 524.67 T
(pr) 108 510.67 T
(ovides a way for handlers simply to r) 118.76 510.67 T
(eturn to their callers, allowing execution) 300.14 510.67 T
(to continue after the signaler) 108 496.67 T
(. Her) 246.48 496.67 T
(e, we pr) 270.55 496.67 T
(esent a simpler \050but less \337exible\051 imple-) 309.27 496.67 T
(mentation for r) 108 482.67 T
(ecovering fr) 181.33 482.67 T
(om the time-of-day over\337ow exception:) 239.59 482.67 T
4 9 Q
(define method return-24-hour-modulus) 108 459 T
(\050condition :: <time-error>, next-handler :: <function>\051) 129.6 448 T
(=> \050corrected-time :: <time>\051) 113.4 437 T
(make\050type-for-copy\050condition.invalid-time\051,) 118.8 426 T
(total-seconds: modulo\050condition.invalid-time.total-seconds,) 145.8 415 T
($seconds-per-day\051\051;) 264.6 404 T
(end method return-24-hour-modulus;) 108 393 T
(define method return-allowed? \050condition :: <time-error>\051) 108 363 T
(#t;) 118.8 352 T
(end method return-allowed?;) 108 341 T
(define method return-description \050condition :: <time-error>\051) 108 311 T
("Returns the invalid time modulo 24 hours.";) 118.8 300 T
(end;) 108 289 T
(define method say-corrected-time) 108 259 T
(\050arrival-time :: <time-of-day>,) 129.6 248 T
(#key weather-delay :: <time-offset> = $no-time,) 135 237 T
(traffic-delay :: <time-offset> = $no-time\051) 135 226 T
(=> \050\051) 113.4 215 T
(let handler \050<time-error>\051 = return-24-hour-modulus;) 118.8 204 T
(say\050correct-arrival-time\050arrival-time, weather-delay, traffic-delay\051\051;) 118.8 193 T
(end method say-corrected-time;) 108 182 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "354" 368
%%Page: "355" 369
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(20.2 A simple Dylan exception protocol) 364.96 677.67 T
2 F
(355) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define method \134+ \050offset :: <time-offset>, time-of-day :: <time-of-day>\051) 108 642 T
(=> \050sum :: <time-of-day>\051) 113.4 631 T
(let sum) 118.8 620 T
(= make\050<time-of-day>,) 129.6 609 T
( total-seconds: offset.total-seconds + time-of-day.total-seconds\051;) 162 598 T
(block \050\051) 118.8 587 T
(if \050sum >= $midnight & sum < $tomorrow\051) 129.6 576 T
(sum;) 140.4 565 T
(else) 129.6 554 T
5 F
(// If a handler returns, it must return a valid <time-offset>) 140.4 543 T
4 F
(signal\050make\050<time-boundary-error>, invalid-time: sum,) 140.4 532 T
(min-time: $midnight, time-limit: $tomorrow\051\051;) 199.8 521 T
(end if;) 129.6 510 T
(end block;) 118.8 499 T
(end method \134+;) 108 488 T
1 11 Q
-0.22 (The) 108 467.67 P
4 10 Q
-0.48 (return-allowed?) 128.94 467.67 P
1 11 Q
-0.22 ( and) 218.94 467.67 P
4 10 Q
-0.48 (return-description) 242.62 467.67 P
1 11 Q
-0.22 ( generic functions ar) 350.62 467.67 P
-0.22 (e pr) 448.78 467.67 P
-0.22 (ovided) 467.34 467.67 P
(by Dylan. When the generic function) 108 453.67 T
4 10 Q
(return-allowed?) 289.77 453.67 T
1 11 Q
( r) 379.77 453.67 T
(eturns tr) 386.67 453.67 T
(ue for a given) 428.16 453.67 T
(condition, intr) 108 439.67 T
(ospective handlers know that they can r) 177.24 439.67 T
(eturn successfully back to) 371.03 439.67 T
(the signaler) 108 425.67 T
(. When r) 163.89 425.67 T
(eturning is allowed, such intr) 205.36 425.67 T
(ospective handlers may call the) 347.92 425.67 T
4 10 Q
(return-description) 108 411.67 T
1 11 Q
( generic function to \336nd out what values to r) 216 411.67 T
(eturn, if ther) 432.49 411.67 T
(e) 493.24 411.67 T
(ar) 108 397.67 T
(e any) 117.65 397.67 T
(. This description can be especially useful for interactive handlers, such as) 142.46 397.67 T
(debuggers.) 108 383.67 T
(The) 135 369.67 T
4 10 Q
(return-24-hour-modulus) 156.16 369.67 T
1 11 Q
( method has been generalized compar) 288.16 369.67 T
(ed to) 472.85 369.67 T
(the exception-speci\336c r) 108 355.67 T
(estart de\336ned in Section 20.2.3. This method may r) 219.64 355.67 T
(eturn) 464.79 355.67 T
(either an instance of) 108 341.67 T
4 10 Q
(<time-of-day>) 208.55 341.67 T
1 11 Q
( or) 286.55 341.67 T
4 10 Q
(<time-offset>) 302.4 341.67 T
1 11 Q
(, depending on the class) 380.4 341.67 T
(of time that over\337owed. Thus, it could be r) 108 327.67 T
(eused for exception handling in other) 315.88 327.67 T
(parts of the application.) 108 313.67 T
(In this implementation appr) 135 299.67 T
(oach, ther) 271.74 299.67 T
(e is an implicit contract between the) 319.44 299.67 T
(signaler in the) 108 285.67 T
4 10 Q
(\134+) 179.81 285.67 T
1 11 Q
(method and any handler that matches and accepts) 194.56 285.67 T
4 10 Q
(<time-) 441.85 285.67 T
(boundary-errors>) 108 271.67 T
1 11 Q
(. The contract is that the handler will always r) 204 271.67 T
(eturn a valid) 426.22 271.67 T
4 10 Q
(<time>) 108 257.67 T
1 11 Q
( value, or will never r) 144 257.67 T
(eturn at all. If any handler violates this implicit con-) 248.09 257.67 T
(tract, then the r) 108 243.67 T
(eliability of the pr) 181.96 243.67 T
(ogram will be placed at risk. It is important to) 268.46 243.67 T
(document these err) 108 229.67 T
(or) 201.66 229.67 T
(-handling contracts.) 211.82 229.67 T
(Note that, in the) 135 215.67 T
4 10 Q
(\134+) 216.69 215.67 T
1 11 Q
(method, we must use the) 231.44 215.67 T
4 10 Q
(signal) 356.49 215.67 T
1 11 Q
( function to signal the) 392.49 215.67 T
(exception, because it is illegal for a handler to r) 108 201.67 T
(eturn fr) 336.14 201.67 T
(om exceptions signaled) 372.93 201.67 T
(with the) 108 187.67 T
4 10 Q
(error) 151.12 187.67 T
1 11 Q
( function.) 181.12 187.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "355" 369
%%Page: "356" 370
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(356) 72 677.67 T
0 F
(Chapter 20) 95.75 677.67 T
(Exceptions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(20.3  Ad) 108 638 T
(ditional e) 155.07 638 T
(xception mec) 208.9 638 T
(hanisms) 287.42 638 T
1 11 Q
(W) 108 617.67 T
(e do not cover the entir) 117.99 617.67 T
(e Dylan exception pr) 230.31 617.67 T
(otocol in this book. Her) 331.22 617.67 T
(e, we men-) 444.9 617.67 T
(tion brie\337y certain other techniques that we do not discuss further in this book:) 108 603.67 T
(\245) 117 583.67 T
(Y) 135 583.67 T
(ou can signal conditions with) 141.32 583.67 T
4 10 Q
(cerror) 287.02 583.67 T
1 11 Q
(, and) 322.21 583.67 T
4 10 Q
(break) 349.08 583.67 T
1 11 Q
(, in addition to with the) 379.08 583.67 T
4 10 Q
(error) 135 569.67 T
1 11 Q
( and) 165 569.67 T
4 10 Q
(signal) 189.12 569.67 T
1 11 Q
( functions. The) 225.12 569.67 T
4 10 Q
(cerror) 299.98 569.67 T
1 11 Q
( function establishes a simple) 335.98 569.67 T
(r) 135 555.67 T
(estart, then signals an err) 139.15 555.67 T
(or in a manner similar to) 260.92 555.67 T
4 10 Q
(error) 383.92 555.67 T
1 11 Q
(. The) 413.11 555.67 T
4 10 Q
(break) 439.77 555.67 T
1 11 Q
( func-) 469.77 555.67 T
(tion dir) 135 541.67 T
(ectly invokes the debugger without signaling.) 171.01 541.67 T
(\245) 117 521.67 T
(The) 135 521.67 T
4 10 Q
(exception) 156.16 521.67 T
1 11 Q
( clause of) 210.16 521.67 T
4 10 Q
(block) 258.23 521.67 T
1 11 Q
( and) 288.23 521.67 T
4 10 Q
(let handler) 312.36 521.67 T
1 11 Q
( takes several options) 378.36 521.67 T
(that, among other things, can facilitate r) 135 507.67 T
(estart signaling and handling.) 328.31 507.67 T
(\245) 117 487.67 T
(Ther) 135 487.67 T
(e ar) 157.56 487.67 T
(e additional pr) 175.23 487.67 T
(otocols for attaching a user interface to r) 246.79 487.67 T
(eturning or) 441.86 487.67 T
(r) 135 473.67 T
(estarting \050) 139.15 473.67 T
4 10 Q
(return-query) 188.23 473.67 T
1 11 Q
(,) 259.01 473.67 T
4 10 Q
(restart-query) 264.51 473.67 T
1 11 Q
(\051, which could be used with han-) 342.51 473.67 T
(dlers that act like interactive debuggers.) 135 459.67 T
(See) 108 439.67 T
0 F
(The Dylan Refer) 127.06 439.67 T
(ence Manual) 200.21 439.67 T
1 F
( for mor) 257.56 439.67 T
(e information.) 296.94 439.67 T
3 15 Q
(20.4  Pr) 108 400 T
(otected operations and the) 151.54 400 T
4 14 Q
(block) 312.17 400 T
3 15 Q
( construct) 354.17 400 T
1 11 Q
(In this section, we describe how to use) 108 379.67 T
4 10 Q
(block) 297.34 379.67 T
1 11 Q
( to pr) 327.34 379.67 T
(otect sections of Dylan code) 353.19 379.67 T
(fr) 108 365.67 T
(om unexpected nonlocal exits. Dylan pr) 115.81 365.67 T
(ovides powerful ways to execute) 308.84 365.67 T
(nonlocal exits fr) 108 351.67 T
(om a given execution context. An application might signal a con-) 185.31 351.67 T
(dition that might cause a handler to execute a nonlocal exit, or an application) 108 337.67 T
-0.03 (might call an exit pr) 108 323.67 P
-0.03 (ocedur) 205.09 323.67 P
-0.03 (e named by the \336rst ar) 238.75 323.67 P
-0.03 (gument to) 347.59 323.67 P
4 10 Q
-0.06 (block) 400.35 323.67 P
1 11 Q
-0.03 (. Sometimes, it) 430.35 323.67 P
(is necessary to add behavior to the nonlocal exit, to keep the application\325s execu-) 108 309.67 T
(tion envir) 108 295.67 T
(onment in good shape.) 155.18 295.67 T
3 13 Q
(20.4.1  Pr) 108 264.33 T
(otected objects) 154.63 264.33 T
1 11 Q
(Suppose that you want to design a class of objects that could be accessed only) 108 244.67 T
(when a lock for that object is granted. Y) 108 230.67 T
(ou might use instances of such a class to) 299.32 230.67 T
(avoid con\337icting concurr) 108 216.67 T
(ent access in a multithr) 229.81 216.67 T
(eaded implementation of Dylan,) 341.51 216.67 T
(or you might use instances of such a class to r) 108 202.67 T
(epr) 329.17 202.67 T
(esent \336les or other operating-) 345.19 202.67 T
-0.04 (system objects that might be accessed r) 108 188.67 P
-0.04 (eliably by only one pr) 296.79 188.67 P
-0.04 (ocess at a time. Let\325s) 402.56 188.67 P
(assume that the) 108 174.67 T
4 10 Q
(<lock>) 187.02 174.67 T
1 11 Q
( class and the) 223.02 174.67 T
4 10 Q
(get-lock) 290.82 174.67 T
1 11 Q
( and) 338.82 174.67 T
4 10 Q
(release-lock) 362.94 174.67 T
1 11 Q
( functions ar) 434.94 174.67 T
(e) 495.53 174.67 T
(supplied by an external library) 108 160.67 T
(. The) 256.83 160.67 T
4 10 Q
(get-lock) 283.49 160.67 T
1 11 Q
( function atomically obtains the) 331.49 160.67 T
(lock if that lock is available; otherwise, it waits until the lock becomes fr) 108 146.67 T
(ee, and) 456.15 146.67 T
(then obtains the lock. The) 108 132.67 T
4 10 Q
(release-lock) 235.48 132.67 T
1 11 Q
( function fr) 307.48 132.67 T
(ees the lock so that some) 361.57 132.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "356" 370
%%Page: "357" 371
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(20.4 Protected operations and the) 319.15 677.67 T
5 F
(block) 449.14 677.67 T
0 F
( construct) 477.64 677.67 T
2 F
(357) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(other pr) 108 640.67 T
(ocess can acquir) 147.12 640.67 T
(e the lock. Given this locking library) 225.41 640.67 T
(, how would we) 400.23 640.67 T
(de\336ne the following?) 108 626.67 T
(\245) 117 606.67 T
(A class that r) 135 606.67 T
(epr) 197.94 606.67 T
(esents a pr) 213.97 606.67 T
(otected object) 265.58 606.67 T
(\245) 117 586.67 T
(A) 135 586.67 T
4 10 Q
(call-using-lock) 146.31 586.67 T
1 11 Q
( function, which acquir) 236.31 586.67 T
(es a lock associated with a pr) 348.67 586.67 T
(o-) 489.43 586.67 T
(tected object, calls an arbitrary function, and then r) 135 572.67 T
(eleases the lock) 381.8 572.67 T
(W) 108 552.67 T
(e could de\336ne the class as follows:) 117.99 552.67 T
4 9 Q
(define abstract class <protected-object> \050<object>\051) 108 532 T
(slot object-lock :: <lock> = make\050<lock>\051;) 118.8 521 T
(end class <protected-object>;) 108 510 T
1 11 Q
(Each subclass of) 108 489.67 T
4 10 Q
(<protected-object>) 189.72 489.67 T
1 11 Q
( would inherit an) 297.72 489.67 T
4 10 Q
(object-lock) 384.76 489.67 T
1 11 Q
( slot. The) 450.76 489.67 T
(lock instance stor) 108 475.67 T
(ed in this slot must be acquir) 192.02 475.67 T
(ed prior to any operation on the) 331.89 475.67 T
(pr) 108 461.67 T
(otected object, and r) 118.76 461.67 T
(eleased when the operation is complete. One naive way to) 216.25 461.67 T
(implement) 108 447.67 T
4 10 Q
(call-using-lock) 163.71 447.67 T
1 11 Q
( would be as follows:) 253.71 447.67 T
4 9 Q
(define method call-using-lock) 108 427 T
(\050object :: <protected-object>, function :: <function>, #rest args\051) 129.6 416 T
(=> \050#rest results\051) 113.4 405 T
(get-lock\050object.object-lock\051;) 118.8 394 T
(apply\050function, object, args\051;) 118.8 383 T
(release-lock\050object.object-lock\051;) 118.8 372 T
(end method call-using-lock;) 108 361 T
1 11 Q
(The appr) 108 340.67 T
(oach in the pr) 152.03 340.67 T
(eceding example has two serious pr) 218.69 340.67 T
(oblems. First,) 392.42 340.67 T
4 10 Q
(call-) 460.26 340.67 T
(using-lock) 108 326.67 T
1 11 Q
( does not r) 168 326.67 T
(eturn the values r) 219.05 326.67 T
(eturned by calling) 304.42 326.67 T
4 10 Q
(function) 395.6 326.67 T
1 11 Q
(. Second, if) 443.6 326.67 T
4 10 Q
(function) 108 312.67 T
1 11 Q
(executes a nonlocal exit past) 162 312.67 T
4 10 Q
(call-using-lock) 302.2 312.67 T
1 11 Q
(, the) 392.2 312.67 T
4 10 Q
(release-lock) 415.7 312.67 T
1 11 Q
(call will never be executed, and after that point no pr) 108 298.67 T
(ocess will be able to acquir) 365 298.67 T
(e) 494.54 298.67 T
(the lock for the pr) 108 284.67 T
(otected object. Thus, subsequent attempts to use the pr) 194.49 284.67 T
(otected) 460.21 284.67 T
-0.27 (object will wait for) 108 270.67 P
-0.27 (ever) 197.89 270.67 P
-0.27 (, because the lock was not pr) 218.17 270.67 P
-0.27 (operly r) 355.64 270.67 P
-0.27 (eleased. W) 393.81 270.67 P
-0.27 (e could add) 444.91 270.67 P
(a handler that would r) 108 256.67 T
(elease the lock if any condition is signaled, but that might) 217.3 256.67 T
(be incorr) 108 242.67 T
(ect, because certain conditions might be handled within the dynamic) 151.09 242.67 T
(scope of) 108 228.67 T
4 10 Q
(function) 150.6 228.67 T
1 11 Q
(, and might never perform a nonlocal exit past) 198.6 228.67 T
4 10 Q
(call-using-) 426.39 228.67 T
-0.65 (lock) 108 214.67 P
1 11 Q
-0.3 (. Thus, the lock might be r) 132 214.67 P
-0.3 (eleased pr) 256.64 214.67 P
-0.3 (ematur) 305.75 214.67 P
-0.3 (ely) 340.59 214.67 P
-0.3 (, possibly causing the integrity) 353.96 214.67 P
(of the pr) 108 200.67 T
(otected object to be violated. Also, calling an exit pr) 149.18 200.67 T
(ocedur) 399.13 200.67 T
(e performs a) 432.79 200.67 T
(nonlocal exit without signaling a condition at all.) 108 186.67 T
(T) 135 172.67 T
(o solve exactly this sort of pr) 140.73 172.67 T
(oblem, Dylan pr) 279.7 172.67 T
(ovides the) 358.72 172.67 T
4 10 Q
(cleanup) 411.55 172.67 T
1 11 Q
( clause of) 453.55 172.67 T
4 10 Q
(block) 108 158.67 T
1 11 Q
(. Code within the body of a) 138 158.67 T
4 10 Q
(cleanup) 273.11 158.67 T
1 11 Q
( clause is guaranteed to be executed) 315.11 158.67 T
(befor) 108 144.67 T
(e the) 133.17 144.67 T
4 10 Q
(block) 159.19 144.67 T
1 11 Q
( is exited, even if it is a nonlocal exit that causes the) 189.19 144.67 T
4 10 Q
(block) 440.73 144.67 T
1 11 Q
( to) 470.73 144.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "357" 371
%%Page: "358" 372
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(358) 72 677.67 T
0 F
(Chapter 20) 95.75 677.67 T
(Exceptions) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(terminate. The value of this) 108 640.67 T
4 10 Q
(block) 244.12 640.67 T
1 11 Q
( will be the r) 274.12 640.67 T
(esult of calling) 334.66 640.67 T
4 10 Q
(function) 408.43 640.67 T
1 11 Q
(. The) 456.43 640.67 T
4 10 Q
(cleanup) 108 626.67 T
1 11 Q
( clause does not af) 150 626.67 T
(fect what the) 238.77 626.67 T
4 10 Q
(block) 304.34 626.67 T
1 11 Q
( r) 334.34 626.67 T
(eturns.) 341.24 626.67 T
4 9 Q
(define method call-using-lock) 108 606 T
(\050object :: <protected-object>, function :: <function>, #rest args\051) 129.6 595 T
(=> \050#rest results\051) 113.4 584 T
(block \050\051) 118.8 573 T
(get-lock\050object.object-lock\051;) 129.6 562 T
(apply\050function, object, args\051;) 129.6 551 T
(cleanup) 118.8 540 T
(release-lock\050object.object-lock\051;) 129.6 529 T
(end block;) 118.8 518 T
(end method call-using-lock;) 108 507 T
1 11 Q
(The) 108 486.67 T
4 10 Q
(cleanup) 129.16 486.67 T
1 11 Q
( clause of) 171.16 486.67 T
4 10 Q
(block) 219.23 486.67 T
1 11 Q
( pr) 249.23 486.67 T
(ovides a powerful tool for ensuring the integrity) 262.74 486.67 T
(of applications that use nonlocal exits.) 108 472.67 T
3 15 Q
(20.5  Summar) 108 433 T
(y) 188.12 433 T
1 11 Q
(In this chapter) 108 412.67 T
(, we cover) 177.24 412.67 T
(ed the following:) 226.46 412.67 T
(\245) 117 392.67 T
(W) 135 392.67 T
(e described how to de\336ne condition classes, and to signal them.) 144.99 392.67 T
(\245) 117 372.67 T
-0.06 (W) 135 372.67 P
-0.06 (e explor) 144.99 372.67 P
-0.06 (ed establishing simple err) 183.85 372.67 P
-0.06 (or handlers using the) 308.61 372.67 P
4 10 Q
-0.14 (exception) 414.48 372.67 P
1 11 Q
-0.06 ( clause) 468.48 372.67 P
(of) 135 358.67 T
4 10 Q
(block) 147.42 358.67 T
1 11 Q
(.) 177.42 358.67 T
(\245) 117 338.67 T
-0.1 (W) 135 338.67 P
-0.1 (e showed how to design and implement a intr) 144.99 338.67 P
-0.1 (ospective r) 367.65 338.67 P
-0.1 (ecovery pr) 420.15 338.67 P
-0.1 (otocol) 471.66 338.67 P
(using) 135 324.67 T
4 10 Q
(let handler) 164.77 324.67 T
1 11 Q
(,) 229.95 324.67 T
4 10 Q
(do-handler) 235.45 324.67 T
1 11 Q
(, and r) 294.64 324.67 T
(estarts.) 325.66 324.67 T
(\245) 117 304.67 T
(W) 135 304.67 T
(e demonstrated how a handler can simply r) 144.99 304.67 T
(eturn to the signaler with) 356.65 304.67 T
(cooperation fr) 135 290.67 T
(om that signaler) 203.38 290.67 T
(.) 281.55 290.67 T
(\245) 117 270.67 T
(W) 135 270.67 T
(e showed how we can pr) 144.99 270.67 T
(otect sections of code fr) 265.81 270.67 T
(om unexpected nonlocal) 379.18 270.67 T
(exits by using the) 135 256.67 T
4 10 Q
(cleanup) 222.87 256.67 T
1 11 Q
( clause pr) 264.87 256.67 T
(ovided by) 311.28 256.67 T
4 10 Q
(block) 363.11 256.67 T
1 11 Q
(.) 393.11 256.67 T
(Y) 108 236.67 T
(ou can use these techniques to contr) 114.32 236.67 T
(ol the handling of exceptional situations) 289.09 236.67 T
-0.48 (when they arise. By designing your condition classes car) 108 222.67 P
-0.48 (efully and handling those) 378.34 222.67 P
(conditions corr) 108 208.67 T
(ectly) 181.21 208.67 T
(, you make your pr) 203.04 208.67 T
(ogram signi\336cantly mor) 296 208.67 T
(e r) 412.98 208.67 T
(obust, without) 425.14 208.67 T
(interr) 108 194.67 T
(upting the normal \337ow of contr) 135.06 194.67 T
(ol. By pr) 288.35 194.67 T
(oviding r) 329.4 194.67 T
(ecovery pr) 374.16 194.67 T
(otocols, you) 425.77 194.67 T
-0.19 (make it possible to continue cleanly after a pr) 108 180.67 P
-0.19 (oblem has been detected. By pr) 326.71 180.67 P
-0.19 (otect-) 477.01 180.67 P
(ing critical code against unexpected nonlocal exits, you enhance the r) 108 166.67 T
(eliability of) 443.23 166.67 T
(your applications.) 108 152.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "358" 372
%%Page: "359" 373
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(359) 298.88 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(21) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(21) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Macr) 110 566.45 T
(os) 178.01 566.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
(The term) 108 424.67 T
2 F
(macro) 154.83 424.67 T
1 F
(, as used in computer pr) 185.38 424.67 T
(ogramming, originally stood for) 302.74 424.67 T
2 F
-0.14 (macro-instruction) 108 410.67 P
1 F
-0.14 (, meaning an instr) 197.2 410.67 P
-0.14 (uction that r) 284.4 410.67 P
-0.14 (epr) 343.55 410.67 P
-0.14 (esented a sequence of several) 359.58 410.67 P
(machine \050or micr) 108 396.67 T
(o\051 instr) 190.83 396.67 T
(uctions. Over time, the term has evolved to mean any) 225.36 396.67 T
-0.37 (wor) 108 382.67 P
-0.37 (d or phrase that stands for another phrase \050usually longer) 127.33 382.67 P
-0.37 (, but built of simpler) 403.67 382.67 P
(components\051. Macr) 108 368.67 T
(os can be used for abbr) 201.64 368.67 T
(eviation, abstraction, simpli\336cation, or) 313.32 368.67 T
(str) 108 354.67 T
(ucturing. Many application pr) 120.51 354.67 T
(ograms, such as wor) 267.19 354.67 T
(d pr) 366.61 354.67 T
(ocessors or spr) 386.84 354.67 T
(ead-) 458.61 354.67 T
(sheets, of) 108 340.67 T
(fer a macr) 152.82 340.67 T
(o language for writing scripts or subr) 201.35 340.67 T
(outines that bundle a) 382.46 340.67 T
(number of simpler actions into one command.) 108 326.67 T
(Many computer languages support a macr) 135 312.67 T
(o facility for cr) 341.82 312.67 T
(eating shorthand) 412.48 312.67 T
-0.4 (notations for commonly used, longer phrases. They range fr) 108 298.67 P
-0.4 (om simple, text-based) 395.79 298.67 P
(abbr) 108 284.67 T
(eviations to full languages, permitting computed r) 129.81 284.67 T
(eplacements. Macr) 374.4 284.67 T
(os ar) 465.2 284.67 T
(e) 488.27 284.67 T
(pr) 108 270.67 T
(ocessed befor) 118.76 270.67 T
(e the pr) 184.15 270.67 T
(ogram is compiled by) 220.94 270.67 T
2 F
(expanding) 329.29 270.67 T
1 F
( each macr) 382.45 270.67 T
(o into its) 434.25 270.67 T
(r) 108 256.67 T
(eplacement phrase as that macr) 112.15 256.67 T
(o is encounter) 265.12 256.67 T
(ed until ther) 333.09 256.67 T
(e ar) 393.01 256.67 T
(e no mor) 410.68 256.67 T
(e macr) 453.72 256.67 T
(os.) 485.98 256.67 T
(Y) 108 242.67 T
(ou can use macr) 114.32 242.67 T
(os to extend the base language by de\336ning mor) 192.81 242.67 T
(e sophisticated) 422.34 242.67 T
(phrases in terms of simpler) 108 228.67 T
(, built-in phrases.) 239.49 228.67 T
-0.13 (The primary use of macr) 135 214.67 P
-0.13 (os in pr) 254.21 214.67 P
-0.13 (ogramming languages is to extend or adapt) 290.48 214.67 P
-0.37 (the language to allow a mor) 108 200.67 P
-0.37 (e concise or r) 241.93 200.67 P
-0.37 (eadable solution for a particular pr) 304.14 200.67 P
-0.37 (oblem) 471.35 200.67 P
(domain. A simple pr) 108 186.67 T
(ogram rar) 208.52 186.67 T
(ely needs macr) 256.94 186.67 T
(os. Mor) 329.6 186.67 T
(e complicated pr) 366.32 186.67 T
(ograms,) 447.43 186.67 T
(including the implementation of a Dylan compiler and r) 108 172.67 T
(un-time system, will use) 380.69 172.67 T
(macr) 108 158.67 T
(os often. Macr) 132.24 158.67 T
(os have no visible r) 201.03 158.67 T
(un-time cost or ef) 294.58 158.67 T
(fect \321 they ar) 379.52 158.67 T
(e transfor-) 447.2 158.67 T
(mations that take place during the compilation of a pr) 108 144.67 T
(ogram \050hence, they) 369.74 144.67 T
0 F
(can) 465.69 144.67 T
1 F
-0.01 (incr) 108 130.67 P
-0.01 (ease compilation time\051. Although macr) 126.63 130.67 P
-0.01 (os may take the form of function calls,) 315.95 130.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "359" 373
%%Page: "360" 374
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(360) 72 677.67 T
0 F
(Chapter 21) 95.75 677.67 T
(Macros) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.33 (they ar) 108 640.67 P
-0.33 (e not functions \321 they cannot be passed as functional ar) 141.44 640.67 P
-0.33 (guments, and they) 411.6 640.67 P
(cannot be invoked in a r) 108 626.67 T
(un-time image as a function can. Although macr) 225.17 626.67 T
(os may) 459.81 626.67 T
(have parameters, they do not take ar) 108 612.67 T
(guments the way functions do. The ar) 285.65 612.67 T
(gu-) 469.56 612.67 T
(ments to a macr) 108 598.67 T
(o ar) 185.22 598.67 T
(e not evaluated; they ar) 203.62 598.67 T
(e simply pr) 317.55 598.67 T
(ogram phrases that can be) 372.58 598.67 T
(substituted in the r) 108 584.67 T
(eplacement phrase.) 199.88 584.67 T
(Dylan pr) 135 570.67 T
(ovides a macr) 178.24 570.67 T
(o facility that is based on pattern matching and tem-) 245.56 570.67 T
(plate substitution. This facility is mor) 108 556.67 T
(e powerful than is a simple textual substitu-) 289.01 556.67 T
(tion facility) 108 542.67 T
(, but is simpler than a) 162.08 542.67 T
0 F
(pr) 269.89 542.67 T
(ocedural-macr) 279.47 542.67 T
(o) 342.61 542.67 T
1 F
( facility) 347.49 542.67 T
(, which allows arbitrary) 382.37 542.67 T
(computations to constr) 108 528.67 T
(uct r) 219.68 528.67 T
(eplacement phrases. Dylan\325s macr) 241.68 528.67 T
(o facility is closely) 407.54 528.67 T
(integrated with the Dylan language syntax, and permits most macr) 108 514.67 T
(o needs to be) 433.75 514.67 T
(satis\336ed. Dylan designers have also planned for a full pr) 108 500.67 T
(ocedural macr) 381.98 500.67 T
(o capabil-) 451.53 500.67 T
(ity) 108 486.67 T
(, so that it can be added compatibly at a later time if ther) 119.68 486.67 T
(e is suf) 393.21 486.67 T
(\336cient demand.) 426.6 486.67 T
3 15 Q
(21.1  P) 108 285 T
(atterns and templates) 146.62 285 T
1 11 Q
(A Dylan macr) 108 264.67 T
(o consists of a set of) 176.04 264.67 T
2 F
(rules) 274.97 264.67 T
1 F
(. Each r) 300.02 264.67 T
(ule has two basic parts: a) 336.03 264.67 T
2 F
(pattern) 460.25 264.67 T
1 F
(that is matched against a fragment of code, and a) 108 250.67 T
2 F
(template) 349 250.67 T
1 F
( that is substituted for) 392.99 250.67 T
-0.2 (the matched fragment, per) 108 236.67 P
-0.2 (haps including pieces of the original fragment. When a) 236.36 236.67 P
(macr) 108 222.67 T
(o is invoked, each r) 132.24 222.67 T
(ule is tried in or) 226.11 222.67 T
(der until a matching pattern is found.) 302.95 222.67 T
(When a match is found, the macr) 108 208.67 T
(o is r) 268.7 208.67 T
(eplaced by the matching template. If no) 292.22 208.67 T
(match can be found, an err) 108 194.67 T
(or occurs.) 237.81 194.67 T
(Dylan macr) 135 180.67 T
(os ar) 191.73 180.67 T
(e r) 214.79 180.67 T
(ecognized by the compiler because they \336t one of thr) 226.96 180.67 T
(ee) 483.16 180.67 T
(possible formats: the function macr) 108 166.67 T
(o, the statement macr) 279.2 166.67 T
(o, and the de\336ning) 383.29 166.67 T
-0.29 (macr) 108 152.67 P
-0.29 (o. The macr) 132.24 152.67 P
-0.29 (o format determines the overall fragment that is matched against) 188.58 152.67 P
(the macr) 108 138.67 T
(o\325s r) 150.25 138.67 T
(ules at each macr) 170.99 138.67 T
(o invocation.) 254.39 138.67 T
2 F
(Comparison with C and C++:) 141 452.67 T
1 F
( C and C++ macr) 287.84 452.67 T
(os ar) 370.64 452.67 T
(e text substitu-) 393.7 452.67 T
(tions, performed by a pr) 141 438.67 T
(epr) 259.01 438.67 T
(ocessor) 275.04 438.67 T
(. The pr) 310.06 438.67 T
(epr) 347.48 438.67 T
(ocessor has no under-) 363.51 438.67 T
(standing of the language; it simply splices together text fragments to) 141 424.67 T
(cr) 141 410.67 T
(eate r) 150.03 410.67 T
(eplacement phrases.) 176.55 410.67 T
(Dylan macr) 168 396.67 T
(os ar) 224.73 396.67 T
(e written in terms of Dylan language ele-) 247.79 396.67 T
(ments; the macr) 141 382.67 T
(os choose their transformation by pattern match-) 218.38 382.67 T
(ing, and they substitute pr) 141 368.67 T
(ogram fragments.) 269.13 368.67 T
(Language-based macr) 168 354.67 T
(os ar) 275.15 354.67 T
(e mor) 298.22 354.67 T
(e powerful than \321 and) 326.1 354.67 T
-0.25 (avoid a number of common pitfalls of \321 text-substitution macr) 141 340.67 P
-0.25 (os.) 446.08 340.67 P
(These pitfalls ar) 141 326.67 T
(e described in later comparisons in this chapter) 218.12 326.67 T
(.) 446.54 326.67 T
135 465.88 135 319.13 2 L
V
0.25 H
0 Z
N
486 465.88 486 319.13 2 L
V
N
134.88 466 486.12 466 2 L
V
N
134.88 319 486.12 319 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "360" 374
%%Page: "361" 375
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(21.1 Patterns and templates) 409.12 677.67 T
2 F
(361) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(The simplest macr) 135 640.67 T
(o format that the compiler can match is that of a function) 224.07 640.67 T
(call. A) 108 626.67 T
2 F
(function macro) 141.59 626.67 T
1 F
( is invoked in exactly the same way that a function is) 217.67 626.67 T
-0.35 (invoked. The name of the macr) 108 612.67 P
-0.35 (o is a module variable that can be used anywher) 257.13 612.67 P
-0.35 (e a) 488.44 612.67 P
(function call can occur) 108 598.67 T
(. T) 216.54 598.67 T
(ypically) 227.79 598.67 T
(, it is simply the name followed by a par) 265.4 598.67 T
(enthe-) 460.4 598.67 T
(sized list of ar) 108 584.67 T
(guments, but r) 175.57 584.67 T
(ecall that slot-style abbr) 246.65 584.67 T
(eviations and unary and) 361.8 584.67 T
(binary operators ar) 108 570.67 T
(e also function calls.) 201.13 570.67 T
(The most important use of function macr) 135 556.67 T
(os is to r) 334.09 556.67 T
(earrange or delay evalua-) 374.61 556.67 T
(tion of ar) 108 542.67 T
(guments. The fragment that is matched against the function macr) 152.01 542.67 T
(o\325s) 469.16 542.67 T
-0.29 (r) 108 528.67 P
-0.29 (ules is the phrase that r) 112.26 528.67 P
-0.29 (epr) 223.45 528.67 P
-0.29 (esents a function\325s ar) 239.48 528.67 P
-0.29 (guments. The function macr) 340.35 528.67 P
-0.29 (o can) 476.29 528.67 P
-0.08 (then r) 108 514.67 P
-0.08 (earrange the function ar) 136.48 514.67 P
-0.08 (guments, per) 252.92 514.67 P
-0.08 (haps adding code. When a macr) 316.75 514.67 P
-0.08 (o r) 472.4 514.67 P
-0.08 (ear-) 485.22 514.67 P
(ranges its ar) 108 500.67 T
(guments, its action has the ef) 166.89 500.67 T
(fect of delaying the evaluation of the) 307.36 500.67 T
(ar) 108 486.67 T
(guments \050as opposed to a function call, wher) 117.65 486.67 T
(e the ar) 335.39 486.67 T
(gument expr) 371.07 486.67 T
(essions ar) 433.24 486.67 T
(e) 480.5 486.67 T
(evaluated and then passed to the function\051.) 108 472.67 T
(One simple use of delaying evaluation is to write a functionlike constr) 135 458.67 T
(uct) 475.39 458.67 T
(similar in spirit to C\325s) 108 444.67 T
4 10 Q
(?:) 215.9 444.67 T
1 11 Q
( operator:) 227.9 444.67 T
4 9 Q
(define macro if-else) 108 424 T
({ if-else \050?test:expression, ?true:expression, ?false:expression\051 }) 118.8 413 T
(=> { if \050?test\051 ?true else ?false end }) 113.4 402 T
(end macro if-else;) 108 391 T
1 11 Q
(W) 108 370.67 T
(e could not write) 117.99 370.67 T
4 10 Q
(if-else) 203.27 370.67 T
1 11 Q
( as a function, because both the tr) 245.27 370.67 T
(ue and false expr) 407.19 370.67 T
(es-) 489.97 370.67 T
(sions would be evaluated befor) 108 356.67 T
(e the function was even called:) 260.09 356.67 T
6 9 Q
(?) 108 336 T
4 F
(define variable *x* = 0;) 118.8 336 T
6 F
(?) 108 317 T
4 F
(define variable *y* = 0;) 118.8 317 T
6 F
(?) 108 298 T
4 F
(*y* := if-else\050*y* == 0, *x* := 1, *x* := -1\051;) 118.8 298 T
6 F
(1) 108 287 T
(?) 108 268 T
4 F
(*y*;) 118.8 268 T
6 F
(1) 108 257 T
(?) 108 238 T
4 F
(*x*;) 118.8 238 T
6 F
(1) 108 227 T
1 11 Q
(If we had de\336ned) 108 206.67 T
4 10 Q
(if-else) 196.47 206.67 T
1 11 Q
( as a function,) 238.47 206.67 T
4 9 Q
(*x*) 308.66 206.67 T
1 11 Q
( would have been) 324.86 206.67 T
4 10 Q
(-1) 414.01 206.67 T
1 11 Q
(, rather than) 426.01 206.67 T
4 10 Q
(1) 488.35 206.67 T
1 11 Q
(,) 494.35 206.67 T
-0.33 (because both assignments to) 108 192.67 P
4 9 Q
-0.64 (*x*) 247.85 192.67 P
1 11 Q
-0.33 ( would have been evaluated, befor) 264.05 192.67 P
-0.33 (e) 430.12 192.67 P
4 10 Q
-0.71 (if-else) 437.81 192.67 P
1 11 Q
-0.33 ( was) 479.81 192.67 P
(called. When a macr) 108 178.67 T
(o is used, the assignments ar) 206.59 178.67 T
(e just substituted into the tem-) 345.34 178.67 T
(plate) 108 164.67 T
4 10 Q
(if) 134.92 164.67 T
1 11 Q
(, which evaluates the \336rst clause only when the condition is tr) 146.92 164.67 T
(ue.) 446.82 164.67 T
(Looking at the macr) 135 150.67 T
(o de\336nition of) 232.4 150.67 T
4 10 Q
(if-else) 303.77 150.67 T
1 11 Q
(, we can infer basic ideas about) 345.77 150.67 T
-0.29 (macr) 108 136.67 P
-0.29 (os. A macr) 132.24 136.67 P
-0.29 (o is intr) 183.39 136.67 P
-0.29 (oduced by) 219.52 136.67 P
4 10 Q
-0.63 (define macro) 272.88 136.67 P
1 11 Q
-0.29 (, followed by the) 344.26 136.67 P
2 F
-0.29 (macro name) 427.55 136.67 P
1 F
-0.29 ( \321) 488.07 136.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "361" 375
%%Page: "362" 376
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(362) 72 677.67 T
0 F
(Chapter 21) 95.75 677.67 T
(Macros) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(in this case,) 108 640.67 T
4 10 Q
(if-else) 166.77 640.67 T
1 11 Q
(. The de\336nition of the macr) 208.77 640.67 T
(o is a) 340.3 640.67 T
2 F
(rule) 367.92 640.67 T
1 F
( that has two parts: a) 388.08 640.67 T
2 F
(pattern) 108 626.67 T
1 F
( enclosed in braces,) 144.05 626.67 T
4 10 Q
({}) 240.56 626.67 T
1 11 Q
(, that mimics the fragment that it is to match, and a) 252.56 626.67 T
2 F
(replacement) 108 612.67 T
1 F
(. Macr) 169.71 612.67 T
(o parameters, called) 200.15 612.67 T
2 F
(pattern variables) 300.73 612.67 T
1 F
(, ar) 385.35 612.67 T
(e intr) 400.5 612.67 T
(oduced in the) 425.86 612.67 T
(pattern by) 108 598.67 T
4 10 Q
(?) 161 598.67 T
1 11 Q
(. They match fragments with particular) 167 598.67 T
2 F
(constraints) 360.29 598.67 T
1 F
( \321 in this case,) 415.27 598.67 T
4 10 Q
(:expression) 108 584.67 T
1 11 Q
(. They ar) 174 584.67 T
(e delimited by punctuation \321 in this case, the open and) 216.43 584.67 T
(close par) 108 570.67 T
(entheses,) 151.03 570.67 T
4 10 Q
(\050\051) 198.06 570.67 T
1 11 Q
(, and the comma,) 210.06 570.67 T
4 10 Q
(,) 296.25 570.67 T
1 11 Q
(.) 302.25 570.67 T
(The r) 135 556.67 T
(eplacement part of the r) 160.31 556.67 T
(ule, the) 276.24 556.67 T
2 F
(expansion) 314.85 556.67 T
1 F
(, is indicated by) 366.18 556.67 T
4 10 Q
(=>) 445.48 556.67 T
1 11 Q
( and is) 457.48 556.67 T
(de\336ned by a) 108 542.67 T
2 F
(template) 170.99 542.67 T
1 F
(, also enclosed in braces. The template is in the form of a) 214.98 542.67 T
(code fragment, wher) 108 528.67 T
(e pattern variables ar) 208.72 528.67 T
(e used to substitute in the fragments) 311.16 528.67 T
(they matched in the pattern. Note that matching and r) 108 514.67 T
(eplacement ar) 370.76 514.67 T
(e language) 438.86 514.67 T
(based, so r) 108 500.67 T
(equir) 159.3 500.67 T
(ed and optional whitespace is tr) 184.71 500.67 T
(eated exactly as in Dylan. W) 339.75 500.67 T
(e) 476.31 500.67 T
(have used optional whitespace to impr) 108 486.67 T
(ove the legibility of the macr) 296.76 486.67 T
(o de\336nitions) 435.6 486.67 T
(pr) 108 472.67 T
(esented her) 118.76 472.67 T
(e.) 174.51 472.67 T
-0.42 (Most Dylan development envir) 135 458.67 P
-0.42 (onments pr) 285.89 458.67 P
-0.42 (ovide a way to view code after all) 341.03 458.67 P
(macr) 108 444.67 T
(os have been expanded. This view can be helpful in debugging macr) 132.24 444.67 T
(os that) 464.98 444.67 T
(you write. For example, showing the expanded view of an expr) 108 430.67 T
(ession like) 415.56 430.67 T
4 9 Q
(*y* := if-else\050*y* == 0, *x* := 1, *x* := -1\051;;) 108 410 T
1 11 Q
(might yield) 108 389.67 T
4 9 Q
(*y*) 108 369 T
4 10 Q
( :=) 124.2 369 T
169.8 368.1 148.2 368.1 2 L
V
0.45 H
0 Z
N
6 9 Q
(if \050) 148.2 369 T
4 F
(*y* == 0) 169.8 369 T
218.4 368.1 213 368.1 2 L
V
N
6 F
(\051) 213 369 T
4 F
(*x*) 224.4 369 T
4 10 Q
( := 1) 240.6 369 T
298.2 368.1 276.6 368.1 2 L
V
N
6 9 Q
(else) 276.6 369 T
4 F
(*x*) 304.2 369 T
4 10 Q
( := -1) 320.4 369 T
378.6 368.1 362.4 368.1 2 L
V
N
6 9 Q
(end) 362.4 369 T
4 10 Q
(;) 378.6 369 T
1 11 Q
(The exact format of the expanded view of the macr) 108 348.67 T
(o depends on the particular) 355.02 348.67 T
(development envir) 108 334.67 T
(onment. Her) 200.25 334.67 T
(e, we show the code that comes fr) 261.69 334.67 T
(om the macr) 425.21 334.67 T
(o) 485.93 334.67 T
(template in) 108 320.67 T
257.64 319.77 165.84 319.77 2 L
V
N
6 9 Q
(underlined italic) 165.84 320.67 T
1 11 Q
(, wher) 257.64 320.67 T
(eas the fragments matched by the pattern) 288.13 320.67 T
(variables and substituted into the template ar) 108 306.67 T
(e pr) 328.56 306.67 T
(esented in our conventional) 347.34 306.67 T
4 10 Q
(code font) 108 292.67 T
1 11 Q
(. Note that the) 162 292.67 T
4 10 Q
(if-else) 234.08 292.67 T
1 11 Q
( macr) 276.08 292.67 T
(o we have de\336ned is just syntactic sugar) 303.08 292.67 T
(\321 Dylan\325s built-in) 108 278.67 T
4 10 Q
(if) 200.68 278.67 T
1 11 Q
( statement is perfectly suf) 212.68 278.67 T
(\336cient for the job.) 336.82 278.67 T
-0.29 (Another r) 135 264.67 P
-0.29 (eason to delay evaluation is to change the value of an ar) 182.18 264.67 P
-0.29 (gument \321) 450.35 264.67 P
-0.18 (for example, to implement an operator similar in spirit to C\325s) 108 250.67 P
4 10 Q
-0.39 (++) 404.58 250.67 P
1 11 Q
-0.18 ( and) 416.58 250.67 P
4 10 Q
-0.39 (+=) 440.35 250.67 P
1 11 Q
-0.18 ( operators:) 452.35 250.67 P
4 9 Q
(define macro inc!) 108 230 T
({ inc! \050?place:expression, ?by:expression\051 }) 118.8 219 T
(=> { ?place := ?place + ?by; }) 113.4 208 T
({ inc! \050?place:expression\051 }) 118.8 197 T
(=> { ?place := ?place + 1; }) 113.4 186 T
(end macro inc!;) 108 175 T
1 11 Q
(This macr) 108 154.67 T
(o might be used as follows:) 156 154.67 T
6 9 Q
(?) 108 134 T
4 F
( define variable *x* = 0;) 113.4 134 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "362" 376
%%Page: "363" 377
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(21.2 Macro hygiene) 440.35 677.67 T
2 F
(363) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
6 9 Q
0 X
(?) 108 642 T
4 F
( inc!\050*x*, 3\051;) 113.4 642 T
6 10 Q
(3) 108 631 T
6 9 Q
(?) 108 612 T
4 F
( *x*;) 113.4 612 T
6 10 Q
(3) 108 601 T
6 9 Q
(?) 108 582 T
4 F
( inc!\050*x*\051;) 113.4 582 T
6 10 Q
(4) 108 571 T
6 9 Q
(?) 108 552 T
4 F
( *x*;) 113.4 552 T
6 10 Q
(4) 108 541 T
1 11 Q
-0.19 (In this macr) 108 520.67 P
-0.19 (o, it is important to delay the evaluation of the \336rst ar) 165.33 520.67 P
-0.19 (gument because) 422.86 520.67 P
(we want to be able to assign to the variable or slot it is stor) 108 506.67 T
(ed in, rather than sim-) 391.77 506.67 T
(ply to manipulate the value of the variable or slot.) 108 492.67 T
-0.17 (The) 135 478.67 P
4 10 Q
-0.37 (inc!) 155.99 478.67 P
1 11 Q
-0.17 ( macr) 179.99 478.67 P
-0.17 (o demonstrates the use of multiple r) 206.82 478.67 P
-0.17 (ules in a macr) 381.2 478.67 P
-0.17 (o. They ar) 448.05 478.67 P
-0.17 (e) 496.15 478.67 P
(tried in or) 108 464.67 T
(der until an appr) 156.38 464.67 T
(opriate match is found. This allows the) 238.76 464.67 T
4 10 Q
(inc!) 430.66 464.67 T
1 11 Q
( macr) 454.66 464.67 T
(o to) 481.66 464.67 T
(have two forms. The one-ar) 108 450.67 T
(gument form incr) 241.69 450.67 T
(ements the ar) 327.27 450.67 T
(gument by 1. The two-) 392.58 450.67 T
(ar) 108 436.67 T
(gument form allows the incr) 117.65 436.67 T
(ement amount to be speci\336ed.) 255.73 436.67 T
3 15 Q
(21.2  Macr) 108 397 T
(o h) 167.26 397 T
(ygiene) 185.49 397 T
1 11 Q
-0.09 (Displaying the code fragments inserted by the macr) 108 376.67 P
-0.09 (o in) 358.67 376.67 P
476.61 375.77 379.59 375.77 2 L
V
0.45 H
0 Z
N
6 9 Q
-0.18 (underlined italics) 379.59 376.67 P
1 11 Q
-0.09 ( both) 476.61 376.67 P
(helps to show exactly what the macr) 108 362.67 T
(o has done to our code, and draws attention) 284.88 362.67 T
(to an important featur) 108 348.67 T
(e of Dylan macr) 215.49 348.67 T
(os \321 they ar) 292.66 348.67 T
(e hygienic macr) 353.6 348.67 T
(os. A) 430.2 348.67 T
2 F
(hygienic) 457.68 348.67 T
1 F
(or) 108 334.67 T
2 F
(referentially transparent) 121.1 334.67 T
1 F
( macr) 243.61 334.67 T
(o system is one that pr) 270.6 334.67 T
(events accidental colli-) 379.74 334.67 T
(sions of macr) 108 320.67 T
(o variables with pr) 172.35 320.67 T
(ogram variables of the same name. Consider the) 263.7 320.67 T
(following macr) 108 306.67 T
(o, which is used to exchange the values of two variables:) 181.96 306.67 T
4 9 Q
(define macro swap!) 108 286 T
({) 118.8 275 T
(swap! \050?place1:expression, ?place2:expression\051 }) 129.6 275 T
(=> { let value = ?place1;) 113.4 264 T
(?place1 := ?place2;) 140.4 253 T
(?place2 := value) 140.4 242 T
(}) 135 231 T
(end macro swap!;) 108 220 T
1 11 Q
(The local variable) 108 199.67 T
4 10 Q
(value) 196.77 199.67 T
1 11 Q
( is cr) 226.77 199.67 T
(eated by the macr) 249.17 199.67 T
(o. Ther) 335.46 199.67 T
(e is a possibility that this) 369.53 199.67 T
(variable could con\337ict with another variable in the surr) 108 185.67 T
(ounding code. Consider) 376.25 185.67 T
(what might happen if we wer) 108 171.67 T
(e to expand) 252.12 171.67 T
4 9 Q
(swap!\050value, x\051) 311.41 171.67 T
1 11 Q
(:) 392.41 171.67 T
167.4 150.1 108 150.1 2 L
V
N
6 9 Q
(let value =) 108 151 T
4 10 Q
( value) 167.4 151 T
208.8 150.1 203.4 150.1 2 L
V
N
6 9 Q
(;) 203.4 151 T
4 10 Q
(value) 108 140 T
154.8 139.1 144 139.1 2 L
V
N
6 9 Q
(:=) 144 140 T
4 F
( x) 154.8 140 T
171 139.1 165.6 139.1 2 L
V
N
6 F
(;) 165.6 140 T
4 10 Q
(x) 108 129 T
163.2 128.1 120 128.1 2 L
V
N
6 9 Q
(:= value) 120 129 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "363" 377
%%Page: "364" 378
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(364) 72 677.67 T
0 F
(Chapter 21) 95.75 677.67 T
(Macros) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(W) 108 640.67 T
(ith simple textual substitutions,) 118.39 640.67 T
4 10 Q
(swap!) 274.35 640.67 T
1 11 Q
( would have no ef) 304.35 640.67 T
(fect in this case.) 391.62 640.67 T
-0.03 (Dylan\325s hygienic macr) 108 626.67 P
-0.03 (os solve this pr) 216.73 626.67 P
-0.03 (oblem by dif) 289.54 626.67 P
-0.03 (fer) 350.84 626.67 P
-0.03 (entiating between the) 363.92 626.67 P
498.65 625.77 471.65 625.77 2 L
V
0.45 H
0 Z
N
6 9 Q
-0.05 (value) 471.65 626.67 P
1 11 Q
(intr) 108 612.67 T
(oduced by the macr) 125.34 612.67 T
(o and any other) 221.52 612.67 T
4 10 Q
(value) 300.77 612.67 T
1 11 Q
( that might appear in the original) 330.77 612.67 T
(code.) 108 598.67 T
3 15 Q
(21.3  Ev) 108 425 T
(aluation in macr) 153.6 425 T
(os) 247.71 425 T
1 11 Q
-0.29 (Dylan\325s template macr) 108 404.67 P
-0.29 (os do no evaluation. In particular) 217.35 404.67 P
-0.29 (, the pattern variables of a) 376.8 404.67 P
(macr) 108 390.67 T
(o ar) 132.24 390.67 T
(e unlike function parameters. They name fragments of code, rather than) 150.65 390.67 T
(naming the r) 108 376.67 T
(esult of the evaluation of a fragment of code.) 170.24 376.67 T
-0.02 (If we wer) 135 362.67 P
-0.02 (e trying to write an operation like C\325s) 180.86 362.67 P
4 10 Q
-0.05 (||) 365.03 362.67 P
1 11 Q
-0.02 ( \050one that would evaluate) 377.03 362.67 P
(expr) 108 348.67 T
(essions and would r) 129.7 348.67 T
(eturn the value of the \336rst nonzer) 227.33 348.67 T
(o expr) 390.04 348.67 T
(ession without) 420.5 348.67 T
(evaluating any subsequent expr) 108 334.67 T
(essions\051, we could not write it as a function:) 262.96 334.67 T
4 9 Q
(define method or-int \050arg1, arg2\051 if \050arg1 ~= 0\051 arg1 else arg2 end end;) 108 314 T
1 11 Q
(When a function is invoked, all its ar) 108 293.67 T
(guments ar) 286.14 293.67 T
(e evaluated \336rst, which defeats) 340.92 293.67 T
(our purpose. If we model our macr) 108 279.67 T
(o on our function idea, however) 278.32 279.67 T
(, we will not) 433.56 279.67 T
(get the ideal r) 108 265.67 T
(esult either:) 174.52 265.67 T
4 9 Q
(define macro or-int) 108 245 T
({ or-int \050?arg1:expression, ?arg2:expression\051 } =>) 118.8 234 T
({ if \050?arg1 ~= 0\051 ?arg1 else ?arg2 end }) 129.6 223 T
(end macro or-int;) 108 212 T
1 11 Q
(The expansion of) 108 191.67 T
4 10 Q
(or-int \050x := x + 1, y := y - 1\051) 194.06 191.67 T
1 11 Q
( is pr) 380.06 191.67 T
(obably not what we) 404.19 191.67 T
(want:) 108 177.67 T
129.6 156.1 108 156.1 2 L
V
N
6 9 Q
(if \050) 108 157 T
4 10 Q
(x := x + 1) 129.6 157 T
222.6 156.1 195.6 156.1 2 L
V
N
6 9 Q
(~= 0\051) 195.6 157 T
4 10 Q
( x := x + 1) 222.6 157 T
316.2 156.1 294.6 156.1 2 L
V
N
6 9 Q
(else) 294.6 157 T
4 10 Q
( y := y - 1) 316.2 157 T
404.4 156.1 388.2 156.1 2 L
V
N
6 9 Q
(end) 388.2 157 T
2 11 Q
(Comparison with C:) 141 564.67 T
1 F
( Because C \050and C++\051 macr) 242.12 564.67 T
(os ar) 373.94 564.67 T
(e simply text) 397 564.67 T
-0.1 (substitutions performed by a pr) 141 550.67 P
-0.1 (epr) 294.89 550.67 P
-0.1 (ocessor that has no understanding) 310.92 550.67 P
(of the C language, they ar) 141 536.67 T
(e inher) 265.98 536.67 T
(ently unhygienic. C macr) 299.42 536.67 T
(o writers) 421.67 536.67 T
(r) 141 522.67 T
(educe this pr) 145.15 522.67 T
(oblem by choosing unusual or unlikely names for local) 208.03 522.67 T
(variables in their macr) 141 508.67 T
(os \050such as) 249.88 508.67 T
4 10 Q
(_swap_temp_value) 305.21 508.67 T
1 11 Q
(\051, but even this) 401.21 508.67 T
(workar) 141 494.67 T
(ound can be insuf) 176.29 494.67 T
(\336cient in complex macr) 262.8 494.67 T
(os. Dylan macr) 376.26 494.67 T
(os in) 449.15 494.67 T
(ef) 141 480.67 T
(fect automatically r) 149.73 480.67 T
(ename macr) 243.41 480.67 T
(o variables on each expansion to) 302.56 480.67 T
(guarantee unique names.) 141 466.67 T
135 577.88 135 459.12 2 L
V
0.25 H
N
486 577.88 486 459.12 2 L
V
N
134.88 578 486.12 578 2 L
V
N
134.88 459 486.12 459 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "364" 378
%%Page: "365" 379
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(21.4 Constraints) 451.86 677.67 T
2 F
(365) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(W) 108 640.67 T
(e see a common macr) 117.99 640.67 T
(o err) 221.93 640.67 T
(or \321 the expr) 244.44 640.67 T
(ession) 311.01 640.67 T
4 10 Q
(x := x + 1) 343.96 640.67 T
1 11 Q
( will be evaluated) 403.96 640.67 T
-0.1 (twice when the r) 108 626.67 P
-0.1 (esulting substitution is evaluated, leaving) 188.73 626.67 P
4 10 Q
-0.21 (x) 393.73 626.67 P
1 11 Q
-0.1 ( with an incorr) 399.73 626.67 P
-0.1 (ect \050or) 470.94 626.67 P
(at least unexpected\051 value. Ther) 108 612.67 T
(e is no magic technique for avoiding this err) 262.42 612.67 T
(or \321) 476.17 612.67 T
(you just have to be car) 108 598.67 T
(eful about r) 216.82 598.67 T
(epeating a pattern variable in a template. Most) 273.04 598.67 T
-0.05 (often, if you ar) 108 584.67 P
-0.05 (e r) 179.04 584.67 P
-0.05 (epeating a pattern variable, you should be using a local variable) 191.15 584.67 P
(instead, so that the fragment that the pattern r) 108 570.67 T
(epr) 331.46 570.67 T
(esents is evaluated only once:) 347.49 570.67 T
4 9 Q
(define macro or-int) 108 550 T
({ or-int \050?arg1:expression, ?arg2:expression\051 }) 118.8 539 T
(=> {) 113.4 528 T
(let arg1 = ?arg1;) 140.4 517 T
(if\050arg1 ~= 0\051 arg1 else ?arg2 end) 140.4 506 T
(}) 129.6 495 T
(end macro or-int;) 108 484 T
1 11 Q
(Another potential pitfall arises if the pattern variables appear in an or) 108 463.67 T
(der in the) 445.68 463.67 T
(template dif) 108 449.67 T
(fer) 166.87 449.67 T
(ent fr) 179.95 449.67 T
(om the one in which they appear in the pattern. In this case,) 205.77 449.67 T
-0.4 (unexpected r) 108 435.67 P
-0.4 (esults can occur if a side ef) 170.81 435.67 P
-0.4 (fect in one fragment af) 297.4 435.67 P
-0.4 (fects the meaning of) 405.02 435.67 P
(other fragments. In this case, you would again want to use local variables to) 108 421.67 T
(ensur) 108 407.67 T
(e that the fragments wer) 135.12 407.67 T
(e evaluated in their natural or) 253.56 407.67 T
(der) 398.2 407.67 T
(.) 413.72 407.67 T
-0.17 (These r) 135 393.67 P
-0.17 (ules ar) 170.19 393.67 P
-0.17 (e not har) 202.18 393.67 P
-0.17 (d and fast: The power of macr) 244.66 393.67 P
-0.17 (os is due in a lar) 389.39 393.67 P
-0.17 (ge part) 467.41 393.67 P
(to the ability of macr) 108 379.67 T
(os to manipulate code fragments without evaluating those) 208.65 379.67 T
(fragments, but that power must be used judiciously) 108 365.67 T
(. If you ar) 357.89 365.67 T
(e designing macr) 404.66 365.67 T
(os) 487.76 365.67 T
(for use by other people, those people may expect functionlike behavior) 108 351.67 T
(, and may) 451.89 351.67 T
(be surprised if ther) 108 337.67 T
(e ar) 200.32 337.67 T
(e multiple or out-of-or) 217.99 337.67 T
(der evaluations of macr) 326.65 337.67 T
(o parame-) 441.32 337.67 T
(ters.) 108 323.67 T
3 15 Q
(21.4  Constraints) 108 178 T
1 11 Q
(So far) 108 157.67 T
(, in our macr) 135.23 157.67 T
(os, we have seen the constraint) 197.06 157.67 T
4 10 Q
(expression) 350.24 157.67 T
1 11 Q
( used for the pat-) 410.24 157.67 T
-0.4 (tern variables. Except for a few unusual cases, pattern variables must always have) 108 143.67 P
(a constraint associated with them. Constraints serve two purposes: they limit the) 108 129.67 T
2 F
(Comparison with C:) 141 289.67 T
1 F
( Because it is mor) 242.12 289.67 T
(e dif) 326.58 289.67 T
(\336cult to intr) 347.99 289.67 T
(oduce local) 405.37 289.67 T
-0.37 (variables in C macr) 141 275.67 P
-0.37 (os than it is in Dylan macr) 233.77 275.67 P
-0.37 (os, most C pr) 358.85 275.67 P
-0.37 (ogrammers) 421.95 275.67 P
(simply adopt the discipline of never using an expr) 141 261.67 T
(ession with side) 385.33 261.67 T
(ef) 141 247.67 T
(fects as an ar) 149.73 247.67 T
(gument to a macr) 211.76 247.67 T
(o. The pr) 297.07 247.67 T
(oblem of multiple or out-of-) 340.5 247.67 T
(or) 141 233.67 T
(der evaluations of macr) 151.15 233.67 T
(o parameters is inher) 265.83 233.67 T
(ent in all macr) 368.17 233.67 T
(o sys-) 437.43 233.67 T
(tems, although some macr) 141 219.67 T
(o systems make it easier to handle.) 268.97 219.67 T
135 302.88 135 212.13 2 L
V
0.25 H
0 Z
N
486 302.88 486 212.13 2 L
V
N
134.88 303 486.12 303 2 L
V
N
134.88 212 486.12 212 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "365" 379
%%Page: "366" 380
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(366) 72 677.67 T
0 F
(Chapter 21) 95.75 677.67 T
(Macros) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.05 (fragment that the pattern variable will match, and they de\336ne the meaning of the) 108 640.67 P
(pattern variable when it is substituted. As an example, consider the following) 108 626.67 T
2 F
-0.35 (statement macro) 108 612.67 P
1 F
-0.35 (, which we might \336nd useful for manipulating the decoded parts) 189.83 612.67 P
(of seconds:) 108 598.67 T
4 9 Q
(define macro with-decoded-seconds) 108 578 T
({) 118.8 567 T
(with-decoded-seconds) 129.6 556 T
(\050?max:variable, ?min:variable, ?sec:variable = ?time:expression\051) 151.2 545 T
(?:body) 140.4 534 T
(end) 129.6 523 T
(}) 118.8 512 T
(=> {) 113.4 501 T
(let \050?max, ?min, ?sec\051 = decode-total-seconds\050?time\051;) 145.8 490 T
(?body) 145.8 479 T
(}) 129.6 468 T
(end macro;) 108 457 T
1 11 Q
(The pr) 108 436.67 T
(eceding macr) 139.92 436.67 T
(o might be used as follows:) 204.78 436.67 T
4 9 Q
(define method say \050time :: <time>\051) 108 416 T
(with-decoded-seconds\050hours, minutes, seconds = time\051) 118.8 405 T
(format-out\050"%d:%s%d",) 129.6 394 T
(hours, if \050minutes < 10\051 "0" else "" end, minutes\051;) 189 383 T
(end;) 118.8 372 T
(end method say;) 108 361 T
1 11 Q
(A statement macr) 108 340.67 T
(o can appear anywher) 193.88 340.67 T
(e that a) 301.77 340.67 T
4 10 Q
(begin) 339.86 340.67 T
1 11 Q
(/) 369.86 340.67 T
4 10 Q
(end;) 376.52 340.67 T
1 11 Q
( block can appear) 400.52 340.67 T
(. A) 484.87 340.67 T
(statement macr) 108 326.67 T
(o intr) 182.57 326.67 T
(oduces a new) 208.66 326.67 T
2 F
(begin word) 277.43 326.67 T
1 F
( \321 in this case,) 335.18 326.67 T
4 10 Q
(with-decoded-) 410.46 326.67 T
(seconds) 108 312.67 T
1 11 Q
( \321 and is matched against a fragment that extends up to the matching) 150 312.67 T
4 10 Q
(end) 108 298.67 T
1 11 Q
(.) 126 298.67 T
(The pattern and the constraints on the pattern variables limit what the) 135 284.67 T
(macr) 108 270.67 T
(o will match; they de\336ne the syntax of this particular statement. In the case) 132.24 270.67 T
(of) 108 256.67 T
4 10 Q
(with-decoded-seconds) 120.42 256.67 T
1 11 Q
(, the syntax of this statement begins with a par) 240.42 256.67 T
(enthe-) 466.07 256.67 T
(sized list of) 108 242.67 T
(\245) 117 222.67 T
(Thr) 135 222.67 T
(ee) 152.29 222.67 T
4 10 Q
(variable) 165.58 222.67 T
1 11 Q
( expr) 213.58 222.67 T
(essions \050that is,) 238.03 222.67 T
4 10 Q
(name :: <type>) 314.51 222.67 T
1 11 Q
(, wher) 398.51 222.67 T
(e the type is) 429 222.67 T
(optional\051) 135 208.67 T
(\245) 117 188.67 T
(The literal token) 135 188.67 T
4 10 Q
(=) 217.35 188.67 T
1 11 Q
(\245) 117 168.67 T
(An) 135 168.67 T
4 10 Q
(expression) 152.71 168.67 T
1 11 Q
( \050any Dylan expr) 212.71 168.67 T
(ession yielding a value\051) 294.08 168.67 T
-0.07 (After the par) 108 148.67 P
-0.07 (enthesized list comes a) 170.29 148.67 P
4 10 Q
-0.15 (body) 283.98 148.67 P
1 11 Q
-0.07 ( \050any sequence of expr) 307.98 148.67 P
-0.07 (essions separated) 416.31 148.67 P
(by) 108 134.67 T
4 10 Q
(;) 122.95 134.67 T
1 11 Q
(, just as would be valid in a) 128.95 134.67 T
4 10 Q
(begin) 264.35 134.67 T
1 11 Q
(/) 294.35 134.67 T
4 10 Q
(end;) 301.01 134.67 T
1 11 Q
( block\051. Note the use of the abbr) 325.01 134.67 T
(evia-) 479.53 134.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "366" 380
%%Page: "367" 381
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(21.4 Constraints) 451.86 677.67 T
2 F
(367) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(tion) 108 640.67 T
4 10 Q
(?:body) 129.95 640.67 T
1 11 Q
(, to mean) 164.72 640.67 T
4 10 Q
(?body:body) 212.2 640.67 T
1 11 Q
( \050a pattern variable,) 272.2 640.67 T
4 10 Q
(body) 369.73 640.67 T
1 11 Q
(, with the constraint) 392.51 640.67 T
4 10 Q
(body) 108 626.67 T
1 11 Q
(\051.) 132 626.67 T
(The constraints ar) 135 612.67 T
(e similar to type declarations on variables: They limit the) 221.8 612.67 T
(acceptable values of the pattern variables, and they help to document the inter-) 108 598.67 T
-0.18 (face of the macr) 108 584.67 P
-0.18 (o. The constraints also serve a second purpose: Once the compiler) 184.19 584.67 P
-0.02 (has r) 108 570.67 P
-0.02 (ecognized a fragment under a particular constraint, it will ensur) 131.44 570.67 P
-0.02 (e the corr) 442.16 570.67 P
-0.02 (ect) 487.53 570.67 P
(behavior of that fragment when that fragment is substituted in a template. For) 108 556.67 T
(example, suppose that we de\336ne a function macr) 108 542.67 T
(o:) 346.05 542.67 T
4 9 Q
(define macro times) 108 522 T
({ times \050?arg1:expression, ?arg2:expression \051 } =>) 118.8 511 T
({ ?arg1 * ?arg2 }) 129.6 500 T
(end macro times;) 108 489 T
1 11 Q
(W) 108 468.67 T
(e might use the macr) 117.99 468.67 T
(o as follows:) 219.34 468.67 T
4 9 Q
(times\0501 + 3, 2 + 5\051;) 108 448 T
1 11 Q
(Her) 108 427.67 T
(e is the expanded macr) 126.57 427.67 T
(o:) 238.37 427.67 T
4 9 Q
(1 + 3) 108 407 T
151.2 406.1 135 406.1 2 L
V
0.45 H
0 Z
N
6 F
( *) 135 407 T
4 F
(2 + 5) 151.2 407 T
1 11 Q
(W) 108 386.67 T
(e can see that, if the macr) 117.99 386.67 T
(o wer) 239.93 386.67 T
(e a simple text-substitution macr) 267.28 386.67 T
(o, the r) 425.98 386.67 T
(esult) 459.64 386.67 T
-0.27 (would be 12, rather than the 28 we wer) 108 372.67 P
-0.27 (e expecting. But because, in Dylan, the con-) 295.31 372.67 P
-0.37 (straint is maintained when a pattern variable is substituted \050that is, the expr) 108 358.67 P
-0.37 (ession) 471.41 358.67 P
(that makes up each of the pattern variables r) 108 344.67 T
(emains a single expr) 323.98 344.67 T
(ession\051, the) 423.04 344.67 T
(r) 108 330.67 T
(esult is as though the macr) 112.15 330.67 T
(o automatically inserted par) 241.93 330.67 T
(entheses, and the expan-) 378.52 330.67 T
(sion wer) 108 316.67 T
(e) 149.61 316.67 T
113.4 295.1 108 295.1 2 L
V
N
6 9 Q
(\050) 108 296 T
4 F
(1 + 3) 113.4 296 T
167.4 295.1 140.4 295.1 2 L
V
N
6 F
(\051 * \050) 140.4 296 T
4 F
(2 + 5) 167.4 296 T
199.8 295.1 194.4 295.1 2 L
V
N
6 F
(\051) 194.4 296 T
1 11 Q
(Some development envir) 108 275.67 T
(onments may display the implicit par) 229.76 275.67 T
(entheses of an) 412.01 275.67 T
(expr) 108 261.67 T
(ession constraint. Thus, the macr) 129.7 261.67 T
(o will yield the expected r) 288.93 261.67 T
(esult of 28.) 414.66 261.67 T
2 F
(Comparison with C:) 141 227.67 T
1 F
( Because C macr) 242.12 227.67 T
(os ar) 321.36 227.67 T
(e simple textual substitu-) 344.42 227.67 T
(tions, the macr) 141 213.67 T
(o writer must be sur) 212.61 213.67 T
(e to insert par) 310.93 213.67 T
(entheses ar) 377.76 213.67 T
(ound) 431.69 213.67 T
(every macr) 141 199.67 T
(o variable when it is substituted, and ar) 195.21 199.67 T
(ound the macr) 387.32 199.67 T
(o) 458.09 199.67 T
(expansion itself, to pr) 141 185.67 T
(event the r) 245.66 185.67 T
(esulting expansion fr) 297.31 185.67 T
(om taking on) 399.42 185.67 T
(new meanings.) 141 171.67 T
135 240.88 135 164.13 2 L
V
0.25 H
N
486 240.88 486 164.13 2 L
V
N
134.88 241 486.12 241 2 L
V
N
134.88 164 486.12 164 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "367" 381
%%Page: "368" 382
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(368) 72 677.67 T
0 F
(Chapter 21) 95.75 677.67 T
(Macros) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(21.5  More comple) 108 638 T
(x rules) 214.49 638 T
1 11 Q
-0.25 (The macr) 108 617.67 P
-0.25 (os shown so far have all been simple: a single pattern transformed into a) 153.16 617.67 P
(single template. T) 108 603.67 T
(o get a \337avor of the full power of the Dylan macr) 193.57 603.67 T
(o system, con-) 430.98 603.67 T
(sider this) 108 589.67 T
2 F
(de\336ning macro) 155.55 589.67 T
1 F
(:) 231.02 589.67 T
4 9 Q
(define macro aircraft-definer) 108 569 T
({ define aircraft ?identifier:name \050?type:name\051 ?flights end }) 118.8 558 T
(=> { register-aircraft\050make\050"<" ## ?type ## ">", id: ?#"identifier"\051\051;) 124.2 547 T
(register-flights\050?#"identifier", ?flights\051 }) 151.2 536 T
(flights:) 108 525 T
({ }) 118.8 514 T
(=> { }) 124.2 503 T
({ ?flight; ... }) 118.8 492 T
(=> { ?flight, ... }) 124.2 481 T
(flight:) 108 470 T
({ flight ?id:name, #rest ?options:expression }) 118.8 459 T
(=> { make\050<flight>, id: ?#"id", ?options\051 }) 124.2 448 T
(end macro aircraft-definer;) 108 437 T
1 11 Q
(W) 108 416.67 T
(e might use the macr) 117.99 416.67 T
(o) 219.34 416.67 T
4 10 Q
(define aircraft) 228.1 416.67 T
1 11 Q
( as follows:) 318.1 416.67 T
4 9 Q
(define aircraft UA4906H \050DC10\051) 108 396 T
(flight UA11, from: #"BOS", to: #"SFO";) 118.8 385 T
(flight UA12, from: #"SFO", to: #"BOS";) 118.8 374 T
(end aircraft UA4906H;) 108 363 T
1 11 Q
(This macr) 108 342.67 T
(o shows a number of the mor) 156 342.67 T
(e esoteric featur) 298.16 342.67 T
(es of Dylan macr) 374.95 342.67 T
(os. First,) 456.78 342.67 T
-0.19 (notice the pattern variable) 108 328.67 P
4 10 Q
-0.41 (?flights) 237.46 328.67 P
1 11 Q
-0.19 (, which has no constraint, but rather is called) 285.46 328.67 P
-0.22 (out as an) 108 314.67 P
2 F
-0.22 (auxiliary rule) 153.87 314.67 P
1 F
-0.22 (. When the compiler matches this macr) 221.16 314.67 P
-0.22 (o, it will try each of) 408.75 314.67 P
(the auxiliary r) 108 300.67 T
(ule\325s patterns listed under) 176.39 300.67 T
4 10 Q
(flights:) 306.19 300.67 T
1 11 Q
( for a match. When it \336nds a) 354.19 300.67 T
-0.21 (match, it will assign the pattern variable) 108 286.67 P
4 10 Q
-0.46 (?flights) 304.58 286.67 P
1 11 Q
-0.21 ( to the fragment r) 352.58 286.67 P
-0.21 (esulting fr) 436.32 286.67 P
-0.21 (om) 485.74 286.67 P
(the matching pattern\325s template substitution. In ef) 108 272.67 T
(fect, auxiliary r) 351.15 272.67 T
(ules give a way) 424.44 272.67 T
-0.15 (of writing new constraints, combined with the ef) 108 258.67 P
-0.15 (fect of a subr) 343.38 258.67 P
-0.15 (outine for matching) 405.28 258.67 P
(and substitution.) 108 244.67 T
-0.33 (In this particular case, we use the auxiliary r) 135 230.67 P
-0.33 (ule to map yet another auxiliary) 347.1 230.67 P
(r) 108 216.67 T
(ule,) 112.26 216.67 T
4 10 Q
(flight) 132.86 216.67 T
1 11 Q
(, over a sequence of \337ight descriptions that look similar to the slot) 168.86 216.67 T
(descriptions in a class. The mapping is signaled by the points of ellipsis \050) 108 202.67 T
4 10 Q
(...) 460.85 202.67 T
1 11 Q
(\051) 478.85 202.67 T
(which means that the r) 108 188.67 T
(ule should be applied r) 219.2 188.67 T
(ecursively \050that is, the curr) 331.54 188.67 T
(ent r) 460.96 188.67 T
(ule) 483.22 188.67 T
-0.37 (is matched again to the fragment that matches) 108 174.67 P
4 10 Q
-0.81 (...) 332.24 174.67 P
1 11 Q
-0.37 (\051. Note that) 350.24 174.67 P
4 10 Q
-0.81 (flights) 406.88 174.67 P
1 11 Q
-0.37 ( must have) 448.88 174.67 P
(a r) 108 160.67 T
(ule to cover the case of ther) 120.51 160.67 T
(e being no \337ight; that r) 253.07 160.67 T
(ule also handles the end of) 363.64 160.67 T
(the r) 108 146.67 T
(ecursion when the \336nal \337ight has been matched.) 130.15 146.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "368" 382
%%Page: "369" 383
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(21.6 More hygiene) 444.73 677.67 T
2 F
(369) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(The) 135 640.67 T
4 10 Q
(flight) 156.16 640.67 T
1 11 Q
( r) 192.16 640.67 T
(ule simply converts each \337ight name and its options into the) 199.17 640.67 T
(appr) 108 626.67 T
(opriate call to) 130.87 626.67 T
4 10 Q
(make) 200.01 626.67 T
1 11 Q
(, to cr) 224.01 626.67 T
(eate the \337ight. W) 250.89 626.67 T
(e could extend this r) 332.75 626.67 T
(ule to allow a) 431.5 626.67 T
(mor) 108 612.67 T
(e natural speci\336cation for \337ight origin, destination, and time.) 127.87 612.67 T
(W) 135 598.67 T
(e do the work of de\336ning an air) 144.99 598.67 T
(craft by calling the helper functions) 298.32 598.67 T
4 10 Q
(register-aircraft) 108 584.67 T
1 11 Q
( and) 210 584.67 T
4 10 Q
(register-flights) 234.12 584.67 T
1 11 Q
( \050which ar) 330.12 584.67 T
(e not given her) 379 584.67 T
(e\051, but the) 451.53 584.67 T
(macr) 108 570.67 T
(o takes car) 132.24 570.67 T
(e of getting the ar) 183.42 570.67 T
(guments in or) 268.53 570.67 T
(der) 336.17 570.67 T
(. The substitution) 351.69 570.67 T
4 9 Q
("<") 439.35 570.67 T
4 10 Q
(##) 460.95 570.67 T
(?type ## ">") 108 556.67 T
1 11 Q
( turns the name) 180 556.67 T
4 10 Q
(DC10) 258.77 556.67 T
1 11 Q
( into the name) 282.77 556.67 T
4 10 Q
(<DC10>) 355.11 556.67 T
1 11 Q
( by using) 391.11 556.67 T
2 F
-0.03 (concatenation) 108 542.67 P
1 F
-0.03 (, allowing a mor) 177.65 542.67 P
-0.03 (e concise format for our de\336ner while maintaining) 256.73 542.67 P
(our convention for naming types. The substitution) 108 528.67 T
4 10 Q
(?#"identifier") 355.61 528.67 T
1 11 Q
( turns the) 439.61 528.67 T
-0.16 (name) 108 514.67 P
4 10 Q
-0.34 (UA1306) 137.48 514.67 P
1 11 Q
-0.16 ( into the symbol) 173.48 514.67 P
4 10 Q
-0.34 (#"UA1306") 254.08 514.67 P
1 11 Q
-0.16 ( by using) 308.08 514.67 P
2 F
-0.16 (coercion) 355.08 514.67 P
1 F
-0.16 (; the pr) 397.24 514.67 P
-0.16 (ogram can use) 431.19 514.67 P
-0.43 (the symbol) 108 500.67 P
4 10 Q
-0.94 (#"UA1306") 163.68 500.67 P
1 11 Q
-0.43 ( to look up an air) 217.68 500.67 P
-0.43 (craft in the r) 298.19 500.67 P
-0.43 (egistry by name. The template) 356.13 500.67 P
(for) 108 486.67 T
4 10 Q
(flights) 124.76 486.67 T
1 11 Q
( collects all the individual \337ights into a comma-separated list that is) 166.76 486.67 T
(passed to) 108 472.67 T
4 10 Q
(register-flights) 156.52 472.67 T
1 11 Q
( as a) 252.52 472.67 T
4 10 Q
(#rest) 276.43 472.67 T
1 11 Q
( ar) 306.43 472.67 T
(gument.) 318.83 472.67 T
3 15 Q
(21.6  More h) 108 433 T
(ygiene) 178.88 433 T
1 11 Q
-0.41 (W) 108 412.67 P
-0.41 (e shall make one mor) 117.99 412.67 P
-0.41 (e note about hygiene: In a textual substitution macr) 219.74 412.67 P
-0.41 (o, ther) 465.89 412.67 P
-0.41 (e) 496.39 412.67 P
(is a chance that the global variables that the macr) 108 398.67 T
(o uses \050in this case, the helper) 346.45 398.67 T
-0.02 (function) 108 384.67 P
4 10 Q
-0.05 (define-aircraft) 151.51 384.67 P
1 11 Q
-0.02 (\051 could be confused with a surr) 241.51 384.67 P
-0.02 (ounding local variable) 392.23 384.67 P
(of the same name wher) 108 370.67 T
(e the macr) 220.95 370.67 T
(o is called. This confusion does not happen in a) 271.22 370.67 T
(Dylan macr) 108 356.67 T
(o. The global variables used in a Dylan macr) 164.73 356.67 T
(o always denote what) 380.35 356.67 T
(they denoted at the time that the macr) 108 342.67 T
(o was de\336ned, rather than at the time that) 293.28 342.67 T
(the macr) 108 328.67 T
(o is called. It is as though the variables wer) 150.25 328.67 T
(e automatically r) 358.69 328.67 T
(enamed so) 440.23 328.67 T
(that con\337icts will be avoided.) 108 314.67 T
(Y) 135 300.67 T
(ou will also notice this featur) 141.32 300.67 T
(e if you export a macr) 281.86 300.67 T
(o fr) 387.74 300.67 T
(om a module. Only) 404.3 300.67 T
-0.19 (the macr) 108 286.67 P
-0.19 (o needs to be exported. Its global r) 150.06 286.67 P
-0.19 (efer) 315.67 286.67 P
-0.19 (ences still r) 334.02 286.67 P
-0.19 (efer to the pr) 387.62 286.67 P
-0.19 (oper \050mod-) 449.45 286.67 P
-0.18 (ule-private\051 values that they had at the time the macr) 108 272.67 P
-0.18 (o was de\336ned, just as occurs) 364.43 272.67 P
(when a function exported fr) 108 258.67 T
(om a module calls module-private subr) 243.82 258.67 T
(outines.) 435.24 258.67 T
-0.06 (Occasionally) 135 244.67 P
-0.06 (, you will want to cir) 195.98 244.67 P
-0.06 (cumvent macr) 296.18 244.67 P
-0.06 (o hygiene. Y) 365.81 244.67 P
-0.06 (ou may want to) 425.04 244.67 P
(de\336ne a macr) 108 230.67 T
(o that cr) 173.56 230.67 T
(eates a variable that) 213.17 230.67 T
0 F
(is) 312.35 230.67 T
1 F
(visible at the macr) 322.43 230.67 T
(o call. Her) 411.11 230.67 T
(e is a) 460.71 230.67 T
(simple statement macr) 108 216.67 T
(o that r) 217.98 216.67 T
(epeats its body until you ask it to) 252.71 216.67 T
4 10 Q
(stop!) 416.42 216.67 T
1 11 Q
(:) 446.42 216.67 T
4 9 Q
(define macro repeat) 108 196 T
({ repeat ?:body end }) 118.8 185 T
(=>) 113.4 174 T
({ block \050?=stop!\051) 129.6 174 T
(local method again\050\051 ?body; again\050\051 end;) 151.2 163 T
(again\050\051;) 151.2 152 T
(end }) 140.4 141 T
(end macro repeat;) 108 130 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "369" 383
%%Page: "370" 384
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(370) 72 677.67 T
0 F
(Chapter 21) 95.75 677.67 T
(Macros) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(The term) 108 640.67 T
4 10 Q
(?=stop!) 154.83 640.67 T
1 11 Q
( says that the local variable) 196.83 640.67 T
4 10 Q
(stop!) 330.71 640.67 T
1 11 Q
(, which is the block exit vari-) 360.71 640.67 T
(able, will be visible when the macr) 108 626.67 T
(o is called exactly as) 276.01 626.67 T
4 10 Q
(stop!) 376.81 626.67 T
1 11 Q
(; ther) 406.81 626.67 T
(e will be no) 431.71 626.67 T
(hygienic r) 108 612.67 T
(enaming. Her) 156.49 612.67 T
(e is an example that uses the macr) 223.16 612.67 T
(o to count to 100:) 388.49 612.67 T
4 9 Q
(begin) 108 592 T
(let i = 0;) 118.8 581 T
(repeat) 118.8 570 T
(if \050i == 100\051 stop!\050\051 end;) 129.6 559 T
(i := i + 1;) 129.6 548 T
(end;) 118.8 537 T
(end;) 108 526 T
1 11 Q
(Note that the) 108 505.67 T
4 10 Q
(body) 174.58 505.67 T
1 11 Q
( constraint invokes the Dylan parser to match the code pr) 198.58 505.67 T
(op-) 476.83 505.67 T
-0.18 (erly between the) 108 491.67 P
4 10 Q
-0.4 (repeat) 190.94 491.67 P
1 11 Q
-0.18 ( and the corr) 226.94 491.67 P
-0.18 (esponding) 287.9 491.67 P
4 10 Q
-0.4 (end) 341.86 491.67 P
1 11 Q
-0.18 (. It is not confused by the) 359.86 491.67 P
4 10 Q
-0.4 (end) 483.43 491.67 P
1 11 Q
(of the) 108 477.67 T
4 10 Q
(if) 138.43 477.67 T
1 11 Q
( statement, as a text-based macr) 150.43 477.67 T
(o might be. The expanded view of the) 304.43 477.67 T
(pr) 108 463.67 T
(eceding code might look like this:) 118.76 463.67 T
4 9 Q
(begin) 108 443 T
(let i = 0;) 118.8 432 T
156.6 420.1 118.8 420.1 2 L
V
0.45 H
0 Z
N
6 F
(block \050) 118.8 421 T
4 10 Q
(stop!) 156.6 421 T
192 420.1 186.6 420.1 2 L
V
N
6 9 Q
(\051) 186.6 421 T
237.6 409.1 129.6 409.1 2 L
V
N
(local method again\050\051) 129.6 410 T
4 F
(if \050i == 100\051 stop!\050\051 end;) 140.4 399 T
(i := i + 1;) 140.4 388 T
183.6 376.1 145.8 376.1 2 L
V
N
6 F
(again\050\051) 145.8 377 T
151.2 365.1 129.6 365.1 2 L
V
N
(end;) 129.6 366 T
172.8 354.1 129.6 354.1 2 L
V
N
(again\050\051;) 129.6 355 T
135 343.1 118.8 343.1 2 L
V
N
(end) 118.8 344 T
4 F
(;) 135 344 T
(end;) 108 333 T
1 11 Q
-0.34 (Note that we have shown the local variable) 108 312.67 P
4 10 Q
-0.73 (stop!) 318.23 312.67 P
1 11 Q
-0.34 ( intr) 348.23 312.67 P
-0.34 (oduced by the macr) 367.98 312.67 P
-0.34 (o) 463.16 312.67 P
4 10 Q
-0.73 (block) 471.58 312.67 P
1 11 Q
(in) 108 298.67 T
4 10 Q
(code font) 120.35 298.67 T
1 11 Q
( rather than in) 174.35 298.67 T
332.69 297.77 246.29 297.77 2 L
V
N
6 9 Q
(underline italic) 246.29 298.67 T
1 11 Q
(, because it is visible to the body) 332.69 298.67 T
(and is exactly the) 108 284.67 T
4 10 Q
(stop!) 194.98 284.67 T
1 11 Q
( called in the) 224.98 284.67 T
4 10 Q
(if) 289.61 284.67 T
1 11 Q
( to stop the r) 301.61 284.67 T
(epetition. The local variable) 362.48 284.67 T
135 269.77 108 269.77 2 L
V
N
6 9 Q
(again) 108 270.67 T
1 11 Q
(, on the other hand, is not visible to the body code. W) 135 270.67 T
(e could use) 392.88 270.67 T
4 10 Q
(again) 450.41 270.67 T
1 11 Q
(instead of) 108 256.67 T
4 10 Q
(i) 158.51 256.67 T
1 11 Q
( as our r) 164.51 256.67 T
(epetition count without a pr) 204.06 256.67 T
(oblem.) 340.55 256.67 T
2 F
(Comparison with C:) 141 222.67 T
1 F
( All C macr) 242.12 222.67 T
(os have the syntax of function calls,) 297.38 222.67 T
-0.28 (making it impossible to write language extensions such as) 141 208.67 P
4 10 Q
-0.61 (repeat) 423.47 208.67 P
1 11 Q
-0.28 (. By) 459.47 208.67 P
(using language-based constraints, such as the) 141 194.67 T
4 10 Q
(body) 365.15 194.67 T
1 11 Q
( constraint used) 389.15 194.67 T
(her) 141 180.67 T
(e, Dylan macr) 156.82 180.67 T
(os can match language forms, and thus can cr) 224.31 180.67 T
(eate) 445.46 180.67 T
(extensions that ar) 141 166.67 T
(e consistent with the base language.) 226.36 166.67 T
135 235.88 135 159.13 2 L
V
0.25 H
N
486 235.88 486 159.13 2 L
V
N
134.88 236 486.12 236 2 L
V
N
134.88 159 486.12 159 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "370" 384
%%Page: "371" 385
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(21.7 Auxiliary macros) 430.31 677.67 T
2 F
(371) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.28 (Note that we would have to document how) 108 640.67 P
4 10 Q
-0.62 (repeat) 320.76 640.67 P
1 11 Q
-0.28 ( works for other users, or they) 356.76 640.67 P
(might be surprised if they tried to use) 108 626.67 T
4 10 Q
(stop!) 294.34 626.67 T
1 11 Q
( instead of) 324.34 626.67 T
4 10 Q
(i) 377.6 626.67 T
1 11 Q
( in the example.) 383.6 626.67 T
3 15 Q
(21.7  A) 108 587 T
(uxiliar) 147.3 587 T
(y macr) 183.66 587 T
(os) 223.1 587 T
1 11 Q
(One dif) 108 566.67 T
(\336culty with the air) 144.45 566.67 T
(craft macr) 234.25 566.67 T
(o that we de\336ned in Section 21.5 is this: sup-) 283.22 566.67 T
(pose that we want each \337ight object to know the type of equipment used, rather) 108 552.67 T
(than our having to look up the type in the air) 108 538.67 T
(craft r) 326.92 538.67 T
(egistry) 355.8 538.67 T
(. What looks like the) 387.87 538.67 T
(obvious appr) 108 524.67 T
(oach does not work:) 172.43 524.67 T
4 9 Q
(define macro aircraft-definer) 108 504 T
({ define aircraft ?identifier:name \050?type:name\051 ?flights end }) 118.8 493 T
(=> { register-aircraft\050make\050"<" ## ?type ## ">", id: ?#"identifier"\051\051;) 124.2 482 T
(register-flights\050?#"identifier", ?flights\051 }) 151.2 471 T
(flights:) 108 460 T
({ }) 118.8 449 T
(=> { }) 124.2 438 T
({ ?flight; ... }) 118.8 427 T
(=> { ?flight, ... }) 124.2 416 T
(flight:) 108 405 T
({ }) 118.8 394 T
(=> { }) 124.2 383 T
({ flight ?id:name, #rest ?options:expression }) 118.8 372 T
(=> { make\050<flight>, equipment: ?"type", id: ?#"id", ?options\051 }) 124.2 361 T
(end macro aircraft-definer;) 108 350 T
1 11 Q
(When we ar) 108 329.67 T
(e pr) 166.66 329.67 T
(ocessing the) 185.44 329.67 T
4 10 Q
(flight) 247.4 329.67 T
1 11 Q
( auxiliary r) 283.4 329.67 T
(ules, we would like to be able to) 336.53 329.67 T
(r) 108 315.67 T
(efer) 112.15 315.67 T
(ence the pattern variable) 130.49 315.67 T
4 10 Q
(?type) 253.19 315.67 T
1 11 Q
( \050coer) 283.19 315.67 T
(cing it to a string\051 fr) 309.91 315.67 T
(om the main r) 405.93 315.67 T
(ules,) 474.23 315.67 T
(but it is not) 108 301.67 T
2 F
(in scope) 165.95 301.67 T
1 F
( \321 it is inaccessible to the auxiliary r) 207.19 301.67 T
(ules. W) 384.54 301.67 T
(e could have) 419.8 301.67 T
4 10 Q
(register-flights) 108 287.67 T
1 11 Q
( set the) 204 287.67 T
4 10 Q
(equipment) 241.03 287.67 T
1 11 Q
( slot after the \337ight is cr) 295.03 287.67 T
(eated, but we) 409.49 287.67 T
-0.15 (would pr) 108 273.67 P
-0.15 (efer to initialize the slot at the time we cr) 153.09 273.67 P
-0.15 (eate the) 349.15 273.67 P
4 10 Q
-0.34 (<flight>) 389.23 273.67 P
1 11 Q
-0.15 ( object. Ther) 437.23 273.67 P
-0.15 (e) 496.13 273.67 P
(is a workar) 108 259.67 T
(ound, an) 162.15 259.67 T
2 F
(auxiliary macro) 208.07 259.67 T
1 F
(:) 285.98 259.67 T
4 9 Q
(define macro aircraft-definer) 108 239 T
({ define aircraft ?identifier:name \050?type:name\051 ?flights:* end }) 118.8 228 T
(=> { register-aircraft \050make\050"<" ## ?type ## ">", id: ?#"identifier"\051\051;) 124.2 217 T
(define flights \050?#"identifier", ?"type"\051) 151.2 206 T
(?flights) 162 195 T
(end }) 151.2 184 T
(end macro aircraft-definer;) 108 173 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "371" 385
%%Page: "372" 386
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(372) 72 677.67 T
0 F
(Chapter 21) 95.75 677.67 T
(Macros) 147.73 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(define macro flights-definer) 108 642 T
({ define flights \050?craft:name, ?equipment:name\051 end }) 118.8 631 T
(=> { }) 124.2 620 T
({ define flights \050?craft:name, ?equipment:name\051 ?flight ; ?more:* end }) 118.8 609 T
(=> { register-flights) 124.2 598 T
(\050?craft, make\050<flight>, equipment: ?equipment, ?flight\051\051 ;) 162 587 T
(define flights \050?craft, ?equipment\051 ?more end }) 151.2 576 T
(flight:) 108 565 T
({ }) 118.8 554 T
(=> { }) 124.2 543 T
({ flight ?id:name, #rest ?options:expression }) 118.8 532 T
(=> { id: ?#"id", ?options }) 124.2 521 T
(end macro flights-definer;) 108 510 T
1 11 Q
(Her) 108 489.67 T
(e, we have essentially br) 126.57 489.67 T
(oken out the work that used to be done by the auxil-) 244.72 489.67 T
-0.28 (iary r) 108 475.67 P
-0.28 (ule) 133.89 475.67 P
4 10 Q
-0.62 (flights) 151.46 475.67 P
1 11 Q
-0.28 ( into a separate de\336nition macr) 193.46 475.67 P
-0.28 (o. Wher) 342.92 475.67 P
-0.28 (e) 380.96 475.67 P
4 10 Q
-0.62 (flights) 388.7 475.67 P
1 11 Q
-0.28 ( used points of) 430.7 475.67 P
(ellipsis to walk over each \337ight, the de\336nition macr) 108 461.67 T
(o uses a) 357.17 461.67 T
2 F
(wildcard) 398.16 461.67 T
1 F
( constraint) 442.75 461.67 T
4 10 Q
(?more:*) 108 447.67 T
1 11 Q
(, explicitly calling itself again \050that is, the macr) 150 447.67 T
(o appears in the substitu-) 375.36 447.67 T
(tion, and will be expanded again\051, as long as ther) 108 433.67 T
(e ar) 346.2 433.67 T
(e mor) 363.87 433.67 T
(e \337ights to be) 391.76 433.67 T
(pr) 108 419.67 T
(ocessed.) 118.76 419.67 T
(Her) 135 405.67 T
(e is an example use of the) 153.57 405.67 T
4 10 Q
(flights-definer) 280.58 405.67 T
1 11 Q
( macr) 370.58 405.67 T
(o:) 397.58 405.67 T
4 9 Q
(define aircraft UA4906H \050DC10\051) 108 385 T
(flight UA11 from: #"BOS", to: #"SFO";) 118.8 374 T
(flight UA12 from: #"SFO", to: #"BOS";) 118.8 363 T
(end aircraft UA4906H;) 108 352 T
1 11 Q
(Expanding that code would r) 108 331.67 T
(esult in the following:) 250.19 331.67 T
237.6 310.1 108 310.1 2 L
V
0.45 H
0 Z
N
6 9 Q
(register-aircraft \050make\050) 108 311 T
4 F
(<DC10>) 237.6 311 T
280.8 310.1 270 310.1 2 L
V
N
6 F
(,) 270 311 T
4 F
(#"UA4096H") 280.8 311 T
351 310.1 334.8 310.1 2 L
V
N
6 F
(\051\051;) 334.8 311 T
205.2 299.1 108 299.1 2 L
V
N
(register-flights \050) 108 300 T
4 F
(#"UA4096H") 205.2 300 T
264.6 299.1 259.2 299.1 2 L
V
N
6 F
(,) 259.2 300 T
345.6 288.1 205.2 288.1 2 L
V
N
(make\050<flight>, equipment:) 205.2 289 T
4 F
("DC10") 345.6 289 T
383.4 288.1 378 288.1 2 L
V
N
6 F
(,) 378 289 T
253.8 277.1 232.2 277.1 2 L
V
N
(id:) 232.2 278 T
4 F
(#"UA11") 253.8 278 T
297 277.1 291.6 277.1 2 L
V
N
(from: #"BOS", to: #"SFO") 297 278 T
437.4 277.1 426.6 277.1 2 L
V
N
6 F
(\051;) 426.6 278 T
205.2 266.1 108 266.1 2 L
V
N
(register-flights \050) 108 267 T
4 F
(#"UA4096H") 205.2 267 T
264.6 266.1 259.2 266.1 2 L
V
N
6 F
(,) 259.2 267 T
345.6 255.1 205.2 255.1 2 L
V
N
(make\050<flight>, equipment:) 205.2 256 T
4 F
("DC10") 345.6 256 T
383.4 255.1 378 255.1 2 L
V
N
6 F
(,) 378 256 T
253.8 244.1 232.2 244.1 2 L
V
N
(id:) 232.2 245 T
4 F
(#"UA12") 253.8 245 T
297 244.1 291.6 244.1 2 L
V
N
(from: #"SFO", to: #"BOS") 297 245 T
437.4 244.1 426.6 244.1 2 L
V
N
6 F
(\051;) 426.6 245 T
1 11 Q
(\050Note that this example is a hypothetical one used to illustrate macr) 108 224.67 T
(o expansion.) 436.2 224.67 T
(The) 108 210.67 T
4 10 Q
(define aircraft) 129.16 210.67 T
1 11 Q
( statement cannot be compiled in the airport example.\051) 219.16 210.67 T
3 15 Q
(21.8  Summar) 108 171 T
(y) 188.12 171 T
1 11 Q
(In this chapter) 108 150.67 T
(, we intr) 177.24 150.67 T
(oduced macr) 217.27 150.67 T
(os by explaining their purpose as a language-) 280.5 150.67 T
(extension tool, and by showing a range of Dylan macr) 108 136.67 T
(os. Macr) 370.34 136.67 T
(os can be useful) 411.45 136.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "372" 386
%%Page: "373" 387
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(21.8 Summary) 459.24 677.67 T
2 F
(373) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(when you want to tailor the language to expr) 108 640.67 T
(ess a particular pr) 327.38 640.67 T
(oblem domain) 414.3 640.67 T
(mor) 108 626.67 T
(e concisely) 127.87 626.67 T
(.) 179.29 626.67 T
(T) 135 612.67 T
(able 21.1 summarizes how constraints contr) 140.73 612.67 T
(ol pattern-variable matches.) 352.83 612.67 T
8 F
(Constr) 117.75 581.67 T
(aint) 150.04 581.67 T
(Matches) 330.21 581.67 T
4 10 Q
(token) 112.76 556.67 T
8 11 Q
(a le) 184.76 556.67 T
(x) 202.16 556.67 T
(eme \050a Dylan w) 207.33 556.67 T
(ord\051, including liter) 283.63 556.67 T
(al str) 373.38 556.67 T
(ings) 397.38 556.67 T
(, symbols) 417.39 556.67 T
(, and n) 463.67 556.67 T
(um-) 497.2 556.67 T
(bers and punctuation) 184.76 540.67 T
4 10 Q
(name) 112.76 517.67 T
8 11 Q
(a Dylan identi\336er) 184.76 517.67 T
(, including reser) 266.13 517.67 T
(v) 344.09 517.67 T
(ed identi\336ers) 349.32 517.67 T
(, such as) 411.51 517.67 T
4 10 Q
(define) 458.59 517.67 T
8 11 Q
(,) 494.43 517.67 T
4 10 Q
(end) 184.76 501.67 T
8 11 Q
(, and oper) 202.76 501.67 T
(ators such as) 252.18 501.67 T
4 10 Q
(+) 320.66 501.67 T
8 11 Q
(, or) 326.66 501.67 T
4 10 Q
(*) 345.61 501.67 T
(variable) 112.76 478.67 T
8 11 Q
(either) 184.76 478.67 T
4 10 Q
(variable) 215.33 478.67 T
8 11 Q
( or) 263.33 478.67 T
4 10 Q
(variable :: <type>) 279.22 478.67 T
8 11 Q
(, useful f) 387.22 478.67 T
(or macros that) 428.47 478.67 T
(mimic v) 184.76 462.67 T
(ar) 221.75 462.67 T
(iab) 231.7 462.67 T
(le binding \050automatically drops the) 246.15 462.67 T
4 10 Q
(:: <type>) 416.11 462.67 T
8 11 Q
(, as) 470.11 462.67 T
(appropr) 184.76 446.67 T
(iate on substitution\051) 222.83 446.67 T
4 10 Q
(expression) 112.76 423.67 T
8 11 Q
-0.47 (a w) 184.76 423.67 P
-0.47 (ell-f) 201.3 423.67 P
-0.47 (or) 218.69 423.67 P
-0.47 (med Dylan e) 228.74 423.67 P
-0.47 (xpression \320- a constant, such as) 289.22 423.67 P
4 10 Q
-0.92 (37) 447.22 423.67 P
8 11 Q
-0.47 (; a v) 459.22 423.67 P
-0.47 (ar) 478.8 423.67 P
-0.47 (iab) 488.74 423.67 P
-0.47 (le) 503.2 423.67 P
-0.47 (,) 511.59 423.67 P
(such as) 184.76 407.67 T
4 10 Q
(*my-position*) 225.72 407.67 T
8 11 Q
(; a function call, such as) 303.72 407.67 T
4 10 Q
(get-current-) 424.17 407.67 T
-0.48 (time\050\051) 184.76 391.67 P
8 11 Q
-0.24 (; a statement, such as) 220.76 391.67 P
4 10 Q
-0.48 (if \050test\051 12 else try\050\051 end) 330.22 391.67 P
8 11 Q
-0.24 (; or a) 489.84 391.67 P
(binar) 184.76 375.67 T
(y oper) 209.54 375.67 T
(and ser) 240 375.67 T
(ies) 276.85 375.67 T
(, such as) 290.74 375.67 T
4 10 Q
(x + y * z) 337.82 375.67 T
(body) 112.76 352.67 T
8 11 Q
(a w) 184.76 352.67 T
(ell-f) 201.76 352.67 T
(or) 219.16 352.67 T
(med Dylan body \321 a sequence of semicolon-separ) 229.21 352.67 T
(ated) 478.54 352.67 T
-0.06 (constituents) 184.76 336.67 P
-0.06 (, each constituent being either a de\336nition, local declar) 243.29 336.67 P
-0.06 (a-) 507.46 336.67 P
(tion, or e) 184.76 320.67 T
(xpression) 227.23 320.67 T
4 10 Q
(case-body) 112.76 297.67 T
8 11 Q
(a Dylan) 184.76 297.67 T
4 10 Q
(case) 225.11 297.67 T
8 11 Q
( statement body) 249.11 297.67 T
4 10 Q
(*) 112.76 274.67 T
8 11 Q
(an) 184.76 274.67 T
(y sequence of Dylan tok) 196.83 274.67 T
(ens and parsed f) 314 274.67 T
(or) 395.61 274.67 T
(ms) 405.66 274.67 T
106.76 237.01 523.24 245 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 236.62 248.33 T
(ab) 241.93 248.33 T
(le 21.1) 253.49 248.33 T
8 F
(P) 289.64 248.33 T
(atter) 295.9 248.33 T
(n constr) 316.17 248.33 T
(aints) 351.64 248.33 T
(.) 372.61 248.33 T
106.76 596.88 106.76 265.13 2 L
V
0.25 H
0 Z
N
523.24 596.88 523.24 265.13 2 L
V
N
106.63 597 523.37 597 2 L
V
N
106.63 570 523.37 570 2 L
V
N
106.63 265 523.37 265 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "373" 387
%%Page: "374" 388
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 126 522 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "374" 388
%%Page: "375" 389
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(375) 298.88 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Appendix A) 108 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(A) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Resour) 109.56 566.45 T
(ces on Dylan) 202.47 566.45 T
108 126 522 432 R
7 X
V
3 15 Q
0 X
(A.1  W) 108 422 T
(orld Wide Web pa) 144.87 422 T
(g) 247.96 422 T
(es f) 255.6 422 T
(or this book and its e) 276.57 422 T
(xamples) 400.12 422 T
1 11 Q
(Both Addison-W) 108 402.67 T
(esley and Harlequin maintain W) 189.39 402.67 T
(eb pages about this book,) 346.89 402.67 T
(including the sour) 108 388.67 T
(ce code of the pr) 196.97 388.67 T
(ogram examples, and excerpts fr) 276.68 388.67 T
(om the book.) 434.76 388.67 T
-0.07 (The addr) 108 374.67 P
-0.07 (ess of the Addison-W) 152.18 374.67 P
-0.07 (esley W) 255.68 374.67 P
-0.07 (eb page for computer science and engineer-) 292.87 374.67 P
(ing is) 108 360.67 T
4 9 Q
(http://www.aw.com/cseng/) 135 343 T
1 11 Q
(The addr) 108 323.67 T
(ess of Harlequin\325s Dylan W) 152.25 323.67 T
(eb page is) 284.83 323.67 T
4 9 Q
(http://www.harlequin.com/full/dylan.html) 135 306 T
3 15 Q
(A.2  Ne) 108 269 T
(wsgroup) 149.54 269 T
1 11 Q
(The name of the newsgr) 108 249.67 T
(oup about Dylan is) 225 249.67 T
4 9 Q
(comp.lang.dylan) 135 232 T
1 11 Q
(The newsgr) 108 212.67 T
(oup is also available as an Internet mailing list) 164.94 212.67 T
4 9 Q
(info-dylan@cambridge.apple.com) 135 195 T
1 11 Q
(T) 108 175.67 T
(o subscribe to) 113.73 175.67 T
4 10 Q
(info-dylan) 183.4 175.67 T
1 11 Q
(, send a message to) 243.4 175.67 T
4 9 Q
(info-dylan-request@cambridge.apple.com) 135 158 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "375" 389
%%Page: "376" 390
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(376) 72 677.67 T
0 F
(Appendix A) 95.75 677.67 T
(Resources on Dylan) 151.96 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(A.3  Harlequin) 108 638 T
1 11 Q
-0.18 (Harlequin\325s initial Dylan pr) 108 618.67 P
-0.18 (oduct is a Dylan implementation for W) 242.08 618.67 P
-0.18 (indows 95 and) 430.5 618.67 P
(W) 108 604.67 T
(indows/NT) 118.39 604.67 T
(. Harlequin will of) 176.3 604.67 T
(fer Dylan implementations on the thr) 265.41 604.67 T
(ee major) 446.29 604.67 T
(platforms: W) 108 590.67 T
(indows, UNIX, and the Macintosh. Harlequin will pr) 171.18 590.67 T
(ovide a native) 427.92 590.67 T
(Dylan development envir) 108 576.67 T
(onment and technical support.) 232.73 576.67 T
(Harlequin\325s Dylan W) 135 562.67 T
(eb site contains a gr) 237.81 562.67 T
(eat deal of useful information) 333.29 562.67 T
(about Dylan, including the F) 108 548.67 T
(AQ,) 246.61 548.67 T
0 F
(The Dylan Refer) 269.32 548.67 T
(ence Manual) 342.46 548.67 T
1 F
(, and pointers to) 399.81 548.67 T
(public-domain implementations of Dylan and to the) 108 534.67 T
4 10 Q
(comp.lang.dylan) 364.27 534.67 T
1 11 Q
( news-) 454.27 534.67 T
(gr) 108 520.67 T
(oup. The addr) 118.26 520.67 T
(ess of Harlequin\325s Dylan W) 187.27 520.67 T
(eb page is) 319.84 520.67 T
4 9 Q
(http://www.harlequin.com/full/dylan.html) 135 503 T
1 11 Q
(Harlequin\325s main W) 108 483.67 T
(eb site is located at) 205.89 483.67 T
4 9 Q
(http://www.harlequin.com/) 135 466 T
1 11 Q
(Harlequin\325s main telephone numbers ar) 108 446.67 T
(e) 302.17 446.67 T
(United States.: 617-374-2400) 135 432.67 T
(United Kingdom: 44 \0500\051 1223 873800) 135 418.67 T
(Harlequin\325s main addr) 108 398.67 T
(esses ar) 218.99 398.67 T
(e:) 255.92 398.67 T
(Harlequin Incorporated) 135 384.67 T
(One Cambridge Center) 135 370.67 T
(Cambridge, MA 02142) 135 356.67 T
(USA) 249.96 356.67 T
(Harlequin Limited) 135 336.67 T
(Barrington Hall) 135 322.67 T
(Barrington) 135 308.67 T
(Cambridge) 135 294.67 T
(United Kingdom) 135 280.67 T
(CB2 5RG) 135 266.67 T
3 15 Q
(A.4  Carnegie Mellon Univer) 108 228 T
(sity) 270.52 228 T
1 11 Q
(Carnegie Mellon pr) 108 208.67 T
(ovides a public-domain implementation called) 202.64 208.67 T
2 F
(Mindy) 432.23 208.67 T
1 F
(, which) 465.23 208.67 T
(stands for \322Mindy Is Not Dylan Y) 108 194.67 T
(et.\323 Mindy is an experimental byte-compiler) 271.56 194.67 T
(and interpr) 108 180.67 T
(eter written in C. Mindy implementations ar) 162.93 180.67 T
(e available for UNIX,) 378.43 180.67 T
(W) 108 166.67 T
(indowsNT) 118.39 166.67 T
(, OS/2, and the Macintosh \050both 68000 and PowerPC\051.) 169.63 166.67 T
(Carnegie Mellon\325s Gwydion and Dylan W) 135 152.67 T
(eb site contains a gr) 339.21 152.67 T
(eat deal of) 434.7 152.67 T
(useful information about Dylan, including the F) 108 138.67 T
(AQ,) 340.2 138.67 T
0 F
(The Dylan Refer) 362.9 138.67 T
(ence Manual) 436.05 138.67 T
1 F
(,) 493.4 138.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "376" 390
%%Page: "377" 391
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(A.5 Apple Computer, Inc.) 416.85 677.67 T
2 F
(377) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.26 (the) 108 640.67 P
4 10 Q
-0.57 (comp.lang.dylan) 125.74 640.67 P
1 11 Q
-0.26 ( newsgr) 215.74 640.67 P
-0.26 (oup, and r) 254 640.67 P
-0.26 (eleases of Mindy) 303.75 640.67 P
-0.26 (. Carnegie Mellon\325s W) 383.85 640.67 P
-0.26 (eb) 490.16 640.67 P
(site about Gwydion and Dylan is located at) 108 626.67 T
4 9 Q
(http://www.cmu.edu/gwydion/gwydion/) 135 609 T
1 11 Q
(The addr) 108 589.67 T
(ess of Carnegie Mellon\325s Gwydion and Dylan ftp site is) 152.25 589.67 T
4 9 Q
(ftp://legend.gwydion.cs.cmu.edu/usr/gwydion/ftp/) 135 572 T
1 11 Q
(Carnegie Mellon\325s main W) 108 552.67 T
(eb site is located at) 237.16 552.67 T
4 9 Q
(http://www.cmu.edu/) 135 535 T
1 11 Q
(Carnegie Mellon\325s electr) 108 515.67 T
(onic mail addr) 225.96 515.67 T
(ess for Gwydion is:) 296.66 515.67 T
4 9 Q
(gwydion-group@cs.cmu.edu) 135 498 T
3 15 Q
(A.5  Apple Computer) 108 461 T
(, Inc.) 228.93 461 T
1 11 Q
(Apple Computer sells the Apple Dylan T) 108 441.67 T
(echnology Release. That r) 306.68 441.67 T
(elease is a low-) 430.98 441.67 T
(cost pr) 108 427.67 T
(oduct, which pr) 140.65 427.67 T
(ovides the opportunity for pr) 217.55 427.67 T
(ogrammers to become famil-) 359.76 427.67 T
-0.34 (iar with the Dylan language and the Apple Dylan development envir) 108 413.67 P
-0.34 (onment. The) 440.63 413.67 P
(softwar) 108 399.67 T
(e is un\336nished, and will not be supported or updated by Apple.) 144.74 399.67 T
(Apple\325s Dylan W) 135 385.67 T
(eb page contains much useful information about Dylan,) 218.19 385.67 T
(including the F) 108 371.67 T
(AQ,) 180.82 371.67 T
0 F
(The Dylan Refer) 203.52 371.67 T
(ence Manual) 276.67 371.67 T
1 F
(, mail ar) 334.02 371.67 T
(chives, newsgr) 373.53 371.67 T
(oup) 445.44 371.67 T
-0.16 (ar) 108 357.67 P
-0.16 (chives, articles about Dylan, and pointers to public-domain implementations of) 117.65 357.67 P
(Dylan:) 108 343.67 T
4 9 Q
(http://www.cambridge.apple.com/) 135 326 T
1 11 Q
(Apple\325s Dylan ftp site is located at) 108 306.67 T
4 9 Q
(ftp://ftp.cambridge.apple.com/pub/dylan/) 135 289 T
1 11 Q
(Y) 108 269.67 T
(ou can or) 114.32 269.67 T
(der the Apple Dylan T) 159.4 269.67 T
(echnology Release fr) 267.71 269.67 T
(om the Apple Developer) 367.94 269.67 T
(Catalog Online, located at) 108 255.67 T
4 9 Q
(http://www.devcatalog.apple.com/) 135 238 T
1 11 Q
(The telephone numbers for the Apple Developer Catalog Online ar) 108 218.67 T
(e:) 432.98 218.67 T
(U.S.: 1-800-282-2732) 135 204.67 T
(Canada: 1-800-637-0029) 135 190.67 T
(International: 1-716-871-6555) 135 176.67 T
(Apple\325s main W) 108 156.67 T
(eb site is located at) 186.28 156.67 T
4 9 Q
(http://www.apple.com/) 135 139 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "377" 391
%%Page: "378" 392
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(378) 72 677.67 T
0 F
(Appendix A) 95.75 677.67 T
(Resources on Dylan) 151.96 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(Apple\325s main addr) 108 640.67 T
(ess is:) 199.38 640.67 T
(Apple Computer) 135 626.67 T
(, Inc.) 217.15 626.67 T
(1 In\336nite Loop) 135 612.67 T
(Cupertino, CA) 135 598.67 T
(95014) 212.21 598.67 T
3 15 Q
(A.6  Digitool, Inc.) 108 560 T
1 11 Q
-0.42 (Digitool ported the Apple Dylan T) 108 540.67 P
-0.42 (echnology Release to r) 272.98 540.67 P
-0.42 (un natively on the Power) 380.73 540.67 P
(Macintosh. Y) 108 526.67 T
(ou can obtain this version fr) 170.88 526.67 T
(om Apple Computer dir) 306.59 526.67 T
(ectly) 424.84 526.67 T
(.) 446.68 526.67 T
(Digitool\325s main W) 108 506.67 T
(eb site is located at) 195.86 506.67 T
4 9 Q
(http://www.digitool.com/) 135 489 T
1 11 Q
(Digitool\325s telephone number is) 108 469.67 T
(617-441-5000) 135 455.67 T
(Digitool\325s addr) 108 435.67 T
(ess is) 181.39 435.67 T
(Digitool, Inc.) 135 421.67 T
(One Main Str) 135 407.67 T
(eet \321 7th Floor) 199.83 407.67 T
(Cambridge, MA) 135 393.67 T
(02142) 219.71 393.67 T
3 15 Q
(A.7  Marlais) 108 355 T
1 11 Q
-0.41 (Marlais is an experimental Dylan interpr) 108 335.67 P
-0.41 (eter in the public domain as \322copylefted\323) 303.63 335.67 P
-0.08 (softwar) 108 321.67 P
-0.08 (e. Marlais is available on UNIX, the Macintosh, and W) 144.74 321.67 P
-0.08 (indows. It was orig-) 407.11 321.67 P
-0.28 (inally developed by Br) 108 307.67 P
-0.28 (ent Benson of Harris Computer Systems, and new versions) 217.4 307.67 P
(wer) 108 293.67 T
(e developed by Joseph N. W) 126.59 293.67 T
(ilson, at the University of Florida. Patrick Bear) 263.99 293.67 T
(d) 488.79 293.67 T
(developed the Macintosh implementation of Marlais.) 108 279.67 T
(The addr) 108 259.67 T
(ess of the W) 152.25 259.67 T
(eb site for Marlais is) 210.01 259.67 T
4 9 Q
(http://www.cise.ufl.edu:/~jnw/Marlais/) 135 242 T
1 11 Q
(The W) 108 222.67 T
(eb site for the Computer and Information Science and Engineering Depart-) 139.15 222.67 T
(ment of the University of Florida is located at) 108 208.67 T
4 9 Q
(http://www.cise.ufl.edu/) 135 191 T
1 11 Q
(The telephone number of the department wher) 108 171.67 T
(e Marlais is being developed is) 336.29 171.67 T
(904-392-1200) 135 157.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "378" 392
%%Page: "379" 393
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(A.7 Marlais) 469.81 677.67 T
2 F
(379) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(The addr) 108 640.67 T
(ess of the department wher) 152.25 640.67 T
(e Marlais is being developed is) 284.77 640.67 T
(Computer & Information Science & Engineering) 135 626.67 T
(Room E301 CSE Building) 135 612.67 T
(PO Box 1) 135 598.67 T
(16120) 179.09 598.67 T
(University of Florida) 135 584.67 T
(Gainesville, FLA) 135 570.67 T
(3261) 221.91 570.67 T
(1-6120) 243.31 570.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "379" 393
%%Page: "380" 394
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 126 522 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "380" 394
%%Page: "381" 395
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(381) 298.88 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Appendix B) 108 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(B) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Object Model for C) 109.22 566.45 T
(and C++ Pr) 108 536.45 T
(ogrammers) 260.85 536.45 T
108 126 522 432 R
7 X
V
1 11 Q
0 X
(In this appendix, we discuss certain ar) 108 424.67 T
(eas wher) 293.91 424.67 T
(e Dylan\325s object model dif) 337.09 424.67 T
(fers sig-) 463.51 424.67 T
(ni\336cantly fr) 108 410.67 T
(om the object model of C and C++.) 164.51 410.67 T
3 15 Q
(B.1  The concept of pointer) 108 372 T
(s) 266.4 372 T
1 11 Q
(If you ar) 108 352.67 T
(e familiar with a language with explicit pointers, such as C, you may be) 149.27 352.67 T
(confused initially by Dylan\325s object model. Although ther) 108 338.67 T
(e is no \322pointer) 387.12 338.67 T
(-to\323) 461.64 338.67 T
(operation in Dylan, ther) 108 324.67 T
(e ar) 224.67 324.67 T
(e pointers in the implementation. If you ar) 242.33 324.67 T
(e trying to) 447.98 324.67 T
(imagine how Dylan objects ar) 108 310.67 T
(e implemented, it is better to think in terms of) 252.43 310.67 T
(always manipulating a pointer to the object: A Dylan variable \050or slot\051 stor) 108 296.67 T
(es a) 469.28 296.67 T
-0.07 (pointer to an object, rather than a copy of the object\325s slots. Similarly) 108 282.67 P
-0.07 (, assignment,) 437.62 282.67 P
(ar) 108 268.67 T
(gument passing, and identity comparison ar) 117.65 268.67 T
(e in terms of pointers to objects.) 332.71 268.67 T
-0.13 (Even characters and numbers can be) 135 254.67 P
0 F
-0.13 (consider) 314.59 254.67 P
-0.13 (ed) 351.26 254.67 P
1 F
-0.13 ( as objects that ar) 361.04 254.67 P
-0.13 (e pointed to) 443.48 254.67 P
(\050objects with an unmodi\336able value slot\051, making the object model uniform. But) 108 240.67 T
(compilers optimize away the indir) 108 226.67 T
(ection for these built-in classes.) 275.2 226.67 T
(Note that) 135 212.67 T
4 10 Q
(=) 183.58 212.67 T
1 11 Q
( comparison defaults to pointer comparison, but can be custom-) 189.58 212.67 T
(ized by class. Ther) 108 198.67 T
(e ar) 197.36 198.67 T
(e sensible customizations built-in for characters, numbers,) 215.03 198.67 T
-0.29 (collections, sequences, and lists. Y) 108 184.67 P
-0.29 (ou can add your own customizations for classes) 270.87 184.67 P
(that you cr) 108 170.67 T
(eate.) 160.36 170.67 T
(Consider this Dylan code:) 135 156.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "381" 395
%%Page: "382" 396
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(382) 72 677.67 T
0 F
(Appendix B) 95.75 677.67 T
(Dylan Object Model for C and C++ Programmers) 150.91 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(The equivalent C code is as follows:) 108 385.67 T
8 10 Q
(Dylan object e) 259.04 621.33 T
(xample) 322.1 621.33 T
(.) 354.18 621.33 T
4 9 Q
(define class <color> \050<object>\051) 114 602 T
(slot red :: <integer> = 0, init-keyword: red:;) 124.8 591 T
(slot green :: <integer> = 0, init-keyword: green:;) 124.8 580 T
(slot blue :: <integer> = 0, init-keyword: blue:;) 124.8 569 T
(end class <color>;) 114 558 T
(define constant black = make\050<color>\051;) 114 539 T
(define constant white) 114 520 T
(= make\050<color>, red: 2 ^ 24 - 1, green: 2 ^ 24 - 1, blue: 2 ^ 24 - 1\051;) 124.8 509 T
(define method whiteness-test\050color :: <color>\051) 114 490 T
(if \050color = white\051 format-out\050"It\325s white!\134n"\051 end;) 124.8 479 T
(end method whiteness-test;) 114 468 T
(define variable color = black;) 114 449 T
(color := white;) 114 430 T
(whiteness-test\050color\051;) 114 419 T
8 10 Q
(C equiv) 224.43 352.33 T
(alent of Dylan object e) 258.08 352.33 T
(xample) 356.71 352.33 T
(.) 388.8 352.33 T
4 9 Q
(typedef struct _color) 114 333 T
({ int red, green, blue; }) 124.8 322 T
(Color;) 114 311 T
(static Color _black = {0, 0, 0};) 114 292 T
(Color* const black = &_black;) 114 281 T
(static Color _white = {16777215, 16777215, 16777215};) 114 262 T
(Color* const white = &_white;) 114 251 T
(void whitenessTest\050Color* const color\051 {) 114 232 T
(if \050color == white\051 { printf\050"It\325s white!\134n"\051; }) 124.8 221 T
(}) 114 210 T
(void main \050\051 {) 114 191 T
(Color* color = black;) 124.8 180 T
(color = white;) 124.8 158 T
(whitenessTest\050color\051;) 124.8 147 T
(}) 114 136 T
108 633.88 108 412.12 2 L
V
0.25 H
0 Z
N
522 633.88 522 412.12 2 L
V
N
107.88 634 522.12 634 2 L
V
N
107.88 614 522.12 614 2 L
V
N
107.88 412 522.12 412 2 L
V
N
108 364.88 108 129.12 2 L
V
N
522 364.88 522 129.12 2 L
V
N
107.88 365 522.12 365 2 L
V
N
107.88 345 522.12 345 2 L
V
N
107.88 129 522.12 129 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "382" 396
%%Page: "383" 397
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(B.1 The concept of pointers) 412.73 677.67 T
2 F
(383) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.31 (The bene\336t of the Dylan model is that the \336nal two statements ar) 108 634.67 P
-0.31 (e a single pointer) 419.18 634.67 P
(assignment and a passing of a single pointer as a parameter) 108 620.67 T
(. The comparison in) 396.73 620.67 T
4 9 Q
-1.01 (whitenessTest) 108 606.67 P
1 11 Q
-0.51 ( is a single pointer comparison. Another possible C implementation) 178.2 606.67 P
-0.06 (\321 one mor) 108 592.67 P
-0.06 (e typical of C style, but) 161.93 592.67 P
0 F
-0.06 (not) 275.81 592.67 P
1 F
-0.06 ( equivalent to the Dylan implementation \321) 290.47 592.67 P
(is as follows:) 108 578.67 T
-0.05 (In the C-style example, without pointers, the \336nal two statements consist of thr) 108 301.67 P
-0.05 (ee) 490.76 301.67 P
(integer assignments \050as the) 108 287.67 T
4 10 Q
(Color) 242.45 287.67 T
1 11 Q
( str) 272.45 287.67 T
(uctur) 287.71 287.67 T
(e is copied\051, and a passing of a thr) 313.59 287.67 T
(ee-) 478.42 287.67 T
(slot str) 108 273.67 T
(uctur) 140.71 273.67 T
(e \050the equivalent of thr) 166.6 273.67 T
(ee ar) 277.03 273.67 T
(guments\051 as an ar) 299.96 273.67 T
(gument. The compari-) 385.97 273.67 T
(son in) 108 259.67 T
4 9 Q
(whitenessTest) 140.18 259.67 T
1 11 Q
( is thr) 210.38 259.67 T
(ee integer comparisons \050as the two) 237.88 259.67 T
4 10 Q
(Color) 408.95 259.67 T
1 11 Q
( str) 438.95 259.67 T
(uctur) 454.2 259.67 T
(es) 480.09 259.67 T
(ar) 108 245.67 T
(e compar) 117.65 245.67 T
(ed, slot by slot\051.) 162.53 245.67 T
(The drawback of the Dylan object example is shown her) 135 231.67 T
(e:) 407.12 231.67 T
4 9 Q
(color.blue := 0;) 108 211 T
1 11 Q
-0.26 (The pr) 108 190.67 P
-0.26 (eceding call makes) 139.66 190.67 P
4 10 Q
-0.58 (white) 233.02 190.67 P
1 11 Q
-0.26 ( yellow! In the C-style example, without pointers,) 263.02 190.67 P
(you would make only) 108 176.67 T
4 10 Q
(color) 217.81 176.67 T
1 11 Q
( yellow) 247.81 176.67 T
(. Y) 282.52 176.67 T
(ou can pr) 294.34 176.67 T
(event people fr) 340.03 176.67 T
(om changing) 413.04 176.67 T
(de\336ned colors to other colors in Dylan by not allowing the slots of) 108 162.67 T
4 10 Q
(<color>) 431.58 162.67 T
1 11 Q
(objects to be modi\336ed once they ar) 108 148.67 T
(e initialized \321 in other wor) 276.38 148.67 T
(ds, by making) 409.92 148.67 T
4 10 Q
(<color>) 108 134.67 T
1 11 Q
( objects) 150 134.67 T
0 F
(immutable) 188.57 134.67 T
1 F
(:) 235.83 134.67 T
8 10 Q
(C-style e) 233.27 550.33 T
(xample) 272.42 550.33 T
(, without pointers) 304.51 550.33 T
(.) 379.95 550.33 T
4 9 Q
(typedef struct _color) 114 531 T
({ int red, green, blue; }) 124.8 520 T
(Color;) 114 509 T
(Color const black = {0, 0, 0};) 114 490 T
(Color const white = {16777215, 16777215, 16777215};) 114 479 T
(void whitenessTest\050Color const color\051 {) 114 460 T
(if \050color.red == white.red &&) 124.8 449 T
(color.green == white.green &&) 146.4 438 T
(color.blue == white.blue\051) 146.4 427 T
({ printf\050"It\325s white!\134n"\051; }) 124.8 416 T
(}) 114 405 T
(void main \050\051 {) 114 386 T
(Color color = black;) 124.8 375 T
(color = white;) 124.8 353 T
(whitenessTest\050color\051;) 124.8 342 T
(}) 114 331 T
108 562.88 108 324.12 2 L
V
0.25 H
0 Z
N
522 562.88 522 324.12 2 L
V
N
107.88 563 522.12 563 2 L
V
N
107.88 543 522.12 543 2 L
V
N
107.88 324 522.12 324 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "383" 397
%%Page: "384" 398
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(384) 72 677.67 T
0 F
(Appendix B) 95.75 677.67 T
(Dylan Object Model for C and C++ Programmers) 150.91 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.08 (Y) 108 385.67 P
-0.08 (ou can consider Dylan as always using pointers, even to objects such as integers) 114.32 385.67 P
(and characters. Integers and characters ar) 108 371.67 T
(e, by de\336nition, immutable objects:) 309.51 371.67 T
(Ther) 108 357.67 T
(e ar) 130.56 357.67 T
(e no slots that you can change in an integer or character object. Thus,) 148.23 357.67 T
(ther) 108 343.67 T
(e is no danger of setting 6 to 9. Built-in immutable objects can have their) 127.4 343.67 T
(pointers optimized away by the compiler: The compiler just has to arrange that) 108 329.67 T
(6 = 6 and 9 = 9, whether ther) 108 315.67 T
(e is only one 6 object pointed to by all the variables) 246.56 315.67 T
(with the value 6, or copies of 6 ar) 108 301.67 T
(e stor) 268.49 301.67 T
(ed in each of those variables \050saving the) 294.91 301.67 T
(need for a pointer\051.) 108 287.67 T
(Another dif) 135 273.67 T
(\336culty in the Dylan model is this potentially embarrassing) 191.71 273.67 T
(situation:) 108 259.67 T
4 9 Q
(color := make\050<color>, red: 2 ^ 24 - 1, green: 2 ^ 24 - 1, blue: 2 ^ 24 - 1\051;) 108 239 T
(if \050color = white\051 format-out\050"It\325s white!\134n"\051 end;) 108 228 T
1 11 Q
(The pr) 108 207.67 T
(eceding expr) 139.92 207.67 T
(ession might not say \322It\325s white!\323, because) 202.24 207.67 T
4 10 Q
(make) 410.74 207.67 T
1 11 Q
( might r) 434.74 207.67 T
(eturn) 473.41 207.67 T
(a new object with white RGB values, and that object would not be) 108 193.67 T
4 10 Q
(=) 430.37 193.67 T
1 11 Q
( to the object) 436.37 193.67 T
(named) 108 179.67 T
4 10 Q
(white) 144.35 179.67 T
1 11 Q
(. The equivalent C code would be:) 174.35 179.67 T
4 9 Q
(Color* make_color\050int r, int g, int b\051 {) 108 159 T
(Color* c = \050Color*\051malloc\050sizeof\050Color\051\051;) 118.8 148 T
(c->red = r; c->green = g; c->blue = b;) 118.8 137 T
8 10 Q
(Dylan object e) 205.91 621.33 T
(xample) 268.98 621.33 T
(, with imm) 301.05 621.33 T
(utab) 345.95 621.33 T
(le objects) 365.21 621.33 T
(.) 407.3 621.33 T
4 9 Q
(define class <color> \050<object>\051) 114 602 T
(constant slot red :: <integer> = 0, init-keyword: red:;) 124.8 591 T
(constant slot green :: <integer> = 0, init-keyword: green:;) 124.8 580 T
(constant slot blue :: <integer> = 0, init-keyword: blue:;) 124.8 569 T
(end class <color>;) 114 558 T
(define constant black = make\050<color>\051;) 114 539 T
(define constant white) 114 520 T
(= make\050<color>, red: 2 ^ 24 - 1, green: 2 ^ 24 - 1, blue: 2 ^ 24 - 1\051;) 124.8 509 T
(define variable color = black;) 114 490 T
(define method whiteness-test\050color :: <color>\051) 114 471 T
(if \050color = white\051 format-out\050"It\325s white!\134n"\051 end;) 124.8 460 T
(end method whiteness-test;) 114 449 T
(color := white;) 114 430 T
(whiteness-test\050color\051;) 114 419 T
108 633.88 108 412.12 2 L
V
0.25 H
0 Z
N
522 633.88 522 412.12 2 L
V
N
107.88 634 522.12 634 2 L
V
N
107.88 614 522.12 614 2 L
V
N
107.88 412 522.12 412 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "384" 398
%%Page: "385" 399
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(B.1 The concept of pointers) 412.73 677.67 T
2 F
(385) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
4 9 Q
0 X
(return c;) 118.8 642 T
(}) 108 631 T
(static Color _white = {16777215, 16777215, 16777215};) 108 612 T
(Color* const white = &_white;) 108 601 T
(Color* color = make_color\05016777215, 16777215, 16777215\051;) 108 582 T
(if \050color == white\051 { printf\050"It\325s white!\134n"\051; };) 108 571 T
1 11 Q
(Because the pr) 108 550.67 T
(eceding code is comparing the pointer stor) 178.46 550.67 T
(ed in) 385.42 550.67 T
4 10 Q
(white) 412.51 550.67 T
1 11 Q
( to the) 442.51 550.67 T
-0.23 (pointer stor) 108 536.67 P
-0.23 (ed in) 164.35 536.67 P
4 10 Q
-0.49 (color) 190.99 536.67 P
1 11 Q
-0.23 (, it will clearly not say \322It\325s white!\323. The default implemen-) 220.17 536.67 P
(tation of) 108 522.67 T
4 10 Q
(=) 151.45 522.67 T
1 11 Q
( in Dylan is to compar) 157.45 522.67 T
(e pointers.) 264.85 522.67 T
(Ther) 135 508.67 T
(e ar) 157.56 508.67 T
(e several solutions to this dif) 175.23 508.67 T
(\336culty in Dylan. One is to customize) 313.9 508.67 T
(the) 108 494.67 T
4 10 Q
(=) 126.01 494.67 T
1 11 Q
( comparison operator for our class to do a comparison mor) 132.01 494.67 T
(e thor) 417.43 494.67 T
(ough than) 445.6 494.67 T
(the default comparison:) 108 480.67 T
4 9 Q
(define met) 108 460 T
4 10 Q
(h) 162 460 T
4 9 Q
(od \134= \050o1 :: <color>, o2 :: <color>\051) 168 460 T
(o1.red = o2.red & o1.green = o2.green & o1.blue = o2.blue;) 118.8 449 T
(end met) 108 438 T
4 10 Q
(h) 145.8 438 T
4 9 Q
(od \134=;) 151.8 438 T
1 11 Q
-0.01 (Now) 108 417.67 P
-0.01 (, using) 131.31 417.67 P
4 10 Q
-0.02 (=) 166.56 417.67 P
1 11 Q
-0.01 ( will compar) 172.56 417.67 P
-0.01 (e colors by checking their individual RGB components,) 233.68 417.67 P
(and our whiteness test will work.) 108 403.67 T
(Note that Dylan also pr) 135 389.67 T
(ovides the) 248.94 389.67 T
4 10 Q
(==) 301.77 389.67 T
1 11 Q
( comparison operator) 313.77 389.67 T
(, which always) 417.46 389.67 T
(compar) 108 375.67 T
(es pointers. This comparison is useful when you want to check object) 144.86 375.67 T
-0.06 (identity) 108 361.67 P
-0.06 (. But, as we have seen, it is not always the appr) 144.86 361.67 P
-0.06 (opriate default for compar-) 372.12 361.67 P
(ison of equality of objects. The compiler can avoid calling our) 108 347.67 T
4 10 Q
(\134=) 408.9 347.67 T
1 11 Q
( method alto-) 420.9 347.67 T
(gether if the same object is compar) 108 333.67 T
(ed to itself. It can do so because, with the) 275.88 333.67 T
(exception of IEEE NaNs \050nonnumbers\051, values that ar) 108 319.67 T
(e) 368.34 319.67 T
4 10 Q
(==) 376.36 319.67 T
1 11 Q
( must also be) 388.36 319.67 T
4 10 Q
(=) 454.67 319.67 T
1 11 Q
(.) 460.67 319.67 T
-0.13 (Another appr) 135 305.67 P
-0.13 (oach that you can use if your objects ar) 201.06 305.67 P
-0.13 (e immutable is to make) 388.67 305.67 P
-0.28 (sur) 108 291.67 P
-0.28 (e that they ar) 123.44 291.67 P
-0.28 (e unique. The) 186.22 291.67 P
4 10 Q
-0.61 (make) 254.37 291.67 P
1 11 Q
-0.28 ( function is not r) 278.37 291.67 P
-0.28 (equir) 357.05 291.67 P
-0.28 (ed to r) 382.45 291.67 P
-0.28 (eturn a new object) 413.13 291.67 P
-0.12 (each time, as shown in the Dylan object example, with unique, immutable objects.) 108 277.67 P
(This advanced use of) 135 263.67 T
4 10 Q
(make) 240.46 263.67 T
1 11 Q
( and tables ensur) 264.46 263.67 T
(es that ther) 346.75 263.67 T
(e is always only one) 400.66 263.67 T
(instance of each color) 108 249.67 T
(. Thus, when we make another white, it will always be) 211.51 249.67 T
0 F
(the) 478.95 249.67 T
1 F
-0.43 (white, and our whiteness test will work with the default) 108 235.67 P
4 10 Q
-0.93 (=) 379.57 235.67 P
1 11 Q
-0.43 ( comparison. The choice) 385.57 235.67 P
(of solution depends on whether you will be doing mor) 108 221.67 T
(e making or comparing.) 373.83 221.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "385" 399
%%Page: "386" 400
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(386) 72 677.67 T
0 F
(Appendix B) 95.75 677.67 T
(Dylan Object Model for C and C++ Programmers) 150.91 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
3 15 Q
0 X
(B.2  The concept of c) 108 285 T
(lasses) 231.49 285 T
1 11 Q
(If you ar) 108 265.67 T
(e familiar with the class concepts of C++, you may be confused by) 149.27 265.67 T
(Dylan\325s class model. In Dylan, all base classes ar) 108 251.67 T
(e ef) 342.53 251.67 T
(fectively virtual base classes,) 359.28 251.67 T
(with \322virtual\323 data members. When a class inherits another class mor) 108 237.67 T
(e than once) 445.5 237.67 T
-0.21 (\050because of multiple inheritance\051, only a single copy of that base class is included.) 108 223.67 P
(Each of the multiple-inheritance paths can contribute to the implementation of) 108 209.67 T
-0.07 (the derived class. The Dylan class model favors this mix-in style of pr) 108 195.67 P
-0.07 (ogramming.) 444.14 195.67 P
(Her) 135 181.67 T
(e is an example of such a pr) 153.57 181.67 T
(ogram, followed by the equivalent C++:) 287.6 181.67 T
8 10 Q
(Dylan object e) 188.2 621.33 T
(xample) 251.26 621.33 T
(, with unique) 283.34 621.33 T
(, imm) 339.33 621.33 T
(utab) 363.67 621.33 T
(le objects) 382.93 621.33 T
(.) 425.02 621.33 T
4 9 Q
(define class <color-table> \050<table>\051) 114 602 T
(end class <color-table>;) 114 591 T
(define method table-protocol\050<color-table>\051) 114 572 T
(local method color-hash\050color :: <color>\051) 124.8 561 T
(let \050red-id, red-state\051 = object-hash\050color.red\051;) 135.6 550 T
(let \050grn-id, grn-state\051 = object-hash\050color.green\051;) 135.6 539 T
(let \050blu-id, blu-state\051 = object-hash\050color.blue\051;) 135.6 528 T
(let \050merge-id, merge-state\051 =) 135.6 517 T
(merge-hash-codes\050red-id, red-state,) 146.4 506 T
(grn-id, grn-state, ordered: #t\051;) 238.2 495 T
(merge-hash-codes\050merge-id, merge-state,) 135.6 484 T
(blu-id, blu-state, ordered: #t\051;) 227.4 473 T
(end;) 124.8 462 T
(local method color-test\050o1 :: <color>, o2 :: <color>\051) 124.8 451 T
(o1.red = o2.red & o1.green = o2.green & o1.blue = o2.blue;) 135.6 440 T
(end;) 124.8 429 T
(values\050color-test, color-hash\051) 124.8 418 T
(end method table-protocol;) 114 407 T
(define variable color-table = make\050<color-table>\051;) 114 388 T
(define method make\050class == <color>, #key red, green, blue\051) 114 369 T
(let prototype = next-method\050\051;) 124.8 358 T
(element\050color-table, prototype, default: #f\051 |) 124.8 347 T
(\050color-table[prototype] := prototype\051;) 135.6 336 T
(end method make;) 114 325 T
108 633.88 108 318.12 2 L
V
0.25 H
0 Z
N
522 633.88 522 318.12 2 L
V
N
107.88 634 522.12 634 2 L
V
N
107.88 614 522.12 614 2 L
V
N
107.88 318 522.12 318 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "386" 400
%%Page: "387" 401
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(B.2 The concept of classes) 418.36 677.67 T
2 F
(387) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(The example is a gr) 108 284.67 T
(eatly simpli\336ed sketch of a computer) 202.28 284.67 T
(-display windowing sys-) 381.88 284.67 T
(tem, wher) 108 270.67 T
(e a window may have a bor) 157.06 270.67 T
(der \050outline decoration\051, or a title \050such as) 291.46 270.67 T
(the title bar of a window\051, or both. \050W) 108 256.67 T
(e omit any further detail, such as scr) 291.12 256.67 T
(oll) 467.07 256.67 T
(bars.\051 One chor) 108 242.67 T
(e in such a system is to compute the available display ar) 182.26 242.67 T
(ea of a) 454.23 242.67 T
(window fr) 108 228.67 T
(om that window\325s overall size and fr) 159.24 228.67 T
(om the sizes of the window\325s) 337.73 228.67 T
(components.) 108 214.67 T
(Note that calling) 135 200.67 T
4 10 Q
(height) 218.83 200.67 T
1 11 Q
( on an instance of) 254.83 200.67 T
4 10 Q
(<border-label-window>) 342.47 200.67 T
1 11 Q
( will) 468.47 200.67 T
(automatically perform the actions appr) 108 186.67 T
(opriate for a window with a bor) 297.95 186.67 T
(der and a) 453.26 186.67 T
(label. First, the method for) 108 172.67 T
4 10 Q
(<border-window>) 239.38 172.67 T
1 11 Q
( will be called, subtracting out the) 329.38 172.67 T
(bor) 108 158.67 T
(der width; when it calls) 124.24 158.67 T
4 10 Q
(next-method) 241.64 158.67 T
1 11 Q
(, to get the underlying window width,) 307.64 158.67 T
(the method for) 108 144.67 T
4 10 Q
(<label-window>) 183.22 144.67 T
1 11 Q
( will be called, subtracting out the label height;) 267.22 144.67 T
8 10 Q
(Mix-in e) 253.7 621.33 T
(xample in Dylan.) 288.39 621.33 T
4 9 Q
(define class <window> \050<object>\051) 114 602 T
(slot width :: <integer>;) 124.8 591 T
(slot height :: <integer>;) 124.8 580 T
(end class <window>;) 114 569 T
(define class <border-window> \050<window>\051) 114 550 T
(slot border-width :: <integer>;) 124.8 539 T
(end class <border-window>;) 114 528 T
(define method width\050window :: <border-window>\051) 114 509 T
(next-method\050\051 - 2 * window.border-width;) 124.8 498 T
(end method width;) 114 487 T
(define method height\050window :: <border-window>\051) 114 468 T
(next-method\050\051 - 2 * window.border-width;) 124.8 457 T
(end method height;) 114 446 T
(define class <label-window> \050<window>\051) 114 427 T
(slot label-height :: <integer>;) 124.8 416 T
(slot label-text :: <string>;) 124.8 405 T
(end class <label-window>;) 114 394 T
(define method height\050window :: <label-window>\051) 114 375 T
(next-method\050\051 - window.label-height;) 124.8 364 T
(end method height;) 114 353 T
(define class <border-label-window>) 114 334 T
(\050<border-window>, <label-window>, <window>\051) 135.6 323 T
(end class <border-label-window>;) 114 312 T
108 633.88 108 305.12 2 L
V
0.25 H
0 Z
N
522 633.88 522 305.12 2 L
V
N
107.88 634 522.12 634 2 L
V
N
107.88 614 522.12 614 2 L
V
N
107.88 305 522.12 305 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "387" 401
%%Page: "388" 402
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(388) 72 677.67 T
0 F
(Appendix B) 95.75 677.67 T
(Dylan Object Model for C and C++ Programmers) 150.91 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
-0.26 (\336nally) 108 640.67 P
-0.26 (, when it calls) 137.85 640.67 P
4 10 Q
-0.56 (next-method) 206.06 640.67 P
1 11 Q
-0.26 (, the method for getting the value of the) 272.06 640.67 P
4 10 Q
-0.56 (height) 465.51 640.67 P
1 11 Q
(slot in the underlying window will be called.) 108 626.67 T
(This example is a classic one of the mix-in style \321 the full functionality of) 135 612.67 T
(the) 108 598.67 T
4 10 Q
(<border-label-window>) 126.01 598.67 T
1 11 Q
( class is the r) 252.01 598.67 T
(esult of the combination of the individ-) 313.19 598.67 T
(ual pieces of) 108 584.67 T
4 10 Q
(<border-window>) 171.15 584.67 T
1 11 Q
( and) 261.15 584.67 T
4 10 Q
(<label-window>) 285.27 584.67 T
1 11 Q
( functionality) 369.27 584.67 T
(.) 433.18 584.67 T
8 10 Q
(C++ equiv) 224.43 556.33 T
(alent of the mix-in e) 269.76 556.33 T
(xample) 356.71 556.33 T
(.) 388.8 556.33 T
4 9 Q
(class Window {) 114 537 T
(private:) 114 526 T
(int _width;) 124.8 515 T
(int _height;) 124.8 504 T
(public:) 114 493 T
(virtual int width\050\051 { return _width; }) 124.8 482 T
(virtual int height\050\051 { return _height; }) 124.8 471 T
(};) 114 460 T
(class BorderWindow : public virtual Window {) 114 441 T
(private:) 114 430 T
(int _border_width;) 124.8 419 T
(public:) 114 408 T
(virtual int border_width\050\051 { return _border_width; }) 124.8 397 T
(virtual int width\050\051;) 124.8 386 T
(virtual int height\050\051;) 124.8 375 T
(};) 114 364 T
(int BorderWindow::width\050\051 {) 114 345 T
(return Window::width\050\051 - 2 * border_width\050\051;) 124.8 334 T
(}) 114 323 T
(int BorderWindow::height\050\051 {) 114 304 T
(return Window::height\050\051 - 2 * border_width\050\051;) 124.8 293 T
(}) 114 282 T
(class LabelWindow : public virtual Window {) 114 263 T
(private:) 114 252 T
(int _label_height;) 124.8 241 T
(char *_label_text;) 124.8 230 T
(public:) 114 219 T
(virtual int label_height\050\051 { return _label_height; }) 124.8 208 T
(virtual char* label_text\050\051 { return _label_text; }) 124.8 197 T
(virtual int height\050\051;) 124.8 186 T
(};) 114 175 T
(int LabelWindow::height\050\051 {) 114 156 T
(return Window::height\050\051 - label_height\050\051;) 124.8 145 T
(}) 114 134 T
108 568.88 108 127.12 2 L
V
0.25 H
0 Z
N
522 568.88 522 127.12 2 L
V
N
107.88 569 522.12 569 2 L
V
N
107.88 549 522.12 549 2 L
V
N
107.88 127 522.12 127 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "388" 402
%%Page: "389" 403
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(B.2 The concept of classes) 418.36 677.67 T
2 F
(389) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(It may be helpful for C++ pr) 108 471.67 T
(ogrammers to consider that:) 245.36 471.67 T
(\245) 117 451.67 T
(Dylan base classes ar) 135 451.67 T
(e always virtual.) 236.99 451.67 T
(\245) 117 431.67 T
(In Dylan, data members ar) 135 431.67 T
(e accessed thr) 264.6 431.67 T
(ough virtual functions, so it is) 331.36 431.67 T
(always possible to override access to a data member in a derived class, and) 135 417.67 T
(to modify the r) 135 403.67 T
(eturned value \050or) 207.67 403.67 T
(, by overriding the setter) 291.41 403.67 T
(, to modify the) 410.34 403.67 T
(value to be stor) 135 389.67 T
(ed\051.) 209.41 389.67 T
(\245) 117 369.67 T
(Dylan\325s) 135 369.67 T
4 10 Q
(next-method) 175.21 369.67 T
1 11 Q
( allows you to use automatic method combination) 241.21 369.67 T
(when you ar) 135 355.67 T
(e pr) 196.15 355.67 T
(ogramming in a mix-in style.) 214.93 355.67 T
(Note that the C++ equivalent of the mix-in example is incomplete. It is intended) 108 335.67 T
(only as a guide to how you can think of Dylan classes. In particular) 108 321.67 T
(, we have not) 433.6 321.67 T
(modeled the slot setter virtual functions that Dylan classes de\336ne automatically) 108 307.67 T
(,) 493.33 307.67 T
-0.12 (and we have not gone into how instances of the classes ar) 108 293.67 P
-0.12 (e constr) 385.97 293.67 P
-0.12 (ucted. In Dylan,) 423.67 293.67 P
(we would simply give init-keywor) 108 279.67 T
(ds for each of the slots, and the automatically) 276.37 279.67 T
(generated constr) 108 265.67 T
(uctor would \336ll them in for any of the derived classes. In con-) 189.03 265.67 T
-0.39 (trast, constr) 108 251.67 P
-0.39 (uctors for virtual base classes ar) 164.59 251.67 P
-0.39 (e a particularly dif) 317.2 251.67 P
-0.39 (\336cult aspect of C++:) 405.55 251.67 P
-0.04 (They make it har) 108 237.67 P
-0.04 (d to model what is done in Dylan accurately) 190.09 237.67 P
-0.04 (. In general, the mix-) 403.94 237.67 P
(in style of pr) 108 223.67 T
(ogramming is mor) 169.12 223.67 T
(e dif) 259.46 223.67 T
(\336cult to do in C++, because that language\325s) 280.86 223.67 T
(support for it is quite limited.) 108 209.67 T
-0.27 (Note also that the C++ code is pr) 135 195.67 P
-0.27 (ovided only as a model of Dylan execution,) 292.67 195.67 P
(so that you can understand the semantics of Dylan classes in C++ terms. Good) 108 181.67 T
-0.09 (Dylan compilers use library compilation, type infer) 108 167.67 P
-0.09 (encing, and partial evaluation) 356.26 167.67 P
-0.03 (to optimize out the over) 108 153.67 P
-0.03 (head normally associated with virtual classes and virtual) 224.68 153.67 P
(functions, while pr) 108 139.67 T
(eserving the dynamic execution semantics.) 199.7 139.67 T
4 9 Q
(class BorderLabelWindow :) 114 616 T
(public virtual BorderWindow,) 124.8 605 T
(public virtual LabelWindow,) 124.8 594 T
(public virtual Window {) 124.8 583 T
(public:) 114 572 T
(virtual int height\050\051;) 124.8 561 T
(};) 114 550 T
5 F
(// Have to generate "combined" method by hand in C++) 124.8 531 T
4 F
(int BorderLabelWindow::height\050\051 {) 114 520 T
(return Window::height\050\051 - 2 * border_width\050\051 - label_height\050\051;) 124.8 509 T
(}) 114 498 T
8 10 Q
(C++ equiv) 195.85 635.33 T
(alent of the mix-in e) 241.18 635.33 T
(xample) 328.14 635.33 T
(.) 360.22 635.33 T
0 11 Q
( \050Continued\051) 363 635.33 T
108 647.88 108 491.12 2 L
V
0.25 H
0 Z
N
522 647.88 522 491.12 2 L
V
N
107.88 648 522.12 648 2 L
V
N
107.88 628 522.12 628 2 L
V
N
107.88 491 522.12 491 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "389" 403
%%Page: "390" 404
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 126 522 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "390" 404
%%Page: "391" 405
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(391) 325.88 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.33 565.5 502.33 619.5 R
7 X
V
106.33 591.95 502.33 619.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.33 591.95 502.33 619.5 R
7 X
0 0 0 1 0 0 0 K
V
106.33 612.64 268.33 612.64 2 L
3 H
2 Z
0 X
N
106.33 603.64 268.33 603.64 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Glossary) 106.33 571.95 T
108 126 522 432 R
7 X
V
2 11 Q
0 X
(abstract class) 108 424.67 T
1 F
(A class that cannot have dir) 135 406.67 T
(ect instances. T) 269.53 406.67 T
(o de\336ne an abstract class, you) 341.82 406.67 T
(pr) 135 392.67 T
(ovide the) 145.76 392.67 T
4 10 Q
(abstract) 193.93 392.67 T
1 11 Q
( class adjective in the) 241.93 392.67 T
4 10 Q
(define class) 346.67 392.67 T
1 11 Q
( form. All super-) 418.67 392.67 T
(classes of an abstract class must also be abstract.) 135 378.67 T
2 F
(allocation) 108 352.67 T
1 F
(The allocation of a slot determines wher) 135 334.67 T
(e the storage for the slot\325s value is) 329.46 334.67 T
(allocated, and determines which instances shar) 135 320.67 T
(e the value of the slot. Ther) 363.78 320.67 T
(e) 495.32 320.67 T
(ar) 135 306.67 T
(e four kinds of allocation: instance, class, each-subclass, and virtual.) 144.65 306.67 T
2 F
(ambiguous methods) 108 280.67 T
1 F
(Methods that cannot be or) 135 262.67 T
(der) 262.41 262.67 T
(ed as mor) 278.55 262.67 T
(e speci\336c or less speci\336c than one) 326.07 262.67 T
(another) 135 248.67 T
(, in the method dispatch.) 171.7 248.67 T
2 F
(assignment) 108 222.67 T
1 F
-0.23 (The act of setting the value of an existing variable or slot, or of setting an ele-) 135 204.67 P
(ment of a collection. The assignment operator is) 135 190.67 T
4 10 Q
(:=) 369.99 190.67 T
1 11 Q
(.) 381.99 190.67 T
2 F
(binding) 108 164.67 T
1 F
(An association between a name and an object. For example, ther) 135 146.67 T
(e is a bind-) 446.05 146.67 T
(ing that associates the name of a constant and the object that is the value of) 135 132.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "391" 405
%%Page: "392" 406
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(392) 72 677.67 T
0 F
(Glossary) 95.75 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(the constant. The names of functions, module variables, and local variables) 135 640.67 T
(ar) 135 626.67 T
(e also bindings.) 144.65 626.67 T
2 F
(body) 108 600.67 T
1 F
(A r) 135 582.67 T
(egion of pr) 150.46 582.67 T
(ogram code that delimits the scope of all local variables) 203.38 582.67 T
(declar) 135 568.67 T
(ed inside it. Bodies can be nested. An body is begun implicitly with) 164.72 568.67 T
4 10 Q
(define method) 135 554.67 T
1 11 Q
(, and is ended by the corr) 213 554.67 T
(esponding) 335.96 554.67 T
4 10 Q
(end) 390.1 554.67 T
1 11 Q
(. Y) 408.1 554.67 T
(ou can de\336ne a) 419.92 554.67 T
-0.37 (body explicitly by using) 135 540.67 P
4 10 Q
-0.8 (begin) 253.62 540.67 P
1 11 Q
-0.37 ( to start it and) 283.61 540.67 P
4 10 Q
-0.8 (end) 352.21 540.67 P
1 11 Q
-0.37 ( to \336nish it. A local variable) 370.21 540.67 P
-0.26 (has scope extending fr) 135 526.67 P
-0.26 (om its declaration to the end of the smallest body that) 242.91 526.67 P
(surr) 135 512.67 T
(ounds it.) 154.79 512.67 T
2 F
(built-in class) 108 486.67 T
1 F
(A class pr) 135 468.67 T
(ovided by Dylan, such as) 182.73 468.67 T
4 10 Q
(<object>) 308.04 468.67 T
1 11 Q
(,) 356.04 468.67 T
4 10 Q
(<integer>) 361.54 468.67 T
1 11 Q
(, or) 415.54 468.67 T
4 10 Q
(<string>) 434.14 468.67 T
1 11 Q
(.) 482.14 468.67 T
2 F
(class) 108 442.67 T
1 F
-0.01 (A de\336nition of a type of other objects, which ar) 135 424.67 P
-0.01 (e called its instances. A class) 363.25 424.67 P
(de\336nes the slots of its instances. Dylan pr) 135 410.67 T
(ovides built-in classes, and users) 335.54 410.67 T
(can de\336ne new classes. When you de\336ne a class, you specify its name, its) 135 396.67 T
(dir) 135 382.67 T
(ect super) 149.07 382.67 T
(classes, and its slots.) 192.88 382.67 T
2 F
(class precedence list) 108 356.67 T
1 F
-0.16 (For a particular class, a list of the class and all its super) 135 338.67 P
-0.16 (classes, or) 398.82 338.67 P
-0.16 (der) 447.16 338.67 P
-0.16 (ed fr) 463.3 338.67 P
-0.16 (om) 485.69 338.67 P
(most speci\336c \050the class itself\051 to least speci\336c \050the) 135 324.67 T
4 10 Q
(<object>) 375.87 324.67 T
1 11 Q
( class\051.) 423.87 324.67 T
2 F
(closure) 108 298.67 T
1 F
(A method that closes over some local variables. The closur) 135 280.67 T
(e can access the) 418.72 280.67 T
(local variables which existed when the closur) 135 266.67 T
(e was cr) 354.76 266.67 T
(eated. The ability to) 393.9 266.67 T
(dynamically cr) 135 252.67 T
(eate and r) 207.34 252.67 T
(eturn closur) 255.23 252.67 T
(es that can access lexical state is one of) 313.75 252.67 T
(the important dynamic aspects of Dylan.) 135 238.67 T
2 F
(collection) 108 212.67 T
1 F
(A kind of container that can hold zer) 135 194.67 T
(o or mor) 313.62 194.67 T
(e objects. Dylan pr) 355.34 194.67 T
(ovides the) 445.17 194.67 T
(usual kinds of collections, including arrays, vectors, strings, singly linked) 135 180.67 T
-0.16 (lists, queues, hash tables, and so on. In Dylan, a collection is an instance of a) 135 166.67 P
(class. For example, the) 135 152.67 T
4 10 Q
(<array>) 247.38 152.67 T
1 11 Q
( class r) 289.38 152.67 T
(epr) 321.94 152.67 T
(esents arrays, and the) 337.96 152.67 T
4 10 Q
(<vector>) 445.92 152.67 T
1 11 Q
(class r) 135 138.67 T
(epr) 164.81 138.67 T
(esents vectors.) 180.84 138.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "392" 406
%%Page: "393" 407
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Glossary) 482.48 677.67 T
2 F
(393) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
2 11 Q
0 X
(concrete class) 108 640.67 T
1 F
(A class that can have dir) 135 622.67 T
(ect instances. By default, a class is concr) 253.54 622.67 T
(ete.) 446.61 622.67 T
2 F
(condition) 108 596.67 T
1 F
(An instance \050dir) 135 578.67 T
(ect or indir) 213.1 578.67 T
(ect\051 of the) 266.36 578.67 T
4 10 Q
(<condition>) 316.94 578.67 T
1 11 Q
( class, that r) 382.94 578.67 T
(epr) 440.07 578.67 T
(esents a) 456.1 578.67 T
(pr) 135 564.67 T
(oblem or unusual situation encounter) 145.76 564.67 T
(ed during pr) 328.42 564.67 T
(ogram execution.) 390.09 564.67 T
2 F
(constant) 108 538.67 T
1 F
( \050also called) 150.15 538.67 T
2 F
(module constant) 210.21 538.67 T
1 F
(\051) 293.61 538.67 T
(An unchanging binding whose scope is its module. Y) 135 520.67 T
(ou de\336ne a constant) 393.03 520.67 T
(explicitly with) 135 506.67 T
4 10 Q
(define constant) 207.81 506.67 T
1 11 Q
(, and implicitly with) 297.81 506.67 T
4 10 Q
(define class) 399.46 506.67 T
1 11 Q
(,) 471.46 506.67 T
4 10 Q
-0.55 (define generic) 135 492.67 P
1 11 Q
-0.25 (,) 218.45 492.67 P
4 10 Q
-0.55 (define macro) 223.7 492.67 P
1 11 Q
-0.25 (, or possibly) 295.14 492.67 P
4 10 Q
-0.55 (define method) 356.28 492.67 P
1 11 Q
-0.25 (. Y) 433.73 492.67 P
-0.25 (ou must ini-) 445.3 492.67 P
-0.08 (tialize the value of a constant, and you cannot assign another value to a con-) 135 478.67 P
(stant during the execution of a Dylan pr) 135 464.67 T
(ogram.) 329.25 464.67 T
2 F
(constituent) 108 438.67 T
1 F
(A de\336nition, a local declaration, or an expr) 135 420.67 T
(ession.) 342.61 420.67 T
2 F
(constructor) 108 394.67 T
1 F
(A function that cr) 135 376.67 T
(eates an instance. A constr) 220.69 376.67 T
(uctor pr) 348.89 376.67 T
(ovides a shorthand) 387.86 376.67 T
(means for calling) 135 362.67 T
4 10 Q
(make) 221.32 362.67 T
1 11 Q
(. For example, you can call the constr) 245.32 362.67 T
(uctor function) 425.16 362.67 T
4 10 Q
(vector) 135 348.67 T
1 11 Q
( to cr) 171 348.67 T
(eate a vector) 195.12 348.67 T
(, and to initialize that vector with data.) 255.24 348.67 T
2 F
(contract) 108 322.67 T
1 F
(An agr) 135 304.67 T
(eement between a generic function and its methods. The generic) 168.47 304.67 T
(function de\336nes the terms of the contract, and the methods must obey the) 135 290.67 T
-0.13 (contract; particularly) 135 276.67 P
-0.13 (, the methods\325 parameters and value declarations must) 235.47 276.67 P
-0.06 (be congr) 135 262.67 P
-0.06 (uent with the generic function\325s parameters and value declarations.) 176.71 262.67 P
2 F
(de\336nition) 108 236.67 T
1 F
(A declaration of a piece of pr) 135 218.67 T
(ogram str) 275.5 218.67 T
(uctur) 322.44 218.67 T
(e, such as a library) 348.32 218.67 T
(, module,) 437.16 218.67 T
-0.38 (class, generic function, or method. A de\336nition usually establishes a module) 135 204.67 P
-0.12 (variable or constant. De\336nitions include) 135 190.67 P
4 10 Q
-0.27 (define variable) 331.79 190.67 P
1 11 Q
-0.12 (,) 421.52 190.67 P
4 10 Q
-0.27 (define class) 426.89 190.67 P
1 11 Q
-0.12 (,) 498.62 190.67 P
(and) 135 176.67 T
4 10 Q
(define method) 156.37 176.67 T
1 11 Q
(.) 234.37 176.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "393" 407
%%Page: "394" 408
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(394) 72 677.67 T
0 F
(Glossary) 95.75 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
2 11 Q
0 X
(development environment) 108 640.67 T
1 F
(A collection of tools for Dylan pr) 135 622.67 T
(ogrammers that can include an editor cus-) 294.33 622.67 T
(tom-tailor) 135 608.67 T
(ed for Dylan code, a br) 183.61 608.67 T
(owser) 294.46 608.67 T
(, a compiler) 323.1 608.67 T
(, a debugger) 379.27 608.67 T
(, and a lis-) 438.75 608.67 T
(tener that enables you to enter expr) 135 594.67 T
(essions and to see their values. The) 306.75 594.67 T
(featur) 135 580.67 T
(es of any development envir) 163.8 580.67 T
(onment ar) 301.91 580.67 T
(e de\336ned by the implementa-) 351.69 580.67 T
(tion, rather than by Dylan itself.) 135 566.67 T
2 F
(direct instance) 108 540.67 T
1 F
-0.28 (An object is a dir) 135 522.67 P
-0.28 (ect instance of class A if the object\325s class is class A. Y) 215.67 522.67 P
-0.28 (ou can) 469.64 522.67 P
(use) 135 508.67 T
4 10 Q
(object-class) 154.32 508.67 T
1 11 Q
( to \336nd out the class of which an object is a dir) 226.32 508.67 T
(ect) 450.55 508.67 T
(instance.) 135 494.67 T
2 F
(direct subclass) 108 468.67 T
1 F
(A class is the dir) 135 450.67 T
(ect subclass of all its dir) 214.66 450.67 T
(ect super) 329.54 450.67 T
(classes. \322Dir) 373.35 450.67 T
(ect\323 means) 433.06 450.67 T
-0.12 (ther) 135 436.67 P
-0.12 (e is no class intervening between the class and its subclass in the inherit-) 154.4 436.67 P
(ance graph.) 135 422.67 T
2 F
(direct superclass) 108 396.67 T
1 F
(The dir) 135 378.67 T
(ect super) 170.23 378.67 T
(classes of a class appear in the) 214.05 378.67 T
4 10 Q
(define class) 362.92 378.67 T
1 11 Q
( form for that) 434.92 378.67 T
(class. Dir) 135 364.67 T
(ect means that ther) 179.27 364.67 T
(e is no class intervening between the class and) 271.29 364.67 T
(its super) 135 350.67 T
(class in the inheritance graph.) 176.52 350.67 T
4 10 Q
(dylan) 108 324.67 T
2 11 Q
( library) 138 324.67 T
1 F
(A library that contains modules that contain the elements of the cor) 135 306.67 T
(e Dylan) 462.17 306.67 T
(language.) 135 292.67 T
4 10 Q
(dylan) 108 266.67 T
2 11 Q
( module) 138 266.67 T
1 F
(A module that contains the elements of the cor) 135 248.67 T
(e Dylan language.) 361.41 248.67 T
4 10 Q
(dylan-user) 108 222.67 T
2 11 Q
( module) 168 222.67 T
1 F
(The special bootstrapping module in which you de\336ne the modules and) 135 204.67 T
(libraries that make up your pr) 135 190.67 T
(ogram.) 281.33 190.67 T
2 F
(exception) 108 164.67 T
1 F
(An unexpected event that occurs during pr) 135 146.67 T
(ogram execution.) 344.19 146.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "394" 408
%%Page: "395" 409
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Glossary) 482.48 677.67 T
2 F
(395) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
2 11 Q
0 X
(expression) 108 640.67 T
1 F
(A piece of code that, when executed, can r) 135 622.67 T
(eturn \050zer) 339.4 622.67 T
(o or mor) 386.97 622.67 T
(e\051 values and) 428.69 622.67 T
-0.25 (can have side ef) 135 608.67 P
-0.25 (fects. Expr) 211.28 608.67 P
-0.25 (essions include \050among others\051 literals, r) 261.75 608.67 P
-0.25 (efer) 456.66 608.67 P
-0.25 (ences) 475.01 608.67 P
(to variables or constants, function calls, and statements \050such as) 135 594.67 T
4 10 Q
(if) 447.11 594.67 T
1 11 Q
(,) 459.11 594.67 T
4 10 Q
(while) 464.61 594.67 T
1 11 Q
(,) 494.61 594.67 T
(and) 135 580.67 T
4 10 Q
(case) 156.37 580.67 T
1 11 Q
(\051.) 180.37 580.67 T
4 10 Q
(#f) 108 556.33 T
1 11 Q
(The canonical false value. This object is the only object that r) 135 538.67 T
(epr) 427.39 538.67 T
(esents false) 443.42 538.67 T
(in Dylan.) 135 524.67 T
2 F
(general instance) 108 498.67 T
1 F
(A member of a class. An object is a general instance of a class if it is either a) 135 480.67 T
(dir) 135 466.67 T
(ect or an indir) 149.07 466.67 T
(ect instance of that class. The term) 216.98 466.67 T
0 F
(instance) 385.61 466.67 T
1 F
( is equivalent to) 422.48 466.67 T
(the term) 135 452.67 T
0 F
(general instance) 178.67 452.67 T
1 F
(.) 250.69 452.67 T
2 F
(generic function) 108 426.67 T
1 F
(A kind of function. A generic function de\336nes an interface, and contains) 135 408.67 T
(methods that implement that generic function. When a generic function is) 135 394.67 T
(called, it chooses the method to call based on the types of its r) 135 380.67 T
(equir) 433.7 380.67 T
(ed) 459.11 380.67 T
(ar) 135 366.67 T
(guments.) 144.65 366.67 T
2 F
(getter) 108 340.67 T
1 F
-0.22 (A method that r) 135 322.67 P
-0.22 (etrieves the curr) 212.07 322.67 P
-0.22 (ent value of a slot in an object. Each slot in a) 290.21 322.67 P
-0.01 (class automatically has a getter de\336ned for it. The getter) 135 308.67 P
-0.01 (\325s name is the same) 407.42 308.67 P
(as the name of the slot.) 135 294.67 T
2 F
(handler) 108 268.67 T
1 F
(A function that can potentially r) 135 250.67 T
(esolve an exceptional situation.) 290.77 250.67 T
2 F
(implicit generic function) 108 224.67 T
1 F
(A generic function cr) 135 206.67 T
(eated by Dylan if a method is de\336ned by) 237.1 206.67 T
4 10 Q
(define) 437.29 206.67 T
(method) 135 192.67 T
1 11 Q
( or \050for a slot getter or setter\051 by) 171 192.67 T
4 10 Q
(define class) 327.84 192.67 T
1 11 Q
( and if no generic) 399.84 192.67 T
(function of the same name exists. An implicit generic function has the most) 135 178.67 T
(general parameter and r) 135 164.67 T
(esult types that ar) 252.26 164.67 T
(e compatible with the method.) 338.83 164.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "395" 409
%%Page: "396" 410
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(396) 72 677.67 T
0 F
(Glossary) 95.75 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
2 11 Q
0 X
(indirect instance) 108 640.67 T
1 F
(An object is an indir) 135 622.67 T
(ect instance of class A if the object\325s class has class A as) 232.8 622.67 T
(a super) 135 608.67 T
(class.) 170.57 608.67 T
2 F
(in\336x function) 108 582.67 T
1 F
(A function whose calling syntax has the function appearing between the) 135 564.67 T
(ar) 135 550.67 T
(guments. The arithmetic functions) 144.65 550.67 T
4 10 Q
(+) 314.32 550.67 T
1 11 Q
(,) 320.32 550.67 T
4 10 Q
(-) 325.82 550.67 T
1 11 Q
(,) 331.82 550.67 T
4 10 Q
(*) 337.32 550.67 T
1 11 Q
(,) 343.32 550.67 T
4 10 Q
(/) 348.82 550.67 T
1 11 Q
(,) 354.82 550.67 T
4 10 Q
(<) 360.32 550.67 T
1 11 Q
(,) 366.32 550.67 T
4 10 Q
(>) 371.82 550.67 T
1 11 Q
(, and so on ar) 377.82 550.67 T
(e in\336x func-) 442.92 550.67 T
(tions, as is the assignment operator) 135 536.67 T
(,) 305.02 536.67 T
4 10 Q
(:=) 310.52 536.67 T
1 11 Q
(. An example of the calling syntax is:) 322.52 536.67 T
4 10 Q
(3 + 2) 135 522.67 T
1 11 Q
(.) 165 522.67 T
2 F
(information hiding) 108 496.67 T
1 F
(A principle of minimizing the information that is passed among compo-) 135 478.67 T
(nents in a system; it r) 135 464.67 T
(educes the inter) 237.87 464.67 T
(dependencies of components.) 314.67 464.67 T
2 F
(inheritance) 108 438.67 T
1 F
(The ability to arrange for classes that ar) 135 420.67 T
(e logically r) 326.2 420.67 T
(elated to one another to) 382.54 420.67 T
(shar) 135 406.67 T
(e the behaviors and data attributes that they have in common. Each) 155.71 406.67 T
(class inherits fr) 135 392.67 T
(om one or mor) 208.29 392.67 T
(e other classes, called its super) 280.16 392.67 T
(classes. If no) 427.93 392.67 T
(other class is an appr) 135 378.67 T
(opriate super) 237.16 378.67 T
(class, the class inherits fr) 301.75 378.67 T
(om the class) 421.46 378.67 T
4 10 Q
(<object>) 135 364.67 T
1 11 Q
(.) 183 364.67 T
2 F
(init expression) 108 338.67 T
1 F
(A technique for initializing slots. An init expr) 135 320.67 T
(ession pr) 355.26 320.67 T
(ovides an expr) 398.98 320.67 T
(ession) 470.16 320.67 T
(that yields a default value. Every time that an instance is made and the slot) 135 306.67 T
(needs a default value, this expr) 135 292.67 T
(ession is evaluated, and its value is used as) 286.27 292.67 T
-0.39 (the default. The slot r) 135 278.67 P
-0.39 (eceives its default initial value when no init keywor) 237.04 278.67 P
-0.39 (d is) 484.69 278.67 P
(de\336ned, or when the caller does not supply the init-keywor) 135 264.67 T
(d ar) 423.42 264.67 T
(gument to) 442.54 264.67 T
4 10 Q
(make) 135 250.67 T
1 11 Q
(.) 159 250.67 T
2 F
(init function) 108 224.67 T
1 F
(A function of zer) 135 206.67 T
(o ar) 217.17 206.67 T
(guments that is to be called to r) 235.57 206.67 T
(eturn a default initial) 387.6 206.67 T
(value for the slot. The function is called every time that an instance is cr) 135 192.67 T
(e-) 482.39 192.67 T
(ated if no init keywor) 135 178.67 T
(d is de\336ned, or if the caller does not supply the init) 239.57 178.67 T
(keywor) 135 164.67 T
(d ar) 171.83 164.67 T
(gument to) 190.95 164.67 T
4 10 Q
(make) 243.76 164.67 T
1 11 Q
(. T) 267.76 164.67 T
(o de\336ne an init function for a slot, use the) 278.99 164.67 T
4 10 Q
(init-function:) 135 150.67 T
1 11 Q
( slot option in the class de\336nition.) 219 150.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "396" 410
%%Page: "397" 411
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Glossary) 482.48 677.67 T
2 F
(397) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
2 11 Q
0 X
(init keyword) 108 640.67 T
1 F
-0.24 (A keywor) 135 622.67 P
-0.24 (d that can be given to) 182.9 622.67 P
4 10 Q
-0.53 (make) 288.68 622.67 P
1 11 Q
-0.24 ( to pr) 312.68 622.67 P
-0.24 (ovide an initial value for a slot. T) 338.05 622.67 P
-0.24 (o) 495.48 622.67 P
(de\336ne an init keywor) 135 608.67 T
(d for a slot, you use the) 238.69 608.67 T
4 10 Q
(init-keyword:) 354.96 608.67 T
1 11 Q
( or) 432.96 608.67 T
4 10 Q
(required-) 448.81 608.67 T
(init-keyword:) 135 594.67 T
1 11 Q
( slot option in the class de\336nition.) 213 594.67 T
2 F
(init value) 108 568.67 T
1 F
-0.03 (A default initial value for a slot, obtained by evaluating an expr) 135 550.67 P
-0.03 (ession once,) 443.05 550.67 P
-0.3 (befor) 135 536.67 P
-0.3 (e the \336rst instance of the class is made. T) 160.17 536.67 P
-0.3 (o de\336ne an init value for a slot,) 353.27 536.67 P
(use the) 135 522.67 T
4 10 Q
(init-value:) 172.32 522.67 T
1 11 Q
( slot option in the class de\336nition.) 238.32 522.67 T
2 F
(initialize) 108 496.67 T
1 F
-0.32 (T) 135 478.67 P
-0.32 (o pr) 140.73 478.67 P
-0.32 (ovide an initial value for something that you ar) 159.92 478.67 P
-0.32 (e cr) 386.61 478.67 P
-0.32 (eating, such as a slot) 403.34 478.67 P
(or a variable.) 135 464.67 T
2 F
(initialize method) 108 438.67 T
1 F
(A method for the) 135 420.67 T
4 10 Q
(initialize) 221.53 420.67 T
1 11 Q
( generic function. The purpose of initialize) 281.53 420.67 T
(methods is to initialize an instance befor) 135 406.67 T
(e that instance is r) 330.56 406.67 T
(eturned by) 417.82 406.67 T
4 10 Q
(make) 473.74 406.67 T
1 11 Q
(.) 497.74 406.67 T
2 F
(instance) 108 380.67 T
1 F
(A member of a class. An object is an instance of a class if it is either a dir) 135 362.67 T
(ect) 484.56 362.67 T
(or an indir) 135 348.67 T
(ect instance of that class. The term) 186.43 348.67 T
0 F
(instance) 355.05 348.67 T
1 F
( is equivalent to the) 391.93 348.67 T
(term) 135 334.67 T
0 F
(general instance) 160.66 334.67 T
1 F
(.) 232.68 334.67 T
2 F
(instantiable class) 108 308.67 T
1 F
(A class that can be used as the \336rst ar) 135 290.67 T
(gument to) 316.04 290.67 T
4 10 Q
(make) 368.85 290.67 T
1 11 Q
(. All concr) 392.85 290.67 T
(ete classes) 442.38 290.67 T
-0.21 (ar) 135 276.67 P
-0.21 (e instantiable. Y) 144.65 276.67 P
-0.21 (ou can make an abstract class be instantiable by de\336ning a) 220.66 276.67 P
4 10 Q
(make) 135 262.67 T
1 11 Q
( method for the class; the) 159 262.67 T
4 10 Q
(make) 283.39 262.67 T
1 11 Q
( method must r) 307.39 262.67 T
(eturn an instance of a) 382.08 262.67 T
(concr) 135 248.67 T
(ete subclass of the abstract class.) 161.32 248.67 T
2 F
(interchange format) 108 222.67 T
1 F
-0.27 (A format that all Dylan implementations accept for publishing and exchang-) 135 204.67 P
(ing sour) 135 190.67 T
(ce code by means of \336les. In this format, each \336le contains a single) 174.92 190.67 T
-0.13 (sour) 135 176.67 P
-0.13 (ce r) 156.45 176.67 P
-0.13 (ecor) 173.37 176.67 P
-0.13 (d. The \336le must have a header at the fr) 193.67 176.67 P
-0.13 (ont, consisting of pairs of) 379.38 176.67 P
(keywor) 135 162.67 T
(ds and values. One r) 171.83 162.67 T
(equir) 271.53 162.67 T
(ed keywor) 296.94 162.67 T
(d is) 348.51 162.67 T
4 10 Q
(module:) 368.6 162.67 T
1 11 Q
(; its value is the) 410.6 162.67 T
(name of the module in which the sour) 135 148.67 T
(ce r) 319.98 148.67 T
(ecor) 337.03 148.67 T
(d of the \336le r) 357.33 148.67 T
(esides.) 419.25 148.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "397" 411
%%Page: "398" 412
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(398) 72 677.67 T
0 F
(Glossary) 95.75 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
2 11 Q
0 X
(keyword) 108 640.67 T
1 F
(A symbol name followed by a colon, such as) 135 622.67 T
4 10 Q
(total-seconds:) 353.91 622.67 T
1 11 Q
(.) 437.91 622.67 T
2 F
(keyword argument) 108 596.67 T
1 F
(An optional ar) 135 578.67 T
(gument to a function consisting of a keywor) 205.62 578.67 T
(d followed by) 419.58 578.67 T
(that keywor) 135 564.67 T
(d\325s value. Y) 193.65 564.67 T
(ou can give keywor) 249.49 564.67 T
(d ar) 344.79 564.67 T
(guments in any or) 363.91 564.67 T
(der) 452.32 564.67 T
(.) 467.84 564.67 T
(Keywor) 135 550.67 T
(d ar) 173.7 550.67 T
(guments can be useful for functions that take many ar) 192.82 550.67 T
(guments) 454.53 550.67 T
-0.3 (\321 when you call the function, you do not need to r) 135 536.67 P
-0.3 (emember the or) 379.41 536.67 P
-0.3 (der of the) 455.39 536.67 P
(ar) 135 522.67 T
(guments. Keywor) 144.65 522.67 T
(d parameters enable a method to accept optional ar) 231.23 522.67 T
(gu-) 480.16 522.67 T
(ments that ar) 135 508.67 T
(e keyed to a name. Keywor) 198.85 508.67 T
(d parameters appear after) 330.79 508.67 T
4 10 Q
(#key) 459.51 508.67 T
1 11 Q
( in) 483.51 508.67 T
(the parameter list.) 135 494.67 T
2 F
(library) 108 468.67 T
1 F
(A Dylan library de\336nes a softwar) 135 450.67 T
(e component, which is a separately com-) 297.05 450.67 T
(pilable unit that can be either a stand-alone pr) 135 436.67 T
(ogram or a component) 358.34 436.67 T
(\050library\051 of a lar) 135 422.67 T
(ger pr) 211.38 422.67 T
(ogram. A library contains modules.) 240.62 422.67 T
2 F
(library-interchange de\336nition \050LID\051 \336le) 108 396.67 T
1 F
-0.05 (A \336le that enumerates all the \336les that make up a library) 135 378.67 P
-0.05 (. Most Dylan imple-) 407.08 378.67 P
(mentations support LID \336les, but these \336les ar) 135 364.67 T
(e not r) 359.44 364.67 T
(equir) 390.35 364.67 T
(ed to by the cor) 415.76 364.67 T
(e) 490.84 364.67 T
(language.) 135 350.67 T
2 F
(limited type) 108 324.67 T
1 F
(A type that is a mor) 135 306.67 T
(e r) 231.2 306.67 T
(estricted version of its base type. For example, a) 243.36 306.67 T
(limited-integer type is based on) 135 292.67 T
4 10 Q
(<integer>) 291.58 292.67 T
1 11 Q
(, but has a given minimum or) 345.58 292.67 T
(maximum value. Another example of a limited type is a limited-collection) 135 278.67 T
(type, which is a collection type that speci\336es the type of elements, and/or) 135 264.67 T
(the size of the collection. Limited types ar) 135 250.67 T
(e cr) 336.76 250.67 T
(eated via) 353.81 250.67 T
4 10 Q
(limited) 400.57 250.67 T
1 11 Q
(.) 442.57 250.67 T
2 F
(listener) 108 224.67 T
1 F
-0.41 (A tool that enables you to enter Dylan expr) 135 206.67 P
-0.41 (essions, executes the expr) 341.19 206.67 P
-0.41 (essions,) 464.04 206.67 P
(and displays any values and output pr) 135 192.67 T
(oduced by them.) 322.74 192.67 T
2 F
(literal constant) 108 166.67 T
1 F
(An object whose contents ar) 135 148.67 T
(e known completely at compile time.) 271.32 148.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "398" 412
%%Page: "399" 413
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Glossary) 482.48 677.67 T
2 F
(399) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
2 11 Q
0 X
(local declaration) 108 640.67 T
1 F
(A declaration that establishes a local variable, local method, or local condi-) 135 622.67 T
(tion handler) 135 608.67 T
(. Local declarations include) 193.97 608.67 T
4 10 Q
(let) 329.62 608.67 T
1 11 Q
(,) 347.62 608.67 T
4 10 Q
(local) 353.12 608.67 T
1 11 Q
(, and) 383.12 608.67 T
4 10 Q
(let handler) 410 608.67 T
1 11 Q
(.) 475.18 608.67 T
2 F
(local variable) 108 582.67 T
1 F
-0.22 (A binding whose scope extends fr) 135 564.67 P
-0.22 (om its de\336nition to the end of the smallest) 298.67 564.67 P
(body that surr) 135 550.67 T
(ounds it. Y) 204.29 550.67 T
(ou establish and use local variables within a body) 256.08 550.67 T
(.) 496.42 550.67 T
(Once the pr) 135 536.67 T
(ogram exits the body) 191.72 536.67 T
(, the local variables ar) 293 536.67 T
(e no longer de\336ned,) 398.43 536.67 T
(and an attempt to access them is an err) 135 522.67 T
(or) 323.33 522.67 T
(.) 332.87 522.67 T
2 F
(macro) 108 496.67 T
1 F
-0.27 (A wor) 135 478.67 P
-0.27 (d or phrase that stands for another phrase \050usually longer) 165.37 478.67 P
-0.27 (, but built of) 442.64 478.67 P
-0.16 (simpler components\051. Macr) 135 464.67 P
-0.16 (os can be used for abbr) 268.08 464.67 P
-0.16 (eviation, abstraction, sim-) 378.94 464.67 P
(pli\336cation, or str) 135 450.67 T
(ucturing. The primary use of macr) 215.35 450.67 T
(os in pr) 382.38 450.67 T
(ogramming is to) 418.91 450.67 T
(extend or adapt the language to allow a mor) 135 436.67 T
(e concise or r) 350.23 436.67 T
(eadable solution) 413.55 436.67 T
(for a particular pr) 135 422.67 T
(oblem domain.) 221.33 422.67 T
2 F
(method) 108 396.67 T
1 F
-0.04 (A kind of function that can belong to a generic function. Although methods) 135 378.67 P
(ar) 135 364.67 T
(e independent of classes, they operate on instances of classes. A method) 144.65 364.67 T
(states the kinds of objects that it handles by the types of its r) 135 350.67 T
(equir) 426.1 350.67 T
(ed) 451.51 350.67 T
(ar) 135 336.67 T
(guments.) 144.65 336.67 T
2 F
(module) 108 310.67 T
1 F
(A unit that contains a portion of the de\336nitions of a library) 135 292.67 T
(. Each module) 418.78 292.67 T
-0.07 (speci\336es an independent namespace for Dylan constants and variables, and) 135 278.67 P
(contr) 135 264.67 T
(ols the visibility of the names within a module fr) 160.02 264.67 T
(om outside the mod-) 395.86 264.67 T
(ule. Y) 135 250.67 T
(ou can use modules both to do information hiding and to pr) 161.93 250.67 T
(event) 453.81 250.67 T
(name clashes between constants and variables.) 135 236.67 T
2 F
(module constant) 108 210.67 T
1 F
( \050see) 191.4 210.67 T
2 F
(constant) 215.77 210.67 T
1 F
(\051) 257.92 210.67 T
2 F
(module variable) 108 184.67 T
1 F
(A binding whose scope is its module. A module variable is much like a glo-) 135 166.67 T
(bal variable in other languages. Y) 135 152.67 T
(ou de\336ne a module variable with) 296.54 152.67 T
4 10 Q
(define) 460.71 152.67 T
(variable) 135 138.67 T
1 11 Q
(. When you de\336ne a module variable, you must initialize it \050that) 183 138.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "399" 413
%%Page: "400" 414
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(400) 72 677.67 T
0 F
(Glossary) 95.75 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
1 11 Q
0 X
(is, pr) 135 640.67 T
(ovide an initial value for it\051. If a module variable is not exported fr) 159.12 640.67 T
(om) 481.39 640.67 T
-0.3 (the module that de\336nes it, then it is accessible only within the module. If the) 135 626.67 P
(module variable is exported by the module that de\336nes it, and is imported) 135 612.67 T
-0.1 (or used by another module, then it is accessible within that other module as) 135 598.67 P
(well.) 135 584.67 T
2 F
(multiple inheritance) 108 558.67 T
1 F
(Inheritance of a class fr) 135 540.67 T
(om mor) 246.86 540.67 T
(e than one dir) 285.19 540.67 T
(ect super) 352.35 540.67 T
(class.) 396.16 540.67 T
4 10 Q
(<object>) 108 514.67 T
2 11 Q
( class) 156 514.67 T
1 F
(The class fr) 135 496.67 T
(om which all classes inherit, either dir) 189.64 496.67 T
(ectly or indir) 373.96 496.67 T
(ectly) 436.54 496.67 T
(.) 458.38 496.67 T
2 F
(object) 108 470.67 T
1 F
(An individual datum. Also called an) 135 452.67 T
0 F
(instance) 315.47 452.67 T
1 F
(.) 352.34 452.67 T
2 F
(parameter list) 108 426.67 T
1 F
(A list of speci\336cations for the ar) 135 408.67 T
(guments to a function. A parameter list can) 288.82 408.67 T
(specify r) 135 394.67 T
(equir) 176.3 394.67 T
(ed and optional ar) 201.71 394.67 T
(guments. The optional ar) 290.74 394.67 T
(guments can be) 412.7 394.67 T
(keywor) 135 380.67 T
(d ar) 171.83 380.67 T
(guments, each of which is passed to the function as a keywor) 190.95 380.67 T
(d) 487.53 380.67 T
(followed by a value. Each parameter has a name, which is bound to the cor-) 135 366.67 T
(r) 135 352.67 T
(esponding ar) 139.15 352.67 T
(gument within the function\325s body when the function is) 202.94 352.67 T
(called. Requir) 135 338.67 T
(ed parameters and a method\325s keywor) 202.03 338.67 T
(d parameters can) 388.95 338.67 T
-0.15 (include type constraints. The parameter lists of a generic function and all its) 135 324.67 P
(methods must be congr) 135 310.67 T
(uent.) 249.22 310.67 T
2 F
(parameter specializer) 108 284.67 T
1 F
(The type of a r) 135 266.67 T
(equir) 205.31 266.67 T
(ed parameter of a method.) 230.72 266.67 T
2 F
(predicate) 108 240.67 T
1 F
(A function that r) 135 222.67 T
(eturns tr) 215.81 222.67 T
(ue or false. False is always r) 257.3 222.67 T
(epr) 392.02 222.67 T
(esented as) 408.04 222.67 T
4 10 Q
(#f) 460.89 222.67 T
1 11 Q
(. T) 472.89 222.67 T
(r) 484.14 222.67 T
(ue) 488.4 222.67 T
(is r) 135 208.67 T
(epr) 149.76 208.67 T
(esented by the canonical tr) 165.79 208.67 T
(ue value,) 295.25 208.67 T
4 10 Q
(#t) 342.22 208.67 T
1 11 Q
(, and by any value other than) 354.22 208.67 T
4 10 Q
(#f) 135 194.67 T
1 11 Q
(.) 147 194.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "400" 414
%%Page: "401" 415
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Glossary) 482.48 677.67 T
2 F
(401) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
2 11 Q
0 X
(protocol) 108 640.67 T
1 F
(The interface de\336nition of a softwar) 135 622.67 T
(e component. The purpose of establish-) 308.64 622.67 T
-0.01 (ing pr) 135 608.67 P
-0.01 (otocols is to de\336ne a uniform interface that clients can use, even if the) 164.22 608.67 P
(implementation of a component is enhanced or modi\336ed.) 135 594.67 T
2 F
(recursion) 108 568.67 T
1 F
(A technique in which a function calls itself.) 135 550.67 T
2 F
(required parameter) 108 524.67 T
1 F
(A parameter corr) 135 506.67 T
(esponding to an ar) 218.58 506.67 T
(gument that must be pr) 309.36 506.67 T
(ovided in the) 423.86 506.67 T
-0.21 (call to the function. Requir) 135 492.67 P
-0.21 (ed parameters appear befor) 263.06 492.67 P
-0.21 (e any r) 396.47 492.67 P
-0.21 (est or keywor) 428.97 492.67 P
-0.21 (d) 494.74 492.67 P
(parameters in a parameter list. Requir) 135 478.67 T
(ed parameters ar) 318.95 478.67 T
(e or) 400.89 478.67 T
(der) 419.06 478.67 T
(ed, and the) 435.2 478.67 T
(r) 135 464.67 T
(equir) 139.15 464.67 T
(ed ar) 164.56 464.67 T
(guments must be given in the same or) 188.94 464.67 T
(der) 373.89 464.67 T
(.) 389.41 464.67 T
2 F
(rest parameter) 108 438.67 T
1 F
(Parameters that enable a method to accept any number of optional ar) 135 420.67 T
(gu-) 470.7 420.67 T
-0.18 (ments. Any ar) 135 406.67 P
-0.18 (guments pr) 203.25 406.67 P
-0.18 (ovided in the call after the r) 258.96 406.67 P
-0.18 (equir) 391.94 406.67 P
-0.18 (ed ar) 417.35 406.67 P
-0.18 (guments ar) 441.56 406.67 P
-0.18 (e) 496.16 406.67 P
(collected in a sequence, which is the value of the r) 135 392.67 T
(est parameter) 377 392.67 T
(. A r) 442.59 392.67 T
(est) 463.55 392.67 T
(parameter) 135 378.67 T
(, if one exists, appears after) 184.32 378.67 T
4 10 Q
(#rest) 318.79 378.67 T
1 11 Q
( in the parameter list.) 348.79 378.67 T
2 F
(restart) 108 352.67 T
1 F
(A special condition that r) 135 334.67 T
(epr) 257.52 334.67 T
(esents an opportunity to r) 273.55 334.67 T
(ecover fr) 399.14 334.67 T
(om an) 441.69 334.67 T
(exception.) 135 320.67 T
2 F
(restart handler) 108 294.67 T
1 F
(A function used to implement the particular r) 135 276.67 T
(ecovery action for a r) 356.64 276.67 T
(estart) 458.98 276.67 T
(condition.) 135 262.67 T
2 F
(value declaration) 108 236.67 T
1 F
(A list of the values r) 135 218.67 T
(eturned by a function, and of the types of the values.) 232.51 218.67 T
(The name of a r) 135 204.67 T
(eturn value is used pur) 210.61 204.67 T
(ely for documentation purposes.) 323.21 204.67 T
-0.17 (When you pr) 135 190.67 P
-0.17 (ovide a value declaration for a function, Dylan signals an err) 198.74 190.67 P
-0.17 (or) 491.07 190.67 P
(if the function tries to r) 135 176.67 T
(eturn a value of the wr) 246.45 176.67 T
(ong type. The compiler can) 357 176.67 T
-0.2 (check r) 135 162.67 P
-0.2 (eceivers of the r) 169.25 162.67 P
-0.2 (esults of the method for corr) 245.07 162.67 P
-0.2 (ect type, and can usually) 381.84 162.67 P
(pr) 135 148.67 T
(oduce mor) 145.76 148.67 T
(e ef) 197.89 148.67 T
(\336cient code. The value declarations of a generic function) 214.64 148.67 T
(and all that function\325s methods must be congr) 135 134.67 T
(uent.) 358.32 134.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "401" 415
%%Page: "402" 416
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(402) 72 677.67 T
0 F
(Glossary) 95.75 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
2 11 Q
0 X
(root) 108 640.67 T
1 F
(The starting point of Dylan class inheritance \321 the class) 135 622.67 T
4 10 Q
(<object>) 410.07 622.67 T
1 11 Q
(, fr) 458.07 622.67 T
(om) 471.38 622.67 T
(which all Dylan classes inherit, either dir) 135 608.67 T
(ectly or indir) 333.34 608.67 T
(ectly) 395.92 608.67 T
(.) 417.76 608.67 T
2 F
(setter) 108 582.67 T
1 F
(A method that stor) 135 564.67 T
(es a value in a slot. By default, each slot in a class has a) 226.98 564.67 T
(setter de\336ned for it automatically) 135 550.67 T
(.) 295.96 550.67 T
2 F
(signature) 108 524.67 T
1 F
(The parameter list and the values declaration of a function.) 135 506.67 T
2 F
(singleton type) 108 480.67 T
1 F
(A type whose only member is one particular instance. Singleton types ar) 135 462.67 T
(e) 486.88 462.67 T
(cr) 135 448.67 T
(eated via) 144.03 448.67 T
4 10 Q
(singleton) 190.79 448.67 T
1 11 Q
(.) 244.79 448.67 T
2 F
(single inheritance) 108 422.67 T
1 F
(Inheritance in a class that has only one dir) 135 404.67 T
(ect super) 339.09 404.67 T
(class.) 382.91 404.67 T
2 F
(slot) 108 378.67 T
1 F
(A unit of data associated with an instance. A slot is like a str) 135 360.67 T
(uctur) 426.7 360.67 T
(e member) 452.58 360.67 T
(or a \336eld in other languages. Information about a slot is speci\336ed in the def-) 135 346.67 T
(inition of the instance\325s class. The location of storage for the slot is deter-) 135 332.67 T
(mined by the slot\325s allocation. A pr) 135 318.67 T
(ogram r) 304.99 318.67 T
(etrieves the value of a slot by) 343.57 318.67 T
(calling that slot\325s getter generic function, and, unless the slot is constant, it) 135 304.67 T
(sets the value by calling the slot\325s setter generic function.) 135 290.67 T
2 F
(slot option) 108 264.67 T
1 F
(An option that speci\336es a characteristic of a slot, such as the default initial) 135 246.67 T
(value or the init keywor) 135 232.67 T
(d. Slot options appear in the) 251.64 232.67 T
4 10 Q
(define class) 391.36 232.67 T
1 11 Q
( form.) 463.36 232.67 T
2 F
(source record) 108 206.67 T
1 F
(A unit that or) 135 188.67 T
(ganizes a portion of the Dylan sour) 200.86 188.67 T
(ce code for a pr) 371.77 188.67 T
(ogram. Dif-) 446.08 188.67 T
(fer) 135 174.67 T
(ent Dylan implementations divide code into sour) 148.08 174.67 T
(ce r) 386.75 174.67 T
(ecor) 403.8 174.67 T
(ds dif) 424.1 174.67 T
(fer) 451.62 174.67 T
(ently) 464.7 174.67 T
(,) 488.06 174.67 T
(and stor) 135 160.67 T
(e the sour) 174.78 160.67 T
(ce r) 222.25 160.67 T
(ecor) 239.3 160.67 T
(ds dif) 259.61 160.67 T
(fer) 287.13 160.67 T
(ently) 300.21 160.67 T
(. For example, an implementation) 323.56 160.67 T
(might stor) 135 146.67 T
(e sour) 185.17 146.67 T
(ce r) 214.64 146.67 T
(ecor) 231.69 146.67 T
(ds in a database. Many implementations stor) 252 146.67 T
(e) 469.71 146.67 T
(sour) 135 132.67 T
(ce r) 156.45 132.67 T
(ecor) 173.5 132.67 T
(ds in \336les, and typically each \336le contains one sour) 193.81 132.67 T
(ce r) 440.07 132.67 T
(ecor) 457.12 132.67 T
(d.) 477.43 132.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "402" 416
%%Page: "403" 417
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Glossary) 482.48 677.67 T
2 F
(403) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
2 11 Q
0 X
(subclass) 108 640.67 T
1 F
(The subclasses of a class include the class itself, and all classes that inherit) 135 622.67 T
-0.37 (fr) 135 608.67 P
-0.37 (om the class \050all the class\325s dir) 142.81 608.67 P
-0.37 (ect subclasses, and all their dir) 286.51 608.67 P
-0.37 (ect subclasses,) 432.52 608.67 P
(and so on\051.) 135 594.67 T
2 F
(subtype) 108 568.67 T
1 F
-0.15 (The subtypes of a type include the type itself, and all types that inherit fr) 135 550.67 P
-0.15 (om) 485.68 550.67 P
(the type, dir) 135 536.67 T
(ectly or indir) 194.16 536.67 T
(ectly) 256.74 536.67 T
(.) 278.57 536.67 T
2 F
(superclass) 108 510.67 T
1 F
-0.2 (The super) 135 492.67 P
-0.2 (classes of a class include all that class\325s dir) 183.29 492.67 P
-0.2 (ect super) 386.61 492.67 P
-0.2 (classes, and all) 430.23 492.67 P
(their dir) 135 478.67 T
(ect super) 174.62 478.67 T
(classes, and so on, all the way to the r) 218.43 478.67 T
(oot of class inherit-) 400.18 478.67 T
(ance, which is the) 135 464.67 T
4 10 Q
(<object>) 223.99 464.67 T
1 11 Q
( class. Y) 271.99 464.67 T
(ou can use) 309.48 464.67 T
4 10 Q
(all-superclasses) 363.72 464.67 T
1 11 Q
( to \336nd) 459.72 464.67 T
(all the super) 135 450.67 T
(classes of a class.) 194.98 450.67 T
2 F
(supertype) 108 424.67 T
1 F
(The supertypes of a type include all the types fr) 135 406.67 T
(om which the type inherits,) 366.21 406.67 T
(dir) 135 392.67 T
(ectly or indir) 149.07 392.67 T
(ectly) 211.65 392.67 T
(.) 233.48 392.67 T
2 F
(symbol) 108 366.67 T
1 F
(An instance of the) 135 348.67 T
4 10 Q
(<symbol>) 225.79 348.67 T
1 11 Q
( type. Symbols ar) 273.79 348.67 T
(e much like strings. Ther) 357.58 348.67 T
(e ar) 477.56 348.67 T
(e) 495.22 348.67 T
(two r) 135 334.67 T
(easons to use symbols in certain cases wher) 160.66 334.67 T
(e you might consider) 371.79 334.67 T
(strings. First, symbol comparison is not case sensitive. Second, comparison) 135 320.67 T
(of two symbols is much faster than is comparison of two strings, because) 135 306.67 T
(symbols ar) 135 292.67 T
(e compar) 187.84 292.67 T
(ed by identity) 232.72 292.67 T
(, and strings ar) 299.27 292.67 T
(e usually compar) 371.52 292.67 T
(ed ele-) 455.1 292.67 T
(ment by element., Ther) 135 278.67 T
(e ar) 247.19 278.67 T
(e two equivalent syntaxes for r) 264.86 278.67 T
(eferring to sym-) 414.11 278.67 T
(bols:) 135 264.67 T
4 10 Q
(north:) 160.45 264.67 T
1 11 Q
( is an example of the keywor) 196.45 264.67 T
(d syntax, wher) 335.71 264.67 T
(eas) 407.62 264.67 T
4 10 Q
(#"north") 425.8 264.67 T
1 11 Q
( is an) 473.8 264.67 T
(example of the hash syntax.) 135 250.67 T
4 10 Q
(#t) 108 224.67 T
1 11 Q
-0.1 (The canonical value of tr) 135 206.67 P
-0.1 (ue. Note that any value other than) 254.31 206.67 P
4 10 Q
-0.22 (#f) 422.91 206.67 P
1 11 Q
-0.1 ( is consider) 434.91 206.67 P
-0.1 (ed) 489.36 206.67 P
(a value of tr) 135 192.67 T
(ue.) 193.08 192.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "403" 417
%%Page: "404" 418
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(404) 72 677.67 T
0 F
(Glossary) 95.75 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 522 648 R
V
2 11 Q
0 X
(type) 108 640.67 T
1 F
(An object that describes the str) 135 622.67 T
(uctur) 284.05 622.67 T
(e and behavior of its members. All) 309.93 622.67 T
(classes ar) 135 608.67 T
(e types, but not all types ar) 180.24 608.67 T
(e classes. Y) 311.1 608.67 T
(ou can de\336ne new nonclass) 363.79 608.67 T
(types with) 135 594.67 T
4 10 Q
(limited) 189.11 594.67 T
1 11 Q
(,) 231.11 594.67 T
4 10 Q
(singleton) 236.61 594.67 T
1 11 Q
(, and) 290.61 594.67 T
4 10 Q
(type-union) 317.48 594.67 T
1 11 Q
(.) 377.48 594.67 T
2 F
(type constraint) 108 568.67 T
1 F
(A type associated with a binding or slot that ensur) 135 550.67 T
(es that the value of that) 379.87 550.67 T
(binding or slot can hold only objects of that type.) 135 536.67 T
2 F
(union type) 108 510.67 T
1 F
(A type whose members include all the members of one or mor) 135 492.67 T
(e base types.) 438.05 492.67 T
(Union types ar) 135 478.67 T
(e cr) 206.96 478.67 T
(eated via) 224.01 478.67 T
4 10 Q
(type-union) 270.77 478.67 T
1 11 Q
(.) 330.77 478.67 T
2 F
(user) 108 452.67 T
(-de\336ned class) 129.19 452.67 T
1 F
(A class de\336ned by a Dylan user) 135 434.67 T
(, and not pr) 287.54 434.67 T
(ovided by Dylan itself.) 343.91 434.67 T
2 F
(virtual slot) 108 408.67 T
1 F
(A slot that does not occupy storage; instead, its value is computed. When) 135 390.67 T
(you de\336ne a virtual slot, you need to de\336ne a getter method to r) 135 376.67 T
(eturn the) 445.64 376.67 T
-0.28 (value of the virtual slot, and you can optionally de\336ne a setter method to set) 135 362.67 P
(the value of the virtual slot.) 135 348.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "404" 418
%%Page: "405" 419
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 126 279 486 R
7 X
0 0 0 1 0 0 0 K
V
108 81 540 117 R
V
2 9.5 Q
0 X
(405) 288.88 99.67 T
315 126 486 486 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 486 R
V
2 11 Q
0 X
(Symbols) 108 478.67 T
10 8.5 Q
(!) 108 467 T
1 9 Q
(155) 117.6 467 T
10 8.5 Q
(-) 108 457 T
1 9 Q
(12, 54, 165) 117.6 457 T
10 8.5 Q
(#all-keys) 108 447 T
1 9 Q
(175, 176, 178, 179) 158.4 447 T
10 8.5 Q
(#f) 108 437 T
1 9 Q
(13) 122.7 437 T
10 8.5 Q
(#key) 108 427 T
1 9 Q
(173, 175, 176, 179) 132.9 427 T
10 8.5 Q
(#rest) 108 417 T
1 9 Q
(173, 175, 176, 177) 138 417 T
10 8.5 Q
(#t) 108 407 T
1 9 Q
(13) 122.7 407 T
10 8.5 Q
(&) 108 397 T
1 9 Q
(155, 165, 166) 117.6 397 T
10 8.5 Q
(*) 108 387 T
1 9 Q
(12, 165) 117.6 387 T
10 8.5 Q
(+) 108 377 T
1 9 Q
(11, 165) 117.6 377 T
(methods for) 117 367 T
10 8.5 Q
(+) 167.62 367 T
1 9 Q
(75\32079) 177.23 367 T
10 8.5 Q
(/) 108 357 T
1 9 Q
(48, 165) 117.6 357 T
10 8.5 Q
(:=) 108 347 T
1 9 Q
(15, 16, 165, 166) 122.7 347 T
10 8.5 Q
(<) 108 337 T
1 9 Q
(13, 165) 117.6 337 T
10 8.5 Q
(<=) 108 327 T
1 9 Q
(165) 122.7 327 T
10 8.5 Q
(<condition>) 108 317 T
1 9 Q
(343) 168.6 317 T
10 8.5 Q
(<error>) 108 307 T
1 9 Q
(343) 148.2 307 T
10 8.5 Q
(<function>) 108 297 T
1 9 Q
(180) 163.5 297 T
10 8.5 Q
(<generic-function>) 108 287 T
1 9 Q
(180) 204.3 287 T
10 8.5 Q
(<method>) 108 277 T
1 9 Q
(180) 153.3 277 T
10 8.5 Q
(<object>) 108 267 T
1 9 Q
(31) 153.3 267 T
10 8.5 Q
(<restart>) 108 257 T
1 9 Q
(350) 158.4 257 T
10 8.5 Q
(<simple-error>) 108 247 T
1 9 Q
(344) 183.9 247 T
10 8.5 Q
(<simple-object-vector>) 108 237 T
1 9 Q
(141) 224.7 237 T
10 8.5 Q
(<sorted-sequence>) 108 227 T
1 9 Q
(245) 199.2 227 T
10 8.5 Q
(<stretchy-vector>) 108 217 T
1 9 Q
(141) 199.2 217 T
10 8.5 Q
(=) 108 207 T
1 9 Q
(35, 126, 165) 117.6 207 T
(methods for) 117 197 T
(81) 169.88 197 T
10 8.5 Q
(==) 108 187 T
1 9 Q
(35, 165) 122.7 187 T
10 8.5 Q
(>) 108 177 T
1 9 Q
(165) 117.6 177 T
10 8.5 Q
(>=) 108 167 T
1 9 Q
(165) 122.7 167 T
10 8.5 Q
(\134) 108 157 T
1 9 Q
(165) 117.6 157 T
(for quotation of infix functions) 117 147 T
(76) 243.69 147 T
(methods for) 117 137 T
(81) 169.88 137 T
10 8.5 Q
(^) 315 480 T
1 9 Q
(165) 324.6 480 T
10 8.5 Q
(|) 315 470 T
1 9 Q
(165, 166) 324.6 470 T
10 8.5 Q
(~) 315 460 T
1 9 Q
(165) 324.6 460 T
10 8.5 Q
(~=) 315 450 T
1 9 Q
(165) 329.7 450 T
10 8.5 Q
(~==) 315 440 T
1 9 Q
(165) 334.8 440 T
2 11 Q
(A) 315 418.67 T
10 8.5 Q
(abs) 315 407 T
1 9 Q
(56) 334.8 407 T
(abstract classes) 315 397 T
(95) 379.84 397 T
(airport application) 315 387 T
(255\320283) 393.99 387 T
(design) 324 377 T
(237\320243) 354.99 377 T
(goals) 324 367 T
(237) 349.35 367 T
10 8.5 Q
(#all-keys) 315 357 T
1 9 Q
(175, 176, 178, 179) 365.4 357 T
(allocation of slots) 315 347 T
(127) 388.86 347 T
10 8.5 Q
(all-superclasses) 315 337 T
1 9 Q
(32, 300) 401.1 337 T
(ambiguous methods) 315 327 T
(79, 303) 401.04 327 T
1 7.2 Q
(AND) 315 317 T
1 9 Q
( logical operation) 332.16 317 T
(155, 165) 405.82 317 T
(Apple Computer, Inc.) 315 307 T
(377) 406.39 307 T
(applicable methods) 315 297 T
(63, 178) 397.37 297 T
10 8.5 Q
(apply) 315 287 T
1 9 Q
(182) 345 287 T
10 8.5 Q
(aref) 315 277 T
1 9 Q
(158, 164) 339.9 277 T
10 8.5 Q
(aref-setter) 315 267 T
1 9 Q
(167) 375.6 267 T
(arguments) 315 257 T
(168) 362.23 257 T
(keywords) 324 247 T
(178) 368.11 247 T
(arithmetic operations) 315 237 T
(12, 165) 404.61 237 T
(spaces needed) 324 227 T
(12) 385.77 227 T
(arrays) 315 217 T
(indices) 324 207 T
(164) 356.6 207 T
(assignment operator) 315 197 T
(16, 165, 166) 401.27 197 T
(automatic storage-management) 315 187 T
(44, 332) 445.48 187 T
(auxiliary macros) 315 177 T
(371) 385.96 177 T
2 11 Q
(B) 315 155.67 T
1 9 Q
(backslash) 315 144 T
(for quotation of infix functions) 324 134 T
(76) 450.69 134 T
107.17 563 305.17 621 R
7 X
V
107.17 593.45 305.17 621 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
107.17 593.45 305.17 621 R
7 X
0 0 0 1 0 0 0 K
V
107.17 614.14 269.17 614.14 2 L
3 H
2 Z
0 X
N
107.17 605.14 269.17 605.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Index) 107.17 573.45 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "405" 419
%%Page: "406" 420
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(406) 72 677.67 T
0 9 Q
(Index) 95.25 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 288 648 R
V
1 F
0 X
(bare methods) 126 642 T
(319) 184.75 642 T
(Beard, Patrick) 126 632 T
(378) 186.41 632 T
(Benson, Brent) 126 622 T
(378) 185.55 622 T
(binary operators) 126 612 T
(165) 196.55 612 T
(bindings) 126 602 T
(36, 121, 184) 165.51 602 T
(parameters) 135 592 T
(169) 184.34 592 T
10 8.5 Q
(block) 126 582 T
1 9 Q
(158, 356) 156 582 T
10 8.5 Q
(cleanup) 135 572 T
1 9 Q
( clause) 170.7 572 T
(357) 202.12 572 T
10 8.5 Q
(exception) 135 562 T
1 9 Q
( clause) 180.9 562 T
(346, 348) 212.32 562 T
(body) 126 552 T
(18, 168) 150.89 552 T
(defined by) 135 542 T
10 8.5 Q
(begin) 179.96 542 T
1 9 Q
( and) 205.46 542 T
10 8.5 Q
(end) 225.19 542 T
1 9 Q
(18) 244.99 542 T
(within a) 135 532 T
10 8.5 Q
(define method) 170.15 532 T
1 9 Q
(48) 240.95 532 T
10 8.5 Q
(break) 126 522 T
1 9 Q
(356) 156 522 T
2 11 Q
(C) 126 500.67 T
1 9 Q
(C and C++ comparisons) 126 489 T
(arrays) 135 479 T
(171) 164.43 479 T
(class concepts) 135 469 T
(31) 195.11 469 T
(compiler optimizations for method) 135 459 T
(dispatch) 153 449 T
(326) 191.51 449 T
(definition of methods on built-in) 135 439 T
(classes) 153 429 T
(33) 184.37 429 T
(division functions) 135 419 T
(48) 211.34 419 T
(Dylan library files and C header) 135 409 T
(files) 153 399 T
(22) 173.86 399 T
-0.08 (Dylan LID files and) 135 389 P
10 8.5 Q
-0.17 (makefile) 215.12 389 P
1 9 Q
-0.08 ( in C) 255.92 389 P
-0.08 (22) 279 389 P
(Dylan program files and) 135 379 T
10 8.5 Q
(.c) 234.81 379 T
1 9 Q
( files in) 245.01 379 T
(C) 153 369 T
(22) 163.88 369 T
(elements of programs) 135 359 T
(22) 226.1 359 T
10 8.5 Q
(format-out) 135 349 T
1 9 Q
( and) 186 349 T
10 8.5 Q
(printf) 205.74 349 T
1 9 Q
(20) 240.84 349 T
10 8.5 Q
(if) 135 339 T
1 9 Q
(51) 149.7 339 T
(library definition versus header and) 135 329 T
(includes) 153 319 T
(203) 191.02 319 T
(library-use relationships versus C++) 135 309 T
(namespaces) 153 299 T
(216) 205.34 299 T
(limited collection types and template) 135 289 T
(classes) 153 279 T
(317) 184.37 279 T
(macros) 135 269 T
(360, 364, 365, 367, 370) 168.23 269 T
(modules and) 135 259 T
10 8.5 Q
(private:) 189.27 259 T
1 9 Q
(,) 230.07 259 T
10 8.5 Q
(public:) 234.57 259 T
1 9 Q
(,) 270.27 259 T
10 8.5 Q
(protected:) 153 249 T
1 9 Q
(201) 208.5 249 T
(multimethods) 135 239 T
(79) 195.71 239 T
(multiple inheritance) 135 229 T
(304) 220.19 229 T
(multiple inheritance and slots) 135 219 T
(292) 258.03 219 T
(namespace of setters and getters) 135 209 T
(123) 268.22 209 T
(operator overloading) 135 199 T
(76) 224.1 199 T
(parameters) 135 189 T
(171) 184.34 189 T
(partial evaluation as inlining and con-) 135 179 T
(stant folding) 153 169 T
(334) 208.06 169 T
(pointers) 135 159 T
(86, 171) 172.3 159 T
(primary classes) 135 149 T
(331) 201.21 149 T
(references) 135 139 T
(171) 179.9 139 T
(relationship between classes and) 135 129 T
333 126 504 648 R
7 X
V
0 X
(methods) 360 642 T
(33) 399.16 642 T
(representation of data types) 342 632 T
(317) 457.71 632 T
(representation of primitive values) 342 622 T
(34) 481.66 622 T
(true and false values) 342 612 T
(13) 428.71 612 T
(type inference) 342 602 T
(312) 402.98 602 T
(uninitialized slots) 342 592 T
(329) 417.59 592 T
(virtual base classes) 342 582 T
(328) 422.22 582 T
(call-site caching) 333 572 T
(332) 400.75 572 T
(Carnegie Mellon University) 333 562 T
(376) 448.32 562 T
10 8.5 Q
(case) 333 552 T
1 9 Q
(156) 357.9 552 T
(case insensitivity) 333 542 T
(14) 405.23 542 T
10 8.5 Q
(ceiling) 333 532 T
1 9 Q
(48) 373.2 532 T
10 8.5 Q
(ceiling/) 333 522 T
1 9 Q
(48) 378.3 522 T
10 8.5 Q
(cerror) 333 512 T
1 9 Q
(356) 368.1 512 T
(class inheritance) 333 502 T
(53\32074) 403.06 502 T
(class precedence list) 333 492 T
(294) 417.67 492 T
10 8.5 Q
(class) 333 482 T
1 9 Q
( slot allocation) 358.5 482 T
(127) 420.64 482 T
(classes) 333 472 T
(abstract and concrete) 342 462 T
(95) 430.7 462 T
(comparison of Dylan and C++) 342 452 T
(386) 467.17 452 T
(inheritance) 342 442 T
(30) 391.06 442 T
(instantiable) 342 432 T
(95) 392.8 432 T
(naming convention) 342 422 T
(17) 423.78 422 T
(open or sealed) 342 412 T
(323) 404.4 412 T
(relationship to methods) 342 402 T
(33) 441.28 402 T
(user-defined) 342 392 T
(40) 397.08 392 T
10 8.5 Q
(cleanup) 333 382 T
1 9 Q
( clause of) 368.7 382 T
10 8.5 Q
(block) 408.03 382 T
1 9 Q
(357) 438.03 382 T
(client modules) 333 372 T
(196) 396 372 T
(CLOS) 333 362 T
(332) 361.18 362 T
(closures) 333 352 T
(183, 184) 369.95 352 T
(collections) 333 342 T
(137\320160) 379.48 342 T
(definition of a new collection) 342 332 T
(245\320253) 462.11 332 T
(element-reference syntax) 342 322 T
(164) 446.14 322 T
(limited) 342 312 T
(115) 375.05 312 T
(coloring algorithm for optimization of slot) 333 302 T
(accessors) 369 292 T
(328) 410.22 292 T
(comments) 333 282 T
(40) 378.6 282 T
(comparison operations) 333 272 T
(165) 428.87 272 T
10 8.5 Q
(complement) 333 262 T
1 9 Q
(183) 388.5 262 T
(concrete classes) 333 252 T
(95) 399.88 252 T
10 8.5 Q
(<condition>) 333 242 T
1 9 Q
(343) 393.6 242 T
(conditions) 333 232 T
(343) 379.29 232 T
(handlers) 342 222 T
(345) 381.28 222 T
(signal of) 342 212 T
(343) 380.46 212 T
(congruence) 333 202 T
(parameter lists) 342 192 T
(176) 405.58 192 T
(value declarations) 342 182 T
(177) 419.19 182 T
(constant slots) 333 172 T
(329) 391.42 172 T
(constants) 333 162 T
(module constants) 342 152 T
(17) 416.85 152 T
(naming convention) 342 142 T
(17) 423.78 142 T
(constructors) 333 132 T
(140) 386.6 132 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "406" 420
%%Page: "407" 421
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Index) 494.61 677.67 T
2 F
(407) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
V
1 9 Q
0 X
(contract) 108 642 T
(67) 144.57 642 T
(control-flow functions) 108 632 T
(137\320160) 201.13 632 T
10 8.5 Q
(copy-sequence) 108 622 T
1 9 Q
(139, 142, 149) 178.8 622 T
10 8.5 Q
-0.44 (create) 108 612 P
1 9 Q
-0.2 ( clause of) 138.6 612 P
10 8.5 Q
-0.44 (define module) 177.34 612 P
1 9 Q
-0.2 (198, 200) 247.7 612 P
10 8.5 Q
(curry) 108 602 T
1 9 Q
(148, 183) 138 602 T
2 11 Q
(D) 108 580.67 T
10 8.5 Q
(define class) 108 569 T
1 9 Q
(41, 180, 181, 323) 173.7 569 T
10 8.5 Q
(define constant) 108 559 T
1 9 Q
(17, 172) 189 559 T
10 8.5 Q
(define generic) 108 549 T
1 9 Q
(67, 180, 322) 183.9 549 T
10 8.5 Q
(define macro) 108 539 T
1 9 Q
(361) 173.7 539 T
10 8.5 Q
(define method) 108 529 T
1 9 Q
(27, 45, 180, 181, 325) 178.8 529 T
10 8.5 Q
(define module) 108 519 T
1 9 Q
(198) 178.8 519 T
10 8.5 Q
(define sealed domain) 108 509 T
1 9 Q
(324) 214.5 509 T
10 8.5 Q
(define variable) 108 499 T
1 9 Q
(14, 172) 189 499 T
(defining macros) 108 489 T
(368) 177 489 T
(definitions) 108 479 T
(189) 155.3 479 T
(delivery of applications) 108 469 T
(9) 206.49 469 T
(design of the airport application) 108 459 T
(237\320243) 240.62 459 T
(development environments) 108 449 T
(11) 222.53 449 T
(Digitool, Inc.) 108 439 T
(378) 164.11 439 T
(direct instances) 108 429 T
(59) 174.13 429 T
(direct methods) 108 419 T
(319) 172.32 419 T
(direct subclasses) 108 409 T
(59) 178.76 409 T
(direct superclasses) 108 399 T
(59) 187.06 399 T
(division functions) 108 389 T
(48) 184.34 389 T
10 8.5 Q
(do) 108 379 T
1 9 Q
(146) 122.7 379 T
10 8.5 Q
(do-handlers) 108 369 T
1 9 Q
(351) 168.6 369 T
(domains) 108 359 T
(324) 147.03 359 T
(dot syntax) 108 349 T
(117) 154.23 349 T
(Dylan) 108 339 T
(implementations) 117 329 T
(375\320379) 188.86 329 T
(introduction) 117 319 T
(3\32010) 171.39 319 T
10 8.5 Q
(dylan) 108 309 T
1 9 Q
( library) 133.5 309 T
(23, 188) 167.08 309 T
10 8.5 Q
(dylan) 108 299 T
1 9 Q
( module) 133.5 299 T
(23, 205) 170.97 299 T
0 F
(Dylan Refer) 108 289 T
(ence Manual, The) 152.1 289 T
1 F
(xi) 221.52 289 T
10 8.5 Q
(dylan-user) 108 279 T
1 9 Q
( module) 159 279 T
(23, 188, 192, 205) 196.47 279 T
(dynamic aspects of Dylan) 108 269 T
(compilation of portions of a program) 117 259 T
(58) 269.06 259 T
(dynamic scope) 108 249 T
(346) 172 249 T
2 11 Q
(E) 108 227.67 T
10 8.5 Q
(each-subclass) 108 216 T
1 9 Q
( slot allocation) 174.3 216 T
(128) 236.44 216 T
(efficiency model) 108 206 T
(310) 178.13 206 T
10 8.5 Q
(element) 108 196 T
1 9 Q
(139, 159, 164) 148.2 196 T
(element references) 108 186 T
(164) 186.82 186 T
10 8.5 Q
(element-setter) 108 176 T
1 9 Q
(167) 183.9 176 T
(enumerations) 108 166 T
(318) 167.31 166 T
(equality predicates) 108 156 T
(35) 188.15 156 T
10 8.5 Q
(<error>) 108 146 T
1 9 Q
(343) 148.2 146 T
10 8.5 Q
(error) 108 136 T
1 9 Q
(344) 138 136 T
(errors) 315 642 T
(no applicable method) 324 632 T
(55) 414.95 632 T
(evaluation) 315 622 T
(order of) 324 612 T
(162) 360.49 612 T
10 8.5 Q
(even?) 315 602 T
1 9 Q
(14) 345 602 T
(examples) 315 592 T
(airport application) 324 582 T
(255\320283) 402.99 582 T
(available on World Wide Web) 324 572 T
(375) 448.69 572 T
(complete libraries for) 324 562 T
10 8.5 Q
(say) 411.23 562 T
1 9 Q
(,) 426.53 562 T
10 8.5 Q
(time) 431.03 562 T
1 9 Q
(,) 451.43 562 T
10 8.5 Q
(angle) 455.93 562 T
1 9 Q
(,) 481.43 562 T
(and) 342 552 T
10 8.5 Q
(sixty-unit) 359.49 552 T
1 9 Q
(221\320234) 414.99 552 T
(Hello, world) 324 542 T
(20\32024) 379.04 542 T
(simple, complete library) 324 532 T
(99\320106) 425.24 532 T
(user-defined collection type) 324 522 T
(245\320253) 439.4 522 T
10 8.5 Q
(exception) 315 512 T
1 9 Q
( clause of) 360.9 512 T
10 8.5 Q
(block) 400.23 512 T
1 9 Q
(346, 348) 430.23 512 T
(exceptions) 315 502 T
(339\320358) 361.69 502 T
(condition handlers) 324 492 T
(345) 403.5 492 T
(informal protocol) 324 482 T
(339) 398.39 482 T
(signal of conditions) 324 472 T
(343) 406.49 472 T
(use of) 324 462 T
10 8.5 Q
(block) 349.96 462 T
1 9 Q
( for protected) 375.46 462 T
(operations) 342 452 T
(356) 388.71 452 T
(execution model) 315 442 T
(309) 385.43 442 T
(explicit function calls) 315 432 T
(162) 404.06 432 T
(export of modules by libraries) 315 422 T
(191) 439.26 422 T
(export of names by modules) 315 412 T
(190) 432.5 412 T
2 11 Q
(F) 315 390.67 T
10 8.5 Q
(#f) 315 379 T
1 9 Q
(13) 329.7 379 T
(false value) 315 369 T
(13) 361.93 369 T
10 8.5 Q
(find-key) 315 359 T
1 9 Q
(159) 360.3 359 T
(flexibility) 315 349 T
(and performance) 324 339 T
(309\320336) 396.72 339 T
10 8.5 Q
(floor) 315 329 T
1 9 Q
(48) 345 329 T
10 8.5 Q
(floor/) 315 319 T
1 9 Q
(48) 350.1 319 T
10 8.5 Q
(for) 315 309 T
1 9 Q
(143, 158) 334.8 309 T
10 8.5 Q
(format-out) 315 299 T
1 9 Q
(19) 370.5 299 T
(unsupported in Apple Technology) 324 289 T
(Release) 342 279 T
(20) 376.38 279 T
(forward-iteration protocol) 315 269 T
(245, 250\320252) 424.15 269 T
10 8.5 Q
(<function>) 315 259 T
1 9 Q
(180) 370.5 259 T
(function macros) 315 249 T
(361) 383.84 249 T
(function-call protocol) 315 239 T
(167) 405.1 239 T
(function-call syntax) 315 229 T
(13, 162) 397.98 229 T
(binary operator calls) 324 219 T
(165) 410.54 219 T
(element references) 324 209 T
(164) 402.82 209 T
(explicit function calls) 324 199 T
(162) 413.06 199 T
(slot references) 324 189 T
(163) 385.43 189 T
(unary operator calls) 324 179 T
(165) 408.37 179 T
(functions) 315 169 T
(161\320185) 356.68 169 T
(application) 324 159 T
(182) 373.26 159 T
(closures) 324 149 T
(183, 184) 360.95 149 T
(operations on) 324 139 T
(183) 383.11 139 T
(types) 324 129 T
(180) 349.97 129 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "407" 421
%%Page: "408" 422
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(408) 72 677.67 T
0 9 Q
(Index) 95.25 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 288 648 R
V
2 11 Q
0 X
(G) 126 640.67 T
1 9 Q
(garbage collection) 126 629 T
(44) 202.76 629 T
(performance) 135 619 T
(332) 190.23 619 T
10 8.5 Q
(<generic function>) 126 609 T
1 9 Q
(180) 222.3 609 T
(generic functions) 126 599 T
(contract of) 135 589 T
(67) 181.73 589 T
(creation) 135 579 T
(180) 171.57 579 T
10 8.5 Q
(define generic) 135 569 T
1 9 Q
(67) 210.9 569 T
(implicit definition) 135 559 T
(181, 321, 323) 211.5 559 T
(introduction) 135 549 T
(29, 67) 189.39 549 T
(open or sealed) 135 539 T
(322) 197.4 539 T
(signatures) 135 529 T
(150) 180.72 529 T
(typed parameters) 135 519 T
(320) 209.74 519 T
(getters) 126 509 T
(42, 118) 157.37 509 T
(naming considerations) 135 499 T
(121) 230.26 499 T
(performance) 135 489 T
(118, 328) 190.23 489 T
(slot-reference syntax) 135 479 T
(163) 221.75 479 T
(graph) 126 469 T
(294) 154.21 469 T
(Gwydion) 126 459 T
(376) 168.15 459 T
2 11 Q
(H) 126 437.67 T
1 9 Q
(handlers) 126 426 T
(345) 165.28 426 T
(Harlequin) 126 416 T
(376) 171.3 416 T
(has-a relationship) 126 406 T
(93) 201.57 406 T
10 8.5 Q
(head) 126 396 T
1 9 Q
(141) 150.9 396 T
2 11 Q
(I) 126 374.67 T
10 8.5 Q
(identity) 126 363 T
1 9 Q
(148) 171.3 363 T
10 8.5 Q
(if) 126 353 T
1 9 Q
(154) 140.7 353 T
(immutable objects) 126 343 T
(170) 203.09 343 T
(implementation modules) 126 333 T
(196, 198) 230.82 333 T
(import of modules by libraries) 126 323 T
(191) 251.87 323 T
(import of names from other) 126 313 T
(modules) 162 303 T
(190) 201.03 303 T
10 8.5 Q
(import:) 126 293 T
1 9 Q
( clause of) 161.7 293 T
10 8.5 Q
(define module) 201.03 293 T
(export:) 135 283 T
1 9 Q
( option) 170.7 283 T
(211) 203.48 283 T
(indirect instances) 126 273 T
(60) 199.99 273 T
(infix functions) 126 263 T
(backslash for quotation of) 135 253 T
(76) 242.61 253 T
(infix syntax) 126 243 T
(13) 177 243 T
(information hiding) 126 233 T
(187) 206.44 233 T
(inheritance) 126 223 T
(30) 175.06 223 T
(multiple) 135 213 T
(287\320308) 173.38 213 T
(single) 135 203 T
(287) 163.11 203 T
(slots) 135 193 T
(58) 157.6 193 T
10 8.5 Q
(inherited slot) 126 183 T
1 9 Q
( specification) 197.4 183 T
(125, 292) 254.12 183 T
(init expressions) 126 173 T
(126) 192.61 173 T
(init keywords) 126 163 T
(43) 185.77 163 T
10 8.5 Q
(init-function:) 126 153 T
1 9 Q
( slot option) 197.4 153 T
(126) 246.71 153 T
(initialization of slots) 126 143 T
(124, 133) 211.48 143 T
10 8.5 Q
(initialize) 126 133 T
1 9 Q
( methods) 177 133 T
(123, 132) 218.41 133 T
333 126 504 648 R
7 X
V
10 8.5 Q
0 X
(init-value:) 333 642 T
1 9 Q
( slot option) 389.1 642 T
(124) 438.41 642 T
(inlining) 333 632 T
(333) 368.69 632 T
10 8.5 Q
(instance) 333 622 T
1 9 Q
( slot allocation) 373.8 622 T
(127) 435.94 622 T
10 8.5 Q
(instance?) 333 612 T
1 9 Q
(31) 383.4 612 T
(instances) 333 602 T
(60) 373.97 602 T
(creation) 342 592 T
(41) 378.57 592 T
(initialization of slots) 342 582 T
(42) 427.48 582 T
(introduction) 342 572 T
(30) 396.39 572 T
(instantiable classes) 333 562 T
(95) 412.93 562 T
(integers) 333 552 T
(limited) 342 542 T
(114) 375.05 542 T
(interchange format) 333 532 T
(21, 194, 195, 203) 413.54 532 T
(interface modules) 333 522 T
(196, 198) 408.74 522 T
(Internet resources for Dylan) 333 512 T
(375\320379) 449.3 512 T
(is-a relationship) 333 502 T
(93) 401.45 502 T
2 11 Q
(J) 333 480.67 T
1 9 Q
(Java comparisons) 333 469 T
(automatic storage-management) 342 459 T
(45) 472.48 459 T
(multimethods) 342 449 T
(79) 402.7 449 T
(multiple inheritance and interfaces) 342 439 T
(304) 485.21 439 T
(operator overloading) 342 429 T
(76) 431.1 429 T
(pointers) 342 419 T
(87) 379.3 419 T
(representation of data types) 342 409 T
(318) 457.71 409 T
(representation of primitive values) 342 399 T
(35) 481.66 399 T
(safety versus performance trade-off) 342 389 T
(314) 488.26 389 T
(true and false values) 342 379 T
(13) 428.71 379 T
2 11 Q
(K) 333 357.67 T
10 8.5 Q
(#key) 333 346 T
1 9 Q
(173, 175, 176, 179) 357.9 346 T
(keyword arguments) 333 336 T
(178) 418.27 336 T
(keyword parameters) 333 326 T
(43, 173, 174, 178) 420.38 326 T
(keywords) 333 316 T
(namespace of) 342 306 T
(201) 400.69 306 T
2 11 Q
(L) 333 284.67 T
1 9 Q
(least specific) 333 273 T
(294) 387.69 273 T
10 8.5 Q
(let) 333 263 T
1 9 Q
(18, 48, 172) 352.8 263 T
10 8.5 Q
(let handler) 333 253 T
1 9 Q
(349, 352) 393.6 253 T
(lexical scoping) 333 243 T
(18, 184) 396.05 243 T
(libraries) 333 233 T
(187\320218) 370.07 233 T
(and programs) 342 223 T
(195) 402.69 223 T
(export, import, and use of modules) 342 213 T
(191) 486.63 213 T
(library-interchange definition \050LID\051) 333 203 T
(files) 369 193 T
(195, 208) 389.86 193 T
10 8.5 Q
(limited) 333 183 T
1 9 Q
(109, 114, 115) 373.2 183 T
(limited types) 333 173 T
(109) 389.77 173 T
(collections) 342 163 T
(115) 388.48 163 T
(integers) 342 153 T
(114) 378.29 153 T
(performance implications) 342 143 T
(315) 448.71 143 T
10 8.5 Q
(list) 333 133 T
1 9 Q
(141) 357.9 133 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "408" 422
%%Page: "409" 423
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Index) 494.61 677.67 T
2 F
(409) 525.75 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
V
1 9 Q
0 X
(listeners) 108 642 T
(11) 145.72 642 T
(lists) 108 632 T
(creation and access to elements) 117 622 T
(141) 245.57 622 T
(literal constants) 108 612 T
(139) 175.29 612 T
10 8.5 Q
(local method) 108 602 T
1 9 Q
(181, 182, 184) 173.7 602 T
(local variables) 108 592 T
(18, 184) 169.38 592 T
(initialization of multiple) 117 582 T
(48) 218.27 582 T
(logical operations) 108 572 T
1 7.2 Q
(AND) 117 562 T
1 9 Q
(155, 165) 138.66 562 T
(negation) 117 552 T
(165) 156.26 552 T
1 7.2 Q
(OR) 117 542 T
1 9 Q
(155, 165) 131.97 542 T
2 11 Q
(M) 108 520.67 T
1 9 Q
(macros) 108 509 T
(359\320373) 141.23 509 T
(auxiliary macros) 117 499 T
(371) 187.96 499 T
(auxiliary rules) 117 489 T
(368) 178.96 489 T
(constraints) 117 479 T
(365, 373) 165.06 479 T
(defining macros) 117 469 T
(368) 186 469 T
(delay of evaluation of arguments) 117 459 T
(361,) 253.13 459 T
(362) 135 449 T
(evaluation in) 117 439 T
(364) 173.75 439 T
(function macros) 117 429 T
(361) 185.84 429 T
(hygiene) 117 419 T
(363, 369) 153.23 419 T
(pattern variables) 117 409 T
(362, 373) 188.61 409 T
(patterns) 117 399 T
(360) 154.2 399 T
(rules) 117 389 T
(360) 141.23 389 T
(statement macros) 117 379 T
(366) 191.4 379 T
(templates) 117 369 T
(360) 160.28 369 T
10 8.5 Q
(make) 108 359 T
1 9 Q
(41, 180) 132.9 359 T
(methods) 117 349 T
(385) 156.16 349 T
10 8.5 Q
(map) 108 339 T
1 9 Q
(147) 127.8 339 T
(Marlais) 108 329 T
(378) 142.62 329 T
10 8.5 Q
(max) 108 319 T
1 9 Q
(14) 127.8 319 T
10 8.5 Q
(<method>) 108 309 T
1 9 Q
(180) 153.3 309 T
10 8.5 Q
(method) 108 299 T
1 9 Q
(127, 148, 181, 182, 184) 143.1 299 T
(method dispatch) 108 289 T
(ambiguous methods) 117 279 T
(79, 303) 203.04 279 T
(classes) 117 269 T
(112) 148.37 269 T
(introduction) 117 259 T
(63\32066) 171.39 259 T
(limited collections) 117 249 T
(115) 194.27 249 T
(limited integers) 117 239 T
(114) 184.09 239 T
(multimethods) 117 229 T
(79) 177.71 229 T
(multiple inheritance) 117 219 T
(300) 202.19 219 T
(nonclass types) 117 209 T
(111) 179.36 209 T
(performance note) 117 199 T
(66) 191.88 199 T
(singletons) 117 189 T
(113) 162.01 189 T
(unions) 117 179 T
(113) 148.75 179 T
(methods) 108 169 T
(applicable) 117 159 T
(63, 178) 162.46 159 T
(bare) 117 149 T
(319) 138.84 149 T
(creation) 117 139 T
(181) 153.57 139 T
(direct) 117 129 T
(319) 144.41 129 T
(introduction) 324 642 T
(27) 378.39 642 T
(relationship to classes) 324 632 T
(33) 415.49 632 T
(specificity) 324 622 T
(65) 368.82 622 T
10 8.5 Q
(min) 315 612 T
1 9 Q
(13) 334.8 612 T
(Mindy) 315 602 T
(376) 346.37 602 T
(mix-in classes) 315 592 T
(305) 374.69 592 T
(mix-in style of programming) 315 582 T
(305) 434.6 582 T
(modularity) 315 572 T
(83\32097) 364.52 572 T
(module constants) 315 562 T
(17) 389.85 562 T
(module variables) 315 552 T
(introduction) 324 542 T
(14) 378.39 542 T
(modules) 315 532 T
(187\320218) 354.03 532 T
(and source records) 324 522 T
(194) 403.9 522 T
(client modules) 324 512 T
(196) 387 512 T
10 8.5 Q
(create) 324 502 T
1 9 Q
( clause) 354.6 502 T
(198, 200) 386.02 502 T
(export and import of names) 324 492 T
(190) 439.61 492 T
(implementation modules) 324 482 T
(196, 198) 428.82 482 T
10 8.5 Q
(import:) 324 472 T
1 9 Q
( clause) 359.7 472 T
10 8.5 Q
(export:) 333 462 T
1 9 Q
( option) 368.7 462 T
(211) 401.48 462 T
(interface modules) 324 452 T
(196, 198) 399.74 452 T
(roles) 324 442 T
(196) 347.71 442 T
(most specific) 315 432 T
(294) 371.12 432 T
(multimethods) 315 422 T
(75\32080) 375.7 422 T
(multiple inheritance) 315 412 T
(287\320308) 400.19 412 T
(base and mix-in classes) 324 402 T
(305) 421.03 402 T
(class precedence list) 324 392 T
(294) 408.67 392 T
(decision to use) 324 382 T
(304) 387.41 382 T
(method dispatch) 324 372 T
(300) 395.6 372 T
(pros and cons) 324 362 T
(308) 383.89 362 T
(slots) 324 352 T
(292) 346.6 352 T
(multiple return values) 315 342 T
(47, 172) 408.66 342 T
(mutable objects) 315 332 T
(169) 381.52 332 T
2 11 Q
(N) 315 310.67 T
1 9 Q
(namespaces) 315 299 T
(189) 367.34 299 T
(naming conventions) 315 289 T
(classes) 324 279 T
(17) 355.37 279 T
(constants) 324 269 T
(17) 365.89 269 T
(destructive functions) 324 259 T
(151) 412.42 259 T
(predicates) 324 249 T
(14) 369.45 249 T
(types) 324 239 T
(110) 349.97 239 T
(variables) 324 229 T
(14) 364.48 229 T
(negation logical operation) 315 219 T
(165) 423.42 219 T
10 8.5 Q
(negative) 315 209 T
1 9 Q
(165) 360.3 209 T
10 8.5 Q
(negative?) 315 199 T
1 9 Q
(14) 365.4 199 T
(newsgroup for Dylan) 315 189 T
(375) 404.97 189 T
10 8.5 Q
(next-method) 315 179 T
1 9 Q
(69) 375.6 179 T
(nonclass types) 315 169 T
(109) 377.36 169 T
2 11 Q
(O) 315 147.67 T
10 8.5 Q
(<object>) 315 136 T
1 9 Q
(31) 360.3 136 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "409" 423
%%Page: "410" 424
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(410) 72 677.67 T
0 9 Q
(Index) 95.25 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 288 648 R
V
1 F
0 X
(object identity) 126 642 T
(381) 187.15 642 T
(object model, for C and C++) 126 632 T
(programmers) 162 622 T
(381) 221.01 622 T
10 8.5 Q
(object-class) 126 612 T
1 9 Q
(30) 191.7 612 T
(object-oriented programming in Dylan) 126 602 T
(basic concepts) 135 592 T
(39\32051) 196.27 592 T
(objects) 126 582 T
(30) 157.55 582 T
10 8.5 Q
(one-of) 126 572 T
1 9 Q
(319) 161.1 572 T
(open classes) 126 562 T
(323) 179.5 562 T
(open generic functions) 126 552 T
(322) 221.09 552 T
(operands) 126 542 T
(162) 167.74 542 T
(operations) 126 532 T
(arithmetic) 135 522 T
(165) 180.15 522 T
(assignment) 135 512 T
(165, 166) 184.92 512 T
(comparison) 135 502 T
(165) 186.41 502 T
(logical) 135 492 T
(165) 165.77 492 T
(operator overloading) 126 482 T
(75) 215.1 482 T
(operators) 126 472 T
(binary) 135 462 T
(165) 165.39 462 T
(unary) 135 452 T
(165) 163.22 452 T
1 7.2 Q
(OR) 126 442 T
1 9 Q
( logical operation) 136.47 442 T
(155, 165) 210.13 442 T
(order of evaluation) 126 432 T
(162) 206.89 432 T
(overloading) 126 422 T
(75) 178.76 422 T
2 11 Q
(P) 126 400.67 T
10 8.5 Q
(pair) 126 389 T
1 9 Q
(141) 150.9 389 T
(pairs) 126 379 T
(141) 150.4 379 T
(parameter lists) 126 369 T
(172) 189.58 369 T
(congruence) 135 359 T
(176) 185.49 359 T
(parameter specializers) 126 349 T
(63, 79) 219.84 349 T
(parameters) 126 339 T
(168) 175.34 339 T
(keywords) 135 329 T
(43, 173, 174, 178) 179.11 329 T
(required) 135 319 T
(173) 173.82 319 T
(rest) 135 309 T
(173) 154.12 309 T
(specialized) 135 299 T
(173) 183.7 299 T
(partial evaluation) 126 289 T
(310, 333) 201.03 289 T
(pattern variables) 126 279 T
(362, 373) 197.61 279 T
(patterns) 126 269 T
(360) 163.2 269 T
(performance) 126 259 T
(333) 181.23 259 T
(and flexibility) 135 249 T
(309\320336) 194.95 249 T
(call-site caching) 135 239 T
(332) 202.75 239 T
(efficiency model) 135 229 T
(310) 205.13 229 T
(enumerations) 135 219 T
(318) 194.31 219 T
(execution model) 135 209 T
(309) 205.43 209 T
(garbage collection) 135 199 T
(332) 211.76 199 T
(inlining) 135 189 T
(333) 170.69 189 T
(limited types) 135 179 T
(315) 191.77 179 T
(method dispatch) 135 169 T
(66) 206.6 169 T
(open or sealed classes) 135 159 T
(323) 226.52 159 T
(open or sealed generic functions) 135 149 T
(322) 268.11 149 T
(partial evaluation) 135 139 T
(310) 210.03 139 T
(performance warnings) 135 129 T
(313) 229.96 129 T
333 126 504 648 R
7 X
V
0 X
(primary classes) 342 642 T
(330) 408.21 642 T
(safety warnings) 342 632 T
(313) 409.79 632 T
(sealed domains) 342 622 T
(324) 408.34 622 T
(slot accessors) 342 612 T
(328) 399.75 612 T
(tail calls) 342 602 T
(320) 378.97 602 T
(type constraints) 342 592 T
(311) 409.97 592 T
(type inference) 342 582 T
(312) 402.98 582 T
(typed parameters of generic) 342 572 T
(functions) 360 562 T
(320) 401.68 562 T
(pointers) 333 552 T
(381) 370.3 552 T
(polymorphism) 333 542 T
(145) 396.89 542 T
10 8.5 Q
(positive?) 333 532 T
1 9 Q
(14) 383.4 532 T
(predicates) 333 522 T
(13, 14) 378.45 522 T
(naming conventions) 342 512 T
(14) 427.6 512 T
(primary classes) 333 502 T
(330) 399.21 502 T
(programs) 333 492 T
(195) 376.2 492 T
(proper subtype) 333 482 T
(112) 398.78 482 T
(protocols) 333 472 T
(187) 374.57 472 T
2 11 Q
(Q) 333 450.67 T
1 9 Q
(quick start to learning Dylan) 333 439 T
(11\32024) 451.58 439 T
2 11 Q
(R) 333 417.67 T
1 9 Q
(recursion) 333 406 T
(147) 374.93 406 T
(redefinition of classes) 333 396 T
(43) 423.64 396 T
(re-export of imports) 333 386 T
(211) 417.73 386 T
(required parameters) 333 376 T
(173) 418.9 376 T
10 8.5 Q
(required-init-value:) 333 366 T
1 9 Q
( slot option) 435 366 T
(125) 484.31 366 T
10 8.5 Q
(#rest) 333 356 T
1 9 Q
(173, 175, 176, 177) 363 356 T
(rest parameters) 333 346 T
(173) 399.2 346 T
10 8.5 Q
(<restart>) 333 336 T
1 9 Q
(350) 383.4 336 T
(restart handlers) 333 326 T
(350) 400.13 326 T
(return values) 333 316 T
(168) 390.53 316 T
(multiple) 342 306 T
(47) 380.39 306 T
(reusable software components) 333 296 T
(187) 458.77 296 T
10 8.5 Q
(reverse) 333 286 T
1 9 Q
(150) 373.2 286 T
10 8.5 Q
(reverse!) 333 276 T
1 9 Q
(150) 378.3 276 T
(root) 333 266 T
(31) 353.82 266 T
10 8.5 Q
(round) 333 256 T
1 9 Q
(48) 363 256 T
10 8.5 Q
(round/) 333 246 T
1 9 Q
(48) 368.1 246 T
2 11 Q
(S) 333 224.67 T
1 9 Q
(safety warnings) 333 213 T
(313) 400.79 213 T
(scope) 333 203 T
(lexical) 342 193 T
(184) 371.81 193 T
(sealed classes) 333 183 T
(323) 391.68 183 T
(sealed domains) 333 173 T
(324) 399.34 173 T
(restriction on methods) 342 163 T
(325) 436.3 163 T
(restriction on subclasses of open) 342 153 T
(classes) 360 143 T
(327) 391.37 143 T
(sealed generic functions) 333 133 T
(322) 433.27 133 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "410" 424
%%Page: "411" 425
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Index) 494.96 677.67 T
2 F
(41) 526.1 677.67 T
(1) 535.25 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 486 648 R
V
10 8.5 Q
0 X
(select) 108 642 T
1 9 Q
(156, 158) 143.1 642 T
(setters) 108 632 T
(42, 118) 138.18 632 T
(element-reference syntax) 117 622 T
(167) 221.14 622 T
(function-call syntax) 117 612 T
(166) 199.98 612 T
(performance) 117 602 T
(328) 172.23 602 T
(slot-reference syntax) 117 592 T
(166) 203.75 592 T
(Shalit, Andrew) 108 582 T
(xi) 172.75 582 T
(signal of conditions) 108 572 T
(343) 190.49 572 T
(signatures) 108 562 T
(150) 153.72 562 T
10 8.5 Q
(<simple-error>) 108 552 T
1 9 Q
(344) 183.9 552 T
10 8.5 Q
(<simple-object-vector>) 108 542 T
1 9 Q
(141) 224.7 542 T
(single inheritance) 108 532 T
(287) 182.92 532 T
10 8.5 Q
(singleton) 108 522 T
1 9 Q
(109, 113) 158.4 522 T
(performance implications) 117 512 T
(318) 223.71 512 T
10 8.5 Q
(size) 108 502 T
1 9 Q
(143) 132.9 502 T
(slot allocation) 108 492 T
10 8.5 Q
(class) 117 482 T
1 9 Q
(127) 147 482 T
10 8.5 Q
(each-subclass) 117 472 T
1 9 Q
(128) 187.8 472 T
10 8.5 Q
(instance) 117 462 T
1 9 Q
(127) 162.3 462 T
10 8.5 Q
(virtual) 117 452 T
1 9 Q
(127) 157.2 452 T
(slot options) 108 442 T
(43) 158.88 442 T
(init expressions) 117 432 T
(126) 183.61 432 T
10 8.5 Q
(init-function:) 117 422 T
1 9 Q
(126) 192.9 422 T
10 8.5 Q
(init-value:) 117 412 T
1 9 Q
(124) 177.6 412 T
10 8.5 Q
(required-init-value:) 117 402 T
1 9 Q
(125) 223.5 402 T
(slot references) 108 392 T
(163) 169.43 392 T
(slot specifications) 108 382 T
10 8.5 Q
(constant slot) 117 372 T
1 9 Q
(329) 187.8 372 T
10 8.5 Q
(inherited slot) 117 362 T
1 9 Q
(125) 192.9 362 T
(slots) 108 352 T
(117\320135) 130.6 352 T
(allocation) 117 342 T
(127) 160.35 342 T
(constant) 117 332 T
(329) 155.07 332 T
(getters and setters) 117 322 T
(42) 193.78 322 T
(inheritance) 117 312 T
(58) 166.06 312 T
(initialization) 117 302 T
(42, 124, 133) 171.97 302 T
(introduction) 117 292 T
(40) 171.39 292 T
(multiple inheritance) 117 282 T
(292) 202.19 282 T
(naming considerations) 117 272 T
(121) 212.26 272 T
(performance of getters and setters) 117 262 T
(328) 256.92 262 T
(type constraint) 117 252 T
(41) 181.15 252 T
(uninitialized) 117 242 T
(111, 124) 172.24 242 T
(virtual) 117 232 T
(128) 148.24 232 T
(Smalltalk) 108 222 T
(33, 332) 149.97 222 T
(sorted sequences) 108 212 T
(245\320253) 180.04 212 T
(needed by the airport application) 117 202 T
(242) 254.38 202 T
10 8.5 Q
(<sorted-sequence>) 108 192 T
1 9 Q
(245) 199.2 192 T
(source records) 108 182 T
(194, 195) 170.41 182 T
(specialized parameters) 108 172 T
(173) 203.79 172 T
(specializers) 108 162 T
(63, 79) 158.57 162 T
(statement macros) 108 152 T
(366) 182.4 152 T
10 8.5 Q
(<stretchy-vector>) 108 142 T
1 9 Q
(141) 199.2 142 T
(strings) 108 132 T
(creation and access to elements) 324 642 T
(138) 452.57 642 T
(subclasses) 315 632 T
(59) 360.59 632 T
10 8.5 Q
(subtype?) 315 622 T
1 9 Q
(32) 360.3 622 T
(subtypes) 315 612 T
(60) 355.19 612 T
(superclasses) 315 602 T
(59) 368.89 602 T
(introduction) 324 592 T
(30) 378.39 592 T
(supertypes) 315 582 T
(60) 363.49 582 T
(symbols) 315 572 T
(129) 352.59 572 T
(namespace of) 324 562 T
(201) 382.69 562 T
2 11 Q
(T) 315 540.67 T
10 8.5 Q
(#t) 315 529 T
1 9 Q
(13) 329.7 529 T
(tables) 315 519 T
(157) 342.66 519 T
10 8.5 Q
(tail) 315 509 T
1 9 Q
(141) 339.9 509 T
(tail calls) 315 499 T
(320) 351.97 499 T
(templates) 315 489 T
(360) 358.28 489 T
(terminology) 315 479 T
(classes, types, and instances) 324 469 T
(59) 439.8 469 T
0 F
(The Dylan Refer) 315 459 T
(ence Manual) 374.85 459 T
1 F
(xi) 426.27 459 T
(tree) 315 449 T
(294) 334.61 449 T
(true value) 315 439 T
(13) 359.92 439 T
10 8.5 Q
(truncate) 315 429 T
1 9 Q
(48) 360.3 429 T
10 8.5 Q
(truncate/) 315 419 T
1 9 Q
(48) 365.4 419 T
(type constraints) 315 409 T
(16) 382.97 409 T
10 8.5 Q
(<object>) 324 399 T
1 9 Q
(41) 369.3 399 T
(of slots) 324 389 T
(41) 356.76 389 T
(performance implications) 324 379 T
(311) 430.71 379 T
(type inference) 315 369 T
(312) 375.98 369 T
10 8.5 Q
(type-for-copy) 315 359 T
1 9 Q
(143) 385.8 359 T
(types) 315 349 T
(limited) 324 339 T
(109) 357.05 339 T
(naming convention) 324 329 T
(110) 405.78 329 T
(that are not classes) 324 319 T
(109) 403.18 319 T
10 8.5 Q
(type-union) 315 309 T
1 9 Q
(109, 113, 158) 370.5 309 T
(performance implications) 324 299 T
(318) 430.71 299 T
2 11 Q
(U) 315 277.67 T
1 9 Q
(unary operators) 315 266 T
(165) 383.38 266 T
(user-defined classes and methods) 315 256 T
(39\32051) 453.6 256 T
2 11 Q
(V) 315 234.67 T
1 9 Q
(value declarations) 315 223 T
(46, 168, 175) 392.19 223 T
(congruence) 324 213 T
(177) 374.49 213 T
10 8.5 Q
(values) 315 203 T
1 9 Q
(47, 172) 350.1 203 T
(variables) 315 193 T
(local) 324 183 T
(18, 184) 347.15 183 T
(naming convention) 324 173 T
(14) 405.78 173 T
(type constraints) 324 163 T
(16) 391.97 163 T
10 8.5 Q
(vector) 315 153 T
1 9 Q
(140, 393) 350.1 153 T
(vectors) 315 143 T
(creation and access to elements) 324 133 T
(140) 452.57 133 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "411" 425
%%Page: "412" 426
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(412) 72 677.67 T
0 9 Q
(Index) 95.25 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 288 648 R
V
10 8.5 Q
0 X
(virtual) 126 642 T
1 9 Q
( slot allocation) 161.7 642 T
(127, 128) 223.84 642 T
(virtual slots) 126 632 T
(128) 177.59 632 T
2 11 Q
(W) 126 610.67 T
10 8.5 Q
(while) 126 599 T
1 9 Q
(142) 156 599 T
(Wilson, Joseph N.) 126 589 T
(378) 201.87 589 T
(World Wide Web pages for Dylan) 126 579 T
(375\320) 265.89 579 T
(379) 162 569 T
2 11 Q
(Z) 126 547.67 T
10 8.5 Q
(zero?) 126 536 T
1 9 Q
(14) 156 536 T
333 126 504 648 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "412" 426
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 426
%%DocumentFonts: Palatino-Italic
%%+ Palatino-Roman
%%+ Palatino-Bold
%%+ Helvetica-Narrow-Bold
%%+ Courier-Bold
%%+ Courier-Oblique
%%+ Courier-BoldOblique
%%+ Helvetica-Bold
%%+ Helvetica
%%+ Helvetica-Oblique
%%+ Courier
%%EOF
