%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 22 FMDOCUMENT
0 0 /Palatino-Italic FMFONTDEFINE
1 0 /Palatino-Roman FMFONTDEFINE
2 0 /Palatino-Bold FMFONTDEFINE
3 0 /Helvetica-Narrow-Bold FMFONTDEFINE
4 0 /Courier-Bold FMFONTDEFINE
5 0 /Courier-BoldOblique FMFONTDEFINE
6 0 /Courier-Oblique FMFONTDEFINE
7 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.65 138.93 81.65 138.93 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
531.65 721.63 81.65 721.63 2 L
2 H
N
0 30 Q
-1.1 (Pr) 198.65 616.95 S
-1.1 (ogramming in Dylan) 225.9 616.95 S
1 13 Q
(Neal Feinber) 198.65 532.29 T
(g) 272.33 532.29 T
(Sonya Keene) 198.65 513.29 T
(Robert Mathews) 198.65 494.29 T
(P) 198.65 475.29 T
(. T) 204.82 475.29 T
(ucker W) 218.12 475.29 T
(ithington) 265.86 475.29 T
(W) 198.65 442.29 T
(ith contributions fr) 210.93 442.29 T
(om the Dylan gr) 319.07 442.29 T
(oup and other) 412.69 442.29 T
(people  at Harlequin.) 198.65 429.29 T
1 10 Q
(Draft September 14, 1995) 198.65 327.72 T
2 12 Q
(Harlequin) 198.65 175.39 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(Copyright 1994, 1995 by The Harlequin Gr) 108.65 553.29 T
(oup Limited.) 296.33 553.29 T
(All rights r) 108.65 531.29 T
(eserved.) 156.76 531.29 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "iii" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
98.82 571.79 494.82 667.29 R
7 X
0 0 0 1 0 0 0 K
V
1 30 Q
0 X
(Contents) 98.82 591.12 T
98.82 571.79 494.82 667.29 C
0 0 0 1 0 0 0 K
98.82 626.12 395.82 656.29 C
0 0 0 1 0 0 0 K
95.48 641.12 257.48 641.12 2 L
3 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
95.48 632.12 257.48 632.12 2 L
1 H
N
0 0 0 1 0 0 0 K
98.82 571.79 494.82 667.29 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
99.65 159.95 477.65 456.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 114.95 495.65 132.95 R
V
2 11 Q
0 X
(iii) 292.15 126.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 495.65 456.95 R
7 X
V
1 F
0 X
(Preface) 126.65 449.62 T
(ix) 173.22 449.62 T
3 13 Q
(1) 99.65 423.29 T
(Introduction) 126.65 423.29 T
(1) 201.83 423.29 T
1 11 Q
(1.1) 126.65 403.62 T
(Modular) 153.65 403.62 T
(, r) 195.65 403.62 T
(eusable, component-oriented pr) 205.29 403.62 T
(ograms  5) 360.26 403.62 T
(1.2) 126.65 389.62 T
(Powerful and familiar pr) 153.65 389.62 T
(ocedural pr) 274.54 389.62 T
(ogramming  6) 330.61 389.62 T
(1.3) 126.65 375.62 T
(Rapid and pr) 153.65 375.62 T
(oductive development of pr) 217.91 375.62 T
(ograms  7) 353.36 375.62 T
(1.4) 126.65 361.62 T
(Delivery of safe, ef) 153.65 361.62 T
(\336cient, compact applications  8) 244.28 361.62 T
3 13 Q
(2) 99.65 339.29 T
(Quick Start) 126.65 339.29 T
(11) 196.52 339.29 T
1 11 Q
(2.1) 126.65 319.62 T
(Dialog with a Dylan listener  1) 153.65 319.62 T
(1) 301.11 319.62 T
(2.2) 126.65 305.62 T
(V) 153.65 305.62 T
(ariables and constants  12) 160.58 305.62 T
(2.3) 126.65 291.62 T
(De\336nitions of methods  15) 153.65 291.62 T
(2.4) 126.65 277.62 T
(Classes  18) 153.65 277.62 T
(2.5) 126.65 263.62 T
(User) 153.65 263.62 T
(-de\336ned classes  21) 176.29 263.62 T
(2.6) 126.65 249.62 T
(Use of) 153.65 249.62 T
4 F
(make) 187.31 249.62 T
1 F
( to cr) 213.71 249.62 T
(eate an instance  23) 237.83 249.62 T
(2.7) 126.65 235.62 T
(Getters and setters of slot values  23) 153.65 235.62 T
(2.8) 126.65 221.62 T
(Initialization of slots when making instances  24) 153.65 221.62 T
(2.9) 126.65 207.62 T
(Methods for handling time  25) 153.65 207.62 T
(2.10) 126.65 193.62 T
(The) 153.65 193.62 T
4 F
(<time-offset>) 174.81 193.62 T
1 F
( class and method  30) 260.61 193.62 T
(2.1) 126.65 179.62 T
(1) 139.79 179.62 T
(Summary  32) 153.65 179.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "iii" 3
%%Page: "iv" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(iv) 63.65 702.62 T
0 9.5 Q
(Contents) 82.93 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 495.65 672.95 R
V
3 13 Q
0 X
(3) 99.65 664.29 T
(Simple Use of Inheritance) 126.65 664.29 T
(35) 269.99 664.29 T
1 11 Q
(3.1) 126.65 644.62 T
(Class inheritance  35) 153.65 644.62 T
(3.2) 126.65 630.62 T
(Methods for classes that use inheritance  39) 153.65 630.62 T
(3.3) 126.65 616.62 T
(De\336nition of a generic function  42) 153.65 616.62 T
(3.4) 126.65 602.62 T
(Use of) 153.65 602.62 T
4 F
(next-method) 187.31 602.62 T
1 F
( to call another method  45) 259.91 602.62 T
(3.5) 126.65 588.62 T
(Summary  47) 153.65 588.62 T
3 13 Q
(4) 99.65 566.29 T
(Design of the Airport Example) 126.65 566.29 T
(49) 292.48 566.29 T
1 11 Q
(4.1) 126.65 546.62 T
(Goals of the airport application  50) 153.65 546.62 T
(4.2) 126.65 532.62 T
(Objects that model an airport  51) 153.65 532.62 T
(4.3) 126.65 518.62 T
(Behaviors of the objects  54) 153.65 518.62 T
(4.4) 126.65 504.62 T
(Our appr) 153.65 504.62 T
(oach to this application  56) 198.89 504.62 T
(4.5) 126.65 490.62 T
(Summary  56) 153.65 490.62 T
3 13 Q
(5) 99.65 468.29 T
(Cycles Through Implementation and Design) 126.65 468.29 T
(57) 362.38 468.29 T
1 11 Q
(5.1) 126.65 448.62 T
(Absolute position: using) 153.65 448.62 T
4 F
(<directed-angle>  57) 275.34 448.62 T
1 F
(5.2) 126.65 434.62 T
(Absolute position: using) 153.65 434.62 T
4 F
(<latitude>) 275.34 434.62 T
1 F
( and) 341.34 434.62 T
4 F
(<longitude>  59) 365.46 434.62 T
1 F
(5.3) 126.65 420.62 T
(Relative position: \336rst appr) 153.65 420.62 T
(oach  61) 286.03 420.62 T
(5.4) 126.65 406.62 T
(Pr) 153.65 406.62 T
(elude to a new appr) 164.44 406.62 T
(oach  62) 261.34 406.62 T
(5.5) 126.65 392.62 T
(Meeting of space and time  63) 153.65 392.62 T
(5.6) 126.65 378.62 T
(Use of a r) 153.65 378.62 T
(elative position  68) 199.71 378.62 T
(5.7) 126.65 364.62 T
(Summary  71) 153.65 364.62 T
3 13 Q
(6) 99.65 342.29 T
(More on Methods) 126.65 342.29 T
(73) 227.89 342.29 T
1 11 Q
(6.1) 126.65 322.62 T
(Methods for the) 153.65 322.62 T
4 F
(+) 234.22 322.62 T
1 F
( generic function  73) 240.82 322.62 T
(6.2) 126.65 308.62 T
(Multimethods  76) 153.65 308.62 T
(6.3) 126.65 294.62 T
(Requir) 153.65 294.62 T
(ed, r) 186.41 294.62 T
(est, and keywor) 208.04 294.62 T
(d parameters  77) 285.26 294.62 T
(6.4) 126.65 280.62 T
(Return values  79) 153.65 280.62 T
(6.5) 126.65 266.62 T
(Method parameter congr) 153.65 266.62 T
(uence  81) 275.34 266.62 T
(6.6) 126.65 252.62 T
(Identity of methods  81) 153.65 252.62 T
(6.7) 126.65 238.62 T
(Methods for types that ar) 153.65 238.62 T
(e not classes  82) 276.68 238.62 T
(6.8) 126.65 224.62 T
(Summary  82) 153.65 224.62 T
3 13 Q
(7) 99.65 202.29 T
(More on Slots) 126.65 202.29 T
(85) 210.13 202.29 T
1 11 Q
(7.1) 126.65 182.62 T
(Getters and setters for slots  85) 153.65 182.62 T
(7.2) 126.65 168.62 T
(V) 153.65 168.62 T
(irtual slots  88) 160.99 168.62 T
(7.3) 126.65 154.62 T
(Initialize methods  91) 153.65 154.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "iv" 4
%%Page: "v" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Contents) 481.2 702.62 T
2 11 Q
(v) 525.53 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 495.65 672.95 R
V
1 F
0 X
(7.4) 126.65 665.62 T
(T) 153.65 665.62 T
(echniques for initializing slots  92) 159.38 665.62 T
(7.5) 126.65 651.62 T
(Class slots and each-subclass slots  96) 153.65 651.62 T
(7.6) 126.65 637.62 T
(Summary  97) 153.65 637.62 T
3 13 Q
(8) 99.65 615.29 T
(Simple Collections and Control Flow) 126.65 615.29 T
(99) 325.05 615.29 T
1 11 Q
(8.1) 126.65 595.62 T
(Built-in collection classes  99) 153.65 595.62 T
(8.2) 126.65 581.62 T
(Basic use of collections  101) 153.65 581.62 T
(8.3) 126.65 567.62 T
(The) 153.65 567.62 T
4 F
(for) 174.81 567.62 T
1 F
( function  103) 194.61 567.62 T
(8.4) 126.65 553.62 T
(Thr) 153.65 553.62 T
(ee appr) 170.94 553.62 T
(oaches to) 207.1 553.62 T
4 F
(generate-gate-id  105) 254.91 553.62 T
1 F
(8.5) 126.65 539.62 T
(V) 153.65 539.62 T
(ectors  1) 160.37 539.62 T
(10) 199.52 539.62 T
(8.6) 126.65 525.62 T
(Constr) 153.65 525.62 T
(uction of a simple airport  1) 186.36 525.62 T
(12) 319.89 525.62 T
(8.7) 126.65 511.62 T
(The) 153.65 511.62 T
4 F
(select) 174.81 511.62 T
1 F
( and) 214.41 511.62 T
4 F
(block) 238.54 511.62 T
1 F
( contr) 271.54 511.62 T
(ol str) 299.31 511.62 T
(uctur) 323.77 511.62 T
(es  1) 349.66 511.62 T
(17) 369.98 511.62 T
(8.8) 126.65 497.62 T
(Summary  121) 153.65 497.62 T
3 13 Q
(9) 99.65 475.29 T
(Advanced Collections and Control Flow) 126.65 475.29 T
(123) 341.04 475.29 T
1 11 Q
(9.1) 126.65 455.62 T
(Simple landing and four appr) 153.65 455.62 T
(oaches  123) 298.1 455.62 T
(9.2) 126.65 441.62 T
(Need for an impr) 153.65 441.62 T
(oved landing algorithm  130) 237.89 441.62 T
(9.3) 126.65 427.62 T
(Classes that stor) 153.65 427.62 T
(e mor) 232.39 427.62 T
(e than one vehicle  131) 260.27 427.62 T
(9.4) 126.65 413.62 T
(Air) 153.65 413.62 T
(craft transitions  138) 169.55 413.62 T
(9.5) 126.65 399.62 T
(Pr) 153.65 399.62 T
(otocols for handling air) 164.44 399.62 T
(craft  139) 277.85 399.62 T
(9.6) 126.65 385.62 T
(Methods that handle air) 153.65 385.62 T
(craft transitions  139) 270.37 385.62 T
(9.7) 126.65 371.62 T
(Method for sorting  148) 153.65 371.62 T
(9.8) 126.65 357.62 T
(Summary  149) 153.65 357.62 T
3 13 Q
(10) 99.65 335.29 T
(Exceptions) 126.65 335.29 T
(151) 196.52 335.29 T
1 11 Q
(10.1) 126.65 315.62 T
(An informal exception pr) 153.65 315.62 T
(otocol  151) 276.55 315.62 T
(10.2) 126.65 301.62 T
(Signaling conditions  156) 153.65 301.62 T
(10.3) 126.65 287.62 T
(Establishing handlers  161) 153.65 287.62 T
(10.4) 126.65 273.62 T
(Using) 153.65 273.62 T
4 F
(let handler) 185.34 273.62 T
1 F
( to implement a r) 257.94 273.62 T
(ecovery pr) 341.14 273.62 T
(otocol  163) 392.76 273.62 T
(10.5) 126.65 259.62 T
(De\336ning an err) 153.65 259.62 T
(or handler with r) 227.37 259.62 T
(ecovery  171) 310.32 259.62 T
(10.6) 126.65 245.62 T
(Pr) 153.65 245.62 T
(otected operations and the) 164.44 245.62 T
4 F
(block) 296.23 245.62 T
1 F
( constr) 329.23 245.62 T
(uct  176) 361.78 245.62 T
(10.7) 126.65 231.62 T
(Summary  178) 153.65 231.62 T
3 13 Q
(11) 99.65 209.29 T
(Libraries and Modules) 126.65 209.29 T
(181) 252.8 209.29 T
1 11 Q
(1) 126.65 189.62 T
(1.1) 131.54 189.62 T
(Libraries  182) 153.65 189.62 T
(1) 126.65 175.62 T
(1.2) 131.54 175.62 T
(Modules  182) 153.65 175.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "v" 5
%%Page: "vi" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(vi) 63.65 702.62 T
0 9.5 Q
(Contents) 82.93 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 495.65 672.95 R
V
1 11 Q
0 X
(1) 126.65 665.62 T
(1.3) 131.54 665.62 T
(Module declaration  183) 153.65 665.62 T
(1) 126.65 651.62 T
(1.4) 131.54 651.62 T
(Library declaration  187) 153.65 651.62 T
(1) 126.65 637.62 T
(1.5) 131.54 637.62 T
(Inter) 153.65 637.62 T
(change \336les  188) 176.76 637.62 T
(1) 126.65 623.62 T
(1.6) 131.54 623.62 T
(Shar) 153.65 623.62 T
(ed library  192) 175.47 623.62 T
(1) 126.65 609.62 T
(1.7) 131.54 609.62 T
(Pr) 153.65 609.62 T
(otocol design  195) 164.44 609.62 T
(1) 126.65 595.62 T
(1.8) 131.54 595.62 T
(Summary  200) 153.65 595.62 T
3 13 Q
(12) 99.65 573.29 T
(Performance and Flexibility) 126.65 573.29 T
(201) 278.88 573.29 T
1 11 Q
(12.1) 126.65 553.62 T
(T) 153.65 553.62 T
(ype declarations  202) 159.4 553.62 T
(12.2) 126.65 539.62 T
(Limited types  204) 153.65 539.62 T
(12.3) 126.65 525.62 T
(T) 153.65 525.62 T
(yped generic functions  205) 159.4 525.62 T
(12.4) 126.65 511.62 T
(Open generic functions  206) 153.65 511.62 T
(12.5) 126.65 497.62 T
(Open classes  207) 153.65 497.62 T
(12.6) 126.65 483.62 T
(Sealed domains  208) 153.65 483.62 T
(12.7) 126.65 469.62 T
(Primary classes  21) 153.65 469.62 T
(1) 245 469.62 T
(12.8) 126.65 455.62 T
(Summary  213) 153.65 455.62 T
3 13 Q
(13) 99.65 433.29 T
(Macros) 126.65 433.29 T
(215) 176.97 433.29 T
1 11 Q
(13.1) 126.65 413.62 T
(What is a \322macr) 153.65 413.62 T
(o\323?  215) 231.49 413.62 T
(13.2) 126.65 399.62 T
(Patterns and templates  216) 153.65 399.62 T
(13.3) 126.65 385.62 T
(Macr) 153.65 385.62 T
(o hygiene  218) 178.59 385.62 T
(13.4) 126.65 371.62 T
(Evaluation in macr) 153.65 371.62 T
(os  218) 245.96 371.62 T
(13.5) 126.65 357.62 T
(Constraints  220) 153.65 357.62 T
(13.6) 126.65 343.62 T
(Mor) 153.65 343.62 T
(e complex patterns  222) 174.21 343.62 T
(13.7) 126.65 329.62 T
(Mor) 153.65 329.62 T
(e hygiene  223) 174.21 329.62 T
(13.8) 126.65 315.62 T
(Summary  224) 153.65 315.62 T
3 13 Q
(14) 99.65 293.29 T
(Multiple Inheritance) 126.65 293.29 T
(225) 239.76 293.29 T
1 11 Q
(14.1) 126.65 273.62 T
(Example of multiple inheritance  226) 153.65 273.62 T
(14.2) 126.65 259.62 T
(Multiple Inheritance and slots  230) 153.65 259.62 T
(14.3) 126.65 245.62 T
(The class pr) 153.65 245.62 T
(ecedence list  231) 211.23 245.62 T
(14.4) 126.65 231.62 T
(Multiple inheritance and method dispatch  237) 153.65 231.62 T
(14.5) 126.65 217.62 T
(When should you use multiple inheritance?  240) 153.65 217.62 T
3 13 Q
(Appendix A) 99.65 195.29 T
(Source Code of the Airport Example) 171.88 195.29 T
(243) 367.92 195.29 T
(Appendix B) 99.65 170.29 T
(The) 171.88 170.29 T
4 F
(format) 193.79 170.29 T
3 F
( Function) 240.59 170.29 T
(245) 301.56 170.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "vi" 6
%%Page: "vii" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Contents) 473.87 702.62 T
2 11 Q
(vii) 518.21 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 495.65 672.95 R
V
3 13 Q
0 X
(Appendix C) 99.65 664.29 T
(Internet Resources on Dylan) 171.88 664.29 T
(247) 329.42 664.29 T
(Glossary) 99.65 639.29 T
(249) 158.28 639.29 T
(Index) 99.65 614.29 T
(253) 140.49 614.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "vii" 7
%%Page: "viii" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(viii) 63.65 702.62 T
0 9.5 Q
(Contents) 90.25 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 495.65 672.95 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "viii" 8
%%Page: "ix" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(ix) 320.07 135.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
97.98 590.45 493.98 644.45 R
7 X
V
97.98 616.9 493.98 644.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
97.98 616.9 493.98 644.45 R
7 X
0 0 0 1 0 0 0 K
V
97.98 637.6 259.98 637.6 2 L
3 H
2 Z
0 X
N
97.98 628.6 259.98 628.6 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Pr) 97.98 596.9 T
(eface) 127.41 596.9 T
99.65 159.95 513.65 456.95 R
7 X
V
3 13 Q
0 X
(Dylan) 99.65 448.29 T
1 11 Q
-0.29 (Dylan \050DYnamic LANguage\051 is a new pr) 99.65 428.62 P
-0.29 (ogramming language invented by Apple) 296.01 428.62 P
(Computer and several partners. Dylan is dynamic, it is object-oriented, and it) 99.65 414.62 T
(delivers ef) 99.65 400.62 T
(\336cient applications.) 150.02 400.62 T
(Dylan is up and r) 126.65 386.62 T
(unning. Y) 211.37 386.62 T
(ou can get it fr) 258.35 386.62 T
(om Apple Computer) 328.34 386.62 T
(, Harlequin) 428.96 386.62 T
(Incorporated, Carnegie-Mellon University) 99.65 372.62 T
(, and other or) 303.67 372.62 T
(ganizations. Dylan imple-) 369.05 372.62 T
-0.24 (mentations r) 99.65 358.62 P
-0.24 (un on the Macintosh, W) 160.74 358.62 P
-0.24 (indows, and Unix. Full-\337edged pr) 275.69 358.62 P
-0.24 (oducts pr) 440.22 358.62 P
-0.24 (o-) 485.98 358.62 P
-0.26 (vide both a compiler and a development envir) 99.65 344.62 P
-0.26 (onment. Y) 322.9 344.62 P
-0.26 (ou can also obtain public-) 371.84 344.62 P
-0.36 (domain implementations for most popular computer platforms. See Appendix C,) 99.65 330.62 P
(\322Internet Resour) 99.65 316.62 T
(ces on Dylan\323, for further information on Dylan implementa-) 180.53 316.62 T
(tions.) 99.65 302.62 T
3 13 Q
(Audience) 99.65 271.29 T
1 11 Q
(This book is written for application pr) 99.65 251.62 T
(ogrammers who have experience working) 284.27 251.62 T
(in a conventional language such as C, Pascal, COBOL, FOR) 99.65 237.62 T
(TRAN, or BASIC.) 386.74 237.62 T
(Familiarity with object-oriented pr) 99.65 223.62 T
(ogramming and dynamic languages is not) 267.56 223.62 T
(r) 99.65 209.62 T
(equir) 103.79 209.62 T
(ed.) 129.21 209.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "ix" 9
%%Page: "x" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(x) 63.65 702.62 T
0 9.5 Q
(Preface) 78.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(Goal of this book) 99.65 664.29 T
1 11 Q
(The primary goal of this book is to teach you how to pr) 99.65 644.62 T
(ogram in Dylan, and how) 367.23 644.62 T
-0.3 (to write pr) 99.65 630.62 P
-0.3 (ograms in an object-oriented style. Along the way) 150.48 630.62 P
-0.3 (, we hope to convince) 389.05 630.62 P
-0.28 (you to use Dylan. It is intended to be a practical, elegant, and fun language to use.) 99.65 616.62 P
-0.21 (This book is a tutorial on pr) 99.65 602.62 P
-0.21 (ogramming in Dylan, and it does the following things:) 232.7 602.62 P
(\245) 108.65 582.62 T
-0.16 (Begins with the most basic use of Dylan, and gradually expands to showing) 126.65 582.62 P
(the mor) 126.65 568.62 T
(e powerful and advanced techniques.) 164.52 568.62 T
(\245) 108.65 548.62 T
(Gives the \337avor of working with the Dylan language in a typical Dylan) 126.65 548.62 T
(envir) 126.65 534.62 T
(onment.) 151.88 534.62 T
(\245) 108.65 514.62 T
(Shows how to de\336ne classes and methods that work together to solve a) 126.65 514.62 T
(pr) 126.65 500.62 T
(oblem.) 137.41 500.62 T
(\245) 108.65 480.62 T
-0.1 (Shows how to use many of the classes, functions, and options to good ef) 126.65 480.62 P
-0.1 (fect) 475.59 480.62 P
(within the context of an example application.) 126.65 466.62 T
(This book does not attempt to be as complete as the) 99.65 446.62 T
0 F
(Dylan Refer) 352.69 446.62 T
(ence Manual) 406.59 446.62 T
1 F
(, and) 463.93 446.62 T
(does not pr) 99.65 432.62 T
(ovide this kind of material:) 154.56 432.62 T
(\245) 108.65 412.62 T
(Complete descriptions of all classes and functions pr) 126.65 412.62 T
(ovided by Dylan.) 382.14 412.62 T
(\245) 108.65 392.62 T
(Complete descriptions of the detailed mechanisms in Dylan, such as how) 126.65 392.62 T
(slot initialization works in every case.) 126.65 378.62 T
3 13 Q
(Boxes) 99.65 347.29 T
1 11 Q
-0.18 (One of our challenges in writing this book was how to intr) 99.65 327.62 P
-0.18 (oduce Dylan gradually) 381.35 327.62 P
-0.2 (to you. As is tr) 99.65 313.62 P
-0.2 (ue of any pr) 169.87 313.62 P
-0.2 (ogramming language, everything in Dylan seems to be) 227.87 313.62 P
(connected to everything else. Often, a topic or example brings up another) 99.65 299.62 T
(, unr) 455.43 299.62 T
(e-) 478.11 299.62 T
(lated topic. W) 99.65 285.62 T
(e use a box to discuss the unr) 166.45 285.62 T
(elated topic. For example, in the sec-) 308.26 285.62 T
(tion describing variables, the following box occurs:) 99.65 271.62 T
2 F
(Convention:) 132.65 237.62 T
1 F
(Class names ar) 197.43 237.62 T
(e surr) 269.95 237.62 T
(ounded with angle brackets \321 for) 297.76 237.62 T
(example,) 132.65 223.62 T
4 9.5 Q
(<integer>) 179.39 223.62 T
1 11 Q
(.) 230.69 223.62 T
126.65 250.83 126.65 216.08 2 L
V
0.25 H
0 Z
N
477.65 250.83 477.65 216.08 2 L
V
N
126.52 250.95 477.77 250.95 2 L
V
N
126.52 215.95 477.77 215.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "x" 10
%%Page: "xi" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Preface) 485.37 702.62 T
2 11 Q
(xi) 522.48 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(The box describes the convention of class names because we use a class name in) 99.65 665.62 T
(an example in that section, and you might well wonder what the angle brackets) 99.65 651.62 T
(mean.) 99.65 637.62 T
(In addition to using boxes to describe naming conventions, we use boxes to) 126.65 623.62 T
(describe cautions \050for possible pitfalls\051, performance implications \050in sections) 99.65 609.62 T
(wher) 99.65 595.62 T
(e you may wonder about performance\051, and brief information about func-) 124.64 595.62 T
(tions that ar) 99.65 581.62 T
(e used by an example but ar) 157.73 581.62 T
(e not central to the point being made by) 294.07 581.62 T
(the example.) 99.65 567.62 T
3 13 Q
(Program Examples) 99.65 536.29 T
1 11 Q
-0.2 (This book includes many pr) 99.65 516.62 P
-0.2 (ogram examples. Our appr) 234.52 516.62 P
-0.2 (oach is to pr) 364.99 516.62 P
-0.2 (esent an exam-) 423.64 516.62 P
-0.01 (ple simply at \336rst, and to expand it gradually to highlight dif) 99.65 502.62 P
-0.01 (fer) 395.61 502.62 P
-0.01 (ent concepts. The) 408.69 502.62 P
(central example of this book is an application that simulates airplanes, r) 99.65 488.62 T
(unways,) 447.73 488.62 T
(gates, \337ights, airports, and so on. The sample application schedules gates for) 99.65 474.62 T
(incoming air) 99.65 460.62 T
(craft, and it r) 161.17 460.62 T
(equir) 223.71 460.62 T
(es functions that handle position and time. The) 249.12 460.62 T
(position and time classes ar) 99.65 446.62 T
(e simple, so we develop them in the early chapters.) 233.21 446.62 T
(Dylan\325s cor) 126.65 432.62 T
(e language is lean. It does not include input\320output facilities,) 181.89 432.62 T
(support for a user interface, or interfaces for communicating with pr) 99.65 418.62 T
(ograms writ-) 431.41 418.62 T
(ten in other languages. These featur) 99.65 404.62 T
(es ar) 273.16 404.62 T
(e available in libraries supplied by ven-) 295.49 404.62 T
(dors or in the public domain. W) 99.65 390.62 T
(e want this book to be applicable to the widest) 253.99 390.62 T
-0.38 (possible range of Dylan implementations, so we focus on the cor) 99.65 376.62 P
-0.38 (e Dylan language) 408.8 376.62 P
(fr) 99.65 362.62 T
(eely) 107.46 362.62 T
(, and use only those library interfaces that ar) 126.09 362.62 T
(e widely available.) 341.98 362.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "xi" 11
%%Page: "xii" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(xii) 63.65 702.62 T
0 9.5 Q
(Preface) 85.97 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "xii" 12
%%Page: "11" 13
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(1) 292.35 135.95 T
(1) 297.45 135.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(2) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(2) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Quick Start) 100.65 591.4 T
99.65 159.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(In this chapter) 99.65 449.62 T
(, we jump right into Dylan. W) 168.89 449.62 T
(e \336rst show how to interact with a) 313.43 449.62 T
-0.43 (typical development envir) 99.65 435.62 P
-0.43 (onment, to use several of the basic arithmetic functions,) 226.88 435.62 P
(to de\336ne a variable, and to de\336ne methods. W) 99.65 421.62 T
(e then show how to de\336ne a class,) 322.75 421.62 T
(to cr) 99.65 407.62 T
(eate an instance, to de\336ne a method, and to call a generic function on the) 121.02 407.62 T
(instance.) 99.65 393.62 T
3 15 Q
(2.1  Dialog with a Dylan listener) 99.65 353.95 T
1 11 Q
(A Dylan) 99.65 333.62 T
2 F
(development environment) 143.44 333.62 T
1 F
( can contain many tools, such as an editor) 276.97 333.62 T
(custom-tailor) 99.65 319.62 T
(ed for Dylan code, a br) 164.44 319.62 T
(owser) 275.29 319.62 T
(, a compiler) 303.93 319.62 T
(, a debugger) 360.1 319.62 T
(, and a) 419.58 319.62 T
2 F
(listener) 454.71 319.62 T
1 F
-0.13 (that enables you to type in expr) 99.65 305.62 P
-0.13 (essions and to see their values. A Dylan listener is) 252.05 305.62 P
(similar to a BASIC interpr) 99.65 291.62 T
(eter) 225.69 291.62 T
(. Y) 243.34 291.62 T
(ou can use the listener to test pieces of your pr) 255.17 291.62 T
(o-) 479.97 291.62 T
(gram without compiling the whole pr) 99.65 277.62 T
(ogram. When you start using Dylan, a nice) 283.06 277.62 T
-0.07 (way to learn and explor) 99.65 263.62 P
-0.07 (e is to use the listener) 215 263.62 P
-0.07 (. Dylan also supports the traditional) 318.08 263.62 P
-0.12 (appr) 99.65 249.62 P
-0.12 (oach of editing sour) 122.52 249.62 P
-0.12 (ce \336les, compiling them, and r) 218.83 249.62 P
-0.12 (unning them. This chapter) 364.63 249.62 P
(demonstrates using a listener) 99.65 235.62 T
(.) 241.26 235.62 T
(Her) 126.65 221.62 T
(e is a sample dialog between a user and a listener) 145.22 221.62 T
(.) 383.76 221.62 T
5 9 Q
(?) 99.65 200.95 T
4 F
( 7 + 12;) 105.05 200.95 T
5 F
(19) 99.65 189.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 13
%%Page: "12" 14
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(12) 63.65 702.62 T
0 9.5 Q
(2.2 Variables and constants) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(In this example, the Dylan pr) 99.65 665.62 T
(ompt is the question mark,) 241.1 665.62 T
5 9 Q
(?) 374.23 665.62 T
1 11 Q
(. The user types in) 379.63 665.62 T
4 9.5 Q
(7 +) 471.3 665.62 T
(12;) 99.65 651.62 T
1 11 Q
(and pr) 122.45 651.62 T
(esses Enter) 154.58 651.62 T
(. The spaces ar) 207.37 651.62 T
(ound the plus sign,) 278.02 651.62 T
4 9.5 Q
(+) 374.28 651.62 T
1 11 Q
(, ar) 379.98 651.62 T
(e r) 395.13 651.62 T
(equir) 407.3 651.62 T
(ed \050see fol-) 432.7 651.62 T
(lowing box\051. The semicolon indicates the end of the statement. The listener exe-) 99.65 637.62 T
-0.34 (cutes the statement and displays the value r) 99.65 623.62 P
-0.34 (eturned by it, which is) 309.94 623.62 P
4 9.5 Q
-0.69 (19) 419.9 623.62 P
1 11 Q
-0.34 (. The listener) 431.3 623.62 P
(displays any r) 99.65 609.62 T
(eturn values and output pr) 167.99 609.62 T
(oduced by the statement. The) 299.14 609.62 T
4 9.5 Q
(bold) 445.32 609.62 T
-0.27 (typewriter font) 99.65 595.62 P
1 11 Q
-0.13 ( shows what the user types. The) 184.87 595.62 P
5 9 Q
-0.26 (bold-oblique typewriter font) 342.35 595.62 P
1 11 Q
(shows what the listener displays.) 99.65 581.62 T
(W) 99.65 457.62 T
(e can do other simple arithmetic on values:) 109.64 457.62 T
5 9 Q
(?) 99.65 436.95 T
4 F
( 7 * 12;) 105.05 436.95 T
5 F
(84) 99.65 425.95 T
(?) 99.65 406.95 T
4 F
( 7 - 12;) 105.05 406.95 T
5 F
(-5) 99.65 395.95 T
(?) 99.65 376.95 T
4 F
( 7 + 12 + 300 + .5;) 105.05 376.95 T
5 F
(319.5) 99.65 365.95 T
(?) 99.65 346.95 T
4 F
( 7 * 12 * 300 * .5;) 105.05 346.95 T
5 F
(12600) 99.65 335.95 T
3 15 Q
(2.2  V) 99.65 297.95 T
(ariables and constants) 131.12 297.95 T
1 11 Q
(W) 99.65 277.62 T
(e can de\336ne variables for storing values:) 109.64 277.62 T
5 9 Q
(?) 99.65 256.95 T
4 F
(def) 110.45 256.95 T
(ine variable *my-number* = 7;) 126.65 256.95 T
5 F
(?) 99.65 237.95 T
4 F
(def) 110.45 237.95 T
(ine variable *your-number* = 12;) 126.65 237.95 T
1 11 Q
(In Dylan, these variables ar) 99.65 217.62 T
(e called) 232.05 217.62 T
2 F
(module variables) 271.6 217.62 T
1 F
(. A module variable has a) 358.68 217.62 T
(name and a value. For now) 99.65 203.62 T
(, you can consider module variables to be like global) 231.01 203.62 T
(variables in other languages. When you de\336ne a module variable, you must) 99.65 189.62 T
2 F
(ini-) 470.59 189.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.28 (Caution: Spaces are needed!) 132.65 547.62 P
1 F
-0.28 (In Dylan, it is legal to use characters such) 274.8 547.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(as) 132.65 533.62 T
4 9.5 Q
(+, -, *, <) 145.56 533.62 T
1 11 Q
(,) 202.56 533.62 T
4 9.5 Q
(>) 208.06 533.62 T
1 11 Q
(, and) 213.76 533.62 T
4 9.5 Q
(/) 240.63 533.62 T
1 11 Q
( in names of variables. Ther) 246.34 533.62 T
(efor) 380.19 533.62 T
(e, you must) 399.28 533.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(leave spaces ar) 132.65 519.62 T
(ound those operators in code, to make it clear that you) 204.84 519.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.26 (ar) 132.65 505.62 P
-0.26 (e using them as operators, and that they ar) 142.29 505.62 P
-0.26 (e not part of the name of a) 347.44 505.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(variable.) 132.65 491.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 560.83 126.65 484.08 2 L
V
0.25 H
0 Z
N
477.65 560.83 477.65 484.08 2 L
V
N
126.52 560.95 477.77 560.95 2 L
V
N
126.52 483.95 477.77 483.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 14
%%Page: "13" 15
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 458.73 702.62 T
2 11 Q
(13) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 X
(tialize) 99.65 665.62 T
1 F
( it \050that is, pr) 130.8 665.62 T
(ovide an initial value for it\051. For example, the initial value of) 192.7 665.62 T
4 9.5 Q
(*my-number*) 99.65 651.62 T
1 11 Q
( is) 162.35 651.62 T
4 9.5 Q
(7) 175.71 651.62 T
1 11 Q
(.) 181.41 651.62 T
(W) 99.65 555.62 T
(e can ask the listener for the value of a module variable:) 109.64 555.62 T
5 9 Q
(?) 99.65 534.95 T
4 F
(*my-number*;) 110.45 534.95 T
5 F
(7) 99.65 523.95 T
(?) 99.65 504.95 T
4 F
(*your-number*;) 110.45 504.95 T
5 F
(12) 99.65 493.95 T
1 11 Q
(W) 99.65 473.62 T
(e can add the values stor) 109.64 473.62 T
(ed in these variables:) 229.52 473.62 T
5 9 Q
(?) 99.65 452.95 T
4 F
(*my-number* + *your-number*;) 110.45 452.95 T
5 F
(19) 99.65 441.95 T
3 13 Q
(2.2.1  V) 99.65 412.29 T
(ariables that have type constraints) 135.81 412.29 T
1 11 Q
-0.16 (W) 99.65 392.62 P
-0.16 (e de\336ned) 109.64 392.62 P
4 9.5 Q
-0.34 (*my-number*) 157.11 392.62 P
1 11 Q
-0.16 ( and) 219.81 392.62 P
4 9.5 Q
-0.34 (*your-number*) 243.61 392.62 P
1 11 Q
-0.16 ( without giving a) 317.71 392.62 P
2 F
-0.16 (type constraint) 403.39 392.62 P
1 F
-0.16 ( on) 478.07 392.62 P
(the variables. Thus, we can stor) 99.65 378.62 T
(e any type of value in these variables. For exam-) 252.21 378.62 T
(ple, her) 99.65 364.62 T
(e we use the assignment operator) 136.05 364.62 T
(,) 297.7 364.62 T
4 9.5 Q
(:=) 303.2 364.62 T
1 11 Q
( , to stor) 314.6 364.62 T
(e strings in these variables:) 353.6 364.62 T
5 9 Q
(?) 99.65 343.95 T
4 F
(*my-number* :=) 110.45 343.95 T
5 F
(") 191.45 343.95 T
4 F
(seven";) 196.85 343.95 T
5 F
("seven") 99.65 332.95 T
(?) 99.65 313.95 T
4 F
(*your-number* :=) 110.45 313.95 T
5 F
(") 202.25 313.95 T
4 F
(twelve";) 207.65 313.95 T
5 F
("twelve") 99.65 302.95 T
1 11 Q
(What happens if we try to add the string values stor) 99.65 282.62 T
(ed in these variables?) 352.44 282.62 T
5 9 Q
(?) 99.65 261.95 T
4 F
(*my-number* + *your-number*;) 110.45 261.95 T
5 F
(ERROR: In + of \050"seven", "twelve"\051 arguments should be of type NUMBER.) 99.65 250.95 T
1 11 Q
(Dylan signals an err) 99.65 230.62 T
(or because the) 197.04 230.62 T
4 9.5 Q
(+) 269.2 230.62 T
1 11 Q
( operator does not know how to operate on) 274.9 230.62 T
(string ar) 99.65 216.62 T
(guments.) 140.36 216.62 T
-0.07 (W) 126.65 202.62 P
-0.07 (e can r) 136.64 202.62 P
-0.07 (ede\336ne the variables to include a type constraint, which would pr) 168.2 202.62 P
-0.07 (e-) 486.72 202.62 P
-0.28 (vent err) 99.65 188.62 P
-0.28 (ors such as the pr) 137.35 188.62 P
-0.28 (eceding one by ensuring that the variables can hold only) 221.01 188.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Convention:) 132.65 617.62 T
1 F
( Module variables that hold pr) 194.68 617.62 T
(ogram data that) 342.8 617.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(changes during the execution of the pr) 132.65 603.62 T
(ogram ar) 319.67 603.62 T
(e surr) 363.75 603.62 T
(ounded by) 391.55 603.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(asterisks \321 for example,) 132.65 589.62 T
4 9.5 Q
(*my-number*) 254.66 589.62 T
1 11 Q
(.) 317.36 589.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 630.83 126.65 582.08 2 L
V
0.25 H
0 Z
N
477.65 630.83 477.65 582.08 2 L
V
N
126.52 630.95 477.77 630.95 2 L
V
N
126.52 581.95 477.77 581.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 15
%%Page: "14" 16
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(14) 63.65 702.62 T
0 9.5 Q
(2.2 Variables and constants) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(numbers. W) 99.65 665.62 T
(e specify that) 158.24 665.62 T
4 9.5 Q
(*my-number*) 225.25 665.62 T
1 11 Q
( can hold any integer) 287.95 665.62 T
(, and that) 389.45 665.62 T
4 9.5 Q
(*your-num-) 438.15 665.62 T
(ber*) 99.65 651.62 T
1 11 Q
( can hold a single-pr) 122.45 651.62 T
(ecision \337oating-point number:) 221.34 651.62 T
5 9 Q
(?) 99.65 630.95 T
4 F
( def) 105.05 630.95 T
(ine variable *my-number* :: <integer> = 7;) 126.65 630.95 T
5 F
(?) 99.65 611.95 T
4 F
( def) 105.05 611.95 T
(ine variable *your-number* :: <single-f) 126.65 611.95 T
(loat> = 12.01;) 337.25 611.95 T
1 11 Q
(What happens if we try to stor) 99.65 591.62 T
(e a string in one of the variables?) 247.44 591.62 T
5 9 Q
(?) 99.65 570.95 T
4 F
(*my-number* :=) 110.45 570.95 T
5 F
(") 191.45 570.95 T
4 F
(seven";) 196.85 570.95 T
5 F
(ERROR: The value of *my-number* must be of type <INTEGER>) 99.65 559.95 T
1 11 Q
-0.42 (Both) 99.65 539.62 P
4 9.5 Q
-0.88 (<integer>) 124.69 539.62 P
1 11 Q
-0.42 ( and) 175.99 539.62 P
4 9.5 Q
-0.88 (<single-f) 199.27 539.62 P
-0.88 (loat>) 250.57 539.62 P
1 11 Q
-0.42 ( ar) 279.07 539.62 P
-0.42 (e) 291.04 539.62 P
2 F
-0.42 (classes.) 298.64 539.62 P
1 F
-0.42 (For now) 337.91 539.62 P
-0.42 (, you can think of a class) 377.28 539.62 P
(as being like a datatype in another language. Dylan pr) 99.65 525.62 T
(ovides a set of built-in) 362.9 525.62 T
(classes, and you can also de\336ne new classes.) 99.65 511.62 T
(Note that the) 99.65 429.62 T
4 9.5 Q
(+) 166.23 429.62 T
1 11 Q
( operator knows how to operate on numbers of dif) 171.93 429.62 T
(fer) 417.04 429.62 T
(ent types:) 430.12 429.62 T
5 9 Q
(?) 99.65 408.95 T
4 F
(*my-number* + *your-number*;) 110.45 408.95 T
5 F
(19.01) 99.65 397.95 T
3 13 Q
(2.2.2  Constants) 99.65 368.29 T
1 11 Q
(A) 99.65 348.62 T
2 F
(constant) 110.96 348.62 T
1 F
( is much like a module variable, except that an attempt to modify a) 153.11 348.62 T
(constant is an err) 99.65 334.62 T
(or) 182.46 334.62 T
(. Y) 191.99 334.62 T
(ou use) 203.82 334.62 T
4 9.5 Q
(def) 238.52 334.62 T
(ine constant) 255.62 334.62 T
1 11 Q
( to de\336ne a constant, in the same) 324.02 334.62 T
(way that you use) 99.65 320.62 T
4 9.5 Q
(def) 185.83 320.62 T
(ine variable) 202.93 320.62 T
1 11 Q
( to de\336ne a variable. Y) 271.33 320.62 T
(ou must initialize the) 378.88 320.62 T
(value of the constant, and you cannot change its value thr) 99.65 306.62 T
(oughout the execution) 379.81 306.62 T
(of a Dylan pr) 99.65 292.62 T
(ogram. For example,) 163.56 292.62 T
5 9 Q
(?) 99.65 271.95 T
4 F
( def) 105.05 271.95 T
(ine constant $pi = 3.14159;) 126.65 271.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Convention:) 132.65 477.62 T
1 F
(Class names ar) 197.43 477.62 T
(e surr) 269.95 477.62 T
(ounded with angle brackets \321 for) 297.76 477.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(example,) 132.65 463.62 T
4 9.5 Q
(<integer>) 179.39 463.62 T
1 11 Q
(.) 230.69 463.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Convention:) 132.65 231.62 T
1 F
(Pr) 197.43 231.62 T
(ogram data constants start with the character dollar) 208.22 231.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sign,) 132.65 217.62 T
4 9.5 Q
($) 158.53 217.62 T
1 11 Q
(\321 for example,) 169.93 217.62 T
4 9.5 Q
($pi) 247.18 217.62 T
1 11 Q
(.) 264.28 217.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 490.83 126.65 456.08 2 L
V
0.25 H
0 Z
N
477.65 490.83 477.65 456.08 2 L
V
N
126.52 490.95 477.77 490.95 2 L
V
N
126.52 455.95 477.77 455.95 2 L
V
N
126.65 244.83 126.65 210.08 2 L
V
N
477.65 244.83 477.65 210.08 2 L
V
N
126.52 244.95 477.77 244.95 2 L
V
N
126.52 209.95 477.77 209.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 16
%%Page: "15" 17
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 458.73 702.62 T
2 11 Q
(15) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(2.2.3  Local variables) 99.65 664.29 T
1 11 Q
(Y) 99.65 644.62 T
(ou can de\336ne) 105.97 644.62 T
2 F
(local variables) 173.96 644.62 T
1 F
( by using) 246.37 644.62 T
4 9.5 Q
(let) 293.83 644.62 T
1 11 Q
(. A local variable has scope within a) 310.93 644.62 T
(body) 99.65 630.62 T
(. One way to cr) 123.35 630.62 T
(eate a body is to use) 196.83 630.62 T
4 9.5 Q
(begin) 297.41 630.62 T
1 11 Q
( to start it and) 325.91 630.62 T
4 9.5 Q
(end) 396.34 630.62 T
1 11 Q
( to \336nish it.) 413.44 630.62 T
5 9 Q
(?) 99.65 609.95 T
4 F
(begin) 110.45 609.95 T
(let radius = 5.0;) 121.25 598.95 T
(let circumference = 2.0 * $pi * radius;) 121.25 587.95 T
(circumference;) 121.25 576.95 T
(end;) 110.45 565.95 T
5 F
(31.4159) 99.65 554.95 T
1 11 Q
(The local variables) 99.65 534.62 T
4 9.5 Q
(radius) 193.08 534.62 T
1 11 Q
( and) 227.28 534.62 T
4 9.5 Q
(circumference) 251.4 534.62 T
1 11 Q
( ar) 325.51 534.62 T
(e de\336ned, initialized, and used) 337.9 534.62 T
-0.08 (within the body) 99.65 520.62 P
-0.08 (. The value r) 175.91 520.62 P
-0.08 (eturned by the body is the value of the statement exe-) 236.04 520.62 P
(cuted last in the body) 99.65 506.62 T
(, which is) 203.26 506.62 T
4 9.5 Q
(circumference) 252.18 506.62 T
1 11 Q
(. Note that, once the body has) 326.29 506.62 T
-0.23 (r) 99.65 492.62 P
-0.23 (eturned, the local variables ar) 103.79 492.62 P
-0.23 (e no longer de\336ned, and trying to access them is an) 246.53 492.62 P
(err) 99.65 478.62 T
(or:) 113.41 478.62 T
5 9 Q
(?) 99.65 457.95 T
4 F
(radius) 110.45 457.95 T
5 F
(ERROR: The variable RADIUS is unbound.) 99.65 446.95 T
3 15 Q
(2.3  De\336nitions of methods) 99.65 408.95 T
1 11 Q
(In Dylan, you de\336ne) 99.65 388.62 T
2 F
(methods) 202.31 388.62 T
1 F
(, which ar) 245.7 388.62 T
(e a kind of function. W) 293.65 388.62 T
(e de\336ne a simple) 403.8 388.62 T
(method) 99.65 374.62 T
4 9.5 Q
(say-hello) 140.1 374.62 T
1 11 Q
(:) 191.4 374.62 T
5 9 Q
(?) 99.65 353.95 T
4 F
(def) 110.45 353.95 T
(ine method say-hello \050\051) 126.65 353.95 T
(format\050*window*, "hello, world\134n"\051;) 121.25 342.95 T
(end;) 110.45 331.95 T
1 11 Q
(W) 99.65 311.62 T
(e call) 109.64 311.62 T
4 9.5 Q
(say-hello) 137.19 311.62 T
1 11 Q
(:) 188.49 311.62 T
5 9 Q
(?) 99.65 290.95 T
4 F
(say-hello \050\051;) 110.45 290.95 T
5 F
(hello, world) 99.65 279.95 T
1 11 Q
(W) 99.65 259.62 T
(e use) 109.64 259.62 T
4 9.5 Q
(def) 136.97 259.62 T
(ine method) 154.07 259.62 T
1 11 Q
( to de\336ne a method named) 211.07 259.62 T
4 9.5 Q
(say-hello) 344.28 259.62 T
1 11 Q
(. Just after the name) 395.58 259.62 T
4 9.5 Q
(say-hello) 99.65 245.62 T
1 11 Q
( comes the method\325s parameter list,) 150.95 245.62 T
4 9.5 Q
(\050\051) 326.2 245.62 T
1 11 Q
(. The method\325s parameter list is) 337.6 245.62 T
(empty) 99.65 231.62 T
(, meaning that this method takes no ar) 129.72 231.62 T
(guments. Note that the call to) 316.14 231.62 T
4 9.5 Q
(say-) 462.48 231.62 T
(hello) 99.65 217.62 T
1 11 Q
( pr) 128.15 217.62 T
(ovides an empty list, meaning that ther) 141.66 217.62 T
(e ar) 331.91 217.62 T
(e no ar) 349.58 217.62 T
(guments in the call.) 382.4 217.62 T
(The body of the) 126.65 203.62 T
4 9.5 Q
(say-hello) 205.91 203.62 T
1 11 Q
( method has one statement \321 a call to) 257.21 203.62 T
4 9.5 Q
(format) 444.36 203.62 T
1 11 Q
(, a) 478.56 203.62 T
-0.02 (library function \050not part of the cor) 99.65 189.62 P
-0.02 (e Dylan language\051. The) 269.27 189.62 P
4 9.5 Q
-0.04 (format) 384.76 189.62 P
1 11 Q
-0.02 ( function sends) 418.96 189.62 P
(formatted output to a destination. Her) 99.65 175.62 T
(e, the output is sent to the value of the) 285.79 175.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 17
%%Page: "16" 18
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(16) 63.65 702.62 T
0 9.5 Q
(2.3 Definitions of methods) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 F
0 X
(*window*) 99.65 665.62 T
1 11 Q
(, a variable that contains the window wher) 145.25 665.62 T
(e the output should appear) 352.71 665.62 T
(.) 483.94 665.62 T
(In this example,) 99.65 651.62 T
4 9.5 Q
(*window*) 179.85 651.62 T
1 11 Q
( is set to use the same display as the listener) 225.45 651.62 T
(, so we see) 437.45 651.62 T
(the output.) 99.65 637.62 T
-0.19 (A method r) 99.65 463.62 P
-0.19 (eturns whatever is r) 155.18 463.62 P
-0.19 (eturned by the statement executed last in its body) 251.54 463.62 P
-0.19 (.) 490.33 463.62 P
(In general, it can r) 99.65 449.62 T
(eturn a single value, multiple values, or no value at all. The) 187.33 449.62 T
4 9.5 Q
(say-hello) 99.65 435.62 T
1 11 Q
( method r) 150.95 435.62 T
(eturns what) 198.29 435.62 T
4 9.5 Q
(format) 259.35 435.62 T
1 11 Q
( r) 293.55 435.62 T
(eturns \321 no value at all. Note that, in) 300.45 435.62 T
-0.35 (the call to) 99.65 421.62 P
4 9.5 Q
-0.72 (say-hello) 148.49 421.62 P
1 11 Q
-0.35 (, the listener prints the output of) 199.79 421.62 P
4 9.5 Q
-0.72 (format) 357.35 421.62 P
1 11 Q
-0.35 (, and does not print a) 391.55 421.62 P
(r) 99.65 407.62 T
(eturned value \050because no value is r) 103.79 407.62 T
(eturned\051.) 278.54 407.62 T
3 13 Q
(2.3.1  A method that takes an argument) 99.65 376.29 T
1 11 Q
(W) 99.65 356.62 T
(e can de\336ne a method similar to) 109.64 356.62 T
4 9.5 Q
(say-hello) 267.87 356.62 T
1 11 Q
(, called) 319.17 356.62 T
4 9.5 Q
(say-greeting) 356.2 356.62 T
1 11 Q
(, which takes) 424.6 356.62 T
(an ar) 99.65 342.62 T
(gument:) 123.95 342.62 T
5 9 Q
(?) 99.65 321.95 T
4 F
(def) 110.45 321.95 T
(ine method say-greeting \050greeting :: <object>\051;) 126.65 321.95 T
(format\050*window*, "%s\134n", greeting\051;) 121.25 310.95 T
(end;) 110.45 299.95 T
1 11 Q
(The) 99.65 279.62 T
4 9.5 Q
(say-greeting) 120.81 279.62 T
1 11 Q
(method has one r) 194.91 279.62 T
(equir) 279.25 279.62 T
(ed parameter named) 304.66 279.62 T
4 9.5 Q
(greeting) 408.64 279.62 T
1 11 Q
(. Every) 454.24 279.62 T
-0.19 (r) 99.65 265.62 P
-0.19 (equir) 103.79 265.62 P
-0.19 (ed parameter must have a type constraint, which indicates the type that the) 129.21 265.62 P
(ar) 99.65 251.62 T
(gument must be. The) 109.29 251.62 T
4 9.5 Q
(greeting) 215.13 251.62 T
1 11 Q
( parameter has the type constraint) 260.73 251.62 T
4 9.5 Q
(<object>) 429.35 251.62 T
1 11 Q
(:) 474.95 251.62 T
4 9.5 Q
(<object>) 99.65 237.62 T
1 11 Q
( is another built-in class. All objects ar) 145.25 237.62 T
(e of the type) 329.18 237.62 T
4 9.5 Q
(<object>) 391.96 237.62 T
1 11 Q
(, so using) 437.56 237.62 T
(this class as the type constraint allows the ar) 99.65 223.62 T
(gument to be any object.) 314.64 223.62 T
(W) 126.65 209.62 T
(e can call) 136.64 209.62 T
4 9.5 Q
(say-greeting) 183.73 209.62 T
1 11 Q
( on a string:) 252.13 209.62 T
5 9 Q
(?) 99.65 188.95 T
4 F
( def) 105.05 188.95 T
(ine variable *greeting* :: <string> = "hi, there";) 126.65 188.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Quick summary of format:) 132.65 603.62 T
4 9.5 Q
( format) 265.87 603.62 T
0 11 Q
(destination string ar) 308.52 603.62 T
(g1 ... ar) 399.38 603.62 T
(gn) 433.09 603.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(destination) 159.65 589.62 T
1 F
( is the destination wher) 209.15 589.62 T
(e the output should appear) 322.8 589.62 T
(.) 454.03 589.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(string) 159.65 575.62 T
1 F
( can contain or) 186.54 575.62 T
(dinary text and formatting instr) 257.71 575.62 T
(uctions) 411.97 575.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(that begin with) 132.65 561.62 T
4 9.5 Q
(%) 209.41 561.62 T
1 11 Q
(. For each) 215.11 561.62 T
4 9.5 Q
(%) 264.63 561.62 T
1 11 Q
(, ther) 270.33 561.62 T
(e is another ar) 295.23 561.62 T
(gument giving a) 363.77 561.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value to pr) 132.65 547.62 T
(esent. The character after the) 185.32 547.62 T
4 9.5 Q
(%) 327.76 547.62 T
1 11 Q
( contr) 333.45 547.62 T
(ols how the ar) 361.23 547.62 T
(gu-) 429.84 547.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ment is pr) 132.65 533.62 T
(esented. Y) 181.74 533.62 T
(ou can use the backslash character to insert) 230.75 533.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(unusual characters in a string, such as) 132.65 519.62 T
4 9.5 Q
(\134n) 319.86 519.62 T
1 11 Q
( \050the newline character\051.) 331.26 519.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The) 159.65 505.62 T
4 9.5 Q
(format) 180.81 505.62 T
1 11 Q
( function r) 215.01 505.62 T
(eturns no values.) 265.44 505.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(For details, see Appendix B.) 159.65 491.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 616.83 126.65 484.08 2 L
V
0.25 H
0 Z
N
477.65 616.83 477.65 484.08 2 L
V
N
126.52 616.95 477.77 616.95 2 L
V
N
126.52 483.95 477.77 483.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 18
%%Page: "17" 19
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 458.73 702.62 T
2 11 Q
(17) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
5 9 Q
0 X
(?) 99.65 666.95 T
4 F
(say-greeting \050*greeting*\051;) 110.45 666.95 T
5 F
(hi, there) 99.65 655.95 T
1 11 Q
(W) 99.65 635.62 T
(e can call) 109.64 635.62 T
4 9.5 Q
(say-greeting) 156.73 635.62 T
1 11 Q
( on an integer) 225.13 635.62 T
(, although the integer does not give a par-) 291.06 635.62 T
(ticularly friendly gr) 99.65 621.62 T
(eeting:) 195 621.62 T
5 9 Q
(?) 99.65 600.95 T
4 F
(say-greeting \050*my-number*\051;) 110.45 600.95 T
5 F
(7) 99.65 589.95 T
3 13 Q
(2.3.2  T) 99.65 560.29 T
(wo methods with the same name) 135.02 560.29 T
1 11 Q
(For fun, we can change) 99.65 540.62 T
4 9.5 Q
(say-greeting) 215.12 540.62 T
1 11 Q
( to take a dif) 283.52 540.62 T
(fer) 343.46 540.62 T
(ent action for integers, such) 356.54 540.62 T
(as to print a message:) 99.65 526.62 T
5 9 Q
(Your lucky number is 7.) 99.65 505.95 T
1 11 Q
(T) 99.65 485.62 T
(o make this change, we de\336ne another method, also called) 105.38 485.62 T
4 9.5 Q
(say-greeting) 391.52 485.62 T
1 11 Q
(. This) 459.92 485.62 T
(method has one r) 99.65 471.62 T
(equir) 183.99 471.62 T
(ed parameter named) 209.4 471.62 T
4 9.5 Q
(greeting) 313.38 471.62 T
1 11 Q
(, which has the type con-) 358.98 471.62 T
(straint) 99.65 457.62 T
4 9.5 Q
(<integer>) 133.68 457.62 T
1 11 Q
(.) 184.98 457.62 T
5 9 Q
(?) 99.65 436.95 T
4 F
(def) 110.45 436.95 T
(ine method say-greeting \050greeting :: <integer>\051) 126.65 436.95 T
(format\050*window*, "Your lucky number is %s.\134n", greeting\051;) 121.25 425.95 T
(end;) 110.45 414.95 T
5 F
(?) 99.65 395.95 T
4 F
(say-greeting \050*my-number*\051;) 110.45 395.95 T
5 F
(Your lucky number is 7.) 99.65 384.95 T
1 11 Q
(A Dylan method is similar to a pr) 99.65 364.62 T
(ocedur) 262.43 364.62 T
(e or subr) 296.09 364.62 T
(outine in other languages, but) 338.73 364.62 T
(ther) 99.65 350.62 T
(e is an important dif) 119.05 350.62 T
(fer) 217.43 350.62 T
(ence. Y) 230.5 350.62 T
(ou can de\336ne mor) 264.15 350.62 T
(e than one method with the) 352.01 350.62 T
-0.33 (same name. Each one is a method for the same) 99.65 336.62 P
2 F
-0.33 (generic function) 325.25 336.62 P
1 F
-0.33 (. Figur) 407.09 336.62 P
-0.33 (e 2.1 shows) 438.47 336.62 P
(how you can pictur) 99.65 322.62 T
(e a generic function.) 194.08 322.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 19
%%Page: "18" 20
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(18) 63.65 702.62 T
0 9.5 Q
(2.4 Classes) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
99.65 474.95 513.65 482.94 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 143.53 486.61 T
(e 2.1  The) 169.74 486.61 T
4 9.5 Q
(say-greeting) 218.17 486.61 T
1 11 Q
( generic function and its methods.) 286.57 486.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(When a generic function is called, it chooses the) 99.65 454.62 T
2 F
(most speci\336c) 334.56 454.62 T
1 F
( method to call for) 399.01 454.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the ar) 99.65 440.62 T
(guments. For example, when we call the) 127.3 440.62 T
4 9.5 Q
(say-greeting) 325.87 440.62 T
1 11 Q
( generic function) 394.27 440.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(with an integer) 99.65 426.62 T
(, the method whose parameter is of the type) 172.79 426.62 T
4 9.5 Q
(<integer>) 389.27 426.62 T
1 11 Q
( is called:) 440.57 426.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(?) 99.65 405.95 T
4 F
(say-greeting \0501000\051;) 110.45 405.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(Your lucky number is 1000.) 99.65 394.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(When we call the) 99.65 374.62 T
4 9.5 Q
(say-greeting) 186.21 374.62 T
1 11 Q
( generic function with an ar) 254.61 374.62 T
(gument that is not an) 388.53 374.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(integer) 99.65 360.62 T
(, the method whose parameter is of the type) 133.02 360.62 T
4 9.5 Q
(<object>) 349.5 360.62 T
1 11 Q
( is called:) 395.1 360.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(?) 99.65 339.95 T
4 F
(say-greeting \050"Buenos Dias"\051;) 110.45 339.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(Buenos Dias) 99.65 328.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(?) 99.65 309.95 T
4 F
(say-greeting \050$pi\051;) 110.45 309.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(3.14159) 99.65 298.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 15 Q
(2.4  Classes) 99.65 260.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(W) 99.65 240.62 T
(e have alr) 109.64 240.62 T
(eady seen examples of classes in Dylan:) 156.64 240.62 T
4 9.5 Q
(<integer>) 351.6 240.62 T
1 11 Q
(,) 402.9 240.62 T
4 9.5 Q
(<single-f) 408.4 240.62 T
(loat>) 459.7 240.62 T
1 11 Q
(,) 488.2 240.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<string>) 99.65 226.62 T
1 11 Q
(, and) 145.25 226.62 T
4 9.5 Q
(<object>) 172.12 226.62 T
1 11 Q
(. Individual pieces of data ar) 217.72 226.62 T
(e called) 356.24 226.62 T
2 F
(objects) 395.79 226.62 T
1 F
(. Each object) 431.22 226.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is an) 99.65 212.62 T
2 F
(instance) 124.92 212.62 T
1 F
( of a class. For example,) 166.45 212.62 T
4 9.5 Q
(7) 284.24 212.62 T
1 11 Q
(,) 289.94 212.62 T
4 9.5 Q
(12) 295.44 212.62 T
1 11 Q
(, and) 306.84 212.62 T
4 9.5 Q
(1000) 333.71 212.62 T
1 11 Q
( ar) 356.51 212.62 T
(e instances of the class) 368.91 212.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<integer>) 99.65 198.62 T
1 11 Q
(. The objects) 150.95 198.62 T
4 9 Q
(") 213.43 198.62 T
4 9.5 Q
(hello, world) 218.83 198.62 T
4 9 Q
(") 287.23 198.62 T
1 11 Q
( and) 292.63 198.62 T
4 9 Q
(") 316.75 198.62 T
4 9.5 Q
(Buenos Dias") 322.15 198.62 T
1 11 Q
( ar) 390.55 198.62 T
(e instances of the) 402.95 198.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(class) 99.65 184.62 T
4 9.5 Q
(<string>) 125.31 184.62 T
1 11 Q
(.) 170.91 184.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
0 0 0 1 0 0 0 K
99.65 502.94 513.65 661.95 C
0 0 0 1 0 0 0 K
117.15 509.24 495.65 652.95 R
5 X
0 0 0 1 0 0 0 K
V
1 H
0 Z
0 X
N
125.15 521.62 488.01 559.53 R
7 X
V
0 X
N
125.15 574.62 488.01 613.96 R
7 X
V
0 X
N
130.08 576.24 481.51 609.96 R
7 X
V
4 9 Q
0 X
(def) 130.08 603.96 T
(ine method say-greeting \050greeting :: <object>\051;) 146.28 603.96 T
(format\050*window*, "%s\134n", greeting\051;) 140.88 592.96 T
(end;) 130.08 581.96 T
130.08 523.38 481.51 555.53 R
7 X
V
0 X
(def) 130.08 549.53 T
(ine method say-greeting \050greeting :: <integer>\051) 146.28 549.53 T
(format\050*window*, "Your lucky number is %s.\134n", greeting\051;) 140.88 538.53 T
(end;) 130.08 527.53 T
228.51 625.67 389.93 641.38 R
7 X
V
0.5 H
2 Z
N
1 11 Q
0 X
(Generic function) 232.71 630.75 T
4 9.5 Q
(say-greeting) 316.75 630.75 T
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 20
%%Page: "19" 21
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 458.73 702.62 T
2 11 Q
(19) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(Dylan pr) 126.65 665.62 T
(ovides several functions that let you ask questions about objects) 169.89 665.62 T
(and classes. For example, you can ask, what is the class of an object?) 99.65 651.62 T
5 9 Q
(?) 99.65 630.95 T
4 F
( object-class \0501000\051;) 105.05 630.95 T
5 F
({class <INTEGER>}) 99.65 619.95 T
1 11 Q
(Is a given object an instance of a given class?) 99.65 599.62 T
5 9 Q
(?) 99.65 578.95 T
4 F
( instance? \0501000, <integer>\051;) 105.05 578.95 T
5 F
(#t) 99.65 567.95 T
(?) 99.65 548.95 T
4 F
( instance? \050"hello, world", <integer>\051;) 105.05 548.95 T
5 F
(#f) 99.65 537.95 T
1 11 Q
-0.27 (As you might guess,) 99.65 517.62 P
4 9.5 Q
-0.55 (#t) 200.67 517.62 P
1 11 Q
-0.27 ( means tr) 212.07 517.62 P
-0.27 (ue and) 256.43 517.62 P
4 9.5 Q
-0.55 (#f) 291.92 517.62 P
1 11 Q
-0.27 ( means false. The function) 303.32 517.62 P
4 9.5 Q
-0.55 (instance?) 431.52 517.62 P
1 11 Q
-0.27 ( is) 482.82 517.62 P
(a) 99.65 503.62 T
2 F
(predicate) 107.9 503.62 T
1 F
(, which r) 154.33 503.62 T
(eturns) 196.79 503.62 T
4 9.5 Q
(#t) 230.44 503.62 T
1 11 Q
( or) 241.84 503.62 T
4 9.5 Q
(#f) 257.69 503.62 T
1 11 Q
(.) 269.09 503.62 T
3 13 Q
(2.4.1  Class inheritance) 99.65 407.29 T
1 11 Q
(One important aspect of classes is that they ar) 99.65 387.62 T
(e r) 321.9 387.62 T
(elated to one another by) 334.07 387.62 T
2 F
(inherit-) 454.34 387.62 T
(ance) 99.65 373.62 T
1 F
(. Inheritance enables classes that ar) 122.25 373.62 T
(e logically r) 291.67 373.62 T
(elated to one another to shar) 348.02 373.62 T
(e) 486.4 373.62 T
(the behaviors and data attributes that they have in common. Each class inherits) 99.65 359.62 T
(fr) 99.65 345.62 T
(om one or mor) 107.46 345.62 T
(e classes, called its) 179.32 345.62 T
2 F
(superclasses) 271.41 345.62 T
1 F
(. If no other class is appr) 333.72 345.62 T
(opriate,) 452 345.62 T
(then the class inherits fr) 99.65 331.62 T
(om the class) 215.36 331.62 T
4 9.5 Q
(<object>) 277.5 331.62 T
1 11 Q
(. This class is the) 323.1 331.62 T
2 F
(root) 406.64 331.62 T
1 F
( of all classes:) 426.82 331.62 T
(All classes inherit fr) 99.65 317.62 T
(om it, either dir) 195.92 317.62 T
(ectly or indir) 271.57 317.62 T
(ectly) 334.15 317.62 T
(. Note that all objects ar) 355.98 317.62 T
(e) 470.17 317.62 T
(instances of the class) 99.65 303.62 T
4 9.5 Q
(<object>) 203.06 303.62 T
1 11 Q
(:) 248.66 303.62 T
5 9 Q
(?) 99.65 282.95 T
4 F
( instance? \0501000, <object>\051;) 105.05 282.95 T
5 F
(#t) 99.65 271.95 T
(?) 99.65 252.95 T
4 F
( instance? \050"hello, world", <object>\051;) 105.05 252.95 T
5 F
(#t) 99.65 241.95 T
1 11 Q
(Figur) 99.65 221.62 T
(e 2.2 shows the class\320super) 125.86 221.62 T
(class r) 257.78 221.62 T
(elationships among several of the built-in) 287.59 221.62 T
(classes.) 99.65 207.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Convention:) 132.65 469.62 T
1 F
( The names of most built-in pr) 194.68 469.62 T
(edicates end with a ques-) 341.51 469.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tion mark \321 for example,) 132.65 455.62 T
4 9.5 Q
(instance?) 260.27 455.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 482.83 126.65 448.08 2 L
V
0.25 H
0 Z
N
477.65 482.83 477.65 448.08 2 L
V
N
126.52 482.95 477.77 482.95 2 L
V
N
126.52 447.95 477.77 447.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 21
%%Page: "20" 22
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(20) 63.65 702.62 T
0 9.5 Q
(2.4 Classes) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
99.65 507.67 513.65 515.67 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 105.49 519.33 T
(e 2.2  Classes and subclasses: Each arr) 131.7 519.33 T
(ow points fr) 314.83 519.33 T
(om a class to a subclass.) 373.79 519.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Dylan pr) 99.65 487.34 T
(ovides functions for exploring the inheritance r) 142.89 487.34 T
(elationships among) 371.61 487.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.02 (classes. W) 99.65 473.34 P
-0.02 (e can use) 147.96 473.34 P
4 9.5 Q
-0.04 (subtype?) 194.78 473.34 P
1 11 Q
-0.02 ( to ask whether one class inherits fr) 240.38 473.34 P
-0.02 (om another class:) 411.29 473.34 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(?) 99.65 452.67 T
4 F
( subtype? \050<integer>, <number>\051;) 105.05 452.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(#t) 99.65 441.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(?) 99.65 422.67 T
4 F
( subtype? \050<integer>, <object>\051;) 105.05 422.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(#t) 99.65 411.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(?) 99.65 392.67 T
4 F
( subtype? \050<single-f) 105.05 392.67 T
(loat>, <object>\051;) 213.05 392.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(#t) 99.65 381.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(?) 99.65 362.67 T
4 F
( subtype? \050<string>, <integer>\051;) 105.05 362.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(#f) 99.65 351.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(It may be confusing that we use a function called) 99.65 331.34 T
4 9.5 Q
(subtype?) 340.23 331.34 T
1 11 Q
( her) 385.83 331.34 T
(e, but Dylan does) 404.4 331.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(not pr) 99.65 317.34 T
(ovide a function called) 129.15 317.34 T
4 9.5 Q
(subclass?) 242.62 317.34 T
1 11 Q
(. Every class is a) 293.92 317.34 T
2 F
(type) 375.36 317.34 T
1 F
(, but certain types) 397.36 317.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 99.65 303.34 T
(e not classes \050see Section 6.7, page 82\051. The) 109.29 303.34 T
4 9.5 Q
(subtype?) 317.96 303.34 T
1 11 Q
( function works for both) 363.57 303.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(classes and nonclass types.) 99.65 289.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 126.65 275.34 T
(e can ask for all the super) 136.64 275.34 T
(classes of a given class:) 259.97 275.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(?) 99.65 254.67 T
4 F
( all-superclasses \050<string>\051;) 105.05 254.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(#[<STRING> <MUTABLE-SEQUENCE>, <SEQUENCE>, <MUTABLE-COLLECTION>,) 99.65 243.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<COLLECTION>, OBJECT>]) 99.65 232.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(?) 99.65 213.67 T
4 F
( all-superclasses \050<integer>\051;) 105.05 213.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(#[<INTEGER>, <RATIONAL>, <REAL>, <NUMBER>, <OBJECT>]) 99.65 202.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(?) 99.65 183.67 T
4 F
( all-superclasses \050<single-f) 105.05 183.67 T
(loat>\051;) 256.25 183.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(#[<SINGLE-FLOAT>, <FLOAT>, <REAL>, <NUMBER>, <OBJECT>]) 99.65 172.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
0 0 0 1 0 0 0 K
110.65 535.67 502.65 661.95 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<object>) 261.93 647.95 T
(<string>) 207.65 596.68 T
(<number>) 319.08 595.97 T
(<integer>) 256.22 548.4 T
(<single-f) 354.79 547.68 T
(loat>) 406.09 547.68 T
296.32 560.57 284.79 557.24 292.8 566.17 294.56 563.37 4 Y
V
339.22 591.38 294.56 563.37 2 L
0.5 H
2 Z
N
390.63 566.03 398.65 557.09 387.12 560.42 388.88 563.22 4 Y
V
344.22 591.24 388.88 563.22 2 L
N
238.6 609.71 227.08 606.38 235.09 615.31 236.85 612.51 4 Y
V
281.51 640.52 236.85 612.51 2 L
N
332.92 615.17 340.93 606.24 329.4 609.57 331.16 612.37 4 Y
V
286.51 640.38 331.16 612.37 2 L
N
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 22
%%Page: "21" 23
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 458.73 702.62 T
2 11 Q
(21) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(The) 99.65 665.62 T
4 9.5 Q
(#[) 120.81 665.62 T
0 11 Q
(...) 132.21 665.62 T
4 9.5 Q
(]) 140.46 665.62 T
1 11 Q
( syntax r) 146.16 665.62 T
(epr) 187.75 665.62 T
(esents a vector) 203.78 665.62 T
(. The super) 274.12 665.62 T
(classes ar) 328.11 665.62 T
(e or) 373.36 665.62 T
(der) 391.53 665.62 T
(ed fr) 407.67 665.62 T
(om most spe-) 430.21 665.62 T
(ci\336c to least speci\336c. The \336nal element of the vector r) 99.65 651.62 T
(eturned by) 355.76 651.62 T
4 9.5 Q
(all-super-) 411.68 651.62 T
(classes) 99.65 637.62 T
1 11 Q
( is always) 139.55 637.62 T
4 9.5 Q
(<object>) 189.82 637.62 T
1 11 Q
(.) 235.42 637.62 T
(The r) 126.65 623.62 T
(esults of the pr) 151.96 623.62 T
(eceding) 223.91 623.62 T
4 9.5 Q
(all-superclasses) 264.52 623.62 T
1 11 Q
( calls hint at the range of) 355.72 623.62 T
(built-in classes available.) 99.65 609.62 T
3 13 Q
(2.4.2  Classes and methods) 99.65 578.29 T
1 11 Q
(In contrast to in certain object-oriented languages, in Dylan a class does not con-) 99.65 558.62 T
(tain methods. A method belongs to a generic function, as shown in Figur) 99.65 544.62 T
(e 2.1,) 453.18 544.62 T
(page 18. Although methods ar) 99.65 530.62 T
(e independent of classes, methods operate on) 246.81 530.62 T
(instances of classes. A method states the kinds of objects that it handles by the) 99.65 516.62 T
(type of its r) 99.65 502.62 T
(equir) 154.75 502.62 T
(ed ar) 180.16 502.62 T
(guments. Consider the) 204.54 502.62 T
4 9.5 Q
(say-greeting) 317.59 502.62 T
1 11 Q
( method de\336ned ear-) 385.99 502.62 T
(lier:) 99.65 488.62 T
4 9 Q
(def) 99.65 467.95 T
(ine method say-greeting \050greeting :: <integer>\051;) 115.85 467.95 T
(format\050*window*, "Your lucky number is %s.\134n", greeting\051;) 110.45 456.95 T
(end;) 99.65 445.95 T
1 11 Q
(This method operates on instances of the) 99.65 425.62 T
4 9.5 Q
(<integer>) 300.76 425.62 T
1 11 Q
( class. The method knows) 352.06 425.62 T
(what classes it can handle.) 99.65 411.62 T
3 15 Q
(2.5  User-de\336ned classes) 99.65 371.95 T
1 11 Q
(A) 99.65 351.62 T
2 F
(user) 110.96 351.62 T
(-de\336ned class) 132.14 351.62 T
1 F
( is like a str) 200.25 351.62 T
(uctur) 254.91 351.62 T
(e or a r) 280.8 351.62 T
(ecor) 314.31 351.62 T
(d datatype in other languages.) 334.62 351.62 T
(When you de\336ne a class, you specify its name, its super) 99.65 337.62 T
(classes, and its) 369.48 337.62 T
2 F
(slots) 443.4 337.62 T
1 F
(. A) 466.61 337.62 T
(slot has a name and a type. Normally) 99.65 323.62 T
(, each instance stor) 279.76 323.62 T
(es its own value for the) 371.13 323.62 T
(slot. A class inherits the slots de\336ned by its super) 99.65 309.62 T
(classes, and it can de\336ne mor) 338.54 309.62 T
(e) 480.26 309.62 T
(slots if it needs them.) 99.65 295.62 T
(In this section, we de\336ne a class to r) 126.65 281.62 T
(epr) 300.28 281.62 T
(esent a simple form of time. This) 316.31 281.62 T
(class is part of a sample application that we develop thr) 99.65 267.62 T
(oughout this book. For) 369.74 267.62 T
(mor) 99.65 253.62 T
(e information, see Chapter 4,) 119.51 253.62 T
0 F
(Design of the Airport Example) 265.02 253.62 T
1 F
(.) 401.3 253.62 T
3 13 Q
(2.5.1  The) 99.65 222.29 T
4 F
(<time-of-day>) 151.21 222.29 T
3 F
( class) 252.61 222.29 T
1 11 Q
-0.13 (Ther) 99.65 202.62 P
-0.13 (e ar) 122.21 202.62 P
-0.13 (e several ways to r) 139.74 202.62 P
-0.13 (epr) 229.15 202.62 P
-0.13 (esent time. W) 245.17 202.62 P
-0.13 (e could say that an event happened at) 310.11 202.62 P
(10:30 \050a time of day\051. W) 99.65 188.62 T
(e could say that an event happened 2 hours ago \050a time) 213.49 188.62 T
(of) 99.65 174.62 T
(fset\051. Her) 109.12 174.62 T
(e, we de\336ne a class named) 154.03 174.62 T
4 9.5 Q
(<time-of-day>) 285.33 174.62 T
1 11 Q
(:) 359.43 174.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 23
%%Page: "22" 24
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(22) 63.65 702.62 T
0 9.5 Q
(2.5 User-defined classes) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine class <time-of-day> \050<object>\051) 115.85 666.95 T
6 F
(// 1) 492.05 666.95 T
(// Total number of seconds past midnight) 110.45 655.95 T
(// 2) 492.05 655.95 T
4 F
(slot total-seconds :: <integer>;) 110.45 644.95 T
6 F
(// 3) 492.05 644.95 T
4 F
(end class <time-of-day>;) 99.65 633.95 T
6 F
(// 4) 492.05 633.95 T
1 11 Q
(Line 1 has the) 99.65 613.62 T
4 9.5 Q
(def) 169.56 613.62 T
(ine class) 186.66 613.62 T
1 11 Q
( operator) 237.96 613.62 T
(, the name of the class, and a list of one or) 281.57 613.62 T
(mor) 99.65 599.62 T
(e super) 119.51 599.62 T
(classes of this class. The class) 154.86 599.62 T
4 9.5 Q
(<time-of-day>) 298.71 599.62 T
1 11 Q
( inherits fr) 372.82 599.62 T
(om the class) 423.2 599.62 T
4 9.5 Q
(<object>) 99.65 585.62 T
1 11 Q
(. Each class must have at least one super) 145.25 585.62 T
(class. If no other class is appr) 340.71 585.62 T
(o-) 481.9 585.62 T
(priate, the class must have) 99.65 571.62 T
4 9.5 Q
(<object>) 230.81 571.62 T
1 11 Q
( as its super) 276.41 571.62 T
(class.) 333.6 571.62 T
-0.32 (Line 2 is a comment. The) 126.65 557.62 P
6 9 Q
-0.63 (//) 248.43 557.62 P
1 11 Q
-0.32 ( characters begin a comment, which continues to) 259.23 557.62 P
(the end of the line. In this example, and in others that follow) 99.65 543.62 T
(, we include com-) 391.81 543.62 T
(ments that number each line of code. The line numbers ar) 99.65 529.62 T
(e useful only for dis-) 378.97 529.62 T
(cussing the code examples in the book, and would not be used in sour) 99.65 515.62 T
(ce \336les.) 439.87 515.62 T
(Line 3 contains the only slot de\336nition of this class. This class has one slot,) 126.65 501.62 T
-0.18 (named) 99.65 487.62 P
4 9.5 Q
-0.37 (total-seconds) 135.83 487.62 P
1 11 Q
-0.18 (. The slot\325s type constraint is) 209.93 487.62 P
4 9.5 Q
-0.37 (<integer>) 349.73 487.62 P
1 11 Q
-0.18 (. The double colon,) 401.03 487.62 P
4 9.5 Q
-0.38 (::) 99.65 473.62 P
1 11 Q
-0.18 (, speci\336es the type constraint of a slot, just as it speci\336es the type constraint of a) 111.05 473.62 P
(module variable or of a method\325s parameter) 99.65 459.62 T
(.) 313.27 459.62 T
(Line 4 is the end of the class de\336nition. The text after the wor) 126.65 445.62 T
(d) 422.52 445.62 T
4 9.5 Q
(end) 431.99 445.62 T
1 11 Q
( is an) 449.09 445.62 T
(optional part of the de\336nition; it documents which de\336nition is being \336nished.) 99.65 431.62 T
-0.37 (Any text appearing after the) 99.65 417.62 P
4 9.5 Q
-0.77 (end) 237.9 417.62 P
1 11 Q
-0.37 ( must match the de\336nition being \336nished, such as) 255 417.62 P
4 9.5 Q
(end class <time-of-day>) 99.65 403.62 T
1 11 Q
(, or) 230.75 403.62 T
4 9.5 Q
(end class) 249.35 403.62 T
1 11 Q
(. Y) 300.65 403.62 T
(ou do not need to put any text after) 312.47 403.62 T
(the) 99.65 389.62 T
4 9.5 Q
(end) 117.65 389.62 T
1 11 Q
( \321 however) 134.76 389.62 T
(, such text is useful for long or complex de\336nitions, wher) 193.12 389.62 T
(e it) 469.3 389.62 T
(can be dif) 99.65 375.62 T
(\336cult to see which language constr) 146.67 375.62 T
(uct is being \336nished.) 314.77 375.62 T
3 13 Q
(2.5.2  The type constraint of a slot) 99.65 344.29 T
1 11 Q
(The type constraint of the) 99.65 324.62 T
4 9.5 Q
(total-seconds) 226.9 324.62 T
1 11 Q
( slot is) 301 324.62 T
4 9.5 Q
(<integer>) 334.57 324.62 T
1 11 Q
(. This slot may hold) 385.87 324.62 T
(instances of) 99.65 310.62 T
4 9.5 Q
(<integer>) 159.39 310.62 T
1 11 Q
(, and may not hold any other kind of object.) 210.69 310.62 T
(The type constraint of a slot is optional. A slot with no type constraint is) 126.65 296.62 T
(equivalent to specifying) 99.65 282.62 T
4 9.5 Q
(<object>) 219.05 282.62 T
1 11 Q
( as the type constraint. A slot whose type con-) 264.65 282.62 T
(straint is) 99.65 268.62 T
4 9.5 Q
(<object>) 144.3 268.62 T
1 11 Q
( can hold any object. The ability to have slots with the type) 189.9 268.62 T
4 9.5 Q
(<object>) 99.65 254.62 T
1 11 Q
( pr) 145.25 254.62 T
(ovides \337exibility that can be valuable; for mor) 158.76 254.62 T
(e information, see) 381.75 254.62 T
(Chapter 12,) 99.65 240.62 T
0 F
(Performance and Flexibility) 161.16 240.62 T
1 F
(.) 284.42 240.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 24
%%Page: "23" 25
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 458.73 702.62 T
2 11 Q
(23) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 15 Q
0 X
(2.6  Use of) 99.65 662.95 T
4 13 Q
(make) 164.6 662.95 T
3 15 Q
( to create an instance) 195.8 662.95 T
1 11 Q
-0.02 (W) 99.65 642.62 P
-0.02 (e want to make an instance of) 109.64 642.62 P
4 9.5 Q
-0.04 (<time-of-day>) 256.35 642.62 P
1 11 Q
-0.02 (, but \336rst we need a place to stor) 330.45 642.62 P
-0.02 (e) 487.65 642.62 P
(it. W) 99.65 628.62 T
(e de\336ne a module variable called) 121.92 628.62 T
4 9.5 Q
(*my-time-of-day*) 285.14 628.62 T
1 11 Q
(, and initialize it to con-) 376.34 628.62 T
(tain a new instance of) 99.65 614.62 T
4 9.5 Q
(<time-of-day>) 208.01 614.62 T
1 11 Q
(:) 282.11 614.62 T
5 9 Q
(?) 99.65 593.95 T
4 F
( def) 105.05 593.95 T
(ine variable *my-time-of-day* = make\050<time-of-day>\051;) 126.65 593.95 T
1 11 Q
-0.37 (W) 99.65 573.62 P
-0.37 (e use the) 109.64 573.62 P
4 9.5 Q
-0.76 (make) 153.88 573.62 P
1 11 Q
-0.37 ( function to cr) 176.68 573.62 P
-0.37 (eate an instance of) 243.24 573.62 P
4 9.5 Q
-0.76 (<time-of-day>) 333.88 573.62 P
1 11 Q
-0.37 (. The ar) 407.98 573.62 P
-0.37 (gument to) 443.57 573.62 P
4 9.5 Q
(make) 99.65 559.62 T
1 11 Q
( is the class of the instance to cr) 122.45 559.62 T
(eate. The) 273.94 559.62 T
4 9.5 Q
(make) 320.23 559.62 T
1 11 Q
( function r) 343.03 559.62 T
(eturns the new) 393.45 559.62 T
(instance.) 99.65 545.62 T
-0.17 (The instance stor) 126.65 531.62 P
-0.17 (ed in) 208.52 531.62 P
4 9.5 Q
-0.36 (*my-time-of-day*) 235.27 531.62 P
1 11 Q
-0.17 (has a) 331.8 531.62 P
4 9.5 Q
-0.36 (total-seconds) 359.02 531.62 P
1 11 Q
-0.17 ( slot with no) 433.12 531.62 P
(value. The next logical step is to stor) 99.65 517.62 T
(e a value in that slot.) 275.91 517.62 T
3 15 Q
(2.7  Getters and setters of slot values) 99.65 477.95 T
1 11 Q
(W) 99.65 457.62 T
(e can stor) 109.64 457.62 T
(e a value in the) 155.59 457.62 T
4 9.5 Q
(total-seconds) 231.79 457.62 T
1 11 Q
( slot of the) 305.89 457.62 T
4 9.5 Q
(<time-of-day>) 359.27 457.62 T
1 11 Q
( instance by) 433.37 457.62 T
(using the assignment operator) 99.65 443.62 T
(,) 246.54 443.62 T
4 9.5 Q
(:=) 252.04 443.62 T
1 11 Q
(, as follows:) 263.44 443.62 T
5 9 Q
(?) 99.65 422.95 T
4 F
(*my-time-of-day*.total-seconds := 180;) 110.45 422.95 T
5 F
(180) 99.65 411.95 T
1 11 Q
(W) 99.65 391.62 T
(e can examine the value of the slot in the instance:) 109.64 391.62 T
5 9 Q
(?) 99.65 370.95 T
4 F
(*my-time-of-day*.total-seconds;) 110.45 370.95 T
5 F
(180) 99.65 359.95 T
1 11 Q
(Although these calls may look like they ar) 99.65 339.62 T
(e accessing the slots dir) 303.91 339.62 T
(ectly) 417.21 339.62 T
(, they ar) 439.04 339.62 T
(e) 478.31 339.62 T
(not. They ar) 99.65 325.62 T
(e function calls to a getter and a setter) 158.07 325.62 T
(. A) 340.86 325.62 T
2 F
(getter) 357.66 325.62 T
1 F
( is a method that) 386.39 325.62 T
(r) 99.65 311.62 T
(etrieves the curr) 103.79 311.62 T
(ent value of a slot in an object. A) 182.38 311.62 T
2 F
(setter) 343.05 311.62 T
1 F
( is a method that stor) 370.53 311.62 T
(es a) 472.82 311.62 T
(value in a slot. Each slot in a class automatically has a getter and a setter de\336ned) 99.65 297.62 T
(for it.) 99.65 283.62 T
(The getter) 126.65 269.62 T
(\325s name is the same as the name of the slot. Thus,) 176.8 269.62 T
4 9.5 Q
(total-seconds) 417.3 269.62 T
1 11 Q
(is the name of the getter for the) 99.65 255.62 T
4 9.5 Q
(total-seconds) 254.02 255.62 T
1 11 Q
( slot. Y) 328.12 255.62 T
(ou can use the assignment) 360.15 255.62 T
(operator) 99.65 241.62 T
(,) 140.5 241.62 T
4 9.5 Q
(:=) 146 241.62 T
1 11 Q
( , with the getter to invoke the setter) 157.4 241.62 T
(.) 331.91 241.62 T
(For mor) 126.65 227.62 T
(e information about getters and setters, see Section 7.1, page 85.) 165.73 227.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 25
%%Page: "24" 26
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(24) 63.65 702.62 T
0 9.5 Q
(2.8 Initialization of slots when making instances) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 15 Q
0 X
(2.8  Initialization of slots when making instances) 99.65 662.95 T
1 11 Q
(W) 99.65 642.62 T
(e can initialize a slot with a value when we make an instance. T) 109.64 642.62 T
(o make it possi-) 415.92 642.62 T
(ble to initialize a slot, we need to use the) 99.65 628.62 T
4 9.5 Q
(init-keyword:) 298.78 628.62 T
2 11 Q
(slot option) 375.63 628.62 T
1 F
( when de\336n-) 429.71 628.62 T
(ing the class. A slot option lets you specify characteristic pertaining to a slot. Slot) 99.65 614.62 T
(options appear after the optional type speci\336er of a slot.) 99.65 600.62 T
(Her) 126.65 586.62 T
(e, we r) 145.22 586.62 T
(ede\336ne the) 177.32 586.62 T
4 9.5 Q
(<time-of-day>) 233.67 586.62 T
1 11 Q
( class to use that slot option:) 307.77 586.62 T
4 9 Q
(def) 99.65 565.95 T
(ine class <time-of-day> \050<object>\051) 115.85 565.95 T
6 F
(// 1) 492.05 565.95 T
(// Total number of seconds past midnight) 110.45 554.95 T
(// 2) 492.05 554.95 T
4 F
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 110.45 543.95 T
6 F
(// 3) 492.05 543.95 T
4 F
(end class <time-of-day>;) 99.65 532.95 T
6 F
(// 4) 492.05 532.95 T
1 11 Q
-0.25 (Note that the pr) 99.65 512.62 P
-0.25 (eceding de\336nition) 176.25 512.62 P
2 F
-0.25 (rede\336nes) 266.57 512.62 P
1 F
-0.25 ( the class) 312.39 512.62 P
4 9.5 Q
-0.51 (<time-of-day>) 358.08 512.62 P
1 11 Q
-0.25 (. That is, this) 432.18 512.62 P
(de\336nition of) 99.65 498.62 T
4 9.5 Q
(<time-of-day>) 162.26 498.62 T
1 11 Q
( r) 236.36 498.62 T
(eplaces the old de\336nition of) 243.26 498.62 T
4 9.5 Q
(<time-of-day>) 380.7 498.62 T
1 11 Q
(. Most) 454.8 498.62 T
(Dylan envir) 99.65 484.62 T
(onments automatically r) 157.37 484.62 T
(ecycle the storage used by the old de\336nition.) 275.68 484.62 T
(The) 126.65 470.62 T
4 9.5 Q
(:init-keyword) 147.81 470.62 T
1 11 Q
( slot option de\336nes a keywor) 221.91 470.62 T
(d parameter that you can) 362.24 470.62 T
-0.23 (give to) 99.65 456.62 P
4 9.5 Q
-0.48 (make) 135.07 456.62 P
1 11 Q
-0.23 ( when you make an instance of this class. Her) 157.88 456.62 P
-0.23 (e, the keywor) 376.69 456.62 P
-0.23 (d is) 441.83 456.62 P
4 9.5 Q
-0.48 (total-) 461.45 456.62 P
(seconds:) 99.65 442.62 T
1 11 Q
(. W) 145.25 442.62 T
(e pr) 160.74 442.62 T
(ovide a keywor) 179.51 442.62 T
(d ar) 254.75 442.62 T
(gument as follows:) 273.87 442.62 T
5 9 Q
-0.26 (?) 99.65 421.95 P
4 F
-0.26 ( def) 105.05 421.95 P
-0.26 (ine variable *my-time-of-day* = make\050<time-of-day>, total-seconds: 120\051;) 126.39 421.95 P
1 11 Q
(The pr) 99.65 401.62 T
(eceding statement r) 131.57 401.62 T
(ede\336nes the) 226.65 401.62 T
4 9.5 Q
(*my-time-of-day*) 287.66 401.62 T
1 11 Q
( variable to contain a) 378.86 401.62 T
-0.15 (new instance of) 99.65 387.62 P
4 9.5 Q
-0.31 (<time-of-day>) 177.87 387.62 P
1 11 Q
-0.15 ( class. The value of the) 251.97 387.62 P
4 9.5 Q
-0.31 (total-seconds) 363.38 387.62 P
1 11 Q
-0.15 (slot of this) 442.87 387.62 P
-0.25 (instance is initialized to) 99.65 373.62 P
4 9.5 Q
-0.53 (120) 215.98 373.62 P
1 11 Q
-0.25 (. W) 233.08 373.62 P
-0.25 (e can call the getter to verify that the slot has an ini-) 248.31 373.62 P
(tial value:) 99.65 359.62 T
5 9 Q
(?) 99.65 338.95 T
4 F
(*my-time-of-day*.total-seconds;) 110.45 338.95 T
5 F
(120) 99.65 327.95 T
1 11 Q
(The) 99.65 307.62 T
4 9.5 Q
(:init-keyword) 120.81 307.62 T
1 11 Q
( slot option de\336nes a) 194.91 307.62 T
2 F
(keyword parameter) 298.41 307.62 T
1 F
( to) 396.5 307.62 T
4 9.5 Q
(make) 411.59 307.62 T
1 11 Q
( for a given) 434.39 307.62 T
(class. A keywor) 99.65 293.62 T
(d is a name followed by a colon, such as) 176.2 293.62 T
4 9.5 Q
(total-seconds:) 373.6 293.62 T
1 11 Q
(. When) 453.4 293.62 T
(you pr) 99.65 279.62 T
(ovide a keywor) 131.91 279.62 T
(d ar) 207.15 279.62 T
(gument to a function, you give the keywor) 226.27 279.62 T
(d followed) 433.5 279.62 T
(by a value. Y) 99.65 265.62 T
(ou can give keywor) 161.49 265.62 T
(d ar) 256.79 265.62 T
(guments in any or) 275.91 265.62 T
(der) 364.32 265.62 T
(. Keywor) 379.84 265.62 T
(d ar) 424.04 265.62 T
(guments) 443.16 265.62 T
(can be useful for functions that take many ar) 99.65 251.62 T
(guments\321when you call the func-) 316.23 251.62 T
-0.04 (tion, you do not need to r) 99.65 237.62 P
-0.04 (emember the or) 222.74 237.62 P
-0.04 (der of the ar) 299.24 237.62 P
-0.04 (guments. For mor) 358.28 237.62 P
-0.04 (e informa-) 445.17 237.62 P
(tion about keywor) 99.65 223.62 T
(d ar) 188.98 223.62 T
(guments, see Section 6.3.3, page 78.) 208.1 223.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 26
%%Page: "25" 27
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 458.73 702.62 T
2 11 Q
(25) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 15 Q
0 X
(2.9  Methods for handling time) 99.65 662.95 T
1 11 Q
-0.06 (W) 99.65 642.62 P
-0.06 (e decided to r) 109.64 642.62 P
-0.06 (epr) 175.49 642.62 P
-0.06 (esent time of day with a single slot named) 191.52 642.62 P
4 9.5 Q
-0.13 (total-seconds) 398.46 642.62 P
1 11 Q
-0.06 (. An) 472.56 642.62 P
-0.03 (alternate choice would be to give the class thr) 99.65 628.62 P
-0.03 (ee slots named) 320.52 628.62 P
4 9.5 Q
-0.06 (hours) 394.95 628.62 P
1 11 Q
-0.03 (,) 423.45 628.62 P
4 9.5 Q
-0.06 (minutes) 428.93 628.62 P
1 11 Q
-0.03 (, and) 468.83 628.62 P
4 9.5 Q
(seconds) 99.65 614.62 T
1 11 Q
(. People naturally think of time in terms of hours, minutes, and seconds.) 139.55 614.62 T
(W) 99.65 600.62 T
(e chose to stor) 109.64 600.62 T
(e the total seconds instead, because we envisioned needing to) 178.38 600.62 T
-0.28 (operate on times, such as adding a time of day to a time of) 99.65 586.62 P
-0.28 (fset. For example, if it is) 378.93 586.62 P
(10:30 now) 99.65 572.62 T
(, and a meeting is to be held in one hour; then the meeting will be held) 147.72 572.62 T
(at 1) 99.65 558.62 T
(1:30. It is easier to operate on a single value, rather than on thr) 116.38 558.62 T
(ee values of) 417.92 558.62 T
(hours, minutes, and seconds. On the other hand, it is convenient to see times) 99.65 544.62 T
(expr) 99.65 530.62 T
(essed as hours, minutes, and seconds.) 121.35 530.62 T
3 13 Q
(2.9.1  Method for) 99.65 499.29 T
4 F
(encode-total-seconds) 187.32 499.29 T
1 11 Q
(W) 99.65 479.62 T
(e can pr) 109.64 479.62 T
(ovide methods that support the convenience of converting fr) 147.95 479.62 T
(om hours,) 442.62 479.62 T
(minutes, and seconds to total seconds \050and vice versa\051.) 99.65 465.62 T
4 9 Q
(def) 99.65 444.95 T
(ine method encode-total-seconds \050hours) 115.85 444.95 T
( :: <integer>,) 331.85 444.95 T
6 F
(// 1) 492.05 444.95 T
4 F
(minutes :: <integer>,) 294.05 433.95 T
6 F
(// 2) 492.05 433.95 T
4 F
(seconds :: <integer>\051) 294.05 422.95 T
6 F
(// 3) 492.05 422.95 T
4 F
(\05060 * 60 * hours\051 + \05060 * minutes\051 + seconds;) 110.45 411.95 T
6 F
(// 4) 492.05 411.95 T
4 F
(end;) 99.65 400.95 T
6 F
(// 5) 492.05 400.95 T
1 11 Q
-0.45 (The method) 99.65 380.62 P
4 9.5 Q
-0.93 (encode-total-seconds) 160.36 380.62 P
1 11 Q
-0.45 ( has thr) 274.36 380.62 P
-0.45 (ee r) 309.66 380.62 P
-0.45 (equir) 326.64 380.62 P
-0.45 (ed parameters, named) 352.05 380.62 P
4 9.5 Q
-0.93 (hours) 462.1 380.62 P
1 11 Q
-0.45 (,) 490.6 380.62 P
4 9.5 Q
(minutes) 99.65 366.62 T
1 11 Q
(, and) 139.55 366.62 T
4 9.5 Q
(seconds) 166.42 366.62 T
1 11 Q
(, all of type) 206.32 366.62 T
4 9.5 Q
(<integer>) 263.22 366.62 T
1 11 Q
(. This method is invoked when) 314.52 366.62 T
4 9.5 Q
(encode-total-seconds) 99.65 352.62 T
1 11 Q
( is called with thr) 213.65 352.62 T
(ee integer ar) 297.79 352.62 T
(guments.) 357.66 352.62 T
(Line 4 is the only statement in the body) 126.65 338.62 T
(. It uses arithmetic operators to con-) 316.73 338.62 T
(vert the hours, minutes, and seconds into seconds. All methods r) 99.65 324.62 T
(eturn the value) 414.09 324.62 T
(of the statement executed last in the body) 99.65 310.62 T
(. This method r) 300.22 310.62 T
(eturns the r) 374.08 310.62 T
(esult of the) 429.88 310.62 T
(arithmetic expr) 99.65 296.62 T
(ession in line 4.) 173.79 296.62 T
-0.41 (W) 126.65 282.62 P
-0.41 (e can call) 136.64 282.62 P
4 9.5 Q
-0.85 (encode-total-seconds) 182.5 282.62 P
1 11 Q
-0.41 ( with ar) 296.49 282.62 P
-0.41 (guments r) 333.18 282.62 P
-0.41 (epr) 382.05 282.62 P
-0.41 (esenting 8 hours, 30) 398.08 282.62 P
(minutes, and 59 seconds:) 99.65 268.62 T
5 9 Q
(?) 99.65 247.95 T
4 F
(encode-total-seconds \0508, 30, 59\051;) 110.45 247.95 T
5 F
(30659) 99.65 236.95 T
1 11 Q
(W) 99.65 216.62 T
(e \336nd it convenient to call) 109.64 216.62 T
4 9.5 Q
(encode-total-seconds) 237.98 216.62 T
1 11 Q
( to initialize the) 351.98 216.62 T
4 9.5 Q
(total-sec-) 430.1 216.62 T
(onds) 99.65 202.62 T
1 11 Q
( slot when cr) 122.45 202.62 T
(eating an instance of) 184.43 202.62 T
4 9.5 Q
(<time-of-day>) 286.99 202.62 T
1 11 Q
(, or when storing a new) 361.09 202.62 T
(value in that slot. For example, her) 99.65 188.62 T
(e we cr) 268.12 188.62 T
(eate a new instance:) 302.37 188.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "25" 27
%%Page: "26" 28
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(26) 63.65 702.62 T
0 9.5 Q
(2.9 Methods for handling time) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
5 9 Q
0 X
(?) 99.65 666.95 T
4 F
( def) 105.05 666.95 T
(ine variable *your-time-of-day* =) 126.65 666.95 T
(make\050<time-of-day>, total-seconds: encode-total-seconds \0508, 30, 59\051\051;) 121.25 655.95 T
1 11 Q
(W) 99.65 635.62 T
(e examine the value of the) 109.64 635.62 T
4 9.5 Q
(total-seconds) 239.44 635.62 T
1 11 Q
( slot:) 313.54 635.62 T
5 9 Q
(?) 99.65 614.95 T
4 F
(*your-time-of-day*.total-seconds;) 110.45 614.95 T
5 F
(30659) 99.65 603.95 T
1 11 Q
(The r) 99.65 583.62 T
(esult r) 124.96 583.62 T
(eminds us that it would be useful to convert in the other dir) 155.21 583.62 T
(ection as) 445.32 583.62 T
(well\321fr) 99.65 569.62 T
(om total seconds to hours, minutes, and seconds.) 139.3 569.62 T
3 13 Q
(2.9.2  Method for) 99.65 538.29 T
4 F
(decode-total-seconds) 187.32 538.29 T
1 11 Q
(W) 99.65 518.62 T
(e de\336ne) 109.64 518.62 T
4 9.5 Q
(decode-total-seconds) 150.72 518.62 T
1 11 Q
( to convert in the other dir) 264.72 518.62 T
(ection \321 fr) 392.06 518.62 T
(om total) 445.71 518.62 T
(seconds to hours, minutes, and seconds:) 99.65 504.62 T
4 9 Q
(def) 99.65 483.95 T
(ine method decode-total-seconds \050total-seconds :: <integer>\051) 115.85 483.95 T
6 F
(// 1) 492.05 483.95 T
4 F
(let \050total-minutes, seconds\051 = truncate/ \050total-seconds, 60\051;) 110.45 472.95 T
6 F
(// 2) 492.05 472.95 T
4 F
(let \050hours, minutes\051 = truncate/ \050total-minutes, 60\051;) 110.45 461.95 T
6 F
(// 3) 492.05 461.95 T
4 F
(values \050hours, minutes, seconds\051;) 110.45 450.95 T
6 F
(// 4) 492.05 450.95 T
4 F
(end;) 99.65 439.95 T
6 F
(// 5) 492.05 439.95 T
1 11 Q
(W) 99.65 419.62 T
(e can use) 109.64 419.62 T
4 9.5 Q
(decode-total-seconds) 156.51 419.62 T
1 11 Q
( to see the value of the) 270.51 419.62 T
4 9.5 Q
(total-seconds) 381.55 419.62 T
1 11 Q
( slot:) 455.65 419.62 T
5 9 Q
(?) 99.65 398.95 T
4 F
(decode-total-seconds \050*your-time-of-day*.total-seconds\051;) 110.45 398.95 T
5 F
(8) 99.65 387.95 T
(30) 99.65 376.95 T
(59) 99.65 365.95 T
1 11 Q
(As you can see,) 99.65 345.62 T
4 9.5 Q
(decode-total-seconds) 177.36 345.62 T
1 11 Q
( r) 291.36 345.62 T
(eturns thr) 298.26 345.62 T
(ee separate values: the hours,) 346.04 345.62 T
-0.13 (minutes, and seconds. This method illustrates how to r) 99.65 331.62 P
-0.13 (eturn multiple values, and) 364.67 331.62 P
-0.1 (how to use) 99.65 317.62 P
4 9.5 Q
-0.2 (let) 155.35 317.62 P
1 11 Q
-0.1 ( to assign to multiple local variables. W) 172.45 317.62 P
-0.1 (e describe these techniques) 361.67 317.62 P
(in Section 2.9.3 and Section 2.9.4.) 99.65 303.62 T
3 13 Q
(2.9.3  Multiple values) 99.65 272.29 T
1 11 Q
(The method for) 99.65 252.62 T
4 9.5 Q
(decode-total-seconds) 178.02 252.62 T
1 11 Q
( r) 292.02 252.62 T
(eturns thr) 298.92 252.62 T
(ee values: the hours, the min-) 346.7 252.62 T
(utes, and the seconds. The method uses the) 99.65 238.62 T
4 9.5 Q
(values) 312.39 238.62 T
1 11 Q
( function as the statement exe-) 346.59 238.62 T
(cuted last in the body) 99.65 224.62 T
(, to r) 203.26 224.62 T
(eturn the thr) 225.25 224.62 T
(ee values. The) 286.37 224.62 T
4 9.5 Q
(values) 357.81 224.62 T
1 11 Q
( function simply) 392.01 224.62 T
(r) 99.65 210.62 T
(eturns all its ar) 103.79 210.62 T
(guments as separate values. The ability to r) 175.94 210.62 T
(eturn multiple values) 385.76 210.62 T
(allows for a natural symmetry between) 99.65 196.62 T
4 9.5 Q
(encode-total-seconds) 293.15 196.62 T
1 11 Q
( and) 407.15 196.62 T
4 9.5 Q
(decode-) 431.27 196.62 T
(total-seconds) 99.65 182.62 T
1 11 Q
(, as shown in T) 173.75 182.62 T
(able 2.1.) 245.64 182.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "26" 28
%%Page: "27" 29
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 458.73 702.62 T
2 11 Q
(27) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 2 Q
0 X
(:) 126.65 671.62 T
1 11 Q
-0.35 (On lines 2 and 3 of the) 99.65 535.63 P
4 9.5 Q
-0.73 (decode-total-seconds) 208.76 535.63 P
1 11 Q
-0.35 ( method ar) 322.76 535.63 P
-0.35 (e calls to) 374.89 535.63 P
4 9.5 Q
-0.73 (truncate/) 418.39 535.63 P
1 11 Q
-0.35 (. The) 469.69 535.63 P
4 9.5 Q
(truncate/) 99.65 521.63 T
1 11 Q
( function is a built-in Dylan function that r) 150.95 521.63 T
(eturns multiple values. This) 356.79 521.63 T
(function takes two ar) 99.65 507.63 T
(guments, divides the \336rst by the second, and r) 202.22 507.63 T
(eturns two) 426.78 507.63 T
(values: the r) 99.65 493.63 T
(esult of the tr) 158.78 493.63 T
(uncating division, and the r) 223.16 493.63 T
(emainder) 357.27 493.63 T
(.) 402.87 493.63 T
3 13 Q
(2.9.4  Use of) 99.65 314.29 T
4 F
(let) 164.83 314.29 T
3 F
( to assign to multiple local variables) 188.23 314.29 T
1 11 Q
(When a function r) 99.65 294.63 T
(eturns multiple values, you can use) 187.4 294.63 T
4 9.5 Q
(let) 362.55 294.63 T
1 11 Q
( to stor) 379.65 294.63 T
(e each r) 413.14 294.63 T
(eturned) 450.11 294.63 T
(value in a local variable, as shown in lines 2 and 3 of the) 99.65 280.63 T
4 9.5 Q
(decode-total-seconds) 374.63 280.63 T
1 11 Q
(method. On line 2,) 99.65 266.63 T
4 9.5 Q
(let) 192.47 266.63 T
1 11 Q
( de\336nes two local variables, named) 209.57 266.63 T
4 9.5 Q
(total-minutes) 382.94 266.63 T
1 11 Q
( and) 457.04 266.63 T
4 9.5 Q
(seconds) 99.65 252.63 T
1 11 Q
(, and initializes their values to the two values r) 139.55 252.63 T
(eturned by the) 366.13 252.63 T
4 9.5 Q
(truncate/) 440.06 252.63 T
1 11 Q
(function. Similarly) 99.65 238.63 T
(, line 3 uses) 188.96 238.63 T
4 9.5 Q
(let) 247.51 238.63 T
1 11 Q
( to assign values to local variables) 264.61 238.63 T
4 9.5 Q
(hours) 431.84 238.63 T
1 11 Q
( and) 460.34 238.63 T
4 9.5 Q
(minutes) 99.65 224.63 T
1 11 Q
(.) 139.55 224.63 T
(The local variables de\336ned by) 126.65 210.63 T
4 9.5 Q
(let) 274.82 210.63 T
1 11 Q
( can be used within the method until the) 291.92 210.63 T
(method\325s) 99.65 196.63 T
4 9.5 Q
(end) 147.82 196.63 T
1 11 Q
( statement. Although ther) 164.92 196.63 T
(e is no) 289.8 196.63 T
4 9.5 Q
(begin) 323.59 196.63 T
1 11 Q
(to de\336ne explicitly the) 357.79 196.63 T
-0.02 (beginning of a body for local variables,) 99.65 182.63 P
4 9.5 Q
-0.04 (def) 291.59 182.63 P
-0.04 (ine method) 308.69 182.63 P
1 11 Q
-0.02 ( begins a body) 365.66 182.63 P
-0.02 (, and its) 434.79 182.63 P
4 9.5 Q
-0.04 (end) 475.82 182.63 P
1 11 Q
(ends that body) 99.65 168.63 T
(. Local variables ar) 170.98 168.63 T
(e scoped within the smallest body that sur-) 261.92 168.63 T
0 0 0 1 0 0 0 K
99.26 639.96 514.03 647.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(T) 113.42 651.62 T
(able 2.1  Symmetry of) 119.15 651.62 T
4 9.5 Q
(encode-total-seconds) 227.01 651.62 T
1 11 Q
( and) 341 651.62 T
4 9.5 Q
(decode-total-seconds) 365.13 651.62 T
1 11 Q
(.) 479.13 651.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Method) 143.15 618.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Ar) 266.55 618.63 T
(gument\050s\051) 279.26 618.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Return value\050s\051) 404.49 618.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(encode-total-seconds) 105.26 596.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(hours, minutes, seconds) 231.43 596.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds) 376.09 596.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(decode-total-seconds) 105.26 577.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds) 231.43 577.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(hours, minutes, seconds) 376.09 577.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Division functions:) 132.65 459.63 T
1 F
( Unlike in some languages, wher) 229.79 459.63 T
(e / on integers) 388.68 459.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(typically pr) 132.65 445.63 T
(oduces a tr) 188.57 445.63 T
(uncated r) 241.59 445.63 T
(esult, in Dylan / is r) 287.48 445.63 T
(eserved for a) 385.35 445.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(library extension that pr) 132.65 431.63 T
(oduces exact rational r) 250 431.63 T
(esults. The Dylan func-) 359.23 431.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.32 (tions named) 132.65 417.63 P
4 9.5 Q
-0.67 (f) 194.96 417.63 P
-0.67 (loor) 200.66 417.63 P
1 11 Q
-0.32 (,) 222.65 417.63 P
4 9.5 Q
-0.67 (ceiling) 227.82 417.63 P
1 11 Q
-0.32 (,) 267.72 417.63 P
4 9.5 Q
-0.67 (round) 272.9 417.63 P
1 11 Q
-0.32 (, and) 301.4 417.63 P
4 9.5 Q
-0.67 (truncate) 327.62 417.63 P
1 11 Q
-0.32 ( convert a rational or) 373.22 417.63 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\337oating-point r) 132.65 403.63 T
(esult to an integer with the appr) 206.51 403.63 T
(opriate r) 362.54 403.63 T
(ounding. The) 403.95 403.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.35 (Dylan functions named) 132.65 389.63 P
4 9.5 Q
-0.73 (f) 248.62 389.63 P
-0.73 (loor/) 254.32 389.63 P
1 11 Q
-0.35 (,) 282.82 389.63 P
4 9.5 Q
-0.73 (ceiling/) 287.97 389.63 P
1 11 Q
-0.35 (,) 333.57 389.63 P
4 9.5 Q
-0.73 (round/) 338.71 389.63 P
1 11 Q
-0.35 (, and) 372.91 389.63 P
4 9.5 Q
-0.73 (truncate/) 399.08 389.63 P
1 11 Q
-0.35 ( take) 450.38 389.63 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(two ar) 132.65 375.63 T
(guments. Those generic functions divide the \336rst ar) 163.81 375.63 T
(gument by) 413.69 375.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.26 (the second ar) 132.65 361.63 P
-0.26 (gument, and r) 196.47 361.63 P
-0.26 (eturn two values: the r) 264.68 361.63 P
-0.26 (ounded or tr) 373.25 361.63 P
-0.26 (uncated) 434.17 361.63 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 132.65 347.63 T
(esult, and the r) 136.79 347.63 T
(emainder) 209.18 347.63 T
(.) 254.78 347.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
225.43 633.96 225.43 569.96 2 L
V
0.5 H
0 Z
N
370.09 633.96 370.09 569.96 2 L
V
N
99.26 608.96 514.03 608.96 2 L
V
N
99.26 589.46 514.03 589.46 2 L
V
N
126.65 472.84 126.65 340.09 2 L
V
0.25 H
N
477.65 472.84 477.65 340.09 2 L
V
N
126.52 472.96 477.77 472.96 2 L
V
N
126.52 339.96 477.77 339.96 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "27" 29
%%Page: "28" 30
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(28) 63.65 702.62 T
0 9.5 Q
(2.9 Methods for handling time) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(r) 99.65 665.62 T
(ounds them, so you can use) 103.79 665.62 T
4 9.5 Q
(begin) 241.22 665.62 T
1 11 Q
( and) 269.72 665.62 T
4 9.5 Q
(end) 293.84 665.62 T
1 11 Q
( within a method to de\336ne a smaller) 310.94 665.62 T
(body for local variables.) 99.65 651.62 T
3 13 Q
(2.9.5  Second method for) 99.65 620.29 T
4 F
(decode-total-seconds) 229.39 620.29 T
1 11 Q
(The) 99.65 600.62 T
4 9.5 Q
(decode-total-seconds) 120.81 600.62 T
1 11 Q
( method is called as shown:) 234.81 600.62 T
5 9 Q
(?) 99.65 579.95 T
4 F
(decode-total-seconds \050*your-time-of-day*.total-seconds\051;) 110.45 579.95 T
1 11 Q
(If we envision calling) 99.65 559.62 T
4 9.5 Q
(decode-total-seconds) 206.33 559.62 T
1 11 Q
( fr) 320.33 559.62 T
(equently to see the hours, min-) 330.89 559.62 T
(utes, and seconds stor) 99.65 545.62 T
(ed in a) 206.44 545.62 T
4 9.5 Q
(<time-of-day>) 241.78 545.62 T
1 11 Q
( instance, we could pr) 315.88 545.62 T
(ovide a conve-) 422.18 545.62 T
(nient, shorter) 99.65 531.62 T
(, calling syntax, such as this:) 163.81 531.62 T
5 9 Q
(?) 99.65 510.95 T
4 F
(decode-total-seconds \050*your-time-of-day*\051;) 110.45 510.95 T
1 11 Q
(W) 99.65 490.62 T
(e can implement that calling syntax this easily) 109.64 490.62 T
(, by de\336ning another method for) 332.01 490.62 T
4 9.5 Q
(decode-total-seconds) 99.65 476.62 T
1 11 Q
(, which takes a) 213.65 476.62 T
4 9.5 Q
(<time-of-day>) 288.1 476.62 T
1 11 Q
( instance as its ar) 362.2 476.62 T
(gument:) 444.37 476.62 T
4 9 Q
(def) 99.65 455.95 T
(ine method decode-total-seconds \050time :: <time-of-day>\051) 115.85 455.95 T
(decode-total-seconds \050time.total-seconds\051;) 110.45 444.95 T
(end;) 99.65 433.95 T
1 11 Q
(Figur) 99.65 413.62 T
(e 2.3 shows the two methods for the) 125.86 413.62 T
4 9.5 Q
(decode-total-seconds) 303.45 413.62 T
1 11 Q
( generic func-) 417.45 413.62 T
(tion.) 99.65 399.62 T
0 0 0 1 0 0 0 K
99.65 174.52 513.65 182.52 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 120.73 186.18 T
(e 2.3  The) 146.94 186.18 T
4 9.5 Q
(decode-total-seconds) 195.37 186.18 T
1 11 Q
( generic function and its methods.) 309.37 186.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
0 0 0 1 0 0 0 K
99.65 200.52 513.65 390.95 C
0 0 0 1 0 0 0 K
117.15 206.1 495.65 387.67 R
5 X
0 0 0 1 0 0 0 K
V
1 H
0 Z
0 X
N
123 214.91 485.86 263.53 R
7 X
V
0 X
N
123 274.34 485.86 346.53 R
7 X
V
0 X
N
127.93 278.53 479.36 341.84 R
7 X
V
6 9 Q
0 X
(// Method 1) 127.93 335.84 T
4 F
(def) 127.93 324.84 T
(ine method decode-total-seconds \050total-seconds :: <integer>\051) 144.13 324.84 T
(let \050total-minutes, seconds\051 = truncate/ \050total-seconds, 60\051;) 138.73 313.84 T
(let \050hours, minutes\051 = truncate/ \050total-minutes, 60\051;) 138.73 302.84 T
(values \050hours, minutes, seconds\051;) 138.73 291.84 T
(end;) 127.93 280.84 T
127.93 216.67 479.36 259.53 R
7 X
V
6 F
0 X
(// Method 2) 127.93 253.53 T
4 F
(def) 127.93 242.53 T
(ine method decode-total-seconds \050time :: <time-of-day>\051) 144.13 242.53 T
(decode-total-seconds \050time.total-seconds\051;) 138.73 231.53 T
(end;) 127.93 220.53 T
204.08 360.39 414.65 376.1 R
7 X
V
0.5 H
2 Z
N
1 11 Q
0 X
(Generic function) 209.91 365.46 T
4 9.5 Q
(decode-total-seconds) 293.95 365.46 T
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "28" 30
%%Page: "29" 31
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 458.73 702.62 T
2 11 Q
(29) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(Looking at Figur) 99.65 665.62 T
(e 2.3, we analyze what happens in this call:) 181.01 665.62 T
5 9 Q
(?) 99.65 644.95 T
4 F
(decode-total-seconds \050*your-time-of-day*\051;) 110.45 644.95 T
2 11 Q
(1.) 108.65 624.62 T
1 F
(The ar) 126.65 624.62 T
(gument is an instance of) 157.46 624.62 T
4 9.5 Q
(<time-of-day>) 278.27 624.62 T
1 11 Q
(, so Method 2 is called.) 352.37 624.62 T
2 F
(2.) 108.65 604.62 T
1 F
-0.09 (The body of method 2 calls) 126.65 604.62 P
4 9.5 Q
-0.19 (decode-total-seconds) 260.26 604.62 P
1 11 Q
-0.09 ( on an instance of) 374.26 604.62 P
4 9.5 Q
-0.19 (<inte-) 461.45 604.62 P
(ger>) 126.65 590.62 T
1 11 Q
(, the value of the) 149.45 590.62 T
4 9.5 Q
(total-seconds) 232.95 590.62 T
1 11 Q
( slot of the) 307.05 590.62 T
4 9.5 Q
(<time-of-day>) 360.43 590.62 T
1 11 Q
( instance.) 434.53 590.62 T
(Method 1 is called.) 126.65 576.62 T
2 F
(3.) 108.65 556.62 T
1 F
-0.34 (Method 1 r) 126.65 556.62 P
-0.34 (eturns thr) 179.5 556.62 P
-0.34 (ee values to its caller) 226.95 556.62 P
-0.34 (, method 2. Method 2 r) 325.23 556.62 P
-0.34 (eturns those) 434 556.62 P
(thr) 126.65 542.62 T
(ee values.) 140.78 542.62 T
(The purpose of method 2 is simply to allow a dif) 99.65 522.62 T
(fer) 335.5 522.62 T
(ent kind of ar) 348.58 522.62 T
(gument to be) 413.84 522.62 T
(used. It extracts the integer fr) 99.65 508.62 T
(om the) 241.49 508.62 T
4 9.5 Q
(<time-of-day>) 277.97 508.62 T
1 11 Q
( instance, and calls) 352.07 508.62 T
4 9.5 Q
(decode-) 445.8 508.62 T
(total-seconds) 99.65 494.62 T
1 11 Q
( with that integer) 173.75 494.62 T
(.) 256.81 494.62 T
(Note that the technique used in method 2 is similar to r) 126.65 480.62 T
(ecursion, but is not) 394.55 480.62 T
(exactly the same. In pur) 99.65 466.62 T
(e r) 215.53 466.62 T
(ecursion, a function calls itself. In this example, a) 227.7 466.62 T
-0.06 (method for) 99.65 452.62 P
4 9.5 Q
-0.12 (decode-total-seconds) 156.74 452.62 P
1 11 Q
-0.06 ( calls the) 270.74 452.62 P
4 9.5 Q
-0.12 (decode-total-seconds) 315.53 452.62 P
1 11 Q
-0.06 ( generic func-) 429.53 452.62 P
(tion with a dif) 99.65 438.62 T
(fer) 168.34 438.62 T
(ent ar) 181.42 438.62 T
(gument, and a dif) 209.08 438.62 T
(fer) 295.3 438.62 T
(ent method is executed.) 308.38 438.62 T
3 13 Q
(2.9.6  Method for) 99.65 407.29 T
4 F
(say-time-of-day) 187.32 407.29 T
1 11 Q
-0.16 (W) 99.65 387.62 P
-0.16 (e can pr) 109.64 387.62 P
-0.16 (ovide a way to ask an instance of) 147.62 387.62 P
4 9.5 Q
-0.34 (<time-of-day>) 309.37 387.62 P
1 11 Q
-0.16 ( to describe the time in) 383.47 387.62 P
-0.29 (the conventional way) 99.65 373.62 P
-0.29 (, such as 8:30. For the application that we ar) 202.47 373.62 P
-0.29 (e planning, ther) 411.73 373.62 P
-0.29 (e) 487.92 373.62 P
(is no need to view the seconds. The description is printed in a window on the) 99.65 359.62 T
(scr) 99.65 345.62 T
(een. W) 113.34 345.62 T
(e de\336ne a method named) 145.77 345.62 T
4 9.5 Q
(say-time-of-day) 271.91 345.62 T
1 11 Q
(:) 357.41 345.62 T
4 9 Q
(def) 99.65 324.95 T
(ine method say-time-of-day \050time :: <time-of-day>\051;) 115.85 324.95 T
6 F
(// 1) 492.05 324.95 T
4 F
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 110.45 313.95 T
6 F
(// 2) 492.05 313.95 T
4 F
(format\050*window*, "%d:%s%d", hours,) 110.45 302.95 T
6 F
(// 3) 492.05 302.95 T
4 F
(if \050minutes < 10\051 "0" else "" end, minutes\051;) 148.25 291.95 T
6 F
(// 4) 492.05 291.95 T
4 F
(end;) 99.65 280.95 T
6 F
(// 6) 492.05 280.95 T
1 11 Q
(On line 2, we use) 99.65 260.62 T
4 9.5 Q
(let) 185.78 260.62 T
1 11 Q
( to de\336ne two local variables, and initialize them to the \336rst) 202.88 260.62 T
(and second values r) 99.65 246.62 T
(eturned by) 196.1 246.62 T
4 9.5 Q
(decode-total-seconds) 252.02 246.62 T
1 11 Q
(. Remember that) 366.02 246.62 T
4 9.5 Q
(decode-) 449.1 246.62 T
(total-seconds) 99.65 232.62 T
1 11 Q
( r) 173.75 232.62 T
(eturns thr) 180.65 232.62 T
(ee values \050the thir) 228.43 232.62 T
(d value is the seconds\051. For the pur-) 314.95 232.62 T
(poses of our application, ther) 99.65 218.62 T
(e is no need to use the thir) 241.37 218.62 T
(d value.) 368.58 218.62 T
-0.08 (On line 4, we print a leading 0 for the minutes when ther) 126.65 204.62 P
-0.08 (e ar) 401.49 204.62 P
-0.08 (e fewer than 10) 419.08 204.62 P
(minutes. Note that) 99.65 190.62 T
4 9.5 Q
(if) 193.19 190.62 T
1 11 Q
( r) 204.59 190.62 T
(eturns a value in Dylan, in contrast to certain languages.) 211.49 190.62 T
(W) 126.65 176.62 T
(e can call) 136.64 176.62 T
4 9.5 Q
(say-time-of-day) 183.73 176.62 T
1 11 Q
(:) 269.23 176.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "29" 31
%%Page: "30" 32
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(30) 63.65 702.62 T
0 9.5 Q
(2.10 The <time-offset> class and method) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
5 9 Q
0 X
(?) 99.65 666.95 T
4 F
(say-time-of-day \050*your-time-of-day*\051;) 110.45 666.95 T
5 F
(8:30) 99.65 655.95 T
(?) 99.65 636.95 T
4 F
(say-time-of-day \050*my-time-of-day*\051;) 110.45 636.95 T
5 F
(0:02) 99.65 625.95 T
1 11 Q
(Note that the listener displays the output \050printed by) 99.65 605.62 T
4 9.5 Q
(format) 359.65 605.62 T
1 11 Q
(\051, but displays no) 393.86 605.62 T
(values because) 99.65 591.62 T
4 9.5 Q
(format) 174.93 591.62 T
1 11 Q
( does not r) 209.13 591.62 T
(eturn values and ther) 260.18 591.62 T
(efor) 364.18 591.62 T
(e) 383.26 591.62 T
4 9.5 Q
(say-time-of-day) 391.28 591.62 T
1 11 Q
(does not r) 99.65 577.62 T
(eturn any values.) 147.95 577.62 T
3 15 Q
(2.10  The) 99.65 537.95 T
4 13 Q
(<time-offset>) 155.72 537.95 T
3 15 Q
( class and method) 257.12 537.95 T
1 11 Q
(In this section, we de\336ne a class to r) 99.65 517.62 T
(epr) 273.28 517.62 T
(esent time of) 289.31 517.62 T
(fsets, and a method that) 351.24 517.62 T
-0.07 (describes a time of) 99.65 503.62 P
-0.07 (fset. W) 189.52 503.62 P
-0.07 (e need this class and method for our sample application.) 222.12 503.62 P
4 9 Q
(def) 99.65 482.95 T
(ine class <time-offset> \050<object>\051) 115.85 482.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 110.45 471.95 T
(slot past?) 110.45 460.95 T
( :: <boolean>, init-keyword: past?:;) 207.65 460.95 T
(end;) 99.65 449.95 T
1 11 Q
-0.3 (The) 99.65 429.62 P
4 9.5 Q
-0.62 (<time-offset>) 120.51 429.62 P
1 11 Q
-0.3 ( class has two slots:) 194.61 429.62 P
4 9.5 Q
-0.62 (total-seconds) 289.98 429.62 P
1 11 Q
-0.3 ( and) 364.08 429.62 P
4 9.5 Q
-0.62 (past?) 387.6 429.62 P
1 11 Q
-0.3 (. The) 416.1 429.62 P
4 9.5 Q
-0.62 (past?) 442.16 429.62 P
1 11 Q
-0.3 (slot) 475.74 429.62 P
(is of the type) 99.65 415.62 T
4 9.5 Q
(<boolean>) 165.02 415.62 T
1 11 Q
( and can hold either) 216.32 415.62 T
4 9.5 Q
(#t) 315.88 415.62 T
1 11 Q
( or) 327.28 415.62 T
4 9.5 Q
(#f) 343.13 415.62 T
1 11 Q
(. If the time of) 354.53 415.62 T
(fset is in the) 422.15 415.62 T
(past, the) 99.65 401.62 T
4 9.5 Q
(past?) 143.52 401.62 T
1 11 Q
( slot contains) 172.02 401.62 T
4 9.5 Q
(#t) 238.37 401.62 T
1 11 Q
(.) 249.77 401.62 T
(W) 126.65 387.62 T
(e can cr) 136.64 387.62 T
(eate instances of) 173.22 387.62 T
4 9.5 Q
(<time-offset>) 255.34 387.62 T
1 11 Q
(:) 329.44 387.62 T
5 9 Q
(?) 99.65 366.95 T
4 F
( def) 105.05 366.95 T
(ine variable *my-time-offset* :: <time-offset> =) 126.65 366.95 T
(make\050<time-offset>, total-seconds: encode-total-seconds \05015, 20, 10\051,) 121.25 355.95 T
(past?: #f\051;) 240.05 344.95 T
5 F
(?) 99.65 325.95 T
4 F
( def) 105.05 325.95 T
(ine variable *your-time-offset* :: <time-offset> =) 126.65 325.95 T
(make\050<time-offset>, total-seconds: encode-total-seconds \0506, 45, 30\051,) 121.25 314.95 T
(past?: #t\051;) 240.05 303.95 T
1 11 Q
(W) 99.65 283.62 T
(e need a method to describe instances of) 109.64 283.62 T
4 9.5 Q
(<time-offset>) 308.03 283.62 T
1 11 Q
(. W) 382.13 283.62 T
(e might imagine) 397.62 283.62 T
(de\336ning the method like this:) 99.65 269.62 T
4 9 Q
(def) 99.65 248.95 T
(ine method say-time-offset \050time :: <time-offset>\051 => \050\051;) 115.85 248.95 T
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 110.45 237.95 T
(format \050*window*, "%s %d:%s%d",) 110.45 226.95 T
(if \050time.past?\051 "minus" else "plus" end, hours,) 153.65 215.95 T
(if \050minutes < 10\051 "0" else "" end, minutes\051;) 153.65 204.95 T
(end;) 99.65 193.95 T
1 11 Q
(W) 99.65 173.62 T
(e might imagine calling) 109.64 173.62 T
4 9.5 Q
(say-time-offset) 226.83 173.62 T
1 11 Q
( on instances of) 312.33 173.62 T
4 9.5 Q
(<time-offset>) 389.98 173.62 T
1 11 Q
(:) 464.08 173.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "30" 32
%%Page: "31" 33
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 458.73 702.62 T
2 11 Q
(31) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
5 9 Q
0 X
(?) 99.65 666.95 T
4 F
(say-time-offset \050*my-time-offset*\051;) 110.45 666.95 T
5 F
(plus 15:20) 99.65 655.95 T
(?) 99.65 636.95 T
4 F
(say-time-offset \050*your-time-offset*\051;) 110.45 636.95 T
5 F
(minus 6:45) 99.65 625.95 T
1 11 Q
(If we actually test this method in a listener) 99.65 605.62 T
(, however) 304.96 605.62 T
(, the r) 352.33 605.62 T
(esult is dif) 379.98 605.62 T
(fer) 430.09 605.62 T
(ent:) 443.17 605.62 T
5 9 Q
(?) 99.65 584.95 T
4 F
(say-time-offset \050*my-time-offset*\051;) 110.45 584.95 T
5 F
(ERROR: NO APPLICABLE METHOD FOR DECODE-TOTAL-SECONDS ON <TIME-OFFSET>) 99.65 573.95 T
1 11 Q
(T) 99.65 553.62 T
(o understand this err) 105.38 553.62 T
(or) 207.49 553.62 T
(, we can look at the methods for) 217.03 553.62 T
4 9.5 Q
(decode-total-seconds) 375.05 553.62 T
1 11 Q
(in Figur) 99.65 539.62 T
(e 2.3, page 28. Method 1 takes an ar) 138.21 539.62 T
(gument of the type) 309.8 539.62 T
4 9.5 Q
(<integer>) 405.03 539.62 T
1 11 Q
(.) 456.33 539.62 T
(Method 2 takes an ar) 99.65 525.62 T
(gument of the type) 201.22 525.62 T
4 9.5 Q
(<time-of-day>) 296.45 525.62 T
1 11 Q
(. Ther) 370.55 525.62 T
(e is no method for) 398.61 525.62 T
(instances of) 99.65 511.62 T
4 9.5 Q
(<time-offset>) 159.39 511.62 T
1 11 Q
(, so Dylan signals an err) 233.49 511.62 T
(or) 349.8 511.62 T
(.) 359.34 511.62 T
(Ther) 126.65 497.62 T
(e ar) 149.21 497.62 T
(e thr) 166.88 497.62 T
(ee possible appr) 189.03 497.62 T
(oaches to solving this pr) 267.64 497.62 T
(oblem.) 385.37 497.62 T
3 13 Q
(2.10.1  First approach) 99.65 466.29 T
1 11 Q
(W) 99.65 446.62 T
(e could de\336ne the) 109.64 446.62 T
4 9.5 Q
(say-time-offset) 198.92 446.62 T
1 11 Q
( method to call) 284.42 446.62 T
4 9.5 Q
(decode-total-seconds) 359.5 446.62 T
1 11 Q
(with an integer:) 99.65 432.62 T
4 9 Q
(def) 99.65 411.95 T
(ine method say-time-offset \050time :: <time-offset>\051 => \050\051;) 115.85 411.95 T
(let \050hours, minutes\051 = decode-total-seconds \050time.total-seconds\051;) 110.45 400.95 T
(format \050*window*, "%s %d:%s%d",) 110.45 389.95 T
(if \050time.past?\051 "minus" else "plus" end, hours,) 153.65 378.95 T
(if \050minutes < 10\051 "0" else "" end, minutes\051;) 153.65 367.95 T
(end;) 99.65 356.95 T
1 11 Q
(This appr) 99.65 336.62 T
(oach works, but it is awkwar) 146.28 336.62 T
(d because we need to r) 286.44 336.62 T
(emember what) 397.05 336.62 T
(kinds of ar) 99.65 322.62 T
(guments) 151.57 322.62 T
4 9.5 Q
(decode-total-seconds) 196.7 322.62 T
1 11 Q
( can take. The convenient calling syn-) 310.7 322.62 T
(tax that we intr) 99.65 308.62 T
(oduced for calling) 173.51 308.62 T
4 9.5 Q
(decode-total-seconds) 264.52 308.62 T
1 11 Q
( with an instance of) 378.52 308.62 T
4 9.5 Q
(<time-of-day>) 99.65 294.62 T
1 11 Q
( is not available for other kinds of time.) 173.75 294.62 T
3 13 Q
(2.10.2  Second approach) 99.65 263.29 T
1 11 Q
(W) 99.65 243.62 T
(e could de\336ne a thir) 109.64 243.62 T
(d method for) 206.5 243.62 T
4 9.5 Q
(decode-total-seconds) 273.18 243.62 T
1 11 Q
( that takes as its ar) 387.18 243.62 T
(gu-) 476.4 243.62 T
(ment an instance of) 99.65 229.62 T
4 9.5 Q
(<time-offset>) 197.1 229.62 T
1 11 Q
(:) 271.2 229.62 T
6 9 Q
(// Method 3) 99.65 208.95 T
4 F
(def) 99.65 197.95 T
(ine method decode-total-seconds \050time :: <time-offset>\051) 115.85 197.95 T
(decode-total-seconds \050time.total-seconds\051;) 110.45 186.95 T
(end;) 99.65 175.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "31" 33
%%Page: "32" 34
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(32) 63.65 702.62 T
0 9.5 Q
(2.11 Summary) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(The method for) 99.65 665.62 T
4 9.5 Q
(say-time-offset) 178.02 665.62 T
1 11 Q
( can then call) 263.52 665.62 T
4 9.5 Q
(decode-total-seconds) 329.75 665.62 T
1 11 Q
(, as we) 443.75 665.62 T
(originally thought:) 99.65 651.62 T
4 9 Q
(def) 99.65 630.95 T
(ine method say-time-offset \050time :: <time-offset>\051 => \050\051;) 115.85 630.95 T
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 110.45 619.95 T
(format \050*window*, "%s %d:%s%d",) 110.45 608.95 T
(if \050time.past?\051 "minus" else "plus" end, hours,) 153.65 597.95 T
(if \050minutes < 10\051 "0" else "" end, minutes\051;) 153.65 586.95 T
(end;) 99.65 575.95 T
1 11 Q
(This appr) 99.65 555.62 T
(oach works, and it pr) 146.28 555.62 T
(eserves the \337exibility of calling) 249.29 555.62 T
4 9.5 Q
(decode-total-) 402.39 555.62 T
(seconds) 99.65 541.62 T
1 11 Q
( on instances of) 139.55 541.62 T
4 9.5 Q
(<integer>) 217.2 541.62 T
1 11 Q
(,) 268.5 541.62 T
4 9.5 Q
(<time-of-day>) 274 541.62 T
1 11 Q
(, and) 348.1 541.62 T
4 9.5 Q
(<time-offset>) 374.97 541.62 T
1 11 Q
(. How-) 449.07 541.62 T
(ever) 99.65 527.62 T
(, the body of method 3 is identical to the body of method 2. Duplication of) 119.93 527.62 T
-0.36 (code is ugly) 99.65 513.62 P
-0.36 (, and is particularly undesirable in an object-oriented language, wher) 156.01 513.62 P
-0.36 (e) 487.99 513.62 P
(it usually indicates a \337aw in the overall design.) 99.65 499.62 T
3 13 Q
(2.10.3  Third approach) 99.65 468.29 T
1 11 Q
(The best solution to the pr) 99.65 448.62 T
(oblem is to r) 226.72 448.62 T
(ethink the classes and methods in a mor) 286.85 448.62 T
(e) 481.13 448.62 T
(object-oriented style, using inheritance. In Chapter 3, we show this solution.) 99.65 434.62 T
3 15 Q
(2.1) 99.65 394.95 T
(1  Summary) 116.07 394.95 T
1 11 Q
(This chapter cover) 99.65 374.62 T
(ed the following:) 189.28 374.62 T
(\245) 108.65 354.62 T
(W) 126.65 354.62 T
(e used a listener to enter Dylan statements and see their values or output.) 136.64 354.62 T
(\245) 108.65 334.62 T
(W) 126.65 334.62 T
(e de\336ned module variables \050with) 136.64 334.62 T
4 9.5 Q
(def) 300.24 334.62 T
(ine variable) 317.34 334.62 T
1 11 Q
(\051, constants \050with) 385.74 334.62 T
4 9.5 Q
(def) 126.65 320.62 T
(ine constant) 143.75 320.62 T
1 11 Q
(\051 and local variables \050with) 212.15 320.62 T
4 9.5 Q
(let) 340.98 320.62 T
1 11 Q
(\051.) 358.08 320.62 T
(\245) 108.65 300.62 T
(W) 126.65 300.62 T
(e de\336ned a method of a generic function \050with) 136.64 300.62 T
4 9.5 Q
(def) 364.35 300.62 T
(ine method) 381.45 300.62 T
1 11 Q
(\051.) 438.45 300.62 T
(\245) 108.65 280.62 T
(W) 126.65 280.62 T
(e showed that a generic function can contain two methods, each method) 136.64 280.62 T
(intended for dif) 126.65 266.62 T
(fer) 203.12 266.62 T
(ent ar) 216.2 266.62 T
(guments. Both the) 243.85 266.62 T
4 9.5 Q
(say-greeting) 335.21 266.62 T
1 11 Q
( and) 403.61 266.62 T
4 9.5 Q
(decode-) 427.73 266.62 T
(total-seconds) 126.65 252.62 T
1 11 Q
( generic functions contain two methods.) 200.75 252.62 T
(\245) 108.65 232.62 T
(W) 126.65 232.62 T
(e de\336ned a class \050with) 136.64 232.62 T
4 9.5 Q
(def) 247.13 232.62 T
(ine class) 264.23 232.62 T
1 11 Q
(\051.) 315.53 232.62 T
(\245) 108.65 212.62 T
(W) 126.65 212.62 T
(e cr) 136.64 212.62 T
(eated an instance \050with) 153.69 212.62 T
4 9.5 Q
(make) 268.87 212.62 T
1 11 Q
(\051.) 291.67 212.62 T
(\245) 108.65 192.62 T
(W) 126.65 192.62 T
(e r) 136.64 192.62 T
(ead the value of a slot by calling a getter) 148.8 192.62 T
(.) 343.3 192.62 T
(\245) 108.65 172.62 T
(W) 126.65 172.62 T
(e set the value of a slot by using the assignment operator) 136.64 172.62 T
4 9.5 Q
(:=) 414.78 172.62 T
1 11 Q
( with a getter) 426.18 172.62 T
(.) 489.65 172.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "32" 34
%%Page: "33" 35
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 458.73 702.62 T
2 11 Q
(33) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(\245) 108.65 665.62 T
(W) 126.65 665.62 T
(e de\336ned a method that r) 136.64 665.62 T
(eturns multiple values \050with) 259.11 665.62 T
4 9.5 Q
(values) 399.93 665.62 T
1 11 Q
(\051, assigning) 434.13 665.62 T
(values to multiple local variables \050with) 126.65 651.62 T
4 9.5 Q
(let) 318.43 651.62 T
1 11 Q
(\051.) 335.53 651.62 T
(\245) 108.65 631.62 T
(W) 126.65 631.62 T
(e showed some of the naming conventions used by Dylan and r) 136.64 631.62 T
(ecom-) 445.33 631.62 T
(mended for user code. See T) 126.65 617.62 T
(able 2.2.) 263.09 617.62 T
0 0 0 1 0 0 0 K
99.65 582.96 513.65 590.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(T) 153.14 594.62 T
(able 2.2  Dylan naming conventions shown in this chapter) 158.87 594.62 T
(.) 439.41 594.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Language element) 189.46 561.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Example of name) 327.36 561.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(module variable) 177.23 538.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(*my-time-of-day*) 303.4 539.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(constant) 177.23 517.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
($pi) 303.4 518.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(class) 177.23 496.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<integer>) 303.4 497.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(pr) 177.23 475.63 T
(edicate) 187.99 475.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(instance?) 303.4 476.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
297.4 576.96 297.4 467.96 2 L
V
0.5 H
0 Z
N
171.23 551.96 442.06 551.96 2 L
V
N
171.23 530.96 442.06 530.96 2 L
V
N
171.23 509.96 442.06 509.96 2 L
V
N
171.23 488.96 442.06 488.96 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "33" 35
%%Page: "34" 36
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(34) 63.65 702.62 T
0 9.5 Q
(2.11 Summary) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "34" 36
%%Page: "35" 37
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(35) 292.15 135.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(3) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(3) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Simple Use of Inheritance) 100.65 591.4 T
99.65 159.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(In Chapter 2, we showed initial de\336nitions of classes and methods that r) 99.65 449.62 T
(epr) 450.32 449.62 T
(esent) 466.34 449.62 T
(times. In this chapter) 99.65 435.62 T
(, we r) 200.83 435.62 T
(ede\336ne the) 227.67 435.62 T
4 9.5 Q
(<time-of-day>) 284.01 435.62 T
1 11 Q
( and) 358.11 435.62 T
4 9.5 Q
(<time-offset>) 382.23 435.62 T
1 11 Q
( classes) 456.33 435.62 T
(to use inheritance, and we r) 99.65 421.62 T
(ede\336ne a method for) 233.98 421.62 T
4 9.5 Q
(decode-total-seconds) 337.78 421.62 T
1 11 Q
( to take) 451.78 421.62 T
(advantage of inheritance. W) 99.65 407.62 T
(e also show how to de\336ne a generic function explic-) 235.57 407.62 T
(itly) 99.65 393.62 T
(, using) 114.53 393.62 T
4 9.5 Q
(def) 149.8 393.62 T
(ine generic) 166.9 393.62 T
1 11 Q
(.) 229.6 393.62 T
3 15 Q
(3.1  Class inheritance) 99.65 353.95 T
1 11 Q
-0.02 (In Chapter 2, we de\336ned two simple classes,) 99.65 333.62 P
4 9.5 Q
-0.04 (<time-of-day>) 317.88 333.62 P
1 11 Q
-0.02 ( and) 391.98 333.62 P
4 9.5 Q
-0.04 (<time-offset>) 416.07 333.62 P
1 11 Q
-0.02 (:) 490.17 333.62 P
4 9 Q
(def) 99.65 312.95 T
(ine class <time-of-day> \050<object>\051) 115.85 312.95 T
6 F
(// Total number of seconds past midnight) 110.45 301.95 T
4 F
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 110.45 290.95 T
(end class <time-of-day>;) 99.65 279.95 T
(def) 99.65 260.95 T
(ine class <time-offset> \050<object>\051) 115.85 260.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 110.45 249.95 T
(slot past?) 110.45 238.95 T
( :: <boolean>, init-keyword: past?:;) 207.65 238.95 T
(end;) 99.65 227.95 T
1 11 Q
(Ther) 99.65 207.62 T
(e is commonality between the two classes:) 122.21 207.62 T
(\245) 108.65 187.62 T
(Both classes r) 126.65 187.62 T
(epr) 191.86 187.62 T
(esent a kind of time \321 they ar) 207.88 187.62 T
(e r) 353.72 187.62 T
(elated conceptually) 365.89 187.62 T
(.) 459.26 187.62 T
(\245) 108.65 167.62 T
(Both classes have a) 126.65 167.62 T
4 9.5 Q
(total-seconds) 222.1 167.62 T
1 11 Q
( slot \321 they have str) 296.2 167.62 T
(uctur) 395.67 167.62 T
(e in common.) 421.55 167.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "35" 37
%%Page: "36" 38
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(36) 63.65 702.62 T
0 9.5 Q
(3.1 Class inheritance) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(\245) 108.65 665.62 T
(Both classes need a) 126.65 665.62 T
4 9.5 Q
(decode-total-seconds) 222.37 665.62 T
1 11 Q
( method to convert the) 336.37 665.62 T
4 9.5 Q
(total-) 449.37 665.62 T
(seconds) 126.65 651.62 T
1 11 Q
( slot to hours, minutes, and seconds \321 they have behavior in com-) 166.55 651.62 T
(mon.) 126.65 637.62 T
(W) 99.65 617.62 T
(e can use inheritance to model the shar) 109.64 617.62 T
(ed aspects of these two classes dir) 298.44 617.62 T
(ectly) 462.65 617.62 T
(.) 484.48 617.62 T
(W) 99.65 603.62 T
(e need to de\336ne a new class, such as) 109.64 603.62 T
4 9.5 Q
(<time>) 287.98 603.62 T
1 11 Q
(, and to r) 322.18 603.62 T
(ede\336ne the two classes to) 365.54 603.62 T
(inherit fr) 99.65 589.62 T
(om) 142.61 589.62 T
4 9.5 Q
(<time>) 161.08 589.62 T
1 11 Q
(. The) 195.28 589.62 T
4 9.5 Q
(<time>) 221.95 589.62 T
1 11 Q
( class will contain the slot) 256.15 589.62 T
4 9.5 Q
(total-seconds,) 383.03 589.62 T
1 11 Q
( so) 462.83 589.62 T
(both these classes inherit that slot. W) 99.65 575.62 T
(e r) 277.94 575.62 T
(ede\336ne the) 290.1 575.62 T
4 9.5 Q
(decode-total-seconds) 346.44 575.62 T
1 11 Q
-0.35 (method such that its parameter is of the) 99.65 561.62 P
4 9.5 Q
-0.72 (<time>) 292.59 561.62 P
1 11 Q
-0.35 ( type, which means it can be called) 326.79 561.62 P
(for instances of) 99.65 547.62 T
4 9.5 Q
(<time-of-day>) 176.15 547.62 T
1 11 Q
( and of) 250.25 547.62 T
4 9.5 Q
(<time-offset>) 286.8 547.62 T
1 11 Q
(.) 360.89 547.62 T
3 13 Q
(3.1.1  New de\336nitions of the time classes) 99.65 516.29 T
1 11 Q
(W) 99.65 496.62 T
(e de\336ne the new class) 109.64 496.62 T
4 9.5 Q
(<time>:) 217.99 496.62 T
4 9 Q
(def) 99.65 475.95 T
(ine class <time> \050<object>\051) 115.85 475.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 110.45 464.95 T
(end;) 99.65 453.95 T
1 11 Q
(W) 99.65 433.62 T
(e r) 109.64 433.62 T
(ede\336ne) 121.8 433.62 T
4 9.5 Q
(<time-of-day>) 160.14 433.62 T
1 11 Q
( and) 234.24 433.62 T
4 9.5 Q
(<time-offset>) 258.36 433.62 T
1 11 Q
( to inherit fr) 332.46 433.62 T
(om) 390.52 433.62 T
4 9.5 Q
(<time>) 408.99 433.62 T
1 11 Q
(:) 443.19 433.62 T
4 9 Q
(def) 99.65 412.95 T
(ine class <time-of-day> \050<time>\051) 115.85 412.95 T
(end;) 99.65 401.95 T
(def) 99.65 382.95 T
(ine class <time-offset> \050<time>\051) 115.85 382.95 T
(slot past? :: <boolean>;) 110.45 371.95 T
(end;) 99.65 360.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Dynamic feature\321no need to recompile:) 132.65 320.62 T
1 F
(In certain object-oriented) 338.58 320.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(languages and development envir) 132.65 306.62 T
(onments, a complete r) 298.42 306.62 T
(ecompile of) 405.65 306.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the pr) 132.65 292.62 T
(ogram would be necessary to change the super) 161.41 292.62 T
(class of a class.) 389.29 292.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.1 (Most Dylan development envir) 132.65 278.62 P
-0.1 (onments r) 284.47 278.62 P
-0.1 (equir) 333.31 278.62 P
-0.1 (e only that you compile) 358.72 278.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.32 (the new class de\336nitions. The dif) 132.65 264.62 P
-0.32 (fer) 290.46 264.62 P
-0.32 (ence between compiling only a few) 303.54 264.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(class de\336nitions versus compiling the whole pr) 132.65 250.62 T
(ogram can be impor-) 361.36 250.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tant for complex applications wher) 132.65 236.62 T
(e a complete r) 302.45 236.62 T
(ecompilation would) 370.16 236.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(be time-consuming.) 132.65 222.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 333.83 126.65 215.08 2 L
V
0.25 H
0 Z
N
477.65 333.83 477.65 215.08 2 L
V
N
126.52 333.95 477.77 333.95 2 L
V
N
126.52 214.95 477.77 214.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "36" 38
%%Page: "37" 39
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3 Simple Use of Inheritance) 405.4 702.62 T
2 11 Q
(37) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(3.1.2  Slot inheritance) 99.65 664.29 T
1 11 Q
(A class inherits the slots of its super) 99.65 644.62 T
(classes, and can de\336ne mor) 273.26 644.62 T
(e slots if they ar) 405.45 644.62 T
(e) 481.72 644.62 T
(needed. For example, the) 99.65 630.62 T
4 9.5 Q
(<time-of-day>) 224.76 630.62 T
1 11 Q
( and) 298.86 630.62 T
4 9.5 Q
(<time-offset>) 322.98 630.62 T
1 11 Q
( classes inherit the) 397.08 630.62 T
4 9.5 Q
(total-seconds) 99.65 616.62 T
1 11 Q
( slot fr) 173.75 616.62 T
(om their super) 204.51 616.62 T
(class,) 275.86 616.62 T
4 9.5 Q
(<time>) 304.27 616.62 T
1 11 Q
(. The) 338.47 616.62 T
4 9.5 Q
(<time-offset>) 365.14 616.62 T
1 11 Q
( class) 439.24 616.62 T
(de\336nes an additional slot of its own, named) 99.65 602.62 T
4 9.5 Q
(past?) 315.08 602.62 T
1 11 Q
(. T) 343.58 602.62 T
(able 3.1 shows the slots of) 354.81 602.62 T
(these thr) 99.65 588.62 T
(ee time classes.) 141.72 588.62 T
(A class inherits the slot options fr) 99.65 464.13 T
(om its super) 261.69 464.13 T
(classes as well. A class cannot) 321.68 464.13 T
-0.38 (r) 99.65 450.13 P
-0.38 (emove or r) 103.79 450.13 P
-0.38 (eplace any slots de\336ned by its super) 155.52 450.13 P
-0.38 (classes. It is an err) 328.65 450.13 P
-0.38 (or to r) 414.57 450.13 P
-0.38 (ede\336ne an) 443.41 450.13 P
(inherited slot.) 99.65 436.13 T
3 13 Q
(3.1.3  Use of existing instances of the classes) 99.65 404.79 T
1 11 Q
(The variables) 99.65 385.13 T
4 9.5 Q
(*my-time-of-day*) 167.54 385.13 T
1 11 Q
(,) 258.74 385.13 T
4 9.5 Q
(*your-time-of-day*) 264.24 385.13 T
1 11 Q
(,) 366.84 385.13 T
4 9.5 Q
(*my-time-offset*) 372.34 385.13 T
1 11 Q
(, and) 463.54 385.13 T
4 9.5 Q
(*your-time-offset*) 99.65 371.13 T
1 11 Q
( all contain instances of the classes that have now been r) 202.25 371.13 T
(ede-) 473.94 371.13 T
(\336ned. Most Dylan envir) 99.65 357.13 T
(onments update the existing instances automatically) 215.32 357.13 T
(, so) 468.79 357.13 T
-0.13 (you do not need to r) 99.65 343.13 P
-0.13 (emake those instances. In this case, the new de\336nition is com-) 197.62 343.13 P
(patible with the old one, because the slots in each instance ar) 99.65 329.13 T
(e the same.) 394.22 329.13 T
3 13 Q
(3.1.4  Relationships of the time classes) 99.65 297.79 T
1 11 Q
(It is helpful to look at the r) 99.65 278.13 T
(elationships among the time classes. W) 228.45 278.13 T
(e show them in) 417.25 278.13 T
(Figur) 99.65 264.13 T
(e 3.1.) 125.86 264.13 T
0 0 0 1 0 0 0 K
99.65 548.96 513.65 556.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(T) 210.79 560.62 T
(able 3.1  Slots of thr) 216.52 560.62 T
(ee time classes.) 311.11 560.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time>) 160.59 530.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-of-day>) 255.3 530.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-offset>) 357.88 530.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds) 160.59 511.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds) 255.3 511.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds) 357.88 511.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(past?) 357.88 491.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
249.3 542.96 249.3 484.46 2 L
V
0.5 H
0 Z
N
351.88 542.96 351.88 484.46 2 L
V
N
154.59 523.46 458.7 523.46 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "37" 39
%%Page: "38" 40
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(38) 63.65 702.62 T
0 9.5 Q
(3.1 Class inheritance) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
99.65 530.39 513.65 538.38 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 163.98 542.05 T
(e 3.1  Inheritance r) 190.19 542.05 T
(elationships of the time classes.) 279.32 542.05 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Referring to Figur) 99.65 510.06 T
(e 3.1, we can intr) 186.91 510.06 T
(oduce terminology by example:) 268.24 510.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108.65 490.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time-of-day>) 126.65 490.06 T
1 11 Q
( is a) 200.75 490.06 T
2 F
(direct subclass) 222.36 490.06 T
1 F
( of) 295.96 490.06 T
4 9.5 Q
(<time>) 311.13 490.06 T
1 11 Q
(.) 345.33 490.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108.65 470.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time-of-day>) 126.65 470.06 T
1 11 Q
( is a) 200.75 470.06 T
2 F
(subclass) 222.36 470.06 T
1 F
( of) 264.5 470.06 T
4 9.5 Q
(<object>) 279.67 470.06 T
1 11 Q
(.) 325.27 470.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108.65 450.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time>) 126.65 450.06 T
1 11 Q
( is a) 160.85 450.06 T
2 F
(direct superclass) 182.46 450.06 T
1 F
( of) 265.84 450.06 T
4 9.5 Q
(<time-of-day>) 281.01 450.06 T
1 11 Q
(.) 355.11 450.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108.65 430.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<object>) 126.65 430.06 T
1 11 Q
( is a) 172.25 430.06 T
2 F
(superclass) 193.86 430.06 T
1 F
( of) 245.78 430.06 T
4 9.5 Q
(<time-of-day>) 260.95 430.06 T
1 11 Q
(.) 335.05 430.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108.65 410.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(When you make an instance of the class) 126.65 410.06 T
4 9.5 Q
(<time-of-day>) 322.72 410.06 T
1 11 Q
(, the r) 396.82 410.06 T
(esult is a) 424.48 410.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(direct instance) 126.65 396.06 T
1 F
( of the class) 199.64 396.06 T
4 9.5 Q
(<time-of-day>.) 258.48 396.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(\245) 108.65 376.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A dir) 126.65 376.06 T
(ect instance of) 152.02 376.06 T
4 9.5 Q
(<time-of-day>) 223.59 376.06 T
1 11 Q
( is an) 297.69 376.06 T
2 F
(indirect instance) 325.71 376.06 T
1 F
( of) 409.09 376.06 T
4 9.5 Q
(<time>) 424.26 376.06 T
1 11 Q
( and) 458.46 376.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<object>) 126.65 362.06 T
1 11 Q
(.) 172.25 362.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108.65 342.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(An object is an) 126.65 342.06 T
2 F
( instance) 198.03 342.06 T
1 F
( of a class if it is either a dir) 242.31 342.06 T
(ect or an indir) 374.3 342.06 T
(ect) 442.22 342.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(instance of that class. A dir) 126.65 328.06 T
(ect instance of) 257.34 328.06 T
4 9.5 Q
(<time-of-day>) 328.9 328.06 T
1 11 Q
( is a general) 403.01 328.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(instance of) 126.65 314.06 T
4 9.5 Q
(<time-of-day>) 181.73 314.06 T
1 11 Q
(,) 255.82 314.06 T
4 9.5 Q
(<time>) 261.33 314.06 T
1 11 Q
(, and) 295.52 314.06 T
4 9.5 Q
(<object>) 322.4 314.06 T
1 11 Q
(.) 368 314.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108.65 294.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time-of-day>) 126.65 294.06 T
1 11 Q
( is a) 200.75 294.06 T
2 F
(subtype) 222.36 294.06 T
1 F
(of) 265.44 294.06 T
4 9.5 Q
(<time>) 277.86 294.06 T
1 11 Q
( and) 312.06 294.06 T
4 9.5 Q
(<object>) 336.18 294.06 T
1 11 Q
(. A class is also a sub-) 381.78 294.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(type of itself. All classes ar) 126.65 280.06 T
(e types.) 255.44 280.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108.65 260.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<object>) 126.65 260.06 T
1 11 Q
( is a) 172.25 260.06 T
2 F
(supertype) 193.86 260.06 T
1 F
( of all the other classes shown. All classes ar) 243.97 260.06 T
(e sub-) 456.85 260.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(types of) 126.65 246.06 T
4 9.5 Q
(<object>) 168.06 246.06 T
1 11 Q
(. All instances ar) 213.66 246.06 T
(e general instances of) 293.84 246.06 T
4 9.5 Q
(<object>) 400.45 246.06 T
1 11 Q
(.) 446.05 246.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
0 0 0 1 0 0 0 K
180.08 558.38 433.22 661.95 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<object>) 275.56 651.38 T
(<time-offset>) 307.92 574.39 T
(<time-of-day>) 207.36 573.68 T
(<time>) 281.26 611.52 T
301.67 632.92 298.36 621.38 295.06 632.92 298.36 632.92 4 Y
V
298.36 645.67 298.36 632.92 2 L
0.5 H
2 Z
N
257.75 585.85 245.86 584.24 255.09 591.91 256.42 588.88 4 Y
V
293.01 604.95 256.42 588.88 2 L
N
338.15 592.01 347.29 584.24 335.42 585.99 336.78 589 4 Y
V
301.58 604.95 336.79 589 2 L
N
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "38" 40
%%Page: "39" 41
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3 Simple Use of Inheritance) 405.4 702.62 T
2 11 Q
(39) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 15 Q
0 X
(3.2  Methods for classes that use inheritance) 99.65 662.95 T
1 11 Q
(Now that the classes ar) 99.65 642.62 T
(e de\336ned, we can r) 211.79 642.62 T
(ede\336ne method 2 of) 303.23 642.62 T
4 9.5 Q
(decode-total-) 402.68 642.62 T
(seconds) 99.65 628.62 T
1 11 Q
( to have its parameter be of the type) 139.55 628.62 T
4 9.5 Q
(<time>) 316.73 628.62 T
1 11 Q
(, instead of) 350.92 628.62 T
4 9.5 Q
(<time-of-day>.) 406.94 628.62 T
1 11 Q
(Figur) 99.65 614.62 T
(e 3.2 shows the methods for the) 125.86 614.62 T
4 9.5 Q
(decode-total-seconds) 281.93 614.62 T
1 11 Q
( generic function.) 395.93 614.62 T
0 0 0 1 0 0 0 K
99.65 373.52 513.65 381.52 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 120.73 385.18 T
(e 3.2  The) 146.94 385.18 T
4 9.5 Q
(decode-total-seconds) 195.37 385.18 T
1 11 Q
( generic function and its methods.) 309.37 385.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 99.65 353.19 T
(e can now call) 109.64 353.19 T
4 9.5 Q
(decode-total-seconds) 181.06 353.19 T
1 11 Q
( on instances of) 295.06 353.19 T
4 9.5 Q
(<time-of-day>) 372.71 353.19 T
1 11 Q
( and on) 446.81 353.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(instances of) 99.65 339.19 T
4 9.5 Q
(<time-offset>) 159.39 339.19 T
1 11 Q
(:) 233.49 339.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(?) 99.65 318.52 T
4 F
(decode-total-seconds \050*your-time-of-day*\051;) 110.45 318.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(8) 99.65 307.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 99.65 296.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 99.65 285.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(?) 99.65 266.52 T
4 F
(decode-total-seconds \050*your-time-offset*\051;) 110.45 266.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(6) 99.65 255.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(45) 99.65 244.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 99.65 233.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(The r) 99.65 213.19 T
(esult is as expected \321 the) 124.96 213.19 T
4 9.5 Q
(decode-total-seconds) 252.38 213.19 T
1 11 Q
( generic function r) 366.38 213.19 T
(eturns) 455.04 213.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the hours, minutes, and seconds of the time stor) 99.65 199.19 T
(ed in the) 332.25 199.19 T
4 9.5 Q
(total-seconds) 377.35 199.19 T
1 11 Q
( slot. At) 451.45 199.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(this point, it is worth describing how this generic function works.) 99.65 185.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
0 0 0 1 0 0 0 K
99.65 401.52 513.65 596.95 C
0 0 0 1 0 0 0 K
117.15 407.1 495.65 593.67 R
5 X
0 0 0 1 0 0 0 K
V
1 H
0 Z
0 X
N
123 420.91 485.86 469.53 R
7 X
V
0 X
N
123 480.34 485.86 552.53 R
7 X
V
0 X
N
127.93 484.53 479.36 547.84 R
7 X
V
6 9 Q
0 X
(// Method 1) 127.93 541.84 T
4 F
(def) 127.93 530.84 T
(ine method decode-total-seconds \050total-seconds :: <integer>\051) 144.13 530.84 T
(let \050total-minutes, seconds\051 = truncate/ \050total-seconds, 60\051;) 138.73 519.84 T
(let \050hours, minutes\051 = truncate/ \050total-minutes, 60\051;) 138.73 508.84 T
(values \050hours, minutes, seconds\051;) 138.73 497.84 T
(end;) 127.93 486.84 T
127.93 422.67 479.36 465.53 R
7 X
V
6 F
0 X
(// Method 2) 127.93 459.53 T
4 F
(def) 127.93 448.53 T
(ine method decode-total-seconds \050time :: <time>\051) 144.13 448.53 T
(decode-total-seconds \050time.total-seconds\051;) 138.73 437.53 T
(end;) 127.93 426.53 T
204.08 566.39 414.65 582.1 R
7 X
V
0.5 H
2 Z
N
1 11 Q
0 X
(Generic function) 209.91 571.46 T
4 9.5 Q
(decode-total-seconds) 293.95 571.46 T
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "39" 41
%%Page: "40" 42
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(40) 63.65 702.62 T
0 9.5 Q
(3.2 Methods for classes that use inheritance) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(3.2.1  Method dispatch) 99.65 664.29 T
1 11 Q
-0.14 (When a generic function is called, it chooses the) 99.65 644.62 P
2 F
-0.14 (most speci\336c applicable) 333.28 644.62 P
1 F
-0.14 (method) 455.34 644.62 P
(and calls that method. The pr) 99.65 630.62 T
(ocess of choosing the most speci\336c method and call-) 242.16 630.62 T
(ing it is called) 99.65 616.62 T
2 F
(method dispatch) 169.79 616.62 T
1 F
(. This pr) 253.8 616.62 T
(ocess has two steps:) 293.82 616.62 T
2 F
(1.) 108.65 596.62 T
1 F
(Find all the) 126.65 596.62 T
2 F
(applicable methods) 184.5 596.62 T
1 F
( for the ar) 283.17 596.62 T
(gument to the generic function.) 330.33 596.62 T
2 F
(2.) 108.65 576.62 T
1 F
(Sort the applicable methods by) 126.65 576.62 T
2 F
(speci\336city) 279.99 576.62 T
(,) 329.67 576.62 T
1 F
( and call the most speci\336c) 332.42 576.62 T
(method.) 126.65 562.62 T
3 13 Q
(3.2.2  Step 1: Finding the applicable methods) 99.65 531.29 T
1 11 Q
(Start with the set of methods de\336ned for this generic function.) 99.65 511.62 T
0 F
(A method is applica-) 403.78 511.62 T
(ble if the ar) 99.65 497.62 T
(gument is an instance of the type of the method\325) 148.85 497.62 T
(s parameter) 359.59 497.62 T
(.) 410.41 497.62 T
1 F
(For example, consider the) 126.65 483.62 T
4 9.5 Q
(decode-total-seconds) 254.85 483.62 T
1 11 Q
( generic function. T) 368.85 483.62 T
(able) 461.85 483.62 T
(3.2 shows which method is applicable for certain ar) 99.65 469.62 T
(guments.) 348.84 469.62 T
(The \336rst r) 99.65 283.63 T
(ow of the table shows that, when the ar) 146.96 283.63 T
(gument is a dir) 337.59 283.63 T
(ect instance of) 410.99 283.63 T
4 9.5 Q
(<time-of-day>) 99.65 269.63 T
1 11 Q
(, method 2 is applicable because the ar) 173.75 269.63 T
(gument is an instance of) 360.08 269.63 T
4 9.5 Q
-0.13 (<time>) 99.65 255.63 P
1 11 Q
-0.06 ( \050the method\325s parameter\051. The \336nal r) 133.85 255.63 P
-0.06 (ow of the table shows that, when the) 315.17 255.63 P
(ar) 99.65 241.63 T
(gument is) 109.29 241.63 T
4 9.5 Q
("hello, world") 160.38 241.63 T
1 11 Q
(, none of the de\336ned methods ar) 240.18 241.63 T
(e applicable,) 397.48 241.63 T
(because) 99.65 227.63 T
4 9.5 Q
("hello, world") 140.7 227.63 T
1 11 Q
( is not an instance of) 220.5 227.63 T
4 9.5 Q
(<time>) 322.34 227.63 T
1 11 Q
( or) 356.54 227.63 T
4 9.5 Q
(<integer>) 372.39 227.63 T
1 11 Q
(.) 423.69 227.63 T
(For) 126.65 213.63 T
4 9.5 Q
(decode-total-seconds) 145.87 213.63 T
1 11 Q
(, ther) 259.86 213.63 T
(e is only one applicable method for any) 284.77 213.63 T
(ar) 99.65 199.63 T
(gument. Ther) 109.29 199.63 T
(e is no need to continue to step 2. The sole applicable method is) 175.07 199.63 T
(called.) 99.65 185.63 T
0 0 0 1 0 0 0 K
99.65 434.96 513.65 442.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(T) 100.71 446.62 T
(able 3.2  Applicable methods for dif) 106.44 446.62 T
(fer) 279.63 446.62 T
(ent ar) 292.7 446.62 T
(guments to) 320.36 446.62 T
4 9.5 Q
(decode-total-seconds) 377.83 446.62 T
1 11 Q
(.) 491.83 446.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Ar) 156.99 406.63 T
(gument) 169.69 406.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Applicable Method\050s\051) 244.38 406.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 403.86 413.63 T
(ype of) 409.62 413.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(method\325s parameter) 372.79 399.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
-1.82 (*my-time-of-day*) 134.66 377.63 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Method 2) 241.74 376.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time>) 365.26 377.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(*my-time-offset*) 134.66 356.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Method 2) 241.74 355.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time>) 365.26 356.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1000) 134.66 335.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Method 1) 241.74 334.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<integer>) 365.26 335.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
("hello, world") 134.66 314.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(none) 241.74 313.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
235.74 428.96 235.74 305.96 2 L
V
0.5 H
0 Z
N
359.26 428.96 359.26 305.96 2 L
V
N
128.66 389.96 484.63 389.96 2 L
V
N
128.66 368.96 484.63 368.96 2 L
V
N
128.66 347.96 484.63 347.96 2 L
V
N
128.66 326.96 484.63 326.96 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "40" 42
%%Page: "41" 43
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3 Simple Use of Inheritance) 405.4 702.62 T
2 11 Q
(41) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
-0.42 (In other cases, ther) 126.65 665.62 P
-0.42 (e can be several applicable methods. Consider the generic) 216.49 665.62 P
-0.16 (function) 99.65 651.62 P
4 9.5 Q
-0.34 (say-greeting) 143.01 651.62 P
1 11 Q
-0.16 (, shown in Figur) 211.41 651.62 P
-0.16 (e 3.3. T) 290.39 651.62 P
-0.16 (able 3.3 shows that for certain ar) 323.07 651.62 P
-0.16 (gu-) 479.23 651.62 P
(ments, one method is applicable, but for an integer ar) 99.65 637.62 T
(gument, two methods ar) 358.89 637.62 T
(e) 478.38 637.62 T
(applicable.) 99.65 623.62 T
0 0 0 1 0 0 0 K
99.65 397.1 513.65 405.1 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 143.53 408.76 T
(e 3.3  The) 169.74 408.76 T
4 9.5 Q
(say-greeting) 218.17 408.76 T
1 11 Q
( generic function and its methods.) 286.57 408.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(When the ar) 99.65 236.78 T
(gument is) 159.12 236.78 T
4 9.5 Q
(7) 210.21 236.78 T
1 11 Q
(, a dir) 215.91 236.78 T
(ect instance of) 243.73 236.78 T
4 9.5 Q
(<integer>) 315.29 236.78 T
1 11 Q
(, method 1 is applicable,) 366.59 236.78 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(because) 99.65 222.78 T
4 9.5 Q
(7) 140.7 222.78 T
1 11 Q
( is an instance of) 146.4 222.78 T
4 9.5 Q
(<object>) 229.49 222.78 T
1 11 Q
( \050the method\325s parameter\051; method 2 also is) 275.09 222.78 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(applicable, because) 99.65 208.78 T
4 9.5 Q
(7) 196.26 208.78 T
1 11 Q
( is an instance of) 201.96 208.78 T
4 9.5 Q
(<integer>) 285.05 208.78 T
1 11 Q
( \050the method\325s parameter\051.) 336.36 208.78 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 351.11 513.65 359.1 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(T) 123.51 362.77 T
(able 3.3  Applicable methods for dif) 129.24 362.77 T
(fer) 302.43 362.77 T
(ent ar) 315.51 362.77 T
(guments to) 343.16 362.77 T
4 9.5 Q
(say-greeting) 400.63 362.77 T
1 11 Q
(.) 469.03 362.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Ar) 219.67 329.78 T
(gument) 232.38 329.78 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Applicable Method\050s\051) 307.06 329.78 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(7) 197.35 307.78 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Method 1, Method 2) 304.42 306.78 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
($pi) 197.35 286.78 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Method 1) 304.42 285.78 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
("hello, world") 197.35 265.78 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Method 1) 304.42 264.78 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
298.42 345.11 298.42 257.11 2 L
V
0.5 H
0 Z
N
191.35 320.11 421.95 320.11 2 L
V
N
191.35 299.11 421.95 299.11 2 L
V
N
191.35 278.11 421.95 278.11 2 L
V
N
99.65 159.95 513.65 672.95 C
0 0 0 1 0 0 0 K
99.65 425.1 513.65 605.95 C
0 0 0 1 0 0 0 K
117.15 432.24 495.65 596.95 R
5 X
0 0 0 1 0 0 0 K
V
1 H
0 Z
0 X
N
125.5 444.24 488.36 494.81 R
7 X
V
0 X
N
125.15 506.95 488.01 557.96 R
7 X
V
0 X
N
130.08 509.05 481.51 552.77 R
7 X
V
6 9 Q
0 X
(// Method 1) 130.08 546.77 T
4 F
(def) 130.08 535.77 T
(ine method say-greeting \050greeting :: <object>\051;) 146.28 535.77 T
(format\050*window*, "%s\134n", greeting\051;) 140.88 524.77 T
(end;) 130.08 513.77 T
130.43 446.59 481.86 489.48 R
7 X
V
6 F
0 X
(// Method 2) 130.43 483.48 T
4 F
(def) 130.43 472.48 T
(ine method say-greeting \050greeting :: <integer>\051) 146.63 472.48 T
(format\050*window*, "Your lucky number is %s.\134n", greeting\051;) 141.24 461.48 T
(end;) 130.43 450.48 T
228.51 569.67 389.93 585.38 R
7 X
V
0.5 H
2 Z
N
1 11 Q
0 X
(Generic function) 232.71 574.75 T
4 9.5 Q
(say-greeting) 316.75 574.75 T
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "41" 43
%%Page: "42" 44
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(42) 63.65 702.62 T
0 9.5 Q
(3.3 Definition of a generic function) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(3.2.3  Step 2: Sorting applicable methods by speci\336city) 99.65 664.29 T
1 11 Q
(Start with the set of applicable methods. Compar) 99.65 644.62 T
(e the types of the parameters of) 337.45 644.62 T
(the methods.) 99.65 630.62 T
0 F
(If one type is a subtype of the other) 165.52 630.62 T
(, the method whose parameter is of the) 318.28 630.62 T
(subtype is mor) 99.65 616.62 T
(e speci\336c than the other method.) 164.44 616.62 T
1 F
(Let\325s continue with the example of calling) 126.65 602.62 T
4 9.5 Q
(say-greeting) 332.61 602.62 T
1 11 Q
( with an ar) 401.01 602.62 T
(gument) 453.17 602.62 T
(of) 99.65 588.62 T
4 9.5 Q
(7) 112.07 588.62 T
1 11 Q
(. Method 1\325s parameter is of type) 117.77 588.62 T
4 9.5 Q
(<object>) 280.63 588.62 T
1 11 Q
(. Method 2\325s parameter is of type) 326.23 588.62 T
4 9.5 Q
(<integer>) 99.65 574.62 T
1 11 Q
(. Because) 150.95 574.62 T
4 9.5 Q
(<integer>) 198.14 574.62 T
1 11 Q
( is a subtype of) 249.44 574.62 T
4 9.5 Q
(<object>) 325.18 574.62 T
1 11 Q
(, method 2 is mor) 370.78 574.62 T
(e spe-) 455.46 574.62 T
(ci\336c than method 1.) 99.65 560.62 T
(The generic function calls the most speci\336c method.) 126.65 546.62 T
-0.44 (This conceptual description of how method dispatch works should help you) 126.65 532.62 P
(to understand how to write methods. The most important concept to r) 99.65 518.62 T
(ealize is) 440.31 518.62 T
(that method dispatch should feel natural\321it gives pr) 99.65 504.62 T
(ecedence to the methods) 357.44 504.62 T
(that ar) 99.65 490.62 T
(e mor) 131.12 490.62 T
(e closely r) 159 490.62 T
(elated to the ar) 207.26 490.62 T
(gument rather than to the methods that ar) 279.55 490.62 T
(e) 483.79 490.62 T
(mor) 99.65 476.62 T
(e distant or general. This pr) 119.51 476.62 T
(ecedence or) 253.16 476.62 T
(dering lets you adjust the behavior of) 310.03 476.62 T
(a class with r) 99.65 462.62 T
(espect to that class\325s super) 162.82 462.62 T
(classes.) 290.73 462.62 T
3 15 Q
(3.3  De\336nition of a generic function) 99.65 301.95 T
1 11 Q
(The de\336nitions of the methods for) 99.65 281.62 T
4 9.5 Q
(say-time-of-day) 267.97 281.62 T
1 11 Q
( and) 353.47 281.62 T
4 9.5 Q
(say-time-offset) 377.59 281.62 T
1 11 Q
( ar) 463.09 281.62 T
(e) 475.49 281.62 T
(r) 99.65 267.62 T
(epeated her) 103.79 267.62 T
(e:) 160.59 267.62 T
4 9 Q
(def) 99.65 246.95 T
(ine method say-time-of-day \050time :: <time-of-day>\051) 115.85 246.95 T
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 110.45 235.95 T
(format\050*window*, "%d:%s%d", hours,) 110.45 224.95 T
(if \050minutes < 10\051 "0" else "" end, minutes\051;) 148.25 213.95 T
(end;) 99.65 202.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Performance note:) 132.65 428.62 T
1 F
( The Dylan compiler and r) 223.71 428.62 T
(un-time system ensur) 351.71 428.62 T
(e) 456.81 428.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(that the method-dispatch r) 132.65 414.62 T
(ules ar) 262.42 414.62 T
(e followed for every call to a generic) 294.58 414.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(function. Given accurate type declarations, however) 132.65 400.62 T
(, a compiler can) 385.48 400.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(compute the r) 132.65 386.62 T
(esult of the dispatch r) 200.25 386.62 T
(ules at compile time, so the exe-) 305.36 386.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cuted code is just as ef) 132.65 372.62 T
(\336cient as a normal function call in a language) 240.59 372.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(without generic functions and methods.) 132.65 358.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 441.83 126.65 351.08 2 L
V
0.25 H
0 Z
N
477.65 441.83 477.65 351.08 2 L
V
N
126.52 441.95 477.77 441.95 2 L
V
N
126.52 350.95 477.77 350.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "42" 44
%%Page: "43" 45
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3 Simple Use of Inheritance) 405.4 702.62 T
2 11 Q
(43) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine method say-time-offset \050time :: <time-offset>\051) 115.85 666.95 T
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 110.45 655.95 T
(format \050*window*, "%s %d:%d",) 110.45 644.95 T
(if \050time.past?\051 "minus" else "plus" end, hours, minutes\051;) 153.65 633.95 T
(end;) 99.65 622.95 T
1 11 Q
(Now that) 99.65 602.62 T
4 9.5 Q
(decode-total-seconds) 148.54 602.62 T
1 11 Q
( has an applicable method for instances of) 262.54 602.62 T
4 9.5 Q
(<time-offset>) 99.65 588.62 T
1 11 Q
( and) 173.75 588.62 T
4 9.5 Q
(<time-of-day>) 197.87 588.62 T
1 11 Q
(, both these methods work corr) 271.97 588.62 T
(ectly) 423.12 588.62 T
(.) 444.96 588.62 T
5 9 Q
(?) 99.65 567.95 T
4 F
(say-time-of-day \050*my-time-of-day*\051;) 110.45 567.95 T
5 F
(0:02) 99.65 556.95 T
(?) 99.65 537.95 T
4 F
(say-time-of-day \050*your-time-of-day*\051;) 110.45 537.95 T
5 F
(8:30) 99.65 526.95 T
(?) 99.65 507.95 T
4 F
(say-time-offset \050*my-time-offset*\051;) 110.45 507.95 T
5 F
(plus 15:20) 99.65 496.95 T
(?) 99.65 477.95 T
4 F
(say-time-offset \050*your-time-offset*\051;) 110.45 477.95 T
5 F
(minus 6:45) 99.65 466.95 T
1 11 Q
(W) 99.65 446.62 T
(e have de\336ned two methods:) 109.64 446.62 T
4 9.5 Q
(say-time-offset) 252.96 446.62 T
1 11 Q
( and) 338.45 446.62 T
4 9.5 Q
(say-time-of-day) 362.58 446.62 T
1 11 Q
(. A) 446.86 446.62 T
(method de\336ned with) 99.65 432.62 T
4 9.5 Q
(def) 204.99 432.62 T
(ine method) 222.1 432.62 T
1 11 Q
( cannot exist without a) 279.1 432.62 T
2 F
(generic function) 392.11 432.62 T
1 F
(.) 474.29 432.62 T
(When you de\336ne a method, and no generic function of that name exists, Dylan) 99.65 418.62 T
(automatically cr) 99.65 404.62 T
(eates a generic function. When we de\336ned these two methods,) 178.06 404.62 T
-0.03 (ther) 99.65 390.62 P
-0.03 (e wer) 119.05 390.62 P
-0.03 (e no generic functions with those names de\336ned, so Dylan cr) 145.63 390.62 P
-0.03 (eated mod-) 440.48 390.62 P
(ule variables named) 99.65 376.62 T
4 9.5 Q
(say-time-of-day) 200.58 376.62 T
1 11 Q
( and) 286.08 376.62 T
4 9.5 Q
(say-time-offset) 310.21 376.62 T
1 11 Q
(, cr) 395.71 376.62 T
(eated the generic) 410.24 376.62 T
(functions, and stor) 99.65 362.62 T
(ed the generic functions in the module variables.) 190.37 362.62 T
(These two methods ar) 126.65 348.62 T
(e logically r) 234.02 348.62 T
(elated to each other) 290.36 348.62 T
(, but have no explicit) 384.6 348.62 T
(r) 99.65 334.62 T
(elationship in the code, other than in the similarity of their names. A cleaner) 103.79 334.62 T
(appr) 99.65 320.62 T
(oach is to abstract out the concept of what all these methods ar) 122.52 320.62 T
(e trying to) 426.47 320.62 T
-0.02 (do\321namely) 99.65 306.62 P
-0.02 (, to describe an object. T) 158.35 306.62 P
-0.02 (o do this abstraction, we can intr) 273.57 306.62 P
-0.02 (oduce a new) 431.6 306.62 P
(generic function.) 99.65 292.62 T
(W) 126.65 278.62 T
(e use) 136.64 278.62 T
4 9.5 Q
(def) 163.97 278.62 T
(ine generic) 181.07 278.62 T
1 11 Q
( to de\336ne the generic function explicitly:) 243.77 278.62 T
6 9 Q
(// Given an object, print a description of the object.) 99.65 257.95 T
4 F
(def) 99.65 246.95 T
(ine generic say \050object\051;) 115.85 246.95 T
1 11 Q
(This generic function has a name:) 99.65 226.62 T
4 9.5 Q
(say) 265.12 226.62 T
1 11 Q
(. It r) 281 226.62 T
(eceives one ar) 300.69 226.62 T
(gument: the object to) 368.29 226.62 T
(describe. It is essentially the same as the generic function that Dylan would have) 99.65 212.62 T
(cr) 99.65 198.62 T
(eated automatically if we had de\336ned a method for) 108.68 198.62 T
4 9.5 Q
(say) 360.58 198.62 T
1 11 Q
( befor) 377.68 198.62 T
(e de\336ning the) 405.6 198.62 T
-0.13 (generic function) 99.65 184.62 P
4 9.5 Q
-0.27 (say) 181.15 184.62 P
1 11 Q
-0.13 (. However) 197.03 184.62 P
-0.13 (, de\336ning the generic function explicitly enables us) 247.02 184.62 P
(to formalize its purpose, to name the parameter) 99.65 170.62 T
(, to specify a type constraint on) 330.29 170.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "43" 45
%%Page: "44" 46
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(44) 63.65 702.62 T
0 9.5 Q
(3.3 Definition of a generic function) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(the parameter \050not done in this de\336nition\051, and to give comments about the) 99.65 665.62 T
(generic function as a whole.) 99.65 651.62 T
(One important r) 126.65 637.62 T
(ule in Dylan is that a generic function and all its methods) 205.67 637.62 T
(must have the same number of r) 99.65 623.62 T
(equir) 256.79 623.62 T
(ed ar) 282.2 623.62 T
(guments. This r) 306.59 623.62 T
(ule makes sense,) 382.49 623.62 T
(because the generic function de\336nes the contract that all methods for this generic) 99.65 609.62 T
(function must obey) 99.65 595.62 T
(. For mor) 192.77 595.62 T
(e information, see Section 6.5, page 81.) 237.36 595.62 T
(Now) 126.65 581.62 T
(, we de\336ne two methods for) 149.96 581.62 T
4 9.5 Q
(say) 289.11 581.62 T
1 11 Q
(. Method 1 ful\336lls the same purpose) 304.99 581.62 T
-0.28 (\050and has the same body\051 as the) 99.65 567.62 P
4 9.5 Q
-0.58 (say-time-of-day) 250.22 567.62 P
1 11 Q
-0.28 ( method, which we r) 335.72 567.62 P
-0.28 (emove fr) 434.7 567.62 P
-0.28 (om) 477.46 567.62 P
(the application with an editor) 99.65 553.62 T
(. Similarly) 243.19 553.62 T
(, method 2 is intended to r) 291.72 553.62 T
(eplace) 419.34 553.62 T
4 9.5 Q
(say-) 452.83 553.62 T
(time-offset) 99.65 539.62 T
1 11 Q
(, which we r) 162.35 539.62 T
(emove.) 222 539.62 T
6 9 Q
(// Method 1) 99.65 518.95 T
4 F
(def) 99.65 507.95 T
(ine method say \050time :: <time-of-day>\051) 115.85 507.95 T
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 110.45 496.95 T
(format\050*window*, "%d:%s%d", hours,) 110.45 485.95 T
(if \050minutes < 10\051 "0" else "" end, minutes\051;) 148.25 474.95 T
(end;) 99.65 463.95 T
6 F
(// Method 2) 99.65 444.95 T
4 F
(def) 99.65 433.95 T
(ine method say \050time :: <time-offset>\051) 115.85 433.95 T
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 110.45 422.95 T
(format \050*window*, "%s %d:%d",) 110.45 411.95 T
(if \050time.past?\051 "minus" else "plus" end, hours, minutes\051;) 159.05 400.95 T
(end;) 99.65 389.95 T
1 11 Q
(Figur) 99.65 369.62 T
(e 3.4 shows that the generic function) 125.86 369.62 T
4 9.5 Q
(say) 305.63 369.62 T
1 11 Q
( has two methods de\336ned for it.) 322.73 369.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "44" 46
%%Page: "45" 47
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3 Simple Use of Inheritance) 405.4 702.62 T
2 11 Q
(45) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
99.65 460.52 513.65 468.52 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 179.81 472.18 T
(e 3.4  Methods for the) 206.03 472.18 T
4 9.5 Q
(say) 313.87 472.18 T
1 11 Q
( generic function.) 330.97 472.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 99.65 440.19 T
(e can call) 109.64 440.19 T
4 9.5 Q
(say) 156.73 440.19 T
1 11 Q
(:) 173.83 440.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(?) 99.65 419.52 T
4 F
(say \050*my-time-of-day*\051;) 110.45 419.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(0:02) 99.65 408.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(In the following call, the ar) 99.65 388.19 T
(gument is of the type) 230.17 388.19 T
4 9.5 Q
(<time-of-day>) 336.02 388.19 T
1 11 Q
(, so method 1 is) 410.12 388.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the only applicable method. Method 1 is invoked.) 99.65 374.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(?) 99.65 353.52 T
4 F
(say \050*my-time-offset*\051;) 110.45 353.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(plus 15:20) 99.65 342.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(In the following call, the ar) 99.65 322.19 T
(gument is of the type) 230.17 322.19 T
4 9.5 Q
(<time-offset>) 336.02 322.19 T
1 11 Q
(, so method 2 is) 410.12 322.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the only applicable method. Method 2 is invoked.) 99.65 308.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 15 Q
(3.4  Use of) 99.65 268.52 T
4 13 Q
(next-method) 164.6 268.52 T
3 15 Q
( to call another method) 250.4 268.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Notice that ther) 99.65 248.19 T
(e is duplication of code in the two methods for) 175.71 248.19 T
4 9.5 Q
(say) 404.84 248.19 T
1 11 Q
(:) 421.94 248.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 9 Q
(// Method 1) 99.65 227.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(def) 99.65 216.52 T
(ine method say \050time :: <time-of-day>\051) 115.85 216.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 110.45 205.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format\050*window*, "%d:%s%d", hours,) 110.45 194.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050minutes < 10\051 "0" else "" end, minutes\051;) 148.25 183.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 99.65 172.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
0 0 0 1 0 0 0 K
99.65 488.52 513.65 661.95 C
0 0 0 1 0 0 0 K
110.58 495.95 489.08 655.66 R
5 X
0 0 0 1 0 0 0 K
V
1 H
0 Z
0 X
N
117.72 570.91 480.58 620.24 R
7 X
V
0 X
N
122.65 574.09 474.08 616.24 R
7 X
V
6 9 Q
0 X
(// Method 1) 122.65 610.24 T
4 F
(def) 122.65 599.24 T
(ine method say \050time :: <time-of-day>\051) 138.85 599.24 T
6 F
(body 1) 138.85 588.24 T
4 F
(end;) 122.65 577.24 T
249.08 631.95 355.51 647.67 R
7 X
V
0.5 H
2 Z
N
1 11 Q
0 X
(Generic function) 251.79 637.03 T
4 9.5 Q
(say) 335.83 637.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
118.58 506.48 481.43 555.81 R
7 X
V
1 H
0 Z
0 X
N
123.51 509.67 474.94 551.81 R
7 X
V
6 9 Q
0 X
(// Method 2) 123.51 545.81 T
4 F
(def) 123.51 534.81 T
(ine method say \050time :: <time-offset>\051) 139.71 534.81 T
6 F
(body 2) 139.71 523.81 T
4 F
(end;) 123.51 512.81 T
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "45" 47
%%Page: "46" 48
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(46) 63.65 702.62 T
0 9.5 Q
(3.4 Use of next-method to call another method) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
6 9 Q
0 X
(// Method 2) 99.65 666.95 T
4 F
(def) 99.65 655.95 T
(ine method say \050time :: <time-offset>\051) 115.85 655.95 T
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 110.45 644.95 T
(format \050*window*, "%s %d:%d",) 110.45 633.95 T
(if \050time.past?\051 "minus" else "plus" end, hours, minutes\051;) 159.05 622.95 T
(end;) 99.65 611.95 T
1 11 Q
(Both methods call) 99.65 591.62 T
4 9.5 Q
(decode-total-seconds) 189.76 591.62 T
1 11 Q
( to get the hours and minutes, and call) 303.76 591.62 T
4 9.5 Q
-0.79 (format) 99.65 577.62 P
1 11 Q
-0.38 ( to print the hours and minutes. That is all that the method on) 133.85 577.62 P
4 9.5 Q
-0.79 (<time>) 431.3 577.62 P
1 11 Q
-0.38 ( does.) 465.5 577.62 P
(The method on) 99.65 563.62 T
4 9.5 Q
(<time-offset>) 176.42 563.62 T
1 11 Q
( does a bit mor) 250.52 563.62 T
(e; it prints either) 322.41 563.62 T
4 9.5 Q
(minus) 405.1 563.62 T
1 11 Q
( or) 433.6 563.62 T
4 9.5 Q
(plus) 449.45 563.62 T
1 11 Q
(,) 472.25 563.62 T
(depending on the value of the) 99.65 549.62 T
4 9.5 Q
(past?) 248.27 549.62 T
1 11 Q
( slot.) 276.77 549.62 T
-0.03 (W) 126.65 535.62 P
-0.03 (e can eliminate this duplication by de\336ning another method that does the) 136.64 535.62 P
(shar) 99.65 521.62 T
(ed work. This method will be on the) 120.36 521.62 T
4 9.5 Q
(<time>) 299.24 521.62 T
1 11 Q
( class, so it will be applicable to) 333.44 521.62 T
(instances of) 99.65 507.62 T
4 9.5 Q
(<time-of-day>) 159.39 507.62 T
1 11 Q
( and) 233.49 507.62 T
4 9.5 Q
(<time-offset>) 257.61 507.62 T
1 11 Q
(. The method for) 331.71 507.62 T
4 9.5 Q
(<time-of-day>) 415.59 507.62 T
1 11 Q
(is no longer needed, because the new method does the same work. However) 99.65 493.62 T
(, a) 470.83 493.62 T
(r) 99.65 479.62 T
(evised method for) 103.79 479.62 T
4 9.5 Q
(<time-offset>) 195.1 479.62 T
1 11 Q
( is needed, to do the extra work of printing) 269.2 479.62 T
4 9.5 Q
(minus) 99.65 465.62 T
1 11 Q
( or) 128.15 465.62 T
4 9.5 Q
(plus) 144 465.62 T
1 11 Q
(, and to call explicitly the next most speci\336c method, which is the) 166.8 465.62 T
(method on) 99.65 451.62 T
4 9.5 Q
(<time>) 155.25 451.62 T
1 11 Q
(.) 189.45 451.62 T
(W) 126.65 437.62 T
(e r) 136.64 437.62 T
(emove the de\336nitions of the pr) 148.8 437.62 T
(evious methods, and de\336ne these new) 298.07 437.62 T
(methods:) 99.65 423.62 T
6 9 Q
(// Method 1) 99.65 402.95 T
4 F
(def) 99.65 391.95 T
(ine method say \050time :: <time>\051) 115.85 391.95 T
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 110.45 380.95 T
(format\050*window*, "%d:%s%d", hours,) 110.45 369.95 T
(if \050minutes < 10\051 "0" else "" end, minutes\051;) 148.25 358.95 T
(end;) 99.65 347.95 T
6 F
(// Method 2) 99.65 328.95 T
4 F
(def) 99.65 317.95 T
(ine method say \050time :: <time-offset>\051) 115.85 317.95 T
(format \050*window*, "%s ", if \050time.past?\051 "minus" else "plus" end\051;) 110.45 306.95 T
(next-method \050\051;) 110.45 295.95 T
(end;) 99.65 284.95 T
1 11 Q
(W) 99.65 264.62 T
(e can call) 109.64 264.62 T
4 9.5 Q
(say) 156.73 264.62 T
1 11 Q
(:) 173.83 264.62 T
5 9 Q
(?) 99.65 243.95 T
4 F
(say \050*my-time-of-day*\051;) 110.45 243.95 T
5 F
(0:02) 99.65 232.95 T
1 11 Q
(In this call, the ar) 99.65 212.62 T
(gument is of the type) 183.05 212.62 T
4 9.5 Q
(<time-of-day>) 288.89 212.62 T
1 11 Q
(, so method 1 is the only) 362.99 212.62 T
(applicable method. Method 1 is invoked.) 99.65 198.62 T
5 9 Q
(?) 99.65 177.95 T
4 F
(say \050*my-time-offset*\051;) 110.45 177.95 T
5 F
(plus 15:20) 99.65 166.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "46" 48
%%Page: "47" 49
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3 Simple Use of Inheritance) 405.4 702.62 T
2 11 Q
(47) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
-0.31 (In this call, the ar) 99.65 665.62 P
-0.31 (gument is of the type) 181.79 665.62 P
4 9.5 Q
-0.65 (<time-offset>) 286.06 665.62 P
1 11 Q
-0.31 (, so method 1 and method 2) 360.16 665.62 P
(ar) 99.65 651.62 T
(e applicable. Method 2 is mor) 109.29 651.62 T
(e speci\336c, so it is called. Method 2 prints) 252.75 651.62 T
4 9.5 Q
(minus) 451.23 651.62 T
1 11 Q
( or) 479.73 651.62 T
4 9.5 Q
(plus) 99.65 637.62 T
1 11 Q
(, and calls) 122.45 637.62 T
4 9.5 Q
(next-method) 173.52 637.62 T
1 11 Q
(. The) 236.22 637.62 T
4 9.5 Q
(next-method) 262.89 637.62 T
1 11 Q
( function invokes the next most) 325.58 637.62 T
(speci\336c method. \050If ther) 99.65 623.62 T
(e is no next most speci\336c method,) 214.95 623.62 T
4 9.5 Q
(next-method) 381.26 623.62 T
1 11 Q
( r) 443.96 623.62 T
(eturns) 450.86 623.62 T
4 9.5 Q
(#f) 99.65 609.62 T
1 11 Q
(\051. In this case, it calls method 1.) 111.05 609.62 T
(Using) 126.65 595.62 T
4 9.5 Q
(next-method) 158.34 595.62 T
1 11 Q
( is convenient in cases like this wher) 221.04 595.62 T
(e a method on a) 397.01 595.62 T
(super) 99.65 581.62 T
(class can do most of the work, but a subclass needs to do additional work.) 126.97 581.62 T
3 15 Q
(3.5  Summary) 99.65 541.95 T
1 11 Q
(This chapter cover) 99.65 521.62 T
(ed the following:) 189.28 521.62 T
(\245) 108.65 501.62 T
(W) 126.65 501.62 T
(e showed how to use class inheritance.) 136.64 501.62 T
(\245) 108.65 481.62 T
(W) 126.65 481.62 T
(e de\336ned the terminology of classes: dir) 136.64 481.62 T
(ect subclass, subclass, dir) 329.99 481.62 T
(ect) 452.14 481.62 T
(super) 126.65 467.62 T
(class, super) 153.97 467.62 T
(class, dir) 209.71 467.62 T
(ect instance, indir) 252.19 467.62 T
(ect instance, instance, subtype,) 337.76 467.62 T
(supertype.) 126.65 453.62 T
(\245) 108.65 433.62 T
(W) 126.65 433.62 T
(e showed how method dispatch works for a generic function with one) 136.64 433.62 T
(ar) 126.65 419.62 T
(gument, when ther) 136.29 419.62 T
(e is mor) 228.91 419.62 T
(e than one applicable method.) 267.42 419.62 T
(\245) 108.65 399.62 T
(W) 126.65 399.62 T
(e cr) 136.64 399.62 T
(eated a generic function explicitly) 153.69 399.62 T
(.) 316.52 399.62 T
(\245) 108.65 379.62 T
(W) 126.65 379.62 T
(e used) 136.64 379.62 T
4 9.5 Q
(next-method) 170.69 379.62 T
1 11 Q
( to call the next most speci\336c method.) 233.39 379.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "47" 49
%%Page: "48" 50
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(48) 63.65 702.62 T
0 9.5 Q
(3.5 Summary) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "48" 50
%%Page: "49" 51
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(49) 292.15 135.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(4) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(4) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Design of the Airport) 100.65 591.4 T
(Example) 99.65 561.4 T
99.65 159.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(When we design a pr) 99.65 449.62 T
(ogram, we typically cycle thr) 202.79 449.62 T
(ough the following steps:) 343.57 449.62 T
2 F
(1.) 108.65 429.62 T
1 F
(W) 126.65 429.62 T
(e try to understand the overall goal of the pr) 136.64 429.62 T
(ogram.) 352.04 429.62 T
2 F
(2.) 108.65 409.62 T
1 F
(W) 126.65 409.62 T
(e identify the objects that model the pr) 136.64 409.62 T
(ogram.) 323.64 409.62 T
(W) 126.65 389.62 T
(e gr) 136.64 389.62 T
(oup the objects in classes based on common featur) 154.92 389.62 T
(es. W) 399.11 389.62 T
(e divide these) 424.53 389.62 T
-0.21 (classes into super) 126.65 375.62 P
-0.21 (classes and subclasses based on further abstraction of com-) 211.09 375.62 P
(mon featur) 126.65 361.62 T
(es. W) 180.32 361.62 T
(e determine what sorts of data we need and in which) 205.74 361.62 T
(objects we need to keep it. The data indicate the slots in each class.) 126.65 347.62 T
2 F
(3.) 108.65 327.62 T
1 F
(W) 126.65 327.62 T
(e specify the various behaviors of the objects.) 136.64 327.62 T
(W) 126.65 307.62 T
(e de\336ne a set of operations on appr) 136.64 307.62 T
(opriate classes of objects. These opera-) 307.03 307.62 T
(tions will be generic functions. For each operation, we determine how to) 126.65 293.62 T
(implement the operation for objects of dif) 126.65 279.62 T
(fer) 328.43 279.62 T
(ent classes. The details of the) 341.51 279.62 T
(implementation of operations for dif) 126.65 265.62 T
(fer) 303.97 265.62 T
(ent classes de\336ne what the methods) 317.05 265.62 T
(do.) 126.65 251.62 T
-0.27 (When the initial design is done, it is time to start the implementation \321 we de\336ne) 99.65 231.62 P
(the classes, generic functions, and methods. The implementation phase often) 99.65 217.62 T
(leads to r) 99.65 203.62 T
(e\336nement of the class r) 144.24 203.62 T
(elationships as we think about possibilities for) 255.79 203.62 T
(specialization and sharing.) 99.65 189.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "49" 51
%%Page: "50" 52
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(50) 63.65 702.62 T
0 9.5 Q
(4.1 Goals of the airport application) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 15 Q
0 X
(4.1  Goals of the airport application) 99.65 662.95 T
1 11 Q
(Thr) 99.65 642.62 T
(oughout this book, we develop a sample application dealing with airports,) 116.94 642.62 T
(airplanes, gates, and r) 99.65 628.62 T
(elated objects. In this section, we describe the goals of the) 206 628.62 T
(application. Figur) 99.65 614.62 T
(e 4.1 shows a diagram of a simple airport.) 186.06 614.62 T
0 0 0 1 0 0 0 K
99.65 443.69 513.65 451.68 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 205.5 455.34 T
(e 4.1  Objects in a simple airport.) 231.71 455.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.04 (In Figur) 99.65 423.35 P
-0.04 (e 4.1, we see a single) 138.68 423.35 P
2 F
-0.04 (terminal) 240.74 423.35 P
1 F
-0.04 (, named A. It has two) 283.51 423.35 P
2 F
-0.04 (gates) 390.09 423.35 P
1 F
-0.04 (, named A1 and) 415.75 423.35 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A2. It has a) 99.65 409.35 T
2 F
(taxiway) 156.82 409.35 T
1 F
( named Echo. It has a) 195.92 409.35 T
2 F
(runway) 302.15 409.35 T
1 F
( named 1) 340.65 409.35 T
(1R-29L. It has an) 384.65 409.35 T
2 F
(air-) 468.39 409.35 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(craft) 99.65 395.35 T
1 F
( appr) 122.25 395.35 T
(oaching the r) 147.87 395.35 T
(unway) 211.4 395.35 T
(.) 244 395.35 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(When landing, an air) 126.65 381.35 T
(craft goes fr) 229.01 381.35 T
(om the sky to a r) 286.36 381.35 T
(unway to a taxiway to a) 367.33 381.35 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(gate. Figur) 99.65 367.35 T
(e 4.2 is a state diagram showing these transitions for both incoming) 151.83 367.35 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(and outgoing air) 99.65 353.35 T
(craft.) 180.68 353.35 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 197.86 513.65 205.85 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 103.28 209.52 T
(e 4.2  T) 129.5 209.52 T
(ransitions between sky and gate for outbound and inbound air) 162.52 209.52 T
(craft.) 467.28 209.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
0 0 0 1 0 0 0 K
119.11 471.68 494.19 596.95 C
0 0 0 1 0 0 0 K
211.08 545.2 244.54 571.48 250.59 563.78 217.12 537.51 4 Y
7 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
124.8 476.64 175.8 556.21 R
7 X
V
0 X
N
175.8 530.64 202.8 548.64 R
7 X
V
0 X
N
175.8 494.64 202.8 512.64 R
7 X
V
0 X
N
232.16 593.58 483.75 502.01 474.52 476.64 222.93 568.21 4 Y
7 X
V
0 X
N
1 11 Q
(terminal) 128.79 521.76 T
(A) 144.5 506.05 T
(A1) 182.99 537.24 T
(A2) 182.99 501.52 T
(r) 0 -20 304.18 548.67 TF
(unway 1) 0 -20 308.18 547.21 TF
(1R-29L) 0 -20 347.14 532.99 TF
202.8 480.48 219.58 561.48 R
7 X
V
0 X
N
7 X
90 450 1.67 4.44 210.43 543.54 G
90 450 1.67 4.44 210.43 543.54 A
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
(taxiway) 0 -270 213.79 484.38 TF
(Echo) 0 -270 214.34 530.57 TF
7 X
90 450 2.22 6.39 218.21 545.48 G
90 450 2.22 6.39 218.21 545.48 A
90 450 2.22 5.21 67.43 239.55 562.12 GG
90 450 2.22 5.21 67.43 239.55 562.12 AA
397.54 572.79 398.02 573.51 398.83 574.07 400.02 574.55 401.25 574.96 402.7 576.03 405.44 576.98
 447.39 576.77 454.44 583.1 457.55 583.1 454.44 573.31 455.76 572.16 454.56 571.53 440.45 569.54 404.95 569.75
 401.64 569.9 399.18 570.54 397.78 571.43 397.57 572.03 19 Y
V
0.2 H
0 Z
0 X
N
397.54 572.79 455.76 572.16 454.56 571.53 440.45 569.54 404.22 569.79 401.64 569.9 399.18 570.54
 397.78 571.43 397.57 572.03 9 Y
5 X
V
0 X
N
446.9 573.51 458.25 575.12 461.11 574.34 454.48 572.38 448.68 572.06 5 Y
7 X
V
0 X
N
418.78 572.57 441.85 581.93 445.88 581.93 435.56 575.48 431.93 572.41 5 Y
7 X
V
0 X
N
421.25 573.68 417.54 573.75 417.62 569.96 422.46 569.96 422.46 571.77 424.32 571.77 426.09 570.82
 431.33 570.82 431.98 572.46 429.88 573.15 427.62 573.66 11 Y
7 X
V
0 X
N
3 X
90 450 0.2 1.94 417.66 571.9 G
0 X
90 450 0.2 1.94 417.66 571.9 A
7 X
90 450 0.2 0.43 417.5 571.94 G
0 X
90 450 0.2 0.43 417.5 571.94 A
422.46 569.96 424.32 569.96 424.32 571.77 422.46 571.77 4 Y
4 X
V
0 X
N
424.32 569.96 425.45 570.39 429.88 570.39 431.33 570.82 426.09 570.82 424.32 571.77 6 Y
3 X
V
0 X
N
427.62 573.66 427.62 572.11 426.09 570.82 431.33 570.82 431.98 572.46 429.88 573.15 428.92 573.37 7 Y
4 X
V
0 X
N
417.3 569.7 417.14 568.83 417.3 567.78 421.58 567.78 421.58 569.42 425.12 569.42 426.25 568.83
 427.79 569.2 428.75 569.63 9 Y
3 X
V
0 X
N
421.58 569.42 423.27 569.42 423.27 567.78 421.58 567.78 4 Y
2 X
V
0 X
N
423.27 567.78 426.25 568.83 425.12 569.42 423.27 569.42 4 Y
V
N
423.11 573.67 441.9 581.26 443.52 581.26 430.74 572.86 429.88 573.15 427.62 573.66 424.56 573.66 7 Y
6 X
V
0 X
N
435.31 577.17 438.19 577.17 438.59 576.85 436.01 576.85 4 Y
7 X
V
0 X
N
435.31 577.17 435.13 576.93 435.99 576.6 438.59 576.85 436.01 576.85 5 Y
3 X
V
0 X
N
438.59 579.21 441.47 579.21 441.87 578.89 439.29 578.89 4 Y
7 X
V
0 X
N
438.59 579.21 438.41 578.97 439.27 578.65 441.87 578.89 439.29 578.89 5 Y
3 X
V
0 X
N
421.3 573.48 427.47 573.46 427.47 571.97 426.61 571.24 4 Y
5 X
V
441.85 581.93 445.88 581.93 445.41 581.63 441.1 581.62 4 Y
6 X
V
0 X
N
3 X
90 450 0.18 0.06 441.8 581.76 G
0 X
90 450 0.18 0.06 441.8 581.76 A
410.93 574.74 411.38 575.38 R
4 X
V
0 X
N
412.08 574.74 412.53 575.38 R
4 X
V
0 X
N
413.23 574.74 413.68 575.38 R
4 X
V
0 X
N
414.38 574.74 414.83 575.38 R
4 X
V
0 X
N
415.53 574.74 415.98 575.38 R
4 X
V
0 X
N
416.68 574.74 417.13 575.38 R
4 X
V
0 X
N
417.83 574.74 418.28 575.38 R
4 X
V
0 X
N
418.98 574.74 419.43 575.38 R
4 X
V
0 X
N
420.13 574.74 420.58 575.38 R
4 X
V
0 X
N
421.28 574.74 421.73 575.38 R
4 X
V
0 X
N
422.43 574.74 422.88 575.38 R
4 X
V
0 X
N
423.58 574.74 424.03 575.38 R
4 X
V
0 X
N
435.45 574.54 435.9 575.18 R
4 X
V
0 X
N
436.51 574.54 436.96 575.18 R
4 X
V
0 X
N
437.58 574.54 438.03 575.18 R
4 X
V
0 X
N
438.64 574.54 439.1 575.18 R
4 X
V
0 X
N
439.71 574.54 440.16 575.18 R
4 X
V
0 X
N
440.77 574.54 441.22 575.18 R
4 X
V
0 X
N
441.84 574.48 442.29 575.12 R
4 X
V
0 X
N
447.39 576.77 451.9 576.29 2 L
4 X
V
2 Z
0 X
N
447.52 573.01 458.16 574.42 460.23 574.08 454.48 572.38 448.68 572.06 5 Y
5 X
V
0 Z
0 X
N
447.58 572.96 455.71 574.09 457.32 573.64 448.68 572.06 4 Y
4 X
V
0 X
N
401.93 575.47 402.76 575.58 404.22 575.58 404.22 574.93 402.99 574.42 402.28 574.87 401.25 574.96 7 Y
V
N
402.99 574.42 403.33 575.58 2 L
V
2 Z
7 X
N
402.28 574.87 402.54 575.55 2 L
0 X
V
7 X
N
408.41 575.88 409.6 575.88 409.76 575.71 409.76 573.11 409.58 572.93 408.41 572.93 408.21 573.13
 408.21 575.67 8 Y
2 X
V
0 Z
0 X
N
408.41 575.88 409.6 575.88 409.76 575.71 409.76 573.11 409.58 572.93 408.41 572.93 408.21 573.13
 408.21 575.67 8 Y
7 X
V
0 X
N
397.6 572.79 400.25 571.78 407.83 570.76 416.49 570.13 417.11 569.74 404.19 569.83 401.65 569.94
 399.23 570.57 397.84 571.45 9 Y
4 X
V
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
99.65 159.95 513.65 672.95 C
149.36 225.85 463.93 335.69 C
0 0 0 1 0 0 0 K
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
90 450 37.14 17.28 305.44 277.25 A
263.29 276.87 344.01 300.68 R
7 X
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
336.53 270.42 342.58 275.34 340.05 267.96 338.29 269.19 4 Y
0 X
V
338.29 269.19 338.29 269.19 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 37.14 17.28 228.94 277.25 A
186.79 276.87 267.51 300.68 R
7 X
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
260.03 270.42 266.08 275.34 263.55 267.96 261.79 269.19 4 Y
0 X
V
261.79 269.19 261.79 269.19 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 37.14 17.28 381.94 277.25 A
339.79 276.87 420.51 300.68 R
7 X
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
413.03 270.42 419.07 275.34 416.55 267.96 414.79 269.19 4 Y
0 X
V
414.79 269.19 414.79 269.19 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 37.14 16.07 303.86 294.76 A
265.29 272.97 346.01 295.11 R
7 X
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
272.64 301.03 266.72 296.54 269.37 303.49 271 302.26 4 Y
0 X
V
271.01 302.26 271.01 302.26 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 37.14 16.07 380.36 294.76 A
341.79 272.97 422.51 295.11 R
7 X
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
349.14 301.03 343.22 296.54 345.86 303.49 347.5 302.26 4 Y
0 X
V
347.51 302.26 347.51 302.26 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 37.14 16.07 227.37 294.76 A
188.79 272.97 269.51 295.11 R
7 X
V
N
1 11 Q
0 X
(sky) 181.06 282.97 T
(r) 245.94 282.4 T
(unway) 250.2 282.4 T
(taxiway) 321.8 282.57 T
(gate) 404.99 282.57 T
389.51 276.54 442.36 293.68 8.57 RR
N
238.55 276.54 291.41 293.68 8.57 RR
N
314.03 276.54 366.89 293.68 8.57 RR
N
163.08 276.54 215.94 293.68 8.57 RR
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
196.15 301.03 190.22 296.54 192.87 303.49 194.51 302.26 4 Y
V
194.51 302.26 194.51 302.26 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Outbound air) 358.08 324.4 T
(craft) 424.39 324.4 T
(Inbound air) 165.22 241.54 T
(craft) 222.77 241.54 T
333.19 323.95 321.65 327.26 333.19 330.56 333.19 327.26 4 Y
V
348.79 327.26 333.19 327.26 2 L
N
266.83 247.56 278.36 244.26 266.83 240.95 266.83 244.26 4 Y
V
251.22 244.26 266.83 244.26 2 L
N
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "50" 52
%%Page: "51" 53
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4 Design of the Airport Example) 386.33 702.62 T
2 11 Q
(51) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(Our \336rst goal for this application is: given a set of incoming air) 99.65 665.62 T
(craft at various) 404.19 665.62 T
(positions in the sky) 99.65 651.62 T
(, we want to pr) 192.77 651.62 T
(edict which gate each air) 265.98 651.62 T
(craft will use when it) 386.08 651.62 T
-0.3 (arrives, and estimate the arrival time of the air) 99.65 637.62 P
-0.3 (craft at the gate. This information is) 322.05 637.62 P
(displayed on the \322Arrivals\323 monitors in an airport.) 99.65 623.62 T
-0.34 (Our second goal for the application is to pr) 126.65 609.62 P
-0.34 (ovide additional information. W) 332.52 609.62 P
-0.34 (e) 487.97 609.62 P
(must state the entir) 99.65 595.62 T
(e path an incoming air) 192.96 595.62 T
(craft will take, including the r) 302 595.62 T
(unway) 446.01 595.62 T
(,) 478.61 595.62 T
(the taxiway) 99.65 581.62 T
(, and the gate. W) 155.19 581.62 T
(e must also state the time that an air) 236.03 581.62 T
(craft is expected) 410.72 581.62 T
-0.12 (to be at each point. This information is used by the gr) 99.65 567.62 P
-0.12 (ound cr) 357.08 567.62 P
-0.12 (ew) 394.49 567.62 P
-0.12 (. For example, for) 407.93 567.62 P
(landing a single air) 99.65 553.62 T
(craft, the information looks like the following:) 192.64 553.62 T
5 9 Q
(12:30:) 99.65 532.95 T
(Aircraft Cardinal at Runway 11R-29L) 137.45 532.95 T
(12:43:) 99.65 521.95 T
(Aircraft Cardinal at Taxiway Echo) 137.45 521.95 T
(12:47:) 99.65 510.95 T
(Aircraft Cardinal at Gate A2) 137.45 510.95 T
1 11 Q
(When complete, the application considers departing air) 99.65 490.62 T
(craft as well as arriving) 369.23 490.62 T
(air) 99.65 476.62 T
(craft.) 112.5 476.62 T
3 15 Q
(4.2  Objects that model an airport) 99.65 436.95 T
1 11 Q
(W) 99.65 416.62 T
(e need to de\336ne classes that r) 109.64 416.62 T
(epr) 251.04 416.62 T
(esent the objects in Figur) 267.07 416.62 T
(e 4.1. Note that,) 387.4 416.62 T
(because the application deals with air) 99.65 402.62 T
(craft and objects with which that air) 282.23 402.62 T
(craft) 456.74 402.62 T
(interacts, we do not need to de\336ne a terminal class. W) 99.65 388.62 T
(e shall de\336ne these airport) 360.44 388.62 T
(classes:) 99.65 374.62 T
4 9 Q
(<airport>, <gate>, <taxiway>, <runway>, <aircraft>) 126.65 353.95 T
1 11 Q
-0.4 (Gates, taxiways, and r) 99.65 333.62 P
-0.4 (unways need to keep track of the air) 205.92 333.62 P
-0.4 (craft as they move fr) 379.62 333.62 P
-0.4 (om) 477.57 333.62 P
-0.12 (the r) 99.65 319.62 P
-0.12 (unway to the gate. One common attribute of gates, taxiways, and r) 121.79 319.62 P
-0.12 (unways is) 444.04 319.62 P
(that each of them can hold an air) 99.65 305.62 T
(craft, or mor) 258.53 305.62 T
(e than one air) 318.98 305.62 T
(craft. Because these) 384.91 305.62 T
-0.42 (objects can hold other objects, we can think of the gates, taxiways, and r) 99.65 291.62 P
-0.42 (unways as) 442.33 291.62 P
(containers of vehicles. W) 99.65 277.62 T
(e shall use a class to r) 219.67 277.62 T
(epr) 323.12 277.62 T
(esent containers:) 339.15 277.62 T
4 9 Q
(<vehicle-storage>) 126.65 256.95 T
1 11 Q
-0.16 (The containers in this application ar) 99.65 236.62 P
-0.16 (e connected to other containers. In the airport) 273.07 236.62 P
(diagram in Figur) 99.65 222.62 T
(e 4.1, gate A1 is connected to taxiway Echo, which is connected) 182.06 222.62 T
(to r) 99.65 208.62 T
(unway 1) 116.25 208.62 T
(1R-29L. W) 157.72 208.62 T
(e can use the) 207.44 208.62 T
4 9.5 Q
(<vehicle-storage>) 272.32 208.62 T
1 11 Q
( class to model these con-) 369.21 208.62 T
(nections.) 99.65 194.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "51" 53
%%Page: "52" 54
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(52) 63.65 702.62 T
0 9.5 Q
(4.2 Objects that model an airport) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(4.2.1  Position) 99.65 664.29 T
1 11 Q
(T) 99.65 644.62 T
(o be able to pr) 105.38 644.62 T
(edict when an air) 174.14 644.62 T
(craft will arrive at the airport, we need to know) 258.05 644.62 T
-0.32 (how the speed of the air) 99.65 630.62 P
-0.32 (craft r) 214.92 630.62 P
-0.32 (elative to the gr) 243.47 630.62 P
-0.32 (ound, and the distance the air) 318.1 630.62 P
-0.32 (craft is) 460.95 630.62 P
(fr) 99.65 616.62 T
(om the airport. Thus we need to r) 107.46 616.62 T
(epr) 270.31 616.62 T
(esent the positions of objects, such as air-) 286.34 616.62 T
(ports and air) 99.65 602.62 T
(craft, to compute distances.) 161.83 602.62 T
-0.37 (W) 126.65 588.62 P
-0.37 (e shall use two ways to expr) 136.64 588.62 P
-0.37 (ess the position of an object. The \336rst way is to) 271.26 588.62 P
-0.05 (use latitude and longitude to indicate the) 99.65 574.62 P
2 F
-0.05 (absolute position) 302.17 574.62 P
1 F
-0.05 ( of the object. The sec-) 389.18 574.62 P
(ond way is to describe the position of the object r) 99.65 560.62 T
(elative to a second object. For) 337.37 560.62 T
(example, a particular air) 99.65 546.62 T
(craft is 200 miles west of a given airport. This kind of) 218.04 546.62 T
(description is a) 99.65 532.62 T
2 F
(relative position) 176.15 532.62 T
1 F
(. W) 258.33 532.62 T
(e shall de\336ne classes to r) 273.82 532.62 T
(epr) 392.71 532.62 T
(esent these two) 408.74 532.62 T
(kinds of positions:) 99.65 518.62 T
4 9 Q
(<absolute-position>, <relative-position>) 126.65 497.95 T
1 11 Q
-0.18 (The attributes of absolute position must include information about the latitude or) 99.65 477.62 P
(longitude of that position. The attributes of r) 99.65 463.62 T
(elative position ar) 315.89 463.62 T
(e: a distance \050such) 402.95 463.62 T
(as 200 miles\051, a dir) 99.65 449.62 T
(ection \050such as South\051, and the second object \050the one to which) 189.34 449.62 T
(this one is r) 99.65 435.62 T
(elative, such as an airport\051.) 155.44 435.62 T
(These classes ar) 126.65 421.62 T
(e conceptually r) 202.99 421.62 T
(elated, and we can imagine that certain) 280.2 421.62 T
(operations work on both) 99.65 407.62 T
4 9.5 Q
(<absolute-position>) 222.36 407.62 T
1 11 Q
( and) 330.66 407.62 T
4 9.5 Q
(<relative-position>) 354.79 407.62 T
1 11 Q
(. W) 463.09 407.62 T
(e) 478.58 407.62 T
(shall de\336ne another class to be a super) 99.65 393.62 T
(class of both kinds of position:) 286.37 393.62 T
4 9 Q
(<position>) 126.65 372.95 T
3 13 Q
(4.2.2  T) 99.65 343.29 T
(ime) 135.62 343.29 T
1 11 Q
(W) 99.65 323.62 T
(e can know that an air) 109.64 323.62 T
(craft is 200 miles away fr) 216.96 323.62 T
(om the airport, and know that) 337.2 323.62 T
-0.34 (the air) 99.65 309.62 P
-0.34 (craft is traveling at 100 miles per hour) 130.16 309.62 P
-0.34 (, but this information is not enough to) 311.15 309.62 P
(pr) 99.65 295.62 T
(edict when the air) 110.41 295.62 T
(craft will arrive at the airport. W) 197.67 295.62 T
(e must also know what time) 354.47 295.62 T
(we obtained the position of the air) 99.65 281.62 T
(craft. W) 266.07 281.62 T
(e have alr) 303.53 281.62 T
(eady de\336ned classes to r) 350.54 281.62 T
(epr) 468.76 281.62 T
(e-) 484.79 281.62 T
(sent these two kinds of times:) 99.65 267.62 T
4 9 Q
(<time-of-day>, <time-offset>) 126.65 246.95 T
1 11 Q
(In Chapter 3, we noticed common characteristics of absolute time and r) 99.65 226.62 T
(elative) 445.07 226.62 T
(time, and captur) 99.65 212.62 T
(ed the common characteristics in another class:) 179.65 212.62 T
4 9 Q
(<time>) 126.65 191.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "52" 54
%%Page: "53" 55
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4 Design of the Airport Example) 386.33 702.62 T
2 11 Q
(53) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(4.2.3  Physical objects) 99.65 664.29 T
1 11 Q
(W) 99.65 644.62 T
(e have identi\336ed classes that can use inheritance. The time classes inherit fr) 109.64 644.62 T
(om) 474.04 644.62 T
4 9.5 Q
-0.08 (<time>) 99.65 630.62 P
1 11 Q
-0.04 (; the position classes inherit fr) 133.85 630.62 P
-0.04 (om) 278.14 630.62 P
4 9.5 Q
-0.08 (<position>) 296.57 630.62 P
1 11 Q
-0.04 (, and classes that behave like) 353.57 630.62 P
-0.29 (containers inherit fr) 99.65 616.62 P
-0.29 (om) 195.04 616.62 P
4 9.5 Q
-0.6 (<vehicle-storage>) 213.22 616.62 P
1 11 Q
-0.29 (. Note that, in addition, certain classes) 310.12 616.62 P
(r) 99.65 602.62 T
(epr) 103.79 602.62 T
(esent physical objects. Each physical object has a curr) 119.82 602.62 T
(ent position. Ther) 377.97 602.62 T
(efor) 463.71 602.62 T
(e,) 482.8 602.62 T
(we shall de\336ne a class:) 99.65 588.62 T
4 9 Q
(<physical-object>) 126.65 567.95 T
3 13 Q
(4.2.4  The organization of classes) 99.65 538.29 T
1 11 Q
(Figur) 99.65 518.62 T
(e 4.3 and Figur) 125.86 518.62 T
(e 4.4 show the inheritance r) 197.97 518.62 T
(elationships among the classes.) 330.85 518.62 T
0 0 0 1 0 0 0 K
99.65 306.39 513.65 314.38 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 113.75 318.05 T
(e 4.3  Inheritance r) 139.96 318.05 T
(elationships of classes r) 229.1 318.05 T
(epr) 342.71 318.05 T
(esenting physical objects.) 358.74 318.05 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 162.4 513.65 170.39 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 109.16 174.06 T
(e 4.4  Inheritance r) 135.38 174.06 T
(elationships of classes r) 224.51 174.06 T
(epr) 338.13 174.06 T
(esenting time and position.) 354.15 174.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
0 0 0 1 0 0 0 K
166.36 334.38 446.93 500.95 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<object>) 283.22 488.24 T
(<physical-object>) 263.93 449.1 T
307.03 470.63 303.72 459.09 300.41 470.63 303.72 470.63 4 Y
V
303.72 484.38 303.72 470.63 2 L
0.5 H
2 Z
N
(<airport>) 172.93 399.11 T
(<gate>) 284.36 348.17 T
(<taxiway>) 325.08 348.17 T
(<runway>) 234.36 348.17 T
(<aircraft>) 383.86 399.11 T
(<vehicle-storage>) 257.74 399.11 T
274.1 365.1 263 360.52 269.99 370.28 272.05 367.69 4 Y
V
300.86 390.52 272.05 367.69 2 L
N
307.39 370.63 304.08 359.09 300.77 370.63 304.08 370.63 4 Y
V
304.08 392.09 304.08 370.63 2 L
N
338.34 369.69 345.15 359.81 334.14 364.58 336.24 367.14 4 Y
V
307.79 390.52 336.24 367.13 2 L
N
212.49 409.63 200.51 409.1 210.39 415.9 211.44 412.77 4 Y
V
300.51 442.67 211.44 412.76 2 L
N
307.03 422.06 303.72 410.52 300.41 422.06 303.72 422.06 4 Y
V
303.72 442.81 303.72 422.06 2 L
N
398.62 415.76 408.5 408.95 396.52 409.49 397.57 412.62 4 Y
V
308.51 442.52 397.57 412.62 2 L
N
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
99.65 159.95 513.65 672.95 C
101.36 188.39 511.93 291.39 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<object>) 295.36 275.82 T
(<position>) 200.08 238.1 T
(<relative-position>) 221.22 201.69 T
(<time>) 396.78 238.1 T
397.79 255.78 408.36 250.1 396.39 249.32 397.09 252.55 4 Y
V
324.08 268.39 397.09 252.55 2 L
0.5 H
2 Z
N
(<time-offset>) 434.22 201.69 T
(<time-of-day>) 350.65 201.69 T
200.02 217.24 188.36 214.39 196.74 222.98 198.38 220.11 4 Y
V
218.36 231.53 198.38 220.11 2 L
N
249.59 224.72 257.64 215.82 246.1 219.1 247.85 221.91 4 Y
V
231.22 232.24 247.85 221.91 2 L
N
241.79 247.46 229.79 247.67 240.08 253.85 240.93 250.66 4 Y
V
309.79 269.1 240.93 250.66 2 L
N
(<absolute-position>) 104.79 201.69 T
389.45 217.1 377.79 214.25 386.17 222.84 387.81 219.97 4 Y
V
407.79 231.39 387.81 219.97 2 L
N
439.02 224.58 447.07 215.68 435.52 218.96 437.27 221.77 4 Y
V
420.65 232.1 437.28 221.76 2 L
N
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "53" 55
%%Page: "54" 56
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(54) 63.65 702.62 T
0 9.5 Q
(4.3 Behaviors of the objects) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 15 Q
0 X
(4.3  Behaviors of the objects) 99.65 662.95 T
1 11 Q
(T) 99.65 642.62 T
(o print a description of each step of the landing, we need a top-level function) 105.38 642.62 T
(that r) 99.65 628.62 T
(eceives an air) 125.62 628.62 T
(craft, airport, and time. W) 190.64 628.62 T
(e call this operation) 315.84 628.62 T
4 9.5 Q
(land-aircraft) 413.68 628.62 T
1 11 Q
(.) 487.78 628.62 T
(T) 126.65 614.62 T
(o print information about positions, times, and locations of air) 132.38 614.62 T
(craft, we) 433.98 614.62 T
(need to be able to print a r) 99.65 600.62 T
(epr) 226.94 600.62 T
(esentation of physical objects, times, and positions.) 242.97 600.62 T
(W) 99.65 586.62 T
(e call this operation) 109.64 586.62 T
4 9.5 Q
(say.) 207.47 586.62 T
1 11 Q
(T) 126.65 572.62 T
(o pr) 132.38 572.62 T
(edict how long it will take for an air) 151.89 572.62 T
(craft to arrive at the airport, we) 325.66 572.62 T
(need to compute the distance between the positions of the air) 99.65 558.62 T
(craft and the posi-) 397.01 558.62 T
(tion of the airport. Then we must divide the distance by the speed to determine) 99.65 544.62 T
-0.32 (how long it will take the air) 99.65 530.62 P
-0.32 (craft to get fr) 231.67 530.62 P
-0.32 (om one position to the other) 293.31 530.62 P
-0.32 (. W) 428.17 530.62 P
-0.32 (e shall call) 443.34 530.62 P
(this function) 99.65 516.62 T
4 9.5 Q
(f) 163.78 516.62 T
(lying-time) 169.48 516.62 T
1 11 Q
(.) 226.48 516.62 T
(T) 126.65 502.62 T
(o pr) 132.38 502.62 T
(edict when the air) 151.89 502.62 T
(craft will arrive, we need to add the time-of) 239.16 502.62 T
(fset r) 450.33 502.62 T
(ep-) 474.41 502.62 T
(r) 99.65 488.62 T
(esenting the \337ying time to the time-of-day stating when the air) 103.79 488.62 T
(craft\325s position) 408.11 488.62 T
(was known. Thus we need a way to add two times together) 99.65 474.62 T
(.) 388.42 474.62 T
-0.26 (Once the air) 126.65 460.62 P
-0.26 (craft arrives at the airport, it enters a set of connected containers) 184.93 460.62 P
(on its way to a particular gate. W) 99.65 446.62 T
(e need functions that track the movement of the) 259.65 446.62 T
-0.3 (air) 99.65 432.62 P
-0.3 (craft into and out of these containers; the functions ar) 112.5 432.62 P
-0.3 (e called) 368.76 432.62 P
4 9.5 Q
-0.63 (move-in-vehicle) 407.7 432.62 P
1 11 Q
(and) 99.65 418.62 T
4 9.5 Q
(move-out-vehicle) 121.02 418.62 T
1 11 Q
(. W) 212.22 418.62 T
(e also need a technique for picking which container) 227.71 418.62 T
(should be the next one on the path to the gate; this function is called) 99.65 404.62 T
4 9.5 Q
(next-out) 432.85 404.62 T
1 11 Q
(.) 478.45 404.62 T
(In the following brief descriptions, we summarize the operations we shall) 126.65 390.62 T
(implement.) 99.65 376.62 T
4 9 Q
(land-aircraft) 99.65 347.95 T
0 11 Q
(air) 175.25 347.95 T
(craft airport time) 187.27 347.95 T
(Generic Function) 435.92 346.62 T
1 F
(Describes each step of the landing and the time it would occur) 126.65 324.62 T
(. For example:) 428.55 324.62 T
5 9 Q
(12:30:) 126.65 303.95 T
(Aircraft Cardinal at Runway 11R-29L) 164.45 303.95 T
(12:43:) 126.65 292.95 T
(Aircraft Cardinal at Taxiway Echo) 164.45 292.95 T
(12:47:) 126.65 281.95 T
(Aircraft Cardinal at Gate A2) 164.45 281.95 T
1 11 Q
-0.27 (The) 126.65 261.62 P
0 F
-0.27 (air) 147.54 261.62 P
-0.27 (craft) 159.57 261.62 P
1 F
-0.27 ( is an instance of) 179.93 261.62 P
4 9.5 Q
-0.56 (<aircraft>) 261.68 261.62 P
1 11 Q
-0.27 (. The) 318.68 261.62 P
0 F
-0.27 (airport) 344.81 261.62 P
1 F
-0.27 ( is an instance of) 375.36 261.62 P
4 9.5 Q
-0.56 (<airport>) 457.11 261.62 P
1 11 Q
-0.27 (.) 508.42 261.62 P
(The) 126.65 247.62 T
0 F
(time) 147.81 247.62 T
1 F
( is an instance of) 167.37 247.62 T
4 9.5 Q
(<time-of-day>) 250.46 247.62 T
1 11 Q
(.) 324.56 247.62 T
4 9 Q
(say) 99.65 218.95 T
0 11 Q
(object) 121.25 218.95 T
(Generic Function) 435.92 217.62 T
1 F
(Prints a r) 126.65 195.62 T
(epr) 170.64 195.62 T
(esentation of) 186.66 195.62 T
0 F
(object) 251.72 195.62 T
1 F
(. The) 277.17 195.62 T
0 F
(object) 303.84 195.62 T
1 F
( may be an instance of any of the fol-) 329.29 195.62 T
(lowing classes:) 126.65 181.62 T
4 9.5 Q
(<physical-object>) 201.84 181.62 T
1 11 Q
(,) 298.74 181.62 T
4 9.5 Q
(<time-of-day>) 304.24 181.62 T
1 11 Q
(,) 378.34 181.62 T
4 9.5 Q
(<time-offset>) 383.84 181.62 T
1 11 Q
(,) 457.94 181.62 T
4 9.5 Q
(<rela-) 463.44 181.62 T
(tive-position>) 126.65 167.62 T
1 11 Q
(,) 206.45 167.62 T
4 9.5 Q
(<absolute-position>) 211.95 167.62 T
1 11 Q
(.) 320.25 167.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "54" 56
%%Page: "55" 57
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4 Design of the Airport Example) 386.33 702.62 T
2 11 Q
(55) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(distance) 99.65 666.95 T
0 11 Q
(fr) 148.25 666.95 T
(om-object to-object) 155.39 666.95 T
(Generic Function) 435.92 665.62 T
1 F
(Returns the distance between its two ar) 126.65 643.62 T
(guments. The) 317.8 643.62 T
0 F
(fr) 386.84 643.62 T
(om-object) 393.98 643.62 T
1 F
( and) 436.54 643.62 T
0 F
(two-object) 460.66 643.62 T
1 F
(ar) 126.65 629.62 T
(e instances of) 136.29 629.62 T
4 9.5 Q
(<physical-object>) 204.05 629.62 T
1 11 Q
(.) 300.95 629.62 T
4 9 Q
(f) 99.65 600.95 T
(lying-time) 105.05 600.95 T
0 11 Q
(fr) 164.45 600.95 T
(om-object to-object) 171.59 600.95 T
(Generic Function) 435.92 599.62 T
1 F
(Returns the distance between its two ar) 126.65 577.62 T
(guments. The) 317.8 577.62 T
0 F
(fr) 386.84 577.62 T
(om-object) 393.98 577.62 T
1 F
( and) 436.54 577.62 T
0 F
(two-object) 460.66 577.62 T
1 F
(ar) 126.65 563.62 T
(e instances of) 136.29 563.62 T
4 9.5 Q
(<physical-object>) 204.05 563.62 T
1 11 Q
(.) 300.95 563.62 T
4 9 Q
(+) 99.65 534.95 T
0 11 Q
(time1 time2) 110.45 534.95 T
(Generic Function) 435.92 533.62 T
1 F
(Adds the two times and r) 126.65 511.62 T
(eturns the sum.) 250.29 511.62 T
0 F
(time1) 328.45 511.62 T
1 F
( and) 353.51 511.62 T
0 F
(time1) 377.64 511.62 T
1 F
( ar) 402.69 511.62 T
(e instances of) 415.09 511.62 T
4 9.5 Q
(<time>) 126.65 497.62 T
1 11 Q
(. Y) 160.85 497.62 T
(ou can add a) 172.67 497.62 T
4 9.5 Q
(<time-of-day>) 237.54 497.62 T
1 11 Q
( to a) 311.64 497.62 T
4 9.5 Q
(<time-offset>) 334.98 497.62 T
1 11 Q
(, and vice versa, but) 409.08 497.62 T
-0.26 (you cannot add two) 126.65 483.62 P
4 9.5 Q
-0.55 (<time-of-day>) 225.84 483.62 P
1 11 Q
-0.26 ( instances. In other wor) 299.94 483.62 P
-0.26 (ds, it is not logical to) 412.25 483.62 P
(add 8:30 to 14:00.) 126.65 469.62 T
4 9 Q
(move-in-vehicle) 99.65 440.95 T
0 11 Q
(vehicle container dir) 186.05 440.95 T
(ection) 276.09 440.95 T
(Generic Function) 435.92 439.62 T
1 F
(Moves the) 126.65 417.62 T
0 F
(vehicle) 179.96 417.62 T
1 F
( into the) 210.12 417.62 T
0 F
(container) 252.82 417.62 T
1 F
( in the) 294.57 417.62 T
0 F
(dir) 327.68 417.62 T
(ection) 340.32 417.62 T
1 F
( given. The) 366.8 417.62 T
0 F
(vehicle) 423.42 417.62 T
1 F
( is an) 453.57 417.62 T
(instance of) 126.65 403.62 T
4 9.5 Q
(<vehicle>) 181.73 403.62 T
1 11 Q
(. The container is an instance of) 233.02 403.62 T
4 9.5 Q
(<vehicle-storage>) 388.38 403.62 T
1 11 Q
(. The) 485.28 403.62 T
0 F
(dir) 126.65 389.62 T
(ection) 139.29 389.62 T
1 F
( is ...) 165.76 389.62 T
4 9 Q
(move-out-vehicle) 99.65 360.95 T
0 11 Q
(vehicle container dir) 191.45 360.95 T
(ection) 281.49 360.95 T
(Generic Function) 435.92 359.62 T
1 F
(Moves the) 126.65 337.62 T
0 F
(vehicle) 179.96 337.62 T
1 F
( out of the) 210.12 337.62 T
0 F
(container) 262.27 337.62 T
1 F
( in the) 304.02 337.62 T
0 F
(dir) 337.13 337.62 T
(ection) 349.77 337.62 T
1 F
( given. The) 376.25 337.62 T
0 F
(vehicle) 432.87 337.62 T
1 F
( is an) 463.02 337.62 T
(instance of) 126.65 323.62 T
4 9.5 Q
(<vehicle>) 181.73 323.62 T
1 11 Q
(. The container is an instance of) 233.02 323.62 T
4 9.5 Q
(<vehicle-storage>) 388.38 323.62 T
1 11 Q
(. The) 485.28 323.62 T
0 F
(dir) 126.65 309.62 T
(ection) 139.29 309.62 T
1 F
( is ...) 165.76 309.62 T
4 9 Q
(next-out) 99.65 280.95 T
0 11 Q
( container dir) 142.85 280.95 T
(ection airport) 202.74 280.95 T
(Generic Function) 435.92 279.62 T
1 F
(Determines information about the next air) 126.65 257.62 T
(craft out of a container so we can do) 331.5 257.62 T
(scheduling. The container is an instance of) 126.65 243.62 T
4 9.5 Q
(<vehicle-storage>) 335.49 243.62 T
1 11 Q
(. The) 432.39 243.62 T
0 F
(dir) 459.06 243.62 T
(ection) 471.7 243.62 T
1 F
( is) 498.17 243.62 T
(... The airport is an instance of) 126.65 229.62 T
4 9.5 Q
(<airport>) 275.5 229.62 T
1 11 Q
(.) 326.8 229.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "55" 57
%%Page: "56" 58
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(56) 63.65 702.62 T
0 9.5 Q
(4.4 Our approach to this application) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 15 Q
0 X
(4.4  Our approach to this application) 99.65 662.95 T
1 11 Q
(In this book, we teach you Dylan thr) 99.65 642.62 T
(ough a family of examples based ar) 276.53 642.62 T
(ound the) 448.54 642.62 T
(airport theme. W) 99.65 628.62 T
(e use the following pr) 181.72 628.62 T
(ogramming methodology in this book:) 287.54 628.62 T
2 F
(1.) 108.65 608.62 T
1 F
-0.16 (W) 126.65 608.62 P
-0.16 (e cr) 136.64 608.62 P
-0.16 (eate a pr) 153.53 608.62 P
-0.16 (ogram in small pieces. A piece might be a class and a method,) 194.59 608.62 P
(or several methods.) 126.65 594.62 T
2 F
(2.) 108.65 574.62 T
1 F
(W) 126.65 574.62 T
(e test the pieces in the listener by cr) 136.64 574.62 T
(eating instances and calling methods.) 308.19 574.62 T
2 F
(3.) 108.65 554.62 T
1 F
(W) 126.65 554.62 T
(e r) 136.64 554.62 T
(e\336ne the code as we go. In the course of developing and testing the) 148.8 554.62 T
(pieces, we often gain a better understanding of the pr) 126.65 540.62 T
(oblem domain. W) 385.92 540.62 T
(e) 471.97 540.62 T
(r) 126.65 526.62 T
(e\336ne the code by r) 130.79 526.62 T
(eor) 219.87 526.62 T
(ganizing classes and r) 235.29 526.62 T
(eplacing pieces of the pr) 341.6 526.62 T
(ogram) 459.36 526.62 T
(with better versions.) 126.65 512.62 T
(In certain examples we start with a simplistic appr) 99.65 492.62 T
(oach to implementing a partic-) 344.63 492.62 T
(ular solution. W) 99.65 478.62 T
(e then pr) 177.26 478.62 T
(esent other solutions that show a better style of Dylan) 220.45 478.62 T
(pr) 99.65 464.62 T
(ogramming. W) 110.41 464.62 T
(e r) 183.01 464.62 T
(ecommend that you r) 195.17 464.62 T
(ead all the appr) 299.38 464.62 T
(oaches to see the pr) 375.14 464.62 T
(o-) 469.68 464.62 T
(gr) 99.65 450.62 T
(ession.) 109.91 450.62 T
-0.14 (Because we ar) 126.65 436.62 P
-0.14 (e pr) 194.9 436.62 P
-0.14 (esenting the sample application as a means for explaining) 213.53 436.62 P
(Dylan, we simplify certain parts of the application, and cover other parts only in) 99.65 422.62 T
-0.19 (Appendix A, which contains the sour) 99.65 408.62 P
-0.19 (ce code of the airport application. Not every) 280.22 408.62 P
(class, slot, or method pr) 99.65 394.62 T
(esented is used in the \336nal application. W) 215.32 394.62 T
(e use certain) 416.96 394.62 T
(classes, slots, and methods for illustrative purposes only) 99.65 380.62 T
(.) 372.27 380.62 T
(In the following chapters we de\336ne \050and r) 126.65 366.62 T
(ede\336ne\051 the classes and methods) 330.69 366.62 T
(discussed in this chapter) 99.65 352.62 T
(. Our goal for each chapter is to teach you mor) 218.56 352.62 T
(e about) 443.64 352.62 T
(Dylan and to continue to develop the sample application.) 99.65 338.62 T
3 15 Q
(4.5  Summary) 99.65 298.95 T
1 11 Q
(This chapter cover) 99.65 278.62 T
(ed:) 189.28 278.62 T
(\245) 108.65 258.62 T
(W) 126.65 258.62 T
(e summarized the steps of designing an object-oriented application.) 136.64 258.62 T
(\245) 108.65 238.62 T
(W) 126.65 238.62 T
(e pr) 136.64 238.62 T
(ovided an initial design of the airport application, including the over-) 155.41 238.62 T
(all goal, the classes, and the operations.) 126.65 224.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "56" 58
%%Page: "57" 59
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(57) 292.15 135.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(5) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(5) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Cycles Thr) 100.65 591.4 T
(ough) 242.4 591.4 T
(Implementation and Design) 99.65 561.4 T
99.65 159.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(In this chapter) 99.65 449.62 T
(, we begin by de\336ning the position classes and) 168.89 449.62 T
4 9.5 Q
(say) 397.27 449.62 T
1 11 Q
( methods. W) 414.38 449.62 T
(e) 474.97 449.62 T
(discover mor) 99.65 435.62 T
(e commonality than anticipated, and act on the opportunity to) 163.57 435.62 T
(arrange for mor) 99.65 421.62 T
(e sharing of code. W) 176.51 421.62 T
(e illustrate how we can impr) 274.69 421.62 T
(ove a design) 413.38 421.62 T
-0.32 (based on information learned while implementing a pr) 99.65 407.62 P
-0.32 (ogram. Given the dynamic) 364.22 407.62 P
(natur) 99.65 393.62 T
(e of Dylan, it is easy to change the design of a pr) 125.92 393.62 T
(ogram.) 360.26 393.62 T
3 15 Q
(5.1  Absolute position: using) 99.65 353.95 T
4 13 Q
(<directed-angle>) 271.2 353.95 T
1 11 Q
(In this section, our goal is to de\336ne the) 99.65 333.62 T
4 9.5 Q
(<absolute-position>) 289.96 333.62 T
1 11 Q
( class and a) 398.26 333.62 T
4 9.5 Q
(say) 456.3 333.62 T
1 11 Q
(method to describe its instances. W) 99.65 319.62 T
(e start by de\336ning the) 269.88 319.62 T
4 9.5 Q
(<position>) 378.81 319.62 T
1 11 Q
( class:) 435.81 319.62 T
4 9 Q
(def) 99.65 298.95 T
(ine class <position> \050<object>\051) 115.85 298.95 T
(end;) 99.65 287.95 T
1 11 Q
-0.02 (The) 99.65 267.62 P
4 9.5 Q
-0.05 (<absolute-position>) 120.79 267.62 P
1 11 Q
-0.02 ( class stor) 229.09 267.62 P
-0.02 (es its latitude and longitude. One way to r) 275.86 267.62 P
-0.02 (ep-) 480.11 267.62 P
(r) 99.65 253.62 T
(esent latitude and longitude is with degr) 103.79 253.62 T
(ees, minutes, seconds, and a dir) 301.42 253.62 T
(ection.) 454.89 253.62 T
(W) 99.65 239.62 T
(e could \050but we do not\051 use eight slots:) 109.64 239.62 T
4 9.5 Q
(latitude-degrees) 299.9 239.62 T
1 11 Q
(,) 391.1 239.62 T
4 9.5 Q
(latitude-minutes) 396.6 239.62 T
1 11 Q
(,) 487.8 239.62 T
4 9.5 Q
(latitude-seconds) 99.65 225.62 T
1 11 Q
(,) 190.85 225.62 T
4 9.5 Q
(latitude-direction) 196.35 225.62 T
1 11 Q
(,) 298.95 225.62 T
4 9.5 Q
(longitude-degrees) 304.45 225.62 T
1 11 Q
(, l) 401.35 225.62 T
4 9.5 Q
(ongitude-min-) 410.05 225.62 T
(utes) 99.65 211.62 T
1 11 Q
(,) 122.45 211.62 T
4 9.5 Q
(longitude-seconds) 127.95 211.62 T
1 11 Q
(, and) 224.85 211.62 T
4 9.5 Q
(longitude-direction) 251.72 211.62 T
1 11 Q
(. Instead, we de\336ne a class) 360.02 211.62 T
(that contains degr) 99.65 197.62 T
(ees, minutes, seconds, and a dir) 187.12 197.62 T
(ection, and call it) 340.59 197.62 T
4 9.5 Q
(<directed-) 425.89 197.62 T
(angle>) 99.65 183.62 T
1 11 Q
(:) 133.85 183.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "57" 59
%%Page: "58" 60
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(58) 63.65 702.62 T
0 9.5 Q
(5.1 Absolute position: using <directed-angle>) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine class <directed-angle> \050<object>\051) 115.85 666.95 T
(slot degrees) 110.45 655.95 T
(:: <integer>, init-keyword: degrees:;) 191.45 655.95 T
(slot minutes) 110.45 644.95 T
(:: <integer>, init-keyword: minutes:;) 191.45 644.95 T
(slot seconds) 110.45 633.95 T
(:: <integer>, init-keyword: seconds:;) 191.45 633.95 T
(slot direction :: <string>,) 110.45 622.95 T
(init-keyword: direction:;) 267.05 622.95 T
(end;) 99.65 611.95 T
1 11 Q
-0.25 (W) 99.65 591.62 P
-0.25 (e can use the) 109.64 591.62 P
4 9.5 Q
-0.52 (<directed-angle>) 173.51 591.62 P
1 11 Q
-0.25 ( class in the de\336nition of) 264.71 591.62 P
4 9.5 Q
-0.52 (<absolute-position>) 384.6 591.62 P
1 11 Q
-0.25 (:) 492.9 591.62 P
4 9 Q
(def) 99.65 570.95 T
(ine class <absolute-position> \050<position>\051) 115.85 570.95 T
(slot latitude) 110.45 559.95 T
(:: <directed-angle>, init-keyword: latitude:;) 191.45 559.95 T
(slot longitude :: <directed-angle>, init-keyword: longitude:;) 110.45 548.95 T
(end;) 99.65 537.95 T
1 11 Q
(W) 99.65 517.62 T
(e could de\336ne the) 109.64 517.62 T
4 9.5 Q
(say) 198.92 517.62 T
1 11 Q
( method as follows:) 216.02 517.62 T
4 9 Q
(def) 99.65 496.95 T
(ine method say \050position :: <absolute-position>\051) 115.85 496.95 T
(format\050*window*, "%d degrees %d minutes %d seconds %s latitude\134n",) 110.45 485.95 T
(position.latitude.degrees, position.latitude.minutes,) 121.25 474.95 T
(position.latitude.seconds, position.latitude.direction\051;) 121.25 463.95 T
(format\050*window*, "%d degrees %d minutes %d seconds %s longitude\134n",) 110.45 452.95 T
(position.longitude.degrees, position.longitude.minutes,) 121.25 441.95 T
(position.longitude.seconds, position.longitude.direction\051;) 121.25 430.95 T
(end;) 99.65 419.95 T
1 11 Q
(Note that this) 99.65 399.62 T
4 9.5 Q
(say) 168.83 399.62 T
1 11 Q
( method uses) 185.93 399.62 T
4 9.5 Q
(position.latitude.degrees) 253.1 399.62 T
1 11 Q
( to access the) 395.6 399.62 T
4 9.5 Q
(degrees) 99.65 385.62 T
1 11 Q
( slot of the instance of) 139.55 385.62 T
4 9.5 Q
(<directed-angle>) 248.01 385.62 T
1 11 Q
( stor) 339.21 385.62 T
(ed in the) 360.36 385.62 T
4 9.5 Q
(latitude) 405.46 385.62 T
1 11 Q
( slot of) 451.06 385.62 T
4 9.5 Q
(<absolute-position>) 99.65 371.62 T
1 11 Q
(.) 207.95 371.62 T
(Although the pr) 126.65 357.62 T
(eceding method works, ther) 205.07 357.62 T
(e is a better way to implement) 341.33 357.62 T
4 9.5 Q
(say) 99.65 343.62 T
1 11 Q
(. W) 115.53 343.62 T
(e can de\336ne a) 131.01 343.62 T
4 9.5 Q
(say) 199.89 343.62 T
1 11 Q
( method on) 216.99 343.62 T
4 9.5 Q
(<directed-angle>) 275.34 343.62 T
1 11 Q
(:) 366.54 343.62 T
4 9 Q
(def) 99.65 322.95 T
(ine method say \050angle :: <directed-angle>\051) 115.85 322.95 T
(format\050*window*, "%d degrees %d minutes %d seconds %s",) 110.45 311.95 T
(angle.degrees, angle.minutes, angle.seconds, angle.direction\051;) 148.25 300.95 T
(end;) 99.65 289.95 T
1 11 Q
-0.09 (Now we can r) 99.65 269.62 P
-0.09 (ede\336ne the) 167.32 269.62 P
4 9.5 Q
-0.19 (say) 223.48 269.62 P
1 11 Q
-0.09 ( method for) 240.57 269.62 P
4 9.5 Q
-0.19 (<absolute-position>) 300.26 269.62 P
1 11 Q
-0.09 ( to call) 408.56 269.62 P
4 9.5 Q
-0.19 (say) 442.91 269.62 P
1 11 Q
-0.09 ( on the) 460.01 269.62 P
(instances of) 99.65 255.62 T
4 9.5 Q
(<directed-angle>) 159.39 255.62 T
1 11 Q
( stor) 250.59 255.62 T
(ed in the) 271.74 255.62 T
4 9.5 Q
(latitude) 316.84 255.62 T
1 11 Q
( and) 362.44 255.62 T
4 9.5 Q
(longitude) 386.57 255.62 T
1 11 Q
( slots:) 437.86 255.62 T
4 9 Q
(def) 99.65 234.95 T
(ine method say \050position :: <absolute-position>\051) 115.85 234.95 T
(say\050position.latitude\051;) 110.45 223.95 T
(format\050*window*, " latitude\134n"\051;) 110.45 212.95 T
(say\050position.longitude\051;) 110.45 201.95 T
(format\050*window*, " longitude\134n"\051;) 110.45 190.95 T
(end;) 99.65 179.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "58" 60
%%Page: "59" 61
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5 Cycles Through Implementation and Design) 333.89 702.62 T
2 11 Q
(59) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
-0.14 (This division of labor r) 99.65 665.62 P
-0.14 (educes duplication of code. The) 209.67 665.62 P
4 9.5 Q
-0.28 (<directed-angle>) 365.83 665.62 P
1 11 Q
-0.14 ( class is) 457.03 665.62 P
(r) 99.65 651.62 T
(esponsible for describing its instances.) 103.79 651.62 T
(Note that ther) 126.65 637.62 T
(e is still a pr) 194.63 637.62 T
(oblem with this appr) 252.87 637.62 T
(oach, because this) 354.48 637.62 T
4 9.5 Q
(say) 444.43 637.62 T
1 11 Q
(method must print) 99.65 623.62 T
4 9.5 Q
(latitude) 194.34 623.62 T
1 11 Q
( and) 239.94 623.62 T
4 9.5 Q
(longitude) 264.06 623.62 T
1 11 Q
( after calling) 315.36 623.62 T
4 9.5 Q
(say) 378.48 623.62 T
1 11 Q
( on the dir) 395.58 623.62 T
(ected) 445.56 623.62 T
(angles stor) 99.65 609.62 T
(ed in its two slots. The modularity is not ideal, because the method on) 151.95 609.62 T
4 9.5 Q
(<absolute-position>) 99.65 595.62 T
1 11 Q
( must know that the method on) 207.95 595.62 T
4 9.5 Q
(<directed-angle>) 363.93 595.62 T
1 11 Q
( does) 455.13 595.62 T
(not print) 99.65 581.62 T
4 9.5 Q
(latitude) 145.29 581.62 T
1 11 Q
( or) 190.89 581.62 T
4 9.5 Q
(longitude) 206.74 581.62 T
1 11 Q
(. W) 258.04 581.62 T
(e solve that pr) 273.53 581.62 T
(oblem in Section 5.2.) 342.23 581.62 T
(W) 126.65 567.62 T
(e cr) 136.64 567.62 T
(eate an instance of) 153.69 567.62 T
4 9.5 Q
(<absolute-position>) 245.79 567.62 T
1 11 Q
(:) 354.09 567.62 T
5 9 Q
(?) 99.65 546.95 T
4 F
( def) 105.05 546.95 T
(ine variable *my-absolute-position* =) 126.65 546.95 T
(make\050<absolute-position>,) 121.25 535.95 T
(latitude:) 148.25 524.95 T
(make) 207.65 524.95 T
(\050<directed-angle>, degrees: 42, minutes: 19,) 234.65 524.95 T
(seconds: 34, direction: "North"\051,) 240.05 513.95 T
(longitude: make \050<directed-angle>, degrees: 70, minutes: 56,) 148.25 502.95 T
(seconds: 26, direction: "West"\051\051;) 240.05 491.95 T
1 11 Q
(W) 99.65 471.62 T
(e call) 109.64 471.62 T
4 9.5 Q
(say) 137.19 471.62 T
1 11 Q
( on the instance:) 154.29 471.62 T
5 9 Q
(?) 99.65 450.95 T
4 F
( say\050*my-absolute-position*\051;) 105.05 450.95 T
5 F
(42 degrees 19 minutes 34 seconds North latitude) 99.65 439.95 T
(70 degrees 56 minutes 26 seconds West longitude) 99.65 428.95 T
1 11 Q
(This output is \336ne \321 as we make changes to the classes and methods, we always) 99.65 408.62 T
(want to achieve this output.) 99.65 394.62 T
3 15 Q
(5.2  Absolute position: using) 99.65 354.95 T
4 13 Q
(<latitude>) 271.2 354.95 T
3 15 Q
( and) 349.2 354.95 T
4 13 Q
(<longitude>) 377.91 354.95 T
1 11 Q
(In Section 5.1, we de\336ned the) 99.65 334.62 T
4 9.5 Q
(<directed-angle>) 244.62 334.62 T
1 11 Q
( class to r) 335.82 334.62 T
(epr) 380.72 334.62 T
(esent what latitude) 396.75 334.62 T
-0.17 (and longitude have in common. It is also useful to r) 99.65 320.62 P
-0.17 (ecognize that latitude and lon-) 348.01 320.62 P
(gitude have dif) 99.65 306.62 T
(fer) 173.45 306.62 T
(ences, as well as similarities. In Section 5.1, we r) 186.53 306.62 T
(epr) 418.51 306.62 T
(esented lati-) 434.53 306.62 T
(tude and longitude by the names of slots in) 99.65 292.62 T
4 9.5 Q
(<absolute-position>) 312.76 292.62 T
1 11 Q
(, and their) 421.06 292.62 T
(implementation as instances of) 99.65 278.62 T
4 9.5 Q
(<directed-angle>) 252.71 278.62 T
1 11 Q
(. W) 343.91 278.62 T
(e can pr) 359.4 278.62 T
(ovide classes that) 397.71 278.62 T
(r) 99.65 264.62 T
(epr) 103.79 264.62 T
(esent latitude and longitude, to elevate the visibility of these objects. W) 119.82 264.62 T
(e) 463.96 264.62 T
(describe the bene\336ts of this appr) 99.65 250.62 T
(oach after the code:) 257.41 250.62 T
4 9 Q
(def) 99.65 229.95 T
(ine class <latitude> \050<directed-angle>\051) 115.85 229.95 T
(end;) 99.65 218.95 T
(def) 99.65 199.95 T
(ine class <longitude> \050<directed-angle>\051) 115.85 199.95 T
(end;) 99.65 188.95 T
1 11 Q
(W) 99.65 168.62 T
(e r) 109.64 168.62 T
(ede\336ne) 121.8 168.62 T
4 9.5 Q
(<absolute-position>) 160.14 168.62 T
1 11 Q
( to use) 268.44 168.62 T
4 9.5 Q
(<latitude>) 302.85 168.62 T
1 11 Q
( and) 359.85 168.62 T
4 9.5 Q
(<longitude>) 383.97 168.62 T
1 11 Q
(:) 446.67 168.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "59" 61
%%Page: "60" 62
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(60) 63.65 702.62 T
0 9.5 Q
(5.2 Absolute position: using <latitude> and <longitude>) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine class <absolute-position> \050<position>\051) 115.85 666.95 T
(slot latitude) 110.45 655.95 T
(:: <latitude>,) 191.45 655.95 T
( init-keyword: latitude:;) 272.45 655.95 T
(slot longitude :: <longitude>, init-keyword: longitude:;) 110.45 644.95 T
(end;) 99.65 633.95 T
1 11 Q
(Figur) 99.65 613.62 T
(e 5.1 shows the inheritance r) 125.86 613.62 T
(elationships of the position and angle classes.) 263.4 613.62 T
0 0 0 1 0 0 0 K
99.65 470.67 513.65 478.67 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 131.09 482.33 T
(e 5.1  Inheritance r) 157.3 482.33 T
(elationships of the position and angle classes) 246.44 482.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 99.65 450.34 T
(e r) 109.64 450.34 T
(ede\336ne the) 121.8 450.34 T
4 9.5 Q
(say) 178.14 450.34 T
1 11 Q
( methods:) 195.24 450.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(def) 99.65 429.67 T
(ine method say \050angle :: <directed-angle>\051) 115.85 429.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format\050*window*, "%d degrees %d minutes %d seconds %s",) 110.45 418.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(angle.degrees, angle.minutes, angle.seconds, angle.direction\051;) 148.25 407.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 99.65 396.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(def) 99.65 377.67 T
(ine method say \050latitude :: <latitude>\051) 115.85 377.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 110.45 366.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format\050*window*, " latitude\134n"\051;) 110.45 355.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 99.65 344.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(def) 99.65 325.67 T
(ine method say \050longitude :: <longitude>\051) 115.85 325.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 110.45 314.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format\050*window*, " longitude\134n"\051;) 110.45 303.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 99.65 292.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(def) 99.65 273.67 T
(ine method say \050position :: <absolute-position>\051) 115.85 273.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050position.latitude\051;) 110.45 262.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050position.longitude\051;) 110.45 251.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 99.65 240.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(This r) 99.65 220.34 T
(ede\336nition of) 127.56 220.34 T
4 9.5 Q
(<absolute-position>) 195.44 220.34 T
1 11 Q
( is not compatible with the pr) 303.74 220.34 T
(evious) 446.53 220.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(de\336nition, because the types of the slots have changed. Ther) 99.65 206.34 T
(efor) 391.43 206.34 T
(e, we need to cr) 410.52 206.34 T
(e-) 486.27 206.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ate an instance of the new class:) 99.65 192.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
0 0 0 1 0 0 0 K
139.9 498.67 473.4 595.95 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<object>) 268.97 586.81 T
(<position>) 174.4 546.95 T
196.71 532.2 193.4 520.67 190.09 532.2 193.4 532.2 4 Y
V
193.4 541.81 193.4 532.2 2 L
0.5 H
2 Z
N
216.82 557.74 204.83 557.95 215.11 564.13 215.97 560.94 4 Y
V
284.83 579.38 215.97 560.94 2 L
N
(<absolute-position>) 148.1 514.11 T
(<directed-angle>) 351.97 545.67 T
(<latitude>) 328.4 510.95 T
(<longitude>) 404.11 510.95 T
362.54 563.99 372.83 557.81 360.83 557.6 361.68 560.79 4 Y
V
292.83 579.24 361.69 560.79 2 L
N
376.63 525.23 364.97 522.38 373.34 530.98 374.98 528.1 4 Y
V
394.97 539.52 374.99 528.1 2 L
N
426.2 532.71 434.25 523.81 422.7 527.09 424.45 529.9 4 Y
V
407.83 540.24 424.46 529.9 2 L
N
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "60" 62
%%Page: "61" 63
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5 Cycles Through Implementation and Design) 333.89 702.62 T
2 11 Q
(61) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
5 9 Q
0 X
(?) 99.65 666.95 T
4 F
( def) 105.05 666.95 T
(ine variable *my-absolute-position* =) 126.65 666.95 T
(make\050<absolute-position>,) 121.25 655.95 T
(latitude:) 148.25 644.95 T
(make\050<latitude>, degrees: 42, minutes: 19,) 207.65 644.95 T
(seconds: 34, direction: "North"\051,) 234.65 633.95 T
(longitude: make\050<longitude>, degrees: 70, minutes: 56,) 148.25 622.95 T
(seconds: 26, direction: "West"\051\051;) 234.65 611.95 T
1 11 Q
(W) 99.65 591.62 T
(e call) 109.64 591.62 T
4 9.5 Q
(say) 137.19 591.62 T
1 11 Q
( on the instance:) 154.29 591.62 T
5 9 Q
(?) 99.65 570.95 T
4 F
( say\050*my-absolute-position*\051;) 105.05 570.95 T
5 F
(42 degrees 19 minutes 34 seconds North latitude) 99.65 559.95 T
(70 degrees 56 minutes 26 seconds West longitude) 99.65 548.95 T
1 11 Q
(This technique, characterized by de\336ning the classes) 99.65 528.62 T
4 9.5 Q
(<latitude>) 356.94 528.62 T
1 11 Q
( and) 413.94 528.62 T
4 9.5 Q
(<longi-) 438.06 528.62 T
(tude>) 99.65 514.62 T
1 11 Q
(, pr) 128.15 514.62 T
(ovides the following bene\336ts:) 144.41 514.62 T
(\245) 108.65 494.62 T
(Each class is r) 126.65 494.62 T
(esponsible for describing its instances. Each method depends) 193.33 494.62 T
(on) 126.65 480.62 T
4 9.5 Q
(say) 141.81 480.62 T
1 11 Q
( working for all the classes. This appr) 158.91 480.62 T
(oach solves the pr) 340.16 480.62 T
(oblem noted) 427.24 480.62 T
(in Section 5.1, wher) 126.65 466.62 T
(e the) 221.12 466.62 T
4 9.5 Q
(say) 247.14 466.62 T
1 11 Q
( method on) 264.24 466.62 T
4 9.5 Q
(<absolute-position>) 322.6 466.62 T
1 11 Q
( printed) 430.9 466.62 T
4 9.5 Q
(lat-) 472.53 466.62 T
(itude) 126.65 452.62 T
1 11 Q
( and) 155.15 452.62 T
4 9.5 Q
(longitude) 179.27 452.62 T
1 11 Q
( after calling) 230.57 452.62 T
4 9.5 Q
(say) 293.69 452.62 T
1 11 Q
( on the dir) 310.79 452.62 T
(ected angles stor) 360.77 452.62 T
(ed in its) 441.56 452.62 T
(two slots.) 126.65 438.62 T
(\245) 108.65 418.62 T
(This appr) 126.65 418.62 T
(oach guar) 173.28 418.62 T
(ds against any attempt to stor) 221.21 418.62 T
(e a latitude in a slot desig-) 365.18 418.62 T
(nated for a longitude, and vice versa. This type-checking will be useful) 126.65 404.62 T
(when we intr) 126.65 390.62 T
(oduce mor) 191.17 390.62 T
(e dif) 243.3 390.62 T
(fer) 264.71 390.62 T
(ences between the classes. For example, the) 277.79 390.62 T
(dir) 126.65 376.62 T
(ection of a latitude is North or South, and the dir) 140.72 376.62 T
(ection of a longitude is) 377.23 376.62 T
-0.05 (W) 126.65 362.62 P
-0.05 (est or East. W) 136.64 362.62 P
-0.05 (e can pr) 201.81 362.62 P
-0.05 (ovide methods that ensur) 240.02 362.62 P
-0.05 (e that the dir) 364.08 362.62 P
-0.05 (ections stor) 425.85 362.62 P
-0.05 (ed) 480.96 362.62 P
(in a) 126.65 348.62 T
4 9.5 Q
(<latitude>) 147.25 348.62 T
1 11 Q
( instance ar) 204.25 348.62 T
(e appr) 259.31 348.62 T
(opriate for latitude, and do the same for) 290.19 348.62 T
(longitude. W) 126.65 334.62 T
(e show how to do that type-checking in Section 7.2, page 88.) 189.27 334.62 T
(\245) 108.65 314.62 T
(Y) 126.65 314.62 T
(ou can ask an object what its class is by using the) 132.97 314.62 T
4 9.5 Q
(object-class) 373.35 314.62 T
1 11 Q
( function.) 441.74 314.62 T
(In this case, you can \336nd out that an object is a latitude or longitude, rather) 126.65 300.62 T
(than just a dir) 126.65 286.62 T
(ected angle. This can be useful in debugging.) 193.81 286.62 T
3 15 Q
(5.3  Relative position: \336rst approach) 99.65 246.95 T
1 11 Q
(The) 99.65 226.62 T
4 9.5 Q
(<relative-position>) 120.81 226.62 T
1 11 Q
( class is de\336ned:) 229.11 226.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "61" 63
%%Page: "62" 64
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(62) 63.65 702.62 T
0 9.5 Q
(5.4 Prelude to a new approach) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine class <relative-position> \050<object>\051) 115.85 666.95 T
(slot distance) 110.45 655.95 T
(:: <single-f) 202.25 655.95 T
(loat>,) 267.05 655.95 T
(init-keyword: distance:;) 321.05 655.95 T
(slot angle) 110.45 644.95 T
(:: <integer>,) 202.25 644.95 T
(init-keyword: angle:;) 321.05 644.95 T
(slot from-object :: <physical-object>, init-keyword: from-object:;) 110.45 633.95 T
(end;) 99.65 622.95 T
1 11 Q
(An instance of) 99.65 602.62 T
4 9.5 Q
(<relative-position>) 172.43 602.62 T
1 11 Q
( knows wher) 280.73 602.62 T
(e it is located in r) 343.59 602.62 T
(elation to the) 426.18 602.62 T
(object in its) 99.65 588.62 T
4 9.5 Q
(from-object) 157.35 588.62 T
1 11 Q
( slot. The) 220.05 588.62 T
4 9.5 Q
(distance) 266.92 588.62 T
1 11 Q
( slot stor) 312.52 588.62 T
(es the distance to the other) 353.89 588.62 T
(object, and the) 99.65 574.62 T
4 9.5 Q
(angle) 172.93 574.62 T
1 11 Q
( slot stor) 201.43 574.62 T
(es the dir) 242.79 574.62 T
(ection to the other object. The angle has) 287.55 574.62 T
-0.17 (degr) 99.65 560.62 P
-0.17 (ees, minutes, and seconds, but we choose to r) 121.9 560.62 P
-0.17 (epr) 340.42 560.62 P
-0.17 (esent it as an) 356.45 560.62 P
4 9.5 Q
-0.35 (<integer>) 420.81 560.62 P
1 11 Q
-0.17 ( con-) 472.11 560.62 P
(taining the total seconds. Unfortunately) 99.65 546.62 T
(, the angle needed her) 291.6 546.62 T
(e is dif) 398.56 546.62 T
(fer) 430.58 546.62 T
(ent than) 443.66 546.62 T
(the) 99.65 532.62 T
4 9.5 Q
(<directed-angle>) 117.65 532.62 T
1 11 Q
( class, because the) 208.85 532.62 T
4 9.5 Q
(<directed-angle>) 299.08 532.62 T
1 11 Q
( class has a dir) 390.28 532.62 T
(ection,) 460.33 532.62 T
(such as South, which is not needed for the angle of) 99.65 518.62 T
4 9.5 Q
(<relative-position>) 348.8 518.62 T
1 11 Q
(. In Sec-) 457.1 518.62 T
(tion 5.4, we addr) 99.65 504.62 T
(ess the issue of the angles.) 181.12 504.62 T
(For completeness, we de\336ne the other classes needed by) 126.65 490.62 T
4 9.5 Q
(<relative-posi-) 402.47 490.62 T
(tion>) 99.65 476.62 T
1 11 Q
(. The type of the) 128.15 476.62 T
4 9.5 Q
(from-object) 209.57 476.62 T
1 11 Q
( slot is) 272.27 476.62 T
4 9.5 Q
(<physical-object>) 305.84 476.62 T
1 11 Q
(.) 402.74 476.62 T
4 9 Q
(def) 99.65 455.95 T
(ine class <physical-object> \050<object>\051) 115.85 455.95 T
(slot current-position :: <position>, init-keyword: current-position:;) 110.45 444.95 T
(slot physical-size) 110.45 433.95 T
(:: <size>,) 229.25 433.95 T
(init-keyword: physical-size:;) 310.25 433.95 T
(end;) 99.65 422.95 T
1 11 Q
-0.12 (Note that the type of the) 99.65 402.62 P
4 9.5 Q
-0.24 (current-position) 220.28 402.62 P
1 11 Q
-0.12 ( slot is) 311.48 402.62 P
4 9.5 Q
-0.24 (<position>) 344.7 402.62 P
1 11 Q
-0.12 (. It can be either an) 401.7 402.62 P
4 9.5 Q
(<absolute-position>) 99.65 388.62 T
1 11 Q
( or a) 207.95 388.62 T
4 9.5 Q
(<relative-position>) 232.05 388.62 T
1 11 Q
(.) 340.35 388.62 T
(The type of the) 126.65 374.62 T
4 9.5 Q
(physical-size) 202.57 374.62 T
1 11 Q
( slot is) 276.67 374.62 T
4 9.5 Q
(<size>) 310.24 374.62 T
1 11 Q
(.) 344.44 374.62 T
6 9 Q
(// Used to keep track of object dimensions and object capacities.) 99.65 353.95 T
(// All dimensions in feet.) 99.65 342.95 T
4 F
(def) 99.65 331.95 T
(ine class <size> \050<object>\051) 115.85 331.95 T
(slot length :: <integer>, init-keyword: length:;) 110.45 320.95 T
(slot width) 110.45 309.95 T
(:: <integer>, init-keyword: width:;) 175.25 309.95 T
(slot height :: <integer>, init-keyword: height:;) 110.45 298.95 T
(end;) 99.65 287.95 T
3 15 Q
(5.4  Prelude to a new approach) 99.65 249.95 T
1 11 Q
(When we start to consider the need to do arithmetic operations on latitude and) 99.65 229.62 T
-0.36 (longitudes, we might pr) 99.65 215.62 P
-0.36 (efer a dif) 215.57 215.62 P
-0.36 (fer) 257.78 215.62 P
-0.36 (ent implementation of) 270.86 215.62 P
4 9.5 Q
-0.75 (<directed-angle>) 380.6 215.62 P
1 11 Q
-0.36 ( that) 471.8 215.62 P
(makes those operations mor) 99.65 201.62 T
(e convenient. W) 236.54 201.62 T
(e might decide to r) 313.69 201.62 T
(epr) 404.78 201.62 T
(esent the) 420.8 201.62 T
(degr) 99.65 187.62 T
(ees, minutes, and seconds in a) 121.9 187.62 T
4 9.5 Q
(total-seconds) 270.91 187.62 T
1 11 Q
( slot:) 345.01 187.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "62" 64
%%Page: "63" 65
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5 Cycles Through Implementation and Design) 333.89 702.62 T
2 11 Q
(63) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine class <directed-angle> \050<object>\051) 115.85 666.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 110.45 655.95 T
(slot direction) 110.45 644.95 T
( :: <string>,) 207.65 644.95 T
(init-keyword: direction:;) 288.65 644.95 T
(end;) 99.65 633.95 T
1 11 Q
(W) 99.65 613.62 T
(e can separate the) 109.64 613.62 T
4 9.5 Q
(<directed-angle>) 198.69 613.62 T
1 11 Q
( class into two classes to make it possible) 289.89 613.62 T
-0.25 (to use dir) 99.65 599.62 P
-0.25 (ected angles wher) 144.88 599.62 P
-0.25 (e needed \050for latitudes and longitudes\051 and use angles) 231.75 599.62 P
(without dir) 99.65 585.62 T
(ection wher) 155.05 585.62 T
(e needed \050for the) 212.15 585.62 T
4 9.5 Q
(angle) 297 585.62 T
1 11 Q
( slot of the) 325.5 585.62 T
4 9.5 Q
(<relative-position>) 378.88 585.62 T
1 11 Q
(class\051:) 99.65 571.62 T
4 9 Q
(def) 99.65 550.95 T
(ine class <angle> \050<object>\051) 115.85 550.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 110.45 539.95 T
(end;) 99.65 528.95 T
(def) 99.65 509.95 T
(ine class <directed-angle> \050<angle>\051) 115.85 509.95 T
(slot direction :: <string>,) 110.45 498.95 T
(init-keyword: direction:;) 267.05 498.95 T
(end;) 99.65 487.95 T
1 11 Q
(Suddenly) 99.65 467.62 T
(, the) 145.26 467.62 T
4 9.5 Q
(<angle>) 168.77 467.62 T
1 11 Q
( class looks r) 208.67 467.62 T
(emarkably similar to the) 269.98 467.62 T
4 9.5 Q
(<time>) 391.49 467.62 T
1 11 Q
( class de\336ned) 425.69 467.62 T
(earlier:) 99.65 453.62 T
4 9 Q
(def) 99.65 432.95 T
(ine class <time> \050<object>\051) 115.85 432.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 110.45 421.95 T
(end;) 99.65 410.95 T
1 11 Q
(W) 99.65 390.62 T
(e would like to call) 109.64 390.62 T
4 9.5 Q
(decode-total-seconds) 204.55 390.62 T
1 11 Q
( on instances of) 318.55 390.62 T
4 9.5 Q
(<angle>) 396.2 390.62 T
1 11 Q
(, but cur-) 436.1 390.62 T
(r) 99.65 376.62 T
(ently the method is de\336ned to work on) 103.79 376.62 T
4 9.5 Q
(<time>) 295.87 376.62 T
1 11 Q
(. The next step is to take advan-) 330.07 376.62 T
(tage of the similarity between) 99.65 362.62 T
4 9.5 Q
(<angle>) 246.57 362.62 T
1 11 Q
( and) 286.48 362.62 T
4 9.5 Q
(<time>.) 310.6 362.62 T
3 15 Q
(5.5  Meeting of space and time) 99.65 322.95 T
1 11 Q
-0.02 (Our goal now is to \336nd a way to r) 99.65 302.62 P
-0.02 (epr) 263.48 302.62 P
-0.02 (esent the similarities between time and posi-) 279.51 302.62 P
(tion. This section contains all the class and method de\336nitions r) 99.65 288.62 T
(elated to time,) 407.41 288.62 T
(position, physical objects, and size.) 99.65 274.62 T
3 13 Q
(5.5.1  Sixty-unit class and method) 99.65 243.29 T
1 11 Q
(Sometimes the trickiest part of de\336ning super) 99.65 223.62 T
(classes that model characteristics) 321.25 223.62 T
(shar) 99.65 209.62 T
(ed by other classes is thinking of the right name for the super) 120.36 209.62 T
(class. Her) 417.35 209.62 T
(e we) 464.33 209.62 T
-0.38 (use) 99.65 195.62 P
4 9.5 Q
-0.8 (<sixty-unit>) 118.58 195.62 P
1 11 Q
-0.38 ( to name the class that has) 186.98 195.62 P
4 9.5 Q
-0.8 (total-seconds) 313.82 195.62 P
1 11 Q
-0.38 ( that can be converted) 387.92 195.62 P
(to either hours-minutes-seconds, or degr) 99.65 181.62 T
(ees-minutes-seconds. And in the) 297.12 181.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "63" 65
%%Page: "64" 66
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(64) 63.65 702.62 T
0 9.5 Q
(5.5 Meeting of space and time) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 F
0 X
(encode-total-seconds) 99.65 665.62 T
1 11 Q
( method, we use the name) 213.65 665.62 T
4 9.5 Q
(max-unit) 343.74 665.62 T
1 11 Q
( to r) 389.35 665.62 T
(efer to the unit) 408.58 665.62 T
(that is hours for time, and degr) 99.65 651.62 T
(ees for positions.) 250.55 651.62 T
4 9 Q
(def) 99.65 630.95 T
(ine class <sixty-unit> \050<object>\051) 115.85 630.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 110.45 619.95 T
(end;) 99.65 608.95 T
(def) 99.65 589.95 T
(ine method encode-total-seconds \050max-unit :: <integer>,) 115.85 589.95 T
(minutes) 294.05 578.95 T
(:: <integer>,) 342.65 578.95 T
(seconds) 294.05 567.95 T
(:: <integer>\051) 342.65 567.95 T
(\05060 * 60 * max-unit\051 + \05060 * minutes\051 + seconds;) 110.45 556.95 T
(end;) 99.65 545.95 T
(def) 99.65 526.95 T
(ine method decode-total-seconds \050sixty-unit :: <sixty-unit>\051) 115.85 526.95 T
(let\050total-minutes, seconds\051 = truncate/\050sixty-unit.total-seconds, 60\051;) 110.45 515.95 T
(let\050max-unit, minutes\051 = truncate/\050total-minutes, 60\051;) 110.45 504.95 T
(values \050max-unit, minutes, seconds\051;) 110.45 493.95 T
(end;) 99.65 482.95 T
3 13 Q
(5.5.2  T) 99.65 453.29 T
(ime classes and methods) 135.62 453.29 T
4 9 Q
(def) 99.65 432.95 T
(ine class <time> \050<sixty-unit>\051) 115.85 432.95 T
(end;) 99.65 421.95 T
(def) 99.65 402.95 T
(ine method say \050time :: <time>\051) 115.85 402.95 T
(let\050hours, minutes\051 = decode-total-seconds\050time\051;) 110.45 391.95 T
(format\050*window*, "%d:%d", hours, minutes\051;) 110.45 380.95 T
(end;) 99.65 369.95 T
(def) 99.65 350.95 T
(ine class <time-of-day> \050<time>\051) 115.85 350.95 T
(end;) 99.65 339.95 T
(def) 99.65 320.95 T
(ine class <time-offset> \050<time>\051) 115.85 320.95 T
(slot past? :: <boolean>, init-keyword: past?:;) 110.45 309.95 T
(end;) 99.65 298.95 T
(def) 99.65 279.95 T
(ine method say \050time :: <time-offset>\051) 115.85 279.95 T
(format\050*window*, "%s ", if \050time.past?\051 "minus" else "plus" end\051;) 110.45 268.95 T
(next-method\050\051;) 110.45 257.95 T
(end;) 99.65 246.95 T
3 13 Q
(5.5.3  Angle and position classes and methods) 99.65 217.29 T
4 9 Q
(def) 99.65 196.95 T
(ine class <angle> \050<sixty-unit>\051) 115.85 196.95 T
(end;) 99.65 185.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "64" 66
%%Page: "65" 67
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5 Cycles Through Implementation and Design) 333.89 702.62 T
2 11 Q
(65) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine method say \050angle :: <angle>\051) 115.85 666.95 T
(let\050degrees\051 = decode-total-seconds\050angle\051;) 110.45 655.95 T
(format\050*window*, "%d degrees", degrees\051;) 110.45 644.95 T
(end;) 99.65 633.95 T
(def) 99.65 614.95 T
(ine  class <directed-angle> \050<angle>\051) 115.85 614.95 T
(slot direction :: <string>, init-keyword: direction:;) 110.45 603.95 T
(end;) 99.65 592.95 T
(def) 99.65 573.95 T
(ine method say \050angle :: <directed-angle>\051) 115.85 573.95 T
(let\050degrees, minutes, seconds\051 = decode-total-seconds\050angle\051;) 110.45 562.95 T
(format\050*window*, "%d degrees %d minutes %d seconds %s",) 110.45 551.95 T
(degrees, minutes, seconds, angle.direction\051;) 148.25 540.95 T
(end;) 99.65 529.95 T
(def) 99.65 510.95 T
(ine class <latitude> \050<directed-angle>\051) 115.85 510.95 T
(end;) 99.65 499.95 T
(def) 99.65 480.95 T
(ine method say \050latitude :: <latitude>\051) 115.85 480.95 T
(next-method\050\051;) 110.45 469.95 T
(format\050*window*, " latitude\134n"\051;) 110.45 458.95 T
(end;) 99.65 447.95 T
(def) 99.65 428.95 T
(ine class <longitude> \050<directed-angle>\051) 115.85 428.95 T
(end;) 99.65 417.95 T
(def) 99.65 398.95 T
(ine method say \050longitude :: <longitude>\051) 115.85 398.95 T
(next-method\050\051;) 110.45 387.95 T
(format\050*window*, " longitude\134n"\051;) 110.45 376.95 T
(end;) 99.65 365.95 T
(def) 99.65 346.95 T
(ine class <position> \050<object>\051) 115.85 346.95 T
(end;) 99.65 335.95 T
(def) 99.65 316.95 T
(ine class <absolute-position> \050<position>\051) 115.85 316.95 T
(slot latitude  :: <latitude>,  init-keyword: latitude:;) 110.45 305.95 T
(slot longitude :: <longitude>, init-keyword: longitude:;) 110.45 294.95 T
(end;) 99.65 283.95 T
(def) 99.65 264.95 T
(ine method say \050position :: <absolute-position>\051) 115.85 264.95 T
(say\050position.latitude\051;) 110.45 253.95 T
(say\050position.longitude\051;) 110.45 242.95 T
(end;) 99.65 231.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "65" 67
%%Page: "66" 68
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(66) 63.65 702.62 T
0 9.5 Q
(5.5 Meeting of space and time) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine class <relative-position> \050<position>\051) 115.85 666.95 T
6 F
(// distance is in miles) 110.45 655.95 T
4 F
(slot distance) 110.45 644.95 T
(:: <single-f) 202.25 644.95 T
(loat>,) 267.05 644.95 T
(init-keyword: distance:;) 321.05 644.95 T
(slot angle) 110.45 633.95 T
(:: <angle>,) 202.25 633.95 T
(init-keyword: angle:;) 321.05 633.95 T
(slot from-object :: <physical-object>, init-keyword: from-object:;) 110.45 622.95 T
(end;) 99.65 611.95 T
(def) 99.65 592.95 T
(ine method say \050position :: <relative-position>\051) 115.85 592.95 T
(format\050*window*, "%= miles from ", position.distance\051;) 110.45 581.95 T
(say\050position.from-object\051;) 110.45 570.95 T
(format\050*window*, " at heading "\051;) 110.45 559.95 T
(say\050position.angle\051;) 110.45 548.95 T
(end;) 99.65 537.95 T
1 11 Q
(Note that the pr) 99.65 517.62 T
(eceding) 176.99 517.62 T
4 9.5 Q
(say) 217.6 517.62 T
1 11 Q
( methods for) 234.7 517.62 T
4 9.5 Q
(<latitude>) 299.33 517.62 T
1 11 Q
(,) 356.33 517.62 T
4 9.5 Q
(<longitude>) 361.83 517.62 T
1 11 Q
(, and) 424.53 517.62 T
4 9.5 Q
(<abso-) 451.4 517.62 T
(lute-position>) 99.65 503.62 T
1 11 Q
( do not change at all, despite the substantial change in the way) 179.45 503.62 T
(latitude and longitude ar) 99.65 489.62 T
(e r) 221 489.62 T
(epr) 233.17 489.62 T
(esented.) 249.19 489.62 T
3 13 Q
(5.5.4  Physical object and size classes and methods) 99.65 458.29 T
1 11 Q
(W) 99.65 438.62 T
(e have not changed the de\336nitions of the) 109.64 438.62 T
4 9.5 Q
(<physical-object>) 309.87 438.62 T
1 11 Q
( class and) 406.77 438.62 T
4 9.5 Q
(<size>) 456.55 438.62 T
1 11 Q
(classes, but r) 99.65 424.62 T
(epeat the de\336nitions her) 161.19 424.62 T
(e for completeness.) 278.86 424.62 T
4 9 Q
(def) 99.65 403.95 T
(ine class <physical-object> \050<object>\051) 115.85 403.95 T
(slot current-position :: <position>, init-keyword: current-position:;) 110.45 392.95 T
(slot physical-size) 110.45 381.95 T
(:: <size>,) 229.25 381.95 T
(init-keyword: physical-size:;) 310.25 381.95 T
(end;) 99.65 370.95 T
6 F
(// Used to keep track of object dimensions and object capacities.) 99.65 351.95 T
(// All dimensions in feet.) 99.65 340.95 T
4 F
(def) 99.65 329.95 T
(ine class <size> \050<object>\051) 115.85 329.95 T
(slot length :: <integer>, init-keyword: length:;) 110.45 318.95 T
(slot width) 110.45 307.95 T
(:: <integer>, init-keyword: width:;) 175.25 307.95 T
(slot height :: <integer>, init-keyword: height:;) 110.45 296.95 T
(end;) 99.65 285.95 T
1 11 Q
(This) 99.65 265.62 T
4 9.5 Q
(say) 123.41 265.62 T
1 11 Q
( method is new:) 140.51 265.62 T
4 9 Q
(def) 99.65 244.95 T
(ine method say \050physical-object :: <physical-object>\051) 115.85 244.95 T
(format\050*window*, "object at "\051;) 105.05 233.95 T
(say\050physical-object.current-position\051;) 105.05 222.95 T
(end;) 99.65 211.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "66" 68
%%Page: "67" 69
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5 Cycles Through Implementation and Design) 333.89 702.62 T
2 11 Q
(67) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(5.5.5  Relationships of the classes) 99.65 664.29 T
1 11 Q
-0.01 (Figur) 99.65 644.62 P
-0.01 (e 5.2 shows the inheritance r) 125.86 644.62 P
-0.01 (elationships of the classes. Note that the classes) 263.34 644.62 P
(have another kind of r) 99.65 630.62 T
(elationship as well: one class can use another class as the) 207.8 630.62 T
(type of a slot. Figur) 99.65 616.62 T
(e 5.3 shows both the inheritance r) 193.82 616.62 T
(elationships, and the r) 356.19 616.62 T
(ela-) 463.92 616.62 T
(tionships of one class using another class as the type of a slot.) 99.65 602.62 T
0 0 0 1 0 0 0 K
99.65 369.53 513.65 377.52 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 174.58 381.19 T
(e 5.2  Inheritance r) 200.79 381.19 T
(elationships among classes) 289.93 381.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
0 0 0 1 0 0 0 K
99.93 395.52 513.36 581.95 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<object>) 279.65 564.52 T
(<position>) 307.93 524 T
(<relative-position>) 376.93 464.38 T
(<absolute-position>) 260.51 464.38 T
(<directed-angle>) 214.79 443.38 T
(<latitude>) 264.93 405.55 T
(<longitude>) 177.08 404.55 T
(<sixty-unit>) 169.36 526.14 T
(<time>) 136.22 484.86 T
(<time-of-day>) 103.22 446.64 T
(<time-offset>) 149.65 459.49 T
(<angle>) 232.29 481.67 T
214.64 535.29 202.65 535.52 212.94 541.68 213.79 538.48 4 Y
V
291.22 559.09 213.8 538.48 2 L
0.5 H
2 Z
N
322.02 545.22 329.08 535.52 317.95 540 319.98 542.61 4 Y
V
299.79 558.37 319.98 542.61 2 L
N
162.98 496.5 151.22 494.09 159.91 502.36 161.44 499.43 4 Y
V
202.65 520.95 161.44 499.43 2 L
N
241.28 501.5 249.08 492.38 237.63 495.99 239.46 498.75 4 Y
V
207.65 519.8 239.46 498.75 2 L
N
303.9 482.41 294.07 475.52 298.75 486.57 301.32 484.49 4 Y
V
329.08 518.81 301.33 484.48 2 L
N
386.99 484.97 393.36 474.8 382.57 480.05 384.78 482.51 4 Y
V
344.08 519.09 384.78 482.51 2 L
N
133.57 461.21 122.65 456.23 129.27 466.24 131.42 463.72 4 Y
V
149.08 478.81 131.42 463.72 2 L
N
176.47 474.65 186.22 467.66 174.24 468.42 175.36 471.54 4 Y
V
156.22 478.37 175.36 471.54 2 L
N
251.67 463.91 248.36 452.38 245.06 463.91 248.36 463.91 4 Y
V
248.36 474.52 248.36 463.91 2 L
N
225.77 420.79 214.08 418.1 222.57 426.57 224.17 423.68 4 Y
V
247.65 436.67 224.17 423.68 2 L
N
277.87 425.72 286.36 417.24 274.67 419.93 276.27 422.82 4 Y
V
252.79 435.81 276.27 422.82 2 L
N
(<physical-object>) 374.51 523.14 T
(<size>) 478.08 523.14 T
394.74 536.42 404.93 530.09 392.93 530.06 393.83 533.24 4 Y
V
307.65 557.66 393.84 533.24 2 L
N
478.93 537.05 489.79 531.94 477.87 530.52 478.4 533.79 4 Y
V
317.65 559.8 478.41 533.79 2 L
N
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "67" 69
%%Page: "68" 70
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(68) 63.65 702.62 T
0 9.5 Q
(5.6 Use of a relative position) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
99.65 447.53 513.65 455.52 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 104.02 459.19 T
(e 5.3  Dashed lines show wher) 130.23 459.19 T
(e one class uses another as the type of a slot.) 276.8 459.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 15 Q
(5.6  Use of a relative position) 99.65 413.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(In this section, we make an instance of) 99.65 393.2 T
4 9.5 Q
(<relative-position>) 288.89 393.2 T
1 11 Q
( and call) 397.19 393.2 T
4 9.5 Q
(say) 440.85 393.2 T
1 11 Q
( on it.) 457.95 393.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(First we need to cr) 99.65 379.2 T
(eate an instance of) 189.29 379.2 T
4 9.5 Q
(<absolute-position>) 281.39 379.2 T
1 11 Q
( to r) 389.69 379.2 T
(epr) 408.93 379.2 T
(esent the posi-) 424.96 379.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tion of the physical object stor) 99.65 365.2 T
(ed in the) 244.9 365.2 T
4 9.5 Q
(from-object) 290 365.2 T
1 11 Q
( slot. The class de\336nition of) 352.7 365.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<absolute-position>) 99.65 351.2 T
1 11 Q
( has changed signi\336cantly since we cr) 207.95 351.2 T
(eated an instance, so) 390.13 351.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(we need to cr) 99.65 337.2 T
(eate another instance:) 164.62 337.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(def) 99.65 316.53 T
(ine variable *my-absolute-position* =) 115.85 316.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<absolute-position>,) 110.45 305.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(latitude:) 137.45 294.53 T
( make\050<latitude>,) 191.45 294.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds: encode-total-seconds\05042, 19, 34\051,) 229.25 283.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(direction: "North"\051,) 229.25 272.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(longitude: make\050<longitude>,) 137.45 261.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds: encode-total-seconds\05070, 56, 26\051,) 223.85 250.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(direction: "West"\051\051;) 223.85 239.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(W) 99.65 219.2 T
(e make a) 109.64 219.2 T
4 9.5 Q
(<relative-position>) 155.25 219.2 T
1 11 Q
( instance:) 263.55 219.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
0 0 0 1 0 0 0 K
99.93 475.52 513.36 661.95 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<object>) 279.65 644.52 T
(<position>) 307.93 604 T
(<relative-position>) 376.93 544.38 T
(<absolute-position>) 260.51 544.38 T
(<directed-angle>) 214.79 523.38 T
(<latitude>) 264.93 485.55 T
(<longitude>) 177.08 484.55 T
(<sixty-unit>) 169.36 606.14 T
(<time>) 136.22 564.86 T
(<time-of-day>) 103.22 526.64 T
(<time-offset>) 149.65 539.49 T
(<angle>) 232.29 561.67 T
214.64 615.29 202.65 615.52 212.94 621.68 213.79 618.48 4 Y
V
291.22 639.09 213.8 618.48 2 L
0.5 H
2 Z
N
322.02 625.22 329.08 615.51 317.95 620 319.98 622.61 4 Y
V
299.79 638.37 319.98 622.61 2 L
N
162.98 576.49 151.22 574.09 159.91 582.36 161.44 579.43 4 Y
V
202.65 600.95 161.44 579.43 2 L
N
241.28 581.5 249.08 572.38 237.63 575.99 239.46 578.75 4 Y
V
207.65 599.8 239.46 578.75 2 L
N
303.9 562.41 294.07 555.52 298.75 566.57 301.32 564.49 4 Y
V
329.08 598.81 301.33 564.48 2 L
N
386.99 564.97 393.36 554.8 382.57 560.05 384.78 562.51 4 Y
V
344.08 599.09 384.78 562.51 2 L
N
133.57 541.21 122.65 536.23 129.27 546.24 131.42 543.72 4 Y
V
149.08 558.81 131.42 543.72 2 L
N
176.47 554.65 186.22 547.66 174.24 548.42 175.36 551.54 4 Y
V
156.22 558.37 175.36 551.54 2 L
N
251.67 543.91 248.36 532.38 245.06 543.91 248.36 543.91 4 Y
V
248.36 554.52 248.36 543.91 2 L
N
225.77 500.79 214.08 498.1 222.57 506.57 224.17 503.68 4 Y
V
247.65 516.67 224.17 503.68 2 L
N
277.87 505.72 286.36 497.24 274.67 499.93 276.27 502.82 4 Y
V
252.79 515.81 276.27 502.82 2 L
N
(<physical-object>) 374.51 603.14 T
(<size>) 478.08 603.14 T
394.74 616.42 404.93 610.09 392.93 610.06 393.83 613.24 4 Y
V
307.65 637.66 393.84 613.24 2 L
N
478.93 617.05 489.79 611.94 477.87 610.52 478.4 613.79 4 Y
V
317.65 639.8 478.41 613.79 2 L
N
239.51 498.92 227.65 497.1 236.74 504.93 238.12 501.93 4 Y
2 X
V
319.08 539.24 238.12 501.92 2 L
N
306.3 503.98 297.64 495.67 300.58 507.31 303.44 505.64 4 Y
V
323.36 539.95 303.44 505.64 2 L
N
285.32 559.62 274.07 563.8 285.83 566.22 285.58 562.92 4 Y
V
426.93 552.09 285.58 562.92 2 L
N
484.94 596.65 496.93 597.1 487 590.36 485.97 593.5 4 Y
V
421.22 599.95 453.36 582.81 485.98 593.5 3 L
N
359.83 592.67 349.79 599.24 361.79 598.99 360.81 595.83 4 Y
V
411.93 598.48 393.71 585.67 360.81 595.83 3 L
N
419.65 581.87 418.36 593.8 425.77 584.37 422.71 583.12 4 Y
V
434.08 555.23 422.72 583.12 2 L
N
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "68" 70
%%Page: "69" 71
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5 Cycles Through Implementation and Design) 333.89 702.62 T
2 11 Q
(69) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
5 9 Q
0 X
(?) 99.65 666.95 T
4 F
( def) 105.05 666.95 T
(ine variable *her-relative-position* =) 126.65 666.95 T
(make\050<relative-position>,) 121.25 655.95 T
(distance: 30.5,) 148.25 644.95 T
-0.36 (angle: make\050<angle>, total-seconds: encode-total-seconds\05090, 5, 0\051\051,) 148.25 633.95 P
(from-object: make\050<physical-object>,) 148.25 622.95 T
(current-position: *my-absolute-position*\051\051;) 245.45 611.95 T
1 11 Q
(W) 99.65 591.62 T
(e call) 109.64 591.62 T
4 9.5 Q
(say) 137.19 591.62 T
1 11 Q
( on the r) 154.29 591.62 T
(elative position:) 194.35 591.62 T
5 9 Q
(?) 99.65 570.95 T
4 F
( say\050*her-relative-position*\051;) 105.05 570.95 T
5 F
(30.5 miles from object at 42 degrees 19 minutes 34 seconds North latitude) 99.65 559.95 T
(70 degrees 56 minutes 26 seconds West longitude at heading 90 degrees) 99.65 548.95 T
3 13 Q
(5.6.1  Interaction of methods in this call) 99.65 519.29 T
1 11 Q
(T) 99.65 499.62 T
(o illustrate how this call worked, we show the de\336nitions of all the methods) 105.38 499.62 T
(called. The generic function) 99.65 485.62 T
4 9.5 Q
(say) 236.85 485.62 T
1 11 Q
( has nine methods, and seven of them ar) 253.95 485.62 T
(e called) 449.63 485.62 T
(for this particular ar) 99.65 471.62 T
(gument. Method 1 is called \336rst. The de\336nitions ar) 197.22 471.62 T
(e anno-) 442.39 471.62 T
(tated with comments that tell which) 99.65 457.62 T
4 9.5 Q
(say) 277.8 457.62 T
1 11 Q
( methods ar) 294.9 457.62 T
(e called for this instance of) 352.41 457.62 T
4 9.5 Q
(<relative-position>) 99.65 443.62 T
1 11 Q
(.) 207.95 443.62 T
6 9 Q
(// Method 1) 99.65 422.95 T
4 F
(def) 99.65 411.95 T
(ine method say \050position :: <relative-position>\051) 115.85 411.95 T
(format\050*window*, "%= miles from ", position.distance\051;) 110.45 400.95 T
(say\050position.from-object\051;) 110.45 389.95 T
6 F
(// Calls Method 2) 421.85 389.95 T
4 F
(format\050*window*, " at heading "\051;) 110.45 378.95 T
(say\050position.angle\051;) 110.45 367.95 T
6 F
(// Calls Method 7) 421.85 367.95 T
4 F
(end;) 99.65 356.95 T
6 F
(// Method 2) 99.65 337.95 T
4 F
(def) 99.65 326.95 T
(ine method say \050physical-object :: <physical-object>\051) 115.85 326.95 T
(format\050*window*, "object at "\051;) 105.05 315.95 T
(say\050physical-object.current-position\051;) 105.05 304.95 T
6 F
(// Calls Method 3) 421.85 304.95 T
4 F
(end;) 99.65 293.95 T
6 F
(// Method 3) 99.65 274.95 T
4 F
(def) 99.65 263.95 T
(ine method say \050position :: <absolute-position>\051) 115.85 263.95 T
(say\050position.latitude\051;) 110.45 252.95 T
6 F
(// Calls Method 4) 421.85 252.95 T
4 F
(say\050position.longitude\051;) 110.45 241.95 T
6 F
(// Calls Method 5) 421.85 241.95 T
4 F
(end;) 99.65 230.95 T
6 F
(// Method 4) 99.65 211.95 T
4 F
(def) 99.65 200.95 T
(ine method say \050latitude :: <latitude>\051) 115.85 200.95 T
(next-method\050\051;) 110.45 189.95 T
6 F
(// Calls Method 6) 421.85 189.95 T
4 F
(format\050*window*, " latitude\134n"\051;) 110.45 178.95 T
(end;) 99.65 167.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "69" 71
%%Page: "70" 72
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(70) 63.65 702.62 T
0 9.5 Q
(5.6 Use of a relative position) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
6 9 Q
0 X
(// Method 5) 99.65 666.95 T
4 F
(def) 99.65 655.95 T
(ine method say \050longitude :: <longitude>\051) 115.85 655.95 T
(next-method\050\051;) 110.45 644.95 T
6 F
(// Calls Method 6) 421.85 644.95 T
4 F
(format\050*window*, " longitude\134n"\051;) 110.45 633.95 T
(end;) 99.65 622.95 T
6 F
(// Method 6) 99.65 603.95 T
4 F
(def) 99.65 592.95 T
(ine method say \050angle :: <directed-angle>\051) 115.85 592.95 T
(let\050degrees, minutes, seconds\051 = decode-total-seconds\050angle\051;) 110.45 581.95 T
(format\050*window*, "%d degrees %d minutes %d seconds %s",) 110.45 570.95 T
(degrees, minutes, seconds, angle.direction\051;) 148.25 559.95 T
(end;) 99.65 548.95 T
6 F
(// Method 7) 99.65 529.95 T
4 F
(def) 99.65 518.95 T
(ine method say \050angle :: <angle>\051) 115.85 518.95 T
(let\050degrees\051 = decode-total-seconds\050angle\051;) 110.45 507.95 T
(format\050*window*, "%d degrees", degrees\051;) 110.45 496.95 T
(end;) 99.65 485.95 T
1 11 Q
(It is important to understand that the annotation of the sequence of methods) 99.65 465.62 T
-0.15 (called is tr) 99.65 451.62 P
-0.15 (ue for this particular ar) 149.33 451.62 P
-0.15 (gument,) 260.94 451.62 P
4 9.5 Q
-0.31 (*her-relative-position*) 304.01 451.62 P
1 11 Q
-0.15 (, and the set) 435.11 451.62 P
-0.43 (of methods de\336ned in this chapter) 99.65 437.62 P
-0.43 (. The sequence of methods can be dif) 263.55 437.62 P
-0.43 (fer) 439.05 437.62 P
-0.43 (ent if we) 452.13 437.62 P
(add methods, or r) 99.65 423.62 T
(eor) 186.45 423.62 T
(ganize classes, or call) 201.87 423.62 T
4 9.5 Q
(say) 307.59 423.62 T
1 11 Q
( with a dif) 324.69 423.62 T
(fer) 374.19 423.62 T
(ent ar) 387.27 423.62 T
(gument.) 414.92 423.62 T
3 13 Q
(5.6.2  One) 99.65 392.29 T
4 F
(<relative-position>) 152.99 392.29 T
3 F
( instance relative to another) 301.19 392.29 T
1 11 Q
(The variable) 99.65 372.62 T
4 9.5 Q
(*her-relative-position*) 162.88 372.62 T
1 11 Q
( contains a r) 293.98 372.62 T
(elative position that is r) 352.52 372.62 T
(ela-) 466.52 372.62 T
(tive to an absolute position \050the value of) 99.65 358.62 T
4 9.5 Q
(*my-absolute-position*) 297.44 358.62 T
1 11 Q
(\051. However) 422.84 358.62 T
(, a) 476.62 358.62 T
-0.19 (r) 99.65 344.62 P
-0.19 (elative position can be r) 103.79 344.62 P
-0.19 (elative to another r) 218.25 344.62 P
-0.19 (elative position. How can this be? The) 309.42 344.62 P
(position of the physical object that the r) 99.65 330.62 T
(elative position is r) 290.96 330.62 T
(elative to is stor) 383.14 330.62 T
(ed in) 459.49 330.62 T
(the) 99.65 316.62 T
4 9.5 Q
(current-position) 117.65 316.62 T
1 11 Q
( slot of the) 208.85 316.62 T
4 9.5 Q
(<physical-object>) 262.24 316.62 T
1 11 Q
( class. The type of the c) 359.14 316.62 T
4 9.5 Q
(ur-) 471.11 316.62 T
(rent-position) 99.65 302.62 T
1 11 Q
( slot is) 173.75 302.62 T
4 9.5 Q
(<position>) 207.32 302.62 T
1 11 Q
(. Thus, we can stor) 264.32 302.62 T
(e a) 354.89 302.62 T
4 9.5 Q
(<relative-position>) 371.16 302.62 T
1 11 Q
( in) 479.46 302.62 T
(that slot.) 99.65 288.62 T
(W) 126.65 274.62 T
(e cr) 136.64 274.62 T
(eate a r) 153.69 274.62 T
(elative position that is r) 188.46 274.62 T
(elative to another r) 302.46 274.62 T
(elative position:) 394.2 274.62 T
4 9 Q
(def) 99.65 253.95 T
(ine variable *his-relative-position* =) 115.85 253.95 T
(make\050<relative-position>,) 110.45 242.95 T
(distance: 25,) 137.45 231.95 T
(angle: make\050<angle>, total-seconds: encode-total-seconds\05036, 0, 0\051\051,) 137.45 220.95 T
(from-object: make\050<physical-object>,) 137.45 209.95 T
(current-position: *her-relative-position*\051\051;) 234.65 198.95 T
1 11 Q
(W) 99.65 178.62 T
(e can call) 109.64 178.62 T
4 9.5 Q
(say) 156.73 178.62 T
1 11 Q
( on this r) 173.83 178.62 T
(elative position:) 216.49 178.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "70" 72
%%Page: "71" 73
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5 Cycles Through Implementation and Design) 333.89 702.62 T
2 11 Q
(71) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
5 9 Q
0 X
(?) 99.65 666.95 T
4 F
(say\050*his-relative-position*\051;) 110.45 666.95 T
5 F
(25 miles from object at 30.5 miles from object at 42 degrees 19 minutes 34) 99.65 655.95 T
(seconds North latitude) 99.65 644.95 T
(70 degrees 56 minutes 26 seconds West longitude at heading 90 degrees at) 99.65 633.95 T
(heading 36 degrees) 99.65 622.95 T
3 15 Q
(5.7  Summary) 99.65 584.95 T
1 11 Q
(This chapter cover) 99.65 564.62 T
(ed:) 189.28 564.62 T
(\245) 108.65 544.62 T
(W) 126.65 544.62 T
(e started to implement the initial design, discover) 136.64 544.62 T
(ed opportunities for) 377.16 544.62 T
(mor) 126.65 530.62 T
(e sharing, and r) 146.51 530.62 T
(edesigned the pr) 222.18 530.62 T
(ogram.) 303.33 530.62 T
(\245) 108.65 510.62 T
(W) 126.65 510.62 T
(e de\336ned certain classes and methods r) 136.64 510.62 T
(elated to time, position, and phys-) 326.61 510.62 T
(ical objects.Running H/F 4) 126.65 496.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "71" 73
%%Page: "72" 74
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(72) 63.65 702.62 T
0 9.5 Q
(5.7 Summary) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "72" 74
%%Page: "73" 75
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(73) 292.15 135.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(6) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(6) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Mor) 100.65 591.4 T
(e on Methods) 156.72 591.4 T
99.65 159.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(In this chapter) 99.65 449.62 T
(, we \336rst show how to de\336ne new methods on built-in functions) 168.89 449.62 T
(such as +. W) 99.65 435.62 T
(e then describe multimethods, the dif) 160.05 435.62 T
(fer) 341.25 435.62 T
(ent kinds of parameters that) 354.33 435.62 T
(can be used in methods, the techniques of declaring and r) 99.65 421.62 T
(eturning values, the) 379.09 421.62 T
(r) 99.65 407.62 T
(ules for method parameter congr) 103.9 407.62 T
(uence, the identity of a method, and the tech-) 264.19 407.62 T
(nique of de\336ning methods on types that ar) 99.65 393.62 T
(e not classes.) 306.73 393.62 T
3 15 Q
(6.1  Methods for the) 99.65 353.95 T
4 13 Q
(+) 219.26 353.95 T
3 15 Q
( generic function) 227.06 353.95 T
1 11 Q
-0.2 (W) 99.65 333.62 P
-0.2 (e need to be able to add one time to another) 109.64 333.62 P
-0.2 (. W) 319.3 333.62 P
-0.2 (e can de\336ne new methods on the) 334.58 333.62 P
(generic function) 99.65 319.62 T
4 9.5 Q
(+) 181.41 319.62 T
1 11 Q
(, which is pr) 187.11 319.62 T
(ovided by Dylan. W) 246.8 319.62 T
(e can extend) 343.85 319.62 T
4 9.5 Q
(+) 407.08 319.62 T
1 11 Q
( by adding new) 412.78 319.62 T
-0.16 (methods on it. In certain languages, this technique is called) 99.65 305.62 P
2 F
-0.16 (operator overloading) 387.62 305.62 P
1 F
-0.16 (.) 492.9 305.62 P
3 13 Q
(6.1.1  Method for adding two time-offsets) 99.65 274.29 T
1 11 Q
-0.29 (W) 99.65 254.62 P
-0.29 (e de\336ne a method for) 109.64 254.62 P
4 9.5 Q
-0.61 (+) 214.71 254.62 P
1 11 Q
-0.29 (. The method adds two time-of) 220.41 254.62 P
-0.29 (fsets and r) 368.83 254.62 P
-0.29 (eturns the sum,) 418.36 254.62 P
(which is also a time-of) 99.65 240.62 T
(fset:) 208.35 240.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "73" 75
%%Page: "74" 76
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(74) 63.65 702.62 T
0 9.5 Q
(6.1 Methods for the + generic function) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
6 9 Q
0 X
(// Method 1) 99.65 666.95 T
4 F
(def) 99.65 655.95 T
(ine method \134+ \050offset1 :: <time-offset>, offset2 :: <time-offset>\051) 115.85 655.95 T
6 F
(// 1) 492.05 655.95 T
4 F
(let s1 = if\050offset1.past?\051 negative else identity end;) 110.45 644.95 T
6 F
(// 2) 492.05 644.95 T
4 F
(let t1 = offset1.total-seconds;) 110.45 633.95 T
6 F
(// 3) 492.05 633.95 T
4 F
(let s2 = if\050offset2.past?\051 negative else identity end;) 110.45 622.95 T
6 F
(// 4) 492.05 622.95 T
4 F
(let t2 = offset2.total-seconds;) 110.45 611.95 T
6 F
(// 5) 492.05 611.95 T
4 F
(make\050<time-offset>, total-seconds: s1\050t1\051 + s2\050t2\051\051;) 110.45 600.95 T
6 F
(// 6) 492.05 600.95 T
4 F
(end;) 99.65 589.95 T
6 F
(// 7) 492.05 589.95 T
1 11 Q
(On line 1, note that the method is de\336ned on) 99.65 569.62 T
4 9.5 Q
(\134+) 319.12 569.62 T
1 11 Q
(, not simply) 330.52 569.62 T
4 9.5 Q
(+) 391.02 569.62 T
1 11 Q
(. When we de\336ne a) 396.72 569.62 T
-0.19 (method on) 99.65 555.62 P
4 9.5 Q
-0.39 (+) 154.88 555.62 P
1 11 Q
-0.19 ( or another in\336x operator) 160.58 555.62 P
-0.19 (, we need to use a backslash befor) 281.48 555.62 P
-0.19 (e the oper-) 444.1 555.62 P
(ator) 99.65 541.62 T
(. The backslash clari\336es that we mean the value of the variable + \050which is a) 118.27 541.62 T
(generic function\051, and we ar) 99.65 527.62 T
(e not trying to call the function.) 236.04 527.62 T
(In this method, we must take car) 126.65 513.62 T
(e to consider that if the) 285.6 513.62 T
4 9.5 Q
(past?) 399.65 513.62 T
1 11 Q
( slot is tr) 428.15 513.62 T
(ue,) 469.56 513.62 T
(then the) 99.65 499.62 T
4 9.5 Q
(<time-offset>) 142.06 499.62 T
1 11 Q
( r) 216.16 499.62 T
(epr) 223.06 499.62 T
(esents a negative number of seconds. W) 239.09 499.62 T
(e use the) 431.96 499.62 T
(Dylan functions) 99.65 485.62 T
4 9.5 Q
(negative) 180.32 485.62 T
1 11 Q
( \050r) 225.92 485.62 T
(eturns the additive inverse of a number\051 and) 236.48 485.62 T
4 9.5 Q
(iden-) 456.32 485.62 T
-0.44 (tity) 99.65 471.62 P
1 11 Q
-0.21 ( \050r) 122.45 471.62 P
-0.21 (eturns the object that is its ar) 132.8 471.62 P
-0.21 (gument\051. Also, we use the technique of assign-) 270.62 471.62 P
(ing a function to a local variable.) 99.65 457.62 T
-0.24 (On line 2, we assign a function to the local variable) 126.65 443.62 P
4 9.5 Q
-0.5 (s1) 373.83 443.62 P
1 11 Q
-0.24 (. The function is either) 385.23 443.62 P
4 9.5 Q
-0.23 (negative) 99.65 429.62 P
1 11 Q
-0.11 ( or) 145.25 429.62 P
4 9.5 Q
-0.23 (identity) 160.87 429.62 P
1 11 Q
-0.11 (. If the) 205.25 429.62 P
4 9.5 Q
-0.23 (past?) 238.54 429.62 P
1 11 Q
-0.11 ( slot of the \336rst ar) 267.04 429.62 P
-0.11 (gument is tr) 351.5 429.62 P
-0.11 (ue, we assign the) 410.2 429.62 P
-0.08 (value) 99.65 415.62 P
4 9.5 Q
-0.17 (negative) 129.13 415.62 P
1 11 Q
-0.08 ( to) 174.73 415.62 P
4 9.5 Q
-0.17 (s1) 189.66 415.62 P
1 11 Q
-0.08 (, otherwise we assign the value) 201.06 415.62 P
4 9.5 Q
-0.17 (identity) 354.79 415.62 P
1 11 Q
-0.08 ( to) 400.39 415.62 P
4 9.5 Q
-0.17 (s1) 415.31 415.62 P
1 11 Q
-0.08 (. Similarly) 426.71 415.62 P
-0.08 (, on) 475.16 415.62 P
(line 4 we assign either) 99.65 401.62 T
4 9.5 Q
(negative) 210.03 401.62 T
1 11 Q
( or) 255.63 401.62 T
4 9.5 Q
(identity) 271.48 401.62 T
1 11 Q
( to) 317.08 401.62 T
4 9.5 Q
(s2) 332.18 401.62 T
1 11 Q
(, based on the value of the) 343.58 401.62 T
4 9.5 Q
(past?) 99.65 387.62 T
1 11 Q
( slot of the second ar) 128.15 387.62 T
(gument.) 227.87 387.62 T
(On line 6, we make and r) 126.65 373.62 T
(eturn a new instance of) 248.33 373.62 T
4 9.5 Q
(<time-offset>) 364.24 373.62 T
1 11 Q
(. W) 438.34 373.62 T
(e initial-) 453.83 373.62 T
(ize the) 99.65 359.62 T
4 9.5 Q
(total-seconds) 134.38 359.62 T
1 11 Q
( slot to contain the sum of the) 208.48 359.62 T
4 9.5 Q
(total-seconds) 354.7 359.62 T
1 11 Q
( slots, taking) 428.8 359.62 T
(car) 99.65 345.62 T
(e to add the negative of each) 114.18 345.62 T
4 9.5 Q
(total-seconds) 255.77 345.62 T
1 11 Q
( slot if the) 329.87 345.62 T
4 9.5 Q
(past?) 380.45 345.62 T
1 11 Q
( slot is tr) 408.95 345.62 T
(ue for) 450.36 345.62 T
(that instance.) 99.65 331.62 T
(T) 126.65 317.62 T
(o test the method, we need to cr) 132.38 317.62 T
(eate two instances of) 287.17 317.62 T
4 9.5 Q
(<time-offset>) 390.8 317.62 T
1 11 Q
(:) 464.9 317.62 T
5 9 Q
(?) 99.65 296.95 T
4 F
( def) 105.05 296.95 T
(ine variable *minus-2-hours* =) 126.65 296.95 T
(make\050<time-offset>, total-seconds: encode-total-seconds \0502, 0, 0\051,) 121.25 285.95 T
(past?: #t\051;) 229.25 274.95 T
5 F
(?) 99.65 255.95 T
4 F
( def) 105.05 255.95 T
(ine variable *15-20-45* =) 126.65 255.95 T
(make\050<time-offset>, total-seconds: encode-total-seconds \05015, 20, 45\051,) 121.25 244.95 T
(past?: #f\051;) 229.25 233.95 T
1 11 Q
(W) 99.65 213.62 T
(e can add the time-of) 109.64 213.62 T
(fsets:) 211.79 213.62 T
5 9 Q
(?) 99.65 192.95 T
4 F
( *minus-2-hours* + *15-20-45*;) 105.05 192.95 T
5 F
({instance of <TIME-OFFSET>}) 99.65 181.95 T
531.65 230.95 533.65 302.95 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "74" 76
%%Page: "75" 77
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(6 More on Methods) 435.96 702.62 T
2 11 Q
(75) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(The r) 99.65 665.62 T
(esult is a new instance of) 124.96 665.62 T
4 9.5 Q
(<time-offset>) 248.6 665.62 T
1 11 Q
(. W) 322.7 665.62 T
(e did not save the value) 338.19 665.62 T
(r) 99.65 651.62 T
(eturned. \050Many envir) 103.79 651.62 T
(onments of) 207.59 651.62 T
(fer a way to access values r) 261.85 651.62 T
(eturned by the lis-) 393.01 651.62 T
(tener) 99.65 637.62 T
(.\051 W) 123.71 637.62 T
(e can add the time-of) 142.86 637.62 T
(fsets again, and view the) 245.01 637.62 T
4 9.5 Q
(total-seconds) 367.82 637.62 T
1 11 Q
( slot of the) 441.92 637.62 T
(r) 99.65 623.62 T
(esult:) 103.79 623.62 T
5 9 Q
(?) 99.65 602.95 T
4 F
( decode-total-seconds \050*minus-2-hours* + *15-20-45*\051;) 105.05 602.95 T
5 F
(13) 99.65 591.95 T
(20) 99.65 580.95 T
(45) 99.65 569.95 T
3 13 Q
(6.1.2  Methods for adding time-of-day to time-offset) 99.65 540.29 T
1 11 Q
(These methods implement addition between a time-of) 99.65 520.62 T
(fset and a time-of-day:) 362.61 520.62 T
6 9 Q
(// Method 2) 99.65 499.95 T
4 F
(def) 99.65 488.95 T
(ine method \134+ \050offset :: <time-offset>, time-of-day :: <time-of-day>\051) 115.85 488.95 T
(let s1 = if\050offset.past?\051 negative else identity end;) 110.45 477.95 T
(let t1 = offset.total-seconds;) 110.45 466.95 T
(let t2 = time-of-day.total-seconds;) 110.45 455.95 T
(make\050<time-of-day>, total-seconds: s1\050t1\051 + t2\051;) 110.45 444.95 T
(end;) 99.65 433.95 T
1 11 Q
-0.19 (Method 2 is invoked when the \336rst ar) 99.65 413.62 P
-0.19 (gument is a time-of) 280.66 413.62 P
-0.19 (fset and the second ar) 374.33 413.62 P
-0.19 (gu-) 479.23 413.62 P
(ment is a time-of-day) 99.65 399.62 T
(. It does all the work.) 202.11 399.62 T
6 9 Q
(// Method 3) 99.65 378.95 T
4 F
(def) 99.65 367.95 T
(ine method \134+ \050time-of-day :: <time-of-day>, offset :: <time-offset>\051) 115.85 367.95 T
(offset + time-of-day;) 110.45 356.95 T
(end;) 99.65 345.95 T
1 11 Q
(Method 3 is invoked when the \336rst ar) 99.65 325.62 T
(gument is a time-of-day and the second) 281.98 325.62 T
(ar) 99.65 311.62 T
(gument is a time-of) 109.29 311.62 T
(fset. It simply calls) 203.53 311.62 T
4 9.5 Q
(+) 296.71 311.62 T
1 11 Q
( with the or) 302.41 311.62 T
(der of the ar) 358.44 311.62 T
(guments) 417.59 311.62 T
(switched \321 this call invokes method 2.) 99.65 297.62 T
(T) 126.65 283.62 T
(o test these methods, we can use one of the time of) 132.38 283.62 T
(fsets cr) 377.68 283.62 T
(eated in Section) 411.31 283.62 T
(6.1.1, and the) 99.65 269.62 T
4 9.5 Q
(*your-time-of-day*) 166.53 269.62 T
1 11 Q
( variable, which contains a) 269.13 269.62 T
4 9.5 Q
(<time-of-day>) 401.15 269.62 T
1 11 Q
(instance, and was de\336ned as follows:) 99.65 255.62 T
5 9 Q
(?) 99.65 234.95 T
4 F
( def) 105.05 234.95 T
(ine variable *your-time-of-day* =) 126.65 234.95 T
(make\050<time-of-day>, total-seconds: encode-total-seconds \0508, 30, 59\051\051;) 121.25 223.95 T
1 11 Q
(W) 99.65 203.62 T
(e add the time-of) 109.64 203.62 T
(fset and the time-of-day:) 192.26 203.62 T
531.65 220.95 533.65 240.95 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "75" 77
%%Page: "76" 78
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(76) 63.65 702.62 T
0 9.5 Q
(6.2 Multimethods) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
5 9 Q
0 X
(?) 99.65 666.95 T
4 F
( decode-total-seconds \050*minus-2-hours* + *your-time-of-day*\051;) 105.05 666.95 T
5 F
(6) 99.65 655.95 T
(30) 99.65 644.95 T
(59) 99.65 633.95 T
1 11 Q
(W) 99.65 613.62 T
(e add the time-of-day and the time-of) 109.64 613.62 T
(fset:) 291.49 613.62 T
5 9 Q
(?) 99.65 592.95 T
4 F
( decode-total-seconds \050*your-time-of-day* + *minus-2-hours*\051;) 105.05 592.95 T
5 F
(6) 99.65 581.95 T
(30) 99.65 570.95 T
(59) 99.65 559.95 T
3 15 Q
(6.2  Multimethods) 99.65 521.95 T
1 11 Q
(A method is) 99.65 501.62 T
2 F
(specialized) 162.02 501.62 T
1 F
( on the r) 218.22 501.62 T
(equir) 258.28 501.62 T
(ed parameters that have types. A) 283.69 501.62 T
2 F
(multime-) 446.99 501.62 T
(thod) 99.65 487.62 T
1 F
( is a method that specializes mor) 122.87 487.62 T
(e than one of its parameters. Methods 1, 2,) 281.33 487.62 T
(and 3 \050de\336ned in Section 6.1\051 ar) 99.65 473.62 T
(e specialized on their two r) 252.76 473.62 T
(equir) 383.92 473.62 T
(ed parameters,) 409.33 473.62 T
(and ther) 99.65 459.62 T
(efor) 140.43 459.62 T
(e ar) 159.51 459.62 T
(e multimethods.) 177.18 459.62 T
(The method dispatch considers all the specialized parameters:) 126.65 445.62 T
2 F
(Step 1.) 126.65 431.62 T
1 F
( Finding applicable methods: A method is applicable if each ar) 160.25 431.62 T
(gu-) 463.83 431.62 T
(ment is an instance of the type of the corr) 99.65 417.62 T
(esponding parameter of the method.) 299.86 417.62 T
2 F
(Step 2.) 126.65 403.62 T
1 F
( Sorting applicable methods by speci\336city: The parameter lists of the) 160.25 403.62 T
(methods ar) 99.65 389.62 T
(e compar) 154.41 389.62 T
(ed. The \336rst specialized parameter is mor) 199.29 389.62 T
(e signi\336cant than) 400.08 389.62 T
(the second, which is mor) 99.65 375.62 T
(e signi\336cant than the thir) 220.4 375.62 T
(d, and so on. Starting with the) 341.76 375.62 T
-0.45 (\336rst specialized parameter) 99.65 361.62 P
-0.45 (, compar) 226.84 361.62 P
-0.45 (e the types of the parameters of the methods. If) 268.75 361.62 P
(one type is a subtype of the other) 99.65 347.62 T
(, the method whose parameter is of the subtype) 260.2 347.62 T
(is mor) 99.65 333.62 T
(e speci\336c than the other method.) 130.13 333.62 T
(T) 126.65 319.62 T
(o illustrate, we start by de\336ning one mor) 132.38 319.62 T
(e method, to make the example) 330.2 319.62 T
(mor) 99.65 305.62 T
(e inter) 119.51 305.62 T
(esting:) 150.14 305.62 T
6 9 Q
(// Method 4) 99.65 284.95 T
4 F
(def) 99.65 273.95 T
(ine method \134+ \050time1 :: <time>, time2 :: <time>\051) 115.85 273.95 T
(format\050*window*, "Sorry, we can\325t add those kinds of time"\051;) 110.45 262.95 T
(end;) 99.65 251.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "76" 78
%%Page: "77" 79
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(6 More on Methods) 435.96 702.62 T
2 11 Q
(77) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(W) 99.65 665.62 T
(e show the types of the specialized parameters of these four methods.) 109.64 665.62 T
(W) 99.65 497.63 T
(e call) 109.64 497.63 T
4 9.5 Q
(+) 137.19 497.63 T
1 11 Q
( on two instances of) 142.89 497.63 T
4 9.5 Q
(<time-offset>) 242.06 497.63 T
1 11 Q
(:) 316.16 497.63 T
5 9 Q
(?) 99.65 476.96 T
4 F
( *minus-2-hours* + *15-20-45*;) 105.05 476.96 T
5 F
({instance of <TIME-OFFSET>}) 99.65 465.96 T
1 11 Q
-0.14 (Methods 1 and 4 ar) 99.65 445.63 P
-0.14 (e applicable. Method 1 is mor) 192.41 445.63 P
-0.14 (e speci\336c than method 4 because) 335.16 445.63 P
-0.29 (when comparing the types of the \336rst parameters,) 99.65 431.63 P
4 9.5 Q
-0.61 (<time-offset>) 342.55 431.63 P
1 11 Q
-0.29 ( is mor) 416.65 431.63 P
-0.29 (e speci\336c) 449.3 431.63 P
(than) 99.65 417.63 T
4 9.5 Q
(<time>) 124.29 417.63 T
1 11 Q
(. Ther) 158.49 417.63 T
(e is no need to compar) 186.55 417.63 T
(e the types of the second parameters.) 295.95 417.63 T
3 15 Q
(6.3  Required, rest, and keyword parameters) 99.65 377.96 T
1 11 Q
(Methods can have r) 99.65 357.63 T
(equir) 195.27 357.63 T
(ed parameters and optional parameters. Requir) 220.68 357.63 T
(ed) 450.67 357.63 T
(parameters may be specialized, but optional parameters may not. Ther) 99.65 343.63 T
(e ar) 442.9 343.63 T
(e two) 460.57 343.63 T
(kinds of optional parameters: r) 99.65 329.63 T
(est parameters, and keywor) 249.63 329.63 T
(d parameters.) 384.4 329.63 T
3 13 Q
(6.3.1  Required parameters) 99.65 298.29 T
1 11 Q
(Requir) 99.65 278.63 T
(ed parameters appear befor) 132.41 278.63 T
(e any r) 266.45 278.63 T
(est or keywor) 299.39 278.63 T
(d parameters. Requir) 365.58 278.63 T
(ed) 468.11 278.63 T
(parameters ar) 99.65 264.63 T
(e or) 166.85 264.63 T
(der) 185.02 264.63 T
(ed, and the r) 201.16 264.63 T
(equir) 262.17 264.63 T
(ed ar) 287.58 264.63 T
(guments must be given in or) 311.97 264.63 T
(der) 451.01 264.63 T
(.) 466.53 264.63 T
3 13 Q
(6.3.2  Rest parameters) 99.65 233.29 T
1 11 Q
(Rest parameters enable a method to accept any number of optional ar) 99.65 213.63 T
(guments.) 437.11 213.63 T
(Any ar) 99.65 199.63 T
(guments pr) 133.12 199.63 T
(ovided in the call after the r) 189.01 199.63 T
(equir) 323.06 199.63 T
(ed ar) 348.47 199.63 T
(guments ar) 372.86 199.63 T
(e collected in) 427.64 199.63 T
-0.13 (a sequence, which is the value of the r) 99.65 185.63 P
-0.13 (est parameter) 282.47 185.63 P
-0.13 (. Rest parameters appear after) 347.94 185.63 P
4 9.5 Q
(#rest) 99.65 171.63 T
1 11 Q
( in the parameter list.) 128.15 171.63 T
0 0 0 1 0 0 0 K
99.65 630.96 513.65 638.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(T) 139.73 642.62 T
(able 6.1  T) 145.46 642.62 T
(ypes of the specialized parameters of these + methods) 193.27 642.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Method) 142.84 611.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 221.38 611.63 T
(ype of \336rst parameter) 227.13 611.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 344.51 611.63 T
(ype of second parameter) 350.26 611.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(method 1) 142.84 590.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time-offset>) 221.38 591.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-offset>) 344.51 591.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(method 2) 142.84 569.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time-offset>) 221.38 570.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-of-day>) 344.51 570.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(method 3) 142.84 548.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time-of-day>) 221.38 549.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-offset>) 344.51 549.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(method 4) 142.84 527.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time>) 221.38 528.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time>) 344.51 528.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
215.38 624.96 215.38 519.96 2 L
V
0.5 H
0 Z
N
338.51 624.96 338.51 519.96 2 L
V
N
136.84 603.96 476.46 603.96 2 L
V
N
136.84 582.96 476.46 582.96 2 L
V
N
136.84 561.96 476.46 561.96 2 L
V
N
136.84 540.96 476.46 540.96 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "77" 79
%%Page: "78" 80
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(78) 63.65 702.62 T
0 9.5 Q
(6.3 Required, rest, and keyword parameters) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(For example, we de\336ne a method called) 126.65 665.62 T
4 9.5 Q
(sum) 323.09 665.62 T
1 11 Q
(:) 340.19 665.62 T
6 9 Q
(// sum any number of values) 99.65 644.95 T
(// more-values contains any arguments that follow the f) 99.65 633.95 T
(irst) 396.65 633.95 T
4 F
(def) 99.65 622.95 T
(ine method sum \050value, #rest more-values\051) 115.85 622.95 T
6 F
( // if only one value, that is the answer) 105.05 611.95 T
4 F
(  if \050empty?\050more-values\051\051) 99.65 600.95 T
(    value;) 99.65 589.95 T
6 F
( // otherwise add the f) 105.05 578.95 T
(irst value to the sum of the rest) 229.25 578.95 T
4 F
(  else) 99.65 567.95 T
(    value + apply\050sum, more-values\051;) 99.65 556.95 T
(  end;) 99.65 545.95 T
(end;) 99.65 534.95 T
1 11 Q
(W) 99.65 514.62 T
(e can call) 109.64 514.62 T
4 9.5 Q
(sum) 156.73 514.62 T
1 11 Q
( with one or mor) 173.83 514.62 T
(e ar) 255.08 514.62 T
(guments:) 272.75 514.62 T
5 9 Q
(?) 99.65 493.95 T
4 F
(sum\0503\051;) 110.45 493.95 T
5 F
(3) 99.65 482.95 T
(?) 99.65 463.95 T
4 F
(sum\0501, 2, 3, 4, 5\051;) 110.45 463.95 T
5 F
(15) 99.65 452.95 T
3 13 Q
(6.3.3  Keyword parameters) 99.65 322.29 T
1 11 Q
(Keywor) 99.65 302.62 T
(d parameters enable a method to accept optional ar) 138.35 302.62 T
(guments that ar) 387.28 302.62 T
(e) 463.88 302.62 T
(keyed to a name. The caller of the generic function can supply the keywor) 99.65 288.62 T
(d ar) 458.33 288.62 T
(gu-) 477.44 288.62 T
-0.08 (ments in any or) 99.65 274.62 P
-0.08 (der) 175.08 274.62 P
-0.08 (, although keywor) 190.6 274.62 P
-0.08 (d ar) 279.38 274.62 P
-0.08 (guments must follow any r) 298.42 274.62 P
-0.08 (equir) 429.51 274.62 P
-0.08 (ed ar) 454.92 274.62 P
-0.08 (gu-) 479.24 274.62 P
(ments. Using keywor) 99.65 260.62 T
(d ar) 203.3 260.62 T
(guments can be particularly useful for functions that) 222.42 260.62 T
(take a lot of ar) 99.65 246.62 T
(guments \321 when calling the function, you do not need to r) 168.73 246.62 T
(emem-) 455.77 246.62 T
(ber the or) 99.65 232.62 T
(der of the ar) 146.26 232.62 T
(guments.) 205.41 232.62 T
(Keywor) 126.65 218.62 T
(d parameters appear after) 165.35 218.62 T
4 9.5 Q
(#key) 294.07 218.62 T
1 11 Q
( in the parameter list. For example,) 316.87 218.62 T
-0.14 (we can write a method similar to) 99.65 204.62 P
4 9.5 Q
-0.3 (encode-total-seconds) 261.31 204.62 P
1 11 Q
-0.14 ( that uses keywor) 375.31 204.62 P
-0.14 (d ar) 460.26 204.62 P
-0.14 (gu-) 479.24 204.62 P
(ments instead of r) 99.65 190.62 T
(equir) 186.69 190.62 T
(ed ar) 212.1 190.62 T
(guments:) 236.49 190.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Quick summary of apply) 132.65 412.62 T
1 F
(:) 258.22 412.62 T
4 9.5 Q
(apply) 263.72 412.62 T
0 11 Q
(function) 294.97 412.62 T
4 9.5 Q
(#rest) 335.21 412.62 T
0 11 Q
( ar) 363.71 412.62 T
(gs) 375.43 412.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(apply) 132.65 398.62 T
1 11 Q
( calls the) 161.15 398.62 T
0 F
(function) 206.1 398.62 T
1 F
( with the given) 243.59 398.62 T
0 F
(ar) 319.42 398.62 T
(gs) 328.38 398.62 T
1 F
(. The last) 338.16 398.62 T
0 F
(ar) 384.52 398.62 T
(g) 393.49 398.62 T
1 F
( must be a) 398.99 398.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sequence. The elements of the sequence ar) 132.65 384.62 T
(e pr) 337.36 384.62 T
(ovided as separate ar) 356.14 384.62 T
(gu-) 459.07 384.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ments to the) 132.65 370.62 T
0 F
(function) 195.38 370.62 T
1 F
(.) 232.87 370.62 T
4 9.5 Q
(apply) 238.37 370.62 T
1 11 Q
( r) 266.87 370.62 T
(eturns the values of) 273.77 370.62 T
0 F
(function) 372.07 370.62 T
1 F
(.) 409.56 370.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 425.83 126.65 363.08 2 L
V
0.25 H
0 Z
N
477.65 425.83 477.65 363.08 2 L
V
N
126.52 425.95 477.77 425.95 2 L
V
N
126.52 362.95 477.77 362.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "78" 80
%%Page: "79" 81
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(6 More on Methods) 435.96 702.62 T
2 11 Q
(79) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
6 9 Q
0 X
(// convert days, hours, minutes, seconds to seconds) 99.65 666.95 T
(// named \050keyword\051 arguments are optional) 99.65 655.95 T
4 F
(def) 99.65 644.95 T
(ine method convert-to-seconds \050#key days = 0, hours = 0,) 115.85 644.95 T
(minutes = 0, seconds = 0\051) 283.25 633.95 T
(  \050\050days * 24 + hours\051 * 60 + minutes\051 * 60 + seconds;) 99.65 622.95 T
(end;) 99.65 611.95 T
1 11 Q
(W) 99.65 591.62 T
(e can call) 109.64 591.62 T
4 9.5 Q
(convert-to-seconds) 156.73 591.62 T
1 11 Q
(:) 259.33 591.62 T
5 9 Q
(?) 99.65 570.95 T
4 F
(convert-to-seconds\050minutes: 3, seconds: 9\051;) 110.45 570.95 T
5 F
(189) 99.65 559.95 T
(?) 99.65 540.95 T
4 F
(convert-to-seconds\050hours: 2, days: 1\051;) 110.45 540.95 T
5 F
(93600) 99.65 529.95 T
1 11 Q
(As shown in the pr) 99.65 509.62 T
(eceding calls, keywor) 192.14 509.62 T
(d ar) 296.53 509.62 T
(guments consist of a keywor) 315.64 509.62 T
(d fol-) 454.43 509.62 T
(lowed by a value. A keywor) 99.65 495.62 T
(d is a symbol such as) 236.42 495.62 T
4 9.5 Q
(minutes) 341.54 495.62 T
1 11 Q
( and) 381.44 495.62 T
4 9.5 Q
(seconds) 405.56 495.62 T
1 11 Q
(.) 445.46 495.62 T
(In this example, we used the) 126.65 481.62 T
4 9.5 Q
(=) 268.09 481.62 T
1 11 Q
( to give a default initial value to each key-) 273.79 481.62 T
(wor) 99.65 467.62 T
(d. If one of these keywor) 118.97 467.62 T
(d ar) 238.93 467.62 T
(guments is not pr) 258.05 467.62 T
(ovided in the call to) 343.3 467.62 T
4 9.5 Q
(convert-) 442.42 467.62 T
(to-seconds) 99.65 453.62 T
1 11 Q
(, its value is the default initial value.) 156.65 453.62 T
-0.3 (A method can specify that it accepts all keywor) 126.65 439.62 P
-0.3 (ds by using) 353.65 439.62 P
4 9.5 Q
-0.63 (#all-keys) 411.59 439.62 P
1 11 Q
-0.3 ( as the) 462.89 439.62 P
(last element in the parameter list.) 99.65 425.62 T
3 15 Q
(6.4  Return values) 99.65 385.95 T
1 11 Q
-0.1 (A method can r) 99.65 365.62 P
-0.1 (eturn zer) 174.79 365.62 P
-0.1 (o, one, or multiple values. A method r) 218.59 365.62 P
-0.1 (eturns the value\050s\051) 402.73 365.62 P
-0.32 (of the last statement executed in its body) 99.65 351.62 P
-0.32 (. Returning a single value is easy) 294.21 351.62 P
-0.32 (. The last) 450.23 351.62 P
(statement executed in the body simply r) 99.65 337.62 T
(eturns the single value.) 294.47 337.62 T
3 13 Q
(6.4.1  No values) 99.65 306.29 T
1 11 Q
-0.34 (T) 99.65 286.62 P
-0.34 (o r) 105.38 286.62 P
-0.34 (eturn no values, the last statement executed in the body r) 117.95 286.62 P
-0.34 (eturns no values. For) 391.98 286.62 P
-0.41 (example, method 4 r) 99.65 272.62 P
-0.41 (eturns no values because the last statement is a call to) 198 272.62 P
4 9.5 Q
-0.85 (format) 456.36 272.62 P
1 11 Q
-0.41 (,) 490.56 272.62 P
(which r) 99.65 258.62 T
(eturns no values:) 136.61 258.62 T
6 9 Q
(// Method 4, original version which returns no values) 99.65 237.95 T
4 F
(def) 99.65 226.95 T
(ine method \134+ \050time1 :: <time>, time2 :: <time>\051) 115.85 226.95 T
(format\050*window*, "Sorry, we can\325t add those kinds of time"\051;) 110.45 215.95 T
(end;) 99.65 204.95 T
1 11 Q
-0.33 (Suppose for a moment that) 99.65 184.62 P
4 9.5 Q
-0.68 (format) 232.61 184.62 P
1 11 Q
-0.33 ( did r) 266.81 184.62 P
-0.33 (eturn a value and we wanted this method) 292.44 184.62 P
(to r) 99.65 170.62 T
(eturn no values. W) 116.14 170.62 T
(e can call) 207.25 170.62 T
4 9.5 Q
(values) 254.34 170.62 T
1 11 Q
( with no ar) 288.54 170.62 T
(guments to r) 341.21 170.62 T
(eturn no values:) 402.83 170.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "79" 81
%%Page: "80" 82
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(80) 63.65 702.62 T
0 9.5 Q
(6.4 Return values) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
6 9 Q
0 X
(// Method 4, revised to return no values explicitly) 99.65 666.95 T
4 F
(def) 99.65 655.95 T
(ine method \134+ \050time1 :: <time>, time2 :: <time>\051) 115.85 655.95 T
(format\050*window*, "Sorry, we can\325t add those kinds of time"\051;) 110.45 644.95 T
(values\050\051;) 110.45 633.95 T
(end;) 99.65 622.95 T
3 13 Q
(6.4.2  Multiple values) 99.65 593.29 T
1 11 Q
(W) 99.65 573.62 T
(e call) 109.64 573.62 T
4 9.5 Q
(values) 137.19 573.62 T
1 11 Q
( with multiple ar) 171.39 573.62 T
(guments to r) 253.07 573.62 T
(eturn multiple values:) 314.69 573.62 T
4 9 Q
(def) 99.65 552.95 T
(ine method decode-total-seconds \050total-seconds :: <integer>\051) 115.85 552.95 T
(let \050total-minutes, seconds\051 = truncate/ \050total-seconds, 60\051;) 110.45 541.95 T
(let \050hours, minutes\051 = truncate/ \050total-minutes, 60\051;) 110.45 530.95 T
(values \050hours, minutes, seconds\051;) 110.45 519.95 T
(end;) 99.65 508.95 T
3 13 Q
(6.4.3  Declarations of the return values) 99.65 479.29 T
1 11 Q
-0.16 (Sometimes it is helpful to document, or declar) 99.65 459.62 P
-0.16 (e, the values r) 322.24 459.62 P
-0.16 (eturned by a method.) 388.92 459.62 P
(Specifying r) 99.65 445.62 T
(eturn values enables the compiler to check r) 157.78 445.62 T
(eceivers of the r) 370.92 445.62 T
(esults of) 447.36 445.62 T
(the method for corr) 99.65 431.62 T
(ect type, and also impr) 194.25 431.62 T
(oves the ef) 304.98 431.62 T
(\336ciency of the code gener-) 356.63 431.62 T
(ated.) 99.65 417.62 T
(W) 126.65 403.62 T
(e can declar) 136.64 403.62 T
(e the values just after the parameter list, beginning with the) 193.91 403.62 T
(characters) 99.65 389.62 T
4 9.5 Q
(=>) 151.78 389.62 T
1 11 Q
(, as shown in the following method, on line 2:) 163.18 389.62 T
6 9 Q
(// Method 1, revised to declare its value) 99.65 368.95 T
4 F
(def) 99.65 357.95 T
(ine method \134+ \050offset1 :: <time-offset>, offset2 :: <time-offset>\051) 115.85 357.95 T
6 F
(// 1) 492.05 357.95 T
4 F
(=> sum :: <time-offset>;) 110.45 346.95 T
6 F
(// 2) 492.05 346.95 T
4 F
(let s1 = if\050offset1.past?\051 negative else identity end;) 110.45 335.95 T
6 F
(// 3) 492.05 335.95 T
4 F
(let t1 = offset1.total-seconds;) 110.45 324.95 T
6 F
(// 4) 492.05 324.95 T
4 F
(let s2 = if\050offset2.past?\051 negative else identity end;) 110.45 313.95 T
6 F
(// 5) 492.05 313.95 T
4 F
(let t2 = offset2.total-seconds;) 110.45 302.95 T
6 F
(// 6) 492.05 302.95 T
4 F
(make\050<time-offset>, total-seconds: s1\050t1\051 + s2\050t2\051\051;) 110.45 291.95 T
6 F
(// 7) 492.05 291.95 T
4 F
(end;) 99.65 280.95 T
6 F
(// 8) 492.05 280.95 T
1 11 Q
(On line 2, the value r) 99.65 260.62 T
(eturned is named) 200.99 260.62 T
4 9.5 Q
(sum) 288.94 260.62 T
1 11 Q
(, and its type is) 306.04 260.62 T
4 9.5 Q
(<time-offset>) 382.06 260.62 T
1 11 Q
(. The) 456.16 260.62 T
(name of the value is pur) 99.65 246.62 T
(ely for documentation.) 217.28 246.62 T
(T) 126.65 232.62 T
(o declar) 132.38 232.62 T
(e multiple values, we separate them by commas and enclose them) 170.86 232.62 T
(in par) 99.65 218.62 T
(entheses:) 128.26 218.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "80" 82
%%Page: "81" 83
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(6 More on Methods) 435.96 702.62 T
2 11 Q
(81) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
6 9 Q
0 X
(// decode-total-seconds method, revised to declare its values) 99.65 666.95 T
4 F
(def) 99.65 655.95 T
(ine method decode-total-seconds \050total-seconds :: <integer>\051) 115.85 655.95 T
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051;) 110.45 644.95 T
(let \050total-minutes, seconds\051 = truncate/ \050total-seconds, 60\051;) 110.45 633.95 T
(let \050hours, minutes\051 = truncate/ \050total-minutes, 60\051;) 110.45 622.95 T
(values \050hours, minutes, seconds\051;) 110.45 611.95 T
(end;) 99.65 600.95 T
3 15 Q
(6.5  Method parameter congruence) 99.65 562.95 T
1 11 Q
(A generic function and all its methods must have congr) 99.65 542.62 T
(uent parameter lists. This) 369.2 542.62 T
(means that:) 99.65 528.62 T
(\245) 108.65 508.62 T
(The parameter lists must have the same number of r) 126.65 508.62 T
(equir) 379.91 508.62 T
(ed ar) 405.32 508.62 T
(guments.) 429.71 508.62 T
(\245) 108.65 488.62 T
(If one parameter list uses) 126.65 488.62 T
4 9.5 Q
(#key) 251.46 488.62 T
1 11 Q
( or) 274.27 488.62 T
4 9.5 Q
(#rest) 290.12 488.62 T
1 11 Q
(, then all must.) 318.62 488.62 T
(\245) 108.65 468.62 T
(If one parameter list uses) 126.65 468.62 T
4 9.5 Q
(#rest) 251.46 468.62 T
1 11 Q
( but not) 279.96 468.62 T
4 9.5 Q
(#key) 320.51 468.62 T
1 11 Q
(, then all must.) 342.09 468.62 T
(\245) 108.65 448.62 T
(If one parameter list uses neither) 126.65 448.62 T
4 9.5 Q
(#rest) 288.69 448.62 T
1 11 Q
( ar) 317.19 448.62 T
(guments nor) 329.59 448.62 T
4 9.5 Q
(#key) 394.22 448.62 T
1 11 Q
( ar) 417.02 448.62 T
(guments,) 429.42 448.62 T
(then all must not.) 126.65 434.62 T
(\245) 108.65 414.62 T
(If a method uses) 126.65 414.62 T
4 9.5 Q
(#all-keys) 209.45 414.62 T
1 11 Q
(, then the generic function must use) 260.74 414.62 T
4 9.5 Q
(#all-keys) 437.09 414.62 T
1 11 Q
(.) 488.39 414.62 T
(\245) 108.65 394.62 T
(If the generic function specializes a parameter) 126.65 394.62 T
(, then each method must spe-) 348.83 394.62 T
(cialize that parameter with a subtype of the type in the generic function.) 126.65 380.62 T
(This r) 126.65 366.62 T
(ule enables a generic function to state the types of ar) 154.66 366.62 T
(guments for) 408.43 366.62 T
(which it is intended.) 126.65 352.62 T
(\245) 108.65 332.62 T
(If the generic function speci\336es keywor) 126.65 332.62 T
(d parameters, then all methods) 317.33 332.62 T
(must accept those keywor) 126.65 318.62 T
(ds.) 252.98 318.62 T
-0.11 (The value declarations of a generic function and its methods must also be congr) 99.65 298.62 P
-0.11 (u-) 485.35 298.62 P
(ent. The r) 99.65 284.62 T
(ules for congr) 145.83 284.62 T
(uency of value declarations ar) 212.77 284.62 T
(e not given in this book.) 358.49 284.62 T
3 15 Q
(6.6  Identity of methods) 99.65 244.95 T
1 11 Q
-0.08 (A method is identi\336ed by the name of the generic function and by the types of all) 99.65 224.62 P
-0.32 (its r) 99.65 210.62 P
-0.32 (equir) 117.68 210.62 P
-0.32 (ed parameters. When you evaluate or compile a method de\336nition, ther) 143.09 210.62 P
-0.32 (e) 487.95 210.62 P
(ar) 99.65 196.62 T
(e two possible outcomes:) 109.29 196.62 T
(\245) 108.65 176.62 T
(The method is added to the generic function.) 126.65 176.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "81" 83
%%Page: "82" 84
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(82) 63.65 702.62 T
0 9.5 Q
(6.7 Methods for types that are not classes) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(When you de\336ne method A, if that generic function has no method whose) 126.65 665.62 T
-0.29 (r) 126.65 651.62 P
-0.29 (equir) 130.79 651.62 P
-0.29 (ed parameters ar) 156.21 651.62 P
-0.29 (e of the same types as in method A, then method A is) 237.56 651.62 P
(added to the generic function.) 126.65 637.62 T
(\245) 108.65 617.62 T
(The method r) 126.65 617.62 T
(eplaces a method pr) 192.41 617.62 T
(eviously de\336ned.) 290.01 617.62 T
(When you de\336ne method A, if that generic function has a method B whose) 126.65 597.62 T
(r) 126.65 583.62 T
(equir) 130.79 583.62 T
(ed parameters ar) 156.21 583.62 T
(e of the same types as in method A, then method A) 238.14 583.62 T
(r) 126.65 569.62 T
(eplaces method B.) 130.79 569.62 T
3 15 Q
(6.7  Methods for types that are not classes) 99.65 529.95 T
1 11 Q
(Note that every class is a type, but not every type is a class. Ther) 99.65 509.62 T
(e ar) 411.73 509.62 T
(e thr) 429.39 509.62 T
(ee func-) 451.55 509.62 T
(tions that cr) 99.65 495.62 T
(eate types that ar) 157.11 495.62 T
(e not classes:) 239.95 495.62 T
4 9.5 Q
(singleton) 305.06 495.62 T
1 11 Q
(,) 356.36 495.62 T
4 9.5 Q
(union) 361.86 495.62 T
1 11 Q
(, and) 390.36 495.62 T
4 9.5 Q
(limited) 417.23 495.62 T
1 11 Q
(.) 457.14 495.62 T
4 9.5 Q
(singleton) 126.65 469.62 T
1 11 Q
(T) 207.65 469.62 T
(akes any particular instance, and cr) 213.38 469.62 T
(eates a type whose) 384.81 469.62 T
(only member is that instance. The purpose of a singleton) 207.65 455.62 T
(type is to be used for a method that should be chosen for a) 207.65 441.62 T
(particular instance.) 207.65 427.62 T
4 9.5 Q
(union) 126.65 401.62 T
1 11 Q
(T) 207.65 401.62 T
(akes one or mor) 213.38 401.62 T
(e classes or types and cr) 291.07 401.62 T
(eates a new type) 407.19 401.62 T
(whose members ar) 207.65 387.62 T
(e all the members of the classes and) 299.37 387.62 T
-0.06 (types that ar) 207.65 373.62 P
-0.06 (e its ar) 267.99 373.62 P
-0.06 (guments. Y) 299.73 373.62 P
-0.06 (ou can use) 353.88 373.62 P
4 9.5 Q
-0.13 (union) 407.93 373.62 P
1 11 Q
-0.06 ( to combine) 436.43 373.62 P
-0.14 (one or mor) 207.65 359.62 P
-0.14 (e types \050note that you cannot combine non-class) 260.76 359.62 P
(types using multiple inheritance\051. One example is to com-) 207.65 345.62 T
(bine a singleton type of) 207.65 331.62 T
4 9.5 Q
(#f) 323.95 331.62 T
1 11 Q
( and a class such as) 335.35 331.62 T
4 9.5 Q
(<integer>) 431.63 331.62 T
1 11 Q
-0.15 (into a new type that has as members) 207.65 317.62 P
4 9.5 Q
-0.31 (#f) 386.45 317.62 P
1 11 Q
-0.15 ( and all the integers.) 397.85 317.62 P
4 9.5 Q
(limited) 126.65 291.62 T
1 11 Q
(T) 207.65 291.62 T
(akes a type and cr) 213.38 291.62 T
(eates a new type, which is a mor) 300.66 291.62 T
(e) 458.17 291.62 T
-0.26 (r) 207.65 277.62 P
-0.26 (estricted version of the type that is its ar) 211.79 277.62 P
-0.26 (gument. For exam-) 403.91 277.62 P
(ple, you can de\336ne a new type that is an array of integers.) 207.65 263.62 T
-0.24 (The main r) 207.65 249.62 P
-0.24 (easons for de\336ning types with) 260.04 249.62 P
4 9.5 Q
-0.5 (limited) 408.48 249.62 P
1 11 Q
-0.24 ( ar) 448.38 249.62 P
-0.24 (e to do) 460.53 249.62 P
(type-checking and to incr) 207.65 235.62 T
(ease ef) 331.27 235.62 T
(\336ciency) 363.45 235.62 T
(.) 399.64 235.62 T
3 15 Q
(6.8  Summary) 99.65 195.95 T
1 11 Q
(This chapter cover) 99.65 175.62 T
(ed:) 189.28 175.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "82" 84
%%Page: "83" 85
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(6 More on Methods) 435.96 702.62 T
2 11 Q
(83) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(\245) 108.65 665.62 T
(W) 126.65 665.62 T
(e de\336ned new methods on the built-in function +.) 136.64 665.62 T
(\245) 108.65 645.62 T
(W) 126.65 645.62 T
(e discussed how method dispatch works for multimethods.) 136.64 645.62 T
(\245) 108.65 625.62 T
(W) 126.65 625.62 T
(e discussed r) 136.64 625.62 T
(equir) 198.97 625.62 T
(ed, r) 224.38 625.62 T
(est, and keywor) 246.02 625.62 T
(d ar) 323.24 625.62 T
(guments.) 342.36 625.62 T
(\245) 108.65 605.62 T
-0.04 (W) 126.65 605.62 P
-0.04 (e showed how to declar) 136.64 605.62 P
-0.04 (e and r) 251.9 605.62 P
-0.04 (eturn no values, a single value, or multiple) 285.37 605.62 P
(values.) 126.65 591.62 T
(\245) 108.65 571.62 T
(W) 126.65 571.62 T
(e discussed method parameter congr) 136.64 571.62 T
(uence.) 315.83 571.62 T
(\245) 108.65 551.62 T
(W) 126.65 551.62 T
(e de\336ned the identity of a method.) 136.64 551.62 T
(\245) 108.65 531.62 T
(W) 126.65 531.62 T
(e discussed the technique of de\336ning methods on types that ar) 136.64 531.62 T
(e not) 440.06 531.62 T
(classes.) 126.65 517.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "83" 85
%%Page: "84" 86
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(84) 63.65 702.62 T
0 9.5 Q
(6.8 Summary) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "84" 86
%%Page: "85" 87
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(85) 292.15 135.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(7) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(7) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Mor) 100.65 591.4 T
(e on Slots) 156.72 591.4 T
99.65 159.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(In this chapter) 99.65 449.62 T
(, we give mor) 168.89 449.62 T
(e information about classes and slots. W) 235 449.62 T
(e discuss get-) 428.93 449.62 T
(ters and setters, virtual slots, techniques for initializing slots, and the dif) 99.65 435.62 T
(fer) 449.4 435.62 T
(ent) 462.48 435.62 T
(kinds of allocations for slots. W) 99.65 421.62 T
(e de\336ne the) 251.2 421.62 T
4 9.5 Q
(<vehicle>) 310.29 421.62 T
1 11 Q
( class.) 361.59 421.62 T
3 15 Q
(7.1  Getters and setters for slots) 99.65 381.95 T
1 11 Q
(As alr) 99.65 361.62 T
(eady shown, when you de\336ne a class, Dylan automatically de\336nes a getter) 128.47 361.62 T
(method to r) 99.65 347.62 T
(eturn the value of a slot, and it de\336nes a setter method to change the) 156.58 347.62 T
(value of a slot.) 99.65 333.62 T
3 13 Q
(7.1.1  Syntaxes for calling a getter) 99.65 302.29 T
1 11 Q
-0.11 (The name of the getter is always the same as the name of the slot. Dylan supports) 99.65 282.62 P
(two syntaxes for calling a getter) 99.65 268.62 T
(. The following two expr) 253.42 268.62 T
(essions ar) 373.02 268.62 T
(e equivalent:) 420.29 268.62 T
4 9 Q
(*my-absolute-time*.total-seconds;) 99.65 247.95 T
(total-seconds\050*my-absolute-time*\051;) 99.65 228.95 T
1 11 Q
(The pr) 99.65 208.62 T
(eceding expr) 131.57 208.62 T
(essions ar) 193.88 208.62 T
(e calls to the getter function named) 241.15 208.62 T
4 9.5 Q
(total-seconds) 414.52 208.62 T
1 11 Q
(.) 488.62 208.62 T
(The choice of which syntax to use is pur) 99.65 194.62 T
(ely a matter of personal style. The \336rst) 293.8 194.62 T
(syntax is pr) 99.65 180.62 T
(ovided for those who pr) 155.71 180.62 T
(efer the slightly mor) 273.13 180.62 T
(e concise dot syntax. The) 371.54 180.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "85" 87
%%Page: "86" 88
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(86) 63.65 702.62 T
0 9.5 Q
(7.1 Getters and setters for slots) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(second syntax is pr) 99.65 665.62 T
(ovided for those who pr) 192.41 665.62 T
(efer slot accesses to look like function) 309.83 665.62 T
(calls. In this book, we use the dot syntax.) 99.65 651.62 T
3 13 Q
(7.1.2  Syntaxes for calling a setter) 99.65 513.29 T
1 11 Q
-0.43 (By default, the name of the setter is the slot\325s name followed by) 99.65 493.62 P
4 9.5 Q
-0.89 (-setter) 404.4 493.62 P
1 11 Q
-0.43 (. Thus, the) 443.48 493.62 P
(setter for the) 99.65 479.62 T
4 9.5 Q
(total-seconds) 163.89 479.62 T
1 11 Q
( slot is) 237.99 479.62 T
4 9.5 Q
(total-seconds-setter) 271.56 479.62 T
1 11 Q
(. However) 384.75 479.62 T
(, you can) 434.86 479.62 T
-0.34 (invoke the setter by using assignment with the name of the getter) 99.65 465.62 P
-0.34 (. Dylan supports) 412.83 465.62 P
(thr) 99.65 451.62 T
(ee syntaxes for calling a setter) 113.78 451.62 T
(. The following thr) 257.87 451.62 T
(ee expr) 348.39 451.62 T
(essions ar) 383.38 451.62 T
(e equivalent:) 430.65 451.62 T
4 9 Q
(*my-absolute-time*.total-seconds := 180;) 99.65 430.95 T
(total-seconds\050*my-absolute-time*\051 := 180;) 99.65 411.95 T
(total-seconds-setter\050180, *my-absolute-time*\051;) 99.65 392.95 T
1 11 Q
(Each of these expr) 99.65 372.62 T
(essions stor) 187.97 372.62 T
(e the value) 243.99 372.62 T
4 9.5 Q
(180) 299.58 372.62 T
1 11 Q
( in the slot named) 316.68 372.62 T
4 9.5 Q
(total-seconds) 406.36 372.62 T
1 11 Q
( of) 480.46 372.62 T
(the object that is the value of the) 99.65 358.62 T
4 9.5 Q
(*my-absolute-time*) 259.25 358.62 T
1 11 Q
( variable. In the \336rst two) 361.85 358.62 T
(syntaxes, we use the assignment operator) 99.65 344.62 T
(,) 300.66 344.62 T
4 9.5 Q
(:=) 306.16 344.62 T
1 11 Q
(, with the name of the getter) 317.56 344.62 T
(.) 453.6 344.62 T
(In the thir) 126.65 330.62 T
(d syntax, we use the name of the setter explicitly \321) 174.85 330.62 T
4 9.5 Q
(total-sec-) 427.26 330.62 T
(onds-setter) 99.65 316.62 T
1 11 Q
(. The \336rst and second syntaxes ar) 161.53 316.62 T
(e translated into calls to the thir) 322.54 316.62 T
(d) 475.91 316.62 T
(syntax.) 99.65 302.62 T
3 13 Q
(7.1.3  The setter: slot option) 99.65 271.29 T
1 11 Q
-0.05 (W) 99.65 251.62 P
-0.05 (e can use the) 109.64 251.62 P
4 9.5 Q
-0.1 (setter:) 174.31 251.62 P
1 11 Q
-0.05 ( slot option to de\336ne a slot to be r) 214.21 251.62 P
-0.05 (ead-only \050to have no set-) 375.74 251.62 P
-0.18 (ter\051, or to change the name of the setter) 99.65 237.62 P
-0.18 (. Her) 287.31 237.62 P
-0.18 (e we r) 311.2 237.62 P
-0.18 (ede\336ne the) 340.2 237.62 P
4 9.5 Q
-0.37 (<physical-object>) 396.18 237.62 P
1 11 Q
(class to use the) 99.65 223.62 T
4 9.5 Q
(setter:) 174.98 223.62 T
1 11 Q
( slot option:) 214.88 223.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Performance note:) 132.65 617.62 T
1 F
( For slot accesses, given accurate type declarations,) 223.71 617.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the compiler can typically optimize away not only the method dis-) 132.65 603.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(patch, but also the function call, making the executed code just as ef) 132.65 589.62 T
(\336-) 461.47 589.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cient as in a language such as C wher) 132.65 575.62 T
(e str) 313.53 575.62 T
(uctur) 334.06 575.62 T
(e or r) 359.94 575.62 T
(ecor) 385.21 575.62 T
(d slots ar) 405.51 575.62 T
(e) 449.5 575.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(accessed dir) 132.65 561.62 T
(ectly) 191.32 561.62 T
(.) 213.16 561.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 630.83 126.65 554.08 2 L
V
0.25 H
0 Z
N
477.65 630.83 477.65 554.08 2 L
V
N
126.52 630.95 477.77 630.95 2 L
V
N
126.52 553.95 477.77 553.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "86" 88
%%Page: "87" 89
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7 More on Slots) 450.2 702.62 T
2 11 Q
(87) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine class <physical-object> \050<object>\051) 115.85 666.95 T
(slot current-position :: <position>,) 110.45 655.95 T
(init-keyword: current-position:,) 245.45 644.95 T
(setter: change-position;) 245.45 633.95 T
(slot physical-size) 110.45 622.95 T
(:: <size>;) 229.25 622.95 T
(end;) 99.65 611.95 T
1 11 Q
(W) 99.65 591.62 T
(e use the) 109.64 591.62 T
4 9.5 Q
(setter:) 154.98 591.62 T
1 11 Q
( slot option to de\336ne the name of the setter function of the) 194.88 591.62 T
4 9.5 Q
(current-position) 99.65 577.62 T
1 11 Q
( slot to be) 190.85 577.62 T
4 9.5 Q
(change-position) 240.25 577.62 T
1 11 Q
(. A slot\325s setter generic function) 325.75 577.62 T
(takes two ar) 99.65 563.62 T
(guments: the value to stor) 158.7 563.62 T
(e, and the instance to modify) 284.9 563.62 T
(. W) 424.25 563.62 T
(e can now) 439.73 563.62 T
(change the position of a physical object using the) 99.65 549.62 T
4 9.5 Q
(change-position) 340.33 549.62 T
1 11 Q
( function:) 425.83 549.62 T
5 9 Q
(?) 99.65 528.95 T
4 F
( def) 105.05 528.95 T
(ine variable *you* = make\050<physical-object>\051;) 126.65 528.95 T
5 F
(?) 99.65 509.95 T
4 F
( change-position\050*my-absolute-position*, *you*\051;) 105.05 509.95 T
5 F
({Instance of <absolute-position>}) 99.65 498.95 T
(?) 99.65 479.95 T
4 F
( say\050*you*\051;) 105.05 479.95 T
5 F
(object at 42 degrees 19 minutes 34 seconds North latitude) 99.65 468.95 T
(70 degrees 56 minutes 26 seconds West longitude) 99.65 457.95 T
1 11 Q
(Note that, when you change the name of the setter function to something other) 99.65 437.62 T
(than the default \050which is) 99.65 423.62 T
0 F
(slot-name) 226.71 423.62 T
1 F
(-) 270.09 423.62 T
4 9.5 Q
(setter) 273.76 423.62 T
1 11 Q
(\051, you cannot use assignment on the) 307.96 423.62 T
-0.42 (getter of the slot. This technique can be useful to help contr) 99.65 409.62 P
-0.42 (ol write access to a slot.) 381.71 409.62 P
3 13 Q
(7.1.4  Advantages of accessing slots via generic functions) 99.65 378.29 T
1 11 Q
-0.35 (A slot is conceptually a variable, in that it has a value. But the only way to access a) 99.65 358.62 P
(slot\325s value is to call a generic function. Using generic functions and methods to) 99.65 344.62 T
(gain access to slot values has thr) 99.65 330.62 T
(ee important advantages:) 256.46 330.62 T
(\245) 108.65 310.62 T
(Generic functions pr) 126.65 310.62 T
(ovide a public interface to the private implementation) 226.11 310.62 T
(of a slot. By making the r) 126.65 296.62 T
(epr) 247.81 296.62 T
(esentation of the slot visible only to the meth-) 263.84 296.62 T
(ods of the generic functions, you can change the r) 126.65 282.62 T
(epr) 366.91 282.62 T
(esentation without) 382.94 282.62 T
(changing any of the users of the information \321 the callers of the generic) 126.65 268.62 T
-0.15 (functions. In most cases a compiler can optimize slot r) 126.65 254.62 P
-0.15 (efer) 387.53 254.62 P
-0.15 (ences to r) 405.88 254.62 P
-0.15 (educe or) 451.31 254.62 P
(eliminate the cost of hiding the implementation.) 126.65 240.62 T
(\245) 108.65 220.62 T
(A subclass can specialize, or \336lter) 126.65 220.62 T
(, r) 288.68 220.62 T
(efer) 298.33 220.62 T
(ences to super) 316.67 220.62 T
(class slots. For exam-) 385.58 220.62 T
(ple, the classes) 126.65 206.62 T
4 9.5 Q
(<latitude>) 200.83 206.62 T
1 11 Q
( and) 257.83 206.62 T
4 9.5 Q
(<longitude>) 281.95 206.62 T
1 11 Q
( inherit the) 344.65 206.62 T
4 9.5 Q
(direction) 400.57 206.62 T
1 11 Q
( slot) 451.87 206.62 T
(fr) 126.65 192.62 T
(om their super) 134.46 192.62 T
(class) 205.8 192.62 T
4 9.5 Q
(<directed-angle>) 231.47 192.62 T
1 11 Q
(. In Section 7.2, we show how to) 322.67 192.62 T
(pr) 126.65 178.62 T
(ovide a setter method for the dir) 137.41 178.62 T
(ection slot of) 294.57 178.62 T
4 9.5 Q
(<latitude>) 359.3 178.62 T
1 11 Q
( that ensur) 416.3 178.62 T
(es) 467.99 178.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "87" 89
%%Page: "88" 90
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(88) 63.65 702.62 T
0 9.5 Q
(7.2 Virtual slots) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(that the value is North or South, and a setter method for the dir) 126.65 665.62 T
(ection slot) 434.27 665.62 T
(of) 126.65 651.62 T
4 9.5 Q
(<longitude>) 139.07 651.62 T
1 11 Q
( that ensur) 201.77 651.62 T
(es that the value is East or W) 253.46 651.62 T
(est.) 392.46 651.62 T
(\245) 108.65 631.62 T
(A slot access can involve arbitrary computation. For example, a slot can be) 126.65 631.62 T
2 F
(virtual) 126.65 617.62 T
1 F
(.) 160.25 617.62 T
3 15 Q
(7.2  V) 99.65 577.95 T
(irtual slots) 131.58 577.95 T
1 11 Q
-0.21 (W) 99.65 557.62 P
-0.21 (e want to ensur) 109.64 557.62 P
-0.21 (e that the value of the) 183.9 557.62 P
4 9.5 Q
-0.43 (direction) 290.49 557.62 P
1 11 Q
-0.21 ( slot is North or South for) 341.79 557.62 P
4 9.5 Q
-0.43 (<lat-) 467.15 557.62 P
(itude>) 99.65 543.62 T
1 11 Q
(, and East or W) 133.85 543.62 T
(est for) 207.03 543.62 T
4 9.5 Q
(<longitude>) 240.06 543.62 T
1 11 Q
(. T) 302.76 543.62 T
(o do this checking, we must:) 313.99 543.62 T
(\245) 108.65 523.62 T
(Check the value when the setter method is invoked. In this section, we) 126.65 523.62 T
(show how to do this using a virtual slot. W) 126.65 509.62 T
(e also show how to use symbols) 334.79 509.62 T
(instead of strings to r) 126.65 495.62 T
(epr) 229.38 495.62 T
(esent North, South, East, and W) 245.4 495.62 T
(est.) 399.56 495.62 T
(\245) 108.65 475.62 T
(Check the value of the) 126.65 475.62 T
4 9.5 Q
(direction) 237.87 475.62 T
1 11 Q
( slot when an instance is cr) 289.17 475.62 T
(eated and ini-) 419.08 475.62 T
(tialized. W) 126.65 461.62 T
(e do that checking in Section 7.3.) 178.32 461.62 T
(W) 99.65 441.62 T
(e r) 109.64 441.62 T
(ede\336ne the) 121.8 441.62 T
4 9.5 Q
(<directed-angle>) 178.14 441.62 T
1 11 Q
( class to include a virtual slot and an or) 269.34 441.62 T
(dinary) 459.23 441.62 T
(slot:) 99.65 427.62 T
4 9 Q
(def) 99.65 406.95 T
(ine class <directed-angle> \050<sixty-unit>\051) 115.85 406.95 T
(virtual slot direction) 110.45 395.95 T
( :: <symbol>;) 234.65 395.95 T
(slot internal-direction :: <symbol>;) 110.45 384.95 T
(end;) 99.65 373.95 T
1 11 Q
-0.26 (W) 99.65 353.62 P
-0.26 (e de\336ne the slot) 109.64 353.62 P
4 9.5 Q
-0.55 (direction) 187.88 353.62 P
1 11 Q
-0.26 ( with the) 239.18 353.62 P
4 9.5 Q
-0.55 (virtual) 284.26 353.62 P
2 11 Q
-0.26 (slot allocation) 326.65 353.62 P
1 F
-0.26 (. Note that the slot\325s) 396.95 353.62 P
(allocation appears befor) 99.65 339.62 T
(e the name of the slot \050as contrasted with slot options,) 216.3 339.62 T
(which appear after the name of the slot\051.) 99.65 325.62 T
-0.23 (A virtual slot does not occupy storage; instead, its value is computed. When) 126.65 311.62 P
-0.21 (you de\336ne a virtual slot, you need to de\336ne a getter method to r) 99.65 297.62 P
-0.21 (eturn the value of) 407.52 297.62 P
(the virtual slot, and you can optionally de\336ne a setter method to set the value of) 99.65 283.62 T
(the virtual slot.) 99.65 269.62 T
-0.28 (In the) 126.65 255.62 P
4 9.5 Q
-0.58 (<directed-angle>) 156.96 255.62 P
1 11 Q
-0.28 ( class, we use the slot) 248.16 255.62 P
4 9.5 Q
-0.58 (internal-direction) 352.37 255.62 P
1 11 Q
-0.28 ( to stor) 454.97 255.62 P
-0.28 (e) 487.91 255.62 P
(the dir) 99.65 241.62 T
(ection. W) 131.72 241.62 T
(e shall pr) 176.56 241.62 T
(ovide methods that use the virtual slot) 221.05 241.62 T
4 9.5 Q
(direction) 411.11 241.62 T
1 11 Q
( to) 462.41 241.62 T
(check the validity of the value of the dir) 99.65 227.62 T
(ection befor) 292.94 227.62 T
(e storing the value in the) 350.21 227.62 T
4 9.5 Q
(internal-direction) 99.65 213.62 T
1 11 Q
( slot.) 202.25 213.62 T
(V) 126.65 199.62 T
(irtual slots ar) 133.99 199.62 T
(e useful when ther) 197.72 199.62 T
(e is information conceptually associated) 287.95 199.62 T
(with an object that is better computed than stor) 99.65 185.62 T
(ed in an or) 329.11 185.62 T
(dinary slot. By using a) 381.01 185.62 T
(virtual slot instead of writing a method, you make the information appear like a) 99.65 171.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "88" 90
%%Page: "89" 91
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7 More on Slots) 450.2 702.62 T
2 11 Q
(89) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(slot to the callers of the getter) 99.65 665.62 T
(. The information appears like a slot because the) 241.8 665.62 T
-0.3 (caller cannot distinguish the getter of a virtual fr) 99.65 651.62 P
-0.3 (om a getter of an or) 332.32 651.62 P
-0.3 (dinary slot. In) 425.69 651.62 P
-0.38 (both cases, the getter takes a single r) 99.65 637.62 P
-0.38 (equir) 273.14 637.62 P
-0.38 (ed ar) 298.55 637.62 P
-0.38 (gument, the instance, and it r) 322.56 637.62 P
-0.38 (eturns) 462.37 637.62 P
(a single value.) 99.65 623.62 T
3 13 Q
(7.2.1  Symbols) 99.65 592.29 T
1 11 Q
(In the) 99.65 572.62 T
4 9.5 Q
(<directed-angle>) 130.51 572.62 T
1 11 Q
( class, we de\336ne the type of the two slots as) 221.71 572.62 T
4 9.5 Q
(<symbol>) 435.2 572.62 T
1 11 Q
(,) 480.8 572.62 T
(instead of) 99.65 558.62 T
4 9.5 Q
(<string>) 150.16 558.62 T
1 11 Q
(, which we used in pr) 195.76 558.62 T
(evious versions of this class. If we use) 300.41 558.62 T
(strings, when checking whether the dir) 99.65 544.62 T
(ection slot of a latitude is) 289.42 544.62 T
4 9.5 Q
("North") 413.46 544.62 T
1 11 Q
( or) 453.36 544.62 T
4 9.5 Q
("South") 99.65 530.62 T
1 11 Q
(, we would have to worry about upper) 139.55 530.62 T
(case versus lower) 327.77 530.62 T
(case. For exam-) 413.17 530.62 T
(ple, we would have to decide whether each of these wer) 99.65 516.62 T
(e valid values:) 372.15 516.62 T
4 9.5 Q
("north") 444.74 516.62 T
1 11 Q
(,) 484.64 516.62 T
4 9.5 Q
("NORTH") 99.65 502.62 T
1 11 Q
(,) 139.55 502.62 T
4 9.5 Q
("North") 145.05 502.62 T
1 11 Q
(,) 184.95 502.62 T
4 9.5 Q
("NOrth") 190.45 502.62 T
1 11 Q
(, and so on.) 230.35 502.62 T
(W) 126.65 488.62 T
(e simplify that decision by using the) 136.64 488.62 T
4 9.5 Q
(<symbol>) 315.42 488.62 T
1 11 Q
( type instead of) 361.02 488.62 T
4 9.5 Q
(<string>) 438.61 488.62 T
1 11 Q
(.) 484.21 488.62 T
(Symbols ar) 99.65 474.62 T
(e much like strings. The r) 153.6 474.62 T
(eason for using them her) 276.33 474.62 T
(e is that symbol) 396.99 474.62 T
(comparison is not case-sensitive. For mor) 99.65 460.62 T
(e information, see Section 9.3.10, page) 300.12 460.62 T
(137.) 99.65 446.62 T
(Ther) 126.65 432.62 T
(e ar) 149.21 432.62 T
(e two equivalent syntaxes for r) 166.88 432.62 T
(eferring to symbols:) 316.13 432.62 T
(\245) 108.65 412.62 T
4 9.5 Q
(north:) 126.65 412.62 T
1 11 Q
( and) 160.85 412.62 T
4 9.5 Q
(south:) 184.97 412.62 T
1 11 Q
( ar) 219.17 412.62 T
(e examples of using the keywor) 231.57 412.62 T
(d syntax.) 385.26 412.62 T
(\245) 108.65 392.62 T
4 9.5 Q
(#"north") 126.65 392.62 T
1 11 Q
( and) 172.25 392.62 T
4 9.5 Q
(#"south") 196.37 392.62 T
1 11 Q
( ar) 241.97 392.62 T
(e examples of using the hash syntax.) 254.37 392.62 T
3 13 Q
(7.2.2  Getter and setter methods for a virtual slot) 99.65 361.29 T
1 11 Q
(Her) 99.65 341.62 T
(e is the getter method for the virtual slot) 118.22 341.62 T
4 9.5 Q
(direction) 316.63 341.62 T
1 11 Q
(:) 367.93 341.62 T
6 9 Q
(// Method 1) 99.65 320.95 T
4 F
(def) 99.65 309.95 T
(ine method direction \050angle :: <directed-angle>\051) 115.85 309.95 T
(angle.internal-direction;) 110.45 298.95 T
(end;) 99.65 287.95 T
1 11 Q
(Her) 99.65 267.62 T
(e ar) 118.22 267.62 T
(e the setter methods for the virtual slot) 135.88 267.62 T
4 9.5 Q
(direction) 326.9 267.62 T
1 11 Q
(:) 378.2 267.62 T
6 9 Q
(// Method 2) 99.65 246.95 T
4 F
(def) 99.65 235.95 T
(ine method direction-setter \050dir, angle :: <directed-angle>\051) 115.85 235.95 T
(angle.internal-direction := dir;) 110.45 224.95 T
(end;) 99.65 213.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "89" 91
%%Page: "90" 92
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(90) 63.65 702.62 T
0 9.5 Q
(7.2 Virtual slots) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
6 9 Q
0 X
(// Method 3) 99.65 666.95 T
4 F
(def) 99.65 655.95 T
(ine method direction-setter \050dir, latitude :: <latitude>\051) 115.85 655.95 T
(if \050dir == north: | dir == south:\051) 110.45 644.95 T
(next-method\050\051;) 132.05 633.95 T
(else error \050"%= is not north: or south:", dir\051;) 121.25 622.95 T
(end;) 110.45 611.95 T
(end;) 99.65 600.95 T
6 F
(// Method 4) 99.65 581.95 T
4 F
(def) 99.65 570.95 T
(ine method direction-setter \050dir, longitude :: <longitude>\051) 115.85 570.95 T
(if \050dir == east: | dir == west:\051) 110.45 559.95 T
(next-method\050\051;) 132.05 548.95 T
(else error \050"%= is not east: or west:", dir\051;) 121.25 537.95 T
(end;) 110.45 526.95 T
(end;) 99.65 515.95 T
1 11 Q
(The pr) 99.65 495.62 T
(eceding methods work as follows:) 131.57 495.62 T
(\245) 108.65 475.62 T
(When you call the getter) 126.65 475.62 T
4 9.5 Q
(direction) 248.44 475.62 T
1 11 Q
( an instance of) 299.74 475.62 T
4 9.5 Q
(<directed-angle>) 372.22 475.62 T
1 11 Q
( or) 463.42 475.62 T
(any of its subclasses, method 1 is invoked. Method 1 calls the getter) 126.65 461.62 T
4 9.5 Q
(inter-) 457.02 461.62 T
(nal-direction) 126.65 447.62 T
1 11 Q
(, and thus r) 200.75 447.62 T
(eturns the value of the) 255.8 447.62 T
4 9.5 Q
(internal-direction) 367.45 447.62 T
1 11 Q
( slot.) 470.05 447.62 T
(\245) 108.65 427.62 T
(When you call the setter) 126.65 427.62 T
4 9.5 Q
(direction-setter) 246.99 427.62 T
1 11 Q
( on a dir) 338.19 427.62 T
(ect instance of) 378.42 427.62 T
4 9.5 Q
(<lati-) 449.98 427.62 T
-0.36 (tude>) 126.65 413.62 P
1 11 Q
-0.17 (, method 3 is invoked. Method 3 checks that the dir) 155.15 413.62 P
-0.17 (ection is valid, and) 401.92 413.62 P
(if so, it calls) 126.65 399.62 T
4 9.5 Q
(next-method) 186.17 399.62 T
1 11 Q
(, which invokes method 2. Method 2 stor) 248.87 399.62 T
(es the) 447.05 399.62 T
(dir) 126.65 385.62 T
(ection in the) 140.72 385.62 T
4 9.5 Q
(internal-direction) 203.18 385.62 T
1 11 Q
( slot.) 305.77 385.62 T
(\245) 108.65 365.62 T
(When you call the setter) 126.65 365.62 T
4 9.5 Q
(direction-setter) 246.99 365.62 T
1 11 Q
( on a dir) 338.19 365.62 T
(ect instance of) 378.42 365.62 T
4 9.5 Q
(<longi-) 449.98 365.62 T
(tude>) 126.65 351.62 T
1 11 Q
(, method 4 is called. Method 4 checks that the dir) 155.15 351.62 T
(ection is valid for) 392.49 351.62 T
(longitude, and if so, it calls) 126.65 337.62 T
4 9.5 Q
(next-method) 260.18 337.62 T
1 11 Q
(, which invokes method 2. Method) 322.88 337.62 T
(2 stor) 126.65 323.62 T
(es the dir) 153.3 323.62 T
(ection in the) 198.06 323.62 T
4 9.5 Q
(internal-direction) 260.52 323.62 T
1 11 Q
( slot.) 363.12 323.62 T
(\245) 108.65 303.62 T
(When you call the setter) 126.65 303.62 T
4 9.5 Q
(direction-setter) 246.99 303.62 T
1 11 Q
( on a dir) 338.19 303.62 T
(ect instance of) 378.42 303.62 T
4 9.5 Q
(<directed-angle>) 126.65 289.62 T
1 11 Q
(, method 2 is invoked. Method 2 stor) 217.85 289.62 T
(es the dir) 395.88 289.62 T
(ection in) 440.64 289.62 T
(the) 126.65 275.62 T
4 9.5 Q
(internal-direction) 144.65 275.62 T
1 11 Q
( slot.) 247.26 275.62 T
(In these methods, we use) 99.65 255.62 T
4 9.5 Q
(dir) 224.82 255.62 T
1 11 Q
(, not) 241.1 255.62 T
4 9.5 Q
(direction) 265.35 255.62 T
1 11 Q
(, as the name of the parameter that) 316.65 255.62 T
(r) 99.65 241.62 T
(epr) 103.79 241.62 T
(esents dir) 119.82 241.62 T
(ection. Recall that) 166.49 241.62 T
4 9.5 Q
(direction) 255.32 241.62 T
1 11 Q
( is the name of a getter) 306.62 241.62 T
(. Although we) 415.65 241.62 T
(technically could use) 99.65 227.62 T
4 9.5 Q
(direction) 204.55 227.62 T
1 11 Q
( as the parameter name in these methods) 255.85 227.62 T
(\050because we do not call the getter) 99.65 213.62 T
4 9.5 Q
(direction) 264.24 213.62 T
1 11 Q
( in the bodies\051,) 315.54 213.62 T
4 9.5 Q
(direction) 389.76 213.62 T
1 11 Q
( as a) 441.06 213.62 T
(parameter name might be confusing to other people r) 99.65 199.62 T
(eading the code.) 359.33 199.62 T
(The) 126.65 185.62 T
4 9.5 Q
(error) 147.81 185.62 T
1 11 Q
( function signals an err) 176.31 185.62 T
(or) 287.5 185.62 T
(. For mor) 297.04 185.62 T
(e information about signaling) 341.62 185.62 T
(and handling err) 99.65 171.62 T
(ors, see Chapter 10.) 181.48 171.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "90" 92
%%Page: "91" 93
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7 More on Slots) 450.2 702.62 T
2 11 Q
(91) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(The) 126.65 665.62 T
4 9.5 Q
(direction-setter) 147.81 665.62 T
1 11 Q
( methods check the dir) 239.01 665.62 T
(ection when the setter is) 349.25 665.62 T
(called. In Section 7.3, we check the dir) 99.65 651.62 T
(ection when an instance is made.) 283.48 651.62 T
3 15 Q
(7.3  Initialize methods) 99.65 611.95 T
1 11 Q
-0.26 (Every time you call) 99.65 591.62 P
4 9.5 Q
-0.54 (make) 195.58 591.62 P
1 11 Q
-0.26 ( to cr) 218.38 591.62 P
-0.26 (eate an instance of a class,) 241.98 591.62 P
4 9.5 Q
-0.54 (make) 369.18 591.62 P
1 11 Q
-0.26 ( calls the) 391.98 591.62 P
4 9.5 Q
-0.54 (initialize) 436.16 591.62 P
1 11 Q
(generic function. The purpose of the) 99.65 577.62 T
4 9.5 Q
(initialize) 278.64 577.62 T
1 11 Q
( generic function is to initialize) 335.64 577.62 T
(the instance befor) 99.65 563.62 T
(e it is r) 185.48 563.62 T
(eturned by) 217.8 563.62 T
4 9.5 Q
(make) 273.72 563.62 T
1 11 Q
(. Y) 296.52 563.62 T
(ou can customize the initialization by) 308.35 563.62 T
(de\336ning a method on) 99.65 549.62 T
4 9.5 Q
(initialize) 207.02 549.62 T
1 11 Q
(.) 264.02 549.62 T
(Methods for) 126.65 535.62 T
4 9.5 Q
(initialize) 189.22 535.62 T
1 11 Q
( r) 246.22 535.62 T
(eceive the instance as the \336rst ar) 253.11 535.62 T
(gument, and) 409.2 535.62 T
(r) 99.65 521.62 T
(eceive all keywor) 103.79 521.62 T
(d ar) 188.13 521.62 T
(guments given in the call to) 207.25 521.62 T
4 9.5 Q
(make) 344.57 521.62 T
1 11 Q
(. Sometimes it is useful to) 367.37 521.62 T
-0.38 (de\336ne a keywor) 99.65 507.62 P
-0.38 (d ar) 177.04 507.62 P
-0.38 (gument to be used by an) 195.78 507.62 P
4 9.5 Q
-0.78 (initialize) 316.08 507.62 P
1 11 Q
-0.38 ( method. W) 373.08 507.62 P
-0.38 (e r) 428.27 507.62 P
-0.38 (ede\336ne the) 440.06 507.62 P
4 9.5 Q
(<directed-angle>) 99.65 493.62 T
1 11 Q
( class to include such a keywor) 190.85 493.62 T
(d:) 341.08 493.62 T
4 9 Q
(def) 99.65 472.95 T
(ine class <directed-angle> \050<sixty-unit>\051) 115.85 472.95 T
(virtual slot direction) 110.45 461.95 T
( :: <symbol>;) 234.65 461.95 T
(slot internal-direction :: <symbol>;) 110.45 450.95 T
(keyword direction:;) 110.45 439.95 T
(end;) 99.65 428.95 T
1 11 Q
(The keywor) 99.65 408.62 T
(d) 157.64 408.62 T
4 9.5 Q
(direction:) 167.11 408.62 T
1 11 Q
( happens to have the same name as the virtual slot) 224.11 408.62 T
4 9.5 Q
-0.27 (direction) 99.65 394.62 P
1 11 Q
-0.13 (. However) 150.95 394.62 P
-0.13 (, the keywor) 200.93 394.62 P
-0.13 (d is intended for use in the) 261.01 394.62 P
4 9.5 Q
-0.27 (initialize) 392.96 394.62 P
1 11 Q
-0.13 ( method,) 449.96 394.62 P
(and has no dir) 99.65 380.62 T
(ect r) 169.56 380.62 T
(elationship with the slot of the same name.) 190.2 380.62 T
(W) 126.65 366.62 T
(e de\336ne the) 136.64 366.62 T
4 9.5 Q
(initialize) 195.73 366.62 T
1 11 Q
( method:) 252.73 366.62 T
4 9 Q
(def) 99.65 345.95 T
(ine method initialize \050angle :: <directed-angle>, #key direction: dir\051) 115.85 345.95 T
6 F
(//1) 497.45 345.95 T
4 F
(next-method\050\051;) 110.45 334.95 T
6 F
(//2) 497.45 334.95 T
4 F
(angle.direction := dir;) 110.45 323.95 T
6 F
(//3) 497.45 323.95 T
4 F
(end;) 99.65 312.95 T
1 11 Q
(On line 1, the) 99.65 292.62 T
4 9.5 Q
(#key) 167.28 292.62 T
1 11 Q
( syntax in the parameter list for) 190.08 292.62 T
4 9.5 Q
(initialize) 344.93 292.62 T
1 11 Q
( indicates that) 401.93 292.62 T
4 9.5 Q
(direction) 99.65 278.62 T
1 11 Q
( is a keywor) 150.95 278.62 T
(d parameter) 209.39 278.62 T
(. This keywor) 268.19 278.62 T
(d ar) 334.27 278.62 T
(gument is supplied fr) 353.39 278.62 T
(om the) 457.95 278.62 T
(keywor) 99.65 264.62 T
(d ar) 136.48 264.62 T
(guments pr) 155.59 264.62 T
(ovided in the call to) 211.49 264.62 T
4 9.5 Q
(make) 310.61 264.62 T
1 11 Q
( for the class) 333.41 264.62 T
4 9.5 Q
(<directed-angle>) 396.59 264.62 T
1 11 Q
(,) 487.79 264.62 T
(or any of its subclasses. The local variable) 99.65 250.62 T
4 9.5 Q
(dir) 304.63 250.62 T
1 11 Q
( will be initialized to the ar) 321.73 250.62 T
(gument) 451.84 250.62 T
(pr) 99.65 236.62 T
(ovided for the) 110.41 236.62 T
4 9.5 Q
(direction:) 182.06 236.62 T
1 11 Q
( keywor) 239.06 236.62 T
(d.) 278.64 236.62 T
(On line 2, we call) 126.65 222.62 T
4 9.5 Q
(next-method) 213 222.62 T
1 11 Q
(. All methods for) 275.7 222.62 T
4 9.5 Q
(initialize) 360.78 222.62 T
1 11 Q
( should call) 417.78 222.62 T
4 9.5 Q
(next-method) 99.65 208.62 T
1 11 Q
( as their \336rst action, to allow any less speci\336c initializations \050that is,) 162.35 208.62 T
4 9.5 Q
(initialize) 99.65 194.62 T
1 11 Q
( methods de\336ned on super) 156.65 194.62 T
(classes\051 to execute \336rst. By calling) 286.78 194.62 T
4 9.5 Q
(next-) 453.31 194.62 T
-0.75 (method) 99.65 180.62 P
1 11 Q
-0.36 ( as the \336rst action, in the r) 133.85 180.62 P
-0.36 (est of the method, you can operate on an instance) 256.55 180.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "91" 93
%%Page: "92" 94
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(92) 63.65 702.62 T
0 9.5 Q
(7.4 Techniques for initializing slots) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
-0.22 (that has been pr) 99.65 665.62 P
-0.22 (operly initialized. If you for) 176.65 665.62 P
-0.22 (get to include the call to) 309.99 665.62 P
4 9.5 Q
-0.46 (next-method) 427.67 665.62 P
1 11 Q
-0.22 (,) 490.37 665.62 P
(you may get impr) 99.65 651.62 T
(operly initialized instances fr) 186.62 651.62 T
(om) 327.79 651.62 T
4 9.5 Q
(make) 346.26 651.62 T
1 11 Q
(.) 369.06 651.62 T
(Line 3 contains the r) 126.65 637.62 T
(eal action of this method; it works by calling the setter) 224.79 637.62 T
(of the) 99.65 623.62 T
4 9.5 Q
(direction) 130.07 623.62 T
1 11 Q
( slot. W) 181.37 623.62 T
(e de\336ned the methods for) 217.07 623.62 T
4 9.5 Q
(direction-setter) 344.76 623.62 T
1 11 Q
( in Section) 435.96 623.62 T
-0.08 (7.2.2. If the ar) 99.65 609.62 P
-0.08 (gument is a latitude, then method 3 is invoked to check the value. If) 164.69 609.62 P
(the ar) 99.65 595.62 T
(gument is a longitude, then method 4 is invoked to check the value.) 127.3 595.62 T
(W) 126.65 581.62 T
(e can cr) 136.64 581.62 T
(eate a new instance of) 173.22 581.62 T
4 9.5 Q
(<absolute-position>) 282.52 581.62 T
1 11 Q
(. In the following) 390.82 581.62 T
(example, we demonstrate the syntax of symbols \050) 99.65 567.62 T
4 9.5 Q
(North:) 339.37 567.62 T
1 11 Q
( and) 373.57 567.62 T
4 9.5 Q
(South:) 397.69 567.62 T
1 11 Q
(\051, and the) 431.89 567.62 T
4 9.5 Q
-0.18 (direction) 99.65 553.62 P
1 11 Q
-0.09 ( keywor) 150.95 553.62 P
-0.09 (d, which is used by the) 190.44 553.62 P
4 9.5 Q
-0.18 (initialize) 304.57 553.62 P
1 11 Q
-0.09 ( method \050and not as an init-) 361.57 553.62 P
(keywor) 99.65 539.62 T
(d\051:) 136.48 539.62 T
5 9 Q
(?) 99.65 518.95 T
4 F
(def) 110.45 518.95 T
(ine variable *my-absolute-position* =) 126.65 518.95 T
(make\050<absolute-position>,) 121.25 507.95 T
(latitude:) 148.25 496.95 T
( make\050<latitude>,) 202.25 496.95 T
(total-seconds: encode-total-seconds\05042, 19, 34\051,) 234.65 485.95 T
(direction: North:\051,) 234.65 474.95 T
(longitude: make\050<longitude>,) 148.25 463.95 T
(total-seconds: encode-total-seconds\05070, 56, 26\051,) 234.65 452.95 T
(direction: West:\051\051;) 234.65 441.95 T
1 11 Q
(The pr) 99.65 421.62 T
(eceding example works, because the values for dir) 131.57 421.62 T
(ection wer) 376.1 421.62 T
(e appr) 426.79 421.62 T
(opriate) 457.68 421.62 T
(for latitude and longitude. The following example show what happens when the) 99.65 407.62 T
(dir) 99.65 393.62 T
(ection is not valid when cr) 113.72 393.62 T
(eating an instance:) 241.79 393.62 T
5 9 Q
(?) 99.65 372.95 T
4 F
(make\050<latitude>, direction: Nooth:\051;) 110.45 372.95 T
5 F
(ERROR: nooth: is not north: or south:) 99.65 361.95 T
1 11 Q
-0.05 (The following example show what happens when the dir) 99.65 341.62 P
-0.05 (ection is not valid when) 376.84 341.62 P
(using the) 99.65 327.62 T
4 9.5 Q
(direction) 147.42 327.62 T
1 11 Q
( setter:) 198.72 327.62 T
5 9 Q
(?) 99.65 306.95 T
4 F
(begin) 110.45 306.95 T
(let my-longitude = make\050<longitude>\051;) 121.25 295.95 T
(my-longitude.direction := North:) 121.25 284.95 T
(end;) 110.45 273.95 T
5 F
(ERROR: north: is not east: or west:) 99.65 262.95 T
3 15 Q
(7.4  T) 99.65 224.95 T
(echniques for initializing slots) 130.2 224.95 T
1 11 Q
-0.28 (If you call a getter for a slot that has not been initialized, Dylan signals an err) 99.65 204.62 P
-0.28 (or) 468.3 204.62 P
-0.28 (. In) 477.84 204.62 P
(this section, we describe a variety of techniques for avoiding the pr) 99.65 190.62 T
(oblem of) 424.65 190.62 T
(accessing an uninitialized slot.) 99.65 176.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "92" 94
%%Page: "93" 95
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7 More on Slots) 450.2 702.62 T
2 11 Q
(93) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(7.4.1  Use of a predicate to test whether the slot is initialized) 99.65 664.29 T
1 11 Q
(In the) 99.65 644.62 T
4 9.5 Q
(decode-total-seconds) 130.51 644.62 T
1 11 Q
( method \050see Section 5.5, page 63\051, we assume that) 244.51 644.62 T
(the) 99.65 630.62 T
4 9.5 Q
(total-seconds) 117.65 630.62 T
1 11 Q
( slot has a value. If we call) 191.76 630.62 T
4 9.5 Q
(decode-total-seconds) 321.45 630.62 T
1 11 Q
( befor) 435.45 630.62 T
(e \336ll-) 463.36 630.62 T
-0.03 (ing in the) 99.65 616.62 P
4 9.5 Q
-0.07 (total-seconds) 148.38 616.62 P
1 11 Q
-0.03 ( slot, an err) 222.48 616.62 P
-0.03 (or is signaled. W) 276.49 616.62 P
-0.03 (e could r) 356.67 616.62 P
-0.03 (ede\336ne the method) 398.96 616.62 P
(to call the) 99.65 602.62 T
4 9.5 Q
(slot-initialized?) 149.53 602.62 T
1 11 Q
( pr) 246.43 602.62 T
(edicate to determine whether the slot is initial-) 259.94 602.62 T
(ized befor) 99.65 588.62 T
(e trying to access it. If it is not initialized, we could r) 148.26 588.62 T
(eturn something) 401.07 588.62 T
(suitable, such as zer) 99.65 574.62 T
(o for all thr) 196.45 574.62 T
(ee r) 250.76 574.62 T
(eturn values, when the) 268.19 574.62 T
4 9.5 Q
(total-seconds) 382.16 574.62 T
1 11 Q
( slot is) 456.26 574.62 T
(not initialized:) 99.65 560.62 T
4 9 Q
(def) 99.65 539.95 T
(ine method decode-total-seconds \050sixty-unit :: <sixty-unit>\051) 115.85 539.95 T
(=> \050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 110.45 528.95 T
(if \050slot-initialized? \050sixty-unit, total-seconds\051\051) 110.45 517.95 T
-0.36 (let\050total-minutes, seconds\051 = truncate/ \050sixty-unit.total-seconds, 60\051;) 132.05 506.95 P
(let\050max-unit, minutes\051 = truncate/ \050total-minutes, 60\051;) 132.05 495.95 T
(values\050max-unit, minutes, seconds\051;) 132.05 484.95 T
(else) 121.25 473.95 T
(values \0500, 0, 0\051;) 132.05 462.95 T
(end;) 110.45 451.95 T
(end;) 99.65 440.95 T
1 11 Q
(Calling) 99.65 420.62 T
4 9.5 Q
(slot-initialized?) 137.82 420.62 T
1 11 Q
( in the pr) 234.72 420.62 T
(eceding method solves the pr) 278.59 420.62 T
(oblem for this) 421.18 420.62 T
(method only) 99.65 406.62 T
(. Instead of checking whether a slot is initialized, we can guarantee) 160.6 406.62 T
(that the slot is initialized. In Sections 7.4.2, 7.4.3, 7.4.4, and 7.4.5, we show tech-) 99.65 392.62 T
(niques for initializing slots.) 99.65 378.62 T
3 13 Q
(7.4.2  The init-value: slot option) 99.65 347.29 T
1 11 Q
(W) 99.65 327.62 T
(e can use the) 109.64 327.62 T
4 9.5 Q
(init-value:) 174.51 327.62 T
1 11 Q
( slot option to give a default initial value to a slot.) 237.21 327.62 T
(This technique is better than using) 99.65 313.62 T
4 9.5 Q
(slot-initialized?) 269.87 313.62 T
1 11 Q
( because we can avoid) 366.77 313.62 T
(having to check whether the slot is initialized in every method.) 99.65 299.62 T
4 9 Q
(def) 99.65 278.95 T
(ine class <sixty-unit> \050<object>\051) 115.85 278.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:,) 110.45 267.95 T
(init-value: 0;) 229.25 256.95 T
(end;) 99.65 245.95 T
1 11 Q
(When we use) 99.65 225.62 T
4 9.5 Q
(make) 167.98 225.62 T
1 11 Q
( to cr) 190.78 225.62 T
(eate any subclass of) 214.9 225.62 T
4 9.5 Q
(<sixty-unit>) 313.51 225.62 T
1 11 Q
( \050such as) 381.91 225.62 T
4 9.5 Q
(<time-of-) 426.57 225.62 T
(day>) 99.65 211.62 T
1 11 Q
(, and we do not supply the) 122.45 211.62 T
4 9.5 Q
(total-seconds:) 255.33 211.62 T
1 11 Q
( keywor) 335.13 211.62 T
(d to) 374.71 211.62 T
4 9.5 Q
(make) 396.52 211.62 T
1 11 Q
(, the) 419.32 211.62 T
4 9.5 Q
(total-) 442.83 211.62 T
(seconds) 99.65 197.62 T
1 11 Q
( slot is initialized to zer) 139.55 197.62 T
(o.) 252.11 197.62 T
(In general, a slot r) 126.65 183.62 T
(eceives its default initial value when no init keywor) 213.71 183.62 T
(d is) 464.49 183.62 T
(de\336ned or when the caller does not supply the init keywor) 99.65 169.62 T
(d ar) 384.4 169.62 T
(gument to) 403.52 169.62 T
4 9.5 Q
(make) 456.33 169.62 T
1 11 Q
(.) 479.13 169.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "93" 95
%%Page: "94" 96
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(94) 63.65 702.62 T
0 9.5 Q
(7.4 Techniques for initializing slots) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(7.4.3  The required-init-keyword: slot option) 99.65 664.29 T
1 11 Q
(Instead of giving the slot a default initial value, we can r) 99.65 644.62 T
(equir) 372.69 644.62 T
(e the caller of) 398.1 644.62 T
4 9.5 Q
(make) 465.7 644.62 T
1 11 Q
(to supply an init keywor) 99.65 630.62 T
(d for the slot. The) 219.2 630.62 T
4 9.5 Q
(required-init-keyword:) 307.56 630.62 T
1 11 Q
( slot option) 432.96 630.62 T
-0.05 (de\336nes a r) 99.65 616.62 P
-0.05 (equir) 149.67 616.62 P
-0.05 (ed init keywor) 175.08 616.62 P
-0.05 (d. If the caller of) 245.69 616.62 P
4 9.5 Q
-0.1 (make) 327.36 616.62 P
1 11 Q
-0.05 ( does not supply the r) 350.16 616.62 P
-0.05 (equir) 455.55 616.62 P
-0.05 (ed) 480.96 616.62 P
(init keywor) 99.65 602.62 T
(d, then an err) 155.62 602.62 T
(or is signaled.) 220.66 602.62 T
4 9 Q
(def) 99.65 581.95 T
(ine class <sixty-unit> \050<object>\051) 115.85 581.95 T
(slot total-seconds :: <integer>, required-init-keyword: total-seconds:;) 110.45 570.95 T
(end;) 99.65 559.95 T
1 11 Q
(The) 99.65 539.62 T
4 9.5 Q
(total-seconds) 120.81 539.62 T
1 11 Q
( slot is de\336ned in the) 194.91 539.62 T
4 9.5 Q
(<sixty-unit>) 298.63 539.62 T
1 11 Q
( class. Note that making) 367.03 539.62 T
4 9.5 Q
(total-seconds:) 99.65 525.62 T
1 11 Q
( a r) 179.45 525.62 T
(equir) 194.6 525.62 T
(ed init keywor) 220.01 525.62 T
(d in this class makes it r) 290.71 525.62 T
(equir) 406.5 525.62 T
(ed for every) 431.91 525.62 T
(class that inherits fr) 99.65 511.62 T
(om it, including) 194.76 511.62 T
4 9.5 Q
(<time>) 275.03 511.62 T
1 11 Q
(,) 309.23 511.62 T
4 9.5 Q
(<angle>) 314.73 511.62 T
1 11 Q
(, and all their subclasses.) 354.63 511.62 T
3 13 Q
(7.4.4  Slot options for an inherited slot) 99.65 480.29 T
1 11 Q
(Y) 99.65 460.62 T
(ou can de\336ne a slot in only one particular class in a set of classes r) 105.97 460.62 T
(elated by) 424.93 460.62 T
(inheritance. Y) 99.65 446.62 T
(ou can use the) 165.93 446.62 T
4 9.5 Q
(inherited slot) 238.18 446.62 T
1 11 Q
( speci\336cation to modify the default) 317.98 446.62 T
(initial value of an inherited slot, or the) 99.65 432.62 T
2 F
(init function) 288.54 432.62 T
1 F
( of an inherited slot. See Sec-) 351.77 432.62 T
(tion 7.4.5.) 99.65 418.62 T
(In this example, assume that the) 126.65 404.62 T
4 9.5 Q
(<sixty-unit>) 285.87 404.62 T
1 11 Q
( class de\336nes the) 354.27 404.62 T
4 9.5 Q
(total-sec-) 438.42 404.62 T
-0.72 (onds) 99.65 390.62 P
1 11 Q
-0.35 ( slot, the init keywor) 122.45 390.62 P
-0.35 (d) 220.75 390.62 P
4 9.5 Q
-0.72 (total-seconds:) 229.87 390.62 P
1 11 Q
-0.35 (, and pr) 309.67 390.62 P
-0.35 (ovides the default initial value) 346.61 390.62 P
(of zer) 99.65 376.62 T
(o for that slot.) 126.98 376.62 T
4 9 Q
(def) 99.65 355.95 T
(ine class <sixty-unit> \050<object>\051) 115.85 355.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:,) 110.45 344.95 T
(init-value: 0;) 229.25 333.95 T
(end;) 99.65 322.95 T
(def) 99.65 303.95 T
(ine class <time> \050<sixty-unit>\051) 115.85 303.95 T
(end;) 99.65 292.95 T
1 11 Q
(The) 99.65 272.62 T
4 9.5 Q
(<time-offset>) 120.81 272.62 T
1 11 Q
( class pr) 194.91 272.62 T
(ovides a dif) 234.08 272.62 T
(fer) 290.55 272.62 T
(ent default initial value for the inher-) 303.62 272.62 T
(ited slot) 99.65 258.62 T
4 9.5 Q
(total-seconds) 141.38 258.62 T
1 11 Q
(:) 215.48 258.62 T
4 9 Q
(def) 99.65 237.95 T
(ine class <time-offset> \050<time>\051) 115.85 237.95 T
(inherited slot total-seconds, init-value: encode-total-seconds\0501, 0, 0\051;) 110.45 226.95 T
(end;) 99.65 215.95 T
1 11 Q
(By using the) 99.65 195.62 T
4 9.5 Q
(inherited slot) 163.01 195.62 T
1 11 Q
( speci\336cation, we ar) 242.81 195.62 T
(e not de\336ning the slot, but ar) 338.76 195.62 T
(e) 478.7 195.62 T
(stating that it is a slot de\336ned by a super) 99.65 181.62 T
(class. W) 296.2 181.62 T
(e can then pr) 334.6 181.62 T
(ovide either a) 397.32 181.62 T
(default initial value or an init function for the inherited slot.) 99.65 167.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "94" 96
%%Page: "95" 97
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7 More on Slots) 450.2 702.62 T
2 11 Q
(95) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(7.4.5  The init-function: slot option) 99.65 664.29 T
1 11 Q
-0.26 (W) 99.65 644.62 P
-0.26 (e can use the) 109.64 644.62 P
4 9.5 Q
-0.53 (init-function:) 173.49 644.62 P
1 11 Q
-0.26 ( slot option to pr) 253.29 644.62 P
-0.26 (ovide a function of no ar) 332.89 644.62 P
-0.26 (guments) 450.77 644.62 P
(to be called to r) 99.65 630.62 T
(eturn a default initial value for the slot. These functions ar) 174.11 630.62 T
(e called) 455.94 630.62 T
2 F
(init-functions) 99.65 616.62 T
1 F
(. They allow the initial value of a slot to be an arbitrary computa-) 168.67 616.62 T
(tion.) 99.65 602.62 T
4 9 Q
(def) 99.65 581.95 T
(ine class <time-of-day> \050<time>\051) 115.85 581.95 T
(inherited slot total-seconds, init-function: get-current-time\050\051;) 110.45 570.95 T
(end;) 99.65 559.95 T
1 11 Q
(The) 99.65 539.62 T
4 9.5 Q
(<time-of-day>) 120.81 539.62 T
1 11 Q
( class calls the) 194.91 539.62 T
4 9.5 Q
(get-current-time) 265.53 539.62 T
1 11 Q
( function to pr) 356.73 539.62 T
(ovide an ini-) 426.11 539.62 T
(tial value for the) 99.65 525.62 T
4 9.5 Q
(total-seconds) 182.23 525.62 T
1 11 Q
( slot. Note that we assume) 256.33 525.62 T
4 9.5 Q
(get-current-time) 386.99 525.62 T
1 11 Q
( is) 478.19 525.62 T
(available as a library function.) 99.65 511.62 T
(An init function is called during instance cr) 126.65 497.62 T
(eation when no keywor) 337.02 497.62 T
(d ar) 451.72 497.62 T
(gu-) 470.84 497.62 T
(ment is de\336ned or when an optional keywor) 99.65 483.62 T
(d ar) 315.61 483.62 T
(gument is not passed to) 334.73 483.62 T
4 9.5 Q
(make) 453.08 483.62 T
1 11 Q
(.) 475.88 483.62 T
(A slot cannot use both the) 126.65 469.62 T
4 9.5 Q
(init-value:) 255.84 469.62 T
1 11 Q
( and) 318.54 469.62 T
4 9.5 Q
(init-function:) 342.67 469.62 T
1 11 Q
( slot options.) 422.47 469.62 T
3 13 Q
(7.4.6  Summary of slot initialization techniques) 99.65 438.29 T
1 11 Q
(Ther) 99.65 418.62 T
(e ar) 122.21 418.62 T
(e four ways to pr) 139.88 418.62 T
(ovide an initial values for a slot:) 222.6 418.62 T
(Init keywor) 126.65 392.62 T
(ds) 183.12 392.62 T
(Y) 207.65 392.62 T
(ou can use the) 213.97 392.62 T
4 9.5 Q
(init-keyword:) 286.22 392.62 T
1 11 Q
( to declar) 360.32 392.62 T
(e an optional key-) 405.14 392.62 T
-0.29 (wor) 207.65 378.62 P
-0.29 (d ar) 226.98 378.62 P
-0.29 (gument, or) 245.8 378.62 P
4 9.5 Q
-0.6 (required-init-keyword:) 301.55 378.62 P
1 11 Q
-0.29 ( slot option to) 426.95 378.62 P
(declar) 207.65 364.62 T
(e a r) 237.37 364.62 T
(equir) 257.79 364.62 T
(ed keywor) 283.2 364.62 T
(d ar) 334.76 364.62 T
(gument for) 353.88 364.62 T
4 9.5 Q
(make) 411.11 364.62 T
1 11 Q
( when you) 433.92 364.62 T
(cr) 207.65 350.62 T
(eate an instance of the class. The value of the keywor) 216.68 350.62 T
(d) 473.19 350.62 T
(ar) 207.65 336.62 T
(gument becomes the value of the slot.) 217.29 336.62 T
(Default initial value) 126.65 310.62 T
(Y) 207.65 296.62 T
(ou can use the) 213.97 296.62 T
4 9.5 Q
(init-value:) 286.22 296.62 T
1 11 Q
( slot option to give a default) 348.92 296.62 T
(initial value for the slot. The slot r) 207.65 282.62 T
(eceives its default initial) 371.5 282.62 T
(value when no init keywor) 207.65 268.62 T
(d is de\336ned or when the caller) 338.34 268.62 T
(does not supply the init keywor) 207.65 254.62 T
(d ar) 362.36 254.62 T
(gument to) 381.48 254.62 T
4 9.5 Q
(make) 434.29 254.62 T
1 11 Q
(.) 457.09 254.62 T
(Init-function) 126.65 228.62 T
(Y) 207.65 228.62 T
(ou can use the) 213.97 228.62 T
4 9.5 Q
(init-function:) 286.22 228.62 T
1 11 Q
( slot option to pr) 366.02 228.62 T
(ovide a) 446.64 228.62 T
(function of zer) 207.65 214.62 T
(o ar) 278.51 214.62 T
(guments to be called to r) 296.91 214.62 T
(eturn a default) 416.51 214.62 T
-0.14 (initial value for the slot no init keywor) 207.65 200.62 P
-0.14 (d is de\336ned or when) 393.38 200.62 P
(the caller does not supply the init keywor) 207.65 186.62 T
(d ar) 409.52 186.62 T
(gument to) 428.64 186.62 T
4 9.5 Q
(make) 207.65 172.62 T
1 11 Q
(.) 230.45 172.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "95" 97
%%Page: "96" 98
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(96) 63.65 702.62 T
0 9.5 Q
(7.5 Class slots and each-subclass slots) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(Methods for) 126.65 665.62 T
4 9.5 Q
(initialize) 189.22 665.62 T
1 11 Q
(Y) 207.65 651.62 T
(ou can de\336ne a method for) 213.97 651.62 T
4 9.5 Q
(initialize) 347.42 651.62 T
1 11 Q
( for this class to) 404.42 651.62 T
(perform any actions to initialize the instance. The) 207.65 637.62 T
4 9.5 Q
(make) 450.04 637.62 T
1 11 Q
(function calls the) 207.65 623.62 T
4 9.5 Q
(initialize) 293.38 623.62 T
1 11 Q
( generic function after) 350.38 623.62 T
4 9.5 Q
(make) 460.01 623.62 T
1 11 Q
(cr) 207.65 609.62 T
(eates an instance and supplies what initial slot values it) 216.68 609.62 T
(can. If you need to do any complex computation to com-) 207.65 595.62 T
(pute and set the value of a slot, you can do that computa-) 207.65 581.62 T
(tion in an) 207.65 567.62 T
4 9.5 Q
(initialize) 256.6 567.62 T
1 11 Q
( method.) 313.6 567.62 T
3 15 Q
(7.5  Class slots and each-subclass slots) 99.65 527.95 T
1 11 Q
(Each slot has a particular kind of) 99.65 507.62 T
2 F
(allocation) 261.84 507.62 T
1 F
(. The allocation of a slot determines) 311.33 507.62 T
(wher) 99.65 493.62 T
(e the storage for the slot\325s value is allocated, and it determines which) 124.64 493.62 T
(instances shar) 99.65 479.62 T
(e the value of the slot. Ther) 167.68 479.62 T
(e ar) 299.22 479.62 T
(e four kinds of allocation:) 316.89 479.62 T
(Instance) 126.65 453.62 T
(Each instance allocates storage for the slot, and each) 207.65 453.62 T
(instance of the class that de\336nes the slot has its own value) 207.65 439.62 T
(for the slot. Changing a slot in one instance does not af) 207.65 425.62 T
(fect) 473.08 425.62 T
(the value of the same slot in a dif) 207.65 411.62 T
(fer) 367.74 411.62 T
(ent instance. Instance) 380.82 411.62 T
(allocation is the default, and is the most commonly used) 207.65 397.62 T
(kind of allocation.) 207.65 383.62 T
(V) 126.65 357.62 T
(irtual) 133.99 357.62 T
(No storage is allocated for the slot. Y) 207.65 357.62 T
(ou must pr) 385.07 357.62 T
(ovide a get-) 438.56 357.62 T
(ter method that computes the value of the virtual slot.) 207.65 343.62 T
(Class) 126.65 317.62 T
(The class that de\336nes the slot allocates storage for the slot.) 207.65 317.62 T
(Instances of the class that de\336nes the slot and all its sub-) 207.65 303.62 T
(classes see the same value for the slot. That is, all general) 207.65 289.62 T
(instances of the class shar) 207.65 275.62 T
(e the value for the slot.) 331.77 275.62 T
(Each-subclass) 126.65 249.62 T
(The class that de\336nes the slot and each of its subclasses) 207.65 249.62 T
(allocate storage for the slot. Thus, if the class that de\336nes) 207.65 235.62 T
(the slot has four subclasses, the slot is allocated in \336ve) 207.65 221.62 T
(places. All the dir) 207.65 207.62 T
(ect instances of each class shar) 293.06 207.62 T
(e a value) 440.47 207.62 T
(for the slot.) 207.65 193.62 T
(W) 99.65 173.62 T
(e can give an example of an each-subclass slot by de\336ning the) 109.64 173.62 T
4 9.5 Q
(<vehicle>) 411.89 173.62 T
1 11 Q
( class:) 463.19 173.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "96" 98
%%Page: "97" 99
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7 More on Slots) 450.2 702.62 T
2 11 Q
(97) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine class <vehicle> \050<physical-object>\051) 115.85 666.95 T
6 F
(// Every vehicle has a unique identif) 110.45 655.95 T
(ication code) 310.25 655.95 T
4 F
(slot vehicle-id) 110.45 644.95 T
( :: <string>, required-init-keyword: id:;) 288.65 644.95 T
6 F
(// How much fuel is left in the fuel tank) 110.45 633.95 T
4 F
(slot fuel-remaining) 110.45 622.95 T
(:: <integer>,) 294.05 622.95 T
(init-keyword: fuel-remaining:,) 310.25 611.95 T
(init-value: 0;) 310.25 600.95 T
6 F
(// The normal operating speed of this class of vehicle) 110.45 589.95 T
4 F
(each-subclass slot cruising-speed :: <integer>;) 110.45 578.95 T
(end;) 99.65 567.95 T
1 11 Q
(The slot) 99.65 547.62 T
4 9.5 Q
(cruising-speed) 141.02 547.62 T
1 11 Q
( is de\336ned with the) 220.82 547.62 T
4 9.5 Q
(each-subclass) 317.09 547.62 T
1 11 Q
( slot allocation. W) 391.19 547.62 T
(e) 477.12 547.62 T
(use each-subclass allocation to expr) 99.65 533.62 T
(ess that, for example, all instances of Boeing) 272.01 533.62 T
(747 air) 99.65 519.62 T
(craft shar) 131.75 519.62 T
(e a particular cr) 177.19 519.62 T
(uising speed, all instances of McDonnell Douglas) 253.15 519.62 T
(MD-80 air) 99.65 505.62 T
(craft shar) 148.83 505.62 T
(e a particular cr) 194.27 505.62 T
(uising speed, but the speed of one 747 need) 270.24 505.62 T
(not be the same as the speed of an MD-80.) 99.65 491.62 T
3 15 Q
(7.6  Summary) 99.65 451.95 T
1 11 Q
(This chapter cover) 99.65 431.62 T
(ed:) 189.28 431.62 T
(\245) 108.65 411.62 T
(W) 126.65 411.62 T
(e discussed getter and setter methods, in particular) 136.64 411.62 T
(, the syntaxes for call-) 383.8 411.62 T
(ing getters and setters, the name of a setter) 126.65 397.62 T
(, and de\336ning a setter method.) 333.17 397.62 T
(\245) 108.65 377.62 T
(W) 126.65 377.62 T
(e showed how you can use symbols instead of strings.) 136.64 377.62 T
(\245) 108.65 357.62 T
(W) 126.65 357.62 T
(e discussed techniques for initializing slots: init keywor) 136.64 357.62 T
(ds \050which can be) 405.86 357.62 T
(optional or r) 126.65 343.62 T
(equir) 187.16 343.62 T
(ed\051, default initial values, init functions, and) 212.57 343.62 T
4 9.5 Q
(initialize) 430.52 343.62 T
1 11 Q
(methods.) 126.65 329.62 T
(\245) 108.65 309.62 T
(W) 126.65 309.62 T
(e showed how you can override the default initial value or init function) 136.64 309.62 T
(of an inherited slot.) 126.65 295.62 T
(\245) 108.65 275.62 T
(W) 126.65 275.62 T
(e discussed the dif) 136.64 275.62 T
(fer) 226.22 275.62 T
(ent kinds of slot allocation: instance \050the default\051,) 239.3 275.62 T
(virtual, class, and each-subclass.) 126.65 261.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "97" 99
%%Page: "98" 100
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(98) 63.65 702.62 T
0 9.5 Q
(7.6 Summary) 84.15 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "98" 100
%%Page: "99" 101
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(99) 292.15 135.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(8) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(8) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Simple Collections and) 100.65 591.4 T
(Contr) 99.65 561.4 T
(ol Flow) 175.85 561.4 T
99.65 159.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(In this chapter) 99.65 449.62 T
(, we intr) 168.89 449.62 T
(oduce collections and contr) 208.92 449.62 T
(ol \337ow operators. A) 341.64 449.62 T
2 F
(collection) 441.35 449.62 T
1 F
(is an object used to hold one or mor) 99.65 435.62 T
(e objects. Dylan pr) 272.92 435.62 T
(ovides the usual kinds of) 362.75 435.62 T
(collections, including arrays, vectors, strings, singly linked lists, queues, hash) 99.65 421.62 T
(tables, and so on. In this chapter) 99.65 407.62 T
(, we illustrate several useful data types as we) 255.4 407.62 T
(develop the airport example, including strings, lists, and vectors.) 99.65 393.62 T
-0.4 (In Dylan, a collection is an instance of a class. For example, the) 126.65 379.62 P
4 9.5 Q
-0.83 (<array>) 428.14 379.62 P
1 11 Q
-0.4 ( class) 468.04 379.62 P
-0.43 (r) 99.65 365.62 P
-0.43 (epr) 103.79 365.62 P
-0.43 (esents arrays, and the) 119.82 365.62 P
4 9.5 Q
-0.89 (<vector>) 226.05 365.62 P
1 11 Q
-0.43 ( class r) 271.65 365.62 P
-0.43 (epr) 303.35 365.62 P
-0.43 (esents vectors. The) 319.37 365.62 P
4 9.5 Q
-0.89 (<vector>) 412.32 365.62 P
1 11 Q
-0.43 ( class is) 457.92 365.62 P
(a subclass of) 99.65 351.62 T
4 9.5 Q
(<array>) 163.36 351.62 T
1 11 Q
(. Y) 203.26 351.62 T
(ou can call) 215.09 351.62 T
4 9.5 Q
(make) 269.55 351.62 T
1 11 Q
( to cr) 292.35 351.62 T
(eate a new collection, and you call) 316.47 351.62 T
(generic functions to operate on a collection. In addition to using the built-in col-) 99.65 337.62 T
(lection classes, you can de\336ne new collection classes.) 99.65 323.62 T
(Contr) 126.65 309.62 T
(ol \337ow operators enable you to alter the natural or) 154.59 309.62 T
(der of statement) 399.29 309.62 T
(execution, including performing iteration. One useful form of iteration is to per-) 99.65 295.62 T
(form computations on each element of a collection. W) 99.65 281.62 T
(e show the use of) 359.89 281.62 T
4 9.5 Q
(for) 446.64 281.62 T
1 11 Q
(,) 462.93 281.62 T
4 9.5 Q
-0.12 (while) 99.65 267.62 P
1 11 Q
-0.05 (,) 128.15 267.62 P
4 9.5 Q
-0.12 (do) 133.59 267.62 P
1 11 Q
-0.05 (, and the) 144.99 267.62 P
4 9.5 Q
-0.12 (if) 189.71 267.62 P
1 11 Q
-0.05 (-) 201.11 267.62 P
4 9.5 Q
-0.12 (elseif) 204.77 267.62 P
1 11 Q
-0.05 (-) 238.97 267.62 P
4 9.5 Q
-0.12 (else) 242.63 267.62 P
1 11 Q
-0.05 ( constr) 265.43 267.62 P
-0.05 (uct in this chapter) 297.92 267.62 P
-0.05 (. W) 384.35 267.62 P
-0.05 (e also show) 399.78 267.62 P
4 9.5 Q
-0.12 (select) 458.75 267.62 P
1 11 Q
(and) 99.65 253.62 T
4 9.5 Q
(block) 121.02 253.62 T
1 11 Q
(.) 149.52 253.62 T
3 15 Q
(8.1  Built-in collection classes) 99.65 213.95 T
1 11 Q
(Figur) 99.65 193.62 T
(e 8.1 shows the most useful collection classes, and omits the classes that ar) 125.86 193.62 T
(e) 485.68 193.62 T
(not used dir) 99.65 179.62 T
(ectly) 158.5 179.62 T
(.) 180.33 179.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "99" 101
%%Page: "100" 102
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(100) 63.65 702.62 T
0 9.5 Q
(8.1 Built-in collection classes) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
99.65 470.53 513.65 478.52 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 210.11 482.19 T
(e 8.1  Built-in collection classes) 236.32 482.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A collection holds a gr) 99.65 450.2 T
(oup of objects, called values, each indexed by a key) 208.6 450.2 T
(. If you) 456.39 450.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 99.65 436.2 T
(e familiar with hash tables, you know that a table associates a key with a value) 109.29 436.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(such that you can r) 99.65 422.2 T
(etrieve each value ef) 191.99 422.2 T
(\336ciently fr) 291 422.2 T
(om the table given its corr) 340.88 422.2 T
(e-) 467.28 422.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sponding key) 99.65 408.2 T
(. Each class of collection can have dif) 164.8 408.2 T
(fer) 343.09 408.2 T
(ent r) 356.17 408.2 T
(estrictions on keys or) 378.32 408.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values.) 99.65 394.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Sequences ar) 126.65 380.2 T
(e an important subclass of collections. Sequences r) 189.37 380.2 T
(estrict their) 433.23 380.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(keys to be whole numbers \050integers\051 starting at zer) 99.65 366.2 T
(o, and incr) 345.5 366.2 T
(easing by one for) 397.01 366.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(each additional value in the collection. V) 99.65 352.2 T
(ectors, strings, and lists ar) 296.03 352.2 T
(e sequences.) 421.85 352.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.34 (The class) 126.65 338.2 P
4 9.5 Q
-0.71 (<byte-string>) 172.79 338.2 P
1 11 Q
-0.34 ( is a subclass of) 246.89 338.2 P
4 9.5 Q
-0.71 (<string>) 322.25 338.2 P
1 11 Q
-0.34 (. The) 367.85 338.2 P
4 9.5 Q
-0.71 (<byte-string>) 393.82 338.2 P
1 11 Q
-0.34 ( class) 467.92 338.2 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(has a mor) 99.65 324.2 T
(e ef) 147.08 324.2 T
(\336cient implementation than) 163.83 324.2 T
4 9.5 Q
(<string>) 301.63 324.2 T
1 11 Q
(, but) 347.23 324.2 T
4 9.5 Q
(<byte-string>) 371.78 324.2 T
1 11 Q
( can hold) 445.88 324.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(only those characters that ar) 99.65 310.2 T
(e r) 236.4 310.2 T
(epr) 248.57 310.2 T
(esented with a single byte. Other strings, for) 264.59 310.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.01 (example those r) 99.65 296.2 P
-0.01 (epr) 176.43 296.2 P
-0.01 (esenting international character sets, need mor) 192.46 296.2 P
-0.01 (e than one byte) 418.82 296.2 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(per character) 99.65 282.2 T
(.) 162.52 282.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.06 (The class) 126.65 268.2 P
4 9.5 Q
-0.12 (<simple-object-vector>) 173.35 268.2 P
1 11 Q
-0.06 ( is mor) 298.76 268.2 P
-0.06 (e speci\336c than) 331.87 268.2 P
4 9.5 Q
-0.12 (<vector>) 403.26 268.2 P
1 11 Q
-0.06 (, and it is) 448.86 268.2 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(sealed) 99.65 254.2 T
1 F
(, so it should pr) 131.42 254.2 T
(ovide higher performance than) 207.01 254.2 T
4 9.5 Q
(<vector>) 361.05 254.2 T
1 11 Q
(. See Chapter 12) 406.65 254.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for information about sealing. Instances of) 99.65 240.2 T
4 9.5 Q
(<simple-object-vector>) 307.85 240.2 T
1 11 Q
( may hold) 433.24 240.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.1 (any Dylan instance. Y) 99.65 226.2 P
-0.1 (ou specify the size of a) 204.32 226.2 P
4 9.5 Q
-0.22 (<simple-object-vector>) 316.31 226.2 P
1 11 Q
-0.1 ( when you) 441.71 226.2 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cr) 99.65 212.2 T
(eate one, and you cannot be change the size later) 108.68 212.2 T
(. Y) 344.54 212.2 T
(ou can use the) 356.37 212.2 T
4 9.5 Q
(<stretchy-) 428.61 212.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(vector>) 99.65 198.2 T
1 11 Q
( class for vectors that can change in size.) 139.55 198.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
0 0 0 1 0 0 0 K
116.36 498.52 496.93 661.95 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<collection>) 241.58 648.52 T
(<sequence>) 339.43 615.69 T
(<range>) 442.29 582.1 T
(<deque>) 335.86 582.1 T
(<string>) 275.86 582.1 T
(<vector>) 219.43 582.1 T
(<array>) 213.72 615.69 T
(<table>) 125.86 615.69 T
(<stretchy-vector>) 125.86 545.69 T
(<simple-object-vector>) 129.43 518.52 T
(<unicode-string>) 260.49 518.52 T
(<byte-string>) 363.01 518.52 T
(<list>) 393.72 582.1 T
(<pair>) 362.29 557.83 T
(<empty-list>) 409.43 557.83 T
160.98 624.85 149.08 626.38 159.98 631.39 160.48 628.12 4 Y
V
256.93 642.81 160.48 628.12 2 L
0.5 H
2 Z
N
357.55 633.73 368.36 628.52 356.43 627.2 356.99 630.46 4 Y
V
280.51 643.52 356.99 630.46 2 L
N
244.94 625.23 233.36 622.1 241.52 630.89 243.23 628.06 4 Y
V
267.65 642.81 243.24 628.06 2 L
N
239.68 601.65 242.36 589.95 233.89 598.46 236.79 600.05 4 Y
V
230.93 610.67 236.79 600.05 2 L
N
261.04 589.67 249.08 590.67 259.75 596.16 260.39 592.91 4 Y
V
342.65 609.24 260.39 592.91 2 L
N
447.33 596.81 457.64 590.67 445.64 590.41 446.49 593.61 4 Y
V
379.08 611.38 446.5 593.61 2 L
N
398.22 600.33 406.21 591.38 394.69 594.74 396.46 597.53 4 Y
V
373.36 612.09 396.46 597.53 2 L
N
327.33 593.41 315.5 591.38 324.45 599.37 325.89 596.39 4 Y
V
355.51 610.67 325.9 596.39 2 L
N
363.36 599.74 355.5 590.67 357.36 602.52 360.36 601.13 4 Y
V
364.79 610.67 360.36 601.13 2 L
N
189.62 555.07 177.65 554.24 187.36 561.29 188.49 558.18 4 Y
V
240.51 577.09 188.49 558.18 2 L
N
302.39 539.34 299.08 527.81 295.77 539.34 299.08 539.34 4 Y
V
299.08 575.67 299.08 539.34 2 L
N
391.05 533.17 399.79 524.95 388.02 527.29 389.53 530.23 4 Y
V
302.65 574.95 389.54 530.23 2 L
N
224.68 536.32 216.22 527.81 218.89 539.51 221.79 537.91 4 Y
V
243.36 577.09 221.79 537.91 2 L
N
280.98 537.49 285.5 526.38 275.78 533.41 278.38 535.45 4 Y
V
246.22 576.38 278.38 535.45 2 L
N
366.71 535.13 376.22 527.81 364.27 528.98 365.49 532.05 4 Y
V
249.79 577.81 365.49 532.05 2 L
N
396.69 567.93 384.79 566.38 394.06 574 395.38 570.97 4 Y
V
406.22 575.67 395.38 570.97 2 L
N
430.3 574.12 440.51 567.81 428.51 567.76 429.4 570.94 4 Y
V
412.65 575.67 429.4 570.94 2 L
N
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "100" 102
%%Page: "101" 103
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 357.42 702.62 T
2 11 Q
(101) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 15 Q
0 X
(8.2  Basic use of collections) 99.65 662.95 T
1 11 Q
(In the following sections, we show how to cr) 99.65 642.62 T
(eate collections, and how to access) 316.3 642.62 T
(the elements of a collection.) 99.65 628.62 T
3 13 Q
(8.2.1  Use of strings) 99.65 597.29 T
1 11 Q
(First, we cr) 99.65 577.62 T
(eate a variable containing a string:) 153.28 577.62 T
5 9 Q
(?) 99.65 556.95 T
4 F
(def) 110.45 556.95 T
(ine variable *greeting* = "Hello, world.";) 126.65 556.95 T
5 F
(?) 99.65 537.95 T
4 F
(*greeting*;) 110.45 537.95 T
5 F
("Hello, world.") 99.65 526.95 T
1 11 Q
(Now we can access elements of the string:) 99.65 506.62 T
5 9 Q
(?) 99.65 485.95 T
4 F
(*greeting*[0];) 110.45 485.95 T
5 F
(\325H\325) 99.65 474.95 T
(?) 99.65 455.95 T
4 F
(*greeting*[1];) 110.45 455.95 T
5 F
(\325e\325) 99.65 444.95 T
1 11 Q
(The syntax) 99.65 424.62 T
4 9.5 Q
(*greeting*[) 155.51 424.62 T
0 11 Q
(n) 218.21 424.62 T
4 9.5 Q
(]) 224.32 424.62 T
1 11 Q
( r) 230.02 424.62 T
(efers to the) 236.92 424.62 T
0 F
(n) 293.23 424.62 T
1 F
(th element of the string in) 299.34 424.62 T
4 9.5 Q
(*greeting*.) 427.38 424.62 T
1 11 Q
(In general, you can use this syntax to access any element of any collection.) 99.65 410.62 T
(W) 126.65 396.62 T
(e use the assignment operator to change an element of a string:) 136.64 396.62 T
5 9 Q
(?) 99.65 375.95 T
4 F
(*greeting* := copy-sequence \050*greeting*\051;) 110.45 375.95 T
5 F
("Hello, world.") 99.65 364.95 T
(?) 99.65 345.95 T
4 F
(*greeting*[0] :=) 110.45 345.95 T
5 F
(') 202.25 345.95 T
4 F
(j) 207.65 345.95 T
5 F
(') 213.05 345.95 T
4 F
(;) 218.45 345.95 T
5 F
(\325j\325) 99.65 334.95 T
(?) 99.65 315.95 T
4 F
(*greeting*;) 110.45 315.95 T
5 F
("jello, world.") 99.65 304.95 T
1 11 Q
(W) 99.65 284.62 T
(e copied the gr) 109.64 284.62 T
(eeting \336rst befor) 181.37 284.62 T
(e modifying it because it is an err) 261.13 284.62 T
(or to modify a) 422.19 284.62 T
(pr) 99.65 270.62 T
(ogram literal.) 110.41 270.62 T
3 13 Q
(8.2.2  Use of vectors) 99.65 239.29 T
1 11 Q
(Ther) 99.65 219.62 T
(e ar) 122.21 219.62 T
(e two ways to cr) 139.88 219.62 T
(eate collections. The \336rst way is to cr) 218.99 219.62 T
(eate a collection) 396.86 219.62 T
(without initializing it by using) 99.65 205.62 T
4 9.5 Q
(make.) 250.7 205.62 T
1 11 Q
( For example, her) 279.2 205.62 T
(e we cr) 363.72 205.62 T
(eate a vector:) 397.97 205.62 T
5 9 Q
(?) 99.65 184.95 T
4 F
(def) 110.45 184.95 T
(ine variable *my-vector* = make \050<vector>, size: 2\051;) 126.65 184.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "101" 103
%%Page: "102" 104
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(102) 63.65 702.62 T
0 9.5 Q
(8.2 Basic use of collections) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
-0.32 (The pr) 99.65 665.62 P
-0.32 (eceding statement cr) 131.25 665.62 P
-0.32 (eates an empty vector with two elements. W) 230.58 665.62 P
-0.32 (e can stor) 442.63 665.62 P
-0.32 (e) 487.95 665.62 P
(elements into it:) 99.65 651.62 T
5 9 Q
(?) 99.65 630.95 T
4 F
(*my-vector*[0] := 5;) 110.45 630.95 T
5 F
(?) 99.65 619.95 T
4 F
(*my-vector*[1] := 3;) 110.45 619.95 T
5 F
(?) 99.65 608.95 T
4 F
(*my-vector*;) 110.45 608.95 T
5 F
(#[5 3]) 99.65 597.95 T
1 11 Q
(The second way to cr) 99.65 577.62 T
(eate a collection is to cr) 202.42 577.62 T
(eate and initialize it at the same time:) 314.42 577.62 T
5 9 Q
(?) 99.65 556.95 T
4 F
(def) 110.45 556.95 T
(ine variable *my-vector* = #[5, 3];) 126.65 556.95 T
5 F
(?) 99.65 545.95 T
4 F
(*my-vector*;) 110.45 545.95 T
5 F
(#[5 3]) 99.65 534.95 T
1 11 Q
(Figur) 99.65 514.62 T
(e 8.2 shows how you can pictur) 125.86 514.62 T
(e the vector we just cr) 278.48 514.62 T
(eated.) 383.99 514.62 T
0 0 0 1 0 0 0 K
99.65 425.96 513.65 433.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 196.4 437.62 T
(e 8.2  Diagram of the vector) 222.61 437.62 T
4 9.5 Q
(#[5, 3]) 359 437.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 13 Q
(8.2.3  Use of lists) 99.65 400.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Lists ar) 99.65 380.63 T
(e similar in purpose to vectors: each one can stor) 134.88 380.63 T
(e an or) 370.7 380.63 T
(der) 403.52 380.63 T
(ed sequence of) 419.66 380.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(objects. Lists dif) 99.65 366.63 T
(fer fr) 177.19 366.63 T
(om vectors in that it is easy to add and r) 201.02 366.63 T
(emove elements) 395.39 366.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fr) 99.65 352.63 T
(om lists, especially at the fr) 107.46 352.63 T
(ont. In general, if the number of elements in a) 239.06 352.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sequence will r) 99.65 338.63 T
(emain constant, lists ar) 172.62 338.63 T
(e less ef) 283.7 338.63 T
(\336cient than vectors.) 321 338.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Each element of a list is stor) 126.65 324.63 T
(ed in a pair) 261.45 324.63 T
(. Pairs have two parts, a head and a) 315.64 324.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tail. T) 99.65 310.63 T
(ypically the head of a pair points to an element, and the tail points to the) 126.39 310.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pair that holds the next element of the list. T) 99.65 296.63 T
(ypically) 313.1 296.63 T
(, the \336nal tail of the list is the) 350.71 296.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.28 (empty list, r) 99.65 282.63 P
-0.28 (epr) 157.44 282.63 P
-0.28 (esented by) 173.47 282.63 P
4 9.5 Q
-0.57 (#\050\051) 227.79 282.63 P
1 11 Q
-0.28 (. Elements of unr) 244.89 282.63 P
-0.28 (estricted lists can contain any kind) 326.74 282.63 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of object, including, of course, lists.) 99.65 268.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.12 (The) 126.65 254.63 P
4 9.5 Q
-0.25 (list) 147.69 254.63 P
1 11 Q
-0.12 ( function cr) 170.49 254.63 P
-0.12 (eates a list whose elements ar) 225.56 254.63 P
-0.12 (e the ar) 367.68 254.63 P
-0.12 (guments pr) 403.11 254.63 P
-0.12 (ovided) 458.89 254.63 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(to) 99.65 240.63 T
4 9.5 Q
(list) 111.99 240.63 T
1 11 Q
(.) 134.79 240.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(?) 99.65 219.96 T
4 F
( list \0504, 5, 6\051;) 105.05 219.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(#\0504, 5, 6\051) 99.65 208.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Figur) 99.65 188.63 T
(e 8.3 shows how you can pictur) 125.86 188.63 T
(e the list we just cr) 278.48 188.63 T
(eated.) 368.33 188.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
0 0 0 1 0 0 0 K
239.7 453.95 373.6 496.95 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(5) 283.1 479.39 T
(3) 321.81 479.39 T
303.81 494.95 267.81 494.95 267.81 467.95 303.81 467.95 4 Y
0.5 H
2 Z
N
339.81 494.95 303.81 494.95 303.81 467.95 339.81 467.95 4 Y
N
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "102" 104
%%Page: "103" 105
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 357.42 702.62 T
2 11 Q
(103) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
99.65 570.96 513.65 578.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 195.67 582.62 T
(e 8.3  Diagram of the list) 221.89 582.62 T
4 9.5 Q
(#[4, 5, 6]) 342.62 582.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 15 Q
(8.3  The) 99.65 536.96 T
4 13 Q
(for) 148.88 536.96 T
3 15 Q
( function) 172.28 536.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(In the examples in the following sections, we show how to use the) 99.65 516.63 T
4 9.5 Q
(for) 423.61 516.63 T
1 11 Q
( contr) 440.71 516.63 T
(ol) 468.48 516.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\337ow operator) 99.65 502.63 T
(.) 165.12 502.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 13 Q
(8.3.1  De\336nition of the class) 99.65 471.29 T
4 F
(<gate>) 243.02 471.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(One of the main tasks of the application is to schedule gates. Her) 99.65 451.63 T
(e we de\336ne a) 413.82 451.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(class that r) 99.65 437.63 T
(epr) 151.28 437.63 T
(esents gates:) 167.31 437.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(def) 99.65 416.96 T
(ine class <gate> \050<physical-object>\051) 115.85 416.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot gate-id) 105.05 405.96 T
(:: <string>, init-keyword: id:;) 207.65 405.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(// How large a plane will f) 105.05 394.96 T
(it at this gate?) 250.85 394.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot gate-capacity :: <size>,) 105.05 383.96 T
( init-keyword: capacity:;) 272.45 383.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 99.65 372.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(The) 99.65 352.63 T
4 9.5 Q
(<gate>) 120.81 352.63 T
1 11 Q
( class r) 155.01 352.63 T
(epr) 187.57 352.63 T
(esents a gate as having an identi\336er \050the gate-id\051, and stor-) 203.6 352.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.28 (ing the size of plane that can be accommodated at this particular gate. A gate-id is) 99.65 338.63 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(a letter followed by a number) 99.65 324.63 T
(, such as) 242.73 324.63 T
4 9.5 Q
("A2") 286.47 324.63 T
1 11 Q
(.) 309.27 324.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(For completeness, we de\336ne a) 126.65 310.63 T
4 9.5 Q
(say) 275.41 310.63 T
1 11 Q
( method on) 292.51 310.63 T
4 9.5 Q
(<gate>) 350.87 310.63 T
1 11 Q
(:) 385.07 310.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(def) 99.65 289.96 T
(ine method say \050object :: <gate>\051) 115.85 289.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format \050*window*, "Gate %s", object.gate-id\051;) 110.45 278.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 99.65 267.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 13 Q
(8.3.2) 99.65 238.29 T
(Use of) 129.29 238.29 T
4 F
(for) 164.83 238.29 T
3 F
( to generate gates) 188.23 238.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
-0.29 (W) 99.65 218.63 P
-0.29 (e could cr) 109.64 218.63 P
-0.29 (eate each gate by hand \050using) 156.3 218.63 P
4 9.5 Q
-0.6 (make) 301.12 218.63 P
1 11 Q
-0.29 ( r) 323.92 218.63 P
-0.29 (epeatedly\051, but, for a lar) 330.53 218.63 P
-0.29 (ge airport) 445.75 218.63 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(such as Los Angeles International or Chicago\325s O\325Har) 99.65 204.63 T
(e, that would be a lot of) 360.11 204.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(work. Instead, we can write a pr) 99.65 190.63 T
(ogram to help cr) 256.2 190.63 T
(eate all the gates. T) 336.24 190.63 T
(o start, we) 427.64 190.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.15 (show how to cr) 99.65 176.63 P
-0.15 (eate the gate instances and use) 173.91 176.63 P
4 9.5 Q
-0.3 (say) 324.64 176.63 P
1 11 Q
-0.15 ( to print the r) 341.74 176.63 P
-0.15 (esults. Eventually) 405.3 176.63 P
-0.15 (,) 490.29 176.63 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
0 0 0 1 0 0 0 K
159.22 598.95 454.08 661.95 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(4) 192.51 633.4 T
213.22 648.96 177.22 648.96 177.22 621.96 213.22 621.96 4 Y
0.5 H
2 Z
N
249.22 648.96 213.22 648.96 213.22 621.96 249.22 621.96 4 Y
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
257.61 637.29 267.22 634.53 257.61 631.78 258.61 634.53 4 Y
V
231.22 634.53 258.61 634.53 2 L
N
(5) 282.51 633.4 T
303.22 648.96 267.22 648.96 267.22 621.96 303.22 621.96 4 Y
N
339.22 648.96 303.22 648.96 303.22 621.96 339.22 621.96 4 Y
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6) 372.51 633.4 T
(#\050\051) 402.22 633.56 T
393.22 648.96 357.22 648.96 357.22 621.96 393.22 621.96 4 Y
N
429.22 648.96 393.22 648.96 393.22 621.96 429.22 621.96 4 Y
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
347.04 637.15 356.65 634.39 347.04 631.63 348.04 634.39 4 Y
V
320.65 634.39 348.04 634.39 2 L
N
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "103" 105
%%Page: "104" 106
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(104) 63.65 702.62 T
0 9.5 Q
(8.3 The for function) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(we need to stor) 99.65 665.62 T
(e the gate instances in the appr) 174 665.62 T
(opriate slot of the) 323.8 665.62 T
4 9.5 Q
(<airport>) 411.7 665.62 T
1 11 Q
( class.) 463 665.62 T
(W) 99.65 651.62 T
(e implement the latter step in Section 8.5.) 109.64 651.62 T
(Her) 126.65 637.62 T
(e is an example of the output we would like our pr) 145.22 637.62 T
(ototype gate genera-) 391.43 637.62 T
(tor to pr) 99.65 623.62 T
(oduce:) 139.43 623.62 T
5 9 Q
(?) 99.65 602.95 T
4 F
(generate-gates \0502, 3\051;) 110.45 602.95 T
5 F
(Gate A1) 99.65 591.95 T
(Gate A2) 99.65 580.95 T
(Gate A3) 99.65 569.95 T
(Gate B1) 99.65 558.95 T
(Gate B2) 99.65 547.95 T
(Gate B3) 99.65 536.95 T
1 11 Q
(The \336rst ar) 99.65 516.62 T
(gument to) 152.46 516.62 T
4 9.5 Q
(generate-gates) 205.27 516.62 T
1 11 Q
( is the number of terminals at the airport,) 285.07 516.62 T
(and the second ar) 99.65 502.62 T
(gument is the number of gates per terminal. T) 185.37 502.62 T
(o keep our pr) 407.38 502.62 T
(oto-) 472.65 502.62 T
(type simple, we assume that every terminal has the same number of gates. W) 99.65 488.62 T
(e) 473.74 488.62 T
(shall make this model mor) 99.65 474.62 T
(e \337exible later) 228.84 474.62 T
(.) 296.09 474.62 T
-0.06 (First we de\336ne a helper method that describes an object using) 126.65 460.62 P
4 9.5 Q
-0.13 (say) 428.67 460.62 P
1 11 Q
-0.06 (, and then) 444.55 460.62 P
(prints a newline character:) 99.65 446.62 T
4 9 Q
(def) 99.65 425.95 T
(ine method say-line \050object\051) 115.85 425.95 T
(say \050object\051;) 110.45 414.95 T
(format \050*window*, \322\134n\323\051;) 110.45 403.95 T
(end;) 99.65 392.95 T
1 11 Q
(Now we de\336ne our pr) 99.65 372.62 T
(ototype) 207.47 372.62 T
4 9.5 Q
(generate-gates) 247.4 372.62 T
1 11 Q
( method:) 327.2 372.62 T
4 9 Q
(def) 99.65 351.95 T
(ine method generate-gates \050number-of-terminals :: <integer>,) 115.85 351.95 T
(gates-per-terminal :: <integer>\051) 261.65 340.95 T
(for \050term :: <integer> from 0 below number-of-terminals\051) 110.45 329.95 T
(for \050gate :: <integer> from 1 to gates-per-terminal\051) 121.25 318.95 T
(say-line \050make\050<gate>, id: generate-gate-id \050term, gate\051\051\051;) 132.05 307.95 T
(format \050*window*, "\134n"\051;) 132.05 296.95 T
(end;) 121.25 285.95 T
(end;) 110.45 274.95 T
(end;) 99.65 263.95 T
1 11 Q
(The) 99.65 243.62 T
4 9.5 Q
(for) 120.81 243.62 T
1 11 Q
( special form has several variations. The pr) 137.91 243.62 T
(eceding method de\336nition) 345.79 243.62 T
(shows the simplest form of) 99.65 229.62 T
4 9.5 Q
(for) 233.87 229.62 T
1 11 Q
(. The local iteration variables) 250.16 229.62 T
4 9.5 Q
(term) 392.94 229.62 T
1 11 Q
( and) 415.74 229.62 T
4 9.5 Q
(gate) 439.86 229.62 T
1 11 Q
( ar) 462.66 229.62 T
(e) 475.06 229.62 T
(initialized to the integers) 99.65 215.62 T
4 9.5 Q
(0) 223.33 215.62 T
1 11 Q
( and) 229.03 215.62 T
4 9.5 Q
(1) 253.15 215.62 T
1 11 Q
( r) 258.86 215.62 T
(espectively) 265.75 215.62 T
(. These variables ar) 318.82 215.62 T
(e incr) 411.79 215.62 T
(emented) 438.44 215.62 T
-0.06 (each time thr) 99.65 201.62 P
-0.06 (ough the loop until they r) 162.99 201.62 P
-0.06 (each their boundaries, which ar) 287.21 201.62 P
-0.06 (e pr) 440.11 201.62 P
-0.06 (ovided) 458.83 201.62 P
(as ar) 99.65 187.62 T
(guments to) 122.21 187.62 T
4 9.5 Q
(generate-gates) 179.68 187.62 T
1 11 Q
(. The body of the inner) 259.48 187.62 T
4 9.5 Q
(for) 372.62 187.62 T
1 11 Q
( loop is executed) 389.72 187.62 T
4 9.5 Q
(gates-per-terminal) 99.65 173.62 T
1 11 Q
( times per iteration of the outer loop. The body of the inner) 202.25 173.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "104" 106
%%Page: "105" 107
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 357.42 702.62 T
2 11 Q
(105) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9.5 Q
0 X
(for) 99.65 665.62 T
1 11 Q
( loop cr) 116.75 665.62 T
(eates instances of) 153.1 665.62 T
4 9.5 Q
(<gate>) 239.88 665.62 T
1 11 Q
(, and initializes the) 274.08 665.62 T
4 9.5 Q
(gate-id) 368.64 665.62 T
1 11 Q
( slot to the value) 408.54 665.62 T
(r) 99.65 651.62 T
(eturned by) 103.79 651.62 T
4 9.5 Q
(generate-gate-id) 159.72 651.62 T
1 11 Q
(. The body of the outer loop is executed) 250.92 651.62 T
4 9.5 Q
(number-) 445.52 651.62 T
(of-terminal) 99.65 637.62 T
1 11 Q
( times.) 162.35 637.62 T
3 15 Q
(8.4  Three approaches to) 99.65 597.95 T
4 13 Q
(generate-gate-id) 248 597.95 T
1 11 Q
-0.32 (In the following sections, we show thr) 99.65 577.62 P
-0.32 (ee appr) 282.79 577.62 P
-0.32 (oaches to generating the gate-id and) 318.63 577.62 P
(illustrate the use of strings,) 99.65 563.62 T
4 9.5 Q
(while) 233.8 563.62 T
1 11 Q
(, a list, pr) 262.3 563.62 T
(edicates,) 306.96 563.62 T
4 9.5 Q
(as) 351.56 563.62 T
1 11 Q
(, and \336nally) 362.96 563.62 T
4 9.5 Q
(format-to-) 423.66 563.62 T
(string) 99.65 549.62 T
1 11 Q
(. Each appr) 133.85 549.62 T
(oach is an impr) 188.47 549.62 T
(ovement on the pr) 262.95 549.62 T
(evious appr) 352.09 549.62 T
(oach, so keep) 409.7 549.62 T
(r) 99.65 535.62 T
(eading!) 103.79 535.62 T
3 13 Q
(8.4.1  First approach \321 using strings) 99.65 504.29 T
1 11 Q
(T) 99.65 484.62 T
(o pr) 105.38 484.62 T
(oduce the gate-id, we must translate) 124.89 484.62 T
4 9.5 Q
(term) 304.06 484.62 T
1 11 Q
( \050an integer\051 into a letter) 326.86 484.62 T
(, and pr) 443.16 484.62 T
(o-) 480.8 484.62 T
(duce a string with the \336rst element containing this letter) 99.65 470.62 T
(, followed by the charac-) 371.29 470.62 T
(ters that r) 99.65 456.62 T
(epr) 146.23 456.62 T
(esent the gate number) 162.26 456.62 T
(. The following code pr) 269.06 456.62 T
(oduces a gate-id:) 381.83 456.62 T
6 9 Q
(// Def) 99.65 435.95 T
(ine some constants which map integers to characters for) 132.05 435.95 T
(// uppercase letters and numbers.) 99.65 424.95 T
4 F
(def) 99.65 413.95 T
(ine constant $letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";) 115.85 413.95 T
(def) 99.65 402.95 T
(ine constant $digits = "0123456789";) 115.85 402.95 T
(def) 99.65 383.95 T
(ine method generate-gate-id \050term :: <integer>, gate :: <integer>\051) 115.85 383.95 T
(let result = make\050<string>, size: 2\051;) 110.45 372.95 T
(result[0] := $letters[term];) 110.45 361.95 T
(result[1] := $digits[gate];) 110.45 350.95 T
(result;) 110.45 339.95 T
(end;) 99.65 328.95 T
1 11 Q
(Her) 99.65 308.62 T
(e we show what) 118.22 308.62 T
4 9.5 Q
(generate-gate-id) 199.84 308.62 T
1 11 Q
( r) 291.04 308.62 T
(eturns for certain ar) 297.93 308.62 T
(guments:) 393.93 308.62 T
5 9 Q
(?) 99.65 287.95 T
4 F
(generate-gate-id \0500, 1\051;) 110.45 287.95 T
5 F
("A1") 99.65 276.95 T
(?) 99.65 257.95 T
4 F
(generate-gate-id \0501, 5\051;) 110.45 257.95 T
5 F
("B5") 99.65 246.95 T
1 11 Q
(Note that terminals ar) 99.65 226.62 T
(e number) 206.5 226.62 T
(ed starting at zer) 252.77 226.62 T
(o, but gates ar) 334.41 226.62 T
(e typically num-) 402.5 226.62 T
(ber) 99.65 212.62 T
(ed starting at one.) 115.15 212.62 T
(T) 126.65 198.62 T
(o implement this simple gate-id generator) 132.38 198.62 T
(, \336rst we de\336ne two constant) 335.69 198.62 T
(strings. The) 99.65 184.62 T
4 9.5 Q
($letters) 159.29 184.62 T
1 11 Q
( constant is initialized to) 204.89 184.62 T
4 9.5 Q
("ABC...Z") 326.11 184.62 T
1 11 Q
(, a string containing all) 377.41 184.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "105" 107
%%Page: "106" 108
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(106) 63.65 702.62 T
0 9.5 Q
(8.4 Three approaches to generate-gate-id) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(the upper) 99.65 665.62 T
(case letters of the English alphabet. The) 146.93 665.62 T
4 9.5 Q
($digits) 341.36 665.62 T
1 11 Q
( constant is initialized) 381.26 665.62 T
(to) 99.65 651.62 T
4 9.5 Q
("0123456789") 111.99 651.62 T
1 11 Q
(, a string containing characters r) 180.39 651.62 T
(epr) 335.93 651.62 T
(esenting the ten digits.) 351.96 651.62 T
(In the) 126.65 637.62 T
4 9.5 Q
(generate-gate-id) 157.51 637.62 T
1 11 Q
( method, we cr) 248.71 637.62 T
(eate the local variable) 320.89 637.62 T
4 9.5 Q
(result) 428.87 637.62 T
1 11 Q
( to) 463.07 637.62 T
(hold the r) 99.65 623.62 T
(esult that the method will r) 146.88 623.62 T
(eturn; this is a) 278.94 623.62 T
4 9.5 Q
(<string>) 350.14 623.62 T
1 11 Q
( with two elements.) 395.74 623.62 T
(The method sets the \336rst element of) 99.65 609.62 T
4 9.5 Q
(result) 276.08 609.62 T
1 11 Q
( to the appr) 310.28 609.62 T
(opriate element of the) 366.24 609.62 T
4 9.5 Q
($letters) 99.65 595.62 T
1 11 Q
( constant, and sets the second element of) 145.25 595.62 T
4 9.5 Q
(result) 345.42 595.62 T
1 11 Q
( to the appr) 379.61 595.62 T
(opriate ele-) 435.58 595.62 T
(ment of the) 99.65 581.62 T
4 9.5 Q
($digits) 157.79 581.62 T
1 11 Q
( constant.) 197.69 581.62 T
-0.45 (The \336nal statement in the) 126.65 567.62 P
4 9.5 Q
-0.94 (generate-gate-id) 250.73 567.62 P
1 11 Q
-0.45 ( method causes the entir) 341.93 567.62 P
-0.45 (e r) 458.29 567.62 P
-0.45 (esult) 470 567.62 P
(to be r) 99.65 553.62 T
(eturned; the r) 130.24 553.62 T
(esult is a string containing the terminal letter and the gate) 196.12 553.62 T
(number) 99.65 539.62 T
(. If that \336nal statement wer) 137.28 539.62 T
(e missing, then) 268.15 539.62 T
4 9.5 Q
(generate-gate-id) 344.04 539.62 T
1 11 Q
( would) 435.23 539.62 T
(r) 99.65 525.62 T
(eturn only the character that r) 103.79 525.62 T
(epr) 248.7 525.62 T
(esents the gate number) 264.73 525.62 T
(.) 376.19 525.62 T
3 13 Q
(8.4.2  Second approach \321 using) 99.65 494.29 T
4 F
(as) 266.72 494.29 T
3 F
(,) 282.32 494.29 T
4 F
(while) 288.25 494.29 T
3 F
(, and a list) 327.25 494.29 T
1 11 Q
(The technique we used in the \336rst appr) 99.65 474.62 T
(oach works \336ne for airports with 26 or) 289.83 474.62 T
(fewer terminals, and with terminals that do not have mor) 99.65 460.62 T
(e than nine gates. The) 378.66 460.62 T
(\336rst assumption is pr) 99.65 446.62 T
(obably pr) 202.75 446.62 T
(etty accurate; however) 249.25 446.62 T
(, lar) 358.52 446.62 T
(ge airports can have) 376.87 446.62 T
(mor) 99.65 432.62 T
(e than nine gates in their terminals. In this section, we r) 119.51 432.62 T
(ede\336ne) 387.68 432.62 T
4 9.5 Q
(generate-) 426.02 432.62 T
(gate-id) 99.65 418.62 T
1 11 Q
( to handle gate numbers of arbitrary length.) 139.55 418.62 T
(First, we de\336ne a helper method named) 126.65 404.62 T
4 9.5 Q
(as) 323.22 404.62 T
1 11 Q
(, to convert integers to strings.) 334.62 404.62 T
(The) 99.65 390.62 T
4 9.5 Q
(as) 120.81 390.62 T
1 11 Q
( generic function is used to convert an instance of one class to a new) 132.21 390.62 T
(instance of a dif) 99.65 376.62 T
(fer) 176.36 376.62 T
(ent class. In the) 189.44 376.62 T
4 9.5 Q
(as) 266.73 376.62 T
1 11 Q
( method in the following example, we use a) 278.13 376.62 T
(list to hold \050temporarily\051 the characters of the supplied integer) 99.65 362.62 T
(, which we add to) 402.04 362.62 T
-0.27 (the list one at a time using the) 99.65 348.62 P
4 9.5 Q
-0.56 (add!) 245.68 348.62 P
1 11 Q
-0.27 ( function. At the end of this) 268.48 348.62 P
4 9.5 Q
-0.56 (as) 402.66 348.62 P
1 11 Q
-0.27 ( method, we call) 414.06 348.62 P
-0.22 (as to convert the list of characters into a string of characters; this call invokes a dif-) 99.65 334.62 P
(fer) 99.65 320.62 T
(ent, built-in) 112.73 320.62 T
4 9.5 Q
(as) 172.2 320.62 T
1 11 Q
( method.) 183.6 320.62 T
(Normally) 126.65 306.62 T
(, we would expect a library to implement the) 172.65 306.62 T
4 9.5 Q
(as) 393.73 306.62 T
1 11 Q
( method that fol-) 405.13 306.62 T
-0.05 (lows. W) 99.65 292.62 P
-0.05 (e show how to write this method because it illustrates several useful tech-) 138.13 292.62 P
(niques: singleton dispatching, the) 99.65 278.62 T
4 9.5 Q
(if) 265.87 278.62 T
1 11 Q
(-) 277.27 278.62 T
4 9.5 Q
(elseif) 280.93 278.62 T
1 11 Q
(-) 315.13 278.62 T
4 9.5 Q
(else) 318.8 278.62 T
1 11 Q
( contr) 341.6 278.62 T
(ol constr) 369.37 278.62 T
(uct, and the) 411.13 278.62 T
4 9.5 Q
(while) 99.65 264.62 T
1 11 Q
( iteration constr) 128.15 264.62 T
(uct.) 204.54 264.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "106" 108
%%Page: "107" 109
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 357.42 702.62 T
2 11 Q
(107) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine method as \050class == <string>, integer :: <integer>\051) 115.85 666.95 T
(=> result :: <string>;) 196.85 655.95 T
(if \050integer = 0\051 "0") 110.45 644.95 T
(elseif \050integer < 0\051 concatenate \050"-", as \050<string>, - integer\051\051) 121.25 633.95 T
(else) 121.25 622.95 T
(let result = #\050\051;) 132.05 611.95 T
(while \050integer > 0\051) 132.05 600.95 T
(let \050new-integer, digit\051 = truncate/ \050integer, 10\051;) 142.85 589.95 T
(result := add!\050result, $digits[digit]\051;) 142.85 578.95 T
(integer := new-integer;) 142.85 567.95 T
(end;) 132.05 556.95 T
(as\050<string>, result\051;) 132.05 545.95 T
(end if;) 110.45 534.95 T
(end;) 99.65 523.95 T
1 11 Q
(Note that the \336rst parameter is specialized to a particular object \050the class) 99.65 503.62 T
4 9.5 Q
-0.67 (<string>) 99.65 489.62 P
1 11 Q
-0.32 (\051, and so this method will be selected only if that exact object is pr) 145.25 489.62 P
-0.32 (ovided) 459.09 489.62 P
(as the \336rst ar) 99.65 475.62 T
(gument, and the class of the second object is an integer) 162.22 475.62 T
(.) 427.39 475.62 T
(This) 126.65 461.62 T
4 9.5 Q
(as) 150.41 461.62 T
1 11 Q
( method works as follows: First it checks to see if the integer pr) 161.81 461.62 T
(o-) 467.17 461.62 T
-0.24 (vided is zer) 99.65 447.62 P
-0.24 (o. If so, the answer is simply a string with just the character which r) 155.58 447.62 P
-0.24 (ep-) 480.11 447.62 P
-0.01 (r) 99.65 433.62 P
-0.01 (esents zer) 103.79 433.62 P
-0.01 (o in it. If the integer pr) 151.31 433.62 P
-0.01 (ovided is less than zer) 260.48 433.62 P
-0.01 (o, then the answer will be) 368.04 433.62 P
(a string which starts with a minus sign, followed by the absolute value \050the nega-) 99.65 419.62 T
-0.03 (tion of\051 the negative integer) 99.65 405.62 P
-0.03 (. Otherwise, the integer pr) 233.24 405.62 P
-0.03 (ovided must be positive. In) 360.37 405.62 P
(that case the local variable) 99.65 391.62 T
4 9.5 Q
(result) 230.15 391.62 T
1 11 Q
( is initialized to the empty list, r) 264.35 391.62 T
(epr) 418.14 391.62 T
(esented by) 434.17 391.62 T
4 9.5 Q
(#\050\051) 99.65 377.62 T
1 11 Q
(. This variable will hold the value to be r) 116.75 377.62 T
(eturned by the method.) 312.85 377.62 T
(Now the) 126.65 363.62 T
4 9.5 Q
(while) 171.73 363.62 T
1 11 Q
( iteration constr) 200.23 363.62 T
(uct begins. The expr) 276.62 363.62 T
(ession) 374.58 363.62 T
4 9.5 Q
(integer > 0) 407.53 363.62 T
1 11 Q
( is) 470.23 363.62 T
(evaluated. For at least the \336rst time thr) 99.65 349.62 T
(ough the loop,) 287.73 349.62 T
4 9.5 Q
(integer > 0) 360.96 349.62 T
1 11 Q
( cannot be) 423.66 349.62 T
-0.31 (false, because we have alr) 99.65 335.62 P
-0.31 (eady determined the integer is positive. Because the test) 223.45 335.62 P
(expr) 99.65 321.62 T
(ession for the) 121.35 321.62 T
4 9.5 Q
(while) 189.08 321.62 T
1 11 Q
( loop is not false, the body is executed. In the body of) 217.58 321.62 T
4 9.5 Q
(while) 99.65 307.62 T
1 11 Q
(, tr) 128.15 307.62 T
(uncating integer division is performed on) 141.49 307.62 T
4 9.5 Q
(integer) 346.73 307.62 T
1 11 Q
( by 10. This integer) 386.63 307.62 T
(division r) 99.65 293.62 T
(eturns two values, and these values ar) 146.16 293.62 T
(e used to initialize the local vari-) 331.49 293.62 T
-0.19 (ables) 99.65 279.62 P
4 9.5 Q
-0.4 (new-integer) 126.92 279.62 P
1 11 Q
-0.19 ( and) 189.62 279.62 P
4 9.5 Q
-0.4 (digit) 213.37 279.62 P
1 11 Q
-0.19 (. The \336rst value is the r) 241.87 279.62 P
-0.19 (esult of the division followed) 351.72 279.62 P
-0.28 (by tr) 99.65 265.62 P
-0.28 (uncation, and the second value is the r) 122.16 265.62 P
-0.28 (emainder of the division. For example,) 306.69 265.62 P
(if the value of) 99.65 251.62 T
4 9.5 Q
(integer) 169.26 251.62 T
1 11 Q
( is 19, then) 209.16 251.62 T
4 9.5 Q
(new-integer) 263.43 251.62 T
1 11 Q
( is initialized to 1, and) 326.13 251.62 T
4 9.5 Q
(digit) 435.94 251.62 T
1 11 Q
( is ini-) 464.44 251.62 T
-0.04 (tialized to 9 \05019 divided by 10 is 1, with a r) 99.65 237.62 P
-0.04 (emainder of 9\051. \050Dylan has other forms) 304.73 237.62 P
(of integer division which r) 99.65 223.62 T
(ound the r) 228.33 223.62 T
(esult in various ways. This book does not) 278.99 223.62 T
(cover all the forms of division.\051) 99.65 209.62 T
(Next, the r) 126.65 195.62 T
(emainder) 177.97 195.62 T
(, which is one digit of the integer) 223.58 195.62 T
(, is converted to the) 382.31 195.62 T
(character which r) 99.65 181.62 T
(epr) 184.07 181.62 T
(esents that digit. Then that character is added to the fr) 200.1 181.62 T
(ont of) 462.16 181.62 T
(the r) 99.65 167.62 T
(esult list using) 121.8 167.62 T
4 9.5 Q
(add!) 195.07 167.62 T
1 11 Q
(.) 217.87 167.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "107" 109
%%Page: "108" 110
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(108) 63.65 702.62 T
0 9.5 Q
(8.4 Three approaches to generate-gate-id) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(The last action in the body of) 126.65 665.62 T
4 9.5 Q
(while) 270.3 665.62 T
1 11 Q
( alters the value of) 298.8 665.62 T
4 9.5 Q
(integer) 390.86 665.62 T
1 11 Q
( to be the) 430.76 665.62 T
-0.08 (quotient computed at the start of the body) 99.65 651.62 P
-0.08 (. When we r) 303.28 651.62 P
-0.08 (each the end of the body of) 361.71 651.62 P
4 9.5 Q
(while) 99.65 637.62 T
1 11 Q
(, execution loops back to the top of the loop, wher) 128.15 637.62 T
(e the test expr) 369.94 637.62 T
(ession is) 437.52 637.62 T
(checked again. If) 99.65 623.62 T
4 9.5 Q
(integer) 184.28 623.62 T
1 11 Q
( is gr) 224.18 623.62 T
(eater than zer) 247.81 623.62 T
(o, then the iteration continues; other-) 314.08 623.62 T
(wise, contr) 99.65 609.62 T
(ol r) 152.48 609.62 T
(eturns to the point after the end of the) 168.59 609.62 T
4 9.5 Q
(while) 355.83 609.62 T
1 11 Q
( body) 384.33 609.62 T
(.) 410.78 609.62 T
-0.18 (Once all the digits of the integer number ar) 126.65 595.62 P
-0.18 (e collected as separate characters) 334.24 595.62 P
-0.27 (in the r) 99.65 581.62 P
-0.27 (esult list, the list is converted into a string using the appr) 133.62 581.62 P
-0.27 (opriate built-in) 406.31 581.62 P
4 9.5 Q
-0.55 (as) 481.76 581.62 P
1 11 Q
(function.) 99.65 567.62 T
4 9 Q
(def) 99.65 546.95 T
(ine method generate-gate-id \050term :: <integer>, gate :: <integer>\051) 115.85 546.95 T
(concatenate\050as \050<string>, $letters[term]\051,) 110.45 535.95 T
(as \050<string>, gate\051;) 175.25 524.95 T
(end;) 99.65 513.95 T
1 11 Q
(The) 99.65 493.62 T
4 9.5 Q
(generate-gate-id) 120.81 493.62 T
1 11 Q
( method above uses the built-in) 212.01 493.62 T
4 9.5 Q
(as) 367.74 493.62 T
1 11 Q
( method to convert a) 379.14 493.62 T
-0.43 (character to a string, and then uses the) 99.65 479.62 P
4 9.5 Q
-0.89 (as) 285.86 479.62 P
1 11 Q
-0.43 ( method we de\336ned above to convert the) 297.27 479.62 P
(gate number \050r) 99.65 465.62 T
(epr) 171.87 465.62 T
(esented as an integer\051 into a string. These two strings ar) 187.9 465.62 T
(e sup-) 457.99 465.62 T
-0.28 (plied as two ar) 99.65 451.62 P
-0.28 (guments to) 170.63 451.62 P
4 9.5 Q
-0.58 (concatenate) 227.54 451.62 P
1 11 Q
-0.28 (, which combines the two strings into one,) 290.24 451.62 P
(and r) 99.65 437.62 T
(eturns this combined string, which is the gate-id string we need.) 125.17 437.62 T
3 13 Q
(8.4.3  Predicates) 99.65 406.29 T
1 11 Q
(As you might expect,) 99.65 386.62 T
4 9.5 Q
(>) 205.69 386.62 T
1 11 Q
( is a) 211.39 386.62 T
2 F
(predicate) 233 386.62 T
1 F
( which r) 279.43 386.62 T
(eturns tr) 319.14 386.62 T
(ue if and only if the ar) 360.64 386.62 T
(gu-) 468.02 386.62 T
-0.11 (ment to the left is gr) 99.65 372.62 P
-0.11 (eater than the ar) 196.5 372.62 P
-0.11 (gument on the right. Pr) 275.17 372.62 P
-0.11 (edicates ar) 388.29 372.62 P
-0.11 (e functions) 439.67 372.62 P
(that r) 99.65 358.62 T
(eturn tr) 125.62 358.62 T
(ue or false. Ther) 162.45 358.62 T
(e is only one false value in Dylan, which is r) 240.56 358.62 T
(epr) 453.87 358.62 T
(e-) 469.9 358.62 T
(sented by) 99.65 344.62 T
4 9.5 Q
(#f) 149.26 344.62 T
1 11 Q
(. Every value except false may be used to r) 160.66 344.62 T
(epr) 366.94 344.62 T
(esent tr) 382.97 344.62 T
(ue, including) 418.75 344.62 T
-0.03 (the canonical tr) 99.65 330.62 P
-0.03 (uth value r) 174.17 330.62 P
-0.03 (epr) 227.2 330.62 P
-0.03 (esented by) 243.23 330.62 P
4 9.5 Q
-0.06 (#t) 298.05 330.62 P
1 11 Q
-0.03 (, empty lists, vectors, strings, and any-) 309.45 330.62 P
(thing else that is not) 99.65 316.62 T
4 9.5 Q
(#f) 200.44 316.62 T
1 11 Q
(. Thus, pr) 211.84 316.62 T
(edicates must r) 258.04 316.62 T
(eturn) 331.38 316.62 T
4 9.5 Q
(#f) 360.36 316.62 T
1 11 Q
( for false, but may r) 371.76 316.62 T
(eturn) 466.35 316.62 T
(any other value to indicate tr) 99.65 302.62 T
(ue. Dylan has many built-in pr) 240.04 302.62 T
(edicates.) 389.2 302.62 T
3 13 Q
(8.4.4  Predicates for equality) 99.65 271.29 T
1 11 Q
(Dylan has two r) 99.65 251.62 T
(elated pr) 177.11 251.62 T
(edicates for testing equality:) 220.16 251.62 T
4 9.5 Q
(==) 359.51 251.62 T
1 11 Q
( and) 370.91 251.62 T
4 9.5 Q
( =) 392.29 251.62 T
1 11 Q
(. The) 403.68 251.62 T
4 9.5 Q
(==) 430.35 251.62 T
1 11 Q
( pr) 441.75 251.62 T
(edicate) 455.26 251.62 T
-0.08 (determines whether two objects ar) 99.65 237.62 P
-0.08 (e identical. For some objects \050like numbers\051,) 266.71 237.62 P
4 9.5 Q
-0.16 (==) 481.57 237.62 P
1 11 Q
(is tr) 99.65 223.62 T
(ue if the objects have the same value. For other objects \050like strings, other col-) 118.11 223.62 T
(lections, and instances of user) 99.65 209.62 T
(-de\336ned classes\051,) 244.19 209.62 T
4 9.5 Q
( ==) 326.9 209.62 T
1 11 Q
( is tr) 344 209.62 T
(ue only if its ar) 365.2 209.62 T
(guments) 437.79 209.62 T
(r) 99.65 195.62 T
(efer to the exact same object. The) 103.79 195.62 T
4 9.5 Q
(==) 266.07 195.62 T
1 11 Q
( pr) 277.47 195.62 T
(edicate is the str) 290.98 195.62 T
(onger test for equality) 369.17 195.62 T
(.) 475.13 195.62 T
-0.37 (The) 126.65 181.62 P
4 9.5 Q
-0.76 (=) 147.45 181.62 P
1 11 Q
-0.37 ( pr) 153.15 181.62 P
-0.37 (edicate tests its two ar) 166.29 181.62 P
-0.37 (guments to see whether they ar) 271.89 181.62 P
-0.37 (e similar) 422.45 181.62 P
-0.37 (. If the) 463.12 181.62 P
-0.43 (ar) 99.65 167.62 P
-0.43 (guments ar) 109.29 167.62 P
-0.43 (e) 163.65 167.62 P
4 9.5 Q
-0.88 (==) 171.24 167.62 P
1 11 Q
-0.43 (, then they ar) 182.65 167.62 P
-0.43 (e always) 245.05 167.62 P
4 9.5 Q
-0.88 (=) 289.12 167.62 P
1 11 Q
-0.43 ( as well. The converse does not hold. T) 294.83 167.62 P
-0.43 (wo) 478.14 167.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "108" 110
%%Page: "109" 111
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 357.42 702.62 T
2 11 Q
(109) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(strings ar) 99.65 665.62 T
(e) 145.02 665.62 T
4 9.5 Q
(=) 153.04 665.62 T
1 11 Q
( if they have the same elements, but they ar) 158.74 665.62 T
(e not) 368.96 665.62 T
4 9.5 Q
(==) 395.73 665.62 T
1 11 Q
( unless they ar) 407.13 665.62 T
(e) 477.23 665.62 T
(the same string object. For example:) 99.65 651.62 T
5 9 Q
(?) 99.65 630.95 T
4 F
(2 == 2;) 110.45 630.95 T
5 F
(#t) 99.65 619.95 T
(?) 99.65 600.95 T
4 F
("abc" = "abc";) 110.45 600.95 T
5 F
(#t) 99.65 589.95 T
(?) 99.65 570.95 T
4 F
("abc" == "abc";) 110.45 570.95 T
5 F
(#f) 99.65 559.95 T
1 11 Q
(The two) 99.65 539.62 T
4 9 Q
(") 142.33 539.62 T
4 9.5 Q
(abc) 147.73 539.62 T
4 9 Q
(") 164.83 539.62 T
1 11 Q
( strings ar) 170.23 539.62 T
(e dif) 218.35 539.62 T
(fer) 239.76 539.62 T
(ent objects. If we use) 252.84 539.62 T
4 9.5 Q
(let) 356.04 539.62 T
1 11 Q
( as shown below) 373.14 539.62 T
(, we can) 452.92 539.62 T
(compar) 99.65 525.62 T
(e the string to itself:) 136.51 525.62 T
5 9 Q
(?) 99.65 504.95 T
4 F
(begin) 110.45 504.95 T
(let string = "abc";) 115.85 493.95 T
(string == string;) 115.85 482.95 T
(end;) 110.45 471.95 T
5 F
(#t) 99.65 460.95 T
1 11 Q
(Many operations on collections copy their ar) 99.65 440.62 T
(gument when computing the r) 315.94 440.62 T
(esult) 464.46 440.62 T
(of the function. For example,) 99.65 426.62 T
4 9.5 Q
(copy-sequence) 242.31 426.62 T
1 11 Q
( copies its ar) 316.41 426.62 T
(gument. Thus, the ar) 376.39 426.62 T
(gu-) 477.2 426.62 T
(ment and the r) 99.65 412.62 T
(esult ar) 170.9 412.62 T
(e dif) 206.65 412.62 T
(fer) 228.05 412.62 T
(ent objects, as shown below:) 241.13 412.62 T
5 9 Q
(?) 99.65 391.95 T
4 F
(begin) 110.45 391.95 T
(let string = "abc";) 115.85 380.95 T
(string == copy-sequence \050string\051;) 115.85 369.95 T
(end;) 110.45 358.95 T
5 F
(#f) 99.65 347.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Convention:) 132.65 307.62 T
1 F
( Dylan has a convention of putting an exclamation point) 194.68 307.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(at the end of the name of operators that can destr) 132.65 293.62 T
(uctively modify a) 371.05 293.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.31 (data str) 132.65 279.62 P
-0.31 (uctur) 168.9 279.62 P
-0.31 (e, or that r) 194.78 279.62 P
-0.31 (eturn a data str) 243.69 279.62 P
-0.31 (uctur) 316.56 279.62 P
-0.31 (e that shar) 342.44 279.62 P
-0.31 (es str) 392.38 279.62 P
-0.31 (uctur) 417.26 279.62 P
-0.31 (e with) 443.14 279.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the data str) 132.65 265.62 T
(uctur) 187.22 265.62 T
(e given as the ar) 213.1 265.62 T
(gument. For example,) 291.64 265.62 T
4 9.5 Q
(add!) 400.82 265.62 T
1 11 Q
( takes a) 423.62 265.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.09 (sequence and a new element, and r) 132.65 251.62 P
-0.09 (eturns a sequence with the element) 302.38 251.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(added to it. In contrast, note that the) 132.65 237.62 T
4 9.5 Q
(add) 312.14 237.62 T
1 11 Q
( function r) 329.23 237.62 T
(eturns a new) 379.66 237.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sequence that does not shar) 132.65 223.62 T
(e str) 266.64 223.62 T
(uctur) 287.17 223.62 T
(e with the sequence that was its) 313.05 223.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 132.65 209.62 T
(gument.) 142.29 209.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 320.83 126.65 202.08 2 L
V
0.25 H
0 Z
N
477.65 320.83 477.65 202.08 2 L
V
N
126.52 320.95 477.77 320.95 2 L
V
N
126.52 201.95 477.77 201.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "109" 111
%%Page: "110" 112
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(1) 63.65 702.62 T
(10) 68.74 702.62 T
0 9.5 Q
(8.5 Vectors) 89.24 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(8.4.5  Third approach \321 using) 99.65 664.29 T
4 F
(format-to-string) 254.87 664.29 T
1 11 Q
-0.44 (The \336rst two appr) 99.65 644.62 P
-0.44 (oaches wer) 185.88 644.62 P
-0.44 (e useful for illustrating) 239.51 644.62 P
4 9.5 Q
-0.91 (for) 351.74 644.62 P
1 11 Q
-0.44 ( and) 368.84 644.62 P
4 9.5 Q
-0.91 (while) 392.09 644.62 P
1 11 Q
-0.44 (, but ther) 420.59 644.62 P
-0.44 (e is an) 463.67 644.62 P
(easier way to implement) 99.65 630.62 T
4 9.5 Q
(generate-gate-id) 222.24 630.62 T
1 11 Q
(. W) 313.44 630.62 T
(e can use a special version of) 328.93 630.62 T
4 9.5 Q
(for-) 471.4 630.62 T
(mat) 99.65 616.62 T
1 11 Q
( which pr) 116.75 616.62 T
(oduces a string rather than sending characters somewher) 163.07 616.62 T
(e. So, we) 440.45 616.62 T
(can write) 99.65 602.62 T
4 9.5 Q
(generate-gate-id) 147.51 602.62 T
1 11 Q
( mor) 238.71 602.62 T
(e succinctly:) 261.33 602.62 T
4 9 Q
(def) 99.65 581.95 T
(ine method generate-gate-id \050term :: <integer>, gate :: <integer>\051) 115.85 581.95 T
(format-to-string \050"%c%d", $letters[term], gate\051;) 110.45 570.95 T
(end;) 99.65 559.95 T
1 11 Q
(For those familiar with C I/O libraries,) 99.65 539.62 T
4 9.5 Q
(format \050*window*, ...\051) 291.36 539.62 T
1 11 Q
( is similar to) 416.76 539.62 T
4 9.5 Q
(printf) 99.65 525.62 T
1 11 Q
(, and) 133.85 525.62 T
4 9.5 Q
(format-to-string \050...\051) 160.72 525.62 T
1 11 Q
( is similar to) 286.12 525.62 T
4 9.5 Q
(sprintf) 348.4 525.62 T
1 11 Q
(.) 388.3 525.62 T
3 15 Q
(8.5  V) 99.65 485.95 T
(ectors) 131.12 485.95 T
1 11 Q
-0.03 (In this section, we de\336ne the) 99.65 465.62 P
4 9.5 Q
-0.07 (<airport>) 240.7 465.62 P
1 11 Q
-0.03 ( class, and stor) 291.99 465.62 P
-0.03 (e the gates of the airport in) 362.84 465.62 P
-0.13 (the) 99.65 451.62 P
4 9.5 Q
-0.27 (<airport>) 117.53 451.62 P
1 11 Q
-0.13 ( instance. The) 168.83 451.62 P
4 9.5 Q
-0.27 (<airport>) 237.76 451.62 P
1 11 Q
-0.13 ( class uses a vector as the type of the) 289.06 451.62 P
4 9.5 Q
-0.27 (gate-) 467.15 451.62 P
(instances) 99.65 437.62 T
1 11 Q
( slot.) 150.95 437.62 T
4 9 Q
(def) 99.65 416.95 T
(ine class <airport> \050<physical-object>\051) 115.85 416.95 T
6 F
(// The name of the airport, such as "Logan International Airport") 110.45 405.95 T
4 F
(slot name) 110.45 394.95 T
( :: <string>,) 261.65 394.95 T
(init-keyword: name:;) 342.65 394.95 T
6 F
(// The three letter abbreviation, such as "BOS") 110.45 383.95 T
4 F
(slot code) 110.45 372.95 T
( :: <string>,) 261.65 372.95 T
(init-keyword: code:;) 342.65 372.95 T
6 F
(// How many gates are at the airport) 110.45 361.95 T
4 F
(virtual slot number-of-gates :: <integer>, setter: #f;) 110.45 350.95 T
(slot gate-instances) 110.45 339.95 T
(:: <vector>;) 267.05 339.95 T
(required keyword gates-per-terminal:, type: <vector>;) 110.45 328.95 T
(keyword gate-capacity:, type: <size>, init-value: *default-capacity*;) 110.45 317.95 T
(end;) 99.65 306.95 T
3 13 Q
(8.5.1  Use of a vector to store gates) 99.65 277.29 T
1 11 Q
(W) 99.65 257.62 T
(e de\336ned an initial version of the) 109.64 257.62 T
4 9.5 Q
(generate-gates) 272.41 257.62 T
1 11 Q
( method in Section 8.3.2. W) 352.21 257.62 T
(e) 483.12 257.62 T
(need to modify that method so that it no longer assumes each terminal has the) 99.65 243.62 T
(same number of gates.) 99.65 229.62 T
(Befor) 126.65 215.62 T
(e r) 152.45 215.62 T
(ede\336ning the) 164.62 215.62 T
4 9.5 Q
(generate-gates) 231.41 215.62 T
1 11 Q
( method, it is helpful to see a sample) 311.21 215.62 T
(call to it. Below) 99.65 201.62 T
(,) 173.17 201.62 T
4 9.5 Q
(generate-gates) 178.67 201.62 T
1 11 Q
( is called, and the r) 258.47 201.62 T
(esult \050a vector of gate) 349.64 201.62 T
-0.18 (instances\051 is r) 99.65 187.62 P
-0.18 (eturned to the) 165.03 187.62 P
4 9.5 Q
-0.37 (do) 235.82 187.62 P
1 11 Q
-0.18 ( function which calls the) 247.22 187.62 P
4 9.5 Q
-0.37 (say-line) 367.61 187.62 P
1 11 Q
-0.18 ( method on each) 413.21 187.62 P
(element of the r) 99.65 173.62 T
(esulting vector) 175.68 173.62 T
(.) 246.99 173.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "110" 112
%%Page: "111" 113
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 358.23 702.62 T
2 11 Q
(1) 515.96 702.62 T
(1) 521.05 702.62 T
(1) 526.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
6 9 Q
0 X
(// Create the gates for the airport assuming three terminals,) 99.65 666.95 T
(// the f) 99.65 655.95 T
(irst with 5 gates, the second with 3 gates, and so on.) 142.85 655.95 T
5 F
(?) 99.65 644.95 T
4 F
(do \050say-line, generate-gates \050#[5, 3, 2]\051\051;) 110.45 644.95 T
5 F
(Gate A1) 99.65 633.95 T
(Gate A2) 99.65 622.95 T
(Gate A3) 99.65 611.95 T
(Gate A4) 99.65 600.95 T
(Gate A5) 99.65 589.95 T
(Gate B1) 99.65 578.95 T
(Gate B2) 99.65 567.95 T
(Gate B3) 99.65 556.95 T
(Gate C1) 99.65 545.95 T
(Gate C2) 99.65 534.95 T
1 11 Q
(Her) 99.65 514.62 T
(e we r) 118.22 514.62 T
(ede\336ne the) 147.57 514.62 T
4 9.5 Q
(generate-gates) 203.92 514.62 T
1 11 Q
( method:) 283.72 514.62 T
6 9 Q
(// Gates-per-terminal is a vector. Each element of the vector is the) 99.65 493.95 T
(// number of gates to create for the terminal at that index.) 99.65 482.95 T
(// Returns a vector of all the gate instances.) 99.65 471.95 T
4 F
(def) 99.65 460.95 T
(ine method generate-gates \050gates-per-terminal) 115.85 460.95 T
( :: <vector>,) 375.05 460.95 T
(default-gate-capacity :: <size>\051) 261.65 449.95 T
(let result = make\050<vector>, size: reduce1\050\134+, gates-per-terminal\051\051;) 110.45 438.95 T
(let result-index = 0;) 110.45 427.95 T
(for \050term :: <integer> from 0 below gates-per-terminal.size\051) 110.45 416.95 T
(for \050gate :: <integer> from 1 to gates-per-terminal[term]\051) 121.25 405.95 T
(result[result-index] :=) 132.05 394.95 T
(make\050<gate>, id: generate-gate-id \050term, gate\051,) 142.85 383.95 T
(capacity: default-gate-capacity\051;) 169.85 372.95 T
(result-index := result-index + 1;) 132.05 361.95 T
(end;) 121.25 350.95 T
(end;) 110.45 339.95 T
(end;) 99.65 328.95 T
1 11 Q
(This version of) 99.65 308.62 T
4 9.5 Q
(generate-gates) 174.68 308.62 T
1 11 Q
( \336rst makes a vector to hold all the gates and) 254.48 308.62 T
-0.07 (stor) 99.65 294.62 P
-0.07 (es it in the) 118.05 294.62 P
4 9.5 Q
-0.15 (result) 170.33 294.62 P
1 11 Q
-0.07 ( variable. The method computes the size of the vector using) 204.53 294.62 P
(the function) 99.65 280.62 T
4 9.5 Q
(reduce1) 161.18 280.62 T
1 11 Q
(, which in this case sums all the elements of the) 201.08 280.62 T
4 9.5 Q
(gates-per-) 433.05 280.62 T
(terminal) 99.65 266.62 T
1 11 Q
( vector) 145.25 266.62 T
(. The generic function) 177.49 266.62 T
4 9.5 Q
(reduce1) 285.92 266.62 T
1 11 Q
( takes a two-ar) 325.82 266.62 T
(gument function) 396.78 266.62 T
-0.36 (and a sequence, and transforms the sequence into a single value. By pr) 99.65 252.62 P
-0.36 (oviding the) 437.75 252.62 P
4 9.5 Q
(+) 99.65 238.62 T
1 11 Q
( generic function, the transformation simply sums all the elements in the) 105.35 238.62 T
(sequence, in this case) 99.65 224.62 T
4 9.5 Q
(gates-per-terminal) 205.72 224.62 T
1 11 Q
(. Dylan pr) 308.32 224.62 T
(ovides many variations of) 357.06 224.62 T
(this function.) 99.65 210.62 T
(Note that the call to) 126.65 196.62 T
4 9.5 Q
(reduce1) 225.11 196.62 T
1 11 Q
( has a backslash befor) 265.01 196.62 T
(e the name of the) 370.26 196.62 T
4 9.5 Q
(+) 456.34 196.62 T
1 11 Q
(generic function. The backslash is necessary befor) 99.65 182.62 T
(e in\336x operators like) 340.73 182.62 T
4 9.5 Q
(+) 443.06 182.62 T
1 11 Q
( in this) 448.76 182.62 T
(situation because otherwise it is har) 99.65 168.62 T
(d to tell if the expr) 273.1 168.62 T
(ession is trying to add) 362.24 168.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "111" 113
%%Page: "112" 114
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(1) 63.65 702.62 T
(12) 68.74 702.62 T
0 9.5 Q
(8.6 Construction of a simple airport) 89.24 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(something, or get the value of the variable) 99.65 665.62 T
4 9.5 Q
(+) 307.39 665.62 T
1 11 Q
( \050which is a generic function\051. In this) 313.09 665.62 T
(case the goal is to pass the generic function for addition to) 99.65 651.62 T
4 9.5 Q
(reduce1) 384.4 651.62 T
1 11 Q
(, to dir) 424.3 651.62 T
(ect it to) 456.22 651.62 T
(perform a sum of the elements of the vector) 99.65 637.62 T
(, so the backslash is necessary) 310.83 637.62 T
(. This is) 454.02 637.62 T
(exactly like the earlier example when we wer) 99.65 623.62 T
(e adding methods to) 318.82 623.62 T
4 9.5 Q
(+) 421.71 623.62 T
1 11 Q
(.) 427.41 623.62 T
(Next,) 126.65 609.62 T
4 9.5 Q
(result-index) 155.82 609.62 T
1 11 Q
( is initialized to zer) 224.22 609.62 T
(o, and then a nested iteration is per-) 316.58 609.62 T
(formed. The number of terminals in the simulation is determined by the number) 99.65 595.62 T
(of elements in the) 99.65 581.62 T
4 9.5 Q
(gates-per-terminal) 188.55 581.62 T
1 11 Q
( vector) 291.15 581.62 T
(. The number of gates in a particu-) 323.39 581.62 T
(lar terminal depends on the value of the corr) 99.65 567.62 T
(esponding element in the) 316.36 567.62 T
4 9.5 Q
(gates-) 442.32 567.62 T
(per-terminal) 99.65 553.62 T
1 11 Q
( vector) 168.05 553.62 T
(. In the body of the inner) 200.29 553.62 T
4 9.5 Q
(for) 323.13 553.62 T
1 11 Q
( loop, a gate instance with the) 340.23 553.62 T
-0.08 (appr) 99.65 539.62 P
-0.08 (opriate gate-id and capacity is cr) 122.52 539.62 P
-0.08 (eated and then stor) 280.26 539.62 P
-0.08 (ed in the appr) 373.31 539.62 P
-0.08 (opriate ele-) 441.05 539.62 P
(ment of the r) 99.65 525.62 T
(esult vector) 161.94 525.62 T
(.) 217.54 525.62 T
(The last action of the body incr) 126.65 511.62 T
(ements the index into the) 276.58 511.62 T
4 9.5 Q
(result) 402.21 511.62 T
1 11 Q
( vector) 436.41 511.62 T
(, so) 468.65 511.62 T
(that the next instance will be stor) 99.65 497.62 T
(ed in the next element of the) 259.85 497.62 T
4 9.5 Q
(result) 400.52 497.62 T
1 11 Q
( vector) 434.72 497.62 T
(.) 466.96 497.62 T
3 13 Q
(8.5.2  Method for) 99.65 466.29 T
4 F
(initialize) 187.32 466.29 T
3 F
( to store the gates in the airport) 265.32 466.29 T
1 11 Q
(W) 99.65 446.62 T
(e use an) 109.64 446.62 T
4 9.5 Q
(initialize) 151.62 446.62 T
1 11 Q
( method for the) 208.62 446.62 T
4 9.5 Q
(<airport>) 286.59 446.62 T
1 11 Q
( class to call) 337.89 446.62 T
4 9.5 Q
(generate-gates) 398.18 446.62 T
1 11 Q
(when an instance of) 99.65 432.62 T
4 9.5 Q
(<airport>) 199.37 432.62 T
1 11 Q
( is made.) 250.67 432.62 T
4 9 Q
(def) 99.65 411.95 T
(ine method initialize \050airport :: <airport>, #key gates-per-terminal,) 115.85 411.95 T
(gate-capacity\051) 240.05 400.95 T
(next-method \050\051;) 110.45 389.95 T
(airport.gate-instances := generate-gates \050gates-per-terminal,) 110.45 378.95 T
(gate-capacity\051;) 337.25 367.95 T
(end;) 99.65 356.95 T
1 11 Q
(This method stor) 99.65 336.62 T
(es the gates in the vector in the) 182.26 336.62 T
4 9.5 Q
(gate-instances) 334.61 336.62 T
1 11 Q
( slot of an) 414.41 336.62 T
4 9.5 Q
(<air-) 464.44 336.62 T
(port>) 99.65 322.62 T
1 11 Q
( instance.) 128.15 322.62 T
3 15 Q
(8.6  Construction of a simple airport) 99.65 282.95 T
1 11 Q
(In this section, we r) 99.65 262.62 T
(ound out the design of the basic airport, and enhance the) 193.96 262.62 T
(design of the airport and gate classes.) 99.65 248.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "112" 114
%%Page: "113" 115
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 357.83 702.62 T
2 11 Q
(1) 515.55 702.62 T
(13) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine class <vehicle-storage> \050<physical-object>\051) 115.85 666.95 T
6 F
(// Simplistic model, just one vehicle at a time.) 110.45 655.95 T
4 F
(slot vehicle-currently-occupying, init-value: #f;) 110.45 644.95 T
6 F
(// How large a vehicle can be stored.) 110.45 633.95 T
4 F
(slot storage-capacity) 110.45 622.95 T
( :: <size>, init-keyword: capacity:,) 283.25 622.95 T
(init-value: *default-capacity*;) 304.85 611.95 T
(slot identif) 110.45 600.95 T
(ier) 175.25 600.95 T
(:: <string>,) 288.65 600.95 T
(required-init-keyword: id:;) 304.85 589.95 T
(slot connected-to) 110.45 578.95 T
(:: <vector>;) 288.65 578.95 T
(end;) 99.65 567.95 T
(def) 99.65 548.95 T
(ine class <gate> \050<vehicle-storage>\051) 115.85 548.95 T
(end;) 99.65 537.95 T
(def) 99.65 518.95 T
(ine method say \050object :: <gate>\051) 115.85 518.95 T
(format \050*window*, "Gate %s", identif) 110.45 507.95 T
(ier \050object\051\051;) 304.85 507.95 T
(end;) 99.65 496.95 T
(def) 99.65 477.95 T
(ine class <runway> \050<vehicle-storage>\051) 115.85 477.95 T
(end;) 99.65 466.95 T
(def) 99.65 447.95 T
(ine method say \050object :: <runway>\051) 115.85 447.95 T
(format \050*window*, "Runway %s", identif) 110.45 436.95 T
(ier \050object\051\051;) 315.65 436.95 T
(end;) 99.65 425.95 T
(def) 99.65 406.95 T
(ine class <taxiway> \050<vehicle-storage>\051) 115.85 406.95 T
(end;) 99.65 395.95 T
(def) 99.65 376.95 T
(ine method say \050object :: <taxiway>\051) 115.85 376.95 T
(format \050*window*, "Taxiway %s", identif) 110.45 365.95 T
(ier \050object\051\051;) 321.05 365.95 T
(end;) 99.65 354.95 T
1 11 Q
(The) 99.65 334.62 T
4 9.5 Q
(connected-to) 120.81 334.62 T
1 11 Q
( slot in the) 189.21 334.62 T
4 9.5 Q
(<vehicle-storage>) 242.53 334.62 T
1 11 Q
( class is used to stor) 339.43 334.62 T
(e) 435.24 334.62 T
4 9.5 Q
(<vehicle-) 443.26 334.62 T
(storage>) 99.65 320.62 T
1 11 Q
( instances which ar) 145.25 320.62 T
(e physically adjacent to a given storage instance. For) 237.78 320.62 T
(example, if a gate is adjacent to a particular taxiway) 99.65 306.62 T
(, the gate is an element of the) 349.95 306.62 T
(taxiway\325s) 99.65 292.62 T
4 9.5 Q
(connected-to) 148.87 292.62 T
1 11 Q
( vector) 217.27 292.62 T
(, and the taxiway is an element of the gate\325s) 249.51 292.62 T
4 9.5 Q
(con-) 463.99 292.62 T
(nected-to) 99.65 278.62 T
1 11 Q
( vector) 150.95 278.62 T
(.) 183.19 278.62 T
(The) 126.65 264.62 T
4 9.5 Q
(gate-id) 147.81 264.62 T
1 11 Q
( and) 187.71 264.62 T
4 9.5 Q
(gate-capacity) 211.84 264.62 T
1 11 Q
( slots have been generalized, and ther) 285.93 264.62 T
(e ar) 468.54 264.62 T
(e) 486.2 264.62 T
(now corr) 99.65 250.62 T
(esponding slots) 143.36 250.62 T
4 9.5 Q
(identif) 222.38 250.62 T
(ier) 262.27 250.62 T
1 11 Q
( and) 279.38 250.62 T
4 9.5 Q
(storage-capacity) 303.5 250.62 T
1 11 Q
( in) 394.7 250.62 T
4 9.5 Q
( <gate>) 407.05 250.62 T
1 11 Q
(\325s super-) 446.95 250.62 T
(class,) 99.65 236.62 T
4 9.5 Q
(<vehicle-storage>) 128.06 236.62 T
1 11 Q
(.) 224.96 236.62 T
(In Chapter 9, we extend this model to permit mor) 126.65 222.62 T
(e than one vehicle per) 367.58 222.62 T
4 9.5 Q
(<vehicle-storage>) 99.65 208.62 T
1 11 Q
( instance for some classes.) 196.55 208.62 T
(Next we r) 126.65 194.62 T
(ede\336ne the) 174.41 194.62 T
4 9.5 Q
(<airport>) 230.75 194.62 T
1 11 Q
( class to add a slot for storing instances of) 282.05 194.62 T
(r) 99.65 180.62 T
(unways:) 103.9 180.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "113" 115
%%Page: "114" 116
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(1) 63.65 702.62 T
(14) 68.74 702.62 T
0 9.5 Q
(8.6 Construction of a simple airport) 89.24 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine class <airport> \050<physical-object>\051) 115.85 666.95 T
6 F
(// The name of the airport, such as "Logan International Airport") 110.45 655.95 T
4 F
(slot name) 110.45 644.95 T
(:: <string>, init-keyword: name:;) 267.05 644.95 T
6 F
(// The three letter abbreviation, such as "BOS") 110.45 633.95 T
4 F
(slot code) 110.45 622.95 T
(:: <string>, init-keyword: code:;) 267.05 622.95 T
6 F
(// How many gates are at the airport) 110.45 611.95 T
4 F
(virtual slot number-of-gates :: <integer>, setter: #f;) 110.45 600.95 T
(slot gate-instances) 110.45 589.95 T
( :: <vector>;) 261.65 589.95 T
(slot runway-instances) 110.45 578.95 T
( :: <vector>;) 261.65 578.95 T
(required keyword gates-per-terminal:, type: <vector>;) 110.45 567.95 T
(keyword gate-capacity:, type: <size>, init-value: *default-capacity*;) 110.45 556.95 T
(end;) 99.65 545.95 T
3 13 Q
(8.6.1  Construction of the objects) 99.65 516.29 T
1 11 Q
(Figur) 99.65 496.62 T
(e 8.4 shows a diagram of a simple airport. It is followed by the code neces-) 125.86 496.62 T
(sary to constr) 99.65 482.62 T
(uct the model of that con\336guration.) 165.16 482.62 T
0 0 0 1 0 0 0 K
99.65 303.97 513.65 311.96 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 203.25 315.63 T
(e 8.4  Diagram of a simple airport) 229.46 315.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
0 0 0 1 0 0 0 K
119.11 331.96 494.19 464.95 C
0 0 0 1 0 0 0 K
211.08 409.06 244.54 435.33 250.59 427.63 217.12 401.36 4 Y
7 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
124.8 340.49 175.8 420.07 R
7 X
V
0 X
N
175.8 394.49 202.8 412.49 R
7 X
V
0 X
N
175.8 358.49 202.8 376.49 R
7 X
V
0 X
N
230.04 458.21 483.75 365.87 474.52 340.49 220.8 432.84 4 Y
7 X
V
0 X
N
1 11 Q
(T) 128.79 385.62 T
(erminal) 134.52 385.62 T
(A) 144.5 369.9 T
(A1) 182.99 401.1 T
(A2) 182.99 365.38 T
(Runway 1) 0 -20 304.18 412.52 TF
(1R-29L) 0 -20 350.04 395.79 TF
202.8 344.34 219.58 425.34 R
7 X
V
0 X
N
7 X
90 450 1.67 4.44 210.43 407.4 G
90 450 1.67 4.44 210.43 407.4 A
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
(T) 0 -270 213.79 348.24 TF
(axiway) 0 -270 213.79 353.97 TF
(Echo) 0 -270 214.34 394.43 TF
7 X
90 450 2.22 6.39 218.21 409.34 G
90 450 2.22 6.39 218.21 409.34 A
90 450 2.22 5.21 67.43 239.55 425.98 GG
90 450 2.22 5.21 67.43 239.55 425.98 AA
397.54 436.65 398.02 437.37 398.83 437.93 400.02 438.4 401.25 438.81 402.7 439.89 405.44 440.83
 447.39 440.62 454.44 446.95 457.55 446.95 454.44 437.17 455.76 436.02 454.56 435.39 440.45 433.4 404.95 433.61
 401.64 433.76 399.18 434.4 397.78 435.29 397.57 435.89 19 Y
V
0.2 H
0 Z
0 X
N
397.54 436.65 455.76 436.02 454.56 435.39 440.45 433.4 404.22 433.64 401.64 433.76 399.18 434.4
 397.78 435.29 397.57 435.89 9 Y
5 X
V
0 X
N
446.9 437.37 458.25 438.98 461.11 438.19 454.48 436.24 448.68 435.92 5 Y
7 X
V
0 X
N
418.78 436.43 441.85 445.79 445.88 445.79 435.56 439.33 431.93 436.27 5 Y
7 X
V
0 X
N
421.25 437.53 417.54 437.61 417.62 433.82 422.46 433.82 422.46 435.63 424.32 435.63 426.09 434.68
 431.33 434.68 431.98 436.32 429.88 437 427.62 437.52 11 Y
7 X
V
0 X
N
3 X
90 450 0.2 1.94 417.66 435.76 G
0 X
90 450 0.2 1.94 417.66 435.76 A
7 X
90 450 0.2 0.43 417.5 435.8 G
0 X
90 450 0.2 0.43 417.5 435.8 A
422.46 433.82 424.32 433.82 424.32 435.63 422.46 435.63 4 Y
4 X
V
0 X
N
424.32 433.82 425.45 434.25 429.88 434.25 431.33 434.68 426.09 434.68 424.32 435.63 6 Y
3 X
V
0 X
N
427.62 437.52 427.62 435.97 426.09 434.68 431.33 434.68 431.98 436.32 429.88 437 428.92 437.23 7 Y
4 X
V
0 X
N
417.3 433.55 417.14 432.68 417.3 431.64 421.58 431.64 421.58 433.28 425.12 433.28 426.25 432.68
 427.79 433.06 428.75 433.49 9 Y
3 X
V
0 X
N
421.58 433.28 423.27 433.28 423.27 431.64 421.58 431.64 4 Y
2 X
V
0 X
N
423.27 431.64 426.25 432.68 425.12 433.28 423.27 433.28 4 Y
V
N
423.11 437.53 441.9 445.11 443.52 445.11 430.74 436.72 429.88 437 427.62 437.52 424.56 437.52 7 Y
6 X
V
0 X
N
435.31 441.03 438.19 441.03 438.59 440.7 436.01 440.7 4 Y
7 X
V
0 X
N
435.31 441.03 435.13 440.78 435.99 440.46 438.59 440.7 436.01 440.7 5 Y
3 X
V
0 X
N
438.59 443.07 441.47 443.07 441.87 442.75 439.29 442.75 4 Y
7 X
V
0 X
N
438.59 443.07 438.41 442.83 439.27 442.51 441.87 442.75 439.29 442.75 5 Y
3 X
V
0 X
N
421.3 437.34 427.47 437.32 427.47 435.82 426.61 435.1 4 Y
5 X
V
441.85 445.79 445.88 445.79 445.41 445.49 441.1 445.48 4 Y
6 X
V
0 X
N
3 X
90 450 0.18 0.06 441.8 445.62 G
0 X
90 450 0.18 0.06 441.8 445.62 A
410.93 438.6 411.38 439.23 R
4 X
V
0 X
N
412.08 438.6 412.53 439.23 R
4 X
V
0 X
N
413.23 438.6 413.68 439.23 R
4 X
V
0 X
N
414.38 438.6 414.83 439.23 R
4 X
V
0 X
N
415.53 438.6 415.98 439.23 R
4 X
V
0 X
N
416.68 438.6 417.13 439.23 R
4 X
V
0 X
N
417.83 438.6 418.28 439.23 R
4 X
V
0 X
N
418.98 438.6 419.43 439.23 R
4 X
V
0 X
N
420.13 438.6 420.58 439.23 R
4 X
V
0 X
N
421.28 438.6 421.73 439.23 R
4 X
V
0 X
N
422.43 438.6 422.88 439.23 R
4 X
V
0 X
N
423.58 438.6 424.03 439.23 R
4 X
V
0 X
N
435.45 438.4 435.9 439.04 R
4 X
V
0 X
N
436.51 438.4 436.96 439.04 R
4 X
V
0 X
N
437.58 438.4 438.03 439.04 R
4 X
V
0 X
N
438.64 438.4 439.1 439.04 R
4 X
V
0 X
N
439.71 438.4 440.16 439.04 R
4 X
V
0 X
N
440.77 438.4 441.22 439.04 R
4 X
V
0 X
N
441.84 438.34 442.29 438.98 R
4 X
V
0 X
N
447.39 440.62 451.9 440.14 2 L
4 X
V
2 Z
0 X
N
447.52 436.87 458.16 438.27 460.23 437.94 454.48 436.24 448.68 435.92 5 Y
5 X
V
0 Z
0 X
N
447.58 436.82 455.71 437.95 457.32 437.5 448.68 435.92 4 Y
4 X
V
0 X
N
401.93 439.32 402.76 439.43 404.22 439.43 404.22 438.79 402.99 438.27 402.28 438.72 401.25 438.81 7 Y
V
N
402.99 438.27 403.33 439.43 2 L
V
2 Z
7 X
N
402.28 438.72 402.54 439.4 2 L
0 X
V
7 X
N
408.41 439.73 409.6 439.73 409.76 439.57 409.76 436.97 409.58 436.79 408.41 436.79 408.21 436.99
 408.21 439.53 8 Y
2 X
V
0 Z
0 X
N
408.41 439.73 409.6 439.73 409.76 439.57 409.76 436.97 409.58 436.79 408.41 436.79 408.21 436.99
 408.21 439.53 8 Y
7 X
V
0 X
N
397.6 436.65 400.25 435.64 407.83 434.62 416.49 433.99 417.11 433.59 404.19 433.68 401.65 433.79
 399.23 434.43 397.84 435.3 9 Y
4 X
V
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "114" 116
%%Page: "115" 117
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 357.83 702.62 T
2 11 Q
(1) 515.55 702.62 T
(15) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine variable *airport* =) 115.85 666.95 T
(make\050<airport>, gates-per-terminal: #[2], name: "Belefonte Airport",) 115.85 655.95 T
(code: "BLA",) 142.85 644.95 T
(current-position:) 142.85 633.95 T
(make\050<absolute-position>,) 148.25 622.95 T
(latitude:) 175.25 611.95 T
(make\050<latitude>,) 186.05 600.95 T
(total-seconds: encode-total-seconds\05040, 57, 43\051,) 213.05 589.95 T
(direction: "North"\051,) 213.05 578.95 T
(longitude:) 175.25 567.95 T
(make\050<longitude>,) 186.05 556.95 T
(total-seconds: encode-total-seconds\05077, 40, 24\051,) 213.05 545.95 T
(direction: "West"\051\051;) 213.05 534.95 T
(begin) 99.65 515.95 T
(let taxiway = make \050<taxiway>, id: "Echo"\051;) 110.45 504.95 T
(let taxiway-vector = vector \050taxiway\051;) 110.45 493.95 T
(let runway = make \050<runway>, id: "11R-29L"\051;) 110.45 482.95 T
(*airport*.runway-instances := vector \050runway\051;) 110.45 471.95 T
(runway.connected-to := taxiway-vector;) 110.45 460.95 T
(let gates = *airport*.gate-instances;) 110.45 449.95 T
(for \050gate in gates\051) 110.45 438.95 T
(gate.connected-to := taxiway-vector;) 121.25 427.95 T
(end;) 110.45 416.95 T
(taxiway.connected-to := concatenate \050vector \050runway\051, gates\051;) 110.45 405.95 T
(end;) 99.65 394.95 T
1 11 Q
-0.11 (The) 99.65 374.62 P
4 9.5 Q
-0.22 (vector) 120.7 374.62 P
1 11 Q
-0.11 ( generic function takes any number of ar) 154.9 374.62 P
-0.11 (guments and r) 350.58 374.62 P
-0.11 (eturns a vector) 421.02 374.62 P
-0.21 (containing those ar) 99.65 360.62 P
-0.21 (guments. The) 192 360.62 P
4 9.5 Q
-0.44 (concatenate) 260.62 360.62 P
1 11 Q
-0.21 ( generic function takes one or mor) 323.32 360.62 P
-0.21 (e) 487.84 360.62 P
(sequences as ar) 99.65 346.62 T
(guments, and appends the elements of those sequences together) 174.17 346.62 T
(,) 484.91 346.62 T
(in or) 99.65 332.62 T
(der) 122.15 332.62 T
(, into one sequence.) 137.68 332.62 T
3 13 Q
(8.6.2  Classes that model airlines, \337ights, and so on) 99.65 301.29 T
1 11 Q
(Next we de\336ne some classes to r) 99.65 281.62 T
(epr) 256.82 281.62 T
(esent airlines, \337ights, commer) 272.84 281.62 T
(cial air) 417.95 281.62 T
(craft in) 450.34 281.62 T
(general, and the class of Boeing 707s in particular) 99.65 267.62 T
(.) 338.44 267.62 T
4 9 Q
(def) 99.65 246.95 T
(ine class <airline> \050<object>\051) 115.85 246.95 T
(slot name :: <string>, required-init-keyword: name:;) 110.45 235.95 T
(slot code :: <string>, required-init-keyword: code:;) 110.45 224.95 T
(end;) 99.65 213.95 T
(def) 99.65 194.95 T
(ine method say \050object :: <airline>\051) 115.85 194.95 T
(format \050*window*, "Airline %s", object.name\051;) 110.45 183.95 T
(end;) 99.65 172.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "115" 117
%%Page: "116" 118
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(1) 63.65 702.62 T
(16) 68.74 702.62 T
0 9.5 Q
(8.6 Construction of a simple airport) 89.24 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine class <f) 115.85 666.95 T
(light> \050<object>\051) 180.65 666.95 T
(slot airline :: <airline>, required-init-keyword: airline:;) 110.45 655.95 T
(slot number) 110.45 644.95 T
(:: <integer>, required-init-keyword: number:;) 180.65 644.95 T
(end;) 99.65 633.95 T
(def) 99.65 614.95 T
(ine method say \050object :: <f) 115.85 614.95 T
(light>\051) 267.05 614.95 T
(format \050*window*, "Flight %s %d", object.airline.code, object.number\051;) 110.45 603.95 T
(end;) 99.65 592.95 T
6 F
(// This def) 99.65 573.95 T
(inition is repeated here.) 159.05 573.95 T
4 F
(def) 99.65 562.95 T
(ine class <vehicle> \050<physical-object>\051) 115.85 562.95 T
6 F
(// Every vehicle has some unique identif) 110.45 551.95 T
(ication code) 326.45 551.95 T
4 F
(slot vehicle-id) 110.45 540.95 T
( :: <string>, required-init-keyword: id:;) 288.65 540.95 T
6 F
(// How much fuel is left in the fuel tank) 110.45 529.95 T
4 F
(slot fuel-remaining) 110.45 518.95 T
(:: <integer>,) 294.05 518.95 T
(init-keyword: fuel-remaining:,) 310.25 507.95 T
(init-value: 0;) 310.25 496.95 T
6 F
(// The normal operating speed of this class of vehicle) 110.45 485.95 T
4 F
(each-subclass slot cruising-speed :: <integer>;) 110.45 474.95 T
(end;) 99.65 463.95 T
(def) 99.65 444.95 T
(ine method say \050object :: <vehicle>\051) 115.85 444.95 T
(format\050*window*, "Vehicle %s", object.vehicle-id\051;) 110.45 433.95 T
(end;) 99.65 422.95 T
(def) 99.65 403.95 T
(ine class <standard-aircraft> \050<vehicle>\051) 115.85 403.95 T
(slot altitude) 110.45 392.95 T
(:: <integer>, init-keyword: altitude:;) 283.25 392.95 T
(each-subclass slot needs-runway :: <boolean>, init-value: #t;) 110.45 381.95 T
(end;) 99.65 370.95 T
6 F
(// Commercial aircraft may have a f) 99.65 351.95 T
(light assigned to them.) 288.65 351.95 T
4 F
(def) 99.65 340.95 T
(ine class <standard-commercial-aircraft> \050<standard-aircraft>\051) 115.85 340.95 T
(slot aircraft-f) 110.45 329.95 T
(light, init-keyword: f) 191.45 329.95 T
(light:, init-value: #f;) 310.25 329.95 T
(end;) 99.65 318.95 T
(def) 99.65 299.95 T
(ine method say \050object :: <standard-commercial-aircraft>\051;) 115.85 299.95 T
(let f) 110.45 288.95 T
(light = object.aircraft-f) 137.45 288.95 T
(light;) 272.45 288.95 T
(if \050f) 110.45 277.95 T
(light\051 say \050f) 137.45 277.95 T
(light\051) 207.65 277.95 T
(else format \050*window*, "Unscheduled Aircraft %s", object.vehicle-id\051;) 121.25 266.95 T
(end;) 110.45 255.95 T
(end;) 99.65 244.95 T
(def) 99.65 225.95 T
(ine class <B707> \050<standard-commercial-aircraft>\051) 115.85 225.95 T
(inherited slot cruising-speed, init-value: 368;) 110.45 214.95 T
(end;) 99.65 203.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "116" 118
%%Page: "117" 119
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 357.83 702.62 T
2 11 Q
(1) 515.55 702.62 T
(17) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine method say \050object :: <B707>\051) 115.85 666.95 T
(let f) 110.45 655.95 T
(light = aircraft-f) 137.45 655.95 T
(light \050object\051;) 234.65 655.95 T
(if \050f) 110.45 644.95 T
(light\051 next-method \050\051) 137.45 644.95 T
(else format \050*window*, "Unscheduled B707 %s", vehicle-id \050object\051\051;) 121.25 633.95 T
(end;) 110.45 622.95 T
(end;) 99.65 611.95 T
3 15 Q
(8.7  The) 99.65 573.95 T
4 13 Q
(select) 148.88 573.95 T
3 15 Q
( and) 195.68 573.95 T
4 13 Q
(block) 224.39 573.95 T
3 15 Q
( control structures) 263.39 573.95 T
1 11 Q
(The) 99.65 553.62 T
4 9.5 Q
(select) 120.81 553.62 T
1 11 Q
( and) 155.01 553.62 T
4 9.5 Q
(block) 179.13 553.62 T
1 11 Q
( contr) 207.63 553.62 T
(ol str) 235.41 553.62 T
(uctur) 259.87 553.62 T
(es ar) 285.76 553.62 T
(e very useful.) 308.09 553.62 T
4 9.5 Q
(select) 376.36 553.62 T
1 11 Q
( enables you to) 410.56 553.62 T
(de\336ne a set of conditions, and for each one de\336ne a body of code to r) 99.65 539.62 T
(un if that) 433.23 539.62 T
(condition is tr) 99.65 525.62 T
(ue.) 167.26 525.62 T
4 9.5 Q
(block) 184.67 525.62 T
1 11 Q
( enables you to do a non-local exit. In this section, we) 213.17 525.62 T
(de\336ne a very simple integer parser to illustrate the) 99.65 511.62 T
4 9.5 Q
(select) 347.77 511.62 T
1 11 Q
( and) 381.98 511.62 T
4 9.5 Q
(block) 406.1 511.62 T
1 11 Q
( contr) 434.6 511.62 T
(ol) 462.37 511.62 T
(str) 99.65 497.62 T
(uctur) 112.15 497.62 T
(es. \050Note that normally you would not need to de\336ne such a function) 138.04 497.62 T
(fr) 99.65 483.62 T
(om scratch, but would call a library function.\051) 107.46 483.62 T
(W) 126.65 469.62 T
(e will need a convenient way to expr) 136.64 469.62 T
(ess times. One convenient way to) 314.81 469.62 T
(expr) 99.65 455.62 T
(ess a time is with a string. For example, we would like to take the string) 121.35 455.62 T
4 9 Q
(") 99.65 441.62 T
4 9.5 Q
(12:30) 105.05 441.62 T
4 9 Q
(") 133.55 441.62 T
1 11 Q
( and convert it into an instance of) 138.95 441.62 T
4 9.5 Q
(<time-of-day>) 303.74 441.62 T
1 11 Q
(. Similarly) 377.84 441.62 T
(, the string) 426.37 441.62 T
4 9 Q
(") 99.65 427.62 T
4 9.5 Q
(+1:05) 105.05 427.62 T
4 9 Q
(") 133.55 427.62 T
1 11 Q
( expr) 138.95 427.62 T
(esses a time-of) 163.4 427.62 T
(fset \050one hour and \336ve minutes in the futur) 233.83 427.62 T
(e\051. T) 443.49 427.62 T
(o con-) 463.66 427.62 T
-0.43 (vert these strings into instances, we must parse the strings into integers, which ar) 99.65 413.62 P
-0.43 (e) 488.06 413.62 P
-0.43 (then stor) 99.65 399.62 P
-0.43 (ed in an appr) 142.03 399.62 P
-0.43 (opriate time instance. First we de\336ne) 205.36 399.62 P
4 9.5 Q
-0.89 (parse-integer) 384.91 399.62 P
1 11 Q
-0.43 (, which) 458.19 399.62 P
(will be used later in) 99.65 385.62 T
4 9.5 Q
(parse-time) 198.32 385.62 T
1 11 Q
(. Normally you would use a library function to) 255.32 385.62 T
(turn a string of digits into the integer the string r) 99.65 371.62 T
(epr) 335.44 371.62 T
(esents. Her) 351.47 371.62 T
(e a very simple) 405.39 371.62 T
(integer parser is pr) 99.65 357.62 T
(esented to intr) 191.44 357.62 T
(oduce the) 261.05 357.62 T
4 9.5 Q
(select) 311.32 357.62 T
1 11 Q
( and) 345.52 357.62 T
4 9.5 Q
(block) 369.64 357.62 T
1 11 Q
( contr) 398.14 357.62 T
(ol str) 425.92 357.62 T
(uctur) 450.38 357.62 T
(es.) 476.27 357.62 T
(The contract of the) 126.65 343.62 T
4 9.5 Q
(parse-integer) 220.18 343.62 T
1 11 Q
( method de\336ned below is: given a string,) 294.28 343.62 T
-0.37 (a delimiter \050which defaults to a decimal point\051, and a starting index into the string) 99.65 329.62 P
(\050defaulting to zer) 99.65 315.62 T
(o\051, this simple integer parser skips over any whitespace, r) 183.61 315.62 T
(eads) 462.78 315.62 T
(the characters out of the string, and assembles an integer up to the given delim-) 99.65 301.62 T
(iter) 99.65 287.62 T
(, or the end of the string. Some extra r) 115.24 287.62 T
(eturn values \050described below\051 ar) 298.01 287.62 T
(e also) 460.59 287.62 T
(r) 99.65 273.62 T
(eturned to facilitate sign detection, and multiple integer parses fr) 103.79 273.62 T
(om a complex) 419.1 273.62 T
(string \050such as a time\051.) 99.65 259.62 T
-0.36 (It is helpful to show the desir) 126.65 245.62 P
-0.36 (ed ef) 266.22 245.62 P
-0.36 (fect of this method befor) 289.33 245.62 P
-0.36 (e de\336ning it. Her) 406.68 245.62 P
-0.36 (e) 487.99 245.62 P
(ar) 99.65 231.62 T
(e some examples:) 109.29 231.62 T
5 9 Q
(?) 99.65 210.95 T
4 F
(parse-integer \050"12:30", delimiter: ':'\051;) 110.45 210.95 T
5 F
(12) 99.65 199.95 T
(#f) 99.65 188.95 T
(2) 99.65 177.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "117" 119
%%Page: "118" 120
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(1) 63.65 702.62 T
(18) 68.74 702.62 T
0 9.5 Q
(8.7 The select and block control structures) 89.24 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
5 9 Q
0 X
(?) 99.65 666.95 T
4 F
(parse-integer \050"12:30", delimiter: ':' start: 3\051;) 110.45 666.95 T
5 F
(30) 99.65 655.95 T
(#f) 99.65 644.95 T
(5) 99.65 633.95 T
3 13 Q
(8.7.1  Method for parsing integers) 99.65 604.29 T
1 11 Q
(The) 99.65 584.62 T
4 9.5 Q
(parse-integer) 120.81 584.62 T
1 11 Q
( method is de\336ned below:) 194.91 584.62 T
6 9 Q
(// This is a very simple integer parser.) 99.65 563.95 T
4 F
(def) 99.65 552.95 T
(ine method parse-integer) 115.85 552.95 T
(\050integer-string :: <string>, #key delimiter = ".", start = 0\051 =>) 121.25 541.95 T
( \050integer :: <integer>, sign, end-index :: <integer>\051;) 121.25 530.95 T
(block \050return\051) 110.45 519.95 T
(let length = size \050integer-string\051;) 121.25 508.95 T
(let result = #f;) 121.25 497.95 T
(let sign = #f;) 121.25 486.95 T
(let end-index = start;) 121.25 475.95 T
(for \050index from start below length\051) 121.25 464.95 T
(let char = integer-string[index];) 132.05 453.95 T
(select char) 132.05 442.95 T
6 F
(// Is the character a digit?) 142.85 431.95 T
4 F
('0', '1', '2', '3', '4', '5', '6', '7', '8', '9' =>) 142.85 420.95 T
(let value = position \050char, $digits\051;) 153.65 409.95 T
(if \050result\051) 153.65 398.95 T
6 F
(// If we have already started to generate the integer) 175.25 387.95 T
(// shift the result to make room for the next digit.) 175.25 376.95 T
4 F
(result := \050result * 10\051 + value;) 175.25 365.95 T
(else) 164.45 354.95 T
(result := value;) 175.25 343.95 T
(end;) 153.65 332.95 T
6 F
(// Is the character whitespace?) 142.85 321.95 T
4 F
(' ', '\134t', '\134n', '\134r' => #f;) 142.85 310.95 T
6 F
(// Is the character a sign?) 142.85 299.95 T
4 F
('+', '-' => if \050result | sign\051) 142.85 288.95 T
(format \050*window*, "Sign in illegal spot, skipping"\051) 229.25 277.95 T
(else) 218.45 266.95 T
(sign := char;) 229.25 255.95 T
(end;) 207.65 244.95 T
6 F
(// Is the character the specif) 142.85 233.95 T
(ied character to stop at when reached?) 304.85 233.95 T
4 F
(delimiter => return \050values \050result, sign, index\051\051;) 142.85 222.95 T
(otherwise => format \050*window*, "Illegal character %c, skipping",) 142.85 211.95 T
(char\051;) 256.25 200.95 T
(end select;) 132.05 189.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "118" 120
%%Page: "119" 121
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 357.83 702.62 T
2 11 Q
(1) 515.55 702.62 T
(19) 520.65 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(f) 121.25 666.95 T
(inally return \050values \050result, sign, length\051\051;) 126.65 666.95 T
(end for;) 121.25 655.95 T
(end block;) 110.45 644.95 T
(end method parse-integer;) 99.65 633.95 T
1 11 Q
(In this method, the) 99.65 613.62 T
4 9.5 Q
(for) 194.31 613.62 T
1 11 Q
( loop iterates over each of the characters in) 211.41 613.62 T
4 9.5 Q
(integer-) 421.21 613.62 T
-0.7 (string) 99.65 599.62 P
1 11 Q
-0.34 (, starting at the index) 133.85 599.62 P
4 9.5 Q
-0.7 (start) 237.66 599.62 P
1 11 Q
-0.34 (. When ther) 266.16 599.62 P
-0.34 (e ar) 322.21 599.62 P
-0.34 (e no further characters to iterate) 339.54 599.62 P
-0.25 (over \050the end of the string is r) 99.65 585.62 P
-0.25 (eached\051, contr) 241.54 585.62 P
-0.25 (ol is transferr) 309.52 585.62 P
-0.25 (ed to the) 373.51 585.62 P
4 9.5 Q
-0.52 (f) 417.85 585.62 P
-0.52 (inally) 423.55 585.62 P
1 11 Q
-0.25 ( clause,) 457.75 585.62 P
-0.05 (wher) 99.65 571.62 P
-0.05 (e the r) 124.64 571.62 P
-0.05 (esult, sign, and ending index \050which must be past the last character of) 154.71 571.62 P
(the string\051 ar) 99.65 557.62 T
(e r) 162.03 557.62 T
(eturned as multiple values fr) 174.2 557.62 T
(om the method.) 314.29 557.62 T
(Inside the body of the) 126.65 543.62 T
4 9.5 Q
(for) 235.47 543.62 T
1 11 Q
( loop the) 252.57 543.62 T
4 9.5 Q
(select) 297.9 543.62 T
1 11 Q
( contr) 332.1 543.62 T
(ol str) 359.88 543.62 T
(uctur) 384.34 543.62 T
(e is used to exe-) 410.22 543.62 T
-0.4 (cute the appr) 99.65 529.62 P
-0.4 (opriate code based on the curr) 162.86 529.62 P
-0.4 (ent character being examined fr) 307.94 529.62 P
-0.4 (om the) 459.96 529.62 P
(string. If the curr) 99.65 515.62 T
(ent character being examined is one of the decimal digits, then) 181.6 515.62 T
(\336rst the numerical value of the digit is computed. Then if this is not the \336rst digit) 99.65 501.62 T
-0.05 (pr) 99.65 487.62 P
-0.05 (ocessed, the digit is inserted into the r) 110.41 487.62 P
-0.05 (esult, otherwise the r) 293.53 487.62 P
-0.05 (esult is initialized to) 395.06 487.62 P
-0.25 (the value of this \336rst digit. If the character is not a digit, but is instead whitespace,) 99.65 473.62 P
(that whitespace character is ignor) 99.65 459.62 T
(ed. If the character is a sign, then this could sig-) 262.73 459.62 T
(nify a time-of) 99.65 445.62 T
(fset, and that fact is noted assuming the sign is in a valid position.) 164.93 445.62 T
-0.37 (The in\336x operator) 126.65 431.62 P
4 9.5 Q
-0.76 (|) 215.81 431.62 P
1 11 Q
-0.37 ( is used to determine if either) 221.51 431.62 P
4 9.5 Q
-0.76 (result) 363.65 431.62 P
1 11 Q
-0.37 ( or) 397.85 431.62 P
4 9.5 Q
-0.76 (sign) 412.97 431.62 P
1 11 Q
-0.37 ( is tr) 435.77 431.62 P
-0.37 (ue \050that) 456.24 431.62 P
(is, not) 99.65 417.62 T
4 9.5 Q
(#f) 131.76 417.62 T
1 11 Q
(\051.) 143.16 417.62 T
-0.14 (It is important to r) 99.65 195.62 P
-0.14 (eturn the fact that a sign was found in the string, because other-) 187.95 195.62 P
(wise that information might be lost if the integer is positive. The time parser) 99.65 181.62 T
-0.08 (which uses this integer parser must distinguish between \322+1:20\323 \050which is a time-) 99.65 167.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Quick summary of) 132.65 383.62 T
4 9.5 Q
(|) 229.5 383.62 T
2 11 Q
( in\336x operator) 235.2 383.62 T
1 F
(:) 308.23 383.62 T
0 F
(ar) 313.73 383.62 T
(g1) 322.7 383.62 T
4 9.5 Q
( |) 333.7 383.62 T
0 11 Q
(ar) 350.8 383.62 T
(g2) 359.76 383.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(The in\336x operator) 159.65 369.62 T
4 9.5 Q
(|) 249.91 369.62 T
1 11 Q
( does the \322or\323 logical operation. If either) 255.61 369.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(or both of the ar) 132.65 355.62 T
(guments to the) 210.65 355.62 T
4 9.5 Q
(|) 286.13 355.62 T
1 11 Q
( operator ar) 291.83 355.62 T
(e tr) 348.65 355.62 T
(ue, then) 364.51 355.62 T
4 9.5 Q
(|) 406.32 355.62 T
1 11 Q
( r) 412.02 355.62 T
(eturns) 418.92 355.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tr) 132.65 341.62 T
(ue.) 140.49 341.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Note that the) 159.65 327.62 T
4 9.5 Q
(|) 226.23 327.62 T
1 11 Q
( operator is actually a contr) 231.93 327.62 T
(ol \337ow operator) 364.36 327.62 T
(. If) 441.79 327.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the \336rst ar) 132.65 313.62 T
(gument to the) 182.3 313.62 T
4 9.5 Q
(|) 253.12 313.62 T
1 11 Q
( operator is tr) 258.82 313.62 T
(ue, then the value of the) 324.45 313.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(second ar) 132.65 299.62 T
(gument is never computed, and the \336rst ar) 178.99 299.62 T
(gument is) 386.27 299.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.42 (r) 132.65 285.62 P
-0.42 (eturned. If the value of the \336rst ar) 136.79 285.62 P
-0.42 (gument is false, then the value of) 297.33 285.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the second ar) 132.65 271.62 T
(gument is computed and r) 197 271.62 T
(eturned.) 325.77 271.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The) 159.65 257.62 T
4 9.5 Q
(&) 180.81 257.62 T
1 11 Q
( operator behaves in a similar manner) 186.51 257.62 T
(, except its ar) 369.83 257.62 T
(gu-) 433.22 257.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ments ar) 132.65 243.62 T
(e computed only until ther) 174.68 243.62 T
(e either ar) 304.52 243.62 T
(e no mor) 353.01 243.62 T
(e, or the) 396.05 243.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value of one of the ar) 132.65 229.62 T
(guments is false.) 235.13 229.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 396.83 126.65 222.08 2 L
V
0.25 H
0 Z
N
477.65 396.83 477.65 222.08 2 L
V
N
126.52 396.95 477.77 396.95 2 L
V
N
126.52 221.95 477.77 221.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "119" 121
%%Page: "120" 122
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(120) 63.65 702.62 T
0 9.5 Q
(8.7 The select and block control structures) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(of) 99.65 665.62 T
(fset\051 and \3221:20\323 \050which is a time-of-day\051. Thus if ther) 109.12 665.62 T
(e is an explicit sign, that) 364.9 665.62 T
(fact is r) 99.65 651.62 T
(eturned to the caller as the second r) 134.79 651.62 T
(eturn value.) 307.03 651.62 T
-0.34 (If the character is the delimiter \050for U.S. time this would be a colon\051, then the) 126.65 637.62 P
-0.12 (r) 99.65 623.62 P
-0.12 (esults ar) 103.79 623.62 P
-0.12 (e r) 144.08 623.62 P
-0.12 (eturned out of the block, and thus out of the method. The name of the) 156.12 623.62 P
(function which r) 99.65 609.62 T
(eturns out of the block is the \336rst ar) 180.13 609.62 T
(gument to the) 352.49 609.62 T
4 9.5 Q
(block) 423.31 609.62 T
1 11 Q
( contr) 451.81 609.62 T
(ol) 479.59 609.62 T
(str) 99.65 595.62 T
(uctur) 112.15 595.62 T
(e. In this case the function was named) 138.04 595.62 T
4 9.5 Q
(return) 325.31 595.62 T
1 11 Q
(, but you can choose any) 359.51 595.62 T
(name you wish. \050This might come in handy if you have nested blocks and you) 99.65 581.62 T
(sometimes you might want to r) 99.65 567.62 T
(eturn fr) 251.66 567.62 T
(om either the inner or outer block.\051 The) 288.45 567.62 T
(non-local exit pr) 99.65 553.62 T
(ovided by) 178.9 553.62 T
4 9.5 Q
(block) 230.74 553.62 T
1 11 Q
( and) 259.23 553.62 T
4 9.5 Q
(block) 283.36 553.62 T
1 11 Q
(\325s ar) 311.86 553.62 T
(gument is useful for situations) 331.98 553.62 T
(similar to this one wher) 99.65 539.62 T
(e the r) 214.59 539.62 T
(esult of some computation has been determined,) 244.76 539.62 T
(but it would be awkwar) 99.65 525.62 T
(d to arrange for the value to be r) 216.43 525.62 T
(eturned in the usual) 373.4 525.62 T
-0.33 (sequential contr) 99.65 511.62 P
-0.33 (ol \337ow manner) 176.98 511.62 P
-0.33 (. In this case the) 249.71 511.62 P
4 9.5 Q
-0.68 (for) 328.1 511.62 P
1 11 Q
-0.33 ( loop is simpler because it only) 345.2 511.62 P
-0.28 (needs to handle one exit situation \050end of string\051, and the) 99.65 497.62 P
4 9.5 Q
-0.59 (block) 376.69 497.62 P
1 11 Q
-0.28 ( constr) 405.19 497.62 P
-0.28 (uct handles) 437.46 497.62 P
(the second exit situation \050delimiter found\051.) 99.65 483.62 T
(The function) 126.65 469.62 T
4 9.5 Q
(position) 191.34 469.62 T
1 11 Q
( \050not de\336ned her) 236.94 469.62 T
(e\051 is used to \336nd the index in the) 317.7 469.62 T
(string of digits which contains the given character) 99.65 455.62 T
(. The index is the numerical) 341.44 455.62 T
(value of the character) 99.65 441.62 T
(. The constant module variable) 203.54 441.62 T
4 9.5 Q
($digits) 356.34 441.62 T
1 11 Q
( was de\336ned in Sec-) 396.24 441.62 T
(tion 8.4.1.) 99.65 427.62 T
-0.25 (Note that rather than just skipping over illegal characters, it would be better) 126.65 413.62 P
(to raise an exception. This is cover) 99.65 399.62 T
(ed in Chapter 10.) 265.67 399.62 T
-0.43 (Note that for lar) 126.65 385.62 P
-0.43 (ge methods such as) 203.53 385.62 P
4 9.5 Q
-0.9 (parse-integer) 299.29 385.62 P
1 11 Q
-0.43 (, the code can be easier to) 372.57 385.62 P
-0.01 (r) 99.65 371.62 P
-0.01 (ead with the optional documentation permitted after each) 103.79 371.62 P
4 9.5 Q
-0.02 (end) 387.95 371.62 P
1 11 Q
-0.01 (, as has been done) 405.05 371.62 P
(with the example above.) 99.65 357.62 T
3 13 Q
(8.7.2  Method for parsing time) 99.65 326.29 T
1 11 Q
(W) 99.65 306.62 T
(e show examples of calling) 109.64 306.62 T
4 9.5 Q
(parse-time) 242.98 306.62 T
1 11 Q
( befor) 299.98 306.62 T
(e de\336ning it:) 327.9 306.62 T
5 9 Q
(?) 99.65 285.95 T
4 F
(parse-time \050"12:30"\051;) 110.45 285.95 T
5 F
({Instance of <time-of-day>}) 99.65 274.95 T
(?) 99.65 255.95 T
4 F
(say \050parse-time \050"12:30"\051\051;) 110.45 255.95 T
5 F
(12:30) 99.65 244.95 T
1 11 Q
(Using the integer parser) 99.65 224.62 T
(, we de\336ne a simple time parser:) 216.2 224.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "120" 122
%%Page: "121" 123
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 357.42 702.62 T
2 11 Q
(121) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
6 9 Q
0 X
(// This is a very simple time parser. It is designed to ignore whitespace,) 99.65 666.95 T
(// to assume a leading + or - indicates a time-offset, that the f) 99.65 655.95 T
(irst set) 450.65 655.95 T
(// of digits is the hours and the second set of digits \050after the colon\051 is) 99.65 644.95 T
(// the minutes.) 99.65 633.95 T
4 F
(def) 99.65 622.95 T
(ine method parse-time \050time-string :: <string>\051 => \050time :: <time>\051;) 115.85 622.95 T
(let \050hours, sign, delim-index\051 =) 110.45 611.95 T
(parse-integer \050time-string, delimiter: ':'\051;) 121.25 600.95 T
-0.2 (let \050minutes, msign\051 = parse-integer \050time-string, start: delim-index + 1\051;) 110.45 589.95 P
(if \050sign\051) 110.45 578.95 T
(make\050<time-offset>,) 137.45 567.95 T
(total-seconds: encode-total-seconds\050hours, minutes, 0\051,) 164.45 556.95 T
(past?: \050sign = '-'\051\051;) 164.45 545.95 T
(else) 121.25 534.95 T
(make\050<time-of-day>,) 137.45 523.95 T
(total-seconds: encode-total-seconds\050hours, minutes, 0\051\051;) 164.45 512.95 T
(end;) 110.45 501.95 T
(end;) 99.65 490.95 T
1 11 Q
-0.04 (Although) 99.65 470.62 P
4 9.5 Q
-0.09 (parse-integer) 149.26 470.62 P
1 11 Q
-0.04 ( normally r) 223.36 470.62 P
-0.04 (eturns thr) 277.41 470.62 P
-0.04 (ee r) 325.15 470.62 P
-0.04 (esult values, when the minutes) 342.55 470.62 P
(ar) 99.65 456.62 T
(e parsed, only two values \050) 109.29 456.62 T
4 9.5 Q
(minutes) 239.81 456.62 T
1 11 Q
( and) 279.71 456.62 T
4 9.5 Q
(msign) 303.83 456.62 T
1 11 Q
(\051 ar) 332.33 456.62 T
(e captur) 348.39 456.62 T
(ed. The delimiter) 387.77 456.62 T
-0.36 (index r) 99.65 442.62 P
-0.36 (eturn value is thr) 133.45 442.62 P
-0.36 (own away) 215.66 442.62 P
-0.36 (. If we had pr) 264.7 442.62 P
-0.36 (ovided mor) 328.2 442.62 P
-0.36 (e variables than r) 384.58 442.62 P
-0.36 (eturn) 467.02 442.62 P
(values, those variables would have been initialized to) 99.65 428.62 T
4 9.5 Q
(#f) 362.5 428.62 T
1 11 Q
(. In the example above,) 373.9 428.62 T
(the variable) 99.65 414.62 T
4 9.5 Q
(msign) 159.72 414.62 T
1 11 Q
( is ignor) 188.22 414.62 T
(ed. It would be better to pr) 227.46 414.62 T
(ovide an err) 357.56 414.62 T
(or check which) 416.14 414.62 T
(would pr) 99.65 400.62 T
(event users fr) 144.89 400.62 T
(om entering signed minutes \050for example,) 210.52 400.62 T
4 9.5 Q
("12:-28") 416.83 400.62 T
1 11 Q
(\051.) 462.43 400.62 T
-0.15 (W) 126.65 386.62 P
-0.15 (e leave certain details about this simple time library \050such as time compar-) 136.64 386.62 P
(ison operators\051 to Chapter 1) 99.65 372.62 T
(1.) 234.91 372.62 T
3 15 Q
(8.8  Summary) 99.65 332.95 T
1 11 Q
(This chapter cover) 99.65 312.62 T
(ed:) 189.28 312.62 T
(\245) 108.65 292.62 T
(W) 126.65 292.62 T
(e used a selection of built-in classes, including: integers, characters,) 136.64 292.62 T
(strings, lists, and vectors.) 126.65 278.62 T
(\245) 108.65 258.62 T
(W) 126.65 258.62 T
(e used the following iteration facilities and contr) 136.64 258.62 T
(ol str) 371.78 258.62 T
(uctur) 396.25 258.62 T
(es:) 422.13 258.62 T
4 9.5 Q
(for) 437.56 258.62 T
1 11 Q
(,) 453.85 258.62 T
4 9.5 Q
(do) 459.35 258.62 T
1 11 Q
(,) 470.75 258.62 T
4 9.5 Q
(while) 126.65 244.62 T
1 11 Q
(,) 155.15 244.62 T
4 9.5 Q
(if) 160.65 244.62 T
1 11 Q
(,) 172.05 244.62 T
4 9.5 Q
(select) 177.55 244.62 T
1 11 Q
(, and) 211.75 244.62 T
4 9.5 Q
(block) 238.62 244.62 T
1 11 Q
(.) 267.12 244.62 T
(\245) 108.65 224.62 T
(W) 126.65 224.62 T
(e continued to develop the airport application. W) 136.64 224.62 T
(e started with the sim-) 375.43 224.62 T
(ple task of generating gate-ids, and pr) 126.65 210.62 T
(oceeded to associate gates with air-) 310.82 210.62 T
(ports. W) 126.65 196.62 T
(e modeled all the various parts of the airport that can hold an) 167.35 196.62 T
(air) 126.65 182.62 T
(craft. W) 139.5 182.62 T
(e constr) 176.96 182.62 T
(ucted a simple model of an airport by cr) 214.78 182.62 T
(eating the indi-) 409.34 182.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "121" 123
%%Page: "122" 124
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(122) 63.65 702.62 T
0 9.5 Q
(8.8 Summary) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(vidual pieces and connecting them together) 126.65 665.62 T
(. W) 338.28 665.62 T
(e de\336ned the) 353.77 665.62 T
4 9.5 Q
(parse-time) 419.58 665.62 T
1 11 Q
(method, which we need for scheduling.) 126.65 651.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "122" 124
%%Page: "123" 125
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(123) 289.4 135.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(9) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(9) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Advanced Collections and) 100.65 591.4 T
(Contr) 99.65 561.4 T
(ol Flow) 175.85 561.4 T
99.65 159.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(In this chapter) 99.65 449.62 T
(, we show mor) 168.89 449.62 T
(e advanced use of collections and contr) 240.45 449.62 T
(ol \337ow by) 430.62 449.62 T
(pr) 99.65 435.62 T
(esenting several appr) 110.41 435.62 T
(oaches to landing air) 214.15 435.62 T
(craft at the airport we constr) 315.11 435.62 T
(ucted in) 453.01 435.62 T
-0.05 (Chapter 8. First, we explor) 99.65 421.62 P
-0.05 (e four dif) 228.22 421.62 P
-0.05 (fer) 272.92 421.62 P
-0.05 (ent techniques for conditional execution of) 286 421.62 P
(code using a simple landing algorithm. W) 99.65 407.62 T
(e then discuss the pr) 302.55 407.62 T
(oblems with that) 401.93 407.62 T
(algorithm and pr) 99.65 393.62 T
(esent a mor) 182.6 393.62 T
(e compr) 238.65 393.62 T
(ehensive solution.) 278.04 393.62 T
3 15 Q
(9.1  Simple landing and four approaches) 99.65 353.95 T
1 11 Q
(W) 99.65 333.62 T
(e name the landing function) 109.64 333.62 T
4 9.5 Q
(land-aircraft) 249.12 333.62 T
1 11 Q
(. This function takes as ar) 323.22 333.62 T
(guments) 446.45 333.62 T
-0 (the air) 99.65 319.62 P
-0 (craft, airport, and curr) 130.5 319.62 P
-0 (ent time-of-day) 238.45 319.62 P
-0 (, and it describes the time that the air-) 312.33 319.62 P
-0.24 (craft will arrive at each step of the landing. For example, suppose that we have an) 99.65 305.62 P
(airline named Keystone \050code KN\051 and a \337ight 42 for that airline, and suppose) 99.65 291.62 T
(that \337ight 42 is associated with an instance of the Boeing 707 class that is located) 99.65 277.62 T
(20 minutes away fr) 99.65 263.62 T
(om the Belefonte airport. When we call) 192.47 263.62 T
4 9.5 Q
(land-aircraft) 384.72 263.62 T
1 11 Q
(, the) 458.82 263.62 T
(r) 99.65 249.62 T
(esults ar) 103.79 249.62 T
(e as follows:) 144.21 249.62 T
5 9 Q
(?) 99.65 228.95 T
4 F
( land-aircraft \050b707-instance, *airport*,) 105.05 228.95 T
(time: make \050<time-of-day>, hours: 8, minutes: 13\051\051;) 191.45 217.95 T
5 F
(8:33: KN42 at Runway 11R-29L) 99.65 206.95 T
(8:46: KN42 at Taxiway Echo) 99.65 195.95 T
(8:50: KN42 at Gate A1) 99.65 184.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "123" 125
%%Page: "124" 126
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(124) 63.65 702.62 T
0 9.5 Q
(9.1 Simple landing and four approaches) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(Befor) 99.65 665.62 T
(e implementing) 125.45 665.62 T
4 9.5 Q
(land-aircraft) 204.91 665.62 T
1 11 Q
(, we need to de\336ne a useful time constant,) 279.01 665.62 T
4 9.5 Q
($midnight) 99.65 651.62 T
1 11 Q
(, and a helper method,) 150.95 651.62 T
4 9.5 Q
(say-step) 263.11 651.62 T
1 11 Q
(:) 308.71 651.62 T
4 9 Q
(def) 99.65 630.95 T
(ine constant $midnight = make \050<time-of-day>, hours: 0, minutes: 0\051;) 115.85 630.95 T
(// prints the progress of the landing as each step is taken) 99.65 611.95 T
(def) 99.65 600.95 T
(ine method say-step \050time) 115.85 600.95 T
(:: <time-of-day>,) 277.85 600.95 T
(aircraft :: <aircraft>,) 229.25 589.95 T
(storage) 229.25 578.95 T
(:: <vehicle-storage>\051 => \050\051) 277.85 578.95 T
(if \050storage\051) 110.45 567.95 T
(say \050time\051;) 121.25 556.95 T
(format \050*window*, ": "\051;) 121.25 545.95 T
(say \050aircraft\051;) 121.25 534.95 T
(format \050*window*, " at "\051;) 121.25 523.95 T
(say \050storage\051;) 121.25 512.95 T
(end;) 110.45 501.95 T
(values \050\051;) 110.45 490.95 T
(end;) 99.65 479.95 T
1 11 Q
(The following sections show four appr) 99.65 459.62 T
(oaches, each one illustrating a dif) 287.22 459.62 T
(fer) 448.7 459.62 T
(ent) 461.78 459.62 T
(style of using Dylan. The appr) 99.65 445.62 T
(oaches pr) 246.68 445.62 T
(ogr) 292.92 445.62 T
(ess fr) 309.19 445.62 T
(om using simple contr) 334.34 445.62 T
(ol str) 443.01 445.62 T
(uc-) 467.48 445.62 T
(tur) 99.65 431.62 T
(es to genuine object-oriented pr) 114.01 431.62 T
(ogramming. If you ar) 267.45 431.62 T
(e new to object-oriented) 371.34 431.62 T
(pr) 99.65 417.62 T
(ogramming, this pr) 110.41 417.62 T
(ogr) 204.38 417.62 T
(ession can help you understand how to migrate fr) 220.65 417.62 T
(om a) 462.83 417.62 T
(traditional language into the object-oriented style. Do not stop after learning the) 99.65 403.62 T
(\336rst, second, or thir) 99.65 389.62 T
(d appr) 194.28 389.62 T
(oach!) 226.62 389.62 T
3 13 Q
(9.1.1  First approach \321 using) 99.65 358.29 T
4 F
(if) 251.32 358.29 T
3 F
(,) 266.92 358.29 T
4 F
(elseif) 272.85 358.29 T
3 F
(, and) 319.65 358.29 T
4 F
(else) 347.49 358.29 T
1 11 Q
(In the \336rst appr) 99.65 338.62 T
(oach to landing, we use the combination of) 175.38 338.62 T
4 9.5 Q
(if) 386.98 338.62 T
1 11 Q
(,) 398.38 338.62 T
4 9.5 Q
(elseif) 403.88 338.62 T
1 11 Q
(, and) 438.08 338.62 T
4 9.5 Q
(else) 464.95 338.62 T
1 11 Q
(as the primary contr) 99.65 324.62 T
(ol str) 198.18 324.62 T
(uctur) 222.64 324.62 T
(e to separate each major step in the landing) 248.52 324.62 T
(sequence. The major steps ar) 99.65 310.62 T
(e:) 238.94 310.62 T
2 F
(1.) 108.65 290.62 T
1 F
(Fly to the airport and land on the r) 126.65 290.62 T
(unway) 294.89 290.62 T
(.) 327.5 290.62 T
2 F
(2.) 108.65 270.62 T
1 F
(Slow down on the r) 126.65 270.62 T
(unway and r) 222.03 270.62 T
(each the taxiway) 284.12 270.62 T
(.) 364.47 270.62 T
2 F
(3.) 108.65 250.62 T
1 F
(T) 126.65 250.62 T
(ravel on the taxiway to the gate.) 132.4 250.62 T
(W) 99.65 230.62 T
(e use r) 109.64 230.62 T
(ecursion \050) 141.12 230.62 T
4 9.5 Q
(land-aircraft) 188.93 230.62 T
1 11 Q
( calling itself with modi\336ed ar) 263.04 230.62 T
(guments\051 as the) 409.17 230.62 T
(technique to r) 99.65 216.62 T
(epeat execution until the air) 166.69 216.62 T
(craft r) 301.98 216.62 T
(eaches the gate.) 330.86 216.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "124" 126
%%Page: "125" 127
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 345.65 702.62 T
2 11 Q
(125) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine method land-aircraft) 115.85 666.95 T
6 F
(// 1) 492.05 666.95 T
4 F
(\050aircraft :: <standard-aircraft>, airport :: <airport>,) 132.05 655.95 T
6 F
(// 2) 492.05 655.95 T
4 F
(#key storage = #f, time = $midnight\051) 137.45 644.95 T
6 F
(// 3) 492.05 644.95 T
4 F
(say-step \050time, aircraft, storage\051;) 110.45 633.95 T
6 F
(// 4) 492.05 633.95 T
4 F
(let \050next-storage, transit-time\051 =) 110.45 622.95 T
6 F
(// 5) 492.05 622.95 T
4 F
(if \050storage = #f\051) 121.25 611.95 T
6 F
(// 6) 492.05 611.95 T
4 F
(values \050airport.runway-instances[0],) 142.85 600.95 T
6 F
(// 7) 492.05 600.95 T
4 F
(f) 186.05 589.95 T
(lying-time \050aircraft, airport\051\051;) 191.45 589.95 T
6 F
(// 8) 492.05 589.95 T
4 F
(elseif \050instance? \050storage, <runway>\051\051) 132.05 578.95 T
6 F
(// 9) 492.05 578.95 T
4 F
(values \050f) 142.85 567.95 T
(ind-connection \050storage, <taxiway>\051,) 191.45 567.95 T
6 F
(// 10) 486.65 567.95 T
4 F
(brake-time \050aircraft\051\051;) 186.05 556.95 T
6 F
(// 11) 486.65 556.95 T
4 F
(elseif \050instance? \050storage, <taxiway>\051\051) 132.05 545.95 T
6 F
(// 12) 486.65 545.95 T
4 F
(values \050f) 142.85 534.95 T
(ind-connection \050storage, <gate>\051,) 191.45 534.95 T
6 F
(// 13) 486.65 534.95 T
4 F
(gate-time \050aircraft\051\051;) 186.05 523.95 T
6 F
(// 14) 486.65 523.95 T
4 F
(else values \050#f, #f\051;) 132.05 512.95 T
6 F
(// 15) 486.65 512.95 T
4 F
(end if;) 121.25 501.95 T
6 F
(// 16) 486.65 501.95 T
4 F
(if \050next-storage\051) 110.45 490.95 T
6 F
(// 17) 486.65 490.95 T
4 F
(next-storage.vehicle-currently-occupying := aircraft;) 121.25 479.95 T
6 F
(// 18) 486.65 479.95 T
4 F
(if \050storage\051) 121.25 468.95 T
6 F
(// 19) 486.65 468.95 T
4 F
(storage.vehicle-currently-occupying := #f;) 132.05 457.95 T
6 F
(// 20) 486.65 457.95 T
4 F
(end if;) 121.25 446.95 T
6 F
(// 21) 486.65 446.95 T
4 F
(land-aircraft \050aircraft, airport, storage: next-storage,) 121.25 435.95 T
6 F
(// 22) 486.65 435.95 T
4 F
(time: time + transit-time\051;) 202.25 424.95 T
6 F
(// 23) 486.65 424.95 T
4 F
(end if;) 110.45 413.95 T
6 F
(// 24) 486.65 413.95 T
4 F
(end method land-aircraft;) 99.65 402.95 T
6 F
(// 25) 486.65 402.95 T
1 11 Q
-0.39 (In the pr) 99.65 382.62 P
-0.39 (eceding method, if ther) 140.49 382.62 P
-0.39 (e is a vehicle container in the variable) 252.14 382.62 P
4 9.5 Q
-0.81 (storage) 433.84 382.62 P
1 11 Q
-0.39 (, we) 473.74 382.62 P
(display the curr) 99.65 368.62 T
(ent position of the air) 176.43 368.62 T
(craft r) 280.14 368.62 T
(elative to a vehicle storage container) 309.01 368.62 T
(,) 484.8 368.62 T
(and the time and air) 99.65 354.62 T
(craft information \050line 4\051. In line 5 we initialize the local vari-) 197.77 354.62 T
-0.75 (ables) 99.65 340.62 P
4 9.5 Q
-1.55 (next-storage) 126.36 340.62 P
1 11 Q
-0.75 ( and) 194.76 340.62 P
4 9.5 Q
-1.55 (transit-time) 217.39 340.62 P
1 11 Q
-0.75 ( to the two values which will be r) 285.79 340.62 P
-0.75 (eturned by) 441.22 340.62 P
(executing the) 99.65 326.62 T
4 9.5 Q
(if-elseif-else) 167.44 326.62 T
1 11 Q
( contr) 247.24 326.62 T
(ol str) 275.02 326.62 T
(uctur) 299.48 326.62 T
(e on lines 6 though 16. In Dylan,) 325.36 326.62 T
(unlike other languages, contr) 99.65 312.62 T
(ol str) 241.5 312.62 T
(uctur) 265.97 312.62 T
(es like) 291.85 312.62 T
4 9.5 Q
(if) 325.07 312.62 T
1 11 Q
( may r) 336.47 312.62 T
(eturn one or mor) 367.45 312.62 T
(e values) 449.83 312.62 T
(to the part of the pr) 99.65 298.62 T
(ogram which used the contr) 193.97 298.62 T
(ol str) 330.29 298.62 T
(uctur) 354.75 298.62 T
(e \050in this case) 380.63 298.62 T
4 9.5 Q
(let) 448.34 298.62 T
1 11 Q
(\051.) 465.44 298.62 T
(In lines 6-16, we compute what the next container will be, and how long it) 126.65 284.62 T
(will take \050r) 99.65 270.62 T
(epr) 152.21 270.62 T
(esented as a) 168.23 270.62 T
4 9.5 Q
(<time-offset>) 229.33 270.62 T
1 11 Q
( instance\051 for the air) 303.43 270.62 T
(craft to r) 400.12 270.62 T
(each that) 441.33 270.62 T
(container) 99.65 256.62 T
(. In lines 6-16, we use) 144.43 256.62 T
4 9.5 Q
(if) 250.45 256.62 T
1 11 Q
(,) 261.85 256.62 T
4 9.5 Q
(elseif) 267.35 256.62 T
1 11 Q
(, and) 301.55 256.62 T
4 9.5 Q
(else) 328.42 256.62 T
1 11 Q
( as described below:) 351.22 256.62 T
(If the air) 126.65 242.62 T
(craft is not curr) 167.62 242.62 T
(ently in any storage container \050line 6\051, we assume) 241.72 242.62 T
(that the air) 99.65 228.62 T
(craft is airborne. In this case:) 152.33 228.62 T
(\245) 108.65 208.62 T
(The next storage container is a r) 126.65 208.62 T
(unway) 281.2 208.62 T
(. In this method, we choose the \336rst) 313.8 208.62 T
(r) 126.65 194.62 T
(unway at the airport.) 130.9 194.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "125" 127
%%Page: "126" 128
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(126) 63.65 702.62 T
0 9.5 Q
(9.1 Simple landing and four approaches) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(\245) 108.65 665.62 T
(The time depends on how long it will take for the air) 126.65 665.62 T
(craft to get to the air-) 382.61 665.62 T
(port, plus how long it takes for the air) 126.65 651.62 T
(craft\325s wheels to touch down on the) 310.4 651.62 T
(r) 126.65 637.62 T
(unway) 130.9 637.62 T
(. This computation is performed by the method) 163.51 637.62 T
4 9.5 Q
(f) 396.36 637.62 T
(lying-time) 402.06 637.62 T
1 11 Q
( \050not) 459.06 637.62 T
(de\336ned her) 126.65 623.62 T
(e\051, which is based on the position of the airport, the position of) 182.25 623.62 T
(the air) 126.65 609.62 T
(craft \050including altitude of the air) 157.5 609.62 T
(craft\051, the cr) 319.13 609.62 T
(uising speed of the air-) 377.42 609.62 T
(craft, and many other factors.) 126.65 595.62 T
(If the air) 99.65 575.62 T
(craft is not in the air) 140.62 575.62 T
(, but alr) 237.3 575.62 T
(eady on the r) 274.7 575.62 T
(unway \050line 9\051:) 338.48 575.62 T
(\245) 108.65 555.62 T
(The next storage container is a taxiway) 126.65 555.62 T
(.) 314.47 555.62 T
(\245) 108.65 535.62 T
(The time depends on how fast the air) 126.65 535.62 T
(craft can brake \050under curr) 307.25 535.62 T
(ent condi-) 437.36 535.62 T
(tions\051, plus how long it will take to get to the start of the taxiway) 126.65 521.62 T
(. The) 439.42 521.62 T
(method) 126.65 507.62 T
4 9.5 Q
(brake-time) 167.1 507.62 T
1 11 Q
( \050not de\336ned her) 224.1 507.62 T
(e\051 computes the time it will take this) 304.86 507.62 T
(particular air) 126.65 493.62 T
(craft to slow to taxi speed, and taxi to the end of the r) 190.05 493.62 T
(unway) 448.27 493.62 T
(.) 480.87 493.62 T
(The) 126.65 479.62 T
4 9.5 Q
(f) 147.81 479.62 T
(ind-connection) 153.51 479.62 T
1 11 Q
( method \050not de\336ned her) 233.31 479.62 T
(e\051 simply selects the \336rst) 354.52 479.62 T
(connected taxiway to the r) 126.65 465.62 T
(unway) 254.93 465.62 T
(.) 287.53 465.62 T
(If the air) 99.65 445.62 T
(craft is neither in the air) 140.62 445.62 T
(, nor on the r) 255.78 445.62 T
(unway) 318.21 445.62 T
(, but is at the start of the taxi-) 350.81 445.62 T
(way \050line 12\051:) 99.65 431.62 T
(\245) 108.65 411.62 T
(The next storage container is the gate.) 126.65 411.62 T
(\245) 108.65 391.62 T
(The time is computed by the) 126.65 391.62 T
4 9.5 Q
(gate-time) 268.08 391.62 T
1 11 Q
( function \050not de\336ned her) 319.38 391.62 T
(e\051, which) 443.66 391.62 T
(r) 126.65 377.62 T
(eturns an instance of) 130.79 377.62 T
4 9.5 Q
(<time-offset>) 234.17 377.62 T
1 11 Q
( that r) 308.27 377.62 T
(epr) 336.99 377.62 T
(esents how long the air) 353.02 377.62 T
(craft) 465.29 377.62 T
(will take to transition fr) 126.65 363.62 T
(om the taxiway to the gate.) 241.19 363.62 T
-0.24 (Otherwise, we must be at the gate alr) 99.65 343.62 P
-0.24 (eady \050line 15\051, so we r) 278.61 343.62 P
-0.24 (eturn false for both the) 383.2 343.62 P
(next storage container and the time.) 99.65 329.62 T
-0.3 (Now we examine the next storage container that was just computed. If ther) 126.65 315.62 P
-0.3 (e) 487.93 315.62 P
(is a next stage of the landing pr) 99.65 301.62 T
(ocess \050line 17\051, then we place the air) 251.56 301.62 T
(craft in that) 425.12 301.62 T
-0.12 (container \050line 18\051, and r) 99.65 287.62 P
-0.12 (emove the air) 217.7 287.62 P
-0.12 (craft fr) 283.54 287.62 P
-0.12 (om its curr) 315.96 287.62 P
-0.12 (ent container) 368.41 287.62 P
-0.12 (, if any \050lines) 431.08 287.62 P
(19-20\051. W) 99.65 273.62 T
(e then call the) 144.46 273.62 T
4 9.5 Q
(land-aircraft) 214.43 273.62 T
1 11 Q
( method with updated information about) 288.53 273.62 T
(what time it is, and the storage container in which the air) 99.65 259.62 T
(craft curr) 376.46 259.62 T
(ently r) 421.2 259.62 T
(esides) 452.67 259.62 T
(\050lines 22-23\051. If ther) 99.65 245.62 T
(e is no next stage, then we ar) 193.15 245.62 T
(e \336nished.) 332.51 245.62 T
(When a method calls itself \050as) 126.65 231.62 T
4 9.5 Q
(land-aircraft) 274.28 231.62 T
1 11 Q
( does at the end\051 we say the) 348.38 231.62 T
(method) 99.65 217.62 T
2 F
(recurses) 140.1 217.62 T
1 F
(. Recursion is a perfectly acceptable contr) 181.03 217.62 T
(ol str) 381.15 217.62 T
(uctur) 405.61 217.62 T
(e when used) 431.5 217.62 T
(in the right cir) 99.65 203.62 T
(cumstances. Many times it can simplify certain algorithms such as) 168.64 203.62 T
(tr) 99.65 189.62 T
(ee walks. Recursion is both safe and ef) 107.38 189.62 T
(\336cient in Dylan.) 293.72 189.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "126" 128
%%Page: "127" 129
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 345.65 702.62 T
2 11 Q
(127) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(9.1.2  Second approach \321 using) 99.65 664.29 T
4 F
(case) 266.72 664.29 T
1 11 Q
(The highly stylized) 99.65 644.62 T
4 9.5 Q
(if-elseif-else) 196.01 644.62 T
1 11 Q
( pattern that forms the cor) 275.81 644.62 T
(e of the contr) 402.62 644.62 T
(ol) 466.09 644.62 T
(str) 99.65 630.62 T
(uctur) 112.15 630.62 T
(e of the method in Section 9.1.1 is generally useful. Dylan pr) 138.04 630.62 T
(ovides the) 429.49 630.62 T
4 9.5 Q
(case) 99.65 616.62 T
1 11 Q
( contr) 122.45 616.62 T
(ol constr) 150.22 616.62 T
(uct to captur) 191.98 616.62 T
(e this common contr) 253.54 616.62 T
(ol \337ow pattern. Deciding) 352.66 616.62 T
-0.05 (whether to us the) 99.65 602.62 P
4 9.5 Q
-0.1 (if-elseif-else) 187.05 602.62 P
1 11 Q
-0.05 ( pattern or) 266.85 602.62 P
4 9.5 Q
-0.1 (case) 320.6 602.62 P
1 11 Q
-0.05 ( is lar) 343.4 602.62 P
-0.05 (gely a matter of style. For) 369.52 602.62 P
(conditionals with many arms,) 99.65 588.62 T
4 9.5 Q
(case) 247.49 588.62 T
1 11 Q
( can be clear) 270.29 588.62 T
(er than) 329.68 588.62 T
4 9.5 Q
(if-elseif-else) 366.68 588.62 T
1 11 Q
(. The fol-) 446.48 588.62 T
(lowing method is equivalent to the method in Section 9.1.1, but we use) 99.65 574.62 T
4 9.5 Q
(case) 445.83 574.62 T
1 11 Q
(instead of) 99.65 560.62 T
4 9.5 Q
(if-elseif-else) 150.16 560.62 T
1 11 Q
(:) 229.96 560.62 T
4 9 Q
(def) 99.65 539.95 T
(ine method land-aircraft) 115.85 539.95 T
(\050aircraft :: <standard-aircraft>, airport :: <airport>,) 132.05 528.95 T
(#key storage = #f, time = $midnight\051) 137.45 517.95 T
(say-step \050time, aircraft, storage\051;) 110.45 506.95 T
(let \050next-storage, transit-time\051 =) 110.45 495.95 T
(case storage = #f =>) 121.25 484.95 T
(values \050airport.runway-instances[0],) 159.05 473.95 T
(f) 202.25 462.95 T
(lying-time \050aircraft, airport\051\051;) 207.65 462.95 T
(instance? \050storage, <runway>\051 =>) 148.25 451.95 T
(values \050f) 159.05 440.95 T
(ind-connection \050storage, <taxiway>\051,) 207.65 440.95 T
(brake-time \050aircraft\051\051;) 202.25 429.95 T
(instance? \050storage, <taxiway>\051 =>) 148.25 418.95 T
(values \050f) 159.05 407.95 T
(ind-connection \050storage, <gate>\051, gate-time \050aircraft\051\051;) 207.65 407.95 T
(otherwise => values \050#f, #f\051;) 148.25 396.95 T
(end case;) 121.25 385.95 T
(if \050next-storage\051) 110.45 374.95 T
(next-storage.vehicle-currently-occupying := aircraft;) 121.25 363.95 T
(if \050storage\051) 121.25 352.95 T
(storage.vehicle-currently-occupying := #f;) 132.05 341.95 T
(end if;) 121.25 330.95 T
(land-aircraft \050aircraft, airport, storage: next-storage,) 121.25 319.95 T
(time: time + transit-time\051;) 202.25 308.95 T
(end if;) 110.45 297.95 T
(end method land-aircraft;) 99.65 286.95 T
1 11 Q
-0.34 (In the) 99.65 266.62 P
4 9.5 Q
-0.7 (case) 129.84 266.62 P
1 11 Q
-0.34 ( constr) 152.64 266.62 P
-0.34 (uct in the pr) 184.85 266.62 P
-0.34 (eceding method, we use r) 242.81 266.62 P
-0.34 (oughly the same pr) 365.93 266.62 P
-0.34 (edicate) 458.8 266.62 P
(\050is this an instance of x?\051 for the second and thir) 99.65 252.62 T
(d arms of the) 331.41 252.62 T
4 9.5 Q
(case) 398.28 252.62 T
1 11 Q
( contr) 421.08 252.62 T
(ol str) 448.85 252.62 T
(uc-) 473.32 252.62 T
(tur) 99.65 238.62 T
(e. In the \336rst clause, we ar) 114.01 238.62 T
(e not checking for a particular type, but rather for a) 240.14 238.62 T
-0.01 (particular object \050the canonical value for false,) 99.65 224.62 P
4 9.5 Q
-0.03 (#f) 325.78 224.62 P
1 11 Q
-0.01 (\051. Note that we can take any par-) 337.18 224.62 P
(ticular object, and turn it into a type using the) 99.65 210.62 T
4 9.5 Q
(singleton) 324.58 210.62 T
1 11 Q
( function. The type) 375.88 210.62 T
-0 (matches only that particular object. \050Note that this type is not a class.\051 So it is pos-) 99.65 196.62 P
(sible to think of the above contr) 99.65 182.62 T
(ol str) 252.89 182.62 T
(uctur) 277.35 182.62 T
(e completely in terms of testing the) 303.24 182.62 T
(object to see what type it is. This fact leads dir) 99.65 168.62 T
(ectly to the thir) 322.06 168.62 T
(d appr) 395.55 168.62 T
(oach.) 427.89 168.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "127" 129
%%Page: "128" 130
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(128) 63.65 702.62 T
0 9.5 Q
(9.1 Simple landing and four approaches) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(9.1.3  Third approach \321 using) 99.65 664.29 T
4 F
(select) 254.87 664.29 T
1 11 Q
(The) 99.65 644.62 T
4 9.5 Q
(select) 120.81 644.62 T
1 11 Q
( constr) 155.01 644.62 T
(uct \050intr) 187.56 644.62 T
(oduced in Section 8.7, page 1) 226.41 644.62 T
(17\051 normally uses the) 366.01 644.62 T
4 9.5 Q
(==) 472.65 644.62 T
1 11 Q
-0.62 (pr) 99.65 630.62 P
-0.62 (edicate. However) 110.41 630.62 P
-0.62 (, we can cause it to use the) 194.33 630.62 P
4 9.5 Q
-1.28 (instance?) 320.51 630.62 P
1 11 Q
-0.62 ( pr) 371.81 630.62 P
-0.62 (edicate by using the) 384.69 630.62 P
4 9.5 Q
-1.28 (by) 482.12 630.62 P
1 11 Q
-0.22 (option, which enables us to specify the comparison pr) 99.65 616.62 P
-0.22 (edicate. Any pr) 359.53 616.62 P
-0.22 (edicate spec-) 433.6 616.62 P
(i\336ed using the) 99.65 602.62 T
4 9.5 Q
(by) 172.02 602.62 T
1 11 Q
( clause will be passed two ar) 183.42 602.62 T
(gument. The \336rst ar) 322.04 602.62 T
(gument will) 418.07 602.62 T
-0.01 (always be the ar) 99.65 588.62 P
-0.01 (gument to) 178.27 588.62 P
4 9.5 Q
-0.03 (select) 231.05 588.62 P
1 11 Q
-0.01 ( prior to the) 265.25 588.62 P
4 9.5 Q
-0.03 (by) 325.55 588.62 P
1 11 Q
-0.01 ( clause \050the dispatch value\051. The) 336.95 588.62 P
(second ar) 99.65 574.62 T
(gument to the pr) 145.99 574.62 T
(edicate will be value of the \336rst part of each clause) 227.57 574.62 T
(befor) 99.65 560.62 T
(e the) 124.82 560.62 T
4 9.5 Q
(=>) 150.84 560.62 T
1 11 Q
( separator) 162.24 560.62 T
(. The pr) 210 560.62 T
(edicate will be called with the dispatch value and) 247.43 560.62 T
(the \336rst part of each clause until the pr) 99.65 546.62 T
(edicate speci\336ed in the by clause r) 287.11 546.62 T
(eturns a) 452.67 546.62 T
(tr) 99.65 532.62 T
(ue value. The value r) 107.49 532.62 T
(eturned by select will then be the r) 209.34 532.62 T
(esult of executing the) 377.08 532.62 T
(r) 99.65 518.62 T
(est of the successful clause. If the speci\336ed pr) 103.79 518.62 T
(edicate never r) 322.96 518.62 T
(eturns a tr) 394.54 518.62 T
(ue value) 444.28 518.62 T
(for any clause, and an otherwise clause exists, then that clause is executed.) 99.65 504.62 T
(The following method is equivalent to the land-air) 126.65 490.62 T
(craft methods in Section) 371.46 490.62 T
(9.1.1 and Section 9.1.2, but this method uses the) 99.65 476.62 T
4 9.5 Q
(select) 333.23 476.62 T
1 11 Q
( contr) 367.43 476.62 T
(ol str) 395.21 476.62 T
(uctur) 419.67 476.62 T
(e and the) 445.55 476.62 T
4 9.5 Q
(singleton) 99.65 462.62 T
1 11 Q
( function:) 150.95 462.62 T
4 9 Q
(def) 99.65 441.95 T
(ine method land-aircraft) 115.85 441.95 T
(\050aircraft :: <standard-aircraft>, airport :: <airport>,) 132.05 430.95 T
(#key storage = #f, time = $midnight\051) 137.45 419.95 T
(say-step \050time, aircraft, storage\051;) 110.45 408.95 T
(let \050next-storage, transit-time\051 =) 110.45 397.95 T
(select \050storage by instance?\051) 121.25 386.95 T
(singleton \050#f\051 =>) 132.05 375.95 T
(values \050airport.runway-instances[0],) 142.85 364.95 T
(f) 186.05 353.95 T
(lying-time\050aircraft, airport\051\051;) 191.45 353.95 T
(<runway> =>) 132.05 342.95 T
(values \050f) 142.85 331.95 T
(ind-connection \050storage, <taxiway>\051,) 191.45 331.95 T
(brake-time \050aircraft\051\051;) 186.05 320.95 T
(<taxiway> =>) 132.05 309.95 T
(values \050f) 137.45 298.95 T
(ind-connection \050storage, <gate>\051, gate-time \050aircraft\051\051;) 186.05 298.95 T
(otherwise => values \050#f, #f\051;) 132.05 287.95 T
(end select;) 121.25 276.95 T
(if \050next-storage\051) 110.45 265.95 T
(next-storage.vehicle-currently-occupying := aircraft;) 121.25 254.95 T
(if \050storage\051) 121.25 243.95 T
(storage.vehicle-currently-occupying := #f;) 132.05 232.95 T
(end if;) 121.25 221.95 T
(land-aircraft \050aircraft, airport, storage: next-storage,) 121.25 210.95 T
(time: time + transit-time\051;) 202.25 199.95 T
(end if;) 110.45 188.95 T
(end method land-aircraft;) 99.65 177.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "128" 130
%%Page: "129" 131
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 345.65 702.62 T
2 11 Q
(129) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(The) 99.65 665.62 T
4 9.5 Q
(select) 120.81 665.62 T
1 11 Q
( constr) 155.01 665.62 T
(uct is mor) 187.56 665.62 T
(e concise when you use the same pr) 235.9 665.62 T
(edicate with a) 409.45 665.62 T
(particular \336rst ar) 99.65 651.62 T
(gument, and you want to execute dif) 181.85 651.62 T
(fer) 360.42 651.62 T
(ent code depending on) 373.5 651.62 T
(whether the pr) 99.65 637.62 T
(edicate is tr) 171.61 637.62 T
(ue for dif) 227.25 637.62 T
(fer) 272.05 637.62 T
(ent values of the second ar) 285.13 637.62 T
(gument to the) 414.14 637.62 T
-0.24 (pr) 99.65 623.62 P
-0.24 (edicate. Y) 110.41 623.62 P
-0.24 (ou should use) 156.42 623.62 P
4 9.5 Q
-0.5 (case) 226.77 623.62 P
1 11 Q
-0.24 ( instead of) 249.57 623.62 P
4 9.5 Q
-0.5 (select) 302.11 623.62 P
1 11 Q
-0.24 ( if you cannot use the same pr) 336.31 623.62 P
-0.24 (ed-) 479.99 623.62 P
(icate for each arm, or if the \336rst ar) 99.65 609.62 T
(gument to the pr) 263.83 609.62 T
(edicate is not always the same.) 345.41 609.62 T
3 13 Q
(9.1.4  Fourth approach \321 using generic functions) 99.65 578.29 T
1 11 Q
(Finally) 99.65 558.62 T
(, it becomes obvious that the code is performing type dispatch, a task best) 132.16 558.62 T
(done by generic functions, which ar) 99.65 544.62 T
(e quite good at it. In the fourth appr) 273.38 544.62 T
(oach, we) 447.84 544.62 T
(r) 99.65 530.62 T
(ewrite the) 103.79 530.62 T
4 9.5 Q
(land-aircraft) 155.4 530.62 T
1 11 Q
( method to call the generic function) 229.5 530.62 T
4 9.5 Q
(next-landing-) 404.34 530.62 T
(step) 99.65 516.62 T
1 11 Q
(, which r) 122.45 516.62 T
(eturns dif) 164.91 516.62 T
(fer) 211.94 516.62 T
(ent r) 225.02 516.62 T
(esults depending on the type of vehicle container) 247.18 516.62 T
(instance in the) 99.65 502.62 T
4 9.5 Q
(storage) 172.67 502.62 T
1 11 Q
( variable.) 212.57 502.62 T
4 9 Q
(def) 99.65 481.95 T
(ine method land-aircraft) 115.85 481.95 T
(\050aircraft :: <standard-aircraft>, airport :: <airport>,) 132.05 470.95 T
(#key storage = #f, time = $midnight\051) 137.45 459.95 T
(say-step \050time, aircraft, storage\051;) 110.45 448.95 T
(let \050next-storage, transit-time\051 =) 110.45 437.95 T
(next-landing-step \050storage, aircraft, airport\051;) 121.25 426.95 T
(if \050next-storage\051) 110.45 415.95 T
(next-storage.vehicle-currently-occupying := aircraft;) 121.25 404.95 T
(if \050storage\051) 121.25 393.95 T
(storage.vehicle-currently-occupying := #f;) 132.05 382.95 T
(end if;) 121.25 371.95 T
(land-aircraft \050aircraft, airport, storage: next-storage,) 121.25 360.95 T
(time: time + transit-time\051\051;) 202.25 349.95 T
(end if;) 110.45 338.95 T
(end method land-aircraft;) 99.65 327.95 T
(def) 99.65 308.95 T
(ine method next-landing-step \050storage) 115.85 308.95 T
(:: singleton \050#f\051,) 326.45 308.95 T
(aircraft) 277.85 297.95 T
(:: <standard-aircraft>,) 326.45 297.95 T
(airport) 277.85 286.95 T
(:: <airport>\051) 326.45 286.95 T
(values \050airport.runway-instances[0], f) 110.45 275.95 T
(lying-time \050aircraft, airport\051\051;) 315.65 275.95 T
(end;) 99.65 264.95 T
(def) 99.65 245.95 T
(ine method next-landing-step \050storage) 115.85 245.95 T
(:: <runway>,) 326.45 245.95 T
(aircraft) 277.85 234.95 T
(:: <standard-aircraft>,) 326.45 234.95 T
(airport) 277.85 223.95 T
(:: <airport>\051) 326.45 223.95 T
(values \050f) 110.45 212.95 T
(ind-connection \050storage, <taxiway>\051, brake-time \050aircraft\051\051;) 159.05 212.95 T
(end;) 99.65 201.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "129" 131
%%Page: "130" 132
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(130) 63.65 702.62 T
0 9.5 Q
(9.2 Need for an improved landing algorithm) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine method next-landing-step \050storage) 115.85 666.95 T
(:: <taxiway>,) 326.45 666.95 T
(aircraft) 277.85 655.95 T
(:: <standard-aircraft>,) 326.45 655.95 T
(airport) 277.85 644.95 T
(:: <airport>\051) 326.45 644.95 T
(values \050f) 110.45 633.95 T
(ind-connection \050storage, <gate>\051, gate-time \050aircraft\051\051;) 159.05 633.95 T
(end;) 99.65 622.95 T
(def) 99.65 603.95 T
(ine method next-landing-step \050storage) 115.85 603.95 T
(:: <gate>,) 326.45 603.95 T
(aircraft) 277.85 592.95 T
(:: <standard-aircraft>,) 326.45 592.95 T
(airport) 277.85 581.95 T
(:: <airport>\051) 326.45 581.95 T
(values \050#f, #f\051;) 110.45 570.95 T
(end;) 99.65 559.95 T
1 11 Q
(This appr) 99.65 539.62 T
(oach is better in several important ways. The) 146.28 539.62 T
4 9.5 Q
(land-aircraft) 366.71 539.62 T
1 11 Q
( method is) 440.81 539.62 T
(now simpler and easier to follow) 99.65 525.62 T
(. Mor) 258.69 525.62 T
(e importantly) 284.74 525.62 T
(, it is now easier to customize) 349.81 525.62 T
(and extend the landing sequence. For example, general aviation air) 99.65 511.62 T
(craft usually) 425.06 511.62 T
(do not \337y dir) 99.65 497.62 T
(ectly to the r) 163.49 497.62 T
(unway and touch down. Often they \336rst \337y in a r) 223.9 497.62 T
(ectan-) 462.66 497.62 T
(gular pattern ar) 99.65 483.62 T
(ound the airport. It would be easy to r) 175.89 483.62 T
(epr) 360.92 483.62 T
(esent each piece of that) 376.95 483.62 T
(pattern as a vehicle container) 99.65 469.62 T
(, and add those steps to the landing pr) 240.83 469.62 T
(ocedur) 427.02 469.62 T
(e by) 460.68 469.62 T
-0.08 (adding several) 99.65 455.62 P
4 9.5 Q
-0.17 (next-landing-step) 174.11 455.62 P
1 11 Q
-0.08 ( methods. By isolating the main dispatch loop) 271.01 455.62 P
(fr) 99.65 441.62 T
(om the particular steps involved in landing the air) 107.46 441.62 T
(craft, the softwar) 351.52 441.62 T
(e has signi\336-) 433.74 441.62 T
(cantly better modularity) 99.65 427.62 T
(.) 216.78 427.62 T
(Note that the \336nal de\336nitions for landing the air) 126.65 413.62 T
(craft ar) 360.51 413.62 T
(e tighter) 394.88 413.62 T
(. If for some) 434.59 413.62 T
(r) 99.65 399.62 T
(eason the) 103.79 399.62 T
4 9.5 Q
(storage) 152.39 399.62 T
1 11 Q
( variable is ever initialized to something other than the) 192.29 399.62 T
(expected classes of instances, the appr) 99.65 385.62 T
(opriate err) 284.65 385.62 T
(or is r) 335.67 385.62 T
(eported. This was not so) 363.54 385.62 T
-0.45 (with the pr) 99.65 371.62 P
-0.45 (evious thr) 152.62 371.62 P
-0.45 (ee appr) 201.04 371.62 P
-0.45 (oaches. This checking occurs as every call to a generic) 236.75 371.62 P
-0.08 (function is veri\336ed to be corr) 99.65 357.62 P
-0.08 (ect either at compile time \050if possible\051, or at r) 239.62 357.62 P
-0.08 (un time) 455.51 357.62 P
(\050if necessary\051. If an attempt is made to call a generic function with ar) 99.65 343.62 T
(guments for) 431.79 343.62 T
(which ther) 99.65 329.62 T
(e is no applicable method, an err) 151.87 329.62 T
(or will always be r) 310.08 329.62 T
(eported to the pr) 399.86 329.62 T
(o-) 481.52 329.62 T
(grammer) 99.65 315.62 T
(.) 143.84 315.62 T
3 15 Q
(9.2  Need for an improved landing algorithm) 99.65 275.95 T
1 11 Q
-0.04 (The landing algorithm we implemented in the pr) 99.65 255.62 P
-0.04 (evious sections has some simpli-) 337.67 255.62 P
(fying assumptions:) 99.65 241.62 T
(\245) 108.65 221.62 T
(The algorithm can handle only one vehicle at a time.) 126.65 221.62 T
(\245) 108.65 201.62 T
(The algorithm assumes that all r) 126.65 201.62 T
(unways, taxiways, and gates ar) 283.22 201.62 T
(e always) 435.03 201.62 T
(available.) 126.65 187.62 T
(\245) 108.65 167.62 T
(The algorithm assumes that ther) 126.65 167.62 T
(e is only one r) 283.72 167.62 T
(unway) 351.51 167.62 T
(.) 384.11 167.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "130" 132
%%Page: "131" 133
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 345.65 702.62 T
2 11 Q
(131) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(\245) 108.65 665.62 T
(The algorithm only lands air) 126.65 665.62 T
(craft, eliminating the ability to r) 265.19 665.62 T
(euse gates.) 419.35 665.62 T
(The following sections addr) 99.65 645.62 T
(ess these pr) 235.05 645.62 T
(oblems.) 291.09 645.62 T
3 15 Q
(9.3  Classes that store more than one vehicle) 99.65 605.95 T
1 11 Q
-0 (T) 99.65 585.62 P
-0 (o addr) 105.38 585.62 P
-0 (ess the pr) 137.22 585.62 P
-0 (oblems with the algorithm, we will modify the way vehicles ar) 183.33 585.62 P
-0 (e) 487.63 585.62 P
(stor) 99.65 571.62 T
(ed. Our plan is to split the) 118.05 571.62 T
4 9.5 Q
(<vehicle-storage>) 247.36 571.62 T
1 11 Q
( class into two subclasses, one) 344.26 571.62 T
(that operates much like the curr) 99.65 557.62 T
(ently) 254.41 557.62 T
4 9.5 Q
(<vehicle-storage>) 281.73 557.62 T
1 11 Q
( class, which can only) 378.63 557.62 T
(hold one vehicle at a time, and one that can handle mor) 99.65 543.62 T
(e than one air) 368.97 543.62 T
(craft, and) 434.91 543.62 T
(can also handle inbound and outbound traf) 99.65 529.62 T
(\336c at the same time. Figur) 310.84 529.62 T
(e 9.1 shows) 436.35 529.62 T
(the classes we plan to de\336ne.) 99.65 515.62 T
0 0 0 1 0 0 0 K
99.65 397.96 513.65 405.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 155.69 409.62 T
(e 9.1  Classes that stor) 181.91 409.62 T
(e one vehicle, or mor) 287.91 409.62 T
(e than one) 389.27 409.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 13 Q
(9.3.1  Revised de\336nition of <) 99.65 372.29 T
4 F
(vehicle-storage>) 243.32 372.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(W) 99.65 352.63 T
(e r) 109.64 352.63 T
(ede\336ne) 121.8 352.63 T
4 9.5 Q
(<vehicle-storage>) 160.14 352.63 T
1 11 Q
( and de\336ne a new class,) 257.04 352.63 T
4 9.5 Q
(<single-capacity-) 374.48 352.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(storage>) 99.65 338.63 T
1 11 Q
(:) 145.25 338.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(def) 99.65 317.96 T
(ine class <vehicle-storage> \050<physical-object>\051) 115.85 317.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot storage-capacity :: <size>,) 110.45 306.96 T
(init-keyword: capacity:,) 326.45 306.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(init-value: *default-capacity*;) 326.45 295.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot identif) 110.45 284.96 T
(ier) 175.25 284.96 T
(:: <byte-string>, required-init-keyword: id:;) 229.25 284.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot connected-to) 110.45 273.96 T
(:: <simple-object-vector>;) 229.25 273.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 99.65 262.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(def) 99.65 243.96 T
(ine class <single-capacity-storage> \050<vehicle-storage>\051) 115.85 243.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot vehicle-currently-occupying :: <vehicle>, init-value: #f;) 110.45 232.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 99.65 221.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
-0.33 (The pr) 99.65 201.63 P
-0.33 (eceding code de\336nes the new class) 131.24 201.63 P
4 9.5 Q
-0.69 (<single-capacity-storage>) 300.48 201.63 P
1 11 Q
-0.33 (. Instances) 442.98 201.63 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of) 99.65 187.63 T
4 9.5 Q
(<single-capacity-storage>) 112.07 187.63 T
1 11 Q
( r) 254.57 187.63 T
(epr) 261.46 187.63 T
(esent containers at the airport that can be) 277.49 187.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(used by only one air) 99.65 173.63 T
(craft at a time. Note that we de\336ne the slot) 198.38 173.63 T
4 9.5 Q
(vehicle-cur-) 407.52 173.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
0 0 0 1 0 0 0 K
140.65 425.95 472.65 497.95 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<vehicle-storage>) 258.65 489.39 T
(<single-capacity-storage>) 149.75 444.55 T
(<multiple-capacity-storage>) 311.75 444.55 T
260.98 461.58 249.07 460.05 258.36 467.66 259.67 464.62 4 Y
V
303.51 483.52 259.67 464.62 2 L
0.5 H
2 Z
N
353.65 467.56 362.93 459.95 351.03 461.48 352.34 464.52 4 Y
V
308.51 483.42 352.34 464.52 2 L
N
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "131" 133
%%Page: "132" 134
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(132) 63.65 702.62 T
0 9.5 Q
(9.3 Classes that store more than one vehicle) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 F
0 X
(rently-occupying) 99.65 665.62 T
1 11 Q
( in the class) 190.85 665.62 T
4 9.5 Q
(<single-capacity-storage>) 249.62 665.62 T
1 11 Q
(, not in the class) 392.12 665.62 T
4 9.5 Q
(<vehicle-storage>) 99.65 651.62 T
1 11 Q
(.) 196.55 651.62 T
(The next goal is to de\336ne the) 126.65 637.62 T
4 9.5 Q
(<multiple-capacity-storage>) 269.1 637.62 T
1 11 Q
( class, which) 423 637.62 T
-0.04 (we do in Section 9.3.5. First, we take a short detour) 99.65 623.62 P
-0.04 (, to describe two Dylan classes) 345.25 623.62 P
(that we need to use when implementing the) 99.65 609.62 T
4 9.5 Q
(<multiple-capacity-storage>) 316.17 609.62 T
1 11 Q
(class, and to de\336ne two constr) 99.65 595.62 T
(uctors.) 246.16 595.62 T
3 13 Q
(9.3.2  The) 99.65 564.29 T
4 F
(<object-table>) 151.21 564.29 T
3 F
( class) 260.41 564.29 T
1 11 Q
-0.26 (The class) 99.65 544.62 P
4 9.5 Q
-0.54 (<object-table>) 145.96 544.62 P
1 11 Q
-0.26 ( is a subclass of) 225.76 544.62 P
4 9.5 Q
-0.54 (<table>) 301.53 544.62 P
1 11 Q
-0.26 (. T) 341.43 544.62 P
-0.26 (ables ar) 352.41 544.62 P
-0.26 (e collections, like lists) 389.26 544.62 P
(and vectors. However) 99.65 530.62 T
(, lists and vectors ar) 206.11 530.62 T
(e sequences, while tables ar) 302.41 530.62 T
(e not. An) 435.84 530.62 T
(instance of) 99.65 516.62 T
4 9.5 Q
(<table>) 154.73 516.62 T
1 11 Q
( uses an ef) 194.62 516.62 T
(\336cient technique to associate arbitrary keys with) 244.74 516.62 T
(arbitrary values.) 99.65 502.62 T
(Instances of) 126.65 488.62 T
4 9.5 Q
(<object-table>) 186.9 488.62 T
1 11 Q
( use a hashing technique that causes only keys) 266.7 488.62 T
(that ar) 99.65 474.62 T
(e) 131.12 474.62 T
4 9.5 Q
(==) 139.14 474.62 T
1 11 Q
( to be consider) 150.54 474.62 T
(ed the same. Strings ar) 221.03 474.62 T
(e not appr) 330.9 474.62 T
(opriate keys for) 380.54 474.62 T
4 9.5 Q
(<object-table>) 99.65 460.62 T
1 11 Q
(, because it is very easy to have two strings that look the same,) 179.45 460.62 T
(but ar) 99.65 446.62 T
(e not the same instance. See Section 8.4.4, page 108.) 128.35 446.62 T
(The advantage of using) 126.65 432.62 T
4 9.5 Q
(<object-table>) 243.56 432.62 T
1 11 Q
( \050as opposed to some other class of) 323.36 432.62 T
(table\051 is that its performance for storing and r) 99.65 418.62 T
(etrieving data is quite good.) 320.45 418.62 T
3 13 Q
(9.3.3  The) 99.65 387.29 T
4 F
(<deque>) 151.21 387.29 T
3 F
( class) 205.81 387.29 T
1 11 Q
(The class) 99.65 367.62 T
4 9.5 Q
(<deque>) 146.48 367.62 T
1 11 Q
( is similar in behavior to a list, except that it is ef) 186.38 367.62 T
(\336cient to add) 419.94 367.62 T
(and r) 99.65 353.62 T
(emove elements fr) 125.17 353.62 T
(om both ends of a) 214.32 353.62 T
4 9.5 Q
(<deque>) 304.09 353.62 T
1 11 Q
( data str) 343.99 353.62 T
(uctur) 383.31 353.62 T
(e. The generic) 409.19 353.62 T
-0.08 (functions) 99.65 339.62 P
4 9.5 Q
-0.17 (push) 147.76 339.62 P
1 11 Q
-0.08 ( and) 170.55 339.62 P
4 9.5 Q
-0.17 (pop) 194.51 339.62 P
1 11 Q
-0.08 ( operate on the fr) 211.61 339.62 P
-0.08 (ont of these queues. Similarly) 294.34 339.62 P
-0.08 (,) 436.27 339.62 P
4 9.5 Q
-0.17 (push-last) 441.68 339.62 P
1 11 Q
(and) 99.65 325.62 T
4 9.5 Q
(pop-last) 121.02 325.62 T
1 11 Q
( operate on the end of these queues.) 166.62 325.62 T
3 13 Q
(9.3.4  Constructors) 99.65 294.29 T
1 11 Q
(Below we de\336ne some helper functions, called) 99.65 274.62 T
2 F
(constructors) 327.74 274.62 T
1 F
(, which cr) 388.84 274.62 T
(eate) 436.18 274.62 T
(instances of) 99.65 260.62 T
4 9.5 Q
(<object-table>) 159.39 260.62 T
1 11 Q
( and) 239.19 260.62 T
4 9.5 Q
(<deque>) 263.31 260.62 T
1 11 Q
(. Constr) 303.21 260.62 T
(uctors can be a convenient) 341.43 260.62 T
(shorthand for) 99.65 246.62 T
4 9.5 Q
(make) 169.19 246.62 T
1 11 Q
(. In the de\336nition of the) 191.99 246.62 T
4 9.5 Q
(<multiple-capacity-storage>) 308.98 246.62 T
1 11 Q
( class) 462.88 246.62 T
-0.12 (in Section 9.3.5, we use these constr) 99.65 232.62 P
-0.12 (uctors as init-functions. An init-function must) 270.93 232.62 P
(take no ar) 99.65 218.62 T
(guments, so we cannot use) 147.67 218.62 T
4 9.5 Q
(make) 281.02 218.62 T
1 11 Q
( as an init-function.) 303.82 218.62 T
4 9 Q
(def) 99.65 197.95 T
(ine method make-object-table \050\051) 115.85 197.95 T
(make \050<object-table>\051;) 110.45 186.95 T
(end;) 99.65 175.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "132" 134
%%Page: "133" 135
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 345.65 702.62 T
2 11 Q
(133) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine method make-deque \050\051) 115.85 666.95 T
(make \050<deque>\051;) 110.45 655.95 T
(end;) 99.65 644.95 T
3 13 Q
(9.3.5  De\336nition of) 99.65 615.29 T
4 F
(<multiple-capacity-storage>) 194.43 615.29 T
1 11 Q
(In this section we de\336ne the class) 99.65 595.62 T
4 9.5 Q
(<multiple-capacity-storage>) 263.8 595.62 T
1 11 Q
(. This class can) 417.7 595.62 T
(handle mor) 99.65 581.62 T
(e than one vehicle at a time, and it also has pr) 155.76 581.62 T
(ovisions for handling) 376.5 581.62 T
(inbound and outbound traf) 99.65 567.62 T
(\336c simultaneously) 232.93 567.62 T
(.) 320.79 567.62 T
4 9 Q
(def) 99.65 546.95 T
(ine class <multiple-capacity-storage> \050<vehicle-storage>\051) 115.85 546.95 T
(slot vehicles-by-direction :: <object-table>,) 110.45 535.95 T
(init-function: make-object-table;) 272.45 524.95 T
(slot maxima-by-direction) 110.45 513.95 T
(:: <object-table>,) 256.25 513.95 T
(init-function: make-object-table;) 272.45 502.95 T
(keyword directions:;) 110.45 491.95 T
(keyword maxima:;) 110.45 480.95 T
(end;) 99.65 469.95 T
1 11 Q
(W) 99.65 449.62 T
(e r) 109.64 449.62 T
(estrict the slots) 121.8 449.62 T
4 9.5 Q
(vehicles-by-direction) 196.96 449.62 T
1 11 Q
( and) 316.67 449.62 T
4 9.5 Q
(maxima-by-direction) 340.79 449.62 T
1 11 Q
( to be of) 449.09 449.62 T
(the type) 99.65 435.62 T
4 9.5 Q
(<object-table>) 141.99 435.62 T
1 11 Q
(. Further) 221.79 435.62 T
(, we pr) 263.17 435.62 T
(ovide these slots with an init-function.) 296.62 435.62 T
(W) 99.65 421.62 T
(e use the) 109.64 421.62 T
4 9.5 Q
(keyword) 154.98 421.62 T
1 11 Q
( option to permit the) 194.88 421.62 T
4 9.5 Q
(directions:) 298.01 421.62 T
1 11 Q
( and) 360.71 421.62 T
4 9.5 Q
(maxima:) 384.84 421.62 T
1 11 Q
( keywor) 424.74 421.62 T
(d) 464.32 421.62 T
(ar) 99.65 407.62 T
(guments to be speci\336ed during the cr) 109.29 407.62 T
(eation of) 290.1 407.62 T
4 9.5 Q
(<multiple-capacity-storage>) 335.23 407.62 T
1 11 Q
-0.18 (instances. W) 99.65 393.62 P
-0.18 (e use these keywor) 159.53 393.62 P
-0.18 (d values in the) 251.09 393.62 P
4 9.5 Q
-0.37 (initialize) 324.44 393.62 P
1 11 Q
-0.18 ( method de\336ned in Sec-) 381.44 393.62 P
(tion 9.3.7.) 99.65 379.62 T
3 13 Q
(9.3.6  Init-functions) 99.65 348.29 T
1 11 Q
-0.01 (Y) 99.65 328.62 P
-0.01 (ou can use init-functions when you want each slot of a set of instances to have a) 105.97 328.62 P
(unique value. In this case, we de\336ne init-functions that ensur) 99.65 314.62 T
(e that no two) 395.73 314.62 T
(instances of) 99.65 300.62 T
4 9.5 Q
(<multiple-capacity-storage>) 159.39 300.62 T
1 11 Q
( will shar) 313.29 300.62 T
(e the same) 358.28 300.62 T
4 9.5 Q
(<object-table>) 412.2 300.62 T
1 11 Q
(instance for either) 99.65 286.62 T
4 9.5 Q
(vehicles-by-direction) 189.89 286.62 T
1 11 Q
( or) 309.59 286.62 T
4 9.5 Q
(maxima-by-direction) 325.44 286.62 T
1 11 Q
( slots. If we) 433.74 286.62 T
(had used the) 99.65 272.62 T
4 9.5 Q
(init-value:) 165.07 272.62 T
1 11 Q
( slot option instead of) 227.76 272.62 T
4 9.5 Q
(:init-function) 335.8 272.62 T
1 11 Q
(, then two) 415.6 272.62 T
-0.24 (instances of) 99.65 258.62 P
4 9.5 Q
-0.5 (<multiple-capacity-storage>) 158.91 258.62 P
1 11 Q
-0.24 ( would have shar) 312.81 258.62 P
-0.24 (ed a single) 396.17 258.62 P
4 9.5 Q
-0.5 (<object-) 450.05 258.62 P
(table>) 99.65 244.62 T
1 11 Q
( for the) 133.85 244.62 T
4 9.5 Q
(vehicle-by-direction) 171.37 244.62 T
1 11 Q
( slot. When you want the object initialized) 285.37 244.62 T
-0.07 (in each slot to be identical \050) 99.65 230.62 P
4 9.5 Q
-0.15 (==) 231.4 230.62 P
1 11 Q
-0.07 (\051, use the) 242.8 230.62 P
4 9.5 Q
-0.15 (init-value:) 289.07 230.62 P
1 11 Q
-0.07 ( slot option. When want each) 351.77 230.62 P
(slot to contain a unique object, use the) 99.65 216.62 T
4 9.5 Q
(init-function:) 287.45 216.62 T
1 11 Q
( slot option.) 367.25 216.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "133" 135
%%Page: "134" 136
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(134) 63.65 702.62 T
0 9.5 Q
(9.3 Classes that store more than one vehicle) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(9.3.7  Initialization method on) 99.65 664.29 T
4 F
(<multiple-capacity-storage>) 251.31 664.29 T
1 11 Q
(Now) 99.65 644.62 T
(, we de\336ne an initialization method on) 122.96 644.62 T
4 9.5 Q
(<multiple-capacity-storage>) 313.41 644.62 T
1 11 Q
( to) 467.31 644.62 T
(compute the values of the) 99.65 630.62 T
4 9.5 Q
(vehicle-by-direction) 227.76 630.62 T
1 11 Q
( and the) 341.77 630.62 T
4 9.5 Q
(maxima-by-direction) 383.89 630.62 T
1 11 Q
(tables based on the initialization keywor) 99.65 616.62 T
(ds pr) 296.12 616.62 T
(ovided to) 321.01 616.62 T
4 9.5 Q
(make) 370.24 616.62 T
1 11 Q
(. In general the) 393.04 616.62 T
4 9.5 Q
(make) 468.26 616.62 T
1 11 Q
(function calls the) 99.65 602.62 T
4 9.5 Q
(initialize) 185.38 602.62 T
1 11 Q
( generic function after it has cr) 242.38 602.62 T
(eated the instance,) 389.89 602.62 T
(passing in the instance cr) 99.65 588.62 T
(eated and any keywor) 221.6 588.62 T
(d ar) 329.67 588.62 T
(guments pr) 348.79 588.62 T
(ovided to) 404.68 588.62 T
4 9.5 Q
(make) 453.9 588.62 T
1 11 Q
(..) 476.7 588.62 T
4 9 Q
(def) 99.65 567.95 T
(ine method initialize \050object :: <multiple-capacity-storage>,) 115.85 567.95 T
(#key directions, maxima\051) 240.05 556.95 T
(next-method \050\051;) 110.45 545.95 T
(do \050method \050direction, maximum\051) 110.45 534.95 T
-0.3 (element \050vehicles-by-direction \050object\051, direction\051 := make-deque \050\051;) 142.85 523.95 P
(element \050maxima-by-direction \050object\051, direction\051 := maximum;) 142.85 512.95 T
(end,) 132.05 501.95 T
(directions, maxima\051) 132.05 490.95 T
(end;) 99.65 479.95 T
1 11 Q
-0.17 (First we call) 99.65 459.62 P
4 9.5 Q
-0.36 (next-method) 160.52 459.62 P
1 11 Q
-0.17 (, as is done in all pr) 223.22 459.62 P
-0.17 (operly written) 316.12 459.62 P
4 9.5 Q
-0.36 (initialize) 388.38 459.62 P
1 11 Q
-0.17 ( methods.) 445.38 459.62 P
-0.26 (Next, we call the) 99.65 445.62 P
4 9.5 Q
-0.53 (do) 182.53 445.62 P
1 11 Q
-0.26 ( collection iterator to iterate over two vectors,) 193.93 445.62 P
4 9.5 Q
-0.53 (directions) 415.04 445.62 P
1 11 Q
-0.26 ( and) 472.04 445.62 P
4 9.5 Q
(maxima) 99.65 431.62 T
1 11 Q
(, in parallel.) 133.85 431.62 T
(\245) 108.65 411.62 T
(The) 126.65 411.62 T
4 9.5 Q
(directions) 147.81 411.62 T
1 11 Q
( vector will contain the names of the two dir) 204.81 411.62 T
(ections) 419.19 411.62 T
(\050inbound and outbound\051.) 126.65 397.62 T
(\245) 108.65 377.62 T
-0.08 (The) 126.65 377.62 P
4 9.5 Q
-0.16 (maxima) 147.74 377.62 P
1 11 Q
-0.08 ( vector will contain an integer for each dir) 181.94 377.62 P
-0.08 (ection: the integer will) 384.63 377.62 P
-0.09 (be the maximum number of air) 126.65 363.62 P
-0.09 (craft that the vehicle storage can hold in that) 277.67 363.62 P
(dir) 126.65 349.62 T
(ection.) 140.72 349.62 T
-0.33 (The) 99.65 329.62 P
4 9.5 Q
-0.68 (do) 120.48 329.62 P
1 11 Q
-0.33 ( function takes a method to iterate over one or mor) 131.88 329.62 P
-0.33 (e sequences. In this case,) 375.28 329.62 P
-0.1 (the) 99.65 315.62 P
4 9.5 Q
-0.22 (method) 117.55 315.62 P
1 11 Q
-0.1 ( special form is used to cr) 151.75 315.62 P
-0.1 (eate an) 274.45 315.62 P
2 F
-0.1 (bare method) 311.27 315.62 P
1 F
-0.1 (, which is then passed to) 374.42 315.62 P
(the) 99.65 301.62 T
4 9.5 Q
(do) 117.65 301.62 T
1 11 Q
( collection iterator) 129.05 301.62 T
(. Bar) 216.22 301.62 T
(e methods ar) 238.09 301.62 T
(e useful when a function or method is) 300.86 301.62 T
(r) 99.65 287.62 T
(equir) 103.79 287.62 T
(ed as an ar) 129.21 287.62 T
(gument, but that function is so simple and so speci\336c to a partic-) 181.16 287.62 T
(ular section of code that it is not worth naming the function or method. Bar) 99.65 273.62 T
(e) 464.15 273.62 T
(methods ar) 99.65 259.62 T
(e not appr) 154.41 259.62 T
(opriate if the same de\336nition could be used in mor) 204.04 259.62 T
(e than) 449.57 259.62 T
-0.08 (one place, or if the body of the method is lar) 99.65 245.62 P
-0.08 (ge enough that it is awkwar) 313.01 245.62 P
-0.08 (d to have) 447.93 245.62 P
(the de\336nition embedded at the point of call in the code. Methods ar) 99.65 231.62 T
(e \336rst-class) 426.91 231.62 T
(objects in Dylan that can be passed ar) 99.65 217.62 T
(ound and manipulated just like any other) 281.59 217.62 T
(class of object. The bar) 99.65 203.62 T
(e method we have de\336ned will be passed an element fr) 208.53 203.62 T
(om) 475.84 203.62 T
(each of the) 99.65 189.62 T
4 9.5 Q
(directions) 154.88 189.62 T
1 11 Q
( and) 211.88 189.62 T
4 9.5 Q
(maxima) 236 189.62 T
1 11 Q
( vectors by) 270.2 189.62 T
4 9.5 Q
(do) 325.62 189.62 T
1 11 Q
(.) 337.02 189.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "134" 136
%%Page: "135" 137
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 345.65 702.62 T
2 11 Q
(135) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(The) 126.65 665.62 T
4 9.5 Q
(direction) 147.81 665.62 T
1 11 Q
( is used as a key for both the) 199.11 665.62 T
4 9.5 Q
(vehicles-by-direction) 339.53 665.62 T
1 11 Q
( and) 459.23 665.62 T
4 9.5 Q
(maxima-by-direction) 99.65 651.62 T
1 11 Q
( hash tables. In the) 207.95 651.62 T
4 9.5 Q
(vehicles-by-direction) 301.08 651.62 T
1 11 Q
( table, the) 420.79 651.62 T
(dir) 99.65 637.62 T
(ection name is associated with a new queue, which is cr) 113.72 637.62 T
(eated. This queue will) 383.69 637.62 T
-0.05 (hold vehicle instances that ar) 99.65 623.62 P
-0.05 (e going in that dir) 240.52 623.62 P
-0.05 (ection and ar) 327.19 623.62 P
-0.05 (e curr) 390.21 623.62 P
-0.05 (ently located in) 418.2 623.62 P
(the vehicle storage object. The maximum number of vehicles going inbound, and) 99.65 609.62 T
-0.4 (the maximum going outbound ar) 99.65 595.62 P
-0.4 (e stor) 260 595.62 P
-0.4 (ed in the) 286.02 595.62 P
4 9.5 Q
-0.83 (maxima-by-direction) 329.91 595.62 P
1 11 Q
-0.4 ( table. Note) 438.21 595.62 P
-0.09 (that a taxiway might accommodate four air) 99.65 581.62 P
-0.09 (craft going outbound, or thr) 309.21 581.62 P
-0.09 (ee air) 444.97 581.62 P
-0.09 (craft) 471.01 581.62 P
(coming inbound. Ther) 99.65 567.62 T
(e may be a dif) 208.23 567.62 T
(fer) 276.07 567.62 T
(ent maximum number for each dir) 289.14 567.62 T
(ection.) 456.88 567.62 T
-0.37 (This) 126.65 553.62 P
4 9.5 Q
-0.76 (initialize) 150.04 553.62 P
1 11 Q
-0.37 ( method sets up these hash tables so it is possible to \336nd the) 207.04 553.62 P
(queue of either incoming or outgoing vehicles for a given vehicle storage object,) 99.65 539.62 T
(and also determine the maximum number of incoming or outgoing vehicles) 99.65 525.62 T
(allowed in this vehicle storage object at one time.) 99.65 511.62 T
3 13 Q
(9.3.8  Revised de\336nitions of vehicle containers) 99.65 480.29 T
1 11 Q
(Now that we have de\336ned the) 99.65 460.62 T
4 9.5 Q
(<single-capacity-storage>) 249.67 460.62 T
1 11 Q
( and) 392.17 460.62 T
4 9.5 Q
(<multiple-) 416.29 460.62 T
(capacity-storage>) 99.65 446.62 T
1 11 Q
( classes, the speci\336c classes \050) 196.55 446.62 T
4 9.5 Q
(<gate>) 333.83 446.62 T
1 11 Q
(,) 368.03 446.62 T
4 9.5 Q
(<runway>) 373.53 446.62 T
1 11 Q
(, and so on\051) 419.13 446.62 T
(should use them. W) 99.65 432.62 T
(e also want to de\336ne a new vehicle storage class,) 195.8 432.62 T
4 9.5 Q
(<sky>) 434.44 432.62 T
1 11 Q
(, that) 462.94 432.62 T
(r) 99.65 418.62 T
(epr) 103.79 418.62 T
(esents the immediate airspace ar) 119.82 418.62 T
(ound the airport. Figur) 277.73 418.62 T
(e 9.2 shows the inher-) 389.55 418.62 T
(itance r) 99.65 404.62 T
(elationships among these classes.) 135.39 404.62 T
0 0 0 1 0 0 0 K
99.65 251.53 513.65 259.52 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 200.58 263.19 T
(e 9.2  All classes that stor) 226.79 263.19 T
(e vehicles) 347.59 263.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The class de\336nitions ar) 99.65 231.2 T
(e:) 210.98 231.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(def) 99.65 210.53 T
(ine class <gate> \050<single-capacity-storage>\051) 115.85 210.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 99.65 199.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(def) 99.65 180.53 T
(ine class <runway> \050<single-capacity-storage>\051) 115.85 180.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 99.65 169.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
0 0 0 1 0 0 0 K
138.93 279.52 474.36 386.95 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<vehicle-storage>) 260.51 378.39 T
(<single-capacity-storage>) 152.32 337.12 T
(<multiple-capacity-storage>) 314.32 337.12 T
262.83 350.58 250.93 349.05 260.21 356.66 261.52 353.62 4 Y
V
305.36 372.52 261.53 353.62 2 L
0.5 H
2 Z
N
355.5 356.56 364.79 348.95 352.88 350.48 354.19 353.52 4 Y
V
310.36 372.43 354.2 353.52 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<gate>) 144.51 294.68 T
(<runway>) 253.62 293.97 T
(<taxiway>) 315.79 293.97 T
(<sky>) 440.01 294.68 T
174.41 307.58 162.5 306.05 171.79 313.66 173.1 310.62 4 Y
V
216.93 329.52 173.1 310.62 2 L
N
267.08 313.56 276.36 305.96 264.46 307.49 265.77 310.52 4 Y
V
221.93 329.43 265.77 310.52 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
348.54 307.58 336.64 306.05 345.92 313.66 347.23 310.62 4 Y
V
391.08 329.52 347.24 310.62 2 L
N
441.21 313.56 450.5 305.96 438.6 307.49 439.9 310.52 4 Y
V
396.08 329.43 439.91 310.52 2 L
N
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "135" 137
%%Page: "136" 138
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(136) 63.65 702.62 T
0 9.5 Q
(9.3 Classes that store more than one vehicle) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine class <taxiway> \050<multiple-capacity-storage>\051) 115.85 666.95 T
(end;) 99.65 655.95 T
(def) 99.65 636.95 T
(ine class <sky> \050<multiple-capacity-storage>\051) 115.85 636.95 T
(// The airport which this piece of sky is over.) 110.45 625.95 T
(slot airport :: <airport>, required-init-keyword: airport:;) 110.45 614.95 T
(required keyword inbound-aircraft:;) 110.45 603.95 T
(end;) 99.65 592.95 T
1 11 Q
(In the r) 99.65 572.62 T
(evised de\336nitions, gates and r) 134.66 572.62 T
(unways behave much like they did in the) 279.87 572.62 T
(pr) 99.65 558.62 T
(evious design, but taxiways and skies can handle mor) 110.41 558.62 T
(e than one air) 371.92 558.62 T
(craft.) 437.85 558.62 T
3 13 Q
(9.3.9  Initialization method on) 99.65 527.29 T
4 F
(<sky>) 251.31 527.29 T
1 11 Q
(When you make an instance of the class) 99.65 507.62 T
4 9.5 Q
(<sky>) 295.72 507.62 T
1 11 Q
(, you must supply a vector of) 324.22 507.62 T
-0.08 (incoming air) 99.65 493.62 P
-0.08 (craft. That vector is used to con\336gur) 161.09 493.62 P
-0.08 (e the initialization performed by) 335.95 493.62 P
(its dir) 99.65 479.62 T
(ect super) 127.92 479.62 T
(class \050) 171.73 479.62 T
4 9.5 Q
(<multiple-capacity-storage>) 201.06 479.62 T
1 11 Q
(\051 as well as to perform some) 354.96 479.62 T
(other actions.) 99.65 465.62 T
4 9 Q
(def) 99.65 444.95 T
(ine method initialize \050object :: <sky>, #key directions, maxima,) 115.85 444.95 T
(inbound-aircraft\051) 240.05 433.95 T
(next-method \050object, directions: #[inbound:, outbound:],) 110.45 422.95 T
(maxima: vector \050size \050inbound-aircraft\051,) 180.65 411.95 T
(size \050inbound-aircraft\051\051\051;) 267.05 400.95 T
(let inbound-queue = object.vehicles-by-direction [inbound:];) 110.45 389.95 T
(for \050vehicle in inbound-aircraft\051) 110.45 378.95 T
(vehicle.direction := inbound:;) 121.25 367.95 T
(push-last \050inbound-queue, vehicle\051;) 121.25 356.95 T
(end;) 110.45 345.95 T
(end;) 99.65 334.95 T
1 11 Q
(In the) 99.65 314.62 T
4 9.5 Q
(initialize) 130.51 314.62 T
1 11 Q
( method for) 187.51 314.62 T
4 9.5 Q
(<sky>) 247.48 314.62 T
1 11 Q
(, \336rst we call the next most speci\336c) 275.98 314.62 T
4 9.5 Q
(initial-) 447.53 314.62 T
(ize) 99.65 300.62 T
1 11 Q
( method, but we call it with some new ar) 116.75 300.62 T
(guments, and we omit the) 314.77 300.62 T
4 9.5 Q
(inbound-) 444.48 300.62 T
(aircraft) 99.65 286.62 T
1 11 Q
( ar) 145.25 286.62 T
(gument, which is understood only by) 157.65 286.62 T
4 9.5 Q
(<sky>) 342.82 286.62 T
1 11 Q
(. For the) 371.32 286.62 T
4 9.5 Q
(directions) 414.04 286.62 T
1 11 Q
(ar) 99.65 272.62 T
(gument to the next method, we pass avector containing the symbols) 109.29 272.62 T
4 9.5 Q
(inbound:) 442.58 272.62 T
1 11 Q
-0.43 (and) 99.65 258.62 P
4 9.5 Q
-0.88 (outbound:) 120.59 258.62 P
1 11 Q
-0.43 (. For the) 171.89 258.62 P
4 9.5 Q
-0.88 (maxima) 213.34 258.62 P
1 11 Q
-0.43 ( ar) 247.54 258.62 P
-0.43 (gument, we pass a vector containing the number) 259.51 258.62 P
(of inbound air) 99.65 244.62 T
(craft stor) 169.11 244.62 T
(ed in both the zer) 212.24 244.62 T
(oth and \336rst element.) 297.09 244.62 T
-0.33 (After the next most speci\336c method is executed, the hash tables stor) 126.65 230.62 P
-0.33 (ed in the) 451.54 230.62 P
4 9.5 Q
(vehicles-by-direction) 99.65 216.62 T
1 11 Q
( and) 219.35 216.62 T
4 9.5 Q
(maxima-by-direction) 243.47 216.62 T
1 11 Q
( should be set up. The) 351.77 216.62 T
4 9.5 Q
(ini-) 461.18 216.62 T
(tialize) 99.65 202.62 T
1 11 Q
( method for) 139.55 202.62 T
4 9.5 Q
(<sky>) 199.51 202.62 T
1 11 Q
( then initializes the) 228.01 202.62 T
4 9.5 Q
(inbound-queue) 322.85 202.62 T
1 11 Q
( variable to the) 396.95 202.62 T
-0.26 (inbound vehicle queue that was just cr) 99.65 188.62 P
-0.26 (eated. For each vehicle in the) 285.36 188.62 P
4 9.5 Q
-0.53 (inbound-air-) 427.25 188.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "136" 138
%%Page: "137" 139
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 345.65 702.62 T
2 11 Q
(137) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9.5 Q
0 X
(craft) 99.65 665.62 T
1 11 Q
( vector) 128.15 665.62 T
(, the) 160.39 665.62 T
4 9.5 Q
(direction) 183.9 665.62 T
1 11 Q
( slot of that air) 235.2 665.62 T
(craft is set to) 305.24 665.62 T
4 9.5 Q
(inbound:) 369.2 665.62 T
1 11 Q
(, and then the) 414.8 665.62 T
(air) 99.65 651.62 T
(craft is added to the inbound queue.) 112.5 651.62 T
(Note that you can use the squar) 126.65 637.62 T
(e bracket syntax to access tables as well as) 280.69 637.62 T
(sequences. In fact, the squar) 99.65 623.62 T
(e bracket syntax is equivalent to using the) 235.46 623.62 T
4 9.5 Q
(element) 441.63 623.62 T
1 11 Q
(and) 99.65 609.62 T
4 9.5 Q
(element-setter) 121.02 609.62 T
1 11 Q
( generic functions. For example, the following two expr) 200.82 609.62 T
(es-) 469.65 609.62 T
(sions ar) 99.65 595.62 T
(e equivalent:) 136.98 595.62 T
4 9 Q
(element \050object.vehicles-by-direction, inbound:\051) 99.65 574.95 T
(object.vehicles-by-direction [inbound:]) 99.65 555.95 T
3 13 Q
(9.3.10  Symbols as keys of an) 99.65 526.29 T
4 F
(<object-table>) 252.54 526.29 T
1 11 Q
(In our airport model, instances of) 99.65 506.62 T
4 9.5 Q
(<sky>) 264.74 506.62 T
1 11 Q
( deal with inbound and outbound dir) 293.24 506.62 T
(ec-) 475 506.62 T
-0.11 (tions. These dir) 99.65 492.62 P
-0.11 (ections ar) 173.95 492.62 P
-0.11 (e named with symbols \050) 220.25 492.62 P
4 9.5 Q
-0.23 (inbound:) 336.14 492.62 P
1 11 Q
-0.11 ( and) 381.74 492.62 P
4 9.5 Q
-0.23 (outbound:) 405.64 492.62 P
1 11 Q
-0.11 (\051, using) 456.94 492.62 P
(the keywor) 99.65 478.62 T
(d syntax for symbols. Symbols ar) 154.48 478.62 T
(e very much like strings, except a) 315.31 478.62 T
(special table is used \050not an) 99.65 464.62 T
4 9.5 Q
(<object-table>) 235.83 464.62 T
1 11 Q
(\051 to ensur) 315.63 464.62 T
(e that symbols that look) 361.5 464.62 T
(alike ar) 99.65 450.62 T
(e in fact the identical object \050) 135.33 450.62 T
4 9.5 Q
(==) 273.62 450.62 T
1 11 Q
(\051. This makes symbols ideal keys for) 285.02 450.62 T
4 9.5 Q
(<object-table>) 99.65 436.62 T
1 11 Q
( hash tables. Note that just because two strings look alike, they) 179.45 436.62 T
(may not always be) 99.65 422.62 T
4 9.5 Q
(==) 193.48 422.62 T
1 11 Q
( to each other) 204.88 422.62 T
(. Thus it is faster to compar) 269.57 422.62 T
(e two symbols for) 401.39 422.62 T
(equality than it is to compar) 99.65 408.62 T
(e two strings for equality) 236.06 408.62 T
(. T) 356.53 408.62 T
(o compar) 367.76 408.62 T
(e two strings,) 413.38 408.62 T
(Dylan must check each character of each string until it \336nds a dif) 99.65 394.62 T
(fer) 414.48 394.62 T
(ence \050if ther) 427.56 394.62 T
(e) 484.81 394.62 T
(is a dif) 99.65 380.62 T
(fer) 131.9 380.62 T
(ence\051, wher) 144.98 380.62 T
(eas Dylan can compar) 200.96 380.62 T
(e symbols with just one test.) 308.02 380.62 T
(Symbol comparison is not case-sensitive. Y) 126.65 366.62 T
(ou can convert fr) 334.01 366.62 T
(om symbols to) 416.2 366.62 T
(strings and strings to symbols by using) 99.65 352.62 T
4 9.5 Q
(as) 292.73 352.62 T
1 11 Q
(. If the name of a symbol is composed) 304.13 352.62 T
-0.43 (only of characters that ar) 99.65 338.62 P
-0.43 (e allowed in variable names, then the keywor) 218.43 338.62 P
-0.43 (d syntax for) 436 338.62 P
(symbols can be used to name that symbol. In any case, the) 99.65 324.62 T
4 9.5 Q
(#"...") 385.05 324.62 T
1 11 Q
( syntax may) 419.25 324.62 T
(always be used to name any symbol constant \050for example,) 99.65 310.62 T
4 9.5 Q
(#"inbound") 388.92 310.62 T
1 11 Q
(\051. Note) 445.92 310.62 T
(that a symbol cannot be dif) 99.65 296.62 T
(fer) 231.27 296.62 T
(entiated by its syntax. That is,) 244.35 296.62 T
4 9.5 Q
(inbound: ==) 391.58 296.62 T
(#"inbound") 99.65 282.62 T
1 11 Q
( is always a tr) 156.65 282.62 T
(ue expr) 223.01 282.62 T
(ession.) 259.37 282.62 T
3 13 Q
(9.3.1) 99.65 251.29 T
(1  Association of a) 122.78 251.29 T
4 F
(<sky>) 219.94 251.29 T
3 F
( with an) 258.94 251.29 T
4 F
(<airport>) 301.59 251.29 T
1 11 Q
-0.19 (Now we add a slot to the) 99.65 231.62 P
4 9.5 Q
-0.39 (<airport>) 223.11 231.62 P
1 11 Q
-0.19 ( class to hold the instance of) 274.41 231.62 P
4 9.5 Q
-0.39 (<sky>) 412.02 231.62 P
1 11 Q
-0.19 ( associated) 440.52 231.62 P
(with a given airport.) 99.65 217.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "137" 139
%%Page: "138" 140
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(138) 63.65 702.62 T
0 9.5 Q
(9.4 Aircraft transitions) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine class <airport> \050<physical-object>\051) 115.85 666.95 T
6 F
(// The name of the airport, such as "Logan International Airport") 110.45 655.95 T
4 F
(slot name) 110.45 644.95 T
( :: <byte-string>, init-keyword: name:;) 261.65 644.95 T
6 F
(// The three letter abbreviation, such as "BOS") 110.45 633.95 T
4 F
(slot code) 110.45 622.95 T
( :: <byte-string>, init-keyword: code:;) 261.65 622.95 T
6 F
(// How many gates are at the airport) 110.45 611.95 T
4 F
(virtual slot number-of-gates :: <integer>, setter: #f;) 110.45 600.95 T
(slot gate-instances) 110.45 589.95 T
( :: <simple-object-vector>;) 261.65 589.95 T
(slot runway-instances) 110.45 578.95 T
(:: <simple-object-vector>;) 267.05 578.95 T
(slot sky-instance) 110.45 567.95 T
(:: <sky>;) 267.05 567.95 T
(required keyword gates-per-terminal:, type: <simple-object-vector>;) 110.45 556.95 T
(keyword gate-capacity:, type: <size>, init-value: *default-capacity*;) 110.45 545.95 T
(end;) 99.65 534.95 T
3 13 Q
(9.3.12  Revised de\336nition of) 99.65 505.29 T
4 F
(<standard-aircraft>) 243.02 505.29 T
1 11 Q
-0.09 (It is important to make sur) 99.65 485.62 P
-0.09 (e that each air) 228.68 485.62 P
-0.09 (craft knows whether it is inbound or out-) 295.91 485.62 P
(bound. Sometimes that can be determined by what queue the air) 99.65 471.62 T
(craft is in, but) 413.58 471.62 T
-0.1 (when the air) 99.65 457.62 P
-0.1 (craft is at the gate or on the r) 160.29 457.62 P
-0.1 (unway) 298.39 457.62 P
-0.1 (, ther) 331 457.62 P
-0.1 (e is no way to tell other than) 355.8 457.62 P
(by a value stor) 99.65 443.62 T
(ed in the instance. W) 170.82 443.62 T
(e r) 271.31 443.62 T
(ede\336ne) 283.48 443.62 T
4 9.5 Q
(<standard-aircraft>) 321.82 443.62 T
1 11 Q
( to contain a) 430.11 443.62 T
4 9.5 Q
(direction) 99.65 429.62 T
1 11 Q
( slot:) 150.95 429.62 T
4 9 Q
(def) 99.65 408.95 T
(ine class <standard-aircraft> \050<vehicle>\051) 115.85 408.95 T
(slot altitude) 110.45 397.95 T
(:: <integer>, init-keyword: altitude:;) 283.25 397.95 T
(each-subclass slot needs-runway :: <boolean>, init-value: #t;) 110.45 386.95 T
(slot direction) 110.45 375.95 T
( :: <symbol>;) 277.85 375.95 T
(end;) 99.65 364.95 T
3 15 Q
(9.4  Aircraft transitions) 99.65 326.95 T
1 11 Q
-0.39 (Given the class de\336nitions in Section 9.3, we now want to de\336ne the pr) 99.65 306.62 P
-0.39 (otocols and) 437.95 306.62 P
(methods that will move inbound air) 99.65 292.62 T
(craft thr) 275.11 292.62 T
(ough each step of the landing and) 313.97 292.62 T
(takeof) 99.65 278.62 T
(f pr) 129.59 278.62 T
(ocess as shown in Figur) 146.76 278.62 T
(e 9.3.) 261.88 278.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "138" 140
%%Page: "139" 141
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 345.65 702.62 T
2 11 Q
(139) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
99.65 499.82 513.65 507.81 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 151.76 511.48 T
(e 9.3  State diagram for outbound and inbound air) 177.97 511.48 T
(craft) 421.56 511.48 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 15 Q
(9.5  Protocols for handling aircraft) 99.65 465.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Her) 99.65 445.48 T
(e we de\336ne a set of pr) 118.22 445.48 T
(otocols that will be useful for scheduling:) 224.19 445.48 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 9 Q
(// Returns true if container is available for aircraft in direction) 99.65 424.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(def) 99.65 413.82 T
(ine generic available? \050vehicle, container, direction\051;) 115.85 413.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(// Moves a vehicle into a container in the given direction) 99.65 394.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(def) 99.65 383.82 T
(ine generic move-in-vehicle \050vehicle, container, direction\051;) 115.85 383.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(// Moves a vehicle out of a container in the given direction) 99.65 364.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(def) 99.65 353.82 T
(ine generic move-out-vehicle \050vehicle, container, direction\051;) 115.85 353.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(// Returns the aircraft next in line to move out of container in direction) 99.65 334.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(def) 99.65 323.82 T
(ine generic next-out \050container, direction\051;) 115.85 323.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 15 Q
(9.6  Methods that handle aircraft transitions) 99.65 285.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(The following sections de\336ne methods that implement the pr) 99.65 265.48 T
(otocols de\336ned in) 396.44 265.48 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Section 9.5.) 99.65 251.48 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 13 Q
(9.6.1  Methods for the) 99.65 220.15 T
4 F
(available?) 212.2 220.15 T
3 F
( predicate) 290.2 220.15 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Now we de\336ne methods for the) 99.65 200.48 T
4 9.5 Q
(available?) 256.86 200.48 T
1 11 Q
( pr) 313.86 200.48 T
(edicate:) 327.37 200.48 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
0 0 0 1 0 0 0 K
99.65 527.81 495.65 661.95 C
0 0 0 1 0 0 0 K
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
90 450 37.14 17.28 284.29 579.24 A
242.15 578.85 322.86 602.67 R
7 X
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
315.38 572.4 321.43 577.32 318.91 569.94 317.14 571.17 4 Y
0 X
V
317.15 571.17 317.15 571.17 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 37.14 17.28 207.79 579.24 A
165.65 578.85 246.36 602.67 R
7 X
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
238.88 572.4 244.93 577.32 242.41 569.94 240.65 571.17 4 Y
0 X
V
240.65 571.17 240.65 571.17 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 37.14 17.28 360.79 579.24 A
318.65 578.85 399.36 602.67 R
7 X
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
391.88 572.4 397.93 577.32 395.4 569.94 393.64 571.17 4 Y
0 X
V
393.65 571.17 393.65 571.17 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 37.14 16.07 282.72 596.74 A
244.15 574.95 324.86 597.09 R
7 X
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
251.5 603.01 245.57 598.53 248.22 605.47 249.86 604.24 4 Y
0 X
V
249.86 604.24 249.86 604.24 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 37.14 16.07 359.22 596.74 A
320.65 574.95 401.36 597.09 R
7 X
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
327.99 603.01 322.07 598.53 324.72 605.47 326.36 604.24 4 Y
0 X
V
326.36 604.24 326.36 604.24 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 37.14 16.07 206.22 596.74 A
167.65 574.95 248.36 597.09 R
7 X
V
N
1 11 Q
0 X
(sky) 159.91 584.95 T
(r) 224.8 584.38 T
(unway) 229.05 584.38 T
(taxiway) 300.65 584.55 T
(gate) 383.84 584.55 T
368.36 578.52 421.22 595.67 8.57 RR
N
217.41 578.52 270.27 595.67 8.57 RR
N
292.89 578.52 345.74 595.67 8.57 RR
N
141.93 578.52 194.79 595.67 8.57 RR
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
175 603.01 169.07 598.53 171.72 605.47 173.36 604.24 4 Y
V
173.36 604.24 173.36 604.24 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Outbound) 372.65 626.38 T
(Inbound) 144.08 543.52 T
347.76 625.93 336.22 629.24 347.76 632.55 347.76 629.24 4 Y
V
363.36 629.24 347.76 629.24 2 L
N
205.68 549.54 217.22 546.24 205.68 542.93 205.68 546.24 4 Y
V
190.08 546.24 205.68 546.24 2 L
N
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "139" 141
%%Page: "140" 142
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(140) 63.65 702.62 T
0 9.5 Q
(9.6 Methods that handle aircraft transitions) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine method available? \050vehicle,) 115.85 666.95 T
(container :: <single-capacity-storage>,) 240.05 655.95 T
(direction :: <symbol>\051) 240.05 644.95 T
(~ container.vehicle-currently-occupying;) 110.45 633.95 T
(end;) 99.65 622.95 T
1 11 Q
(It is easy to determine whether a aingle capacity storage container is available. It) 99.65 602.62 T
-0.2 (is available when no air) 99.65 588.62 P
-0.2 (craft is curr) 213.87 588.62 P
-0.2 (ently occupying it. The not operator) 268.81 588.62 P
-0.2 (,) 441.77 588.62 P
4 9.5 Q
-0.42 (~) 447.06 588.62 P
1 11 Q
-0.2 (, r) 452.76 588.62 P
-0.2 (eturns) 462.2 588.62 P
-0.14 (false,) 99.65 574.62 P
4 9.5 Q
-0.29 (#f) 127.3 574.62 P
1 11 Q
-0.14 (, if and only if its ar) 138.7 574.62 P
-0.14 (gument is not false. Note that we do not str) 232.27 574.62 P
-0.14 (ongly type) 441.01 574.62 P
-0.32 (the) 99.65 560.62 P
4 9.5 Q
-0.67 (vehicle) 117.33 560.62 P
1 11 Q
-0.32 ( parameter) 157.23 560.62 P
-0.32 (. That is because sometimes we want to \336nd out if any vehi-) 208.98 560.62 P
(cle at all could ever \336t into a container) 99.65 546.62 T
(. When we want to ask this question, we) 284.25 546.62 T
(may not have a particular vechicle in mind, so we would like to pr) 99.65 532.62 T
(ovide false for) 422.11 532.62 T
(the) 99.65 518.62 T
4 9.5 Q
(vehicle) 117.65 518.62 T
1 11 Q
( parameter) 157.55 518.62 T
(.) 209.63 518.62 T
4 9 Q
(def) 99.65 497.95 T
(ine method available? \050vehicle,) 115.85 497.95 T
(container :: <multiple-capacity-storage>,) 240.05 486.95 T
(direction :: <symbol>\051) 240.05 475.95 T
(size \050container.vehicles-by-direction [direction]\051 <) 110.45 464.95 T
(container.maxima-by-direction [direction];) 110.45 453.95 T
(end;) 99.65 442.95 T
1 11 Q
(The complexity of handling multiple air) 99.65 422.62 T
(craft is evident in the implementation of) 293.95 422.62 T
4 9.5 Q
-3.26 (available?) 99.65 408.62 P
1 11 Q
-1.58 ( on the) 156.65 408.62 P
4 9.5 Q
-3.26 (<multiple-capacity-storage>) 187.84 408.62 P
1 11 Q
-1.58 ( class. First we determine the size) 341.74 408.62 P
-0.22 (of the appr) 99.65 394.62 P
-0.22 (opriate queue \050based on the speci\336ed dir) 152.51 394.62 P
-0.22 (ection\051. W) 349.1 394.62 P
-0.22 (e then compar) 397.38 394.62 P
-0.22 (e that) 466.24 394.62 P
(value to the maximum number of vehicles permitted in the speci\336ed dir) 99.65 380.62 T
(ection. If) 449.44 380.62 T
(the size of the queue is smaller than the maximum, then ther) 99.65 366.62 T
(e is r) 393.55 366.62 T
(oom for at least) 416.33 366.62 T
(one mor) 99.65 352.62 T
(e air) 139.94 352.62 T
(craft, otherwise ther) 160.81 352.62 T
(e is not enough r) 258.36 352.62 T
(oom.) 339.46 352.62 T
3 13 Q
(9.6.2  Methods for) 99.65 321.29 T
4 F
(move-in-vehicle) 193.25 321.29 T
1 11 Q
(W) 99.65 301.62 T
(e de\336ne methods for moving air) 109.64 301.62 T
(craft between containers:) 265.85 301.62 T
4 9 Q
(def) 99.65 280.95 T
(ine method move-in-vehicle \050vehicle) 115.85 280.95 T
(:: <standard-aircraft>,) 321.05 280.95 T
(container :: <single-capacity-storage>,) 267.05 269.95 T
(direction :: <symbol>\051) 267.05 258.95 T
(container.vehicle-currently-occupying := vehicle;) 110.45 247.95 T
(end;) 99.65 236.95 T
1 11 Q
(In the pr) 99.65 216.62 T
(eceding method, on) 141.27 216.62 T
4 9.5 Q
(<single-capacity-storage>) 240.24 216.62 T
1 11 Q
(, we simply stor) 382.74 216.62 T
(e the) 460.09 216.62 T
(vehicle in the) 99.65 202.62 T
4 9.5 Q
(vehicle-currently-occupying) 167.2 202.62 T
1 11 Q
( slot.) 321.1 202.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "140" 142
%%Page: "141" 143
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 345.65 702.62 T
2 11 Q
(141) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine method move-in-vehicle \050vehicle) 115.85 666.95 T
(:: <standard-aircraft>,) 321.05 666.95 T
(container :: <multiple-capacity-storage>,) 267.05 655.95 T
(direction :: <symbol>\051) 267.05 644.95 T
(let vehicles = container.vehicles-by-direction [direction];) 110.45 633.95 T
(push-last \050vehicles, vehicle\051;) 110.45 622.95 T
(end;) 99.65 611.95 T
1 11 Q
(In the pr) 99.65 591.62 T
(eceding method, on) 141.27 591.62 T
4 9.5 Q
(<multiple-capacity-storage>) 240.24 591.62 T
1 11 Q
(, we add the vehicle) 394.14 591.62 T
(to the end of the) 99.65 577.62 T
4 9.5 Q
(vehicles-by-direction) 181.57 577.62 T
1 11 Q
( queue.) 301.27 577.62 T
4 9 Q
(def) 99.65 556.95 T
(ine method move-in-vehicle \050vehicle) 115.85 556.95 T
(:: <standard-aircraft>,) 321.05 556.95 T
(container :: <gate>,) 267.05 545.95 T
(direction :: <symbol>\051) 267.05 534.95 T
(next-method \050\051;) 110.45 523.95 T
(vehicle.direction := outbound:;) 110.45 512.95 T
(end;) 99.65 501.95 T
1 11 Q
(In the pr) 99.65 481.62 T
(eceding method, on the) 141.27 481.62 T
4 9.5 Q
(<gate>) 258.25 481.62 T
1 11 Q
( class, we take car) 292.45 481.62 T
(e of one important) 378.55 481.62 T
(detail: we turn the air) 99.65 467.62 T
(craft ar) 204.39 467.62 T
(ound at the gate so it starts to head outbound after) 238.76 467.62 T
(the air) 99.65 453.62 T
(craft has \336nished the inbound portion.) 130.5 453.62 T
3 13 Q
(9.6.3  Methods for) 99.65 422.29 T
4 F
(move-out-vehicle) 193.25 422.29 T
1 11 Q
(W) 99.65 402.62 T
(e de\336ne the methods for moving a vehicle out of a container:) 109.64 402.62 T
4 9 Q
(def) 99.65 381.95 T
(ine method move-out-vehicle \050vehicle) 115.85 381.95 T
( :: <standard-aircraft>,) 321.05 381.95 T
(container :: <single-capacity-storage>,) 272.45 370.95 T
(direction :: <symbol>\051) 272.45 359.95 T
(container.vehicle-currently-occupying := #f;) 110.45 348.95 T
(end;) 99.65 337.95 T
1 11 Q
(In the pr) 99.65 317.62 T
(eceding method, on) 141.27 317.62 T
4 9.5 Q
(<single-capacity-storage>) 240.24 317.62 T
1 11 Q
(, we simply stor) 382.74 317.62 T
(e false) 460.09 317.62 T
(in the) 99.65 303.62 T
4 9.5 Q
(vehicle-currently-occupying) 130.01 303.62 T
1 11 Q
( slot.) 283.91 303.62 T
4 9 Q
(def) 99.65 282.95 T
(ine method move-out-vehicle \050vehicle) 115.85 282.95 T
(:: <standard-aircraft>,) 326.45 282.95 T
(container :: <multiple-capacity-storage>,) 272.45 271.95 T
(direction :: <symbol>\051) 272.45 260.95 T
(let vehicles = container.vehicles-by-direction [direction];) 110.45 249.95 T
6 F
(// Assumes aircraft always exit container in order, and this aircraft) 110.45 238.95 T
(// is next.) 110.45 227.95 T
4 F
(pop \050vehicles\051;) 110.45 216.95 T
(end;) 99.65 205.95 T
1 11 Q
(In the pr) 99.65 185.62 T
(eceding method, on) 141.27 185.62 T
4 9.5 Q
(<multiple-capacity-storage>) 240.24 185.62 T
1 11 Q
(, we r) 394.14 185.62 T
(emove the) 420.98 185.62 T
(vehicle that is at the fr) 99.65 171.62 T
(ont of the appr) 206.93 171.62 T
(opriate queue.) 278.97 171.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "141" 143
%%Page: "142" 144
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(142) 63.65 702.62 T
0 9.5 Q
(9.6 Methods that handle aircraft transitions) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(9.6.4  Method for) 99.65 664.29 T
4 F
(f) 187.32 664.29 T
(ind-available-connection) 195.12 664.29 T
1 11 Q
(Now we de\336ne a method that helps \336nd the next place an air) 99.65 644.62 T
(craft could go. This) 396.33 644.62 T
(is similar to the) 99.65 630.62 T
4 9.5 Q
(f) 177.19 630.62 T
(ind-connection) 182.89 630.62 T
1 11 Q
( function, which we used without de\336ning in) 262.69 630.62 T
(Section 9.1, but for) 99.65 616.62 T
4 9.5 Q
(f) 192.59 616.62 T
(ind-available-connection) 198.29 616.62 T
1 11 Q
(, we check to make sur) 335.09 616.62 T
(e the mul-) 445.22 616.62 T
(tiple air) 99.65 602.62 T
(craft case works corr) 137.11 602.62 T
(ectly) 237.35 602.62 T
(. Note that Dylan classes ar) 259.18 602.62 T
(e \336rst-class objects,) 390.98 602.62 T
(and can be passed fr) 99.65 588.62 T
(om function to function.) 198.65 588.62 T
4 9 Q
(def) 99.65 567.95 T
(ine method f) 115.85 567.95 T
(ind-available-connection) 180.65 567.95 T
(\050storage) 142.85 556.95 T
(:: <vehicle-storage>, class-of-next :: <class>,) 196.85 556.95 T
(aircraft) 148.25 545.95 T
(:: <standard-aircraft>\051) 196.85 545.95 T
(block \050return\051) 110.45 534.95 T
(for \050c in connected-to \050storage\051\051) 121.25 523.95 T
(if \050instance? \050c, class-of-next\051 &) 132.05 512.95 T
(available? \050aircraft, c, direction \050aircraft\051\051\051) 148.25 501.95 T
(return \050c\051;) 137.45 490.95 T
(end;) 132.05 479.95 T
(end;) 121.25 468.95 T
(end;) 110.45 457.95 T
(end;) 99.65 446.95 T
1 11 Q
(In the pr) 99.65 426.62 T
(eceding method, we \336rst establish a block, thus naming the) 141.27 426.62 T
4 9.5 Q
(return) 431.76 426.62 T
1 11 Q
( func-) 465.96 426.62 T
-0.11 (tion, which we shall use later) 99.65 412.62 P
-0.11 (. Next we use the) 239.92 412.62 P
4 9.5 Q
-0.23 (for) 325.82 412.62 P
1 11 Q
-0.11 ( constr) 342.92 412.62 P
-0.11 (uct to iterate over all the) 375.36 412.62 P
-0.03 (objects connected to this container) 99.65 398.62 P
-0.03 (. For each of those objects, if the object matches) 265.24 398.62 P
(the speci\336ed class, and it has some space available, then the container that meets) 99.65 384.62 T
(both of those criteria is immediately r) 99.65 370.62 T
(eturned fr) 281.65 370.62 T
(om the block using the) 330.44 370.62 T
4 9.5 Q
(return) 443.73 370.62 T
1 11 Q
-0.01 (function \050and is also r) 99.65 356.62 P
-0.01 (eturned fr) 205.06 356.62 P
-0.01 (om the method\051, without iterating over any mor) 253.84 356.62 P
-0.01 (e) 487.64 356.62 P
(objects.) 99.65 342.62 T
3 13 Q
(9.6.5  Revised) 99.65 311.29 T
4 F
(next-landing-step) 173.14 311.29 T
3 F
( protocol) 305.74 311.29 T
1 11 Q
-0.78 (Now we change the) 99.65 291.62 P
4 9.5 Q
-1.62 (next-landing-step) 196.11 291.62 P
1 11 Q
-0.78 ( pr) 293.01 291.62 P
-0.78 (otocol. W) 305.74 291.62 P
-0.78 (e r) 350.13 291.62 P
-0.78 (emove the) 361.52 291.62 P
4 9.5 Q
-1.62 (airport) 413.18 291.62 P
1 11 Q
-0.78 ( parame-) 453.08 291.62 P
(ter because only the method for) 99.65 277.62 T
4 9.5 Q
(<sky>) 256.34 277.62 T
1 11 Q
( needs to know about the airport, and we) 284.84 277.62 T
-0.11 (can simplify the) 99.65 263.62 P
4 9.5 Q
-0.23 (next-landing-step) 179.98 263.62 P
1 11 Q
-0.11 ( pr) 276.88 263.62 P
-0.11 (otocol by simply making the airport a slot) 290.28 263.62 P
(in) 99.65 249.62 T
4 9.5 Q
(<sky>) 112 249.62 T
1 11 Q
(, since a particular sky instances covers only one particular airport.) 140.5 249.62 T
4 9 Q
(def) 99.65 228.95 T
(ine method next-landing-step \050storage) 115.85 228.95 T
(:: <sky>,) 353.45 228.95 T
(aircraft) 277.85 217.95 T
(:: <standard-aircraft>\051) 353.45 217.95 T
(if \050direction \050aircraft\051 == inbound:\051) 110.45 206.95 T
(values \050<runway>, f) 121.25 195.95 T
(lying-time \050aircraft, storage.airport\051\051;) 223.85 195.95 T
(end;) 110.45 184.95 T
(end;) 99.65 173.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "142" 144
%%Page: "143" 145
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 345.65 702.62 T
2 11 Q
(143) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
-0.01 (In the pr) 99.65 665.62 P
-0.01 (eceding method, we establish that the inbound transition fr) 141.25 665.62 P
-0.01 (om the sky is) 428.96 665.62 P
(to a r) 99.65 651.62 T
(unway) 124.5 651.62 T
(, and that the time it takes is determined by how long it takes to \337y) 157.1 651.62 T
-0.29 (fr) 99.65 637.62 P
-0.29 (om the airport to the r) 107.46 637.62 P
-0.29 (unway) 213.44 637.62 P
-0.29 (. After the air) 246.04 637.62 P
-0.29 (craft is airborne, ther) 309.7 637.62 P
-0.29 (e is no additional) 410.23 637.62 P
(transition de\336ned for the outbound case.) 99.65 623.62 T
4 9 Q
(def) 99.65 602.95 T
(ine method next-landing-step \050storage) 115.85 602.95 T
(:: <runway>,) 353.45 602.95 T
(aircraft) 277.85 591.95 T
( :: <standard-aircraft>\051) 348.05 591.95 T
(select \050aircraft.direction\051) 110.45 580.95 T
(inbound: => values \050<taxiway>, brake-time \050aircraft\051\051;) 121.25 569.95 T
(outbound: => values \050<sky>, take-off-time \050aircraft\051\051;) 121.25 558.95 T
(end;) 110.45 547.95 T
(end;) 99.65 536.95 T
1 11 Q
(In the pr) 99.65 516.62 T
(eceding method, if an air) 141.27 516.62 T
(craft is on the r) 262.2 516.62 T
(unway) 334.96 516.62 T
(, the next step for the) 367.56 516.62 T
(inbound case is the taxiway) 99.65 502.62 T
(. The time it takes depends on how fast the air) 233.07 502.62 T
(craft) 456.59 502.62 T
(could brake, plus some taxiing time. For the outbound case, the next stop is the) 99.65 488.62 T
(sky) 99.65 474.62 T
(, and that takes some taxiing time, followed by the time it takes the air) 115.32 474.62 T
(craft to) 455.75 474.62 T
(actually take of) 99.65 460.62 T
(f.) 173.71 460.62 T
4 9 Q
(def) 99.65 439.95 T
(ine method next-landing-step \050storage) 115.85 439.95 T
(:: <taxiway>,) 353.45 439.95 T
(aircraft) 277.85 428.95 T
(:: <standard-aircraft>\051) 353.45 428.95 T
(select \050aircraft.direction\051) 110.45 417.95 T
(inbound: => values \050<gate>, gate-time \050aircraft\051\051;) 121.25 406.95 T
(outbound: => values \050<runway>, runway-time \050aircraft\051\051;) 121.25 395.95 T
(end;) 110.45 384.95 T
(end;) 99.65 373.95 T
1 11 Q
(In the pr) 99.65 353.62 T
(eceding method, if the air) 141.27 353.62 T
(craft is on the taxiway) 265.55 353.62 T
(, the next step for the) 371.59 353.62 T
(inbound case is a gate. For the outbound case, the next stop is the r) 99.65 339.62 T
(unway) 423.8 339.62 T
(.) 456.4 339.62 T
4 9 Q
(def) 99.65 318.95 T
(ine method next-landing-step \050storage) 115.85 318.95 T
( :: <gate>,) 348.05 318.95 T
(aircraft) 277.85 307.95 T
( :: <standard-aircraft>\051) 348.05 307.95 T
(values \050<taxiway>, gate-turnaround \050aircraft\051\051;) 110.45 296.95 T
(end;) 99.65 285.95 T
1 11 Q
(In the pr) 99.65 265.62 T
(eceding method, once the air) 141.27 265.62 T
(craft is at the gate, it will take some time to) 281.25 265.62 T
(transition back out to the taxiway) 99.65 251.62 T
(. The function) 261.48 251.62 T
4 9.5 Q
(gate-turnaround) 331.67 251.62 T
1 11 Q
( \050not de\336ned) 417.17 251.62 T
(her) 99.65 237.62 T
(e\051 computes the time-of) 115.47 237.62 T
(fset that r) 230.17 237.62 T
(epr) 276.08 237.62 T
(esents how long that transition takes.) 292.1 237.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "143" 145
%%Page: "144" 146
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(144) 63.65 702.62 T
0 9.5 Q
(9.6 Methods that handle aircraft transitions) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(9.6.6  Methods for) 99.65 664.29 T
4 F
(next-out) 193.25 664.29 T
1 11 Q
(Now we need a method that builds on) 99.65 644.62 T
4 9.5 Q
(next-landing-step) 289.26 644.62 T
1 11 Q
(, and actually deter-) 386.15 644.62 T
(mines which air) 99.65 630.62 T
(craft could move next, fr) 177.31 630.62 T
(om this container into the next plausible) 296.43 630.62 T
(container) 99.65 616.62 T
(, and how much time that would take:) 144.43 616.62 T
4 9 Q
(def) 99.65 595.95 T
(ine method next-out \050container :: <vehicle-storage>,) 115.85 595.95 T
(direction :: <symbol>\051) 229.25 584.95 T
(let next-vehicle = next-out-internal \050container, direction\051;) 110.45 573.95 T
(if \050next-vehicle\051) 110.45 562.95 T
(let \050class, time\051 =) 121.25 551.95 T
(next-landing-step \050container, next-vehicle\051;) 148.25 540.95 T
(if \050class\051) 121.25 529.95 T
(let next-container =) 132.05 518.95 T
(f) 159.05 507.95 T
(ind-available-connection \050container, class, next-vehicle\051;) 164.45 507.95 T
(if \050next-container\051) 132.05 496.95 T
(values \050next-vehicle, container, next-container, time\051;) 142.85 485.95 T
(end;) 132.05 474.95 T
(end;) 121.25 463.95 T
(end;) 110.45 452.95 T
(end;) 99.65 441.95 T
1 11 Q
-0.23 (In the pr) 99.65 421.62 P
-0.23 (eceding method, we get the next air) 140.82 421.62 P
-0.23 (craft out of the speci\336ed container \050in) 312.72 421.62 P
(the speci\336ed dir) 99.65 407.62 T
(ection\051 if ther) 177.75 407.62 T
(e is one, and use that object to initialized the) 242.53 407.62 T
4 9.5 Q
(next-) 460.08 407.62 T
(vehicle) 99.65 393.62 T
1 11 Q
( local variable. Then, if ther) 139.55 393.62 T
(e is such a vehicle \050the container is not empty) 271.99 393.62 T
(in this dir) 99.65 379.62 T
(ection\051, we determine the next plausible step in the landing/takeof) 146.67 379.62 T
(f) 471.1 379.62 T
(sequence. If ther) 99.65 365.62 T
(e is such a step \050that is, if this is not an instance of) 179.22 365.62 T
4 9.5 Q
(<sky>) 422.48 365.62 T
1 11 Q
( and the) 450.98 365.62 T
(dir) 99.65 351.62 T
(ection is) 113.72 351.62 T
4 9.5 Q
(outbound:) 156.43 351.62 T
1 11 Q
(\051, we sear) 207.73 351.62 T
(ch for the next available container matching the) 253.67 351.62 T
(plausible step. If we \336nd one, then we r) 99.65 337.62 T
(eturn the r) 291.16 337.62 T
(elevant information.) 342.3 337.62 T
-0.04 (W) 126.65 323.62 P
-0.04 (e de\336ne two helper methods needed by the) 136.64 323.62 P
4 9.5 Q
-0.08 (next-out) 349.24 323.62 P
1 11 Q
-0.04 ( method. The helper) 394.84 323.62 P
(methods \336nd the \336rst air) 99.65 309.62 T
(craft in line for transition.) 220.14 309.62 T
4 9 Q
(def) 99.65 288.95 T
(ine method next-out-internal \050container :: <single-capacity-storage>,) 115.85 288.95 T
(direction :: <symbol>\051) 277.85 277.95 T
(container.vehicle-currently-occupying;) 110.45 266.95 T
(end;) 99.65 255.95 T
(def) 99.65 236.95 T
(ine method next-out-internal \050container :: <multiple-capacity-storage>,) 115.85 236.95 T
(direction :: <symbol>\051;) 277.85 225.95 T
(let vehicle-queue = container.vehicles-by-direction;) 110.45 214.95 T
(if \050size \050vehicle-queue\051 > 0\051) 110.45 203.95 T
(vehicle-queue[0];) 121.25 192.95 T
(end;) 110.45 181.95 T
(end;) 99.65 170.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "144" 146
%%Page: "145" 147
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 345.65 702.62 T
2 11 Q
(145) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(The helper generic function is named) 99.65 665.62 T
4 9.5 Q
(next-out-internal) 283.39 665.62 T
1 11 Q
( because we do not) 380.29 665.62 T
-0.73 (expect any methods to call) 99.65 651.62 P
4 9.5 Q
-1.51 (next-out-internal) 227.81 651.62 P
1 11 Q
-0.73 (, except those associated with) 324.71 651.62 P
4 9.5 Q
-1.51 (next-) 467.15 651.62 P
(out) 99.65 637.62 T
1 11 Q
( itself. In Appendix 1) 116.75 637.62 T
(1,) 218.13 637.62 T
0 F
(Libraries and Modules) 231.88 637.62 T
1 F
(, a mor) 331.71 637.62 T
(e rigor) 365.33 637.62 T
(ous technique for) 397.16 637.62 T
(de\336ning internal and external interfaces is pr) 99.65 623.62 T
(esented.) 318.1 623.62 T
-0.14 (The) 126.65 609.62 P
4 9.5 Q
-0.3 (next-out-internal) 147.67 609.62 P
1 11 Q
-0.14 ( generic function \050and ther) 244.57 609.62 P
-0.14 (efor) 372.95 609.62 P
-0.14 (e) 392.03 609.62 P
4 9.5 Q
-0.3 (next-out) 399.91 609.62 P
1 11 Q
-0.14 (\051 does not) 445.51 609.62 P
-0.24 (actually r) 99.65 595.62 P
-0.24 (emove anything fr) 144.92 595.62 P
-0.24 (om any queue. Its contract is only to determine which) 233.95 595.62 P
(air) 99.65 581.62 T
(craft could be r) 112.5 581.62 T
(emoved next.) 185.67 581.62 T
(Note that you can use the squar) 126.65 567.62 T
(e bracket syntax to access queues, in the) 280.69 567.62 T
(same way that you can access vectors by index.) 99.65 553.62 T
3 13 Q
(9.6.7  Revised method for) 99.65 522.29 T
4 F
(land-aircraft) 231.77 522.29 T
1 11 Q
(The following method is the completely r) 99.65 502.62 T
(evised top-level loop:) 300.35 502.62 T
6 9 Q
(// Assumes airport is empty at the start, and that the inbound queue) 99.65 481.95 T
(// of the sky instance is preloaded with the aircraft headed for this) 99.65 470.95 T
-0.13 (// airport, and the outbound queue is empty, and the same size as the inbound) 99.65 459.95 P
(// queue.) 99.65 448.95 T
4 F
(def) 99.65 437.95 T
(ine method land-aircraft \050airport :: <airport>, aircraft :: <vector>,) 115.85 437.95 T
(#key time = $midnight\051) 256.25 426.95 T
(let sky = airport.sky-instance;) 110.45 415.95 T
(let containers-visited = make-object-table;) 110.45 404.95 T
(let vehicles-moved = make-object-table;) 110.45 393.95 T
6 F
(// Keep going until every incoming aircraft is now in the sky, outbound.) 110.45 382.95 T
4 F
(while \050available? \050#f, sky, #"outbound"\051\051) 110.45 371.95 T
(f) 121.25 360.95 T
(ill! \050containers-visited, #f\051;) 126.65 360.95 T
(f) 121.25 349.95 T
(ill! \050vehicles-moved, #f\051;) 126.65 349.95 T
(time := execute-next-transfers \050sky, containers-visited, vehicles-moved,) 121.25 338.95 T
(time\051;) 283.25 327.95 T
(end;) 110.45 316.95 T
(end;) 99.65 305.95 T
1 11 Q
-0.2 (W) 99.65 285.62 P
-0.2 (e start by obtaining the appr) 109.64 285.62 P
-0.2 (opriate) 246.17 285.62 P
4 9.5 Q
-0.41 (<sky>) 283.24 285.62 P
1 11 Q
-0.2 ( instance fr) 311.74 285.62 P
-0.2 (om the airport, cr) 364.56 285.62 P
-0.2 (eating an) 448.57 285.62 P
(object table that will keep track of the containers that have been checked for any) 99.65 271.62 T
(possible moves, and cr) 99.65 257.62 T
(eating a table used to ensur) 209.87 257.62 T
(e that a vehicle is moved only) 342.83 257.62 T
-0.57 (once per iteration. W) 99.65 243.62 P
-0.57 (e implement the main loop with the) 198.82 243.62 P
4 9.5 Q
-1.17 (while) 371.85 243.62 P
1 11 Q
-0.57 ( iteration constr) 400.35 243.62 P
-0.57 (uct.) 475.61 243.62 P
(The looping continues until the sky\325s outbound queue \336lls up with the same) 99.65 229.62 T
(numnber of air) 99.65 215.62 T
(craft that have been pushed inbound into the airport \050r) 172.51 215.62 T
(emember) 438.33 215.62 T
(that the sky\325s inbound and outbound queues ar) 99.65 201.62 T
(e the same length\051. The) 330.26 201.62 T
4 9.5 Q
(#f) 445.49 201.62 T
1 11 Q
( ar) 456.89 201.62 T
(gu-) 469.29 201.62 T
(ment to) 99.65 187.62 T
4 9.5 Q
(available?) 139.71 187.62 T
1 11 Q
( means that we ar) 196.71 187.62 T
(e checking whether ther) 282.42 187.62 T
(e is available space) 399.07 187.62 T
(for any vehicle \050not for a speci\336c vehicle\051. In the body of the loop, we \336rst clear) 99.65 173.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "145" 147
%%Page: "146" 148
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(146) 63.65 702.62 T
0 9.5 Q
(9.6 Methods that handle aircraft transitions) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(the table being used to keep track of the containers checked so far) 99.65 665.62 T
(, and clear the) 417.28 665.62 T
4 9.5 Q
(vehicles-moved) 99.65 651.62 T
1 11 Q
( table \050using the) 179.45 651.62 T
4 9.5 Q
(f) 260.02 651.62 T
(ill!) 265.72 651.62 T
1 11 Q
( function\051, then call the main) 288.52 651.62 T
4 9.5 Q
(transfer) 430.73 651.62 T
1 11 Q
-0.29 (method, which will move the air) 99.65 637.62 P
-0.29 (craft that is next in line at each container one step) 256.54 637.62 P
(forwar) 99.65 623.62 T
(d \050if possible\051.) 132.48 623.62 T
(The) 126.65 609.62 T
4 9.5 Q
(f) 147.81 609.62 T
(ill!) 153.51 609.62 T
1 11 Q
( function stor) 176.31 609.62 T
(es its second ar) 240.99 609.62 T
(gument \050in this case) 314.22 609.62 T
4 9.5 Q
(#f) 414.37 609.62 T
1 11 Q
(\051 as the value) 425.77 609.62 T
(of every key in its \336rst ar) 99.65 595.62 T
(gument, which must be a collection. This is a handy) 220.48 595.62 T
(function to initialize a collection to some known state.) 99.65 581.62 T
3 13 Q
(9.6.8  Method for) 99.65 550.29 T
4 F
(execute-next-transfers) 187.32 550.29 T
4 9 Q
(def) 99.65 529.95 T
(ine method execute-next-transfers \050container :: <vehicle-storage>,) 115.85 529.95 T
(containers-visited :: <object-table>,) 304.85 518.95 T
(vehicles-moved :: <object-table>,) 304.85 507.95 T
(time :: <time>\051) 304.85 496.95 T
(let max-time = $midnight) 110.45 485.95 T
6 F
(// Don\325t bother to check containers we have already checked for) 110.45 474.95 T
(// candidates to move.) 110.45 463.95 T
4 F
(unless \050containers-visited[container]\051) 110.45 452.95 T
(containers-visited[container] := #t;) 121.25 441.95 T
6 F
(// The local method consider-transfer forms the core of) 121.25 430.95 T
(// execute-next-transfers. Given a vehicle, the containers it is) 121.25 419.95 T
(// currently in, the next container it should move into, and the) 121.25 408.95 T
(// time it will take to execute the transfer, this method) 121.25 397.95 T
(// determines if the transfer should take place, and if so, then) 121.25 386.95 T
(// the transfer is executed.) 121.25 375.95 T
4 F
(local method consider-transfer \050pvehicle, pcurrent-container,) 121.25 364.95 T
(pnext-container, ptime\051) 283.25 353.95 T
6 F
(// If there is a vehicle to move, and we haven\325t already moved) 126.65 342.95 T
(// this particular vehicle once this round...) 126.65 331.95 T
4 F
(if \050pvehicle & \050~ vehicles-moved[pvehicle]\051\051) 126.65 320.95 T
4 9.5 Q
(//...then remember we have moved this particular vehicle this) 139.55 309.95 T
(//round.) 139.55 298.95 T
4 9 Q
(vehicles-moved[pvehicle] := #t;) 137.45 287.95 T
6 F
(// Transfer the vehicle from where it is, to where it needs to go.) 137.45 276.95 T
4 F
(move-out-vehicle \050pvehicle, pcurrent-container, pvehicle.direction\051;) 137.45 265.95 T
(move-in-vehicle \050pvehicle, pnext-container, pvehicle.direction\051;) 137.45 254.95 T
(// Compute the time of arrival at the next place, and display) 137.45 243.95 T
(// the message.) 137.45 232.95 T
(next-time = time + ptime;) 137.45 221.95 T
(say-step \050next-time, pvehicle, pnext-container\051;) 137.45 210.95 T
(// Keep track of the latest time an action took place.) 137.45 199.95 T
(max-time := max \050max-time, next-time\051;) 137.45 188.95 T
(end if;) 121.25 177.95 T
(end method consider-transfer;) 115.85 166.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "146" 148
%%Page: "147" 149
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 345.65 702.62 T
2 11 Q
(147) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
6 9 Q
0 X
(// Perform the above operations on whatever might be next inbound for) 115.85 666.95 T
(// the container.) 115.85 655.95 T
4 F
(let \050vehicle, current-container, next-container, time\051 =) 115.85 644.95 T
(next-out \050container, outbound:\051;) 132.05 633.95 T
(consider-transfer \050vehicle, current-container, next-container, time\051;) 115.85 622.95 T
6 F
(// Ditto for whatever might be next outbound.) 115.85 611.95 T
4 F
(let \050vehicle, current-container, next-container, time\051 =) 115.85 600.95 T
(next-out \050container, inbound:\051;) 132.05 589.95 T
(consider-transfer \050vehicle, current-container, next-container, time\051;) 115.85 578.95 T
6 F
(// Then check all the containers connected to the container.) 115.85 567.95 T
4 F
(for \050c in connected-to \050container\051\051) 115.85 556.95 T
(max-time := max \050max-time,) 126.65 545.95 T
(execute-next-transfers \050c, containers-visited,) 218.45 534.95 T
(time\051\051;) 348.05 523.95 T
(end for;) 115.85 512.95 T
(end unless;) 110.45 501.95 T
(max-time;) 110.45 490.95 T
(end method execute-next-transfers;) 99.65 479.95 T
1 11 Q
-1.13 (In the pr) 99.65 459.62 P
-1.13 (eceding method for) 139.02 459.62 P
4 9.5 Q
-2.34 (execute-next-transfers) 233.46 459.62 P
1 11 Q
-1.13 (, we initialize the latest trans-) 358.86 459.62 P
-0.34 (fer to midnight. W) 99.65 445.62 P
-0.34 (e should \336nd aome transfer later than this during our sear) 187.82 445.62 P
-0.34 (ch, or) 466.45 445.62 P
-0.15 (ther) 99.65 431.62 P
-0.15 (e is a pr) 119.05 431.62 P
-0.15 (oblem. Next, if we have alr) 156.23 431.62 P
-0.15 (eady visited this container) 286.2 431.62 P
-0.15 (, we need not do) 413.09 431.62 P
(anything further) 99.65 417.62 T
(.) 179.55 417.62 T
(Next we note that the curr) 126.65 403.62 T
(ent container has been visited, and we de\336ne a) 254.12 403.62 T
2 F
(local method) 99.65 389.62 T
1 F
( named) 164.72 389.62 T
4 9.5 Q
(consider-transfer) 203.83 389.62 T
1 11 Q
(. The name of this method is accessible) 299.92 389.62 T
(only in the r) 99.65 375.62 T
(est of the body of) 158.63 375.62 T
4 9.5 Q
(execute-next-transfers) 245.42 375.62 T
1 11 Q
(.) 370.82 375.62 T
-0.22 (The) 126.65 361.62 P
4 9.5 Q
-0.45 (consider-transfer) 147.6 361.62 P
1 11 Q
-0.22 ( method takes as ar) 244.5 361.62 P
-0.22 (guments: an air) 337.27 361.62 P
-0.22 (craft, a container) 412.22 361.62 P
(the air) 99.65 347.62 T
(craft is curr) 130.5 347.62 T
(ently in, the container it should move to, and the time in min-) 185.85 347.62 T
(utes as an integer it will take to execute such a transfer) 99.65 333.62 T
(. In the method, we per-) 363.56 333.62 T
(form the transfer if the vehicle is not false \050that is, we \336nd a vehicle to transfer\051) 99.65 319.62 T
(and if we have not alr) 99.65 305.62 T
(eady moved this vehicle this time \050that is, since) 205.56 305.62 T
4 9.5 Q
(execute-) 437.52 305.62 T
(next-transfers) 99.65 291.62 T
1 11 Q
( was called\051. By limiting the number of times a vehicle can move) 179.45 291.62 T
-0.22 (per call to) 99.65 277.62 P
4 9.5 Q
-0.45 (execute-next-transfers) 149.85 277.62 P
1 11 Q
-0.22 (, we ensur) 275.25 277.62 P
-0.22 (e that each vehicle gets an opportu-) 324.62 277.62 P
(nity to advance thr) 99.65 263.62 T
(ough the airport if it is next in line out of a container) 191.42 263.62 T
(. If the) 444.73 263.62 T
(vehicle is suitable, we note that the vehicle has now been moved once, call) 99.65 249.62 T
4 9.5 Q
(move-) 463.01 249.62 T
(out-vehicle) 99.65 235.62 T
1 11 Q
( and) 162.35 235.62 T
4 9.5 Q
(move-in-vehicle) 186.47 235.62 T
1 11 Q
( to accomplish the transfer) 271.97 235.62 T
(, \336gur) 399.85 235.62 T
(e out what) 428.9 235.62 T
(time the transfer occurr) 99.65 221.62 T
(ed, r) 213.6 221.62 T
(eport the transfer to the user) 235.23 221.62 T
(, and update the latest) 372.78 221.62 T
(time an event has occurr) 99.65 207.62 T
(ed during this execution of) 218.52 207.62 T
4 9.5 Q
(execute-next-transfers) 352.13 207.62 T
1 11 Q
(, if) 477.53 207.62 T
(this particular event is the latest.) 99.65 193.62 T
(W) 126.65 179.62 T
(e call the) 136.64 179.62 T
4 9.5 Q
(consider-transfer) 182.2 179.62 T
1 11 Q
( local method fr) 279.1 179.62 T
(om the body of) 355.65 179.62 T
4 9.5 Q
(execute-) 432.22 179.62 T
(next-transfers) 99.65 165.62 T
1 11 Q
( for any possible inbound traf) 179.45 165.62 T
(\336c for this container) 323.27 165.62 T
(, and for any) 419.71 165.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "147" 149
%%Page: "148" 150
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(148) 63.65 702.62 T
0 9.5 Q
(9.7 Method for sorting) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(possible outbound traf) 99.65 665.62 T
(\336c for this container) 209.81 665.62 T
(, and then we r) 306.25 665.62 T
(epeaat this entir) 378.87 665.62 T
(e pr) 456.57 665.62 T
(o-) 475.34 665.62 T
-0.1 (cess for any containers connected to this container) 99.65 651.62 P
-0.1 (. The r) 341.6 651.62 P
-0.1 (ecursion terminates once) 372.21 651.62 P
-0.38 (all connected containers have been visited. Note that the messages generated may) 99.65 637.62 P
(not be in chr) 99.65 623.62 T
(onological or) 160.28 623.62 T
(der anymor) 223.71 623.62 T
(e. W) 280.67 623.62 T
(e could solve this pr) 301.43 623.62 T
(oblem by cr) 399.11 623.62 T
(eating) 456.11 623.62 T
(log r) 99.65 609.62 T
(ecor) 121.87 609.62 T
(ds, and sorting those log r) 142.17 609.62 T
(ecor) 268.4 609.62 T
(ds befor) 288.7 609.62 T
(e displaying them to the user) 328.01 609.62 T
(.) 468.68 609.62 T
3 13 Q
(9.6.9  Revised) 99.65 578.29 T
4 F
(available?) 173.14 578.29 T
3 F
( method) 251.14 578.29 T
1 11 Q
(As it turns out, ther) 99.65 558.62 T
(e is a signi\336cant pr) 194.67 558.62 T
(oblem with the code in Section 9.6.8.) 285.67 558.62 T
(Depending on the arrival times of the air) 99.65 544.62 T
(craft, it would be possible to completely) 297.58 544.62 T
(load up the airport with traf) 99.65 530.62 T
(\336c. If the taxiway is full of inbound and outbound) 236.18 530.62 T
(traf) 99.65 516.62 T
(\336c, and the r) 116.54 516.62 T
(unway is occupied by an inbound air) 177.22 516.62 T
(craft, and the gates ar) 358.02 516.62 T
(e full,) 462.41 516.62 T
(then a deadlock occurs. No air) 99.65 502.62 T
(craft can depart fr) 247.14 502.62 T
(om the outbound taxiway) 333.99 502.62 T
(because the r) 99.65 488.62 T
(unway is blocked with the inbound air) 162.96 488.62 T
(craft. The inbound air) 351.35 488.62 T
(craft) 457.04 488.62 T
(cannot get onto the taxiway because it is full. T) 99.65 474.62 T
(o solve this pr) 326.29 474.62 T
(oblem, we change) 394.51 474.62 T
(the) 99.65 460.62 T
4 9.5 Q
(available?) 117.65 460.62 T
1 11 Q
( method on) 174.65 460.62 T
4 9.5 Q
(<runway>) 233.01 460.62 T
1 11 Q
( to r) 278.61 460.62 T
(eport that the r) 297.85 460.62 T
(unway available to) 370.5 460.62 T
(inbound traf) 99.65 446.62 T
(\336c only if ther) 160.74 446.62 T
(e is an inbound taxiway with space once the air) 228.52 446.62 T
(craft) 458.47 446.62 T
(lands.) 99.65 432.62 T
4 9 Q
(def) 99.65 411.95 T
(ine method available? \050vehicle) 115.85 411.95 T
(:: <standard-aircraft>,) 294.05 411.95 T
(container :: <runway>,) 240.05 400.95 T
(direction :: <symbol>\051) 240.05 389.95 T
(next-method \050\051 &) 110.45 378.95 T
(select \050direction\051) 121.25 367.95 T
(outbound: => #t;) 126.65 356.95 T
(inbound: =>) 126.65 345.95 T
(let \050class, time\051 = next-landing-step \050container, vehicle\051;) 137.45 334.95 T
(if \050class\051) 137.45 323.95 T
(f) 148.25 312.95 T
(ind-available-connection \050container, class, vehicle\051;) 153.65 312.95 T
(end;) 137.45 301.95 T
(end;) 121.25 290.95 T
(end;) 99.65 279.95 T
1 11 Q
(This solution can be generalized for any deadlock interaction between single and) 99.65 259.62 T
(multiple capacity containers.) 99.65 245.62 T
3 15 Q
(9.7  Method for sorting) 99.65 205.95 T
1 11 Q
(Ther) 99.65 185.62 T
(e ar) 122.21 185.62 T
(e many built-in functions that manipulate collections in various ways.) 139.88 185.62 T
(One example is the) 99.65 171.62 T
4 9.5 Q
(sort) 195.33 171.62 T
1 11 Q
( generic function, which sorts the elements of sequences.) 218.13 171.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "148" 150
%%Page: "149" 151
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 345.65 702.62 T
2 11 Q
(149) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(In the examples in the pr) 99.65 665.62 T
(evious section, ther) 220.29 665.62 T
(e was an assumption that the user) 313.94 665.62 T
(had alr) 99.65 651.62 T
(eady sorted the vector of inbound air) 133.87 651.62 T
(craft befor) 314.09 651.62 T
(e cr) 363.99 651.62 T
(eating the) 381.04 651.62 T
4 9.5 Q
(<sky>) 431.87 651.62 T
1 11 Q
(instance. The following method could help the user sort the inbound air) 99.65 637.62 T
(craft vec-) 448.89 637.62 T
(tor:) 99.65 623.62 T
4 9 Q
(def) 99.65 602.95 T
(ine method sort-inbound-aircraft) 115.85 602.95 T
(\050inbound-vector :: <simple-object-vector>, airport :: <airport>\051) 121.25 591.95 T
(sort \050inbound-vector,) 110.45 580.95 T
(test: method \050a, b\051) 142.85 569.95 T
(f) 186.05 558.95 T
(lying-time \050a, airport\051 < f) 191.45 558.95 T
(lying-time \050b, airport\051) 337.25 558.95 T
(end\051;) 175.25 547.95 T
(end;) 99.65 536.95 T
1 11 Q
(W) 99.65 516.62 T
(e pr) 109.64 516.62 T
(ovide an bar) 128.41 516.62 T
(e method as the test function to the) 188.96 516.62 T
4 9.5 Q
(sort) 362.08 516.62 T
1 11 Q
( generic function; this) 384.88 516.62 T
(method helps sort the inbound air) 99.65 502.62 T
(craft vector in the or) 265.4 502.62 T
(der of time to \337y to the) 363.69 502.62 T
(speci\336ed airport. Note that) 99.65 488.62 T
4 9.5 Q
(sort) 233.34 488.62 T
1 11 Q
( does not alter its ar) 256.14 488.62 T
(gument, but cr) 351.55 488.62 T
(eates a new) 422.85 488.62 T
(sequence with the elements sorted.) 99.65 474.62 T
(Dylan supplies a rich set of sequence manipulation functions in particular) 126.65 460.62 T
(,) 484.8 460.62 T
(and collection manipulation functions in general. See the) 99.65 446.62 T
0 F
(Dylan Refer) 378.33 446.62 T
(ence Manual) 432.23 446.62 T
1 F
(for mor) 99.65 432.62 T
(e information.) 136.28 432.62 T
3 15 Q
(9.8  Summary) 99.65 392.95 T
1 11 Q
(This chapter cover) 99.65 372.62 T
(ed:) 189.28 372.62 T
(\245) 108.65 352.62 T
(W) 126.65 352.62 T
(e used four dif) 136.64 352.62 T
(fer) 207.48 352.62 T
(ent contr) 220.55 352.62 T
(ol str) 263.59 352.62 T
(uctur) 288.05 352.62 T
(es:) 313.93 352.62 T
4 9.5 Q
(if-elseif-else) 329.37 352.62 T
1 11 Q
(,) 409.17 352.62 T
4 9.5 Q
(case) 414.67 352.62 T
1 11 Q
(,) 437.47 352.62 T
4 9.5 Q
(select) 442.97 352.62 T
1 11 Q
(,) 477.17 352.62 T
(and generic function dispatch.) 126.65 338.62 T
(\245) 108.65 318.62 T
(W) 126.65 318.62 T
(e used the) 136.64 318.62 T
4 9.5 Q
(do) 188.7 318.62 T
1 11 Q
( iterator) 200.1 318.62 T
(.) 237.87 318.62 T
(\245) 108.65 298.62 T
(W) 126.65 298.62 T
(e de\336ned local methods and bar) 136.64 298.62 T
(e methods.) 292.2 298.62 T
(\245) 108.65 278.62 T
(W) 126.65 278.62 T
(e used tables, queues, and symbol Dylan collection classes.) 136.64 278.62 T
(\245) 108.65 258.62 T
(W) 126.65 258.62 T
(e de\336ned constr) 136.64 258.62 T
(uctors.) 214.24 258.62 T
(\245) 108.65 238.62 T
(W) 126.65 238.62 T
(e de\336ned an init-function.) 136.64 238.62 T
(\245) 108.65 218.62 T
(W) 126.65 218.62 T
(e used the) 136.64 218.62 T
4 9.5 Q
(sort) 188.7 218.62 T
1 11 Q
( and) 211.5 218.62 T
4 9.5 Q
(f) 235.62 218.62 T
(ill!) 241.32 218.62 T
1 11 Q
( functions.) 264.12 218.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "149" 151
%%Page: "150" 152
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(150) 63.65 702.62 T
0 9.5 Q
(9.8 Summary) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "150" 152
%%Page: "151" 153
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(151) 289.4 135.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(10) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(10) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Exceptions) 101.65 591.4 T
99.65 159.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(In this chapter) 99.65 449.62 T
(, we discuss how to use Dylan facilities to help cr) 168.89 449.62 T
(eate r) 406.97 449.62 T
(eliable pr) 433.49 449.62 T
(o-) 478.72 449.62 T
(grams in the face of exceptional situations, or) 99.65 435.62 T
2 F
(exceptions) 321.98 435.62 T
1 F
(. An exception is an) 375.13 435.62 T
(unexpected event that occurs during pr) 99.65 421.62 T
(ogram execution. One common type of) 291.12 421.62 T
(exception is a violation of the contract of a function, such as attempting to divide) 99.65 407.62 T
(a number by zer) 99.65 393.62 T
(o. Another example is an attempt to access an uninitialized slot.) 178.96 393.62 T
(Those two exceptions ar) 99.65 379.62 T
(e detected by Dylan itself. Sometimes an application) 216.96 379.62 T
(detects a violation of a contract it de\336nes. For example, our simple integer parser) 99.65 365.62 T
(\050de\336ned in Section 8.7.1, page 1) 99.65 351.62 T
(18\051 detects err) 251.96 351.62 T
(ors in the syntax of its ar) 319.87 351.62 T
(gument.) 438.95 351.62 T
(When an application detects an unusual event, ther) 126.65 337.62 T
(e ar) 376.02 337.62 T
(e many options) 393.68 337.62 T
-0.09 (available for r) 99.65 323.62 P
-0.09 (esponding to that event. Some options ar) 166.8 323.62 P
-0.09 (e unstr) 365.22 323.62 P
-0.09 (uctur) 398.69 323.62 P
-0.09 (ed. In the case) 424.57 323.62 P
-0.04 (of the integer parser) 99.65 309.62 P
-0.04 (, we simply display a warning and ignor) 196.82 309.62 P
-0.04 (e the bit of tr) 393.65 309.62 P
-0.04 (oubling) 455.29 309.62 P
(syntax. Sometimes a mor) 99.65 295.62 T
(e str) 221.15 295.62 T
(uctur) 241.68 295.62 T
(ed appr) 267.56 295.62 T
(oach is useful. For example, the code) 305.17 295.62 T
(calling the integer parser might like to know that the time is in an incorr) 99.65 281.62 T
(ect for-) 449.38 281.62 T
(mat. Per) 99.65 267.62 T
(haps that time came fr) 140.01 267.62 T
(om an interactive user) 248.2 267.62 T
(, and the application could) 355.63 267.62 T
-0.39 (ask the user to enter the time again. In this chapter) 99.65 253.62 P
-0.39 (, we explor) 340.41 253.62 P
-0.39 (e several appr) 393.24 253.62 P
-0.39 (oaches) 460.56 253.62 P
(to pr) 99.65 239.62 T
(oviding a exception pr) 122.75 239.62 T
(otocol between parts of an application.) 232.02 239.62 T
3 15 Q
(10.1  An informal exception protocol) 99.65 199.95 T
1 11 Q
-0.27 (The goal of this example is to modify the integer parser used by the time parser to) 99.65 179.62 P
-0.26 (r) 99.65 165.62 P
-0.26 (ecognize invalid input, and to pr) 103.79 165.62 P
-0.26 (ompt the user to enter an integer) 261.48 165.62 P
-0.26 (. In this section,) 418.22 165.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "151" 153
%%Page: "152" 154
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(152) 63.65 702.62 T
0 9.5 Q
(10.1 An informal exception protocol) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
-0.02 (we show a very simple way to handle exceptions, without using the Dylan condi-) 99.65 665.62 P
(tions facility) 99.65 651.62 T
(. W) 158.39 651.62 T
(e then discuss the pr) 173.88 651.62 T
(oblems with this informal appr) 273.25 651.62 T
(oach. In Sec-) 424.3 651.62 T
(tion 10.2, we achieve the same goal using Dylan conditions, and solve the) 99.65 637.62 T
(pr) 99.65 623.62 T
(oblems with the informal appr) 110.41 623.62 T
(oach.) 258.86 623.62 T
(W) 126.65 609.62 T
(e shall modify the integer parser used by the time parser to r) 136.64 609.62 T
(ecognize) 430.46 609.62 T
-0.89 (invalid input. W) 99.65 595.62 P
-0.89 (e shall pr) 176.97 595.62 P
-0.89 (ovide a method) 219.68 595.62 P
4 9.5 Q
-1.85 (interactive-read-integer) 295.86 595.62 P
1 11 Q
-0.89 ( that uses the) 432.66 595.62 P
-0.93 (new) 99.65 581.62 P
4 9.5 Q
-1.93 (parse-integer) 122.31 581.62 P
1 11 Q
-0.93 (, and r) 195.6 581.62 P
-0.93 (ecovers fr) 224.76 581.62 P
-0.93 (om any detected parse err) 271.04 581.62 P
-0.93 (ors by pr) 393.51 581.62 P
-0.93 (ompting the) 435.12 581.62 P
(user for an integer) 99.65 567.62 T
(. The following example is a sample dialog with) 188.1 567.62 T
4 9.5 Q
(interactive-) 423.65 567.62 T
(read-integer) 99.65 553.62 T
1 11 Q
(:) 168.05 553.62 T
5 9 Q
(?) 99.65 532.95 T
4 F
( interactive-read-integer\050*window*, prompt: "How old are you? "\051;) 105.05 532.95 T
5 F
(How old are you?) 99.65 513.95 T
4 F
( forever young) 186.05 513.95 T
5 F
(Illegal integer: Illegal character.) 99.65 502.95 T
(How old are you?) 99.65 483.95 T
4 F
( 0-60) 186.05 483.95 T
5 F
(Illegal integer: Sign in illegal spot.) 99.65 472.95 T
(How old are you?) 99.65 453.95 T
4 F
( 17) 186.05 453.95 T
(17) 99.65 442.95 T
3 13 Q
(10.1.1  The) 99.65 413.29 T
4 F
(parse-integer) 157.13 413.29 T
3 F
( method using informal exceptions) 258.53 413.29 T
1 11 Q
(The following example is the modi\336ed version of) 99.65 393.62 T
4 9.5 Q
(parse-integer) 341.45 393.62 T
1 11 Q
(. First we de\336ne) 414.74 393.62 T
(some constants and some pr) 99.65 379.62 T
(edicates which use those pr) 237.03 379.62 T
(edicates. This will make) 370.43 379.62 T
4 9.5 Q
(parse-integer) 99.65 365.62 T
1 11 Q
(itself simpler) 179.45 365.62 T
(.) 241.97 365.62 T
4 9 Q
(def) 99.65 344.95 T
(ine constant $whitespace-chars = #[' ', '\134t', '\134n', '\134r']) 115.85 344.95 T
(def) 99.65 325.95 T
(ine constant $sign-chars = #[\325+\325, \325-\325]) 115.85 325.95 T
(def) 99.65 306.95 T
(ine method digit? \050char :: <character>\051) 115.85 306.95 T
(member? \050char, $digits\051;) 110.45 295.95 T
(end;) 99.65 284.95 T
(def) 99.65 265.95 T
(ine method whitespace? \050char :: <character>\051) 115.85 265.95 T
(member? \050char, $whitespace-chars\051;) 110.45 254.95 T
(end;) 99.65 243.95 T
(def) 99.65 224.95 T
(ine method sign? \050char :: <character>\051) 115.85 224.95 T
(member? \050char, $sign-chars\051) 110.45 213.95 T
(end;) 99.65 202.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "152" 154
%%Page: "153" 155
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 451.91 702.62 T
2 11 Q
(153) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
6 9 Q
0 X
(// This is a very simple integer parser with its own homegrown exception) 99.65 666.95 T
-0.15 (// conventions. If parse-integer returns an integer as its f) 99.65 655.95 P
-0.15 (irst value, then) 422.3 655.95 P
(// the results of calling the method are valid. If parse-integer returns a) 99.65 644.95 T
(// string as its f) 99.65 633.95 T
(irst argument,then there was a parsing problem, and the) 196.85 633.95 T
(// string will give some indication of the nature of that problem.) 99.65 622.95 T
4 F
(def) 99.65 611.95 T
(ine method parse-integer) 115.85 611.95 T
(\050integer-string :: <string>, #key delimiter = ".", start = 0\051) 121.25 600.95 T
(block \050return\051) 110.45 589.95 T
(let length = size \050integer-string\051;) 121.25 578.95 T
(let result = #f;) 121.25 567.95 T
(let sign = #f;) 121.25 556.95 T
(let end-index = start;) 121.25 545.95 T
(for \050index from start below length\051) 121.25 534.95 T
(let char = integer-string[index];) 132.05 523.95 T
(case) 132.05 512.95 T
(// Is the character a digit?) 142.85 501.95 T
(digit? \050char\051 =>) 142.85 490.95 T
(let value = position \050char, $digits\051;) 153.65 479.95 T
(if \050result\051) 153.65 468.95 T
6 F
(// If we have already started to generate the integer) 175.25 457.95 T
(// shift the result to make room for the next digit.) 175.25 446.95 T
4 F
(result := \050result * 10\051 + value;) 175.25 435.95 T
(else) 164.45 424.95 T
(result := value;) 175.25 413.95 T
(end;) 153.65 402.95 T
6 F
(// Is the character whitespace?) 142.85 391.95 T
4 F
(whitespace? \050char\051 => #f;) 142.85 380.95 T
6 F
(// Is the character a sign?) 142.85 369.95 T
4 F
(sign? \050char\051 => if \050result | sign\051) 142.85 358.95 T
(return\050"Sign in illegal spot\323\051;) 240.05 347.95 T
(else) 229.25 336.95 T
(sign := char;) 240.05 325.95 T
(end;) 229.25 314.95 T
6 F
(// Is the character the specif) 142.85 303.95 T
(ied character to stop at when reached?) 304.85 303.95 T
4 F
(char == delimiter => return \050values \050result, sign, index\051\051;) 142.85 292.95 T
(otherwise => return \050"Illegal character"\051;) 142.85 281.95 T
(end case;) 132.05 270.95 T
(f) 121.25 259.95 T
(inally return \050values \050result, sign, length\051\051;) 126.65 259.95 T
(end for;) 121.25 248.95 T
(end block;) 110.45 237.95 T
(end method parse-integer;) 99.65 226.95 T
1 11 Q
(In the pr) 99.65 206.62 T
(eceding example, we have modi\336ed the) 141.27 206.62 T
4 9.5 Q
( parse-integer) 334.24 206.62 T
1 11 Q
(function in sev-) 419.74 206.62 T
(eral important ways. First, we have r) 99.65 192.62 T
(emoved the original r) 278.26 192.62 T
(eturn values declara-) 383.07 192.62 T
(tion \050) 99.65 178.62 T
4 9.5 Q
(\050integer :: <integer>, sign, end-index :: <integer>\051) 125.26 178.62 T
1 11 Q
(\051 because now) 421.66 178.62 T
(this function r) 99.65 164.62 T
(eturns those thr) 167.93 164.62 T
(ee values only when pr) 244.39 164.62 T
(esented with a syntactically) 357.14 164.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "153" 155
%%Page: "154" 156
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(154) 63.65 702.62 T
0 9.5 Q
(10.1 An informal exception protocol) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(valid integer string. If the function r) 99.65 665.62 T
(eceives an invalid ar) 273.79 665.62 T
(gument, it r) 372.8 665.62 T
(eturns a) 429.7 665.62 T
(string describing the parse err) 99.65 651.62 T
(or) 245.26 651.62 T
(. The other changes r) 254.79 651.62 T
(evise the two ar) 355.95 651.62 T
(eas wher) 432.49 651.62 T
(e) 475.66 651.62 T
(parse err) 99.65 637.62 T
(ors ar) 142.55 637.62 T
(e detected to r) 169.96 637.62 T
(eturn a string rather than print out a warning and) 238.52 637.62 T
(continue.) 99.65 623.62 T
3 13 Q
(10.1.2  The) 99.65 592.29 T
4 F
(interactive-read-integer) 157.13 592.29 T
3 F
( method) 344.33 592.29 T
1 11 Q
(W) 99.65 572.62 T
(e can now de\336ne) 109.64 572.62 T
4 9.5 Q
(interactive-read-integer) 194.59 572.62 T
1 11 Q
(. This function pr) 330.58 572.62 T
(ompts the user) 414.12 572.62 T
(,) 485.55 572.62 T
-0.31 (and r) 99.65 558.62 P
-0.31 (eturns the integer the user enter) 124.85 558.62 P
-0.31 (ed. If the user enter) 278.21 558.62 P
-0.31 (ed the integer incorr) 370.9 558.62 P
-0.31 (ectly) 468.63 558.62 P
-0.31 (,) 490.46 558.62 P
(this function prints an err) 99.65 544.62 T
(or message and pr) 223.75 544.62 T
(ompts the user to pr) 312.93 544.62 T
(ovide input) 411.02 544.62 T
(again.) 99.65 530.62 T
4 9 Q
-0.22 (def) 99.65 509.95 P
-0.22 (ine method interactive-read-integer \050where #key prompt = "Enter integer:"\051) 115.85 509.95 P
(block \050return\051) 110.45 498.95 T
(while \050#t\051) 121.25 487.95 T
(format \050where, "\134n%s", prompt\051;) 132.05 476.95 T
(let result = parse-integer \050read-line \050where\051\051;) 132.05 465.95 T
(select \050result by instance?\051) 132.05 454.95 T
(<integer> => return \050result\051;) 142.85 443.95 T
(<string>) 142.85 432.95 T
(=> format \050where, "\134nIllegal integer: %s.", result\051;) 196.85 432.95 T
(end;) 121.25 421.95 T
(end;) 110.45 410.95 T
(end;) 99.65 399.95 T
1 11 Q
(The block pr) 99.65 379.62 T
(ovides a way to exit the loop when a pr) 160.61 379.62 T
(oper integer is enter) 351.64 379.62 T
(ed. The) 448.84 379.62 T
4 9.5 Q
(while) 99.65 365.62 T
1 11 Q
( loop continues to iterate until we r) 128.15 365.62 T
(eturn fr) 298.23 365.62 T
(om the block \050with a valid inte-) 335.02 365.62 T
(ger\051. W) 99.65 351.62 T
(ithin the) 134.94 351.62 T
4 9.5 Q
(while) 178.49 351.62 T
1 11 Q
( loop, the user is pr) 206.99 351.62 T
(ompted for input. The) 300.1 351.62 T
4 9.5 Q
(read-line) 410.62 351.62 T
1 11 Q
(method r) 99.65 337.62 T
(eads a line of text fr) 144.24 337.62 T
(om the user) 239.32 337.62 T
(, and r) 295.89 337.62 T
(eturns that text in the form of a) 326.91 337.62 T
-0.38 (string. This string is then passed as the ar) 99.65 323.62 P
-0.38 (gument to the) 296.97 323.62 P
4 9.5 Q
-0.8 (parse-integer) 366.64 323.62 P
1 11 Q
-0.38 ( method. If) 440.74 323.62 P
(the user typed something that could not be parsed as an integer) 99.65 309.62 T
(, then) 408.14 309.62 T
4 9.5 Q
(parse-) 438.05 309.62 T
-0.02 (integer) 99.65 295.62 P
1 11 Q
-0.01 ( r) 139.55 295.62 P
-0.01 (eturns an err) 146.44 295.62 P
-0.01 (or message string instead of an integer) 208.48 295.62 P
-0.01 (. The) 395.08 295.62 P
4 9.5 Q
-0.02 (select) 421.73 295.62 P
1 11 Q
-0.01 ( contr) 455.93 295.62 P
-0.01 (ol) 483.7 295.62 P
(str) 99.65 281.62 T
(uctur) 112.15 281.62 T
(e checks the type of the r) 138.04 281.62 T
(esult, and either r) 257.94 281.62 T
(eturns the valid integer) 343.13 281.62 T
(, or) 455.75 281.62 T
(prints the err) 99.65 267.62 T
(or message string. If the integer was not valid, the) 162.98 267.62 T
4 9.5 Q
(while) 408.08 267.62 T
1 11 Q
( loop) 436.58 267.62 T
(ensur) 99.65 253.62 T
(es that the user is pr) 126.76 253.62 T
(ompted to enter an integer) 224.31 253.62 T
(.) 352.96 253.62 T
(Experienced users who see) 126.65 239.62 T
4 9.5 Q
(format) 260.38 239.62 T
1 11 Q
( and) 294.58 239.62 T
4 9.5 Q
(read-line) 318.7 239.62 T
1 11 Q
( in the example might) 370 239.62 T
(expect a discussion of str) 99.65 225.62 T
(eams; however) 220.55 225.62 T
(, str) 293.06 225.62 T
(eams ar) 310.96 225.62 T
(e beyond the scope of this) 348.5 225.62 T
(book.) 99.65 211.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "154" 156
%%Page: "155" 157
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 451.91 702.62 T
2 11 Q
(155) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(10.1.3  Problems with the informal exception protocol) 99.65 664.29 T
1 11 Q
(Ther) 99.65 644.62 T
(e ar) 122.21 644.62 T
(e several signi\336cant pr) 139.88 644.62 T
(oblems with the appr) 249.23 644.62 T
(oach used in Section 10.1:) 352.9 644.62 T
(\245) 108.65 624.62 T
(All the callers of the) 126.65 624.62 T
4 9.5 Q
(parse-integer) 226.6 624.62 T
1 11 Q
( function must now check the r) 300.7 624.62 T
(eturn) 451.12 624.62 T
(value, and dispatch based on the \336rst type r) 126.65 610.62 T
(eturned. This br) 339.29 610.62 T
(eaks up the) 417 610.62 T
(normal \337ow of contr) 126.65 596.62 T
(ol, and gives as much weight to the unusual case \050the) 226.63 596.62 T
(exception\051 as it does to the usual case. If a caller fails to check the r) 126.65 582.62 T
(eturn) 448.67 582.62 T
(value to see if it is a string, then a dif) 126.65 568.62 T
(fer) 304.39 568.62 T
(ent exception will happen later in) 317.46 568.62 T
-0.02 (the pr) 126.65 554.62 P
-0.02 (ogram \050such as adding a string and number together\051, when it will be) 155.39 554.62 P
(har) 126.65 540.62 T
(d to trace the pr) 142.7 540.62 T
(oblem back to the original point of failur) 219.61 540.62 T
(e. For functions) 416.36 540.62 T
(that might r) 126.65 526.62 T
(eturn any object, an additional r) 184.39 526.62 T
(eturn value would have to be) 339.63 526.62 T
(used to indicate that an exception occurr) 126.65 512.62 T
(ed. It would be easy to for) 323.57 512.62 T
(get to) 450.15 512.62 T
(check the extra r) 126.65 498.62 T
(eturn value, and failing to check this extra r) 206.23 498.62 T
(eturn value) 417.47 498.62 T
(could easily go undetected, causing unpr) 126.65 484.62 T
(edictable pr) 326.2 484.62 T
(ogram behavior) 383.42 484.62 T
(.) 460.06 484.62 T
(\245) 108.65 464.62 T
(A casual r) 126.65 464.62 T
(eader of the code could become easily confused about this ad hoc) 175.24 464.62 T
(err) 126.65 450.62 T
(or pr) 140.41 450.62 T
(otocol. The comments could be overlooked, and someone might) 164.27 450.62 T
(write code that did not obey this ad hoc pr) 126.65 436.62 T
(otocol. Also, if everyone uses) 333.16 436.62 T
(their own err) 126.65 422.62 T
(or pr) 190.29 422.62 T
(otocol, it would be har) 214.15 422.62 T
(d to r) 323.52 422.62 T
(emember which convention) 349.48 422.62 T
-0.08 (to obey at the call site; pr) 126.65 408.62 P
-0.08 (ogrammers would have to check the convention in) 247.1 408.62 P
(the sour) 126.65 394.62 T
(ce code or pr) 166.1 394.62 T
(ogrammer documentation.) 228.5 394.62 T
(\245) 108.65 374.62 T
(W) 126.65 374.62 T
(e lose the ability to str) 136.64 374.62 T
(ongly type the r) 242.93 374.62 T
(eturn values. This may pr) 320.01 374.62 T
(event) 444.57 374.62 T
(some compile-time err) 126.65 360.62 T
(or checking that could catch err) 235.88 360.62 T
(ors that would be dif-) 388.79 360.62 T
(\336cult or inconvenient to catch at r) 126.65 346.62 T
(untime. It may also pr) 289.89 346.62 T
(event the compiler) 397.19 346.62 T
(fr) 126.65 332.62 T
(om optimizing code that uses the r) 134.46 332.62 T
(esults of this function, thus decr) 302.8 332.62 T
(easing) 457.92 332.62 T
(performance of the application.) 126.65 318.62 T
(\245) 108.65 298.62 T
(W) 126.65 298.62 T
(e ar) 136.64 298.62 T
(e limited in how we can r) 154.3 298.62 T
(ecover fr) 277.52 298.62 T
(om the err) 320.07 298.62 T
(or) 370.31 298.62 T
(. The context in which) 379.85 298.62 T
(the err) 126.65 284.62 T
(or was detected has been lost.) 158.42 284.62 T
(\245) 108.65 264.62 T
(Notice that we have lost the additional r) 126.65 264.62 T
(eturn values fr) 321.79 264.62 T
(om) 392.82 264.62 T
4 9.5 Q
( parse-integer) 408.53 264.62 T
1 11 Q
(.) 487.52 264.62 T
(W) 126.65 250.62 T
(e would have to captur) 136.64 250.62 T
(e all the r) 248.98 250.62 T
(eturn values and go thr) 293.8 250.62 T
(ough extra ef) 407.4 250.62 T
(fort) 471.17 250.62 T
(to insur) 126.65 236.62 T
(e that they all ar) 164.04 236.62 T
(e r) 242.3 236.62 T
(eturned in the normal case. W) 254.47 236.62 T
(e would like to) 399.52 236.62 T
(avoid this additional complexity if possible.) 126.65 222.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "155" 157
%%Page: "156" 158
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(156) 63.65 702.62 T
0 9.5 Q
(10.2 Signaling conditions) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 15 Q
0 X
(10.2  Signaling conditions) 99.65 662.95 T
1 11 Q
(In this section, we describe Dylan\325s str) 99.65 642.62 T
(uctur) 285.71 642.62 T
(ed appr) 311.6 642.62 T
(oach to r) 349.2 642.62 T
(eporting err) 391.24 642.62 T
(ors with) 449.28 642.62 T
(condition; we discuss the functions used to handle conditions; and \336nally we) 99.65 628.62 T
(show an example that modi\336es the integer parser to use conditions.) 99.65 614.62 T
3 13 Q
(10.2.1  Conditions, handlers, and restart handlers) 99.65 583.29 T
1 11 Q
(Dylan pr) 99.65 563.62 T
(ovides a str) 142.89 563.62 T
(uctur) 198.47 563.62 T
(ed mechanism for indicating that an unusual or excep-) 224.35 563.62 T
(tional pr) 99.65 549.62 T
(oblem has occurr) 141.05 549.62 T
(ed during the execution of a pr) 224.29 549.62 T
(ogram. This mechanism) 374.31 549.62 T
(is called) 99.65 535.62 T
2 F
(signaling a condition) 141.79 535.62 T
1 F
(. A) 248.1 535.62 T
2 F
(condition) 264.91 535.62 T
1 F
( is an instance of the) 313.18 535.62 T
4 9.5 Q
(<condition>) 414.28 535.62 T
1 11 Q
(class, which r) 99.65 521.62 T
(epr) 165.02 521.62 T
(esents a pr) 181.05 521.62 T
(oblem or unusual situation encounter) 232.66 521.62 T
(ed during pr) 415.33 521.62 T
(o-) 476.99 521.62 T
(gram execution. A condition is an indication of an unusual situation, and a) 99.65 507.62 T
2 F
(han-) 465.48 507.62 T
(dler) 99.65 493.62 T
1 F
( is an of) 119.81 493.62 T
(fer to deal with that unusual situation. A) 157.3 493.62 T
2 F
(restart handler) 358.05 493.62 T
1 F
( is a) 431.67 493.62 T
(particular kind of handler that pr) 99.65 479.62 T
(ovides a well-de\336ned pr) 260.98 479.62 T
(otocol for r) 379.11 479.62 T
(ecovering) 432.46 479.62 T
(fr) 99.65 465.62 T
(om the situation and continuing execution in spite of any potential pr) 107.46 465.62 T
(oblems.) 444.59 465.62 T
(The signaling and handling pr) 99.65 451.62 T
(ocess is basically a sear) 247.19 451.62 T
(ch to \336nd an appr) 358.97 451.62 T
(opriate) 445.4 451.62 T
(way to cope with a given unusual situation, followed by the actual coping with) 99.65 437.62 T
(the situation. Dylan uses objects \050instances of) 99.65 423.62 T
4 9.5 Q
(<condition>) 321.62 423.62 T
1 11 Q
(\051 to r) 384.32 423.62 T
(epr) 407.22 423.62 T
(esent unusual) 423.25 423.62 T
(situations, and uses object-oriented pr) 99.65 409.62 T
(ogramming to cope with those situations.) 284.32 409.62 T
3 13 Q
(10.2.2  Functions that handle conditions) 99.65 378.29 T
1 11 Q
(Y) 99.65 358.62 T
(ou can cr) 105.97 358.62 T
(eate a) 149.93 358.62 T
4 9.5 Q
(<condition>) 180.55 358.62 T
1 11 Q
( instance by calling) 243.25 358.62 T
4 9.5 Q
(make) 338.86 358.62 T
1 11 Q
(, just like you would cr) 361.67 358.62 T
(eate) 472.93 358.62 T
-0.32 (any other instance. Once the instance is cr) 99.65 344.62 P
-0.32 (eated and pr) 300.18 344.62 P
-0.32 (operly initialized, it may be) 360.76 344.62 P
(passed as an ar) 99.65 330.62 T
(gument to the) 173.04 330.62 T
4 9.5 Q
(signal) 243.86 330.62 T
1 11 Q
(,) 278.06 330.62 T
4 9.5 Q
(error) 283.56 330.62 T
1 11 Q
(,) 311.24 330.62 T
4 9.5 Q
(cerror) 316.74 330.62 T
1 11 Q
(, or) 350.13 330.62 T
4 9.5 Q
(break) 368.73 330.62 T
1 11 Q
( functions. What) 397.23 330.62 T
(happens next depends on the signaling function you use, the condition is being) 99.65 316.62 T
(signaled, and the handlers that ar) 99.65 302.62 T
(e in for) 262.33 302.62 T
(ce.) 296.52 302.62 T
(The) 126.65 288.62 T
4 9.5 Q
(signal) 147.81 288.62 T
1 11 Q
(,) 182.01 288.62 T
4 9.5 Q
(error) 187.51 288.62 T
1 11 Q
(, and) 215.2 288.62 T
4 9.5 Q
(cerror) 242.07 288.62 T
1 11 Q
( functions \336rst try to \336nd a handler that) 276.27 288.62 T
(matches the condition being signaled. A handler matches the condition being sig-) 99.65 274.62 T
(naled if the condition is a subtype of the type of the handler) 99.65 260.62 T
(, and the condition) 389.06 260.62 T
(passes the optional test established by the handler) 99.65 246.62 T
(. Ther) 342.19 246.62 T
(e ar) 370.25 246.62 T
(e two kinds of han-) 387.91 246.62 T
(dlers: one kind is established by the) 99.65 232.62 T
4 9.5 Q
(let handler) 275.85 232.62 T
1 11 Q
( local declaration, and the other) 338.55 232.62 T
(is established by the) 99.65 218.62 T
4 9.5 Q
(exception) 200.53 218.62 T
1 11 Q
( clause in the) 251.83 218.62 T
4 9.5 Q
( block) 315.09 218.62 T
1 11 Q
(contr) 354.99 218.62 T
(ol str) 380.02 218.62 T
(uctur) 404.48 218.62 T
(e. When a) 430.36 218.62 T
-0.09 (handler established by) 99.65 204.62 P
4 9.5 Q
-0.19 (let handler) 212.23 204.62 P
1 11 Q
-0.09 ( matches, contr) 274.74 204.62 P
-0.09 (ol passes to the function speci-) 347.85 204.62 P
(\336ed in the) 99.65 190.62 T
4 9.5 Q
(let handler) 151.4 190.62 T
1 11 Q
( clause as if the signaler just executed a normal function) 214.1 190.62 T
(call.) 99.65 176.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "156" 158
%%Page: "157" 159
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 451.91 702.62 T
2 11 Q
(157) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(The handler function r) 126.65 665.62 T
(eceives the condition being signaled, and a next han-) 236.08 665.62 T
(dler function. The handler now has several options at its disposal. It may decline) 99.65 651.62 T
(to handle the condition by calling the next handler function. It may handle the) 99.65 637.62 T
-0.23 (condition by executing some non-local exit. It may handle the condition by signal-) 99.65 623.62 P
-0.4 (ing another condition, possibly a r) 99.65 609.62 P
-0.4 (estart. Finally) 263.98 609.62 P
-0.4 (, the handler may simply r) 328.54 609.62 P
-0.4 (eturn to) 455.12 609.62 P
(the signaler) 99.65 595.62 T
(, pr) 155.54 595.62 T
(oviding any r) 171.8 595.62 T
(eturn values the signaler expects. If the handler) 237.32 595.62 T
-0.22 (decides to r) 99.65 581.62 P
-0.22 (eturn, it should do so in the framework of a well-understood r) 155.18 581.62 P
-0.22 (ecovery) 455.01 581.62 P
(pr) 99.65 567.62 T
(otocol.) 110.41 567.62 T
(If the signaler never expects to have a handler r) 126.65 553.62 T
(eturn, then it should use) 356.65 553.62 T
4 9.5 Q
(error) 99.65 539.62 T
1 11 Q
( to signal the condition. Should a handler ever r) 128.15 539.62 T
(eturn contr) 359.31 539.62 T
(ol to the) 413.32 539.62 T
4 9.5 Q
(error) 455.63 539.62 T
1 11 Q
(function,) 99.65 525.62 T
4 9.5 Q
(error) 145.93 525.62 T
1 11 Q
( will immediately enter the debugger) 174.43 525.62 T
(.) 354.31 525.62 T
(If the signaler anticipates that a handler might r) 126.65 511.62 T
(eturn, then the signaler) 357.96 511.62 T
(should use the) 99.65 497.62 T
4 9.5 Q
(signal) 173.35 497.62 T
1 11 Q
( function to signal the condition. Should a handler ever) 207.55 497.62 T
(r) 99.65 483.62 T
(eturn contr) 103.79 483.62 T
(ol to the) 157.8 483.62 T
4 9.5 Q
(signal) 200.11 483.62 T
1 11 Q
( function, the values r) 234.31 483.62 T
(eturned by) 339.72 483.62 T
4 9.5 Q
(signal) 395.65 483.62 T
1 11 Q
( will be the) 429.85 483.62 T
(values r) 99.65 469.62 T
(eturned by the handler) 138.03 469.62 T
(. The caller of the) 248.98 469.62 T
4 9.5 Q
(signal) 335.22 469.62 T
1 11 Q
( function should antici-) 369.42 469.62 T
(pate this happening, and deal with the r) 99.65 455.62 T
(eturn values in accor) 294.06 455.62 T
(dance with the) 395.05 455.62 T
(r) 99.65 441.62 T
(ecovery pr) 103.79 441.62 T
(otocol for that condition.) 155.41 441.62 T
(If the signaler would like to de\336ne a simple way to r) 126.65 427.62 T
(ecover fr) 380.34 427.62 T
(om the condi-) 422.89 427.62 T
-0.43 (tion being signaled, then) 99.65 413.62 P
4 9.5 Q
-0.89 (cerror) 220.68 413.62 P
1 11 Q
-0.43 ( is the appr) 254.88 413.62 P
-0.43 (opriate function to use. Befor) 307.83 413.62 P
-0.43 (e actually) 447.12 413.62 P
(signaling the speci\336ed condition,) 99.65 399.62 T
4 9.5 Q
(cerror) 263.14 399.62 T
1 11 Q
( establishes a r) 297.34 399.62 T
(estart handler) 367.74 399.62 T
(, which, if) 434.47 399.62 T
(invoked, causes) 99.65 385.62 T
4 9.5 Q
(cerror) 179.44 385.62 T
1 11 Q
( to r) 213.64 385.62 T
(eturn) 232.88 385.62 T
4 9.5 Q
(#f) 261.87 385.62 T
1 11 Q
(. If the r) 273.27 385.62 T
(estart handler is never invoked,) 311.04 385.62 T
4 9.5 Q
(cer-) 467.62 385.62 T
(ror) 99.65 371.62 T
1 11 Q
( is guaranteed not to r) 116.75 371.62 T
(eturn. The caller of) 223.44 371.62 T
4 9.5 Q
(cerror) 317.9 371.62 T
1 11 Q
( should anticipate the use of) 352.11 371.62 T
(the r) 99.65 357.62 T
(estart, and perform any r) 121.8 357.62 T
(ecovery fr) 243.24 357.62 T
(om the condition detailed in the r) 291.91 357.62 T
(estart) 454.27 357.62 T
(description ar) 99.65 343.62 T
(gument to the) 166.93 343.62 T
4 9.5 Q
(cerror) 237.75 343.62 T
1 11 Q
( function.) 271.95 343.62 T
-0.01 (The) 126.65 329.62 P
4 9.5 Q
-0.03 (break) 147.8 329.62 P
1 11 Q
-0.01 ( function does not actually signal the condition pr) 176.3 329.62 P
-0.01 (ovided; it estab-) 417.74 329.62 P
(lishes a r) 99.65 315.62 T
(estart and then enters the debugger) 142.2 315.62 T
(. The debugger might invoke the) 313.71 315.62 T
(r) 99.65 301.62 T
(estart, in which case) 103.79 301.62 T
4 9.5 Q
(break) 204.48 301.62 T
1 11 Q
( r) 232.98 301.62 T
(eturns) 239.88 301.62 T
4 9.5 Q
(#f) 273.52 301.62 T
1 11 Q
(, and pr) 284.92 301.62 T
(ogram execution continues. This) 322.55 301.62 T
(behavior is handy for inserting br) 99.65 287.62 T
(eakpoints into code. This behavior is similar to) 262.86 287.62 T
4 9.5 Q
(cerror) 99.65 273.62 T
1 11 Q
(, except that) 133.03 273.62 T
4 9.5 Q
(break) 194.4 273.62 T
1 11 Q
( does not actually signal a condition.) 222.9 273.62 T
(If) 126.65 259.62 T
4 9.5 Q
(signal) 136.77 259.62 T
1 11 Q
(,) 170.97 259.62 T
4 9.5 Q
(error) 176.47 259.62 T
1 11 Q
(, or) 204.15 259.62 T
4 9.5 Q
(cerror) 222.76 259.62 T
1 11 Q
( cannot \336nd an applicable handler) 256.95 259.62 T
(, they call the) 422.25 259.62 T
4 9.5 Q
(default-handler) 99.65 245.62 T
1 11 Q
( generic function with the condition. What happens next) 185.15 245.62 T
(depends on the class of the condition. If the condition is a) 99.65 231.62 T
4 9.5 Q
(<serious-condition>) 381.37 231.62 T
1 11 Q
(,) 489.67 231.62 T
4 9.5 Q
(default-handler) 99.65 217.62 T
1 11 Q
( enters the debugger) 185.15 217.62 T
(. If the condition is a) 283.93 217.62 T
4 9.5 Q
(<restart>) 385.58 217.62 T
1 11 Q
(,) 436.88 217.62 T
4 9.5 Q
(default-) 442.38 217.62 T
(handler) 99.65 203.62 T
1 11 Q
( signals an err) 139.55 203.62 T
(or) 207.21 203.62 T
(, because a r) 216.75 203.62 T
(estart should not be invoked if it will not be) 275.7 203.62 T
(handled. If the condition is a) 99.65 189.62 T
4 9.5 Q
(<warning>) 241.51 189.62 T
1 11 Q
(,) 292.82 189.62 T
4 9.5 Q
( default-handler) 295.57 189.62 T
1 11 Q
(prints a warning) 392.46 189.62 T
(message, and then r) 99.65 175.62 T
(eturns) 196.27 175.62 T
4 9.5 Q
(#f) 229.92 175.62 T
1 11 Q
(. If the condition is none of those classes, but is a) 241.32 175.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "157" 159
%%Page: "158" 160
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(158) 63.65 702.62 T
0 9.5 Q
(10.2 Signaling conditions) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 F
0 X
-0.48 (<condition>,) 99.65 665.62 P
1 11 Q
-0.23 ( then) 168.05 665.62 P
4 9.5 Q
-0.48 ( default-handler) 192.22 665.62 P
1 11 Q
-0.23 (r) 288.15 665.62 P
-0.23 (eturns an empty sequence. Y) 292.3 665.62 P
-0.23 (ou ar) 430.09 665.62 P
-0.23 (e fr) 454.89 665.62 P
-0.23 (ee to) 470.48 665.62 P
(de\336ne new methods for) 99.65 651.62 T
4 9.5 Q
(default-handler) 218.18 651.62 T
1 11 Q
( to customize the behavior for some) 303.68 651.62 T
(class or classes of conditions when no applicable handler is found.) 99.65 637.62 T
(Establishing a handler with the) 126.65 623.62 T
4 9.5 Q
(exception) 281.1 623.62 T
1 11 Q
(clause of) 335.15 623.62 T
4 9.5 Q
(block) 380.47 623.62 T
1 11 Q
( is similar to) 408.97 623.62 T
-0.16 (establishing a handler with the) 99.65 609.62 P
4 9.5 Q
-0.33 (let handler) 251.86 609.62 P
1 11 Q
-0.16 ( local declaration, except that instead) 314.23 609.62 P
-0.3 (of having to de\336ne your own handler function, the) 99.65 595.62 P
4 9.5 Q
-0.63 (exception) 346.4 595.62 P
1 11 Q
-0.3 ( clause takes a body) 397.7 595.62 P
(that is used instead, and the body is executed after a non-local exit outside of the) 99.65 581.62 T
-0.08 (block. Among other things, this means that the handlers established by the) 99.65 567.62 P
4 9.5 Q
-0.17 (block) 464.48 567.62 P
1 11 Q
(ar) 99.65 553.62 T
(e not in for) 109.29 553.62 T
(ce during execution of the) 162.23 553.62 T
4 9.5 Q
(exception) 291.4 553.62 T
1 11 Q
( clause\325s body) 342.7 553.62 T
(. The) 409.78 553.62 T
4 9.5 Q
( exception) 433.69 553.62 T
1 11 Q
(clause of) 99.65 539.62 T
4 9.5 Q
(block) 144.97 539.62 T
1 11 Q
( is best used to establish simple handlers for simple situations) 173.47 539.62 T
(wher) 99.65 525.62 T
(e the immediate context ar) 124.64 525.62 T
(ound the signaler is not necessary to handle the) 253.4 525.62 T
(condition. The) 99.65 511.62 T
4 9.5 Q
(let handler) 172.72 511.62 T
1 11 Q
( local declaration is best used in mor) 235.42 511.62 T
(e complex situa-) 412.3 511.62 T
(tions wher) 99.65 497.62 T
(e the immediate context ar) 151.25 497.62 T
(ound the signaler is of inter) 280 497.62 T
(est.) 413.61 497.62 T
(The) 126.65 483.62 T
4 9.5 Q
(signal) 147.81 483.62 T
1 11 Q
(,) 182.01 483.62 T
4 9.5 Q
( error) 184.76 483.62 T
1 11 Q
(,) 218.15 483.62 T
4 9.5 Q
( cerror) 220.9 483.62 T
1 11 Q
(, and) 259.98 483.62 T
4 9.5 Q
( break) 284.11 483.62 T
(f) 321.05 483.62 T
1 11 Q
(unctions take either a condition as) 326.76 483.62 T
(an ar) 99.65 469.62 T
(gument, or a string and one or mor) 123.95 469.62 T
(e additional ar) 294.35 469.62 T
(guments \050in addition,) 364.8 469.62 T
4 9.5 Q
(cer-) 472.79 469.62 T
(ror) 99.65 455.62 T
1 11 Q
( takes a separate r) 116.75 455.62 T
(estart description ar) 203.27 455.62 T
(gument\051. If a condition is pr) 300.26 455.62 T
(ovided, exe-) 436.05 455.62 T
(cution pr) 99.65 441.62 T
(oceeds as described above. If a string and optional ar) 143.87 441.62 T
(guments ar) 400.54 441.62 T
(e) 455.32 441.62 T
(pr) 99.65 427.62 T
(ovided, then these function cr) 110.41 427.62 T
(eate an appr) 254.95 427.62 T
(opriate condition instances for you) 314.84 427.62 T
(\050) 99.65 413.62 T
4 9.5 Q
(<simple-warning>) 103.31 413.62 T
1 11 Q
(,) 194.51 413.62 T
4 9.5 Q
( <simple-error>) 197.26 413.62 T
1 11 Q
(,) 282.76 413.62 T
4 9.5 Q
( <simple-error>) 285.51 413.62 T
1 11 Q
( with a r) 371.01 413.62 T
(estart of) 411.27 413.62 T
4 9.5 Q
( <sim-) 450.64 413.62 T
(ple-restart>) 99.65 399.62 T
1 11 Q
(,) 168.05 399.62 T
(and) 176.5 399.62 T
4 9.5 Q
( <simple-warning>) 195.12 399.62 T
1 11 Q
( with a r) 292.02 399.62 T
(estart of) 332.28 399.62 T
4 9.5 Q
(<simple-restart>) 374.4 399.62 T
1 11 Q
(,) 465.6 399.62 T
(r) 99.65 385.62 T
(espectively\051, and then pr) 103.79 385.62 T
(oceed as described above.) 223.78 385.62 T
3 13 Q
(10.2.3  signaling error conditions with) 99.65 354.29 T
4 F
(parse-integer) 293.97 354.29 T
1 11 Q
(In this section, we de\336ne a set of err) 99.65 334.62 T
(or conditions, and modify) 273.58 334.62 T
4 9.5 Q
(parse-integer) 402.8 334.62 T
1 11 Q
( to) 476.9 334.62 T
(signal those conditions rather than r) 99.65 320.62 T
(eturn special values to indicate an err) 274.97 320.62 T
(or) 456.53 320.62 T
(. The) 466.07 320.62 T
(point of using the condition system is that it allows us to stop execution at the) 99.65 306.62 T
-0.07 (point of err) 99.65 292.62 P
-0.07 (or) 154.24 292.62 P
-0.07 (, and indicate to the user the natur) 163.78 292.62 P
-0.07 (e of the pr) 329.97 292.62 P
-0.07 (oblem encounter) 378.96 292.62 P
-0.07 (ed in a) 460.51 292.62 P
-0.28 (str) 99.65 278.62 P
-0.28 (uctur) 112.15 278.62 P
-0.28 (ed way) 138.04 278.62 P
-0.28 (. Later on in this chapter) 172.07 278.62 P
-0.28 (, we shall show how the pr) 288.22 278.62 P
-0.28 (ogram can of) 417.03 278.62 P
-0.28 (fer) 479.9 278.62 P
(the user ways to r) 99.65 264.62 T
(ecover fr) 186.01 264.62 T
(om the pr) 228.56 264.62 T
(oblem.) 275.79 264.62 T
(In the following example, we de\336ne the class) 126.65 250.62 T
4 9.5 Q
(<integer-parse-error>) 347.9 250.62 T
1 11 Q
(,) 467.6 250.62 T
(which r) 99.65 236.62 T
(epr) 136.61 236.62 T
(esents general integer parsing pr) 152.63 236.62 T
(oblems. Note that we de\336ne condi-) 311.38 236.62 T
(tions in the same way that we de\336ne other classes in Dylan, with) 99.65 222.62 T
4 9.5 Q
(def) 416.79 222.62 T
(ine class) 433.89 222.62 T
1 11 Q
(.) 485.19 222.62 T
4 9 Q
(def) 99.65 201.95 T
(ine class <integer-parse-error> \050<error>\051) 115.85 201.95 T
(slot bad-string :: <string>, required-init-keyword: bad-string:;) 110.45 190.95 T
(end;) 99.65 179.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "158" 160
%%Page: "159" 161
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 451.91 702.62 T
2 11 Q
(159) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
-0.4 (The) 99.65 665.62 P
4 9.5 Q
-0.82 (bad-string) 120.42 665.62 P
1 11 Q
-0.4 ( slot is used to hold the string that cannot be parsed pr) 177.42 665.62 P
-0.4 (operly) 436.85 665.62 P
-0.4 (. This) 467.18 665.62 P
(slot may be examined by the handler of the condition after it is signaled.) 99.65 651.62 T
(In the following example, we de\336ne a) 126.65 637.62 T
4 9.5 Q
(report) 312.48 637.62 T
1 11 Q
( method on) 346.68 637.62 T
4 9.5 Q
(<integer-parse-) 405.04 637.62 T
(error>) 99.65 623.62 T
1 11 Q
(:) 133.85 623.62 T
4 9 Q
(def) 99.65 602.95 T
(ine method report \050cond :: <integer-parse-error>, where\051) 115.85 602.95 T
(next-method \050\051;) 110.45 591.95 T
(format \050where, "Error parsing integer from %=: ", bad-string \050cond\051\051;) 110.45 580.95 T
(end;) 99.65 569.95 T
1 11 Q
-1.19 (The) 99.65 549.62 P
4 9.5 Q
-2.46 ( report) 118.06 549.62 P
1 11 Q
-1.19 (method for) 158.75 549.62 P
4 9.5 Q
-2.46 ( <integer-parse-error>) 212.02 549.62 P
1 11 Q
-1.19 (displays a suitable err) 338.2 549.62 P
-1.19 (or message) 440.97 549.62 P
(based the information stor) 99.65 535.62 T
(ed in the condition instance.) 227.82 535.62 T
(Next, we de\336ne a speci\336c condition that will be signaled when a sign char-) 126.65 521.62 T
(acter \050) 99.65 507.62 T
4 9.5 Q
(-) 129.65 507.62 T
1 11 Q
( or) 135.35 507.62 T
4 9.5 Q
(+) 151.2 507.62 T
1 11 Q
(\051 is found in an incorr) 156.9 507.62 T
(ect position in the string being parsed:) 262.09 507.62 T
4 9 Q
(def) 99.65 486.95 T
(ine class <sign-in-illegal-position> \050<integer-parse-error>\051) 115.85 486.95 T
(end;) 99.65 475.95 T
1 11 Q
(The following) 99.65 455.62 T
4 9.5 Q
(report) 170.53 455.62 T
1 11 Q
( method for) 204.73 455.62 T
4 9.5 Q
(<sign-in-illegal-position>) 264.69 455.62 T
1 11 Q
( displays addi-) 412.89 455.62 T
(tional information after the err) 99.65 441.62 T
(or message displayed by the method on the super-) 247.95 441.62 T
(class.) 99.65 427.62 T
4 9 Q
(def) 99.65 406.95 T
(ine method report \050cond :: <sign-in-illegal-position>, w) 115.85 406.95 T
4 9.5 Q
(here) 418.25 406.95 T
4 9 Q
(\051) 441.05 406.95 T
(next-method \050\051;) 110.45 395.95 T
(format \050where, "Sign in illegal position."\051;) 110.45 384.95 T
(end;) 99.65 373.95 T
1 11 Q
(Next, we de\336ne the speci\336c condition which is signaled when the parser encoun-) 99.65 353.62 T
(ters an unexpected character in the string. A slot is de\336ned to hold the illegal) 99.65 339.62 T
(character) 99.65 325.62 T
(.) 143.55 325.62 T
4 9 Q
(def) 99.65 304.95 T
(ine class <illegal-character> \050<integer-parse-error>\051) 115.85 304.95 T
(slot bad-char :: <character>, required-init-keyword: bad-char:;) 110.45 293.95 T
(end;) 99.65 282.95 T
(def) 99.65 263.95 T
(ine method report \050cond :: <illegal-character>, where\051) 115.85 263.95 T
(next-method \050\051;) 110.45 252.95 T
(format \050where, "Illegal character %=.", bad-char \050cond\051\051;) 110.45 241.95 T
(end;) 99.65 230.95 T
1 11 Q
(The) 99.65 210.62 T
4 9.5 Q
(report) 120.81 210.62 T
1 11 Q
( method for) 155.01 210.62 T
4 9.5 Q
(<illegal-character>) 214.97 210.62 T
1 11 Q
( is similar to the method for) 323.27 210.62 T
4 9.5 Q
(<sign-) 460.77 210.62 T
(in-illegal-position>) 99.65 196.62 T
1 11 Q
(; it r) 213.65 196.62 T
(ounds out the set of condition classes we want to sig-) 232.83 196.62 T
(nal in) 99.65 182.62 T
4 9.5 Q
(parse-integer) 129.85 182.62 T
1 11 Q
(.) 203.14 182.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "159" 161
%%Page: "160" 162
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(160) 63.65 702.62 T
0 9.5 Q
(10.2 Signaling conditions) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
-0.01 (Finally) 126.65 665.62 P
-0.01 (, we add a) 159.16 665.62 P
4 9.5 Q
-0.02 (report) 211.77 665.62 P
1 11 Q
-0.01 ( method to) 245.97 665.62 P
4 9.5 Q
-0.02 (<condition>) 301.48 665.62 P
1 11 Q
-0.01 ( so that pr) 364.18 665.62 P
-0.01 (ogrammers who) 412.91 665.62 P
(write) 99.65 651.62 T
4 9.5 Q
(report) 127.97 651.62 T
1 11 Q
( methods do not have to be concerned about whether they may call) 162.17 651.62 T
4 9.5 Q
(next-method) 99.65 637.62 T
1 11 Q
( or not. \050By doing this, we use the same technique that the Dylan) 162.35 637.62 T
(does in the initialize pr) 99.65 623.62 T
(otocol.\051.) 211.19 623.62 T
4 9 Q
(def) 99.65 602.95 T
(ine method report \050cond :: <condition>, where\051) 115.85 602.95 T
(end;) 99.65 591.95 T
1 11 Q
(Next, we r) 99.65 571.62 T
(ede\336ne) 150.16 571.62 T
4 9.5 Q
(parse-integer) 188.49 571.62 T
1 11 Q
( so that it cr) 262.6 571.62 T
(eates instances of these conditions) 319.16 571.62 T
(and signals them when parsing pr) 99.65 557.62 T
(oblems ar) 265.58 557.62 T
(e encounter) 312.92 557.62 T
(ed.) 369.53 557.62 T
6 9 Q
(// This is a very simple integer parser, which signals <integer-parse-error>) 99.65 536.95 T
(// conditions when parsing problems are encountered.) 99.65 525.95 T
4 F
(def) 99.65 514.95 T
(ine method parse-integer) 115.85 514.95 T
(\050integer-string :: <string>, #key delimiter = ".", start = 0\051 =>) 121.25 503.95 T
( \050integer :: <integer>, sign, end-index :: <integer>\051;) 121.25 492.95 T
(block \050return\051) 110.45 481.95 T
(let length = size \050integer-string\051;) 121.25 470.95 T
(let result = #f;) 121.25 459.95 T
(let sign = #f;) 121.25 448.95 T
(let end-index = start;) 121.25 437.95 T
(for \050index from start below length\051) 121.25 426.95 T
(let char = integer-string[index];) 132.05 415.95 T
(case) 132.05 404.95 T
6 F
(// Is the character a digit?) 142.85 393.95 T
4 F
(digit? \050char\051 =>) 142.85 382.95 T
(let value = position \050char, $digits\051;) 153.65 371.95 T
(if \050result\051) 153.65 360.95 T
6 F
(// If we have already started to generate the integer) 175.25 349.95 T
(// shift the result to make room for the next digit.) 175.25 338.95 T
4 F
(result := \050result * 10\051 + value;) 175.25 327.95 T
(else) 164.45 316.95 T
(result := value;) 175.25 305.95 T
(end;) 153.65 294.95 T
6 F
(// Is the character whitespace?) 142.85 283.95 T
4 F
(whitespace? \050char\051 => #f;) 142.85 272.95 T
6 F
(// Is the character a sign?) 142.85 261.95 T
4 F
(sign? \050char\051 => if \050result | sign\051) 142.85 250.95 T
(error \050make \050<sign-in-illegal-position>,) 250.85 239.95 T
(bad-string: integer-string\051\051;) 288.65 228.95 T
(else) 229.25 217.95 T
(sign := char;) 250.85 206.95 T
(end;) 229.25 195.95 T
6 F
(// Is the character the specif) 142.85 184.95 T
(ied character to stop at when reached?) 304.85 184.95 T
4 F
(char == delimiter => return \050values \050result, sign, index\051\051;) 142.85 173.95 T
(otherwise => error \050make \050<illegal-character>, bad-char: char,) 142.85 162.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "160" 162
%%Page: "161" 163
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 451.91 702.62 T
2 11 Q
(161) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(bad-string: integer-string\051\051;) 283.25 666.95 T
(end case;) 132.05 655.95 T
(f) 121.25 644.95 T
(inally return \050values \050result, sign, length\051\051;) 126.65 644.95 T
(end for;) 121.25 633.95 T
(end block;) 110.45 622.95 T
(end method parse-integer;) 99.65 611.95 T
1 11 Q
(Using this de\336nition, we have solved some of the pr) 99.65 591.62 T
(oblems with the pr) 352.63 591.62 T
(evious) 444.19 591.62 T
(appr) 99.65 577.62 T
(oach. First, callers do not need to check the r) 122.52 577.62 T
(eturn value to see if ther) 337.47 577.62 T
(e is an) 455.33 577.62 T
(err) 99.65 563.62 T
(or string instead of an integer) 113.41 563.62 T
(. Because we use) 256.11 563.62 T
4 9.5 Q
(error) 339.81 563.62 T
1 11 Q
( to signal the condition,) 368.31 563.62 T
(we ensur) 99.65 549.62 T
(e that calls to) 143.96 549.62 T
4 9.5 Q
(parse-integer) 210.34 549.62 T
1 11 Q
( will not r) 284.44 549.62 T
(eturn via normal means if the) 331.61 549.62 T
(string pr) 99.65 535.62 T
(ovided is incorr) 141.47 535.62 T
(ect. Second, because we ar) 217.95 535.62 T
(e using the standar) 345.64 535.62 T
(d Dylan) 437.95 535.62 T
(condition pr) 99.65 521.62 T
(otocol, r) 159.57 521.62 T
(eaders of the code will mor) 198.9 521.62 T
(e easily understand the parts of) 330.87 521.62 T
(the parser that deal with err) 99.65 507.62 T
(ors. Thir) 235.28 507.62 T
(d, we can now str) 276.29 507.62 T
(ongly type the r) 361.96 507.62 T
(eturn val-) 439.04 507.62 T
(ues, which will aid in both performance and code clarity) 99.65 493.62 T
(. Fourth, we can captur) 372.78 493.62 T
(e) 484.96 493.62 T
(some inter) 99.65 479.62 T
(esting information about the err) 150.65 479.62 T
(or in the condition object, thus at least) 305.74 479.62 T
(pr) 99.65 465.62 T
(oviding better err) 110.41 465.62 T
(or messages for the user) 195.67 465.62 T
(. In addition, we ar) 312.24 465.62 T
(e giving extra) 404.28 465.62 T
(information to handlers in a useful form that they might use to determine if, for) 99.65 451.62 T
(example, they ar) 99.65 437.62 T
(e able to handle a particular condition. Finally) 180.16 437.62 T
(, as we shall see in) 402.8 437.62 T
(the next section, the caller of) 99.65 423.62 T
4 9.5 Q
( parse-integer) 237.68 423.62 T
1 11 Q
(does not need to do anything spe-) 323.18 423.62 T
(cial to pass on the multiple values r) 99.65 409.62 T
(eturned by) 271.42 409.62 T
4 9.5 Q
( parse-integer) 324.6 409.62 T
1 11 Q
(in the normal) 410.1 409.62 T
(case.) 99.65 395.62 T
3 15 Q
(10.3  Establishing handlers) 99.65 355.95 T
1 11 Q
(If we now call) 99.65 335.62 T
4 9.5 Q
(parse-integer) 170.83 335.62 T
1 11 Q
( on a string that does not contain a pr) 244.93 335.62 T
(oper integer) 425.87 335.62 T
(,) 484.22 335.62 T
(an err) 99.65 321.62 T
(or will be signaled, but ther) 128.06 321.62 T
(e is likely to be no handler for it. In those situa-) 261.82 321.62 T
-0.15 (tions, the debugger is enter) 99.65 307.62 P
-0.15 (ed. After describing the situation in some implementa-) 231 307.62 P
(tion-dependent way) 99.65 293.62 T
(, the debugger will then pr) 197.07 293.62 T
(ovide the user with one or mor) 326.58 293.62 T
(e) 476.92 293.62 T
(options. Since we have not pr) 99.65 279.62 T
(ovided any suggested way to continue, the debug-) 242.74 279.62 T
-0.18 (ger) 99.65 265.62 P
-0.18 (\325s options ar) 116.19 265.62 P
-0.18 (e limited indeed. Per) 175.17 265.62 P
-0.18 (haps the only option is to abort the execution) 275.42 265.62 P
(of the pr) 99.65 251.62 T
(ogram. Handlers and r) 140.83 251.62 T
(estarts pr) 251.54 251.62 T
(ovide a way to pr) 296.66 251.62 T
(ovide mor) 381.71 251.62 T
(e options.) 431.74 251.62 T
3 13 Q
(10.3.1  The) 99.65 220.29 T
4 F
(exception) 157.13 220.29 T
3 F
( clause for) 227.33 220.29 T
4 F
(block) 283.62 220.29 T
1 11 Q
(W) 99.65 200.62 T
(e now r) 109.64 200.62 T
(ede\336ne the) 146.13 200.62 T
4 9.5 Q
(interactive-read-integer) 202.48 200.62 T
1 11 Q
( method to deal with integer) 339.28 200.62 T
(parsing err) 99.65 186.62 T
(ors. Like the pr) 153 186.62 T
(evious implementation, if a user types an illegal num-) 226.34 186.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "161" 163
%%Page: "162" 164
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(162) 63.65 702.62 T
0 9.5 Q
(10.3 Establishing handlers) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
-0 (ber) 99.65 665.62 P
-0 (, the method will pr) 114.53 665.62 P
-0 (ompt the user to enter an integer) 210.76 665.62 P
-0 (. W) 369.07 665.62 P
-0 (e supply a handler via) 384.55 665.62 P
(the) 99.65 651.62 T
4 9.5 Q
(exception) 117.65 651.62 T
1 11 Q
( clause to) 168.96 651.62 T
4 9.5 Q
(block) 216.95 651.62 T
1 11 Q
( to achieve this behavior) 245.45 651.62 T
(.) 362.84 651.62 T
4 9 Q
(def) 99.65 630.95 T
(ine method interactive-read-integer \050where,) 115.85 630.95 T
(#key prompt = "Enter a number: "\051) 315.65 619.95 T
(block \050return\051) 110.45 608.95 T
(while \050#t\051) 121.25 597.95 T
(block \050\051) 132.05 586.95 T
(format \050where, "\134n%s", prompt\051;) 153.65 575.95 T
(return \050parse-integer \050read-line \050where\051\051) 153.65 564.95 T
(exception \050cond :: <integer-parse-error>\051) 142.85 553.95 T
(report \050cond, where\051;) 153.65 542.95 T
(end;) 132.05 531.95 T
(end;) 121.25 520.95 T
(end;) 110.45 509.95 T
(end;) 99.65 498.95 T
1 11 Q
-0.27 (The \336rst block established is used to pr) 99.65 478.62 P
-0.27 (ovide a way to exit the loop when a pr) 287.02 478.62 P
-0.27 (oper) 470.94 478.62 P
-0.24 (integer is enter) 99.65 464.62 P
-0.24 (ed. The) 171.39 464.62 P
4 9.5 Q
-0.5 (while) 209.57 464.62 P
1 11 Q
-0.24 ( loop will continue to iterate until we r) 238.07 464.62 P
-0.24 (eturn fr) 423.1 464.62 P
-0.24 (om the) 459.65 464.62 P
(outer block \050with a valid integer\051. The inner block is used to establish a handler) 99.65 450.62 T
-0.24 (for the) 99.65 436.62 P
4 9.5 Q
-0.5 (<integer-parse-error>) 133.93 436.62 P
1 11 Q
-0.24 ( condition \050and all its subclasses\051. The body of the) 253.63 436.62 P
(inner block simply pr) 99.65 422.62 T
(ompts the user for input, and then r) 204.07 422.62 T
(eturns fr) 377.7 422.62 T
(om the outer) 419.15 422.62 T
(block the integer parsed fr) 99.65 408.62 T
(om the string r) 227.3 408.62 T
(ead fr) 298.99 408.62 T
(om the interactive str) 327.04 408.62 T
(eam ar) 430.12 408.62 T
(gu-) 463 408.62 T
(ment. The) 99.65 394.62 T
4 9.5 Q
(read-line) 151.28 394.62 T
1 11 Q
( method r) 202.58 394.62 T
(eads a line of text fr) 249.93 394.62 T
(om the user) 345 394.62 T
(, and r) 401.57 394.62 T
(eturns that) 432.59 394.62 T
(text in the form of a string. This string is then passed as the ar) 99.65 380.62 T
(gument to the) 398.43 380.62 T
4 9.5 Q
(parse-integer) 99.65 366.62 T
1 11 Q
( method. If the user typed something that could not be parsed as) 173.75 366.62 T
(an integer) 99.65 352.62 T
(, execution inside the) 147.67 352.62 T
4 9.5 Q
(parse-integer) 253.07 352.62 T
1 11 Q
( method stops, and the) 327.17 352.62 T
4 9.5 Q
( error) 438.02 352.62 T
1 11 Q
(function will perform the sear) 99.65 338.62 T
(ch for a handler described in Section 10.2.2, page) 244.99 338.62 T
(156. The sear) 99.65 324.62 T
(ch will \336nd the handler established by the inner block exception) 162.39 324.62 T
(clause, and contr) 99.65 310.62 T
(ol will transfer to the body of the exception clause, which is exe-) 181.7 310.62 T
(cuted outside the boundary of the inner block. The body of the exception clause) 99.65 296.62 T
(will print a suitable err) 99.65 282.62 T
(or message based on the particular pr) 210.97 282.62 T
(oblem the integer) 393.48 282.62 T
-0.16 (parser encounter) 99.65 268.62 P
-0.16 (ed, and then the) 181.57 268.62 P
4 9.5 Q
-0.33 ( while) 259.62 268.62 P
1 11 Q
-0.16 (loop will cause the user to be pr) 298.85 268.62 P
-0.16 (ompted.) 452.4 268.62 P
-0.2 (Since the) 99.65 254.62 P
4 9.5 Q
-0.41 (while) 145.54 254.62 P
1 11 Q
-0.2 ( loop establishes the inner block \050and thus the handler\051, any subse-) 174.04 254.62 P
(quent user input err) 99.65 240.62 T
(ors will also be caught by the handler) 197.05 240.62 T
(, and the user will once) 378.42 240.62 T
(again have an opportunity to corr) 99.65 226.62 T
(ectly enter an integer) 263.48 226.62 T
(.) 364.93 226.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "162" 164
%%Page: "163" 165
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 451.91 702.62 T
2 11 Q
(163) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(10.3.2  The) 99.65 664.29 T
4 F
(let handler) 157.13 664.29 T
3 F
( local declaration) 242.93 664.29 T
1 11 Q
(While the exception clause of block gives us a mor) 99.65 644.62 T
(e str) 343.87 644.62 T
(uctur) 364.4 644.62 T
(ed way to handle) 390.28 644.62 T
(err) 99.65 630.62 T
(ors outside the context in which the err) 113.41 630.62 T
(or occurr) 303.1 630.62 T
(ed, it is sometimes useful to) 347.1 630.62 T
(invoke handlers inside the context wher) 99.65 616.62 T
(e the err) 294.23 616.62 T
(or occurr) 334.01 616.62 T
(ed. For example, it) 378.01 616.62 T
-0.11 (might be nice to have the option to ignor) 99.65 602.62 P
-0.11 (e illegal characters or signs and continue) 296.42 602.62 P
(parsing \050as we did in the initial design of) 99.65 588.62 T
4 9.5 Q
( parse-integer) 298.59 588.62 T
1 11 Q
(\051, or per) 378.39 588.62 T
(haps simply) 416.68 588.62 T
-0.14 (r) 99.65 574.62 P
-0.14 (eturn zer) 103.79 574.62 P
-0.14 (o or some other value when an err) 147.55 574.62 P
-0.14 (or occurs. W) 313.15 574.62 P
-0.14 (e would also like to have) 372.87 574.62 P
(the option of dealing with err) 99.65 560.62 T
(ors automatically) 242.67 560.62 T
(, since ther) 325.84 560.62 T
(e may be no user sup-) 377.92 560.62 T
-0.15 (plying these integer strings, but instead they might be coming fr) 99.65 546.62 P
-0.15 (om a non-interac-) 409.91 546.62 P
(tive sour) 99.65 532.62 T
(ce such as \336le, a network, or a database, and ther) 142.12 532.62 T
(e may be no user) 378.99 532.62 T
-0.4 (available to ask questions about the data. In the next section, we explor) 99.65 518.62 P
-0.4 (e the use of) 439.49 518.62 P
4 9.5 Q
(let handler) 99.65 504.62 T
1 11 Q
( to both establish err) 162.35 504.62 T
(or handlers and r) 261.35 504.62 T
(estarts that operate in the con-) 345.22 504.62 T
(text of the err) 99.65 490.62 T
(or) 164.7 490.62 T
(, rather than r) 174.24 490.62 T
(ecovering after the err) 240.72 490.62 T
(or) 348.06 490.62 T
(.) 357.6 490.62 T
3 15 Q
(10.4  Using) 99.65 450.95 T
4 F
(let handler) 168.02 450.95 T
3 F
( to implement a recovery protocol) 267.02 450.95 T
1 11 Q
(Ther) 99.65 430.62 T
(e could be many choices of how to r) 122.21 430.62 T
(ecover fr) 296.31 430.62 T
(om an err) 338.85 430.62 T
(or) 385.74 430.62 T
(. It would be nice to) 395.27 430.62 T
(have a way to determine what those choices ar) 99.65 416.62 T
(e, and to either pr) 326.24 416.62 T
(esent those) 412.3 416.62 T
(options to the user \050for interactive pr) 99.65 402.62 T
(ograms\051, or per) 278.28 402.62 T
(haps to pr) 352.91 402.62 T
(ogrammatically) 401.94 402.62 T
(choose an option that makes sense. Dylan pr) 99.65 388.62 T
(ovides the notion of a) 315.69 388.62 T
2 F
(recovery pro-) 423.54 388.62 T
(tocol) 99.65 374.62 T
1 F
( for a condition \321 a formal technique for handling and r) 124.09 374.62 T
(ecovering fr) 397.73 374.62 T
(om) 455.99 374.62 T
(exceptional situations. In this section, we examine how to implement and exploit) 99.65 360.62 T
-0.16 (a r) 99.65 346.62 P
-0.16 (ecovery pr) 111.89 346.62 P
-0.16 (otocol for the integer parser) 163.34 346.62 P
-0.16 (. The) 296.78 346.62 P
4 9.5 Q
-0.32 (let handler) 323.13 346.62 P
1 11 Q
-0.16 ( local declaration is an) 385.51 346.62 P
(essential part of implementing this pr) 99.65 332.62 T
(otocol.) 282.16 332.62 T
3 13 Q
(10.4.1  Using restart handlers to implement a recovery protocol) 99.65 301.29 T
1 11 Q
(Sometimes a handler knows exactly what to do, and how to do it when an excep-) 99.65 281.62 T
(tional situation occurs. The handler de\336ned in the) 99.65 267.62 T
4 9.5 Q
(interactive-read-integer) 344.64 267.62 T
1 11 Q
-0.07 (method in Section 10.3.1 is one such handler) 99.65 253.62 P
-0.07 (. A mor) 313.48 253.62 P
-0.07 (e \337exible err) 350.02 253.62 P
-0.07 (or handler that is) 409.8 253.62 P
-0.04 (part of a r) 99.65 239.62 P
-0.04 (ecovery pr) 147.13 239.62 P
-0.04 (otocol can actually hunt ar) 198.7 239.62 P
-0.04 (ound, and see what r) 327.3 239.62 P
-0.04 (ecovery alter-) 429.27 239.62 P
(natives ar) 99.65 225.62 T
(e available. This hunt would happen immediately after the appr) 146.88 225.62 T
(opriate) 457.86 225.62 T
(err) 99.65 211.62 T
(or handler is found in the usual way) 113.41 211.62 T
(. The err) 289.2 211.62 T
(or handler conducts the hunt for) 329.62 211.62 T
(r) 99.65 197.62 T
(ecovery alternatives. These alternatives ar) 103.79 197.62 T
(e pr) 307.12 197.62 T
(ovided by establishing r) 325.9 197.62 T
(estart han-) 442.91 197.62 T
(dlers, which ar) 99.65 183.62 T
(e or) 171.81 183.62 T
(dinary condition handlers that will handle conditions of class) 189.98 183.62 T
4 9.5 Q
(<restart>) 99.65 169.62 T
1 11 Q
(. A \337exible err) 150.95 169.62 T
(or handler typically scans all established r) 219.65 169.62 T
(estart han-) 423.48 169.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "163" 165
%%Page: "164" 166
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(164) 63.65 702.62 T
0 9.5 Q
(10.4 Using let handler to implement a recovery protocol) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(dlers, makes instances of the r) 99.65 665.62 T
(estart conditions associated with the handlers, and) 245.26 665.62 T
(then goes thr) 99.65 651.62 T
(ough a pr) 163 651.62 T
(ocess of selecting a particular r) 209.91 651.62 T
(estart condition instance) 358.86 651.62 T
(best able to r) 99.65 637.62 T
(ecover fr) 161.29 637.62 T
(om the curr) 203.84 637.62 T
(ent exceptional situation. When the err) 260.33 637.62 T
(or han-) 448.56 637.62 T
(dler \336nds a suitable r) 99.65 623.62 T
(estart condition instance, it signals that instance, which) 202.41 623.62 T
(causes contr) 99.65 609.62 T
(ol to transfer to the r) 159.04 609.62 T
(estart handler) 258.36 609.62 T
(. Once the r) 325.08 609.62 T
(estart handler has con-) 380.69 609.62 T
-0.34 (tr) 99.65 595.62 P
-0.34 (ol, it may not r) 107.38 595.62 P
-0.34 (eturn to the signaling err) 177.21 595.62 P
-0.34 (or handler) 296.48 595.62 P
-0.34 (. The r) 346.26 595.62 P
-0.34 (estart handler can either) 376.38 595.62 P
(decline to handle the r) 99.65 581.62 T
(estart, or it will r) 208.09 581.62 T
(ecover fr) 288.85 581.62 T
(om the exceptional situation) 331.4 581.62 T
-0.14 (accor) 99.65 567.62 P
-0.14 (ding to its contract. The r) 125.07 567.62 P
-0.14 (estart handler may r) 246.09 567.62 P
-0.14 (ecover by optionally executing) 344.17 567.62 P
-0.01 (some r) 99.65 553.62 P
-0.01 (ecovery code followed by either performing a non-local exit, or by delegat-) 132.19 553.62 P
(ing. A handler delegates by signaling another condition.) 99.65 539.62 T
(Another way an err) 126.65 525.62 T
(or handler may r) 221.92 525.62 T
(ecover \050if the err) 303.84 525.62 T
(or handler was estab-) 383.62 525.62 T
(lish using) 99.65 511.62 T
4 9.5 Q
(let handler) 149.63 511.62 T
1 11 Q
(\051 is simply to r) 212.33 511.62 T
(eturn some values, if that is part of the) 282.11 511.62 T
(r) 99.65 497.62 T
(ecovery pr) 103.79 497.62 T
(otocol. If the designer of a condition wishes to permit the err) 155.41 497.62 T
(or han-) 449 497.62 T
(dler to simply r) 99.65 483.62 T
(eturn to the signaler as a r) 174.68 483.62 T
(ecovery technique, some r) 300.77 483.62 T
(equir) 427.48 483.62 T
(ements) 452.89 483.62 T
-0.42 (must be met. First, the condition \050or a super) 99.65 469.62 P
-0.42 (class of the condition\051 must de\336ne the) 308.74 469.62 P
4 9.5 Q
-0.27 (return-allowed?) 99.65 455.62 P
1 11 Q
-0.13 ( method to r) 185.15 455.62 P
-0.13 (eturn tr) 244.44 455.62 P
-0.13 (ue. Second, the condition \050or a super) 281.14 455.62 P
-0.13 (class of) 457.83 455.62 P
(the condition\051 must de\336ne the) 99.65 441.62 T
4 9.5 Q
( return-description) 246.15 441.62 T
1 11 Q
(method to r) 360.15 441.62 T
(eturn a descrip-) 417.08 441.62 T
(tion \050typically a string\051 of what will happen if the handler r) 99.65 427.62 T
(eturns. Finally) 386.66 427.62 T
(, the) 455.58 427.62 T
(original err) 99.65 413.62 T
(or must be signaled with the) 154.13 413.62 T
4 9.5 Q
(signal) 295.62 413.62 T
1 11 Q
( function, since it is an err) 329.82 413.62 T
(or for a) 454.59 413.62 T
(handler to r) 99.65 399.62 T
(eturn to) 156.73 399.62 T
4 9.5 Q
(error) 198.05 399.62 T
1 11 Q
( or) 226.55 399.62 T
4 9.5 Q
(cerror) 242.4 399.62 T
1 11 Q
( functions.) 276.61 399.62 T
3 13 Q
(10.4.2  Restart classes and methods) 99.65 368.29 T
1 11 Q
(In this section, we de\336ne some r) 99.65 348.62 T
(estart classes and methods. In Section 10.4.7, we) 255.43 348.62 T
-0.16 (r) 99.65 334.62 P
-0.16 (ede\336ne) 103.79 334.62 P
4 9.5 Q
-0.34 (parse-integer) 141.97 334.62 P
1 11 Q
-0.16 ( to use those classes and methods to pr) 216.07 334.62 P
-0.16 (ovide several alter-) 403.03 334.62 P
(natives for any err) 99.65 320.62 T
(or handlers that may decide to hunt for r) 188.53 320.62 T
(ecovery options. The) 386.63 320.62 T
(four alternatives we want to supply ar) 99.65 306.62 T
(e:) 285.71 306.62 T
(\245) 108.65 286.62 T
(A way to automatically r) 126.65 286.62 T
(ecover without user interaction if we know the) 247.36 286.62 T
(thr) 126.65 272.62 T
(ee values we want to r) 140.78 272.62 T
(eturn fr) 249.4 272.62 T
(om) 286.19 272.62 T
4 9.5 Q
(parse-integer) 304.66 272.62 T
1 11 Q
(. W) 377.95 272.62 T
(e implement this) 393.43 272.62 T
(alternative in Section 10.4.3.) 126.65 258.62 T
(\245) 108.65 238.62 T
(A way to interactively r) 126.65 238.62 T
(eturn any thr) 241.51 238.62 T
(ee valid user) 305.4 238.62 T
(-supplied values fr) 366.99 238.62 T
(om) 458.35 238.62 T
4 9.5 Q
(parse-integer) 126.65 224.62 T
1 11 Q
(. W) 199.93 224.62 T
(e implement this alternative in Section 10.4.4.) 215.42 224.62 T
(\245) 108.65 204.62 T
(A way to interactively r) 126.65 204.62 T
(eturn zer) 241.51 204.62 T
(o, and skip over the r) 285.41 204.62 T
(est of the string. W) 388.37 204.62 T
(e) 478.87 204.62 T
(implement this alternative in Section 10.4.5.) 126.65 190.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "164" 166
%%Page: "165" 167
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 451.91 702.62 T
2 11 Q
(165) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(\245) 108.65 665.62 T
(A way to skip over the pr) 126.65 665.62 T
(oblem character) 250.53 665.62 T
(, and continue parsing after that) 327.45 665.62 T
(point. W) 126.65 651.62 T
(e implement this alternative in Section 10.4.6.) 167.94 651.62 T
(T) 99.65 631.62 T
(o start, we de\336ne a type that r) 105.38 631.62 T
(epr) 250.13 631.62 T
(esents valid values for signs in our integer) 266.15 631.62 T
-0.12 (parser \050false, a plus sign, and a minus sign\051. Her) 99.65 617.62 P
-0.12 (e) 332.63 617.62 P
4 9.5 Q
-0.24 (union) 340.53 617.62 P
1 11 Q
-0.12 ( cr) 369.03 617.62 P
-0.12 (eates a new type that is) 380.7 617.62 P
-0.07 (the union of all the types pr) 99.65 603.62 P
-0.07 (ovided as ar) 233.45 603.62 P
-0.07 (guments. Remember that the) 292.74 603.62 P
4 9.5 Q
-0.15 ( singleton) 433.25 603.62 P
1 11 Q
(function r) 99.65 589.62 T
(eturns a type that matches only one object, the instance pr) 147.32 589.62 T
(ovided as its) 428.37 589.62 T
(ar) 99.65 575.62 T
(gument.) 109.29 575.62 T
4 9 Q
(def) 99.65 554.95 T
(ine constant <sign> = union \050singleton \050#f\051, singleton\050\325-\325\051, singleton) 115.85 554.95 T
(\050\325+\325\051\051;) 99.65 543.95 T
1 11 Q
(Next, we de\336ne) 99.65 523.62 T
4 9.5 Q
(<return-integer-parse-values>) 179.08 523.62 T
1 11 Q
(, the main r) 344.38 523.62 T
(estart condition,) 399.6 523.62 T
-0.25 (which r) 99.65 509.62 P
-0.25 (epr) 136.36 509.62 P
-0.25 (esents a r) 152.39 509.62 P
-0.25 (ecovery pr) 196.89 509.62 P
-0.25 (otocol wher) 248.25 509.62 P
-0.25 (e some value is to be r) 305.43 509.62 P
-0.25 (eturned fr) 411.13 509.62 P
-0.25 (om the) 459.67 509.62 P
4 9.5 Q
(parse-integer) 99.65 495.62 T
1 11 Q
( method. Although it is possible to design general-purpose) 173.75 495.62 T
-0.02 (r) 99.65 481.62 P
-0.02 (estarts, we de\336ne some very speci\336c r) 103.79 481.62 P
-0.02 (estarts to keep the example simple. All the) 287.21 481.62 P
(r) 99.65 467.62 T
(estarts after this one either dir) 103.79 467.62 T
(ectly or indir) 249.19 467.62 T
(ectly inherit fr) 311.77 467.62 T
(om this class.) 380.54 467.62 T
4 9 Q
(def) 99.65 446.95 T
(ine class <return-integer-parse-values> \050<restart>\051) 115.85 446.95 T
(slot return-function :: <function>;) 110.45 435.95 T
(slot return-result :: <integer>, init-keyword: return-result:;) 110.45 424.95 T
(slot return-sign, init-keyword: return-sign:;) 110.45 413.95 T
(slot return-end-index :: integer, init-keyword: return-end-index:;) 110.45 402.95 T
(end;) 99.65 391.95 T
1 11 Q
(The slots de\336ned in the pr) 99.65 371.62 T
(eceding de\336nition ar) 226.59 371.62 T
(e used in the following method to) 327.04 371.62 T
(pr) 99.65 357.62 T
(ovide the r) 110.41 357.62 T
(eturn function and r) 162.72 357.62 T
(eturn values when the r) 260.75 357.62 T
(estart handler method) 376.12 357.62 T
(\050) 99.65 343.62 T
4 9.5 Q
(do-return) 103.31 343.62 T
1 11 Q
(\051 is executed.) 154.61 343.62 T
4 9 Q
-0.3 (def) 99.65 322.95 P
-0.3 (ine method do-return \050cond :: <return-integer-parse-values>, next-handler\051) 115.85 322.95 P
(cond.return-function \050values \050cond.return-result,) 110.45 311.95 T
(cond.return-sign,) 272.45 300.95 T
(cond.return-end-index\051\051;) 272.45 289.95 T
(end;) 99.65 278.95 T
1 11 Q
-0 (As we shall see in Section 10.4.7, the) 99.65 258.62 P
4 9.5 Q
-0 (return-function) 277.7 258.62 P
1 11 Q
-0 ( slot will be \336lled with the) 363.2 258.62 P
4 9.5 Q
(return) 99.65 244.62 T
1 11 Q
( function fr) 133.85 244.62 T
(om the) 187.93 244.62 T
4 9.5 Q
(block) 224.41 244.62 T
1 11 Q
( that surr) 252.91 244.62 T
(ounds the body o) 297.27 244.62 T
2 F
(f) 382.14 244.62 T
4 9.5 Q
(parse-integer) 389.17 244.62 T
1 11 Q
(.) 462.45 244.62 T
(W) 470.9 244.62 T
(e) 480.89 244.62 T
(can r) 99.65 230.62 T
(eturn any value fr) 123.33 230.62 T
(om) 210.46 230.62 T
4 9.5 Q
(parse-integer) 228.93 230.62 T
1 11 Q
( by simply calling this function fr) 303.03 230.62 T
(om) 464.18 230.62 T
(our err) 99.65 216.62 T
(or handler) 133.14 216.62 T
(.) 183.27 216.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "165" 167
%%Page: "166" 168
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(166) 63.65 702.62 T
0 9.5 Q
(10.4 Using let handler to implement a recovery protocol) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(10.4.3  Automatic return recovery option) 99.65 664.29 T
1 11 Q
(The) 99.65 644.62 T
4 9.5 Q
(<automatic-return-integer-parse-values>) 120.81 644.62 T
1 11 Q
( class in the following de\336ni-) 343.11 644.62 T
(tion r) 99.65 630.62 T
(epr) 125.74 630.62 T
(esents the r) 141.77 630.62 T
(estart option chosen by the application rather than thr) 196.52 630.62 T
(ough) 458.55 630.62 T
(user interaction. This r) 99.65 616.62 T
(estart is selected by a handler without user intervention) 209.1 616.62 T
(when the handler knows the corr) 99.65 602.62 T
(ect values to r) 260.74 602.62 T
(eturn fr) 327.95 602.62 T
(om) 364.75 602.62 T
4 9.5 Q
( parse-integer) 380.47 602.62 T
1 11 Q
(.) 459.45 602.62 T
4 9 Q
(def) 99.65 581.95 T
(ine class <automatic-return-integer-parse-values>) 115.85 581.95 T
(\050<return-integer-parse-values>\051) 132.05 570.95 T
(end;) 99.65 559.95 T
1 11 Q
(The) 99.65 539.62 T
4 9.5 Q
(interactive?) 120.81 539.62 T
1 11 Q
( pr) 189.21 539.62 T
(otocol is de\336ned by our application, not Dylan. It it used by) 202.72 539.62 T
(a handler to determine if this r) 99.65 525.62 T
(estart should be of) 247.72 525.62 T
(fer) 337.37 525.62 T
(ed in the list of choices pr) 350.45 525.62 T
(e-) 474.19 525.62 T
-0.11 (sented interactively to users. Her) 99.65 511.62 P
-0.11 (e, we assert that this condition is not suitable for) 259.39 511.62 P
(interactive use:) 99.65 497.62 T
4 9 Q
(def) 99.65 476.95 T
(ine method interactive? \050cond :: <automatic-return-integer-parse-values>\051) 115.85 476.95 T
(#f;) 110.45 465.95 T
(end;) 99.65 454.95 T
1 11 Q
-0.47 (The) 99.65 434.62 P
4 9.5 Q
-0.98 (values-supplied?) 120.34 434.62 P
1 11 Q
-0.47 ( method de\336ned in the following example is a test function) 211.54 434.62 P
-0.02 (that we will supply in) 99.65 420.62 P
4 9.5 Q
-0.05 (parse-integer) 209.02 420.62 P
1 11 Q
-0.02 ( as part of establishing this r) 283.12 420.62 P
-0.02 (estart. This test) 419.65 420.62 P
-0.19 (function should pr) 99.65 406.62 P
-0.19 (event a handler fr) 189.94 406.62 P
-0.19 (om selecting this r) 275.52 406.62 P
-0.19 (estart unless all the slots of) 363.53 406.62 P
(the r) 99.65 392.62 T
(estart condition instance ar) 121.8 392.62 T
(e \336lled in.) 252.97 392.62 T
4 9 Q
-3.6 (def) 99.65 371.95 P
-3.6 (ine method values-supplied? \050cond :: <automatic-return-integer-parse-values>\051) 115.85 371.95 P
(slot-initialized? \050cond, return-function\051 &) 110.45 360.95 T
(slot-initialized? \050cond, return-result\051 &) 110.45 349.95 T
(slot-initialized? \050cond, return-sign\051 &) 110.45 338.95 T
(slot-initialized? \050cond, return-index\051;) 110.45 327.95 T
(end;) 99.65 316.95 T
3 13 Q
(10.4.4  Interactive query recovery option) 99.65 287.29 T
1 11 Q
(Next, we de\336ne a class that r) 99.65 267.62 T
(epr) 238.96 267.62 T
(esents all r) 254.99 267.62 T
(estarts that ar) 306.39 267.62 T
(e designed to be used) 372.23 267.62 T
(interactively) 99.65 253.62 T
(. The additional slot,) 159.2 253.62 T
4 9.5 Q
(interact-where) 261.61 253.62 T
1 11 Q
(, designates wher) 341.41 253.62 T
(e the user) 426.05 253.62 T
(interaction should take place.) 99.65 239.62 T
4 9 Q
(def) 99.65 218.95 T
(ine class <interactive-return-integer-parse-values>) 115.85 218.95 T
(\050<return-integer-parse-values>\051) 132.05 207.95 T
(slot interact-where, init-keyword: where:;) 110.45 196.95 T
(end;) 99.65 185.95 T
1 11 Q
(W) 99.65 165.62 T
(e indicate to our handlers that this r) 109.64 165.62 T
(estart may be used interactively:) 283.07 165.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "166" 168
%%Page: "167" 169
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 451.91 702.62 T
2 11 Q
(167) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
-1.44 (def) 99.65 666.95 P
-1.44 (ine method interactive? \050cond :: <interactive-return-integer-parse-values>\051) 115.85 666.95 P
(#t;) 110.45 655.95 T
(end;) 99.65 644.95 T
1 11 Q
(Next, we de\336ne a class that r) 99.65 624.62 T
(epr) 238.96 624.62 T
(esents the option to r) 254.99 624.62 T
(eturn values fr) 356.65 624.62 T
(om) 427.68 624.62 T
4 9.5 Q
( parse-) 443.4 624.62 T
(integer) 99.65 610.62 T
1 11 Q
(based on interactively querying those values fr) 145.25 610.62 T
(om the user:) 372.63 610.62 T
4 9 Q
(def) 99.65 589.95 T
(ine class <query-return-integer-parse-values>) 115.85 589.95 T
(\050<interactive-return-integer-parse-values>\051) 132.05 578.95 T
(end;) 99.65 567.95 T
1 11 Q
(Next, we de\336ne the method for querying the user for values to r) 99.65 547.62 T
(eturn for this) 410.44 547.62 T
(r) 99.65 533.62 T
(estart. The) 103.79 533.62 T
4 9.5 Q
(restart-query) 157.41 533.62 T
1 11 Q
( generic function is part of the Dylan standar) 231.51 533.62 T
(d r) 448.86 533.62 T
(ecov-) 462.48 533.62 T
(ery pr) 99.65 519.62 T
(otocol.) 128.89 519.62 T
4 9 Q
(def) 99.65 498.95 T
(ine method restart-query \050cond :: <query-return-integer-parse-values>\051) 115.85 498.95 T
(return-result := interactive-read-integer \050interact-where \050cond\051,) 110.45 487.95 T
-1.44 (prompt: "Integer value of parse?) 342.65 476.95 P
("\051;) 99.65 465.95 T
(return-sign := interactive-read-sign \050interact-where \050cond\051,) 110.45 454.95 T
-0.26 (prompt: "Sign of parse \050n for none\051?) 315.65 443.95 P
("\051;) 99.65 432.95 T
(return-end-index := interactive-read-integer \050interact-where \050cond\051,) 110.45 421.95 T
(prompt: "end of parse? "\051;) 358.85 410.95 T
(end;) 99.65 399.95 T
1 11 Q
-0.02 (Next, we de\336ne a helper method that pr) 99.65 379.62 P
-0.02 (ompts for and r) 294.06 379.62 P
-0.02 (eads a sign fr) 369.61 379.62 P
-0.02 (om the user) 433.64 379.62 P
-0.02 (.) 490.17 379.62 P
-0.44 (Her) 99.65 365.62 P
-0.44 (e we intr) 118.22 365.62 P
-0.44 (oduce the function) 159.89 365.62 P
4 9.5 Q
-0.91 (read-character) 252.37 365.62 P
1 11 Q
-0.44 (, which r) 331.35 365.62 P
-0.44 (eads a character fr) 372.94 365.62 P
-0.44 (om the) 460.05 365.62 P
(speci\336ed place. In this case, typically the character will be r) 99.65 351.62 T
(ead fr) 386.33 351.62 T
(om keystr) 414.38 351.62 T
(okes) 462.75 351.62 T
(typed by a user) 99.65 337.62 T
(.) 174 337.62 T
4 9 Q
(def) 99.65 316.95 T
(ine method interactive-read-sign) 115.85 316.95 T
-0.13 (\050where, #key prompt = "Enter a sign \050n for none\051: "\051 => sign :: <sign>;) 132.05 305.95 P
(block \050return\051) 110.45 294.95 T
(while \050#t\051) 121.25 283.95 T
(format \050where, "\134n%s", prompt\051;) 153.65 272.95 T
(let result = read-character \050where\051;) 153.65 261.95 T
(if \050\050result = \325n\325\051 | \050result = \325N\325\051\051 return \050#\134f\051;) 153.65 250.95 T
(if \050instance? \050result, <sign>\051\051 return \050result\051;) 153.65 239.95 T
(end;) 121.25 228.95 T
(end;) 110.45 217.95 T
(end;) 99.65 206.95 T
1 11 Q
-0.42 (For our application, in Section 10.2.3, we de\336ned) 99.65 186.62 P
4 9.5 Q
-0.87 (report) 335.65 186.62 P
1 11 Q
-0.42 ( methods \050and an implicit) 369.85 186.62 P
(generic function\051 that described err) 99.65 172.62 T
(or conditions for users. W) 270.57 172.62 T
(e use that same pr) 395.32 172.62 T
(o-) 483.13 172.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "167" 169
%%Page: "168" 170
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(168) 63.65 702.62 T
0 9.5 Q
(10.4 Using let handler to implement a recovery protocol) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(tocol in the following method, this time to describe what picking this r) 99.65 665.62 T
(estart will) 441.45 665.62 T
(do. This method will be used by our err) 99.65 651.62 T
(or handler in the next section to help the) 292.19 651.62 T
(user decide which r) 99.65 637.62 T
(estart to pick.) 195.08 637.62 T
4 9 Q
(def) 99.65 616.95 T
(ine method report \050cond :: <query-return-integer-parse-values>, where\051) 115.85 616.95 T
(format \050where,) 110.45 605.95 T
("Returns from the integer parser with return values supplied) 121.25 594.95 T
(interactively."\051;) 99.65 583.95 T
(end;) 99.65 572.95 T
3 13 Q
(10.4.5  Interactive zero return recovery option) 99.65 543.29 T
1 11 Q
(Next, we de\336ne a class to r) 99.65 523.62 T
(epr) 229.48 523.62 T
(esent the option of simply r) 245.51 523.62 T
(eturning zer) 378.84 523.62 T
(o fr) 438.46 523.62 T
(om) 455.02 523.62 T
4 9.5 Q
-0.41 (parse-integer) 99.65 509.62 P
1 11 Q
-0.2 (, with no sign, and with an) 172.93 509.62 P
4 9.5 Q
-0.41 (end-index) 304.33 509.62 P
1 11 Q
-0.2 ( that indicates that the entir) 355.63 509.62 P
-0.2 (e) 487.83 509.62 P
(string pr) 99.65 495.62 T
(ovided has been consumed. In or) 141.47 495.62 T
(der to pr) 302.25 495.62 T
(ovide this option, we need to) 344.43 495.62 T
(look at the original string that caused the parse err) 99.65 481.62 T
(or) 344.51 481.62 T
(. Fortunately) 354.05 481.62 T
(, our err) 415.08 481.62 T
(or han-) 454.08 481.62 T
(dler will pr) 99.65 467.62 T
(ovide us with the original err) 154.22 467.62 T
(or condition, which contains the unpars-) 296.03 467.62 T
(able integer string. Because the) 99.65 453.62 T
4 9.5 Q
(condition:) 252.9 453.62 T
1 11 Q
( init keywor) 309.9 453.62 T
(d is part of the standar) 368.62 453.62 T
(d) 478.44 453.62 T
-0.1 (Dylan r) 99.65 439.62 P
-0.1 (ecovery pr) 136.18 439.62 P
-0.1 (otocol, we would expect other handlers to also pr) 187.69 439.62 P
-0.1 (ovide us with) 426.63 439.62 P
(the original err) 99.65 425.62 T
(or condition.) 172.14 425.62 T
4 9 Q
(def) 99.65 404.95 T
(ine class <zero-return-integer-parse-values>) 115.85 404.95 T
(\050<interactive-return-integer-parse-values>\051) 132.05 393.95 T
(slot error-condition :: <integer-parse-error>, init-keyword: condition:;) 110.45 382.95 T
(end;) 99.65 371.95 T
1 11 Q
-0.2 (The following) 99.65 351.62 P
4 9.5 Q
-0.41 (restart-query) 170.14 351.62 P
1 11 Q
-0.2 ( method does nothing because it is not be necessary) 244.24 351.62 P
(for the user to interactively supply any slot values for this r) 99.65 337.62 T
(estart.) 387.25 337.62 T
4 9 Q
(def) 99.65 316.95 T
(ine method restart-query \050cond :: <zero-return-integer-parse-values>\051) 115.85 316.95 T
(end;) 99.65 305.95 T
1 11 Q
(As with the) 99.65 285.62 T
4 9.5 Q
(report) 158.74 285.62 T
1 11 Q
( method in Section 10.4.4, the following method pr) 192.94 285.62 T
(ovides an) 438.3 285.62 T
(explanation of what picking this r) 99.65 271.62 T
(estart will do, namely) 263.61 271.62 T
(, r) 368.05 271.62 T
(eturn zer) 377.7 271.62 T
(o.) 421.6 271.62 T
4 9 Q
(def) 99.65 250.95 T
(ine method report \050cond :: <zero-return-integer-parse-values>\051, where\051) 115.85 250.95 T
(format \050where,) 110.45 239.95 T
-1.14 (\322Returns zero from the integer parser, skipping the rest of the string.\323\051;) 126.65 228.95 P
(end;) 99.65 217.95 T
1 11 Q
(Next, we pr) 99.65 197.62 T
(ovide a special) 156.77 197.62 T
4 9.5 Q
(do-return) 231.26 197.62 T
1 11 Q
( method that delegates to the r) 282.56 197.62 T
(estart that) 430.42 197.62 T
-0.15 (r) 99.65 183.62 P
-0.15 (epr) 103.79 183.62 P
-0.15 (esents the pr) 119.82 183.62 P
-0.15 (ogramatic \050non-interactive\051 r) 180.89 183.62 P
-0.15 (eturn option. Once the user has cho-) 320.35 183.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "168" 170
%%Page: "169" 171
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 451.91 702.62 T
2 11 Q
(169) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(sen to r) 99.65 665.62 T
(eturn zer) 135.22 665.62 T
(o, we can simply use the same handler the automatic r) 179.12 665.62 T
(eturn) 442.94 665.62 T
(r) 99.65 651.62 T
(estart uses, supplying the corr) 103.79 651.62 T
(ect r) 249.92 651.62 T
(eturn values for the zer) 270.55 651.62 T
(o r) 383.46 651.62 T
(eturn option.) 396.36 651.62 T
4 9 Q
-4.8 (def) 99.65 630.95 P
-4.8 (ine method do-return \050cond :: <zero-return-integer-parse-values>, next-handler\051) 115.85 630.95 P
(signal \050make \050<automatically-return-integer-parse-values>,) 110.45 619.95 T
(return-function: return-function \050cond\051,) 186.05 608.95 T
(return-result: 0,) 186.05 597.95 T
(return-sign: #f,) 186.05 586.95 T
(return-index: size \050bad-string \050error-condition \050cond\051\051\051\051\051;) 186.05 575.95 T
(end;) 99.65 564.95 T
3 13 Q
(10.4.6  Skip character recovery option) 99.65 535.29 T
1 11 Q
(Finally) 99.65 515.62 T
(, we de\336ne the methods for the standar) 132.16 515.62 T
(d Dylan r) 322.33 515.62 T
(ecovery pr) 368.43 515.62 T
(otocol that) 420.05 515.62 T
(allows a handler to r) 99.65 501.62 T
(eturn values fr) 199.47 501.62 T
(om the signaler) 270.5 501.62 T
(. In this case, r) 344.86 501.62 T
(eturning values) 413.79 501.62 T
(fr) 99.65 487.62 T
(om the handler simply causes the curr) 107.46 487.62 T
(ent pr) 293.16 487.62 T
(oblem character to be skipped, and) 321.92 487.62 T
(execution to continue, as we will see with the new) 99.65 473.62 T
4 9.5 Q
(parse-integer) 345.85 473.62 T
1 11 Q
( method in Sec-) 419.95 473.62 T
(tion 10.4.7.) 99.65 459.62 T
4 9 Q
(def) 99.65 438.95 T
(ine method return-allowed? \050<integer-parse-error>\051) 115.85 438.95 T
(#t;) 110.45 427.95 T
(end;) 99.65 416.95 T
(def) 99.65 397.95 T
(ine method return-description \050cond :: <integer-parse-error>\051) 115.85 397.95 T
("Skip over the problem character and continue parsing") 110.45 386.95 T
(end;) 99.65 375.95 T
3 13 Q
(10.4.7  The new) 99.65 346.29 T
(, recoverable parse-integer) 177.48 346.29 T
6 9 Q
(// This is a simple integer parser that both signals <integer-parse-error>) 99.65 325.95 T
(// conditions when parsing problems are encountered, and also provides some) 99.65 314.95 T
(// restart handlers in case an error handler wishes to recover within parse-) 99.65 303.95 T
(integer.) 99.65 292.95 T
4 F
(def) 99.65 281.95 T
(ine method parse-integer) 115.85 281.95 T
(\050integer-string :: <string>, #key delimiter = ".", start = 0\051 =>) 121.25 270.95 T
( \050integer :: <integer>, sign :: <sign>, end-index :: <integer>\051;) 121.25 259.95 T
(block \050return\051) 110.45 248.95 T
(let length = size \050integer-string\051;) 121.25 237.95 T
(let result = #f;) 121.25 226.95 T
(let sign = #f;) 121.25 215.95 T
(let end-index = start;) 121.25 204.95 T
(let handler \050<automatic-return-integer-parse-values>, test: values-) 121.25 193.95 T
(suppied?,) 99.65 182.95 T
(init-arguments: vector\050return-function:, return\051\051 = do-) 191.45 171.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "169" 171
%%Page: "170" 172
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(170) 63.65 702.62 T
0 9.5 Q
(10.4 Using let handler to implement a recovery protocol) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(return;) 99.65 666.95 T
(let handler \050<query-return-integer-parse-values>,) 121.25 655.95 T
(init-arguments: vector\050return-function:, return\051\051 = do-) 191.45 644.95 T
(return;) 99.65 633.95 T
(let handler \050<zero-return-integer-parse-values>,) 121.25 622.95 T
(init-arguments: vector\050return-function:, return\051\051 = do-) 191.45 611.95 T
(return;) 99.65 600.95 T
(for \050index from start below length\051) 121.25 589.95 T
(let char = integer-string[index];) 132.05 578.95 T
(case) 132.05 567.95 T
6 F
(// Is the character a digit?) 142.85 556.95 T
4 F
(digit? \050char\051 =>) 142.85 545.95 T
(let value = position \050char, $digits\051;) 153.65 534.95 T
(if \050result\051) 153.65 523.95 T
6 F
(// If we have already started to generate the integer) 175.25 512.95 T
(// shift the result to make room for the next digit.) 175.25 501.95 T
4 F
(result := \050result * 10\051 + value;) 175.25 490.95 T
(else) 164.45 479.95 T
(result := value;) 175.25 468.95 T
(end;) 153.65 457.95 T
6 F
(// Is the character whitespace?) 142.85 446.95 T
4 F
(whitespace? \050char\051 => #f;) 142.85 435.95 T
6 F
(// Is the character a sign?) 142.85 424.95 T
4 F
(sign? \050char\051 => if \050result | sign\051) 142.85 413.95 T
(signal \050make \050) 245.45 402.95 T
4 9.5 Q
(<sign-in-illegal-position>,) 321.05 402.95 T
4 9 Q
(bad-string: integer-string) 321.05 391.95 T
4 9.5 Q
(\051) 461.45 391.95 T
4 9 Q
(\051;) 467.15 391.95 T
(else) 229.25 380.95 T
(sign := char;) 245.45 369.95 T
(end;) 229.25 358.95 T
6 F
(// Is the character the specif) 142.85 347.95 T
(ied character to stop at when reached?) 304.85 347.95 T
4 F
(char == delimiter => return \050values \050result, sign, index\051\051;) 142.85 336.95 T
(otherwise => signal \050make \050) 142.85 325.95 T
4 9.5 Q
(<illegal-character>, bad-char: char) 288.65 325.95 T
4 9 Q
(,) 488.15 325.95 T
(bad-string: integer-string) 283.25 314.95 T
4 9.5 Q
(\051) 423.65 314.95 T
4 9 Q
(\051;) 429.35 314.95 T
(end case;) 132.05 303.95 T
(f) 121.25 292.95 T
(inally return \050values \050result, sign, length\051\051;) 126.65 292.95 T
(end for;) 121.25 281.95 T
(end block;) 110.45 270.95 T
(end method parse-integer;) 99.65 259.95 T
1 11 Q
(W) 99.65 239.62 T
(e have made only two changes in) 109.64 239.62 T
4 9.5 Q
(parse-integer) 274.08 239.62 T
1 11 Q
( itself.) 348.17 239.62 T
(First, we have added a gr) 126.65 225.62 T
(oup of) 249.58 225.62 T
4 9.5 Q
(let handler) 284 225.62 T
1 11 Q
( local declarations. These dec-) 346.7 225.62 T
(larations establish the thr) 99.65 211.62 T
(ee r) 222.26 211.62 T
(estart options we de\336ned, and link them to the) 239.7 211.62 T
4 9.5 Q
(do-) 469.47 211.62 T
-0.52 (return) 99.65 197.62 P
1 11 Q
-0.25 ( handler generic function we de\336ned. W) 133.85 197.62 P
-0.25 (e captur) 327.15 197.62 P
-0.25 (e the) 366.28 197.62 P
4 9.5 Q
-0.52 (return) 391.8 197.62 P
1 11 Q
-0.25 ( function, and) 426.01 197.62 P
(pr) 99.65 183.62 T
(ovide it to the handler via the r) 110.41 183.62 T
(estart init keywor) 260.86 183.62 T
(d sequence. The) 346.53 183.62 T
4 9.5 Q
(return) 427.22 183.62 T
1 11 Q
( func-) 461.42 183.62 T
(tion will end up in the r) 99.65 169.62 T
(estart condition instance cr) 214.76 169.62 T
(eated by an err) 345.31 169.62 T
(or handler) 417.77 169.62 T
(. For) 467.89 169.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "170" 172
%%Page: "171" 173
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 451.91 702.62 T
2 11 Q
(171) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(the) 99.65 665.62 T
4 9.5 Q
(<automatic-return-integer-parse-values>) 117.65 665.62 T
1 11 Q
( r) 339.95 665.62 T
(estart, we pr) 346.85 665.62 T
(ovide a test) 407.25 665.62 T
-0.44 (de\336ned above that will inform handlers not to select this r) 99.65 651.62 P
-0.44 (estart unless all the slots) 377.02 651.62 P
(of the r) 99.65 637.62 T
(estart ar) 134.22 637.62 T
(e alr) 173.57 637.62 T
(eady \336lled in. Sometimes you want to establish a gr) 194.43 637.62 T
(oup of) 444.73 637.62 T
(similar handlers \050as in this case\051, or sometimes you want to establish a general) 99.65 623.62 T
-0.34 (purpose r) 99.65 609.62 P
-0.34 (estart handler \050or gr) 146.35 609.62 P
-0.34 (oup of handlers\051 in mor) 242.66 609.62 P
-0.34 (e than one place. That might) 356.86 609.62 P
(be a bit cumbersome and har) 99.65 595.62 T
(d to maintain if done the obvious way) 240.37 595.62 T
(. Establishing) 424.33 595.62 T
(r) 99.65 581.62 T
(epetitive err) 103.79 581.62 T
(or or r) 162.51 581.62 T
(estart handlers is sometimes best done using a macr) 192.86 581.62 T
(o. See) 445.03 581.62 T
(Chapter 13 for mor) 99.65 567.62 T
(e information about macr) 192.29 567.62 T
(os.) 315.89 567.62 T
-0.29 (Second, we have changed the calls fr) 126.65 553.62 P
-0.29 (om) 302.85 553.62 P
4 9.5 Q
-0.6 (error) 321.03 553.62 P
1 11 Q
-0.29 ( to) 349.53 553.62 P
4 9.5 Q
-0.6 (signal) 364.04 553.62 P
1 11 Q
-0.29 (, to permit handlers) 398.24 553.62 P
(to r) 99.65 539.62 T
(eturn values as an additional way to r) 116.14 539.62 T
(ecover) 299.74 539.62 T
(. In this case, r) 330.91 539.62 T
(eturning fr) 399.84 539.62 T
(om the) 452.35 539.62 T
-0.09 (handler means that the handler would like us to skip the pr) 99.65 525.62 P
-0.09 (oblematical character) 387.52 525.62 P
-0.09 (,) 490.23 525.62 P
(and pr) 99.65 511.62 T
(oceed with the parsing after that point.) 131.78 511.62 T
-0.22 (In the next section, we explor) 126.65 497.62 P
-0.22 (e how all this machinery \336nally \336ts together as) 267.71 497.62 P
(we de\336ne our own err) 99.65 483.62 T
(or handler that takes advantage of these new r) 207.73 483.62 T
(ecovery) 432.79 483.62 T
(opportunities.) 99.65 469.62 T
3 15 Q
(10.5  De\336ning an error handler with recovery) 99.65 429.95 T
1 11 Q
(Now that we have de\336ned a) 99.65 409.62 T
4 9.5 Q
(parse-integer) 239.91 409.62 T
1 11 Q
( method with r) 314.01 409.62 T
(ecovery) 386.47 409.62 T
(, we will) 423.35 409.62 T
(explor) 99.65 395.62 T
(e some dif) 130.56 395.62 T
(fer) 180.37 395.62 T
(ent ways a handler can exploit the availability of these r) 193.45 395.62 T
(ecov-) 464.1 395.62 T
(ery options.) 99.65 381.62 T
3 13 Q
(10.5.1  Establishing introspective handlers) 99.65 350.29 T
1 11 Q
(Below we de\336ne a new method,) 99.65 330.62 T
4 9.5 Q
(read-integer) 258.07 330.62 T
1 11 Q
(, which takes an ar) 325.66 330.62 T
(gument saying) 416.15 330.62 T
(wher) 99.65 316.62 T
(e to get the characters that make up the integer) 124.64 316.62 T
(, and also takes an ar) 351.4 316.62 T
(gument) 452.58 316.62 T
(describing how the caller would like err) 99.65 302.62 T
(ors handled. The) 293.55 302.62 T
4 9.5 Q
(error-action) 378.2 302.62 T
1 11 Q
( keywor) 446.6 302.62 T
(d) 486.18 302.62 T
(parameter must be one of the following symbols:) 99.65 288.62 T
4 9.5 Q
(ask:) 340.5 288.62 T
1 11 Q
(,) 363.3 288.62 T
4 9.5 Q
(zero:) 368.8 288.62 T
1 11 Q
(,) 397.3 288.62 T
4 9.5 Q
(skip:) 402.8 288.62 T
1 11 Q
(, or) 431.3 288.62 T
4 9.5 Q
(error:) 449.9 288.62 T
1 11 Q
(.) 484.11 288.62 T
(The) 99.65 274.62 T
4 9.5 Q
(ask:) 120.81 274.62 T
1 11 Q
( symbol indicates that an interactive dialog with the user should deter-) 143.61 274.62 T
(mine how any parse err) 99.65 260.62 T
(ors ar) 214.98 260.62 T
(e handled. The) 242.4 260.62 T
4 9.5 Q
(zero:) 317.29 260.62 T
1 11 Q
( keywor) 345.79 260.62 T
(d indicates that the) 385.37 260.62 T
-0.12 (caller simply wants the integer zer) 99.65 246.62 P
-0.12 (o r) 266.38 246.62 P
-0.12 (eturned whenever ther) 279.16 246.62 P
-0.12 (e is a parse err) 390.39 246.62 P
-0.12 (or) 459.69 246.62 P
-0.12 (. The) 469.23 246.62 P
4 9.5 Q
-0.28 (skip:) 99.65 232.62 P
1 11 Q
-0.13 ( keywor) 128.15 232.62 P
-0.13 (d indicates that the caller wants to ignor) 167.59 232.62 P
-0.13 (e any illegal characters and) 361.58 232.62 P
(continue parsing. The) 99.65 218.62 T
4 9.5 Q
(error:) 208.28 218.62 T
1 11 Q
( keywor) 242.48 218.62 T
(d indicates that the caller will handle the) 282.06 218.62 T
-0.04 (err) 99.65 204.62 P
-0.04 (or) 113.41 204.62 P
-0.04 (, or is willing to have the err) 122.95 204.62 P
-0.04 (or send the user to whatever debugger might be) 259.39 204.62 P
(available, so) 99.65 190.62 T
4 9.5 Q
(read-integer) 162.24 190.62 T
1 11 Q
( should decline to handle any parse err) 230.64 190.62 T
(ors.) 419.72 190.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "171" 173
%%Page: "172" 174
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(172) 63.65 702.62 T
0 9.5 Q
(10.5 Defining an error handler with recovery) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine method read-integer \050where, #key error-action :: <symbol> = error:,) 115.85 666.95 T
(prompt :: <string> = "Enter a number: "\051) 250.85 655.95 T
(=> \050value :: <integer>, sign :: <sign>,) 245.45 644.95 T
(end-index :: <integer>\051;) 267.05 633.95 T
(let handler <integer-parse-error> =) 110.45 622.95 T
(select \050error-action\051) 142.85 611.95 T
6 F
(// Always decline) 153.65 600.95 T
4 F
(error: => decline-handler;) 153.65 589.95 T
6 F
(// Ask the user what to do interactively) 153.65 578.95 T
4 F
(ask: => method \050condition, next-handler\051) 153.65 567.95 T
(interactive-handler \050condition, next-handler, where\051;) 207.65 556.95 T
(end;) 196.85 545.95 T
6 F
(// Always return) 153.65 534.95 T
4 F
(skip: => return-handler;) 153.65 523.95 T
6 F
(// Always cause parse-integer to return zero to its caller.) 153.65 512.95 T
4 F
(zero: => zero-handler;) 153.65 501.95 T
(parse-integer \050read-line \050where\051\051;) 110.45 490.95 T
(end;) 99.65 479.95 T
1 11 Q
(The) 99.65 459.62 T
4 9.5 Q
(read-integer) 120.81 459.62 T
1 11 Q
( method implements the four err) 189.21 459.62 T
(or actions by choosing and) 347.95 459.62 T
(establishing one of four dif) 99.65 445.62 T
(fer) 230.32 445.62 T
(ent handlers. The inter) 243.4 445.62 T
(esting parts ar) 353.18 445.62 T
(e contained) 422.27 445.62 T
(within the actual handler methods below) 99.65 431.62 T
(. Note the bar) 298.85 431.62 T
(e method \050in the) 364.84 431.62 T
4 9.5 Q
(ask:) 447.33 431.62 T
1 11 Q
(branch of the) 99.65 417.62 T
4 9.5 Q
(select) 166.44 417.62 T
1 11 Q
(\051 that complies with the standar) 200.64 417.62 T
(d contract for a handler) 354.82 417.62 T
(, and) 468.27 417.62 T
(yet pr) 99.65 403.62 T
(ovides additional information the) 128.13 403.62 T
4 9.5 Q
(interactive-handler) 294.52 403.62 T
1 11 Q
( handler method) 402.82 403.62 T
(r) 99.65 389.62 T
(equir) 103.79 389.62 T
(es. The condition system pr) 129.21 389.62 T
(ovides only the err) 262.48 389.62 T
(or instance and the) 353.55 389.62 T
4 9.5 Q
(next-) 448.69 389.62 T
(handler) 99.65 375.62 T
1 11 Q
( method, and the) 139.55 375.62 T
4 9.5 Q
(interactive-handler) 224.88 375.62 T
1 11 Q
( method needs to know wher) 333.17 375.62 T
(e) 475.23 375.62 T
(the user dialog should take place, as well.) 99.65 361.62 T
(The \336rst handler) 126.65 347.62 T
(,) 206.84 347.62 T
4 9.5 Q
(decline-handler) 212.34 347.62 T
1 11 Q
(, is not intr) 297.02 347.62 T
(ospective. It always declines) 349.22 347.62 T
(to handle any condition by calling) 99.65 333.62 T
4 9.5 Q
(next-handler) 268.37 333.62 T
1 11 Q
(. W) 335.95 333.62 T
(ith this handler established,) 351.85 333.62 T
(any integer parse err) 99.65 319.62 T
(ors will be handled outside of) 200.25 319.62 T
4 9.5 Q
(read-integer) 347.86 319.62 T
1 11 Q
(.) 415.45 319.62 T
4 9 Q
(def) 99.65 298.95 T
(ine method decline-handler \050cond :: <condition>, next-handler\051) 115.85 298.95 T
(next-handler \050\051;) 110.45 287.95 T
(end;) 99.65 276.95 T
3 13 Q
(10.5.2  An interactive introspective handler) 99.65 247.29 T
1 11 Q
(The handler method de\336ned in this section is selected when the caller of) 99.65 227.62 T
4 9.5 Q
(read-) 453.15 227.62 T
(integer) 99.65 213.62 T
1 11 Q
( would like an interactive user to decide how to continue fr) 139.55 213.62 T
(om the pr) 426.61 213.62 T
(ob-) 473.85 213.62 T
(lem. First, the pr) 99.65 199.62 T
(oblem is r) 179.51 199.62 T
(evealed to the user) 227.29 199.62 T
(, and then a set of options is pr) 317.93 199.62 T
(e-) 466.75 199.62 T
(sented to the user) 99.65 185.62 T
(. The user then chooses one of the options, and an appr) 184.76 185.62 T
(opriate) 451.86 185.62 T
(action is taken. This handler is similar to part of what a debugger might do,) 99.65 171.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "172" 174
%%Page: "173" 175
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 451.91 702.62 T
2 11 Q
(173) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(although ther) 99.65 665.62 T
(e will be lar) 165.65 665.62 T
(ge variations in how the original err) 222.14 665.62 T
(or and r) 396.82 665.62 T
(ecovery) 435.45 665.62 T
(options ar) 99.65 651.62 T
(e pr) 148.52 651.62 T
(esented, and how the r) 167.3 651.62 T
(ecovery option is selected. A typical debug-) 277.84 651.62 T
(ger will usually pr) 99.65 637.62 T
(ovide many other options besides simply picking a r) 189.11 637.62 T
(estart or) 443.89 637.62 T
(r) 99.65 623.62 T
(eturning.) 103.79 623.62 T
-0.19 (First, we de\336ne a helper method that \336nds all available r) 126.65 609.62 P
-0.19 (estarts that match a) 399.15 609.62 P
(given set of sear) 99.65 595.62 T
(ch criteria. This method uses our own internal pr) 177.87 595.62 T
(otocol for selec-) 415.4 595.62 T
(tion based on the desirability of an interactive handler) 99.65 581.62 T
(, and also uses a general) 361.89 581.62 T
-0.27 (purpose pr) 99.65 567.62 P
-0.27 (otocol for \336ltering on type. This method is at the heart of our intr) 153.03 567.62 P
-0.27 (ospec-) 464.55 567.62 P
(tive r) 99.65 553.62 T
(ecovery pr) 124.82 553.62 T
(otocol, as it allows the handler to determine which inter) 176.43 553.62 T
(esting) 447.45 553.62 T
(r) 99.65 539.62 T
(estarts ar) 103.79 539.62 T
(e available.) 147.81 539.62 T
4 9 Q
(def) 99.65 518.95 T
(ine method collect-available-restarts \050original-error :: <integer-parse-) 115.85 518.95 T
(error>,) 99.65 507.95 T
(#key interactive = #t, type =) 326.45 496.95 T
(<restart>\051) 99.65 485.95 T
(let restarts = #\050\051) 110.45 474.95 T
(local) 110.45 463.95 T
(method maybe-collect-restart \050type, test, function, initargs\051) 121.25 452.95 T
6 F
(// Make an instance of the restart, so we can see if it matches our) 132.05 441.95 T
(// search criteria.) 132.05 430.95 T
4 F
(let instance = if \050initargs\051) 132.05 419.95 T
(apply \050make, type, condition: original-error,) 234.65 408.95 T
(initargs\051) 99.65 397.95 T
(else) 223.85 386.95 T
(make\050type, condition: original-error\051;) 234.65 375.95 T
(end;) 213.05 364.95 T
(let i-interactive = interactive? \050instance\051;) 132.05 353.95 T
6 F
(// If the condition passes the test specif) 132.05 342.95 T
(ied when the restart was) 358.85 342.95 T
(// established, and the desire for an interactive handler matches) 132.05 331.95 T
(// the interactivity of the restart, and the desired type matches) 132.05 320.95 T
(// the restart\325s type, then collect the restart instance.) 132.05 309.95 T
4 F
(if \050test \050instance\051 & if \050interactive\051 i-interactive else ~ i-) 132.05 298.95 T
(interactive end) 99.65 287.95 T
(& instance? \050instance, type\051\051) 153.65 276.95 T
(restarts := pair \050instance, restarts\051;) 153.65 265.95 T
(end;) 132.05 254.95 T
(end;) 121.25 243.95 T
6 F
(// The Dylan provided function do-handlers will call maybe-collect-restart) 110.45 232.95 T
(// for every handler which is currently established, in order \050f) 110.45 221.95 T
(irst is) 456.05 221.95 T
(closest) 99.65 210.95 T
(// to the signaller\051.) 110.45 199.95 T
4 F
(do-handlers \050maybe-collect-restart\051;) 110.45 188.95 T
6 F
(// Here we reverse the elements of the list of restart instances, since) 110.45 177.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "173" 175
%%Page: "174" 176
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(174) 63.65 702.62 T
0 9.5 Q
(10.5 Defining an error handler with recovery) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
6 9 Q
0 X
(// collecting them the way we did will reverse the order, and the order) 110.45 666.95 T
(// is signif) 110.45 655.95 T
(icant.) 175.25 655.95 T
4 F
(reverse! \050restarts\051;) 110.45 644.95 T
(end;) 99.65 633.95 T
1 11 Q
-0.16 (The following) 99.65 613.62 P
4 9.5 Q
-0.32 (interactive-handler) 170.22 613.62 P
1 11 Q
-0.16 ( method explains the curr) 278.52 613.62 P
-0.16 (ent situation to the) 402.39 613.62 P
(user) 99.65 599.62 T
(, and allows the user to pick the desir) 119.75 599.62 T
(ed r) 300.7 599.62 T
(ecovery option.) 319.58 599.62 T
4 9 Q
(def) 99.65 578.95 T
(ine method interactive-handler \050cond :: <integer-parse-error>, next-) 115.85 578.95 T
(handler,) 99.65 567.95 T
(where\051) 288.65 556.95 T
(format \050where, "The Following error has occurred:\134n"\051;) 110.45 545.95 T
(report \050cond, where\051;) 110.45 534.95 T
(format \050where, "How would you like to proceed?\134n\134n"\051;) 110.45 523.95 T
(let restarts = collect-available-restarts \050cond, interactive: t\051;) 110.45 512.95 T
6 F
(// The return-number variable will either contain the integer for) 110.45 501.95 T
(// the return option, or #f if the condition does not support it.) 110.45 490.95 T
4 F
-0.16 (let return-number = if \050return-allowed? \050cond\051\051 size \050restarts\051 + 1 else #f) 110.45 479.95 P
(end;) 218.45 468.95 T
(for \050restart in restarts,) 110.45 457.95 T
(restart-number from 1\051) 137.45 446.95 T
(format \050where, "%d) 121.25 435.95 T
(", restart-number\051;) 240.05 435.95 T
(report \050restart, where\051;) 121.25 424.95 T
(format \050where, "\134n"\051;) 121.25 413.95 T
(end;) 110.45 402.95 T
(if \050return-number\051) 110.45 391.95 T
(format \050where, "%d) 121.25 380.95 T
(", return-number\051) 240.05 380.95 T
6 F
-0.18 (// Since return descriptions may be strings, restarts, or false, dispatch) 121.25 369.95 P
(// to f) 121.25 358.95 T
(ind the best way to describe the return description.) 159.05 358.95 T
4 F
(show-return-description \050return-description \050cond\051, where\051;) 121.25 347.95 T
(format \050where, "\134n"\051;) 121.25 336.95 T
(end;) 110.45 325.95 T
(block \050return\051) 110.45 314.95 T
(while \050#t\051) 121.25 303.95 T
(let response = read-integer \050where, error-action: zero:,) 132.05 292.95 T
(prompt: "Enter an option number: "\051;) 288.65 281.95 T
(case) 132.05 270.95 T
6 F
(// If the user has picked a restart, signal it.) 142.85 259.95 T
4 F
(response > 0 & response < size \050restart\051 =>) 142.85 248.95 T
(signal \050restarts [response]\051;) 153.65 237.95 T
6 F
(// If the user is permitted to return and has chosen to do so, then) 142.85 226.95 T
(// return from the handler.) 142.85 215.95 T
4 F
(return-number & response = return-number =>) 142.85 204.95 T
(return \050#t\051;) 153.65 193.95 T
6 F
(// Otherwise, the user has picked an option that was not offered.) 142.85 182.95 T
(// Try to get a valid one again.) 142.85 171.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "174" 176
%%Page: "175" 177
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 451.91 702.62 T
2 11 Q
(175) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(otherwise format \050where, "Invalid option number.\134n"\051;) 142.85 666.95 T
(end;) 132.05 655.95 T
(end;) 121.25 644.95 T
(end;) 110.45 633.95 T
(end;) 99.65 622.95 T
1 11 Q
-0.14 (The) 99.65 602.62 P
4 9.5 Q
-0.29 (interactive-handler) 120.67 602.62 P
1 11 Q
-0.14 ( method uses) 228.97 602.62 P
4 9.5 Q
-0.29 (collect-available-restarts) 295.73 602.62 P
1 11 Q
-0.14 ( to \336nd all) 443.93 602.62 P
(the r) 99.65 588.62 T
(estarts that ar) 121.8 588.62 T
(e meant to be called fr) 187.64 588.62 T
(om the interactive handler) 294.66 588.62 T
(. Each interac-) 422.37 588.62 T
(tive r) 99.65 574.62 T
(estart is displayed to the user) 124.82 574.62 T
(, along with an option number so the user can) 266.33 574.62 T
(concisely r) 99.65 560.62 T
(efer to a speci\336c r) 151.17 560.62 T
(estart. By using option numbers, we minimize) 236.12 560.62 T
(assumptions about available user interface toolkits. Mor) 99.65 546.62 T
(e advanced user inter-) 371.98 546.62 T
(faces might, for example, take advantage of menus, and thus eliminate the need) 99.65 532.62 T
-0.17 (for option numbers. The case of r) 99.65 518.62 P
-0.17 (eturning fr) 259.35 518.62 P
-0.17 (om the handler is handled separately) 311.69 518.62 P
-0.17 (,) 490.32 518.62 P
(as that is how the Dylan r) 99.65 504.62 T
(ecovery framework is designed. Once the user selects a) 223.97 504.62 T
(valid r) 99.65 490.62 T
(ecovery option, the appr) 131.38 490.62 T
(opriate r) 250.43 490.62 T
(estart is invoked, or the handler r) 291.84 490.62 T
(eturns.) 453.43 490.62 T
(Next, we de\336ne the thr) 126.65 476.62 T
(ee ways to describe r) 238.22 476.62 T
(eturn descriptions.) 339.39 476.62 T
4 9 Q
(def) 99.65 455.95 T
(ine method show-return-description \050string :: <string>, where\051) 115.85 455.95 T
(format \050where, "%s", string\051;) 110.45 444.95 T
(end;) 99.65 433.95 T
(def) 99.65 414.95 T
(ine method show-return-description \050restart :: <restart>, where\051) 115.85 414.95 T
(report \050restart, where\051;) 110.45 403.95 T
(end;) 99.65 392.95 T
(def) 99.65 373.95 T
(ine method show-return-description \050false == #f, where\051) 115.85 373.95 T
(format \050where, "Return."\051;) 110.45 362.95 T
(end;) 99.65 351.95 T
1 11 Q
(The) 99.65 331.62 T
4 9.5 Q
(return-handler) 120.81 331.62 T
1 11 Q
( handler below always r) 200.61 331.62 T
(eturns to the signaler) 317.49 331.62 T
(, when that is) 419.37 331.62 T
(allowed.) 99.65 317.62 T
4 9 Q
(def) 99.65 296.95 T
(ine method return-handler \050cond :: <integer-parse-error>, next-handler\051) 115.85 296.95 T
(if \050return-allowed? \050cond\051\051 #t else next-handler \050\051 end;) 110.45 285.95 T
(end;) 99.65 274.95 T
3 13 Q
(10.5.3  An automatic introspective handler) 99.65 245.29 T
1 11 Q
-0.36 (It is possible to have an intr) 99.65 225.62 P
-0.36 (ospective handler that does not dir) 231.08 225.62 P
-0.36 (ectly interact with a) 398.38 225.62 P
(user) 99.65 211.62 T
(. The following de\336nition for) 119.75 211.62 T
4 9.5 Q
(zero-handler) 263.09 211.62 T
1 11 Q
( sear) 331.49 211.62 T
(ches for any r) 353.82 211.62 T
(estarts that ar) 419.46 211.62 T
(e) 485.3 211.62 T
(r) 99.65 197.62 T
(elated to r) 103.79 197.62 T
(eturning zer) 152.58 197.62 T
(o. If ther) 212.2 197.62 T
(e ar) 253.23 197.62 T
(e any) 270.9 197.62 T
(, then the \336rst r) 295.71 197.62 T
(estart is picked. If ther) 369.77 197.62 T
(e) 477.92 197.62 T
(ar) 99.65 183.62 T
(e no such r) 109.29 183.62 T
(estarts available,) 161.95 183.62 T
4 9.5 Q
(zero-handler) 245.49 183.62 T
1 11 Q
( declines to handle the condition.) 313.89 183.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "175" 177
%%Page: "176" 178
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(176) 63.65 702.62 T
0 9.5 Q
(10.6 Protected operations and the block construct) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine method zero-handler \050cond :: <integer-parse-error>, next-handler\051) 115.85 666.95 T
(let restarts = collect-available-restarts \050cond, type: <zero-return>\051) 110.45 655.95 T
(if \050zero? \050size \050restarts\051\051\051) 110.45 644.95 T
(next-handler \050\051;) 132.05 633.95 T
(else) 121.25 622.95 T
(signal \050f) 132.05 611.95 T
(irst \050restarts\051\051;) 180.65 611.95 T
(end;) 110.45 600.95 T
(end;) 99.65 589.95 T
3 15 Q
(10.6  Protected operations and the) 99.65 551.95 T
4 F
(block) 304.04 551.95 T
3 F
( construct) 349.04 551.95 T
1 11 Q
(In this section, we describe how to use) 99.65 531.62 T
4 9.5 Q
(block) 288.99 531.62 T
1 11 Q
( to pr) 317.49 531.62 T
(otect sections of Dylan code) 343.34 531.62 T
(fr) 99.65 517.62 T
(om unexpected non-local exits. Dylan pr) 107.46 517.62 T
(ovides powerful ways to execute non-) 304.15 517.62 T
(local exits fr) 99.65 503.62 T
(om a given execution context. An application may signal a condition) 158.15 503.62 T
(that might cause a handler to execute a non-local exit, or an application may call) 99.65 489.62 T
(an exit pr) 99.65 475.62 T
(ocedur) 145.54 475.62 T
(e named by the \336rst ar) 179.2 475.62 T
(gument to) 288.18 475.62 T
4 9.5 Q
(block) 340.99 475.62 T
1 11 Q
(. Sometimes it is conve-) 369.49 475.62 T
(nient to add some additional behavior to the non-local exit, to keep the applica-) 99.65 461.62 T
(tion\325s execution envir) 99.65 447.62 T
(onment in good shape. W) 204.23 447.62 T
(e would like to add this behavior) 328.24 447.62 T
(in certain cases, especially when we ar) 99.65 433.62 T
(e not sur) 285.92 433.62 T
(e that, for example, our err) 328.13 433.62 T
(or han-) 457.72 433.62 T
(dler might be selected during the pr) 99.65 419.62 T
(ocessing of an exception, and yet we must) 274.35 419.62 T
(perform some action during the non-local exit called for by the exception.) 99.65 405.62 T
3 13 Q
(10.6.1  Reading \337ight schedules) 99.65 374.29 T
1 11 Q
(The purpose of the following) 99.65 354.62 T
4 9.5 Q
(read-f) 243.85 354.62 T
(light-schedule) 278.05 354.62 T
1 11 Q
( method is to r) 357.85 354.62 T
(ead \337ight) 428.15 354.62 T
(information fr) 99.65 340.62 T
(om some sour) 168.23 340.62 T
(ce, verify that the \337ight information is corr) 236.55 340.62 T
(ect, and if) 443.11 340.62 T
-0.23 (it is, then r) 99.65 326.62 P
-0.23 (eturn a sequence of \337ight instances to its caller) 150.4 326.62 P
-0.23 (. If the \337ight information) 373.67 326.62 P
(has an err) 99.65 312.62 T
(or in it, then) 147.38 312.62 T
4 9.5 Q
(read-f) 209.53 312.62 T
(light-schedule) 243.73 312.62 T
1 11 Q
( should call the err) 323.53 312.62 T
(or function) 413.96 312.62 T
-0.44 (passed in via the) 99.65 298.62 P
4 9.5 Q
-0.91 (error-function) 182.1 298.62 P
1 11 Q
-0.44 ( parameter) 261.9 298.62 P
-0.44 (. The) 313.54 298.62 P
4 9.5 Q
-0.91 (read-f) 339.33 298.62 P
-0.91 (light-schedule) 373.53 298.62 P
1 11 Q
-0.44 ( method) 453.33 298.62 P
(must obtain the sour) 99.65 284.62 T
(ce of the of the \337ight information by calling) 199.98 284.62 T
4 9.5 Q
(open-f) 413.46 284.62 T
(light-) 447.66 284.62 T
(schedule-information-source) 99.65 270.62 T
1 11 Q
(, and must call) 253.55 270.62 T
4 9.5 Q
(close-f) 327.3 270.62 T
(light-schedule-infor-) 367.2 270.62 T
(mation-source) 99.65 256.62 T
1 11 Q
(when it is \336nished. If) 179.45 256.62 T
4 9.5 Q
(close-f) 284.53 256.62 T
(light-schedule-information-) 324.43 256.62 T
(source) 99.65 242.62 T
1 11 Q
(is not called befor) 139.55 242.62 T
(e) 225.6 242.62 T
4 9.5 Q
(read-f) 233.62 242.62 T
(light-schedule) 267.82 242.62 T
1 11 Q
( r) 347.62 242.62 T
(eturns, then the application) 354.52 242.62 T
(will be left in an inconsistent state, which might cause pr) 99.65 228.62 T
(oblems later in the pr) 374.91 228.62 T
(o-) 478.37 228.62 T
(gram\325s execution. The) 99.65 214.62 T
4 9.5 Q
(read-f) 209.38 214.62 T
(light) 243.58 214.62 T
1 11 Q
( method will use) 272.08 214.62 T
4 9.5 Q
(read-string) 356.12 214.62 T
1 11 Q
(, and) 418.82 214.62 T
4 9.5 Q
(read-) 445.7 214.62 T
-0.52 (integer) 99.65 200.62 P
1 11 Q
-0.25 ( to parse the characters fr) 139.55 200.62 P
-0.25 (om the schedule information sour) 260.48 200.62 P
-0.25 (ce into a list of) 423.98 200.62 P
-0.34 (init keywor) 99.65 186.62 P
-0.34 (ds and values for the particular \337ight instance to be cr) 155.27 186.62 P
-0.34 (eated. W) 413.76 186.62 P
-0.34 (e de\336ne) 455.25 186.62 P
4 9.5 Q
(read-f) 99.65 172.62 T
(light) 133.85 172.62 T
1 11 Q
( to signal the) 162.35 172.62 T
4 9.5 Q
(<end-of-data>) 227.28 172.62 T
1 11 Q
( exception when ther) 301.38 172.62 T
(e is no mor) 403.19 172.62 T
(e infor-) 456.84 172.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "176" 178
%%Page: "177" 179
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 451.91 702.62 T
2 11 Q
(177) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(mation left to r) 99.65 665.62 T
(ead. The) 171.76 665.62 T
4 9.5 Q
(verify-f) 215.92 665.62 T
(light) 261.52 665.62 T
1 11 Q
( method r) 290.02 665.62 T
(eturns tr) 337.36 665.62 T
(ue if the \337ight contains) 378.85 665.62 T
(sensible information otherwise it r) 99.65 651.62 T
(eturns whatever calling the) 266.28 651.62 T
4 9.5 Q
(error-function) 401.7 651.62 T
1 11 Q
(parameter on the \337ight pr) 99.65 637.62 T
(oduces. W) 225.2 637.62 T
(e will only r) 274.87 637.62 T
(eveal the de\336nition of the) 333.04 637.62 T
4 9.5 Q
(read-) 459.86 637.62 T
(f) 99.65 623.62 T
(light-schedule) 105.35 623.62 T
1 11 Q
( method her) 185.15 623.62 T
(e, as it is the only one r) 244.16 623.62 T
(elevant to pr) 355.05 623.62 T
(otecting code) 416.35 623.62 T
(fr) 99.65 609.62 T
(om non-local exits.) 107.46 609.62 T
4 9 Q
(def) 99.65 588.95 T
(ine method read-f) 115.85 588.95 T
(light-schedule \050error-function\051) 207.65 588.95 T
(let where = open-f) 110.45 577.95 T
(light-schedule-information-source \050\051;) 207.65 577.95 T
(let f) 110.45 566.95 T
(lights = #\050\051;) 137.45 566.95 T
(block \050return\051) 110.45 555.95 T
(while \050#t\051) 121.25 544.95 T
(let f) 132.05 533.95 T
(light = apply \050make, <f) 159.05 533.95 T
(light>, read-f) 283.25 533.95 T
(light \050where\051\051;) 358.85 533.95 T
(if \050verify-f) 132.05 522.95 T
(light \050f) 196.85 522.95 T
(light, error-function\051\051) 240.05 522.95 T
(f) 153.65 511.95 T
(lights := pair \050f) 159.05 511.95 T
(light, f) 250.85 511.95 T
(lights\051;) 294.05 511.95 T
(end;) 132.05 500.95 T
(end;) 121.25 489.95 T
(exception \050<end-of-data>\051) 110.45 478.95 T
(close-f) 121.25 467.95 T
(light-schedule-information-source \050where\051;) 159.05 467.95 T
(return \050f) 121.25 456.95 T
(lights\051;) 169.85 456.95 T
(end;) 110.45 445.95 T
(end;) 99.65 434.95 T
1 11 Q
(On the surface, this looks like a r) 99.65 414.62 T
(easonable de\336nition. However) 258.19 414.62 T
(, ther) 406.39 414.62 T
(e ar) 431.3 414.62 T
(e some) 448.96 414.62 T
(pr) 99.65 400.62 T
(oblems lurking. First, what happens if) 110.41 400.62 T
4 9.5 Q
(read-f) 298.25 400.62 T
(light) 332.45 400.62 T
1 11 Q
( encounters a parsing err) 360.95 400.62 T
(or) 481.51 400.62 T
(during its execution? Ther) 99.65 386.62 T
(e might be a handler established by the caller of) 227.14 386.62 T
4 9.5 Q
(read-) 461.7 386.62 T
(f) 99.65 372.62 T
(light-schedule) 105.35 372.62 T
1 11 Q
( that might perform some non-local exit. Second, the pr) 185.15 372.62 T
(ovided) 453.16 372.62 T
4 9.5 Q
(error-function) 99.65 358.62 T
1 11 Q
( could perform a non-local exit as well. How do we ensur) 179.45 358.62 T
(e that) 457.97 358.62 T
(the) 99.65 344.62 T
4 9.5 Q
(close-f) 117.65 344.62 T
(light-schedule-information-source) 157.55 344.62 T
1 11 Q
( method is pr) 345.65 344.62 T
(operly executed) 410.23 344.62 T
(prior to exiting fr) 99.65 330.62 T
(om) 183.26 330.62 T
4 9.5 Q
(read-f) 201.73 330.62 T
(light-schedule) 235.93 330.62 T
1 11 Q
(, even in the face of these pr) 315.73 330.62 T
(oblems?) 450.68 330.62 T
(The) 99.65 316.62 T
4 9.5 Q
(block) 120.81 316.62 T
1 11 Q
( constr) 149.31 316.62 T
(uct pr) 181.86 316.62 T
(ovides a) 210.47 316.62 T
4 9.5 Q
(cleanup) 253.55 316.62 T
1 11 Q
( clause for just such situations.) 293.45 316.62 T
3 13 Q
(10.6.2  The) 99.65 285.29 T
4 F
(cleanup) 157.13 285.29 T
3 F
( clause of) 211.73 285.29 T
4 F
(block) 263.88 285.29 T
1 11 Q
(Below we use the) 99.65 265.62 T
4 9.5 Q
(cleanup) 187.29 265.62 T
1 11 Q
( clause of) 227.18 265.62 T
4 9.5 Q
(block) 275.26 265.62 T
1 11 Q
( to ensur) 303.76 265.62 T
(e that the \337ight schedule infor-) 345.96 265.62 T
(mation sour) 99.65 251.62 T
(ce is pr) 158.26 251.62 T
(operly closed befor) 192.53 251.62 T
(e) 285.49 251.62 T
4 9.5 Q
(read-f) 293.51 251.62 T
(light-schedule) 327.71 251.62 T
1 11 Q
( r) 407.51 251.62 T
(eturns.) 414.41 251.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "177" 179
%%Page: "178" 180
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(178) 63.65 702.62 T
0 9.5 Q
(10.7 Summary) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine method read-f) 115.85 666.95 T
(light-schedule \050error-function\051) 207.65 666.95 T
(let where = open-f) 110.45 655.95 T
(light-schedule-information-source \050\051;) 207.65 655.95 T
(let f) 110.45 644.95 T
(lights = #\050\051;) 137.45 644.95 T
(block \050return\051) 110.45 633.95 T
(while \050#t\051) 121.25 622.95 T
(let f) 132.05 611.95 T
(light = apply \050make, <f) 159.05 611.95 T
(light>, read-f) 283.25 611.95 T
(light \050where\051\051;) 358.85 611.95 T
(if \050verify-f) 132.05 600.95 T
(light \050f) 196.85 600.95 T
(light, error-function\051\051) 240.05 600.95 T
(f) 153.65 589.95 T
(lights := pair \050f) 159.05 589.95 T
(light, f) 250.85 589.95 T
(lights\051;) 294.05 589.95 T
(end;) 121.25 578.95 T
(cleanup) 110.45 567.95 T
(close-f) 121.25 556.95 T
(light-schedule-information-source \050where\051;) 159.05 556.95 T
(exception \050<end-of-data>\051) 110.45 545.95 T
(return \050f) 121.25 534.95 T
(lights\051;) 169.85 534.95 T
(end;) 110.45 523.95 T
(end;) 99.65 512.95 T
1 11 Q
(The) 99.65 492.62 T
4 9.5 Q
(cleanup) 120.81 492.62 T
1 11 Q
( clause in the) 160.71 492.62 T
4 9.5 Q
(block) 226.72 492.62 T
1 11 Q
( will ensur) 255.22 492.62 T
(e that) 306.61 492.62 T
4 9.5 Q
( close-f) 333.71 492.62 T
(light-schedule-) 379.31 492.62 T
(information-source) 99.65 478.62 T
1 11 Q
( will be called befor) 202.25 478.62 T
(e the) 297.32 478.62 T
4 9.5 Q
(block) 323.35 478.62 T
1 11 Q
( is exited for any r) 351.85 478.62 T
(eason. The) 439.36 478.62 T
(call to) 99.65 464.62 T
4 9.5 Q
(close-f) 131.53 464.62 T
(light-schedule-information-source) 171.43 464.62 T
1 11 Q
( is pr) 359.53 464.62 T
(otected against any) 383.65 464.62 T
(non-local exits within the block. Note that this is mor) 99.65 450.62 T
(e powerful than simply) 356.98 450.62 T
(establishing a handler for) 99.65 436.62 T
4 9.5 Q
(<condition>) 226.29 436.62 T
1 11 Q
(.) 288.99 436.62 T
3 15 Q
(10.7  Summary) 99.65 396.95 T
1 11 Q
(In this chapter) 99.65 376.62 T
(, we cover) 168.89 376.62 T
(ed the following:) 218.11 376.62 T
(\245) 108.65 356.62 T
(W) 126.65 356.62 T
(e described how to de\336ne condition classes and signal them in various) 136.64 356.62 T
(ways.) 126.65 342.62 T
(\245) 108.65 322.62 T
(W) 126.65 322.62 T
(e explor) 136.64 322.62 T
(ed establishing simple err) 175.57 322.62 T
(or handlers using the) 300.51 322.62 T
4 9.5 Q
(exception) 406.64 322.62 T
1 11 Q
( clause) 457.94 322.62 T
(of) 126.65 308.62 T
4 9.5 Q
(block) 139.07 308.62 T
1 11 Q
(.) 167.57 308.62 T
(\245) 108.65 288.62 T
(W) 126.65 288.62 T
(e showed how to design and implement an entir) 136.64 288.62 T
(e intr) 371.78 288.62 T
(ospective r) 397.14 288.62 T
(ecovery) 449.74 288.62 T
(pr) 126.65 274.62 T
(otocol using) 137.41 274.62 T
4 9.5 Q
(let handler) 199.61 274.62 T
1 11 Q
( and r) 262.31 274.62 T
(estarts.) 290.58 274.62 T
(\245) 108.65 254.62 T
(Finally) 126.65 254.62 T
(, we showed how to pr) 159.16 254.62 T
(otect sections of code fr) 270.27 254.62 T
(om unexpected non-) 383.64 254.62 T
(local exits using the) 126.65 240.62 T
4 9.5 Q
(cleanup) 225.11 240.62 T
1 11 Q
( clause pr) 265.01 240.62 T
(ovided by) 311.42 240.62 T
4 9.5 Q
(block) 363.25 240.62 T
1 11 Q
(.) 391.75 240.62 T
(Y) 99.65 220.62 T
(ou can use these techniques to contr) 105.97 220.62 T
(ol the handling of exceptional situations) 280.74 220.62 T
-0.48 (when they arise. By car) 99.65 206.62 P
-0.48 (efully designing your condition classes and handling those) 210.45 206.62 P
-0.01 (conditions corr) 99.65 192.62 P
-0.01 (ectly) 172.84 192.62 P
-0.01 (, you can make your pr) 194.68 192.62 P
-0.01 (ogram signi\336cantly mor) 307.13 192.62 P
-0.01 (e bullet-pr) 424.08 192.62 P
-0.01 (oof,) 474.48 192.62 P
(while not interr) 99.65 178.62 T
(upting the normal \337ow of contr) 175.45 178.62 T
(ol. By pr) 328.73 178.62 T
(oviding r) 369.79 178.62 T
(ecovery pr) 414.55 178.62 T
(oto-) 466.16 178.62 T
(cols, you make it possible to cleanly continue after a pr) 99.65 164.62 T
(oblem has been detected.) 365.66 164.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "178" 180
%%Page: "179" 181
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 451.91 702.62 T
2 11 Q
(179) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(By pr) 99.65 665.62 T
(otecting critical code against unexpected non-local exits, you enhance the) 125.99 665.62 T
(r) 99.65 651.62 T
(eliability of your application, and thus incr) 103.79 651.62 T
(ease the satisfaction r) 311.62 651.62 T
(ealized by your) 414.83 651.62 T
(users.) 99.65 637.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "179" 181
%%Page: "180" 182
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(180) 63.65 702.62 T
0 9.5 Q
(10.7 Summary) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "180" 182
%%Page: "181" 183
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(181) 289.4 135.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(1) 171.65 652.95 T
(1) 185 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(1) 99.65 591.4 T
(1) 100.54 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Libraries and Modules) 101.54 591.4 T
99.65 159.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(As you cr) 99.65 449.62 T
(eate a pr) 146.16 449.62 T
(ogram, you will often discover subsets of your code that ar) 187.54 449.62 T
(e) 473.16 449.62 T
-0.25 (candidates for sharing or r) 99.65 435.62 P
-0.25 (euse. Alternatively) 227.23 435.62 P
-0.25 (, you may be working on a lar) 317.54 435.62 P
-0.25 (ge pr) 461.34 435.62 P
-0.25 (o-) 485.98 435.62 P
-0.23 (gram that has been divided into pieces that can be implemented separately) 99.65 421.62 P
-0.23 (, either) 459.8 421.62 P
(to allow parallel development, or to make the pr) 99.65 407.62 T
(ogramming task mor) 334.72 407.62 T
(e manage-) 437.06 407.62 T
(able. For either of these r) 99.65 393.62 T
(easons, you can package your code into a) 219.75 393.62 T
2 F
(reusable soft-) 423.21 393.62 T
(ware component) 99.65 379.62 T
1 F
( so that:) 183.06 379.62 T
(\245) 108.65 359.62 T
(Y) 126.65 359.62 T
(ou can develop your component independently fr) 132.97 359.62 T
(om any clients.) 375.15 359.62 T
(\245) 108.65 339.62 T
(Other pr) 126.65 339.62 T
(ogrammers can easily add your component to their pr) 168.4 339.62 T
(ograms) 430.89 339.62 T
(\050which ar) 126.65 325.62 T
(e called client pr) 172.77 325.62 T
(ograms of your component\051.) 252.37 325.62 T
(\245) 108.65 305.62 T
(Clients can use your code without knowing or depending on the internal) 126.65 305.62 T
(implementation of your component.) 126.65 291.62 T
-0.41 (T) 99.65 271.62 P
-0.41 (wo important principles of softwar) 105.4 271.62 P
-0.41 (e engineering apply her) 273.67 271.62 P
-0.41 (e: information hiding,) 387.8 271.62 P
(and pr) 99.65 257.62 T
(otocols. The principle of information hiding says that you should try to) 131.78 257.62 T
(minimize the information that is passed between components in a system, thus) 99.65 243.62 T
(minimizing the inter) 99.65 229.62 T
(-dependencies of components. A) 199.66 229.62 T
2 F
(protocol) 361.52 229.62 T
1 F
( is the interface) 403.08 229.62 T
(de\336nition of a softwar) 99.65 215.62 T
(e component. The purpose of establishing pr) 207.25 215.62 T
(otocols is to) 423.92 215.62 T
(de\336ne a uniform interface between components that clients can use, even if the) 99.65 201.62 T
(implementation of any component is enhanced or modi\336ed. Dylan supports the) 99.65 187.62 T
-0.05 (concept of softwar) 99.65 173.62 P
-0.05 (e components and pr) 189.09 173.62 P
-0.05 (otocols in terms of) 291.37 173.62 P
2 F
-0.05 (libraries) 383.35 173.62 P
1 F
-0.05 ( and) 425.5 173.62 P
2 F
-0.05 (modules) 449.51 173.62 P
1 F
-0.05 (.) 492.9 173.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "181" 183
%%Page: "182" 184
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(182) 63.65 702.62 T
0 9.5 Q
(11.1 Libraries) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(In this chapter) 126.65 665.62 T
(, we consider the time classes and methods we have de\336ned) 195.89 665.62 T
(and show how they might be packaged into a r) 99.65 651.62 T
(eusable softwar) 328.15 651.62 T
(e component. W) 404.26 651.62 T
(e) 482.65 651.62 T
(also show how the sixty-unit classes and methods could be a component sub-) 99.65 637.62 T
(strate that the time library uses and shar) 99.65 623.62 T
(es with an angle library) 295.3 623.62 T
(. Finally) 408.56 623.62 T
(, we illus-) 446.58 623.62 T
-0.03 (trate how important it is to design good pr) 99.65 609.62 P
-0.03 (otocols, by showing that to implement) 306.44 609.62 P
(a say pr) 99.65 595.62 T
(otocol that works with either or both of the time and angle libraries, we) 137.69 595.62 T
(need to cr) 99.65 581.62 T
(eate a separate library de\336ning the shar) 147.43 581.62 T
(ed pr) 339.33 581.62 T
(otocol.) 364.83 581.62 T
3 15 Q
(1) 99.65 541.95 T
(1.1  Libraries) 105.81 541.95 T
1 11 Q
(Each softwar) 99.65 521.62 T
(e component is a library) 162.65 521.62 T
(. In each Dylan implementation, a library is) 278.73 521.62 T
(associated with implementation-speci\336c export information. The library export) 99.65 507.62 T
(information completely describes whatever implementation-speci\336c information) 99.65 493.62 T
(is needed for other softwar) 99.65 479.62 T
(e components to use the library) 230.53 479.62 T
(. Thus, you can use) 382.07 479.62 T
-0.06 (libraries to deliver components in compiled form, keeping the implementation of) 99.65 465.62 P
(the library con\336dential.) 99.65 451.62 T
3 15 Q
(1) 99.65 276.95 T
(1.2  Modules) 105.81 276.95 T
1 11 Q
(A library speci\336es its interface in terms of the modules it exports. Additional) 99.65 256.62 T
(modules make up the implementation of each library) 99.65 242.62 T
(. Each module speci\336es an) 357.16 242.62 T
(independent) 99.65 228.62 T
2 F
(namespace) 164.25 228.62 T
1 F
( \050or dictionary\051 for Dylan variables and contr) 219.24 228.62 T
(ols the visi-) 437.5 228.62 T
(bility of the names within a module fr) 99.65 214.62 T
(om outside the module. Y) 283.58 214.62 T
(ou can use mod-) 408.25 214.62 T
(ules both for information hiding and to pr) 99.65 200.62 T
(event name clashes between modules.) 303.8 200.62 T
(For instance,) 99.65 186.62 T
0 F
([--- need example of name overloading]) 164.27 186.62 T
1 F
(.) 336.29 186.62 T
2 F
(Comparison with C++:) 132.65 417.62 T
1 F
( Dylan libraries ar) 247.1 417.62 T
(e similar to C++ libraries in) 334.54 417.62 T
(that they both ar) 132.65 403.62 T
(e potentially shar) 213.07 403.62 T
(ed components of many pr) 297.23 403.62 T
(ograms.) 427.92 403.62 T
(Unlike C++ libraries, Dylan libraries include all the information) 132.65 389.62 T
(needed to be used by another Dylan library \321 ther) 132.65 375.62 T
(e is no companion) 379.92 375.62 T
-0.1 (header \336le that must be kept up to date. A Dylan library may also be a) 132.65 361.62 P
(complete pr) 132.65 347.62 T
(ogram, which simply means it has a distinguished entry) 190.7 347.62 T
(point and is used only by the executive or command pr) 132.65 333.62 T
(ocessor) 400.96 333.62 T
(.) 435.98 333.62 T
126.65 430.83 126.65 326.08 2 L
V
0.25 H
0 Z
N
477.65 430.83 477.65 326.08 2 L
V
N
126.52 430.95 477.77 430.95 2 L
V
N
126.52 325.95 477.77 325.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "182" 184
%%Page: "183" 185
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11 Libraries and Modules) 407.56 702.62 T
2 11 Q
(183) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 15 Q
0 X
(1) 99.65 476.95 T
(1.3  Module declaration) 105.81 476.95 T
1 11 Q
(First, let\325s examine what the interface pr) 99.65 456.62 T
(otocol of our time library might be. W) 294.41 456.62 T
(e) 477.67 456.62 T
(have de\336ned two kinds of time that can be cr) 99.65 442.62 T
(eated:) 318.37 442.62 T
4 9.5 Q
(<time-of-day>) 350.22 442.62 T
1 11 Q
( and) 424.32 442.62 T
4 9.5 Q
(<time-) 448.44 442.62 T
-0.26 (offset>) 99.65 428.62 P
1 11 Q
-0.12 (. W) 139.55 428.62 P
-0.12 (e have two generic functions for manipulating those times,) 154.91 428.62 P
4 9.5 Q
-0.26 (say) 442.07 428.62 P
1 11 Q
-0.12 (, and) 457.95 428.62 P
4 9.5 Q
-0.26 (+) 484.57 428.62 P
1 11 Q
-0.12 (;) 490.27 428.62 P
(and one, per) 99.65 414.62 T
(haps not so obvious, utility function for cr) 160.23 414.62 T
(eating new times,) 364.22 414.62 T
4 9.5 Q
(encode-) 452.57 414.62 T
(total-seconds) 99.65 400.62 T
1 11 Q
(. These \336ve items de\336ne the external pr) 173.75 400.62 T
(otocol of the time library) 364.25 400.62 T
(.) 483.2 400.62 T
(Note that the) 99.65 386.62 T
4 9.5 Q
(<time>) 166.23 386.62 T
1 11 Q
( class is used only internally as a specializer for one of the) 200.43 386.62 T
4 9.5 Q
(say) 99.65 372.62 T
1 11 Q
( methods, so it is not part of the library pr) 116.75 372.62 T
(otocol. Similarly) 319.19 372.62 T
(, the) 397.41 372.62 T
4 9.5 Q
(<sixty-unit>) 420.92 372.62 T
1 11 Q
(class and several other functions ar) 99.65 358.62 T
(e not part of the library pr) 270.09 358.62 T
(otocol, but ar) 396.37 358.62 T
(e used) 460.26 358.62 T
(internally in the library) 99.65 344.62 T
(.) 211.55 344.62 T
3 13 Q
(1) 99.65 313.29 T
(1.3.1  Roles of modules) 104.99 313.29 T
1 11 Q
(In our experience, we have found it useful to consider modules as having thr) 99.65 293.62 T
(ee) 472.97 293.62 T
(distinct r) 99.65 279.62 T
(oles: interface, implementor) 142.79 279.62 T
(, or client. These r) 277.55 279.62 T
(oles lead to a simple, low-) 363.44 279.62 T
(maintenance, str) 99.65 265.62 T
(uctur) 179.78 265.62 T
(e. An) 205.67 265.62 T
2 F
(interface module) 234.15 265.62 T
1 F
( cr) 319.38 265.62 T
(eates names that ar) 331.17 265.62 T
(e to be visible) 423.97 265.62 T
(at a library interface. An) 99.65 251.62 T
2 F
(implementation module) 220.6 251.62 T
1 F
( uses an interface module to) 342.51 251.62 T
(give de\336nitions for some or all of the interface names. A) 99.65 237.62 T
2 F
(client module) 374.63 237.62 T
1 F
( uses an) 443.97 237.62 T
(interface module to utilize the de\336nitions in the interface. It is possible for a mod-) 99.65 223.62 T
(ule to play mor) 99.65 209.62 T
(e than one r) 173.89 209.62 T
(ole \321 for example, a client module may also imple-) 231.12 209.62 T
(ment a higher) 99.65 195.62 T
(-level interface. W) 167.15 195.62 T
(e r) 254.33 195.62 T
(ecommend thinking of modules as having) 266.5 195.62 T
(these r) 99.65 181.62 T
(oles, and in this chapter we use our design convention.) 131.74 181.62 T
2 F
(Comparison with C++:) 132.65 645.62 T
1 F
( Dylan modules ar) 247.1 645.62 T
(e similar to the pr) 336.94 645.62 T
(oposed) 422.64 645.62 T
(C++ namespaces in that they eliminate the pr) 132.65 631.62 T
(oblem of global) 352.91 631.62 T
(namespace pollution or clashes between names used in individual) 132.65 617.62 T
-0.44 (libraries. Unlike C++ namespaces, Dylan modules also de\336ne a level of) 132.65 603.62 P
-0.19 (access contr) 132.65 589.62 P
-0.19 (ol: each module decides what names ar) 190.09 589.62 P
-0.19 (e externally visible,) 379.57 589.62 P
(and no module can cr) 132.65 575.62 T
(eate or access names in another module, unless) 238.04 575.62 T
-0.17 (that module explicitly exports those names. In contrast, the C++) 132.65 561.62 P
4 9.5 Q
-0.36 (using) 444.57 561.62 P
1 11 Q
-0.22 (declaration allows the client of a namespace to access any name in that) 132.65 547.62 P
(namespace.) 132.65 533.62 T
126.65 658.83 126.65 526.08 2 L
V
0.25 H
0 Z
N
477.65 658.83 477.65 526.08 2 L
V
N
126.52 658.95 477.77 658.95 2 L
V
N
126.52 525.95 477.77 525.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "183" 185
%%Page: "184" 186
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(184) 63.65 702.62 T
0 9.5 Q
(11.3 Module declaration) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(1) 99.65 664.29 T
(1.3.2  The interface module) 104.99 664.29 T
1 11 Q
(W) 99.65 644.62 T
(e can now write a \336rst draft of the interface module for our library:) 109.64 644.62 T
6 9 Q
(// Time Library Interface) 99.65 623.95 T
4 F
(def) 99.65 612.95 T
(ine module time-library) 115.85 612.95 T
6 F
(// Classes) 110.45 601.95 T
4 F
(create <time-of-day>, <time-offset>;) 110.45 590.95 T
6 F
(// Generics) 110.45 579.95 T
4 F
(create say, \134+, encode-total-seconds;) 110.45 568.95 T
(end;) 99.65 557.95 T
1 11 Q
(In the pr) 99.65 537.62 T
(eceding de\336nition, the) 141.27 537.62 T
4 9.5 Q
(time-library) 252.83 537.62 T
1 11 Q
( interface module cr) 321.23 537.62 T
(eates and) 418.18 537.62 T
-0.28 (exports \050makes visible\051 two classes and thr) 99.65 523.62 P
-0.28 (ee functions. W) 305.43 523.62 P
-0.28 (e use the) 379.09 523.62 P
4 9.5 Q
-0.57 (create) 423.6 523.62 P
1 11 Q
-0.28 ( clause,) 457.8 523.62 P
(because we do not intend to de\336ne any implementations in the time library inter-) 99.65 509.62 T
(face module itself \321 we r) 99.65 495.62 T
(eserve those for an implementation module, which will) 223.43 495.62 T
(use the time library module as its interface.) 99.65 481.62 T
3 13 Q
(1) 99.65 450.29 T
(1.3.3  Special consideration for the + generic function) 104.99 450.29 T
1 11 Q
(W) 99.65 430.62 T
(e have alr) 109.64 430.62 T
(eady shown that when naming an operator) 156.64 430.62 T
(, such as) 365.8 430.62 T
4 9.5 Q
(+) 409.55 430.62 T
1 11 Q
(, we have to) 415.25 430.62 T
(escape its name,) 99.65 416.62 T
4 9.5 Q
(\134+) 181.18 416.62 T
1 11 Q
(, to clarify that we ar) 192.58 416.62 T
(e using the name of the operator) 292.75 416.62 T
(, and not) 449.45 416.62 T
(performing the operation. But the) 99.65 402.62 T
4 9.5 Q
(+) 266.2 402.62 T
1 11 Q
( operator draws our attention to a subtle) 271.9 402.62 T
(point. W) 99.65 388.62 T
(e do not want to cr) 140.94 388.62 T
(eate a new) 231.97 388.62 T
4 9.5 Q
(+) 286.19 388.62 T
1 11 Q
( operation, we simply want to extend the) 291.89 388.62 T
(built-in Dylan) 99.65 374.62 T
4 9.5 Q
(+) 170.85 374.62 T
1 11 Q
( operation with a new set of methods that know how to handle) 176.55 374.62 T
-0.23 (the addition of time values. This consideration leads to a second draft of our inter-) 99.65 360.62 P
(face module:) 99.65 346.62 T
6 9 Q
(// Time Library Interface) 99.65 325.95 T
4 F
(def) 99.65 314.95 T
(ine module time-library) 115.85 314.95 T
6 F
(// Classes) 110.45 303.95 T
4 F
(create <time-of-day>, <time-offset>;) 110.45 292.95 T
6 F
(// Generics) 110.45 281.95 T
4 F
(create say, encode-total-seconds;) 110.45 270.95 T
6 F
(// Methods) 110.45 259.95 T
4 F
(use dylan, import: { \134+ }, export: all;) 110.45 248.95 T
(end;) 99.65 237.95 T
1 11 Q
(In the pr) 99.65 217.62 T
(eceding de\336nition, we state that clients of our time library will see our) 141.27 217.62 T
(time classes and the) 99.65 203.62 T
4 9.5 Q
(say) 199.14 203.62 T
1 11 Q
( and) 216.24 203.62 T
4 9.5 Q
(encode-total-seconds) 240.37 203.62 T
1 11 Q
( generic functions, and they) 354.37 203.62 T
(will also see the Dylan) 99.65 189.62 T
4 9.5 Q
(+) 211.74 189.62 T
1 11 Q
( generic function. This is a subtle point because most) 217.44 189.62 T
(Dylan pr) 99.65 175.62 T
(ograms ar) 142.89 175.62 T
(e alr) 191.63 175.62 T
(eady using the) 212.5 175.62 T
4 9.5 Q
(dylan) 286.63 175.62 T
1 11 Q
( module and hence alr) 315.13 175.62 T
(eady see the) 423.37 175.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "184" 186
%%Page: "185" 187
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11 Libraries and Modules) 407.56 702.62 T
2 11 Q
(185) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(Dylan) 99.65 665.62 T
4 9.5 Q
(+) 132.13 665.62 T
1 11 Q
( generic function. In fact, our implementation module will do just that,) 137.83 665.62 T
(and it would take additional module trickery to cr) 99.65 651.62 T
(eate a dif) 343.33 651.62 T
(fer) 387.34 651.62 T
(ent) 400.42 651.62 T
4 9.5 Q
(+) 418.43 651.62 T
1 11 Q
( generic func-) 424.13 651.62 T
(tion for our time library \050although it can be done, if ther) 99.65 637.62 T
(e is a need\051.) 370.5 637.62 T
(The important point her) 126.65 623.62 T
(e is that we ar) 243.89 623.62 T
(e documenting in one place what we) 311.18 623.62 T
(expect the interface to our library to be, and that we in fact do plan to add meth-) 99.65 609.62 T
(ods to the Dylan) 99.65 595.62 T
4 9.5 Q
(+) 182.62 595.62 T
1 11 Q
( generic function, and we expect them to be visible as part of) 188.32 595.62 T
(our library interface. \050Note that in our implementation we may actually add) 99.65 581.62 T
(methods to other Dylan generic functions, such as) 99.65 567.62 T
4 9.5 Q
(initialize) 345.37 567.62 T
1 11 Q
(, but we do not) 402.37 567.62 T
(expect those to be called dir) 99.65 553.62 T
(ectly by clients of our library) 234.41 553.62 T
(, and hence do not docu-) 372.84 553.62 T
(ment them in our interface module.\051) 99.65 539.62 T
3 13 Q
(1) 99.65 508.29 T
(1.3.4  The implementation module) 104.99 508.29 T
1 11 Q
(Our) 99.65 488.62 T
4 9.5 Q
(time-library) 122.02 488.62 T
1 11 Q
( interface module speci\336es the names that ar) 190.42 488.62 T
(e visible to clients) 406.08 488.62 T
(of our library) 99.65 474.62 T
(. It also serves to specify the names that must be de\336ned in our) 163.37 474.62 T
(implementation. T) 99.65 460.62 T
(o pr) 188.54 460.62 T
(epar) 208.05 460.62 T
(e to de\336ne those names, we cr) 229.58 460.62 T
(eate a separate imple-) 374.96 460.62 T
(mentation module:) 99.65 446.62 T
4 9 Q
(def) 99.65 425.95 T
(ine module time-library-implementation) 115.85 425.95 T
6 F
(// External interface) 110.45 414.95 T
4 F
(use time-library;) 110.45 403.95 T
6 F
(// Substrate) 110.45 392.95 T
4 F
(use format, dylan;) 110.45 381.95 T
(end;) 99.65 370.95 T
1 11 Q
(In the pr) 99.65 350.62 T
(eceding de\336nition, the implementation module uses the) 141.27 350.62 T
4 9.5 Q
(time-library) 415.52 350.62 T
1 11 Q
(interface module for the purpose of de\336ning the objects that make up the inter-) 99.65 336.62 T
-0.11 (face. The implementation module also uses the) 99.65 322.62 P
4 9.5 Q
-0.24 (dylan) 329.64 322.62 P
1 11 Q
-0.11 ( module, because we expect) 358.14 322.62 P
-0.01 (to write Dylan code; and it uses the) 99.65 308.62 P
4 9.5 Q
-0.01 (format) 274.02 308.62 P
1 11 Q
-0.01 ( module, because the) 308.22 308.62 P
4 9.5 Q
-0.01 (say) 413.04 308.62 P
1 11 Q
-0.01 ( methods ar) 430.14 308.62 P
-0.01 (e) 487.64 308.62 P
(implemented using) 99.65 294.62 T
4 9.5 Q
(format) 197.12 294.62 T
1 11 Q
(. Note that, unlike the interface module, wher) 231.32 294.62 T
(e only) 452.63 294.62 T
4 9.5 Q
(+) 485.12 294.62 T
1 11 Q
(was imported fr) 99.65 280.62 T
(om Dylan, her) 177.75 280.62 T
(e the unmodi\336ed) 247.27 280.62 T
4 9.5 Q
(use) 333.36 280.62 T
1 11 Q
( clause by default imports all) 350.46 280.62 T
(the names exported fr) 99.65 266.62 T
(om the) 206 266.62 T
4 9.5 Q
(dylan) 242.47 266.62 T
1 11 Q
( module \050that is, all the names de\336ned by the) 270.97 266.62 T
(cor) 99.65 252.62 T
(e language\051.) 114.68 252.62 T
(If we had used our \336rst version of our) 126.65 238.62 T
4 9.5 Q
(time-library) 314.11 238.62 T
1 11 Q
( interface module) 382.51 238.62 T
(\050de\336ned in Section 1) 99.65 224.62 T
(1.3.2\051, we would have gotten an err) 198.22 224.62 T
(or at this point, because) 369.32 224.62 T
(we would be trying to use two dif) 99.65 210.62 T
(fer) 264.51 210.62 T
(ent de\336nitions of) 277.58 210.62 T
4 9.5 Q
(+) 362.87 210.62 T
1 11 Q
(: one fr) 368.57 210.62 T
(om) 402.3 210.62 T
4 9.5 Q
(dylan) 420.77 210.62 T
1 11 Q
(, and) 449.27 210.62 T
(another fr) 99.65 196.62 T
(om) 147.72 196.62 T
4 9.5 Q
(time-library) 166.19 196.62 T
1 11 Q
(. However) 233.37 196.62 T
(, the second version of the) 283.48 196.62 T
4 9.5 Q
(time-library) 412.96 196.62 T
1 11 Q
-0.11 (interface module \050de\336ned in Section 1) 99.65 182.62 P
-0.11 (1.3.3\051 has no such con\337ict, because we have) 282.81 182.62 P
(speci\336ed that the) 99.65 168.62 T
4 9.5 Q
(+) 185.5 168.62 T
1 11 Q
( fr) 191.2 168.62 T
(om) 201.76 168.62 T
4 9.5 Q
(time-library) 220.23 168.62 T
1 11 Q
( is the) 288.63 168.62 T
4 9.5 Q
(+) 320 168.62 T
1 11 Q
( fr) 325.7 168.62 T
(om) 336.26 168.62 T
4 9.5 Q
(dylan) 354.73 168.62 T
1 11 Q
(.) 383.23 168.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "185" 187
%%Page: "186" 188
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(186) 63.65 702.62 T
0 9.5 Q
(11.3 Module declaration) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(In a mor) 126.65 665.62 T
(e complicated library than the time library) 167.62 665.62 T
(, we might decompose) 372.24 665.62 T
-0.41 (the constr) 99.65 651.62 P
-0.41 (uction of the library into several implementation modules. For example,) 147.05 651.62 P
(we might want to assign the implementation of the) 99.65 637.62 T
4 9.5 Q
(<sixty-unit>) 350.5 637.62 T
1 11 Q
( substrate to) 418.9 637.62 T
(another pr) 99.65 623.62 T
(ogrammer) 150.67 623.62 T
(. In that case, we might use the following module declara-) 200.86 623.62 T
(tions:) 99.65 609.62 T
4 9 Q
(def) 99.65 588.95 T
(ine module sixty-unit) 115.85 588.95 T
6 F
(// External interface) 110.45 577.95 T
4 F
(use time-library;) 110.45 566.95 T
6 F
(// Internal interface) 110.45 555.95 T
4 F
(export <sixty-unit>, total-seconds, decode-total-seconds;) 110.45 544.95 T
6 F
(// Substrate) 110.45 533.95 T
4 F
(use dylan;) 110.45 522.95 T
(end;) 99.65 511.95 T
(def) 99.65 492.95 T
(ine module time-library-implementation) 115.85 492.95 T
6 F
(// External interface) 110.45 481.95 T
4 F
(use time-library;) 110.45 470.95 T
6 F
(// Substrate) 110.45 459.95 T
4 F
(use sixty-unit, format, dylan;) 110.45 448.95 T
(end;) 99.65 437.95 T
1 11 Q
(Her) 99.65 417.62 T
(e, because) 118.22 417.62 T
4 9.5 Q
(sixty-unit) 170.04 417.62 T
1 11 Q
( is an internal interface, we for) 227.04 417.62 T
(go the formality of cr) 374.34 417.62 T
(eat-) 476.75 417.62 T
(ing a separate implementation module and simply export the de\336nitions we) 99.65 403.62 T
(expect to be used by other modules within the library) 99.65 389.62 T
(. Note that we use) 358.73 389.62 T
4 9.5 Q
(time-) 449.32 389.62 T
(library) 99.65 375.62 T
1 11 Q
(, because) 138.33 375.62 T
4 9.5 Q
(sixty-unit) 184.88 375.62 T
1 11 Q
( does de\336ne one of the interface functions) 241.88 375.62 T
4 9.5 Q
(encode-) 447.02 375.62 T
(total-seconds) 99.65 361.62 T
1 11 Q
(. Dylan r) 173.75 361.62 T
(equir) 215.88 361.62 T
(es that all the variables exported using the) 241.29 361.62 T
4 9.5 Q
(create) 449.19 361.62 T
1 11 Q
(clause ar) 99.65 347.62 T
(e de\336ned by some module in the same library) 142.2 347.62 T
(. Thus we can be sur) 363.47 347.62 T
(e that) 462.44 347.62 T
(our interface is completely implemented, even if its implementation is spr) 99.65 333.62 T
(ead) 458.09 333.62 T
(over several modules.) 99.65 319.62 T
(The) 126.65 305.62 T
4 9.5 Q
(sixty-unit) 147.81 305.62 T
1 11 Q
( module exports the class) 204.81 305.62 T
4 9.5 Q
(<sixty-unit>) 330.43 305.62 T
1 11 Q
(, because the time) 398.83 305.62 T
-0.26 (library will subclass it. The) 99.65 291.62 P
4 9.5 Q
-0.53 (sixty-unit) 231.93 291.62 P
1 11 Q
-0.26 ( module also exports the generic functions) 288.93 291.62 P
4 9.5 Q
-0.24 (total-seconds) 99.65 277.62 P
1 11 Q
-0.12 (, and) 173.75 277.62 P
4 9.5 Q
-0.24 (decode-total-seconds) 200.39 277.62 P
1 11 Q
-0.12 (. The export of) 314.39 277.62 P
4 9.5 Q
-0.24 (total-seconds) 387.26 277.62 P
1 11 Q
-0.12 ( might) 461.36 277.62 P
(seem surprising at \336rst, because in many object-oriented languages, access to a) 99.65 263.62 T
(class includes access to all the slots of a class. In Dylan, class slots ar) 99.65 249.62 T
(e simply) 428.88 249.62 T
(methods on generic functions and names in the module namespace, and hence) 99.65 235.62 T
-0.41 (the functions must be exported to allow slot access fr) 99.65 221.62 P
-0.41 (om outside the module. Note) 352.61 221.62 P
-0.05 (that exporting) 99.65 207.62 P
4 9.5 Q
-0.1 (total-seconds) 171.34 207.62 P
1 11 Q
-0.05 ( allows other modules only to get the curr) 245.44 207.62 P
-0.05 (ent value) 448.17 207.62 P
(of the) 99.65 193.62 T
4 9.5 Q
(total-seconds) 130.07 193.62 T
1 11 Q
( slot. T) 204.17 193.62 T
(o allow other modules to also set the slot value, we) 235.61 193.62 T
(would have to export) 99.65 179.62 T
4 9.5 Q
(total-seconds-setter) 206.85 179.62 T
1 11 Q
(. It is not necessary to export the) 320.04 179.62 T
(init-keywor) 99.65 165.62 T
(d) 156.53 165.62 T
4 9.5 Q
(total-seconds:) 166 165.62 T
1 11 Q
(, which allows the initial value of the slot to be set) 245.8 165.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "186" 188
%%Page: "187" 189
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11 Libraries and Modules) 407.56 702.62 T
2 11 Q
(187) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(when cr) 99.65 665.62 T
(eating objects. Keywor) 138.68 665.62 T
(ds, or symbols, all exist in a single global) 248.76 665.62 T
(namespace that is separate fr) 99.65 651.62 T
(om module variables.) 239.95 651.62 T
3 15 Q
(1) 99.65 434.95 T
(1.4  Library declaration) 105.81 434.95 T
1 11 Q
(W) 99.65 414.62 T
(e can now give the declaration of the library:) 109.64 414.62 T
4 9 Q
(def) 99.65 393.95 T
(ine library time-library) 115.85 393.95 T
6 F
(// Interface) 110.45 382.95 T
4 F
(export time-library;) 110.45 371.95 T
6 F
(// Substrate) 110.45 360.95 T
4 F
(use format, dylan;) 110.45 349.95 T
(end;) 99.65 338.95 T
1 11 Q
(In the pr) 99.65 318.62 T
(eceding de\336nition, we declar) 141.27 318.62 T
(e that the interface to our library is de\336ned) 281.74 318.62 T
-0.43 (by the) 99.65 304.62 P
4 9.5 Q
-0.9 (time-library) 131.74 304.62 P
1 11 Q
-0.43 ( interface module. By exporting that module, we make all the) 200.14 304.62 P
(exported names fr) 99.65 290.62 T
(om that module accessible to clients of this library) 187.99 290.62 T
(. W) 429.83 290.62 T
(e also) 445.32 290.62 T
-0.46 (declar) 99.65 276.62 P
-0.46 (e that the) 129.37 276.62 P
4 9.5 Q
-0.95 (time-library) 175.85 276.62 P
1 11 Q
-0.46 ( r) 244.25 276.62 P
-0.46 (elies on the) 250.69 276.62 P
4 9.5 Q
-0.95 (format) 306.84 276.62 P
1 11 Q
-0.46 ( and) 341.04 276.62 P
4 9.5 Q
-0.95 (dylan) 364.25 276.62 P
1 11 Q
-0.46 ( libraries. Notice that) 392.75 276.62 P
(no mention is made of the) 99.65 262.62 T
4 9.5 Q
(time-library-implementation) 229.13 262.62 T
1 11 Q
(, or) 383.03 262.62 T
4 9.5 Q
(sixty-unit) 401.63 262.62 T
1 11 Q
( mod-) 458.63 262.62 T
(ules, because they ar) 99.65 248.62 T
(e completely internal to our library and not visible to any cli-) 199.74 248.62 T
(ents of our library) 99.65 234.62 T
(.) 186.04 234.62 T
(In or) 126.65 220.62 T
(der to actually build our library) 149.66 220.62 T
(, we would need to specify the library) 302.35 220.62 T
-0.04 (de\336nition, all the module de\336nitions, wher) 99.65 206.62 P
-0.04 (e the sour) 307.96 206.62 P
-0.04 (ce code that implements our) 355.36 206.62 P
(library is to be found, wher) 99.65 192.62 T
(e the object code that r) 232.16 192.62 T
(esults fr) 340.94 192.62 T
(om compiling that) 379.52 192.62 T
(sour) 99.65 178.62 T
(ce code is to be stor) 121.1 178.62 T
(ed, and any particular instr) 215.09 178.62 T
(uctions to the compiler as to) 347.39 178.62 T
-0.2 (how to build the library) 99.65 164.62 P
-0.2 (. The details of how to pr) 213.69 164.62 P
-0.2 (ovide this information vary fr) 333.9 164.62 P
-0.2 (om) 477.38 164.62 P
2 F
(Comparison with C++:) 132.65 617.62 T
1 F
( Dylan modules pr) 247.1 617.62 T
(ovide access contr) 338.05 617.62 T
(ol similar) 425.85 617.62 T
(to that pr) 132.65 603.62 T
(ovided by the) 177.57 603.62 T
4 9.5 Q
(private:) 247.41 603.62 T
1 11 Q
( and) 293.01 603.62 T
4 9.5 Q
(public:) 317.13 603.62 T
1 11 Q
( keywor) 357.03 603.62 T
(ds in C++) 396.61 603.62 T
(classes, but Dylan access contr) 132.65 589.62 T
(ol is done at the module rather than) 280.17 589.62 T
(class level. Dylan has no equivalent to) 132.65 575.62 T
4 9.5 Q
(protected:) 320.45 575.62 T
1 11 Q
( access contr) 377.45 575.62 T
(ol. A) 437.84 575.62 T
-0.09 (class that subclasses a class fr) 132.65 561.62 P
-0.09 (om another module does not have access) 274.37 561.62 P
-0.27 (to slots or other generic functions on its super) 132.65 547.62 P
-0.27 (class fr) 352.3 547.62 P
-0.27 (om the other mod-) 385.51 547.62 P
(ule unless they ar) 132.65 533.62 T
(e explicitly exported fr) 217.85 533.62 T
(om that module.) 327.61 533.62 T
(Another way to think of Dylan access contr) 159.65 519.62 T
(ol is that all) 369.85 519.62 T
(classes and generic functions in a module ar) 132.65 505.62 T
(e friends, and the) 346.59 505.62 T
(exported variables of the module ar) 132.65 491.62 T
(e public.) 305.98 491.62 T
126.65 630.83 126.65 484.08 2 L
V
0.25 H
0 Z
N
477.65 630.83 477.65 484.08 2 L
V
N
126.52 630.95 477.77 630.95 2 L
V
N
126.52 483.95 477.77 483.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "187" 189
%%Page: "188" 190
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(188) 63.65 702.62 T
0 9.5 Q
(11.5 Interchange files) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(one Dylan implementation to the next.) 99.65 665.62 T
0 F
([--- Describe the Library Inter) 289.75 665.62 T
(change De\336ni-) 422.16 665.62 T
(tion format? Is that an accepted pr) 99.65 651.62 T
(oposal?]) 251.99 651.62 T
1 F
-0.39 (In or) 126.65 637.62 P
-0.39 (der to use our library) 149.27 637.62 P
-0.39 (, we would need to specify wher) 249.77 637.62 P
-0.39 (e to \336nd the object) 405.53 637.62 P
(code and the implementation-dependent export information that allows another) 99.65 623.62 T
(library to use our library without access to our sour) 99.65 609.62 T
(ce code. The details of this) 349.6 609.62 T
(information also depends on the particular Dylan implementation we ar) 99.65 595.62 T
(e using.) 450.4 595.62 T
3 15 Q
(1) 99.65 420.95 T
(1.5  Interchange \336les) 105.81 420.95 T
1 11 Q
(The storing of sour) 99.65 400.62 T
(ce and object code in Dylan is not mandated to be in \336les.) 191.75 400.62 T
-0.01 (Some envir) 99.65 386.62 P
-0.01 (onments ar) 154.39 386.62 P
-0.01 (e expected to use a mor) 208.82 386.62 P
-0.01 (e general database for code storage) 322.61 386.62 P
(and per) 99.65 372.62 T
(haps a hypertext-like mechanism for exploring sour) 137.05 372.62 T
(ce code. Dylan does,) 388.57 372.62 T
(however) 99.65 358.62 T
(, specify a portable inter) 141.51 358.62 T
(change format, based on \336les, for exchanging) 258.38 358.62 T
(Dylan sour) 99.65 344.62 T
(ce code among Dylan implementations.) 153.58 344.62 T
-0.09 (A \336le in inter) 126.65 330.62 P
-0.09 (change format has a header and a body) 190.52 330.62 P
-0.09 (. The header consists of) 379.93 330.62 P
(consecutive lines of keywor) 99.65 316.62 T
(ds and values. The body consists of Dylan expr) 234.15 316.62 T
(es-) 462.9 316.62 T
(sions, and is separated fr) 99.65 302.62 T
(om the header by at least one blank line. The only) 220.1 302.62 T
(r) 99.65 288.62 T
(equir) 103.79 288.62 T
(ed keywor) 129.21 288.62 T
(d is one to specify the module expr) 180.77 288.62 T
(essions in the \336le ar) 350.79 288.62 T
(e associ-) 446.29 288.62 T
-0.25 (ated with. Standar) 99.65 274.62 P
-0.25 (d keywor) 188.47 274.62 P
-0.25 (ds ar) 234.52 274.62 P
-0.25 (e also de\336ned for author) 258.05 274.62 P
-0.25 (, copyright, and version;) 375.4 274.62 P
(although any implementation may ignor) 99.65 260.62 T
(e them, or de\336ne additional keywor) 297.37 260.62 T
(ds.) 471.65 260.62 T
(So, for instance, if we wanted to publish our library code, we might cr) 126.65 246.62 T
(eate) 465.84 246.62 T
(the following \336les:) 99.65 232.62 T
2 F
(Comparison with C++:) 132.65 561.62 T
1 F
( The library declaration, naming the modules) 247.1 561.62 T
(exported and libraries used by a library is similar to C++ header \336les) 132.65 547.62 T
(and includes, but the Dylan development envir) 132.65 533.62 T
(onment extracts the) 362.28 533.62 T
(information it needs about exported and imported variables dir) 132.65 519.62 T
(ectly) 441.2 519.62 T
(,) 463.03 519.62 T
(rather than r) 132.65 505.62 T
(equiring exports to be duplicated in a set of header \336les) 193.63 505.62 T
-0.2 (and r) 132.65 491.62 P
-0.2 (equiring those header \336les to be included in every sour) 157.96 491.62 P
-0.2 (ce \336le that) 423.66 491.62 P
(uses the imports.) 132.65 477.62 T
126.65 574.83 126.65 470.08 2 L
V
0.25 H
0 Z
N
477.65 574.83 477.65 470.08 2 L
V
N
126.52 574.95 477.77 574.95 2 L
V
N
126.52 469.95 477.77 469.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "188" 190
%%Page: "189" 191
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11 Libraries and Modules) 407.56 702.62 T
2 11 Q
(189) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(1) 99.65 664.29 T
(1.5.1  T) 104.99 664.29 T
(ime module \336le) 140.96 664.29 T
4 9 Q
(Module: dylan-user) 99.65 643.95 T
(def) 99.65 621.95 T
(ine module time-library) 115.85 621.95 T
6 F
(// Classes) 110.45 610.95 T
4 F
(create <time-of-day>, <time-offset>;) 110.45 599.95 T
6 F
(// Generics) 110.45 588.95 T
4 F
(create say, encode-total-seconds;) 110.45 577.95 T
6 F
(// Methods) 110.45 566.95 T
4 F
(use dylan, import: { \134+ }, export: all;) 110.45 555.95 T
(end;) 99.65 544.95 T
(def) 99.65 525.95 T
(ine module sixty-unit) 115.85 525.95 T
6 F
(// External interface) 110.45 514.95 T
4 F
(use time-library;) 110.45 503.95 T
6 F
(// Internal interface) 110.45 492.95 T
4 F
(export <sixty-unit>, total-seconds, decode-total-seconds;) 110.45 481.95 T
6 F
(// Substrate) 110.45 470.95 T
4 F
(use dylan;) 110.45 459.95 T
(end;) 99.65 448.95 T
(def) 99.65 429.95 T
(ine module time-library-implementation) 115.85 429.95 T
6 F
(// External interface) 110.45 418.95 T
4 F
(use time-library;) 110.45 407.95 T
6 F
(// Substrate) 110.45 396.95 T
4 F
(use sixty-unit, format, dylan;) 110.45 385.95 T
(end;) 99.65 374.95 T
1 11 Q
(Because every \336le r) 99.65 354.62 T
(equir) 193.32 354.62 T
(es a module that it is associated with \050that de\336nes the) 218.73 354.62 T
(namespace used to evaluate the \336le\325s expr) 99.65 340.62 T
(essions with r) 303.82 340.62 T
(espect to\051, you might) 370.7 340.62 T
-0.03 (wonder wher) 99.65 326.62 P
-0.03 (e to start. The) 165.28 326.62 P
4 9.5 Q
-0.05 (dylan-user) 233.88 326.62 P
1 11 Q
-0.03 ( module is a built-in module that gives us) 290.88 326.62 P
(a toe hold. It exports all of the) 99.65 312.62 T
4 9.5 Q
(dylan) 247.37 312.62 T
1 11 Q
( module, so any Dylan expr) 275.87 312.62 T
(ession can be) 410.03 312.62 T
(used. Y) 99.65 298.62 T
(ou can think of) 134.76 298.62 T
4 9.5 Q
(dylan-user) 210.56 298.62 T
1 11 Q
( as being a scratch version of) 267.56 298.62 T
4 9.5 Q
(dylan) 409.58 298.62 T
1 11 Q
(. Each) 438.08 298.62 T
(library is given a private copy of) 99.65 284.62 T
4 9.5 Q
(dylan-user) 260.27 284.62 T
1 11 Q
(, so ther) 316.46 284.62 T
(e is no concern that de\336ni-) 354.78 284.62 T
(tions in one library\325s) 99.65 270.62 T
4 9.5 Q
(dylan-user) 202.3 270.62 T
1 11 Q
( could be confused with those of another) 259.3 270.62 T
(.) 456.24 270.62 T
(Neither module names nor library names ar) 126.65 256.62 T
(e variables, so despite ther) 340.19 256.62 T
(e) 468.58 256.62 T
(being thr) 99.65 242.62 T
(ee de\336nitions in the module \336le, ther) 143.6 242.62 T
(e is actually no ef) 322.43 242.62 T
(fect visible to a) 406.33 242.62 T
(Dylan pr) 99.65 228.62 T
(ogram. The purpose of this \336le is solely to communicate to the Dylan) 142.89 228.62 T
-0.36 (development envir) 99.65 214.62 P
-0.36 (onment the str) 191.53 214.62 P
-0.36 (uctur) 261.46 214.62 P
-0.36 (e of the module namespaces. The details of) 287.34 214.62 P
(how this is done depend on the implementation, but each envir) 99.65 200.62 T
(onment will pr) 407.51 200.62 T
(o-) 479.92 200.62 T
(vide a mechanism for r) 99.65 186.62 T
(eading module de\336nitions, either dir) 211.46 186.62 T
(ectly fr) 390.21 186.62 T
(om an inter-) 423.83 186.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "189" 191
%%Page: "190" 192
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(190) 63.65 702.62 T
0 9.5 Q
(11.5 Interchange files) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(change \336le, or after converting the inter) 99.65 665.62 T
(change \336le to implementation-dependent) 291.6 665.62 T
(format.) 99.65 651.62 T
3 13 Q
(1) 99.65 620.29 T
(1.5.2  T) 104.99 620.29 T
(ime library \336le) 140.96 620.29 T
4 9 Q
(Module: dylan-user) 99.65 599.95 T
(def) 99.65 577.95 T
(ine library time-library) 115.85 577.95 T
6 F
(// Interface) 110.45 566.95 T
4 F
(export time-library;) 110.45 555.95 T
6 F
(// Substrate) 110.45 544.95 T
4 F
(use format, dylan;) 110.45 533.95 T
(end;) 99.65 522.95 T
1 11 Q
-0.15 (The library \336le, like the module \336le, does not actually de\336ne any Dylan variables.) 99.65 502.62 P
(The library declaration is used by the development envir) 99.65 488.62 T
(onment to determine) 375.57 488.62 T
(which other libraries to sear) 99.65 474.62 T
(ch for the modules that ar) 235.3 474.62 T
(e used in the implementa-) 360.54 474.62 T
(tion of this library) 99.65 460.62 T
(, and to determine what modules implemented by this library) 186.18 460.62 T
(ar) 99.65 446.62 T
(e visible to other libraries \050and pr) 109.29 446.62 T
(ograms\051 that use this library) 270.95 446.62 T
(. Note that the) 407.02 446.62 T
(library name) 99.65 432.62 T
4 9 Q
(time-library) 164.82 432.62 T
1 11 Q
( and the exported module \050interface\051 name) 229.62 432.62 T
4 9 Q
(time-) 440.11 432.62 T
(library) 99.65 418.62 T
1 11 Q
( ar) 137.45 418.62 T
(e not a con\337ict, because variables, modules, and libraries ar) 149.85 418.62 T
(e all sepa-) 437.83 418.62 T
(rate namespaces. In other wor) 99.65 404.62 T
(ds, ther) 245.62 404.62 T
(e is one dictionary for looking up library) 281.91 404.62 T
(names, and another dictionary for module names, and each module is a separate) 99.65 390.62 T
(dictionary of variable names.) 99.65 376.62 T
3 13 Q
(1) 99.65 345.29 T
(1.5.3  Sixty-unit implementation \336le) 104.99 345.29 T
4 9 Q
(Module: sixty-unit) 99.65 324.95 T
(def) 99.65 305.95 T
(ine class <sixty-unit> \050<object>\051) 115.85 305.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:,) 110.45 294.95 T
(init-value: 0;) 229.25 283.95 T
(end;) 99.65 272.95 T
(def) 99.65 253.95 T
(ine method encode-total-seconds \050max-unit :: <integer>,) 115.85 253.95 T
(minutes) 294.05 242.95 T
(:: <integer>,) 342.65 242.95 T
(seconds) 294.05 231.95 T
(:: <integer>\051) 342.65 231.95 T
(\05060 * 60 * max-unit\051 + \05060 * minutes\051 + seconds;) 110.45 220.95 T
(end;) 99.65 209.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "190" 192
%%Page: "191" 193
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11 Libraries and Modules) 407.56 702.62 T
2 11 Q
(191) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine method decode-total-seconds \050sixty-unit :: <sixty-unit>\051) 115.85 666.95 T
(let\050total-minutes, seconds\051 = truncate/\050sixty-unit.total-seconds, 60\051;) 110.45 655.95 T
(let\050max-unit, minutes\051 = truncate/\050total-minutes, 60\051;) 110.45 644.95 T
(values \050max-unit, minutes, seconds\051;) 110.45 633.95 T
(end;) 99.65 622.95 T
1 11 Q
(The pr) 99.65 602.62 T
(eceding implementation \336le is the \336rst \336le wher) 131.57 602.62 T
(e we use one of our own) 363.96 602.62 T
-0.3 (modules. The header) 99.65 588.62 P
4 9.5 Q
-0.62 (Module: sixty-unit) 203.87 588.62 P
1 11 Q
-0.3 ( statement tells the Dylan envir) 305.85 588.62 P
-0.3 (onment) 455.82 588.62 P
-0.42 (that when we say) 99.65 574.62 P
4 9.5 Q
-0.88 (def) 185.99 574.62 P
-0.88 (ine class) 203.1 574.62 P
1 11 Q
-0.42 ( or) 253.51 574.62 P
4 9.5 Q
-0.88 (<integer>) 268.52 574.62 P
1 11 Q
-0.42 ( or) 319.82 574.62 P
4 9.5 Q
-0.88 (*) 334.82 574.62 P
1 11 Q
-0.42 (, we mean the Dylan de\336nitions) 340.52 574.62 P
(of) 99.65 560.62 T
4 9.5 Q
(def) 112.07 560.62 T
(ine class) 129.17 560.62 T
1 11 Q
(,) 180.47 560.62 T
4 9.5 Q
(<integer>) 185.97 560.62 T
1 11 Q
(, and) 237.27 560.62 T
4 9.5 Q
(*) 264.14 560.62 T
1 11 Q
(, because) 269.84 560.62 T
4 9.5 Q
(sixty-unit) 316.39 560.62 T
1 11 Q
( uses the) 373.39 560.62 T
4 9.5 Q
(dylan) 418.13 560.62 T
1 11 Q
( module.) 446.63 560.62 T
(When we de\336ne) 99.65 546.62 T
4 9.5 Q
(encode-total-seconds) 181.73 546.62 T
1 11 Q
(, we mean the) 295.73 546.62 T
4 9.5 Q
(encode-total-seconds) 366.06 546.62 T
1 11 Q
(exported by the) 99.65 532.62 T
4 9.5 Q
(time-library) 178.84 532.62 T
1 11 Q
( module, because) 247.24 532.62 T
4 9.5 Q
(sixty-unit) 334.08 532.62 T
1 11 Q
( uses that module.) 391.08 532.62 T
3 13 Q
(1) 99.65 501.29 T
(1.5.4  T) 104.99 501.29 T
(ime library implementation \336le) 140.96 501.29 T
4 9 Q
(Module: time-library-implementation) 99.65 480.95 T
(def) 99.65 461.95 T
(ine class <time> \050<sixty-unit>\051) 115.85 461.95 T
(end;) 99.65 450.95 T
(def) 99.65 431.95 T
(ine method say \050time :: <time>\051) 115.85 431.95 T
(let\050hours, minutes\051 = decode-total-seconds\050time\051;) 110.45 420.95 T
(format\050*window*, "%d:%d", hours, minutes\051;) 110.45 409.95 T
(end;) 99.65 398.95 T
(def) 99.65 379.95 T
(ine class <time-of-day> \050<time>\051) 115.85 379.95 T
(end;) 99.65 368.95 T
(def) 99.65 349.95 T
(ine class <time-offset> \050<time>\051) 115.85 349.95 T
(slot past? :: <boolean>, init-keyword: past?:;) 110.45 338.95 T
(end;) 99.65 327.95 T
(def) 99.65 308.95 T
(ine method say \050time :: <time-offset>\051) 115.85 308.95 T
(format\050*window*, "%s ", if \050time.past?\051 "minus" else "plus" end\051;) 110.45 297.95 T
(next-method\050\051;) 110.45 286.95 T
(end;) 99.65 275.95 T
(def) 99.65 256.95 T
(ine method \134+ \050offset1 :: <time-offset>, offset2 :: <time-offset>) 115.85 256.95 T
(let s1 = if\050offset1.past?\051 negative else identity end;) 110.45 245.95 T
(let t1 = offset1.total-seconds;) 110.45 234.95 T
(let s2 = if\050offset2.past?\051 negative else identity end;) 110.45 223.95 T
(let t2 = offset2.total-seconds;) 110.45 212.95 T
(make\050<time-offset>, total-seconds: s1\050t1\051 + s2\050t2\051\051;) 110.45 201.95 T
(end;) 99.65 190.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "191" 193
%%Page: "192" 194
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(192) 63.65 702.62 T
0 9.5 Q
(11.6 Shared library) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine method \134+ \050offset :: <time-offset>, time-of-day :: <time-of-day>\051) 115.85 666.95 T
(let s1 = if\050offset.past?\051 negative else identity end;) 110.45 655.95 T
(let t1 = offset.total-seconds;) 110.45 644.95 T
(let t2 = time-of-day.total-seconds;) 110.45 633.95 T
(make\050<time-of-day>, total-seconds: s1\050t1\051 + t2\051;) 110.45 622.95 T
(end;) 99.65 611.95 T
(def) 99.65 592.95 T
(ine method \134+ \050time-of-day :: <time-of-day>, offset :: <time-offset>\051) 115.85 592.95 T
(offset + time-of-day;) 110.45 581.95 T
(end;) 99.65 570.95 T
(def) 99.65 551.95 T
(ine method \134+ \050time1 :: <time>, time2 :: <time>\051) 115.85 551.95 T
(format\050*window*, "Sorry, we can\325t add those kinds of time"\051;) 110.45 540.95 T
(end;) 99.65 529.95 T
1 11 Q
(In the pr) 99.65 509.62 T
(eceding implementation \336le, it is the) 141.27 509.62 T
4 9.5 Q
(time-library-implementation) 321.08 509.62 T
1 11 Q
-0.45 (module that speci\336es what we mean when we write Dylan expr) 99.65 495.62 P
-0.45 (essions and which) 405.19 495.62 P
(module namespace our de\336nitions will appear in.) 99.65 481.62 T
3 15 Q
(1) 99.65 441.95 T
(1.6  Shared library) 105.81 441.95 T
1 11 Q
(In pr) 99.65 421.62 T
(evious examples, we have shown how the) 123.26 421.62 T
4 9.5 Q
(<angle>) 330.47 421.62 T
1 11 Q
( class can use the) 370.37 421.62 T
4 9.5 Q
(<sixty-) 455.64 421.62 T
(unit>) 99.65 407.62 T
1 11 Q
( class as a base class. W) 128.15 407.62 T
(e could have simply included the) 240.39 407.62 T
4 9.5 Q
(<angle>) 404.79 407.62 T
1 11 Q
( class in) 444.69 407.62 T
(our time library \050pr) 99.65 393.62 T
(esumably calling it a time and angle library\051, but it seems) 193.86 393.62 T
-0.29 (quite plausible that clients might not want both classes all the time. \050And for most) 99.65 379.62 P
(implementations of Dylan, for the pr) 99.65 365.62 T
(esent, using a library will likely get you all) 277.9 365.62 T
-0.11 (the de\336nitions in that library) 99.65 351.62 P
-0.11 (, so separating our code into components by usage is) 237.81 351.62 P
-0.32 (a r) 99.65 337.62 P
-0.32 (easonable policy) 111.72 337.62 P
-0.32 (.\051 Another or) 190.85 337.62 P
-0.32 (ganization would be to make an angle library that) 252.84 337.62 P
(uses the time library) 99.65 323.62 T
(, which would be bur) 197.72 323.62 T
(densome only to clients who want) 301.49 323.62 T
(angles without time. Clearly the right solution is to make a separate) 99.65 309.62 T
4 9.5 Q
(sixty-unit) 431.24 309.62 T
1 11 Q
(library that is shar) 99.65 295.62 T
(ed by the time and angle libraries.) 188.34 295.62 T
-0.11 (Because we had alr) 126.65 281.62 P
-0.11 (eady br) 219.42 281.62 P
-0.11 (oken) 255.9 281.62 P
4 9.5 Q
-0.23 (sixty-unit) 282.33 281.62 P
1 11 Q
-0.11 ( out into a separate module and) 339.33 281.62 P
-0.39 (\336le, we can cr) 99.65 267.62 P
-0.39 (eate this new or) 164.85 267.62 P
-0.39 (ganization simply by r) 240.4 267.62 P
-0.39 (e-arranging modules and \336les) 348.74 267.62 P
(as follows:) 99.65 253.62 T
(\245) 108.65 233.62 T
(W) 126.65 233.62 T
(e will move the) 136.64 233.62 T
4 9.5 Q
(sixty-unit-implementation) 214.14 233.62 T
1 11 Q
( module declaration fr) 356.64 233.62 T
(om) 464.86 233.62 T
(the) 126.65 219.62 T
4 9.5 Q
(time) 144.65 219.62 T
1 11 Q
( module \336le into a new) 167.46 219.62 T
4 9.5 Q
(sixty-unit) 282.16 219.62 T
1 11 Q
( module \336le.) 339.16 219.62 T
(\245) 108.65 199.62 T
(W) 126.65 199.62 T
(e will cr) 136.64 199.62 T
(eate a) 175.21 199.62 T
4 9.5 Q
(sixty-unit) 205.84 199.62 T
1 11 Q
( library \336le.) 262.84 199.62 T
(\245) 108.65 179.62 T
(W) 126.65 179.62 T
(e will update the time module and library \336les.) 136.64 179.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "192" 194
%%Page: "193" 195
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11 Libraries and Modules) 407.56 702.62 T
2 11 Q
(193) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(1) 99.65 664.29 T
(1.6.1  Sixty-unit module \336le) 104.99 664.29 T
4 9 Q
(Module: dylan-user) 99.65 643.95 T
(def) 99.65 621.95 T
(ine module sixty-unit) 115.85 621.95 T
6 F
(// Classes) 110.45 610.95 T
4 F
(create <sixty-unit>;) 110.45 599.95 T
6 F
(// Generics) 110.45 588.95 T
4 F
(create total-seconds, encode-total-seconds, decode-total-seconds;) 110.45 577.95 T
(end;) 99.65 566.95 T
(def) 99.65 547.95 T
(ine module sixty-unit-implementation) 115.85 547.95 T
6 F
(// External interface) 110.45 536.95 T
4 F
(use sixty-unit;) 110.45 525.95 T
6 F
(// Substrate) 110.45 514.95 T
4 F
(use dylan;) 110.45 503.95 T
(end;) 99.65 492.95 T
3 13 Q
(1) 99.65 463.29 T
(1.6.2  Sixty-unit library \336le) 104.99 463.29 T
4 9 Q
(Module: dylan-user) 99.65 442.95 T
(def) 99.65 420.95 T
(ine library sixty-unit) 115.85 420.95 T
6 F
(// Interface) 110.45 409.95 T
4 F
(export sixty-unit;) 110.45 398.95 T
6 F
(// Substrate) 110.45 387.95 T
4 F
(use dylan;) 110.45 376.95 T
(end;) 99.65 365.95 T
3 13 Q
(1) 99.65 336.29 T
(1.6.3  T) 104.99 336.29 T
(ime module \336le) 140.96 336.29 T
4 9 Q
(Module: dylan-user) 99.65 315.95 T
(def) 99.65 293.95 T
(ine module time-library) 115.85 293.95 T
6 F
(// Classes) 110.45 282.95 T
4 F
(create <time-of-day>, <time-offset>;) 110.45 271.95 T
6 F
(// Generics) 110.45 260.95 T
4 F
(create say;) 110.45 249.95 T
6 F
(// Shared protocol) 110.45 238.95 T
4 F
(use sixty-unit, import: { encode-total-seconds }, export: all;) 110.45 227.95 T
6 F
(// Methods) 110.45 216.95 T
4 F
(use dylan, import: { \134+ }, export: all;) 110.45 205.95 T
(end;) 99.65 194.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "193" 195
%%Page: "194" 196
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(194) 63.65 702.62 T
0 9.5 Q
(11.6 Shared library) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine module time-library-implementation) 115.85 666.95 T
6 F
(// External interface) 110.45 655.95 T
4 F
(use time-library;) 110.45 644.95 T
6 F
(// Substrate) 110.45 633.95 T
4 F
(use sixty-unit, format, dylan;) 110.45 622.95 T
(end;) 99.65 611.95 T
3 13 Q
(1) 99.65 582.29 T
(1.6.4  T) 104.99 582.29 T
(ime library \336le) 140.96 582.29 T
4 9 Q
(Module: dylan-user) 99.65 561.95 T
(def) 99.65 542.95 T
(ine library time-library) 115.85 542.95 T
6 F
(// Interface) 110.45 531.95 T
4 F
(export time-library;) 110.45 520.95 T
6 F
(// Substrate) 110.45 509.95 T
4 F
(use sixty-unit, format, dylan;) 110.45 498.95 T
(end;) 99.65 487.95 T
1 11 Q
(At this point, we need to) 99.65 467.62 T
2 F
(open) 222.4 467.62 T
1 F
( the) 247.46 467.62 T
4 9.5 Q
(<sixty-unit>) 268.21 467.62 T
1 11 Q
( class; because it is now in a sep-) 336.61 467.62 T
(arate library) 99.65 453.62 T
(, it must be de\336ned to be open to allow other libraries, such as) 158.17 453.62 T
4 9.5 Q
(time-) 462.01 453.62 T
(library) 99.65 439.62 T
1 11 Q
( or) 139.55 439.62 T
4 9.5 Q
(angle-library,) 155.4 439.62 T
1 11 Q
( to subclass it. The exact implications of this declara-) 235.2 439.62 T
(tion ar) 99.65 425.62 T
(e discussed in Chapter 12,) 131.24 425.62 T
0 F
(Performance and Flexibility) 263.3 425.62 T
1 F
(.) 386.55 425.62 T
3 13 Q
(1) 99.65 394.29 T
(1.6.5  Sixty-unit implementation \336le) 104.99 394.29 T
4 9 Q
(Module: sixty-unit) 99.65 373.95 T
(def) 99.65 354.95 T
(ine open class <sixty-unit> \050<object>\051) 115.85 354.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:,) 110.45 343.95 T
(init-value: 0;) 229.25 332.95 T
(end;) 99.65 321.95 T
(def) 99.65 302.95 T
(ine method encode-total-seconds \050max-unit :: <integer>,) 115.85 302.95 T
(minutes) 294.05 291.95 T
(:: <integer>,) 342.65 291.95 T
(seconds) 294.05 280.95 T
(:: <integer>\051) 342.65 280.95 T
(\05060 * 60 * max-unit\051 + \05060 * minutes\051 + seconds;) 110.45 269.95 T
(end;) 99.65 258.95 T
(def) 99.65 239.95 T
(ine method decode-total-seconds \050sixty-unit :: <sixty-unit>\051) 115.85 239.95 T
(let\050total-minutes, seconds\051 = truncate/\050sixty-unit.total-seconds, 60\051;) 110.45 228.95 T
(let\050max-unit, minutes\051 = truncate/\050total-minutes, 60\051;) 110.45 217.95 T
(values \050max-unit, minutes, seconds\051;) 110.45 206.95 T
(end;) 99.65 195.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "194" 196
%%Page: "195" 197
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11 Libraries and Modules) 407.56 702.62 T
2 11 Q
(195) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 15 Q
0 X
(1) 99.65 662.95 T
(1.7  Protocol design) 105.81 662.95 T
1 11 Q
(W) 99.65 642.62 T
(e can now de\336ne the) 109.64 642.62 T
4 9.5 Q
(angle) 212.6 642.62 T
1 11 Q
( library as another client of the) 241.1 642.62 T
4 9.5 Q
(sixty-unit) 392.28 642.62 T
1 11 Q
( library) 449.28 642.62 T
(.) 483.6 642.62 T
(The interface of the angle library consists of the classes) 99.65 628.62 T
4 9.5 Q
(<angle>) 367.73 628.62 T
1 11 Q
( and) 407.63 628.62 T
4 9.5 Q
(<directed-) 431.75 628.62 T
(angle>) 99.65 614.62 T
1 11 Q
(, and the) 133.85 614.62 T
4 9.5 Q
(say) 178.73 614.62 T
1 11 Q
( method. Uh-oh! W) 195.83 614.62 T
(e want that method to be another method) 288.6 614.62 T
-0.05 (on the) 99.65 600.62 P
4 9.5 Q
-0.1 (say) 132.71 600.62 P
1 11 Q
-0.05 ( generic function de\336ned by the time library) 149.81 600.62 P
-0.05 (, so that a client of the time) 362.81 600.62 P
0 F
(and) 99.65 586.62 T
1 F
( angle libraries sees a single generic function,) 116.15 586.62 T
4 9.5 Q
(say) 337.68 586.62 T
1 11 Q
(, that applies to either times) 353.56 586.62 T
(or angles. This is an example of wher) 99.65 572.62 T
(e we should put mor) 279.83 572.62 T
(e thought into design-) 380.86 572.62 T
(ing our pr) 99.65 558.62 T
(otocols befor) 148.61 558.62 T
(e we get too far into an implementation. The) 210.88 558.62 T
4 9.5 Q
(say) 429.34 558.62 T
1 11 Q
( generic) 446.44 558.62 T
(function is r) 99.65 544.62 T
(eally a separate pr) 157.94 544.62 T
(otocol that could apply to lots of classes in our sys-) 246.48 544.62 T
(tem, hence it r) 99.65 530.62 T
(eally deserves to be in a separate shar) 168.38 530.62 T
(eable library as we did with) 350.83 530.62 T
4 9.5 Q
(sixty-unit) 99.65 516.62 T
1 11 Q
(. Inter) 156.65 516.62 T
(estingly) 185.26 516.62 T
(, the) 222.59 516.62 T
4 9.5 Q
(say) 246.1 516.62 T
1 11 Q
( pr) 263.2 516.62 T
(otocol library for our simple example is just) 276.71 516.62 T
(that, just a pr) 99.65 502.62 T
(otocol.) 163.44 502.62 T
3 13 Q
(1) 99.65 471.29 T
(1.7.1  Say module \336le) 104.99 471.29 T
4 9 Q
(Module: dylan-user) 99.65 450.95 T
(def) 99.65 428.95 T
(ine module say-protocol) 115.85 428.95 T
(export say;) 110.45 417.95 T
(end;) 99.65 406.95 T
(def) 99.65 387.95 T
(ine module say-implementor) 115.85 387.95 T
(use say-protocol;) 110.45 376.95 T
(use format, export: all;) 110.45 365.95 T
(end;) 99.65 354.95 T
3 13 Q
(1) 99.65 325.29 T
(1.7.2  Say library \336le) 104.99 325.29 T
4 9 Q
(Module: dylan-user) 99.65 304.95 T
(def) 99.65 282.95 T
(ine library say-protocol) 115.85 282.95 T
(export say-protocol, say-implementor;) 110.45 271.95 T
(use format, dylan;) 110.45 260.95 T
(end;) 99.65 249.95 T
3 13 Q
(1) 99.65 220.29 T
(1.7.3  Say implementation \336le) 104.99 220.29 T
4 9 Q
(Module: say-protocol) 99.65 199.95 T
(def) 99.65 177.95 T
(ine open generic say \050object :: <object>\051 => \050\051;) 115.85 177.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "195" 197
%%Page: "196" 198
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(196) 63.65 702.62 T
0 9.5 Q
(11.7 Protocol design) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(These thr) 99.65 665.62 T
(ee \336les show a simple module style \321 her) 144.88 665.62 T
(e the interface module) 348.81 665.62 T
(includes de\336nitions dir) 99.65 651.62 T
(ectly) 212.3 651.62 T
(, rather than deferring them to a separate implemen-) 234.13 651.62 T
(tation module \050it uses the) 99.65 637.62 T
4 9.5 Q
(export) 226.16 637.62 T
1 11 Q
( clause, rather than the) 260.36 637.62 T
4 9.5 Q
(create) 373.6 637.62 T
1 11 Q
( clause, and the) 407.8 637.62 T
(variables ar) 99.65 623.62 T
(e de\336ned in the interface module\051. This simple style makes sense) 156.02 623.62 T
(when all the de\336nitions of a library can be thought of as a single unit or \336le, or) 99.65 609.62 T
(ther) 99.65 595.62 T
(e ar) 119.05 595.62 T
(e no library-private inter) 136.72 595.62 T
(-module interfaces.) 256.43 595.62 T
(Note that the) 126.65 581.62 T
4 9.5 Q
(say-implementor) 193.23 581.62 T
1 11 Q
( module is both a client and an interface) 278.73 581.62 T
(module. It is the interface of the say pr) 99.65 567.62 T
(otocol for clients who will implement say) 286.44 567.62 T
(methods, and it is a client of the format module. Because most) 99.65 553.62 T
4 9.5 Q
(say) 404.02 553.62 T
1 11 Q
( methods use) 421.12 553.62 T
4 9.5 Q
-0.38 (format) 99.65 539.62 P
1 11 Q
-0.18 ( in their implementation, it makes sense to r) 133.85 539.62 P
-0.18 (e-export all of the) 345.26 539.62 P
4 9.5 Q
-0.38 (format) 432.78 539.62 P
1 11 Q
-0.18 ( mod-) 466.98 539.62 P
-0.39 (ule for) 99.65 525.62 P
4 9.5 Q
-0.81 (say-implementor) 133.49 525.62 P
1 11 Q
-0.39 ( clients. The) 218.99 525.62 P
4 9.5 Q
-0.81 (say) 278.44 525.62 P
1 11 Q
-0.39 ( pr) 295.54 525.62 P
-0.39 (otocol library has two interfaces that it) 308.66 525.62 P
(makes available:) 99.65 511.62 T
4 9.5 Q
(say-protocol) 182.83 511.62 T
1 11 Q
( de\336nes the say pr) 251.23 511.62 T
(otocol, and) 339.51 511.62 T
4 9.5 Q
(say-implementor) 396.07 511.62 T
1 11 Q
(pr) 99.65 497.62 T
(ovides the substrate for pr) 110.41 497.62 T
(otocol implementors. This is a cleaner interface than) 237.84 497.62 T
(the one we used for) 99.65 483.62 T
4 9.5 Q
(sixty-unit) 198.08 483.62 T
1 11 Q
(, wher) 255.08 483.62 T
(e) 285.57 483.62 T
4 9.5 Q
(encode-total-seconds) 293.59 483.62 T
1 11 Q
( plays mor) 407.59 483.62 T
(e of an) 459.05 483.62 T
(interface r) 99.65 469.62 T
(ole and) 148.66 469.62 T
4 9.5 Q
(<sixty-unit>) 187.26 469.62 T
1 11 Q
( and) 255.66 469.62 T
4 9.5 Q
(decode-total-seconds) 279.79 469.62 T
1 11 Q
( play mor) 393.79 469.62 T
(e of a sub-) 440.58 469.62 T
(strate r) 99.65 455.62 T
(ole. The r) 133.49 455.62 T
(esult is seen in the clients of the) 178.78 455.62 T
4 9.5 Q
(sixty-unit) 334.6 455.62 T
1 11 Q
( library) 391.6 455.62 T
(, who must) 425.92 455.62 T
(split these r) 99.65 441.62 T
(oles out for themselves.) 155.75 441.62 T
(The explicit de\336nition of the) 126.65 427.62 T
4 9.5 Q
(say) 266.81 427.62 T
1 11 Q
( generic function is good pr) 283.91 427.62 T
(otocol docu-) 417.39 427.62 T
(mentation, and it is also r) 99.65 413.62 T
(equir) 222.61 413.62 T
(ed, because all module variables must have a de\336-) 248.02 413.62 T
(nition for a library to be complete. An alternative would have been to de\336ne a) 99.65 399.62 T
-0.46 (default method for) 99.65 385.62 P
4 9.5 Q
-0.95 (say) 192.8 385.62 P
1 11 Q
-0.46 (, which would also cr) 208.68 385.62 P
-0.46 (eate an implicit generic de\336nition, but) 310.8 385.62 P
(implicit generic de\336nitions ar) 99.65 371.62 T
(e) 242.74 371.62 T
2 F
(sealed) 250.76 371.62 T
1 F
(, and for a pr) 282.52 371.62 T
(otocol we want an) 345.17 371.62 T
2 F
(open) 436.86 371.62 T
1 F
(generic function, because we intend clients to add methods to it. The designer of) 99.65 357.62 T
(the) 99.65 343.62 T
4 9.5 Q
(say) 117.65 343.62 T
1 11 Q
( pr) 134.76 343.62 T
(otocol still has to choose whether to r) 148.26 343.62 T
(equir) 328.63 343.62 T
(e each type to de\336ne its own) 354.04 343.62 T
4 9.5 Q
(say) 99.65 329.62 T
1 11 Q
( method, or to pr) 116.75 329.62 T
(ovide a universal default.) 198.9 329.62 T
2 F
(Comparison with C++:) 132.65 295.62 T
1 F
( Dylan modules r) 247.1 295.62 T
(equir) 331.44 295.62 T
(e a mor) 356.85 295.62 T
(e str) 392.98 295.62 T
(uctur) 413.51 295.62 T
(ed) 439.39 295.62 T
(design of pr) 132.65 281.62 T
(otocols than is r) 190.95 281.62 T
(equir) 267.45 281.62 T
(ed with C++ namespaces. T) 292.86 281.62 T
(o add) 426.3 281.62 T
(methods to a Dylan generic function fr) 132.65 267.62 T
(om separate libraries, the mod-) 320.41 267.62 T
(ule de\336ning the pr) 132.65 253.62 T
(otocol \050the module de\336ning the generic function\051) 222.78 253.62 T
(must be de\336ned \336rst, in a separate, shar) 132.65 239.62 T
(ed library) 326.19 239.62 T
(. T) 372.5 239.62 T
(o cr) 383.73 239.62 T
(eate an over-) 401.52 239.62 T
(loaded function in separate C++ libraries, even if they have separate) 132.65 225.62 T
(namespaces, a) 132.65 211.62 T
4 9.5 Q
(using) 204.87 211.62 T
1 11 Q
( dir) 233.37 211.62 T
(ective can cr) 250.19 211.62 T
(eate a local alias to overload a) 309.93 211.62 T
(function in another namespace. The library-use r) 132.65 197.62 T
(elationships of Dylan) 369.18 197.62 T
(modules form a dir) 132.65 183.62 T
(ected graph, wher) 226.4 183.62 T
(eas C++ namespaces can be arbi-) 314.35 183.62 T
(trarily inter) 132.65 169.62 T
(connected.) 188.3 169.62 T
126.65 308.83 126.65 162.08 2 L
V
0.25 H
0 Z
N
477.65 308.83 477.65 162.08 2 L
V
N
126.52 308.95 477.77 308.95 2 L
V
N
126.52 161.95 477.77 161.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "196" 198
%%Page: "197" 199
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11 Libraries and Modules) 407.56 702.62 T
2 11 Q
(197) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(The time library and module \336les must be r) 99.65 659.62 T
(eor) 310.67 659.62 T
(ganized to utilize the) 326.09 659.62 T
4 9.5 Q
(say) 431.24 659.62 T
1 11 Q
( pr) 448.34 659.62 T
(otocol) 461.85 659.62 T
(so that it is shar) 99.65 645.62 T
(ed with the angle library we intend to build.) 175.76 645.62 T
3 13 Q
(1) 99.65 614.29 T
(1.7.4  T) 104.99 614.29 T
(ime module \336le) 140.96 614.29 T
4 9 Q
(Module: dylan-user) 99.65 593.95 T
(def) 99.65 571.95 T
(ine module time-library) 115.85 571.95 T
6 F
(// Classes) 110.45 560.95 T
4 F
(create <time-of-day>, <time-offset>;) 110.45 549.95 T
6 F
(// Shared protocol) 110.45 538.95 T
4 F
(use say-protocol, export: all;) 110.45 527.95 T
(use sixty-unit, import: { encode-total-seconds }, export: all;) 110.45 516.95 T
6 F
(// Methods) 110.45 505.95 T
4 F
(use dylan, import: { \134+ }, export: all;) 110.45 494.95 T
(end;) 99.65 483.95 T
(def) 99.65 464.95 T
(ine module time-library-implementation) 115.85 464.95 T
6 F
(// External interface) 110.45 453.95 T
4 F
(use time-library;) 110.45 442.95 T
6 F
(// Substrate) 110.45 431.95 T
4 F
(use say-implementor, sixty-unit, dylan;) 110.45 420.95 T
(end;) 99.65 409.95 T
3 13 Q
(1) 99.65 380.29 T
(1.7.5  T) 104.99 380.29 T
(ime library \336le) 140.96 380.29 T
4 9 Q
(Module: dylan-user) 99.65 359.95 T
(def) 99.65 340.95 T
(ine library time-library) 115.85 340.95 T
6 F
(// Interface) 110.45 329.95 T
4 F
(export time-library;) 110.45 318.95 T
6 F
(// Substrate) 110.45 307.95 T
4 F
(use say-protocol, sixty-unit, dylan;) 110.45 296.95 T
(end;) 99.65 285.95 T
1 11 Q
(The) 99.65 265.62 T
4 9.5 Q
(time-library) 120.81 265.62 T
1 11 Q
(module is modi\336ed to use) 194.91 265.62 T
4 9.5 Q
(say-protocol) 324.51 265.62 T
1 11 Q
(, which it exports to) 392.91 265.62 T
(its clients. The implementation module is modi\336ed to use) 99.65 251.62 T
4 9.5 Q
(say-implementor) 381.73 251.62 T
1 11 Q
(,) 466.42 251.62 T
(which includes) 99.65 237.62 T
4 9.5 Q
(format) 176.19 237.62 T
1 11 Q
(, so it would be super\337uous to include) 210.39 237.62 T
4 9.5 Q
(format) 399.73 237.62 T
1 11 Q
( in the pr) 433.93 237.62 T
(e-) 477.8 237.62 T
-0.15 (ceding declaration. Similarly) 99.65 223.62 P
-0.15 (, the) 237.84 223.62 P
4 9.5 Q
-0.31 (time-library) 261.05 223.62 P
1 11 Q
-0.15 (library de\336nition r) 334.84 223.62 P
-0.15 (eplaces its use) 424.43 223.62 P
(of the) 99.65 209.62 T
4 9.5 Q
(format) 130.07 209.62 T
1 11 Q
( library with the) 164.27 209.62 T
4 9.5 Q
(say-protocol) 245.68 209.62 T
1 11 Q
( library) 314.08 209.62 T
(.) 348.4 209.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "197" 199
%%Page: "198" 200
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(198) 63.65 702.62 T
0 9.5 Q
(11.7 Protocol design) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(1) 99.65 664.29 T
(1.7.6  Angle module \336le) 104.99 664.29 T
4 9 Q
(Module: dylan-user) 99.65 643.95 T
(def) 99.65 621.95 T
(ine module angle-library) 115.85 621.95 T
(// Classes) 110.45 610.95 T
(create <angle>, <directed-angle>;) 110.45 599.95 T
(// Shared protocol) 110.45 588.95 T
(use say-protocol, export: all;) 110.45 577.95 T
(use sixty-unit, import: { encode-total-seconds }, export: all;) 110.45 566.95 T
(end;) 99.65 555.95 T
(def) 99.65 536.95 T
(ine module angle-library-implementation) 115.85 536.95 T
(// External interface) 110.45 525.95 T
(use angle-library;) 110.45 514.95 T
(// Substrate) 110.45 503.95 T
(use say-implementor, sixty-unit, dylan;) 110.45 492.95 T
(end;) 99.65 481.95 T
3 13 Q
(1) 99.65 452.29 T
(1.7.7  Angle library \336le) 104.99 452.29 T
4 9 Q
(Module: dylan-user) 99.65 431.95 T
(def) 99.65 412.95 T
(ine library angle-library) 115.85 412.95 T
(// Interface) 110.45 401.95 T
(export angle-library;) 110.45 390.95 T
(// Substrate) 110.45 379.95 T
(use say-protocol, sixty-unit, dylan;) 110.45 368.95 T
(end;) 99.65 357.95 T
1 11 Q
(As with the time library) 99.65 337.62 T
(, the angle library \336le does not have to specify the use of) 214.83 337.62 T
(the) 99.65 323.62 T
4 9.5 Q
(format) 117.65 323.62 T
1 11 Q
( library) 151.85 323.62 T
(. It will be transitively included because it is exported by the) 186.18 323.62 T
4 9.5 Q
(say-protocol) 99.65 309.62 T
1 11 Q
( library) 168.05 309.62 T
(. Similarly) 202.37 309.62 T
(, clients of the angle library need not know any-) 250.9 309.62 T
(thing about the) 99.65 295.62 T
4 9.5 Q
(say-protocol) 176.67 295.62 T
1 11 Q
( and) 245.07 295.62 T
4 9.5 Q
(sixty-unit) 269.19 295.62 T
1 11 Q
( libraries.) 326.19 295.62 T
0 F
([---Compar) 126.65 281.62 T
(e to C/C++ libraries wher) 176.54 281.62 T
(e library dependencies ar) 289.7 281.62 T
(e much mor) 399.01 281.62 T
(e mysteri-) 450.96 281.62 T
(ous?]) 99.65 267.62 T
1 F
(Finally) 126.65 253.62 T
(, the angle implementation \336le is simply a collection of the code we) 159.16 253.62 T
(have developed earlier for cr) 99.65 239.62 T
(eating and saying angles, latitudes, and longitudes.) 239.49 239.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "198" 200
%%Page: "199" 201
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11 Libraries and Modules) 407.56 702.62 T
2 11 Q
(199) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 13 Q
0 X
(1) 99.65 664.29 T
(1.7.8  Angle implementation \336le) 104.99 664.29 T
4 9 Q
(Module: angle-library-implementation) 99.65 643.95 T
(def) 99.65 621.95 T
(ine class <angle> \050<sixty-unit>\051) 115.85 621.95 T
(end;) 99.65 610.95 T
(def) 99.65 591.95 T
(ine method say \050angle :: <angle>\051) 115.85 591.95 T
(let\050degrees\051 = decode-total-seconds\050angle\051;) 110.45 580.95 T
(format\050*window*, "%d degrees", degrees\051;) 110.45 569.95 T
(end;) 99.65 558.95 T
(def) 99.65 539.95 T
(ine class <directed-angle> \050<sixty-unit>\051) 115.85 539.95 T
(virtual slot direction) 110.45 528.95 T
( :: <symbol>;) 234.65 528.95 T
(slot internal-direction :: <symbol>;) 110.45 517.95 T
(keyword direction:;) 110.45 506.95 T
(end;) 99.65 495.95 T
(def) 99.65 476.95 T
(ine method initialize \050angle :: <directed-angle>, #key direction: dir\051) 115.85 476.95 T
(next-method\050\051;) 110.45 465.95 T
(angle.direction := dir;) 110.45 454.95 T
(end;) 99.65 443.95 T
(def) 99.65 424.95 T
(ine method direction \050angle :: <directed-angle>\051) 115.85 424.95 T
(angle.internal-direction;) 110.45 413.95 T
(end;) 99.65 402.95 T
(def) 99.65 383.95 T
(ine method direction-setter \050dir, angle :: <directed-angle>\051) 115.85 383.95 T
(angle.internal-direction := dir;) 110.45 372.95 T
(end;) 99.65 361.95 T
(def) 99.65 342.95 T
(ine method say \050angle :: <directed-angle>\051) 115.85 342.95 T
(let\050degrees, minutes, seconds\051 = decode-total-seconds\050angle\051;) 110.45 331.95 T
(format\050*window*, "%d degrees %d minutes %d seconds %s",) 110.45 320.95 T
(degrees, minutes, seconds, angle.direction\051;) 148.25 309.95 T
(end;) 99.65 298.95 T
(def) 99.65 279.95 T
(ine class <latitude> \050<directed-angle>\051) 115.85 279.95 T
(end;) 99.65 268.95 T
(def) 99.65 249.95 T
(ine method say \050latitude :: <latitude>\051) 115.85 249.95 T
(next-method\050\051;) 110.45 238.95 T
(format\050*window*, " latitude\134n"\051;) 110.45 227.95 T
(end;) 99.65 216.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "199" 201
%%Page: "200" 202
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(200) 63.65 702.62 T
0 9.5 Q
(11.8 Summary) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine method direction-setter \050dir, latitude :: <latitude>\051) 115.85 666.95 T
(if \050dir == north: | dir == south:\051) 110.45 655.95 T
(next-method\050\051;) 132.05 644.95 T
(else error \050"%= is not north: or south:", dir\051;) 121.25 633.95 T
(end;) 110.45 622.95 T
(end;) 99.65 611.95 T
(def) 99.65 592.95 T
(ine class <longitude> \050<directed-angle>\051) 115.85 592.95 T
(end;) 99.65 581.95 T
(def) 99.65 562.95 T
(ine method say \050longitude :: <longitude>\051) 115.85 562.95 T
(next-method\050\051;) 110.45 551.95 T
(format\050*window*, " longitude\134n"\051;) 110.45 540.95 T
(end;) 99.65 529.95 T
(def) 99.65 510.95 T
(ine method direction-setter \050dir, longitude :: <longitude>\051) 115.85 510.95 T
(if \050dir == east: | dir == west:\051) 110.45 499.95 T
(next-method\050\051;) 132.05 488.95 T
(else error \050"%= is not east: or west:", dir\051;) 121.25 477.95 T
(end;) 110.45 466.95 T
(end;) 99.65 455.95 T
3 15 Q
(1) 99.65 417.95 T
(1.8  Summary) 105.81 417.95 T
1 11 Q
(This chapter covers the following:) 99.65 397.62 T
(\245) 108.65 377.62 T
(W) 126.65 377.62 T
(e de\336ned modules and libraries.) 136.64 377.62 T
(\245) 108.65 357.62 T
(W) 126.65 357.62 T
(e illustrated how to design modules using thr) 136.64 357.62 T
(ee r) 357.97 357.62 T
(oles: interface modules,) 375.4 357.62 T
(implementation modules, and client modules.) 126.65 343.62 T
(\245) 108.65 323.62 T
(W) 126.65 323.62 T
(e illustrated how a library might appear in Dylan inter) 136.64 323.62 T
(change format.) 401.23 323.62 T
(\245) 108.65 303.62 T
(W) 126.65 303.62 T
(e showed how to cr) 136.64 303.62 T
(eate a shar) 231.35 303.62 T
(ed library) 282.68 303.62 T
(.) 328.99 303.62 T
(\245) 108.65 283.62 T
(W) 126.65 283.62 T
(e illustrated the importance of good pr) 136.64 283.62 T
(otocol design.) 324.36 283.62 T
(\245) 108.65 263.62 T
(W) 126.65 263.62 T
(e showed how to cr) 136.64 263.62 T
(eate a pr) 231.35 263.62 T
(otocol that can be implemented acr) 272.73 263.62 T
(oss sev-) 442.86 263.62 T
(eral libraries.) 126.65 249.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "200" 202
%%Page: "201" 203
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(201) 289.4 135.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(12) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(12) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Performance and Flexibility) 101.65 591.4 T
99.65 159.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(Dylan is designed to give r) 99.65 449.62 T
(easonable performance by default. For small pr) 229.9 449.62 T
(ojects,) 459.33 449.62 T
(pr) 99.65 435.62 T
(ojects that can \336t in a single library) 110.41 435.62 T
(, the compiler can analyze the entir) 278.27 435.62 T
(e pr) 448.14 435.62 T
(oject) 466.92 435.62 T
(and generate code that is competitive with any static language. If type declara-) 99.65 421.62 T
(tions ar) 99.65 407.62 T
(e used for all variables, slots, and parameters \050as they would be in a static) 135.9 407.62 T
(language\051, the compiler can generate code equivalent to that generated by com-) 99.65 393.62 T
(pilers for static languages.) 99.65 379.62 T
(This chapter covers the advanced topics of performance and \337exibility) 126.65 365.62 T
(.) 467.11 365.62 T
(Dylan gives the ability to loosen or defer type declarations in support of rapid) 99.65 351.62 T
(pr) 99.65 337.62 T
(ototyping or evolutionary development. Dylan also pr) 110.41 337.62 T
(ovides contr) 374.24 337.62 T
(ol over the) 434.09 337.62 T
(\337exibility of classes and generic functions in support of lar) 99.65 323.62 T
(ge pr) 383.26 323.62 T
(ojects wher) 408.15 323.62 T
(e) 462.88 323.62 T
(classes and generic functions will be combined or extended as components ar) 99.65 309.62 T
(e) 475.32 309.62 T
(assembled into the \336nal pr) 99.65 295.62 T
(oduct.) 228.7 295.62 T
(If you ar) 126.65 281.62 T
(e writing a stand-alone library and ar) 167.92 281.62 T
(e comfortable with always) 349.19 281.62 T
(using full type declarations, you do not need to r) 99.65 267.62 T
(ead this chapter car) 336.6 267.62 T
(efully) 431.32 267.62 T
(. Y) 458.18 267.62 T
(ou) 470.01 267.62 T
-0.37 (may want to skim the chapter so you have an idea of what options ar) 99.65 253.62 P
-0.37 (e available to) 429.97 253.62 P
(you in the futur) 99.65 239.62 T
(e.) 176.18 239.62 T
-0.25 (This chapter discusses the use of type declarations and limited types for per-) 126.65 225.62 P
(formance, the use of open classes and generic functions for extensibility and) 99.65 211.62 T
(domain sealing for performance, and the bene\336ts and r) 99.65 197.62 T
(estrictions of using pri-) 366.89 197.62 T
(mary classes.) 99.65 183.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "201" 203
%%Page: "202" 204
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(202) 63.65 702.62 T
0 9.5 Q
(12.1 Type declarations) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 15 Q
0 X
(12.1  T) 99.65 662.95 T
(ype declarations) 137.04 662.95 T
1 11 Q
(In Dylan, variables, parameters, and slots can all have type declarations. T) 99.65 642.62 T
(ype) 458.95 642.62 T
(declarations in a dynamic language serve a number of purposes. T) 99.65 628.62 T
(ype declara-) 421.49 628.62 T
-0.46 (tions ar) 99.65 614.62 P
-0.46 (e r) 135.44 614.62 P
-0.46 (equir) 147.15 614.62 P
-0.46 (ed for the purposes of generic function dispatching \321 the methods) 172.56 614.62 P
(of a generic function ar) 99.65 600.62 T
(e distinguished by the types of their r) 211.73 600.62 T
(equir) 393.35 600.62 T
(ed ar) 418.76 600.62 T
(guments;) 443.14 600.62 T
(the generic function) 99.65 586.62 T
2 F
(dispatches) 199.42 586.62 T
1 F
( \050chooses among its methods\051 by \336nding the) 252.56 586.62 T
(method whose formal parameter types most closely match the actual ar) 99.65 572.62 T
(gument) 446.77 572.62 T
-0.24 (types. T) 99.65 558.62 P
-0.24 (ype declarations can be used optionally to enfor) 136.9 558.62 P
-0.24 (ce pr) 368.07 558.62 P
-0.24 (ogram r) 391.49 558.62 P
-0.24 (estrictions \321) 429.82 558.62 P
-0.06 (the compiler ensur) 99.65 544.62 P
-0.06 (ed that a variable, parameter) 190.64 544.62 P
-0.06 (, or slot will never take on a value) 329.37 544.62 P
(that is incompatible with its type declaration. \050If the compiler cannot pr) 99.65 530.62 T
(ove at) 446.31 530.62 T
-0.23 (compile time that an incorr) 99.65 516.62 P
-0.23 (ect type is impossible, it inserts r) 230.33 516.62 P
-0.23 (un-time checks wher) 387.15 516.62 P
-0.23 (e) 487.86 516.62 P
(necessary to enfor) 99.65 502.62 T
(ce the type declaration.\051 T) 187.34 502.62 T
(ype declarations also allow the com-) 312.11 502.62 T
(piler to generate mor) 99.65 488.62 T
(e optimal code, because they ar) 201.74 488.62 T
(e a contract between the pr) 353.53 488.62 T
(o-) 484.31 488.62 T
(grammer and the compiler that the variable, parameter) 99.65 474.62 T
(, or slot in question will) 366.73 474.62 T
(never take on a value that is incompatible with its type declaration; hence the) 99.65 460.62 T
(compiler need only generate code for dealing with the declar) 99.65 446.62 T
(ed type.) 395.42 446.62 T
-0.41 (Many Dylan compilers use) 126.65 432.62 P
2 F
-0.41 (type inferencing) 258.64 432.62 P
1 F
-0.41 ( to determine the possible types) 341.02 432.62 P
(of variables, parameters, and slots that do not have explicit type declarations.) 99.65 418.62 T
(W) 99.65 404.62 T
(ithin a library) 110.04 404.62 T
(, the compiler essentially knows everything about the variables) 175.4 404.62 T
(and functions that ar) 99.65 390.62 T
(e not exported at the library interface \321 it can analyze all) 200.68 390.62 T
(uses of variables, all callers and callees of functions. Thr) 99.65 376.62 T
(ough this analysis, the) 370.75 376.62 T
(compiler can develop a worst-case scenario of the possible types of every vari-) 99.65 362.62 T
-0.06 (able, parameter) 99.65 348.62 P
-0.06 (, and slot. As a r) 174.46 348.62 P
-0.06 (esult, these compilers generate very ef) 252.34 348.62 P
-0.06 (\336cient code) 437.4 348.62 P
(even if the pr) 99.65 334.62 T
(ogrammer does not fully declar) 163.93 334.62 T
(e all types \050as would be r) 317.13 334.62 T
(equir) 438.11 334.62 T
(ed in) 463.52 334.62 T
(most static languages\051.) 99.65 320.62 T
-0.5 (Some compilers have a facility for generating) 126.65 306.62 P
2 F
-0.5 (performance warnings) 345.49 306.62 P
1 F
-0.5 (, which) 458.34 306.62 P
(inform you when type infer) 99.65 292.62 T
(encing is not able to determine types suf) 234.24 292.62 T
(\336ciently to) 430.05 292.62 T
-0.17 (generate optimal code. Some compilers have a facility for generating) 99.65 278.62 P
2 F
-0.17 (safety warn-) 433.8 278.62 P
(ings) 99.65 264.62 T
1 F
(, informing you when type infer) 121.03 264.62 T
(encing is not able to determine types suf) 276.85 264.62 T
(\336-) 472.66 264.62 T
-0.12 (ciently to omit r) 99.65 250.62 P
-0.12 (un-time type-checking. As an example, consider some de\336nitions) 176.54 250.62 P
(fr) 99.65 236.62 T
(om Section 1) 107.46 236.62 T
(1.6, page 192:) 168.7 236.62 T
4 9 Q
(def) 99.65 215.95 T
(ine open class <sixty-unit> \050<object>\051) 115.85 215.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:,) 110.45 204.95 T
(init-value: 0;) 229.25 193.95 T
(end;) 99.65 182.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "202" 204
%%Page: "203" 205
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12 Performance and Flexibility) 387.33 702.62 T
2 11 Q
(203) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine method decode-total-seconds \050sixty-unit :: <sixty-unit>\051) 115.85 666.95 T
(let\050total-minutes, seconds\051 = truncate/\050sixty-unit.total-seconds, 60\051;) 110.45 655.95 T
(let\050max-unit, minutes\051 = truncate/\050total-minutes, 60\051;) 110.45 644.95 T
(values \050max-unit, minutes, seconds\051;) 110.45 633.95 T
(end;) 99.65 622.95 T
1 11 Q
(Because we made the choice to stor) 99.65 602.62 T
(e) 270.63 602.62 T
4 9.5 Q
(total-seconds) 278.65 602.62 T
1 11 Q
( as an integer) 352.75 602.62 T
(, the compiler) 416.44 602.62 T
-0.15 (can infer that the) 99.65 588.62 P
4 9.5 Q
-0.32 (truncate/) 184.04 588.62 P
1 11 Q
-0.15 ( calls ar) 235.34 588.62 P
-0.15 (e for an integer divided by a non-zer) 271.63 588.62 P
-0.15 (o integer) 448.32 588.62 P
-0.15 (.) 490.3 588.62 P
-0.19 (Ther) 99.65 574.62 P
-0.19 (e is no need to check for divide-by-zer) 122.21 574.62 P
-0.19 (o; ther) 306.27 574.62 P
-0.19 (e is no need to consider whether) 336.99 574.62 P
(to use \337oating-point or integer division.) 99.65 560.62 T
(If we wer) 126.65 546.62 T
(e mor) 172.55 546.62 T
(e concerned with testing out ideas, we might have left the) 200.44 546.62 T
(type of the) 99.65 532.62 T
4 9.5 Q
(total-seconds) 154.41 532.62 T
1 11 Q
( slot unspeci\336ed \050implicitly) 228.51 532.62 T
(, its type would then be) 359.88 532.62 T
4 9.5 Q
-0.69 (<object>) 99.65 518.62 P
1 11 Q
-0.33 (\051, or) 145.25 518.62 P
-0.33 (, if we wanted to keep the option of having times mor) 163.62 518.62 P
-0.33 (e accurate than) 420.64 518.62 P
-0.05 (just seconds, we might have speci\336ed that its type was) 99.65 504.62 P
4 9.5 Q
-0.09 (<number>) 367.08 504.62 P
1 11 Q
-0.05 (, leaving the pos-) 412.68 504.62 P
(sibility of sometimes using \337oating-point numbers, which can expr) 99.65 490.62 T
(ess fractional) 425.05 490.62 T
(seconds.) 99.65 476.62 T
(If we left the type of the) 126.65 462.62 T
4 9.5 Q
(total-seconds) 245.2 462.62 T
1 11 Q
( slot unspeci\336ed, the compiler) 319.3 462.62 T
(would need to check the ar) 99.65 448.62 T
(guments to) 230.85 448.62 T
4 9.5 Q
(truncate/) 288.32 448.62 T
1 11 Q
(, on the of) 339.62 448.62 T
(f chance that an ar) 387.76 448.62 T
(gu-) 476.38 448.62 T
-0.12 (ment is not numeric at all. In some compilers, you would be able to get a compile-) 99.65 434.62 P
-0.05 (time safety warning stating that a r) 99.65 420.62 P
-0.05 (un-time type err) 269.44 420.62 P
-0.05 (or is possible \050which if unhan-) 348.64 420.62 P
(dled, will r) 99.65 406.62 T
(esult in pr) 152.73 406.62 T
(ogram failur) 201.95 406.62 T
(e\051, and that the check, and the possibility of a) 262.72 406.62 T
(r) 99.65 392.62 T
(un time err) 103.9 392.62 T
(or) 157.97 392.62 T
(, could be avoided if the compiler knew that) 167.51 392.62 T
4 9.5 Q
(total-seconds) 384.82 392.62 T
1 11 Q
( was a) 458.92 392.62 T
4 9.5 Q
(<number>) 99.65 378.62 T
1 11 Q
(.) 145.25 378.62 T
-0.17 (If we speci\336ed the type of the) 126.65 364.62 P
4 9.5 Q
-0.34 (total-seconds) 271.59 364.62 P
1 11 Q
-0.17 ( slot as) 345.69 364.62 P
4 9.5 Q
-0.34 (<number>) 381.06 364.62 P
1 11 Q
-0.17 (, the compiler) 426.66 364.62 P
-0.09 (would have to dispatch on the type of) 99.65 350.62 P
4 9.5 Q
-0.19 (total-seconds) 286.11 350.62 P
1 11 Q
-0.09 (, using either \337oating-point) 360.21 350.62 P
(or integer division as necessary) 99.65 336.62 T
(. In some compilers, you would be able to get a) 250.85 336.62 T
(compile-time performance warning stating that this dispatch could be omitted if) 99.65 322.62 T
(the compiler knew that) 99.65 308.62 T
4 9.5 Q
(total-seconds) 215.17 308.62 T
1 11 Q
( wer) 289.27 308.62 T
(e a mor) 310.61 308.62 T
(e r) 346.74 308.62 T
(estricted type.) 358.91 308.62 T
(Note that the r) 126.65 294.62 T
(esult-type of) 197.38 294.62 T
4 9.5 Q
(decode-total-seconds) 261.14 294.62 T
1 11 Q
( can be inferr) 375.14 294.62 T
(ed:) 438.56 294.62 T
4 9.5 Q
(max-) 456.05 294.62 T
(unit) 99.65 280.62 T
1 11 Q
( and) 122.45 280.62 T
4 9.5 Q
(minutes) 146.57 280.62 T
1 11 Q
( must be) 186.47 280.62 T
4 9.5 Q
(<integer>) 230.67 280.62 T
1 11 Q
(, fr) 281.97 280.62 T
(om the de\336nition of) 295.28 280.62 T
4 9.5 Q
(truncate/) 394.37 280.62 T
1 11 Q
(, and) 445.67 280.62 T
4 9.5 Q
(sec-) 472.54 280.62 T
(onds) 99.65 266.62 T
1 11 Q
( must have the same type as) 122.45 266.62 T
4 9.5 Q
(total-seconds) 261.83 266.62 T
1 11 Q
(. Fr) 335.93 266.62 T
(om this example you can see) 351.69 266.62 T
(how the compiler can get a lot of mileage fr) 99.65 252.62 T
(om a small number of declarations,) 310.27 252.62 T
-0.32 (and how it can point you to the places wher) 99.65 238.62 P
-0.32 (e further clari\336cation will pr) 309.86 238.62 P
-0.32 (oduce the) 446.01 238.62 P
(most performance and safety bene\336ts. At the same time, Dylan does not r) 99.65 224.62 T
(equir) 456.32 224.62 T
(e) 481.73 224.62 T
(that you have all your types thought out in advance of compiling the pr) 99.65 210.62 T
(ogram;) 447.93 210.62 T
(the dynamic natur) 99.65 196.62 T
(e of the language allows it to defer considering type informa-) 189.21 196.62 T
(tion until the pr) 99.65 182.62 T
(ogram is actually r) 176.13 182.62 T
(unning. In most Dylan development envir) 266.8 182.62 T
(on-) 471.77 182.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "203" 205
%%Page: "204" 206
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(204) 63.65 702.62 T
0 9.5 Q
(12.2 Limited types) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(ments, ther) 99.65 665.62 T
(e is good support for r) 154.19 665.62 T
(esolving and continuing fr) 262.54 665.62 T
(om r) 391.13 665.62 T
(un-time type) 413.85 665.62 T
(err) 99.65 651.62 T
(ors \050rather than r) 113.41 651.62 T
(equiring editing of the code and r) 195.82 651.62 T
(ecompiling\051.) 358.72 651.62 T
(Remember that your code is mor) 126.65 637.62 T
(e suited to r) 286.19 637.62 T
(euse when it has fewer and) 343.52 637.62 T
(mor) 99.65 623.62 T
(e general type declarations. If you have a compiler that can issue safety and) 119.51 623.62 T
(performance notes, try to generalize and minimize your type declarations, being) 99.65 609.62 T
-0.29 (guided by your safety and performance r) 99.65 595.62 P
-0.29 (equir) 297.96 595.62 P
-0.29 (ements. Often, just the declarations) 323.37 595.62 P
(r) 99.65 581.62 T
(equir) 103.79 581.62 T
(ed to specify method applicability will be suf) 129.21 581.62 T
(\336cient for very good safety) 347.93 581.62 T
-0.14 (and performance. Declaring the types of variables and slots is also useful and can) 99.65 567.62 P
(help to document your pr) 99.65 553.62 T
(ogram. Lastly) 224.79 553.62 T
(, you may occasionally need to r) 290.54 553.62 T
(esort to) 446.84 553.62 T
(declaring the types of local variables to eke out the last bit of performance in) 99.65 539.62 T
(obscur) 99.65 525.62 T
(e cases.) 132.07 525.62 T
3 15 Q
(12.2  Limited types) 99.65 485.95 T
1 11 Q
(Some of Dylan\325s built-in types ar) 99.65 465.62 T
(e extr) 259.15 465.62 T
(emely general. When these types ar) 285.85 465.62 T
(e used,) 458.17 465.62 T
(the compiler) 99.65 451.62 T
(\325s type infer) 161.7 451.62 T
(encing is thwarted and less ef) 219.18 451.62 T
(\336cient code will be gener-) 362.81 451.62 T
(ated. The place wher) 99.65 437.62 T
(e this is most obvious is in the) 200.6 437.62 T
4 9.5 Q
(<collection>) 349.08 437.62 T
1 11 Q
(types, wher) 423.18 437.62 T
(e) 479.92 437.62 T
-0.23 (the elements of a collection ar) 99.65 423.62 P
-0.23 (e essentially like the value of a r) 242.31 423.62 P
-0.23 (epeated slot. For the) 395.43 423.62 P
-0.04 (built-in collections, elements can be any object and ther) 99.65 409.62 P
-0.04 (e can be an arbitrary num-) 367.34 409.62 P
(ber of them. The) 99.65 395.62 T
4 9.5 Q
(limited) 182.15 395.62 T
1 11 Q
( mechanism is a way to specify that you only expect to) 222.05 395.62 T
(stor) 99.65 381.62 T
(e a particular type in the collection and per) 118.05 381.62 T
(haps exactly how many elements) 326.36 381.62 T
(will be in the collection.) 99.65 367.62 T
(As an example, the slot) 126.65 353.62 T
4 9.5 Q
(gate-instances) 242.23 353.62 T
1 11 Q
( in the) 322.02 353.62 T
4 9.5 Q
(<airport>) 355.14 353.62 T
1 11 Q
( class is declar) 406.43 353.62 T
(ed) 475.18 353.62 T
(to be a) 99.65 339.62 T
4 9.5 Q
(<vector>) 134.34 339.62 T
1 11 Q
(. W) 179.94 339.62 T
(ithout further information, the compiler must assume that) 195.84 339.62 T
(anything at all might be stor) 99.65 325.62 T
(ed in that vector) 236.88 325.62 T
(. As a r) 315.29 325.62 T
(esult, the following code will) 349.16 325.62 T
(be inef) 99.65 311.62 T
(\336cient:) 132.09 311.62 T
4 9 Q
(let gates = *airport*.gate-instances;) 110.45 290.95 T
(for \050gate in gates\051) 110.45 279.95 T
(gate.connected-to := taxiway-vector;) 121.25 268.95 T
(end;) 110.45 257.95 T
1 11 Q
(Because the compiler can only infer that) 99.65 237.62 T
4 9.5 Q
(gates) 296.79 237.62 T
1 11 Q
( is a) 325.29 237.62 T
4 9.5 Q
(<vector>) 346.9 237.62 T
1 11 Q
(, it must generate) 392.51 237.62 T
-0.32 (extra code to determine if each) 99.65 223.62 P
4 9.5 Q
-0.65 (gate) 249.79 223.62 P
1 11 Q
-0.32 ( has a) 272.59 223.62 P
4 9.5 Q
-0.65 (connected-to) 301.96 223.62 P
1 11 Q
-0.32 ( method on it. W) 370.36 223.62 P
-0.32 (e can use) 449.73 223.62 P
(limited types to constrain) 99.65 209.62 T
4 9.5 Q
(gate-instances) 226.37 209.62 T
1 11 Q
( as follows:) 306.17 209.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "204" 206
%%Page: "205" 207
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12 Performance and Flexibility) 387.33 702.62 T
2 11 Q
(205) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine class <airport> \050<physical-object>\051) 115.85 666.95 T
(\311) 110.45 655.95 T
(slot gate-instances) 110.45 644.95 T
( :: limited\050<vector> of: <gate>\051;) 261.65 644.95 T
(\311) 110.45 633.95 T
(end;) 99.65 622.95 T
1 11 Q
(W) 99.65 602.62 T
(ith the limited declaration of) 110.04 602.62 T
4 9.5 Q
(gate-instances) 251.41 602.62 T
1 11 Q
(, the compiler can ensur) 331.21 602.62 T
(e that) 447.35 602.62 T
(only gate objects will ever be stor) 99.65 588.62 T
(ed in the vector and hence it can be sur) 261.04 588.62 T
(e that) 450.16 588.62 T
(each) 99.65 574.62 T
4 9.5 Q
(gate) 124.45 574.62 T
1 11 Q
( will be a) 147.25 574.62 T
4 9.5 Q
(<gate>) 193.88 574.62 T
1 11 Q
( and will have a) 228.08 574.62 T
4 9.5 Q
(connected-to) 308.12 574.62 T
1 11 Q
( method.) 376.52 574.62 T
(If) 126.65 560.62 T
4 9.5 Q
(<gate>) 136.77 560.62 T
1 11 Q
( and) 170.97 560.62 T
4 9.5 Q
(connected-to) 195.09 560.62 T
1 11 Q
( ar) 263.49 560.62 T
(e not) 275.89 560.62 T
2 F
(open) 302.65 560.62 T
1 F
( \050as described in Section 12.4 and) 327.71 560.62 T
-0.14 (Section 12.5\051, the compiler can infer that) 99.65 546.62 P
4 9.5 Q
-0.3 (connected-to) 295.89 546.62 P
1 11 Q
-0.14 ( is used her) 364.29 546.62 P
-0.14 (e to set a slot in) 419.08 546.62 P
(the gate instance and further optimize the code generated. W) 99.65 532.62 T
(e do not delve into) 395.34 532.62 T
(the exact details of what the compiler has to know to make this optimization, but) 99.65 518.62 T
(it is worth noting that if either the class or the generic function wer) 99.65 504.62 T
(e open, the) 423.92 504.62 T
(optimization could not be made.) 99.65 490.62 T
3 15 Q
(12.3  T) 99.65 315.95 T
(yped generic functions) 137.04 315.95 T
1 11 Q
(In addition to specifying the types of the parameters to methods, you can specify) 99.65 295.62 T
(the types of the parameters \050and r) 99.65 281.62 T
(esults\051 of a generic function. Restricting the) 263.81 281.62 T
(parameter types of a generic function is usually done to establish the) 99.65 267.62 T
2 F
(contract) 436.09 267.62 T
1 F
( of) 475.8 267.62 T
(the generic function; that is, it de\336nes the domain of ar) 99.65 253.62 T
(guments the generic func-) 364.99 253.62 T
(tion is intended to handle.) 99.65 239.62 T
-0.18 (Consider the generic function) 126.65 225.62 P
4 9.5 Q
-0.37 (say) 272.86 225.62 P
1 11 Q
-0.18 (de\336ned in Section 3.3, page 42. W) 295.29 225.62 P
-0.18 (e might) 456.22 225.62 P
(have de\336ned it to operate only on objects of type) 99.65 211.62 T
4 9.5 Q
(<time>) 338.99 211.62 T
1 11 Q
(:) 373.19 211.62 T
6 9 Q
(// Given a time, print a description of the time.) 99.65 190.95 T
4 F
(def) 99.65 179.95 T
(ine generic say \050time :: <time>\051;) 115.85 179.95 T
2 11 Q
(Comparison with C++:) 132.65 456.62 T
1 F
( Dylan limited types pr) 247.1 456.62 T
(ovide a capability simi-) 359.73 456.62 T
-0.3 (lar to C++ template classes. Unlike C++, the base type of a limited type) 132.65 442.62 P
(\050the equivalent of a C++ class template \321 in the example above,) 132.65 428.62 T
4 9.5 Q
(<vec-) 446.87 428.62 T
-0.88 (tor>) 132.65 414.62 P
1 11 Q
-0.43 (\051 is also a valid type. Dylan\325s dynamic capabilities mean that it can) 155.45 414.62 P
(defer determining the element type of a collection until r) 132.65 400.62 T
(un-time, in) 407.53 400.62 T
(ef) 132.65 386.62 T
(fect adapting the class template as it goes along. By using a limited) 141.38 386.62 T
(type, the compiler can generate mor) 132.65 372.62 T
(e ef) 307.62 372.62 T
(\336cient code.) 324.38 372.62 T
126.65 469.83 126.65 365.08 2 L
V
0.25 H
0 Z
N
477.65 469.83 477.65 365.08 2 L
V
N
126.52 469.95 477.77 469.95 2 L
V
N
126.52 364.95 477.77 364.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "205" 207
%%Page: "206" 208
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(206) 63.65 702.62 T
0 9.5 Q
(12.4 Open generic functions) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
-0.18 (This type declaration would mean we never intended to call) 99.65 665.62 P
4 9.5 Q
-0.37 (say) 393.06 665.62 P
1 11 Q
-0.18 ( on anything that) 410.16 665.62 P
(is not a time. It would be an err) 99.65 651.62 T
(or to de\336ne a) 251.57 651.62 T
4 9.5 Q
(say) 318.33 651.62 T
1 11 Q
( method on a type that is not a) 335.43 651.62 T
(subtype of) 99.65 637.62 T
4 9.5 Q
(<time>) 153.78 637.62 T
1 11 Q
(. Additionally) 187.98 637.62 T
(, it implies that if we wer) 254.67 637.62 T
(e to de\336ne a new sub-) 375.54 637.62 T
-0.26 (class of) 99.65 623.62 P
4 9.5 Q
-0.53 (<time>) 137.22 623.62 P
1 11 Q
-0.26 (, say) 171.42 623.62 P
4 9.5 Q
-0.53 (<sidereal-time>) 195.43 623.62 P
1 11 Q
-0.26 (, we would want to de\336ne a method for that) 280.93 623.62 P
-0.13 (class. As it is, we anticipated that) 99.65 609.62 P
4 9.5 Q
-0.27 (say) 262.24 609.62 P
1 11 Q
-0.13 ( would be useful for other classes, so we did) 279.34 609.62 P
(not r) 99.65 595.62 T
(estrict its ar) 122.54 595.62 T
(gument type.) 178.67 595.62 T
-0.18 (In addition to establishing a contract, specifying the types of the parameters) 126.65 581.62 P
(and r) 99.65 567.62 T
(esults of generic functions can allow the compiler to make additional infer-) 125.17 567.62 T
(ences, as was described above with r) 99.65 553.62 T
(egar) 277.63 553.62 T
(ds to) 298.66 553.62 T
4 9.5 Q
(truncate/) 325.14 553.62 T
1 11 Q
(. In the absence of other) 376.44 553.62 T
(information, the compiler is limited in the optimizations it can make on the basis) 99.65 539.62 T
(of generic function parameter types alone, so it is generally best to not arti\336cially) 99.65 525.62 T
(r) 99.65 511.62 T
(estrict the types of a generic, but rather to use the r) 103.79 511.62 T
(estricted types to document) 349.8 511.62 T
(the generic function\325s contract.) 99.65 497.62 T
(Dylan does allow you to omit de\336ning a generic function at all. If a method) 126.65 483.62 T
(is de\336ned without also de\336ning a generic function, Dylan implicitly cr) 99.65 469.62 T
(eates a) 440.97 469.62 T
(generic function with the most general parameter and r) 99.65 455.62 T
(esult types that ar) 368.51 455.62 T
(e com-) 455.08 455.62 T
(patible with the method. The most common case of implicit generic functions is) 99.65 441.62 T
(for the slot accessor methods that ar) 99.65 427.62 T
(e cr) 274.17 427.62 T
(eated when a new class is de\336ned.) 291.22 427.62 T
(Because these generic functions typically have only a single method and ar) 99.65 413.62 T
(e) 462.8 413.62 T
2 F
(sealed) 99.65 399.62 T
1 F
( by default \050see Section 12.4\051, the compiler can make extensive optimiza-) 131.42 399.62 T
(tions for slot accessors.) 99.65 385.62 T
3 15 Q
(12.4  Open generic functions) 99.65 345.95 T
1 11 Q
(By default, generic functions ar) 99.65 325.62 T
(e) 251.38 325.62 T
2 F
(sealed) 259.4 325.62 T
1 F
(. When you use) 291.17 325.62 T
4 9.5 Q
(def) 369.31 325.62 T
(ine generic) 386.41 325.62 T
1 11 Q
(, it is the) 449.11 325.62 T
(same as using) 99.65 311.62 T
4 9.5 Q
(def) 170.22 311.62 T
(ine sealed generic) 187.32 311.62 T
1 11 Q
(. No other library can add methods to a) 289.92 311.62 T
(sealed generic function, not even on new classes they may intr) 99.65 297.62 T
(oduce. Methods) 402.07 297.62 T
(cannot be added to or r) 99.65 283.62 T
(emoved fr) 212.55 283.62 T
(om the generic function at r) 262.3 283.62 T
(un time. The only) 396.64 283.62 T
(methods on a sealed generic function ar) 99.65 269.62 T
(e the methods that ar) 292.95 269.62 T
(e de\336ned in the) 395.56 269.62 T
-0.29 (library wher) 99.65 255.62 P
-0.29 (e the generic function itself is de\336ned. Because of the r) 159.89 255.62 P
-0.29 (estrictions on a) 420.55 255.62 P
(sealed generic, the compiler) 99.65 241.62 T
(, using other type-infer) 234.43 241.62 T
(ence information, can often) 345.98 241.62 T
(narr) 99.65 227.62 T
(ow the choice of applicable method at any particular call to the generic func-) 120.04 227.62 T
(tion, eliminating much of the over) 99.65 213.62 T
(head of r) 265.33 213.62 T
(un-time dispatching that would nor-) 308.65 213.62 T
(mally be expected of a dynamic language.) 99.65 199.62 T
-0.33 (W) 126.65 185.62 P
-0.33 (e saw in Chapter 1) 136.64 185.62 P
-0.33 (1 that a generic function that is part of a shar) 224.94 185.62 P
-0.33 (ed pr) 438.37 185.62 P
-0.33 (otocol) 463.54 185.62 P
(must be de\336ned using) 99.65 171.62 T
4 9.5 Q
(def) 210.65 171.62 T
(ine open generic) 227.75 171.62 T
1 11 Q
(, so that libraries sharing the pr) 318.95 171.62 T
(oto-) 470.4 171.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "206" 208
%%Page: "207" 209
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12 Performance and Flexibility) 387.33 702.62 T
2 11 Q
(207) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(col can implement the pr) 99.65 665.62 T
(otocol for the classes they de\336ne, by adding methods. If) 220.51 665.62 T
(you did not de\336ne the generic function to be open, other libraries would be pr) 99.65 651.62 T
(o-) 478.62 651.62 T
(hibited fr) 99.65 637.62 T
(om adding methods to the generic function, which would make it use-) 144.67 637.62 T
(less as a pr) 99.65 623.62 T
(otocol. Unfortunately) 152.12 623.62 T
(, a generic function that is open cannot be) 255.35 623.62 T
(optimized. Even when the compiler may be able to infer the exact types of the) 99.65 609.62 T
(ar) 99.65 595.62 T
(guments to the generic in a particular call, because an open generic may have) 109.29 595.62 T
-0.15 (methods added or r) 99.65 581.62 P
-0.15 (emoved, even at r) 195.24 581.62 P
-0.15 (un time, the compiler must pr) 281.48 581.62 P
-0.15 (oduce code to) 425.86 581.62 P
(handle all these possibilities.) 99.65 567.62 T
(Because open generic functions cannot be optimized, you should use them) 126.65 553.62 T
(only when necessary) 99.65 539.62 T
(. Y) 200.01 539.62 T
(ou need to balance the division of your pr) 211.84 539.62 T
(ogram into) 414.96 539.62 T
(libraries against the need to export and open mor) 99.65 525.62 T
(e generic functions if the pr) 339.21 525.62 T
(o-) 472.03 525.62 T
(gram is too \336nely divided. This balance is illustrated by the considerations we) 99.65 511.62 T
(took in designing a pr) 99.65 497.62 T
(otocol in Section 1) 206.32 497.62 T
(1.7, page 195. When we chose to split the) 293.88 497.62 T
4 9.5 Q
(time) 99.65 483.62 T
1 11 Q
( and) 122.45 483.62 T
4 9.5 Q
(angle) 146.57 483.62 T
1 11 Q
( libraries, we wer) 175.07 483.62 T
(e for) 258.91 483.62 T
(ced to cr) 280.75 483.62 T
(eate the) 321.74 483.62 T
4 9.5 Q
(say) 362.13 483.62 T
1 11 Q
( pr) 379.23 483.62 T
(otocol library and) 392.73 483.62 T
(open the generic function) 99.65 469.62 T
4 9.5 Q
(say) 226.46 469.62 T
1 11 Q
(. In Section 12.6, we show how to r) 242.34 469.62 T
(egain some opti-) 410.33 469.62 T
(mizations when you decide that opening a generic function is r) 99.65 455.62 T
(equir) 405.84 455.62 T
(ed.) 431.25 455.62 T
(Note that generic functions that ar) 126.65 441.62 T
(e implicitly de\336ned in a library) 293.12 441.62 T
(, such as) 442.77 441.62 T
(those that ar) 99.65 427.62 T
(e de\336ned when you only de\336ne a single method, or those that ar) 159.8 427.62 T
(e) 472.94 427.62 T
(de\336ned for every slot accessor) 99.65 413.62 T
(, ar) 245.77 413.62 T
(e sealed by default. If you expect other libraries) 260.92 413.62 T
(to add methods to one of these implicit generic functions, you must explicitly) 99.65 399.62 T
(de\336ne the generic to be open using) 99.65 385.62 T
4 9.5 Q
(def) 272.2 385.62 T
(ine open generic) 289.3 385.62 T
1 11 Q
(.) 380.51 385.62 T
3 15 Q
(12.5  Open classes) 99.65 345.95 T
1 11 Q
-0.32 (By default, classes ar) 99.65 325.62 P
-0.32 (e) 199.59 325.62 P
2 F
-0.32 (sealed) 207.29 325.62 P
1 F
-0.32 (. When you use) 239.06 325.62 P
4 9.5 Q
-0.66 (def) 315.92 325.62 P
-0.66 (ine class) 333.02 325.62 P
1 11 Q
-0.32 (, it is the same as using) 383.65 325.62 P
4 9.5 Q
-0.37 (def) 99.65 311.62 P
-0.37 (ine sealed class) 116.75 311.62 P
1 11 Q
-0.18 (. No other library can subclass a sealed class \321 they cannot) 207.21 311.62 P
-0.33 (de\336ne new classes that have your sealed class as a super) 99.65 297.62 P
-0.33 (class. The only subclasses) 369.94 297.62 P
(of the class ar) 99.65 283.62 T
(e those subclasses that ar) 165.38 283.62 T
(e de\336ned in the library wher) 286.53 283.62 T
(e the class) 425.23 283.62 T
(itself is de\336ned. The most extensive optimization opportunities occur when the) 99.65 269.62 T
-0.39 (methods of a sealed generic function ar) 99.65 255.62 P
-0.39 (e specialized on sealed classes. In this case,) 287.85 255.62 P
-0.09 (the compiler can often choose the corr) 99.65 241.62 P
-0.09 (ect method of the generic function to call at) 283.65 241.62 P
(compile time, eliminating any r) 99.65 227.62 T
(un-time over) 252.12 227.62 T
(head for using a generic function.) 314.97 227.62 T
(W) 126.65 213.62 T
(e saw in Chapter 1) 136.64 213.62 T
(1 that a class that is a shar) 226.25 213.62 T
(ed substrate, such as) 351.64 213.62 T
4 9.5 Q
(<sixty-) 454.46 213.62 T
-0 (unit>) 99.65 199.62 P
1 11 Q
-0 (, must be de\336ned using) 128.15 199.62 P
4 9.5 Q
-0 (def) 244.65 199.62 P
-0 (ine open class) 261.74 199.62 P
1 11 Q
-0 (, if the libraries sharing the sub-) 341.54 199.62 P
-0.11 (strate ar) 99.65 185.62 P
-0.11 (e expected to subclass the class. If you did not de\336ne the class to be open,) 138.88 185.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "207" 209
%%Page: "208" 210
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(208) 63.65 702.62 T
0 9.5 Q
(12.6 Sealed domains) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(other libraries would be pr) 99.65 665.62 T
(evented fr) 229.91 665.62 T
(om subclassing it \321 which may be r) 279.2 665.62 T
(eason-) 454.86 665.62 T
(able if the substrate is not intended to be extended in any way) 99.65 651.62 T
(.) 399.63 651.62 T
(Unlike an open generic function, an open class does not pr) 126.65 637.62 T
(event all optimi-) 410.61 637.62 T
(zation. If a generic function has a method applicable to an open class, but the) 99.65 623.62 T
(generic function is sealed, the compiler may still be able to optimize dispatch if it) 99.65 609.62 T
(can infer the types of the ar) 99.65 595.62 T
(guments to the generic at a particular call. Sometimes) 231.89 595.62 T
-0.07 (the dispatch code will be slightly less optimal, because it must allow for arbitrary) 99.65 581.62 P
(subclasses, rather than a \336xed set of subclasses, but in general, opening a class is) 99.65 567.62 T
(less costly than opening a generic function.) 99.65 553.62 T
-0.05 (Note that while you cannot subclass a sealed class fr) 126.65 539.62 P
-0.05 (om another library) 379.95 539.62 P
-0.05 (, it is) 470.14 539.62 P
(permissible to subclass a sealed class within the same library) 99.65 525.62 T
(. It may not be obvi-) 393.48 525.62 T
(ous, but an important cor) 99.65 511.62 T
(ollary of this r) 222.89 511.62 T
(ule of sealing is that you can de\336ne an) 291.29 511.62 T
2 F
(open subclass) 99.65 497.62 T
1 F
( of a sealed class within the same library) 169.6 497.62 T
(. A sealed class with an) 364.24 497.62 T
-0.37 (open subclass is one simple way to get both \337exibility and ef) 99.65 483.62 P
-0.37 (\336ciency \321 the classes) 389.61 483.62 P
(in the sealed branch will be optimized by the compiler) 99.65 469.62 T
(, while the open subclass) 363.31 469.62 T
(can be exported for other libraries to build on and extend.) 99.65 455.62 T
3 15 Q
(12.6  Sealed domains) 99.65 415.95 T
1 11 Q
-0.28 (When de\336ning a pr) 99.65 395.62 P
-0.28 (otocol that is meant to be extended by many libraries, both the) 193.17 395.62 P
(base classes and the generic functions that make up the pr) 99.65 381.62 T
(otocol must be open.) 381.25 381.62 T
-0.22 (This simple exigency might make it seem that ther) 99.65 367.62 P
-0.22 (e is no hope of optimizing such) 342.3 367.62 P
(a pr) 99.65 353.62 T
(otocol. The) 118.66 353.62 T
4 9.5 Q
(seal domain) 175.01 353.62 T
1 11 Q
( top-level form is used to selectively seal subsets or) 237.71 353.62 T
2 F
(branches) 99.65 339.62 T
1 F
( of the pr) 144.86 339.62 T
(otocol, permitting the compiler to make all the optimizations) 188.79 339.62 T
(that would be possible if the classes and generics wer) 99.65 325.62 T
(e sealed, but only for the) 358.59 325.62 T
(particular subset or branch in question.) 99.65 311.62 T
(As an example, consider the) 126.65 297.62 T
4 9.5 Q
(say) 266.26 297.62 T
1 11 Q
( pr) 283.36 297.62 T
(otocol as used in the time library) 296.87 297.62 T
(.) 454.71 297.62 T
(Because the) 99.65 283.62 T
4 9.5 Q
(say) 159.35 283.62 T
1 11 Q
( generic function is de\336ned to be open, even if the compiler can) 176.45 283.62 T
-0.34 (infer that the ar) 99.65 269.62 P
-0.34 (gument to) 173.75 269.62 P
4 9.5 Q
-0.69 (say) 225.89 269.62 P
1 11 Q
-0.34 ( is a) 242.99 269.62 P
4 9.5 Q
-0.69 (<time>) 263.6 269.62 P
1 11 Q
-0.34 ( or) 297.8 269.62 P
4 9.5 Q
-0.69 (<time-offset>) 312.98 269.62 P
1 11 Q
-0.34 (, it must insert code to) 387.08 269.62 P
(choose the appr) 99.65 255.62 T
(opriate method to call at r) 176.51 255.62 T
(un time in the of) 302.19 255.62 T
(f chance that some) 382.33 255.62 T
(other library has added or r) 99.65 241.62 T
(emoved methods for) 233.79 241.62 T
4 9.5 Q
(say) 337.61 241.62 T
1 11 Q
(. The solution is to add the) 353.49 241.62 T
(following top-level form to the de\336nitions that make up the time library:) 99.65 227.62 T
6 9 Q
(// Seal say, for all time.) 99.65 206.95 T
4 F
(seal domain say \050time :: <time>\051;) 99.65 195.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "208" 210
%%Page: "209" 211
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12 Performance and Flexibility) 387.33 702.62 T
2 11 Q
(209) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
-0.22 (This statement is essentially a guarantee to the compiler that the only methods on) 99.65 665.62 P
4 9.5 Q
-0.84 (say) 99.65 651.62 P
1 11 Q
-0.41 ( that ar) 116.75 651.62 P
-0.41 (e applicable to) 150.15 651.62 P
4 9.5 Q
-0.84 (<time>) 222.11 651.62 P
1 11 Q
-0.41 ( objects \050and also) 256.31 651.62 P
4 9.5 Q
-0.84 (<time-offset>) 340.4 651.62 P
1 11 Q
-0.41 ( objects, because) 414.5 651.62 P
4 9.5 Q
(<time-offset>) 99.65 637.62 T
1 11 Q
( is a subclass of) 173.75 637.62 T
4 9.5 Q
(<time>) 250.82 637.62 T
1 11 Q
(\051 ar) 285.02 637.62 T
(e those that ar) 301.08 637.62 T
(e explicitly de\336ned in the) 369.25 637.62 T
-0.19 (time library and any libraries it imports fr) 99.65 623.62 P
-0.19 (om. Thus, when the compiler can pr) 301.3 623.62 P
-0.19 (ove) 475.6 623.62 P
(that the ar) 99.65 609.62 T
(gument to) 149.13 609.62 T
4 9.5 Q
(say) 201.94 609.62 T
1 11 Q
( is a) 219.04 609.62 T
4 9.5 Q
(<time-offset>) 240.65 609.62 T
1 11 Q
(, it can call the corr) 314.75 609.62 T
(ect method with-) 406.25 609.62 T
(out the r) 99.65 595.62 T
(un-time over) 140.89 595.62 T
(head of checking for additional methods.) 203.74 595.62 T
(Another way to get the same ef) 126.65 581.62 T
(fect as a sealed domain, which is also self-) 278.21 581.62 T
-0.44 (documenting, is to use) 99.65 567.62 P
4 9.5 Q
-0.92 (def) 210.58 567.62 P
-0.92 (ine sealed method) 227.68 567.62 P
1 11 Q
-0.44 ( when de\336ning individual methods) 322.74 567.62 P
(on the pr) 99.65 553.62 T
(otocol. So, for instance, in the case of the time library) 143.57 553.62 T
(, we might have) 398.15 553.62 T
(de\336ned the two methods on) 99.65 539.62 T
4 9.5 Q
(say) 239.23 539.62 T
1 11 Q
( as follows:) 256.33 539.62 T
4 9 Q
(def) 99.65 518.95 T
(ine sealed method say \050time :: <time>\051) 115.85 518.95 T
(let\050hours, minutes\051 = decode-total-seconds\050time\051;) 110.45 507.95 T
(format\050*window*, "%d:%d", hours, minutes\051;) 110.45 496.95 T
(end;) 99.65 485.95 T
(def) 99.65 463.95 T
(ine sealed method say \050time :: <time-offset>\051) 115.85 463.95 T
(format\050*window*, "%s ", if \050time.past?\051 "minus" else "plus" end\051;) 110.45 452.95 T
(next-method\050\051;) 110.45 441.95 T
(end;) 99.65 430.95 T
1 11 Q
(De\336ning a sealed method is the same as sealing the generic function over the) 99.65 410.62 T
(domain of the method\325s specializers. If ef) 99.65 396.62 T
(fect, this technique says you do not) 299.2 396.62 T
(intend anyone to add mor) 99.65 382.62 T
(e speci\336c methods in that domain, or to cr) 226.32 382.62 T
(eate classes) 430.07 382.62 T
(that would change the applicability of the sealed methods.) 99.65 368.62 T
(W) 126.65 354.62 T
(ith either the) 137.04 354.62 T
4 9.5 Q
(seal domain) 201.81 354.62 T
1 11 Q
( form or the sealed methods, the use of) 264.51 354.62 T
4 9.5 Q
(say) 455.82 354.62 T
1 11 Q
( on) 472.92 354.62 T
4 9.5 Q
(<time>) 99.65 340.62 T
1 11 Q
( objects will be as ef) 133.85 340.62 T
(\336cient as if) 229.69 340.62 T
4 9.5 Q
(say) 284.97 340.62 T
1 11 Q
( wer) 302.07 340.62 T
(e not an open generic after all. At) 323.41 340.62 T
(the same time, other libraries that cr) 99.65 326.62 T
(eate new classes can still extend the) 274.59 326.62 T
4 9.5 Q
(say) 449.98 326.62 T
1 11 Q
( pr) 467.08 326.62 T
(o-) 480.58 326.62 T
(tocol to cover those classes.) 99.65 312.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "209" 211
%%Page: "210" 212
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(210) 63.65 702.62 T
0 9.5 Q
(12.6 Sealed domains) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(Ther) 99.65 359.62 T
(e is one catch to sealed generic function domains: ther) 122.21 359.62 T
(e ar) 383.87 359.62 T
(e some r) 401.53 359.62 T
(estrictions) 442.1 359.62 T
(imposed on open classes involved in a sealed domain that pr) 99.65 345.62 T
(ohibit certain sub-) 395.21 345.62 T
-0.06 (classing of those open classes in other libraries. The actual r) 99.65 331.62 P
-0.06 (ule involved depends) 387.6 331.62 P
-0.22 (on an analysis of the exact methods of the generic function, and the r) 99.65 317.62 P
-0.22 (ule is compli-) 430.35 317.62 P
(cated enough that you should just r) 99.65 303.62 T
(ely on your compiler to detect illegal situa-) 272 303.62 T
(tions. However) 99.65 289.62 T
(, if you obey the following two r) 173.62 289.62 T
(ules of thumb, you should not) 329.97 289.62 T
(have any pr) 99.65 275.62 T
(oblems:) 157.31 275.62 T
(\245) 108.65 255.62 T
(If your library de\336nes a method for an open generic function imported) 126.65 255.62 T
(fr) 126.65 241.62 T
(om another library) 134.46 241.62 T
(, make sur) 224.76 241.62 T
(e that at least one of the specializers of your) 275.05 241.62 T
(method is either a class de\336ned in your library) 126.65 227.62 T
(, or a subtype of a class) 352.01 227.62 T
(de\336ned in your library) 126.65 213.62 T
(.) 236.21 213.62 T
(\245) 108.65 193.62 T
(If your library seals a domain of an open generic function imported fr) 126.65 193.62 T
(om) 464.63 193.62 T
-0.09 (another library) 126.65 179.62 P
-0.09 (, make sur) 198.38 179.62 P
-0.09 (e that at least one of the specializers of your sealed) 248.49 179.62 P
2 F
(Comparison with C++:) 132.65 645.62 T
1 F
( A C++ compiler could optimize out the dis-) 247.1 645.62 T
-0.25 (patching of a virtual function by analyzing the entir) 132.65 631.62 P
-0.25 (e scope of the ar) 381.96 631.62 P
-0.25 (gu-) 459.24 631.62 P
(ment the virtual function dispatches on, and pr) 132.65 617.62 T
(oving its exact class.) 361.62 617.62 T
(Unfortunately) 132.65 603.62 T
(, that scope is often the entir) 200.69 603.62 T
(e pr) 337.11 603.62 T
(ogram, which implies) 355.88 603.62 T
(that this optimization can often only be performed by a linker) 132.65 589.62 T
(. Even a) 431.74 589.62 T
(linker cannot make this optimization when a library is compiled,) 132.65 575.62 T
(because the classes of a library can be subclassed by a client. The com-) 132.65 561.62 T
-0.03 (plexity is compounded for dynamic-link libraries, wher) 132.65 547.62 P
-0.03 (e ther) 402.14 547.62 P
-0.03 (e may be) 429.54 547.62 P
(multiple clients at once. As a r) 132.65 533.62 T
(esult, this optimization is rar) 279.04 533.62 T
(ely) 418.36 533.62 T
(achieved in C++.) 132.65 519.62 T
-0.01 (The Dylan sealing declarations ar) 159.65 505.62 P
-0.01 (e a way of explicitly stating) 322.01 505.62 P
(which generic functions and classes may be extended, and mor) 132.65 491.62 T
(e) 438.69 491.62 T
(importantly) 132.65 477.62 T
(, which cannot. The library designer plans in advance) 189.69 477.62 T
(exactly what extensibility the library will have. The Dylan com-) 132.65 463.62 T
(piler can then optimize dispatching on sealed generic functions) 132.65 449.62 T
(and classes with the assurance that no client will violate the) 132.65 435.62 T
(assumptions of the optimization. The sealing r) 132.65 421.62 T
(estrictions against) 357.89 421.62 T
(subclassing or changing method applicability ar) 132.65 407.62 T
(e automatically) 366.02 407.62 T
(enfor) 132.65 393.62 T
(ced on each client of a Dylan library) 158.13 393.62 T
(.) 331.74 393.62 T
126.65 658.83 126.65 386.08 2 L
V
0.25 H
0 Z
N
477.65 658.83 477.65 386.08 2 L
V
N
126.52 658.95 477.77 658.95 2 L
V
N
126.52 385.95 477.77 385.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "210" 212
%%Page: "211" 213
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12 Performance and Flexibility) 387.73 702.62 T
2 11 Q
(21) 515.55 702.62 T
(1) 526.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(domain is either a class de\336ned in your library) 126.65 665.62 T
(, or a subtype of a class) 351.85 665.62 T
(de\336ned in your library) 126.65 651.62 T
(.) 236.21 651.62 T
(In our example, we obeyed both r) 99.65 631.62 T
(ules of thumb: our methods for) 263.47 631.62 T
4 9.5 Q
(say) 417.93 631.62 T
1 11 Q
( ar) 435.03 631.62 T
(e on) 447.43 631.62 T
(classes we de\336ned, and our sealing was over those same classes. The r) 99.65 617.62 T
(ules of) 440.2 617.62 T
(thumb not only keep you fr) 99.65 603.62 T
(om violating sealing constraints, they make for good) 233.36 603.62 T
(pr) 99.65 589.62 T
(otocol design: a library that extends a pr) 110.41 589.62 T
(otocol r) 305.68 589.62 T
(eally should only extend it for) 342.26 589.62 T
(classes it fully understands, which usually means classes it cr) 99.65 575.62 T
(eates.) 396.73 575.62 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
406.68 560.1 99.65 560.1 2 L
0 1 1 0 1 0 0 K
V
0.55 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
([--- Show how sealing decode-total-seconds on <sixty-unit> would pr) 99.65 561.62 T
0 1 1 0 1 0 0 K
489.92 560.1 406.48 560.1 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(event mixing time) 406.48 561.62 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
200.36 546.1 99.65 546.1 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(into some other class?]) 99.65 547.62 T
0 0 0 1 0 0 0 K
3 15 Q
0 0 0 1 0 0 0 K
(12.7  Primary classes) 99.65 507.95 T
1 11 Q
(Classes have one additional variation that can be used for optimizing perfor-) 99.65 487.62 T
-0.41 (mance. A class that is de\336ned as) 99.65 473.62 P
4 9.5 Q
-0.84 (primary) 256.19 473.62 P
1 11 Q
-0.41 ( allows the compiler to generate the most) 296.09 473.62 P
(ef) 99.65 459.62 T
(\336cient code for accessing the slots de\336ned in the primary class \050whether the) 108.38 459.62 T
(accessor is applied to the primary class or one of its subclasses\051. However) 99.65 445.62 T
(, a pri-) 455.84 445.62 T
(mary class cannot be combined with any other primary class \050unless one is a sub-) 99.65 431.62 T
-0.06 (class of the other\051. This r) 99.65 417.62 P
-0.06 (estriction implies that you should delay declaring a class) 218.12 417.62 P
(to be primary until you ar) 99.65 403.62 T
(e quite sur) 225.6 403.62 T
(e of your inheritance design. Also, because) 276.66 403.62 T
(sealed classes ar) 99.65 389.62 T
(e alr) 178.26 389.62 T
(eady highly optimized, the) 199.13 389.62 T
4 9.5 Q
(primary) 332.99 389.62 T
1 11 Q
( declaration is of most) 372.89 389.62 T
(use for open classes.) 99.65 375.62 T
(As an example, consider again the class) 126.65 361.62 T
4 9.5 Q
(<sixty-unit>) 321.39 361.62 T
1 11 Q
(, and its slot) 389.79 361.62 T
4 9.5 Q
(total-) 451.07 361.62 T
(seconds) 99.65 347.62 T
1 11 Q
(, as used in the method) 139.55 347.62 T
4 9.5 Q
(decode-total-seconds) 254.81 347.62 T
1 11 Q
(:) 368.81 347.62 T
4 9 Q
(def) 99.65 326.95 T
(ine method decode-total-seconds \050sixty-unit :: <sixty-unit>\051) 115.85 326.95 T
(let\050total-minutes, seconds\051 = truncate/\050sixty-unit.total-seconds, 60\051;) 110.45 315.95 T
(let\050max-unit, minutes\051 = truncate/\050total-minutes, 60\051;) 110.45 304.95 T
(values \050max-unit, minutes, seconds\051;) 110.45 293.95 T
(end;) 99.65 282.95 T
1 11 Q
-0.24 (Although the generic function for the slot accessor) 99.65 262.62 P
4 9.5 Q
-0.5 (total-seconds) 345.1 262.62 P
1 11 Q
-0.24 ( is sealed and it) 419.2 262.62 P
(is trivial for the compiler to infer that its ar) 99.65 248.62 T
(gument is a) 306.66 248.62 T
4 9.5 Q
(<sixty-unit>) 365.99 248.62 T
1 11 Q
( in the call) 434.39 248.62 T
4 9.5 Q
(sixty-unit.total-seconds,) 99.65 234.62 T
1 11 Q
( because) 242.15 234.62 T
4 9.5 Q
(<sixty-unit>) 285.95 234.62 T
1 11 Q
( is declar) 354.35 234.62 T
(ed open, the com-) 397.44 234.62 T
-0.09 (piler cannot emit the most ef) 99.65 220.62 P
-0.09 (\336cient code for that call. Because an open class could) 238.08 220.62 P
(be mixed with any number of other classes, ther) 99.65 206.62 T
(e is no guarantee that the slots of) 332.68 206.62 T
(every object that is a) 99.65 192.62 T
4 9.5 Q
(<sixty-unit>) 201.45 192.62 T
1 11 Q
( will always be stor) 269.85 192.62 T
(ed in the same or) 363.54 192.62 T
(der \321) 446.69 192.62 T
(ther) 99.65 178.62 T
(e is no guarantee that) 119.05 178.62 T
4 9.5 Q
(total-seconds) 226.04 178.62 T
1 11 Q
( will always be the \336rst slot in an object) 300.14 178.62 T
(that is an indir) 99.65 164.62 T
(ect instance of) 170.41 164.62 T
4 9.5 Q
(<sixty-unit>) 241.98 164.62 T
1 11 Q
(, for instance.) 310.38 164.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "211" 213
%%Page: "212" 214
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(212) 63.65 702.62 T
0 9.5 Q
(12.7 Primary classes) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(Declaring a class) 126.65 665.62 T
4 9.5 Q
(primary) 210.74 665.62 T
1 11 Q
( is essentially a guarantee to the compiler that it) 250.64 665.62 T
(can always put the primary class\325s slots in the same place in an instance and that) 99.65 651.62 T
(any other super) 99.65 637.62 T
(classes will have to adjust ar) 176.1 637.62 T
(ound that:) 313.77 637.62 T
4 9 Q
(def) 99.65 616.95 T
(ine primary open class <sixty-unit> \050<object>\051) 115.85 616.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:,) 110.45 605.95 T
(init-value: 0;) 229.25 594.95 T
(end;) 99.65 583.95 T
1 11 Q
(By adding the) 99.65 563.62 T
4 9.5 Q
(primary) 170.65 563.62 T
1 11 Q
(declaration to the de\336nition, any library that subclasses) 216.25 563.62 T
4 9.5 Q
(<sixty-unit>) 99.65 549.62 T
1 11 Q
( is guaranteed to put) 168.05 549.62 T
4 9.5 Q
(total-seconds) 271.43 549.62 T
1 11 Q
( at the same of) 345.53 549.62 T
(fset. Hence, the) 415.49 549.62 T
(compiler can turn the call) 99.65 535.62 T
4 9.5 Q
(sixty-unit.total-seconds) 226.42 535.62 T
1 11 Q
( into a simple load with) 363.22 535.62 T
-0.14 (constant of) 99.65 521.62 P
-0.14 (fset without concern over what subclass of) 152.76 521.62 P
4 9.5 Q
-0.29 (<sixty-unit>) 361.46 521.62 P
1 11 Q
-0.14 ( was actually) 429.86 521.62 P
(passed as an ar) 99.65 507.62 T
(gument.) 173.04 507.62 T
(Because primary classes r) 99.65 285.62 T
(estrict extension \050they cannot be combined with other) 223.66 285.62 T
(primary classes\051, they should be used sparingly in libraries intended to be soft-) 99.65 271.62 T
(war) 99.65 257.62 T
(e components. Primary classes ar) 118.47 257.62 T
(e of most bene\336t in lar) 279.39 257.62 T
(ge, modular pr) 387.76 257.62 T
(o-) 460.27 257.62 T
(grams, wher) 99.65 243.62 T
(e all the clients of each component ar) 160.48 243.62 T
(e known, and the need for) 339.61 243.62 T
(extensibility is bounded.) 99.65 229.62 T
2 F
(Comparison with C++:) 132.65 473.62 T
1 F
( C++ avoids the pr) 247.1 473.62 T
(oblem of members \050slots\051) 337.56 473.62 T
(appearing at dif) 132.65 459.62 T
(fer) 210.18 459.62 T
(ent of) 223.26 459.62 T
(fsets in derived classes \050subclasses\051 because) 250.73 459.62 T
(when you call a function whose parameter is a base class \050super) 132.65 445.62 T
(class\051) 442.4 445.62 T
-0.39 (on a derived class, the derived class is automatically cast up to the base) 132.65 431.62 P
(class. Thus, within the function, it always appears you ar) 132.65 417.62 T
(e operating) 408.85 417.62 T
(on the base class.) 132.65 403.62 T
-0.4 (The drawback of such a scheme is that you \322lose\323 the original) 159.65 389.62 P
(object. W) 132.65 375.62 T
(ithin a function on a base class, you cannot ask \322of what) 176.95 375.62 T
(class is this object) 132.65 361.62 T
0 F
(r) 220.68 361.62 T
(eally) 224.76 361.62 T
1 F
( an object?\323 The C++ designers made an) 245.54 361.62 T
(explicit design decision not to include this capability in the lan-) 132.65 347.62 T
(guage, although they do r) 132.65 333.62 T
(ecognize the need for it in certain situa-) 258.12 333.62 T
(tions.) 132.65 319.62 T
126.65 486.83 126.65 312.08 2 L
V
0.25 H
0 Z
N
477.65 486.83 477.65 312.08 2 L
V
N
126.52 486.95 477.77 486.95 2 L
V
N
126.52 311.95 477.77 311.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "212" 214
%%Page: "213" 215
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12 Performance and Flexibility) 387.33 702.62 T
2 11 Q
(213) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 15 Q
0 X
(12.8  Summary) 99.65 662.95 T
1 11 Q
(In this chapter we cover) 99.65 642.62 T
(ed the following:) 216.17 642.62 T
(\245) 108.65 622.62 T
(W) 126.65 622.62 T
(e showed how Dylan can trade of) 136.64 622.62 T
(f performance and \337exibility to support) 299.63 622.62 T
(a range of pr) 126.65 608.62 T
(ogramming r) 188.46 608.62 T
(equir) 252.47 608.62 T
(ements.) 277.88 608.62 T
(\245) 108.65 588.62 T
(W) 126.65 588.62 T
(e showed how you can add type declarations to impr) 136.64 588.62 T
(ove performance.) 395.08 588.62 T
(\245) 108.65 568.62 T
(W) 126.65 568.62 T
(e showed how you can use limited types to impr) 136.64 568.62 T
(ove performance.) 372.98 568.62 T
(\245) 108.65 548.62 T
(W) 126.65 548.62 T
(e showed how you can open generic functions to enable modularity and) 136.64 548.62 T
(\337exibility) 126.65 534.62 T
(.) 171.65 534.62 T
(\245) 108.65 514.62 T
(W) 126.65 514.62 T
(e showed how you can open classes to enable modularity and \337exibility) 136.64 514.62 T
(.) 484.61 514.62 T
(\245) 108.65 494.62 T
(W) 126.65 494.62 T
(e showed how you can use sealed generic function domains to mitigate) 136.64 494.62 T
(the performance penalty of open classes and generic functions.) 126.65 480.62 T
(\245) 108.65 460.62 T
(W) 126.65 460.62 T
(e showed how you can use primary classes for very ef) 136.64 460.62 T
(\336cient slot access.) 398.7 460.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "213" 215
%%Page: "214" 216
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(214) 63.65 702.62 T
0 9.5 Q
(12.8 Summary) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "214" 216
%%Page: "215" 217
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(215) 289.4 135.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(13) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(13) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Macr) 101.65 591.4 T
(os) 169.66 591.4 T
99.65 159.95 513.65 456.95 R
7 X
V
3 15 Q
0 X
(13.1  What is a \322macro\323?) 99.65 446.95 T
1 11 Q
(The term \322macr) 99.65 426.62 T
(o\323, as used in computer pr) 176.22 426.62 T
(ogramming originally was shorthand) 305.08 426.62 T
(for \322macr) 99.65 412.62 T
(o-instr) 146.16 412.62 T
(uction\323, meaning an instr) 177.93 412.62 T
(uction that r) 301.76 412.62 T
(epr) 361.2 412.62 T
(esented a sequence of) 377.22 412.62 T
-0.04 (several machine \050or micr) 99.65 398.62 P
-0.04 (o\051 instr) 219.56 398.62 P
-0.04 (uctions. Over time, the term has evolved to mean) 254.05 398.62 P
(any wor) 99.65 384.62 T
(d or phrase that stands for another phrase \050usually longer) 139.74 384.62 T
(, but built of) 419.42 384.62 T
(simpler components\051. Macr) 99.65 370.62 T
(os can be used for abbr) 233.04 370.62 T
(eviation, abstraction, simpli\336-) 344.72 370.62 T
(cation, or str) 99.65 356.62 T
(ucturing. Many computer languages support a macr) 160.34 356.62 T
(o facility) 414.46 356.62 T
(, and) 455.34 356.62 T
(they range fr) 99.65 342.62 T
(om simple text-based abbr) 161.96 342.62 T
(eviations to full languages permitting) 290.42 342.62 T
-0.32 (computed r) 99.65 328.62 P
-0.32 (eplacements. Macr) 155.65 328.62 P
-0.32 (os ar) 246.14 328.62 P
-0.32 (e pr) 268.89 328.62 P
-0.32 (ocessed befor) 287.35 328.62 P
-0.32 (e the pr) 352.42 328.62 P
-0.32 (ogram is compiled by) 388.57 328.62 P
2 F
-0.12 (expanding) 99.65 314.62 P
1 F
-0.12 ( each macr) 152.81 314.62 P
-0.12 (o into its r) 204.36 314.62 P
-0.12 (eplacement phrase as it is encounter) 253.04 314.62 P
-0.12 (ed until ther) 428.08 314.62 P
-0.12 (e) 487.75 314.62 P
(ar) 99.65 300.62 T
(e no mor) 109.29 300.62 T
(e macr) 152.34 300.62 T
(os. Macr) 184.6 300.62 T
(os can be used to extend the base language by de\336ning) 225.71 300.62 T
(mor) 99.65 286.62 T
(e sophisticated phrases in terms of simpler) 119.51 286.62 T
(, built-in phrases.) 326.07 286.62 T
(The primary use of macr) 126.65 272.62 T
(os in pr) 246.37 272.62 T
(ogramming is to extend or adapt the lan-) 282.9 272.62 T
(guage to allow a mor) 99.65 258.62 T
(e concise or r) 202.32 258.62 T
(eadable solution for a particular pr) 265.65 258.62 T
(oblem) 434.72 258.62 T
(domain. A simple pr) 99.65 244.62 T
(ogram rar) 200.17 244.62 T
(ely needs macr) 248.59 244.62 T
(os. Mor) 321.24 244.62 T
(e complicated pr) 357.97 244.62 T
(ograms,) 439.08 244.62 T
-0.43 (including Dylan itself, will use macr) 99.65 230.62 P
-0.43 (os often. Macr) 273.65 230.62 P
-0.43 (os have no visible r) 341.58 230.62 P
-0.43 (un-time cost) 433.4 230.62 P
-0.04 (or ef) 99.65 216.62 P
-0.04 (fect; they ar) 121.45 216.62 P
-0.04 (e transformations that take place during the compilation of a pr) 178.05 216.62 P
-0.04 (o-) 485.98 216.62 P
(gram and hence they can incr) 99.65 202.62 T
(ease compile time. Although macr) 242.71 202.62 T
(os may take the) 408.97 202.62 T
(form of function calls, they ar) 99.65 188.62 T
(e not functions \321 they cannot be passed as func-) 242.79 188.62 T
(tional ar) 99.65 174.62 T
(guments; they cannot be patched in a r) 139.94 174.62 T
(un-time image as a function can.) 328.16 174.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "215" 217
%%Page: "216" 218
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(216) 63.65 702.62 T
0 9.5 Q
(13.2 Patterns and templates) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(Although macr) 99.65 665.62 T
(os may have parameters, they do not take ar) 173.55 665.62 T
(guments the way) 388.7 665.62 T
(functions do \321 the ar) 99.65 651.62 T
(guments to a macr) 204.72 651.62 T
(o ar) 294.69 651.62 T
(e not evaluated, they ar) 313.09 651.62 T
(e simply pr) 427.02 651.62 T
(o-) 482.05 651.62 T
(gram phrases that can be substituted in the r) 99.65 637.62 T
(eplacement phrase.) 315.62 637.62 T
(In its \336rst r) 126.65 623.62 T
(elease, Dylan pr) 179.85 623.62 T
(ovides a macr) 257.77 623.62 T
(o facility that is based on pattern-) 325.09 623.62 T
(matching and template substitution. This facility is mor) 99.65 609.62 T
(e powerful than a simple) 369.15 609.62 T
-0.36 (textual substitution facility) 99.65 595.62 P
-0.36 (, but simpler than a full computed or pr) 228.26 595.62 P
-0.36 (ocedural macr) 418.06 595.62 P
-0.36 (o) 487.25 595.62 P
(facility) 99.65 581.62 T
(. Dylan\325s macr) 131.78 581.62 T
(o facility is closely integrated with the Dylan language syn-) 201.73 581.62 T
(tax, permitting most macr) 99.65 567.62 T
(o needs to be satis\336ed. Dylan designers have planned) 225.65 567.62 T
-0.26 (for a full pr) 99.65 553.62 P
-0.26 (ocedural macr) 154.08 553.62 P
-0.26 (o capability) 223.38 553.62 P
-0.26 (, so that it can be added compatibly at a later) 278.53 553.62 P
(time if ther) 99.65 539.62 T
(e is suf) 153.18 539.62 T
(\336cient demand.) 186.58 539.62 T
3 15 Q
(13.2  Patterns and templates) 99.65 499.95 T
1 11 Q
(A Dylan macr) 99.65 479.62 T
(o has two basic parts: a) 167.68 479.62 T
2 F
(pattern) 282.81 479.62 T
1 F
( that is matched against a fragment) 318.86 479.62 T
(of code and a) 99.65 465.62 T
2 F
(template) 167.32 465.62 T
1 F
( that is substituted for the matched fragment, per) 211.31 465.62 T
(haps) 449.59 465.62 T
(including pieces of the original.) 99.65 451.62 T
(The simplest pattern the compiler can match is that of a function call. A) 126.65 437.62 T
2 F
(function macro) 99.65 423.62 T
1 F
( is invoked in exactly the same way a function is invoked. The) 175.72 423.62 T
-0.13 (name of the macr) 99.65 409.62 P
-0.13 (o is a module variable that can be used anywher) 183.55 409.62 P
-0.13 (e a function call) 416.85 409.62 P
(can occur) 99.65 395.62 T
(. T) 145.12 395.62 T
(ypically this simply means the name followed by a par) 156.38 395.62 T
(enthesized list) 422.2 395.62 T
(of ar) 99.65 381.62 T
(guments, but r) 121.71 381.62 T
(ecall that slot-style abbr) 192.8 381.62 T
(eviations and unary and binary opera-) 307.94 381.62 T
(tors ar) 99.65 367.62 T
(e also function calls.) 130.65 367.62 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
376.8 366.1 231.26 366.1 2 L
0 1 1 0 1 0 0 K
V
0.55 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
([--- Has this been discussed? X-r) 231.26 367.62 T
0 1 1 0 1 0 0 K
387.61 366.1 376.61 366.1 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(ef]) 376.61 367.62 T
0 0 0 1 0 0 0 K
1 F
0 0 0 1 0 0 0 K
-0.25 (The most important use of function-call macr) 126.65 353.62 P
-0.25 (os is to r) 344.65 353.62 P
-0.25 (earrange or delay eval-) 384.41 353.62 P
(uation of ar) 99.65 339.62 T
(guments. The built-in binary operator) 155.79 339.62 T
4 9.5 Q
(|) 342.37 339.62 T
1 11 Q
( \050discussed in Section 8.7.1,) 348.07 339.62 T
(page 1) 99.65 325.62 T
(18\051 uses this featur) 130.79 325.62 T
(e to evaluate its second ar) 221.58 325.62 T
(gument only if the \336rst ar) 346.41 325.62 T
(gu-) 470.62 325.62 T
(ment evaluates to) 99.65 311.62 T
4 9.5 Q
(#f) 188.3 311.62 T
1 11 Q
(:) 199.7 311.62 T
4 9 Q
(def) 99.65 290.95 T
(ine macro \134|) 115.85 290.95 T
({ \134|\050?arg1:expression, ?arg2:expression\051 } =>) 110.45 279.95 T
({ begin) 121.25 268.95 T
(let x = ?arg1;) 142.85 257.95 T
(if\050x\051 x else ?arg2 end) 142.85 246.95 T
(end }) 132.05 235.95 T
(end;) 99.65 224.95 T
1 11 Q
-0.31 (Recall that when the compiler sees the expr) 99.65 204.62 P
-0.31 (ession) 307.78 204.62 P
4 9.5 Q
-0.64 (a | b) 340.43 204.62 P
1 11 Q
-0.31 (, it tr) 367.66 204.62 P
-0.31 (eats it as if it wer) 389.81 204.62 P
-0.31 (e the) 470.24 204.62 P
(function call) 99.65 190.62 T
4 9.5 Q
(\134|\050a, b\051) 162.71 190.62 T
1 11 Q
(. If) 208.31 190.62 T
4 9.5 Q
(|) 223.93 190.62 T
1 11 Q
( wer) 229.63 190.62 T
(e actually de\336ned as a function, both ar) 250.97 190.62 T
(guments) 442.06 190.62 T
-0.11 (would be evaluated all the time. By de\336ning it as a macr) 99.65 176.62 P
-0.11 (o, which expands into an) 371.67 176.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "216" 218
%%Page: "217" 219
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13 Macros) 465.11 702.62 T
2 11 Q
(217) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9.5 Q
0 X
(if) 99.65 665.62 T
1 11 Q
( statement, we get the desir) 111.05 665.62 T
(ed ef) 243.8 665.62 T
(fect of evaluating the second ar) 267.27 665.62 T
(gument only) 418.56 665.62 T
(when the \336rst ar) 99.65 651.62 T
(gument evaluates to) 179.3 651.62 T
4 9.5 Q
(#f) 280.7 651.62 T
1 11 Q
(. This is certainly a mor) 292.1 651.62 T
(e ef) 405.34 651.62 T
(\336cient imple-) 422.1 651.62 T
(mentation; sometimes avoiding evaluating the second ar) 99.65 637.62 T
(gument is important for) 374.48 637.62 T
(the corr) 99.65 623.62 T
(ect ef) 137.04 623.62 T
(fect also.) 162.26 623.62 T
(Looking at the macr) 126.65 609.62 T
(o de\336nition of) 224.05 609.62 T
4 9.5 Q
(|) 295.42 609.62 T
1 11 Q
(, we can infer some of the basics about) 301.12 609.62 T
(macr) 99.65 595.62 T
(os. A macr) 123.89 595.62 T
(o is intr) 175.61 595.62 T
(oduced by) 212.32 595.62 T
4 9.5 Q
(def) 266.25 595.62 T
(ine macro) 283.35 595.62 T
1 11 Q
(, followed by the macr) 334.65 595.62 T
(o name.) 443.35 595.62 T
(The de\336nition of the macr) 99.65 581.62 T
(o consists of a pattern enclosed in) 225.68 581.62 T
4 9.5 Q
({}) 391.49 581.62 T
1 11 Q
(, that mimics the) 402.89 581.62 T
-0.01 (fragment it is to match. Macr) 99.65 567.62 P
-0.01 (o parameters or) 239.98 567.62 P
2 F
-0.01 (pattern variables) 319.37 567.62 P
1 F
-0.01 ( ar) 403.99 567.62 P
-0.01 (e intr) 416.38 567.62 P
-0.01 (oduced by) 441.73 567.62 P
4 9.5 Q
(?) 99.65 553.62 T
1 11 Q
( and match fragments with particular) 105.35 553.62 T
4 9.5 Q
(constraints) 289.98 553.62 T
1 11 Q
( \050in this case) 352.68 553.62 T
4 9.5 Q
(:expression) 415.12 553.62 T
1 11 Q
(\051) 477.82 553.62 T
(and delimited by punctuation \050in this case) 99.65 539.62 T
4 9.5 Q
(\050) 307.48 539.62 T
1 11 Q
(,) 313.18 539.62 T
4 9.5 Q
(,) 318.68 539.62 T
1 11 Q
( and) 324.38 539.62 T
4 9.5 Q
(\051) 348.51 539.62 T
1 11 Q
(\051. The r) 354.2 539.62 T
(eplacement or expan-) 388.68 539.62 T
(sion of a macr) 99.65 525.62 T
(o is indicated by) 167.58 525.62 T
4 9.5 Q
(=>) 250.14 525.62 T
1 11 Q
( and de\336ned by a template enclosed in) 261.54 525.62 T
4 9.5 Q
({}) 451.65 525.62 T
1 11 Q
(. The) 463.05 525.62 T
(template is in the form of a code fragment wher) 99.65 511.62 T
(e pattern variables ar) 331.22 511.62 T
(e used to) 433.66 511.62 T
(substitute in the fragments they matched in the pattern.) 99.65 497.62 T
(Most development envir) 126.65 483.62 T
(onments pr) 246.31 483.62 T
(ovide a way to view code after all mac-) 301.86 483.62 T
(r) 99.65 469.62 T
(os have been expanded. This view can be helpful in debugging macr) 103.79 469.62 T
(os you) 436.53 469.62 T
(write. For example, showing the expanded view of the following code:) 99.65 455.62 T
4 9 Q
(def) 99.65 434.95 T
(ine method direction-setter \050dir, latitude :: <latitude>\051) 115.85 434.95 T
(if \050dir == north: | dir == south:\051) 110.45 423.95 T
(next-method\050\051;) 132.05 412.95 T
(else error \050"%= is not north: or south:", dir\051;) 121.25 401.95 T
(end;) 110.45 390.95 T
(end;) 99.65 379.95 T
1 11 Q
(W) 99.65 359.62 T
(ill yield something like this:) 110.04 359.62 T
4 9 Q
(def) 99.65 338.95 T
(ine method direction-setter \050dir, latitude :: <latitude>\051) 115.85 338.95 T
(if \050) 110.45 327.95 T
5 F
(begin let x =) 132.05 327.95 T
4 F
(dir == north:) 207.65 327.95 T
5 F
(; if \050x\051 x else) 277.85 327.95 T
4 F
( dir == south:) 358.85 327.95 T
5 F
(end) 439.85 327.95 T
4 F
(\051) 456.05 327.95 T
(next-method\050\051;) 132.05 316.95 T
(else error \050"%= is not north: or south:", dir\051;) 121.25 305.95 T
(end;) 110.45 294.95 T
(end;) 99.65 283.95 T
1 11 Q
-0.43 (The exact format will depend on the particular development envir) 99.65 263.62 P
-0.43 (onment and the) 417.42 263.62 P
-0.22 (exact de\336nition of) 99.65 249.62 P
4 9.5 Q
-0.46 (|) 189.25 249.62 P
1 11 Q
-0.22 ( in your system. Her) 194.95 249.62 P
-0.22 (e we see that the) 293.09 249.62 P
4 9.5 Q
-0.46 (|) 374.97 249.62 P
1 11 Q
-0.22 ( macr) 380.67 249.62 P
-0.22 (o is a useful short-) 407.44 249.62 P
-0.44 (hand because it much mor) 99.65 235.62 P
-0.44 (e succinctly expr) 226.51 235.62 P
-0.44 (esses our intent, even though we could) 306.56 235.62 P
(have written the same pr) 99.65 221.62 T
(ogram without it.) 220.76 221.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "217" 219
%%Page: "218" 220
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(218) 63.65 702.62 T
0 9.5 Q
(13.3 Macro hygiene) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 15 Q
0 X
(13.3  Macro hygiene) 99.65 662.95 T
1 11 Q
(Note that we have displayed the code fragments inserted by the macr) 99.65 642.62 T
(o in italics.) 437.36 642.62 T
(This display helps to see exactly what the macr) 99.65 628.62 T
(o has done to our code, but it also) 328.01 628.62 T
-0.11 (draws attention to an important featur) 99.65 614.62 P
-0.11 (e of Dylan macr) 286.02 614.62 P
-0.11 (os \320 they ar) 362.85 614.62 P
-0.11 (e) 417.96 614.62 P
2 F
-0.11 (hygienic) 425.86 614.62 P
1 F
-0.11 ( mac-) 469.25 614.62 P
(r) 99.65 600.62 T
(os. The local variable) 103.79 600.62 T
5 9 Q
(x) 208.74 600.62 T
1 11 Q
( was cr) 214.13 600.62 T
(eated by the macr) 248 600.62 T
(o. Ther) 334.3 600.62 T
(e is a possibility that this) 368.37 600.62 T
(variable could con\337ict with another variable in the surr) 99.65 586.62 T
(ounding code. Consider) 367.89 586.62 T
(what might happen if the \336rst parameter to) 99.65 572.62 T
4 9.5 Q
(direction-setter) 313.22 572.62 T
1 11 Q
( had been) 404.42 572.62 T
4 9.5 Q
(x) 454.32 572.62 T
1 11 Q
( rather) 460.02 572.62 T
-0.1 (than) 99.65 558.62 P
4 9.5 Q
-0.2 (dir) 124.19 558.62 P
1 11 Q
-0.1 (. If Dylan macr) 140.48 558.62 P
-0.1 (os wer) 212.53 558.62 P
-0.1 (e simple textual substitutions, we would get the fol-) 244.45 558.62 P
(lowing expansion:) 99.65 544.62 T
4 9 Q
(def) 99.65 523.95 T
(ine method direction-setter \050x, latitude :: <latitude>\051) 115.85 523.95 T
(if \050begin let x = x == north:; if \050x\051 x else x == south: end\051) 110.45 512.95 T
(next-method\050\051;) 132.05 501.95 T
(else error \050"%= is not north: or south:", dir\051;) 121.25 490.95 T
(end;) 110.45 479.95 T
(end;) 99.65 468.95 T
1 11 Q
-0.3 (W) 99.65 448.62 P
-0.3 (ith simple textual substitutions, our macr) 110.04 448.62 P
-0.3 (o would intr) 308.47 448.62 P
-0.3 (oduce a bug: trying to use) 368.44 448.62 P
(a dir) 99.65 434.62 T
(ection of) 121.97 434.62 T
4 9.5 Q
(south:) 166.48 434.62 T
1 11 Q
( would always fail! Dylan\325s hygienic macr) 200.68 434.62 T
(os solve this pr) 404.99 434.62 T
(ob-) 477.87 434.62 T
(lem by dif) 99.65 420.62 T
(fer) 148.92 420.62 T
(entiating between the) 162 420.62 T
5 9 Q
(x) 269.82 420.62 T
1 11 Q
( intr) 275.22 420.62 T
(oduced by the macr) 295.3 420.62 T
(o and any other) 391.49 420.62 T
4 9.5 Q
(x) 470.74 420.62 T
1 11 Q
(which might appear in the original code.) 99.65 406.62 T
3 15 Q
(13.4  Evaluation in macros) 99.65 232.95 T
1 11 Q
-0.29 (Dylan\325s template macr) 99.65 212.62 P
-0.29 (os do no evaluation. In particular) 209 212.62 P
-0.29 (, the pattern variables of a) 368.45 212.62 P
(macr) 99.65 198.62 T
(o ar) 123.89 198.62 T
(e unlike function parameters. They name fragments of code, not the) 142.29 198.62 T
-0.34 (r) 99.65 184.62 P
-0.34 (esult of evaluating a fragment of code. If we wer) 103.79 184.62 P
-0.34 (e writing) 335.94 184.62 P
4 9.5 Q
-0.7 (|) 382.06 184.62 P
1 11 Q
-0.34 ( as a function, it could) 387.76 184.62 P
(have been written much mor) 99.65 170.62 T
(e simply:) 240.12 170.62 T
2 F
(Comparison with C:) 132.65 372.62 T
1 F
( Because C \050and C++\051 macr) 233.77 372.62 T
(os ar) 365.58 372.62 T
(e simply text sub-) 388.65 372.62 T
(stitutions, in many cases performed by a pr) 132.65 358.62 T
(e-pr) 342.89 358.62 T
(ocessor that has no) 362.58 358.62 T
(understanding of the C language, they ar) 132.65 344.62 T
(e inher) 332.34 344.62 T
(ently unhygienic. C) 365.78 344.62 T
(macr) 132.65 330.62 T
(o writers r) 156.89 330.62 T
(educe this pr) 207.13 330.62 T
(oblem by choosing unusual or unlikely) 270.02 330.62 T
(names for local variables in their macr) 132.65 316.62 T
(os \050such as) 318.13 316.62 T
4 9.5 Q
(_or_temp_x) 373.46 316.62 T
1 11 Q
(\051 but) 430.46 316.62 T
-0.21 (even this can be insuf) 132.65 302.62 P
-0.21 (\336cient in complex macr) 236.32 302.62 P
-0.21 (os. Dylan macr) 349.14 302.62 P
-0.21 (os in ef) 421.62 302.62 P
-0.21 (fect) 455.71 302.62 P
(automatically r) 132.65 288.62 T
(ename macr) 206.17 288.62 T
(o variables on each expansion to guaran-) 265.32 288.62 T
(teed unique names.) 132.65 274.62 T
126.65 385.83 126.65 267.08 2 L
V
0.25 H
0 Z
N
477.65 385.83 477.65 267.08 2 L
V
N
126.52 385.95 477.77 385.95 2 L
V
N
126.52 266.95 477.77 266.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "218" 220
%%Page: "219" 221
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13 Macros) 465.11 702.62 T
2 11 Q
(219) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine method \134|\050arg1, arg2\051 if\050arg1\051 arg1 else arg2 end end;) 115.85 666.95 T
1 11 Q
(Which might make you think the macr) 99.65 646.62 T
(o could be simpli\336ed:) 287.62 646.62 T
4 9 Q
(def) 99.65 625.95 T
(ine macro \134|) 115.85 625.95 T
({ \134|\050?arg1:expression, ?arg2:expression\051 } =>) 110.45 614.95 T
({ if\050?arg1\051 ?arg1 else ?arg2 end }) 121.25 603.95 T
(end;) 99.65 592.95 T
1 11 Q
(But expanding this macr) 99.65 572.62 T
(o shows that is pr) 218.83 572.62 T
(obably not what you want:) 304.45 572.62 T
4 9 Q
(def) 99.65 551.95 T
(ine method direction-setter \050dir, latitude :: <latitude>\051) 115.85 551.95 T
(if \050) 110.45 540.95 T
5 F
(if \050) 132.05 540.95 T
4 F
(dir == north:) 153.65 540.95 T
5 F
(\051) 223.85 540.95 T
4 F
(dir == north:) 234.65 540.95 T
5 F
( else) 304.85 540.95 T
4 F
( dir == south:) 331.85 540.95 T
5 F
(end) 412.85 540.95 T
4 F
(\051) 429.05 540.95 T
(next-method\050\051;) 132.05 529.95 T
(else error \050"%= is not north: or south:", dir\051;) 121.25 518.95 T
(end;) 110.45 507.95 T
(end;) 99.65 496.95 T
1 11 Q
-0.4 (Although it is innocuous to r) 99.65 476.62 P
-0.4 (epeat) 237.54 476.62 P
4 9 Q
-0.78 (dir == north:) 266.12 476.62 P
1 11 Q
-0.4 (, other than the wasted r) 334.76 476.62 P
-0.4 (epetitive) 451.09 476.62 P
(computation, if the fragment bound to a pattern variable had some side-ef) 99.65 462.62 T
(fect,) 459.57 462.62 T
(such as incr) 99.65 448.62 T
(ementing a variable, you would not want that side-ef) 156.53 448.62 T
(fect r) 414.52 448.62 T
(epeated.) 438.82 448.62 T
-0.16 (For this r) 99.65 434.62 P
-0.16 (eason, you should be very car) 143.29 434.62 P
-0.16 (eful about r) 287.04 434.62 P
-0.16 (epeating a pattern variable in a) 342.94 434.62 P
-0.41 (template. Most often if you ar) 99.65 420.62 P
-0.41 (e r) 241.71 420.62 P
-0.41 (epeating a pattern variable, you should be using a) 253.47 420.62 P
(local variable instead, so that the fragment the pattern r) 99.65 406.62 T
(epr) 368.89 406.62 T
(esents is evaluated) 384.92 406.62 T
(only once \050as we did in the original version of the macr) 99.65 392.62 T
(o, with) 367.2 392.62 T
4 9 Q
(let x = ?arg1;) 403.82 392.62 T
1 11 Q
(\051.) 479.42 392.62 T
(Another potential pitfall can arise if the pattern variables appear in a dif) 99.65 378.62 T
(fer) 449.03 378.62 T
(ent) 462.11 378.62 T
(or) 99.65 364.62 T
(der in the template than they do in the pattern. In this case, unexpected r) 109.8 364.62 T
(esults) 462.63 364.62 T
(can occur if a side-ef) 99.65 350.62 T
(fect may af) 198.8 350.62 T
(fect the value of the other fragment. In this case,) 252 350.62 T
(you would again want to use local variables to ensur) 99.65 336.62 T
(e the fragments wer) 355.9 336.62 T
(e evalu-) 452.53 336.62 T
-0.21 (ated in their natural or) 99.65 322.62 P
-0.21 (der) 208.6 322.62 P
-0.21 (. These ar) 224.12 322.62 P
-0.21 (e not har) 269.94 322.62 P
-0.21 (d-and-fast r) 312.32 322.62 P
-0.21 (ules: the power of macr) 369.2 322.62 P
-0.21 (os) 482.44 322.62 P
(is due in a lar) 99.65 308.62 T
(ge part to their ability to manipulate code fragments without evalu-) 165.09 308.62 T
(ating them \321 but that power must be used judiciously) 99.65 294.62 T
(. If you ar) 363.8 294.62 T
(e designing mac-) 410.57 294.62 T
(r) 99.65 280.62 T
(os for use by others, they may expect function-like behavior) 103.79 280.62 T
(, and they may be) 393.45 280.62 T
(surprised if ther) 99.65 266.62 T
(e ar) 177.87 266.62 T
(e multiple or out-of-or) 195.54 266.62 T
(der evaluations of macr) 304.19 266.62 T
(o parameters.) 418.87 266.62 T
2 F
-0.15 (Comparison with C:) 132.65 232.62 P
1 F
-0.15 ( C pr) 233.48 232.62 P
-0.15 (ogrammers ar) 257.23 232.62 P
-0.15 (e familiar with this pr) 325.15 232.62 P
-0.15 (oblem. It) 430.13 232.62 P
(is inher) 132.65 218.62 T
(ent in macr) 168.68 218.62 T
(os because their ar) 223.29 218.62 T
(guments ar) 312.96 218.62 T
(e not evaluated.) 367.74 218.62 T
126.65 245.83 126.65 211.08 2 L
V
0.25 H
0 Z
N
477.65 245.83 477.65 211.08 2 L
V
N
126.52 245.95 477.77 245.95 2 L
V
N
126.52 210.95 477.77 210.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "219" 221
%%Page: "220" 222
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(220) 63.65 702.62 T
0 9.5 Q
(13.5 Constraints) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 15 Q
0 X
(13.5  Constraints) 99.65 662.95 T
1 11 Q
(W) 99.65 642.62 T
(e saw in our) 109.64 642.62 T
4 9.5 Q
(|) 171.83 642.62 T
1 11 Q
( macr) 177.53 642.62 T
(o, the constraint) 204.52 642.62 T
4 9.5 Q
(expression) 285.36 642.62 T
1 11 Q
( used for the pattern variables) 342.36 642.62 T
4 9.5 Q
(?arg1) 99.65 628.62 T
1 11 Q
( and) 128.15 628.62 T
4 9.5 Q
(?arg2) 152.27 628.62 T
1 11 Q
(. Except for a few unusual cases, pattern variables must always) 180.77 628.62 T
(have a constraint associated with them. Constraints serve two purposes: they) 99.65 614.62 T
(limit the fragment that the pattern variable will match, and they de\336ne the mean-) 99.65 600.62 T
(ing of the pattern variable when it is substituted. As an example, consider the fol-) 99.65 586.62 T
(lowing) 99.65 572.62 T
2 F
(statement macro) 136.5 572.62 T
1 F
(, which we might \336nd useful for manipulating the) 218.68 572.62 T
(decoded parts of seconds:) 99.65 558.62 T
4 9 Q
(def) 99.65 537.95 T
(ine macro with-decoded-seconds) 115.85 537.95 T
({) 110.45 526.95 T
(with-decoded-seconds) 121.25 515.95 T
(\050?max:variable, ?min:variable, ?sec:variable = ?time:expression\051) 142.85 504.95 T
(?:body) 132.05 493.95 T
(end) 121.25 482.95 T
(} => {) 110.45 471.95 T
(begin) 121.25 460.95 T
(let \050?max, ?min, ?sec\051 = decode-total-seconds\050?time\051;) 132.05 449.95 T
(?body) 132.05 438.95 T
(end) 121.25 427.95 T
(}) 110.45 416.95 T
(end;) 99.65 405.95 T
1 11 Q
(The pr) 99.65 385.62 T
(eceding macr) 131.57 385.62 T
(o might be used as follows:) 196.43 385.62 T
4 9 Q
(def) 99.65 364.95 T
(ine method say \050time :: <time>\051) 115.85 364.95 T
(with-decoded-seconds\050hours, minutes, seconds = time\051;) 110.45 353.95 T
(format\050*window*, "%d:%d:%d", hours, minutes, seconds\051;) 121.25 342.95 T
(end;) 110.45 331.95 T
(end;) 99.65 320.95 T
1 11 Q
(A statement macr) 99.65 300.62 T
(o can appear anywher) 185.52 300.62 T
(e a) 293.41 300.62 T
4 9.5 Q
(begin) 309.68 300.62 T
1 11 Q
(\311) 343.88 300.62 T
4 9.5 Q
(end;) 357.63 300.62 T
1 11 Q
( block can appear) 380.43 300.62 T
(. A) 464.78 300.62 T
(statement macr) 99.65 286.62 T
(o intr) 174.22 286.62 T
(oduces a new) 200.31 286.62 T
2 F
(begin word) 269.08 286.62 T
1 F
(, in this case,) 326.83 286.62 T
4 9.5 Q
(with-decoded-sec-) 391.1 286.62 T
-0.45 (onds) 99.65 272.62 P
1 11 Q
-0.22 (, and is matched against a fragment that extends up to the matching) 122.45 272.62 P
4 9.5 Q
-0.45 (end) 452.32 272.62 P
1 11 Q
-0.22 (. The) 469.42 272.62 P
(pattern and the constraints on the pattern variables limit what the macr) 99.65 258.62 T
(o will) 446.32 258.62 T
(match \321 they de\336ne the syntax of this particular statement. In the case of) 99.65 244.62 T
4 9.5 Q
(with-) 459.13 244.62 T
-0.52 (decoded-seconds) 99.65 230.62 P
1 11 Q
-0.25 (, the syntax is a par) 185.15 230.62 P
-0.25 (enthesized list of thr) 277.21 230.62 P
-0.25 (ee) 375.44 230.62 P
4 9.5 Q
-0.52 (variable) 388.48 230.62 P
1 11 Q
-0.25 ( expr) 434.08 230.62 P
-0.25 (essions) 458.28 230.62 P
(\050that is,) 99.65 216.62 T
4 9.5 Q
(name :: <type>) 138.5 216.62 T
1 11 Q
(, wher) 218.3 216.62 T
(e the type is optional\051, the literal token) 248.79 216.62 T
4 9.5 Q
(=) 438.63 216.62 T
1 11 Q
(, and an) 444.33 216.62 T
4 9.5 Q
(expression) 99.65 202.62 T
1 11 Q
( \050any Dylan expr) 156.65 202.62 T
(ession yielding a value\051; followed by a body \050any) 238.01 202.62 T
-0.16 (sequence of expr) 99.65 188.62 P
-0.16 (essions separated by) 180.74 188.62 P
4 9.5 Q
-0.34 (;) 283.03 188.62 P
1 11 Q
-0.16 (, just as would be valid in a) 288.73 188.62 P
4 9.5 Q
-0.34 (begin) 422.82 188.62 P
1 11 Q
-0.16 (\311) 456.68 188.62 P
4 9.5 Q
-0.34 (end;) 470.26 188.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "220" 222
%%Page: "221" 223
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13 Macros) 465.11 702.62 T
2 11 Q
(221) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(block\051. Note the use of the abbr) 99.65 665.62 T
(eviation) 251.41 665.62 T
4 9.5 Q
(?:body) 293.55 665.62 T
1 11 Q
(, to mean) 326.52 665.62 T
4 9.5 Q
(?body:body) 374 665.62 T
1 11 Q
( \050a pattern) 431 665.62 T
(variable,) 99.65 651.62 T
4 9.5 Q
(body) 144.46 651.62 T
1 11 Q
(, with the constraint) 166.04 651.62 T
4 9.5 Q
(body) 265.99 651.62 T
1 11 Q
(\051.) 288.79 651.62 T
(The constraints ar) 126.65 637.62 T
(e very similar to type declarations on variables \321 they) 213.45 637.62 T
(limit the acceptable values of the parameter variables and they help to document) 99.65 623.62 T
(the interface of the macr) 99.65 609.62 T
(o. The constraints also serve a second purpose: once the) 217.19 609.62 T
(compiler has r) 99.65 595.62 T
(ecognized a fragment under a particular constraint, it will ensur) 169.09 595.62 T
(e) 479.98 595.62 T
(the corr) 99.65 581.62 T
(ect behavior of that fragment when it is substituted in a template. For) 137.04 581.62 T
(example, suppose we had de\336ned a function macr) 99.65 567.62 T
(o:) 343.97 567.62 T
4 9 Q
(def) 99.65 546.95 T
(ine macro times) 115.85 546.95 T
({ times\050 ?arg1:expression, ?arg2:expression \051 } =>) 110.45 535.95 T
({ ?arg1 * ?arg2 }) 121.25 524.95 T
(end;) 99.65 513.95 T
1 11 Q
(W) 99.65 493.62 T
(e might use the macr) 109.64 493.62 T
(o as follows:) 210.99 493.62 T
4 9 Q
(times\0501 + 3, 2 + 5\051;) 99.65 472.95 T
1 11 Q
(This is the expanded macr) 99.65 452.62 T
(o:) 227.19 452.62 T
4 9 Q
(1 + 3) 99.65 431.95 T
5 F
(*) 132.05 431.95 T
4 F
( 2 + 5) 137.45 431.95 T
1 11 Q
(If the macr) 99.65 411.62 T
(o wer) 152.02 411.62 T
(e a simple text substitution macr) 179.37 411.62 T
(o, we can see that the r) 337.15 411.62 T
(esult) 447.31 411.62 T
(would be 12, rather than the 28 we wer) 99.65 397.62 T
(e expecting. But because in Dylan the con-) 289.11 397.62 T
-0.3 (straint is maintained when a pattern variable is substituted, that is, the expr) 99.65 383.62 P
-0.3 (ession) 462.99 383.62 P
(that makes up each of the pattern variables r) 99.65 369.62 T
(emains a single expr) 315.63 369.62 T
(ession, it is actu-) 414.69 369.62 T
(ally as if the macr) 99.65 355.62 T
(o automatically inserted par) 185.2 355.62 T
(entheses and the expansion wer) 321.79 355.62 T
(e:) 476.52 355.62 T
5 9 Q
(\050) 99.65 334.95 T
4 F
(1 + 3) 105.05 334.95 T
5 F
(\051 * \050) 132.05 334.95 T
4 F
(2 + 5) 159.05 334.95 T
5 F
(\051) 186.05 334.95 T
1 11 Q
(Some development envir) 99.65 314.62 T
(onments may display the implicit par) 221.41 314.62 T
(entheses of an) 403.65 314.62 T
(expr) 99.65 300.62 T
(ession constraint. Thus the macr) 121.35 300.62 T
(o will yield the expected r) 277.83 300.62 T
(esult of 28.) 403.56 300.62 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
190.44 285.07 126.65 285.07 2 L
0 1 1 0 1 0 0 K
V
0.42 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
([--- If it gets r) 126.65 286.62 T
0 1 1 0 1 0 0 K
495.1 285.07 190.24 285.07 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(esolved, show how the implicit constraint of the context of the) 190.24 286.62 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
124.09 271.07 99.65 271.07 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(macr) 99.65 272.62 T
0 1 1 0 1 0 0 K
224.54 271.07 123.89 271.07 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(o is also maintained]) 123.89 272.62 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(Comparison with C:) 132.65 238.62 T
1 F
( C pr) 233.77 238.62 T
(ogrammers ar) 257.83 238.62 T
(e familiar with this pr) 325.9 238.62 T
(oblem.) 431.46 238.62 T
(Because C macr) 132.65 224.62 T
(os ar) 209.13 224.62 T
(e simple textual substitutions, the macr) 232.2 224.62 T
(o writer) 422.49 224.62 T
(must be sur) 132.65 210.62 T
(e to insert par) 189.54 210.62 T
(entheses ar) 256.38 210.62 T
(ound every macr) 310.3 210.62 T
(o variable when) 393.02 210.62 T
(it is substituted, and ar) 132.65 196.62 T
(ound the macr) 243.95 196.62 T
(o expansion itself to pr) 314.71 196.62 T
(event the) 425.38 196.62 T
(r) 132.65 182.62 T
(esulting expansion fr) 136.79 182.62 T
(om taking on new meanings.) 238.91 182.62 T
126.65 251.83 126.65 175.08 2 L
V
0.25 H
N
477.65 251.83 477.65 175.08 2 L
V
N
126.52 251.95 477.77 251.95 2 L
V
N
126.52 174.95 477.77 174.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "221" 223
%%Page: "222" 224
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(222) 63.65 702.62 T
0 9.5 Q
(13.6 More complex patterns) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 15 Q
0 X
(13.6  More complex patterns) 99.65 662.95 T
1 11 Q
(The macr) 99.65 642.62 T
(os shown so far have all been very simple, a single pattern transformed) 145.06 642.62 T
-0.32 (into a single template. T) 99.65 628.62 P
-0.32 (o get a \337avor of the full power of the Dylan macr) 214.13 628.62 P
-0.32 (o system,) 448.02 628.62 P
(consider this) 99.65 614.62 T
2 F
(de\336ning macro) 164.49 614.62 T
1 F
(:) 239.96 614.62 T
4 9 Q
(def) 99.65 593.95 T
(ine macro aircraft-def) 115.85 593.95 T
(iner) 234.65 593.95 T
({ def) 110.45 582.95 T
(ine aircraft ?identif) 137.45 582.95 T
(ier:name :: ?type:name ?f) 250.85 582.95 T
(light } =>) 385.85 582.95 T
({ def) 121.25 571.95 T
(ine-aircraft\050?#\323identif) 148.25 571.95 T
(ier\323, \322<\322 ## ?type ## \322>\323, ?f) 272.45 571.95 T
(light\051 }) 429.05 571.95 T
(f) 105.05 560.95 T
(light:) 110.45 560.95 T
({ = ?:expression } => { f) 110.45 549.95 T
(light: ?expression }) 245.45 549.95 T
({ } => { }) 110.45 538.95 T
(end;) 99.65 527.95 T
(def) 99.65 505.95 T
(ine method def) 115.85 505.95 T
(ine-aircraft\050id :: <symbol>,) 191.45 505.95 T
(type :: subclass\050<aircraft>\051,) 261.65 494.95 T
(#rest options) 261.65 483.95 T
(#key f) 261.65 472.95 T
(light :: <f) 294.05 472.95 T
(light>\051) 353.45 472.95 T
(let craft = apply\050make, type, id: id, options\051;) 110.45 461.95 T
(*all-aircraft*[id] := craft;) 110.45 450.95 T
(unless\050empty?\050options\051\051) 110.45 439.95 T
(*all-f) 121.25 428.95 T
(lights*[f) 153.65 428.95 T
(light] := craft;) 202.25 428.95 T
(end;) 110.45 417.95 T
(end;) 99.65 406.95 T
1 11 Q
(W) 99.65 386.62 T
(e might use the macr) 109.64 386.62 T
(o) 210.99 386.62 T
4 9.5 Q
(def) 219.75 386.62 T
(ine aircraft) 236.85 386.62 T
1 11 Q
( as follows:) 305.25 386.62 T
4 9 Q
(def) 99.65 365.95 T
(ine aircraft UA1306 :: B707 = make\050<f) 115.85 365.95 T
(light>, \311\051;) 315.65 365.95 T
1 11 Q
(This macr) 99.65 345.62 T
(o shows a number of the mor) 147.65 345.62 T
(e esoteric featur) 289.8 345.62 T
(es of Dylan macr) 366.6 345.62 T
(os. First,) 448.42 345.62 T
(notice the pattern variable) 99.65 331.62 T
4 9.5 Q
(?f) 229.87 331.62 T
(light) 241.27 331.62 T
1 11 Q
(, which has no constraint, but rather is called) 269.77 331.62 T
(out as an) 99.65 317.62 T
2 F
(auxiliary pattern) 146.19 317.62 T
1 F
(. When the compiler matches this macr) 229.59 317.62 T
(o, it will try) 418.52 317.62 T
(each of the sub-patterns listed under \337ight for a match. When it \336nds a match, it) 99.65 303.62 T
-0.11 (will assign the pattern variable) 99.65 289.62 P
4 9.5 Q
-0.22 (?f) 252.05 289.62 P
-0.22 (light) 263.45 289.62 P
1 11 Q
-0.11 ( to the fragment r) 291.95 289.62 P
-0.11 (esulting fr) 376.11 289.62 P
-0.11 (om the match-) 425.64 289.62 P
-0.21 (ing pattern\325s template substitution. In ef) 99.65 275.62 P
-0.21 (fect, auxiliary patterns give a way of writ-) 293.66 275.62 P
-0.39 (ing new constraints, combined with the ef) 99.65 261.62 P
-0.39 (fect of a subr) 301.02 261.62 P
-0.39 (outine for matching. In this) 362.2 261.62 P
(particular case, we use the auxiliary pattern to look for an optional initial value) 99.65 247.62 T
(and transform it into a keywor) 99.65 233.62 T
(d ar) 248.55 233.62 T
(gument. \050W) 267.67 233.62 T
(e might consider extending this to) 324.54 233.62 T
(allow a mor) 99.65 219.62 T
(e natural expr) 157.6 219.62 T
(ession of the \337ight assignment in terms of origin, desti-) 225.24 219.62 T
(nation and time.\051) 99.65 205.62 T
-0.29 (The actual work of de\336ning an air) 126.65 191.62 P
-0.29 (craft is done by calling the helper function) 289.93 191.62 P
4 9.5 Q
-0.38 (def) 99.65 177.62 P
-0.38 (ine-aircraft) 116.75 177.62 P
1 11 Q
-0.19 (, but the macr) 185.15 177.62 P
-0.19 (o takes car) 251.39 177.62 P
-0.19 (e of getting the ar) 302.19 177.62 P
-0.19 (guments in or) 386.57 177.62 P
-0.19 (der) 453.83 177.62 P
-0.19 (. The) 469.36 177.62 P
(substitution) 99.65 163.62 T
4 9 Q
(?#"identif) 160.64 163.62 T
(ier") 214.64 163.62 T
1 11 Q
( turns the name) 236.24 163.62 T
4 9 Q
(UA1306) 315.01 163.62 T
1 11 Q
( into the symbol) 347.41 163.62 T
4 9 Q
(#"UA1306") 428.65 163.62 T
1 11 Q
( by) 477.25 163.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "222" 224
%%Page: "223" 225
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13 Macros) 465.11 702.62 T
2 11 Q
(223) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 X
(coercion) 99.65 665.62 T
1 F
(, which can be used to index the table) 141.81 665.62 T
4 9.5 Q
(*all-aircraft*) 326.56 665.62 T
1 11 Q
(. The substitution) 406.36 665.62 T
4 9 Q
-0.47 ("<" ## ?type ## ">") 99.65 651.62 P
1 11 Q
-0.24 ( turns the name) 200.35 651.62 P
4 9 Q
-0.47 (B707) 278.15 651.62 P
1 11 Q
-0.24 ( into the name) 299.75 651.62 P
4 9 Q
-0.47 (<B707>) 371.12 651.62 P
1 11 Q
-0.24 ( by) 403.52 651.62 P
2 F
-0.24 (concatenation) 420.74 651.62 P
1 F
-0.24 (,) 490.39 651.62 P
(allowing a mor) 99.65 637.62 T
(e concise format for our de\336ner) 173.32 637.62 T
(.) 325.3 637.62 T
3 15 Q
(13.7  More hygiene) 99.65 597.95 T
1 11 Q
(One mor) 99.65 577.62 T
(e note about hygiene: in a textual substitution macr) 142.58 577.62 T
(o, ther) 391.49 577.62 T
(e is some) 422.4 577.62 T
(chance that the global variables the macr) 99.65 563.62 T
(o uses \050in this case the helper function) 297.41 563.62 T
4 9.5 Q
(def) 99.65 549.62 T
(ine-aircraft) 116.75 549.62 T
1 11 Q
(\051 could be confused with a surr) 185.15 549.62 T
(ounding local variable of the) 336 549.62 T
-0.11 (same name wher) 99.65 535.62 P
-0.11 (e the macr) 181.96 535.62 P
-0.11 (o is called. This confusion does not happen in a Dylan) 232.01 535.62 P
-0.28 (macr) 99.65 521.62 P
-0.28 (o. The global variables used in a Dylan macr) 123.89 521.62 P
-0.28 (o always mean what they meant) 337.28 521.62 P
-0.21 (at the time the macr) 99.65 507.62 P
-0.21 (o was de\336ned, not at the time the macr) 195.42 507.62 P
-0.21 (o is called. It is as if the) 382.48 507.62 P
(variables wer) 99.65 493.62 T
(e automatically r) 164.97 493.62 T
(enamed to avoid con\337icts.) 246.51 493.62 T
(Another way to notice this featur) 126.65 479.62 T
(e is if you export a macr) 287.35 479.62 T
(o fr) 403.84 479.62 T
(om a module.) 420.4 479.62 T
(Only the macr) 99.65 465.62 T
(o need be exported. Its global r) 169.01 465.62 T
(efer) 318.98 465.62 T
(ences still r) 337.33 465.62 T
(efer to the pr) 391.31 465.62 T
(oper) 453.72 465.62 T
-0.02 (\050module-private\051 values they had at the time the macr) 99.65 451.62 P
-0.02 (o was de\336ned, just as what) 361.85 451.62 P
(occurs when a function exported fr) 99.65 437.62 T
(om a module calls module-private subr) 269.63 437.62 T
(ou-) 461.05 437.62 T
(tines.) 99.65 423.62 T
(Occasionally) 126.65 409.62 T
(, you will want to get ar) 187.63 409.62 T
(ound macr) 303.29 409.62 T
(o hygiene. Y) 356.04 409.62 T
(ou may want to) 415.4 409.62 T
(de\336ne a macr) 99.65 395.62 T
(o that cr) 165.21 395.62 T
(eates a variable that is visible at the macr) 204.82 395.62 T
(o call. Her) 403.28 395.62 T
(e is an) 452.89 395.62 T
(example of a simple statement macr) 99.65 381.62 T
(o that r) 274.28 381.62 T
(epeats its body until you cry uncle:) 309.01 381.62 T
4 9 Q
(def) 99.65 360.95 T
(ine macro repeat) 115.85 360.95 T
({ repeat ?:body end } =>) 110.45 349.95 T
({ block \050?=uncle\051) 121.25 338.95 T
(local method repeat \050\051 ?body; repeat\050\051 end;) 142.85 327.95 T
(repeat\050\051;) 142.85 316.95 T
(end }) 132.05 305.95 T
(end;) 99.65 294.95 T
1 11 Q
(The term) 99.65 274.62 T
4 9.5 Q
(?=uncle) 146.48 274.62 T
1 11 Q
(, says that the local variable) 186.38 274.62 T
4 9.5 Q
(uncle) 323.01 274.62 T
1 11 Q
(, which is the block exit vari-) 351.51 274.62 T
(able, will be visible when the macr) 99.65 260.62 T
(o is called exactly as) 267.66 260.62 T
4 9.5 Q
(uncle) 368.45 260.62 T
1 11 Q
(; ther) 396.95 260.62 T
(e will be no) 421.86 260.62 T
(hygienic r) 99.65 246.62 T
(enaming. Her) 148.14 246.62 T
(e is an example of using the macr) 214.81 246.62 T
(o to count to 100:) 376.52 246.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "223" 225
%%Page: "224" 226
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(224) 63.65 702.62 T
0 9.5 Q
(13.8 Summary) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(begin) 99.65 666.95 T
(let i = 0;) 110.45 655.95 T
(repeat) 110.45 644.95 T
(if \050i == 100\051 uncle\050\051 end;) 121.25 633.95 T
(i := i + 1;) 121.25 622.95 T
(end;) 110.45 611.95 T
(end;) 99.65 600.95 T
1 11 Q
-0.16 (Note that we would have to document how) 99.65 580.62 P
4 9.5 Q
-0.34 (repeat) 313.37 580.62 P
1 11 Q
-0.16 ( works for other users, or they) 347.57 580.62 P
(might be surprised if they tried to use) 99.65 566.62 T
4 9.5 Q
(uncle) 285.99 566.62 T
1 11 Q
( instead of) 314.49 566.62 T
4 9.5 Q
(i) 367.75 566.62 T
1 11 Q
( in the example.) 373.45 566.62 T
3 15 Q
(13.8  Summary) 99.65 526.95 T
1 11 Q
(In this chapter) 99.65 506.62 T
(, we have intr) 168.89 506.62 T
(oduced macr) 235.06 506.62 T
(os by explaining their purpose as a lan-) 298.29 506.62 T
(guage extension tool and by showing a range of Dylan macr) 99.65 492.62 T
(os. Macr) 391.62 492.62 T
(os can be) 432.73 492.62 T
-0.45 (very useful in tailoring the language to expr) 99.65 478.62 P
-0.45 (ess a particular pr) 310.22 478.62 P
-0.45 (oblem domain mor) 395.79 478.62 P
-0.45 (e) 488.08 478.62 P
(concisely) 99.65 464.62 T
(. In this chapter) 143.05 464.62 T
(, we cover) 217.8 464.62 T
(ed:) 267.01 464.62 T
(\245) 108.65 444.62 T
(Function, statement, and de\336ning macr) 126.65 444.62 T
(os) 317.59 444.62 T
(\245) 108.65 424.62 T
(Patterns and templates) 126.65 424.62 T
(\245) 108.65 404.62 T
(Macr) 126.65 404.62 T
(o-expansion) 151.59 404.62 T
(\245) 108.65 384.62 T
(Pattern variables and constraints) 126.65 384.62 T
(\245) 108.65 364.62 T
(Macr) 126.65 364.62 T
(o hygiene) 151.59 364.62 T
(\245) 108.65 344.62 T
(Evaluation in macr) 126.65 344.62 T
(os) 218.96 344.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "224" 226
%%Page: "225" 227
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(225) 289.4 135.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(14) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(14) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Multiple Inheritance) 101.65 591.4 T
99.65 159.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(In the class r) 99.65 449.62 T
(elationships we have de\336ned so far) 160.32 449.62 T
(, each class has only one dir) 331.01 449.62 T
(ect) 465.27 449.62 T
-0.34 (super) 99.65 435.62 P
-0.34 (class. When a class has a single dir) 126.97 435.62 P
-0.34 (ect super) 291.96 435.62 P
-0.34 (class, the way in which that class) 335.43 435.62 P
-0.19 (inherits fr) 99.65 421.62 P
-0.19 (om its super) 147.08 421.62 P
-0.19 (class is called) 206.69 421.62 P
2 F
-0.19 (single inheritance) 273.91 421.62 P
1 F
-0.19 (. In Dylan, a class can have) 363.83 421.62 P
(mor) 99.65 407.62 T
(e than one dir) 119.51 407.62 T
(ect super) 186.67 407.62 T
(class. When a class has multiple super) 230.48 407.62 T
(classes, the way) 415.44 407.62 T
(in which that class inherits fr) 99.65 393.62 T
(om its super) 239.93 393.62 T
(classes is called) 299.92 393.62 T
2 F
(multiple inheritance) 377.66 393.62 T
1 F
(.) 480.6 393.62 T
(Why would we want to use multiple inheritance? Objects in the r) 126.65 379.62 T
(eal world) 442.89 379.62 T
-0.35 (often have complicated behavior) 99.65 365.62 P
-0.35 (. As we make our softwar) 256.94 365.62 P
-0.35 (e models mor) 379.67 365.62 P
-0.35 (e r) 445.18 365.62 P
-0.35 (ealistic,) 456.99 365.62 P
(we often \336nd that the behavior of the objects we cr) 99.65 351.62 T
(eate becomes mor) 345.11 351.62 T
(e compli-) 431.99 351.62 T
(cated as well. Multiple inheritance is often useful when we can br) 99.65 337.62 T
(eak down com-) 417.75 337.62 T
(plicated behavior into sets of characteristics that don\325t interfer) 99.65 323.62 T
(e with each other) 400.33 323.62 T
(.) 483.06 323.62 T
(we might be able to de\336ne a class to r) 99.65 309.62 T
(epr) 281.32 309.62 T
(esent each set of these characteristics.) 297.35 309.62 T
-0.08 (Then we can then de\336ne subclasses that combine sets of characteristics by inherit-) 99.65 295.62 P
(ing fr) 99.65 281.62 T
(om mor) 125.93 281.62 T
(e than one of our super) 164.26 281.62 T
(classes. W) 276.83 281.62 T
(e give some examples in this chap-) 325.16 281.62 T
(ter) 99.65 267.62 T
(.) 112.03 267.62 T
(Multiple inheritance doesn\325t change any of the r) 126.65 253.62 T
(ules of slot inheritance or) 359.95 253.62 T
(method dispatch we\325ve learned so far) 99.65 239.62 T
(. But it does r) 281.72 239.62 T
(equir) 346 239.62 T
(e some extensions to) 371.41 239.62 T
-0.41 (those r) 99.65 225.62 P
-0.41 (ules. This chapter explains how slot inheritance and method dispatch work) 132.18 225.62 P
(in Dylan in the pr) 99.65 211.62 T
(esence of multiple inheritance.) 185.6 211.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "225" 227
%%Page: "226" 228
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(226) 63.65 702.62 T
0 9.5 Q
(14.1 Example of multiple inheritance) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 15 Q
0 X
(14.1  Example of multiple inheritance) 99.65 662.95 T
1 11 Q
-0 (In our airport example, we have de\336ned a) 99.65 642.62 P
4 9.5 Q
-0.01 (<vehicle>) 306.66 642.62 P
1 11 Q
-0 ( class and used it as a super-) 357.96 642.62 P
(class for classes of air) 99.65 628.62 T
(craft. Figur) 202.94 628.62 T
(e 14.1 shows the hierar) 256.63 628.62 T
(chy of vehicle classes) 367.18 628.62 T
(we\325ve de\336ned.) 99.65 614.62 T
99.65 437.96 513.65 445.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 201.05 449.62 T
(e 14.1  Hierar) 227.26 449.62 T
(chy of vehicle classes) 291.64 449.62 T
-0.22 (So far) 99.65 417.63 P
-0.22 (, the only type of vehicle we\325ve de\336ned is air) 126.65 417.63 P
-0.22 (craft. Of course, ther) 341.57 417.63 P
-0.22 (e ar) 440.15 417.63 P
-0.22 (e many) 457.59 417.63 P
(other kinds of vehicle: automobiles, ships, and spacecraft, to name a few) 99.65 403.63 T
(. W) 449.72 403.63 T
(e) 465.21 403.63 T
(haven\325t needed these in the airport example so far) 99.65 389.63 T
(, but we can easily see how we) 341.98 389.63 T
(would need mor) 99.65 375.63 T
(e vehicle classes if we made the example mor) 180.41 375.63 T
(e r) 399.84 375.63 T
(ealistic.) 412 375.63 T
-0.16 (For example, airplanes need fuel befor) 126.65 361.63 P
-0.16 (e they can take of) 312.33 361.63 P
-0.16 (f. An airplane is typ-) 396.05 361.63 P
(ically fueled by a tr) 99.65 347.63 T
(uck at the gate. If fuel is unavailable or fueling is delayed, the) 193.05 347.63 T
(airplane\325s departur) 99.65 333.63 T
(e fr) 192.96 333.63 T
(om the gate is delayed as well. If we want to model the) 208.79 333.63 T
(takeof) 99.65 319.63 T
(f pr) 129.59 319.63 T
(ocess mor) 146.76 319.63 T
(e accurately) 194.86 319.63 T
(, we should take account of the need for fuel, and) 251.58 319.63 T
(speci\336cally the need to get fuel tr) 99.65 305.63 T
(ucks to airplanes pr) 260.42 305.63 T
(eparing for takeof) 356.01 305.63 T
(f.) 442.91 305.63 T
(W) 126.65 291.63 T
(e ar) 136.64 291.63 T
(e not going to handle the fuel-supply pr) 154.3 291.63 T
(oblem in this book. However) 348.02 291.63 T
(,) 488.33 291.63 T
(in this section we ar) 99.65 277.63 T
(e going to modify the vehicle class hierar) 196.21 277.63 T
(chy as a \336rst step) 395.05 277.63 T
(towar) 99.65 263.63 T
(d handling fuel tr) 128.06 263.63 T
(ucks and other kinds of gr) 213.59 263.63 T
(ound vehicles. In the pr) 340.9 263.63 T
(ocess,) 455.64 263.63 T
(we will develop an opportunity for using multiple inheritance in air) 99.65 249.63 T
(craft classes.) 430.02 249.63 T
3 13 Q
(14.1.1  Modeling ground vehicles) 99.65 218.29 T
1 11 Q
(An obvious early step in modeling the behavior of fuel tr) 126.65 198.63 T
(ucks would be to) 403.27 198.63 T
-0.46 (de\336ne a) 99.65 184.63 P
4 9.5 Q
-0.95 (<fuel-truck>) 140.05 184.63 P
1 11 Q
-0.46 ( class. Pr) 208.45 184.63 P
-0.46 (esumably we would want that class to inherit fr) 249.49 184.63 P
-0.46 (om) 477.64 184.63 P
99.65 159.95 513.65 672.95 C
140.65 465.95 472.65 596.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<vehicle>) 281 582.47 T
(<B707>) 289.55 476.47 T
(<standard-commercial-aircraft>) 221.15 511.81 T
(<standard-aircraft>) 252.5 547.14 T
309.96 569.32 306.65 557.79 303.34 569.32 306.65 569.32 4 Y
V
306.65 575.79 306.65 569.32 2 L
0.5 H
2 Z
N
309.96 533.99 306.65 522.45 303.34 533.99 306.65 533.99 4 Y
V
306.65 540.45 306.65 533.99 2 L
N
309.96 498.65 306.65 487.12 303.34 498.65 306.65 498.65 4 Y
V
306.65 505.12 306.65 498.65 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "226" 228
%%Page: "227" 229
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14 Multiple Inheritance) 414.16 702.62 T
2 11 Q
(227) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9.5 Q
0 X
-0.82 (<vehicle>) 99.65 665.62 P
1 11 Q
-0.4 (. Let\325s look at our curr) 150.95 665.62 P
-0.4 (ent de\336nitions of the) 256.17 665.62 P
4 9.5 Q
-0.82 (<vehicle>) 357.87 665.62 P
1 11 Q
-0.4 ( class and its only) 409.17 665.62 P
(dir) 99.65 651.62 T
(ect subclass,) 113.72 651.62 T
4 9.5 Q
(<standard-aircraft>) 176 651.62 T
1 11 Q
(:) 284.3 651.62 T
4 9 Q
(def) 99.65 630.95 T
(ine class <vehicle> \050<physical-object>\051) 115.85 630.95 T
(// Every vehicle has some unique identif) 110.45 619.95 T
(ication code) 326.45 619.95 T
(slot vehicle-id) 110.45 608.95 T
(:: <string>, required-init-keyword: id:;) 294.05 608.95 T
(// How much fuel is left in the fuel tank) 110.45 597.95 T
(slot fuel-remaining) 110.45 586.95 T
(:: <integer>,) 294.05 586.95 T
(init-keyword: fuel-remaining:,) 310.25 575.95 T
(init-value: 0;) 310.25 564.95 T
(// The normal operating speed of this class of vehicle) 110.45 553.95 T
(each-subclass slot cruising-speed :: <integer>;) 110.45 542.95 T
(end;) 99.65 531.95 T
(def) 99.65 512.95 T
(ine class <standard-aircraft> \050<vehicle>\051) 115.85 512.95 T
(slot altitude) 110.45 501.95 T
(:: <integer>, init-keyword: altitude:;) 283.25 501.95 T
(each-subclass slot needs-runway :: <boolean>, init-value: #t;) 110.45 490.95 T
(slot direction) 110.45 479.95 T
(:: <symbol>;) 283.25 479.95 T
(end;) 99.65 468.95 T
1 11 Q
-0.27 (As a start, we can de\336ne a) 99.65 448.62 P
4 9.5 Q
-0.56 (<fuel-truck>) 227.2 448.62 P
1 11 Q
-0.27 ( class as a subclass of) 295.6 448.62 P
4 9.5 Q
-0.56 (<vehicle>) 399.01 448.62 P
1 11 Q
-0.27 (. T) 450.31 448.62 P
-0.27 (o oper-) 461.27 448.62 P
(ate on instances of this class, we will no doubt need to know how much air) 99.65 434.62 T
(craft) 463.09 434.62 T
(fuel they contain. W) 99.65 420.62 T
(e de\336ne one initial slot,) 196.76 420.62 T
4 9.5 Q
(aircraft-fuel-remaining) 312.27 420.62 T
1 11 Q
(. W) 443.37 420.62 T
(e also) 458.86 420.62 T
(need to pr) 99.65 406.62 T
(ovide an initial value for the inherited slot) 149.16 406.62 T
4 9.5 Q
(cruising-speed) 356.71 406.62 T
1 11 Q
(.) 436.51 406.62 T
4 9 Q
(def) 99.65 385.95 T
(ine class <fuel-truck> \050<vehicle>\051) 115.85 385.95 T
(// How much aircraft fuel is left in the tank) 110.45 374.95 T
(slot aircraft-fuel-remaining) 110.45 363.95 T
(:: <integer>,) 283.25 363.95 T
(init-keyword: aircraft-fuel-remaining:,) 299.45 352.95 T
(init-value: 0;) 299.45 341.95 T
(inherited slot cruising-speed,) 110.45 330.95 T
(init-value: 25;) 299.45 330.95 T
(end;) 99.65 319.95 T
1 11 Q
(This de\336nition serves our immediate purpose, but the class hierar) 99.65 299.62 T
(chy isn\325t as) 418.66 299.62 T
-0.05 (modular as it might be. Suppose we want to take account of other vehicles on the) 99.65 285.62 P
(gr) 99.65 271.62 T
(ound, such as baggage carriers or \336r) 109.91 271.62 T
(e tr) 286.08 271.62 T
(ucks? W) 301.94 271.62 T
(e can anticipate that all gr) 341.86 271.62 T
(ound) 466.64 271.62 T
-0.37 (vehicles might have some common featur) 99.65 257.62 P
-0.37 (es, and we won\325t want each new class to) 300.21 257.62 P
(be a dir) 99.65 243.62 T
(ect subclass of) 136.07 243.62 T
4 9.5 Q
(<vehicle>) 208.02 243.62 T
1 11 Q
(. As a r) 259.32 243.62 T
(e\336nement, we de\336ne two intermediary) 293.19 243.62 T
(classes,) 99.65 229.62 T
4 9.5 Q
(<ground-vehicle>) 137.99 229.62 T
1 11 Q
( and) 229.19 229.62 T
4 9.5 Q
(<f) 253.32 229.62 T
(lying-vehicle>) 264.72 229.62 T
1 11 Q
(:) 344.52 229.62 T
4 9 Q
(def) 99.65 208.95 T
(ine class <ground-vehicle> \050<vehicle>\051) 115.85 208.95 T
(end;) 99.65 197.95 T
(def) 99.65 178.95 T
(ine class <f) 115.85 178.95 T
(lying-vehicle> \050<vehicle>\051) 180.65 178.95 T
(end;) 99.65 167.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "227" 229
%%Page: "228" 230
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(228) 63.65 702.62 T
0 9.5 Q
(14.1 Example of multiple inheritance) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(def) 99.65 666.95 T
(ine class <fuel-truck> \050<ground-vehicle>\051) 115.85 666.95 T
(// How much aircraft fuel is left in the tank) 110.45 655.95 T
(slot aircraft-fuel-remaining) 110.45 644.95 T
(:: <integer>,) 283.25 644.95 T
(init-keyword: aircraft-fuel-remaining:,) 299.45 633.95 T
(init-value: 0;) 299.45 622.95 T
(inherited slot cruising-speed,) 110.45 611.95 T
(init-value: 25;) 299.45 611.95 T
(end;) 99.65 600.95 T
(def) 99.65 581.95 T
(ine class <standard-aircraft> \050<f) 115.85 581.95 T
(lying-vehicle>\051) 294.05 581.95 T
(slot altitude) 110.45 570.95 T
(:: <integer>, init-keyword: altitude:;) 283.25 570.95 T
(each-subclass slot needs-runway :: <boolean>, init-value: #t;) 110.45 559.95 T
(slot direction) 110.45 548.95 T
(:: <symbol>;) 283.25 548.95 T
(end;) 99.65 537.95 T
1 11 Q
-0.26 (At this point we ar) 99.65 517.62 P
-0.26 (e going to leave the fuel-tr) 189.49 517.62 P
-0.26 (uck simulation. W) 315.61 517.62 P
-0.26 (e do not model the) 403.06 517.62 P
-0.08 (fuel-supply pr) 99.65 503.62 P
-0.08 (oblem any further in this book. W) 169.34 503.62 P
-0.08 (e do want to explor) 332.3 503.62 P
-0.08 (e some oppor-) 426.14 503.62 P
-0.08 (tunities that our new class hierar) 99.65 489.62 P
-0.08 (chy pr) 258.21 489.62 P
-0.08 (esents for r) 289.04 489.62 P
-0.08 (estr) 342.39 489.62 P
-0.08 (ucturing the air) 360.17 489.62 P
-0.08 (craft classes.) 435.41 489.62 P
3 13 Q
(14.1.2  Aircraft classes and multiple inheritance) 99.65 458.29 T
1 11 Q
-0.2 (It is obvious that an airplane is a \337ying vehicle. But in our airport model, we have) 99.65 438.62 P
(to take account of an airplane\325s behavior on taxiways and r) 99.65 424.62 T
(unways and at gates.) 386.15 424.62 T
(In these situations the airplane is acting as a gr) 99.65 410.62 T
(ound vehicle. Per) 325.91 410.62 T
(haps it makes) 410.42 410.62 T
(sense to de\336ne our air) 99.65 396.62 T
(craft classes as subclasses of both) 206.66 396.62 T
4 9.5 Q
(<f) 370.12 396.62 T
(lying-vehicle>) 381.52 396.62 T
1 11 Q
( and) 461.32 396.62 T
4 9.5 Q
(<ground-vehicle>) 99.65 382.62 T
1 11 Q
(.) 190.85 382.62 T
(What do we gain by this? Consider cr) 126.65 368.62 T
(uising speed. When an airplane is in) 309.26 368.62 T
-0.41 (the air) 99.65 354.62 P
-0.41 (, we need to take the \337ying cr) 129.48 354.62 P
-0.41 (uising speed into account when estimating the) 269.69 354.62 P
(airplane\325s time of arrival at its destination. When the airplane is on the gr) 99.65 340.62 T
(ound,) 454.87 340.62 T
(we need to take the gr) 99.65 326.62 T
(ound cr) 207.09 326.62 T
(uising speed into account when estimating how) 244.74 326.62 T
-0.35 (much time the airplane will spend on a taxiway or r) 99.65 312.62 P
-0.35 (unway) 348.08 312.62 P
-0.35 (. It makes sense to have) 380.68 312.62 P
(some sense to have both \337ying and gr) 99.65 298.62 T
(ound cr) 283.28 298.62 T
(uising speeds \050though, of course,) 320.93 298.62 T
(gr) 99.65 284.62 T
(ound cr) 109.91 284.62 T
(uising speed is limited by safety r) 147.56 284.62 T
(ules\051. It also makes sense for \337ying) 310.83 284.62 T
(cr) 99.65 270.62 T
(uising speed to be a pr) 108.79 270.62 T
(operty of \337ying vehicles \321 mor) 218.49 270.62 T
(e speci\336cally) 372.34 270.62 T
(, air) 433.32 270.62 T
(craft \321) 451.67 270.62 T
(and for gr) 99.65 256.62 T
(ound cr) 148.05 256.62 T
(uising speed to be a pr) 185.7 256.62 T
(operty of gr) 295.4 256.62 T
(ound vehicles. After all, the) 352.77 256.62 T
(notion of cr) 99.65 242.62 T
(uising speed can be useful in estimating how long a fuel tr) 155.56 242.62 T
(uck will) 439.02 242.62 T
(take to arrive at a given gate.) 99.65 228.62 T
(W) 126.65 214.62 T
(e now r) 136.64 214.62 T
(estr) 173.13 214.62 T
(uctur) 190.91 214.62 T
(e our vehicle classes again, this time to make the air) 216.79 214.62 T
(craft) 467.22 214.62 T
(classes subclasses of both) 99.65 200.62 T
4 9.5 Q
(<f) 225.47 200.62 T
(lying-vehicle>) 236.87 200.62 T
1 11 Q
( and) 316.67 200.62 T
4 9.5 Q
(<ground-vehicle>) 340.79 200.62 T
1 11 Q
(. W) 431.99 200.62 T
(e need to) 447.48 200.62 T
(r) 99.65 186.62 T
(emove the) 103.79 186.62 T
4 9.5 Q
(cruising-speed) 157.02 186.62 T
1 11 Q
( slot fr) 236.82 186.62 T
(om the) 267.59 186.62 T
4 9.5 Q
(<vehicle>) 304.07 186.62 T
1 11 Q
( class and r) 355.37 186.62 T
(eplace it by two) 409.3 186.62 T
(slots,) 99.65 172.62 T
4 9.5 Q
(ground-cruising-speed) 127.27 172.62 T
1 11 Q
( for the) 246.97 172.62 T
4 9.5 Q
(<ground-vehicle>) 284.49 172.62 T
1 11 Q
( class and) 375.69 172.62 T
4 9.5 Q
(f) 425.48 172.62 T
(lying-) 431.18 172.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "228" 230
%%Page: "229" 231
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14 Multiple Inheritance) 414.16 702.62 T
2 11 Q
(229) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9.5 Q
0 X
(cruising-speed) 99.65 665.62 T
1 11 Q
( for the) 179.45 665.62 T
4 9.5 Q
(<f) 216.97 665.62 T
(lying-vehicle>) 228.37 665.62 T
1 11 Q
( class. W) 308.17 665.62 T
(e can also take this opportu-) 349.32 665.62 T
(nity to move the) 99.65 651.62 T
4 9.5 Q
(altitude) 182.01 651.62 T
1 11 Q
( slot fr) 227.6 651.62 T
(om the) 258.37 651.62 T
4 9.5 Q
(<standard-aircraft>) 294.85 651.62 T
1 11 Q
( class to the) 403.15 651.62 T
4 9.5 Q
(<f) 461.91 651.62 T
(ly-) 473.31 651.62 T
(ing-vehicle>) 99.65 637.62 T
1 11 Q
( class, since any \337ying vehicle is likely to need to keep track of its) 168.05 637.62 T
(altitude. Finally) 99.65 623.62 T
(, we intr) 175.36 623.62 T
(oduce multiple inheritance by r) 215.39 623.62 T
(ede\336ning the) 368.12 623.62 T
4 9.5 Q
(<standard-) 434.92 623.62 T
(aircraft>) 99.65 609.62 T
1 11 Q
( class to be a dir) 150.95 609.62 T
(ect subclass of both) 228.12 609.62 T
4 9.5 Q
(<f) 324.9 609.62 T
(lying-vehicle>) 336.3 609.62 T
1 11 Q
( and) 416.1 609.62 T
4 9.5 Q
(<ground-) 440.23 609.62 T
(vehicle>) 99.65 595.62 T
1 11 Q
(.) 145.25 595.62 T
4 9 Q
(def) 99.65 574.95 T
(ine class <vehicle> \050<physical-object>\051) 115.85 574.95 T
(// Every vehicle has some unique identif) 110.45 563.95 T
(ication code) 326.45 563.95 T
(slot vehicle-id) 110.45 552.95 T
(:: <string>, required-init-keyword: id:;) 294.05 552.95 T
(// How much fuel is left in the fuel tank) 110.45 541.95 T
(slot fuel-remaining) 110.45 530.95 T
(:: <integer>,) 294.05 530.95 T
(init-keyword: fuel-remaining:,) 310.25 519.95 T
(init-value: 0;) 310.25 508.95 T
(end;) 99.65 497.95 T
(def) 99.65 478.95 T
(ine class <ground-vehicle> \050<vehicle>\051) 115.85 478.95 T
(// The normal operating speed of this class of vehicle) 110.45 467.95 T
(each-subclass slot ground-cruising-speed :: <integer>;) 110.45 456.95 T
(end;) 99.65 445.95 T
(def) 99.65 426.95 T
(ine class <f) 115.85 426.95 T
(lying-vehicle> \050<vehicle>\051) 180.65 426.95 T
(// The normal operating speed of this class of vehicle) 110.45 415.95 T
(each-subclass slot f) 110.45 404.95 T
(lying-cruising-speed :: <integer>;) 218.45 404.95 T
(slot altitude) 110.45 393.95 T
(:: <integer>, init-keyword: altitude:;) 283.25 393.95 T
(end;) 99.65 382.95 T
(def) 99.65 363.95 T
(ine class <standard-aircraft> \050<f) 115.85 363.95 T
(lying-vehicle>, <ground-vehicle>\051) 294.05 363.95 T
(each-subclass slot needs-runway :: <boolean>, init-value: #t;) 110.45 352.95 T
(slot direction) 110.45 341.95 T
(:: <symbol>;) 283.25 341.95 T
(end;) 99.65 330.95 T
1 11 Q
(Now) 99.65 310.62 T
(, all air) 122.96 310.62 T
(craft classes have two slots for cr) 155.96 310.62 T
(uising speed:) 314.71 310.62 T
4 9.5 Q
(ground-cruising-) 381.71 310.62 T
(speed) 99.65 296.62 T
1 11 Q
(, inherited fr) 128.15 296.62 T
(om the) 188.6 296.62 T
4 9.5 Q
(<ground-vehicle>) 225.08 296.62 T
1 11 Q
( class, and) 316.28 296.62 T
4 9.5 Q
(f) 368.82 296.62 T
(lying-cruising-speed) 374.52 296.62 T
1 11 Q
(,) 488.52 296.62 T
(inherited fr) 99.65 282.62 T
(om the) 154.6 282.62 T
4 9.5 Q
(<f) 191.08 282.62 T
(lying-vehicle>) 202.48 282.62 T
1 11 Q
( class. W) 282.28 282.62 T
(e have to modify our) 323.43 282.62 T
4 9.5 Q
(<B707>) 427.83 282.62 T
1 11 Q
( class) 462.03 282.62 T
(to pr) 99.65 268.62 T
(ovide default initial values for these slots.) 122.75 268.62 T
4 9 Q
(def) 99.65 247.95 T
(ine class <B707> \050<standard-commercial-aircraft>\051) 115.85 247.95 T
(inherited slot f) 110.45 236.95 T
(lying-cruising-speed, init-value: 368;) 196.85 236.95 T
(inherited slot ground-cruising-speed, init-value: 45;) 110.45 225.95 T
(end;) 99.65 214.95 T
1 11 Q
(Finally) 99.65 194.62 T
(, to complete the example, we would change our) 132.16 194.62 T
4 9.5 Q
(<fuel-truck>) 370.78 194.62 T
1 11 Q
( class de\336-) 439.18 194.62 T
(nition to pr) 99.65 180.62 T
(ovide a default initial value for) 154.3 180.62 T
4 9.5 Q
(ground-cruising-speed) 307.4 180.62 T
1 11 Q
( instead of) 427.11 180.62 T
4 9.5 Q
(cruising-speed) 99.65 166.62 T
1 11 Q
(.) 179.45 166.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "229" 231
%%Page: "230" 232
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(230) 63.65 702.62 T
0 9.5 Q
(14.2 Multiple Inheritance and slots) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 15 Q
0 X
(14.2  Multiple Inheritance and slots) 99.65 662.95 T
1 11 Q
-0.34 (For the most part, using multiple inheritance does not pr) 99.65 642.62 P
-0.34 (esent special pr) 372.17 642.62 P
-0.34 (oblems in) 446.28 642.62 P
(using slots. Recall that a class inherits all the slots of its super) 99.65 628.62 T
(classes. A subclass) 396.22 628.62 T
-0.03 (can also add slots of its own, but it cannot r) 99.65 614.62 P
-0.03 (emove or r) 309.53 614.62 P
-0.03 (eplace any slots de\336ned by) 361.94 614.62 P
(its super) 99.65 600.62 T
(classes. A slot can appear only once in a class and all its super) 141.17 600.62 T
(classes.) 440.76 600.62 T
(Thus, a class\325s slots ar) 99.65 586.62 T
(e the union of its slots and those of all its super) 205.74 586.62 T
(classes, and) 433.3 586.62 T
(duplicate slot de\336nitions ar) 99.65 572.62 T
(e not permitted. This is tr) 232.71 572.62 T
(ue whether a class has one) 355.5 572.62 T
(dir) 99.65 558.62 T
(ect super) 113.72 558.62 T
(class or mor) 157.53 558.62 T
(e than one.) 216.16 558.62 T
(Ther) 126.65 544.62 T
(e ar) 149.21 544.62 T
(e some ways, though, in which subclasses and super) 166.88 544.62 T
(classes can) 421.73 544.62 T
(have distinct ef) 99.65 530.62 T
(fects on the same slot. One way is by pr) 173.51 530.62 T
(oviding default values for) 365.28 530.62 T
-0.44 (the slot. Even though duplicate slots ar) 99.65 516.62 P
-0.44 (e not permitted, a class can pr) 286.11 516.62 P
-0.44 (ovide its own) 428.26 516.62 P
(default value for a slot that it inherits fr) 99.65 502.62 T
(om a super) 290.75 502.62 T
(class. The subclass can do this) 344.79 502.62 T
(by supplying an) 99.65 488.62 T
4 9.5 Q
(inherited slot) 181.55 488.62 T
1 11 Q
( option in its class de\336nition that includes an) 261.35 488.62 T
4 9.5 Q
(init-value:) 99.65 474.62 T
1 11 Q
( or) 162.35 474.62 T
4 9.5 Q
(init-function:) 178.2 474.62 T
1 11 Q
( speci\336cation.) 258 474.62 T
(Suppose that mor) 126.65 460.62 T
(e than one class de\336nes a default value for the same slot.) 212.66 460.62 T
(Which default takes pr) 99.65 446.62 T
(ecedence? When each class has only one dir) 210.25 446.62 T
(ect super) 422.43 446.62 T
(class,) 466.24 446.62 T
-0.26 (the answer is easy: the default value pr) 99.65 432.62 P
-0.26 (ovided by the) 287.23 432.62 P
2 F
-0.26 (most speci\336c) 356.27 432.62 P
1 F
-0.26 ( class takes pr) 420.45 432.62 P
-0.26 (e-) 486.72 432.62 P
(cedence. A default value for a subclass overrides a default value for a super) 99.65 418.62 T
(class.) 466.37 418.62 T
(But what if a class has mor) 126.65 404.62 T
(e than one dir) 256.46 404.62 T
(ect super) 323.61 404.62 T
(class, and each super) 367.43 404.62 T
(class) 469.34 404.62 T
(pr) 99.65 390.62 T
(ovides a dif) 110.41 390.62 T
(fer) 166.87 390.62 T
(ent default value for the same slot? Imagine, for example, that) 179.95 390.62 T
-0.48 (our) 99.65 376.62 P
4 9.5 Q
-1 (<ground-vehicle>) 118.9 376.62 P
1 11 Q
-0.48 ( and) 210.1 376.62 P
4 9.5 Q
-1 (<f) 233.26 376.62 P
-1 (lying-vehicle>) 244.66 376.62 P
1 11 Q
-0.48 ( classes each had a dif) 324.46 376.62 P
-0.48 (fer) 428.2 376.62 P
-0.48 (ent default) 441.28 376.62 P
(value for the) 99.65 362.62 T
4 9.5 Q
(fuel-remaining) 163.99 362.62 T
1 11 Q
( slot, which they inherit fr) 243.79 362.62 T
(om the common super-) 369.4 362.62 T
(class) 99.65 348.62 T
4 9.5 Q
(<vehicle>) 125.31 348.62 T
1 11 Q
(:) 176.61 348.62 T
4 9 Q
(def) 99.65 327.95 T
(ine class <ground-vehicle> \050<vehicle>\051) 115.85 327.95 T
(inherited-slot fuel-remaining, init-value: 30;) 110.45 316.95 T
(...) 110.45 305.95 T
(end;) 99.65 294.95 T
(def) 99.65 275.95 T
(ine class <f) 115.85 275.95 T
(lying-vehicle> \050<vehicle>\051) 180.65 275.95 T
(inherited-slot fuel-remaining, init-value: 3000;) 110.45 264.95 T
(...) 110.45 253.95 T
(end;) 99.65 242.95 T
1 11 Q
-0.26 (Now) 99.65 222.62 P
-0.26 (, neither of these classes is mor) 122.96 222.62 P
-0.26 (e speci\336c than the other) 270.57 222.62 P
-0.26 (. So when we cr) 383.92 222.62 P
-0.26 (eate an) 459.14 222.62 P
(instance of) 99.65 208.62 T
4 9.5 Q
(<standard-aircraft>) 154.73 208.62 T
1 11 Q
(, which has both) 263.02 208.62 T
4 9.5 Q
(<ground-vehicle>) 345.48 208.62 T
1 11 Q
( and) 436.68 208.62 T
4 9.5 Q
(<f) 460.8 208.62 T
(ly-) 472.2 208.62 T
-0.26 (ing-vehicle>) 99.65 194.62 P
1 11 Q
-0.13 ( as dir) 168.05 194.62 P
-0.13 (ect super) 197.53 194.62 P
-0.13 (classes, what is the default initial value for the) 241.21 194.62 P
4 9.5 Q
-0.26 (fuel-) 467.15 194.62 P
(remaining) 99.65 180.62 T
1 11 Q
( slot:) 150.95 180.62 T
4 9.5 Q
(30) 176.65 180.62 T
1 11 Q
( or) 188.05 180.62 T
4 9.5 Q
(3000) 203.91 180.62 T
1 11 Q
(?) 226.71 180.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "230" 232
%%Page: "231" 233
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14 Multiple Inheritance) 414.16 702.62 T
2 11 Q
(231) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
-0.16 (T) 126.65 665.62 P
-0.16 (o answer this question, Dylan needs an additional way of or) 132.38 665.62 P
-0.16 (dering classes,) 422.81 665.62 P
(called a) 99.65 651.62 T
2 F
(class precedence list) 139.42 651.62 T
1 F
(. The next section describes how Dylan constr) 240.82 651.62 T
(ucts) 462.39 651.62 T
(the class pr) 99.65 637.62 T
(ecedence list. The short answer to our question about default initial) 154.08 637.62 T
-0.1 (slot values is that Dylan uses the default value pr) 99.65 623.62 P
-0.1 (ovided by the class that appears) 337.7 623.62 P
(earlier in the class pr) 99.65 609.62 T
(ecedence list.) 200.31 609.62 T
(W) 126.65 595.62 T
(e shall see that the class pr) 136.64 595.62 T
(ecedence list is also important for method dis-) 264.58 595.62 T
(patch in the pr) 99.65 581.62 T
(esence of multiple inheritance. Suppose, for example, that we had) 170.5 581.62 T
(two getter or two setter methods for the) 99.65 567.62 T
4 9.5 Q
(fuel-remaining) 296.05 567.62 T
1 11 Q
( slot, one specialized on) 375.85 567.62 T
(the) 99.65 553.62 T
4 9.5 Q
(<f) 117.65 553.62 T
(lying-vehicle>) 129.05 553.62 T
1 11 Q
( class and the other specialized on the) 208.85 553.62 T
4 9.5 Q
(<ground-vehicle>) 394.94 553.62 T
1 11 Q
(class. Which method would be selected to get or set the slot value? W) 99.65 539.62 T
(e r) 435.43 539.62 T
(eturn to) 447.6 539.62 T
(the issue of method dispatch after we see how Dylan constr) 99.65 525.62 T
(ucts the class pr) 388.89 525.62 T
(ece-) 465.84 525.62 T
(dence list.) 99.65 511.62 T
3 15 Q
(14.3  The class precedence list) 99.65 471.95 T
1 11 Q
(When each class has only one dir) 99.65 451.62 T
(ect super) 260.23 451.62 T
(class, the r) 304.04 451.62 T
(elations among super) 354.61 451.62 T
(classes) 459 451.62 T
(and subclasses form a) 99.65 437.62 T
2 F
(tree) 208.72 437.62 T
1 F
(, or) 227.67 437.62 T
2 F
(hierarchy) 246.27 437.62 T
1 F
(. For every subclass in the tr) 292.71 437.62 T
(ee, ther) 428.53 437.62 T
(e is a) 463.97 437.62 T
-0.15 (well-de\336ned or) 99.65 423.62 P
-0.15 (dering in terms of) 173.95 423.62 P
2 F
-0.15 (speci\336city) 263.25 423.62 P
1 F
-0.15 ( for that class and all its super) 313.95 423.62 P
-0.15 (classes.) 457.45 423.62 P
(A subclass is always mor) 99.65 409.62 T
(e speci\336c than any of its super) 221.38 409.62 T
(classes. When each class) 367.67 409.62 T
(has only one super) 99.65 395.62 T
(class, we can unambiguously or) 191.19 395.62 T
(der any given class and all its) 346.14 395.62 T
(super) 99.65 381.62 T
(classes fr) 126.97 381.62 T
(om) 170.38 381.62 T
2 F
(most speci\336c) 188.85 381.62 T
1 F
( to) 253.3 381.62 T
2 F
(least speci\336c) 268.39 381.62 T
1 F
(. Figur) 331.61 381.62 T
(e 14.1 illustrates part of) 363.32 381.62 T
-0.12 (such an or) 99.65 367.62 P
-0.12 (dering for our original, single-inheritance de\336nitions of) 149.54 367.62 P
4 9.5 Q
-0.25 (<vehicle>) 420.47 367.62 P
1 11 Q
-0.12 ( and) 471.77 367.62 P
(its subclasses.) 99.65 353.62 T
(W) 126.65 339.62 T
(ith multiple inheritance, the r) 137.04 339.62 T
(elations among super) 279.26 339.62 T
(classes and subclasses) 383.65 339.62 T
(can form a) 99.65 325.62 T
2 F
(graph) 153.91 325.62 T
1 F
(, or) 183.25 325.62 T
2 F
(heterarchy) 201.85 325.62 T
1 F
(. It is not always possible to or) 253.79 325.62 T
(der a class and all) 400.54 325.62 T
-0.24 (its super) 99.65 311.62 P
-0.24 (classes in terms of speci\336city) 140.93 311.62 P
-0.24 (. It is still tr) 278.51 311.62 P
-0.24 (ue that a subclass is mor) 332.15 311.62 P
-0.24 (e speci\336c) 449.19 311.62 P
-0 (than any of its super) 99.65 297.62 P
-0 (classes. But we cannot always or) 198.98 297.62 P
-0 (der its super) 356.78 297.62 P
-0 (classes in terms) 417.38 297.62 P
(of speci\336city) 99.65 283.62 T
(.) 159.92 283.62 T
(Figur) 126.65 269.62 T
(e 14.2 illustrates our curr) 152.86 269.62 T
(ent de\336nitions of) 273.22 269.62 T
4 9.5 Q
(<vehicle>) 358.51 269.62 T
1 11 Q
( and its sub-) 409.81 269.62 T
(classes.) 99.65 255.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "231" 233
%%Page: "232" 234
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(232) 63.65 702.62 T
0 9.5 Q
(14.3 The class precedence list) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
99.65 428.96 513.65 436.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 132.65 440.62 T
(e 14.2  Heterar) 158.86 440.62 T
(chy of vehicle classes using multiple inheritance) 228.9 440.62 T
(Consider) 99.65 408.63 T
4 9.5 Q
(<B707>) 146.8 408.63 T
1 11 Q
( and its super) 181.01 408.63 T
(classes. W) 246.65 408.63 T
(e can or) 294.99 408.63 T
(der) 332.7 408.63 T
4 9.5 Q
(<b707>) 351.78 408.63 T
1 11 Q
(,) 385.98 408.63 T
4 9.5 Q
(<standard-commer-) 391.48 408.63 T
(cial-aircraft>) 99.65 394.63 T
1 11 Q
(, and) 179.45 394.63 T
4 9.5 Q
(<standard-aircraft>) 206.32 394.63 T
1 11 Q
( fr) 314.62 394.63 T
(om mor) 325.18 394.63 T
(e speci\336c to less speci\336c.) 363.52 394.63 T
(But we cannot say that either) 99.65 380.63 T
4 9.5 Q
(<ground-vehicle>) 243.74 380.63 T
1 11 Q
( or) 334.94 380.63 T
4 9.5 Q
(<f) 350.79 380.63 T
(lying-vehicle>) 362.19 380.63 T
1 11 Q
( is mor) 441.99 380.63 T
(e) 475.22 380.63 T
(speci\336c than the other) 99.65 366.63 T
(, because neither class is a subclass of the other) 206.01 366.63 T
(. W) 432.57 366.63 T
(e could) 448.06 366.63 T
(or) 99.65 352.63 T
(der) 109.8 352.63 T
4 9.5 Q
(<b707>) 128.89 352.63 T
1 11 Q
( and its super) 163.09 352.63 T
(classes in two ways, fr) 228.73 352.63 T
(om mor) 336.96 352.63 T
(e speci\336c to less speci\336c:) 375.3 352.63 T
4 9 Q
(<B707>, <standard-commercial-aircraft>, <standard-aircraft>,) 99.65 331.96 T
(<f) 110.45 320.96 T
(lying-vehicle>, <ground-vehicle>, <vehicle>, <physical-object>, <object>) 121.25 320.96 T
(<B707>, <standard-commercial-aircraft>, <standard-aircraft>,) 99.65 301.96 T
(<ground-vehicle>, <f) 110.45 290.96 T
(lying-vehicle>, <vehicle>, <physical-object>, <object>) 218.45 290.96 T
1 11 Q
(Dylan needs a way to determine which of these or) 99.65 270.63 T
(derings to use. It does this by) 343.19 270.63 T
(constr) 99.65 256.63 T
(ucting a) 129.45 256.63 T
2 F
(class precedence list) 171.27 256.63 T
1 F
( for) 272.67 256.63 T
4 9.5 Q
(<B707>) 292.18 256.63 T
1 11 Q
( and its super) 326.38 256.63 T
(classes. T) 392.03 256.63 T
(o under-) 436.11 256.63 T
-0.05 (stand how this works, r) 99.65 242.63 P
-0.05 (ecall that the) 213.96 242.63 P
4 9.5 Q
-0.1 (def) 278.45 242.63 P
-0.1 (ine class) 295.55 242.63 P
1 11 Q
-0.05 ( form for a class includes a list) 346.75 242.63 P
(of super) 99.65 228.63 T
(classes. Recall that we de\336ned) 139.39 228.63 T
4 9.5 Q
(<standard-aircraft>) 288.69 228.63 T
1 11 Q
( as follows:) 396.99 228.63 T
4 9 Q
(def) 99.65 207.96 T
(ine class <standard-aircraft> \050<f) 115.85 207.96 T
(lying-vehicle>, <ground-vehicle>\051) 294.05 207.96 T
(...) 110.45 196.96 T
(end;) 99.65 185.96 T
99.65 159.95 513.65 672.95 C
110.4 456.95 502.9 661.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<vehicle>) 281 647.47 T
(<B707>) 349.8 475.39 T
(<standard-commercial-aircraft>) 281.4 510.73 T
(<standard-aircraft>) 312.75 546.06 T
381.47 569.46 371.39 562.96 376.49 573.81 378.98 571.64 4 Y
V
402.9 598.95 378.99 571.63 2 L
0.5 H
2 Z
N
370.21 532.91 366.9 521.37 363.59 532.91 366.9 532.91 4 Y
V
366.9 539.37 366.9 532.91 2 L
N
370.21 497.58 366.9 486.04 363.59 497.58 366.9 497.58 4 Y
V
366.9 504.04 366.9 497.58 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<ground-vehicle>) 161.67 610.39 T
(<f) 357.3 610.55 T
(lying-vehicle>) 368.7 610.55 T
(<fuel-truck>) 141 546.06 T
250.94 628.15 239.15 625.95 247.98 634.07 249.46 631.11 4 Y
V
275.15 643.95 249.46 631.11 2 L
N
365.31 634.07 374.14 625.95 362.35 628.15 363.83 631.11 4 Y
V
338.15 643.95 363.83 631.11 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
176.71 574.49 173.4 562.95 170.09 574.49 173.4 574.49 4 Y
V
173.4 598.95 173.4 574.49 2 L
N
299.56 571.07 308.39 562.95 296.6 565.15 298.08 568.11 4 Y
V
236.4 598.95 298.08 568.11 2 L
N
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "232" 234
%%Page: "233" 235
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14 Multiple Inheritance) 414.16 702.62 T
2 11 Q
(233) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(Her) 99.65 665.62 T
(e we have listed the super) 118.22 665.62 T
(classes as) 244.29 665.62 T
4 9.5 Q
(<f) 292.8 665.62 T
(lying-vehicle>) 304.2 665.62 T
1 11 Q
( and) 384 665.62 T
4 9.5 Q
(<ground-vehi-) 408.12 665.62 T
(cle>) 99.65 651.62 T
1 11 Q
(, in that or) 122.45 651.62 T
(der) 172.28 651.62 T
(.) 187.8 651.62 T
(In cr) 126.65 637.62 T
(eating the class pr) 148.54 637.62 T
(ecedence list, Dylan uses the or) 235.79 637.62 T
(dering of the list of) 387.28 637.62 T
(super) 99.65 623.62 T
(classes in the) 126.97 623.62 T
4 9.5 Q
(def) 192.93 623.62 T
(ine class) 210.03 623.62 T
1 11 Q
( form for each class. Dylan r) 261.33 623.62 T
(elies on the follow-) 397.17 623.62 T
(ing r) 99.65 609.62 T
(ule:) 122.37 609.62 T
(\245) 108.65 589.62 T
(In a) 126.65 589.62 T
4 9.5 Q
(def) 147.76 589.62 T
(ine class) 164.86 589.62 T
1 11 Q
( form, the class being de\336ned and the list of its super-) 216.16 589.62 T
(classes ar) 126.65 575.62 T
(e or) 171.89 575.62 T
(der) 190.06 575.62 T
(ed. The class being de\336ned takes pr) 206.2 575.62 T
(ecedence over all its) 378.77 575.62 T
(super) 126.65 561.62 T
(classes, and each super) 153.97 561.62 T
(class in the list takes pr) 265.82 561.62 T
(ecedence over all super-) 377.89 561.62 T
(classes that appear later in the list.) 126.65 547.62 T
-0 (This r) 99.65 527.62 P
-0 (ule tells us that, because we listed) 127.66 527.62 P
4 9.5 Q
-0.01 (<f) 294.42 527.62 P
-0.01 (lying-vehicle>) 305.82 527.62 P
1 11 Q
-0 ( befor) 385.62 527.62 P
-0 (e) 413.53 527.62 P
4 9.5 Q
-0.01 (<ground-vehi-) 421.55 527.62 P
-0.03 (cle>) 99.65 513.62 P
1 11 Q
-0.02 ( in the list of super) 122.45 513.62 P
-0.02 (classes of) 212.62 513.62 P
4 9.5 Q
-0.03 (<standard-aircraft>) 260.6 513.62 P
1 11 Q
-0.02 (,) 368.9 513.62 P
4 9.5 Q
-0.03 (<f) 374.39 513.62 P
-0.03 (lying-vehicle>) 385.79 513.62 P
1 11 Q
-0.02 ( must) 465.58 513.62 P
(have higher pr) 99.65 499.62 T
(ecedence than) 171.03 499.62 T
4 9.5 Q
(<ground-vehicle>) 242.38 499.62 T
1 11 Q
(. Dylan uses the following class) 333.58 499.62 T
(pr) 99.65 485.62 T
(ecedence list for) 110.41 485.62 T
4 9.5 Q
(<B707>) 191.29 485.62 T
1 11 Q
(, fr) 225.49 485.62 T
(om highest to lowest pr) 238.8 485.62 T
(ecedence:) 353.41 485.62 T
4 9 Q
(<B707>, <standard-commercial-aircraft>, <standard-aircraft>,) 99.65 464.95 T
(<f) 110.45 453.95 T
(lying-vehicle>, <ground-vehicle>, <vehicle>, <physical-object>, <object>) 121.25 453.95 T
1 11 Q
(If we had listed) 99.65 433.62 T
4 9.5 Q
(<ground-vehicle>) 177.73 433.62 T
1 11 Q
( befor) 268.93 433.62 T
(e) 296.84 433.62 T
4 9.5 Q
(<f) 304.86 433.62 T
(lying-vehicle>) 316.26 433.62 T
1 11 Q
( in the list of super-) 396.06 433.62 T
(classes of) 99.65 419.62 T
4 9.5 Q
(<standard-aircraft>) 147.66 419.62 T
1 11 Q
(,) 255.96 419.62 T
4 9.5 Q
(<ground-vehicle>) 261.46 419.62 T
1 11 Q
( would have taken pr) 352.66 419.62 T
(ece-) 456.42 419.62 T
(dence over) 99.65 405.62 T
4 9.5 Q
(<f) 155.53 405.62 T
(lying-vehicle>) 166.93 405.62 T
1 11 Q
( in the class pr) 246.73 405.62 T
(ecedence list for) 316.26 405.62 T
4 9.5 Q
(<B707>) 397.14 405.62 T
1 11 Q
(.) 431.34 405.62 T
(Now) 126.65 391.62 T
(, in constr) 149.96 391.62 T
(ucting the class pr) 197.61 391.62 T
(ecedence list for a class, Dylan actually fol-) 285.61 391.62 T
(lows several steps:) 99.65 377.62 T
2 F
(1.) 108.65 357.62 T
1 F
(Identify the class and each of its dir) 126.65 357.62 T
(ect and indir) 298.6 357.62 T
(ect super) 360.13 357.62 T
(classes. In our) 403.95 357.62 T
(example, the class is) 126.65 343.62 T
4 9.5 Q
(<B707>) 227.67 343.62 T
1 11 Q
(, and the super) 261.87 343.62 T
(classes ar) 334.08 343.62 T
(e) 379.32 343.62 T
4 9.5 Q
(<standard-commer-) 387.34 343.62 T
(cial-aircraft>) 126.65 329.62 T
1 11 Q
(,) 206.45 329.62 T
4 9.5 Q
(<standard-aircraft>) 211.95 329.62 T
1 11 Q
(,) 320.25 329.62 T
4 9.5 Q
(<f) 325.75 329.62 T
(lying-vehicle>) 337.15 329.62 T
1 11 Q
(,) 416.95 329.62 T
4 9.5 Q
(<ground-) 422.45 329.62 T
(vehicle>) 126.65 315.62 T
1 11 Q
(,) 172.25 315.62 T
4 9.5 Q
(<vehicle>) 177.75 315.62 T
1 11 Q
(,) 229.05 315.62 T
4 9.5 Q
(<physical-object>) 234.55 315.62 T
1 11 Q
(, and) 331.45 315.62 T
4 9.5 Q
(<object>) 358.32 315.62 T
1 11 Q
(.) 403.92 315.62 T
2 F
(2.) 108.65 295.62 T
1 F
(Constr) 126.65 295.62 T
(uct a separate,) 159.36 295.62 T
2 F
(locally ordered) 231.71 295.62 T
1 F
( pr) 307.18 295.62 T
(ecedence list for each of these) 320.69 295.62 T
(classes and) 126.65 281.62 T
2 F
(its own) 183.62 281.62 T
1 F
( dir) 220.58 281.62 T
(ect super) 237.4 281.62 T
(classes, based on the or) 281.21 281.62 T
(der in which the) 393.86 281.62 T
(super) 126.65 267.62 T
(classes appear in the) 153.97 267.62 T
4 9.5 Q
(def) 256.51 267.62 T
(ine class) 273.61 267.62 T
1 11 Q
( form for each class:) 324.91 267.62 T
4 9 Q
(<B707>, <standard-commercial-aircraft>) 126.65 246.95 T
(<standard-commercial-aircraft>, <standard-aircraft>) 126.65 227.95 T
(<standard-aircraft>, <f) 126.65 208.95 T
(lying-vehicle>, <ground-vehicle>) 250.85 208.95 T
(<f) 126.65 189.95 T
(lying-vehicle>, <vehicle>) 137.45 189.95 T
(<ground-vehicle>, <vehicle>) 126.65 170.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "233" 235
%%Page: "234" 236
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(234) 63.65 702.62 T
0 9.5 Q
(14.3 The class precedence list) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(<vehicle>, <physical-object>) 126.65 666.95 T
(<physical-object>, <object>) 126.65 647.95 T
(<object>) 126.65 628.95 T
2 11 Q
(3.) 108.65 608.62 T
1 F
(Constr) 126.65 608.62 T
(uct the overall class pr) 159.36 608.62 T
(ecedence list fr) 268.13 608.62 T
(om these locally or) 340.06 608.62 T
(der) 431.48 608.62 T
(ed lists.) 447.62 608.62 T
(The r) 126.65 594.62 T
(esulting class pr) 151.96 594.62 T
(ecedence list must be consistent with the locally) 230.2 594.62 T
(or) 126.65 580.62 T
(der) 136.8 580.62 T
(ed lists for all super) 152.94 580.62 T
(classes. That is, no class can pr) 248.48 580.62 T
(ecede another class) 396.29 580.62 T
(in) 126.65 566.62 T
2 F
(any) 139 566.62 T
1 F
( pr) 157.34 566.62 T
(ecedence list if it is pr) 170.85 566.62 T
(eceded by the same class in) 275.49 566.62 T
2 F
(any other) 411.24 566.62 T
1 F
( pr) 458.61 566.62 T
(ece-) 472.11 566.62 T
(dence list.) 126.65 552.62 T
(One implication of these r) 99.65 532.62 T
(ules is that if a class inherits a super) 225.59 532.62 T
(class via two dif) 399.46 532.62 T
(fer-) 477.7 532.62 T
(ent paths, the super) 99.65 518.62 T
(class in common must have lower pr) 195.25 518.62 T
(ecedence than any of its) 373.72 518.62 T
(subclasses. For example, the) 99.65 504.62 T
4 9.5 Q
(<object>) 239.34 504.62 T
1 11 Q
( class is a super) 284.94 504.62 T
(class of every class \050except) 359.54 504.62 T
(itself\051. This class must have lower pr) 99.65 490.62 T
(ecedence than any of its subclasses, so it) 276.8 490.62 T
(appears last in every class pr) 99.65 476.62 T
(ecedence list. The class pr) 239.34 476.62 T
(ecedence list is consistent) 363.79 476.62 T
(with the r) 99.65 462.62 T
(ule that a subclass is mor) 147.02 462.62 T
(e speci\336c than any of its super) 268.48 462.62 T
(classes.) 414.77 462.62 T
(Sometimes mor) 126.65 448.62 T
(e than one class pr) 202.46 448.62 T
(ecedence list is consistent with the pr) 291.97 448.62 T
(oce-) 471.99 448.62 T
(dur) 99.65 434.62 T
(e we\325ve outlined so far) 117.15 434.62 T
(. Suppose, for example, that we had de\336ned two addi-) 226.79 434.62 T
(tional classes,) 99.65 420.62 T
4 9.5 Q
(<wheeled-vehicle>) 168.64 420.62 T
1 11 Q
( and) 265.54 420.62 T
4 9.5 Q
(<winged-vehicle>) 289.66 420.62 T
1 11 Q
(, with the class) 380.86 420.62 T
(heterar) 99.65 406.62 T
(chy illustrated in Figur) 134.17 406.62 T
(e 14.3.) 245.54 406.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "234" 236
%%Page: "235" 237
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14 Multiple Inheritance) 414.16 702.62 T
2 11 Q
(235) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
99.65 403.96 513.65 411.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 107.84 415.62 T
(e 14.3  Expanded heterar) 134.05 415.62 T
(chy of vehicle classes using multiple inheritance) 253.71 415.62 T
-0.2 (Let\325s assume that the) 99.65 383.63 P
4 9.5 Q
-0.41 (def) 203.93 383.63 P
-0.41 (ine class) 221.03 383.63 P
1 11 Q
-0.2 ( form for) 271.92 383.63 P
4 9.5 Q
-0.41 (<standard-aircraft>) 317.33 383.63 P
1 11 Q
-0.2 ( lists) 425.62 383.63 P
4 9.5 Q
-0.41 (<winged-) 450.05 383.63 P
(vehicle>) 99.65 369.63 T
1 11 Q
( befor) 145.25 369.63 T
(e) 173.17 369.63 T
4 9.5 Q
(<wheeled-vehicle>) 181.18 369.63 T
1 11 Q
( in its list of dir) 278.08 369.63 T
(ect super) 351.28 369.63 T
(classes. Now) 395.09 369.63 T
(, thr) 456.75 369.63 T
(ee) 476.38 369.63 T
(class pr) 99.65 355.63 T
(ecedence lists for) 136.07 355.63 T
4 9.5 Q
(<B707>) 221.62 355.63 T
1 11 Q
( ar) 255.82 355.63 T
(e consistent with the pr) 268.21 355.63 T
(ocedur) 381.52 355.63 T
(es we have dis-) 415.18 355.63 T
(cussed so far:) 99.65 341.63 T
4 9 Q
(<B707>, <standard-commercial-aircraft>, <standard-aircraft>,) 99.65 320.96 T
(<winged-vehicle>, <f) 110.45 309.96 T
(lying-vehicle>, <wheeled-vehicle>, <ground-vehicle>,) 218.45 309.96 T
(<vehicle>, <physical-object>, <object>) 110.45 298.96 T
(<B707>, <standard-commercial-aircraft>, <standard-aircraft>,) 99.65 279.96 T
(<winged-vehicle>, <wheeled-vehicle>, <f) 110.45 268.96 T
(lying-vehicle>, <ground-vehicle>,) 321.05 268.96 T
(<vehicle>, <physical-object>, <object>) 110.45 257.96 T
(<B707>, <standard-commercial-aircraft>, <standard-aircraft>,) 99.65 238.96 T
(<winged-vehicle>, <wheeled-vehicle>, <ground-vehicle>, <f) 110.45 227.96 T
(lying-vehicle>,) 418.25 227.96 T
(<vehicle>, <physical-object>, <object>) 110.45 216.96 T
1 11 Q
-0.15 (In this case, Dylan uses an algorithm that tends to keep nonoverlapping chains of) 99.65 196.63 P
(dir) 99.65 182.63 T
(ect super) 113.72 182.63 T
(classes together in the class pr) 157.53 182.63 T
(ecedence list. Wher) 303.24 182.63 T
(e possible, the) 396.92 182.63 T
(super) 99.65 168.63 T
(classes of the \336rst dir) 126.97 168.63 T
(ect super) 229.06 168.63 T
(class take pr) 272.88 168.63 T
(ecedence over the second dir) 332.52 168.63 T
(ect) 472.59 168.63 T
99.65 159.95 513.65 672.95 C
147.34 429.95 465.96 670.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<vehicle>) 287.31 656.47 T
(<B707>) 356.11 440.88 T
(<standard-commercial-aircraft>) 287.71 476.22 T
(<standard-aircraft>) 319.06 511.55 T
387.79 533.46 377.7 526.96 382.81 537.82 385.3 535.64 4 Y
V
409.21 562.95 385.31 535.63 2 L
0.5 H
2 Z
N
376.52 498.4 373.21 486.86 369.9 498.4 373.21 498.4 4 Y
V
373.21 504.86 373.21 498.4 2 L
N
376.52 463.07 373.21 451.53 369.9 463.07 373.21 463.07 4 Y
V
373.21 469.53 373.21 463.07 2 L
N
(<fuel-truck>) 156.31 511.55 T
257.26 637.15 245.46 634.95 254.3 643.07 255.78 640.11 4 Y
V
281.46 652.95 255.78 640.11 2 L
N
371.62 643.07 380.46 634.95 368.66 637.15 370.14 640.11 4 Y
V
344.46 652.95 370.14 640.11 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
192.02 538.49 188.71 526.95 185.4 538.49 188.71 538.49 4 Y
V
188.71 562.95 188.71 538.49 2 L
N
305.87 535.07 314.71 526.95 302.91 529.15 304.39 532.11 4 Y
V
242.71 562.95 304.39 532.11 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<f) 362.69 619.55 T
(lying-vehicle>) 374.09 619.55 T
(<winged-vehicle>) 362.69 574.39 T
411.59 601.49 408.29 589.95 404.98 601.49 408.29 601.49 4 Y
V
408.29 607.95 408.29 601.49 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<ground-vehicle>) 174.88 619.55 T
(<wheeled-vehicle>) 172.04 574.39 T
223.79 601.49 220.49 589.95 217.18 601.49 220.49 601.49 4 Y
V
220.49 607.95 220.49 601.49 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "235" 237
%%Page: "236" 238
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(236) 63.65 702.62 T
0 9.5 Q
(14.3 The class precedence list) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(super) 99.65 665.62 T
(class and its super) 126.97 665.62 T
(classes. In this example, Dylan uses the \336rst of the thr) 215.53 665.62 T
(ee) 475.11 665.62 T
(possible or) 99.65 651.62 T
(derings:) 152.25 651.62 T
4 9 Q
(<B707>, <standard-commercial-aircraft>, <standard-aircraft>,) 99.65 630.95 T
(<winged-vehicle>, <f) 110.45 619.95 T
(lying-vehicle>, <wheeled-vehicle>, <ground-vehicle>,) 218.45 619.95 T
(<vehicle>, <physical-object>, <object>) 110.45 608.95 T
1 11 Q
-0.35 (Note that it is not always possible to compute a class pr) 99.65 588.62 P
-0.35 (ecedence list. Consider the) 365.04 588.62 P
(thr) 99.65 574.62 T
(ee classes de\336ned as follows:) 113.78 574.62 T
4 9 Q
(def) 99.65 553.95 T
(ine class <a> \050<object>\051) 115.85 553.95 T
(...) 110.45 542.95 T
(end;) 99.65 531.95 T
(def) 99.65 512.95 T
(ine class <b> \050<a>\051) 115.85 512.95 T
(...) 110.45 501.95 T
(end;) 99.65 490.95 T
(def) 99.65 471.95 T
(ine class <c> \050<a>, <b>\051) 115.85 471.95 T
(...) 110.45 460.95 T
(end;) 99.65 449.95 T
1 11 Q
(No class pr) 99.65 429.62 T
(ecedence list is possible in this example, because the or) 153.97 429.62 T
(dering of) 420.06 429.62 T
(classes) 99.65 415.62 T
4 9.5 Q
(<a>) 135.24 415.62 T
1 11 Q
( and) 152.34 415.62 T
4 9.5 Q
(<b>) 176.47 415.62 T
1 11 Q
( con\337icts in the local pr) 193.57 415.62 T
(ecedence lists for classes) 306.04 415.62 T
4 9.5 Q
(<b>) 427.18 415.62 T
1 11 Q
( and) 444.29 415.62 T
4 9.5 Q
(<c>) 468.41 415.62 T
1 11 Q
(.) 485.51 415.62 T
(Dylan signals an err) 99.65 401.62 T
(or when it tries to compute a class pr) 197.04 401.62 T
(ecedence list and \336nds) 375.96 401.62 T
(that it cannot.) 99.65 387.62 T
(T) 126.65 373.62 T
(o examine the class pr) 132.38 373.62 T
(ecedence list for a class, use the) 239.34 373.62 T
4 9.5 Q
(all-superclasses) 394.21 373.62 T
1 11 Q
(function, which r) 99.65 359.62 T
(eturns the super) 182.88 359.62 T
(classes in the same or) 261.86 359.62 T
(der as they appear in the) 365.87 359.62 T
(class pr) 99.65 345.62 T
(ecedence list:) 136.07 345.62 T
5 9 Q
(?) 126.65 324.95 T
4 F
(all-superclasses \050<B707>\051) 137.45 324.95 T
5 F
(#[<standard-commercial-aircraft>, <standard-aircraft>,) 126.65 313.95 T
(<winged-vehicle>, <f) 137.45 302.95 T
(lying-vehicle>, <wheeled-vehicle>,) 245.45 302.95 T
(<ground-vehicle>, <vehicle>, <physical-object>, <object>]) 137.45 291.95 T
1 11 Q
(The details of the algorithm Dylan uses to constr) 99.65 271.62 T
(uct class pr) 335.55 271.62 T
(ecedence lists ar) 389.83 271.62 T
(e) 468.26 271.62 T
-0.07 (complicated and ar) 99.65 257.62 P
-0.07 (e beyond the scope of this book. For most uncomplicated uses) 192.85 257.62 P
-0.02 (of simple inheritance, the most important points to r) 99.65 243.62 P
-0.02 (emember about the class pr) 353.4 243.62 P
-0.02 (e-) 486.72 243.62 P
(cedence list ar) 99.65 229.62 T
(e that: the list of dir) 168.15 229.62 T
(ect super) 262.64 229.62 T
(classes in a) 306.45 229.62 T
4 9.5 Q
(def) 362.65 229.62 T
(ine class) 379.75 229.62 T
1 11 Q
( form is) 431.05 229.62 T
-0.31 (or) 99.65 215.62 P
-0.31 (der) 109.8 215.62 P
-0.31 (ed, and each super) 125.94 215.62 P
-0.31 (class in the list takes pr) 216 215.62 P
-0.31 (ecedence over all super) 326.51 215.62 P
-0.31 (classes that) 438.85 215.62 P
(appear later in the list.) 99.65 201.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "236" 238
%%Page: "237" 239
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14 Multiple Inheritance) 414.16 702.62 T
2 11 Q
(237) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
3 15 Q
0 X
(14.4  Multiple inheritance and method dispatch) 99.65 662.95 T
1 11 Q
-0.15 (Now that we\325ve seen how Dylan constr) 99.65 642.62 P
-0.15 (ucts the class pr) 290.36 642.62 P
-0.15 (ecedence list, we r) 366.85 642.62 P
-0.15 (eturn to) 454.62 642.62 P
-0.06 (the issue of how multiple inheritance af) 99.65 628.62 P
-0.06 (fects method dispatch. Recall that when a) 291.54 628.62 P
(generic function is called, Dylan chooses the) 99.65 614.62 T
2 F
(most speci\336c applicable method) 317.44 614.62 T
1 F
( to) 478.42 614.62 T
(call. For simplicity) 99.65 600.62 T
(, let\325s consider a generic function that has one specialized) 188.31 600.62 T
(parameter) 99.65 586.62 T
(. As we have seen, Dylan chooses which method to dispatch by com-) 148.97 586.62 T
(paring the type of the r) 99.65 572.62 T
(equir) 211.49 572.62 T
(ed) 236.9 572.62 T
2 F
(argument) 251.63 572.62 T
1 F
( to the generic function with the type of) 299.91 572.62 T
(the corr) 99.65 558.62 T
(esponding specialized) 137.04 558.62 T
2 F
(parameter) 247.95 558.62 T
1 F
( for each method:) 298.67 558.62 T
2 F
(1.) 108.65 538.62 T
1 F
(Find all the applicable methods. A method is applicable if the type of the) 126.65 538.62 T
(r) 126.65 524.62 T
(equir) 130.79 524.62 T
(ed ar) 156.21 524.62 T
(gument is a subtype of the type of the specialized parameter) 180.59 524.62 T
(.) 472.92 524.62 T
2 F
(2.) 108.65 504.62 T
1 F
-0.46 (Sort the applicable methods in or) 126.65 504.62 P
-0.46 (der of speci\336city) 285.27 504.62 P
-0.46 (. A method is mor) 363.71 504.62 P
-0.46 (e speci\336c) 449.62 504.62 P
(than another if the type of its specialized parameter is a pr) 126.65 490.62 T
(oper subtype of) 409.4 490.62 T
(the type of the other method\325s specialized parameter) 126.65 476.62 T
(.) 382.04 476.62 T
2 F
(3.) 108.65 456.62 T
1 F
(Call the most speci\336c method.) 126.65 456.62 T
-0.36 (In the pr) 99.65 436.62 P
-0.36 (esence of multiple inheritance, it is possible to have two or mor) 140.56 436.62 P
-0.36 (e methods) 443.23 436.62 P
-0.04 (that ar) 99.65 422.62 P
-0.04 (e applicable but that cannot be sorted by speci\336city because neither param-) 131.07 422.62 P
-0.25 (eter type is a subtype of the other) 99.65 408.62 P
-0.25 (. T) 259.27 408.62 P
-0.25 (o see how this situation can arise, we r) 270.26 408.62 P
-0.25 (eturn to) 454.81 408.62 P
-0.26 (our airport example. Recall that we now have two slots r) 99.65 394.62 P
-0.26 (epr) 372 394.62 P
-0.26 (esenting vehicle cr) 388.02 394.62 P
-0.26 (uis-) 477.49 394.62 P
(ing speed:) 99.65 380.62 T
4 9.5 Q
(ground-cruising-speed) 152.15 380.62 T
1 11 Q
( for) 271.85 380.62 T
4 9.5 Q
(<ground-vehicle>) 291.36 380.62 T
1 11 Q
( and) 382.57 380.62 T
4 9.5 Q
(f) 406.69 380.62 T
(lying-cruis-) 412.39 380.62 T
(ing-speed) 99.65 366.62 T
1 11 Q
( for) 150.95 366.62 T
4 9.5 Q
(<f) 170.46 366.62 T
(lying-vehicle>) 181.86 366.62 T
1 11 Q
(. Let\325s de\336ne a generic function,) 261.66 366.62 T
4 9.5 Q
(say-cruising-) 419.04 366.62 T
(speed) 99.65 352.62 T
1 11 Q
(, to r) 128.15 352.62 T
(eport the applicable cr) 150.14 352.62 T
(uising speed for each class:) 258.66 352.62 T
4 9 Q
(def) 99.65 331.95 T
(ine generic say-cruising-speed \050vehicle :: <vehicle>\051;) 115.85 331.95 T
(// Method 1) 99.65 312.95 T
(def) 99.65 301.95 T
(ine method say-cruising-speed \050vehicle :: <f) 115.85 301.95 T
(lying-vehicle>\051) 353.45 301.95 T
(format\050*window*, \322Flying cruising speed: %d\134n\323,) 110.45 290.95 T
(vehicle.f) 148.25 279.95 T
(lying-cruising-speed\051;) 196.85 279.95 T
(end;) 99.65 268.95 T
(// Method 2) 99.65 249.95 T
(def) 99.65 238.95 T
(ine method say-cruising-speed \050vehicle :: <ground-vehicle>\051) 115.85 238.95 T
(format\050*window*, \322Ground cruising speed: %d\134n\323,) 110.45 227.95 T
(vehicle.ground-cruising-speed\051;) 148.25 216.95 T
(end;) 99.65 205.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "237" 239
%%Page: "238" 240
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(238) 63.65 702.62 T
0 9.5 Q
(14.4 Multiple inheritance and method dispatch) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(// Method 3) 99.65 666.95 T
(def) 99.65 655.95 T
(ine method say-cruising-speed \050vehicle :: <vehicle>\051) 115.85 655.95 T
(format\050*window*, \322No cruising speed def) 110.45 644.95 T
(ined for type <vehicle>\134n\323\051;) 321.05 644.95 T
(end;) 99.65 633.95 T
1 11 Q
(Now) 99.65 613.62 T
(, suppose we call) 122.96 613.62 T
4 9.5 Q
(say-cruising-speed) 208.39 613.62 T
1 11 Q
( on an instance of) 310.99 613.62 T
4 9.5 Q
(<B707>) 398.63 613.62 T
1 11 Q
( . Which) 432.83 613.62 T
(method does Dylan call? All thr) 99.65 599.62 T
(ee methods ar) 254.25 599.62 T
(e applicable. Both method 1 and) 322.3 599.62 T
-0.33 (method 2 ar) 99.65 585.62 P
-0.33 (e mor) 157.34 585.62 P
-0.33 (e speci\336c than method 3. But Dylan cannot or) 184.89 585.62 P
-0.33 (der methods 1 and) 403.14 585.62 P
(2 by speci\336city) 99.65 571.62 T
(.) 170.7 571.62 T
(In this case Dylan consults the class pr) 126.65 557.62 T
(ecedence list for the class of the ar) 312.88 557.62 T
(gu-) 477.5 557.62 T
(ment. For our example the class of the ar) 99.65 543.62 T
(gument is) 296.8 543.62 T
4 9.5 Q
(<B707>) 347.89 543.62 T
1 11 Q
(. The) 382.08 543.62 T
4 9.5 Q
(<f) 408.75 543.62 T
(lying-vehi-) 420.15 543.62 T
(cle>) 99.65 529.62 T
1 11 Q
( class takes pr) 122.45 529.62 T
(ecedence over the) 189.5 529.62 T
4 9.5 Q
(<ground-vehicle>) 278.81 529.62 T
1 11 Q
( class, because) 370.01 529.62 T
4 9.5 Q
(<f) 442.23 529.62 T
(lying-) 453.63 529.62 T
(vehicle>) 99.65 515.62 T
1 11 Q
( pr) 145.25 515.62 T
(ecedes) 158.76 515.62 T
4 9.5 Q
(<ground-vehicle>) 193.58 515.62 T
1 11 Q
( in the list of dir) 284.78 515.62 T
(ect super) 361.78 515.62 T
(classes for) 405.6 515.62 T
4 9.5 Q
(<stan-) 457.95 515.62 T
(dard-aircraft>) 99.65 501.62 T
1 11 Q
(. Dylan calls method 1, which pr) 179.45 501.62 T
(oduces the following output:) 336.65 501.62 T
5 9 Q
(Flying cruising speed: 368) 126.65 480.95 T
1 11 Q
-0.28 (Note that if we had happened to list) 99.65 460.62 P
4 9.5 Q
-0.59 (<ground-vehicle>) 275.41 460.62 P
1 11 Q
-0.28 ( befor) 366.61 460.62 P
-0.28 (e) 394.25 460.62 P
4 9.5 Q
-0.59 (<f) 401.98 460.62 P
-0.59 (lying-vehicle>) 413.38 460.62 P
1 11 Q
(in the list of dir) 99.65 446.62 T
(ect super) 173.9 446.62 T
(classes for) 217.71 446.62 T
4 9.5 Q
(<standard-aircraft>) 270.07 446.62 T
1 11 Q
(, Dylan would have) 378.37 446.62 T
(called method 2, and we would have seen the following output:) 99.65 432.62 T
5 9 Q
(Ground cruising speed: 45) 126.65 411.95 T
1 11 Q
(In de\336ning classes of air) 99.65 391.62 T
(craft, we didn\325t intend for) 216.89 391.62 T
4 9.5 Q
(<f) 345.09 391.62 T
(lying-vehicle>) 356.49 391.62 T
1 11 Q
( characteris-) 436.29 391.62 T
(tics to override) 99.65 377.62 T
4 9.5 Q
(<ground-vehicle>) 175.2 377.62 T
1 11 Q
( characteristics. But for method dispatch to) 266.4 377.62 T
(work in the pr) 99.65 363.62 T
(esence of multiple inheritance, Dylan must or) 169.16 363.62 T
(der subclasses and) 390.19 363.62 T
(super) 99.65 349.62 T
(classes whenever it can.) 126.97 349.62 T
(How can we change our example to make) 126.65 335.62 T
4 9.5 Q
(<f) 333.2 335.62 T
(lying-vehicle>) 344.6 335.62 T
1 11 Q
( behavior add) 424.39 335.62 T
(to, rather than override,) 99.65 321.62 T
4 9.5 Q
(<ground-vehicle>) 218.45 321.62 T
1 11 Q
( behavior? By using) 309.65 321.62 T
4 9.5 Q
(next-method) 408.41 321.62 T
1 11 Q
( in) 471.11 321.62 T
-0.43 (our) 99.65 307.62 P
4 9.5 Q
-0.88 (say-cruising-speed) 118.96 307.62 P
1 11 Q
-0.43 ( methods for) 221.56 307.62 P
4 9.5 Q
-0.88 (<f) 284.9 307.62 P
-0.88 (lying-vehicle>) 296.3 307.62 P
1 11 Q
-0.43 ( and) 376.1 307.62 P
4 9.5 Q
-0.88 (<ground-vehicle>) 399.37 307.62 P
1 11 Q
-0.43 (,) 490.57 307.62 P
-0.08 (we can r) 99.65 293.62 P
-0.08 (eport all applicable kinds of cr) 140.37 293.62 P
-0.08 (uising speed for any combination of either) 287.43 293.62 P
(or both of those classes) 99.65 279.62 T
4 9.5 Q
(.) 211.52 279.62 T
1 11 Q
( T) 217.22 279.62 T
(o make this work, we also change the) 225.7 279.62 T
4 9.5 Q
(say-cruising-) 410.19 279.62 T
(speed) 99.65 265.62 T
1 11 Q
( method for) 128.15 265.62 T
4 9.5 Q
(<vehicle>) 188.11 265.62 T
1 11 Q
(, which will always be called last, to have no ef) 239.41 265.62 T
(fect:) 466.6 265.62 T
4 9 Q
(// Method 1) 99.65 244.95 T
(def) 99.65 233.95 T
(ine method say-cruising-speed \050vehicle :: <f) 115.85 233.95 T
(lying-vehicle>\051) 353.45 233.95 T
(format\050*window*, \322Flying cruising speed: %d\134n\323,) 110.45 222.95 T
(vehicle.f) 148.25 211.95 T
(lying-cruising-speed\051;) 196.85 211.95 T
(next-method\050\051;) 110.45 200.95 T
(end;) 99.65 189.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "238" 240
%%Page: "239" 241
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14 Multiple Inheritance) 414.16 702.62 T
2 11 Q
(239) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 9 Q
0 X
(// Method 2) 99.65 666.95 T
(def) 99.65 655.95 T
(ine method say-cruising-speed \050vehicle :: <ground-vehicle>\051) 115.85 655.95 T
(format\050*window*, \322Ground cruising speed: %d\134n\323,) 110.45 644.95 T
(vehicle.ground-cruising-speed\051;) 148.25 633.95 T
(next-method\050\051;) 110.45 622.95 T
(end;) 99.65 611.95 T
(// Method 3) 99.65 592.95 T
(def) 99.65 581.95 T
(ine method say-cruising-speed \050vehicle :: <vehicle>\051) 115.85 581.95 T
(values\050\051;) 110.45 570.95 T
(end;) 99.65 559.95 T
1 11 Q
(Recall that when Dylan decides which method to call, the r) 99.65 539.62 T
(esult is a) 385.63 539.62 T
2 F
(list) 430.59 539.62 T
1 F
( of meth-) 446.47 539.62 T
(ods, sorted by speci\336city) 99.65 525.62 T
(. When) 218.68 525.62 T
4 9.5 Q
(say-cruising-speed) 256 525.62 T
1 11 Q
( is called on an instance of) 358.6 525.62 T
4 9.5 Q
(<B707>) 99.65 511.62 T
1 11 Q
(, the list of methods is sorted in the following or) 133.85 511.62 T
(der: method 1, method 2,) 366.48 511.62 T
(method 3. Dylan calls method 1. Then, as a r) 99.65 497.62 T
(esult of the call to) 314.85 497.62 T
4 9.5 Q
(next-method) 403.26 497.62 T
1 11 Q
( in) 465.96 497.62 T
(method 1, Dylan calls method 2. Finally) 99.65 483.62 T
(, as a r) 291.74 483.62 T
(esult of the call to next-method in) 322.55 483.62 T
(method 1, Dylan calls method 3. The output we see is as follows:) 99.65 469.62 T
5 9 Q
(Flying cruising speed: 368) 126.65 448.95 T
(Ground cruising speed: 45) 126.65 437.95 T
1 11 Q
(Note that if we called) 99.65 417.62 T
4 9.5 Q
(say-cruising-speed) 206.56 417.62 T
1 11 Q
( on an instance of) 309.16 417.62 T
4 9.5 Q
(<fuel-truck>) 396.79 417.62 T
1 11 Q
(, we) 465.19 417.62 T
(would see the following output:) 99.65 403.62 T
5 9 Q
(Ground cruising speed: 25) 126.65 382.95 T
1 11 Q
(In summary) 99.65 362.62 T
(, the ef) 157.97 362.62 T
(fect of multiple inheritance on method dispatch is to r) 190.21 362.62 T
(e\336ne the) 451.19 362.62 T
(r) 99.65 348.62 T
(ule for sorting methods accor) 103.9 348.62 T
(ding to speci\336city:) 246.12 348.62 T
(\245) 108.65 328.62 T
(A method is mor) 126.65 328.62 T
(e speci\336c than another if the type of its specialized param-) 208.88 328.62 T
(eter is a pr) 126.65 314.62 T
(oper subtype of the type of the other method\325s specialized) 177.49 314.62 T
(parameter) 126.65 300.62 T
(. If one type is not a pr) 175.97 300.62 T
(oper subtype of the other) 284.72 300.62 T
(, a method is) 406.63 300.62 T
(mor) 126.65 286.62 T
(e speci\336c if the class of its specialized parameter pr) 146.51 286.62 T
(ecedes the class of) 393.77 286.62 T
(the other method\325s specialized parameter in the class pr) 126.65 272.62 T
(ecedence list of the) 397.62 272.62 T
(ar) 126.65 258.62 T
(gument to the generic function. Otherwise, the methods ar) 136.29 258.62 T
(e) 420.45 258.62 T
2 F
(unordered) 428.47 258.62 T
1 F
(for that parameter) 126.65 244.62 T
(.) 214.56 244.62 T
(If the generic function has mor) 126.65 224.62 T
(e than one r) 275.72 224.62 T
(equir) 332.95 224.62 T
(ed ar) 358.36 224.62 T
(gument, Dylan uses) 382.75 224.62 T
-0.18 (this augmented r) 99.65 210.62 P
-0.18 (ule for determining speci\336city in the usual way for sorting appli-) 182.11 210.62 P
(cable methods with mor) 99.65 196.62 T
(e than one ar) 217.43 196.62 T
(gument. In essence, Dylan or) 280.16 196.62 T
(ders the appli-) 420.79 196.62 T
(cable methods separately for each r) 99.65 182.62 T
(equir) 270.97 182.62 T
(ed ar) 296.38 182.62 T
(gument, and then constr) 320.77 182.62 T
(ucts an) 439.57 182.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "239" 241
%%Page: "240" 242
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(240) 63.65 702.62 T
0 9.5 Q
(14.5 When should you use multiple inheritance?) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 11 Q
0 X
(overall or) 99.65 665.62 T
(dering by comparing the separate sorted lists. In the overall method) 146.29 665.62 T
(or) 99.65 651.62 T
(dering, a method is mor) 109.8 651.62 T
(e speci\336c than another if it satis\336es two constraints:) 226.53 651.62 T
2 F
(1.) 108.65 631.62 T
1 F
(The method is) 126.65 631.62 T
2 F
(no less speci\336c) 198.87 631.62 T
1 F
( than the other method for) 273.4 631.62 T
2 F
(all) 404.36 631.62 T
1 F
( r) 417.19 631.62 T
(equir) 424.09 631.62 T
(ed) 449.5 631.62 T
-0.12 (parameters. \050The two methods might have the same types for some parame-) 126.65 617.62 P
(ters.\051) 126.65 603.62 T
2 F
(2.) 108.65 583.62 T
1 F
(The method is) 126.65 583.62 T
2 F
(more speci\336c) 198.87 583.62 T
1 F
( than the other method for) 264.55 583.62 T
2 F
(some) 395.52 583.62 T
1 F
( r) 421.8 583.62 T
(equir) 428.7 583.62 T
(ed) 454.11 583.62 T
(parameter) 126.65 569.62 T
(.) 175.97 569.62 T
3 15 Q
(14.5  When should you use multiple inheritance?) 99.65 529.95 T
1 11 Q
(Ther) 99.65 509.62 T
(e is a gr) 122.21 509.62 T
(eat deal of debate about the value of using multiple inheritance in) 159.36 509.62 T
(object-oriented pr) 99.65 495.62 T
(ograms. Some people think that multiple inheritance in appr) 186.02 495.62 T
(o-) 479.97 495.62 T
-0.13 (priate applications can impr) 99.65 481.62 P
-0.13 (ove modularity and make it easier to r) 235.83 481.62 P
-0.13 (euse code. Oth-) 420.65 481.62 P
(ers think that the complications and pitfalls of multiple inheritance make) 99.65 467.62 T
(pr) 99.65 453.62 T
(ogram maintenance dif) 110.41 453.62 T
(\336cult and outweigh the possible advantages.) 223.1 453.62 T
(Multiple inheritance is likely to be most useful when you can separate the) 126.65 439.62 T
(characteristics of objects into) 99.65 425.62 T
2 F
(orthogonal) 241.49 425.62 T
1 F
( sets, in which the characteristics of one) 296.5 425.62 T
(set do not depend on the characteristics of other sets. If you can de\336ne a class to) 99.65 411.62 T
(r) 99.65 397.62 T
(epr) 103.79 397.62 T
(esent each set of characteristics, you can use multiple inheritance to build) 119.82 397.62 T
-0.2 (complex classes with dif) 99.65 383.62 P
-0.2 (fer) 217.27 383.62 P
-0.2 (ent combinations of characteristics. W) 230.35 383.62 P
-0.2 (e gave a glimpse) 412.79 383.62 P
(of how this might work by starting to segr) 99.65 369.62 T
(egate characteristics of \337ying and) 304.8 369.62 T
(gr) 99.65 355.62 T
(ound vehicles and then noting that some vehicles, like airplanes, can combine) 109.91 355.62 T
(both sets of characteristics.) 99.65 341.62 T
-0.44 (Another appr) 126.65 327.62 P
-0.44 (oach that can be useful for some applications is to cr) 192.39 327.62 P
-0.44 (eate one or) 441.07 327.62 P
-0.34 (mor) 99.65 313.62 P
-0.34 (e) 119.51 313.62 P
2 F
-0.34 (base) 127.2 313.62 P
1 F
-0.34 ( super) 149.8 313.62 P
-0.34 (classes, which de\336ne common characteristics of subclasses, and a) 179.54 313.62 P
-0.24 (number of) 99.65 299.62 P
2 F
-0.24 (mixin) 152.77 299.62 P
1 F
-0.24 ( classes, each of which adds a set of orthogonal characteristics. A) 182.1 299.62 P
(mixin class is like an addition, such as chocolate chips or nuts, that might be) 99.65 285.62 T
(mixed into an ice cr) 99.65 271.62 T
(eam base. Another way to think about this appr) 194.71 271.62 T
(oach is to) 426.64 271.62 T
-0.38 (imagine the base class as a noun and the mixin classes as adjectives that modify or) 99.65 257.62 P
-0.11 (specialize the noun. Y) 99.65 243.62 P
-0.11 (ou can then constr) 204.63 243.62 P
-0.11 (uct concr) 293.42 243.62 P
-0.11 (ete subclasses by using multiple) 337.49 243.62 P
(inheritance. For each concr) 99.65 229.62 T
(ete subclass, one or mor) 229.95 229.62 T
(e mixin classes typically pr) 346.02 229.62 T
(e-) 476.5 229.62 T
(cede a single base class in the list of super) 99.65 215.62 T
(classes.) 301.83 215.62 T
(Whether useful or not, multiple inheritance does complicate method dis-) 126.65 201.62 T
(patch and impose additional r) 99.65 187.62 T
(equir) 245.9 187.62 T
(ements on an application. It is essential to be) 271.31 187.62 T
(awar) 99.65 173.62 T
(e of dependencies on subclass-super) 123.97 173.62 T
(class or) 300.28 173.62 T
(dering, particularly in method) 336.09 173.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "240" 242
%%Page: "241" 243
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14 Multiple Inheritance) 414.16 702.62 T
2 11 Q
(241) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
1 F
0 X
(selection and slot initialization. In general, classes intended to be multiple super-) 99.65 665.62 T
-0.06 (classes should depend on each other as little as possible. Pr) 99.65 651.62 P
-0.06 (otocols involving mul-) 385.74 651.62 P
(tiple inheritance may need mor) 99.65 637.62 T
(e documentation than those involving single) 251.83 637.62 T
(inheritance.) 99.65 623.62 T
(W) 126.65 609.62 T
(e neither advocate nor discourage the use of multiple inheritance. Dylan) 136.64 609.62 T
(pr) 99.65 595.62 T
(ovides the mechanism; you can decide whether multiple inheritance is appr) 110.41 595.62 T
(o-) 478.4 595.62 T
(priate for your application.) 99.65 581.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "241" 243
%%Page: "242" 244
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(242) 63.65 702.62 T
0 9.5 Q
(14.5 When should you use multiple inheritance?) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "242" 244
%%Page: "243" 245
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(243) 289.4 135.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Appendix A) 99.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(A) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Sour) 101.2 591.4 T
(ce Code of the Airport) 162.73 591.4 T
(Example) 99.65 561.4 T
99.65 159.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(tbd) 126.65 449.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "243" 245
%%Page: "244" 246
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(244) 63.65 702.62 T
0 9.5 Q
(Appendix A) 89.65 702.62 T
(Source Code of the Airport Example) 145.86 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "244" 246
%%Page: "245" 247
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(245) 289.4 135.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Appendix B) 99.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(B) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(The) 100.87 591.4 T
4 F
(format) 158.59 591.4 T
1 F
( Function) 266.59 591.4 T
99.65 159.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
-0.17 (The) 99.65 449.62 P
4 9.5 Q
-0.35 (format) 120.64 449.62 P
4 11 Q
-0.41 (function) 157.42 449.62 P
1 F
-0.17 ( is not part of the cor) 210.22 449.62 P
-0.17 (e Dylan language, but is available in a) 309.57 449.62 P
(library) 99.65 435.62 T
(. The syntax of) 131.22 435.62 T
4 9.5 Q
(format) 204.99 435.62 T
1 11 Q
( is:) 239.2 435.62 T
4 9 Q
(format \050) 99.65 414.95 T
0 11 Q
(destination) 142.85 414.95 T
4 9 Q
(,) 192.35 414.95 T
0 11 Q
(format-string) 203.15 414.95 T
4 9 Q
(,) 263.03 414.95 T
0 11 Q
(other-ar) 273.83 414.95 T
(guments) 309.07 414.95 T
4 9 Q
(*\051) 347.58 414.95 T
4 9.5 Q
(format) 99.65 394.62 T
1 11 Q
( sends formatted output to a destination.) 133.85 394.62 T
4 9.5 Q
(format) 334.64 394.62 T
1 11 Q
( r) 368.84 394.62 T
(eturns no values.) 375.74 394.62 T
-0.08 (The) 126.65 380.62 P
0 F
-0.08 (destination) 147.74 380.62 P
1 F
-0.08 ( is wher) 197.24 380.62 P
-0.08 (e to send the formatted output. The destination) 235.44 380.62 P
4 9.5 Q
-0.16 (*win-) 467.15 380.62 P
(dow*) 99.65 366.62 T
1 11 Q
( is a variable that r) 122.45 366.62 T
(epr) 212.1 366.62 T
(esents the window wher) 228.12 366.62 T
(e the output should appear) 347.16 366.62 T
(.) 478.39 366.62 T
(The) 126.65 352.62 T
0 F
(format-string) 147.81 352.62 T
1 F
( is a string. Strings in Dylan ar) 207.7 352.62 T
(e delimited with the double-) 354.45 352.62 T
-0.28 (quote character \050for example,) 99.65 338.62 P
4 9.5 Q
-0.58 ("hello, world") 243.56 338.62 P
1 11 Q
-0.28 (\051. Or) 322.77 338.62 P
-0.28 (dinary text in the format string) 344.45 338.62 P
-0.06 (is sent to the destination verbatim. When a per) 99.65 324.62 P
-0.06 (cent sign \050) 325.61 324.62 P
4 9.5 Q
-0.12 (%) 375.18 324.62 P
1 11 Q
-0.06 (\051 is found in the format) 380.88 324.62 P
-0.14 (string, some value is inserted at that point in the output. The way the value is r) 99.65 310.62 P
-0.14 (ep-) 480.11 310.62 P
(r) 99.65 296.62 T
(esented in the output depends on the character following the per) 103.79 296.62 T
(cent sign. For) 418.68 296.62 T
-0.39 (each per) 99.65 282.62 P
-0.39 (cent sign, ther) 140.09 282.62 P
-0.39 (e should be a corr) 207.49 282.62 P
-0.39 (esponding) 292.07 282.62 P
0 F
-0.39 (other-ar) 345.82 282.62 P
-0.39 (gument) 381.05 282.62 P
1 F
-0.39 (. The formatting) 415.28 282.62 P
(characters ar) 99.65 268.62 T
(e:) 161.42 268.62 T
4 9.5 Q
(%d) 126.65 242.62 T
1 11 Q
(Sends an integer ar) 207.65 242.62 T
(gument to the destination r) 300.47 242.62 T
(epr) 432.72 242.62 T
(esented) 448.75 242.62 T
(as a decimal number) 207.65 228.62 T
(.) 307.68 228.62 T
4 9.5 Q
(%s) 126.65 202.62 T
1 11 Q
-0.06 (Sends the contents of its string ar) 207.65 202.62 P
-0.06 (gument to the destination) 367.77 202.62 P
(unquoted.) 207.65 188.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "245" 247
%%Page: "246" 248
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(246) 63.65 702.62 T
0 9.5 Q
(Appendix B) 89.65 702.62 T
(The format Function) 144.8 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 F
0 X
(%=) 126.65 665.62 T
1 11 Q
(Sends an implementation-speci\336c r) 207.65 665.62 T
(epr) 378.27 665.62 T
(esentation of the) 394.3 665.62 T
(object to the destination. The) 207.65 651.62 T
4 9.5 Q
(%=) 350.35 651.62 T
1 11 Q
( designator can be used for) 361.75 651.62 T
(any class of object. In this example, the ar) 207.65 637.62 T
(gument) 408.26 637.62 T
4 9.5 Q
-0.2 (object.distance) 207.65 623.62 P
1 11 Q
-0.09 ( is r) 293.15 623.62 P
-0.09 (epr) 310.47 623.62 P
-0.09 (esented using some standar) 326.5 623.62 P
-0.09 (d \337oat-) 460.83 623.62 P
(ing-point r) 207.65 609.62 T
(epr) 259.73 609.62 T
(esentation. The ar) 275.76 609.62 T
(gument) 361.96 609.62 T
4 9.5 Q
(object) 402.42 609.62 T
1 11 Q
(.) 436.62 609.62 T
4 9.5 Q
(from-) 439.38 609.62 T
-0.75 (object) 207.65 595.62 P
1 11 Q
-0.36 ( would be r) 241.85 595.62 P
-0.36 (epr) 296.24 595.62 P
-0.36 (esented in a way de\336ned by that class) 312.27 595.62 P
(dir) 207.65 581.62 T
(ectly) 221.72 581.62 T
(, or thr) 243.55 581.62 T
(ough inheritance.) 276.29 581.62 T
(The backslash character may be used to easily insert unusual characters in a) 99.65 553.62 T
(string. For example, you can use) 99.65 539.62 T
4 9.5 Q
(\134n) 259.77 539.62 T
1 11 Q
( to print a carriage r) 271.17 539.62 T
(eturn.) 367.47 539.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "246" 248
%%Page: "247" 249
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(247) 289.4 135.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Appendix C) 99.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(C) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Internet Resour) 101.07 591.4 T
(ces on Dylan) 306.66 591.4 T
99.65 159.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(This section describes wher) 99.65 449.62 T
(e to obtain additional information about the Dylan) 233.01 449.62 T
(language on Internet. Ther) 99.65 435.62 T
(e ar) 228.92 435.62 T
(e W) 246.59 435.62 T
(orld-W) 264.59 435.62 T
(ide W) 298.92 435.62 T
(eb pages at:) 326.85 435.62 T
4 9 Q
(http://www.cambridge.apple.com) 126.65 417.95 T
(http://www.harlequin.com/full/dylan.html) 126.65 399.95 T
(http://www.legend.gwydion.cs.cmu.edu:8001/gwydion/index.html) 126.65 381.95 T
1 11 Q
(The main Dylan ftp site contains the Fr) 99.65 362.62 T
(equently Asked Questions \050F) 288.61 362.62 T
(AQ\051, the r) 428.86 362.62 T
(ef-) 477.38 362.62 T
(er) 99.65 348.62 T
(ence manual, experimental implementations, and mor) 109.06 348.62 T
(e. It is:) 371.94 348.62 T
4 9 Q
(ftp://ftp.cambridge.apple.com/pub/dylan) 126.65 330.95 T
1 11 Q
(The Internet mailing list about Dylan is:) 99.65 311.62 T
4 9 Q
(info-dylan@cambridge.apple.com) 126.65 293.95 T
1 11 Q
(T) 99.65 274.62 T
(o subsribe to) 105.38 274.62 T
4 9.5 Q
(info-dylan) 170.17 274.62 T
1 11 Q
(, send a message to:) 227.17 274.62 T
4 9 Q
(info-dylan-request@cambridge.apple.com) 126.65 256.95 T
1 11 Q
(The same mailing list is accessible via the newsgr) 99.65 237.62 T
(oup:) 338.62 237.62 T
4 9 Q
(comp.lang.dylan) 126.65 219.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "247" 249
%%Page: "248" 250
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(248) 63.65 702.62 T
0 9.5 Q
(Appendix C) 89.65 702.62 T
(Internet Resources on Dylan) 145.34 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "248" 250
%%Page: "249" 251
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(249) 297.65 135.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
97.98 590.45 493.98 644.45 R
7 X
V
97.98 616.9 493.98 644.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
97.98 616.9 493.98 644.45 R
7 X
0 0 0 1 0 0 0 K
V
97.98 637.6 259.98 637.6 2 L
3 H
2 Z
0 X
N
97.98 628.6 259.98 628.6 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Glossary) 97.98 596.9 T
99.65 159.95 513.65 456.95 R
7 X
V
2 11 Q
0 X
(class) 99.65 449.62 T
1 F
-0.01 (A de\336nition of a type of other objects, which ar) 126.65 431.62 P
-0.01 (e called its instances. A class) 354.9 431.62 P
(de\336nes the slots of its instances. Dylan pr) 126.65 417.62 T
(ovides built-in classes, and users) 327.19 417.62 T
(can de\336ne new classes. When you de\336ne a class, you specify its name, its) 126.65 403.62 T
(super) 126.65 389.62 T
(classes, and its slots.) 153.97 389.62 T
2 F
(constant) 99.65 363.62 T
1 F
(An object that has a name and a value; the value cannot be modi\336ed., Y) 126.65 345.62 T
(ou) 472.54 345.62 T
(must initialize the value of a constant, and you cannot change its value) 126.65 331.62 T
(thr) 126.65 317.62 T
(oughout the execution of a Dylan pr) 140.78 317.62 T
(ogram.) 316.51 317.62 T
2 F
(development environment) 99.65 291.62 T
1 F
(A collection of tools for Dylan pr) 126.65 273.62 T
(ogrammers that can include an editor cus-) 285.98 273.62 T
(tom-tailor) 126.65 259.62 T
(ed for Dylan code, a br) 175.26 259.62 T
(owser) 286.1 259.62 T
(, a compiler) 314.75 259.62 T
(, a debugger) 370.91 259.62 T
(, and a lis-) 430.4 259.62 T
(tener that enables you to type in expr) 126.65 245.62 T
(essions and to see their values.) 307.47 245.62 T
4 9.5 Q
(#f) 99.65 222.62 T
1 11 Q
(The false value.) 126.65 205.12 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "249" 251
%%Page: "250" 252
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(250) 63.65 702.62 T
0 9.5 Q
(Glossary) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
2 11 Q
0 X
(generic function) 99.65 665.62 T
1 F
(tbd) 126.65 647.62 T
2 F
(getter) 99.65 621.62 T
1 F
-0.22 (A method that r) 126.65 603.62 P
-0.22 (etrieves the curr) 203.71 603.62 P
-0.22 (ent value of a slot in an object. Each slot in a) 281.86 603.62 P
-0.01 (class automatically has a getter de\336ned for it. The getter) 126.65 589.62 P
-0.01 (\325s name is the same) 399.07 589.62 P
(as the name of the slot.) 126.65 575.62 T
2 F
(inheritance) 99.65 549.62 T
1 F
(The ability to arrange for classes that ar) 126.65 531.62 T
(e logically r) 317.85 531.62 T
(elated to one another to) 374.19 531.62 T
(shar) 126.65 517.62 T
(e the behaviors and data attributes that they have in common. Each) 147.36 517.62 T
(class inherits fr) 126.65 503.62 T
(om one or mor) 199.94 503.62 T
(e classes, called its super) 271.8 503.62 T
(classes. If no other) 391.22 503.62 T
(class is appr) 126.65 489.62 T
(opriate, then the class inherits fr) 185.79 489.62 T
(om the class) 341.52 489.62 T
4 9.5 Q
(<object>) 403.66 489.62 T
1 11 Q
(.) 449.26 489.62 T
2 F
(initialize) 99.65 463.62 T
1 F
-0.32 (T) 126.65 445.62 P
-0.32 (o pr) 132.38 445.62 P
-0.32 (ovide an initial value for something that you ar) 151.57 445.62 P
-0.32 (e cr) 378.26 445.62 P
-0.32 (eating, such as a slot) 394.98 445.62 P
(or a variable.) 126.65 431.62 T
2 F
(instance) 99.65 405.62 T
1 F
(A member of a class.) 126.65 387.62 T
2 F
(listener) 99.65 361.62 T
1 F
-0.31 (A tool similar to a BASIC interpr) 126.65 343.62 P
-0.31 (eter) 283.69 343.62 P
-0.31 (. Y) 301.34 343.62 P
-0.31 (ou type in a Dylan statement, and the) 312.86 343.62 P
(listener executes the statement and displays any r) 126.65 329.62 T
(eturn values and output) 367.38 329.62 T
(pr) 126.65 315.62 T
(oduced by the statement.) 137.41 315.62 T
2 F
(local variables) 99.65 289.62 T
1 F
(An object that has a name and a value, and has scope within a body) 126.65 271.62 T
(. Y) 454.02 271.62 T
(ou) 465.84 271.62 T
(de\336ne, initialize, and use local variables within a body) 126.65 257.62 T
(. Once the body has) 389.86 257.62 T
-0.4 (r) 126.65 243.62 P
-0.4 (eturned, the local variables ar) 130.79 243.62 P
-0.4 (e no longer de\336ned, and trying to access them) 272.86 243.62 P
(is an err) 126.65 229.62 T
(or) 165.68 229.62 T
(.) 175.21 229.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "250" 252
%%Page: "251" 253
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Glossary) 471.88 702.62 T
2 11 Q
(251) 515.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
0 X
(method) 99.65 665.62 T
1 F
(A kind of function which belongs to a generic function. Although methods) 126.65 647.62 T
(ar) 126.65 633.62 T
(e independent of classes, methods operate on instances of classes. A) 136.29 633.62 T
(method states the kinds of objects that it handles by the type of its r) 126.65 619.62 T
(equir) 453.54 619.62 T
(ed) 478.95 619.62 T
(ar) 126.65 605.62 T
(guments.) 136.29 605.62 T
2 F
(module variable) 99.65 579.62 T
1 F
-0.02 (An object that has a name and a value, much like a global variables in other) 126.65 561.62 P
(languages. When you de\336ne a module variable, you must initialize it \050that) 126.65 547.62 T
(is, pr) 126.65 533.62 T
(ovide an initial value for it\051.) 150.77 533.62 T
2 F
(most speci\336c) 99.65 507.62 T
1 F
(tbd) 126.65 489.62 T
4 9.5 Q
(<object>) 99.65 466.62 T
1 11 Q
(The class that all classes inherit fr) 126.65 449.12 T
(om, either dir) 288.51 449.12 T
(ectly or indir) 354.62 449.12 T
(ectly) 417.2 449.12 T
(.) 439.04 449.12 T
2 F
(object) 99.65 423.12 T
1 F
(An individual piece of data. Also called an instance.) 126.65 405.12 T
2 F
(predicate) 99.65 379.12 T
1 F
(A function that r) 126.65 361.12 T
(eturns tr) 207.45 361.12 T
(ue or false. T) 248.95 361.12 T
(r) 310.25 361.12 T
(ue is r) 314.51 361.12 T
(epr) 343.92 361.12 T
(esented as) 359.95 361.12 T
4 9.5 Q
(#t) 412.79 361.12 T
1 11 Q
(, and false is) 424.19 361.12 T
(r) 126.65 347.12 T
(epr) 130.79 347.12 T
(esented as) 146.82 347.12 T
4 9.5 Q
(#f) 199.67 347.12 T
1 11 Q
(.) 211.07 347.12 T
2 F
(root) 99.65 321.12 T
1 F
(The starting point of the Dylan class heterar) 126.65 303.12 T
(chy; the class) 339.61 303.12 T
4 9.5 Q
(<object>) 406.18 303.12 T
1 11 Q
(, which) 451.78 303.12 T
(all Dylan classes inherit fr) 126.65 289.12 T
(om, either dir) 252.35 289.12 T
(ectly or indir) 318.45 289.12 T
(ectly) 381.03 289.12 T
(.) 402.87 289.12 T
2 F
(setter) 99.65 263.12 T
1 F
(A method that stor) 126.65 245.12 T
(es a value in a slot. By default, each slot in a class auto-) 218.63 245.12 T
(matically has a setter de\336ned for it.) 126.65 231.12 T
2 F
(superclasses) 99.65 205.12 T
1 F
(tbd) 126.65 187.12 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "251" 253
%%Page: "252" 254
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(252) 63.65 702.62 T
0 9.5 Q
(Glossary) 89.65 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
V
4 F
0 X
(#t) 99.65 666.62 T
1 11 Q
(The tr) 126.65 649.12 T
(ue value.) 155.65 649.12 T
2 F
(type constraint) 99.65 623.12 T
1 F
(A type associated with variable that ensur) 126.65 605.12 T
(es that the value of that variable) 331.15 605.12 T
(can hold only objects of that type. V) 126.65 591.12 T
(ariables, slots, and method parameters) 299.81 591.12 T
(can have type constraints.) 126.65 577.12 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "252" 254
%%Page: "253" 255
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 150.95 270.65 510.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 105.95 531.65 141.95 R
V
2 11 Q
0 X
(253) 279.4 124.95 T
306.65 150.95 477.65 510.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 270.65 510.95 R
V
0 X
(Symbols) 99.65 503.62 T
7 9 Q
(<object>) 99.65 491.95 T
1 F
(19) 147.35 491.95 T
2 11 Q
(A) 99.65 470.62 T
7 9 Q
(all-superclasses) 99.65 458.95 T
1 F
(20) 190.55 458.95 T
(arithmetic operators) 99.65 448.95 T
(spaces needed) 108.65 438.95 T
(12) 170.41 438.95 T
2 11 Q
(C) 99.65 417.62 T
1 9 Q
(classes) 99.65 405.95 T
(inheritance) 108.65 395.95 T
(19) 157.71 395.95 T
(naming convention) 108.65 385.95 T
(14) 190.43 385.95 T
(user-defined) 108.65 375.95 T
(21) 163.73 375.95 T
(comments) 99.65 365.95 T
(22) 145.25 365.95 T
(constants) 99.65 355.95 T
(14) 141.53 355.95 T
2 11 Q
(D) 99.65 334.62 T
7 9 Q
(def) 99.65 322.95 T
(ine class) 115.85 322.95 T
1 F
(22) 168.95 322.95 T
(development environments) 99.65 312.95 T
(11) 214.18 312.95 T
2 11 Q
(G) 99.65 291.62 T
1 9 Q
(generic functions) 99.65 279.95 T
(introduction) 108.65 269.95 T
(17) 163.04 269.95 T
(getters) 99.65 259.95 T
(23) 131.01 259.95 T
2 11 Q
(I) 99.65 238.62 T
1 9 Q
(inheritance) 99.65 226.95 T
(19) 148.71 226.95 T
7 F
(instance?) 99.65 216.95 T
1 F
(19) 152.75 216.95 T
(instances) 99.65 206.95 T
(creating) 108.65 196.95 T
(23) 145.3 196.95 T
(initializing slots) 108.65 186.95 T
(24) 176.62 186.95 T
(introduction) 108.65 176.95 T
(18) 163.04 176.95 T
(introduction) 99.65 166.95 T
(12, 15) 154.04 166.95 T
306.65 150.95 477.65 510.95 R
7 X
V
2 11 Q
0 X
(K) 306.65 503.62 T
1 9 Q
(keyword parameters) 306.65 491.95 T
(introduction) 315.65 481.95 T
(24) 370.04 481.95 T
2 11 Q
(L) 306.65 460.62 T
7 9 Q
(let) 306.65 448.95 T
1 F
(27) 327.35 448.95 T
(listeners) 306.65 438.95 T
(11) 344.37 438.95 T
(local variables) 306.65 428.95 T
(15) 368.03 428.95 T
(assigning values to multiple) 315.65 418.95 T
(27) 432.24 418.95 T
2 11 Q
(M) 306.65 397.62 T
7 9 Q
(make) 306.65 385.95 T
1 F
(23) 332.75 385.95 T
(methods) 306.65 375.95 T
(15) 345.81 375.95 T
(relationship to classes) 315.65 365.95 T
(21) 407.14 365.95 T
(module variables) 306.65 355.95 T
(12) 380.1 355.95 T
(multiple values) 306.65 345.95 T
(26) 373.04 345.95 T
2 11 Q
(N) 306.65 324.62 T
1 9 Q
(naming conventions) 306.65 312.95 T
(predicates) 315.65 302.95 T
(19) 361.1 302.95 T
(variables) 315.65 292.95 T
(13, 14) 356.13 292.95 T
2 11 Q
(O) 306.65 271.62 T
7 9 Q
(object-class) 306.65 259.95 T
1 F
(19) 375.95 259.95 T
(objects) 306.65 249.95 T
(18) 338.2 249.95 T
2 11 Q
(P) 306.65 228.62 T
1 9 Q
(predicates) 306.65 216.95 T
(19) 352.1 216.95 T
(naming conventions) 315.65 206.95 T
(19) 401.25 206.95 T
2 11 Q
(R) 306.65 185.62 T
1 9 Q
(root) 306.65 173.95 T
(19) 327.46 173.95 T
98.82 587.95 296.82 645.95 R
7 X
V
98.82 618.4 296.82 645.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
98.82 618.4 296.82 645.95 R
7 X
0 0 0 1 0 0 0 K
V
98.82 639.1 260.82 639.1 2 L
3 H
2 Z
0 X
N
98.82 630.1 260.82 630.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Index) 98.82 598.4 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "253" 255
%%Page: "254" 256
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 699.95 495.65 726.95 R
7 X
0 0 0 1 0 0 0 K
V
63.65 105.95 495.65 142.95 R
V
2 11 Q
0 X
(254) 63.65 125.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 279.65 672.95 R
7 X
V
0 X
(S) 117.65 665.62 T
1 9 Q
(setters) 117.65 653.95 T
(23) 147.82 653.95 T
(slots) 117.65 643.95 T
(getters and setters) 126.65 633.95 T
(23) 203.43 633.95 T
(initializing) 126.65 623.95 T
(24) 174.28 623.95 T
(introduction) 126.65 613.95 T
(21) 181.04 613.95 T
(type constraint) 126.65 603.95 T
(22) 190.8 603.95 T
7 F
(subtype?) 117.65 593.95 T
1 F
(20) 165.35 593.95 T
(superclasses) 117.65 583.95 T
(introduction) 126.65 573.95 T
(19) 181.04 573.95 T
2 11 Q
(T) 117.65 552.62 T
1 9 Q
(type constraints) 117.65 540.95 T
(13) 185.62 540.95 T
7 F
(<object>) 126.65 530.95 T
1 F
(22) 174.35 530.95 T
(of slots) 126.65 520.95 T
(22) 159.41 520.95 T
2 11 Q
(V) 117.65 499.62 T
7 9 Q
(values) 117.65 487.95 T
1 F
(26) 154.55 487.95 T
(variables) 117.65 477.95 T
(naming convention) 126.65 467.95 T
(13) 208.43 467.95 T
(type constraints) 126.65 457.95 T
(13) 194.62 457.95 T
(vectors) 117.65 447.95 T
(introduction) 126.65 437.95 T
(21) 181.04 437.95 T
324.65 150.95 495.65 672.95 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "254" 256
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 256
%%DocumentFonts: Palatino-Italic
%%+ Palatino-Roman
%%+ Palatino-Bold
%%+ Helvetica-Narrow-Bold
%%+ Courier-Bold
%%+ Courier-BoldOblique
%%+ Courier-Oblique
%%+ Courier
%%EOF
